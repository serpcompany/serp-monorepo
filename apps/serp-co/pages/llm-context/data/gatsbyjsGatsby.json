[
  {
    "owner": "gatsbyjs",
    "repo": "gatsby",
    "content": "TITLE: Customizing MDX Rendering with MDXProvider (JSX)\nDESCRIPTION: This code snippet demonstrates how to use the MDXProvider component to replace default HTML tags (h1, p) with custom React components. It imports MDXProvider, defines custom components (MyH1, MyParagraph), and creates a components object mapping tags to components.  The ComponentsWrapper component then renders its children within the MDXProvider, applying the custom components.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-mdx/README.md#_snippet_18\n\nLANGUAGE: JSX\nCODE:\n```\nimport { MDXProvider } from \"@mdx-js/react\"\n\nconst MyH1 = props => <h1 style={{ color: `tomato` }} {...props} />\nconst MyParagraph = props => (\n  <p style={{ fontSize: \"18px\", lineHeight: 1.6 }} {...props} />\n)\n\nconst components = {\n  h1: MyH1,\n  p: MyParagraph,\n}\n\nexport const ComponentsWrapper = ({ children }) => (\n  <MDXProvider components={components}>{children}</MDXProvider>\n)\n```\n\n----------------------------------------\n\nTITLE: Displaying Image with Gatsby Img Component\nDESCRIPTION: This snippet demonstrates how to use the `Img` component from `gatsby-image` to display the image fetched by the GraphQL query. The `fluid` prop is passed the data from the query.  The `alt` attribute is used for accessibility. The data contains various image sizes generated by Gatsby.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/images-and-media/using-gatsby-image.md#_snippet_4\n\nLANGUAGE: JSX\nCODE:\n```\nimport React from \"react\"\nimport { graphql } from \"gatsby\"\nimport Layout from \"../components/layout\"\nimport Img from \"gatsby-image\" // highlight-line\n\nexport default function MyDogs({ data }) {\n  return (\n    <Layout>\n      <h1>I love my corgi!</h1>\n      // highlight-start\n      <Img\n        fluid={data.file.childImageSharp.fluid}\n        alt=\"A corgi smiling happily\"\n      />\n      // highlight-end\n    </Layout>\n  )\n}\n\nexport const query = graphql`\n  query MyQuery {\n    file(relativePath: { eq: \"images/corgi.jpg\" }) {\n      childImageSharp {\n        # Specify the image processing specifications right in the query.\n        fluid {\n          ...GatsbyImageSharpFluid\n        }\n      }\n    }\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: Client-Only Route with Authentication Check (JSX)\nDESCRIPTION: This JSX snippet demonstrates how to create a client-only route using `@reach/router` in Gatsby, and authenticate users. It checks for authentication state before rendering a private route or redirecting to the login page.  The `isAuthenticated` function should be defined elsewhere to check the authentication status. It utilizes the `Router` component from `@reach/router`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/adding-common-features/building-a-site-with-authentication.md#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Router>\n  {isAuthenticated ? <PrivateRoute /> : <Login />}\n</Router>\n```\n\n----------------------------------------\n\nTITLE: PrivateRoute Component Implementation in Gatsby\nDESCRIPTION: This code provides an example implementation of a `PrivateRoute` component.  It checks if a user is logged in using `isLoggedIn()` from `../services/auth`. If the user is not logged in and not already on the `/app/login` page, it redirects them to the login page using `navigate` from `gatsby`. Otherwise, it renders the protected component.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/routing/client-only-routes-and-user-authentication.md#_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\nimport React from \"react\"\nimport { navigate } from \"gatsby\"\nimport { isLoggedIn } from \"../services/auth\"\n\nconst PrivateRoute = ({ component: Component, location, ...rest }) => {\n  if (!isLoggedIn() && location.pathname !== `/app/login`) {\n    navigate(\"/app/login\")\n    return null\n  }\n\n  return <Component {...rest} />\n}\n\nexport default PrivateRoute\n```\n\n----------------------------------------\n\nTITLE: Installing Gatsby Image dependencies using npm\nDESCRIPTION: Installs the necessary npm packages for using the Gatsby Image plugin. These packages include gatsby-plugin-image, gatsby-plugin-sharp, gatsby-source-filesystem, and gatsby-transformer-sharp. This command is run in the project's root directory.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/images-and-media/using-gatsby-plugin-image.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n----------------------------------------\n\nTITLE: Programmatically creating pages in gatsby-node.js\nDESCRIPTION: This code snippet shows how to programmatically create pages using the `createPages` API in `gatsby-node.js`.  It queries Markdown files, extracts their slugs, and then uses the `createPage` action to generate pages for each Markdown file. The component used to render the pages is specified in the `component` option, and data can be passed to the component through the `context` option.  Dependencies include `actions` and `graphql` from Gatsby's Node API.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/routing/creating-routes.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nexports.createPages = async function ({ actions, graphql }) {\n  const { data } = await graphql(`\n    query {\n      allMarkdownRemark {\n        nodes {\n          fields {\n            slug\n          }\n        }\n      }\n    }\n  `)\n  // highlight-start\n  data.allMarkdownRemark.nodes.forEach(node => {\n    const slug = node.fields.slug\n    actions.createPage({\n      path: slug,\n      component: require.resolve(`./src/templates/blog-post.js`),\n      context: { slug: slug },\n    })\n  })\n  // highlight-end\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Layout Component in Gatsby (JSX)\nDESCRIPTION: This snippet demonstrates how to create a simple layout component in Gatsby using JSX. It imports React and defines a functional component named `Layout` that accepts `children` as a prop and wraps them in a `div` with specified styling. This layout component is intended to provide a consistent structure across multiple pages.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/routing/layout-components.md#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\"\n\nexport default function Layout({ children }) {\n  return (\n    <div style={{ margin: `0 auto`, maxWidth: 650, padding: `0 1rem` }}>\n      {children}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing environment variables in browser component\nDESCRIPTION: Shows how to access environment variables in a Gatsby component running in the browser. It uses the `GATSBY_API_URL` environment variable to fetch data from an API endpoint. Only environment variables prefixed with `GATSBY_` are exposed to the browser for security reasons.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/local-development/environment-variables.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport React, { useState, useEffect } from \"react\"\n\nfunction App() {\n  const [data, setData] = useState()\n\n  useEffect(async () => {\n    const result = await fetch(\n      `${process.env.GATSBY_API_URL}/users`\n    ).then(res => res.json())\n\n    setData(result.data)\n  })\n\n  return (\n    <ul>\n      {data.map(user => (\n        <li key={user.id}>\n          <a href={user.url}>{user.name}</a>\n        </li>\n      ))}\n    </ul>\n  )\n}\n\nexport default App\n```\n\n----------------------------------------\n\nTITLE: Configure gatsby-source-contentful with Delivery API\nDESCRIPTION: Configures the gatsby-source-contentful plugin in the gatsby-config.js file to fetch content from Contentful using the Delivery API.  Requires spaceId and accessToken from Contentful.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/sourcing-data/sourcing-from-contentful.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nplugins: [\n  {\n    resolve: `gatsby-source-contentful`,\n    options: {\n      spaceId: `your_space_id_grab_it_from_contentful`,\n      accessToken: `your_token_id_grab_it_from_contentful`,\n    },\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Render Pokemon Data in a React Component\nDESCRIPTION: This JSX code snippet shows how to access and render the data passed through the context in a Gatsby page template. It uses the pageContext prop to access the pokemon data and displays the pokemon's name, image, and abilities.  It also includes links to individual ability pages.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/querying-data/using-gatsby-without-graphql.md#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n// highlight-next-line\nexport default function Pokemon({ pageContext: { pokemon } }) {\n  return (\n    <div style={{ width: 960, margin: \"4rem auto\" }}>\n      {/* highlight-start */}\n      <h1>{pokemon.name}</h1>\n      <img src={pokemon.sprites.front_default} alt={pokemon.name} />\n      {/* highlight-end */}\n      <h2>Abilities</h2>\n      <ul>\n        {/* highlight-start */}\n        {pokemon.abilities.map(ability => (\n          <li key={ability.name}>\n            <Link to={`./pokemon/${pokemon.name}/ability/${ability.name}`}>\n              {ability.name}\n              {/* highlight-end */}\n            </Link>\n          </li>\n        ))}\n      </ul>\n      <Link to=\"/\">Back to all Pok√©mon</Link>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Blog Post Template (JSX)\nDESCRIPTION: This code defines a React component that serves as a template for displaying individual blog posts. It fetches the post data using a GraphQL query and renders the title and content of the post within a layout. Dependencies: React, Gatsby, GraphQL, Layout component. Input: `$slug` parameter for filtering the GraphQL query. Output: HTML markup for a single blog post page.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-wordpress/docs/tutorials/building-a-new-site-wordpress-and-gatsby.md#_snippet_8\n\nLANGUAGE: JSX\nCODE:\n```\nimport React from \"react\"\nimport Layout from \"../components/layout\"\nimport { graphql } from \"gatsby\"\n\nexport default function BlogPost({ data }) {\n  const post = data.allWpPost.nodes[0]\n  console.log(post)\n  return (\n    <Layout>\n      <div>\n        <h1>{post.title}</h1>\n        <div dangerouslySetInnerHTML={{ __html: post.content }} />\n      </div>\n    </Layout>\n  )\n}\nexport const query = graphql`\n  query($slug: String!) {\n    allWpPost(filter: { slug: { eq: $slug } }) {\n      nodes {\n        title\n        content\n      }\n    }\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom useSiteMetadata Hook (JSX)\nDESCRIPTION: This snippet illustrates the creation of a custom `useSiteMetadata` hook that encapsulates the query for site metadata. It uses the `useStaticQuery` hook with a GraphQL query to retrieve various site metadata fields. The returned data is the `siteMetadata` object, enabling reuse across multiple components.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/querying-data/use-static-query.md#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nexport const useSiteMetadata = () => {\n  const { site } = useStaticQuery(\n    graphql`\n      query SiteMetaData {\n        site {\n          siteMetadata {\n            title\n            siteUrl\n            headline\n            description\n            image\n            video\n            twitter\n            name\n            logo\n          }\n        }\n      }\n    `\n  )\n  return site.siteMetadata\n}\n```\n\n----------------------------------------\n\nTITLE: Creating useSiteMetadata Hook in React/JSX\nDESCRIPTION: This snippet defines a custom React hook, `useSiteMetadata`, that fetches site metadata from the GraphQL data layer using `useStaticQuery`. This hook retrieves the `title`, `description`, `twitterUsername`, `image`, and `siteUrl` from the `siteMetadata` object defined in `gatsby-config.js`. It returns the `siteMetadata` object for use in components.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/adding-common-features/adding-seo-component.md#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\nimport { graphql, useStaticQuery } from \"gatsby\"\n\nexport const useSiteMetadata = () => {\n  const data = useStaticQuery(graphql`\n    query {\n      site {\n        siteMetadata {\n          title\n          description\n          twitterUsername\n          image\n          siteUrl\n        }\n      }\n    }\n  `)\n\n  return data.site.siteMetadata\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring gatsby-transformer-cloudinary in gatsby-config.js\nDESCRIPTION: This snippet configures the gatsby-transformer-cloudinary plugin in gatsby-config.js.  It specifies the cloud name, API key, API secret, and upload folder for transforming images using Cloudinary's services. It also includes the configuration of gatsby-source-filesystem.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/images-and-media/using-cloudinary-image-service.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nrequire('dotenv').config({\n  path: `.env.${process.env.NODE_ENV}`,\n});\n\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-source-filesystem`,\n      options: {\n        name: `images`,\n        path: `${__dirname}/src/images`,\n      },\n    },\n    {\n      resolve: 'gatsby-transformer-cloudinary',\n      options: {\n        cloudName: process.env.CLOUDINARY_CLOUD_NAME,\n        apiKey: process.env.CLOUDINARY_API_KEY,\n        apiSecret: process.env.CLOUDINARY_API_SECRET,\n\n        // This folder will be created if it doesn‚Äôt exist.\n        uploadFolder: 'gatsby-cloudinary',\n\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Install and Use Node.js with nvm\nDESCRIPTION: These commands install and set a specific version of Node.js using Node Version Manager (nvm). `nvm install 18` installs Node.js version 18, and `nvm alias default 18` sets it as the default version.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/upgrading-node-js.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnvm install 18\nnvm alias default 18\n```\n\n----------------------------------------\n\nTITLE: Configure gatsby-source-contentful with Preview API\nDESCRIPTION: Configures the gatsby-source-contentful plugin in the gatsby-config.js file to fetch content from Contentful using the Preview API. Requires spaceId, accessToken from Contentful, and host set to `preview.contentful.com`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/sourcing-data/sourcing-from-contentful.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nplugins: [\n  {\n    resolve: `gatsby-source-contentful`,\n    options: {\n      spaceId: `your_space_id_grab_it_from_contentful`,\n      accessToken: `your_token_id_grab_it_from_contentful`,\n      host: `preview.contentful.com`,\n    },\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Customizing HTML Elements with MDXProvider in React\nDESCRIPTION: This code snippet demonstrates how to use the MDXProvider to customize the rendering of HTML elements generated from Markdown. It imports the MDXProvider component and a hypothetical 'DesignSystem' module. It then maps HTML tags like h1, h2, h3, and p to corresponding components from the 'DesignSystem' or to inline custom components. This allows you to use your own design system or custom styling within MDX content. The component wraps children with MDXProvider, making the defined component mappings available throughout the nested content.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/routing/customizing-components.md#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { MDXProvider } from \"@mdx-js/react\"\nimport * as DesignSystem from \"your-design-system\"\n\nexport default function Layout({ children }) {\n  return (\n    <MDXProvider\n      components={{\n        // Map HTML element tag to React component\n        h1: DesignSystem.H1,\n        h2: DesignSystem.H2,\n        h3: DesignSystem.H3,\n        // Or define component inline\n        p: props => <p {...props} style={{ color: \"rebeccapurple\" }} />,\n      }}\n    >\n      {children}\n    </MDXProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Nodes in sourceNodes (New Way)\nDESCRIPTION: This code demonstrates the new, correct way of creating nodes in the `sourceNodes` API.  It first defines the GraphQL type in `createSchemaCustomization` and then creates nodes of that type in `sourceNodes`, fetching remote images using `createRemoteFileNode`. This is the required pattern in Gatsby 4.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-source-plugin-from-v3-to-v4.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexports.createSchemaCustomization = ({ actions }) => {\n  const { createTypes } = actions;\n\n  createTypes(`\n    type CustomImage implements Node {\n      localImage: File @link\n    }\n  `)\n}\n\nexports.sourceNodes = async ({ // highlight-line\n  actions,\n  createNodeId,\n  createContentDigest,\n  store,\n  cache,\n  reporter,\n}) => {\n  const { createNode } = actions\n\n  // code to fetch data\n\n  for (const { url } of remoteImages) {\n    const nodeId = createNodeId(`my-data-${url}`)\n    const image = await createRemoteFileNode({ // highlight-line\n      url: url,\n      parentNodeId: nodeId,\n      store,\n      cache,\n      createNode,\n      createNodeId,\n      reporter,\n    })\n    const node = {\n      id: nodeId,\n      parent: null,\n      children: [],\n      url,\n      localImageId: image.id,\n      internal: {\n        type: `CustomImage`,\n        content: url,\n        contentDigest: createContentDigest(url),\n      },\n    }\n\n    createNode(node)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Environment Variables in Gatsby Functions\nDESCRIPTION: This example shows how to access environment variables within a Gatsby Function. It uses `process.env` to retrieve an environment variable named `CLIENT_TOKEN` for authentication. The function makes a POST request to an external API, including the token in the `Authorization` header. The `node-fetch` package is required for making HTTP requests.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/functions/getting-started.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport fetch from \"node-fetch\"\n\nexport default async function postNewPersonHandler(req, res) {\n  // POST data to an authenticated API\n  const url = \"https://example.com/people\"\n\n  const headers = {\n    \"Content-Type\": \"application/json\",\n    Authorization: `Bearer ${process.env.CLIENT_TOKEN}`,\n  }\n\n  const data = {\n    name: req.body.name,\n    occupation: req.body.occupation,\n    age: req.body.age,\n  }\n\n  try {\n    const result = await fetch(url, {\n      method: \"POST\",\n      headers: headers,\n      body: data,\n    }).then(res => {\n      return res.json()\n    })\n\n    res.json(result)\n  } catch (error) {\n    res.status(500).send(error)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query for Image Data\nDESCRIPTION: This code shows a GraphQL query used to fetch image data from a file located at `images/corgi.jpg`. The `childImageSharp` field allows access to image processing options provided by `gatsby-plugin-sharp`. The `fluid` fragment (`...GatsbyImageSharpFluid`) specifies the fields needed by `gatsby-image` to create a responsive image. The path is relative to the gatsby-source-filesystem configuration.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/images-and-media/using-gatsby-image.md#_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\nimport React from \"react\"\nimport { graphql } from \"gatsby\" // highlight-line\nimport Layout from \"../components/layout\"\n\nexport default function MyDogs({ data }) {\n  return (\n    <Layout>\n      <h1>I love my corgi!</h1>\n    </Layout>\n  )\n}\n\n// highlight-start\nexport const query = graphql`\n  query MyQuery {\n    file(relativePath: { eq: \"images/corgi.jpg\" }) {\n      childImageSharp {\n        # Specify the image processing specifications right in the query.\n        fluid {\n          ...GatsbyImageSharpFluid\n        }\n      }\n    }\n  }\n`\n// highlight-end\n```\n\n----------------------------------------\n\nTITLE: Advanced Proxying with Express Middleware - Gatsby\nDESCRIPTION: This code snippet demonstrates advanced proxying using Express middleware within Gatsby's `gatsby-config.js`. It uses `http-proxy-middleware` to proxy requests to a local server (e.g., Netlify functions). This allows for more granular control over proxying, including path rewriting. The `developMiddleware` function in `gatsby-config.js` is used to add the middleware.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/api-proxy.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { createProxyMiddleware } = require(\"http-proxy-middleware\") //v1.x.x\n// Use implicit require for v0.x.x of 'http-proxy-middleware'\n// const proxy = require('http-proxy-middleware')\n// be sure to replace 'createProxyMiddleware' with 'proxy' where applicable\n\nmodule.exports = {\n  developMiddleware: app => {\n    app.use(\n      \"/.netlify/functions/\",\n      createProxyMiddleware({\n        target: \"http://localhost:9000\",\n        pathRewrite: {\n          \"/.netlify/functions/\": \"\",\n        },\n      })\n    )\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Using Markdown Syntax for Inline Images\nDESCRIPTION: Demonstrates how to use standard Markdown syntax to include images within the body of a Markdown file.  The `gatsby-remark-images` plugin automatically processes these images, optimizing them and making them responsive. The path to the image is relative to the Markdown file.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/images-and-media/working-with-images-in-markdown.md#_snippet_10\n\nLANGUAGE: Markdown\nCODE:\n```\n![Hopper The Rabbit](./rabbit-friend.png)\n```\n\n----------------------------------------\n\nTITLE: Using useStaticQuery Hook in Header Component\nDESCRIPTION: This snippet showcases how to use the `useStaticQuery` hook to fetch site metadata within a component. It includes importing necessary modules and calling `useStaticQuery` with a GraphQL query to retrieve the site title.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-4/index.mdx#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as React from 'react'\n\n// highlight-start\n// Step 1: Import the useStaticQuery hook and graphql tag\nimport { useStaticQuery, graphql } from 'gatsby'\n// highlight-end\n\nconst Header = () => {\n  // highlight-start\n  /* Step 2: Use the useStaticQuery hook and\n    graphql tag to query for data\n    (The query gets run at build time) */\n  const data = useStaticQuery(graphql`\n    query {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `)\n  // highlight-end\n\n  return (\n    <header>\n      {/* highlight-start */}\n      {/* Step 3: Use the data in your component */}\n      <h1>{data.site.siteMetadata.title}</h1>\n      {/* highlight-end */}\n    </header>\n  )\n}\n\nexport default Header\n```\n\n----------------------------------------\n\nTITLE: Creating PrivateRoute Component (React/JSX)\nDESCRIPTION: This React component, PrivateRoute, is a higher-order component that protects routes from unauthorized access. It checks if the user is logged in using the `isLoggedIn` function. If the user is not logged in and is not trying to access the login page, it redirects them to the '/app/login' route. Otherwise, it renders the wrapped component.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/authentication-tutorial.md#_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\"\nimport { navigate } from \"gatsby\"\nimport { isLoggedIn } from \"../services/auth\"\n\nconst PrivateRoute = ({ component: Component, location, ...rest }) => {\n  if (!isLoggedIn() && location.pathname !== `/app/login`) {\n    navigate(\"/app/login\")\n    return null\n  }\n\n  return <Component {...rest} />\n}\n\nexport default PrivateRoute\n```\n\n----------------------------------------\n\nTITLE: Tag Page Template (src/templates/tags.js)\nDESCRIPTION: This React component serves as a template for tag pages. It receives the tag name from the page context and fetches all blog posts associated with that tag using a GraphQL query. The component then renders a list of links to the blog posts.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/adding-tags-and-categories-to-blog-posts.md#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\n\n// Components\nimport { Link, graphql } from \"gatsby\"\n\nconst Tags = ({ pageContext, data }) => {\n  const { tag } = pageContext\n  const { edges, totalCount } = data.allMarkdownRemark\n  const tagHeader = `${totalCount} post${\n    totalCount === 1 ? \"\" : \"s\"\n  } tagged with \"${tag}\"`\n\n  return (\n    <div>\n      <h1>{tagHeader}</h1>\n      <ul>\n        {edges.map(({ node }) => {\n          const { slug } = node.fields\n          const { title } = node.frontmatter\n          return (\n            <li key={slug}>\n              <Link to={slug}>{title}</Link>\n            </li>\n          )\n        })}\n      </ul>\n      {/*\n              This links to a page that does not yet exist.\n              You'll come back to it!\n            */}\n      <Link to=\"/tags\">All tags</Link>\n    </div>\n  )\n}\n\nTags.propTypes = {\n  pageContext: PropTypes.shape({\n    tag: PropTypes.string.isRequired,\n  }),\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      totalCount: PropTypes.number.isRequired,\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            frontmatter: PropTypes.shape({\n              title: PropTypes.string.isRequired,\n            }),\n            fields: PropTypes.shape({\n              slug: PropTypes.string.isRequired,\n            }),\n          }),\n        }).isRequired\n      ),\n    }),\n  }),\n}\n\nexport default Tags\n\nexport const pageQuery = graphql`\n  query($tag: String) {\n    allMarkdownRemark(\n      limit: 2000\n      sort: { frontmatter: { date: DESC }}\n      filter: { frontmatter: { tags: { in: [$tag] } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n          }\n        }\n      }\n    }\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: Define a Client Component with \"use client\" Directive\nDESCRIPTION: Defines a React component as a client component using the `'use client'` directive. This directive indicates that the component should be hydrated on the client-side, enabling interactivity and state management. The example shows a simple joke component with a button and conditional rendering.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/performance/partial-hydration.md#_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n// highlight-next-line\n\"use client\"\n\nimport * as React from \"react\"\n\nconst Joke = () => {\n  const [isShown, show] = React.useReducer(() => true, false)\n\n  return (\n    <main>\n      <button onClick={show}>Show me a joke</button>\n      {isShown && <p>Why couldn‚Äôt the React component understand the joke? Because it didn‚Äôt get the context.</p>}\n    </main>\n  )\n}\n\nexport default Joke\n```\n\n----------------------------------------\n\nTITLE: React Context Provider in Create React App\nDESCRIPTION: This snippet illustrates how to use the React Context API to share state in a Create React App application. It wraps the entire application in a `ThemeContext.Provider` to make the default theme accessible to all components.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/porting-from-create-react-app-to-gatsby.md#_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\"\n\nconst defaultTheme = \"light\"\nconst ThemeContext = React.createContext(defaultTheme)\n\nfunction App() {\n  return (\n    <ThemeContext.Provider value={defaultTheme}>\n      {/* App, routing, and other components */}\n    </ThemeContext.Provider>\n  )\n}\n\nexport default App\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query in Gatsby Page Template\nDESCRIPTION: This GraphQL query, intended for use in a Gatsby page template, takes a `slug` argument and queries for a single `markdownRemark` node that matches the provided `slug`. It returns the `html` and `frontmatter` (containing the `title`) of the matching Markdown file. This allows the page template to display content specific to the URL.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/programmatically-create-pages-from-data.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const query = graphql`\n  query($slug: String!) {\n    ...\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: Optimizing Pages for Content Sync in gatsby-node.js\nDESCRIPTION: This JavaScript code snippet demonstrates how to optimize pages for Content Sync on Gatsby Cloud by passing the `ownerNodeId` parameter to the `createPage` action.  The `ownerNodeId` should be set to the ID of the node that is used to create the page path, which helps ensure that Content Sync redirects content authors to the correct preview page.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/creating-and-modifying-pages.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst posts = result.data.allPosts.nodes\n\nposts.forEach((post) => {\n  createPage({\n    path: `/blog/${post.slug}/`,\n    component: blogPost,\n    context: {},\n    ownerNodeId: post.id, // highlight-line\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Using Gatsby Actions in onCreateNode (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to use the `createNodeField` action within the `onCreateNode` Gatsby API. It shows how to destructure the `actions` object to access specific actions.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/config-files/actions.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// For function createNodeField\nexports.onCreateNode = ({ node, getNode, actions }) => {\n  const { createNodeField } = actions\n}\n```\n\n----------------------------------------\n\nTITLE: Getting gatsbyImageData using getImage in Gatsby\nDESCRIPTION: This code snippet demonstrates how to safely retrieve a `gatsbyImageData` object using the `getImage` helper function from `gatsby-plugin-image`.  It shows how `getImage` handles different input types, including `File` objects and nodes with a `gatsbyImageData` field, returning `undefined` if the object or any intermediate properties are undefined.  It requires the `gatsby-plugin-image` package to be installed.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/built-in-components/gatsby-plugin-image.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { getImage } from \"gatsby-plugin-image\"\n\nconst image = getImage(data.avatar)\n\n// This is the same as:\n\nconst image = data?.avatar?.childImageSharp?.gatsbyImageData\n```\n\n----------------------------------------\n\nTITLE: Create Event Pages (gatsby-node.js)\nDESCRIPTION: This snippet iterates through the queried event nodes and creates a page for each event using the 'createPage' API. It extracts the event 'slug' and uses it as the 'path' for the new page. The 'component' is set to './src/templates/event.js', and the 'context' includes the 'eventID'.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/building-a-theme.md#_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\n// query for events and create pages\nexports.createPages = async ({ actions, graphql, reporter }) => {\n  const basePath = \"/\"\n  actions.createPage({\n    path: basePath,\n    component: require.resolve(\"./src/templates/events.js\"),\n  })\n\n  const result = await graphql(`\n    query {\n      allEvent(sort: { startDate: ASC }) {\n        nodes {\n          id\n          slug\n        }\n      }\n    }\n  `)\n\n  if (result.errors) {\n    reporter.panic(\"error loading events\", result.errors)\n    return\n  }\n\n  // highlight-start\n  const events = result.data.allEvent.nodes\n\n  events.forEach(event => {\n    const slug = event.slug\n\n    actions.createPage({\n      path: slug,\n      component: require.resolve(\"./src/templates/event.js\"),\n      context: {\n        eventID: event.id,\n      },\n    })\n  })\n  // highlight-end\n```\n\n----------------------------------------\n\nTITLE: Using the Custom useSiteMetadata Hook in a Page Component (JSX)\nDESCRIPTION: This code shows how to import and use the custom `useSiteMetadata` hook within a page component. It retrieves the `title` and `siteUrl` from the hook and renders the title within an H1 tag. This demonstrates the reusability of custom hooks built upon `useStaticQuery`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/querying-data/use-static-query.md#_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\nimport React from \"react\"\nimport { useSiteMetadata } from \"../hooks/use-site-metadata\"\n\nexport default function Home() {\n  const { title, siteUrl } = useSiteMetadata()\n  return <h1>welcome to {title}</h1>\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching WordPress Posts Data using GraphQL\nDESCRIPTION: This JavaScript snippet queries WordPress posts using Gatsby's GraphQL API within the `createPages` function. It executes the GraphQL query defined previously to fetch the `id` and `uri` of all WordPress posts.  The result of the query is stored in the `result` variable, which will be used in subsequent steps to create pages.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-wordpress/docs/tutorials/querying-data.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nexports.createPages = async ({ actions, graphql, reporter }) => {\n  const result = await graphql(`\n    {\n      allWpPost {\n        nodes {\n          id\n          uri\n        }\n      }\n    }\n  `)\n}\n```\n\n----------------------------------------\n\nTITLE: Installing gatsby-remark-images\nDESCRIPTION: Installs the `gatsby-remark-images` plugin, which is used to process images embedded directly within Markdown or MDX content. This plugin optimizes images and automatically creates responsive versions.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/images-and-media/working-with-images-in-markdown.md#_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install gatsby-remark-images\n```\n\n----------------------------------------\n\nTITLE: Running Gatsby Codemods for Image Migration\nDESCRIPTION: This command uses `gatsby-codemods` to migrate from the old `gatsby-image` component to the new `gatsby-plugin-image` components.  It updates GraphQL queries and components in the project.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/images-and-media/using-gatsby-plugin-image.md#_snippet_10\n\nLANGUAGE: Shell\nCODE:\n```\nnpx gatsby-codemods gatsby-plugin-image\n```\n\n----------------------------------------\n\nTITLE: Increasing payload limit (JS)\nDESCRIPTION: This code snippet demonstrates how to increase the payload limit for JSON requests in Gatsby Functions. It modifies the `bodyParser` configuration to allow larger JSON payloads. This helps prevent `413 Request Entity Too Large` errors.  The `config` object is exported to override default body parsing behavior. Dependencies: None.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/functions/middleware-and-helpers.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// limit payload to 10mb\nexport const config = {\n  bodyParser: {\n    json: {\n      limit: `10mb`,\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying User Profile Data in Gatsby\nDESCRIPTION: This component displays user profile information, including their name and email, retrieved using the `getUser` function.  The component depends on react and the custom `auth` services.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/authentication-tutorial.md#_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\"\nimport { getUser } from \"../services/auth\" // highlight-line\n\nconst Profile = () => (\n  <>\n    <h1>Your profile</h1>\n    <ul>\n      {/* highlight-start */}\n      <li>Name: {getUser().name}</li>\n      <li>E-mail: {getUser().email}</li>\n      {/* highlight-end */}\n    </ul>\n  </>\n)\n\nexport default Profile\n```\n\n----------------------------------------\n\nTITLE: Configuring Site Metadata and Plugins in Gatsby\nDESCRIPTION: This configuration file sets the `siteMetadata` with a title and configures two plugins: `gatsby-transform-plugin` (without options) and `gatsby-plugin-name` (with options).  This demonstrates defining metadata and incorporating plugins with custom configurations.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/config-files/gatsby-config.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  siteMetadata: {\n    title: `Gatsby`,\n  },\n  plugins: [\n    `gatsby-transform-plugin`,\n    {\n      resolve: `gatsby-plugin-name`,\n      options: {\n        optionA: true,\n        optionB: `Another option`,\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Environment Variables in Gatsby\nDESCRIPTION: This code snippet demonstrates how to access environment variables within a Gatsby project using `process.env.<variable name>`. It retrieves the `CONTENTFUL_SPACE_ID` and `CONTENTFUL_ACCESS_TOKEN` to configure Contentful. Optionally, it retrieves `CONTENTFUL_HOST` to configure the host, if the environment variable is set. This is useful for configuring APIs without hardcoding sensitive information.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/cloud/managing-environment-variables.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst contentfulConfig = {\n  spaceId: process.env.CONTENTFUL_SPACE_ID,\n  accessToken: process.env.CONTENTFUL_ACCESS_TOKEN,\n}\n\nif (process.env.CONTENTFUL_HOST) {\n  contentfulConfig.host = process.env.CONTENTFUL_HOST\n}\n```\n\n----------------------------------------\n\nTITLE: Valid vs. Invalid React Components\nDESCRIPTION: Demonstrates a valid React component that returns a single top-level `div` containing multiple elements, and an invalid component that returns multiple top-level elements.  React components must return a single root element.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-2/index.mdx#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as React from 'react'\n\nconst ValidComponent = () => {\n  return (\n    <div>\n      <h1>A valid component!</h1>\n      <p>This will work fine.</p>\n      <p>\n        Since there is only one top-level element: the div.\n      </p>\n    </div>\n  )\n}\n\nconst InvalidComponent = () => {\n  return (\n    <h1>This won't work.</h1>\n    <p>Because there are two elements at the top level.</p>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL query with gatsbyImageData\nDESCRIPTION: This code snippet shows the new GraphQL syntax using `gatsbyImageData` to query image data. Configuration options like `layout` are passed as arguments to the resolver.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/image-migration-guide.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { graphql } from \"gatsby\"\n\nexport const query = graphql`\n  {\n    file(relativePath: { eq: \"images/example.jpg\" }) {\n      childImageSharp {\n        gatsbyImageData(layout: FIXED)\n      }\n    }\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: Import GatsbyImage from gatsby-plugin-image\nDESCRIPTION: This snippet demonstrates how to import the `GatsbyImage` component from `gatsby-plugin-image` instead of `gatsby-image`. This is a required change for migrating to the new plugin.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/image-migration-guide.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// import Img from \"gatsby-image\"\nimport { GatsbyImage } from \"gatsby-plugin-image\"\n```\n\n----------------------------------------\n\nTITLE: GraphQL Fragment Definition\nDESCRIPTION: This snippet demonstrates a GraphQL fragment used to define a reusable part of a query. The `SiteInformation` fragment is defined on the `Site` type and includes the `buildTime` field. This fragment is then used in a page query to fetch the build time. The corresponding TypeScript type is automatically generated.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/local-development/graphql-typegen.md#_snippet_3\n\nLANGUAGE: GraphQL\nCODE:\n```\nfragment SiteInformation on Site {\n  buildTime\n}\n```\n\n----------------------------------------\n\nTITLE: Create Blog Post Pages (JavaScript)\nDESCRIPTION: This code adds functionality to the `gatsby-node.js` file to iterate over the blog post data fetched from WordPress and use the `createPage` action to generate individual pages for each post. It specifies the path, component (template), and context (slug) for each page. Dependencies: `gatsby-node.js` file, `gatsby-source-wordpress` plugin configured, blog post template file (`src/templates/blog-post.js`). Input: None. Output: Creation of individual blog post pages in the Gatsby site.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-wordpress/docs/tutorials/building-a-new-site-wordpress-and-gatsby.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst path = require(`path`)\n\nexports.createPages = ({ graphql, actions }) => {\n  const { createPage } = actions\n  return graphql(`\n    {\n      allWpPost(sort: { fields: [date] }) {\n        nodes {\n          title\n          excerpt\n          content\n          slug\n        }\n      }\n    }\n  `).then(result => {\n    //highlight-start\n    result.data.allWpPost.nodes.forEach(node => {\n      createPage({\n        path: node.slug,\n        component: path.resolve(`./src/templates/blog-post.js`),\n        context: {\n          // This is the $slug variable\n          // passed to blog-post.js\n          slug: node.slug,\n        },\n      })\n    })\n    //highlight-end\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using AniLink for page transitions\nDESCRIPTION: This JSX snippet demonstrates how to use the `AniLink` component with the `paintDrip` transition.  The `to` prop specifies the destination page, and other props can customize the transition further.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/adding-common-features/adding-page-transitions-with-plugin-transition-link.md#_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<AniLink paintDrip to=\"page-4\">\n  Go to Page 4\n</AniLink>\n```\n\n----------------------------------------\n\nTITLE: Custom Image CDN URL Generator (TypeScript)\nDESCRIPTION: This snippet shows an example of a custom Image CDN URL generator implementation. It takes an input image and generates a URL according to a specific CDN's requirements.  This allows Gatsby to integrate with existing CDN services without adhering to a strict URL format.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/v5.13/index.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nhttps://github.com/gatsbyjs/gatsby/blob/4a780fbac717b1df337f156e2ac4b2da6478106b/packages/gatsby-adapter-netlify/src/image-cdn-url-generator.ts\n```\n\n----------------------------------------\n\nTITLE: Gatsby Hook for Site Metadata\nDESCRIPTION: This code snippet defines a custom Gatsby hook, `useSiteMetadata`, to fetch site metadata using a static GraphQL query. The hook leverages `useStaticQuery` to retrieve site information, including the title and social media links, from the `gatsby-config.js` file. This allows components to easily access and display these commonly customized values.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/plugins-and-themes/theme-conventions.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { graphql, useStaticQuery } from \"gatsby\"\n\nexport default function useSiteMetadata() {\n  const data = useStaticQuery(graphql`\n    {\n      site {\n        siteMetadata {\n          title\n          social {\n            twitter\n            github\n            instagram\n          }\n        }\n      }\n    }\n  `)\n\n  return data.site.siteMetadata\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering useStaticQuery Data in React Component\nDESCRIPTION: This snippet demonstrates how to render the data returned by the `useStaticQuery` hook in a React component. It accesses the `title` field from the `siteMetadata` object of the returned data and renders it within an `<h1>` element.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/graphql-data-layer/graphql-api.md#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst data = useStaticQuery(graphql`\n  query HeaderQuery {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n  }\n`)\nreturn (\n  // highlight-start\n  <header>\n    <h1>{data.site.siteMetadata.title}</h1>\n  </header>\n  // highlight-end\n)\n```\n\n----------------------------------------\n\nTITLE: Global CSS Styles in global.css\nDESCRIPTION: This CSS snippet sets the background color of the `html` element to 'peachpuff' and the text color of `a` elements to 'rebeccapurple'. This demonstrates setting global styles that affect the entire site.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/styling/global-css.md#_snippet_5\n\nLANGUAGE: CSS\nCODE:\n```\nhtml {\n  background-color: peachpuff;\n}\n\na {\n  color: rebeccapurple;\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting pluginOptionsSchema in gatsby-node.ts (TypeScript)\nDESCRIPTION: This code snippet exports the `pluginOptionsSchema` API in the plugin's `gatsby-node` file, making it available to Gatsby for validating plugin options. This allows Gatsby to run the validation schema during the plugin initialization phase.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/creating-a-source-plugin/part-4/index.mdx#_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nexport type { IPluginOptions } from \"./types\"\n\nexport { onPluginInit } from \"./on-plugin-init\"\nexport { sourceNodes } from \"./source-nodes\"\nexport { createSchemaCustomization } from \"./create-schema-customization\"\n// highlight-next-line\nexport { pluginOptionsSchema } from \"./plugin-options-schema\"\n```\n\n----------------------------------------\n\nTITLE: Adding the GraphQL query\nDESCRIPTION: This JavaScript code demonstrates how to add a GraphQL query to a page component using the `graphql` tagged template literal. The query is assigned to a constant variable named `query` that is exported.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/querying-data/page-query.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst HomePage = () => {\n  return (\n    <div>\n      Hello!\n    </div>\n  )\n}\n\n+ export const query = graphql`\n+   # query will go here\n+ `\n```\n\n----------------------------------------\n\nTITLE: Generate Pages with GraphQL\nDESCRIPTION: This code uses the `createPages` Node API in `gatsby-node.js` to generate pages dynamically based on the GraphQL query. It fetches product slugs and creates a page for each product, passing the slug in the context.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/why-gatsby-uses-graphql.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nexports.createPages = async ({ actions: { createPage }, graphql }) => {\n  const results = await graphql(`\n    {\n      allProductsJson {\n        edges {\n          node {\n            slug\n          }\n        }\n      }\n    }\n  `)\n\n  results.data.allProductsJson.edges.forEach(edge => {\n    const product = edge.node\n\n    createPage({\n      path: `/gql/${product.slug}/`,\n      component: require.resolve(\"./src/templates/product-graphql.js\"),\n      context: {\n        slug: product.slug,\n      },\n    })\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Pages from Markdown in gatsby-node.js\nDESCRIPTION: This JavaScript code snippet demonstrates how to programmatically create pages from Markdown files using the `createPages` API in `gatsby-node.js`. It queries for all Markdown nodes, extracts the `path` from the frontmatter of each file, and creates a page for each node using a specified template. The `pagePath` is passed to the page context for use in the template's GraphQL query.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/creating-and-modifying-pages.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst path = require(\"path\")\n\n// Implement the Gatsby API ‚ÄúcreatePages‚Äù. This is called once the\n// data layer is bootstrapped to let plugins create pages from data.\nexports.createPages = async ({ graphql, actions, reporter }) => {\n  const { createPage } = actions\n\n  // Query for markdown nodes to use in creating pages.\n  const result = await graphql(\n    `\n      {\n        allMarkdownRemark(limit: 1000) {\n          edges {\n            node {\n              frontmatter {\n                path\n              }\n            }\n          }\n        }\n      }\n    `\n  )\n\n  // Handle errors\n  if (result.errors) {\n    reporter.panicOnBuild(`Error while running GraphQL query.`)\n    return\n  }\n\n  // Create pages for each markdown file.\n  const blogPostTemplate = path.resolve(`src/templates/blog-post.js`)\n  result.data.allMarkdownRemark.edges.forEach(({ node }) => {\n    const path = node.frontmatter.path\n    createPage({\n      path,\n      component: blogPostTemplate,\n      // In your blog post template's graphql query, you can use pagePath\n      // as a GraphQL variable to query for data from the markdown file.\n      context: {\n        pagePath: path,\n      },\n    })\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Shell: Install gatsby-transformer-sharp\nDESCRIPTION: This command installs the `gatsby-transformer-sharp` plugin, which is necessary for Gatsby to process images and create `ImageSharp` nodes in the data layer.  These nodes are then used by `GatsbyImage` component.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-7/index.mdx#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm install gatsby-transformer-sharp\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query for Posts with Linked Category\nDESCRIPTION: This GraphQL query retrieves all Agility CMS posts along with their custom fields and the linked category's custom fields.  It demonstrates how the resolvers defined in gatsby-node.js enable querying the linkedContent_agilityCategory field on the agilityPost node, allowing access to related content items.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/sourcing-from-agilitycms.md#_snippet_12\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  posts: allAgilityPost {\n    nodes {\n      customFields {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        image {\n          url\n          label\n        }\n        content\n      }\n      linkedContent_agilityCategory {\n        customFields {\n          title\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Tying the Search Widget Together with React InstantSearch\nDESCRIPTION: This JSX code combines the `SearchBox` and `SearchResult` components into a complete search widget. It initializes the Algolia search client, manages the search query and focus state, and uses the `InstantSearch` component to orchestrate the search process.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/adding-search-with-algolia.md#_snippet_10\n\nLANGUAGE: JSX\nCODE:\n```\nimport React, { createRef, useState, useMemo } from \"react\"\nimport algoliasearch from \"algoliasearch/lite\"\nimport { InstantSearch } from \"react-instantsearch\"\nimport { ThemeProvider } from \"styled-components\"\nimport StyledSearchBox from \"./styled-search-box\"\nimport StyledSearchResult from \"./styled-search-result\"\nimport StyledSearchRoot from \"./styled-search-root\"\nimport useClickOutside from \"./use-click-outside\"\n\nconst theme = {\n  foreground: \"#050505\",\n  background: \"white\",\n  faded: \"#888\",\n}\n\nexport default function Search({ indices }) {\n  const rootRef = createRef()\n  const [query, setQuery] = useState()\n  const [hasFocus, setFocus] = useState(false)\n  const searchClient = useMemo(\n    () =>\n      algoliasearch(\n        process.env.GATSBY_ALGOLIA_APP_ID,\n        process.env.GATSBY_ALGOLIA_SEARCH_KEY\n      ),\n    []\n  )\n\n  useClickOutside(rootRef, () => setFocus(false))\n\n  return (\n    <ThemeProvider theme={theme}>\n      <StyledSearchRoot ref={rootRef}>\n        <InstantSearch searchClient={searchClient} indexName={indices[0].name}>\n          <StyledSearchBox\n            onChange={query => setQuery(query)}\n            onFocus={() => setFocus(true)}\n            hasFocus={hasFocus}\n          />\n          <StyledSearchResult\n            show={query && query.length > 0 && hasFocus}\n            indices={indices}\n          />\n        </InstantSearch>\n      </StyledSearchRoot>\n    </ThemeProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using the getImage helper function\nDESCRIPTION: This code snippet shows how to use the `getImage` helper function to extract the image data from a GraphQL query result. It simplifies passing the correct data to the `GatsbyImage` component.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/image-migration-guide.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getImage, GatsbyImage } from \"gatsby-plugin-image\"\n\nconst HomePage = ({ data }) => {\n  const image = getImage(data.file)\n  return (\n    <>\n      <GatsbyImage image={image} alt=\"please include an alt\" />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Form with a Gatsby Function (Frontend)\nDESCRIPTION: This example showcases the frontend implementation of a simple form in a Gatsby page that submits data to a Gatsby Function.  It uses React's `useState` hook to manage form values and server responses.  The `onSubmit` function sends a POST request to the `/api/form` endpoint and updates the `serverResponse` state with the response from the function.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/functions/getting-started.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as React from \"react\"\n\nexport default function FormPage() {\n  const [value, setValue] = React.useState({})\n  const [serverResponse, setServerResponse] = React.useState(``)\n\n  // Listen to form changes and save them.\n  function handleChange(e) {\n    value[e.target.id] = e.target.value\n    setServerResponse(``)\n    setValue({ ...value })\n  }\n\n  // When the form is submitted, send the form values\n  // to our function for processing.\n  async function onSubmit(e) {\n    e.preventDefault()\n    const response = await window\n      .fetch(`/api/form`, {\n        method: `POST`,\n        headers: {\n          \"content-type\": \"application/json\",\n        },\n        body: JSON.stringify(value),\n      })\n      .then(res => res.json())\n\n    setServerResponse(response)\n  }\n\n  return (\n    <div>\n      <div>Server response: {serverResponse}</div>\n      <form onSubmit={onSubmit} method=\"POST\" action=\"/api/form\">\n        <label htmlFor=\"name\">Name:</label>\n        <input\n          type=\"text\"\n          id=\"name\"\n          value={value[`name`] || ``}\n          onChange={handleChange}\n        />\n        <input type=\"submit\" />\n      </form>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Gatsby to use MDX plugin\nDESCRIPTION: Updates the `gatsby-config.js` file to include `gatsby-plugin-mdx` and `gatsby-source-filesystem` plugins.  `gatsby-source-filesystem` is configured to source pages from the `src/pages` directory. This allows Gatsby to process MDX files as pages.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/routing/mdx.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  plugins: [\n     // Your other plugins...\n     `gatsby-plugin-mdx`,\n     {\n       resolve: `gatsby-source-filesystem`,\n       options: {\n         name: `pages`,\n         path: `${__dirname}/src/pages`,\n       },\n     },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Image Layout with StaticImage in JSX\nDESCRIPTION: This code snippet demonstrates how to set the layout of a StaticImage component using the layout prop.  The layout is set to \"fixed\", which means the image will be rendered at a fixed size. The image source is specified with the src prop and an alt text is provided.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/built-in-components/gatsby-plugin-image.md#_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<StaticImage\n  src=\"./dino.png\"\n  alt=\"A dinosaur\"\n  // highlight-next-line\n  layout=\"fixed\"\n/>\n```\n\n----------------------------------------\n\nTITLE: JSON Data with Field to Proxy\nDESCRIPTION: This JSON data includes a field named `start_date` that is incompatible with GraphQL naming conventions. The following GraphQL snippet will demonstrate how to proxy this field to be queryable as `startDate`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/graphql-data-layer/schema-customization.md#_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"Doe\",\n  \"firstName\": \"Zoe\",\n  \"email\": \"zoe@example.com\",\n  \"start_date\": \"2022/08/01\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying File nodes using GraphQL\nDESCRIPTION: Demonstrates how to query File nodes using GraphQL to retrieve information about files such as extension, directory, and modified time.  The allFile query returns a list of all File nodes, and the nodes field contains the individual File node data.  Use GraphiQL to explore available keys.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-filesystem/README.md#_snippet_2\n\nLANGUAGE: GraphQL\nCODE:\n```\n{\n  allFile {\n    nodes {\n      extension\n      dir\n      modifiedTime\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Layout Component with global CSS import (layout.js)\nDESCRIPTION: This React component serves as a layout, importing the global CSS file (`layout.css`) to apply styles to all pages using this layout. It renders the children components within a `div` element.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/styling/global-css.md#_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\nimport React from \"react\"\nimport \"./layout.css\"\n\nexport default function Layout({ children }) {\n  return <div>{children}</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Using the SEO component in page (add one-off meta tags)\nDESCRIPTION: This snippet shows how to add one-off meta tags or scripts to a page using the SEO component. By passing `children` to the `SEO` component, you can include custom elements, such as a JSON-LD script for structured data, within the `Head` element of the page.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/adding-common-features/adding-seo-component.md#_snippet_5\n\nLANGUAGE: JSX\nCODE:\n```\nimport React from \"react\"\nimport { SEO } from \"../components/seo\"\n\nconst OneOffPage = () => {\n  return (\n    <main>\n      Hello World\n    </main>\n  )\n}\n\nexport default OneOffPage\n\n// highlight-start\nexport const Head = () => (\n  <SEO title=\"One Off Page\">\n    <script type=\"application/ld+json\">{JSON.stringify({})}</script>\n  </SEO>\n)\n// highlight-end\n```\n\n----------------------------------------\n\nTITLE: Basic Blog Post Page Template\nDESCRIPTION: This React component serves as a basic page template for blog posts. It imports necessary components (Layout, Seo) and renders hardcoded content within the Layout component. This demonstrates the initial setup of the dynamic page template before integrating dynamic data.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-6/index.mdx#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react'\nimport Layout from '../components/layout'\nimport Seo from '../components/seo'\n\nconst BlogPost = () => {\n  return (\n    <Layout pageTitle=\"Super Cool Blog Posts\">\n      <p>My blog post contents will go here (eventually).</p>\n    </Layout>\n  )\n}\n\nexport const Head = () => <Seo title=\"Super Cool Blog Posts\" />\n\nexport default BlogPost\n```\n\n----------------------------------------\n\nTITLE: Conditional Browser Global Access in Gatsby (React)\nDESCRIPTION: This snippet demonstrates how to safely access browser globals like `window` in a Gatsby component by wrapping the code in a conditional statement to ensure it only runs in the browser environment, preventing build errors.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/porting-from-create-react-app-to-gatsby.md#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nif (typeof window !== `undefined`) {\n  // code that references a browser global\n  window.alert(\"Woohoo!\")\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing gatsby-transformer-remark with gatsby-plugin-mdx in gatsby-config.js\nDESCRIPTION: This code snippet demonstrates how to replace the `gatsby-transformer-remark` plugin with `gatsby-plugin-mdx` in the `gatsby-config.js` file. It also updates the plugin options to use `gatsbyRemarkPlugins` for sub-plugins.  This configures Gatsby to use the MDX plugin for processing markdown.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/routing/migrate-remark-to-mdx.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n{{\n- resolve: `gatsby-transformer-remark`\n+ resolve: `gatsby-plugin-mdx`\n  options: {\n-   plugins: [\n+   gatsbyRemarkPlugins: [\n```\n\n----------------------------------------\n\nTITLE: Query for Fixed Image Data with GraphQL\nDESCRIPTION: This JSX code demonstrates how to query for a fixed image using GraphQL and display it with the Gatsby Img component. It uses useStaticQuery to fetch the image data and passes the fixed data to the Img component.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/built-in-components/gatsby-image.md#_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport Img from \"gatsby-image\"\n\nexport default function Image() {\n  const data = useStaticQuery(graphql`\n    query {\n      file(relativePath: { eq: \"images/default.jpg\" }) {\n        childImageSharp {\n          # Specify a fixed image and fragment.\n          # The default width is 400 pixels\n          // highlight-start\n          fixed {\n            ...GatsbyImageSharpFixed\n          }\n          // highlight-end\n        }\n      }\n    }\n  `)\n  return (\n    <div>\n      <h1>Hello gatsby-image</h1>\n      <Img\n        fixed={data.file.childImageSharp.fixed} {/* highlight-line */}\n        alt=\"Gatsby Docs are awesome\"\n      />\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing gatsby-plugin-feed in gatsby-config.js\nDESCRIPTION: This code demonstrates customizing the `gatsby-plugin-feed` in `gatsby-config.js` to create a custom RSS feed schema. It includes a GraphQL query to fetch site metadata and Markdown content, and a `serialize` method to format the data for the RSS feed.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/adding-common-features/adding-an-rss-feed.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-feed`,\n      options: {\n        query: `\n          {\n            site {\n              siteMetadata {\n                title\n                description\n                siteUrl\n                site_url: siteUrl\n              }\n            }\n          }\n        `,\n        feeds: [\n          {\n            /* highlight-start */\n            serialize: ({ query: { site, allMarkdownRemark } }) => {\n              return allMarkdownRemark.edges.map(edge => {\n                /* highlight-end */\n                return Object.assign({}, edge.node.frontmatter, {\n                  description: edge.node.excerpt,\n                  date: edge.node.frontmatter.date,\n                  url: site.siteMetadata.siteUrl + edge.node.fields.slug,\n                  guid: site.siteMetadata.siteUrl + edge.node.fields.slug,\n                  custom_elements: [{ \"content:encoded\": edge.node.html }],\n                })\n              })\n            },\n            query: `\n              {\n                // highlight-next-line\n                allMarkdownRemark(sort: { frontmatter: { date: DESC }}) {\n                  edges {\n                    node {\n                      excerpt\n                      html\n                      fields { slug }\n                      frontmatter {\n                        title\n                        date\n                      }\n                    }\n                  }\n                }\n              }\n            `,\n            output: \"/rss.xml\",\n            title: \"Your Site's RSS Feed\",\n          },\n        ],\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Nodes in TypeScript\nDESCRIPTION: This TypeScript code snippet demonstrates how to update existing GraphQL nodes using the `createNode` API. It iterates through an array of `updatedEntries` and calls `createNode` for each entry. Calling `createNode` with a node's existing ID will update that node. The type `node` is not explicitly defined but assumed to be compatible with `createNode`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/creating-a-source-plugin/part-5/index.mdx#_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\nupdatedEntries.forEach(node => createNode(node))\n```\n\n----------------------------------------\n\nTITLE: Add Image Plugins to gatsby-config.js\nDESCRIPTION: This code snippet configures the `gatsby-plugin-image` and `gatsby-plugin-sharp` plugins in the `gatsby-config.js` file. By adding these plugins to the `plugins` array, Gatsby will automatically use them to process and optimize images in your site, improving performance.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-3/index.mdx#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  siteMetadata: {\n    title: \"My First Gatsby Site\",\n  },\n  plugins: [\n    // highlight-start\n    \"gatsby-plugin-image\",\n    \"gatsby-plugin-sharp\",\n    // highlight-end\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Resolve Component Path in Gatsby\nDESCRIPTION: This function `resolveComponentPath` resolves the path to a component, considering shadowing. It filters the theme list, constructs possible component paths, and checks for the existence of shadow files with compatible extensions.  It iterates through themes to find the correct component path.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/conceptual/how-shadowing-works.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nresolveComponentPath({ theme, component, originalRequestComponent }) {\n  // don't include matching theme in possible shadowing paths\n  const themes = this.themes.filter(\n    ({ themeName }) => themeName !== theme.themeName\n  )\n\n  const themesArray = [\n    path.join(this.projectRoot, `src`, theme.themeName),\n  ].concat(\n    themes\n      .reverse()\n      .map(({ themeDir }) => path.join(themeDir, `src`, theme.themeName))\n  )\n\n  const acceptableShadowFileNames = this.getAcceptableShadowFileNames(\n    path.basename(component),\n    originalRequestComponent\n  )\n\n  for (const theme of themesArray) {\n    const possibleComponentPath = path.join(theme, component)\n    debug(`possibleComponentPath`, possibleComponentPath)\n\n    let dir\n    try {\n      // we use fs/path instead of require.resolve to work with\n      // TypeScript and alternate syntaxes\n      dir = fs.readdirSync(path.dirname(possibleComponentPath))\n    } catch (e) {\n      continue\n    }\n    const existsDir = dir.map(filepath => path.basename(filepath))\n\n    // if no exact path, search for extension\n    const matchingShadowFile = acceptableShadowFileNames.find(shadowFile =>\n      existsDir.includes(shadowFile)\n    )\n    if (matchingShadowFile) {\n      return path.join(\n        path.dirname(possibleComponentPath),\n        matchingShadowFile\n      )\n    }\n  }\n  return null\n}\n```\n\n----------------------------------------\n\nTITLE: Create Pages from Lever Jobs\nDESCRIPTION: Example gatsby-node.js code to create Gatsby pages for each Lever job posting. This code fetches Lever job data using GraphQL and creates pages using a template, passing the job ID as context.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-lever/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst _ = require(`lodash`)\nconst Promise = require(`bluebird`)\nconst path = require(`path`)\nconst { slash } = require(`gatsby-core-utils`)\n\nexports.createPages = ({ graphql, actions }) => {\n  const { createPage } = actions\n  return new Promise((resolve, reject) => {\n    // The ‚Äúgraphql‚Äù function allows us to run arbitrary\n    // queries against the local WordPress graphql schema. Think of\n    // it like the site has a built-in database constructed\n    // from the fetched data that you can run queries against.\n\n    // ==== PAGES (LEVER) ====\n    graphql(\n      `\n        {\n          allLever {\n            edges {\n              node {\n                id\n              }\n            }\n          }\n        }\n      `\n    )\n      .then(result => {\n        if (result.errors) {\n          console.log(result.errors)\n          reject(result.errors)\n        }\n\n        // Create Lever pages.\n        const pageTemplate = path.resolve(\"./src/templates/page.js\")\n        // We want to create a detailed page for each\n        // lever node. We'll just use the ID for the slug.\n        _.each(result.data.allLever.edges, edge => {\n          // Gatsby uses Redux to manage its internal state.\n          // Plugins and sites can use functions like \"createPage\"\n          // to interact with Gatsby.\n          createPage({\n            // Each page is required to have a `path` as well\n            // as a template component. The `context` is\n            // optional but is often necessary so the template\n            // can query data specific to each page.\n            path: `/${edge.node.id}/`,\n            component: slash(pageTemplate),\n            context: {\n              id: edge.node.id,\n            },\n          })\n        })\n      })\n      // ==== END PAGES ====\n\n      // resolve() must be called at the end so Gatsby knows that we're done add pages.\n      .then(resolve())\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using Layout Component in index.js\nDESCRIPTION: This React component represents the home page (`index.js`) and utilizes the `Layout` component to wrap its content. This ensures that the global styles defined in `layout.css` are applied to the home page.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/styling/global-css.md#_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\nimport React from \"react\"\nimport Layout from \"../components/layout\"\n\nexport default function Home() {\n  return <Layout>Hello world!</Layout>\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Elements with sx Prop - JSX\nDESCRIPTION: This code demonstrates how to use the `sx` prop to style elements within a React component. The `sx` prop accepts a style object that can reference values from the Theme UI theme.  In this example, it's using values from `theme.space` and `theme.colors`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/styling/theme-ui.md#_snippet_11\n\nLANGUAGE: JSX\nCODE:\n```\n/** @jsx jsx */\nimport { jsx } from \"theme-ui\"\n\nexport default function Header(props) {\n  return (\n    <header\n      sx={{\n        // this uses the value from `theme.space[4]`\n        padding: 4,\n        // these use values from `theme.colors`\n        color: \"background\",\n        backgroundColor: \"primary\",\n      }}\n    >\n      {props.children}\n    </header>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring gatsby-transformer-remark options (JavaScript)\nDESCRIPTION: Demonstrates configuring the `gatsby-transformer-remark` plugin options, including `footnotes`, `gfm`, `plugins`, and `jsFrontmatterEngine`. These options customize the way Markdown files are processed.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-remark/README.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-transformer-remark`,\n      options: {\n        // Footnotes mode (default: true)\n        footnotes: true,\n        // GitHub Flavored Markdown mode (default: true)\n        gfm: true,\n        // Add your gatsby-remark-* plugins here\n        plugins: [],\n        // Enable JS for https://github.com/jonschlinkert/gray-matter#optionsengines (default: false)\n        // It's not advised to set this to \"true\" and this option will likely be removed in the future\n        jsFrontmatterEngine: false,\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring gatsby-source-shopify plugin\nDESCRIPTION: Configures the gatsby-source-shopify plugin in gatsby-config.js. It sets the plugin options such as the Shopify app password, store URL, and sales channel. It also requires the dotenv package for environment variable management.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-shopify/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"dotenv\").config()\n\nmodule.exports = {\n  plugins: [\n    {\n      resolve: \"gatsby-source-shopify\",\n      options: {\n        password: process.env.SHOPIFY_APP_PASSWORD,\n        storeUrl: process.env.GATSBY_MYSHOPIFY_URL,\n        salesChannel: process.env.SHOPIFY_APP_ID, // Optional but recommended\n      },\n    },\n    \"gatsby-plugin-image\",\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: StaticImage with Emotion CSS Prop (JSX)\nDESCRIPTION: This example demonstrates how to use the `StaticImage` component with Emotion's `css` prop.  This approach allows you to apply styles directly to the component without using styled components, which are not supported by `StaticImage`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/built-in-components/gatsby-plugin-image.md#_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n// Emotion\n\nexport function Dino() {\n  return (\n    <StaticImage\n      src=\"trex.png\"\n      css={css`\n        border: 4px green dashed;\n      `}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: StaticImage Component Usage\nDESCRIPTION: Demonstrates how to use the StaticImage component in a Gatsby component. The src prop specifies the path to the image, and the alt prop provides alternative text for accessibility.  This example showcases a local image being used.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-image/README.md#_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nexport function Dino() {\n  return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query for Linked Author Data\nDESCRIPTION: This GraphQL query demonstrates how to query data from both Markdown posts and linked author information after configuring node mappings in Gatsby.  The `author` field in the query now returns the linked author object with name, bio, and twitter properties.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/config-files/gatsby-config.md#_snippet_16\n\nLANGUAGE: graphql\nCODE:\n```\nquery ($slug: String!) {\n  markdownRemark(fields: { slug: { eq: $slug } }) {\n    html\n    fields {\n      slug\n    }\n    frontmatter {\n      title\n      author {\n        # This now links to the author object\n        name\n        bio\n        twitter\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: File Naming Convention Example for i18n in Gatsby\nDESCRIPTION: Illustrates the file naming convention for internationalization (i18n) using the gatsby-plugin-i18n in a Gatsby project. This convention uses language keys (e.g., 'en' for English) as part of the filename, which helps generate routes based on language.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/adding-common-features/localization-i18n.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nFile - src/pages/about.**en**.js\n\nURL - /**en**/about\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Analytics Plugin in Gatsby\nDESCRIPTION: This code snippet demonstrates how to configure the `gatsby-plugin-google-analytics` plugin within a `gatsby-config.js` file. It shows how to specify the `trackingId` and set the `head` option to `true` to ensure the tracking script is loaded in the head of the DOM. This helps to prevent issues where the analytics script is not properly loaded.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-google-analytics/README.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  siteMetadata: {\n    /* your metadata */\n  },\n  plugins: [\n    // Make sure this plugin is first in the array of plugins\n    {\n      resolve: `gatsby-plugin-google-analytics`,\n      options: {\n        trackingId: \"UA-111111111-1\",\n        // this option places the tracking script into the head of the DOM\n        head: true,\n        // other options\n      },\n    },\n  ],\n  // other plugins\n}\n```\n\n----------------------------------------\n\nTITLE: Using GetServerData types for SSR\nDESCRIPTION: This snippet illustrates the use of `GetServerData`, `GetServerDataProps`, and `GetServerDataReturn` types for server-side rendering with `getServerData` in Gatsby. It defines a `ServerDataProps` type and applies it to the `getServerData` function.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/custom-configuration/typescript.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as React from \"react\"\nimport type { GetServerDataProps, GetServerDataReturn } from \"gatsby\"\n\ntype ServerDataProps = {\n  hello: string\n}\n\nconst Page = () => <div>Hello World</div>\nexport default Page\n\nexport async function getServerData(\n  props: GetServerDataProps\n): GetServerDataReturn<ServerDataProps> {\n  return {\n    status: 200,\n    headers: {},\n    props: {\n      hello: \"world\",\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Cache Headers in Gatsby Serverless Function\nDESCRIPTION: This JavaScript snippet demonstrates how to set cache headers in a Gatsby serverless function. It uses the `res.setHeader` method to set the `Cache-Control` header, enabling caching of the function response for a specified duration (60 seconds in this case).\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/cloud/deploying-functions-on-gatsby-cloud.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst sample = (req, res) => {\n  res.setHeader(`Cache-Control`, `public, max-age=60`);\n  res.status(200).json({ message: \"Hello, World!\" });\n};\n\nexport default sample;\n```\n\n----------------------------------------\n\nTITLE: Using Layout Component in Home Page - JavaScript\nDESCRIPTION: This snippet integrates the Layout component into the Home page component.  The Layout component is used to wrap the content of the page, setting the page title to \"Home Page\". It imports React and the Layout component.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-2/index.mdx#_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as React from 'react'\nimport Layout from '../components/layout' // highlight-line\n\nconst IndexPage = () => {\n  return (\n    {\n      /* highlight-start */\n    }\n    <Layout pageTitle=\"Home Page\">\n      <p>I'm making this by following the Gatsby Tutorial.</p>\n    </Layout>\n    {\n      /* highlight-end */\n    }\n  )\n}\n\nexport const Head = () => <title>Home Page</title>\n\nexport default IndexPage\n```\n\n----------------------------------------\n\nTITLE: Hero Image Component with StaticImage in Gatsby\nDESCRIPTION: This code demonstrates how to create a hero image component in Gatsby using the `StaticImage` component from `gatsby-plugin-image`. It uses CSS grid to overlay text on top of the image and demonstrates setting aspect ratio and image formats.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/images-and-media/using-gatsby-plugin-image.md#_snippet_9\n\nLANGUAGE: JSX\nCODE:\n```\nimport * as React from \"react\"\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nexport function Hero() {\n  return (\n    <div style={{ display: \"grid\" }}>\n      {/* You can use a GatsbyImage component if the image is dynamic */}\n      <StaticImage\n        style={{\n          gridArea: \"1/1\",\n          // You can set a maximum height for the image, if you wish.\n          // maxHeight: 600,\n        }}\n        layout=\"fullWidth\"\n        // You can optionally force an aspect ratio for the generated image\n        aspectRatio={3 / 1}\n        // This is a presentational image, so the alt should be an empty string\n        alt=\"\"\n        // Assisi, Per√∫gia, It√°lia by Bernardo Ferrari, via Unsplash\n        src={\n          \"https://images.unsplash.com/photo-1604975999044-188783d54fb3?w=2589\"\n        }\n        formats={[\"auto\", \"webp\", \"avif\"]}\n      />\n      <div\n        style={{\n          // By using the same grid area for both, they are stacked on top of each other\n          gridArea: \"1/1\",\n          position: \"relative\",\n          // This centers the other elements inside the hero component\n          placeItems: \"center\",\n          display: \"grid\",\n        }}\n      >\n        {/* Any content here will be centered in the component */}\n        <h1>Hero text</h1>\n      </div>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Plugin Options in gatsby-node.js\nDESCRIPTION: This snippet demonstrates how a Gatsby plugin can access options passed to it in `gatsby-config.js`. The `onPreInit` API receives a `pluginOptions` argument containing the options specified in the config file. This example logs a message to the console using the `message` option.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/plugins-and-themes/configuring-usage-with-plugin-options.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexports.onPreInit = (_, pluginOptions) => {\n  console.log(\n    `logging: \"${pluginOptions.message}\" to the console` // highlight-line\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Images with GatsbyImage GraphQL\nDESCRIPTION: This GraphQL query demonstrates how to use the `gatsbyImage` resolver to retrieve image data for both `FIXED` and `CONSTRAINED` layouts. It replaces the `gatsbyImageData` field and supports common image operations, enabling the use of the Image CDN feature in Gatsby.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/v4.10/index.md#_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  speakerPage {\n    socialImage {\n      gatsbyImage(layout: FIXED, width: 440)\n    }\n    image {\n      gatsbyImage(layout: CONSTRAINED, width: 280, height: 280)\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring gatsby-source-wordpress in gatsby-config.js\nDESCRIPTION: This code configures the gatsby-source-wordpress plugin within the gatsby-config.js file. It specifies the WordPress site's URL, schema prefix, hard cache settings, and post limits. It leverages environment variables for the WordPress GraphQL URL, allowing for flexible configurations.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/sourcing-data/sourcing-from-wordpress.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  ...\n  plugins: [\n    ...,\n    {\n      resolve: `gatsby-source-wordpress`,\n      options: {\n        url:\n        // allows a fallback url if WPGRAPHQL_URL is not set in the env, this may be a local or remote WP instance.\n          process.env.WPGRAPHQL_URL ||\n          `https://localhost/graphql`,\n        schema: {\n          //Prefixes all WP Types with \"Wp\" so \"Post and allPost\" become \"WpPost and allWpPost\".\n          typePrefix: `Wp`,\n        },\n        develop: {\n          //caches media files outside of Gatsby's default cache an thus allows them to persist through a cache reset.\n          hardCacheMediaFiles: true,\n        },\n        type: {\n          Post: {\n            limit:\n              process.env.NODE_ENV === `development`\n                ? // Lets just pull 50 posts in development to make it easy on ourselves (aka. faster).\n                  50\n                : // and we don't actually need more than 5000 in production for this particular site\n                  5000,\n          },\n        },\n      },\n    },\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Create Pages from Markdown Data with GraphQL in gatsby-node.js\nDESCRIPTION: This code snippet demonstrates how to use the `createPages` API in `gatsby-node.js` to create pages dynamically from Markdown data. It queries all MarkdownRemark nodes via GraphQL, iterates over the results, and uses the `createPage` action to create a page for each node. The `slug` field is used as the page's path, and a `blog-post.js` template is used to render the page. The `slug` is also passed in the context, enabling the template to query for the specific Markdown data.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/programmatically-create-pages-from-data.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexports.createPages = async function ({ actions, graphql }) {\n  const { data } = await graphql(`\n    query {\n      allMarkdownRemark {\n        edges {\n          node {\n            fields {\n              slug\n            }\n          }\n        }\n      }\n    }\n  `)\n  // highlight-start\n  data.allMarkdownRemark.edges.forEach(edge => {\n    const slug = edge.node.fields.slug\n    actions.createPage({\n      path: slug,\n      component: require.resolve(`./src/templates/blog-post.js`),\n      context: { slug: slug },\n    })\n  })\n  // highlight-end\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Featured Image in a React Component\nDESCRIPTION: Demonstrates how to import `GatsbyImage` and `getImage` from `gatsby-plugin-image` and use them to display the featured image in a React component.  It retrieves the image data from the GraphQL query result and passes it to the `GatsbyImage` component.  It utilizes `getImage` to retrieve the image data in a format that can be used with `<GatsbyImage />`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/images-and-media/working-with-images-in-markdown.md#_snippet_6\n\nLANGUAGE: JSX\nCODE:\n```\nimport * as React from \"react\"\nimport { graphql } from \"gatsby\"\n// highlight-start\nimport { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n// highlight-end\n\nexport default function BlogPost({ data }) {\n  let post = data.markdownRemark\n\n  // highlight-start\n  let featuredImg = getImage(post.frontmatter.featuredImage?.childImageSharp?.gatsbyImageData)\n  // highlight-end\n\n  return (\n    <main>\n      <h1>{post.frontmatter.title}</h1>\n      // highlight-start\n      <GatsbyImage image={featuredImg} />\n      // highlight-end\n      <div dangerouslySetInnerHTML={{ __html: post.html }} />\n    </main>\n  )\n}\n\nexport const query = graphql`\n  query PostQuery($id: String) {\n    markdownRemark(id: { eq: $id }) {\n      html\n      frontmatter {\n        title\n        featuredImage {\n          childImageSharp {\n            gatsbyImageData(width: 800)\n          }\n        }\n      }\n    }\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: Using the SEO component in page (override values)\nDESCRIPTION: This example shows how to override the default title value in the SEO component when used on a page. By passing a `title` prop to the `SEO` component within the `Head` export, the page-specific title is used instead of the default value from `siteMetadata`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/adding-common-features/adding-seo-component.md#_snippet_4\n\nLANGUAGE: JSX\nCODE:\n```\nimport React from \"react\"\nimport { SEO } from \"../components/seo\"\n\nconst SecondPage = () => {\n  return (\n    <main>\n      Hello World\n    </main>\n  )\n}\n\nexport default SecondPage\n\n// highlight-start\nexport const Head = () => (\n  <SEO title=\"Page Two\" />\n)\n// highlight-end\n```\n\n----------------------------------------\n\nTITLE: Defining a Named Splat Route in Gatsby\nDESCRIPTION: This code defines a named splat route that captures all segments after `/image/` and assigns them to the `awsKey` parameter. The `params` object contains a key `awsKey` with the value of the captured segments. This allows you to access the splat route value with a specific name.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/routing/file-system-route-api.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default function ImagePage({ params }) {\n  const param = params[`awsKey`]\n\n  // When visiting a route like `image/hello/world`,\n  // the value of `param` is `hello/world`.\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Input Change in React\nDESCRIPTION: This snippet demonstrates how to handle changes in an input field using React's controlled component pattern. The `handleChange` function updates the component's state with the new input value whenever the user types into the input field.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/adding-common-features/adding-forms.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n  handleChange(event) {\n    this.setState({value: event.target.value});\n  }\n  ...\n   render() {\n    return (\n      ...\n      <input type=\"text\" value={this.state.value} onChange={this.handleChange} />\n      ...\n    )\n   }\n```\n\n----------------------------------------\n\nTITLE: Filter with GraphQL - Less Than or Equal Operator\nDESCRIPTION: This query filters MarkdownRemark nodes to find titles for which `timeToRead` is less than or equal to 4 minutes using the `lte` operator. It demonstrates numerical comparisons within GraphQL filters.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/graphql-reference.md#_snippet_12\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  # lte: I want all the titles for which `timeToRead` is less than or equal to 4 minutes.\n  example_lte: allMarkdownRemark(filter: { timeToRead: { lte: 4 } }) {\n    edges {\n      node {\n        frontmatter {\n          title\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Schema Customization for RemoteFile Interface in TypeScript\nDESCRIPTION: This code snippet shows how to use Gatsby's `createSchemaCustomization` API to implement the `RemoteFile` interface on a GraphQL type named `ImageAsset`. This interface is required for Gatsby's Image CDN feature to work. It defines the `ImageAsset` type with a required `alt` field and specifies that it implements both `Node` and `RemoteFile` interfaces.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/creating-a-source-plugin/part-6/index.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport type { GatsbyNode } from \"gatsby\"\n\n    export const createSchemaCustomization: GatsbyNode[`createSchemaCustomization`] =\n      ({ actions }) => {\n        const { createTypes } = actions\n\n        createTypes(`\n          type ImageAsset implements Node & RemoteFile {\n            alt: String!\n          }\n        `)\n      }\n```\n\n----------------------------------------\n\nTITLE: Importing and Using CSS Module in React Component\nDESCRIPTION: This React component imports a CSS Module and applies its styles to a section element. The CSS class is referenced from the imported object `containerStyles` using dot notation, ensuring that the class name is unique and component-scoped.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/styling/css-modules.md#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\"\n// highlight-next-line\nimport * as containerStyles from \"./container.module.css\"\n\nexport default function Container({ children }) {\n  return (\n    // highlight-next-line\n    <section className={containerStyles.container}>{children}</section>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling GraphQL Type Generation in Gatsby\nDESCRIPTION: This code shows how to enable the GraphQL Typegen feature by setting `graphqlTypegen` to `true`. This simplifies content integration through automatic TypeScript type generation.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/config-files/gatsby-config.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  graphqlTypegen: true,\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Page Context in gatsby-node.js\nDESCRIPTION: This JavaScript code snippet demonstrates how to modify the context of a page using the `onCreatePage` API in `gatsby-node.js`. It deletes the existing page and creates a new page with the original properties and an updated context object. Here, it adds a `house` property to the context, which can then be accessed in the page's GraphQL queries or directly in the component via `pageContext`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/creating-and-modifying-pages.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nexports.onCreatePage = ({ page, actions }) => {\n  const { createPage, deletePage } = actions\n\n  deletePage(page)\n  // You can access the variable \"house\" in your page queries now\n  createPage({\n    ...page,\n    context: {\n      ...page.context,\n      house: `Gryffindor`,\n    },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Create Pages with Unstructured Data in Gatsby\nDESCRIPTION: This code snippet demonstrates how to use the createPages API in gatsby-node.js to fetch data and create pages without using GraphQL.  It fetches Pok√©mon data and creates a page listing all Pok√©mon and individual pages for each Pok√©mon. The data is passed to the page templates through the context property.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/querying-data/using-gatsby-without-graphql.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexports.createPages = async ({ actions: { createPage } }) => {\n  // `getPokemonData` is a function that fetches our data\n  const allPokemon = await getPokemonData([\"pikachu\", \"charizard\", \"squirtle\"])\n\n  // Create a page that lists all Pok√©mon.\n  createPage({\n    path: `/`,\n    component: require.resolve(\"./src/templates/all-pokemon.js\"),\n    context: { allPokemon }, // highlight-line\n  })\n\n  // Create a page for each Pok√©mon.\n  allPokemon.forEach(pokemon => {\n    createPage({\n      path: `/pokemon/${pokemon.name}/`, // highlight-line\n      component: require.resolve(\"./src/templates/pokemon.js\"),\n      context: { pokemon }, // highlight-line\n    })\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing a Remark Transformer Plugin in JavaScript\nDESCRIPTION: This JavaScript code initializes a local Gatsby Remark transformer plugin. It exports a function that receives the markdownAST and pluginOptions as parameters.  Inside the function, the markdownAST can be manipulated. The function must return the modified markdownAST.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/remark-plugin-tutorial.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = ({ markdownAST }, pluginOptions) => {\n  // Manipulate AST\n\n  return markdownAST\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Dynamic Route Parameters\nDESCRIPTION: This code shows how to access the `name` parameter from a dynamic route defined as `src/pages/users/[name].js`.  The parameter is accessed through the `props.params` object. This is the standard way to retrieve dynamic segment values in Gatsby pages.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/routing/file-system-route-api.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction UserPage(props) {\n  const name = props.params.name\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom HTTP Headers\nDESCRIPTION: This example demonstrates how to set custom HTTP headers on the response of a given path using the `headers` option.  It defines the source path and the headers to be applied.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/config-files/gatsby-config.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  headers: [\n    {\n      source: `/some-path`,\n      headers: [\n        {\n          key: `x-custom-header`,\n          value: `Hello World`,\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using useStaticQuery Hook in Gatsby\nDESCRIPTION: This snippet demonstrates how to use the `useStaticQuery` hook in a Gatsby component to fetch data. It takes a GraphQL query string as an argument and returns the query results in an object. The snippet shows a query to fetch the site title.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/graphql-data-layer/graphql-api.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = useStaticQuery(graphql`\n  query HeaderQuery {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n  }\n`)\n```\n\n----------------------------------------\n\nTITLE: Custom Query Field with Complex Input Types in gatsby-node.js\nDESCRIPTION: This code snippet demonstrates how to add a custom root query field called `contributors` that accepts a complex input type `PostsCountInput`.  The input type allows filtering contributors based on the number of posts they have written, using `min` and `max` arguments. It also shows how to add a resolver to the `ContributorJson` to count the number of posts written by each contributor.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/graphql-data-layer/schema-customization.md#_snippet_39\n\nLANGUAGE: js\nCODE:\n```\nexports.createResolvers = ({ createResolvers }) => {\n  const resolvers = {\n    Query: {\n      contributors: {\n        type: [\"ContributorJson\"],\n        args: {\n          postsCount: \"input PostsCountInput { min: Int, max: Int }\",\n        },\n        resolve: async (source, args, context, info) => {\n          const { max, min = 0 } = args.postsCount || {}\n          const operator = max != null ? { lte: max } : { gte: min }\n\n          const { entries } = await context.nodeModel.findAll({\n            query: {\n              filter: {\n                posts: operator,\n              },\n            },\n            type: \"ContributorJson\",\n          })\n\n          return entries\n        },\n      },\n    },\n    ContributorJson: {\n      posts: {\n        type: `Int`,\n        resolve: async (source, args, context, info) => {\n          const { entries } = await context.nodeModel.findAll({ type: \"MarkdownRemark\" })\n          const posts = entries.filter(post => post.frontmatter.author === source.email)\n          return Array.from(posts).length\n        },\n      },\n    },\n  }\n  createResolvers(resolvers)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring gatsby-plugin-manifest in gatsby-config.js\nDESCRIPTION: This configuration adds the `gatsby-plugin-manifest` to the `plugins` array in `gatsby-config.js`. It specifies options like the app's name, short name, start URL, theme color, background color, display mode, and icon path. The crossOrigin attribute enables CORS support for the manifest.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/performance/add-a-manifest-file.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  plugins: [\n    {\n      resolve: `gatsby-plugin-manifest`,\n      options: {\n        name: \"GatsbyJS\",\n        short_name: \"GatsbyJS\",\n        start_url: \"/\",\n        background_color: \"#6b37bf\",\n        theme_color: \"#6b37bf\",\n        // Enables \"Add to Homescreen\" prompt and disables browser UI (including back button)\n        // see https://developers.google.com/web/fundamentals/web-app-manifest/#display\n        display: \"standalone\",\n        icon: \"src/images/icon.png\", // This path is relative to the root of the site.\n        // An optional attribute which provides support for CORS check.\n        // If you do not provide a crossOrigin option, it will skip CORS for manifest.\n        // Any invalid keyword or empty string defaults to `anonymous`\n        crossOrigin: `use-credentials`,\n      },\n    },\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Site Title with useStaticQuery in a Header Component (JSX)\nDESCRIPTION: This code snippet demonstrates how to use the `useStaticQuery` hook to query for the site title from `gatsby-config.js` within a React component. It imports necessary modules from Gatsby, defines a GraphQL query for the site title, and renders the title within a header element. The component leverages the `useStaticQuery` hook to fetch data at build time.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/querying-data/use-static-query.md#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nexport default function Header() {\n  const data = useStaticQuery(graphql`\n    query HeaderQuery {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `)\n\n  return (\n    <header>\n      <h1>{data.site.siteMetadata.title}</h1>\n    </header>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Recent Posts Field to AuthorJson Type in gatsby-node.js\nDESCRIPTION: This code snippet shows how to add a `recentPosts` field to the `AuthorJson` type using `createResolvers`. The resolver queries the `MarkdownRemark` type for posts by the author's email and published after a certain date. It utilizes `context.nodeModel.findAll` with a filter to retrieve the relevant posts.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/graphql-data-layer/schema-customization.md#_snippet_36\n\nLANGUAGE: js\nCODE:\n```\nexports.createResolvers = ({ createResolvers }) => {\n  const resolvers = {\n    AuthorJson: {\n      recentPosts: {\n        type: [\"MarkdownRemark\"],\n        resolve: async (source, args, context, info) => {\n          const { entries } = await context.nodeModel.findAll({\n            query: {\n              filter: {\n                frontmatter: {\n                  author: { eq: source.email },\n                  date: { gt: \"2019-01-01\" },\n                },\n              },\n            },\n            type: \"MarkdownRemark\",\n          })\n          return entries\n        },\n      },\n    },\n  }\n  createResolvers(resolvers)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Plugin Options Schema with Joi\nDESCRIPTION: This snippet shows how to define a schema for plugin options using the `pluginOptionsSchema` API and the Joi library. The schema enforces the types and requirements for each option, ensuring users configure the plugin correctly.  It defines `optionA` as a required boolean, `message` as a required string, and `optionB` as an optional boolean.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/plugins-and-themes/configuring-usage-with-plugin-options.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexports.pluginOptionsSchema = ({ Joi }) => {\n  return Joi.object({\n    optionA: Joi.boolean().required().description(`Enables optionA.`),\n    message: Joi.string()\n      .required()\n      .description(`The message logged to the console.`),\n    optionB: Joi.boolean().description(`Enables optionB.`),\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using useScrollRestoration Hook in Gatsby\nDESCRIPTION: This code demonstrates how to use the `useScrollRestoration` hook to preserve the scroll position of a custom scrollable `ul` element. The hook takes a unique key as an argument to identify the scroll container. The returned props are spread onto the target element to enable scroll restoration. It requires the `gatsby` and `gatsby-react-router-scroll` packages.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/routing/scroll-restoration.md#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useScrollRestoration } from \"gatsby\"\nimport countryList from \"../utils/country-list\"\n\nexport default function PageComponent() {\n  const ulScrollRestoration = useScrollRestoration(`page-component-ul-list`)\n\n  return (\n    <ul style={{ height: 200, overflow: `auto` }} {...ulScrollRestoration}>\n      {countryList.map(country => (\n        <li>{country}</li>\n      ))}\n    </ul>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Link Component to Check for File Downloads\nDESCRIPTION: Extends the custom Link component to check if the link is a file download. If it is a file, it uses a standard <a> tag, otherwise, it uses the GatsbyLink.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/built-in-components/gatsby-link.md#_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n  const file = /\\.[0-9a-z]+$/i.test(to)\n\n  ...\n\n  if (internal) {\n    if (file) {\n        return (\n          <a href={to} {...other}>\n            {children}\n          </a>\n      )\n    }\n    return (\n      <GatsbyLink to={to} {...other}>\n        {children}\n      </GatsbyLink>\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Contact Form Integration with Netlify Forms in JSX\nDESCRIPTION: This snippet shows how to integrate a contact form with Netlify Forms. Key attributes include `data-netlify=\"true\"` and `name=\"contact\"` on the `<form>` element.  Hidden input fields `bot-field` and `form-name` are used for spam filtering and identification.  Data will be submitted to Netlify's form handling service.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/building-a-contact-form.md#_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n+ <form method=\"post\" netlify-honeypot=\"bot-field\" data-netlify=\"true\" name=\"contact\">\n+   <input type=\"hidden\" name=\"bot-field\" />\n+   <input type=\"hidden\" name=\"form-name\" value=\"contact\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring gatsby-config.js for Images and Posts in the same Directory\nDESCRIPTION: Configures the `gatsby-config.js` file to source both markdown files and images from the same directory (`src/content`). This allows GraphQL to automatically pick up both content types as part of Gatsby's data layer. It leverages `gatsby-source-filesystem` to specify the content path.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/images-and-media/working-with-images-in-markdown.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`,\n    `gatsby-transformer-remark`,\n    `gatsby-plugin-image`,\n    {\n      resolve: `gatsby-source-filesystem`,\n      options: {\n        path: `${__dirname}/src/content`, // highlight-line\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Forms in Gatsby Functions (Backend)\nDESCRIPTION: This example demonstrates how to handle form submissions in a Gatsby Function.  It accesses the form values through `req.body`. The example includes basic form validation and returns an error if the 'name' field is missing.  In a real-world scenario, you would perform more complex validation and save the data or trigger other actions.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/functions/getting-started.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default function formHandler(req, res) {\n  // req.body has the form values\n  console.log(req.body)\n\n  // Here is where you would validate the form values and\n  // do any other actions with it you need (e.g. save it somewhere or\n  // trigger an action for the user).\n  //\n  // e.g.\n\n  if (!req.body.name) {\n    return res.status(422).json(\"Name field is required\")\n  }\n\n  return res.json(`OK`)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring image properties in GraphQL query\nDESCRIPTION: Example showing how to configure image properties within a GraphQL query using the `gatsbyImageData` resolver. It sets `width`, `placeholder`, and `formats` for the image. This allows for optimization and customization of the image at query time.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/images-and-media/using-gatsby-plugin-image.md#_snippet_6\n\nLANGUAGE: GraphQL\nCODE:\n```\nquery ($id: String) {\n  blogPost(id: { eq: $id }) {\n    title\n    body\n    author\n    avatar {\n      # highlight-start\n      childImageSharp {\n        gatsbyImageData(\n          width: 200\n          placeholder: BLURRED\n          formats: [AUTO, WEBP, AVIF]\n        )\n      }\n      # highlight-end\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring gatsby-remark-images with gatsby-transformer-remark\nDESCRIPTION: Configures the `gatsby-remark-images` plugin within the `gatsby-transformer-remark` plugin in `gatsby-config.js`.  This makes `gatsby-remark-images` a sub-plugin of `gatsby-transformer-remark`. It sets the `maxWidth` option to 800, limiting the maximum width of inline images.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/images-and-media/working-with-images-in-markdown.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  plugins: [\n    // Rest of the plugins...\n    {\n      resolve: `gatsby-transformer-remark`,\n      options: {\n        plugins: [\n          {\n            resolve: `gatsby-remark-images`,\n            options: {\n              maxWidth: 800,\n            },\n          },\n        ],\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Using Shortcodes with MDXProvider in Gatsby (JSX)\nDESCRIPTION: This code snippet shows how to use the MDXProvider to make React components available as shortcodes in MDX files. It imports necessary modules (React, MDXProvider, Link), defines a shortcodes object that maps component names to their implementations, and renders the MDX content within the MDXProvider, making the specified components globally accessible.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-mdx/README.md#_snippet_19\n\nLANGUAGE: JSX\nCODE:\n```\nimport React from \"react\"\nimport { MDXProvider } from \"@mdx-js/react\"\nimport { Link } from \"gatsby\"\nimport { YouTube, Twitter, TomatoBox } from \"./ui\"\n\nconst shortcodes = { Link, YouTube, Twitter, TomatoBox }\n\nexport const Layout = ({ children }) => (\n  <MDXProvider components={shortcodes}>{children}</MDXProvider>\n)\n```\n\n----------------------------------------\n\nTITLE: gatsbyPath Example in React Component\nDESCRIPTION: This JavaScript code demonstrates how to use the `gatsbyPath` field in a React component to create links to product and discount pages. It queries the `productPath` and `discountPath` using GraphQL, and then uses those paths in `<Link>` components.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/routing/file-system-route-api.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nexport default function HomePage(props) {\n  return (\n    <ul>\n      {props.data.allProduct.map(product => (\n        <li key={product.name}>\n          <Link to={product.productPath}>{product.name}</Link> (\n          <Link to={product.discountPath}>Discount</Link>)\n        </li>\n      ))}\n    </ul>\n  )\n}\n\n```\n\n----------------------------------------\n\nTITLE: Display Service Worker Update Message\nDESCRIPTION: This code snippet uses the `onServiceWorkerUpdateReady` browser API in `gatsby-browser.js` to display a confirmation prompt asking the user to refresh the page when a service worker update is available.  The `window.confirm` function is used for the prompt, and `window.location.reload()` is called to refresh the page.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/performance/add-offline-support-with-a-service-worker.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const onServiceWorkerUpdateReady = () => {\n  const answer = window.confirm(\n    `This application has been updated. ` +\n      `Reload to display the latest version?`\n  )\n\n  if (answer === true) {\n    window.location.reload()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying GraphQL Schema in createSchemaCustomization (New Way)\nDESCRIPTION: This code demonstrates the new recommended way of modifying Gatsby's GraphQL schema using the `createSchemaCustomization` lifecycle.  It uses the `createTypes` action to define a GraphQL type.  This approach is required in Gatsby 4.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-source-plugin-from-v3-to-v4.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexports.createSchemaCustomization = ({ actions }) => { // highlight-line\n  const { createTypes } = actions;\n\n  createTypes(`\n    type AuthorJson implements Node {\n      joinedAt: Date\n    }\n  `)\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying with Environment Variables\nDESCRIPTION: Updates the deployment script in package.json to include environment variables. It uses `dotenv` to load environment variables and make them available during the build and deployment process.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/previews-deploys-hosting/deploying-to-s3-cloudfront.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"scripts\" : {\n    \"deploy\": \"npm run -n \\\"-r dotenv/config\\\" && npm run build && gatsby-plugin-s3 deploy\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Pages Programmatically in Gatsby\nDESCRIPTION: This JavaScript code uses the Gatsby `createPages` API to read a YAML file and create pages based on its content. It parses the YAML data using `js-yaml`, iterates through the data, and creates a page for each entry. The `context` property is used to pass data to the page's template.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/sourcing-data/sourcing-from-json-or-yaml.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst fs = require(\"fs\")\nconst yaml = require(\"js-yaml\")\nexports.createPages = ({ actions }) => {\n  const { createPage } = actions\n  const ymlDoc = yaml.load(fs.readFileSync(\"./content/index.yaml\", \"utf-8\"))\n  ymlDoc.forEach(element => {\n    createPage({\n      path: element.path,\n      component: require.resolve(\"./src/templates/basicTemplate.js\"),\n      context: {\n        pageContent: element.content,\n        links: element.links,\n      },\n    })\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Gatsby Page Template Component\nDESCRIPTION: This code represents a Gatsby page template component written in JSX. It receives data (including the markdown content) via GraphQL and renders it. The `data` prop contains the result of the GraphQL query, and the component accesses the `html` and `frontmatter.title` properties from the `markdownRemark` node to populate the page content.  It uses `dangerouslySetInnerHTML` to render the HTML content.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/programmatically-create-pages-from-data.md#_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\nimport React from \"react\"\nimport { graphql } from \"gatsby\"\nimport Layout from \"../components/layout\"\n\nexport default function BlogPost({ data }) {\n  const post = data.markdownRemark\n  return (\n    <Layout>\n      <div>\n        <h1>{post.frontmatter.title}</h1>\n        <div dangerouslySetInnerHTML={{ __html: post.html }} />\n      </div>\n    </Layout>\n  )\n}\n\nexport const query = graphql`\n  query($slug: String!) {\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      html\n      frontmatter {\n        title\n      }\n    }\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: StaticQuery Typechecking with PropTypes in Gatsby with JSX\nDESCRIPTION: This code snippet demonstrates how to implement typechecking with PropTypes while using StaticQuery in Gatsby. It imports React, StaticQuery, graphql, and PropTypes. A separate Header component is created to handle the rendering, and a MyHeader component wraps it with StaticQuery to fetch data and pass it to the Header component. PropTypes are used to define the expected shape of the data prop in the Header component, ensuring type safety.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/querying-data/static-query.md#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\nimport React from \"react\"\nimport { StaticQuery, graphql } from \"gatsby\"\nimport PropTypes from \"prop-types\"\n\nconst Header = ({ data }) => (\n  <header>\n    <h1>{data.site.siteMetadata.title}</h1>\n  </header>\n)\n\nexport default function MyHeader(props) {\n  return (\n    <StaticQuery\n      query={graphql`\n        query {\n          site {\n            siteMetadata {\n              title\n            }\n          }\n        }\n      `}\n      render={data => <Header data={data} {...props} />} \n    />\n  )\n}\n\nHeader.propTypes = {\n  data: PropTypes.shape({\n    site: PropTypes.shape({\n      siteMetadata: PropTypes.shape({\n        title: PropTypes.string.isRequired,\n      }).isRequired,\n    }).isRequired,\n  }).isRequired,\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Gatsby Source Contentful and Image Plugin\nDESCRIPTION: This command installs the `gatsby-source-contentful` plugin and the `gatsby-plugin-image` plugin, which are necessary for sourcing data from Contentful and handling images respectively.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-contentful/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install gatsby-source-contentful gatsby-plugin-image\n```\n\n----------------------------------------\n\nTITLE: Preventing Form Submission Refresh in React\nDESCRIPTION: This snippet shows how to prevent the default form submission behavior (page refresh) in React. The `handleSubmit` function calls `event.preventDefault()` to stop the default action. Additional logic for form submission can be added within this function.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/adding-common-features/adding-forms.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n  ...\n  handleSubmit(event) {\n    event.preventDefault();\n  }\n  ...\n  render() {\n    return (\n      ...\n      <form onSubmit={this.handleSubmit}>\n      ...\n    )\n  }\n  ...\n```\n\n----------------------------------------\n\nTITLE: Defining a page route in src/pages with JSX\nDESCRIPTION: This code snippet demonstrates how to create a simple home page route in Gatsby by adding a React component to the `src/pages/index.js` file. Gatsby automatically generates a page for each `.js` file in the `src/pages` directory, using the file path to determine the route.  This creates a basic 'Hello world' home page.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/routing/creating-routes.md#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport * as React from \"react\"\n\nexport default function Index() {\n  return <div>Hello world</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Local Plugin with require.resolve\nDESCRIPTION: This snippet illustrates how to include a local plugin in `gatsby-config.js` by referencing its path directly using `require.resolve`. This method is used when the plugin is located outside of the standard `plugins` folder.  It resolves the absolute path to the plugin's entry point, allowing Gatsby to load it correctly.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/creating-a-local-plugin.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-react-helmet`,\n    // highlight-start\n    {\n      // including a plugin from outside the plugins folder needs the path to it\n      resolve: require.resolve(`../path/to/gatsby-local-plugin`),\n    },\n    // highlight-end\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Gatsby Head accessing page properties (JSX)\nDESCRIPTION: This code snippet shows how to access properties like `location`, `params`, `data`, and `pageContext` within the `Head` function. It uses these properties to dynamically set the title, description, and Twitter URL.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/built-in-components/gatsby-head.md#_snippet_6\n\nLANGUAGE: JSX\nCODE:\n```\nexport const Head = ({ location, params, data, pageContext }) => (\n  <>\n    <title>{pageContext.title}</title>\n    <meta name=\"description\" content={data.page.description} />\n    <meta\n      name=\"twitter:url\"\n      content={`https://www.foobar.tld/${location.pathname}`}\n    />\n  </>\n)\n```\n\n----------------------------------------\n\nTITLE: Building Gatsby Production Site (Shell)\nDESCRIPTION: This command builds a production-ready version of your Gatsby site. It optimizes the site for performance and places the generated static files into the `public` directory. This step is necessary before running a Lighthouse audit to ensure accurate results.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/performance/audit-with-lighthouse.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngatsby build\n```\n\n----------------------------------------\n\nTITLE: Adding description to siteMetadata in gatsby-config.js\nDESCRIPTION: This JavaScript code adds a `description` field to the `siteMetadata` object in the `gatsby-config.js` file. This allows the description to be queried later with GraphQL.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/querying-data/page-query.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  siteMetadata: {\n    title: \"My Homepage\",\n    description: \"This is where I write my thoughts.\",\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Preloading Fonts in Gatsby\nDESCRIPTION: This code snippet demonstrates how to preload font files within a Gatsby project to improve loading performance.  It adds a `<link>` tag to the `<head>` of the HTML document that preloads the specified font file. The `setHeadComponents` function is used to inject the preload link into the head.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/styling/using-local-fonts.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as React from \"react\"\n\nexport const onRenderBody = ({ setHeadComponents }) => {\n  setHeadComponents([\n    <link\n      rel=\"preload\"\n      href=\"/fonts/Inter-roman.var.woff2\"\n      as=\"font\"\n      type=\"font/woff2\"\n      crossOrigin=\"anonymous\"\n      key=\"interFont\"\n    />,\n  ])\n}\n```\n\n----------------------------------------\n\nTITLE: Access Plugin Options - JavaScript\nDESCRIPTION: This snippet shows how to access plugin options within a Gatsby Node API. The plugin options are passed as the second argument to the API function, allowing the plugin to be configured based on user-defined settings.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/creating-a-source-plugin/part-4/index.mdx#_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nexports.onPreInit = (_, pluginOptions) => {\n  console.log(\n    `logging: \\\"${pluginOptions.message}\\\" to the console` // highlight-line\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Exiting the process on error (Node.js)\nDESCRIPTION: This code ensures that the Node.js process exits with an error code (1) when an error occurs during the Gatsby provision process. This is important for indicating a failure to the calling environment, such as Gatsby Cloud, which can then handle the error accordingly.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/config-files/gatsby-provision.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nprocess.exit(1)\n```\n\n----------------------------------------\n\nTITLE: Adding Mixed Plugins in Gatsby\nDESCRIPTION: This snippet illustrates how to add both plugins with and without options in the same `plugins` array. It shows a combination of a string (plugin name) and a plugin object with `resolve` and `options` keys.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/config-files/gatsby-config.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  plugins: [\n    `gatsby-transform-plugin`,\n    {\n      resolve: `gatsby-plugin-name`,\n      options: {\n        optionA: true,\n        optionB: `Another option`,\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Gatsby Plugin in gatsby-config.js\nDESCRIPTION: This code snippet demonstrates how to configure a Gatsby plugin by adding it to the `plugins` array in `gatsby-config.js`. The plugin name is included as a string in the plugins array.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/plugins-and-themes/using-a-plugin-in-your-site.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  siteMetadata: {\n    title: \"My Cool Website\",\n  },\n  plugins: [\"gatsby-plugin-sitemap\"], // highlight-line\n}\n```\n\n----------------------------------------\n\nTITLE: Fetch Product Prices with Gatsby GraphQL and Render Product Cards\nDESCRIPTION: This component uses Gatsby's `StaticQuery` and `graphql` to fetch product prices from Stripe. It then groups the prices by product ID and renders a `ProductCard` component for each product. The GraphQL query retrieves active Stripe prices, sorted by unit amount, and includes product details.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/ecommerce-tutorial/index.md#_snippet_18\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\"\nimport { graphql, StaticQuery } from \"gatsby\"\nimport ProductCard from \"./ProductCard\" //highlight-line\n\nconst containerStyles = {\n  display: \"flex\",\n  flexDirection: \"row\",\n  flexWrap: \"wrap\",\n  justifyContent: \"space-between\",\n  padding: \"1rem 0 1rem 0\",\n}\n\nconst Products = () => {\n  return (\n    <StaticQuery\n      query={graphql`\n        query ProductPrices {\n          prices: allStripePrice(\n            filter: { active: { eq: true } }\n            sort: { fields: [unit_amount] }\n          ) {\n            edges {\n              node {\n                id\n                active\n                currency\n                unit_amount\n                product {\n                  id\n                  name\n                }\n              }\n            }\n          }\n        }\n      `}\n      render={({ prices }) => {\n        // highlight-start\n        // Group prices by product\n        const products = {}\n        for (const { node: price } of prices.edges) {\n          const product = price.product\n          if (!products[product.id]) {\n            products[product.id] = product\n            products[product.id].prices = []\n          }\n          products[product.id].prices.push(price)\n        }\n\n        return (\n          <div style={containerStyles}>\n            {Object.keys(products).map(key => (\n              <ProductCard key={products[key].id} product={products[key]} />\n            ))}\n          </div>\n        )\n        // highlight-end\n      }}\n    />\n  )\n}\n\nexport default Products\n```\n\n----------------------------------------\n\nTITLE: Install WooCommerce Gatsby Source Plugin\nDESCRIPTION: Installs the `@pasdo501/gatsby-source-woocommerce` plugin using npm. This plugin allows Gatsby to source data directly from a WooCommerce store.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/sourcing-from-woocommerce.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @pasdo501/gatsby-source-woocommerce\n```\n\n----------------------------------------\n\nTITLE: Adding Image to GraphQL Query in Post Pages (TS)\nDESCRIPTION: This snippet shows how to add the image field with the gatsbyImage subfield and alt text to the GraphQL query in Gatsby post pages.  The width argument is used to request the image in the correct size.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/creating-a-source-plugin/part-6/index.mdx#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n// Rest of the file\n\nexport const query = graphql`\n  query PostPage($slug: String!) {\n    post(slug: { eq: $slug }) {\n      title\n      author {\n        name\n      }\n// highlight-start\n      image {\n        gatsbyImage(width: 300)\n        alt\n      }\n// highlight-end\n    }\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: Creating Parent-Child Relationship\nDESCRIPTION: This JavaScript function `transformObject` takes a JavaScript object derived from YAML, an ID, and a type, and then converts it into a Gatsby node using the `createNode` action and creates a parent child relationship to the original file node using the `createParentChildLink` action.  It constructs the node's properties, including content digest, type, and parent-child relationships. It expects the `createNode` function to be available in the scope.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/plugins-and-themes/creating-a-transformer-plugin.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nfunction transformObject(obj, id, type) {\n  const yamlNode = {\n    ...obj,\n    id,\n    children: [],\n    parent: node.id, // highlight-line\n    internal: {\n      contentDigest: createContentDigest(obj),\n      type,\n    },\n  }\n  createNode(yamlNode)\n  createParentChildLink({ parent: node, child: yamlNode }) // highlight-line\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Plugin With Options in Gatsby\nDESCRIPTION: This example demonstrates how to add a plugin with configuration options. A plugin object with `resolve` (plugin name) and `options` (configuration object) keys is added to the `plugins` array.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/config-files/gatsby-config.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-name`,\n      options: {\n        optionA: true,\n        optionB: `Another option`,\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Gatsby Function with TypeScript\nDESCRIPTION: This snippet showcases a Gatsby Function written in TypeScript. It defines an interface for the request body and uses type annotations for the `req` and `res` parameters.  The function sends a response with a title and a message extracted from the request body. It requires the `GatsbyFunctionRequest` and `GatsbyFunctionResponse` types from the 'gatsby' package.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/functions/getting-started.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { GatsbyFunctionRequest, GatsbyFunctionResponse } from \"gatsby\"\n\ninterface ContactBody {\n  message: string\n}\n\nexport default function handler(\n  req: GatsbyFunctionRequest<ContactBody>,\n  res: GatsbyFunctionResponse\n) {\n  res.send({ title: `I am TYPESCRIPT`, message: req.body.message })\n}\n```\n\n----------------------------------------\n\nTITLE: Contact Form Action for Custom Server in JSX\nDESCRIPTION: This snippet shows how to set the form's `action` attribute to the URL of a deployed Express server. This configuration allows the form data to be sent to the custom server for processing.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/building-a-contact-form.md#_snippet_6\n\nLANGUAGE: JSX\nCODE:\n```\n<form method=\"post\" action=\"my-project-abcd123.vercel.app/contact\">\n  ...\n</form>\n```\n\n----------------------------------------\n\nTITLE: Handling HTTP Methods in Gatsby Functions\nDESCRIPTION: This example demonstrates how to handle different HTTP methods within a Gatsby Function. It checks the `req.method` property to determine the HTTP method and responds accordingly. In this example, it sends a different response for POST requests compared to other methods. Error handling is recommended for methods other than the ones explicitly handled.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/functions/getting-started.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default function handler(req, res) {\n  if (req.method === `POST`) {\n    res.send(`I am POST`)\n  } else {\n    // Handle other methods or return error\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using CSS Modules in React (JavaScript)\nDESCRIPTION: Shows how to import and use a CSS Module in a React component. The CSS Module is imported as an object, and its class names are accessed as properties of the object.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/styling/built-in-css.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from \"react\"\nimport * as containerStyles from \"./container.module.css\"\n\nexport default function Container({ children }) {\n  return <div className={containerStyles.container}>{children}</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Theme UI Color Palette - JavaScript\nDESCRIPTION: This code defines a basic theme object with a `colors` property. This is a JavaScript object with properties like `text`, `background`, `primary`, and `secondary` that can be referenced throughout the site for consistent styling. This snippet shows how to define a color palette for your site using Theme UI.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/styling/theme-ui.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default {\n  colors: {\n    text: \"#333\",\n    background: \"#fff\",\n    primary: \"#639\",\n    secondary: \"#ff6347\",\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Site Metadata\nDESCRIPTION: This example showcases how to set up the `siteMetadata` object within `gatsby-config.js`. It includes the site title, URL, and description. The data is then queryable throughout the Gatsby site.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/config-files/gatsby-config.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  siteMetadata: {\n    title: `Gatsby`,\n    siteUrl: `https://www.gatsbyjs.com`,\n    description: `Blazing fast modern site generator for React`,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: React Layout Template for Posts\nDESCRIPTION: This React component serves as the layout template for individual blog posts.  It uses GraphQL to query the title of the post and renders it along with the MDX content passed as `children`. The `MDXProvider` component makes shortcodes like `Link` available within the MDX content.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/routing/mdx.md#_snippet_16\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\"\nimport { graphql } from \"gatsby\"\nimport { MDXProvider } from \"@mdx-js/react\"\nimport { Link } from \"gatsby\"\n\nconst shortcodes = { Link } // Provide common components here\n\nexport default function PageTemplate({ data, children }) {\n  return (\n    <>\n      <h1>{data.mdx.frontmatter.title}</h1>\n      <MDXProvider components={shortcodes}>\n        {children}\n      </MDXProvider>\n    </>\n  )\n}\n\nexport const query = graphql`\n  query($id: String!) {\n    mdx(id: { eq: $id }) {\n      frontmatter {\n        title\n      }\n    }\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: Formatting Dates with Moment.js in GraphQL\nDESCRIPTION: This GraphQL query filters `allMarkdownRemark` to exclude nodes where the `date` field is null.  It then retrieves the `title` and formats the `date` field using Moment.js's `formatString` function, specifying a specific date format.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/graphql-reference.md#_snippet_19\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  allMarkdownRemark(filter: { frontmatter: { date: { ne: null } } }) {\n    edges {\n      node {\n        frontmatter {\n          title\n          date(formatString: \"dddd DD MMMM YYYY\")\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Express Server for Form Handling in JavaScript\nDESCRIPTION: This is a basic Express server implementation for handling form submissions. It uses `body-parser` to parse request bodies, `nodemailer` to send emails, and listens for POST requests to the `/contact` endpoint.  The server sends the form data as an email to a specified address.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/building-a-contact-form.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst bodyParser = require(\"body-parser\")\nconst express = require(\"express\")\nconst nodemailer = require(\"nodemailer\")\n\nconst app = express()\napp.use(bodyParser.urlencoded())\n\nconst contactAddress = \"hey@yourwebsite.com\"\n\nconst mailer = nodemailer.createTransport({\n  service: \"Gmail\",\n  auth: {\n    user: process.env.production.GMAIL_ADDRESS,\n    pass: process.env.production.GMAIL_PASSWORD,\n  },\n})\n\napp.post(\"/contact\", function (req, res) {\n  mailer.sendMail(\n    {\n      from: req.body.from,\n      to: [contactAddress],\n      subject: req.body.subject || \"[No subject]\",\n      html: req.body.message || \"[No message]\",\n    },\n    function (err, info) {\n      if (err) return res.status(500).send(err)\n      res.json({ success: true })\n    }\n  )\n})\n\napp.listen(3000)\n```\n\n----------------------------------------\n\nTITLE: Testing Layout Component by Mocking useStaticQuery - JavaScript\nDESCRIPTION: This test mocks the `useStaticQuery` hook to provide mock data for the Layout component, allowing to test the component without making actual GraphQL requests.  It uses Jest's `spyOn` to mock the `useStaticQuery` function and then restores the mock after the test.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/testing/testing-components-with-graphql.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as React from \"react\"\nimport renderer from \"react-test-renderer\"\nimport * as Gatsby from \"gatsby\"\n\n// highlight-next-line\nconst useStaticQuery = jest.spyOn(Gatsby, `useStaticQuery`)\nconst mockUseStaticQuery = {\n  site: {\n    siteMetadata: {\n      title: `Gatsby Default Starter`\n    }\n  }\n}\n\nimport Layout from \"../layout\"\n\ndescribe(`Layout`, () => {\n  beforeEach(() => {\n    // highlight-next-line\n    useStaticQuery.mockImplementation(() => mockUseStaticQuery)\n  })\n\n  afterEach(() => {\n    jest.restoreAllMocks()\n  })\n\n  it(`renders correctly`, () => {\n    const tree = renderer.create(<Layout>Hello World</Layout>).toJSON()\n    expect(tree).toMatchSnapshot()\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query in React Component (JSX)\nDESCRIPTION: This React component demonstrates how to use GraphQL to query data and display it in a Gatsby page. It imports `graphql` from `gatsby` and defines a page component that receives data as a prop. A GraphQL query is defined and the `title` from the query's result is used to display text in the page.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/conceptual/graphql-concepts.md#_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\nimport React from \"react\"\nimport { graphql } from \"gatsby\"\n\nexport default function Page({ data }) {\n  return (\n    <div>\n      <h1>About {data.site.siteMetadata.title}</h1>\n      <p>We're a very cool website you should return to often.</p>\n    </div>\n  )\n}\n\nexport const query = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: Configuring Gatsby with ESM\nDESCRIPTION: This code snippet demonstrates how to configure a Gatsby site using ES modules in the `gatsby-config.mjs` file.  It imports the `slugify` function from the `@sindresorhus/slugify` package, sets site metadata including a slugified title, and exports the configuration object.  This enables the use of ESM-only packages.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/v5.3/index.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// The latest version of \"slugify\" is ESM-only\nimport slugify from \"@sindresorhus/slugify\"\n\nconst title = `Gatsby Default Starter`\n\nconst config = {\n  siteMetadata: {\n    title,\n    slugifiedTitle: slugify(title),\n  },\n  plugins: [],\n}\n\nexport default config\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query for Featured Image\nDESCRIPTION: A GraphQL query to retrieve the `featuredImg` node and its `childImageSharp` node, which is created by `gatsby-transformer-sharp`. This allows access to various image processing options provided by `gatsby-plugin-image`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/images-and-media/preprocessing-external-images.md#_snippet_2\n\nLANGUAGE: GraphQL\nCODE:\n```\nquery {\n  allMarkdownRemark {\n    nodes {\n      featuredImg {\n        childImageSharp {\n          # ...\n        }\n      }\n    }\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring gatsby-plugin-feed in gatsby-config.js\nDESCRIPTION: Configures the `gatsby-plugin-feed` plugin in `gatsby-config.js` to generate an RSS feed. This example shows how to define a feed using a GraphQL query to fetch Markdown pages, serialize the data, and specify the output path and title.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-feed/README.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  siteMetadata: {\n    title: `Your site title`,\n    description: `Your site desccription`,\n    site_url: `https://your-site-url.com`,\n  },\n  plugins: [\n    {\n      resolve: `gatsby-plugin-feed`,\n      options: {\n        feeds: [\n          {\n            serialize: ({ query: { site, allMarkdownRemark } }) => {\n              return allMarkdownRemark.nodes.map(node => {\n                return Object.assign({}, node.frontmatter, {\n                  description: node.excerpt,\n                  date: node.frontmatter.date,\n                  url: site.siteMetadata.siteUrl + node.fields.slug,\n                  guid: site.siteMetadata.siteUrl + node.fields.slug,\n                  custom_elements: [{ \"content:encoded\": node.html }],\n                })\n              })\n            },\n            query: `\n              {\n                allMarkdownRemark(\n                  sort: { order: DESC, fields: [frontmatter___date] },\n                ) {\n                  nodes {\n                    excerpt\n                    html\n                    fields {\n                      slug\n                    }\n                    frontmatter {\n                      title\n                      date\n                    }\n                  }\n                }\n              }\n            `,\n            output: \"/rss.xml\",\n            title: \"Your Site's RSS Feed\",\n          },\n        ],\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Using Gatsby Link Component\nDESCRIPTION: This code uses the Gatsby Link component for internal navigation. The Link component replaces <a> tags and provides performance optimizations like prefetching.  The `to` prop is used instead of the `href` attribute.\n\nDependencies: React, Gatsby Link.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/porting-an-html-site-to-gatsby.md#_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\"\nimport { Link } from \"gatsby\" // highlight-line\n\nimport \"../styles/normalize.css\"\nimport \"../styles/style.css\"\n\nexport default function Home() {\n  return (\n    <>\n      <header>\n        {/* highlight-start */}\n        <Link to=\"/\" className=\"brand-color logo-text\">\n          Taylor's Tidy Trees\n        </Link>\n        <nav>\n          <ul>\n            <li>\n              <Link to=\"/about\">About</Link>\n            </li>\n            <li>\n              <Link to=\"/services\">Services</Link>\n            </li>\n            <li>\n              <Link to=\"/who\">Who We Are</Link>\n            </li>\n            <li>\n              <Link to=\"/contact\">Contact</Link>\n            </li>\n          </ul>\n        </nav>\n        {/* highlight-end */}\n      </header>\n      <main>\n        <div>Hello world!</div>\n      </main>\n    </>\n  )\n}\n\nexport const Head = () => (\n  <>\n    <title>Taylor's Tidy Trees</title>\n    <link href=\"/favicon.ico\" rel=\"shortcut icon\" type=\"image/x-icon\" />\n  </>\n)\n```\n\n----------------------------------------\n\nTITLE: StaticImage Valid Prop Usage Example 2 (JS)\nDESCRIPTION: This example demonstrates correct usage of the StaticImage component where the height is derived from a local variable. Because the height is calculated from a statically-analyzable value, this is permitted.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/built-in-components/gatsby-plugin-image.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Also OK\n\n// A variable in the same file is fine.\nconst width = 300\n\nexport function Dino() {\n  // This works because the value can be statically-analyzed\n  const height = (width * 16) / 9\n  return <StaticImage src=\"trex.png\" width={width} height={height} />\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Gatsby Plugin for Styled Components\nDESCRIPTION: This JavaScript snippet demonstrates how to add the `gatsby-plugin-styled-components` plugin to your `gatsby-config.js` file. This is essential for Gatsby to process and utilize Styled Components.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/styling/styled-components.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  plugins: [`gatsby-plugin-styled-components`],\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Gatsby Site with Prompt (Shell)\nDESCRIPTION: This command initiates an interactive shell prompt that guides you through setting up a new Gatsby site, including options for choosing a CMS, styling system, and plugins. It allows for a guided setup experience.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/gatsby-cli.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngatsby new\n```\n\n----------------------------------------\n\nTITLE: Deduplication of Metatags using IDs (JSX)\nDESCRIPTION: This snippet demonstrates how Gatsby Head deduplicates metatags based on their `id` property.  In this example, the second `<link>` tag with the same ID overrides the first one.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/built-in-components/gatsby-head.md#_snippet_5\n\nLANGUAGE: JSX\nCODE:\n```\nconst SEO = ({ children }) => (\n  <>\n    <title>Hello World</title>\n    <link id=\"icon\" rel=\"icon\" href=\"global-icon\" />\n    {children}\n  </>\n)\n\nexport const Head = () => (\n  <SEO>\n    <link id=\"icon\" rel=\"icon\" href=\"icon-specific-for-this-page\" />\n  </SEO>\n)\n```\n\n----------------------------------------\n\nTITLE: Add Resolver in gatsby-node.js (gatsby-plugin-image)\nDESCRIPTION: This JavaScript code snippet demonstrates how to add the `gatsbyImageData` resolver to a `ProductImage` node using the `createResolvers` API hook in `gatsby-node.js`. It uses the `getGatsbyImageResolver` utility function from `gatsby-plugin-image/graphql-utils` to register the resolver with default arguments and additional custom arguments, such as `quality`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/plugins-and-themes/adding-gatsby-image-support.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n// Note the different import\nimport { getGatsbyImageResolver } from \"gatsby-plugin-image/graphql-utils\"\n\nexport function createResolvers({ createResolvers }) {\n  createResolvers({\n    ProductImage: {\n      // loadImageData is your custom resolver, defined in step 2\n      gatsbyImageData: getGatsbyImageResolver(loadImageData, {\n        quality: \"Int\",\n      }),\n    },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Configure gatsby-plugin-canonical-urls with stripQueryString\nDESCRIPTION: Configures the plugin to remove query parameters from the canonical URL, preventing issues with duplicate content indexing.  Requires setting the `stripQueryString` option to `true`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-canonical-urls/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-canonical-urls`,\n      options: {\n        siteUrl: `https://www.example.com`,\n        stripQueryString: true,\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query for Product SKU\nDESCRIPTION: This GraphQL query retrieves the `id` and the nested `sku` field (under `fields`) from all `Product` nodes. It is implicitly generated by Gatsby for file paths like `src/pages/products/{Product.fields__sku}.js`. The `id` field is always queried by Gatsby.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/routing/file-system-route-api.md#_snippet_1\n\nLANGUAGE: GraphQL\nCODE:\n```\nallProduct {\n  nodes {\n    id # Gatsby always queries for id\n    fields {\n      sku\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring gatsby-source-wordpress in gatsby-config.js\nDESCRIPTION: Configures the gatsby-source-wordpress plugin in the gatsby-config.js file. This involves specifying the WordPress site's base URL, protocol, and other options, such as whether the site is hosted on wordpress.com and whether to use ACF (Advanced Custom Fields).\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/wordpress-source-plugin-tutorial.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  siteMetadata: {\n    title: `Gatsby WordPress Tutorial`,\n    description: `An example to learn how to source data from WordPress.`,\n    author: `@gatsbyjs`,\n  },\n  plugins: [\n    // https://public-api.wordpress.com/wp/v2/sites/gatsbyjsexamplewordpress.wordpress.com/pages/\n    /*\n     * Gatsby's data processing layer begins with ‚Äúsource‚Äù\n     * plugins. Here the site sources its data from WordPress.\n     */\n    // highlight-start\n    {\n      resolve: `gatsby-source-wordpress`,\n      options: {\n        /*\n         * The base URL of the WordPress site without the trailingslash and the protocol. This is required.\n         * Example : 'demo.wp-api.org' or 'www.example-site.com'\n         */\n        baseUrl: `live-gatbsyjswp.pantheonsite.io`,\n        // The protocol. This can be http or https.\n        protocol: `https`,\n        // Indicates whether the site is hosted on wordpress.com.\n        // If false, then the assumption is made that the site is self hosted.\n        // If true, then the plugin will source its content on wordpress.com using the JSON REST API V2.\n        // If your site is hosted on wordpress.org, then set this to false.\n        hostingWPCOM: false,\n        // If useACF is true, then the source plugin will try to import the WordPress ACF Plugin contents.\n        // This feature is untested for sites hosted on WordPress.com\n        useACF: true,\n      },\n    },\n    // highlight-end\n    /**\n     * The following plugins aren't required for gatsby-source-wordpress,\n     * but we need them so the default starter we installed above will keep working.\n     **/\n    `gatsby-plugin-react-helmet`,\n    {\n      resolve: `gatsby-source-filesystem`,\n      options: {\n        name: `images`,\n        path: `${__dirname}/src/images`,\n      },\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-sharp`,\n    {\n      resolve: `gatsby-plugin-manifest`,\n      options: {\n        name: `gatsby-starter-default`,\n        short_name: `starter`,\n        start_url: `/`,\n        background_color: `#663399`,\n        theme_color: `#663399`,\n        display: `minimal-ui`,\n        icon: `src/images/gatsby-icon.png`, // This path is relative to the root of the site.\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Slice in gatsby-node.js with createSlice API\nDESCRIPTION: This code snippet demonstrates how to use the `createSlice` action within the `createPages` API in `gatsby-node.js` to create a Slice. It defines the slice id as `header` and specifies the component to be used for the slice. This allows Gatsby to build the shared component only once.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/v5.0/index.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexports.createPages = async ({ actions }) => {\n  actions.createSlice({\n    id: `header`,\n    component: require.resolve(`./src/components/header.js`),\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Profiling Gatsby Pages with wrapPageElement API in JSX\nDESCRIPTION: This code snippet shows how to profile every page in a Gatsby site using the `wrapPageElement` API in `gatsby-browser.js`. It imports React and Profiler, uses Profiler to wrap the `element` prop passed to `wrapPageElement`, and specifies an `onRender` callback (`capturePageMetrics`) to capture performance metrics for each page. The `id` prop is used to uniquely identify the profiled page.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/profiling-site-performance-with-react-profiler.md#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n//gatsby-browser.js\n\nimport * as React from \"react\"\nimport { Profiler } from \"react\"\n\nexport const wrapPageElement = ({ element, props }) => (\n  // See https://reactjs.org/docs/profiler.html#onrender-callback for onRender parameters\n  <Profiler id={props.someUniqueId} onRender={capturePageMetrics}>\n    {element}\n  </Profiler>\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Search Box Component with React InstantSearch\nDESCRIPTION: This JSX code defines a `SearchBox` component using React InstantSearch hooks. It utilizes the `useSearchBox` hook to manage the search query and refine function. The component renders an input field and a search icon, updating the search query as the user types.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/adding-search-with-algolia.md#_snippet_8\n\nLANGUAGE: JSX\nCODE:\n```\nimport React from \"react\"\nimport { useSearchBox } from \"react-instantsearch\"\nimport { Search as SearchIcon } from \"@styled-icons/fa-solid\"\n\nconst SearchBox = ({ className, onFocus, onChange }) => {\n  const { query, refine } = useSearchBox()\n\n  return (\n    <form className={className}>\n      <input\n        className=\"SearchInput\"\n        type=\"text\"\n        placeholder=\"Search\"\n        aria-label=\"Search\"\n        onChange={e => {\n          refine(e.target.value)\n          onChange(e.target.value)\n        }}\n        value={query}\n        onFocus={onFocus}\n      />\n      <SearchIcon className=\"SearchIcon\" />\n    </form>\n  )\n}\n\nexport default SearchBox\n```\n\n----------------------------------------\n\nTITLE: Contact Form Integration with Getform in JSX\nDESCRIPTION: This code snippet demonstrates how to integrate a contact form with the Getform service. The `action` attribute of the form is set to the unique Getform endpoint. The `name` attribute of each input field is essential for Getform to recognize and process the data.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/building-a-contact-form.md#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<form method=\"post\" action=\"https://getform.io/{your-unique-getform-endpoint}\">\n  ...\n  <label>\n    Email\n    <input type=\"email\" name=\"email\" />\n  </label>\n  <label>\n    Name\n    <input type=\"text\" name=\"name\" />\n  </label>\n  <label>\n    Message\n    <input type=\"text\" name=\"message\" />\n  </label>\n  ...\n</form>\n```\n\n----------------------------------------\n\nTITLE: Setting Image Layout with gatsbyImageData in GraphQL\nDESCRIPTION: This code snippet demonstrates how to set the layout option using the gatsbyImageData resolver in a GraphQL query. The layout is set to FIXED, which corresponds to the \"fixed\" layout option in the StaticImage component. This configuration is typically used for dynamic images.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/built-in-components/gatsby-plugin-image.md#_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\ndino {\n  childImageSharp {\n    # highlight-next-line\n    gatsbyImageData(layout: FIXED)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL query with GatsbyImageSharpFixed fragment\nDESCRIPTION: This is an example of old GraphQL syntax using `GatsbyImageSharpFixed` fragment for querying image data. The new syntax replaces this fragment with the `gatsbyImageData` field and passes configuration options as arguments.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/image-migration-guide.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { graphql } from \"gatsby\"\n\nexport const query = graphql`\n  {\n    file(relativePath: { eq: \"images/example.jpg\" }) {\n      childImageSharp {\n        fixed {\n          ...GatsbyImageSharpFixed\n        }\n      }\n    }\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: Configuring gatsby-source-graphcms Plugin\nDESCRIPTION: Configures the `gatsby-source-graphcms` plugin in `gatsby-config.js`. This configuration specifies the GraphCMS API endpoint and authentication token (if the project is not publicly accessible). The endpoint and token are retrieved from environment variables. This code snippet should be placed inside the `plugins` array in `gatsby-config.js`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/sourcing-from-graphcms.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  resolve: 'gatsby-source-graphcms',\n    options: {\n      // Your GraphCMS API endpoint. Available from your project settings.\n      endpoint: process.env.GRAPHCMS_ENDPOINT\n      // A PAT (Permanent Auth Token) for your project. Required if your project is not available publicly, or you want to scope access to a specific content stage (i.e. draft content).\n      token: process.env.GRAPHCMS_TOKEN\n    },\n},\n```\n\n----------------------------------------\n\nTITLE: Querying image data with GraphQL for dynamic images\nDESCRIPTION: Demonstrates a GraphQL query used to fetch image data for dynamic images, using `childImageSharp` and `gatsbyImageData`. The query retrieves the image data associated with the avatar field within a blogPost node. The `width` argument is used to configure the image size.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/images-and-media/using-gatsby-plugin-image.md#_snippet_5\n\nLANGUAGE: GraphQL\nCODE:\n```\nquery ($id: String) {\n  blogPost(id: { eq: $id }) {\n    title\n    body\n    # highlight-start\n    avatar {\n      childImageSharp {\n        gatsbyImageData(width: 200)\n      }\n    }\n    # highlight-end\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript config object example\nDESCRIPTION: This snippet shows how to use TypeScript to define the type of the `config` object in a Gatsby Function. It imports the `GatsbyFunctionConfig` type from the `gatsby` package and uses it to type the `config` export, providing type safety and autocompletion. Dependencies: `gatsby` package.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/functions/middleware-and-helpers.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { GatsbyFunctionConfig } from \"gatsby\"\n\nexport const config: GatsbyFunctionConfig = {\n  bodyParser: {\n    json: {\n      limit: `10mb`,\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a getStripe Utility Function (JavaScript)\nDESCRIPTION: This utility function encapsulates the Stripe.js initialization logic, ensuring that Stripe is only loaded once.  It uses a singleton pattern to store the Stripe instance in a promise. It relies on the `GATSBY_STRIPE_PUBLISHABLE_KEY` environment variable.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/ecommerce-tutorial/index.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * This is a singleton to ensure we only instantiate Stripe once.\n */\nimport { loadStripe } from \"@stripe/stripe-js\"\n\nlet stripePromise\nconst getStripe = () => {\n  if (!stripePromise) {\n    stripePromise = loadStripe(process.env.GATSBY_STRIPE_PUBLISHABLE_KEY)\n  }\n  return stripePromise\n}\n\nexport default getStripe\n```\n\n----------------------------------------\n\nTITLE: Configure Node Mapping in Gatsby Config\nDESCRIPTION: This JavaScript snippet demonstrates how to configure node mappings in `gatsby-config.js` to link the `author` field in Markdown frontmatter to the `name` field in `AuthorYaml` nodes. This enables querying author information directly from blog posts.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/config-files/gatsby-config.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  plugins: [...],\n  mapping: {\n    \"MarkdownRemark.frontmatter.author\": `AuthorYaml.name`,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query for Product Names\nDESCRIPTION: This GraphQL query retrieves the `id` and `name` fields from all `Product` nodes.  It's generated implicitly by Gatsby when using `src/pages/products/{Product.name}.js` collection route. The `id` field is always queried by Gatsby.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/routing/file-system-route-api.md#_snippet_0\n\nLANGUAGE: GraphQL\nCODE:\n```\nallProduct {\n  nodes {\n    id # Gatsby always queries for id\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Gatsby Plugins for Image Processing\nDESCRIPTION: This code snippet shows how to add `gatsby-plugin-sharp` and `gatsby-transformer-sharp` to the `plugins` array in `gatsby-config.js`. These plugins are necessary for Gatsby to process images using Sharp, which enables resizing, optimizing, and transforming images.  They enable gatsby-image.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/images-and-media/using-gatsby-image.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  plugins: [`gatsby-plugin-sharp`, `gatsby-transformer-sharp`],\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Prismic Data in Gatsby Page\nDESCRIPTION: This GraphQL query fetches data from Prismic for the home page and blog posts. It retrieves the headline, description, and image from the 'blog_home' document type, and the id, uid, type, title, and date from all 'post' document types, sorting the posts by date in descending order. This data is used to render the home page content and a list of blog posts.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/prismic-source-graphql-tutorial.md#_snippet_4\n\nLANGUAGE: GraphQL\nCODE:\n```\n{\n  prismic {\n    allBlog_homes {\n      edges {\n        node {\n          headline\n          description\n          image\n        }\n      }\n    }\n    allPosts(sortBy: date_DESC) {\n      edges {\n        node {\n          _meta {\n            id\n            uid\n            type\n          }\n          title\n          date\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GatsbyImage Component Usage with GraphQL\nDESCRIPTION: Uses the `GatsbyImage` component to display an image fetched via GraphQL. The `getImage` helper function extracts the `gatsbyImageData` from the GraphQL data, which is then passed to the `GatsbyImage` component along with the alt text.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-image/README.md#_snippet_7\n\nLANGUAGE: JSX\nCODE:\n```\nimport { graphql } from \"gatsby\"\nimport { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\nfunction BlogPost({ data }) {\n  const image = getImage(data.blogPost.avatar)\n  return (\n    <section>\n      <h2>{data.blogPost.title}</h2>\n      <GatsbyImage image={image} alt={data.blogPost.author} />\n      <p>{data.blogPost.body}</p>\n    </section>\n  )\n}\n\nexport const pageQuery = graphql`\n  query {\n    blogPost(id: { eq: $Id }) {\n      title\n      body\n      author\n      avatar {\n        childImageSharp {\n          gatsbyImageData(\n            width: 200\n            placeholder: BLURRED\n            formats: [AUTO, WEBP, AVIF]\n          )\n        }\n      }\n    }\n  `\n\n```\n\n----------------------------------------\n\nTITLE: Importing CSS Modules as ES Modules in Gatsby\nDESCRIPTION: This snippet demonstrates how to import CSS Modules as ES Modules in Gatsby v3. Instead of importing the entire styles object, individual CSS class names are imported.  This allows for better tree shaking and smaller file sizes.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v2-to-v3.md#_snippet_17\n\nLANGUAGE: diff\nCODE:\n```\nimport React from \"react\"\n- import styles from './mystyles.module.css'\n+ import { box } from './mystyles.module.css'\n\nconst Box = ({ children }) => (\n-  <div className={styles.box}>{children}</div>\n+  <div className={box}>{children}</div>\n)\n\nexport default Box\n```\n\n----------------------------------------\n\nTITLE: Update GatsbyImage component usage\nDESCRIPTION: This snippet demonstrates how to update the usage of the `GatsbyImage` component to use the new `image` prop instead of the `fixed` prop.  The `image` prop now accepts the `gatsbyImageData` object returned from the GraphQL query.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/image-migration-guide.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// import Img from \"gatsby-image\"\nimport { GatsbyImage } from \"gatsby-plugin-image\"\n\nconst HomePage = ({ data }) => {\n  return (\n    // <Img fixed={data.file.childImageSharp.fixed} />\n    <GatsbyImage image={data.file.childImageSharp.gatsbyImageData} />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Option Value with Joi\nDESCRIPTION: This snippet demonstrates how to set a default value for a plugin option using Joi's `.default()` method. If the user does not provide a value for the `message` option in `gatsby-config.js`, the plugin will use the default message, `default message`. The other options remain the same as the previous schema definition.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/plugins-and-themes/configuring-usage-with-plugin-options.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexports.pluginOptionsSchema = ({ Joi }) => {\n  return Joi.object({\n    optionA: Joi.boolean().required().description(`Enables optionA.`),\n    message: Joi.string()\n      .default(`default message`) // highlight-line\n      .description(`The message logged to the console.`),\n    optionB: Joi.boolean().description(`Enables optionB.`),\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Global Styles with Styled Components\nDESCRIPTION: This JSX code shows how to create global styles using `createGlobalStyle` from styled-components. It allows you to override default styles, like the body color, and apply them globally across your Gatsby site.  It's advised to use `createGlobalStyle` in [Layout components](/docs/how-to/routing/layout-components/), which are shared over multiple pages rather than using it on a single page.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/styling/styled-components.md#_snippet_4\n\nLANGUAGE: JSX\nCODE:\n```\nimport React from \"react\"\nimport { createGlobalStyle } from \"styled-components\"\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    color: ${props => (props.theme === \"purple\" ? \"purple\" : \"white\")};\n  }\n`\nexport default function Layout({ children }) {\n  return (\n    <React.Fragment>\n      <GlobalStyle theme=\"purple\" />\n      {children}\n    </React.Fragment>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Private Route Component with Router (JSX)\nDESCRIPTION: This JSX code defines a `PrivateRoute` component that uses the `@reach/router` to protect routes based on authentication status. It checks if the user is authenticated, and if not and if the user is not on the login page, redirects to the `/app/login` route using `navigate`. If authenticated, it renders the specified component within a `<Router />`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/adding-common-features/building-a-site-with-authentication.md#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n// import ...\nconst PrivateRoute = ({ component: Component, ...rest }) => {\n  if (\n    !isAuthenticated() &&\n    isBrowser &&\n    window.location.pathname !== `/login`\n  ) {\n    // If we‚Äôre not logged in, redirect to the home page.\n    navigate(`/app/login`)\n    return null\n  }\n\n  return (\n    <Router>\n      <Component {...rest} />\n    </Router>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using StaticImage component with local image source\nDESCRIPTION: Shows how to use the `StaticImage` component to display a static local image in a Gatsby component. It imports the `StaticImage` component and sets the `src` prop to the relative path of the image. The `alt` prop provides alternative text for accessibility.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/images-and-media/using-gatsby-plugin-image.md#_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nexport function Dino() {\n  return <StaticImage src=\"../images/dino.png\" alt=\"A dinosaur\" />\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Context in React Page Component\nDESCRIPTION: This React component demonstrates how to access context passed to the page.  The component expects a `pageContext` prop and renders the value of `pageContext.house`. This is useful for displaying data that was passed to the page from `gatsby-node.js`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/creating-and-modifying-pages.md#_snippet_5\n\nLANGUAGE: JSX\nCODE:\n```\nimport React from \"react\"\n\nconst Page = ({ pageContext }) => {\n  return <div>{pageContext.house}</div>\n}\n\nexport default Page\n```\n\n----------------------------------------\n\nTITLE: Using the SEO component in page (default values)\nDESCRIPTION: This code snippet demonstrates how to use the SEO component on a page using its default values. The component is imported and rendered within the `Head` export without providing any props. This will utilize the metadata defined in `siteMetadata`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/adding-common-features/adding-seo-component.md#_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\nimport React from \"react\"\nimport { SEO } from \"../components/seo\"\n\nconst IndexPage = () => {\n  return (\n    <main>\n      Hello World\n    </main>\n  )\n}\n\nexport default IndexPage\n\n// highlight-start\nexport const Head = () => (\n  <SEO />\n)\n// highlight-end\n```\n\n----------------------------------------\n\nTITLE: Update Blog Index Page with Links in Gatsby\nDESCRIPTION: This code snippet updates the blog index page to display links to individual blog posts, using Gatsby's `Link` component for internal navigation and fetching the `slug` from the GraphQL query. It requires the `gatsby` package for the `Link` component and `graphql` for querying.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-6/index.mdx#_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as React from 'react'\nimport { Link, graphql } from 'gatsby' // highlight-line\nimport Layout from '../../components/layout'\nimport Seo from '../../components/seo'\n\nconst BlogPage = ({ data }) => {\n  return (\n    <Layout pageTitle=\"My Blog Posts\">\n      {\n        data.allMdx.nodes.map(node => (\n          <article key={node.id}>\n            {/* highlight-start */}\n            <h2>\n              <Link to={`/blog/${node.frontmatter.slug}`}>\n                {node.frontmatter.title}\n              </Link>\n            </h2>\n            {/* highlight-end */}\n            <p>Posted: {node.frontmatter.date}</p>\n          </article>\n        ))\n      }\n    </Layout>\n  )\n}\n\nexport const query = graphql`\n  query {\n    allMdx(sort: { frontmatter: { date: DESC }}) {\n      nodes {\n        frontmatter {\n          date(formatString: \"MMMM D, YYYY\")\n          title\n          slug // highlight-line\n        }\n        id\n      }\n    }\n  }\n`\n\nexport const Head = () => <Seo title=\"My Blog Posts\" />\n\nexport default BlogPage\n```\n\n----------------------------------------\n\nTITLE: Outputting Ghost Data in Gatsby Template (post.js)\nDESCRIPTION: This React component, used as a template for individual posts, fetches Ghost post data using a GraphQL query and displays the title, featured image, and content (HTML). It utilizes the `dangerouslySetInnerHTML` property to render the HTML content fetched from Ghost.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/sourcing-from-ghost.md#_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\nimport React from \"react\"\nimport { graphql } from \"gatsby\"\n\nconst Post = ({ data }) => {\n  const post = data.ghostPost\n  return (\n    <>\n      <article className=\"post\">\n        {post.feature_image ? (\n          <img src={post.feature_image} alt={post.title} />\n        ) : null}\n        <h1>{post.title}</h1>\n        <section dangerouslySetInnerHTML={{ __html: post.html }} />\n      </article>\n    </>\n  )\n}\n\nexport default Post\n\nexport const postQuery = graphql`\n  query($slug: String!) {\n    ghostPost(slug: { eq: $slug }) {\n      title\n      slug\n      feature_image\n      html\n    }\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: MDX Frontmatter Example\nDESCRIPTION: This code snippet demonstrates how to include frontmatter in an MDX file. Frontmatter is metadata that can be included at the beginning of an MDX file using triple hyphens. It stores key-value pairs and can be accessed via GraphQL.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-5/index.mdx#_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\n---\nname: \"Fun Facts about Red Pandas\"\ndatePublished: \"2021-07-12\"\nauthor: \"#1 Red Panda Fan\"\n---\n\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query for Sorted Blog Posts (GraphQL)\nDESCRIPTION: This GraphQL query retrieves a sorted list of blog posts, including title, excerpt, and slug, from the WordPress site using the `allWpPost` node, sorted by date.  Dependencies: `gatsby-source-wordpress` plugin configured with a valid WordPress GraphQL endpoint. Input: None. Output: JSON object containing an array of blog posts, sorted by date, with their title, excerpt, and slug.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-wordpress/docs/tutorials/building-a-new-site-wordpress-and-gatsby.md#_snippet_5\n\nLANGUAGE: GraphQL\nCODE:\n```\n{\n  allWpPost(sort: { fields: [date] }) {\n    nodes {\n      title\n      excerpt\n      slug\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Create pages from JSON in gatsby-node.js\nDESCRIPTION: This code snippet reads data from a JSON file and creates product pages dynamically using the `createPage` API.  It iterates through the product data, creating a page for each product and passing product data through the `context` object. Requires the product.json file and a product template.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/why-gatsby-uses-graphql.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nexports.createPages = ({ actions: { createPage } }) => {\n  const products = require(\"./data/products.json\")\n  products.forEach(product => {\n    createPage({\n      path: `/product/${product.slug}/`,\n      component: require.resolve(\"./src/templates/product.js\"),\n      context: {\n        title: product.title,\n        description: product.description,\n        image: product.image,\n        price: product.price,\n      },\n    })\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query for MarkdownRemark with Parent File\nDESCRIPTION: This GraphQL query retrieves the `id` and `name` of the parent `File` node for each `MarkdownRemark` node.  It's implicitly generated by Gatsby when using a collection route like `src/pages/blog/{MarkdownRemark.parent__(File)__name}.js`. The `id` field is always queried by Gatsby.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/routing/file-system-route-api.md#_snippet_3\n\nLANGUAGE: GraphQL\nCODE:\n```\nallMarkdownRemark {\n  nodes {\n    id # Gatsby always queries for id\n    parent {\n      ‚Ä¶ on File {\n        name\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Navigation with Gatsby Link Component\nDESCRIPTION: This code snippet shows how to use the Gatsby `Link` component to add a link to another page within a Gatsby site.  It imports the `Link` component from the `gatsby` package and uses it to create a link to the `/about` page. The `to` prop specifies the URL of the destination page.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-2/index.mdx#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react'\n// highlight-next-line\nimport { Link } from 'gatsby'\n\nconst IndexPage = () => {\n  return (\n    <main>\n      <h1>Welcome to my Gatsby site!</h1>\n      {/* highlight-next-line */}\n      <Link to=\"/about\">About</Link>\n      <p>I'm making this by following the Gatsby Tutorial.</p>\n    </main>\n  )\n}\n\nexport const Head = () => <title>Home Page</title>\n\nexport default IndexPage\n```\n\n----------------------------------------\n\nTITLE: Querying WordPress Posts with GraphQL\nDESCRIPTION: This GraphQL query retrieves the `id` and `uri` for all WordPress posts using `allWpPost`. This is a minimal query used for creating pages, focusing on identifying information rather than all page content.  It's designed to be used within the `createPages` function to generate routes for each post.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-wordpress/docs/tutorials/querying-data.md#_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  allWpPost {\n    nodes {\n      id\n      uri\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query for Nested Product Fields\nDESCRIPTION: This GraphQL query fetches the `id` and deeply nested `createdAt` field (under `fields.date`) from all `Product` nodes. It is generated automatically by Gatsby for file paths like `src/pages/products/{Product.fields__date__createdAt}.js`. The `id` field is always queried by Gatsby.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/routing/file-system-route-api.md#_snippet_2\n\nLANGUAGE: GraphQL\nCODE:\n```\nallProduct {\n  nodes {\n    id # Gatsby always queries for id\n    fields {\n      date {\n        createdAt\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example JSON Data Structure for Delta Updates\nDESCRIPTION: This JSON code snippet demonstrates the data structure representing delta updates, including entries to be created, updated, and deleted. This is an example and the exact structure will depend on the remote API being used.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/creating-a-source-plugin/part-5/index.mdx#_snippet_9\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"entries\": [\n    {\n      \"id\": 3\n    },\n    {\n      \"id\": 4\n    }\n  ],\n  \"updatedEntries\": [\n    {\n      \"id\": 1\n    }\n  ],\n  \"deletedEntries\": [\n    {\n      \"id\": 2\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Google Analytics Plugin in Gatsby Config\nDESCRIPTION: Configures the gatsby-plugin-google-analytics in the gatsby-config.js file. It includes setting the trackingId, head placement, anonymization, respectDNT, exclude paths, and other optional fields to customize Google Analytics behavior. Requires a Google Analytics tracking ID to function.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-google-analytics/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// In your gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-google-analytics`,\n      options: {\n        // The property ID; the tracking code won't be generated without it\n        trackingId: \"YOUR_GOOGLE_ANALYTICS_TRACKING_ID\",\n        // Defines where to place the tracking script - `true` in the head and `false` in the body\n        head: false,\n        // Setting this parameter is optional\n        anonymize: true,\n        // Setting this parameter is also optional\n        respectDNT: true,\n        // Avoids sending pageview hits from custom paths\n        exclude: [\"/preview/**\", \"/do-not-track/me/too/\"],\n        // Delays sending pageview hits on route update (in milliseconds)\n        pageTransitionDelay: 0,\n        // Enables Google Optimize using your container Id\n        optimizeId: \"YOUR_GOOGLE_OPTIMIZE_TRACKING_ID\",\n        // Enables Google Optimize Experiment ID\n        experimentId: \"YOUR_GOOGLE_EXPERIMENT_ID\",\n        // Set Variation ID. 0 for original 1,2,3....\n        variationId: \"YOUR_GOOGLE_OPTIMIZE_VARIATION_ID\",\n        // Defers execution of google analytics script after page load\n        defer: false,\n        // Any additional optional fields\n        sampleRate: 5,\n        siteSpeedSampleRate: 10,\n        cookieDomain: \"example.com\",\n        // defaults to false\n        enableWebVitalsTracking: true,\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Node and RemoteFile Interfaces for Asset in Gatsby (TS)\nDESCRIPTION: This snippet demonstrates how to implement the Node and RemoteFile interfaces for the Asset type in Gatsby's createSchemaCustomization API. This allows Gatsby to treat Asset nodes as remote files for image processing.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/creating-a-source-plugin/part-6/index.mdx#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { GatsbyNode } from \"gatsby\"\nimport { NODE_TYPES } from \"./constants\"\n\nexport const createSchemaCustomization: GatsbyNode[`createSchemaCustomization`] =\n  ({ actions }) => {\n    const { createTypes } = actions\n\n    createTypes(`\n      type ${NODE_TYPES.Post} implements Node {\n        id: ID!\n        _id: Int!\n        slug: String!\n        title: String!\n        author: ${NODE_TYPES.Author} @link(by: \"name\")\n        image: ${NODE_TYPES.Post}Image!\n      }\n\n      type ${NODE_TYPES.Author} implements Node {\n        id: ID!\n        _id: Int!\n        name: String!\n      }\n\n// highlight-next-line\n      type ${NODE_TYPES.Asset} implements Node & RemoteFile {\n        url: String!\n        alt: String!\n        width: Int!\n        height: Int!\n      }\n    `)\n  }\n```\n\n----------------------------------------\n\nTITLE: Importing CSS in Gatsby (JavaScript)\nDESCRIPTION: Demonstrates how to import CSS files directly into a Gatsby component. This allows for styling components using regular CSS and leveraging Gatsby's automatic concatenation and minification of CSS.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/styling/built-in-css.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from \"react\"\n// Import from a CSS file in your src\nimport \"../styles/index.css\"\n// Import from an installed package\nimport \"bootstrap/dist/css/bootstrap.min.css\"\n\nexport default function HomePage() {\n  return <div>I'm styled by bootstrap & src/styles/index.css</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Gatsby Function (JavaScript)\nDESCRIPTION: This example demonstrates a simple Gatsby Function that returns a JSON response. It shows the basic structure of a function file, including the default export and the `req` and `res` parameters. The function responds with a 200 status code and a JSON object containing a hello message.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/functions/getting-started.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default function handler(req, res) {\n  res.status(200).json({ hello: `world` })\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Gatsby Plugins\nDESCRIPTION: Adds the required plugins to the gatsby-config.js file. This configuration enables the Gatsby Image plugin, the Sharp image processing library, and the transformer plugin for dynamic images.  These plugins are essential for image optimization and integration with Gatsby.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-image/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`, // Needed for dynamic images\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Installing MDX dependencies in Gatsby\nDESCRIPTION: Installs the necessary npm packages for using MDX in a Gatsby project. It includes gatsby-plugin-mdx for processing MDX files, gatsby-source-filesystem for sourcing files, and @mdx-js/react for rendering MDX components.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/routing/mdx.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install gatsby-plugin-mdx gatsby-source-filesystem @mdx-js/react\n```\n\n----------------------------------------\n\nTITLE: Adding a Page Component\nDESCRIPTION: This JSX code snippet demonstrates how to add a new page component to a Gatsby site by creating a JavaScript file in the `src/pages/` directory. It imports React, Link, Layout, and SEO components, and defines a functional component `SpeakingPage` that returns JSX to render the page content. It then exports the `SpeakingPage` component as the default export.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/modifying-a-starter.md#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport React from \"react\"\nimport { Link } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\n\nconst SpeakingPage = () => (\n  <Layout>\n    <SEO title=\"Home\" />\n    <h1>Speaking Engagements</h1>\n    <p>I would love to speak at your conference!</p>\n    <p>I will be speaking at the following conferences next year:</p>\n    <ul>\n      <li>JS Heroes</li>\n      <li>self.conference</li>\n      <li>Strange Loop</li>\n    </ul>\n  </Layout>\n)\n\nexport default SpeakingPage\n```\n\n----------------------------------------\n\nTITLE: GraphQL Page Query Definition in Gatsby\nDESCRIPTION: This snippet demonstrates how to define a page query in a Gatsby page component using the `graphql` template literal. The query retrieves the site description from the `siteMetadata` object. The exported const contains a GraphQL query string.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/graphql-data-layer/graphql-api.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const pageQuery = graphql`\n  query HomePageQuery {\n    site {\n      siteMetadata {\n        description\n      }\n    }\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: Query for Fluid Image Data with GraphQL\nDESCRIPTION: This JSX code demonstrates how to query for a fluid image using GraphQL and display it with the Gatsby Img component. It uses useStaticQuery to fetch the image data and passes the fluid data to the Img component.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/built-in-components/gatsby-image.md#_snippet_4\n\nLANGUAGE: JSX\nCODE:\n```\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport Img from \"gatsby-image\"\n\nexport default function Image() {\n  const data = useStaticQuery(graphql`\n    query {\n      file(relativePath: { eq: \"images/default.jpg\" }) {\n        childImageSharp {\n          # Specify a fluid image and fragment\n          # The default maxWidth is 800 pixels\n          // highlight-start\n          fluid {\n            ...GatsbyImageSharpFluid\n          }\n          // highlight-end\n        }\n      }\n    }\n  `)\n  return (\n    <div>\n      <h1>Hello gatsby-image</h1>\n      <Img\n        fluid={data.file.childImageSharp.fluid} {/* highlight-line */}\n        alt=\"Gatsby Docs are awesome\"\n      />\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response with Image Credits\nDESCRIPTION: This JSON object shows the GraphQL response with the added hero image credit fields. It demonstrates the structure of the data returned, now including the image's alt text, credit link, and credit text.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-7/index.mdx#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"mdx\": {\n      \"frontmatter\": {\n        \"title\": \"My First Post\",\n        \"date\": \"July 23, 2021\",\n        \"hero_image_alt\": \"A gray pitbull relaxing on the sidewalk with its tongue hanging out\",\n        \"hero_image_credit_link\": \"https://unsplash.com/photos/ocZ-_Y7-Ptg\",\n        \"hero_image_credit_text\": \"Christopher Ayme\"\n      }\n    }\n  },\n  \"extensions\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Completing the GraphQL query for site metadata\nDESCRIPTION: This JavaScript code defines a GraphQL query to fetch the site metadata, specifically the description, from the `gatsby-config.js` file. It is part of the `index.js` file and uses the `graphql` tag.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/querying-data/page-query.md#_snippet_4\n\nLANGUAGE: GraphQL\nCODE:\n```\nexport const query = graphql`\n- # query will go here\n+  query HomePageQuery {\n+    site {\n+      siteMetadata {\n+        description\n+      }\n+    }\n+  }\n`\n```\n\n----------------------------------------\n\nTITLE: Extending StaticQuery in layout.js (JavaScript)\nDESCRIPTION: This code extends the `StaticQuery` component in `layout.js` to include the `menuLinks` in the GraphQL query. This ensures that the layout component has access to the menu links data, which can then be passed to child components like the Header.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/creating-dynamic-navigation.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst Layout = ({ children }) => (\n  <StaticQuery\n    query={graphql`\n      query SiteTitleQuery {\n        site {\n          siteMetadata {\n            title\n+            menuLinks {\n+              name\n+              link\n+            }\n          }\n        }\n      }\n    `}\n    render={data => (\n      <React.Fragment>\n        <Helmet\n          title={'title'}\n          meta={[\n            { name: 'description', content: 'Sample' },\n            { name: 'keywords', content: 'sample, something' },\n          ]}\n        >\n        </Helmet>\n        <Header siteTitle={data.site.siteMetadata.title} />\n        <div\n          style={{\n            margin: '0 auto',\n            maxWidth: 960,\n            padding: '0px 1.0875rem 1.45rem',\n            paddingTop: 0,\n          }}\n        >\n          {children}\n        </div>\n      </React.Fragment>\n    )}\n  />\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Node Type Constants in constants.ts\nDESCRIPTION: This code snippet shows how to define constants for node types in a `constants.ts` file. It uses a `const` assertion to make the object read-only and infer the most specific type, enabling an `enum`-like pattern.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/creating-a-source-plugin/part-2/index.mdx#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport const NODE_TYPES = {\n  Post: `Post`,\n  Author: `Author`,\n} as const\n```\n\n----------------------------------------\n\nTITLE: Installing Gatsby Image Dependencies\nDESCRIPTION: This command installs the `gatsby-image`, `gatsby-transformer-sharp`, and `gatsby-plugin-sharp` npm packages. These packages are required for using `gatsby-image` to process and optimize images in a Gatsby project. `gatsby-plugin-sharp` and `gatsby-transformer-sharp` are used to power image transformations.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/images-and-media/using-gatsby-image.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install gatsby-image gatsby-transformer-sharp gatsby-plugin-sharp\n```\n\n----------------------------------------\n\nTITLE: Load Google Tag Manager Script with Partytown\nDESCRIPTION: This code snippet demonstrates how to load the Google Tag Manager (GTM) script using Gatsby's `<Script>` component and the `off-main-thread` strategy, along with initializing the GTM dataLayer.  `process.env.GTM` should be defined in `.env.production` and `.env.development` files. The `forward` prop ensures dataLayer pushes are forwarded to the main thread.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/built-in-components/gatsby-script.md#_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Script } from \"gatsby\"\n\n// `process.env.GTM` is your Google Tag Manager identifier defined in your `.env.production` and `.env.development` files\n\n<Script\n  // highlight-next-line\n  src={`https://www.googletagmanager.com/gtm.js?id=${process.env.GTM}`}\n  strategy=\"off-main-thread\"\n  // highlight-next-line\n  forward={[`dataLayer.push`]}\n/>\n<Script id=\"gtm-init\" strategy=\"off-main-thread\">\n  {`\n    window.dataLayer = window.dataLayer || []\n    window.dataLayer.push({ 'gtm.start': new Date().getTime(), 'event': 'gtm.js' })\n  `}\n</Script>\n```\n\n----------------------------------------\n\nTITLE: Defining Page Content and Links in YAML\nDESCRIPTION: This YAML file defines the content and links for multiple pages. Each entry specifies the path, content (items to be displayed), and links to other pages. The structure uses lists and dictionaries to organize the data.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/sourcing-data/sourcing-from-json-or-yaml.md#_snippet_6\n\nLANGUAGE: YAML\nCODE:\n```\n- path: \"/page1\"\n  content:\n    - item: one item\n    - item: two items\n    - item: three items\n  links:\n    - to: \"/page2\"\n    - to: \"/page5\"\n- path: \"/page2\"\n  content:\n    - item:\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod\n        tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,\n        quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n        Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore\n        eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt\n        in culpa qui officia deserunt mollit anim id est laborum.\n  links:\n    - to: \"/page1\"\n- path: \"/page3\"\n  content:\n    - item: Cupcake ipsum dolor sit amet tootsie roll sesame snaps chupa chups.\n        Sugar plum chupa chups topping I love carrot cake I love marshmallow dessert.\n        Toffee gingerbread pie apple pie jelly beans pastry cookie.\n        Lemon drops wafer I love pastry halvah drag√©e pudding cake.\n        Cake halvah cookie jelly beans topping pudding cheesecake donut.\n        Cake croissant marshmallow.\n        Sesame snaps apple pie I love I love cake danish powder.\n        Lollipop sweet caramels.\n        Tiramisu danish marshmallow candy canes.\n        Powder cupcake cotton candy bonbon chocolate bar marshmallow gummies cheesecake marzipan.\n        Gummies souffl√© candy. Candy canes muffin chocolate brownie pudding.\n  links: []\n- path: \"/page4\"\n  content:\n    - item:\n        Lorem ipsum dolor amet mustache knausgaard +1, blue bottle waistcoat tbh\n        semiotics artisan synth stumptown gastropub cornhole celiac swag. Brunch raclette\n        vexillologist post-ironic glossier ennui XOXO mlkshk godard pour-over blog tumblr\n        humblebrag. Blue bottle put a bird on it twee prism biodiesel brooklyn. Blue\n        bottle ennui tbh succulents.\n  links:\n    - to: \"/page5\"\n    - to: \"/page1\"\n- path: \"/page5\"\n  content:\n    - item: St. agur blue cheese queso cheesecake.\n        Cheesecake the big cheese monterey jack cheesecake monterey jack paneer halloumi rubber cheese.\n        Cheese triangles cheese strings cheese slices cheesy feet taleggio cottage cheese when the cheese comes out everybody's happy gouda.\n        Feta cauliflower cheese babybel cheese on toast monterey jack.\n    - item:\n        Doggo ipsum borkdrive much ruin diet you are doing me the shock the neighborhood pupper doggorino length boy many pats, boofers heckin shooberino wrinkler.\n        Very good spot very jealous pupper very hand that feed shibe smol, shoob.\n        Long bois pupper doggo you are doin me a concern big ol yapper, smol boof most angery pupper I have ever seen puggorino.\n        Mlem blep wow very biscit dat tungg tho wow very biscit, thicc ur givin me a spook.\n        Many pats heckin you are doing me the shock corgo ur givin me a spook very hand that feed shibe shooberino, big ol pupper doge pats borkdrive.\n        Such treat what a nice floof super chub such treat, smol thicc.\n        Puggorino very good spot most angery pupper I have ever seen you are doing me the shock big ol pupper porgo corgo shoober, heckin good boys lotsa pats noodle horse very taste wow thicc.\n        What a nice floof long doggo blep length boy borking doggo, much ruin diet floofs borkf.\n  links:\n    - to: \"/page1\"\n```\n\n----------------------------------------\n\nTITLE: Defining a GraphQL Fragment\nDESCRIPTION: This GraphQL code defines a fragment named `SiteInformation` on the `Site` type. It specifies which fields from the `siteMetadata` object to include in the fragment: `title` and `siteDescription`. This fragment can then be reused in other queries.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/graphql-data-layer/using-graphql-fragments.md#_snippet_0\n\nLANGUAGE: GraphQL\nCODE:\n```\nfragment SiteInformation on Site {\n    siteMetadata {\n      title\n      siteDescription\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Create checkout component\nDESCRIPTION: This React component creates a checkout button that redirects the user to the Stripe Checkout page. It uses the `loadStripe` function to initialize Stripe and then calls `stripe.redirectToCheckout` to start the checkout process. Replace the `price` value with a valid Price ID from your Stripe account.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/ecommerce-tutorial/index.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React, { useState } from \"react\"\nimport { loadStripe } from \"@stripe/stripe-js\"\n\nconst buttonStyles = {\n  fontSize: \"13px\",\n  textAlign: \"center\",\n  color: \"#000\",\n  padding: \"12px 60px\",\n  boxShadow: \"2px 5px 10px rgba(0,0,0,.1)\",\n  backgroundColor: \"rgb(255, 178, 56)\",\n  borderRadius: \"6px\",\n  letterSpacing: \"1.5px\",\n}\n\nconst buttonDisabledStyles = {\n  opacity: \"0.5\",\n  cursor: \"not-allowed\",\n}\n\nlet stripePromise\nconst getStripe = () => {\n  if (!stripePromise) {\n    stripePromise = loadStripe(\"<YOUR STRIPE PUBLISHABLE KEY>\")\n  }\n  return stripePromise\n}\n\nconst Checkout = () => {\n  const [loading, setLoading] = useState(false)\n\n  const redirectToCheckout = async event => {\n    event.preventDefault()\n    setLoading(true)\n\n    const stripe = await getStripe()\n    const { error } = await stripe.redirectToCheckout({\n      mode: \"payment\",\n      lineItems: [{ price: \"price_1GriHeAKu92npuros981EDUL\", quantity: 1 }],\n      successUrl: `http://localhost:8000/page-2/`,\n      cancelUrl: `http://localhost:8000/`,\n    })\n\n    if (error) {\n      console.warn(\"Error:\", error)\n      setLoading(false)\n    }\n  }\n\n  return (\n    <button\n      disabled={loading}\n      style={\n        loading ? { ...buttonStyles, ...buttonDisabledStyles } : buttonStyles\n      }\n      onClick={redirectToCheckout}\n    >\n      BUY MY BOOK\n    </button>\n  )\n}\n\nexport default Checkout\n```\n\n----------------------------------------\n\nTITLE: Custom Resolver for Full Name\nDESCRIPTION: This JavaScript code defines a simple function `fullNameResolver` that concatenates the `firstName` and `name` properties of a source object to create a full name. This resolver is then used in the following schema customization example.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/graphql-data-layer/schema-customization.md#_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nconst fullNameResolver = source => `${source.firstName} ${source.name}`\n\n```\n\n----------------------------------------\n\nTITLE: Validating External API Access with Joi\nDESCRIPTION: This example demonstrates how to validate external API access within a plugin's option schema. It uses Joi's `.external()` method to asynchronously verify the user's access to a Contentful space using the provided `accessToken` and `spaceId`. This validation helps ensure that the plugin can properly connect to the external API before Gatsby build or develop processes begin.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/plugins-and-themes/configuring-usage-with-plugin-options.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexports.pluginOptionsSchema = ({ Joi }) => {\n  return Joi.object({\n    accessToken: Joi.string().required(),\n    spaceId: Joi.string().required(),\n    // ...more options here...\n  }).external(async pluginOptions => {\n    try {\n      await contentful\n        .createClient({\n          space: pluginOptions.spaceId,\n          accessToken: pluginOptions.accessToken,\n        })\n        .getSpace()\n    } catch (err) {\n      throw new Error(\n        `Cannot access Contentful space \"${pluginOptions.spaceId}\" with the provided access token. Double check they are correct and try again!`\n      )\n    }\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Async/await Example in Gatsby Node API\nDESCRIPTION: This snippet shows how to perform asynchronous operations using `async/await` within a Gatsby Node API (specifically `createPages`).  It assumes the existence of an `fetchExternalData` function which returns a promise. Gatsby waits for the promise to resolve before continuing the build process.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/config-files/gatsby-node.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Async/await\nexports.createPages = async () => {\n  // do async work\n  const result = await fetchExternalData()\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Gatsby Plugin\nDESCRIPTION: This command demonstrates how to install a Gatsby plugin using npm. Replace `plugin-name` with the actual name of the plugin you want to install. This command adds the plugin as a dependency in your `package.json` and `package-lock.json` files.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-3/index.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install plugin-name\n```\n\n----------------------------------------\n\nTITLE: Conditionally Sourcing Files Based on Environment Variables\nDESCRIPTION: This `gatsby-config.js` configuration conditionally sets the `path` option for `gatsby-source-filesystem` based on the `NODE_ENV` environment variable. During development (`NODE_ENV === 'development'`), it sources files from a smaller subset (`/src/content/2022`). For production builds, it sources all files from `/src/content`. The `gatsby-transformer-remark` plugin is also included for Markdown processing.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/sourcing-data/sourcing-from-the-filesystem.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-source-filesystem`,\n      options: {\n        name: `markdown-pages`,\n        path: process.env.NODE_ENV === `development` ? `${__dirname}/src/content/2022` : `${__dirname}/src/content`,\n      },\n    },\n    `gatsby-transformer-remark`,\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Shopify Images in Gatsby Components\nDESCRIPTION: This JSX code snippet demonstrates different ways to display Shopify images in Gatsby components using `<GatsbyImage>`. It covers scenarios for downloaded images and runtime images, leveraging `gatsbyImageData` and the `getShopifyImage` function. It requires `gatsby-plugin-image` and `gatsby-source-shopify`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-shopify/README.md#_snippet_9\n\nLANGUAGE: JSX\nCODE:\n```\nimport { GatsbyImage } from \"gatsby-plugin-image\"\nimport { getShopifyImage } from \"gatsby-source-shopify\"\n\nconst ShopifyProductImage = ({ product }) => (\n  <GatsbyImage src={product.featuredMedia.preview.image.gatsbyImageData} />\n)\n\nconst DownloadedProductImage = ({ product }) => (\n  <GatsbyImage\n    src={\n      product.featuredMedia.preview.image.localFile.childImageSharp\n        .gatsbyImageData\n    }\n  />\n)\n\nconst RuntimeProductImage = ({ storefrontProduct }) => {\n  const gatsbyImageData = getShopifyImage({\n    image: storefrontProduct.images.edges[0],\n    width: 800,\n    height: 800,\n    layout: \"fixed\",\n  })\n\n  return <GatsbyImage src={gatsbyImageData} />\n}\n\nconst RuntimeLineItemImage = ({ storefrontLineItem }) => {\n  const gatsbyImageData = getShopifyImage({\n    image: storefrontLineItem.variant.image,\n    width: 800,\n    height: 800,\n    layout: \"fixed\",\n  })\n\n  return <GatsbyImage src={gatsbyImageData} />\n}\n```\n\n----------------------------------------\n\nTITLE: Contact Form Integration with Formspree in JSX\nDESCRIPTION: This snippet illustrates integrating a contact form with Formspree.  The `action` attribute directs the POST request to the Formspree API with the desired email address. The `name` attribute of the email input is changed to `_replyto` for Formspree to recognize the email field.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/building-a-contact-form.md#_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\n<form method=\"post\" action=\"https://formspree.io/email@domain.tld\">\n  ...\n  <label>\n    Email\n    <input type=\"email\" name=\"_replyto\" />\n  </label>\n  ...\n</form>\n```\n\n----------------------------------------\n\nTITLE: Replicating __dirname in ESM\nDESCRIPTION: This JavaScript snippet shows how to replicate the `__dirname` variable, which is commonly used in CommonJS modules, within an ES module. It uses the `dirname` and `fileURLToPath` functions from the `path` and `url` modules, respectively.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/custom-configuration/es-modules.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { dirname } from \"path\"\nimport { fileURLToPath } from \"url\"\n\nconst __dirname = dirname(fileURLToPath(import.meta.url))\n```\n\n----------------------------------------\n\nTITLE: Setup imports in package.json with Yarn - JSON\nDESCRIPTION: This snippet demonstrates how to set up imports in `package.json` using Yarn's link feature. This configuration allows you to import local modules using a shorter alias instead of relative paths. This approach is applicable if you're using Yarn as your package manager and aims to simplify local module imports within the project.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/custom-configuration/add-custom-webpack-config.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"dependencies\": {\n    \"hooks\": \"link:./src/hooks\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting HTTP Headers in gatsby-config.js (JavaScript)\nDESCRIPTION: This snippet shows how to configure HTTP headers for specific request paths using the `headers` option in `gatsby-config.js`. It sets a custom header for the `/some-path` route.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/v5.11/index.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  headers: [\n    {\n      source: \"/some-path\",\n      headers: [\n        {\n          key: \"x-custom-header\",\n          value: \"hello world\"\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: gatsby-config.js: Custom transformSchema function (JavaScript)\nDESCRIPTION: Shows how to use the `transformSchema` option to customize the remote schema. This allows for modifying the schema before it is merged into the Gatsby schema.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-graphql/README.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { wrapSchema } = require(`@graphql-tools/wrap`)\nconst { linkToExecutor } = require(`@graphql-tools/links`)\n\nmodule.exports = {\n  plugins: [\n    {\n      resolve: \"gatsby-source-graphql\",\n      options: {\n        typeName: \"SWAPI\",\n        fieldName: \"swapi\",\n        url: \"https://api.graphcms.com/simple/v1/swapi\",\n        transformSchema: ({\n          schema,\n          link,\n          resolver,\n          defaultTransforms,\n          options,\n        }) => {\n          return wrapSchema(\n            {\n              schema,\n              executor: linkToExecutor(link),\n            },\n            defaultTransforms\n          )\n        }\n    },\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Limit Results with GraphQL\nDESCRIPTION: This query demonstrates how to limit the number of results returned by a GraphQL query using the `limit` argument. It retrieves the total count of MarkdownRemark nodes but only shows the first three results. The `allMarkdownRemark` node is queried with a limit of 3.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/graphql-reference.md#_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  allMarkdownRemark(limit: 3) {\n    totalCount\n    edges {\n      node {\n        frontmatter {\n          title\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure absolute imports in webpack - JS\nDESCRIPTION: This snippet shows how to configure absolute imports in the webpack configuration. By modifying the `resolve.modules` property, you can specify directories to search for modules, allowing you to import modules using paths relative to the `src` directory. This reduces the need for long relative paths in import statements.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/custom-configuration/add-custom-webpack-config.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nexports.onCreateWebpackConfig = ({ stage, actions }) => {\n  actions.setWebpackConfig({\n    resolve: {\n      modules: [path.resolve(__dirname, \"src\"), \"node_modules\"],\n    },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Proxy in Gatsby Config\nDESCRIPTION: This JavaScript snippet demonstrates how to configure a proxy in `gatsby-config.js` to forward requests with a specific prefix to a specified server.  This is useful for development when your frontend and backend are running on different ports.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/config-files/gatsby-config.md#_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  proxy: {\n    prefix: \"/api\",\n    url: \"http://examplesite.com/api/\",\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PostCSS plugins in gatsby-config.js\nDESCRIPTION: This example demonstrates how to specify custom PostCSS plugins within the `gatsby-plugin-postcss` configuration in `gatsby-config.js`. It shows how to add a plugin, such as `postcss-preset-env`, to process CSS using specific configurations. It requires the specified PostCSS plugins to be installed.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-postcss/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nplugins: [\n  {\n    resolve: `gatsby-plugin-postcss`,\n    options: {\n      postCssPlugins: [require(`postcss-preset-env`)({ stage: 0 })],\n    },\n  },\n],\n```\n\n----------------------------------------\n\nTITLE: Custom Bio Component in Gatsby Theme Blog (JSX)\nDESCRIPTION: This snippet demonstrates how to override the Bio component in the gatsby-theme-blog by creating a shadowed file in the user's site. It replaces the original Bio component with a simple heading.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/plugins-and-themes/shadowing.md#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\"\nexport default function Bio() {\n  return <h1>My new bio component!</h1>\n}\n```\n\n----------------------------------------\n\nTITLE: Filter with GraphQL - Regex Operator\nDESCRIPTION: This query filters MarkdownRemark nodes to find titles that do not start with 'T' using the `regex` operator. The regular expression `/^[^T]/` is used.  It shows how to use regular expressions for pattern matching in GraphQL filters.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/graphql-reference.md#_snippet_8\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  # regex: I want all the titles that do not start with 'T' -- this is what /^[^T]/ means.\n  # To learn more about regular expressions: https://regexr.com/\n  example_regex: allMarkdownRemark(\n    filter: { frontmatter: { title: { regex: \"/^[^T]/\" } } }\n  ) {\n    edges {\n      node {\n        frontmatter {\n          title\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Gatsby Index Page Component (JSX)\nDESCRIPTION: This snippet shows a Gatsby page component that fetches data using GraphQL and displays a list of posts. It demonstrates how to query for multiple nodes using `allMarkdownRemark` and access the data within the component. It imports `graphql` from `gatsby`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/conceptual/graphql-concepts.md#_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\"\nimport { graphql } from \"gatsby\"\n\nexport default function Home({ data }) {\n  return (\n    <div>\n      <h1>Index page</h1>\n      <h4>{data.allMarkdownRemark.totalCount} Posts</h4>\n      {data.allMarkdownRemark.edges.map(({ node }) => (\n        <div key={node.id}>\n          <h3>\n            {node.frontmatter.title} <span>‚Äî {node.frontmatter.date}</span>\n          </h3>\n        </div>\n      ))}\n    </div>\n  )\n}\n\nexport const query = graphql`\n  query {\n    allMarkdownRemark {\n      totalCount\n      edges {\n        node {\n          id\n          frontmatter {\n            title\n            date(formatString: \"DD MMMM, YYYY\")\n          }\n        }\n      }\n    }\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: Update event list component using Link (JSX)\nDESCRIPTION: This snippet updates the event list component to use the `event` data to display the event's name as a link to the event page, the event's date, and the event's location. Dependencies: React, gatsby, Link.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/building-a-theme.md#_snippet_30\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\"\n// highlight-start\nimport { Link } from \"gatsby\"\n\nconst EventList = ({ events }) => (\n  <>\n    <h2>Upcoming Events</h2>\n    <ul>\n      {events.map(event => (\n        <li key={event.id}>\n          <strong>\n            <Link to={event.slug}>{event.name}</Link>\n          </strong>\n          <br />\n          {new Date(event.startDate).toLocaleDateString(\"en-US\", {\n            month: \"long\",\n            day: \"numeric\",\n            year: \"numeric\",\n          })}{\" \"}\n          in {event.location}\n        </li>\n      ))}\n    </ul>\n  </>\n)\n// highlight-end\n\nexport default EventList\n```\n\n----------------------------------------\n\nTITLE: Configure gatsby-source-filesystem in gatsby-config.js\nDESCRIPTION: This code snippet shows how to configure `gatsby-source-filesystem` in `gatsby-config.js` to source files from a 'blog' directory.  It defines the `name` as `blog` and specifies the `path` to the directory. The `__dirname` variable is used to create an absolute path to the blog directory.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-4/index.mdx#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  siteMetadata: {\n    title: \"My First Gatsby Site\",\n  },\n  plugins: [\n    \"gatsby-plugin-image\",\n    \"gatsby-plugin-sharp\",\n    // highlight-start\n    {\n      resolve: \"gatsby-source-filesystem\",\n      options: {\n        name: `blog`,\n        path: `${__dirname}/blog`,\n      }\n    },\n    // highlight-end\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query for All Tags\nDESCRIPTION: This GraphQL query retrieves all tags from the `frontmatter` of MarkdownRemark nodes. It groups the posts by tag and returns the tag name (`fieldValue`) and the number of posts associated with each tag (`totalCount`).\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/adding-tags-and-categories-to-blog-posts.md#_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  allMarkdownRemark {\n    group(field: { frontmatter: { tags: SELECT } }) {\n      tag: fieldValue\n      totalCount\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: gatsby-config.js: createSchema with introspection.json (JavaScript)\nDESCRIPTION: Shows how to use the `createSchema` option to build the schema from an introspection JSON file.  This avoids schema introspection at runtime.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-graphql/README.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst fs = require(\"fs\")\nconst { buildSchema, buildClientSchema } = require(\"graphql\")\n\nmodule.exports = {\n  plugins: [\n    {\n      resolve: \"gatsby-source-graphql\",\n      options: {\n        typeName: \"SWAPI\",\n        fieldName: \"swapi\",\n        url: \"https://api.graphcms.com/simple/v1/swapi\",\n\n        createSchema: async () => {\n          const json = JSON.parse(\n            fs.readFileSync(`${__dirname}/introspection.json`)\n          )\n          return buildClientSchema(json.data)\n        },\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Adding SEO Metadata with Gatsby Head API\nDESCRIPTION: This code demonstrates how to add multiple metadata tags within the `Head` component in Gatsby, including the title and description. This is essential for search engine optimization, allowing search engines to better understand the content of the page.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-2/index.mdx#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nexport const Head = () => (\n  <>\n    <title>About Me</title>\n    <meta name=\"description\" content=\"Your description\" />\n  </>\n)\n```\n\n----------------------------------------\n\nTITLE: JSON-LD example for Rich Snippets\nDESCRIPTION: This is an example of structured data in the JSON-LD format, that can be added to a page to describe content to search engines. In this example, it is used to describe the contact information of a company.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/adding-common-features/adding-seo-component.md#_snippet_6\n\nLANGUAGE: JSX\nCODE:\n```\n<script type=\"application/ld+json\">\n  {`\n    {\n      \"@context\": \"https://schema.org\",\n      \"@type\": \"Organization\",\n      \"url\": \"https://www.spookytech.com\",\n      \"name\": \"Spooky technologies\",\n      \"contactPoint\": {\n        \"@type\": \"ContactPoint\",\n        \"telephone\": \"+5-601-785-8543\",\n        \"contactType\": \"Customer Support\"\n      }\n    }\n  `}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Basic Redirect Implementation in gatsby-node.js\nDESCRIPTION: This snippet demonstrates how to create a basic redirect using the `createRedirect` action in `gatsby-node.js`.  It redirects from `/blog/recipes/mouthwatering-lasagna` to `/recipes/mouthwatering-lasagna`. It requires Gatsby's `createPages` API and the `createRedirect` action. Remember to deploy the changes through Gatsby Cloud after implementing.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/cloud/working-with-redirects-and-rewrites.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexports.createPages = async ({ graphql, actions }) => {\n  const { createRedirect } = actions\n\n  createRedirect({\n    fromPath: `/blog/recipes/mouthwatering-lasagna`,\n    toPath: `/recipes/mouthwatering-lasagna`,\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: MDX Frontmatter: Adding Hero Image Metadata\nDESCRIPTION: This code snippet demonstrates how to add hero image metadata (path, alt text, credit) to an MDX file's frontmatter. The `hero_image` specifies the relative path to the image. The `hero_image_alt` provides alternative text. The `hero_image_credit_text` and `hero_image_credit_link` give credit to the photographer.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-7/index.mdx#_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\n---\ntitle: \"My First Post\"\ndate: \"2021-07-23\"\nslug: \"my-first-post\"\n// highlight-start\nhero_image: \"./christopher-ayme-ocZ-_Y7-Ptg-unsplash.jpg\"\nhero_image_alt: \"A gray pitbull relaxing on the sidewalk with its tongue hanging out\"\nhero_image_credit_text: \"Christopher Ayme\"\nhero_image_credit_link: \"https://unsplash.com/photos/ocZ-_Y7-Ptg\"\n// highlight-end\n---\n\n...\n```\n\n----------------------------------------\n\nTITLE: Implementing onPostBuild and createPages in gatsby-node.js\nDESCRIPTION: This snippet demonstrates how to implement the `onPostBuild` and `createPages` APIs in `gatsby-node.js`. `onPostBuild` logs a message after the build is complete. `createPages` dynamically creates blog pages by querying data and using the `createPage` action. It requires the `path` module and a GraphQL query to fetch page data.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/config-files/gatsby-node.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst path = require(`path`)\n// Log out information after a build is done\nexports.onPostBuild = ({ reporter }) => {\n  reporter.info(`Your Gatsby site has been built!`)\n}\n// Create blog pages dynamically\nexports.createPages = async ({ graphql, actions }) => {\n  const { createPage } = actions\n  const blogPostTemplate = path.resolve(`src/templates/blog-post.js`)\n  const result = await graphql(`\n    query {\n      allSamplePages {\n        edges {\n          node {\n            slug\n            title\n          }\n        }\n      }\n    }\n  `)\n  result.data.allSamplePages.edges.forEach(edge => {\n    createPage({\n      path: `${edge.node.slug}`,\n      component: blogPostTemplate,\n      context: {\n        title: edge.node.title,\n      },\n    })\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: getServerData with GraphQL Query\nDESCRIPTION: Shows how to combine `getServerData` with a Gatsby GraphQL page query.  The `data` prop from the GraphQL query is available alongside the `serverData` prop in the React component.  The example fetches a random dog image with `getServerData` and uses a GraphQL query to fetch site metadata.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/rendering-options/server-side-rendering.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport * as React from \"react\"\n\nconst Page = ({ data, serverData }) => {\n  const { site } = data\n  const { dogImage } = serverData\n  // Use dogImage and site info in your page...\n}\n\nexport const pageQuery = graphql`\n  query PageData {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n  }\n`\n\nexport async function getServerData() {\n  const res = await fetch(`https://dog.ceo/api/breeds/image/random`)\n  const data = await res.json()\n\n  return {\n    props: {\n      dogImage: data,\n    },\n  }\n}\n\nexport default Page\n```\n\n----------------------------------------\n\nTITLE: Shadowing Theme Styles - JavaScript\nDESCRIPTION: This code shadows styles from a base theme by importing the base theme and merging the styles with the local theme using `theme-ui`'s `merge` function.  This allows you to extend and customize the styles of an existing theme.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/styling/theme-ui.md#_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport baseTheme from \"gatsby-theme-unknown/src/gatsby-plugin-theme-ui\"\nimport { merge } from \"theme-ui\"\n\n// merge will deeply merge custom values with the\n// unknown theme's defaults\nexport default merge(baseTheme, {\n  colors: {\n    text: \"#222\",\n    primary: \"tomato\",\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: GatsbyImage Component Usage\nDESCRIPTION: Illustrates how to use the `GatsbyImage` component in a Gatsby application to display images obtained from a GraphQL query. It imports `GatsbyImage` and `getImage` from `gatsby-plugin-image`, retrieves the image data using `getImage` and renders the `GatsbyImage` component with the retrieved image data and alt text.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/v2.26/index.md#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\nexport function Plant({ data }) {\n  const imageData = getImage(data.file)\n  return <GatsbyImage image={imageData} alt=\"Plant\" />\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query with Variable\nDESCRIPTION: This JavaScript code snippet presents a modified GraphQL query that accepts a variable `$title` of type `String`. The query now dynamically fetches an MDX node based on the value of this variable. The `eq` operator compares the `title` field of the MDX node with the value passed through the `$title` variable.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/querying-data/page-query.md#_snippet_7\n\nLANGUAGE: GraphQL\nCODE:\n```\nexport const query = graphql`\n  query ($title: String) { // highlight-line\n    mdx(title: {eq: $title}) { // highlight-line\n      id\n      title\n    }\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: Creating Pages Programmatically in Gatsby\nDESCRIPTION: This code snippet uses the createPages API to programmatically create pages in Gatsby based on data from Kontent.ai.  It queries all Kontent.ai article nodes, extracts the slug, and creates a page for each article using the specified template.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/sourcing-data/sourcing-from-kontent-ai.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst path = require(`path`)\n\nexports.onCreateNode = ({ node, actions: { createNodeField } }) => {\n  if (node.internal.type === `kontent_item_article`) {\n    createNodeField({\n      node,\n      name: `slug`,\n      value: node.elements.url_pattern.value,\n    })\n  }\n}\n\nexports.createPages = async ({ graphql, actions }) => {\n  const { createPage } = actions\n\n  // Query data from Kontent\n  const result = await graphql(`\n    {\n      allKontentItemArticle {\n        nodes {\n          fields {\n            slug\n          }\n        }\n      }\n    }\n  `)\n\n  // Create pages\n  result.data.allKontentItemArticle.nodes.forEach((node) => {\n    createPage({\n      path: node.fields.slug,\n      component: path.resolve(`src/templates/article.js`),\n      context: {\n        slug: node.fields.slug,\n      },\n    })\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Product Variants with Custom Fields in JSX\nDESCRIPTION: This code snippet demonstrates how to add product variants (e.g., size) using custom fields in Snipcart. The `data-item-custom1-name` and `data-item-custom1-options` attributes are used to define the custom field's name and available options.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/adding-a-shopping-cart-with-snipcart.md#_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<section>\n  <h2>Silver Stacking Ring</h2>\n  <p>$19.99</p>\n  <p>Wear one or seventeen! These rings are fun to mix and match.</p>\n  <button\n    class=\"snipcart-add-item\"\n    data-item-id=\"silver-stacking-ring\"\n    data-item-price=\"19.99\"\n    data-item-url=\"/\"\n    data-item-name=\"Silver Stacking Ring\"\n    <!--highlight-start-->\n    data-item-custom1-name=\"Size\"\n    data-item-custom1-options=\"6|6.5|7|7.5|8|8.5|9\"\n    <!-- highlight-end -->\n    >\n    Add to cart\n  </button>\n</section>\n```\n\n----------------------------------------\n\nTITLE: Using the getImage Helper Function in JavaScript\nDESCRIPTION: This JavaScript code snippet shows how to use the `getImage` helper function to extract the `gatsbyImageData` object from the MDX frontmatter's hero image field.  The `getImage` function simplifies the process of accessing the image data needed by the `GatsbyImage` component.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-7/index.mdx#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n// imports\n\nconst BlogPost = ({ data, children }) => {\n  const image = getImage(data.mdx.frontmatter.hero_image) // highlight-line\n\n  return (\n    // ...\n  )\n}\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Passing Context to Slice Components - JavaScript\nDESCRIPTION: This snippet shows how to pass context to Slice components using the `context` key in the `createSlice` action.  The context data is then accessible in the Slice component via the `sliceContext` prop.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/performance/using-slices.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexports.createPages = async ({ actions }) => {\n  actions.createSlice({\n    id: `header`,\n    context: {\n      jokeOfTheDay: `What's blue and not heavy? Light blue.`,\n    },\n    component: require.resolve(`./src/components/header.js`),\n  })\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// highlight-next-line\nconst Header = ({ className, sliceContext }) => {\n  return (\n    <div className={className}>\n      <Link to=\"/\">Home</Link>\n      // highlight-next-line\n      <Link to=\"/jokes\">{sliceContext.jokeOfTheDay}</Link>\n    </div>\n  )\n}\n\nexport default Header\n```\n\n----------------------------------------\n\nTITLE: Configuring Gatsby Source Shopify Plugin with Image Download\nDESCRIPTION: This configuration snippet demonstrates how to set up the `gatsby-source-shopify` plugin in `gatsby-config.js` to download images during the build process.  It sets the `downloadImages` option to `true` and includes required plugins for image processing. Dependencies include `dotenv`, `gatsby-plugin-image`, `gatsby-plugin-sharp`, and `gatsby-transformer-sharp`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-shopify/README.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"dotenv\").config()\n\nmodule.exports = {\n  plugins: [\n    {\n      resolve: \"gatsby-source-shopify\",\n      options: {\n        password: process.env.SHOPIFY_APP_PASSWORD,\n        storeUrl: process.env.GATSBY_MYSHOPIFY_URL,\n        downloadImages: true,\n      },\n    },\n    \"gatsby-plugin-image\",\n    \"gatsby-plugin-sharp\", // Required when downloadImages is true\n    \"gatsby-transformer-sharp\", // Required when downloadImages is true\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Experience JSON Data\nDESCRIPTION: This JSON snippet represents experience data, containing information about a company, position, and responsibilities. It includes an array of `tech` fields that can be mapped to technology data in a separate JSON file.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/config-files/gatsby-config.md#_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"id\": \"companyA\",\n    \"company\": \"Company A\",\n    \"position\": \"Unicorn Developer\",\n    \"from\": \"Dec 2016\",\n    \"to\": \"Present\",\n    \"items\": [\n      {\n        \"label\": \"Responsibility\",\n        \"description\": \"Being an unicorn\"\n      },\n      {\n        \"label\": \"Hands on\",\n        \"tech\": [\"REACT\", \"NODE\"]\n      }\n    ]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Gatsby Source Contentful with Delivery API\nDESCRIPTION: This code snippet demonstrates how to configure the `gatsby-source-contentful` plugin in `gatsby-config.js` to fetch content from Contentful using the Delivery API.  It requires the `spaceId` and `accessToken` to be set.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-contentful/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// In your gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-source-contentful`,\n      options: {\n        spaceId: `your_space_id`,\n        // Learn about environment variables: https://gatsby.dev/env-vars\n        accessToken: process.env.CONTENTFUL_ACCESS_TOKEN,\n      },\n    },\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Create Foreign-key Relations with GraphQL @link Directive\nDESCRIPTION: This snippet demonstrates how to create foreign-key relations using the `@link` directive in GraphQL schema definition. It shows how to link fields based on `id` or a custom field (e.g., email) and how to create back-references.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/graphql-data-layer/schema-customization.md#_snippet_16\n\nLANGUAGE: graphql\nCODE:\n```\ntype MarkdownRemark implements Node {\n  frontmatter: Frontmatter\n}\ntype Frontmatter {\n  author: AuthorJson @link # default foreign-key relation by `id`\n  reviewers: [AuthorJson] @link(by: \"email\") # foreign-key relation by custom field\n}\ntype AuthorJson implements Node {\n  posts: [MarkdownRemark] @link(by: \"frontmatter.author.email\", from: \"email\") # easy back-ref\n}\n```\n\n----------------------------------------\n\nTITLE: Adding GraphQL Query to Index Page\nDESCRIPTION: This GraphQL query retrieves all Markdown posts, sorts them by date in descending order, and extracts the id, excerpt, date (formatted), slug, and title. It is used within the index page to fetch data for the blog posts.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/adding-a-list-of-markdown-blog-posts.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from \"react\"\nimport { graphql } from \"gatsby\"\nimport PostLink from \"../components/post-link\"\n\nconst IndexPage = ({\n  data: {\n    allMarkdownRemark: { edges },\n  },\n}) => {\n  const Posts = edges\n    .filter(edge => !!edge.node.frontmatter.date) // You can filter your posts based on some criteria\n    .map(edge => <PostLink key={edge.node.id} post={edge.node} />)\n\n  return <div>{Posts}</div>\n}\n\nexport default IndexPage\n\nexport const pageQuery = graphql`\n  query {\n    allMarkdownRemark(sort: { frontmatter: { date: DESC }}) {\n      edges {\n        node {\n          id\n          excerpt(pruneLength: 250)\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            slug\n            title\n          }\n        }\n      }\n    }\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: Rewrite/Reverse Proxy in gatsby-node.js\nDESCRIPTION: This snippet demonstrates how to create a rewrite or reverse proxy using `createRedirect` with a `statusCode` of 200 and an external URL for `toPath`. It proxies requests from `/docs/*` to `https://www.awesomesite.com/docs/*`. Requires Gatsby's `createPages` API and the `createRedirect` action.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/cloud/working-with-redirects-and-rewrites.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nexports.createPages = async ({ actions }) => {\n  const { createRedirect } = actions\n\n  createRedirect({\n    fromPath: `/docs/*`,\n    toPath: `https://www.awesomesite.com/docs/*`,\n    statusCode: 200,\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Page Query for WordPress Post\nDESCRIPTION: This GraphQL query fetches a specific WordPress post based on its `id`, which is passed as a variable in the context. It retrieves the `id`, `title`, and `content` of the post. This query is designed to be used within a page template to populate the page with data from WordPress.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-wordpress/docs/tutorials/querying-data.md#_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\nexport const query = graphql`\n  query ($id: String) {\n    wpPost(id: { eq: $id }) {\n      id\n      title\n      content\n    }\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: Installing Sass plugin and sass dependency\nDESCRIPTION: Installs the `gatsby-plugin-sass` Gatsby plugin and the `sass` package, which is a peer dependency required for the plugin to function correctly.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/styling/sass.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install sass gatsby-plugin-sass\n```\n\n----------------------------------------\n\nTITLE: Configuring Gatsby to Use Sanity Environment Variables\nDESCRIPTION: This snippet shows how to configure Gatsby to use environment variables defined in a .env file for the Sanity project. It requires the `dotenv` package to load the variables into `process.env`. It then configures the `gatsby-source-sanity` plugin with the project ID, dataset, and token obtained from the environment variables.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/sourcing-from-sanity.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(\"dotenv\").config({\n  path: `.env.${process.env.NODE_ENV}`,\n})\n\nmodule.exports = {\n  plugins: [\n    {\n      resolve: \"gatsby-source-sanity\",\n      options: {\n        projectId: process.env.SANITY_PROJECT_ID,\n        dataset: process.env.SANITY_DATASET,\n        token: process.env.SANITY_TOKEN,\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Mocking Gatsby Module (__mocks__/gatsby.js)\nDESCRIPTION: This JavaScript file mocks the `gatsby` module. It mocks the `graphql()` function, `Link` component, `Slice` component and `useStaticQuery` hook, providing dummy implementations that allow tests to run without relying on the actual Gatsby functionality.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/testing/unit-testing.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst React = require(\"react\")\nconst gatsby = jest.requireActual(\"gatsby\")\n\nmodule.exports = {\n  ...gatsby,\n  graphql: jest.fn(),\n  Link: jest.fn().mockImplementation(\n    // these props are invalid for an `a` tag\n    ({\n      activeClassName,\n      activeStyle,\n      getProps,\n      innerRef,\n      partiallyActive,\n      ref,\n      replace,\n      to,\n      ...rest\n    }) =>\n      React.createElement(\"a\", {\n        ...rest,\n        href: to,\n      })\n  ),\n  Slice: jest.fn().mockImplementation(\n    ({ alias, ...rest }) =>\n      React.createElement(\"div\", {\n        ...rest,\n        \"data-test-slice-alias\": alias\n      })\n  ),\n  useStaticQuery: jest.fn(),\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding a Local Video (JSX)\nDESCRIPTION: This code shows how to embed a locally hosted video using the HTML5 `<video>` element. It imports the video file and sets it as the `src` attribute of the `<source>` element. The `controls` attribute enables default video controls.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/images-and-media/working-with-video.md#_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\"\nimport DogVideo from \"../assets/dog.mp4\"\n\nexport default function Home() {\n  return (\n    <video controls>\n      <source src={DogVideo} type=\"video/mp4\" /> // highlight-line\n    </video>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Resolving Paths in gatsby-node (Diff)\nDESCRIPTION: This code snippet shows how to replace `require.resolve` with `path.resolve` in `gatsby-node.ts` when using TypeScript with Gatsby. The `require.resolve` function is not supported in the current Parcel setup used by Gatsby for TypeScript compilation, so it needs to be replaced with the NodeJS `path` module.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/custom-configuration/typescript.md#_snippet_17\n\nLANGUAGE: Diff\nCODE:\n```\n+ import path from \"path\"\n\n+ const template = path.resolve(`./src/templates/template.tsx`)\n- const template = require.resolve(`./src/templates/template.tsx`)\n```\n\n----------------------------------------\n\nTITLE: Install reading-time package\nDESCRIPTION: Installs the `reading-time` package as a dependency. This package is used to calculate the estimated reading time of the MDX content.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-mdx/README.md#_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install reading-time\n```\n\n----------------------------------------\n\nTITLE: Adding a Buy Button with Snipcart Attributes in JSX\nDESCRIPTION: This code snippet shows how to add a \"buy button\" to a product using Snipcart-specific attributes. The `data-item-*` attributes are used to define the product ID, price, URL, and name.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/adding-a-shopping-cart-with-snipcart.md#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<section>\n  <h2>Silver Stacking Ring</h2>\n  <p>$19.99</p>\n  <p>Wear one or seventeen! These rings are fun to mix and match.</p>\n  <!-- highlight-start -->\n  <button\n    class=\"snipcart-add-item\"\n    data-item-id=\"silver-stacking-ring\"\n    data-item-price=\"19.99\"\n    data-item-url=\"/\"\n    data-item-name=\"Silver Stacking Ring\"\n  >\n    Add to cart\n  </button>\n  <!-- highlight-end -->\n</section>\n```\n\n----------------------------------------\n\nTITLE: Defining the Event Type\nDESCRIPTION: Defines a custom `Event` type in Gatsby using the `createSchemaCustomization` API. This type specifies the structure and fields of event data, including name, location, start/end dates, URL, and a slug for generating pages.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/building-a-theme.md#_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst fs = require(\"fs\")\n\n// Make sure the data directory exists\nexports.onPreBootstrap = ({ reporter }) => {\n  const contentPath = `${__dirname}/data/`\n\n  if (!fs.existsSync(contentPath)) {\n    reporter.info(`creating the ${contentPath} directory`)\n    fs.mkdirSync(contentPath)\n  }\n}\n\n// Define the \"Event\" type\nexports.createSchemaCustomization = ({ actions }) => {\n  actions.createTypes(`\n    type Event implements Node @dontInfer {\n      id: ID!\n      name: String!\n      location: String!\n      startDate: Date! @dateformat @proxy(from: \"start_date\")\n      endDate: Date! @dateformat @proxy(from: \"end_date\")\n      url: String!\n      slug: String!\n    }\n  `)\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Plugin with Options in gatsby-config.js\nDESCRIPTION: This code demonstrates how to configure a plugin with specific options in `gatsby-config.js`. Instead of adding a string to the `plugins` array, an object with `resolve` and `options` is added. The `resolve` field specifies the plugin name, and the `options` field contains configuration settings that the plugin will use. Refer to the plugin documentation for required options.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-3/index.mdx#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  siteMetadata: {\n    title: \"My First Gatsby Site\",\n  },\n  plugins: [\n    // highlight-start\n    {\n      resolve: \"plugin-name\",\n      options: {\n        // Check the plugin README for what options go in here\n      }\n    },\n    // highlight-end\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using StaticImage component with remote image URL\nDESCRIPTION: Shows how to use the `StaticImage` component to display a static remote image in a Gatsby component. It imports the `StaticImage` component and sets the `src` prop to the URL of the image. The `alt` prop provides alternative text for accessibility.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/images-and-media/using-gatsby-plugin-image.md#_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nexport function Kitten() {\n  return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n}\n```\n\n----------------------------------------\n\nTITLE: Gatsby Source WordPress Plugin Config\nDESCRIPTION: This code snippet shows the basic configuration for the `gatsby-source-wordpress` plugin in the `gatsby-config.js` file. It specifies the GraphQL endpoint of the WordPress instance. The url option is the only required parameter for the plugin to function.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-wordpress/docs/tutorials/creating-a-new-site-from-a-starter.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n      /**\n       * First up is the WordPress source plugin that connects Gatsby\n       * to your WordPress site.\n       *\n       * visit the plugin docs to learn more\n       * https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-wordpress/README.md\n       *\n       */\n      resolve: `gatsby-source-wordpress`,\n      options: {\n        // the only required plugin option for WordPress is the GraphQL url.\n        url:\n          process.env.WPGRAPHQL_URL ||\n          `https://wpgatsbydemo.wpengine.com/graphql`,\n      },\n    }\n```\n\n----------------------------------------\n\nTITLE: Building Images on the Fly with useContentfulImage\nDESCRIPTION: This JavaScript code demonstrates how to use the `useContentfulImage` hook to create dynamic images on the fly using the Contentful Image API. It imports `GatsbyImage`, `React`, and `useContentfulImage` and renders a `GatsbyImage` component with the dynamic image data.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-contentful/README.md#_snippet_14\n\nLANGUAGE: js\nCODE:\n```\nimport { GatsbyImage } from \"gatsby-plugin-image\"\nimport * as React from \"react\"\nimport { useContentfulImage } from \"gatsby-source-contentful/hooks\"\n\nconst MyComponent = () => {\n  const dynamicImage = useContentfulImage({\n    image: {\n      url: \"//images.ctfassets.net/k8iqpp6u0ior/3BSI9CgDdAn1JchXmY5IJi/f97a2185b3395591b98008647ad6fd3c/camylla-battani-AoqgGAqrLpU-unsplash.jpg\",\n      width: 2000,\n      height: 1000,\n    },\n  })\n\n  return <GatsbyImage image={dynamicImage} />\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Pages from WordPress Posts in Gatsby JS\nDESCRIPTION: This JavaScript snippet processes the results of the GraphQL query to create pages for each WordPress post. It iterates through the posts, defines a template component, and uses the `createPage` action to generate a page for each post.  The `path`, `component`, and `context` properties are configured for each page.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-wordpress/docs/tutorials/querying-data.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nif (result.errors) {\n  reporter.error(\"There was an error fetching posts\", result.errors)\n}\n\nconst { allWpPost } = result.data\n\n// Define the template to use\nconst template = require.resolve(`./src/templates/WpPost.js`)\n\nif (allWpPost.nodes.length) {\n  allWpPost.nodes.map(post => {\n    actions.createPage({\n      // It's best practice to use the uri field from WPGraphQL nodes when\n      // building\n      path: post.uri,\n      component: template,\n      context: post,\n    })\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Query MDX data (with excerpt)\nDESCRIPTION: This GraphQL query fetches the `title`, formatted `date`, `id` and `excerpt` from all MDX nodes. The `excerpt` field provides a brief summary of the content of each post. Sorts the data in descending order by date.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-5/index.mdx#_snippet_12\n\nLANGUAGE: graphql\nCODE:\n```\nquery MyQuery {\n  allMdx(sort: { frontmatter: { date: DESC } }) {\n    nodes {\n      frontmatter {\n        date(formatString: \"MMMM D, YYYY\")\n        title\n      }\n      id\n      excerpt\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling SSR in Development with gatsby-config.js (JavaScript)\nDESCRIPTION: This code snippet shows how to enable Server Side Rendering (SSR) during development by adding the DEV_SSR flag to the flags object within the gatsby-config.js file. This allows developers to identify and fix SSR-related issues earlier in the development process. The plugins array is also included to indicate the general structure of the file.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/v2.30/index.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  flags : { DEV_SSR: true },\n  plugins: [...],\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Site Title from Kontent.ai\nDESCRIPTION: This code uses useStaticQuery hook in a layout component to fetch the site title from a Kontent.ai item of type Home.  It extracts the value from the metadata__meta_title element.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/sourcing-data/sourcing-from-kontent-ai.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n// ...\nconst Layout = ({ children }) => {\n  const data = useStaticQuery(graphql`\n    query SiteTitleQuery{\n      kontentItemHome {\n        elements {\n          metadata__meta_title {\n            value\n          }\n        }\n      }\n    }\n  `)\n\n  return (\n    <>\n      <Header siteTitle={data.kontentItemHome.elements.metadata__meta_title.value} />\n// ...\n```\n\n----------------------------------------\n\nTITLE: Create a Slice in gatsby-node.js - JavaScript\nDESCRIPTION: This snippet shows how to create a Slice using the `createSlice` action in `gatsby-node.js`. It defines an ID for the slice and specifies the component to use for rendering the slice.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/performance/using-slices.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexports.createPages = async ({ actions }) => {\n  actions.createSlice({\n    id: `header`,\n    component: require.resolve(`./src/components/header.js`),\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Update Post Page Query and Usage (TSX)\nDESCRIPTION: This code snippet updates the post page component to fetch and display the author's name from the linked `author` node. The GraphQL query is modified to include the `author.name` field, and the component's JSX is updated to render the author's name.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/creating-a-source-plugin/part-3/index.mdx#_snippet_12\n\nLANGUAGE: TSX\nCODE:\n```\n// Imports\n\nexport default function PostPage({\n  data: { post },\n}: PageProps<{ post: Queries.Post }>): React.ReactElement {\n  return (\n    <main>\n      <h1>{post.title}</h1>\n      {/* highlight-next-line */}\n      <p>Author: {post.author.name}</p>\n      <br />\n      <Link to=\"/\">Back to home page</Link>\n    </main>\n  )\n}\n\n\n// Head API\n\nexport const query = graphql`\n  query PostPage($slug: String!) {\n    post(slug: { eq: $slug }) {\n      title\n// highlight-start\n      author {\n        name\n      }\n// highlight-end\n    }\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: Programmatic In-App Navigation Using Navigate Helper\nDESCRIPTION: Showcases the proper use of navigate helper for programmatic navigation. Anchor tags should be use for in-app navigation or the navigate helper function imported.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/built-in-components/gatsby-link.md#_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { navigate } from 'gatsby';\n\n...\n\nonClick = () => {\n  navigate('#some-link');\n  // OR\n  navigate('?foo=bar');\n}\n```\n\n----------------------------------------\n\nTITLE: Using Context in Head API\nDESCRIPTION: This code snippet demonstrates how to use a context in Gatsby's `Head` API. It imports the `useSiteMetadataContext` hook from the `app-providers` component and uses it to access the site title. The title is then used within the `Head` component to set the page title.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/v5.6/index.md#_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\nimport * as React from \"react\";\n// highlight-next-line\nimport { useSiteMetadataContext } from \"../components/app-providers\";\n\nexport function Head() {\n  // highlight-next-line\n  const { title } = useSiteMetadataContext();\n\n  return (\n    <>\n      <title>{title}</title>\n    </>\n  );\n}\n\nexport default function DefaultPageTemplate() {\n  // template details.\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring environment variables in .env file\nDESCRIPTION: This shows the structure of the .env file, which stores Algolia API keys and application ID.  These values are used by the Algolia plugin to authenticate and authorize data writes. The Admin API Key needs to be kept secure and not included in shipped code.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/adding-search-with-algolia.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nGATSBY_ALGOLIA_APP_ID=<App ID>\nGATSBY_ALGOLIA_SEARCH_KEY=<Search-Only API Key>\nALGOLIA_ADMIN_KEY=<Admin API Key>\n```\n\n----------------------------------------\n\nTITLE: Applying a Layout Component to a Page (JSX)\nDESCRIPTION: This snippet illustrates how to import and use a layout component within a Gatsby page. It imports React and the `Layout` component, then defines a `Home` component that returns JSX. The JSX wraps a heading element `<h1>I‚Äôm in a layout!</h1>` within the imported `Layout` component, demonstrating how to apply the layout to the page content.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/routing/layout-components.md#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\"\nimport Layout from \"../components/layout\" // highlight-line\n\nexport default function Home() {\n  return (\n    <Layout> {/* highlight-line */}\n      <h1>I‚Äôm in a layout!</h1>\n    </Layout> {/* highlight-line */}\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Create Pages in gatsby-node.js (JavaScript)\nDESCRIPTION: This code retrieves blog post data from WordPress using GraphQL and creates individual pages for each blog post using the `createPage` action. It then logs the result and exits the process. Dependencies: `gatsby-node.js` file, `gatsby-source-wordpress` plugin configured with a valid WordPress GraphQL endpoint.  Input: None. Output: Creation of individual blog post pages in the Gatsby site.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-wordpress/docs/tutorials/building-a-new-site-wordpress-and-gatsby.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst path = require(`path`)\n\nexports.createPages = ({ graphql, actions }) => {\n  const { createPage } = actions\n  return graphql(`\n    {\n      allWpPost(sort: { fields: [date] }) {\n        nodes {\n          title\n          excerpt\n          content\n          slug\n        }\n      }\n    }\n  `).then(result => {\n    console.log(JSON.stringify(result, null, 4))\n    process.exit()\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Define GraphQL types using SDL TypeScript\nDESCRIPTION: This snippet demonstrates how to use `createTypes` to define GraphQL types using Schema Definition Language (SDL).  It defines a `User` type with an `address` field of type `UserAddress`, and a `UserAddress` type with `street` and `state` fields.  The `street` field is marked as Non-Null (`String!`).  The `User` type implements the `Node` interface making it a root node type.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/creating-a-source-plugin/part-3/index.mdx#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport type { GatsbyNode } from \"gatsby\"\n\nexport const createSchemaCustomization: GatsbyNode[`createSchemaCustomization`] =\n  ({ actions }) => {\n    const { createTypes } = actions\n\n    createTypes(`\n      type User implements Node {\n        address: UserAddress\n      }\n\n      type UserAddress {\n        street: String!\n        state: String\n      }\n    `)\n  }\n```\n\n----------------------------------------\n\nTITLE: Validate Plugin Options Schema (JavaScript)\nDESCRIPTION: This example shows how to use `validateOptionsSchema` to verify the data types of options passed to a plugin from the `gatsby-config.js` file.  It validates that the plugin options adhere to the defined schema. Requires importing `validateOptionsSchema` from `gatsby-plugin-utils`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-utils/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { validateOptionsSchema } from \"gatsby-plugin-utils\"\n\nawait validateOptionsSchema(pluginName, pluginSchema, pluginOptions)\n```\n\n----------------------------------------\n\nTITLE: Reference font in CSS\nDESCRIPTION: This CSS snippet demonstrates how to reference the \"Open Sans\" font family in your CSS styles after configuring `gatsby-omni-font-loader`. It sets the font-family property of the body to \"Open Sans\".\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/styling/using-web-fonts.md#_snippet_2\n\nLANGUAGE: CSS\nCODE:\n```\nbody {\n  font-family: \"Open Sans\";\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Pages from WordPress Posts in gatsby-node.js\nDESCRIPTION: This code snippet demonstrates how to use the createPages API in gatsby-node.js to programmatically create pages from WordPress posts. It queries all WordPress posts using GraphQL, then iterates through each post to create a page based on a defined template and path.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/sourcing-data/sourcing-from-wordpress.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst path = require(`path`)\nconst { slash } = require(`gatsby-core-utils`)\n\nexports.createPages = async ({ graphql, actions }) => {\n  const { createPage } = actions\n\n  // query content for WordPress posts\n  const {\n    data: {\n      allWpPost: { nodes: allPosts },\n    },\n  } = await graphql(`\n    query {\n      allWpPost {\n        nodes {\n          id\n          uri\n        }\n      }\n    }\n  `)\n\n  const postTemplate = path.resolve(`./src/templates/post.js`)\n\n  allPosts.forEach(post => {\n    createPage({\n      // will be the url for the page\n      path: post.uri,\n      // specify the component template of your choice\n      component: slash(postTemplate),\n      // In the ^template's GraphQL query, 'id' will be available\n      // as a GraphQL variable to query for this post's data.\n      context: {\n        id: post.id,\n      },\n    })\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Styled Components Page\nDESCRIPTION: This JSX code defines a page component (`src/pages/index.js`) using Styled Components. It demonstrates how to create styled divs, images, and headings with CSS directly within the component. The example showcases nesting, media queries, and dynamic styling.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/styling/styled-components.md#_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\nimport React from \"react\"\nimport styled from \"styled-components\"\n\nconst Container = styled.div`\n  margin: 3rem auto;\n  max-width: 600px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n`\n\nconst UserWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  margin: 0 auto 12px auto;\n  &:last-child {\n    margin-bottom: 0;\n  }\n`\n\nconst Avatar = styled.img`\n  flex: 0 0 96px;\n  width: 96px;\n  height: 96px;\n  margin: 0;\n`\n\nconst Description = styled.div`\n  flex: 1;\n  margin-left: 18px;\n  padding: 12px;\n`\n\nconst Username = styled.h2`\n  margin: 0 0 12px 0;\n  padding: 0;\n`\n\nconst Excerpt = styled.p`\n  margin: 0;\n`\n\nconst User = props => (\n  <UserWrapper>\n    <Avatar src={props.avatar} alt=\"\" />\n    <Description>\n      <Username>{props.username}</Username>\n      <Excerpt>{props.excerpt}</Excerpt>\n    </Description>\n  </UserWrapper>\n)\n\nexport default function UsersList() {\n  return (\n    <Container>\n      <h1>About Styled Components</h1>\n      <p>Styled Components is cool</p>\n      <User\n        username=\"Jane Doe\"\n        avatar=\"https://s3.amazonaws.com/uifaces/faces/twitter/adellecharles/128.jpg\"\n        excerpt=\"I'm Jane Doe. Lorem ipsum dolor sit amet, consectetur adipisicing elit.\"\n      />\n      <User\n        username=\"Bob Smith\"\n        avatar=\"https://s3.amazonaws.com/uifaces/faces/twitter/vladarbatov/128.jpg\"\n        excerpt=\"I'm Bob smith, a vertically aligned type of guy. Lorem ipsum dolor sit amet, consectetur adipisicing elit.\"\n      />\n    </Container>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Create schema customization with headings resolver in gatsby-node.mjs\nDESCRIPTION: Adds a new `headings` field resolver to your `Mdx` nodes through the `createSchemaCustomization` API. This uses the custom `remark-headings-plugin` to extract and provide heading data in the GraphQL schema.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-mdx/README.md#_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { compileMDXWithCustomOptions } from \"gatsby-plugin-mdx\"\nimport remarkHeadingsPlugin from \"./remark-headings-plugin.mjs\"\n\nexport const createSchemaCustomization = async ({ getNode, getNodesByType, pathPrefix, reporter, cache, actions, schema, store }) => {\n  const { createTypes } = actions\n\n  const headingsResolver = schema.buildObjectType({\n    name: `Mdx`,\n    fields: {\n      headings: {\n        type: `[MdxHeading]`,\n        async resolve(mdxNode) {\n          const fileNode = getNode(mdxNode.parent)\n\n          if (!fileNode) {\n            return null\n          }\n\n          const result = await compileMDXWithCustomOptions(\n            {\n              source: mdxNode.body,\n              absolutePath: fileNode.absolutePath,\n            },\n            {\n              pluginOptions: {},\n              customOptions: {\n                mdxOptions: {\n                  remarkPlugins: [remarkHeadingsPlugin],\n                },\n              },\n              getNode,\n              getNodesByType,\n              pathPrefix,\n              reporter,\n              cache,\n              store,\n            }\n          )\n\n          if (!result) {\n            return null\n          }\n\n          return result.metadata.headings\n        }\n      }\n    }\n  })\n\n  createTypes([\n    `\n         type MdxHeading {\n           value: String\n           depth: Int\n         }\n       `,\n    headingsResolver,\n  ])\n}\n```\n\n----------------------------------------\n\nTITLE: Off-Main-Thread Strategy with Google Analytics\nDESCRIPTION: Provides an example of configuring the `<Script>` component with the `off-main-thread` strategy to load Google Analytics, including the use of the `forward` property.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/built-in-components/gatsby-script.md#_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Script } from \"gatsby\"\n\n// `process.env.GTAG` is your Google Analytics 4 identifier defined in your `.env.production` and `.env.development` files\n\n<Script\n  src={`https://www.googletagmanager.com/gtag/js?id=${process.env.GTAG}`}\n  strategy=\"off-main-thread\"\n/>\n<Script id=\"gtag-config\" strategy=\"off-main-thread\" forward={[`gtag`]}>\n  {`\n    window.dataLayer = window.dataLayer || [];\n    function gtag(){dataLayer.push(arguments)};\n    gtag('js', new Date());\n    gtag('config', ${process.env.GTAG}, { page_path: location ? location.pathname + location.search + location.hash : undefined })\n  `}\n</Script>\n```\n\n----------------------------------------\n\nTITLE: Deprecating Plugin Options with Joi in Gatsby\nDESCRIPTION: Illustrates how to deprecate plugin options in a Gatsby plugin using Joi's `.forbidden()` method. This prevents the option from being used and provides a custom error message guiding users to the updated functionality.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/plugins-and-themes/configuring-usage-with-plugin-options.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n  return Joi.object({\n    optionA: Joi.boolean()\n      .required()\n      .description(`Enables optionA.`)\n      // highlight-start\n      .forbidden()\n      .messages({\n        // Override the error message if the .forbidden() call fails\n        \"any.unknown\": `\"optionA\" is no longer supported. Use \"optionB\" instead by setting it to the same value you had before on \"optionA\".`,`,\n      }),\n      // highlight-end\n    message: Joi.string()\n      .default(`default message`)\n      .description(`The message logged to the console.`),\n    optionB: Joi.boolean().description(`Enables optionB.`),\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Disqus React Package with npm\nDESCRIPTION: This command installs the `disqus-react` package, which provides React components for integrating Disqus comments into a Gatsby application.  It uses npm (Node Package Manager) to download and install the package and its dependencies.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/adding-common-features/adding-comments.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install disqus-react\n```\n\n----------------------------------------\n\nTITLE: Installing gatsby-plugin-feed\nDESCRIPTION: This command installs the `gatsby-plugin-feed` package, which is necessary for generating an RSS feed in a Gatsby project.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/adding-common-features/adding-an-rss-feed.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install gatsby-plugin-feed\n```\n\n----------------------------------------\n\nTITLE: Configuring Gatsby Plugin (JavaScript)\nDESCRIPTION: This code shows how to add a Gatsby plugin to the `gatsby-config.js` file.  The `plugins` array is modified to include the name of the desired plugin, `gatsby-plugin-material-ui`, enabling the plugin for the Gatsby site.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/adding-react-components.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  plugins: [`gatsby-plugin-material-ui`],\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HSTS using allPageHeaders\nDESCRIPTION: Configures HTTP Strict Transport Security (HSTS) using the `allPageHeaders` option. This example sets the `Strict-Transport-Security` header with a max-age of one year, includes subdomains, and enables preloading.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-gatsby-cloud/README.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-gatsby-cloud`,\n      options: {\n        allPageHeaders: [\n          \"Strict-Transport-Security: max-age=31536000; includeSubDomains; preload\",\n        ],\n      }\n    },\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Import useStaticQuery and graphql from Gatsby\nDESCRIPTION: This code snippet imports the `useStaticQuery` hook and the `graphql` tag from the `gatsby` package. These are essential for querying data in Gatsby components.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-4/index.mdx#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useStaticQuery, graphql } from \"gatsby\"\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Gatsby Link Component (JSX)\nDESCRIPTION: This code snippet demonstrates how to import and use the Gatsby `Link` component within a functional React component. It imports `React` and `Link` from the `gatsby` package and then renders a `Link` component pointing to the `/contact/` route within a `div` element. This showcases a basic example of using Gatsby's built-in component for creating internal links.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/adding-react-components.md#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\"\nimport { Link } from \"gatsby\"\n\nexport default function Contact() {\n  return (\n    <div>\n      <Link to=\"/contact/\">Contact</Link>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Filter with GraphQL - Glob Operator\nDESCRIPTION: This query filters MarkdownRemark nodes to find titles that contain the word 'History' using the `glob` operator.  The wildcard `*` is used as a placeholder for any non-empty string.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/graphql-reference.md#_snippet_9\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  # glob: I want all the titles that contain the word 'History'.\n  # The wildcard * stands for any non-empty string.\n  example_glob: allMarkdownRemark(\n    filter: { frontmatter: { title: { glob: \"*History*\" } } }\n  ) {\n    edges {\n      node {\n        frontmatter {\n          title\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Create sample Emotion page\nDESCRIPTION: Creates a sample Emotion page with styled components and css prop. It demonstrates how to define styled components using `@emotion/styled` and how to use the `css` prop from `@emotion/react` for inline styles.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/styling/emotion.md#_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\nimport React from \"react\"\nimport styled from \"@emotion/styled\"\nimport { css } from \"@emotion/react\"\n\nconst Container = styled.div`\n  margin: 3rem auto;\n  max-width: 600px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n`\n\nconst UserWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  margin-top: 0;\n  margin-right: auto;\n  margin-bottom: 12px;\n  margin-left: auto;\n  &:last-child {\n    margin-bottom: 0;\n  }\n`\n\nconst Avatar = styled.img`\n  flex-grow: 0;\n  flex-shrink: 0;\n  flex-basis: 96px;\n  width: 96px;\n  height: 96px;\n  margin: 0;\n`\n\nconst Description = styled.div`\n  flex: 1;\n  margin-left: 18px;\n  padding: 12px;\n`\n\nconst Username = styled.h2`\n  margin: 0 0 12px 0;\n  padding: 0;\n`\n\nconst Excerpt = styled.p`\n  margin: 0;\n`\n// Using css prop provides a concise and flexible API to style the components. //\nconst underline = css`\n  text-decoration: underline;\n`\n\nconst User = props => (\n  <UserWrapper>\n    <Avatar src={props.avatar} alt=\"\" />\n    <Description>\n      <Username>{props.username}</Username>\n      <Excerpt>{props.excerpt}</Excerpt>\n    </Description>\n  </UserWrapper>\n)\n\nexport default function UsersList() {\n  return (\n    <Container>\n      <h1 css={underline}>About Emotion</h1>\n      <p>Emotion is uber cool</p>\n      <User\n        username=\"Jane Doe\"\n        avatar=\"https://s3.amazonaws.com/uifaces/faces/twitter/adellecharles/128.jpg\"\n        excerpt=\"I'm Jane Doe. Lorem ipsum dolor sit amet, consectetur adipisicing elit.\"\n      />\n      <User\n        username=\"Bob Smith\"\n        avatar=\"https://s3.amazonaws.com/uifaces/faces/twitter/vladarbatov/128.jpg\"\n        excerpt=\"I'm Bob smith, a vertically aligned type of guy. Lorem ipsum dolor sit amet, consectetur adipisicing elit.\"\n      />\n    </Container>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using onLoad and onError Callbacks\nDESCRIPTION: This snippet demonstrates how to use the `onLoad` and `onError` callbacks with the `<Script>` component. These callbacks allow you to execute code when a script has successfully loaded or failed to load, respectively. Inline scripts and scripts using the `off-main-thread` strategy do not support these callbacks.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/built-in-components/gatsby-script.md#_snippet_16\n\nLANGUAGE: jsx\nCODE:\n```\n<Script\n  src=\"https://my-example-script\"\n  onLoad={() => console.log(\"success\")}\n  onError={() => console.log(\"sadness\")}\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Interfaces and Unions in gatsby-node.js\nDESCRIPTION: This code demonstrates how to create custom interfaces and unions using `createSchemaCustomization` and `createResolvers`. It defines a `TeamMember` interface and implements it with `AuthorJson` and `ContributorJson` types. It also creates a custom root query field `allTeamMembers` that returns all team members.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/graphql-data-layer/schema-customization.md#_snippet_40\n\nLANGUAGE: js\nCODE:\n```\nexports.createSchemaCustomization = ({ actions }) => {\n  const { createTypes } = actions\n  const typeDefs = `\n    interface TeamMember {\n      name: String!\n      firstName: String!\n      email: String!\n    }\n\n    type AuthorJson implements Node & TeamMember {\n      name: String!\n      firstName: String!\n      email: String!\n      joinedAt: Date\n    }\n\n    type ContributorJson implements Node & TeamMember {\n      name: String!\n      firstName: String!\n      email: String!\n      receivedSwag: Boolean\n    }\n  `\n  createTypes(typeDefs)\n}\n\nexports.createResolvers = ({ createResolvers }) => {\n  const fullName = {\n    type: \"String\",\n    resolve(source, args, context, info) {\n      return source.firstName + \" \" + source.name\n    },\n  }\n  const resolvers = {\n    Query: {\n      allTeamMembers: {\n        type: [\"TeamMember\"],\n        resolve: async (source, args, context, info) => {\n          // Whenever possible, use `limit` and `skip` on findAll calls to increase performance\n          const { entries } = await context.nodeModel.findAll({ type: \"TeamMember\", query: { limit: args.limit, skip: args.skip } })\n\n          return entries\n        },\n      },\n    },\n    AuthorJson: {\n      fullName,\n    },\n    ContributorJson: {\n      fullName,\n    },\n  }\n  createResolvers(resolvers)\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping Array of IDs in Gatsby Config\nDESCRIPTION: This JavaScript snippet demonstrates how to configure node mappings in `gatsby-config.js` to map an array of IDs (tech) in the `ExperienceJson` data to `TechJson` data based on the `name` field. This allows querying the tech object via the referred items in experience.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/config-files/gatsby-config.md#_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  plugins: [...],\n  mapping: {\n    'ExperienceJson.items.tech': `TechJson.name`\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Rich Text Content with Gatsby\nDESCRIPTION: This JSX code shows how to render Rich Text content using `gatsby-source-contentful/rich-text`.  It defines custom rendering options for bold text, paragraphs, and embedded assets, and uses the `renderRichText` function to transform the Rich Text data into React elements. This snippet requires the `@contentful/rich-text-types` package and the `renderRichText` function from `gatsby-source-contentful/rich-text`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-contentful/README.md#_snippet_18\n\nLANGUAGE: jsx\nCODE:\n```\nimport { BLOCKS, MARKS } from \"@contentful/rich-text-types\"\nimport { renderRichText } from \"gatsby-source-contentful/rich-text\"\n\nconst Bold = ({ children }) => <span className=\"bold\">{children}</span>\nconst Text = ({ children }) => <p className=\"align-center\">{children}</p>\n\nconst options = {\n  renderMark: {\n    [MARKS.BOLD]: text => <Bold>{text}</Bold>,\n  },\n  renderNode: {\n    [BLOCKS.PARAGRAPH]: (node, children) => <Text>{children}</Text>,\n    [BLOCKS.EMBEDDED_ASSET]: node => {\n      return (\n        <>\n          <h2>Embedded Asset</h2>\n          <pre>\n            <code>{JSON.stringify(node, null, 2)}</code>\n          </pre>\n        </>\n      )\n    },\n  },\n}\n\nfunction BlogPostTemplate({ data }) {\n  const { bodyRichText } = data.contentfulBlogPost\n\n  return <div>{bodyRichText && renderRichText(bodyRichText, options)}</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Pages in gatsby-node.js\nDESCRIPTION: This code snippet demonstrates how to use the `createPages` API in `gatsby-node.js` to dynamically create pages from MDX files. It queries for MDX nodes, extracts the slug from the frontmatter, and creates a page for each node using the `createPage` action. The page uses a specified template and passes the node ID in the context.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/routing/mdx.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst path = require(\"path\")\n\nexports.createPages = async ({ graphql, actions, reporter }) => {\n  const { createPage } = actions\n\n  const result = await graphql(`\n    query {\n      allMdx {\n        nodes {\n          id\n          frontmatter {\n            slug\n          }\n          internal {\n            contentFilePath\n          }\n        }\n      }\n    }\n  `)\n\n  if (result.errors) {\n    reporter.panicOnBuild('Error loading MDX result', result.errors)\n  }\n\n  // Create blog post pages.\n  const posts = result.data.allMdx.nodes\n\n  // you'll call `createPage` for each result\n  posts.forEach(node => {\n    createPage({\n      // As mentioned above you could also query something else like frontmatter.title above and use a helper function\n      // like slugify to create a slug\n      path: node.frontmatter.slug,\n      // Provide the path to the MDX content file so webpack can pick it up and transform it into JSX\n      component: node.internal.contentFilePath,\n      // You can use the values in this context in\n      // our page layout component\n      context: { id: node.id },\n    })\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Create Resolvers for Linked Content in gatsby-node.js (JS)\nDESCRIPTION: This code snippet demonstrates how to create resolvers in gatsby-node.js to resolve linked content in Agility CMS. It defines resolvers for the 'agilityPost' node type, allowing you to fetch related content items like categories. The resolvers use utility functions (agility.getDynamicPageItemSitemapNode and agility.getLinkedContentItem) to retrieve the linked content based on content IDs.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/sourcing-from-agilitycms.md#_snippet_11\n\nLANGUAGE: js\nCODE:\n```\nconst agility = require(\"./src/agility/utils\")\n\nexports.createResolvers = args => {\n  const {\n    createResolvers,\n    getNode,\n    createNodeId,\n    createNode,\n    createContentDigest,\n    configOptions,\n  } = args\n\n  // The data needed for Linked Content is resolved here\n  const resolvers = {\n    // on the 'agilityPost' node type\n    agilityPost: {\n      // get the sitemap node that represents this item ( i.e. /blog/my-blog-post )\n      sitemapNode: agility.getDynamicPageItemSitemapNode(),\n\n      // get the category\n      linkedContent_agilityCategory: agility.getLinkedContentItem({\n        type: \"agilityCategory\",\n        linkedContentFieldName: \"category\",\n      }),\n    },\n  }\n  createResolvers(resolvers)\n}\n```\n\n----------------------------------------\n\nTITLE: Custom File CDN URL Generator (TypeScript)\nDESCRIPTION: This code snippet illustrates a custom File CDN URL generator.  It defines the logic for generating CDN URLs for files, tailoring the URL format to the specific requirements of the chosen CDN. This allows for flexible integration with different CDN providers for file delivery.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/v5.13/index.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nhttps://github.com/gatsbyjs/gatsby/blob/4a780fbac717b1df337f156e2ac4b2da6478106b/packages/gatsby-adapter-netlify/src/file-cdn-url-generator.ts\n```\n\n----------------------------------------\n\nTITLE: Creating External Links with HTML <a> tag in Gatsby\nDESCRIPTION: This example shows how to create external links in a Gatsby component using the standard HTML `<a>` tag.  It includes the `target=\"_blank\"` attribute to open the link in a new tab/window, and uses `rel=\"noopener noreferrer\"` for security reasons to prevent potential vulnerabilities.  This is recommended for links that navigate away from the Gatsby site.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/linking-between-pages.md#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\"\n\nexport default function Home() {\n  return (\n    <div>\n      <a href=\"https://example.com\" target=\"_blank\" rel=\"noopener noreferrer\">\n        External link\n      </a>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Shadowing Theme UI Configuration\nDESCRIPTION: This JavaScript code snippet demonstrates how to shadow the Theme UI configuration in `gatsby-plugin-theme-ui`. It imports the default theme from `gatsby-theme-blog` and uses `deepmerge` to merge custom color settings with the default theme, allowing for overriding specific design tokens.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/using-multiple-themes-together.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport merge from \"deepmerge\"\nimport defaultTheme from \"gatsby-theme-blog/src/gatsby-plugin-theme-ui/index\"\n\nexport default merge(defaultTheme, {\n  colors: {\n    background: \"ghostwhite\",\n    text: \"black\",\n    primary: \"mediumvioletred\",\n    modes: {\n      dark: {\n        background: \"indigo\",\n        text: \"ghostwhite\",\n        primary: \"gold\",\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Query MDX data (sorting by date)\nDESCRIPTION: This GraphQL query fetches the `title`, formatted `date` and `id` from the `frontmatter` of all MDX nodes and sorts the results in descending order based on the date in the frontmatter, using the `sort` argument on the `allMdx` field.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-5/index.mdx#_snippet_10\n\nLANGUAGE: graphql\nCODE:\n```\nquery MyQuery {\n  allMdx(sort: { frontmatter: { date: DESC } }) {\n    nodes {\n      frontmatter {\n        date(formatString: \"MMMM D, YYYY\")\n        title\n      }\n      id\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Gatsby Image defaults in gatsby-config.js\nDESCRIPTION: Illustrates how to customize the default options for `gatsby-plugin-sharp` in `gatsby-config.js`. This includes setting default formats, placeholder, quality, breakpoints, background color, and options for various image formats like JPG, PNG, WebP, and AVIF.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/images-and-media/using-gatsby-plugin-image.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        },\n      },\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Generating a Plugin with gatsby new\nDESCRIPTION: This command uses the Gatsby CLI to generate a new plugin project based on the official plugin starter.  It clones the specified starter repository into a new directory named 'gatsby-plugin-foo', providing a pre-configured structure for plugin development. This is useful for creating decoupled plugins.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/creating-a-local-plugin.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ngatsby new gatsby-plugin-foo https://github.com/gatsbyjs/gatsby-starter-plugin\n```\n\n----------------------------------------\n\nTITLE: Defining Layout Component with navigation - JavaScript\nDESCRIPTION: This code defines a Layout component in JavaScript using Gatsby's Link component for navigation. It accepts `pageTitle` and `children` as props, displaying the title and wrapping the children within a main element with a navigation section.  It imports React and Link from gatsby.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-2/index.mdx#_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as React from 'react'\nimport { Link } from 'gatsby'\n\nconst Layout = ({ pageTitle, children }) => {\n  return (\n    <div>\n      <nav>\n        <ul>\n          <li><Link to=\"/\">Home</Link></li>\n          <li><Link to=\"/about\">About</Link></li>\n        </ul>\n      </nav>\n      <main>\n        <h1>{pageTitle}</h1>\n        {children}\n      </main>\n    </div>\n  )\n}\n\nexport default Layout\n```\n\n----------------------------------------\n\nTITLE: Manual Icon Generation Configuration\nDESCRIPTION: This code configures the plugin to operate in manual mode, where the user is responsible for providing all icon files.  The `icons` array specifies the paths to the icons that are already located in the `static` folder. No automatic resizing is performed.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-manifest/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nicons: [\n  {\n    src: `/favicons/android-chrome-192x192.png`,\n    sizes: `192x192`,\n    type: `image/png`,\n  },\n  {\n    src: `/favicons/android-chrome-512x512.png`,\n    sizes: `512x512`,\n    type: `image/png`,\n  },\n], // Add or remove icon sizes as desired\n```\n\n----------------------------------------\n\nTITLE: Creating Gatsby project with default starter\nDESCRIPTION: This command creates a new Gatsby project named 'global-style-tutorial' using the 'gatsby-starter-default' starter template.  It sets up a basic project for demonstrating global styles.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/styling/global-css.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\ngatsby new global-style-tutorial https://github.com/gatsbyjs/gatsby-starter-default\ncd global-style-tutorial\nnpm run develop\n```\n\n----------------------------------------\n\nTITLE: Gatsby Page Query Implementation\nDESCRIPTION: This React component demonstrates how to use a page query in Gatsby to fetch data from GraphCMS and display a list of post titles. The `graphql` tag is used to define the GraphQL query, which retrieves the `id`, `content.markdown`, `coverImage.url`, `date`, `slug`, and `title` fields for all `GraphCmsPost` nodes. The query results are then accessed via the `data` prop.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/sourcing-from-graphcms.md#_snippet_5\n\nLANGUAGE: JSX\nCODE:\n```\nimport React from \"react\"\nimport { graphql } from \"gatsby\"\n\nfunction IndexPage({ data: { posts } }) {\n  return (\n    <ul>\n      {posts.nodes.map(post => (\n        <li key={post.id}>\n          <h3>{post.title}</h3>\n        </li>\n      ))}\n    </ul>\n  )\n}\n\nexport const pageQuery = graphql`\n  query IndexPageQuery {\n    posts: allGraphCmsPost {\n      nodes {\n        id\n        content {\n          markdown\n        }\n        coverImage {\n          url\n        }\n        date\n        slug\n        title\n      }\n    }\n  }\n`\n\nexport default IndexPage\n```\n\n----------------------------------------\n\nTITLE: Creating Login Component (React/JSX)\nDESCRIPTION: This React component, Login, handles the user login process. It includes a form with username and password fields. Upon submission, it calls the `handleLogin` function from the authentication service and redirects the user to the '/app/profile' route if login is successful. It also checks if the user is already logged in and redirects them to the profile page if they are.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/authentication-tutorial.md#_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\"\nimport { navigate } from \"gatsby\"\nimport { handleLogin, isLoggedIn } from \"../services/auth\"\n\nclass Login extends React.Component {\n  state = {\n    username: ``, \n    password: ``,\n  }\n\n  handleUpdate = event => {\n    this.setState({\n      [event.target.name]: event.target.value,\n    })\n  }\n\n  handleSubmit = event => {\n    event.preventDefault()\n    handleLogin(this.state)\n  }\n\n  render() {\n    if (isLoggedIn()) {\n      navigate(`/app/profile`)\n    }\n\n    return (\n      <>\n        <h1>Log in</h1>\n        <form\n          method=\"post\"\n          onSubmit={event => {\n            this.handleSubmit(event)\n            navigate(`/app/profile`)\n          }}\n        >\n          <label>\n            Username\n            <input type=\"text\" name=\"username\" onChange={this.handleUpdate} />\n          </label>\n          <label>\n            Password\n            <input\n              type=\"password\"\n              name=\"password\"\n              onChange={this.handleUpdate}\n            />\n          </label>\n          <input type=\"submit\" value=\"Log In\" />\n        </form>\n      </>\n    )\n  }\n}\n\nexport default Login\n```\n\n----------------------------------------\n\nTITLE: Enabling Theme UI JSX Pragma - JavaScript\nDESCRIPTION: This comment and import statement enables the Theme UI JSX pragma. Adding `/** @jsx jsx */` at the top of a file and importing `jsx` from \"theme-ui\" allows you to use the `sx` prop for styling elements. This transforms JSX into calls that leverage Theme UI's styling capabilities.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/styling/theme-ui.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\n/** @jsx jsx */\nimport { jsx } from \"theme-ui\"\n```\n\n----------------------------------------\n\nTITLE: Configuring gatsby-source-cloudinary in gatsby-config.js\nDESCRIPTION: This snippet configures the gatsby-source-cloudinary plugin in gatsby-config.js.  It specifies the cloud name, API key, API secret, resource type, and prefix (folder name) for fetching images from Cloudinary. It also highlights the need to install and configure the dotenv module.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/images-and-media/using-cloudinary-image-service.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nrequire('dotenv').config(); // highlight-line\nmodule.exports = {\n  ...\n  plugins:[\n  ...\n  {\n      resolve: `gatsby-source-cloudinary`,\n      options: {\n        cloudName: process.env.CLOUDINARY_CLOUD_NAME,\n        apiKey: process.env.CLOUDINARY_API_KEY,\n        apiSecret: process.env.CLOUDINARY_API_SECRET,\n        resourceType: `image`,\n        prefix: `gatsby-source-cloudinary/`\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Generate Image Source Function in gatsby-node.js (gatsby-plugin-image)\nDESCRIPTION: This JavaScript function generates image URLs based on the provided base URL, width, height, format, fit, and custom options. It returns an object containing the generated source URL, width, height, and format. The function is used by the `gatsbyImageData` resolver to create image URLs for different sizes and formats.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/plugins-and-themes/adding-gatsby-image-support.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n// In this example we use a custom `quality` option\nconst generateImageSource = (baseURL, width, height, format, fit, options) => {\n  const src = `https://myexampleimagehost.com/${baseURL}?w=${width}&h=${height}&fmt=${format}&q=${options.quality}`\n  return { src, width, height, format }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring StaticImage component properties\nDESCRIPTION: Illustrates configuring the `StaticImage` component with props such as `placeholder`, `layout`, `width`, and `height`. These props control the image's appearance and behavior. This specific example renders a 200x200 image with a blurred placeholder and a fixed layout.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/images-and-media/using-gatsby-plugin-image.md#_snippet_4\n\nLANGUAGE: JSX\nCODE:\n```\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nexport function Dino() {\n  return (\n    <StaticImage\n      src=\"../images/dino.png\"\n      alt=\"A dinosaur\"\n      placeholder=\"blurred\"\n      layout=\"fixed\"\n      width={200}\n      height={200}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Output for Custom Blocks (HTML)\nDESCRIPTION: Shows the generated HTML output for the custom blocks defined in the Markdown example. It demonstrates how the plugin transforms the Markdown syntax into HTML elements with appropriate classes and content.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-custom-blocks/README.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"custom-block danger\">\n  <div class=\"custom-block-body\"><p>content</p></div>\n</div>\n\n<div class=\"custom-block info\">\n  <div class=\"custom-block-heading\">This is a title!</div>\n  <div class=\"custom-block-body\"><p>content</p></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using gatsby-plugin-image Components in Post Pages (TS)\nDESCRIPTION: This code snippet demonstrates how to import and use the GatsbyImage component and getImage helper from gatsby-plugin-image to display an image in a Gatsby post page.  It displays the image from the gatsbyImage field and alt text, within a div with the class name \"image\".\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/creating-a-source-plugin/part-6/index.mdx#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as React from \"react\"\nimport { Link, graphql, PageProps, HeadFC } from \"gatsby\"\n// highlight-next-line\nimport { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\nexport default function PostPage({\n  data: { post },\n}: PageProps<{ post: Queries.Post }>): React.ReactElement {\n  return (\n    <main>\n      <h1>{post.title}</h1>\n      <p>Author: {post.author.name}</p>\n      <br />\n      <Link to=\"/\">Back to home page</Link>\n      {/* highlight-start */}\n      <div className=\"image\">\n        <GatsbyImage\n          alt={post.image.alt}\n          image={getImage(post.image.gatsbyImage)}\n        />\n      </div>\n      {/* highlight-end */}\n    </main>\n  )\n}\n\n// Rest of file\n```\n\n----------------------------------------\n\nTITLE: Accessing frontmatter in MDX with props\nDESCRIPTION: Example of how to access frontmatter data within an MDX document using `props.pageContext.frontmatter`. This allows you to dynamically render content based on the frontmatter.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/routing/mdx.md#_snippet_4\n\nLANGUAGE: MDX\nCODE:\n```\n---\ntitle: Building with Gatsby\nauthor: Jay Gatsby\n---\n\n<h1>{props.pageContext.frontmatter.title}</h1>\n<span>{props.pageContext.frontmatter.author}</span>\n\n(Blog post content, components, etc.)\n```\n\n----------------------------------------\n\nTITLE: Fetching Data in getServerData Gatsby JavaScript\nDESCRIPTION: This snippet showcases how to fetch data from an API (dog.ceo) within the `getServerData` function in Gatsby. It uses `fetch` to retrieve a random dog image URL and handles potential errors. The fetched data is then returned as props.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/rendering-options/using-server-side-rendering.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// The rest of the page\n\nexport async function getServerData() {\n  try {\n    const res = await fetch(`https://dog.ceo/api/breeds/image/random`)\n\n    if (!res.ok) {\n      throw new Error(`Response failed`)\n    }\n\n    return {\n      props: await res.json(),\n    }\n  } catch (error) {\n    return {\n      status: 500,\n      headers: {},\n      props: {}\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Image with Webpack in React Component (JSX)\nDESCRIPTION: This code snippet demonstrates how to import an image file directly into a React component using webpack. The imported `logo` variable holds the URL of the image after webpack processes it.  The image is then used as the `src` attribute of an `img` element. Dependencies: React.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/images-and-media/importing-assets-into-files.md#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\"\nimport logo from \"./logo.png\" // Tell webpack this JS file uses this image\n\nconsole.log(logo) // /logo.84287d09.png\n\nfunction Header() {\n  // Import result is the URL of your image\n  return <img src={logo} alt=\"Logo\" />\n}\n\nexport default Header\n```\n\n----------------------------------------\n\nTITLE: Adding __typename field in GraphQL queries in Gatsby\nDESCRIPTION: This snippet demonstrates how to explicitly add the `__typename` field to GraphQL queries when querying for fields of abstract types (interface or union). In Gatsby v3, `__typename` is no longer added implicitly and must be explicitly included in the query.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v2-to-v3.md#_snippet_25\n\nLANGUAGE: diff\nCODE:\n```\nimport React from \"react\"\nimport { graphql } from \"gatsby\"\n\nconst Page = ({ data }) => {\n  if (data.foo.someUnion.__typename === `A`) {\n    return data.foo.someUnion.a\n  }\n  if (data.foo.someUnion.__typename === `B`) {\n    return data.foo.someUnion.b\n  }\n  return null\n}\n\nexport default Page\n\nexport const query = graphql`\n  {\n    foo {\n      someUnion {\n+       __typename\n        ... on A { a }\n        ... on B { b }\n      }\n    }\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: Generating Product Pages Programmatically\nDESCRIPTION: This code uses Gatsby's `createPages` API to generate individual product pages dynamically.  It queries all products from Shopify and creates a page for each product using the `product.js` template.  Each page is assigned a URL based on the product's handle (`/products/[product handle]`). It requires the `path` and `graphql` modules.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/building-an-ecommerce-site-with-shopify.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst path = require(`path`)\nexports.createPages = async ({ graphql, actions }) => {\n  const { createPage } = actions\n  // Query for all products in Shopify\n  const result = await graphql(`\n    query {\n      allShopifyProduct(sort: { title: ASC }) {\n        edges {\n          node {\n            title\n            images {\n              originalSrc\n            }\n            shopifyId\n            handle\n            description\n            priceRangeV2 {\n              maxVariantPrice {\n                amount\n              }\n              minVariantPrice {\n                amount\n              }\n            }\n            status\n          }\n        }\n      }\n    }\n  `)\n  // Iterate over all products and create a new page using a template\n  // The product \"handle\" is generated automatically by Shopify\n  result.data.allShopifyProduct.edges.forEach(({ node }) => {\n    createPage({\n      path: `/products/${node.handle}`,\n      component: path.resolve(`./src/templates/product.js`),\n      context: {\n        product: node,\n      },\n    })\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Featured Image Field in Markdown Frontmatter\nDESCRIPTION: Adds a `featuredImage` field to the frontmatter of a markdown file. This field specifies the filename of the image to be used as the featured image for the post. The path to the image is relative to the location defined in gatsby-config.js.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/images-and-media/working-with-images-in-markdown.md#_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n---\ntitle: My Favorite Doggos\nfeaturedImage: pupperino.png\n---\n\nContent goes here!\n```\n\n----------------------------------------\n\nTITLE: Configuring gatsby-source-filesystem for Images\nDESCRIPTION: This snippet demonstrates how to configure `gatsby-source-filesystem` in `gatsby-config.js` to load images from a specific directory. The `path` option specifies the directory where the images are located. This allows Gatsby to query the image files using GraphQL.  The `__dirname` variable resolves to the project's root directory.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/images-and-media/using-gatsby-image.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  plugins: [\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-sharp`,\n    // highlight-start\n    {\n      resolve: `gatsby-source-filesystem`,\n      options: {\n        path: `${__dirname}/src/data/`,\n      },\n    },\n    // highlight-end\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring gatsby-source-sanity Plugin\nDESCRIPTION: This code snippet demonstrates how to configure the gatsby-source-sanity plugin in your gatsby-config.js file. It specifies the projectId and dataset, which are required to connect to your Sanity project. This configuration enables Gatsby to fetch data from Sanity's API.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/sourcing-from-sanity.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  plugins: [\n    {\n      resolve: \"gatsby-source-sanity\",\n      options: {\n        projectId: \"abc123\",\n        dataset: \"blog\",\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Basic React Component Structure\nDESCRIPTION: Illustrates the basic structure of a React component, showing how to import React, define a component function, and export it. This example uses JSX to return a heading element.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-2/index.mdx#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Step 1: Import React. This lets you use JSX inside your .js file.\nimport * as React from 'react'\n\n/* Step 2: Define your component. Note that your\ncomponent name should start with a capital letter. */\nconst MyComponent = () => {\n  return (\n    <h1>Hi, welcome to my site!</h1>\n  )\n}\n\n/* Step 3: Export your component so it\ncan be used by other parts of your app. */\nexport default MyComponent\n```\n\n----------------------------------------\n\nTITLE: Gatsby Page Query\nDESCRIPTION: This JavaScript code snippet shows a Gatsby page component with a GraphQL query. It imports the `graphql` function from `gatsby` and defines a query to fetch the title and date from the MDX node, using an ID query variable. The query is assigned to the `query` export.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-6/index.mdx#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react'\nimport { graphql } from 'gatsby' // highlight-line\nimport Layout from '../../components/layout'\nimport Seo from '../../components/seo'\n\nconst BlogPost = () => {\n  return (\n    <Layout pageTitle=\"Super Cool Blog Posts\">\n      <p>My blog post contents will go here (eventually).</p>\n    </Layout>\n  )\n}\n\n// highlight-start\nexport const query = graphql`\n  query ($id: String) {\n    mdx(id: {eq: $id}) {\n      frontmatter {\n        title\n        date(formatString: \"MMMM D, YYYY\")\n      }\n    }\n  }\n`\n// highlight-end\n\nexport const Head = () => <Seo title=\"Super Cool Blog Posts\" />\n\nexport default BlogPost\n```\n\n----------------------------------------\n\nTITLE: Querying MDX Frontmatter with gatsbyImageData in GraphQL\nDESCRIPTION: This GraphQL query retrieves the `gatsbyImageData` for the hero image, enabling optimized image rendering. It includes the `childImageSharp` resolver to access the image data processed by `gatsby-plugin-sharp`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-7/index.mdx#_snippet_9\n\nLANGUAGE: graphql\nCODE:\n```\nquery ($id: String) {\n  mdx(id: {eq: $id}) {\n    frontmatter {\n      title\n      date(formatString: \"MMMM D, YYYY\")\n      hero_image_alt\n      hero_image_credit_link\n      hero_image_credit_text\n      // highlight-start\n      hero_image {\n        childImageSharp {\n          gatsbyImageData\n        }\n      }\n      // highlight-end\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Grouping Values by Field in GraphQL\nDESCRIPTION: This GraphQL query groups values based on the `tags` field within the `frontmatter`. It retrieves the `fieldValue` (the tag itself), the `totalCount` (number of occurrences), and the `edges` (nodes associated with that tag). Additionally, it retrieves titles and categories from all nodes. Filter excludes empty titles.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/graphql-reference.md#_snippet_26\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  allMarkdownRemark(filter: { frontmatter: { title: { ne: \"\" } } }) {\n    group(field: { frontmatter: { tags: SELECT } }) {\n      fieldValue\n      totalCount\n      edges {\n        node {\n          frontmatter {\n            title\n          }\n        }\n      }\n    }\n    nodes {\n      frontmatter {\n        title\n        categories\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using a GraphQL Fragment in a Page Query\nDESCRIPTION: This JSX code shows how to use the defined GraphQL fragment `SiteInformation` within a page's GraphQL query (main.jsx). The `...SiteInformation` syntax includes the fields specified in the fragment when querying for the `site` object. The fetched data is then used to populate the page's content.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/graphql-data-layer/using-graphql-fragments.md#_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\nimport React from \"react\"\nimport { graphql } from \"gatsby\"\nimport IndexPost from \"../components/IndexPost\"\n\nexport default function Main({ data }) {\n  return (\n    <div>\n      <h1>{data.site.siteMetadata.title}</h1>\n      <p>{data.site.siteMetadata.siteDescription}</p>\n\n      {/*\n        Or you can pass all the data from the fragment\n        back to the component that defined it\n      */}\n      <IndexPost siteInformation={data.site.siteMetadata} />\n    </div>\n  )\n}\n\nexport const query = graphql`\n  query {\n    site {\n      ...SiteInformation\n    }\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: Localization Configuration\nDESCRIPTION: This configuration enables localization by creating unique manifests for different language versions of the site. The `localize` array defines the settings for each language, including the `start_url`, `lang`, `name`, `short_name`, and `description`. The root options serve as defaults.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-manifest/README.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// in gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-manifest`,\n      options: {\n        name: `The Cool Application`,\n        short_name: `Cool App`,\n        description: `The application does cool things and makes your life better.`,\n        lang: `en`,\n        display: `standalone`,\n        icon: `src/images/icon.png`,\n        start_url: `/`,\n        background_color: `#663399`,\n        theme_color: `#fff`,\n        localize: [\n          {\n            start_url: `/de/`,\n            lang: `de`,\n            name: `Die coole Anwendung`,\n            short_name: `Coole Anwendung`,\n            description: `Die Anwendung macht coole Dinge und macht Ihr Leben besser.`,\n          },\n        ],\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: useStaticQuery Hook - After\nDESCRIPTION: This snippet illustrates the recommended approach of using the `useStaticQuery` hook to replace the deprecated `<StaticQuery />` component. It shows how to import the necessary modules, define a GraphQL query, execute the query using `useStaticQuery`, and render the data within a functional component.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v4-to-v5.md#_snippet_16\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nexport default function Title() {\n  const data = useStaticQuery(graphql`\n    query {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    `)\n\n  return <h1>{data.site.siteMetadata.title}</h1>\n}\n```\n\n----------------------------------------\n\nTITLE: Product HTML using Snipcart attributes in JSX\nDESCRIPTION: This JSX code snippet demonstrates how to add Snipcart attributes to an HTML element to make it a \"buy\" button.  The data-item-* attributes are crucial for Snipcart to identify and process the product information. This initial snippet shows the attributes on a div.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/e-commerce-with-datocms-and-snipcart/index.md#_snippet_10\n\nLANGUAGE: JSX\nCODE:\n```\nrender={data => (\n  <Layout site={data.site}>\n    <div className=\"Catalogue\">\n      {\n        data.products.edges.map(({ node: product }) => (\n          <div className=\"Catalogue__item\" key={product.id}>\n            <div\n              className=\"Product snipcart-add-item\"\n              data-item-id={product.id}\n              data-item-price={product.price}\n              data-item-image={product.image.url}\n              data-item-name={product.name}\n              data-item-url={`/`}\n            >\n              <div className=\"Product__image\">\n                <Img sizes={product.image.sizes} />\n              </div> <div className=\"Product__details\">\n                <div className=\"Product__name\">\n                  {product.name}\n                  <div className=\"Product__price\">\n                    ${product.price}\n                  </div>\n                </div>\n                <span className=\"Product__buy\">Buy now</span>\n              </div>\n            </div>\n          </div>\n        ))\n      }\n    </div>\n  </Layout>\n)}\n```\n\n----------------------------------------\n\nTITLE: Visiting Text Nodes with unist-util-visit in JavaScript\nDESCRIPTION: This example demonstrates how to use `unist-util-visit` to find all text nodes in a Markdown AST and log them to the console. It requires the `remark` and `unist-util-visit` modules to be installed.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/remark-plugin-tutorial.md#_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nvar remark = require(\"remark\")\nvar visit = require(\"unist-util-visit\")\n\nvar tree = remark().parse(\"Some _emphasis_, **importance**, and `code`.\")\n\nvisit(tree, \"text\", visitor)\n\nfunction visitor(node) {\n  console.log(node)\n}\n```\n\n----------------------------------------\n\nTITLE: Gatsby Node onCreateNode Function\nDESCRIPTION: Creates a File node for the featured image URL from the frontmatter of MarkdownRemark nodes using `createRemoteFileNode`. It checks if the node is a MarkdownRemark and has a `featuredImgUrl`, then calls `createRemoteFileNode` to download and create a local file node. If successful, it extends the node with a `localFile` field pointing to the new file node's ID.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/images-and-media/preprocessing-external-images.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nexports.onCreateNode = async ({\n  node,\n  actions: { createNode, createNodeField },\n  createNodeId,\n  getCache,\n}) => {\n  // For all MarkdownRemark nodes that have a featured image url, call createRemoteFileNode\n  if (\n    node.internal.type === \"MarkdownRemark\" &&\n    node.frontmatter.featuredImgUrl !== null\n  ) {\n    const fileNode = await createRemoteFileNode({\n      url: node.frontmatter.featuredImgUrl, // string that points to the URL of the image\n      parentNodeId: node.id, // id of the parent node of the fileNode you are going to create\n      createNode, // helper function in gatsby-node to generate the node\n      createNodeId, // helper function in gatsby-node to generate the node id\n      getCache,\n    })\n\n    // if the file was created, extend the node with \"localFile\"\n    if (fileNode) {\n      createNodeField({ node, name: \"localFile\", value: fileNode.id })\n    }\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: StaticImage with Remote Image\nDESCRIPTION: Demonstrates usage of the `StaticImage` component with a remote image URL.  Gatsby will download and optimize this image at build time. The alt prop provides alternative text for accessibility.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-image/README.md#_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nexport function Kitten() {\n  return <StaticImage src=\"https://placekitten.com/800/600\" alt=\"A kitten\" />\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Site Title in Layout Component\nDESCRIPTION: This snippet shows how to render the fetched site title within the Layout component's JSX. It accesses the title using dot notation from the `data` object returned by `useStaticQuery`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-4/index.mdx#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as React from 'react'\nimport { Link, useStaticQuery, graphql } from 'gatsby'\nimport {\n  container,\n  heading,\n  navLinks,\n  navLinkItem,\n  navLinkText\n} from './layout.module.css'\n\nconst Layout = ({ pageTitle, children }) => {\n  const data = useStaticQuery(graphql`\n    query {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `)\n\n  return (\n    <div className={container}>\n      {/* highlight-start */}\n      <header>{data.site.siteMetadata.title}</header>\n      {/* highlight-end */}\n      <nav>\n        <ul className={navLinks}>\n          <li className={navLinkItem}>\n            <Link to=\"/\" className={navLinkText}>\n              Home\n            </Link>\n          </li>\n          <li className={navLinkItem}>\n            <Link to=\"/about\" className={navLinkText}>\n              About\n            </Link>\n          </li>\n        </ul>\n      </nav>\n      <main>\n        <h1 className={heading}>{pageTitle}</h1>\n        {children}\n      </main>\n    </div>\n  )\n}\n\nexport default Layout\n```\n\n----------------------------------------\n\nTITLE: Configuring Adapter Options in gatsby-config.js (JavaScript)\nDESCRIPTION: This code snippet shows how to configure an adapter with custom options within the `gatsby-config.js` file. It requires the adapter module and passes an object containing adapter-specific settings to the adapter function.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/previews-deploys-hosting/adapters.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst adapter = require(\"gatsby-adapter-foo\")\n\nmodule.exports = {\n  adapter: adapter({\n    // Adapter options\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Slug Field in Gatsby Nodes\nDESCRIPTION: This code snippet uses the onCreateNode API to create a slug field for nodes of type kontent_item_article. The slug value is taken from the url_pattern element of the Kontent.ai item.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/sourcing-data/sourcing-from-kontent-ai.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nexports.onCreateNode = ({ node, actions: { createNodeField } }) => {\n  if (node.internal.type === `kontent_item_article`) {\n    createNodeField({\n      node,\n      name: `slug`,\n      value: node.elements.url_pattern.value,\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Gatsby plugin with API key from env\nDESCRIPTION: Demonstrates how to configure a Gatsby plugin using an API key sourced from an environment variable. It first loads the environment variables using `dotenv` and then passes the `API_KEY` from `process.env` to the plugin options. This prevents hardcoding sensitive data in the configuration file.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/local-development/environment-variables.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(\"dotenv\").config({\n  path: `.env.${process.env.NODE_ENV}`,\n})\n\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-source-custom`,\n      options: {\n        apiKey: process.env.API_KEY,\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Combining Sort, Filter, Limit, and Format in GraphQL\nDESCRIPTION: This GraphQL query demonstrates the combined usage of `limit`, `filter`, `sort`, and `formatString`. It retrieves a limited number of markdown remarks (3), filters out entries with a null date, sorts the entries by date in descending order, and formats the date field using Moment.js.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/graphql-reference.md#_snippet_23\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  allMarkdownRemark(\n    limit: 3\n    filter: { frontmatter: { date: { ne: null } } }\n    sort: { frontmatter: { date: DESC } }\n  ) {\n    edges {\n      node {\n        frontmatter {\n          title\n          date(formatString: \"dddd DD MMMM YYYY\")\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query for Product Featured Media\nDESCRIPTION: GraphQL query to fetch featured media (images) for products. Commonly used on collection pages. Leverages gatsbyImageData for image optimization through gatsby-plugin-image.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-shopify/README.md#_snippet_3\n\nLANGUAGE: GraphQL\nCODE:\n```\nquery {\n  products: allShopifyProduct {\n    nodes {\n      featuredMedia {\n        preview {\n          image {\n            gatsbyImageData\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Field Extension with Wrapped Resolver (Diff)\nDESCRIPTION: This code snippet (presented as a diff) shows how to wrap an existing field resolver within a field extension. The extension retrieves the existing resolver using `prevFieldConfig.resolve` and calls it before applying its own transformation.  This is crucial for maintaining existing functionality while extending it.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/graphql-data-layer/schema-customization.md#_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nextend(options, prevFieldConfig) {\n+  const { resolve } = prevFieldConfig\n+  return {\n+    async resolve(source, args, context, info) {\n+      const resultFromPrevResolver = await resolve(source, args, context, info)\n       /* ... */\n+      return processor.processSync(resultFromPrevResolver).contents\n+    }\n+  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying siteMetadata with GraphQL\nDESCRIPTION: This GraphQL query retrieves the `title` and `menuLinks` from the `siteMetadata` object within the `site` type. This allows the application to access the dynamically defined menu links from the `gatsby-config.js` file.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/creating-dynamic-navigation.md#_snippet_1\n\nLANGUAGE: GraphQL\nCODE:\n```\nquery SiteQuery {\n  site {\n    siteMetadata {\n      title\n      menuLinks {\n        name\n        link\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enable GraphQL Typegen in gatsby-config.js\nDESCRIPTION: This code snippet demonstrates how to enable the GraphQL Typegen feature by setting the `graphqlTypegen` option to `true` in your `gatsby-config.js` file. This tells Gatsby to automatically generate TypeScript types for your GraphQL queries during development.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/local-development/graphql-typegen.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  graphqlTypegen: true,\n}\n```\n\n----------------------------------------\n\nTITLE: Importing a React component in MDX\nDESCRIPTION: This example demonstrates how to import and use a React component (SketchPicker from react-color) directly within an MDX file. This allows you to embed interactive components within your markdown content.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-mdx/README.md#_snippet_7\n\nLANGUAGE: MDX\nCODE:\n```\nimport { SketchPicker } from \"react-color\"\n\n# Hello, world!\n\nHere's a color picker!\n\n<SketchPicker />\n```\n\n----------------------------------------\n\nTITLE: Importing Checkout Component (JSX)\nDESCRIPTION: This code demonstrates how to import the checkout component into a Gatsby page (index.js) and render it within the Layout component. This integration allows users to access the checkout functionality directly from the homepage.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/ecommerce-tutorial/index.md#_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport Checkout from \"../components/checkout\" // highlight-line\n\nconst IndexPage = () => (\n  <Layout>\n    <SEO title=\"Home\" keywords={[`gatsby`, `application`, `react`]} />\n    <h1>Hi people</h1>\n    <p>Welcome to your new Gatsby site.</p>\n    <p>Now go build something great.</p>\n    <Checkout /> {/* highlight-line */}\n    <div style={{ maxWidth: `300px`, marginBottom: `1.45rem` }}>\n      <Image />\n    </div>\n    <Link to=\"/page-2/\">Go to page 2</Link>\n  </Layout>\n)\n\nexport default IndexPage\n```\n\n----------------------------------------\n\nTITLE: Adding Menu Links to gatsby-config.js (JavaScript)\nDESCRIPTION: This snippet demonstrates how to add an array of menu link objects to the `siteMetadata` object within `gatsby-config.js`. Each object represents a navigation item with a `name` and a `link` property. This data is then queried using GraphQL.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/creating-dynamic-navigation.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  siteMetadata: {\n    title: 'Gatsby Default Starter',\n+    menuLinks:[\n+      {\n+         name:'home',\n+         link:'/'\n+      },\n+      {\n+         name:'page2',\n+         link:'/page-2'\n+      }\n+    ]\n  },\n  plugins: []\n}\n```\n\n----------------------------------------\n\nTITLE: Define Slugify Helper Function (gatsby-node.js)\nDESCRIPTION: This snippet defines a helper function called 'slugify' that transforms a string into a URL-friendly slug. It converts the input string to lowercase, replaces non-alphanumeric characters with hyphens, and removes leading/trailing hyphens.  It then combines the 'basePath' with the generated slug, cleaning up any double slashes.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/building-a-theme.md#_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nexports.createResolvers = ({ createResolvers }) => {\n  const basePath = \"/\"\n\n  // highlight-start\n  // Quick-and-dirty helper to convert strings into URL-friendly slugs.\n  const slugify = str => {\n    const slug = str\n      .toLowerCase()\n      .replace(/[^a-z0-9]+/g, \"-\")\n      .replace(/(^-|-\\$)+/g, \"\")\n\n    return `/${basePath}/${slug}`.replace(/\\/\\/+/g, \"/\")\n  }\n  // highlight-end\n\n  createResolvers({\n    Event: {\n      slug: {\n        resolve: source => slugify(source.name),\n      },\n    },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with npm\nDESCRIPTION: This command installs the required dependencies for the search functionality: react-instantsearch, algoliasearch, styled-components, gatsby-plugin-styled-components, and styled-icons. These packages provide the necessary components and styling for building the search UI.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/adding-search-with-algolia.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install react-instantsearch algoliasearch styled-components gatsby-plugin-styled-components @styled-icons/fa-solid\n```\n\n----------------------------------------\n\nTITLE: Index Page Component with Inline Styles JSX\nDESCRIPTION: This code snippet demonstrates a basic Gatsby page component (`IndexPage`) from `gatsby-starter-default` with an example of inline styling applied to a `<div>` element.  The component imports React, Link, Layout, Image, and SEO components. It renders a basic page layout with a title, paragraph, image, and a link to another page.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/modifying-a-starter.md#_snippet_4\n\nLANGUAGE: JSX\nCODE:\n```\nimport React from \"react\"\nimport { Link } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport Image from \"../components/image\"\nimport SEO from \"../components/seo\"\n\nconst IndexPage = () => (\n  <Layout>\n    <SEO title=\"Home\" />\n    <h1>Hi people</h1>\n    <p>Welcome to your new Gatsby site.</p>\n    <p>Now go build something great.</p>\n    // highlight-next-line\n    <div style={{ maxWidth: `300px`, marginBottom: `1.45rem` }}>\n      <Image />\n    </div>\n    <Link to=\"/page-2/\">Go to page 2</Link>\n  </Layout>\n)\n\nexport default IndexPage\n```\n\n----------------------------------------\n\nTITLE: Destructuring Node API Helpers in gatsby-node.js\nDESCRIPTION: Illustrates a common convention of destructuring the API helpers directly in the argument list of a Gatsby Node API function (e.g., `createPages`). This simplifies access to specific helpers like `actions` and `reporter`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/config-files/node-api-helpers.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nexports.createPages = ({ actions, reporter }) => {\n  // use helpers\n}\n```\n\n----------------------------------------\n\nTITLE: StaticImage Configuration\nDESCRIPTION: Configures the `StaticImage` component with various options such as placeholder, layout, width, and height. This allows for fine-grained control over image appearance and loading behavior. The placeholder attribute defines the initial loading state of the image.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-image/README.md#_snippet_4\n\nLANGUAGE: JSX\nCODE:\n```\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nexport function Dino() {\n  return (\n    <StaticImage\n      src=\"../images/dino.png\"\n      alt=\"A dinosaur\"\n      placeholder=\"blurred\"\n      layout=\"fixed\"\n      width={200}\n      height={200}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Site Metadata in Gatsby\nDESCRIPTION: This JavaScript snippet demonstrates how to configure site metadata, specifically the title, within the `gatsby-config.js` file. This metadata can then be queried using GraphQL. The `siteMetadata` object contains key-value pairs representing various site-related information.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-4/index.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  // highlight-start\n  siteMetadata: {\n    title: \"My First Gatsby Site\",\n  },\n  // highlight-end\n  plugins: [\n    // ...\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Gatsby Target Container - JSX\nDESCRIPTION: This JSX snippet demonstrates the required \"target container\" in the html.js file. It defines a div with the id `___gatsby`, which Gatsby uses to render the React application. Without this container, Gatsby will throw an error.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/custom-html.md#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<div\n  key={`body`}\n  id=\"___gatsby\"\n  dangerouslySetInnerHTML={{ __html: this.props.body }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating Manifest ID and Calling unstable_createNodeManifest (TypeScript)\nDESCRIPTION: This code snippet shows how to create a unique `manifestId` based on CMS attributes (e.g., content ID and update timestamp) and call the `unstable_createNodeManifest` action with the generated ID, the Gatsby node, and the update timestamp. This ensures that the manifest is uniquely tied to a specific revision of content.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/creating-a-source-plugin/part-7/index.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport function customCreateNodeManifest({\n  attributes,\n  gatsbyNode,\n  unstable_createNodeManifest,\n}) {\n  const isPreview = process.env.GATSBY_IS_PREVIEW === `true`\n\n  const shouldCreateNodeManifest = isPreview && !!customNodeFilteringFn(gatsbyNode)\n\n  if (shouldCreateNodeManifest) {\n    // highlight-start\n    const updatedAtUTC = attributes.updatedAt\n    const manifestId = `${attributes.id}-${updatedAtUTC}`\n    // highlight-end\n\n    // highlight-start\n    unstable_createNodeManifest({\n      manifestId,\n      node: gatsbyNode,\n      updatedAtUTC,\n    })\n    // highlight-end\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Formspree Honeypot Spam Filter in JSX\nDESCRIPTION: This snippet shows how to implement a Honeypot spam filter for Formspree. A hidden input field with `name=\"_gotcha\"` is added to the form.  Formspree will ignore submissions containing a value in this field, assuming it's a bot.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/building-a-contact-form.md#_snippet_4\n\nLANGUAGE: JSX\nCODE:\n```\n<input type=\"text\" name=\"_gotcha\" style=\"display:none\" />\n```\n\n----------------------------------------\n\nTITLE: Importing GatsbyImage Component in JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to import the `GatsbyImage` component and the `getImage` helper function from the `gatsby-plugin-image` package. These imports are essential for rendering optimized images within the Gatsby blog post template.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-7/index.mdx#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react'\nimport { graphql } from 'gatsby'\nimport { GatsbyImage, getImage } from 'gatsby-plugin-image' // highlight-line\nimport Layout from '../../components/layout'\nimport Seo from '../../components/seo'\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Create Gatsby Project and Change Directory (Shell)\nDESCRIPTION: These commands create a new Gatsby project named `wordpress-tutorial-site` and then change the current directory to the newly created project folder. This sets up the basic project structure for the tutorial.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-wordpress/docs/tutorials/building-a-new-site-wordpress-and-gatsby.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngatsby new wordpress-tutorial-site\ncd wordpress-tutorial-site\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query for StaticImage Component\nDESCRIPTION: This GraphQL query is used to check if the `StaticImage` component is working correctly. It retrieves all files and checks for paths containing `.cache/caches/gatsby-plugin-image`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/images-and-media/using-gatsby-plugin-image.md#_snippet_11\n\nLANGUAGE: GraphQL\nCODE:\n```\nquery MyQuery {\n  allFile {\n    nodes {\n      relativePath\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring gatsby-plugin-layout (default)\nDESCRIPTION: This configuration adds the `gatsby-plugin-layout` plugin to your `gatsby-config.js` file, using the default layout component located at `src/layouts/index.js`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-layout/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  plugins: [`gatsby-plugin-layout`],\n}\n```\n\n----------------------------------------\n\nTITLE: Add gatsby-transformer-remark to gatsby-config.js\nDESCRIPTION: Adds the `gatsby-transformer-remark` plugin to the `gatsby-config.js` file after the `gatsby-source-filesystem` plugin. This allows Gatsby to transform markdown content into HTML and make it available in the GraphQL data layer.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/routing/adding-markdown-pages.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-source-filesystem`,\n      options: {\n        name: `content`,\n        path: `${__dirname}/src/content`,\n      },\n    },\n    // highlight-next-line\n    `gatsby-transformer-remark`,\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Profiling a Slow Component with React Profiler in JSX\nDESCRIPTION: This code snippet demonstrates how to use the React Profiler component to measure the performance of a specific component (`SlowComponent`). It imports React and Profiler, wraps `SlowComponent` with `Profiler`, and specifies an `onRender` callback (`capturePageMetrics`) to capture performance metrics. The `id` prop is used to uniquely identify the profiled component.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/profiling-site-performance-with-react-profiler.md#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport * as React from \"react\"\nimport { Profiler } from \"react\"\n\nexport const MyComponent = props => (\n  // See https://reactjs.org/docs/profiler.html#onrender-callback for onRender parameters\n  <Profiler id={props.someUniqueId} onRender={capturePageMetrics}>\n    <SlowComponent />\n  </Profiler>\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieve Timestamp from Cache - TypeScript\nDESCRIPTION: This snippet retrieves the last fetched timestamp from the cache using `cache.get` before fetching data and logs it using `reporter.verbose`. Retrieving the timestamp allows the plugin to check when the data was last fetched and potentially fetch only the changes. The `reporter.verbose` is used for debugging purposes.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/creating-a-source-plugin/part-4/index.mdx#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n// Imports\n\nexport const sourceNodes: GatsbyNode[`sourceNodes`] = async (gatsbyApi) => {\n  // Rest of sourceNodes\n\n  // highlight-next-line\n  const lastFetchedDate: number = await cache.get(CACHE_KEYS.Timestamp)\n  const lastFetchedDateCurrent = Date.now()\n\n  // highlight-next-line\n  reporter.verbose(`[plugin] Last fetched date: ${lastFetchedDate}`)\n\n  // Rest of sourceNodes\n}\n\n// Rest of file\n```\n\n----------------------------------------\n\nTITLE: Custom HTTPS with Gatsby CLI\nDESCRIPTION: This command starts the Gatsby development server with HTTPS enabled, specifying custom key, certificate, and CA files using the Gatsby CLI. The paths can be relative or absolute.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/local-https.md#_snippet_10\n\nLANGUAGE: Shell\nCODE:\n```\ngatsby develop --https --key-file ../relative/path/to/key.key --cert-file ../relative/path/to/cert.crt --ca-file ../relative/path/to/ca.crt\n```\n\n----------------------------------------\n\nTITLE: Creating Pages with Context (JavaScript)\nDESCRIPTION: This snippet is an enhanced version of the first `gatsby-node.js` example.  It adds the logic to iterate over the fetched WordPress posts and dynamically create pages using the `createPage` action.  Crucially, it passes the post's `slug` to the page context, which is then available to the blog post template for data fetching. Requires the `path` module.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/wordpress-source-plugin-tutorial.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst path = require(`path`)\n\nexports.createPages = ({ graphql, actions }) => {\n  const { createPage } = actions\n  return graphql(`\n    {\n      allWordpressPost(sort: { date: ASC }) {\n        edges {\n          node {\n            title\n            excerpt\n            content\n            slug\n          }\n        }\n      }\n    }\n  `).then(result => {\n    //highlight-start\n    result.data.allWordpressPost.edges.forEach(({ node }) => {\n      createPage({\n        path: node.slug,\n        component: path.resolve(`./src/templates/blog-post.js`),\n        context: {\n          // This is the $slug variable\n          // passed to blog-post.js\n          slug: node.slug,\n        },\n      })\n    })\n    //highlight-end\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Query NPM Packages with GraphQL\nDESCRIPTION: This GraphQL query retrieves information about npm packages. It fetches the name, humanDownloadsLast30Days, and the HTML content of the readme file for each package. The `allNpmPackages` GraphQL query is provided by the `gatsby-source-npm-package-search` plugin.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-npm-package-search/README.md#_snippet_2\n\nLANGUAGE: GraphQL\nCODE:\n```\n{\n  allNpmPackages {\n    edges {\n      node {\n        name\n        humanDownloadsLast30Days\n        readme {\n          childMarkdownRemark {\n            html\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Theme UI with Preset - JavaScript\nDESCRIPTION: This code snippet shows how to configure the `gatsby-plugin-theme-ui` plugin to use a preset theme. The `preset` option specifies the package name of the preset theme you want to use.  In this case, it's using `@theme-ui/preset-funk`.  This allows you to quickly apply a pre-defined theme to your site.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/styling/theme-ui.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-theme-ui`,\n      options: {\n        preset: \"@theme-ui/preset-funk\",\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Layout Component in Gatsby\nDESCRIPTION: This code defines a simple layout component in Gatsby using React. It receives `children` as a prop and renders them within a basic HTML structure with a header and main section. This allows for consistent layout across multiple pages in a Gatsby site.  It's a first step in refactoring to a common layout.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/porting-an-html-site-to-gatsby.md#_snippet_9\n\nLANGUAGE: JSX\nCODE:\n```\nimport React from \"react\"\n\nexport default function Layout({ children }) {\n  return (\n    <>\n      <header></header>\n      <main>{children}</main>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: getServerData Example - Gatsby\nDESCRIPTION: This code snippet demonstrates how to use the getServerData function in Gatsby to return a status code, headers, and props for server-side rendering. It allows for dynamic content generation and customization of the response.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/v4.2/index.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport async function getServerData() {\n  return {\n    status: 200,\n    headers: {},\n    props: {},\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: 3.x gatsby-plugin-offline configuration\nDESCRIPTION: Example configuration of gatsby-plugin-offline in version 3.x.  Demonstrates that options previously at the root level should be nested within the `workboxConfig` option.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-offline/README.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nplugins: [\n  {\n    resolve: `gatsby-plugin-offline`,\n    options: {\n      workboxConfig: {\n        importWorkboxFrom: `cdn`,\n      },\n    },\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query for Post with Image using gatsbyImage (GraphQL)\nDESCRIPTION: This GraphQL query retrieves a post by its title and includes the title, and image using the gatsbyImage field. The width is specified to be 600.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/creating-a-source-plugin/part-6/index.mdx#_snippet_15\n\nLANGUAGE: graphql\nCODE:\n```\nquery FirstPostWithImage {\n  post(title: {eq: \"The first post\"}) {\n    title\n    image {\n      gatsbyImage(width: 600)\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Styles to Site Title in Layout\nDESCRIPTION: This snippet shows how to import CSS styles and apply them to the site title within the Layout component.  The `siteTitle` class is imported and applied to the `<header>` element.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-4/index.mdx#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as React from 'react'\nimport { Link, useStaticQuery, graphql } from 'gatsby'\nimport {\n  container,\n  heading,\n  navLinks,\n  navLinkItem,\n  navLinkText,\n  siteTitle, // highlight-line\n} from './layout.module.css'\n\nconst Layout = ({ pageTitle, children }) => {\n  const data = useStaticQuery(graphql`\n    query {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `)\n\n  return (\n    <div className={container}>\n      {/* highlight-next-line */}\n      <header className={siteTitle}>{data.site.siteMetadata.title}</header>\n      <nav>\n        <ul className={navLinks}>\n          <li className={navLinkItem}>\n            <Link to=\"/\" className={navLinkText}>\n              Home\n            </Link>\n          </li>\n          <li className={navLinkItem}>\n            <Link to=\"/about\" className={navLinkText}>\n              About\n            </Link>\n          </li>\n        </ul>\n      </nav>\n      <main>\n        <h1 className={heading}>{pageTitle}</h1>\n        {children}\n      </main>\n    </div>\n  )\n}\n\nexport default Layout\n```\n\n----------------------------------------\n\nTITLE: JavaScript Anonymize IP Function\nDESCRIPTION: Code snippet that defines JavaScript functions and sets cookies to anonymize IP addresses for Google Analytics, complying with privacy regulations.  This should be added if your country requires the usage of the `_anonymizeIP` function.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-google-analytics/README.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction gaOptout(){document.cookie=disableStr+'=true; expires=Thu, 31 Dec 2099 23:59:59 UTC;path=/',window[disableStr]=!0}var gaProperty='UA-XXXXXXXX-X',disableStr='ga-disable-'+gaProperty;document.cookie.indexOf(disableStr+'=true')>-1&&(window[disableStr]=!0);\n\n...\n\nga('set', 'anonymizeIp', 1);\n```\n\n----------------------------------------\n\nTITLE: Querying MDX Frontmatter with Image Credits in GraphQL\nDESCRIPTION: This GraphQL query extends the previous query to include fields for the hero image's alt text, credit link, and credit text.  These fields provide descriptive and attribution information for the hero image.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-7/index.mdx#_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\nquery ($id: String) {\n  mdx(id: {eq: $id}) {\n    frontmatter {\n      title\n      date(formatString: \"MMMM D, YYYY\")\n      // highlight-start\n      hero_image_alt\n      hero_image_credit_link\n      hero_image_credit_text\n      // highlight-end\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Default Workbox Configuration\nDESCRIPTION: This is the default Workbox configuration used by gatsby-plugin-offline. It shows how to import Workbox from a local path, define glob patterns, modify URL prefixes, and configure runtime caching.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-offline/README.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst options = {\n  importWorkboxFrom: `local`,\n  globDirectory: rootDir,\n  globPatterns,\n  modifyURLPrefix: {\n    // If `pathPrefix` is configured by user, we should replace\n    // the default prefix with `pathPrefix`.\n    \"/\": `${pathPrefix}/`,\n  },\n  cacheId: `gatsby-plugin-offline`,\n  // Don't cache-bust JS or CSS files, and anything in the static directory,\n  // since these files have unique URLs and their contents will never change\n  dontCacheBustURLsMatching: /(\\.js$|\\.css$|static\\/)/,\n  runtimeCaching: [\n    {\n      // Use cacheFirst since these don't need to be revalidated (same RegExp\n      // and same reason as above)\n      urlPattern: /(\\.js$|\\.css$|static\\/)/,\n      handler: `CacheFirst`,\n    },\n    {\n      // page-data.json files, static query results and app-data.json\n      // are not content hashed\n      urlPattern: /^https?:.*\\/page-data\\/.*\\.json/,\n      handler: `StaleWhileRevalidate`,\n    },\n    {\n      // Add runtime caching of various other page resources\n      urlPattern:\n        /^https?:.*\\.(png|jpg|jpeg|webp|svg|gif|tiff|js|woff|woff2|json|css)$/,\n      handler: `StaleWhileRevalidate`,\n    },\n    {\n      // Google Fonts CSS (doesn't end in .css so we need to specify it)\n      urlPattern: /^https?:\\/\\/fonts\\.googleapis\\.com\\/css/,\n      handler: `StaleWhileRevalidate`,\n    },\n  ],\n  skipWaiting: true,\n  clientsClaim: true,\n}\n```\n\n----------------------------------------\n\nTITLE: Import PrismJS Theme in gatsby-browser.js\nDESCRIPTION: This snippet demonstrates how to import a PrismJS theme in `gatsby-browser.js` to apply a specific color scheme to the syntax highlighting.  This is required to style the highlighted code.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-prismjs/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// gatsby-browser.js\nrequire(\"prismjs/themes/prism-solarizedlight.css\")\n```\n\n----------------------------------------\n\nTITLE: MDX Frontmatter: Adding Hero Image Metadata\nDESCRIPTION: This code snippet demonstrates how to add hero image metadata (path, alt text, credit) to an MDX file's frontmatter. The `hero_image` specifies the relative path to the image. The `hero_image_alt` provides alternative text. The `hero_image_credit_text` and `hero_image_credit_link` give credit to the photographer.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-7/index.mdx#_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\n---\ntitle: \"Another Post\"\ndate: \"2021-07-24\"\nslug: \"another-post\"\n// highlight-start\nhero_image: \"./anthony-duran-eLUBGqKGdE4-unsplash.jpg\"\nhero_image_alt: \"A grey and white pitbull wading happily in a pool\"\nhero_image_credit_text: \"Anthony Duran\"\nhero_image_credit_link: \"https://unsplash.com/photos/eLUBGqKGdE4\"\n// highlight-end\n---\n\n...\n```\n\n----------------------------------------\n\nTITLE: Configure gatsby-omni-font-loader in gatsby-config.js\nDESCRIPTION: This code snippet shows how to configure the `gatsby-omni-font-loader` plugin in the `gatsby-config.js` file. It specifies the font to load (Open Sans) from Google Fonts and sets up preconnects to improve loading performance.  The `enableListener` option activates a font load listener.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/styling/using-web-fonts.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-omni-font-loader`,\n      options: {\n        enableListener: true,\n        preconnect: [`https://fonts.googleapis.com`, `https://fonts.gstatic.com`],\n        web: [\n          {\n            name: `Open Sans`,\n            file: `https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600;700&display=swap`,\n          },\n        ],\n      },\n    },\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Pages from Sanity Data\nDESCRIPTION: This code snippet shows how to generate pages dynamically from Sanity data in Gatsby's gatsby-node.js file.  It queries for 'project' documents in Sanity, then creates a page for each project using a specified template, passing the project's slug as context.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/sourcing-from-sanity.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nexports.createPages = async ({ graphql, actions }) => {\n  const { createPage } = actions\n\n  const result = await graphql(`\n    {\n      allSanityProject(filter: { slug: { current: { ne: null } } }) {\n        edges {\n          node {\n            title\n            description\n            tags\n            launchDate(format: \"DD.MM.YYYY\")\n            slug {\n              current\n            }\n            image {\n              asset {\n                url\n              }\n            }\n          }\n        }\n      }\n    }\n  `)\n\n  if (result.errors) {\n    throw result.errors\n  }\n\n  const projects = result.data.allSanityProject.edges || []\n  projects.forEach((edge, index) => {\n    const path = `/project/${edge.node.slug.current}`\n\n    createPage({\n      path,\n      component: require.resolve(\"./src/templates/project.js\"),\n      context: { slug: edge.node.slug.current },\n    })\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Backend in config.yml\nDESCRIPTION: Configures Netlify CMS to save content changes directly to a GitHub repository.  The `backend` section specifies the `github` name, the `repo` (your username/repo name), and the `branch` (your main branch).\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/sourcing-data/sourcing-from-netlify-cms.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nbackend:\n  name: github\n  repo: your-username/your-repo-name\n  branch: your-main-branch\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Headers in gatsby-config.ts\nDESCRIPTION: This code snippet demonstrates how to configure custom HTTP headers within the `gatsby-config.ts` file.  This allows developers to define headers for specific paths, providing more control over caching and other browser behaviors. The headers are specified as an array of objects, each defining a source path and an array of header key-value pairs.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/v5.12/index.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { GatsbyConfig } from \"gatsby\"\n\nconst config: GatsbyConfig = {\n  headers: [\n    {\n      source: \"/some-path\",\n      headers: [\n        {\n          key: \"x-custom-header\",\n          value: \"hello world\",\n        },\n      ],\n    },\n  ],\n}\n\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Import and Use Gatsby Script Component in TSX\nDESCRIPTION: This code demonstrates how to import the `Script` component and `ScriptStrategy` enum from the `gatsby` package and use them to load scripts with different strategies, including `postHydrate`, `idle`, and `offMainThread`. It also shows how to pass props like `forward` for offMainThread and use inline scripts. Finally, demonstrates how to use dangerouslySetInnerHTML and direct children.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-script/README.md#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from \"react\"\nimport { Script, ScriptStrategy } from \"gatsby\" // Re-exported from core\n\nconst GTM = `G-XXXXXXXXXX` // Example Google Analytics 4 identifier\n\n// Example script sources for illustration\nconst scripts = {\n  three: \"https://unpkg.com/three@0.139.1/build/three.js\",\n  marked: \"https://cdn.jsdelivr.net/npm/marked/marked.min.js\",\n  gtag: `https://www.googletagmanager.com/gtag/js?id=${GTM}`,\n}\n\n// Strategy prop is optional, defaults to post-hydrate\nfunction IndexPage() {\n  return (\n    <main>\n      <h1>Script component example</h1>\n      <Script src={scripts.three} strategy={ScriptStrategy.postHydrate} />\n      <Script src={scripts.marked} strategy={ScriptStrategy.idle} />\n      <Script\n        src={scripts.gtag}\n        strategy={ScriptStrategy.offMainThread}\n        forward={[`gtag`]}\n      />\n      <Script id=\"gtag-config\" strategy={ScriptStrategy.offMainThread}>\n        {`\n          // Example configuration of Google Analytics for use in Partytown\n          window.dataLayer = window.dataLayer || [];\n          function gtag(){dataLayer.push(arguments)};\n          gtag('js', new Date());\n          gtag('config', ${GTM}, { send_page_view: false })\n        `}\n      </Script>\n      <Script\n        id=\"my-unique-id\"\n        dangerouslySetInnerHTML={{ __html: `alert('Hello world')` }}\n      />\n      <Script id=\"my-unique-id-2\">{`alert('Hello world')`}</Script>\n    </main>\n  )\n}\n\nexport default IndexPage\n```\n\n----------------------------------------\n\nTITLE: Update React version in package.json (JSON)\nDESCRIPTION: Updates the React and React DOM dependency versions in `package.json` to the latest v18 release.  This is a prerequisite for Gatsby v5 and enables features like Partial Hydration. Modify the `dependencies` section of `package.json`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v4-to-v5.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"dependencies\": {\n    \"react\": \"^18.0.0\",\n    \"react-dom\": \"^18.0.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Loading Strategies\nDESCRIPTION: Shows how to declare loading strategies (`post-hydrate`, `idle`, and `off-main-thread`) using the `strategy` property of the `<Script>` component.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/built-in-components/gatsby-script.md#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Script src=\"https://my-example-script\" strategy=\"post-hydrate\" />\n<Script src=\"https://my-example-script\" strategy=\"idle\" />\n<Script src=\"https://my-example-script\" strategy=\"off-main-thread\" />\n```\n\n----------------------------------------\n\nTITLE: Querying Files by sourceInstanceName with GraphQL\nDESCRIPTION: This GraphQL query filters for files using the `sourceInstanceName` property.  The `allFile` query searches for all file nodes, and the `filter` option restricts the results to files where the `sourceInstanceName` is equal to \"src\". This allows querying specific sets of files defined in `gatsby-config.js`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/sourcing-data/sourcing-from-the-filesystem.md#_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  allFile(filter: { sourceInstanceName: { eq: \"src\" } }) {\n    edges {\n      node {\n        relativePath\n        prettySize\n        extension\n        birthTime\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling GraphQL Typegen in gatsby-config.js\nDESCRIPTION: This code snippet demonstrates how to enable the experimental GraphQL type generation feature in Gatsby by adding a `GRAPHQL_TYPEGEN` flag to the `gatsby-config.js` file. This flag instructs Gatsby to generate TypeScript types based on your GraphQL schema, improving type safety and developer experience.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/v4.14/index.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  flags: {\n    GRAPHQL_TYPEGEN: true,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using the OutboundLink Component\nDESCRIPTION: This JSX snippet demonstrates how to use the OutboundLink component provided by the gatsby-plugin-google-gtag.  It imports the component and uses it as a replacement for a standard <a> element to track clicks on outbound links.  The href attribute specifies the destination URL.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-google-gtag/README.md#_snippet_4\n\nLANGUAGE: JSX\nCODE:\n```\nimport React from \"react\"\nimport { OutboundLink } from \"gatsby-plugin-google-gtag\"\n\nexport default () => (\n  <div>\n    <OutboundLink href=\"https://www.gatsbyjs.com/plugins/gatsby-plugin-google-gtag/\">\n      Visit the Google Global Site Tag plugin page!\n    </OutboundLink>\n  </div>\n)\n```\n\n----------------------------------------\n\nTITLE: Styled Component for Search Box in React\nDESCRIPTION: This styled component, `StyledSearchBox`, styles the search input field. It uses `styled-components` library, including `css` helper to define open and closed states based on the `hasFocus` prop.  It extends an existing `SearchBox` component and adds CSS for transitions, colors, and layout.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/adding-search-with-algolia.md#_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\nimport styled, { css } from \"styled-components\"\nimport SearchBox from \"./search-box\"\n\nconst open = css`\n  width: 10em;\n  background: ${({ theme }) => theme.background};\n  cursor: text;\n  margin-left: -1.6em;\n  padding-left: 1.6em;\n`\n\nconst closed = css`\n  width: 0;\n  background: transparent;\n  cursor: pointer;\n  margin-left: -1em;\n  padding-left: 1em;\n`\n\nexport default styled(SearchBox)`\n  display: flex;\n  flex-direction: row-reverse;\n  align-items: center;\n  margin-bottom: 0;\n\n  .SearchInput {\n    outline: none;\n    border: ${({ hasFocus }) => (hasFocus ? \"auto\" : \"none\")};\n    font-size: 1em;\n    transition: 100ms;\n    border-radius: 2px;\n    color: ${({ theme }) => theme.foreground};\n    ::placeholder {\n      color: ${({ theme }) => theme.faded};\n    }\n    ${({ hasFocus }) => (hasFocus ? open : closed)}\n  }\n\n  .SearchIcon {\n    width: 1em;\n    margin: 0.3em;\n    color: ${({ theme }) => theme.foreground};\n    pointer-events: none;\n    z-index: 1;\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: Query Contentful CaseStudy Body HTML GraphQL\nDESCRIPTION: This GraphQL query retrieves the HTML representation of the `body` field of a `ContentfulCaseStudy` node.  The `childMarkdownRemark` field is added by the `gatsby-transformer-remark` plugin, which converts the Markdown content into HTML. This allows inserting the transformed HTML directly into JSX.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-contentful/README.md#_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  contentfulCaseStudy {\n    body {\n      childMarkdownRemark {\n        html\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query for File Field\nDESCRIPTION: This GraphQL query demonstrates how to query the `image` field within a `PostsJson` node, treating it as a `File` type. The query retrieves the `relativePath` and `accessTime` of the file associated with the `image` field.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/schema-inference.md#_snippet_5\n\nLANGUAGE: GraphQL\nCODE:\n```\n{\n  postsJson(id: { eq: \"1685001452849004065\" }) {\n    image {\n      relativePath\n      accessTime\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Gatsby Page Creator Plugin Configuration\nDESCRIPTION: This JavaScript code snippet shows how to configure the `gatsby-plugin-page-creator` to source pages from a custom directory within a Gatsby theme. It specifies the path to the directory where the theme's page components are located.  The `path` option is configured to point to a directory within the theme.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/plugins-and-themes/converting-a-starter.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  resolve: `gatsby-plugin-page-creator`,\n  options: {\n    path: path.join(__dirname, `src`, `<custom-directory>`),\n  },\n},\n```\n\n----------------------------------------\n\nTITLE: Configure gatsby-remark-prismjs Plugin\nDESCRIPTION: This code snippet shows how to configure the `gatsby-remark-prismjs` plugin within the `gatsby-transformer-remark` plugin in `gatsby-config.js`. It demonstrates setting various options, including `classPrefix`, `inlineCodeMarker`, `aliases`, `showLineNumbers`, `noInlineHighlight`, `languageExtensions`, `prompt`, and `escapeEntities` to customize the syntax highlighting behavior.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-prismjs/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// In your gatsby-config.js\nplugins: [\n  {\n    resolve: `gatsby-transformer-remark`,\n    options: {\n      plugins: [\n        {\n          resolve: `gatsby-remark-prismjs`,\n          options: {\n            // Class prefix for <pre> tags containing syntax highlighting;\n            // defaults to 'language-' (e.g. <pre class=\"language-js\">).\n            // If your site loads Prism into the browser at runtime,\n            // (e.g. for use with libraries like react-live),\n            // you may use this to prevent Prism from re-processing syntax.\n            // This is an uncommon use-case though;\n            // If you're unsure, it's best to use the default value.\n            classPrefix: \"language-\",\n            // This is used to allow setting a language for inline code\n            // (i.e. single backticks) by creating a separator.\n            // This separator is a string and will do no white-space\n            // stripping.\n            // A suggested value for English speakers is the non-ascii\n            // character '‚Ä∫'.\n            inlineCodeMarker: null,\n            // This lets you set up language aliases.  For example,\n            // setting this to '{ sh: \"bash\" }' will let you use\n            // the language \"sh\" which will highlight using the\n            // bash highlighter.\n            aliases: {},\n            // This toggles the display of line numbers globally alongside the code.\n            // To use it, add the following line in gatsby-browser.js\n            // right after importing the prism color scheme:\n            //  require(\"prismjs/plugins/line-numbers/prism-line-numbers.css\")\n            // Defaults to false.\n            // If you wish to only show line numbers on certain code blocks,\n            // leave false and use the {numberLines: true} syntax below\n            showLineNumbers: false,\n            // If setting this to true, the parser won't handle and highlight inline\n            // code used in markdown i.e. single backtick code like `this`.\n            noInlineHighlight: false,\n            // This adds a new language definition to Prism or extend an already\n            // existing language definition. More details on this option can be\n            // found under the header \"Add new language definition or extend an\n            // existing language\" below.\n            languageExtensions: [\n              {\n                language: \"superscript\",\n                extend: \"javascript\",\n                definition: {\n                  superscript_types: /(SuperType)/,\n                },\n                insertBefore: {\n                  function: {\n                    superscript_keywords: /(superif|superelse)/,\n                  },\n                },\n              },\n            ],\n            // Customize the prompt used in shell output\n            // Values below are default\n            prompt: {\n              user: \"root\",\n              host: \"localhost\",\n              global: false,\n            },\n            // By default the HTML entities <>&'\" are escaped.\n            // Add additional HTML escapes by providing a mapping\n            // of HTML entities and their escape value IE: { '}': '&#123;' }\n            escapeEntities: {},\n          },\n        },\n      ],\n    },\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Using the getSrc helper function\nDESCRIPTION: This example shows how to use the `getSrc` helper function to retrieve the image source URL. This is useful when you need the image path for other purposes, such as SEO components.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/image-migration-guide.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getSrc } from \"gatsby-plugin-image\"\n\nconst HomePage = ({ data }) => {\n  const imagePath = getSrc(data.file)\n  return (\n    <>\n      <SEO imageSrc={imagePath} />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Rich Text Area Page Module (JSX)\nDESCRIPTION: This is a simple page module component named `RichTextArea` that receives a module prop and renders the `textblob` custom field as HTML.  It uses `dangerouslySetInnerHTML` to render the HTML content, which requires sanitization to prevent XSS attacks (handled in `agility/utils`).\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/sourcing-from-agilitycms.md#_snippet_9\n\nLANGUAGE: JSX\nCODE:\n```\nimport React from \"react\"\nimport { renderHTML } from \"../../agility/utils\"\n\nconst RichTextArea = ({ module }) => {\n  // get module fields\n  const { customFields } = module\n\n  return (\n    <div className=\"relative px-8\">\n      <div className=\"max-w-2xl mx-auto my-12 md:mt-18 lg:mt-20\">\n        <div\n          className=\"prose max-w-full mx-auto\"\n          dangerouslySetInnerHTML={renderHTML(customFields.textblob)}\n        />\n      </div>\n    </div>\n  )\n}\n\nexport default RichTextArea\n```\n\n----------------------------------------\n\nTITLE: Referencing GraphQL Config in graphql.config.js\nDESCRIPTION: This JavaScript file exports the GraphQL configuration from the .cache/typegen/graphql.config.json file.  This file is automatically generated by Gatsby's GraphQL type generation.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/local-development/graphql-typegen.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = require(\"./.cache/typegen/graphql.config.json\")\n```\n\n----------------------------------------\n\nTITLE: Defining Algolia queries in src/utils/algolia-queries.js\nDESCRIPTION: This JavaScript code defines the GraphQL query and transformer function for indexing pages in Algolia.  It retrieves data from Markdown files, extracts relevant fields (title, slug, excerpt), and formats it into Algolia records. `escapeStringRegexp` is used to safely construct the file path regex.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/adding-search-with-algolia.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst escapeStringRegexp = require(\"escape-string-regexp\")\n\nconst pagePath = `content`\nconst indexName = `Pages`\n\nconst pageQuery = `{ \n  pages: allMarkdownRemark(\n    filter: {\n      fileAbsolutePath: { regex: \"/${escapeStringRegexp(pagePath)}/\" },\n    }\n  ) {\n    edges {\n      node {\n        id\n        frontmatter {\n          title\n        }\n        fields {\n          slug\n        }\n        excerpt(pruneLength: 5000)\n      }\n    }\n  }\n}`\n\nfunction pageToAlgoliaRecord({ node: { id, frontmatter, fields, ...rest } }) {\n  return {\n    objectID: id,\n    ...frontmatter,\n    ...fields,\n    ...rest,\n  }\n}\n\nconst queries = [\n  {\n    query: pageQuery,\n    transformer: ({ data }) => data.pages.edges.map(pageToAlgoliaRecord),\n    indexName,\n    settings: { attributesToSnippet: [`excerpt:20`] },\n  },\n]\n\nmodule.exports = queries\n```\n\n----------------------------------------\n\nTITLE: Querying a single post in Gatsby's GraphQL API\nDESCRIPTION: This GraphQL query retrieves a single WordPress post from Gatsby's GraphQL API by its database ID. It fetches the ID, title, and content of the specified post using the wpPost field and the databaseId argument.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-wordpress/docs/features/graphql-wordpress-and-gatsby.md#_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  wpPost(databaseId: { eq: 123 }) {\n    id\n    title\n    content\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Lint Scripts to package.json\nDESCRIPTION: This JSON snippet adds two scripts to the package.json file: `lint` and `lint:fix`. The `lint` script runs ESLint on all files, ignoring those specified in .gitignore. The `lint:fix` script runs ESLint with the --fix flag to automatically fix linting errors.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/local-development/graphql-typegen.md#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"lint\": \"eslint --ignore-path .gitignore .\",\n    \"lint:fix\": \"npm run lint -- --fix\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Absolute URL JSX and GraphQL\nDESCRIPTION: This JSX code demonstrates how to construct the absolute URL of a page in Gatsby by combining the `siteURL` from `siteMetadata` (configured in `gatsby-config.js`) with the `pathname` from the `location` object. The corresponding GraphQL query retrieves the `siteURL` from the `site` node.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/location-data-from-props.md#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\nimport React from \"react\"\nimport { graphql } from \"gatsby\"\n\nconst Page = ({ location, data }) => {\n  const canonicalUrl = data.site.siteMetadata.siteURL + location.pathname\n\n  return <div>The URL of this page is {canonicalUrl}</div>\n}\n\nexport default Page\n\nexport const query = graphql`\n  query PageQuery {\n    site {\n      siteMetadata {\n        siteURL\n      }\n    }\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query with Query Variable\nDESCRIPTION: This GraphQL query uses a query variable named 'slug' to dynamically retrieve data for an MDX node. It defines the query variable `$slug` of type String and uses it in the query to filter MDX nodes based on their frontmatter's slug field.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-6/index.mdx#_snippet_8\n\nLANGUAGE: graphql\nCODE:\n```\nquery MyQuery($slug: String) {\n  mdx(frontmatter: { slug: { eq: $slug } }) {\n    frontmatter {\n      title\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Location Object Example JavaScript\nDESCRIPTION: This JavaScript code shows the structure of the `location` object that is passed as a prop to page components in Gatsby, providing information about the current URL, including pathname, search parameters, hash, and state.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/location-data-from-props.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  key: 'ac3df4', // does not populate with a HashHistory!\n  pathname: '/somepage',\n  search: '?someurlparam=valuestring1&anotherurlparam=valuestring2',\n  hash: '#about',\n  state: {\n    [userDefined]: true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering WordPress Post Data in Template\nDESCRIPTION: This JavaScript snippet updates the `WpPost` component to render the data fetched by the GraphQL page query. It destructures the `title`, `content`, and `id` from the `data.wpPost` object and uses them to populate the component's markup. The `content` field is rendered using `dangerouslySetInnerHTML` to display the HTML content from WordPress.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-wordpress/docs/tutorials/querying-data.md#_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nconst WpPost = ({ \n  data: { \n    wpPost: { title, content, id },\n  },\n}) => {\n  return (\n    <div className={`post-${id}`}>\n      <h1>{title}</h1>\n      <div dangerouslySetInnerHTML={{ __html: content }} />\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Product Template\nDESCRIPTION: This React component serves as a template for individual product pages. It receives product data through `pageContext` and renders the product title and description. It uses `react` and requires the `Layout` component.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/building-an-ecommerce-site-with-shopify.md#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\"\n\nimport Layout from \"../components/layout\"\n\nconst ProductTemplate = ({ pageContext }) => {\n  const { product } = pageContext\n  return (\n    <Layout>\n      <h1>{product.title}</h1>\n      <div>{product.description}</div>\n    </Layout>\n  )\n}\n\nexport default ProductTemplate\n```\n\n----------------------------------------\n\nTITLE: Create a collection route component\nDESCRIPTION: Creates a collection route component using the File System Route API. This component queries the markdown data and displays it.  The `markdownRemark.frontmatter__slug` portion of the filename maps the URL to the slug specified in the markdown file's frontmatter.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/routing/adding-markdown-pages.md#_snippet_5\n\nLANGUAGE: JSX\nCODE:\n```\nimport * as React from \"react\"\nimport { graphql } from \"gatsby\"\n\nexport default function BlogPostTemplate({\n  data, // this prop will be injected by the GraphQL query below.\n}) {\n  const { markdownRemark } = data // data.markdownRemark holds your post data\n  const { frontmatter, html } = markdownRemark\n  return (\n    <div>\n      <div>\n        <h1>{frontmatter.title}</h1>\n        <h2>{frontmatter.date}</h2>\n        <div\n          dangerouslySetInnerHTML={{ __html: html }}\n        />\n      </div>\n    </div>\n  )\n}\n\nexport const pageQuery = graphql`\n  query($id: String!) {\n    markdownRemark(id: { eq: $id }) {\n      html\n      frontmatter {\n        date(formatString: \"MMMM DD, YYYY\")\n        slug\n        title\n      }\n    }\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: Unit Testing Joi Schema with gatsby-plugin-utils in Jest\nDESCRIPTION: Demonstrates how to unit test a plugin options schema in Gatsby using `gatsby-plugin-utils` and Jest.  It tests both invalid and valid options, verifying the schema's validation logic.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/plugins-and-themes/configuring-usage-with-plugin-options.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// This is an example using Jest (https://jestjs.io/)\nimport { testPluginOptionsSchema } from \"gatsby-plugin-utils\"\nimport { pluginOptionsSchema } from \"../gatsby-node\"\n\ndescribe(`pluginOptionsSchema`, () => {\n  it(`should invalidate incorrect options`, async () => {\n    const options = {\n      optionA: undefined, // Should be a boolean\n      message: 123, // Should be a string\n      optionB: `not a boolean`, // Should be a boolean\n    }\n    const expectedErrors = [\n      `\"optionA\" is required`,\n      `\"message\" must be a string`,\n      `\"optionB\" must be a boolean`,\n    ]\n\n    const { isValid, errors } = await testPluginOptionsSchema(\n      pluginOptionsSchema,\n      options\n    )\n\n    expect(isValid).toBe(false)\n    expect(errors).toEqual(expectedErrors)\n  })\n\n  it(`should validate correct options`, async () => {\n    const options = {\n      optionA: false,\n      message: \"string\",\n      optionB: true,\n    }\n    const { isValid, errors } = await testPluginOptionsSchema(\n      pluginOptionsSchema,\n      options\n    )\n\n    expect(isValid).toBe(true)\n    expect(errors).toEqual([])\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Child Relations with mimeTypes\nDESCRIPTION: This GraphQL snippet shows how to use the `@childOf` extension with the `mimeTypes` argument to define what media types a node is a child of.  It adds `childMdx` as a child of any node type with the `@mimeTypes` set to \"text/markdown\" or \"text/x-markdown\".\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/graphql-data-layer/schema-customization.md#_snippet_9\n\nLANGUAGE: graphql\nCODE:\n```\n# Adds `childMdx` as a child of any node type with the `@mimeTypes` set to \"text/markdown\" or \"text/x-markdown\"\ntype Mdx implements Node\n  @childOf(mimeTypes: [\"text/markdown\", \"text/x-markdown\"]) {\n  id: ID!\n}\n```\n\n----------------------------------------\n\nTITLE: Querying the test field in Gatsby\nDESCRIPTION: This GraphQL query retrieves posts from Gatsby and includes the custom field `testGatsbyField`. It shows that custom fields added via WPGraphQL are automatically available in Gatsby.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-wordpress/docs/features/graphql-wordpress-and-gatsby.md#_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  allWpPost {\n    nodes {\n      id\n      title\n      testGatsbyField\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Asset Prefixing for Gatsby Builds\nDESCRIPTION: These shell commands demonstrate how to enable asset prefixing when building a Gatsby site. Prefixing can be enabled either by using the `--prefix-paths` flag or by setting the `PREFIX_PATHS` environment variable. This is crucial for Gatsby to correctly pick up the asset prefix option defined in the configuration file.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/previews-deploys-hosting/asset-prefix.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ngatsby build --prefix-paths\n```\n\nLANGUAGE: Shell\nCODE:\n```\nPREFIX_PATHS=true gatsby build\n```\n\n----------------------------------------\n\nTITLE: JSON for ID Query Variable\nDESCRIPTION: This JSON object defines a query variable named `id` with a specific UUID value. Used to dynamically pass the `id` to a GraphQL query in GraphiQL to retrieve a specific MDX node.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-6/index.mdx#_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"11b3a825-30c5-551d-a713-dd748e7d554a\"\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query for Blogpost Content (GraphQL)\nDESCRIPTION: This GraphQL query retrieves the blog post content, including ID, title, excerpt, slug, and formatted date from the WordPress site using the `allWpPost` node.  Dependencies: `gatsby-source-wordpress` plugin configured with a valid WordPress GraphQL endpoint.  Input: None.  Output: JSON object containing an array of blog posts with their respective content.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-wordpress/docs/tutorials/building-a-new-site-wordpress-and-gatsby.md#_snippet_4\n\nLANGUAGE: GraphQL\nCODE:\n```\nquery {\n  allWpPost {\n    nodes {\n      id\n      title\n      excerpt\n      slug\n      date(formatString: \"MMMM DD, YYYY\")\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Build Script to package.json (JSON)\nDESCRIPTION: This snippet demonstrates how to add a 'build' script to the package.json file, using 'tsc' (TypeScript compiler) to compile the source code. The build script compiles TypeScript code into JavaScript, which is necessary for distribution. Requires `typescript` to be installed.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/creating-a-source-plugin/part-8/index.mdx#_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"scripts\": {\n    \"build\": \"tsc\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Query Post with Author data (GraphQL)\nDESCRIPTION: This GraphQL query fetches data for a single WordPress post including its ID, title, URI, content, and author information (ID, name, and description).  The query takes a string `$id` as a variable.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-wordpress/docs/tutorials/querying-data.md#_snippet_9\n\nLANGUAGE: graphql\nCODE:\n```\nquery ($id: String) {\n  wpPost(id: { eq: $id }) {\n    id\n    title\n    uri\n    content\n    author {\n      node {\n        id\n        name\n        description\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using probe-image-size to get image dimensions in TypeScript\nDESCRIPTION: This snippet shows how to use the `probe-image-size` package to get image dimensions (width, height, and mime type) from a remote URL when the API doesn't provide them. It defines an asynchronous `sourceNodes` function that uses `await probe(remoteUrl)` to retrieve the image attributes.  It then uses these attributes to create an `ImageAsset` node with the necessary fields for Gatsby's Image CDN.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/creating-a-source-plugin/part-6/index.mdx#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport type { GatsbyNode } from \"gatsby\"\n    import type { IRemoteImageNodeInput } from \"gatsby-plugin-utils\"\n    import probe from \"probe-image-size\"\n\n    export const sourceNodes: GatsbyNode[`sourceNodes`] = async (gatsbyApi) => {\n      const { actions, createNodeId, createContentDigest } = gatsbyApi\n      const { createNode } = actions\n\n      const remoteUrl = `https://some-url.com/without-dimensions`\n      const imageAttr = await probe(remoteUrl)\n\n      const imageData = {\n        url: remoteUrl,\n        mimeType: imageAttr.mime,\n        filename: remoteUrl,\n        width: imageAttr.width,\n        height: imageAttr.height,\n      }\n\n      const node: IRemoteImageNodeInput = {\n        ...imageData,\n        id: createNodeId(`TypeName-${remoteUrl}`),\n        parent: null,\n        children: [],\n        internal: {\n          type: `TypeName`,\n          contentDigest: createContentDigest(imageData),\n        },\n      }\n\n      createNode(node)\n    }\n```\n\n----------------------------------------\n\nTITLE: Configure precachePages in gatsby-config.js\nDESCRIPTION: Configures the `precachePages` option in `gatsby-config.js` to specify which pages should have their resources precached by the service worker. This allows specific pages to be available offline immediately.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-offline/README.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nplugins: [\n  {\n    resolve: `gatsby-plugin-offline`,\n    options: {\n      precachePages: [`/about-us/`, `/projects/*`],\n    },\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Plugin Cache Example\nDESCRIPTION: This code snippet shows how to use the Gatsby cache API within a `gatsby-node.js` file to cache data fetched using GraphQL.  It retrieves data from the cache, refreshes it if older than 24 hours, and saves the updated data back to the cache. This improves build times by avoiding redundant data fetching.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/build-caching.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nexports.onPostBuild = async function ({ cache, graphql }, { query }) {\n  const cacheKey = \"some-key-name\"\n  const twentyFourHoursInMilliseconds = 24 * 60 * 60 * 1000 // 86400000\n  let obj = await cache.get(cacheKey)\n\n  if (!obj) {\n    obj = { created: Date.now() }\n    const data = await graphql(query)\n    obj.data = data\n  } else if (Date.now() > obj.lastChecked + twentyFourHoursInMilliseconds) {\n    /* Reload after a day */\n    const data = await graphql(query)\n    obj.data = data\n  }\n\n  obj.lastChecked = Date.now()\n\n  await cache.set(cacheKey, obj)\n\n  /* Do something with data ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Using gatsby-plugin-image with Fixed Layout\nDESCRIPTION: This code snippet demonstrates how to use gatsby-plugin-image with a fixed layout to display images sourced from Sanity in a Gatsby component. The image's dimensions are explicitly set, and it will not resize responsively.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/sourcing-from-sanity.md#_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\nimport React from \"react\"\nimport { GatsbyImage } from \"gatsby-plugin-image\"\n\nconst Person = ({ data }) => (\n  <article>\n    <h2>{data.sanityPerson.name}</h2>\n    <GatsbyImage image={data.sanityPerson.profileImage.asset.gatsbyImageData} />\n  </article>\n)\n\nexport default Person\n\nexport const query = graphql`\n  query PersonQuery {\n    sanityPerson {\n      name\n      profileImage {\n        asset {\n          gatsbyImageData(layout: FIXED, placeholder: BLURRED, width: 400)\n        }\n      }\n    }\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: Creating a basic index page in React (JSX)\nDESCRIPTION: This JSX code creates a basic index page component in React that renders a simple \"Hello!\" message. It serves as a starting point for adding a GraphQL query.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/querying-data/page-query.md#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\nimport React from \"react\"\n\nconst HomePage = () => {\n  return <div>Hello!</div>\n}\n\nexport default HomePage\n```\n\n----------------------------------------\n\nTITLE: Configuring gatsby-plugin-sass in gatsby-config.js\nDESCRIPTION: This snippet demonstrates how to include the `gatsby-plugin-sass` plugin in the `gatsby-config.js` file, enabling Sass support in the Gatsby project. The plugin processes .sass and .scss files during the build process.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/styling/sass.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nplugins: [`gatsby-plugin-sass`],\n```\n\n----------------------------------------\n\nTITLE: Implementing JS Search Component in React/JSX\nDESCRIPTION: This React component demonstrates the implementation of JS Search within a Gatsby application. It fetches book data using Axios, indexes it using JS Search, and allows users to search the data through an input field. The results are then displayed in a table format.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/adding-search-with-js-search.md#_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\nimport React, { Component } from \"react\"\nimport Axios from \"axios\"\nimport * as JsSearch from \"js-search\"\n\nclass Search extends Component {\n  state = {\n    bookList: [],\n    search: [],\n    searchResults: [],\n    isLoading: true,\n    isError: false,\n    searchQuery: \"\",\n  }\n  /**\n   * React lifecycle method to fetch the data\n   */\n  async componentDidMount() {\n    Axios.get(\"https://bvaughn.github.io/js-search/books.json\")\n      .then(result => {\n        const bookData = result.data\n        this.setState({ bookList: bookData.books })\n        this.rebuildIndex()\n      })\n      .catch(err => {\n        this.setState({ isError: true })\n        console.log(\"====================================\")\n        console.log(`Something bad happened while fetching the data\\n${err}`)\n        console.log(\"====================================\")\n      })\n  }\n\n  /**\n   * rebuilds the overall index based on the options\n   */\n  rebuildIndex = () => {\n    const { bookList } = this.state\n    const dataToSearch = new JsSearch.Search(\"isbn\")\n    /**\n     * defines an indexing strategy for the data\n     * more about it in here https://github.com/bvaughn/js-search#configuring-the-index-strategy\n     */\n    dataToSearch.indexStrategy = new JsSearch.PrefixIndexStrategy()\n    /**\n     * defines the sanitizer for the search\n     * to prevent some of the words from being excluded\n     *\n     */\n    dataToSearch.sanitizer = new JsSearch.LowerCaseSanitizer()\n    /**\n     * defines the search index\n     * read more in here https://github.com/bvaughn/js-search#configuring-the-search-index\n     */\n    dataToSearch.searchIndex = new JsSearch.TfIdfSearchIndex(\"isbn\")\n\n    dataToSearch.addIndex(\"title\") // sets the index attribute for the data\n    dataToSearch.addIndex(\"author\") // sets the index attribute for the data\n\n    dataToSearch.addDocuments(bookList) // adds the data to be searched\n    this.setState({ search: dataToSearch, isLoading: false })\n  }\n\n  /**\n   * handles the input change and perform a search with js-search\n   * in which the results will be added to the state\n   */\n  searchData = e => {\n    const { search } = this.state\n    const queryResult = search.search(e.target.value)\n    this.setState({ searchQuery: e.target.value, searchResults: queryResult })\n  }\n  handleSubmit = e => {\n    e.preventDefault()\n  }\n\n  render() {\n    const { bookList, searchResults, searchQuery } = this.state\n    const queryResults = searchQuery === \"\" ? bookList : searchResults\n    return (\n      <div>\n        <div style={{ margin: \"0 auto\" }}>\n          <form onSubmit={this.handleSubmit}>\n            <div style={{ margin: \"0 auto\" }}>\n              <label htmlFor=\"Search\" style={{ paddingRight: \"10px\" }}>\n                Enter your search here\n              </label>\n              <input\n                id=\"Search\"\n                value={searchQuery}\n                onChange={this.searchData}\n                placeholder=\"Enter your search here\"\n                style={{ margin: \"0 auto\", width: \"400px\" }}\n              />\n            </div>\n          </form>\n          <div>\n            Number of items:\n            {queryResults.length}\n            <table\n              style={{\n                width: \"100%\",\n                borderCollapse: \"collapse\",\n                borderRadius: \"4px\",\n                border: \"1px solid #d3d3d3\",\n              }}\n            >\n              <thead style={{ border: \"1px solid #808080\" }}>\n                <tr>\n                  <th\n                    style={{\n                      textAlign: \"left\",\n                      padding: \"5px\",\n                      fontSize: \"14px\",\n                      fontWeight: 600,\n                      borderBottom: \"2px solid #d3d3d3\",\n                      cursor: \"pointer\",\n                    }}\n                  >\n                    Book ISBN\n                  </th>\n                  <th\n                    style={{\n                      textAlign: \"left\",\n                      padding: \"5px\",\n                      fontSize: \"14px\",\n                      fontWeight: 600,\n                      borderBottom: \"2px solid #d3d3d3\",\n                      cursor: \"pointer\",\n                    }}\n                  >\n                    Book Title\n                  </th>\n                  <th\n                    style={{\n                      textAlign: \"left\",\n                      padding: \"5px\",\n                      fontSize: \"14px\",\n                      fontWeight: 600,\n                      borderBottom: \"2px solid #d3d3d3\",\n                      cursor: \"pointer\",\n                    }}\n                  >\n                    Book Author\n                  </th>\n                </tr>\n              </thead>\n              <tbody>\n                {queryResults.map(item => {\n                  return (\n                    <tr key={`row_${item.isbn}`}>\n                      <td\n                        style={{\n                          fontSize: \"14px\",\n                          border: \"1px solid #d3d3d3\",\n                        }}\n                      >\n                        {item.isbn}\n                      </td>\n                      <td\n                        style={{\n                          fontSize: \"14px\",\n                          border: \"1px solid #d3d3d3\",\n                        }}\n                      >\n                        {item.title}\n                      </td>\n                      <td\n                        style={{\n                          fontSize: \"14px\",\n                          border: \"1px solid #d3d3d3\",\n                        }}\n                      >\n                        {item.author}\n                      </td>\n                    </tr>\n                  )\n                })}\n              </tbody>\n            </table>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\nexport default Search\n```\n\n----------------------------------------\n\nTITLE: Configure WooCommerce Source Plugin in gatsby-config.js\nDESCRIPTION: Configures the `@pasdo501/gatsby-source-woocommerce` plugin in `gatsby-config.js`.  It specifies the WooCommerce API endpoint, whether to use HTTPS, API keys, and the WooCommerce data fields to source.  The API keys are obtained from the WooCommerce settings in WordPress. Sensitive information should be stored in environment variables.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/sourcing-from-woocommerce.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  resolve: \"@pasdo501/gatsby-source-woocommerce\",\n  options: {\n    // Base URL of WordPress site\n    api: 'wordpress.domain',\n    // true if using https. false otherwise.\n    https: false,\n    api_keys: {\n      consumer_key: `your key`,\n      consumer_secret: `your secret`,\n    },\n    // Array of strings with fields you'd like to create nodes for...\n    fields: ['products', 'products/categories', 'products/attributes'],\n  }\n},\n```\n\n----------------------------------------\n\nTITLE: Create Schema Customization with Default Field Value\nDESCRIPTION: This code shows how to set a default value for a field using a custom resolver. It defines a `Frontmatter` type with a `tags` field and a resolver that returns `['uncategorized']` if the `tags` field is null or an empty array.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/graphql-data-layer/schema-customization.md#_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nexports.createSchemaCustomization = ({ actions, schema }) => {\n  const { createTypes } = actions\n  const typeDefs = [\n    \"type MarkdownRemark implements Node { frontmatter: Frontmatter }\",\n    schema.buildObjectType({\n      name: \"Frontmatter\",\n      fields: {\n        tags: {\n          type: \"[String!]\",\n          resolve(source, args, context, info) {\n            // For a more generic solution, you could pick the field value from\n            // `source[info.fieldName]`\n            const { tags } = source\n            if (source.tags == null || (Array.isArray(tags) && !tags.length)) {\n              return [\"uncategorized\"]\n            }\n            return tags\n          },\n        },\n      },\n    }),\n  ]\n  createTypes(typeDefs)\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query for Video Data\nDESCRIPTION: This GraphQL query retrieves the necessary data from a Markdown file, including the `videoSrcURL` and `videoTitle` from the frontmatter. This data is then used to populate the `Video` component in the page template.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/images-and-media/working-with-video.md#_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nquery($path: String!) {\n    markdownRemark(frontmatter: { path: { eq: $path } }) {\n      html\n      frontmatter {\n        date(formatString: \"MMMM DD, YYYY\")\n        path\n        title\n        videoSrcURL\n        videoTitle\n      }\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Installing gatsby-plugin-feed with npm\nDESCRIPTION: Installs the gatsby-plugin-feed package using npm. This is a prerequisite for using the plugin in your Gatsby project.  Run this command in your project's root directory.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-feed/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install gatsby-plugin-feed\n```\n\n----------------------------------------\n\nTITLE: Override Workbox Configuration\nDESCRIPTION: This configuration overrides the default Workbox configuration using the `workboxConfig` option in `gatsby-config.js`. This allows for advanced customization of the service worker generation process.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-offline/README.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nplugins: [\n  {\n    resolve: `gatsby-plugin-offline`,\n    options: {\n      workboxConfig: {\n        importWorkboxFrom: `cdn`,\n      },\n    },\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Using GatsbySSR type in gatsby-ssr.tsx\nDESCRIPTION: This example demonstrates how to use the `GatsbySSR` type to type API functions in `gatsby-ssr.tsx`. It utilizes the `wrapPageElement` function from `GatsbySSR` to provide type safety and improve the development experience.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/custom-configuration/typescript.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as React from \"react\"\nimport type { GatsbySSR } from \"gatsby\"\n\nexport const wrapPageElement: GatsbySSR[\"wrapPageElement\"] = ({ element }) => {\n  return (\n    <div>\n      <h1>Hello World</h1>\n      {element}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering blog posts on the homepage\nDESCRIPTION: Renders a list of blog posts on the homepage (`src/pages/index.js`).  It imports necessary modules, queries WordPress posts using GraphQL, and displays the title and excerpt of each post within a layout component.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/wordpress-source-plugin-tutorial.md#_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\"\nimport { graphql } from \"gatsby\"\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\n\nexport default function Home({ data }) {\n  //highlight-line\n  return (\n    <Layout>\n      <SEO title=\"home\" />\n      //highlight-start\n      <h1>My WordPress Blog</h1>\n      <h4>Posts</h4>\n      {data.allWordpressPost.edges.map(({ node }) => (\n        <div>\n          <p>{node.title}</p>\n          <div dangerouslySetInnerHTML={{ __html: node.excerpt }} />\n        </div>\n      ))}\n      //highlight-end\n    </Layout>\n  )\n}\n\n//highlight-start\nexport const pageQuery = graphql`\n  query {\n    allWordpressPost(sort: { date: ASC }) {\n      edges {\n        node {\n          title\n          excerpt\n          slug\n        }\n      }\n    }\n  }\n`\n//highlight-end\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query Example\nDESCRIPTION: This GraphQL query demonstrates a typical page query used in Gatsby to fetch data for a specific page. It uses a dynamic variable `$slug` to filter the `markdownRemark` node and retrieve its content, including HTML, reading time, fields, and frontmatter. The query is typically defined within a page component and executed during Gatsby's build process.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/gatsby-internals-terminology.md#_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nexport const pageQuery = graphql`\n  query($slug: String!) {\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      html\n      timeToRead\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n        date(formatString: \"MMMM Do YYYY\")\n        ...\n      }\n      ...\n    }\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: Invalid Gatsby Config Example\nDESCRIPTION: Demonstrates an invalid use case within `gatsby-config.js` when using Deferred Static Generation (DSG). Functions or callbacks cannot be used as options because the `gatsby-config` file needs to be serializable for the DSG engine.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/rendering-options/deferred-static-generation.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-acme`,\n      options: {\n        // ‚ö†Ô∏è Doesn't work\n        optionA: () => `foobar`,\n        // OK\n        optionB: `foobar`\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring gatsby-source-graphql in gatsby-config.js\nDESCRIPTION: This code snippet shows how to configure the `gatsby-source-graphql` plugin in your `gatsby-config.js` file. It specifies the GraphQL API endpoint, headers (including authentication token), and type/field names.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/conceptual/data-fetching.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-source-graphql`,\n      options: {\n        typeName: `GitHub`,\n        fieldName: `github`,\n        url: `https://api.github.com/graphql`, //highlight-line\n        headers: {\n          Authorization: `Bearer your-github-token`,\n        },\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring gatsby-plugin-algolia in gatsby-config.js\nDESCRIPTION: This code snippet configures the `gatsby-plugin-algolia` plugin within the `gatsby-config.js` file. It specifies the Algolia application ID, Admin API key, and the path to the GraphQL queries.  These options tell the plugin how to connect to Algolia and what data to index.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/adding-search-with-algolia.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n  plugins: [\n    ... // your existing plugins here\n    {\n      resolve: `gatsby-plugin-algolia`,\n      options: {\n        appId: process.env.GATSBY_ALGOLIA_APP_ID,\n        apiKey: process.env.ALGOLIA_ADMIN_KEY,\n        queries: require(\"./src/utils/algolia-queries\")\n      },\n    }\n  ],\n```\n\n----------------------------------------\n\nTITLE: Country-Based Redirects in gatsby-node.js\nDESCRIPTION: This snippet shows how to implement redirects based on the country of the user using the `conditions` property. It redirects `/blog` to `/italian/blog` for users in Italy (`it`) and to `/english/blog` for users in the US (`us`) or Great Britain (`gb`). It requires Gatsby's `createPages` API and the `createRedirect` action.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/cloud/working-with-redirects-and-rewrites.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncreateRedirect({\n  fromPath: `/blog`,\n  toPath: `/italian/blog`,\n  conditions: {\n    country: `it`\n  }\n})\n\ncreateRedirect({\n  fromPath: `/blog`,\n  toPath: `/english/blog`,\n  conditions: {\n    country: [`us`, `gb`]\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using PrivateRoute in App Page (React/JSX)\nDESCRIPTION: This code snippet modifies the App component to use the PrivateRoute component to protect the '/app/profile' route. It wraps the Profile component with PrivateRoute, ensuring that only logged-in users can access it. This demonstrates how to integrate the PrivateRoute component into the routing structure.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/authentication-tutorial.md#_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\"\nimport { Router } from \"@reach/router\"\nimport Layout from \"../components/layout\"\nimport PrivateRoute from \"../components/privateRoute\" // highlight-line\nimport Profile from \"../components/profile\"\nimport Login from \"../components/login\"\n\nconst App = () => (\n  <Layout>\n    <Router>\n      {/* highlight-next-line */}\n      <PrivateRoute path=\"/app/profile\" component={Profile} />\n      <Login path=\"/app/login\" />\n    </Router>\n  </Layout>\n)\n\nexport default App\n```\n\n----------------------------------------\n\nTITLE: Node Interface Definition\nDESCRIPTION: This GraphQL snippet defines the `Node` interface, which is a fundamental concept in Gatsby's GraphQL schema.  It specifies the common fields that all nodes created by source and transformer plugins must implement.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/graphql-data-layer/schema-customization.md#_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\ninterface Node {\n  id: ID!\n  parent: Node!\n  children: [Node!]!\n  internal: Internal!\n}\n\ntype Internal {\n  type: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Install Gatsby image plugins\nDESCRIPTION: This command shows how to install the required Gatsby plugins: `gatsby-plugin-image`, `gatsby-plugin-sharp`, and `gatsby-transformer-sharp`. These plugins are necessary for using `gatsby-plugin-image`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/image-migration-guide.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-transformer-sharp\n```\n\n----------------------------------------\n\nTITLE: Query Variables GraphQL\nDESCRIPTION: This example demonstrates the use of query variables in GraphQL. It defines a query with variables for limit, filter, and sort, and provides a JSON object with the values for those variables. The query fetches MarkdownRemark nodes based on these variables.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/graphql-reference/content/queries.md#_snippet_8\n\nLANGUAGE: graphql\nCODE:\n```\nquery GetBlogPosts($limit: Int, $filter: filterMarkdownRemark, $sort: markdownRemarkConnectionSort) {\n  allMarkdownRemark(\n    limit: $limit,\n    filter: $filter,\n    sort: $sort\n  ) {\n    edges {\n      node {\n        fields{\n          slug\n        }\n        frontmatter {\n          title\n          date(formatString: \"dddd DD MMMM YYYY\")\n        }\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  \"limit\": 3,\n  \"filter\": {\n    \"frontmatter\": {\n      \"date\": {\n        \"ne\": null\n      }\n    }\n  },\n  \"sort\": {\n    \"frontmatter\": {\n      \"date\": \"DESC\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Gatsby with gatsby-mdx-embed\nDESCRIPTION: This JavaScript code snippet configures the Gatsby site to use the `@pauliescanlon/gatsby-mdx-embed` plugin, enabling the embedding of social media content and videos in MDX files.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/using-multiple-themes-together.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  siteMetadata: {\n    // ...siteMetadata is unchanged.\n  },\n  plugins: [\n    `@pauliescanlon/gatsby-mdx-embed`, // highlight-line\n    {\n      resolve: `gatsby-theme-blog`,\n      options: {\n        basePath: `/`,\n      },\n    },\n    {\n      resolve: `gatsby-theme-notes`,\n      options: {\n        basePath: `/notes`,\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Asset Prefix in gatsby-config.js\nDESCRIPTION: This code snippet demonstrates how to configure the `assetPrefix` option in `gatsby-config.js`.  This option specifies the base URL for all assets. When building, the `--prefix-paths` flag or `PREFIX_PATHS` environment variable is needed.  The asset prefix will be prepended to all asset URLs in the generated HTML.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/previews-deploys-hosting/asset-prefix.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  assetPrefix: `https://cdn.example.com`,\n}\n```\n\n----------------------------------------\n\nTITLE: gatsby-config.js: Simple GraphQL Source Configuration (JavaScript)\nDESCRIPTION: Demonstrates a basic configuration for gatsby-source-graphql, specifying the type name, field name, and URL of the remote GraphQL API. This setup provides a simple way to connect to a GraphQL endpoint without authentication.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-graphql/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// In your gatsby-config.js\nmodule.exports = {\n  plugins: [\n    // Simple config, passing URL\n    {\n      resolve: \"gatsby-source-graphql\",\n      options: {\n        // Arbitrary name for the remote schema Query type\n        typeName: \"SWAPI\",\n        // Field under which the remote schema will be accessible. You'll use this in your Gatsby query\n        fieldName: \"swapi\",\n        // Url to query from\n        url: \"https://swapi-graphql.netlify.app/.netlify/functions/index\",\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring gatsby-source-drupal in gatsby-config.js\nDESCRIPTION: Example configuration for the gatsby-source-drupal plugin within the gatsby-config.js file.  It shows how to set the baseUrl and apiBase options.  The baseUrl should point to the Drupal site, and apiBase specifies the JSON API endpoint. This is a core configuration for connecting Gatsby to a Drupal backend.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-drupal/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// In your gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-source-drupal`,\n      options: {\n        baseUrl: `https://live-contentacms.pantheonsite.io/`,\n        apiBase: `api`, // optional, defaults to `jsonapi`\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Site Metadata in gatsby-config.js\nDESCRIPTION: This JavaScript code snippet demonstrates how to define site metadata within the `gatsby-config.js` file.  The `siteMetadata` object can contain arbitrary data that can be queried using GraphQL.  The example shows setting a `title` field.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/internal-data-bridge.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  siteMetadata: {\n    title: `My beautiful Gatsby site title`,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Gatsby Source Medium Plugin\nDESCRIPTION: This JavaScript snippet configures the gatsby-source-medium plugin within the gatsby-config.js file.  It specifies the plugin's resolve path and provides an options object with the Medium username or publication to fetch data from. The username option accepts the username with `@` or publication name.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-medium/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// In your gatsby-config.js\nplugins: [\n  {\n    resolve: `gatsby-source-medium`,\n    options: {\n      username: `username/publication`,\n    },\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Initializing createPages Function Gatsby JS\nDESCRIPTION: This snippet sets up the `createPages` function in `gatsby-node.js`. This function is a Gatsby lifecycle method that allows you to programmatically create pages. It receives `actions`, `graphql`, and `reporter` as arguments, which are used for creating pages, querying data, and reporting errors, respectively.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-wordpress/docs/tutorials/querying-data.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nexports.createPages = async ({ actions, graphql, reporter }) => {\n  // code for the next steps will go in here.\n}\n```\n\n----------------------------------------\n\nTITLE: Complete createPages Implementation Gatsby JS\nDESCRIPTION: This snippet shows the complete implementation of the `createPages` function.  It queries all WordPress posts, handles potential errors, defines a template for the pages, and uses the `createPage` action to create pages for each post.  The `uri` field of each post is used as the page path, and the post data is passed as context to the template.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-wordpress/docs/tutorials/querying-data.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nexports.createPages = async ({ actions, graphql, reporter }) => {\n  const result = await graphql(`\n    {\n      allWpPost {\n        nodes {\n          id\n          uri\n        }\n      }\n    }\n  `)\n\n  if (result.errors) {\n    reporter.error(\"There was an error fetching posts\", result.errors)\n  }\n\n  const { allWpPost } = result.data\n\n  // Define the template to use\n  const template = require.resolve(`./src/templates/WpPost.js`)\n\n  if (allWpPost.nodes.length) {\n    allWpPost.nodes.map(post => {\n      actions.createPage({\n        path: post.uri,\n        component: template,\n        context: post,\n      })\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Supporting Multiple Gatsby Versions in Plugin\nDESCRIPTION: This code snippet demonstrates how to define `peerDependencies` in a Gatsby plugin's `package.json` to support both Gatsby v4 and v5. This approach ensures that the plugin can be used with projects using either version of Gatsby.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v4-to-v5.md#_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"peerDependencies\": {\n    \"gatsby\": \"^4.0.0 || ^5.0.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing HTML anchor tag with Gatsby Link in JSX\nDESCRIPTION: Shows how to replace a standard HTML anchor tag with Gatsby's Link component for internal navigation.  The `href` attribute is replaced with the `to` prop. This component enables Gatsby's preloading and performance optimizations.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/built-in-components/gatsby-link.md#_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n-<a href=\"/blog\">Blog</a>\n+<Link to=\"/blog\">Blog</Link>\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query: Current Sort Syntax\nDESCRIPTION: This GraphQL query demonstrates the current syntax for sorting data in Gatsby. It retrieves all MarkdownRemark nodes and sorts them by the `date` field within the `frontmatter` object in descending order.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/v4.22/index.md#_snippet_2\n\nLANGUAGE: GraphQL\nCODE:\n```\n{\n  allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n    nodes {\n      ...fields\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Type Prefix (JavaScript)\nDESCRIPTION: This code shows how to add a prefix to all types created by the plugin using `typePrefix`. This is useful to avoid conflicts when you have multiple Drupal sources, or if Drupal types conflict with other types in your site.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-drupal/README.md#_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n// In your gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-source-drupal`,\n      options: {\n        baseUrl: `https://live-contentacms.pantheonsite.io/`,\n        typePrefix: `Drupal`,\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Cache Control for JavaScript and CSS\nDESCRIPTION: This snippet demonstrates the cache-control header for JavaScript and CSS files generated by webpack in a Gatsby site. These files, named with content-based hashes, can be cached permanently. The header uses `public`, `max-age=31536000`, and `immutable` to ensure browsers cache these assets for an extended duration.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/previews-deploys-hosting/caching.md#_snippet_4\n\nLANGUAGE: HTTP\nCODE:\n```\ncache-control: public, max-age=31536000, immutable\n```\n\n----------------------------------------\n\nTITLE: Check Node.js Version in Terminal\nDESCRIPTION: This command allows you to determine the currently installed Node.js version on your system. It prints the version number to the terminal.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/upgrading-node-js.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnode -v\n```\n\n----------------------------------------\n\nTITLE: Querying featured Etsy listings with GraphQL\nDESCRIPTION: This GraphQL query fetches the total count, price, title, and description of featured listings from your Etsy shop. It utilizes the `allFeaturedEtsyListing` node provided by the `gatsby-source-etsy` plugin.  This data can then be used to display featured listings on your Gatsby site.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/sourcing-from-etsy.md#_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nallFeaturedEtsyListing {\n  totalCount\n    nodes {\n      price\n      title\n      description\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Gatsby Build Command\nDESCRIPTION: This shell command triggers the Gatsby build process. It compiles the Gatsby site, including all pages, components, and assets, into static HTML, CSS, and JavaScript files optimized for production. The output is placed in the `public` directory.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/porting-an-html-site-to-gatsby.md#_snippet_14\n\nLANGUAGE: Shell\nCODE:\n```\ngatsby build\n```\n\n----------------------------------------\n\nTITLE: Configuring gatsby-config.js for Site\nDESCRIPTION: Configures the `gatsby-config.js` file in the `site` project to use the `gatsby-theme-events` theme plugin. This plugin configuration tells Gatsby to incorporate the theme into the site's build process.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/building-a-theme.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  plugins: [\n    {\n      resolve: \"gatsby-theme-events\",\n      options: {},\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Query Data in Gatsby Head API\nDESCRIPTION: This code example shows how to access data fetched by a page query within the Gatsby Head API. It demonstrates accessing the `title` field from `siteMetadata` via the `data` prop and rendering it within the `<title>` tag. This is used to set the title of the HTML document.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-4/index.mdx#_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nexport const Head = ({ data }) => <title>{data.site.siteMetadata.title}</title>\n```\n\n----------------------------------------\n\nTITLE: Add Tags to Markdown Frontmatter\nDESCRIPTION: This snippet demonstrates how to add a `tags` field to the frontmatter of a Markdown file. The `tags` field is defined as an array of strings, allowing multiple tags to be associated with a single blog post.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/adding-tags-and-categories-to-blog-posts.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: \"A Trip To the Zoo\"\ntags: [\"animals\", \"Chicago\", \"zoos\"]\n---\n\nI went to the zoo today. It was terrible.\n```\n\n----------------------------------------\n\nTITLE: Configure JSX Import Source in Gatsby Config\nDESCRIPTION: This JavaScript snippet shows how to configure the JSX import source in `gatsby-config.js`. This allows you to specify which package React should use as the underlying JSX transformer. For example, you can set it to `@emotion/react` instead of `react`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/config-files/gatsby-config.md#_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  jsxRuntime: \"automatic\",\n  jsxImportSource: \"@emotion/react\",\n}\n```\n\n----------------------------------------\n\nTITLE: Filter and Concatenate Themes Array in Gatsby\nDESCRIPTION: This code snippet filters out the current theme from the list of themes and then concatenates the remaining themes into a new array. The themes are reversed to ensure that the last theme wins during resolution. This function is used to build an array of paths to check for component shadowing.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/conceptual/how-shadowing-works.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst themes = this.themes.filter(\n  ({ themeName }) => themeName !== theme.themeName\n)\n\nconst themesArray = [\n  path.join(this.projectRoot, `src`, theme.themeName),\n].concat(\n  themes\n    .reverse()\n    .map(({ themeDir }) => path.join(themeDir, `src`, theme.themeName))\n)\n```\n\n----------------------------------------\n\nTITLE: Update WpPost Component to use AuthorBio (JavaScript)\nDESCRIPTION: This code updates the `WpPost` component to include the `AuthorBio` component. It imports `AuthorBio`, destructures the author from the data, and renders the `AuthorBio` component with the author node passed as a prop.  It updates the GraphQL query to use the `AuthorBio` fragment.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-wordpress/docs/tutorials/querying-data.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from \"react\"\nimport { graphql } from \"gatsby\"\nimport AuthorBio from \"../components/AuthorBio\"\n\nconst WpPost = ({ data }) => {\n  const {\n    wpPost: { title, content, id, author },\n  } = data\n  return (\n    <div className={`post-${id}`}>\n      <h1>{title}</h1>\n      <div dangerouslySetInnerHTML={{ __html: content }} />\n      <AuthorBio author={author.node} />\n    </div>\n  )\n}\n\nexport const query = graphql`\n  query ($id: String) {\n    wpPost(id: { eq: $id }) {\n      id\n      title\n      content\n      author {\n        node {\n          ...AuthorBio\n        }\n      }\n    }\n  }\n`\n\nexport default WpPost\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query for Markdown Attachments\nDESCRIPTION: This GraphQL query retrieves the frontmatter attachments from a Markdown file based on its slug. It extracts the `publicURL` of each attachment. Dependencies: gatsby-source-filesystem.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/images-and-media/importing-assets-into-files.md#_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nquery ($slug: String!) {\n  markdownRemark(fields: { slug: { eq: $slug } }) {\n    html\n    frontmatter {\n      title\n      attachments {\n        publicURL\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Shadowed Bio Component for Composition (JSX)\nDESCRIPTION: This snippet demonstrates importing the original shadowed component (`Author`) from the theme and wrapping it with a custom `Card` component.  This is an efficient way to customize rendering without needing to know the component's implementation details.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/plugins-and-themes/shadowing.md#_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\"\nimport { Author } from \"gatsby-theme-blog/src/components/bio\"\nimport Card from \"../components/card\"\n\nexport default function Bio(props) {\n  return (\n    <Card>\n      <Author {...props} />\n    </Card>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Gatsby to use Preact\nDESCRIPTION: This code snippet demonstrates how to configure Gatsby to use Preact by adding `gatsby-plugin-preact` to the plugins array in the `gatsby-config.js` file. This will replace React with Preact for improved performance and reduced bundle size.  It requires installing the plugin as a prerequisite.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-preact/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// In your gatsby-config.js\nplugins: [`gatsby-plugin-preact`]\n```\n\n----------------------------------------\n\nTITLE: Configuring Translations (JavaScript)\nDESCRIPTION: This code shows how to configure language settings, including default and enabled languages, filtering by language, and specifying translatable and non-translatable entities using `languageConfig`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-drupal/README.md#_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n// In your gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-source-drupal`,\n      options: {\n        baseUrl: `https://live-contentacms.pantheonsite.io/`,\n        languageConfig: {\n          defaultLanguage: `en`,\n          enabledLanguages: [\n            `en`,\n            `fil`,\n            // add an object here if you've renamed a langcode in Drupal\n            {\n              langCode: `en-gb`,\n              as: `uk`,\n            },\n          ],\n          filterByLanguages: false\n          // add a boolean `true` here if you'd like to filter the Drupal API response by the current language\n          translatableEntities: [`node--article`],\n          nonTranslatableEntities: [`file--file`],\n        },\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Adding classes to components\nDESCRIPTION: This JSX snippet demonstrates how to add a CSS class to a component using the `className` prop. The `className` prop is used instead of `class` because `class` is a reserved word in JavaScript.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/styling/global-css.md#_snippet_9\n\nLANGUAGE: JSX\nCODE:\n```\n<button className=\"primary\">Click me</button>\n```\n\n----------------------------------------\n\nTITLE: Layout Component with useStaticQuery - JSX\nDESCRIPTION: This React component uses the `useStaticQuery` hook to fetch site metadata via GraphQL.  It renders the site title and the component's children.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/testing/testing-components-with-graphql.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nconst Layout = ({ children }) => {\n  const data = useStaticQuery(graphql`\n    query SiteTitleQuery {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `)\n\n  return (\n    <>\n      <h1>{data.site.siteMetadata.title}</h1>\n      <div>\n        {children}\n      </div>\n    </>\n  )\n}\n\nexport default Layout\n```\n\n----------------------------------------\n\nTITLE: Disabling displayName option\nDESCRIPTION: This code snippet shows how to disable the `displayName` option within the `gatsby-plugin-styled-components` plugin's configuration.  Setting `displayName` to `false` prevents the component names from appearing in the generated CSS class names. This can be useful for reducing the size of the generated CSS and improving performance in some cases.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-styled-components/README.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\noptions: {\n  displayName: false\n}\n```\n\n----------------------------------------\n\nTITLE: Triggering Refresh Endpoint with curl\nDESCRIPTION: This command triggers the content refresh endpoint by sending a POST request to the /__refresh webhook on the local development server. It requires that the ENABLE_GATSBY_REFRESH_ENDPOINT environment variable is set to true.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/refreshing-content.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST http://localhost:8000/__refresh\n```\n\n----------------------------------------\n\nTITLE: Configure Snipcart API Key in Gatsby config\nDESCRIPTION: This code snippet configures the gatsby-plugin-snipcart plugin with a Snipcart API key.  The apiKey option should be replaced with your own Snipcart API key. The autopop option determines if the cart automatically opens when an item is added.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/e-commerce-with-datocms-and-snipcart/index.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  resolve: 'gatsby-plugin-snipcart',\n  options: {\n    apiKey: 'OWE3MmZmMjQtNTk3Yi00OThhLWEwMmUtZDY4ZWM4NzIwYzZiNjM2NjM0Mzc1NzE0MTUwNzI1',\n    autopop: true\n  }\n},\n```\n\n----------------------------------------\n\nTITLE: Dynamic Route with User ID - Gatsby\nDESCRIPTION: This code snippet demonstrates creating a dynamic route to fetch user information based on a user ID passed in the URL. It uses the `req.params.id` to extract the ID and retrieve the user data.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/functions/routing.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nexport default async function handler(req, res) {\n  const userId = req.params.id\n  // Fetch user\n  const user = await getUser(userId)\n  res.json(user)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Reusable Video Component (JSX)\nDESCRIPTION: This code defines a reusable React component for embedding videos using an iframe. It takes `videoSrcURL` and `videoTitle` as props to dynamically set the iframe's `src` and `title` attributes. The component also includes basic styling and accessibility attributes.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/images-and-media/working-with-video.md#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\"\nconst Video = ({ videoSrcURL, videoTitle, ...props }) => (\n  <div className=\"video\">\n    <iframe\n      src={videoSrcURL}\n      title={videoTitle}\n      allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n      frameBorder=\"0\"\n      webkitallowfullscreen=\"true\"\n      mozallowfullscreen=\"true\"\n      allowFullScreen\n    />\n  </div>\n)\nexport default Video\n```\n\n----------------------------------------\n\nTITLE: Sorting on Multiple Fields with GraphQL\nDESCRIPTION: This GraphQL query sorts the results of `allMarkdownRemark` in ascending order based on the `date` and `title` fields within the `frontmatter`.  It retrieves the `totalCount` and the `title` and `date` of each node in the edges.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/graphql-reference.md#_snippet_17\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  allMarkdownRemark(\n    sort: [{ frontmatter: { date: ASC } }, { frontmatter: { title: ASC } }]\n  ) {\n    totalCount\n    edges {\n      node {\n        frontmatter {\n          title\n          date\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Theme Components\nDESCRIPTION: This code snippet demonstrates how to extend a component from a Gatsby theme using shadowing. It imports the original component from `gatsby-theme-amazing`, then re-exports it with additional props. This allows you to modify the component's behavior without completely replacing it.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/theme-api.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport Header from \"gatsby-theme-amazing/src/components/header\"\n\n// these props are the same as the original component would get\nexport default function MyHeader(props) {\n  return <Header {...props} myProp=\"true\" />\n}\n```\n\n----------------------------------------\n\nTITLE: Excluding elements from transition\nDESCRIPTION: This configuration snippet demonstrates how to specify a layout component in `gatsby-config.js` to persist elements across page transitions. Elements within this layout will not be animated during transitions.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/adding-common-features/adding-page-transitions-with-plugin-transition-link.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n    plugins: [\n       {\n          resolve: \"gatsby-plugin-transition-link\",\n          options: {\n              layout: require.resolve(`./src/components/Layout.js`)\n            }\n       }\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Creating nodeBuilder Utility Function in source-nodes.ts\nDESCRIPTION: This code snippet demonstrates the creation of a `nodeBuilder` utility function that takes data, mutates it, and calls `createNode` to create Gatsby nodes. It uses types from `gatsby` and `types.ts`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/creating-a-source-plugin/part-2/index.mdx#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// highlight-next-line\nimport type { GatsbyNode, SourceNodesArgs, NodeInput } from \"gatsby\"\nimport { fetchGraphQL } from \"./utils\"\n// highlight-next-line\nimport type { IAuthorInput, IPostInput, NodeBuilderInput } from \"./types\"\n// highlight-next-line\nimport { NODE_TYPES } from \"./constants\"\n\nexport const sourceNodes: GatsbyNode[`sourceNodes`] = async (gatsbyApi) => {\n  // Contents of sourceNodes\n}\n\n// highlight-start\ninterface INodeBuilderArgs {\n  gatsbyApi: SourceNodesArgs\n  input: NodeBuilderInput\n}\n// highlight-end\n\n// highlight-next-line\nexport function nodeBuilder({ gatsbyApi, input }: INodeBuilderArgs) {}\n```\n\n----------------------------------------\n\nTITLE: Add page query for events by ID (JSX)\nDESCRIPTION: This snippet creates a page query to fetch individual events by ID. It uses GraphQL to define the query with an `$eventID` variable.  Dependencies: React, gatsby, graphql.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/building-a-theme.md#_snippet_31\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\"\n// highlight-start\nimport { graphql } from \"gatsby\"\n\nexport const query = graphql`\n  query($eventID: String!) {\n    event(id: { eq: $eventID }) {\n      name\n      url\n      startDate(formatString: \"MMMM DD YYYY\")\n      endDate(formatString: \"MMMM DD YYYY\")\n      location\n      slug\n    }\n  }\n`\n// highlight-end\n\nconst EventTemplate = () => <p>TODO: Build the event page template</p>\n\nexport default EventTemplate\n```\n\n----------------------------------------\n\nTITLE: Modify Babel loader configuration - JS\nDESCRIPTION: This code snippet illustrates how to modify the Babel loader configuration in Gatsby's webpack setup. It retrieves the existing webpack config, filters out the default Babel rule, and recreates it with a custom `exclude` filter to transpile specific modules in `node_modules`. This allows fine-grained control over which modules are processed by Babel, which is useful when dealing with ES modules in older libraries.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/custom-configuration/add-custom-webpack-config.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nexports.onCreateWebpackConfig = ({ actions, loaders, getConfig }) => {\n  const config = getConfig()\n\n  config.module.rules = [\n    // Omit the default rule where test === '\\.jsx?$'\n    ...config.module.rules.filter(\n      rule => String(rule.test) !== String(/\\.jsx?$/)\n    ),\n\n    // Recreate it with custom exclude filter\n    {\n      // Called without any arguments, `loaders.js()` will return an\n      // object like:\n      // {\n      //   options: undefined,\n      //   loader: '/path/to/node_modules/gatsby/dist/utils/babel-loader.js',\n      // }\n      // Unless you're replacing Babel with a different transpiler, you probably\n      // want this so that Gatsby will apply its required Babel\n      // presets/plugins.  This will also merge in your configuration from\n      // `babel.config.js`.\n      ...loaders.js(),\n\n      test: /\\.jsx?$/,\n\n      // Exclude all node_modules from transpilation, except for 'swiper' and 'dom7'\n      exclude: modulePath =>\n        /node_modules/.test(modulePath) &&\n        !/node_modules\\/(swiper|dom7)/.test(modulePath),\n    },\n  ]\n\n  // This will completely replace the webpack config with the modified object.\n  actions.replaceWebpackConfig(config)\n}\n```\n\n----------------------------------------\n\nTITLE: Language Based Redirects in gatsby-node.js\nDESCRIPTION: This snippet shows how to implement redirects based on the `Accept-Language` header. It redirects `/book_list` to `/en/book_list` for users with the `en` language preference and to `/zh/book_list/*` for users with `zh`. Requires Gatsby's `createPages` API and the `createRedirect` action.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/cloud/working-with-redirects-and-rewrites.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ncreateRedirect({\n  fromPath: `/book_list`,\n  toPath: `/en/book_list`,\n  conditions: {\n    language: [`en`],\n  },\n})\n\ncreateRedirect({\n  fromPath: `/book_list/*`,\n  toPath: `/zh/book_list/*`,\n  conditions: {\n    language: [`zh`],\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using gatsby-plugin-image with Constrained Layout\nDESCRIPTION: This code snippet demonstrates how to use gatsby-plugin-image with a constrained layout to display images sourced from Sanity in a Gatsby component.  It fetches image data from Sanity using a GraphQL query and renders it using the GatsbyImage component. The image will resize to fit its container.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/sourcing-from-sanity.md#_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\nimport React from \"react\"\nimport { GatsbyImage } from \"gatsby-plugin-image\"\n\nconst Person = ({ data }) => (\n  <article>\n    <h2>{data.sanityPerson.name}</h2>\n    <GatsbyImage image={data.sanityPerson.profileImage.asset.gatsbyImageData} />\n  </article>\n)\n\nexport default Person\n\nexport const query = graphql`\n  query PersonQuery {\n    sanityPerson {\n      name\n      profileImage {\n        asset {\n          gatsbyImageData(placeholder: BLURRED)\n        }\n      }\n    }\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: Implementing nodeBuilder Function\nDESCRIPTION: Implementation of the `nodeBuilder` function, generating a unique ID, filling out required node fields, adding arbitrary data, and calling `createNode`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/creating-a-source-plugin/part-2/index.mdx#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n// Rest of the file\n\nexport function nodeBuilder({ gatsbyApi, input }: INodeBuilderArgs) {\n  const id = gatsbyApi.createNodeId(`${input.type}-${input.data.id}`)\n\n  const node = {\n    ...input.data,\n    id,\n    _id: input.data.id,\n    parent: null,\n    children: [],\n    internal: {\n      type: input.type,\n      contentDigest: gatsbyApi.createContentDigest(input.data),\n    },\n  } satisfies NodeInput\n\n  gatsbyApi.actions.createNode(node)\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Image in CSS with Webpack\nDESCRIPTION: This CSS snippet shows how to reference an image file within a CSS file. Webpack will resolve the relative path `./logo.png` and replace it with the final path from the compiled bundle. Dependencies: None.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/images-and-media/importing-assets-into-files.md#_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.Logo {\n  background-image: url(./logo.png);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring gatsby-source-hacker-news in gatsby-config.js\nDESCRIPTION: This snippet demonstrates how to add the gatsby-source-hacker-news plugin to your gatsby-config.js file.  This enables the plugin to fetch data from the Hacker News API during the build process. The plugin doesn't require any specific options.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-hacker-news/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// In your gatsby-config.js\nplugins: [`gatsby-source-hacker-news`]\n```\n\n----------------------------------------\n\nTITLE: Disable MediaItem File Node Creation in Gatsby\nDESCRIPTION: Shows how to prevent the plugin from fetching files for MediaItems when using Gatsby's Image CDN.  This is achieved by setting `createFileNodes` to `false` within the `MediaItem` type configuration.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-wordpress/docs/features/media-item-processing.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n    resolve: `gatsby-source-wordpress`,\n    options: {\n        url: process.env.WPGRAPHQL_URL,\n        type: {\n            MediaItem: { createFileNodes: false },\n        },\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Create Pages with GraphQL (Corrected)\nDESCRIPTION: This corrected code snippet shows the proper way to implement the `createPages` lifecycle method in `gatsby-node.js`. By using `await` before the `graphql` call, the function waits for the Promise to resolve before marking the lifecycle method as complete, preventing potential data errors.  This ensures that all data is fetched before building pages.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/debugging-async-lifecycles.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexports.createPages = async function ({ actions, graphql }) {\n  // highlight-next-line\n  await graphql(`\n    {\n      allMarkdownRemark {\n        edges {\n          node {\n            fields {\n              slug\n            }\n          }\n        }\n      }\n    }\n  `).then(res => {\n    res.data.allMarkdownRemark.edges.forEach(edge => {\n      const slug = edge.node.fields.slug\n      actions.createPage({\n        path: slug,\n        component: require.resolve(`./src/templates/post.js`),\n        context: { slug },\n      })\n    })\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Example JSON nodes created from YAML array\nDESCRIPTION: Shows the JSON representation of the nodes that would be created from the YAML array of objects example. Each object in the array becomes a separate node.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-yaml/README.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"character\": \"a\"\n  },\n  {\n    \"character\": \"b\"\n  },\n  {\n    \"character\": \"c\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Initializing Storybook with Webpack 5\nDESCRIPTION: This command initializes Storybook in a Gatsby project and configures it to use webpack 5, ensuring compatibility with the project's build process. It adds necessary dependencies, configuration files, and boilerplate stories.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/testing/visual-testing-with-storybook.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx sb init --builder webpack5\n```\n\n----------------------------------------\n\nTITLE: Rendering the GatsbyImage Component in JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to render the `GatsbyImage` component within the blog post template. It passes the `gatsbyImageData` object (obtained using `getImage`) and the hero image alt text as props to the component, enabling the display of the optimized hero image.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-7/index.mdx#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nreturn (\n  <Layout pageTitle={data.mdx.frontmatter.title}>\n    <p>Posted: {data.mdx.frontmatter.date}</p>\n    {/* highlight-start */}\n    <GatsbyImage\n      image={image}\n      alt={data.mdx.frontmatter.hero_image_alt}\n    />\n    {/* highlight-end */}\n    {children}\n  </Layout>\n)\n```\n\n----------------------------------------\n\nTITLE: Load Stripe.js with publishable key\nDESCRIPTION: This code snippet demonstrates how to load the Stripe.js library using the `@stripe/stripe-js` package. It uses a promise to ensure that Stripe.js is only loaded once.  Replace `<YOUR STRIPE PUBLISHABLE KEY>` with your actual Stripe publishable key.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/ecommerce-tutorial/index.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { loadStripe } from \"@stripe/stripe-js\"\n\nlet stripePromise\nconst getStripe = () => {\n  if (!stripePromise) {\n    stripePromise = loadStripe(\"<YOUR STRIPE PUBLISHABLE KEY>\")\n  }\n  return stripePromise\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Gatsby Prismic GraphQL Source Plugin\nDESCRIPTION: This JavaScript code snippet configures the `gatsby-source-prismic-graphql` plugin within the `gatsby-config.js` file.  The `repositoryName` option specifies the Prismic repository to fetch data from.  It allows Gatsby to connect to the Prismic CMS and access its content through GraphQL.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/prismic-source-graphql-tutorial.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  resolve: `gatsby-source-prismic-graphql`,\n  options: {\n    repositoryName: 'gatsby-blog-scratch'\n  }\n},\n```\n\n----------------------------------------\n\nTITLE: Importing DiscussionEmbed Component in JavaScript\nDESCRIPTION: This snippet shows how to import the `DiscussionEmbed` component from the `disqus-react` package in a Gatsby blog post template. This component is then used to render the Disqus comment section.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/adding-common-features/adding-comments.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from \"react\"\nimport { graphql } from \"gatsby\"\n// highlight-next-line\nimport { DiscussionEmbed } from \"disqus-react\"\n```\n\n----------------------------------------\n\nTITLE: Gatsby Source WordPress Plugin Config Demo\nDESCRIPTION: This code snippet shows the basic configuration for the `gatsby-source-wordpress` plugin in the `gatsby-config.js` file. It specifies the GraphQL endpoint of the WordPress instance.  The url is set to `https://demo.wpgraphql.com/graphql`\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-wordpress/docs/tutorials/creating-a-new-site-from-a-starter.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n      resolve: `gatsby-source-wordpress`,\n      options: {\n        url: `https://demo.wpgraphql.com/graphql`,\n      },\n    }\n```\n\n----------------------------------------\n\nTITLE: Securing Routes with PrivateRoute Component in Gatsby\nDESCRIPTION: This snippet shows how to implement a `PrivateRoute` component to protect client-side routes based on user authentication status. It imports the `PrivateRoute` component and wraps the `/profile` and `/details` routes within the `<Router>` component. This ensures that only authenticated users can access these routes, redirecting unauthenticated users to the `/login` page.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/routing/client-only-routes-and-user-authentication.md#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\nimport React from \"react\"\nimport { Router } from \"@reach/router\"\nimport Layout from \"../components/Layout\"\nimport Profile from \"../components/Profile\"\nimport Details from \"../components/Details\"\nimport Login from \"../components/Login\"\nimport Default from \"../components/Default\"\nimport PrivateRoute from \"../components/PrivateRoute\" // highlight-line\n\nconst App = () => {\n  return (\n    <Layout>\n      <Router basepath=\"/app\">\n        // highlight-start\n        <PrivateRoute path=\"/profile\" component={Profile} />\n        <PrivateRoute path=\"/details\" component={Details} />\n        // highlight-end\n        <Login path=\"/login\" />\n        <Default path=\"/\" />\n      </Router>\n    </Layout>\n  )\n}\n\nexport default App\n```\n\n----------------------------------------\n\nTITLE: GraphQL query for events\nDESCRIPTION: GraphQL query to retrieve data from all event nodes\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/building-a-theme.md#_snippet_11\n\nLANGUAGE: GraphQL\nCODE:\n```\nquery MyQuery {\n  allEvent {\n    edges {\n      node {\n        name\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Install Gatsby Transformer Plugin\nDESCRIPTION: This command installs the gatsby-transformer-javascript-static-exports plugin as a dependency for your Gatsby project. It is a necessary step to use the plugin for extracting data from JavaScript files.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-javascript-static-exports/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install gatsby-transformer-javascript-static-exports\n```\n\n----------------------------------------\n\nTITLE: Query MDX data (title and date)\nDESCRIPTION: This GraphQL query fetches the `title` and formatted `date` from the `frontmatter` of all MDX nodes. It uses the `allMdx` field to retrieve data. The date is formatted using Moment.js format string.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-5/index.mdx#_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\nquery MyQuery {\n  allMdx {\n    nodes {\n      frontmatter {\n        date(formatString: \"MMMM D, YYYY\")\n        title\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query for Date Formatting\nDESCRIPTION: This GraphQL query demonstrates formatting a date using the `formatString` argument. This allows you to format dates directly within the query, avoiding the need for client-side date formatting libraries. This specifies a desired date format, MMMM Do, YYYY\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/conceptual/graphql-concepts.md#_snippet_3\n\nLANGUAGE: GraphQL\nCODE:\n```\n{\n  date(formatString: \"MMMM Do, YYYY\")\n}\n```\n\n----------------------------------------\n\nTITLE: Client Search Component with JS-Search\nDESCRIPTION: This snippet creates the `ClientSearch` component that uses JS-Search library for client-side search functionality. It manages component state for search queries, search results, and various search engine configurations. It initializes and configures the JS-Search engine based on props, performs searches, and renders the results in a table.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/adding-search-with-js-search.md#_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { Component } from \"react\"\nimport * as JsSearch from \"js-search\"\n\nclass ClientSearch extends Component {\n  state = {\n    isLoading: true,\n    searchResults: [],\n    search: null,\n    isError: false,\n    indexByTitle: false,\n    indexByAuthor: false,\n    termFrequency: true,\n    removeStopWords: false,\n    searchQuery: \"\",\n    selectedStrategy: \"\",\n    selectedSanitizer: \"\",\n  }\n  /**\n   * React lifecycle method that will inject the data into the state.\n   */\n  static getDerivedStateFromProps(nextProps, prevState) {\n    if (prevState.search === null) {\n      const { engine } = nextProps\n      return {\n        indexByTitle: engine.TitleIndex,\n        indexByAuthor: engine.AuthorIndex,\n        termFrequency: engine.SearchByTerm,\n        selectedSanitizer: engine.searchSanitizer,\n        selectedStrategy: engine.indexStrategy,\n      }\n    }\n    return null\n  }\n  async componentDidMount() {\n    this.rebuildIndex()\n  }\n\n  /**\n   * rebuilds the overall index based on the options\n   */\n  rebuildIndex = () => {\n    const {\n      selectedStrategy,\n      selectedSanitizer,\n      removeStopWords,\n      termFrequency,\n      indexByTitle,\n      indexByAuthor,\n    } = this.state\n    const { books } = this.props\n\n    const dataToSearch = new JsSearch.Search(\"isbn\")\n\n    if (removeStopWords) {\n      dataToSearch.tokenizer = new JsSearch.StopWordsTokenizer(\n        dataToSearch.tokenizer\n      )\n    }\n    /**\n     * defines an indexing strategy for the data\n     * read more about it here https://github.com/bvaughn/js-search#configuring-the-index-strategy\n     */\n    if (selectedStrategy === \"All\") {\n      dataToSearch.indexStrategy = new JsSearch.AllSubstringsIndexStrategy()\n    }\n    if (selectedStrategy === \"Exact match\") {\n      dataToSearch.indexStrategy = new JsSearch.ExactWordIndexStrategy()\n    }\n    if (selectedStrategy === \"Prefix match\") {\n      dataToSearch.indexStrategy = new JsSearch.PrefixIndexStrategy()\n    }\n\n    /**\n     * defines the sanitizer for the search\n     * to prevent some of the words from being excluded\n     */\n    selectedSanitizer === \"Case Sensitive\"\n      ? (dataToSearch.sanitizer = new JsSearch.CaseSensitiveSanitizer())\n      : (dataToSearch.sanitizer = new JsSearch.LowerCaseSanitizer())\n    termFrequency === true\n      ? (dataToSearch.searchIndex = new JsSearch.TfIdfSearchIndex(\"isbn\"))\n      : (dataToSearch.searchIndex = new JsSearch.UnorderedSearchIndex())\n\n    // sets the index attribute for the data\n    if (indexByTitle) {\n      dataToSearch.addIndex(\"title\")\n    }\n    // sets the index attribute for the data\n    if (indexByAuthor) {\n      dataToSearch.addIndex(\"author\")\n    }\n\n    dataToSearch.addDocuments(books) // adds the data to be searched\n\n    this.setState({ search: dataToSearch, isLoading: false })\n  }\n  /**\n   * handles the input change and perform a search with js-search\n   * in which the results will be added to the state\n   */\n  searchData = e => {\n    const { search } = this.state\n    const queryResult = search.search(e.target.value)\n    this.setState({ searchQuery: e.target.value, searchResults: queryResult })\n  }\n  handleSubmit = e => {\n    e.preventDefault()\n  }\n  render() {\n    const { searchResults, searchQuery } = this.state\n    const { books } = this.props\n    const queryResults = searchQuery === \"\" ? books : searchResults\n    return (\n      <div>\n        <div style={{ margin: \"0 auto\" }}>\n          <form onSubmit={this.handleSubmit}>\n            <div style={{ margin: \"0 auto\" }}>\n              <label htmlFor=\"Search\" style={{ paddingRight: \"10px\" }}>\n                Enter your search here\n              </label>\n              <input\n                id=\"Search\"\n                value={searchQuery}\n                onChange={this.searchData}\n                placeholder=\"Enter your search here\"\n                style={{ margin: \"0 auto\", width: \"400px\" }}\n              />\n            </div>\n          </form>\n          <div>\n            Number of items:\n            {queryResults.length}\n            <table\n              style={{\n                width: \"100%\",\n                borderCollapse: \"collapse\",\n                borderRadius: \"4px\",\n                border: \"1px solid #d3d3d3\",\n              }}\n            >\n              <thead style={{ border: \"1px solid #808080\" }}>\n                <tr>\n                  <th\n                    style={{\n                      textAlign: \"left\",\n                      padding: \"5px\",\n                      fontSize: \"14px\",\n                      fontWeight: 600,\n                      borderBottom: \"2px solid #d3d3d3\",\n                      cursor: \"pointer\",\n                    }}\n                  >\n                    Book ISBN\n                  </th>\n                  <th\n                    style={{\n                      textAlign: \"left\",\n                      padding: \"5px\",\n                      fontSize: \"14px\",\n                      fontWeight: 600,\n                      borderBottom: \"2px solid #d3d3d3\",\n                      cursor: \"pointer\",\n                    }}\n                  >\n                    Book Title\n                  </th>\n                  <th\n                    style={{\n                      textAlign: \"left\",\n                      padding: \"5px\",\n                      fontSize: \"14px\",\n                      fontWeight: 600,\n                      borderBottom: \"2px solid #d3d3d3\",\n                      cursor: \"pointer\",\n                    }}\n                  >\n                    Book Author\n                  </th>\n                </tr>\n              </thead>\n              <tbody>\n                {queryResults.map(item => {\n                  return (\n                    <tr key={`row_${item.isbn}`}>\n                      <td\n                        style={{\n                          fontSize: \"14px\",\n                          border: \"1px solid #d3d3d3\",\n                        }}\n                      >\n                        {item.isbn}\n                      </td>\n                      <td\n                        style={{\n                          fontSize: \"14px\",\n                          border: \"1px solid #d3d3d3\",\n                        }}\n                      >\n                        {item.title}\n                      </td>\n                      <td\n                        style={{\n                          fontSize: \"14px\",\n                          border: \"1px solid #d3d3d3\",\n                        }}\n                      >\n                        {item.author}\n                      </td>\n                    </tr>\n                  )\n                })}\n              </tbody>\n            </table>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\nexport default ClientSearch\n```\n\n----------------------------------------\n\nTITLE: Post Template Component\nDESCRIPTION: This React component is a template for displaying a single post fetched from Prismic.  It receives the post data via props and renders the title and content. The dangerouslySetInnerHTML is used to render the HTML content fetched from Prismic. A GraphQL query is used to fetch the data for a specific post by UID.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/sourcing-data/sourcing-from-prismic.md#_snippet_6\n\nLANGUAGE: JSX\nCODE:\n```\nimport React from \"react\"\nimport { graphql } from \"gatsby\"\n\nconst Post = ({ data }) => {\n  if (!data) return null\n  const post = data.prismicPost\n\n  return (\n    <React.Fragment>\n      <h1>{post.data.title.text}</h1>\n      <div dangerouslySetInnerHTML={{ __html: post.data.content.html }} />\n    </React.Fragment>\n  )\n}\n\nexport default Post\n\nexport const pageQuery = graphql`\n  query PostBySlug($uid: String!) {\n    prismicPost(uid: { eq: $uid }) {\n      uid\n      data {\n        title {\n          text\n        }\n        content {\n          html\n        }\n      }\n    }\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: Query All Contentful CaseStudy Filtered by Locale GraphQL\nDESCRIPTION: This GraphQL query retrieves all `ContentfulCaseStudy` nodes, filtered by the `node_locale` field to only include entries in the 'en-US' locale. It includes the `id`, `slug`, `title`, `subtitle`, and `body` fields.  The `node_locale` filter is used to prevent duplicate entries caused by multiple localizations.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-contentful/README.md#_snippet_9\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  allContentfulCaseStudy(filter: { node_locale: { eq: \"en-US\" } }) {\n    edges {\n      node {\n        id\n        slug\n        title\n        subtitle\n        body {\n          body\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Product with HTML in JSX\nDESCRIPTION: This code snippet demonstrates the basic HTML structure for defining a product using JSX. It includes the product name, price, and a short description.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/adding-a-shopping-cart-with-snipcart.md#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<section>\n  <h2>Silver Stacking Ring</h2>\n  <p>$19.99</p>\n  <p>Wear one or seventeen! These rings are fun to mix and match.</p>\n</section>\n```\n\n----------------------------------------\n\nTITLE: Blog Post Template (JSX)\nDESCRIPTION: This snippet defines a React component used as a template for individual blog posts. It imports necessary dependencies from React and Gatsby, including the `Layout` component and the `graphql` function.  It fetches blog post data via a GraphQL query filtered by slug, then renders the post's title and content within a `Layout` component.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/wordpress-source-plugin-tutorial.md#_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\"\nimport Layout from \"../components/layout\"\nimport { graphql } from \"gatsby\"\n\nexport default function BlogPost({ data }) {\n  const post = data.allWordpressPost.edges[0].node\n  console.log(post)\n  return (\n    <Layout>\n      <div>\n        <h1>{post.title}</h1>\n        <div dangerouslySetInnerHTML={{ __html: post.content }} />\n      </div>\n    </Layout>\n  )\n}\nexport const query = graphql`\n  query($slug: String!) {\n    allWordpressPost(filter: { slug: { eq: $slug } }) {\n      edges {\n        node {\n          title\n          content\n        }\n      }\n    }\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query (Current Syntax)\nDESCRIPTION: This GraphQL query demonstrates the current syntax for sorting data. It retrieves all MarkdownRemark nodes and sorts them by the `date` field within the `frontmatter` object in descending order.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/v4.23/index.md#_snippet_2\n\nLANGUAGE: GraphQL\nCODE:\n```\n{\n  allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n    nodes {\n      ...fields\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Blog Pages in Gatsby using createPages API (JS)\nDESCRIPTION: This code snippet demonstrates how to dynamically generate blog post pages in Gatsby using the `createPages` API. It fetches blog posts from ButterCMS using a GraphQL query, then iterates through the results to create individual pages using the provided `blogPost` template. Requires `path` module.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/sourcing-from-buttercms.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst path = require(`path`)\n\nexports.createPages = async ({ graphql, actions }) => {\n  const { createPage } = actions\n\n  const blogPost = path.resolve(`./src/templates/blog-post.js`)\n\n  let posts\n  try {\n    posts = await graphql(`\n      {\n        allButterPost {\n          edges {\n            node {\n              id\n              seo_title\n              slug\n              categories {\n                name\n                slug\n              }\n              author {\n                first_name\n                last_name\n                email\n                slug\n                profile_image\n              }\n              body\n            }\n          }\n        }\n      }\n    `)\n  } catch (error) {\n    console.log(`Error Running Querying Posts`, error)\n  }\n\n  posts = posts.data.allButterPost.edges;\n\n  posts.forEach((post, index) => {\n    const previous = index === posts.length - 1 ? null : posts[index + 1].node\n    const next = index === 0 ? null : posts[index - 1].node\n}\n\n```\n\n----------------------------------------\n\nTITLE: Gatsby Header Component Using Site Metadata\nDESCRIPTION: This React component implements a header that displays the site title and social media links, fetching the data from a custom hook named `useSiteMetadata`. The hook retrieves the site title and social links from `gatsby-config.js`.  The component uses `Link` from `gatsby` for internal navigation and standard `a` tags for external links to social media platforms.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/plugins-and-themes/theme-conventions.md#_snippet_4\n\nLANGUAGE: JSX\nCODE:\n```\nimport React from \"react\"\nimport { Link } from \"gatsby\"\n\nimport useSiteMetadata from \"../hooks/use-site-metadata\"\n\nexport default function Header() {\n  const { title, social } = useSiteMetadata()\n\n  return (\n    <header>\n      <Link to=\"/\">{title}</Link>\n      <nav>\n        <a href={`https://twitter.com/${social.twitter}`}>Twitter</a>\n        <a href={`https://github.com/${social.github}`}>GitHub</a>\n        <a href={`https://instagram.com/${social.instagram}`}>Instagram</a>\n      </nav>\n    </header>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Install Medium Plugin\nDESCRIPTION: This command installs the gatsby-source-medium plugin as a project dependency.  It uses npm to fetch the package from the npm registry and add it to the node_modules directory, updating the package.json file.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-medium/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install gatsby-source-medium\n```\n\n----------------------------------------\n\nTITLE: Configuring gatsby-plugin-styled-components\nDESCRIPTION: This code snippet demonstrates how to configure the `gatsby-plugin-styled-components` plugin within the `gatsby-config.js` file.  It shows how to add the plugin to the `plugins` array and how to pass options to the plugin. The `resolve` property specifies the name of the plugin, and the `options` property allows for customization.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-styled-components/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-styled-components`,\n      options: {\n        // Add any options here\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Create remark-headings-plugin.mjs\nDESCRIPTION: Defines a remark plugin that extracts headings from MDX content.  It uses `unist-util-visit` to traverse the MDX syntax tree and `mdast-util-to-string` to get the text content of each heading. It stores the heading data in the MDX file's metadata.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-mdx/README.md#_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { visit } from \"unist-util-visit\"\nimport { toString } from \"mdast-util-to-string\"\n\nconst transformer = (tree, file) => {\n  let headings = []\n\n  visit(tree, `heading`, heading => {\n    headings.push({\n      value: toString(heading),\n      depth: heading.depth,\n    })\n  })\n\n  const mdxFile = file\n  if (!mdxFile.data.meta) {\n    mdxFile.data.meta = {}\n  }\n\n  mdxFile.data.meta.headings = headings\n}\n\nconst remarkHeadingsPlugin = () => transformer\n\nexport default remarkHeadingsPlugin\n```\n\n----------------------------------------\n\nTITLE: Basic Contact Form Structure in JSX\nDESCRIPTION: This is a basic contact form implemented using JSX, including fields for name, email, subject, and message. The form's `method` is set to `post` and the `action` attribute is set to `#`, indicating that the form will submit data to the same page (which needs to be replaced with a valid endpoint).\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/building-a-contact-form.md#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<form method=\"post\" action=\"#\">\n  <label>\n    Name\n    <input type=\"text\" name=\"name\" id=\"name\" />\n  </label>\n  <label>\n    Email\n    <input type=\"email\" name=\"email\" id=\"email\" />\n  </label>\n  <label>\n    Subject\n    <input type=\"text\" name=\"subject\" id=\"subject\" />\n  </label>\n  <label>\n    Message\n    <textarea name=\"message\" id=\"message\" rows=\"5\" />\n  </label>\n  <button type=\"submit\">Send</button>\n  <input type=\"reset\" value=\"Clear\" />\n</form>\n```\n\n----------------------------------------\n\nTITLE: Configuring gatsby-transformer-yaml in gatsby-config.js\nDESCRIPTION: Demonstrates how to configure the `gatsby-transformer-yaml` plugin in `gatsby-config.js` along with `gatsby-source-filesystem`. It shows how to specify the path to the YAML data files.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-yaml/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  plugins: [\n    `gatsby-transformer-yaml`,\n    {\n      resolve: `gatsby-source-filesystem`,\n      options: {\n        path: `./src/data/`,\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Run Gatsby Image Codemods\nDESCRIPTION: Executes the Gatsby codemods to migrate from gatsby-image to gatsby-plugin-image. This command automates the process of updating GraphQL queries and components to use the new image plugin.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-image/README.md#_snippet_9\n\nLANGUAGE: Shell\nCODE:\n```\nnpx gatsby-codemods gatsby-plugin-image\n```\n\n----------------------------------------\n\nTITLE: Configuring gatsby-remark-images in gatsby-config.js\nDESCRIPTION: Configures the gatsby-remark-images plugin within the gatsby-config.js file. This involves adding the plugin to the plugins array of gatsby-transformer-remark, and setting options such as maxWidth to control image processing.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-images/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// In your gatsby-config.js\nplugins: [\n  `gatsby-plugin-sharp`,\n  {\n    resolve: `gatsby-transformer-remark`,\n    options: {\n      plugins: [\n        {\n          resolve: `gatsby-remark-images`,\n          options: {\n            // It's important to specify the maxWidth (in pixels) of\n            // the content container as this plugin uses this as the\n            // base for generating different widths of each image.\n            maxWidth: 590,\n          },\n        },\n      ],\n    },\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Fetching Data with GraphQL Query and TypeScript Types\nDESCRIPTION: This code snippet shows how to fetch data with a GraphQL query and define TypeScript types for the API response. It defines an `IApiResponse` interface to represent the structure of the expected data from the API, including `posts` and `authors`. It also includes type definitions for `IAuthorInput` and `IPostInput`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/creating-a-source-plugin/part-2/index.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { GatsbyNode } from \"gatsby\"\nimport { fetchGraphQL } from \"./utils\"\n// highlight-next-line\nimport type { IAuthorInput, IPostInput } from \"./types\"\n\nexport const sourceNodes: GatsbyNode[`sourceNodes`] = async (gatsbyApi) => {\n  // highlight-start\n  interface IApiResponse {\n    data: {\n      posts: Array<IPostInput>\n      authors: Array<IAuthorInput>\n    }\n    errors?: Array<{ message: string; locations: Array<unknown> }>\n  }\n  // highlight-end\n\n  // highlight-next-line\n  const { data } = await fetchGraphQL<IApiResponse>(\n    `http://localhost:4000/graphql`,\n    // highlight-start\n    `query FetchApi {\n      posts {\n        id\n        slug\n        title\n        image {\n          url\n          alt\n          width\n          height\n        }\n        author\n      }\n      authors {\n        id\n        name\n      }\n    }\n    `\n    // highlight-end\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages\nDESCRIPTION: This command installs the necessary npm packages for integrating Prismic CMS with a Gatsby project. It includes `gatsby-source-prismic-graphql` for fetching data from Prismic via GraphQL, `prismic-javascript` for interacting with the Prismic API, and `prismic-reactjs` for rendering Prismic content in React components.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/prismic-source-graphql-tutorial.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install gatsby-source-prismic-graphql prismic-javascript prismic-reactjs\n```\n\n----------------------------------------\n\nTITLE: Create Schema Customization with Markdown Field and Args\nDESCRIPTION: This code demonstrates how to pass arguments to the `md` field extension. Specifically, it sets the `sanitize` option to `false` to disable HTML sanitization during the Markdown to HTML transformation.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/graphql-data-layer/schema-customization.md#_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nexports.createSchemaCustomization = ({ actions }) => {\n  actions.createTypes(`\n    type BlogPost implements Node {\n      content: String @md(sanitize: false)\n    }\n  `)\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Data at Runtime with `fetch` API - JSX\nDESCRIPTION: This code snippet demonstrates how to use the `fetch` API within a Gatsby page component to retrieve data from the GitHub API at runtime.  It utilizes React's `useState` and `useEffect` hooks to manage the data and update the component when the data is fetched. The `useEffect` hook triggers the data fetching when the component mounts, and the `useState` hook stores and updates the star count. The response is parsed as JSON.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/conceptual/data-fetching.md#_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState, useEffect } from \"react\" // highlight-line\nimport { graphql, useStaticQuery } from \"gatsby\"\n\nconst IndexPage = () => {\n  // Build Time Data Fetching\n  const gatsbyRepoData = useStaticQuery(graphql`\n    query {\n      github {\n        repository(name: \"gatsby\", owner: \"gatsbyjs\") {\n          id\n          nameWithOwner\n          url\n        }\n      }\n    }\n  `)\n  // Client-side Runtime Data Fetching\n  // highlight-start\n  const [starsCount, setStarsCount] = useState(0)\n  useEffect(() => {\n    // get data from GitHub api\n    fetch(`https://api.github.com/repos/gatsbyjs/gatsby`)\n      .then(response => response.json()) // parse JSON from request\n      .then(resultData => {\n        setStarsCount(resultData.stargazers_count)\n      }) // set data for the number of stars\n  }, [])\n  // highlight-end\n\n  return (\n    <section>\n      <p>\n        Build Time Data: Gatsby repo{` `}\n        <a href={gatsbyRepoData.github.repository.url}>\n          {gatsbyRepoData.github.repository.nameWithOwner}\n        </a>\n      </p>\n      <p>Runtime Data: Star count for the Gatsby repo {starsCount}</p> // highlight-line\n    </section>\n  )\n}\n\nexport default IndexPage\n```\n\n----------------------------------------\n\nTITLE: Mapping mediatype configuration\nDESCRIPTION: Configures a mapping for a field in a MongoDB collection to a specific media type, enabling Gatsby's transformer plugins to automatically transform the data. The example maps the `body` field in the `documents` collection to `text/markdown`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-mongodb/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-source-mongodb`,\n      options: {\n        dbName: `local`,\n        collection: `documents`,\n        // highlight-start\n        map: {\n          documents: { body: `text/markdown` },\n        },\n        // highlight-end\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Service Worker Code\nDESCRIPTION: This Javascript code shows a custom service worker implementation that shows a notification after 15 seconds and registers a custom navigation route. It requires the Workbox library to be available in the service worker context.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-offline/README.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n// show a notification after 15 seconds (the notification\n// permission must be granted first)\nsetTimeout(() => {\n  self.registration.showNotification(\"Hello, world!\")\n}, 15000)\n\n// register a custom navigation route\nconst customRoute = new workbox.routing.NavigationRoute(({ event }) => {\n  // ...\n})\nworkbox.routing.registerRoute(customRoute)\n```\n\n----------------------------------------\n\nTITLE: Loading environment variables in gatsby-config.js (dotenv)\nDESCRIPTION: Loads environment variables from a .env file into Node.js, making them available in gatsby-*.js files and functions. It uses the dotenv package and sets the path to the environment file based on the NODE_ENV environment variable. The path is constructed based on the current environment.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/local-development/environment-variables.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(\"dotenv\").config({\n  path: `.env.${process.env.NODE_ENV}`,\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring the gatsby-source-etsy plugin in gatsby-config.js\nDESCRIPTION: This code snippet shows how to configure the `gatsby-source-etsy` plugin in your `gatsby-config.js` file.  You need to provide your Etsy API key and shop ID (or shop name) as options. The 'language' option is optional. The API key is essential for authenticating with the Etsy API, and the shop ID or name specifies the Etsy shop to fetch data from.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/sourcing-from-etsy.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nplugins: [\n  {\n    resolve: \"gatsby-source-etsy\",\n    options: {\n      // highlight-start\n      api_key: \"your api key here\",\n      shop_id: \"your shop id or shop name here\",\n      // highlight-end\n      language: \"en\", // optional\n    },\n  },\n],\n```\n\n----------------------------------------\n\nTITLE: Update Jest Config for TypeScript (jest.config.js)\nDESCRIPTION: This config snippet updates the `transform` section in `jest.config.js` to include `.ts` and `.tsx` files. This ensures that Jest processes TypeScript files using the `jest-preprocess.js` file, enabling Babel to transpile them before running tests.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/testing/unit-testing.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n    \"^.+\\\\.[jt]sx?$\": \"<rootDir>/jest-preprocess.js\",\n```\n\n----------------------------------------\n\nTITLE: Configuring Gatsby Prismic Plugin\nDESCRIPTION: This code snippet configures the 'gatsby-source-prismic' plugin in 'gatsby-config.js'.  It includes the 'repositoryName', 'accessToken' (fetched from environment variables), a 'linkResolver' function to generate URLs for Prismic content, and a 'schemas' object to specify the JSON schemas for custom types.  It depends on 'dotenv' being configured to load the API key.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/sourcing-data/sourcing-from-prismic.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"dotenv\").config({\n  path: `.env.${process.env.NODE_ENV}`,\n})\n\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-source-prismic`,\n      options: {\n        repositoryName: `your-repository-name`,\n        accessToken: `${process.env.API_KEY}`,\n        linkResolver: ({ node, key, value }) => post => `/${post.uid}`,\n        schemas: {\n          post: require(\"./custom_types/post.json\"),\n        },\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Tech JSON Data\nDESCRIPTION: This JSON snippet represents technology data, containing information about a technology's name, icon, color, and label. This data is linked to the experience data using node mappings in Gatsby.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/config-files/gatsby-config.md#_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"name\": \"REACT\",\n    \"icon\": \"facebook\",\n    \"color\": \"teal\",\n    \"label\": \"React\"\n  },\n  {\n    \"name\": \"NODE\",\n    \"icon\": \"server\",\n    \"color\": \"green\",\n    \"label\": \"NodeJS\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Using shorthand GetServerData type\nDESCRIPTION: This code demonstrates the shorthand `GetServerData` type for typing the `getServerData` function when using an anonymous function.  It improves type safety and developer experience.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/custom-configuration/typescript.md#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const getServerData: GetServerData<ServerDataProps> = async props => {\n  // your function body\n}\n```\n\n----------------------------------------\n\nTITLE: Requiring dotenv in gatsby-config.js (JavaScript)\nDESCRIPTION: This line imports and configures the `dotenv` package in your `gatsby-config.js` file. This allows you to access environment variables defined in `.env` files using `process.env.VARIABLE_NAME`.  The path specifies the location of the env file based on the current Node environment.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/ecommerce-tutorial/index.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(\"dotenv\").config({\n  path: `.env.${process.env.NODE_ENV}`,\n})\n```\n\n----------------------------------------\n\nTITLE: Create Foreign-key Field with Custom Resolver in Gatsby\nDESCRIPTION: This snippet demonstrates creating a foreign-key field `author` on the `Frontmatter` type using a custom resolver. The resolver uses `context.nodeModel.findOne` to find the corresponding `AuthorJson` node based on the author's email.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/graphql-data-layer/schema-customization.md#_snippet_15\n\nLANGUAGE: js\nCODE:\n```\nexports.createSchemaCustomization = ({ actions, schema }) => {\n  const { createTypes } = actions\n  const typeDefs = [\n    \"type MarkdownRemark implements Node { frontmatter: Frontmatter }\",\n    schema.buildObjectType({\n      name: \"Frontmatter\",\n      fields: {\n        author: {\n          type: \"AuthorJson\",\n          resolve: (source, args, context, info) => {\n            // If you were linking by ID, you could use `getNodeById` to\n            // find the correct author:\n            //\n            // return context.nodeModel.getNodeById({\n            //   id: source.author,\n            //   type: \"AuthorJson\",\n            // })\n            //\n            // But since the example is using the author email as foreign key,\n            // you can use `nodeModel.findOne` to find the linked author node.\n            // Note: Instead of getting all nodes and then using Array.prototype.find()\n            // Use nodeModel.findOne instead where possible!\n            return context.nodeModel.findOne({\n              type: \"AuthorJson\",\n              query: {\n                filter: { email: { eq: source.author } }\n              }\n            })\n          },\n        },\n      },\n    }),\n  ]\n  createTypes(typeDefs)\n}\n```\n\n----------------------------------------\n\nTITLE: Adding CORS support with custom middleware (JS)\nDESCRIPTION: This code snippet demonstrates how to add CORS (Cross-Origin Resource Sharing) support to a Gatsby Function using custom Connect/Express middleware. It imports the `cors` middleware, runs it, and handles potential errors. The function returns a JSON response after the CORS middleware is executed. Dependencies: `cors` npm package.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/functions/middleware-and-helpers.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Cors from \"cors\"\n\nconst cors = Cors()\n\nexport default async function corsHandler(req, res) {\n  // Run Cors middleware and handle errors.\n  await new Promise((resolve, reject) => {\n    cors(req, res, result => {\n      if (result instanceof Error) {\n        reject(result)\n      }\n\n      resolve(result)\n    })\n  })\n\n  res.json(`Hi from Gatsby Functions`)\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating PrivateRoute Component from React Router to @reach/router (Diff)\nDESCRIPTION: Shows the code differences when migrating a `<PrivateRoute>` component from React Router to @reach/router. The main changes involve replacing `Redirect` and `Route` from `react-router-dom` with `navigate` and `Router` from `@reach/router`. It also adjusts the logic for handling unauthenticated users by using `navigate` for redirection.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v1-to-v2.md#_snippet_22\n\nLANGUAGE: diff\nCODE:\n```\n import * as React from 'react';\n-import { Redirect, Route } from 'react-router-dom';\n+import { Router, navigate } from '@reach/router';\n import { isAuthenticated } from '../../utils/auth';\n\n-export default function PrivateRoute({ component: Component, ...rest }) {\n-  return (\n-    <Route\n-      {...rest}\n-      render={props =>\n-        !isAuthenticated() ? (\n-          // If we‚Äôre not logged in, redirect to the home page.\n-          <Redirect to={{ pathname: '/login' }} />\n-        ) : (\n-          <Component {...props} />\n-        )\n-      }\n-    />\n-  );\n-}\n+export default function PrivateRoute({ component: Component, ...rest }) {\n+  if (!isAuthenticated() && window.location.pathname !== `/login`) {\n+    // If we‚Äôre not logged in, redirect to the home page.\n+    navigate(`/app/login`);\n+    return null;\n+  }\n+\n+  return (\n+    <Router>\n+      <Component {...rest} />\n+    </Router>\n+  );\n+};\n```\n\n----------------------------------------\n\nTITLE: Handling Localized 404 Pages in gatsby-node.js (JavaScript)\nDESCRIPTION: This code snippet modifies the onCreatePage API in gatsby-node.js to handle localized 404 pages. It checks if a page path matches the format '/[language-code]/404/'. If it does, it updates the page's matchPath property to match all paths with that language code, effectively routing non-existent pages to the corresponding localized 404 page. It requires the 'actions' object from Gatsby.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/creating-prefixed-404-pages-for-different-languages.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nexports.onCreatePage = async ({ page, actions }) => {\n  const { createPage, deletePage } = actions\n\n  // Check if the page is a localized 404\n  if (page.path.match(/^\\/[a-z]{2}\\/404\\/$/)) {\n    const oldPage = { ...page }\n\n    // Get the language code from the path, and match all paths\n    // starting with this code (apart from other valid paths)\n    const langCode = page.path.split(`/`)[1]\n    page.matchPath = `/${langCode}/*`\n\n    // Recreate the modified page\n    deletePage(oldPage)\n    createPage(page)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Query Event Data in Template (events.js)\nDESCRIPTION: This snippet refactors the 'EventsTemplate' component to include a static query for events data using 'useStaticQuery'. The GraphQL query retrieves all events, sorted by 'startDate' in ascending order, fetching 'id', 'name', 'startDate', 'endDate', 'location', 'url', and 'slug' fields. The queried event nodes are then stored in the 'events' variable.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/building-a-theme.md#_snippet_26\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\"\nimport { graphql, useStaticQuery } from \"gatsby\"\n\n// highlight-start\nconst EventsTemplate = () => {\n  const data = useStaticQuery(graphql`\n    query {\n      allEvent(sort: { startDate: ASC }) {\n        nodes {\n          id\n          name\n          startDate\n          endDate\n          location\n          url\n          slug\n        }\n      }\n    }\n  `)\n\n  const events = data.allEvent.nodes\n\n  return <p>TODO: Build the events page template</p>\n}\n// highlight-end\n\nexport default EventsTemplate\n```\n\n----------------------------------------\n\nTITLE: Querying Component Metadata with GraphQL\nDESCRIPTION: This GraphQL query retrieves component metadata extracted by the gatsby-transformer-react-docgen plugin. It fetches the display name, description, and props of each component.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-react-docgen/README.md#_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  allComponentMetadata {\n    edges {\n      node {\n        displayName\n        description\n        props {\n          name\n          type\n          required\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Metatags in Gatsby Head (JSX)\nDESCRIPTION: This example demonstrates how to include multiple meta tags within the `Head` function using React Fragments (`<>`). It sets both the title and the description of the page.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/built-in-components/gatsby-head.md#_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\nexport const Head = () => (\n  <>\n    <title>Hello World</title>\n    <meta name=\"description\" content=\"Hello World\" />\n  </>\n)\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query for YAML data\nDESCRIPTION: Example GraphQL query to fetch the `character` field from all nodes of type `LettersYaml`. Demonstrates how to query data transformed from YAML files.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-yaml/README.md#_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  allLettersYaml {\n    edges {\n      node {\n        character\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling User Stylesheets with a Stable Class Name\nDESCRIPTION: This JSX code demonstrates how to add a stable CSS class name (e.g., `container`) to a Styled Component.  This allows end users to use user stylesheets to override the default styles for accessibility or personal preference.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/styling/styled-components.md#_snippet_5\n\nLANGUAGE: JSX\nCODE:\n```\nimport React from \"react\"\nimport styled from \"styled-components\"\n\nconst Section = styled.section`\n  margin: 3rem auto;\n  max-width: 600px;\n`\n\nexport default function Container({ children }) {\n  return <Section className={`container`}>{children}</Section>\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Blocks in gatsby-config.js (JavaScript)\nDESCRIPTION: Demonstrates how to configure the gatsby-remark-custom-blocks plugin within the gatsby-config.js file. It showcases defining custom blocks with specific classes and title requirements.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-custom-blocks/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nplugins: [\n  {\n    resolve: `gatsby-transformer-remark`,\n    options: {\n      plugins: [\n        {\n          resolve: \"gatsby-remark-custom-blocks\",\n          options: {\n            blocks: {\n              danger: {\n                classes: \"danger\",\n              },\n              info: {\n                classes: \"info\",\n                title: \"optional\",\n              },\n            },\n          },\n        },\n      ],\n    },\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Styling MDX Content - JavaScript\nDESCRIPTION: This code demonstrates how to style MDX elements by adding a `styles` object to your Theme UI configuration. The keys in the `styles` object correspond to HTML elements, and the values are style objects that define the styles for those elements.  This allows you to style MDX content without writing global CSS.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/styling/theme-ui.md#_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default {\n  // base theme values...\n  styles: {\n    // the keys used here reference elements in MDX\n    h1: {\n      // the style object for each element\n      // can reference other values in the theme\n      fontFamily: \"heading\",\n      fontWeight: \"heading\",\n      lineHeight: \"heading\",\n      marginTop: 0,\n      marginBottom: 3,\n    },\n    a: {\n      color: \"primary\",\n      \":hover, :focus\": {\n        color: \"secondary\",\n      },\n    },\n    // more styles can be added as needed\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Using Image Data with GatsbyImage - JSX\nDESCRIPTION: This JSX snippet shows how to use the image data generated by the getExampleImageData function with the GatsbyImage component.  It assumes that image data is available at runtime from an API.  The image object contains url, width, and height properties.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/plugins-and-themes/adding-gatsby-image-support.md#_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n// This might come from an API at runtime\nconst image = {\n  url: \"kitten.jpg\",\n  width: 800,\n  height: 600,\n}\nconst imageData = getExampleImageData({ image, layout: \"fixed\", width: 400 })\nreturn <GatsbyImage image={imageData} alt=\"Kitten\" />\n```\n\n----------------------------------------\n\nTITLE: Limiting Data Fetched by Type\nDESCRIPTION: This snippet demonstrates limiting the amount of data fetched from WordPress for each content type using the `type.[typename].limit` option. It shows how to apply a limit to all types using `__all` or to specific types like `Post` and `Page`. The NODE_ENV check applies the limit only in development.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-wordpress/docs/tutorials/creating-a-new-site-from-a-starter.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n      resolve: `gatsby-source-wordpress`,\n      options: {\n        url: `https://demo.wpgraphql.com/graphql`,\n        type: {\n            __all: {\n                limit: process.env.NODE_ENV === `development` ? 50 : null\n            }\n        }\n      },\n    }\n```\n\n----------------------------------------\n\nTITLE: Configure Gatsby Plugins\nDESCRIPTION: This code snippet demonstrates how to configure gatsby-transformer-sharp, gatsby-plugin-sharp, and gatsby-source-filesystem in gatsby-config.js. It configures gatsby-source-filesystem to look in the src/data/ directory.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/built-in-components/gatsby-image.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  plugins: [\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-sharp`,\n    {\n      resolve: `gatsby-source-filesystem`,\n      options: {\n        path: `${__dirname}/src/data/`,\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Extend MDX Node with slug field in gatsby-node.mjs\nDESCRIPTION: Extends the MDX node in Gatsby's GraphQL schema with a `slug` field using the `@sindresorhus/slugify` package. This field generates a URL-friendly slug from the MDX frontmatter title.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-mdx/README.md#_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport slugify from \"@sindresorhus/slugify\"\n\nexport const onCreateNode = ({ node, actions }) => {\n  const { createNodeField } = actions\n  if (node.internal.type === `Mdx`) {\n    createNodeField({\n      node,\n      name: `slug`,\n      value: `/${slugify(node.frontmatter.title)}`\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Add gatsby-plugin-offline to gatsby-config.js\nDESCRIPTION: Adds the gatsby-plugin-offline plugin to the `plugins` array in `gatsby-config.js`. This enables the plugin to generate and register a service worker.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-offline/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// In your gatsby-config.js\nplugins: [`gatsby-plugin-offline`]\n```\n\n----------------------------------------\n\nTITLE: Passing Serializable Props to Client Components\nDESCRIPTION: Illustrates the correct way to pass props from server components to client components in Gatsby with Partial Hydration.  Only serializable props (e.g., strings, numbers) can be passed directly.  Functions or callbacks cannot be directly passed as props.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/performance/partial-hydration.md#_snippet_7\n\nLANGUAGE: JSX\nCODE:\n```\n// OK\nconst Page = () => <ClientComponent color=\"rebeccapurple\" />\n\n// ‚ö†Ô∏è Doesn't work\nconst Page = () => (\n  <ClientComponent onClick={() => console.log(\"Hello World\")} />\n)\n```\n\n----------------------------------------\n\nTITLE: Linking to Posts from Homepage (JSX)\nDESCRIPTION: This snippet modifies the `index.js` page to include links to individual blog posts. It imports the `Link` component from Gatsby and wraps each post's title with a `Link` component, setting the `to` prop to the post's slug.  This creates navigable links from the homepage to the dynamically generated blog post pages.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/wordpress-source-plugin-tutorial.md#_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\"\nimport { Link, graphql } from \"gatsby\" //highlight-line\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\n\nexport default function Home({ data }) {\n  return (\n    <Layout>\n      <SEO title=\"home\" />\n      <h1>My WordPress Blog</h1>\n      <h4>Posts</h4>\n      {data.allWordpressPost.edges.map(({ node }) => (\n        <div key={node.slug}>\n          //highlight-start\n          <Link to={node.slug}>\n            <p>{node.title}</p>\n          </Link>\n          //highlight-end\n          <div dangerouslySetInnerHTML={{ __html: node.excerpt }} />\n        </div>\n      ))}\n    </Layout>\n  )\n}\n\nexport const pageQuery = graphql`\n  query {\n    allWordpressPost(sort: { date: ASC }) {\n      edges {\n        node {\n          title\n          excerpt\n          slug\n        }\n      }\n    }\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query for Site Metadata\nDESCRIPTION: This GraphQL query is used with the `useStaticQuery` hook to fetch the site metadata, specifically the title, from the Gatsby site configuration. It is typically used within context providers to make site-wide information available to components.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/v5.6/index.md#_snippet_3\n\nLANGUAGE: GraphQL\nCODE:\n```\n{\n  site {\n    siteMetadata {\n      title\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Node Mutation Example (Before v4)\nDESCRIPTION: Demonstrates an anti-pattern of directly mutating nodes after the `createNode` action. This pattern was possible before Gatsby v4 but is no longer supported due to the introduction of persisted node storage.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v3-to-v4.md#_snippet_23\n\nLANGUAGE: JavaScript\nCODE:\n```\nexports.sourceNodes = ({ actions }) => {\n  const node = {\n    /* */\n  }\n  actions.createNode(node)\n\n  // somewhere else:\n  node.image___NODE = `uuid-of-some-other-node`\n}\n```\n\n----------------------------------------\n\nTITLE: Using resolve-url-loader\nDESCRIPTION: This snippet shows how to configure `gatsby-plugin-sass` to use `resolve-url-loader`. This resolves `url()` paths relative to the entry SCSS/Sass file, addressing issues with relative paths in CSS.  Requires `resolve-url-loader` package to be installed.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-sass/README.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nplugins: [\n  {\n    resolve: \"gatsby-plugin-sass\",\n    options: {\n      useResolveUrlLoader: true,\n    },\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Shadowing Bio Content Component\nDESCRIPTION: This JSX code snippet demonstrates how to shadow the `bio-content.js` component from `gatsby-theme-blog`. It imports React and Styled components and defines a functional component that renders custom bio text and a link.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/using-multiple-themes-together.md#_snippet_7\n\nLANGUAGE: JSX\nCODE:\n```\nimport React, { Fragment } from \"react\"\nimport { Styled } from \"theme-ui\"\n\nexport default function BioContent() {\n  return (\n    <Fragment>\n      Words by <Styled.a href=\"http://example.com/\">Your Name</Styled.a>.\n      <br />\n      Change me. Your awesome bio, about how great you are!\n    </Fragment>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Run GraphQL codemod (Shell)\nDESCRIPTION: Executes the `gatsby-codemods` tool to automatically update GraphQL queries to the new syntax required by Gatsby 5.  This codemod transforms sort and aggregation fields. Provide the project root or specific file paths as arguments.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v4-to-v5.md#_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\nnpx gatsby-codemods@latest sort-and-aggr-graphql .\n```\n\n----------------------------------------\n\nTITLE: Run Gatsby with Verbose Output - Shell\nDESCRIPTION: This command restarts the Gatsby development server with the `--verbose` flag enabled. The `--verbose` flag provides more detailed output, including the cache timestamp, for debugging and monitoring purposes.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/creating-a-source-plugin/part-4/index.mdx#_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\nyarn develop:site --verbose\n```\n\n----------------------------------------\n\nTITLE: Configure gatsby-source-filesystem in gatsby-config.js\nDESCRIPTION: Configures the `gatsby-source-filesystem` plugin in `gatsby-config.js` to specify the directory to search for files. The `path` option sets the directory where the markdown files are located, and the `name` provides context within GraphQL.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/routing/adding-markdown-pages.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-source-filesystem`,\n      options: {\n        name: `content`,\n        path: `${__dirname}/src/content`,\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Cache Busting with gatsby-plugin-manifest in JavaScript\nDESCRIPTION: This code snippet demonstrates how to configure cache busting for icons generated by gatsby-plugin-manifest. The `cache_busting_mode` option can be set to `query`, `name`, or `none`.  Setting to `none` disables cache busting, which might be useful in certain scenarios like integration with `gatsby-plugin-offline`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-manifest/README.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// in gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-manifest`,\n      options: {\n        name: `GatsbyJS`,\n        short_name: `GatsbyJS`,\n        start_url: `/`,\n        background_color: `#f7f0eb`,\n        theme_color: `#a2466c`,\n        display: `standalone`,\n        icon: `src/images/icon.png`,\n        cache_busting_mode: `none`, // `query`(default), `name`, or `none`\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Firefox Certutil Message\nDESCRIPTION: This text is displayed when devcert is unable to automatically configure Firefox.  It prompts the user to launch Firefox and complete a wizard to trust the devcert certificate.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/local-https.md#_snippet_8\n\nLANGUAGE: Text\nCODE:\n```\ndevcert was unable to automatically configure Firefox. You'll need to\ncomplete this process manually. Don't worry though - Firefox will walk\nyou through it.\n\nWhen you're ready, hit any key to continue. Firefox will launch and\ndisplay a wizard to walk you through how to trust the devcert\ncertificate. When you are finished, come back here and we'll finish up.\n(If Firefox doesn't start, go ahead and start it and navigate to\nhttp://localhost:52175 in a new tab.)\n\nIf you are curious about why all this is necessary, check out\nhttps://github.com/davewasmer/devcert#how-it-works\n<Press any key to launch Firefox wizard>\n```\n\n----------------------------------------\n\nTITLE: Customizing Theme UI Colors (JS)\nDESCRIPTION: This snippet modifies the `colors` object within the theme UI configuration, specifically changing the `primary` color to `tomato`.  This allows overriding and customizing the theme's default color palette.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/plugins-and-themes/shadowing.md#_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nexport default {\n  colors: {\n    primary: \"tomato\",\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Basic GraphQL Query\nDESCRIPTION: This GraphQL query selects the title from the site's metadata. It demonstrates the basic structure of a GraphQL query, including selecting fields within nested objects. The query targets the `site` object, then `siteMetadata`, and finally the `title` field.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/conceptual/graphql-concepts.md#_snippet_0\n\nLANGUAGE: GraphQL\nCODE:\n```\n{\n  site {\n    siteMetadata {\n      title\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing GraphQL into Blog Page Component\nDESCRIPTION: This snippet shows how to import the `graphql` tag from Gatsby within a blog page component.  It is necessary to use GraphQL queries in Gatsby components.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-4/index.mdx#_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react'\nimport { graphql } from 'gatsby' // highlight-line\nimport Layout from '../components/layout'\nimport Seo from '../components/seo'\n\nconst BlogPage = () => {\n  return (\n    <Layout pageTitle=\"My Blog Posts\">\n      <p>My cool posts will go in here</p>\n    </Layout>\n  )\n}\n\nexport const Head = () => <Seo title=\"My Blog Posts\" />\n\nexport default BlogPage\n```\n\n----------------------------------------\n\nTITLE: Creating Theme UI Shadow Directory - Shell\nDESCRIPTION: This command creates the directory structure `src/gatsby-plugin-theme-ui`. This is necessary for shadowing the theme files from the plugin. Local shadowing allows you to override the default theme.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/styling/theme-ui.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\nmkdir src/gatsby-plugin-theme-ui\n```\n\n----------------------------------------\n\nTITLE: GraphQL Type Definition with Proxy Directive\nDESCRIPTION: This GraphQL code defines a type `AuthorJson` and uses the `@proxy` directive to map the `startDate` field to the `start_date` field in the JSON data. It also uses the `@dateformat` directive to format the date. This allows querying `startDate` in GraphQL while the underlying data uses a different field name.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/graphql-data-layer/schema-customization.md#_snippet_23\n\nLANGUAGE: graphql\nCODE:\n```\ntype AuthorJson implements Node {\n  startDate: Date! @dateformat @proxy(from: \"start_date\")\n}\n```\n\n----------------------------------------\n\nTITLE: Install a Gatsby plugin using npm\nDESCRIPTION: This command installs a specific Gatsby plugin using npm.  In this example, it installs the `gatsby-source-filesystem` plugin.  The plugin must be available on the npm registry.  You must also update `gatsby-config.js` to configure and use the plugin.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/glossary/npm.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install gatsby-source-filesystem\n```\n\n----------------------------------------\n\nTITLE: Install Certutil on RHEL/Fedora\nDESCRIPTION: This command installs the `certutil` utility on Red Hat Enterprise Linux (RHEL) based distributions (like Fedora) using `yum`. Certutil is needed to update the trust store for various browsers.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/local-https.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nsudo yum install nss-tools\n```\n\n----------------------------------------\n\nTITLE: Configure gatsby-remark-embed-snippet JavaScript\nDESCRIPTION: Configures the gatsby-remark-embed-snippet plugin within the gatsby-config.js file.  This involves adding the plugin to the plugins array within the gatsby-transformer-remark plugin's options.  Ensuring gatsby-remark-embed-snippet is before gatsby-remark-prismjs is crucial.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-embed-snippet/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-transformer-remark`,\n      options: {\n        plugins: [\n          {\n            resolve: `gatsby-remark-embed-snippet`,\n            options: {},\n          },\n          {\n            resolve: `gatsby-remark-prismjs`,\n            options: {},\n          },\n        ],\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Site Metadata using GraphQL\nDESCRIPTION: This GraphQL query retrieves the title from the site's metadata. The query is structured to match the shape of the expected JSON response, ensuring a declarative approach to data fetching.  It demonstrates the basic syntax for querying data within a Gatsby site.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/graphql.md#_snippet_0\n\nLANGUAGE: GraphQL\nCODE:\n```\n{\n  site {\n    siteMetadata {\n      title\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter Example\nDESCRIPTION: This is an example of Markdown frontmatter that includes a list of attachments.  The `attachments` field contains an array of file paths, which are intended to be queried using GraphQL. Dependencies: None.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/images-and-media/importing-assets-into-files.md#_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: \"Title of article\"\nattachments:\n  - \"./assets.zip\"\n  - \"./presentation.pdf\"\n---\n\nHi, this is a great article.\n```\n\n----------------------------------------\n\nTITLE: Configuring typeName option with function\nDESCRIPTION: Shows how to configure the `typeName` option using a function to dynamically generate GraphQL node types based on the `level` field in the YAML data.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-yaml/README.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-transformer-yaml`,\n      options: {\n        typeName: ({ node, object, isArray }) => object.level,\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Configure gatsby-plugin-lodash with disabledFeatures\nDESCRIPTION: This snippet shows how to configure the gatsby-plugin-lodash to disable specific Lodash feature sets, such as shorthands and cloning, to further reduce the build size. This requires the `resolve` and `options` keys to configure the plugin.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-lodash/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nplugins: [\n  {\n    resolve: `gatsby-plugin-lodash`,\n    options: {\n      disabledFeatures: [`shorthands`, `cloning`],\n    },\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Skipping File Downloads from Drupal (JavaScript)\nDESCRIPTION: This snippet demonstrates how to prevent Gatsby from downloading files from the Drupal website using the `skipFileDownloads` option within the `gatsby-source-drupal` plugin. This is useful when images are handled by another system. The `apiBase` option is also shown, allowing the user to specify the JSON API endpoint.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-drupal/README.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n// In your gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-source-drupal`,\n      options: {\n        baseUrl: `https://live-contentacms.pantheonsite.io/`,\n        apiBase: `api`, // optional, defaults to `jsonapi`\n        skipFileDownloads: true,\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring loaderOptions and lessOptions in gatsby-plugin-less\nDESCRIPTION: This snippet demonstrates how to configure loaderOptions and lessOptions for the gatsby-plugin-less. It allows passing options directly to the underlying less-loader and Less compiler, enabling advanced customization. It sets the `appendData` option for `loaderOptions` and `strictMath` and `plugins` options for `lessOptions`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-less/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// in gatsby-config.js\nplugins: [\n  {\n    resolve: `gatsby-plugin-less`,\n    options: {\n      loaderOptions: {\n        appendData: `@env: ${process.env.NODE_ENV};`,\n      },\n      lessOptions: {\n        strictMath: true,\n        plugins: [new CleanCSSPlugin({ advanced: true })],\n      },\n    },\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query for Product Media Previews\nDESCRIPTION: GraphQL query to fetch all media previews for products.  Commonly used on product pages to display images. Leverages gatsbyImageData for image optimization through gatsby-plugin-image.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-shopify/README.md#_snippet_4\n\nLANGUAGE: GraphQL\nCODE:\n```\nquery {\n  products: allShopifyProduct {\n    nodes {\n      media {\n        preview {\n          image {\n            gatsbyImageData\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing GraphQL Schema in gatsby-node.ts\nDESCRIPTION: This code snippet demonstrates how to customize the GraphQL schema using Gatsby's `createSchemaCustomization` API in `gatsby-node.ts`. By explicitly defining types and making fields non-nullable, you can improve type safety and avoid null checks in your components. Requires Gatsby and TypeScript.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/local-development/graphql-typegen.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { GatsbyNode } from \"gatsby\"\n\nexport const createSchemaCustomization: GatsbyNode[\"createSchemaCustomization\"] = ({ actions }) => {\n  actions.createTypes(`\n    type Site {\n      siteMetadata: SiteMetadata!\n    }\n\n    type SiteMetadata {\n      title: String!\n    }\n  `)\n}\n```\n\n----------------------------------------\n\nTITLE: Using GetServerDataProps and GetServerDataReturn in Gatsby with TypeScript\nDESCRIPTION: This code snippet demonstrates how to use the `GetServerDataProps` and `GetServerDataReturn` types from Gatsby in a TypeScript file. It defines a `ServerDataProps` type and implements the `getServerData` function with proper type annotations, showing how to provide typed data to a Gatsby page.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/v4.5/index.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as React from \"react\"\nimport { GetServerDataProps, GetServerDataReturn } from \"gatsby\"\n\ntype ServerDataProps = {\n  hello: string\n}\n\nconst Page = () => <div>Hello World</div>\nexport default Page\n\nexport async function getServerData(\n  props: GetServerDataProps\n): GetServerDataReturn<ServerDataProps> {\n  return {\n    status: 200,\n    headers: {},\n    props: {\n      hello: \"world\",\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: getServerData Example (Fetching Data)\nDESCRIPTION: Demonstrates how to fetch data within the `getServerData` function and pass it as props to the React page component. It includes fetching data from an external API and setting it as the `dogImage` prop.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/rendering-options/server-side-rendering.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as React from \"react\"\n\nconst Page = ({ serverData }) => {\n  const { dogImage } = serverData\n\n  // Use dogImage in your page...\n}\n\nexport async function getServerData() {\n  const res = await fetch(`https://dog.ceo/api/breeds/image/random`)\n  const data = await res.json()\n\n  return {\n    props: {\n      dogImage: data,\n    },\n  }\n}\n\nexport default Page\n```\n\n----------------------------------------\n\nTITLE: Using Gatsby Browser APIs in gatsby-browser.jsx\nDESCRIPTION: This code snippet demonstrates how to use the `onRouteUpdate` and `wrapPageElement` Browser APIs in a `gatsby-browser.jsx` file.  `onRouteUpdate` logs the new and previous pathnames when the client route changes. `wrapPageElement` wraps every page in a `Layout` component.  It requires the `react` and `./src/components/layout` modules.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/config-files/gatsby-browser.md#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nconst React = require(\"react\")\nconst Layout = require(\"./src/components/layout\")\n\n// Logs when the client route changes\nexports.onRouteUpdate = ({ location, prevLocation }) => {\n  console.log(\"new pathname\", location.pathname)\n  console.log(\"old pathname\", prevLocation ? prevLocation.pathname : null)\n}\n\n// Wraps every page in a component\nexports.wrapPageElement = ({ element, props }) => {\n  return <Layout {...props}>{element}</Layout>\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Fragment for Media Image with Local File\nDESCRIPTION: This GraphQL fragment retrieves the `gatsbyImageData` for a Shopify media image that has been downloaded locally. It is intended to be used with the `preview` fields in the runtime images section and assumes that the images are downloaded during build-time using the `downloadImages` option.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-shopify/README.md#_snippet_7\n\nLANGUAGE: GraphQL\nCODE:\n```\nfragment MediaImageLocalFile on ShopifyMediaPreviewImage {\n  image {\n    localFile {\n      childImageSharp {\n        gatsbyImageData\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing SCSS in gatsby-browser.js\nDESCRIPTION: This snippet shows how to import an SCSS file in `gatsby-browser.js`. This makes the styles defined in the SCSS file available to your Gatsby application.  The relative path to the SCSS file is required, assuming the SCSS file is located in the `src` directory.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-sass/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"./src/index.scss\"\n```\n\n----------------------------------------\n\nTITLE: Gatsby Transformer Plugin - Create Schema Customization with Markdown Extension\nDESCRIPTION: This snippet is from a hypothetical `gatsby-transformer-basic-md` plugin and demonstrates how to create a field extension named `md` that transforms markdown strings into HTML. It uses the `remark` and `remark-html` libraries for the transformation and includes a `sanitize` option to control HTML sanitization.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/graphql-data-layer/schema-customization.md#_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nconst remark = require(`remark`)\nconst html = require(`remark-html`)\n\nexports.createSchemaCustomization = ({ actions }) => {\n  actions.createFieldExtension({\n    name: \"md\",\n    args: {\n      sanitize: {\n        type: \"Boolean!\",\n        defaultValue: true,\n      },\n    },\n    // The extension `args` (above) are passed to `extend` as\n    // the first argument (`options` below)\n    extend(options, prevFieldConfig) {\n      return {\n        args: {\n          sanitize: \"Boolean\",\n        },\n        resolve(source, args, context, info) {\n          const fieldValue = context.defaultFieldResolver(\n            source,\n            args,\n            context,\n            info\n          )\n          const shouldSanitize =\n            args.sanitize != null ? args.sanitize : options.sanitize\n          const processor = remark().use(html, { sanitize: shouldSanitize })\n          return processor.processSync(fieldValue).contents\n        },\n      }\n    },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Page Title Using Gatsby Head API\nDESCRIPTION: This code snippet demonstrates how to add a page title to a Gatsby page using the Gatsby Head API.  It exports a function named `Head` which returns a `<title>` tag. This tag sets the title of the page in the browser tab and is important for SEO.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-2/index.mdx#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react'\n\nconst AboutPage = () => {\n  return (\n    <main>\n      <h1>About Me</h1>\n      <p>Hi there! I'm the proud creator of this site, which I built with Gatsby.</p>\n    </main>\n  )\n}\n\n// highlight-next-line\nexport const Head = () => <title>About Me</title>\n\nexport default AboutPage\n```\n\n----------------------------------------\n\nTITLE: Customizing SSR with gatsby-ssr.jsx\nDESCRIPTION: This code snippet demonstrates how to use the `onRenderBody` and `wrapPageElement` APIs in `gatsby-ssr.jsx` to modify the `body` element's attributes and wrap every page with a layout component during server-side rendering.  It requires React and a Layout component from `./src/components/layout`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/config-files/gatsby-ssr.md#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nconst React = require(\"react\")\nconst Layout = require(\"./src/components/layout\")\n\n// Adds a class name to the body element\nexports.onRenderBody = ({ setBodyAttributes }, pluginOptions) => {\n  setBodyAttributes({\n    className: \"my-body-class\",\n  })\n}\n\n// Wraps every page in a component\nexports.wrapPageElement = ({ element, props }) => {\n  return <Layout {...props}>{element}</Layout>\n}\n```\n\n----------------------------------------\n\nTITLE: Testing a React Component\nDESCRIPTION: This code demonstrates a simple test case for a React component using React Testing Library and Jest. It renders a `Title` component, retrieves the element using `getByTestId`, and asserts that the element's text content matches the expected value.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/testing/testing-react-components.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from \"react\"\nimport { render } from \"@testing-library/react\"\n\n// You have to write data-testid\nconst Title = () => <h1 data-testid=\"hero-title\">Gatsby is awesome!</h1>\n\ntest(\"Displays the correct title\", () => {\n  const { getByTestId } = render(<Title />)\n  // Assertion\n  expect(getByTestId(\"hero-title\")).toHaveTextContent(\"Gatsby is awesome!\")\n  // --> Test will pass\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Extra Data to Node Based on Type (TS)\nDESCRIPTION: This code snippet demonstrates how to conditionally add extra data to a node during node creation based on its type. Specifically, it adds an image field to Post nodes.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/creating-a-source-plugin/part-6/index.mdx#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nexport function nodeBuilder({ gatsbyApi, input }: INodeBuilderArgs) {\n  const id = gatsbyApi.createNodeId(`${input.type}-${input.data.id}`)\n\n  // highlight-next-line\n  const extraData: Record<string, unknown> = {}\n\n  // highlight-start\n  if (input.type === `Post`) {\n    extraData.image = `some-id`\n  }\n  // highlight-end\n\n  const node = {\n    ...input.data,\n    // highlight-next-line\n    ...extraData,\n    id,\n    _id: input.data.id,\n    parent: null,\n    children: [],\n    internal: {\n      type: input.type,\n      contentDigest: gatsbyApi.createContentDigest(input.data),\n    },\n  } satisfies NodeInput\n\n  gatsbyApi.actions.createNode(node)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Form Control with JSX\nDESCRIPTION: This code snippet demonstrates how to create a form control and label using JSX. It includes a div container with a class name, a label element with the htmlFor attribute, and an input element with various attributes like type, id, name, value, and required. This example illustrates how JSX resembles HTML but is ultimately JavaScript code.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/glossary/jsx.md#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nconst input = (\n  <div className=\"form__field\">\n    <label htmlFor=\"my_input\">My input</label>\n    <input type=\"text\" id=\"my_input\" name=\"field_1\" value=\"\" required />\n  </div>\n)\n```\n\n----------------------------------------\n\nTITLE: Debugging: Running Gatsby with inspect Flag Shell\nDESCRIPTION: This shell command starts the Gatsby development server with the `--inspect` flag. This flag enables the Node.js inspector, allowing developers to connect a debugger, such as Chrome DevTools, to the running Gatsby process. It's essential for remote debugging and profiling Gatsby applications.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/debugging-the-build-process.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngatsby develop --inspect\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query in v4: Accessing SitePage PageContext\nDESCRIPTION: This GraphQL query demonstrates how to access the `pageContext` object in Gatsby v4, replacing the deprecated `context` field. It returns the full JavaScript object passed to `page.context` during `createPages`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v3-to-v4.md#_snippet_10\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  allSitePage {\n    nodes {\n      pageContext # returns full JS object passed to `page.context` in `createPages`\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query Example for WPGraphQL\nDESCRIPTION: This GraphQL query retrieves the ID and title of all WordPress pages directly from the WPGraphQL API.  It's used to compare the data returned by WPGraphQL directly with the data sourced by Gatsby to identify potential issues.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-wordpress/docs/debugging-and-troubleshooting.md#_snippet_1\n\nLANGUAGE: GraphQL\nCODE:\n```\n{\n  pages {\n    nodes {\n      id\n      title\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Blog Post Query in JavaScript\nDESCRIPTION: This JavaScript code snippet shows how to update the GraphQL query in the blog post template. The updated query fetches the necessary frontmatter fields, including hero image data, to be used for rendering the image and other post metadata.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-7/index.mdx#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// imports\n\n   const BlogPost = ({ data, children }) => {\n     return (\n       // ...\n     )\n   }\n\n   // highlight-start\n   export const query = graphql`\n     query($id: String) {\n       mdx(id: {eq: $id}) {\n         frontmatter {\n           title\n           date(formatString: \"MMMM DD, YYYY\")\n           hero_image_alt\n           hero_image_credit_link\n           hero_image_credit_text\n           hero_image {\n             childImageSharp {\n               gatsbyImageData\n             }\n           }\n         }\n       }\n     }\n   `\n   // highlight-end\n\n   export const Head = ({ data }) => <Seo title={data.mdx.frontmatter.title} />\n\n   export default BlogPost\n```\n\n----------------------------------------\n\nTITLE: Import GraphQL for Page Querying\nDESCRIPTION: This JavaScript snippet imports the `graphql` function from Gatsby. This function is essential for writing page queries within a template component. Page queries allow you to fetch data specific to a page based on the context passed to the template.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-wordpress/docs/tutorials/querying-data.md#_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nimport { graphql } from \"gatsby\"\n```\n\n----------------------------------------\n\nTITLE: Creating pages for blog posts in gatsby-node.js\nDESCRIPTION: This code snippet in `gatsby-node.js` uses the Gatsby GraphQL API to query for blog posts from Flotiq and dynamically creates pages for each blog post based on its slug.  It defines a `blogPost` template and passes the slug as context to the template.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/sourcing-from-flotiq.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst path = require(`path`)\nconst { createFilePath } = require(`gatsby-source-filesystem`)\nexports.createPages = async ({ graphql, actions }) => {\n  const { createPage } = actions\n\n  const blogPost = path.resolve(`./src/templates/blog-post.js`)\n  const result = await graphql(`\n    query GetBlogPosts {\n      allBlogpost(sort: { flotiqInternal: { createdAt: DESC }}) {\n        edges {\n          node {\n            headerImage {\n              extension\n              id\n            }\n            content\n            id\n            slug\n            title\n          }\n        }\n      }\n    }\n  `)\n\n  if (result.errors) {\n    throw result.errors\n  }\n\n  // Create blog posts pages.\n  const posts = result.data.allBlogpost.edges\n  posts.forEach((post, index) => {\n    const previous = index === posts.length - 1 ? null : posts[index + 1].node\n    const next = index === 0 ? null : posts[index - 1].node\n\n    createPage({\n      path: post.node.slug,\n      component: blogPost,\n      context: {\n        slug: post.node.slug,\n        previous,\n        next,\n      },\n    })\n  })\n}\n\nexports.onCreateNode = ({ node, actions, getNode }) => {\n  const { createNodeField } = actions\n\n  if (node.internal.type === `MarkdownRemark`) {\n    const value = createFilePath({ node, getNode })\n    createNodeField({\n      name: `slug`,\n      node,\n      value,\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Create Resolver Function in gatsby-node.js (gatsby-plugin-image)\nDESCRIPTION: This asynchronous JavaScript function creates a resolver for the `gatsbyImageData` field. It utilizes the `generateImageData` function from `gatsby-plugin-image` to generate the image data. The resolver function retrieves image metadata and generates a low-resolution placeholder image URL if specified. It returns the image data object.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/plugins-and-themes/adding-gatsby-image-support.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { generateImageData, getLowResolutionImageURL } from \"gatsby-plugin-image\"\n\n\nconst resolveGatsbyImageData = async (image, options) => {\n   // The `image` argument is the node to which you are attaching the resolver,\n   // so the values will depend on your data type.\n  const filename = image.src\n\n  const sourceMetadata = {\n    width: image.width,\n    height: image.height,\n    // In this example, the node has a value like \"image/png\", which needs\n    // converting to a value such as \"png\". If this omitted, the function will\n    // attempt to work it out from the file extension.\n    format: image.mimeType.split(\"/\")[1]\n  }\n\n  const imageDataArgs = {\n    ...options,\n    // Passing the plugin name allows for better error messages\n    pluginName: `gatsby-source-example`,\n    sourceMetadata,\n    filename,\n    placeholderURL,\n    generateImageSource,\n    options,\n  }\n\n  // Generating placeholders is optional, but recommended\n  if(options.placeholder === \"blurred\") {\n    // This function returns the URL for a 20px-wide image, to use as a blurred placeholder\n    // You need to download the image and convert it to a base64-encoded data URI\n    const lowResImage = getLowResolutionImageURL(imageDataArgs)\n\n    // This would be your own function to download and generate a low-resolution placeholder\n    imageDataArgs.placeholderURL =  await getBase64Image(lowResImage)\n  }\n\n  // You could also calculate dominant color, and pass that as `backgroundColor`\n  // gatsby-plugin-sharp includes helpers that you can use, such as calculating\n  // the dominant color of a local file, if you don't want to handle it in your plugin\n\n\n  return generateImageData(imageDataArgs)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring gatsby-plugin-react-css-modules in gatsby-config.js\nDESCRIPTION: This code snippet demonstrates how to configure the gatsby-plugin-react-css-modules in the gatsby-config.js file. It allows for customization of file types (e.g., SCSS) and exclusion of global styles using regular expressions. The plugin transforms `styleName` attributes to `className` attributes at compile time.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-react-css-modules/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// In your gatsby-config.js\nplugins: [\n  {\n    resolve: `gatsby-plugin-react-css-modules`,\n    options: {\n      // *.css files are included by default.\n      // To support another syntax (e.g. SCSS),\n      // add `postcss-scss` to your project's devDependencies\n      // and add the following option here:\n      filetypes: {\n        \".scss\": { syntax: `postcss-scss` },\n      },\n\n      // Exclude global styles from the plugin using a RegExp:\n      exclude: `\\/global\\/`,\n      // For all the options check babel-plugin-react-css-modules README link provided above\n    },\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Creating Image Data Function with getImageData - JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to create an image data function using the getImageData helper from gatsby-plugin-image. It takes image properties like URL, width, and height as input, along with a URL builder function and plugin name.  It returns an object compatible with GatsbyImage.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/plugins-and-themes/adding-gatsby-image-support.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getImageData } from \"gatsby-plugin-image\"\n\nexport function getExampleImageData({ image, ...props }) {\n  return getImageData({\n    baseUrl: image.url,\n    sourceWidth: image.width,\n    sourceHeight: image.height,\n    urlBuilder,\n    pluginName: \"gatsby-source-example\",\n    // If your host supports auto-format/content negotiation, pass this as the formats array\n    formats: [\"auto\"],\n    ...props,\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using Gatsby Link Component for Internal Navigation\nDESCRIPTION: This snippet uses the Gatsby `Link` component to create a link back to the home page from the About page. The `Link` component is imported from 'gatsby' and used with the `to` prop set to '/'. This allows users to navigate back to the index page.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-2/index.mdx#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react'\nimport { Link } from 'gatsby' // highlight-line\n\nconst AboutPage = () => {\n  return (\n    <main>\n      <h1>About Me</h1>\n      {/* highlight-next-line */}\n      <Link to=\"/\">Back to Home</Link>\n      <p>Hi there! I'm the proud creator of this site, which I built with Gatsby.</p>\n    </main>\n  )\n}\n\nexport const Head = () => <title>About Me</title>\n\nexport default AboutPage\n```\n\n----------------------------------------\n\nTITLE: Enabling optional chaining and nullish coalescing\nDESCRIPTION: This commit adds support for optional chaining (`?.`) and nullish coalescing (`??`) operators in generated pages within Gatsby.  This allows developers to use these modern JavaScript features, providing more concise and readable code when dealing with potentially null or undefined values.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/babel-preset-gatsby/CHANGELOG.md#_snippet_11\n\n\n\n----------------------------------------\n\nTITLE: Forwarding Events with Off-Main-Thread\nDESCRIPTION: Illustrates how to forward events using the `forward` property when using the `off-main-thread` strategy.  It highlights how Gatsby automatically merges forwarded events.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/built-in-components/gatsby-script.md#_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<Script\n  src={`https://www.googletagmanager.com/gtag/js?id=${process.env.GTAG}`}\n  strategy=\"off-main-thread\"\n  // highlight-next-line\n  forward={[`dataLayer.push`]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Fixing Field Types with createTypes\nDESCRIPTION: This JavaScript code snippet demonstrates how to use the `createTypes` action in `gatsby-node.js` to explicitly define the type of the `joinedAt` field in the `AuthorJson` type. This ensures that the field is always treated as a Date, even if the data contains invalid date formats.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/graphql-data-layer/schema-customization.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexports.createSchemaCustomization = ({ actions }) => {\n  const { createTypes } = actions\n  const typeDefs = `\n    type AuthorJson implements Node {\n      joinedAt: Date\n    }\n  `\n  createTypes(typeDefs)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Gatsby Source Contentful with Preview API\nDESCRIPTION: This code snippet demonstrates how to configure the `gatsby-source-contentful` plugin in `gatsby-config.js` to fetch content from Contentful using the Preview API. It requires the `spaceId`, `accessToken`, and `host` to be set to `preview.contentful.com`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-contentful/README.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// In your gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-source-contentful`,\n      options: {\n        spaceId: `your_space_id`,\n        // Learn about environment variables: https://gatsby.dev/env-vars\n        accessToken: process.env.CONTENTFUL_ACCESS_TOKEN,\n        host: `preview.contentful.com`,\n      },\n    },\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Using Remote Image URLs in StaticImage (JSX)\nDESCRIPTION: This code snippet shows how to use a remote image URL with the StaticImage component, after enabling the experimental remote images feature using the environment variable GATSBY_EXPERIMENTAL_REMOTE_IMAGES. The component will download, transform, and optimize the image at build time. This feature is experimental and is currently only supported in StaticImage.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/v2.30/index.md#_snippet_4\n\nLANGUAGE: JSX\nCODE:\n```\n<StaticImage src=\"https://placekitten.com/400/400\" alt=\"Kittin\" />\n```\n\n----------------------------------------\n\nTITLE: Creating Pages from Prismic Data\nDESCRIPTION: This code snippet uses Gatsby's 'createPages' API in 'gatsby-node.js' to dynamically generate pages based on data fetched from Prismic.  It queries for all Prismic 'Post' nodes, and then creates a page for each post using a template, passing the 'uid' as context.  It depends on 'graphql' to fetch the data and 'path' to resolve the template path.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/sourcing-data/sourcing-from-prismic.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst path = require(\"path\")\n\nexports.createPages = async ({ graphql, actions }) => {\n  const { createPage } = actions\n\n  const pages = await graphql(`\n    {\n      allPrismicPost {\n        nodes {\n          id\n          uid\n          url\n        }\n      }\n    }\n  `)\n\n  const template = path.resolve(\"src/templates/post.jsx\")\n\n  pages.data.allPrismicPost.nodes.forEach(post => {\n    createPage({\n      path: `/${post.url}`,\n      component: template,\n      context: {\n        uid: post.uid,\n      },\n    })\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a build script to package.json (JSON)\nDESCRIPTION: This snippet shows how to add a build script to the package.json file. The build script should compile the adapter's source code to CommonJS (CJS) into a dist folder, and potentially generate type definitions if written in TypeScript.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/previews-deploys-hosting/creating-an-adapter.md#_snippet_9\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"scripts\": {\n    \"build\": \"your-build-script\",\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Queries for downloadLocal\nDESCRIPTION: This GraphQL query demonstrates how to update your queries when using the `downloadLocal` setting. It queries the `localFile` field of a `ContentfulAsset` to access the locally stored file and then uses `childImageSharp` and `gatsbyImageData` to create image data for `gatsby-plugin-image`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-contentful/README.md#_snippet_24\n\nLANGUAGE: graphql\nCODE:\n```\nquery MyQuery {\n  # Example is for a `ContentType` with a `ContentfulAsset` field\n  # You could also query an asset directly via\n  # `allContentfulAsset { edges{ node { } } }`\n  # or `contentfulAsset(contentful_id: { eq: \"contentful_id here\" } ) { }`\n  contentfulMyContentType {\n    myContentfulAssetField {\n      # Query for locally stored file(e.g. An image) - `File` node\n      localFile {\n        # Use `gatsby-plugin-image` to create the image data\n        childImageSharp {\n          gatsbyImageData(formats: AVIF)\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Markdown Blog Post\nDESCRIPTION: This Markdown snippet demonstrates the structure of a blog post file. It defines the slug, date, and title in the frontmatter, followed by the post content.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/adding-a-list-of-markdown-blog-posts.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n---\nslug: \"/blog/my-first-post\"\ndate: \"2017-11-07\"\ntitle: \"My first blog post\"\n---\n\nHas anyone heard about GatsbyJS yet?\n```\n\n----------------------------------------\n\nTITLE: Configuring refetchInterval in gatsby-source-graphql (JavaScript)\nDESCRIPTION: This code snippet shows how to configure the `gatsby-source-graphql` plugin to periodically refetch data from a GraphQL endpoint. The `refetchInterval` option specifies the time in seconds between each refetch. The plugin is configured with typeName, fieldName, url, and refetchInterval.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-graphql/README.md#_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n  plugins: [\n    // Simple config, passing URL\n    {\n      resolve: \"gatsby-source-graphql\",\n      options: {\n        // Arbitrary name for the remote schema Query type\n        typeName: \"SWAPI\",\n        // Field under which the remote schema will be accessible. You'll use this in your Gatsby query\n        fieldName: \"swapi\",\n        // Url to query from\n        url: \"https://api.graphcms.com/simple/v1/swapi\",\n\n        // refetch interval in seconds\n        refetchInterval: 60,\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Loading environment variables for staging environment\nDESCRIPTION: Illustrates how to load environment variables for a staging environment in Gatsby. It checks for the `STAGING` environment variable and loads a specific `.env` file (e.g., `.env.development.staging`) if it's present. Otherwise, it loads the default `.env` file. This allows for environment-specific configurations.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/local-development/environment-variables.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nif (process.env.STAGING) {\n  require(\"dotenv\").config({\n    path: `.env.${process.env.NODE_ENV}.staging`,\n  })\n} else {\n  require(\"dotenv\").config({\n    path: `.env.${process.env.NODE_ENV}`,\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Highlighting Lines in JSX with gatsby-remark-prismjs\nDESCRIPTION: This JSX code snippet demonstrates how to highlight specific lines in an embedded file using special comments for `gatsby-remark-prismjs`. The `highlight-line` comment highlights a single line, while `highlight-range` highlights a range of lines.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/using-remark/src/pages/2017-04-05---embed-snippets/index.md#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport React from \"react\"\nimport ReactDOM from \"react-dom\"\n\nconst name = `Brian` // highlight-line\n\nReactDOM.render(\n  <div>\n    {/* highlight-range{1-2} */}\n    <h1>Hello, ${name}!</h1>\n    <h2>Welcome to this example</h2>\n  </div>,\n  document.getElementById(`root`)\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring gatsby-plugin-mdx with gatsby-plugin-page-creator\nDESCRIPTION: This configuration uses `gatsby-plugin-page-creator` along with `gatsby-source-filesystem` to create pages from MDX files located in `src/posts`. This is necessary when MDX files are not located in the default `src/pages` directory. The snippet uses ES modules syntax.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-mdx/README.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { dirname } from \"path\"\nimport { fileURLToPath } from \"url\"\n\nconst __dirname = dirname(fileURLToPath(import.meta.url))\n\nconst config = {\n  plugins: [\n    `gatsby-plugin-mdx`,\n    {\n      resolve: `gatsby-source-filesystem`,\n      options: {\n        name: `posts`,\n        path: `${__dirname}/src/posts`,\n      },\n    },\n    {\n      resolve: `gatsby-plugin-page-creator`,\n      options: {\n        path: `${__dirname}/src/posts`,\n      },\n    },\n  ],\n}\n\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Generating a Unique Source ID in JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to generate a unique source ID by concatenating the `spaceId` and `environment` options from the plugin configuration. This ID is then used to create a cache key for storing the sync token.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/creating-a-source-plugin/part-5/index.mdx#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst sourceId = `${pluginConfig.get(`spaceId`)}-${pluginConfig.get(\n      `environment`\n    )}`\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint for Accessibility in Gatsby\nDESCRIPTION: This code snippet shows how to configure ESLint with `eslint-plugin-jsx-a11y` in a Gatsby project by extending the `react-app` configuration, adding the `jsx-a11y` plugin, and setting specific rules.  It is configured within the `.eslintrc` file to lint and validate accessibility attributes in JSX.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/conceptual/making-your-site-accessible.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"extends\": [\"react-app\", \"plugin:jsx-a11y/recommended\"],\n  \"plugins\": [\"jsx-a11y\"],\n  \"rules\": {\n    \"jsx-a11y/rule-name\": \"warn\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Products Component (JSX)\nDESCRIPTION: This code demonstrates how to import the `Products` component into a Gatsby page (advanced.js) and render it within the `Layout` component. This allows you to display a list of products fetched from Stripe on the advanced page.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/ecommerce-tutorial/index.md#_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\n\nimport Products from \"../components/Products/Products\" // highlight-line\n\nconst AdvancedExamplePage = () => (\n  <Layout>\n    <SEO title=\"Advanced Example\" />\n    <h1>This is the advanced example</h1>\n    <Products /> {/* highlight-line */}\n  </Layout>\n)\n\nexport default AdvancedExamplePage\n```\n\n----------------------------------------\n\nTITLE: Encoding URI for non-English links\nDESCRIPTION: This code snippet shows how to use `encodeURI()` in the `serialize` method to encode non-English links in the RSS feed. This ensures that links with non-ASCII characters are properly formatted.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/adding-common-features/adding-an-rss-feed.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nserialize: ({ query: { site, allMarkdownRemark } }) => {\n  return allMarkdownRemark.edges.map(edge => {\n    return Object.assign({}, edge.node.frontmatter, {\n      description: edge.node.excerpt,\n      date: edge.node.frontmatter.date,\n      // highlight-next-line\n      url: encodeURI(site.siteMetadata.siteUrl + edge.node.fields.slug),\n      guid: site.siteMetadata.siteUrl + edge.node.fields.slug,\n      custom_elements: [{ \"content:encoded\": edge.node.html }],\n    })\n  })\n},\n```\n\n----------------------------------------\n\nTITLE: Using Aliases for Slice Components - JavaScript\nDESCRIPTION: This snippet demonstrates how to use aliases to swap Slice components based on the page being rendered. It creates a Slice component for each supported language and uses the `slices` option in `createPage` to tell each page which Slice component to use.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/performance/using-slices.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst SUPPORTED_LANGUAGES = ['en', 'jp', 'de']\n\nexports.createPages = async ({ actions }) => {\n  // create a slice with a unique ID for each language\n  SUPPORTED_LANGUAGES.forEach(language => {\n    actions.createSlice({\n      // highlight-next-line\n      id: `header-${language}`,\n      context: { language },\n      component: require.resolve(`./src/components/header.js`),\n    })\n  })\n\n  // Query for all pages\n  const pagesResult = await graphql('...')\n\n  // Create a page for each page node + language\n  pagesResult.data.edges.forEach(({ node }) => {\n    SUPPORTED_LANGUAGES.forEach(language => {\n      createPage({\n        path: node.path,\n        // a page component that utilizes DefaultLayout\n        component: require.resolve(`./src/templates/page.js`),\n        context: {\n          pagePath: node.path,\n          language,\n        },\n        slices: {\n          // Any time `<Slice alias=\"header\">` is seen on this page,\n          // use the `header-${language}` id\n          // highlight-next-line\n          'header': `header-${language}`\n        }\n      })\n    })\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring gatsby-transformer-csv with gatsby-source-filesystem (JavaScript)\nDESCRIPTION: This code snippet demonstrates the basic configuration of the gatsby-transformer-csv plugin alongside the gatsby-source-filesystem plugin in a gatsby-config.js file. It sets up the filesystem source plugin to read CSV files from the ./src/data/ directory and then uses gatsby-transformer-csv to transform these files into queryable data.  It requires both `gatsby-source-filesystem` and `gatsby-transformer-csv` to be installed.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-csv/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// In your gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-source-filesystem`,\n      options: {\n        name: `data`,\n        path: `${__dirname}/src/data/`,\n      },\n    },\n    `gatsby-transformer-csv`,\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Building a Gatsby Site for Production (Shell)\nDESCRIPTION: This command compiles your Gatsby site for production deployment. It optimizes the site for performance and creates static files ready to be served by a web server or CDN.  This command should be run from the root of the project.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/gatsby-cli.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\ngatsby build\n```\n\n----------------------------------------\n\nTITLE: Configure gatsby-transformer-asciidoc (JavaScript)\nDESCRIPTION: Configures the gatsby-transformer-asciidoc plugin in gatsby-config.js. This is the basic setup required to enable the plugin for parsing AsciiDoc files.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-asciidoc/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// In your gatsby-config.js\nplugins: [`gatsby-transformer-asciidoc`]\n```\n\n----------------------------------------\n\nTITLE: React Context Boilerplate\nDESCRIPTION: This code provides a React Context boilerplate for managing and sharing state between layout and page components. It includes a provider component and consumers for reading and setting data.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-layout/README.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Context.js\nimport React from \"react\"\n\nconst defaultContextValue = {\n  data: {\n    // set your initial data shape here\n    menuOpen: false,\n  },\n  set: () => {},\n}\n\nconst { Provider, Consumer } = React.createContext(defaultContextValue)\n\nclass ContextProviderComponent extends React.Component {\n  constructor() {\n    super()\n\n    this.setData = this.setData.bind(this)\n    this.state = {\n      ...defaultContextValue,\n      set: this.setData,\n    }\n  }\n\n  setData(newData) {\n    this.setState(state => ({\n      data: {\n        ...state.data,\n        ...newData,\n      },\n    }))\n  }\n\n  render() {\n    return <Provider value={this.state}>{this.props.children}</Provider>\n  }\n}\n\nexport { Consumer as default, ContextProviderComponent }\n```\n\n----------------------------------------\n\nTITLE: Touch Existing Nodes TypeScript\nDESCRIPTION: Iterates through all existing nodes in Gatsby's data layer using `getNodes()`, filters out nodes that do not belong to the current source plugin (identified by `node.internal.owner`), and then calls `touchNode(node)` for the remaining nodes. This prevents Gatsby from garbage collecting these nodes during subsequent builds, which is crucial for incremental builds.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/creating-a-source-plugin/part-5/index.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Imports\n\nlet isFirstSource = true\n\nexport const sourceNodes: GatsbyNode[`sourceNodes`] = async (gatsbyApi) => {\n  // Rest of sourceNodes\n\n  if (isFirstSource) {\n    // highlight-start\n    getNodes().forEach((node) => {\n      if (node.internal.owner !== `plugin`) {\n        return\n      }\n\n      touchNode(node)\n    })\n    // highlight-end\n\n    isFirstSource = false\n  }\n\n  // Rest of sourceNodes\n}\n\n// Rest of file\n```\n\n----------------------------------------\n\nTITLE: Create Schema Customization with Custom Resolver\nDESCRIPTION: This code snippet demonstrates how to create a schema customization using a custom resolver. It defines two types, `AuthorJson` and `ContributorJson`, both with a `fullName` field that uses the `fullNameResolver` to generate the full name.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/graphql-data-layer/schema-customization.md#_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nexports.createSchemaCustomization = ({ actions, schema }) => {\n  actions.createTypes([\n    {\n      name: \"AuthorJson\",\n      interfaces: [\"Node\"],\n      fields: {\n        fullName: {\n          type: \"String\",\n          resolve: fullNameResolver,\n        },\n      },\n    },\n    {\n      name: \"ContributorJson\",\n      interfaces: [\"Node\"],\n      fields: {\n        fullName: {\n          type: \"String\",\n          resolve: fullNameResolver,\n        },\n      },\n    },\n  ])\n}\n```\n\n----------------------------------------\n\nTITLE: Configure gatsby-source-filesystem and gatsby-transformer-excel\nDESCRIPTION: Configures the `gatsby-source-filesystem` and `gatsby-transformer-excel` plugins in `gatsby-config.js`. This setup allows Gatsby to read Excel files from a specified directory and transform them into queryable data.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-excel/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// In your gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-source-filesystem`,\n      options: {\n        name: `data`,\n        path: `${__dirname}/src/data/`,\n      },\n    },\n    `gatsby-transformer-excel`,\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Gatsby Transformer PDF Plugin in gatsby-config.js\nDESCRIPTION: This code snippet demonstrates how to configure the `gatsby-transformer-pdf` plugin in your `gatsby-config.js` file. It also includes the configuration for `gatsby-source-filesystem`, which is required to specify the directory containing the PDF files. Ensure that `gatsby-source-filesystem` is configured with the correct path to your PDF files for the transformer to work.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-pdf/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// In your gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-source-filesystem`,\n      options: {\n        name: `data`,\n        path: `${__dirname}/src/data/`,\n      },\n    },\n    `gatsby-transformer-pdf`,\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Gatsby Page Component with Prismic Data\nDESCRIPTION: This code snippet demonstrates how to create a Gatsby page component that fetches data from Prismic using GraphQL and renders it. It retrieves the title and content of a Prismic 'Homepage' Single Type and displays them within the component. The component relies on the `gatsby` and `react` packages.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/sourcing-data/sourcing-from-prismic.md#_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\"\nimport { graphql, Link } from \"gatsby\"\n\nconst Index = ({ data }) => {\n  if (!data) return null\n  const home = data.prismicHomepage\n\n  return (\n    <React.Fragment>\n      <h1>{home.data.title.text}</h1>\n      <div dangerouslySetInnerHTML={{ __html: home.data.content.html }} />\n    </React.Fragment>\n  )\n}\n\nexport default Index\n```\n\n----------------------------------------\n\nTITLE: Overriding Sass and CSS Modules Regexes\nDESCRIPTION: This snippet shows how to override the default file regexes for Sass and CSS Modules in `gatsby-plugin-sass`. This allows you to customize which files are treated as Sass or CSS Modules.  Requires understanding of regular expressions.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-sass/README.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nplugins: [\n  {\n    resolve: `gatsby-plugin-sass`,\n    options: {\n      // Override the file regex for Sass\n      sassRuleTest: /\\.global\\.s(a|c)ss$/,\n      // Override the file regex for CSS modules\n      sassRuleModulesTest: /\\.mod\\.s(a|c)ss$/,\n    },\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: React Component with Gatsby Image\nDESCRIPTION: A React component that displays a blog post with a featured image. It uses `GatsbyImage` from `gatsby-plugin-image` to render the image. The alt text for the image is taken from the `featuredImgAlt` field in the post's frontmatter.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/images-and-media/preprocessing-external-images.md#_snippet_4\n\nLANGUAGE: JSX\nCODE:\n```\nimport React from \"react\"\nimport { GatsbyImage } from \"gatsby-plugin-image\"\nimport { graphql } from \"gatsby\"\n\nconst template = ({ data }) => {\n  return (\n    <>\n      <h1>{data.markdownRemark.frontmatter.title}</h1>\n      {data.markdownRemark.featuredImg && (\n        <GatsbyImage\n          image=\n            {data.markdownRemark.featuredImg.childImageSharp.gatsbyImageData}\n          alt={data.markdownRemark.frontmatter.featuredImgAlt}\n        />\n      )}\n      <div dangerouslySetInnerHTML={{ __html: data.markdownRemark.html }} />\n    </>\n  )\n}\n\nexport default template\n\nexport const query = graphql`\n  query BlogPostQuery($slug: String) {\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      frontmatter {\n        title\n        featuredImgAlt\n      }\n      html\n      featuredImg {\n        childImageSharp {\n          gatsbyImageData(width: 600, layout: FIXED)\n        }\n      }\n    }\n  }\n`\n\n```\n\n----------------------------------------\n\nTITLE: Importing GraphQL and Using Page Query Data in a Component (Example)\nDESCRIPTION: This example demonstrates importing the `graphql` tag from Gatsby, defining a page component that receives data via the `data` prop, and using the data to display a site description. It also includes the corresponding GraphQL query to fetch the site metadata.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-4/index.mdx#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from \"react\"\n\n// Step 1: Import the graphql tag\nimport { graphql } from \"gatsby\"\n\nconst HomePage = ({ data }) => {\n  return (\n    <p>\n      {/* Step 3: Use the data in your component*/}\n      {data.site.siteMetadata.description}\n    </p>\n  )\n}\n\n// Step 2: Export a page query\nexport const query = graphql`\n  query {\n    site {\n      siteMetadata {\n        description\n      }\n    }\n  }\n`\n\nexport default HomePage\n```\n\n----------------------------------------\n\nTITLE: Example diff for import-link codemod\nDESCRIPTION: This diff shows the transformation performed by the `import-link` codemod. It updates the import statement for the `Link` component, replacing `gatsby-link` with `gatsby`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-codemods/README.md#_snippet_9\n\nLANGUAGE: Diff\nCODE:\n```\n- import Link from \"gatsby-link\"\n+ import { Link } from \"gatsby\"\n\nexport default props => (\n  <Link to=\">Home</Link>\n)\n```\n\n----------------------------------------\n\nTITLE: Using the Gatsby Link component with pathPrefix\nDESCRIPTION: This code snippet demonstrates how to use the Gatsby `Link` component to navigate between pages within a Gatsby application configured with a `pathPrefix`. The `Link` component automatically handles path prefixing, ensuring that links are correctly prefixed with the configured `pathPrefix` value.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/previews-deploys-hosting/path-prefix.md#_snippet_4\n\nLANGUAGE: JSX\nCODE:\n```\nimport React from \"react\"\nimport { Link } from \"gatsby\"\nimport Layout from \"../components/layout\"\n\nfunction Index() {\n  return (\n    <Layout>\n      {/* highlight-next-line */}\n      <Link to=\"page-2\">Page 2</Link>\n    </Layout>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Navigation Bar Component (React/JSX)\nDESCRIPTION: This React component, NavBar, creates a basic navigation bar with links to Home, Profile, and Logout. Currently, it acts as a placeholder and doesn't have any actual authentication logic. It uses Gatsby's Link component for navigation.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/authentication-tutorial.md#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\"\nimport { Link } from \"gatsby\"\n\nexport default function NavBar() {\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        flex: \"1\",\n        justifyContent: \"space-between\",\n        borderBottom: \"1px solid #d1c1e0\",\n      }}\n    >\n      <span>You are not logged in</span>\n\n      <nav>\n        <Link to=\"/\">Home</Link>\n        {` `}\n        <Link to=\"/\">Profile</Link>\n        {` `}\n        <Link to=\"/\">Logout</Link>\n      </nav>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Gatsby Shopify Plugin\nDESCRIPTION: This command installs the `gatsby-source-shopify` plugin, which is essential for fetching data from Shopify into your Gatsby project. This is a necessary prerequisite for connecting your Gatsby site to your Shopify store.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/building-an-ecommerce-site-with-shopify.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install gatsby-source-shopify\n```\n\n----------------------------------------\n\nTITLE: Configuration Example with Details Tag (JavaScript)\nDESCRIPTION: Presents an example configuration that utilizes the details option to render custom blocks as HTML details elements. It showcases how to configure different blocks with varying classes and title settings.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-custom-blocks/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n  blocks: {\n    danger: {\n      classes: \"danger\",\n      details: true,\n    },\n    info: {\n      title: \"optional\",\n      details: true,\n    },\n  },\n```\n\n----------------------------------------\n\nTITLE: Updating MDX Content for Gatsby MDX v4\nDESCRIPTION: This code snippet illustrates how to update MDX content to be compatible with MDX v2, which is used by Gatsby Plugin MDX v4.  It shows how to escape curly brackets that are used in non-code contexts. Failing to escape curly brackets causes build errors.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-mdx/README.md#_snippet_25\n\nLANGUAGE: diff\nCODE:\n```\n- You can upload this to Git{Hub,Lab}\n+ You can upload this to `Git{Hub,Lab}`\n```\n\n----------------------------------------\n\nTITLE: Configure Plugin in gatsby-config.js\nDESCRIPTION: This code snippet shows how to add a plugin to the `plugins` array in your `gatsby-config.js` file. The `module.exports` object is configured to include the plugin name in the `plugins` array, enabling it for use in your Gatsby site. The `siteMetadata` object provides basic site information.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-3/index.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  siteMetadata: {\n    title: \"My First Gatsby Site\",\n  },\n  // highlight-next-line\n  plugins: [\"plugin-name\"],\n};\n```\n\n----------------------------------------\n\nTITLE: Plain Object Node Creation Example JavaScript\nDESCRIPTION: This JavaScript code snippet shows an example of creating a node with a plain object.  Gatsby saves the top-level node as-is to Redux and tracks the subobject's root NodeID using Node Tracking, but does not extract the subobject into its own node.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/node-creation.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  foo: 'bar',\n  baz: {\n    car: 10\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Data from GraphQL API with fetchGraphQL\nDESCRIPTION: This code snippet demonstrates how to fetch data from a GraphQL API using the `fetchGraphQL` utility. It imports the necessary modules and defines the `sourceNodes` function to make a request to the API endpoint. The endpoint and query are defined, and the result is stored in the `data` variable.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/creating-a-source-plugin/part-2/index.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { GatsbyNode } from \"gatsby\"\nimport { fetchGraphQL } from \"./utils\"\n\nexport const sourceNodes: GatsbyNode[`sourceNodes`] = async (gatsbyApi) => {\n  const { data } = await fetchGraphQL(\n    `http://localhost:4000/graphql`,\n    ``\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Linking to WordPress Posts in Gatsby JSX\nDESCRIPTION: This code snippet demonstrates how to link to individual WordPress posts from the homepage in a Gatsby application. It imports the Link component from Gatsby, queries for post titles and slugs, and wraps the post titles with the Link component, referencing the slug for navigation. The GraphQL query retrieves the title, excerpt, and slug from all WordPress posts, sorted by date.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-wordpress/docs/tutorials/building-a-new-site-wordpress-and-gatsby.md#_snippet_10\n\nLANGUAGE: JSX\nCODE:\n```\nimport React from \"react\"\nimport { Link, graphql } from \"gatsby\" //highlight-line\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\n\nexport default function Home({ data }) {\n  return (\n    <Layout>\n      <SEO title=\"home\" />\n      <h1>My WordPress Blog</h1>\n      <h4>Posts</h4>\n      {data.allWpPost.nodes.map(node => (\n        <div key={node.slug}>\n          {/* highlight-start */}\n          <Link to={node.slug}>\n            <p>{node.title}</p>\n          </Link>\n          {/* highlight-end */}\n          <div dangerouslySetInnerHTML={{ __html: node.excerpt }} />\n        </div>\n      ))}\n    </Layout>\n  )\n}\n\nexport const pageQuery = graphql`\n  query {\n    allWpPost(sort: { fields: [date] }) {\n      nodes {\n        title\n        excerpt\n        slug\n      }\n    }\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: gatsby-config.js: Advanced GraphQL Source Configuration (JavaScript)\nDESCRIPTION: Illustrates an advanced configuration of gatsby-source-graphql that includes HTTP headers for authentication using environment variables. It also shows how to use an async function to generate headers. This setup allows secure access to authenticated GraphQL APIs.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-graphql/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// In your gatsby-config.js\nmodule.exports = {\n  plugins: [\n    // Advanced config, passing parameters to apollo-link\n    {\n      resolve: \"gatsby-source-graphql\",\n      options: {\n        typeName: \"GitHub\",\n        fieldName: \"github\",\n        url: \"https://api.github.com/graphql\",\n        // HTTP headers\n        headers: {\n          // Learn about environment variables: https://gatsby.dev/env-vars\n          Authorization: `Bearer ${process.env.GITHUB_TOKEN}`,\n        },\n        // HTTP headers alternatively accepts a function (allows async)\n        headers: async () => {\n          return {\n            Authorization: await getAuthorizationToken(),\n          }\n        },\n        // Additional options to pass to node-fetch\n        fetchOptions: {},\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Updating MDX Node Queries in Gatsby\nDESCRIPTION: This code snippet demonstrates changes to GraphQL queries for MDX nodes after migration. It involves removing direct access to fields like `timeToRead`, `rawBody`, and `html`, and instead accessing them through the `fields` property or re-implementing them.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-mdx/README.md#_snippet_26\n\nLANGUAGE: diff\nCODE:\n```\n {\n-  timeToRead\n-  rawBody\n-  slug\n   headings\n-  html\n-  mdxAST\n-  wordCount\n-  fileAbsolutePath\n+  body\n+  fields {\n+    timeToRead\n+    slug\n+  }\n+  internal {\n+    contentFilePath\n+  }\n }\n```\n\n----------------------------------------\n\nTITLE: Exclude MediaItem Fields to Speed up Fetching\nDESCRIPTION: Demonstrates excluding non-essential MediaItem fields to improve fetching speed when using Image CDN in Gatsby. It lists numerous fields related to content, SEO, and relationships that can be excluded from the GraphQL query.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-wordpress/docs/features/media-item-processing.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n    resolve: `gatsby-source-wordpress`,\n    options: {\n        url: process.env.WPGRAPHQL_URL,\n        type: {\n            MediaItem: {\n              excludeFieldNames: [\n                \"contentNodes\",\n                \"seo\",\n                \"ancestors\",\n                \"author\",\n                \"template\",\n                \"lastEditedBy\",\n                \"authorDatabaseId\",\n                \"authorId\",\n                \"contentTypeName\",\n                \"dateGmt\",\n                \"desiredSlug\",\n                \"enclosure\",\n                \"isContentNode\",\n                \"isTermNode\",\n                \"modified\",\n                \"modifiedGmt\",\n                \"parentDatabaseId\",\n                \"parentId\",\n                \"srcSet\",\n                \"parent\",\n                \"children\"\n              ]\n            },\n        },\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Gatsby Theme Options\nDESCRIPTION: This code snippet demonstrates how to configure options for a Gatsby theme, such as `gatsby-theme-blog`, within the `gatsby-config.js` file. It shows how to set the `basePath` option.  The `resolve` property specifies the theme to configure, and the `options` object contains the configuration settings.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/plugins-and-themes/using-a-gatsby-theme.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-theme-blog`,\n      options: {\n        /*\n        - basePath defaults to `/`\n        */\n        basePath: `/blog`,\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Shared View Component\nDESCRIPTION: This code snippet shows how to use a shared view component (`ProductView`) to render product information in multiple collection routes. The component receives product data as a prop. This promotes code reuse and consistency across different routes.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/routing/file-system-route-api.md#_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from \"react\"\nimport { graphql } from \"gatsby\"\nimport ProductView from \"../../views/product-view\"\n\nfunction Product(props) {\n  const { product } = props.data\n  return <ProductView product={product} />\n}\n\nexport default Product\n\nexport const query = graphql`\n  query($id: String!) {\n    product(id: { eq: $id }) {\n      name\n      description\n      appearance\n      meta {\n        createdAt\n        id\n        sku\n      }\n    }\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: React Context Provider in Gatsby (browser)\nDESCRIPTION: This snippet demonstrates how to wrap the root element of a Gatsby site in a React Context Provider within `gatsby-browser.js`, making the context available across all pages. This is used for global state management.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/porting-from-create-react-app-to-gatsby.md#_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\"\n\nconst defaultTheme = \"light\"\nexport const ThemeContext = React.createContext(defaultTheme)\n\nexport const wrapRootElement = ({ element }) => {\n  return (\n    <ThemeContext.Provider value={defaultTheme}>\n      {element}\n    </ThemeContext.Provider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Querying multiple fields with useStaticQuery\nDESCRIPTION: This example demonstrates how to fetch multiple fields using a single `useStaticQuery` call.  It retrieves data from both the `site` and `siteBuildMetadata` fields.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-4/index.mdx#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst data = useStaticQuery(graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    siteBuildMetadata {\n      buildTime\n    }\n  }\n`)\n```\n\n----------------------------------------\n\nTITLE: Import Gatsby Cypress Commands in TypeScript\nDESCRIPTION: This code imports the `gatsby-cypress` commands in the `cypress/support/e2e.ts` file. This is required to use the custom Cypress commands provided by the `gatsby-cypress` package.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/testing/end-to-end-testing.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport \"gatsby-cypress/commands\"\n```\n\n----------------------------------------\n\nTITLE: Using the Gatsby navigate function with pathPrefix\nDESCRIPTION: This code snippet demonstrates how to use the Gatsby `navigate` function for programmatic navigation within a Gatsby application configured with a `pathPrefix`. The `navigate` function automatically handles path prefixing, ensuring that navigation is correctly prefixed with the configured `pathPrefix` value.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/previews-deploys-hosting/path-prefix.md#_snippet_5\n\nLANGUAGE: JSX\nCODE:\n```\nimport React from \"react\"\nimport { navigate } from \"gatsby\"\nimport Layout from \"../components/layout\"\n\nexport default function Index() {\n  return (\n    <Layout>\n      {/* Note: this is an intentionally contrived example, but you get the idea! */}\n      {/* highlight-next-line */}\n      <button onClick={() => navigate(\"/page-2\")}>\n        Go to page 2, dynamically\n      </button>\n    </Layout>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using NodeModel in gatsby-node.js\nDESCRIPTION: This code snippet demonstrates how to use `context.nodeModel.findOne` within a `gatsby-node.js` file to resolve a GraphQL query. It defines a resolver for the `mood` field, which queries for a node of type `Coffee` and returns a different emoji based on whether a node is found.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/graphql-data-layer/node-model.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ncreateResolvers({\n  Query: {\n    mood: {\n      type: `String`,\n      resolve: async (source, args, context, info) => {\n        const item = await context.nodeModel.findOne({ type: `Coffee` })\n        if (!item) {\n          return üòû\n        }\n        return üòä\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Default Theme UI Shadow File - JavaScript\nDESCRIPTION: This code snippet creates a minimal `index.js` file within the `src/gatsby-plugin-theme-ui` directory.  This file is used for theme shadowing and should export a theme object.  This is the starting point for customizing the theme.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/styling/theme-ui.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default {}\n```\n\n----------------------------------------\n\nTITLE: Applying CSS prop to Shadowed NewsletterCTA (JSX)\nDESCRIPTION: This code demonstrates how to apply CSS to a component using the Emotion CSS prop, allowing styling changes without affecting the component's functionality.  It shows modifying the background color, text color and box shadow.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/plugins-and-themes/shadowing.md#_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { NewsletterCTA } from \"gatsby-theme-blog/src/components/newsletter\"\n\nexport default function CallToAction(props) {\n  return (\n    <NewsletterCTA\n      css={{\n        backgroundColor: \"rebeccapurple\",\n        color: \"white\",\n        boxShadow: \"none\",\n      }}\n      {...props}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query for Images in Gatsby\nDESCRIPTION: Shows how to construct a GraphQL query to retrieve image data using `childImageSharp` and `gatsbyImageData` for non-static images in Gatsby. The query filters for a specific image file using its relative path and requests processed image data with specified maxWidth, layout, and placeholder options.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/v2.26/index.md#_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  file(relativePath: { eq: \"plant.jpg\" }) {\n    childImageSharp {\n      gatsbyImageData(maxWidth: 720, layout: FLUID, placeholder: TRACED_SVG)\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL query for MongoDB data\nDESCRIPTION: A sample GraphQL query for fetching all MongoDB document nodes from a specified database and collection. This demonstrates how to access the data pulled from MongoDB using GraphQL in a Gatsby project.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-mongodb/README.md#_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  allMongodbCloudDocuments {\n    edges {\n      node {\n        id\n        url\n        name\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Query for MediaItem Public URL in Gatsby\nDESCRIPTION: Illustrates how to query for the `WpMediaItem.localFile.publicURL` field in GraphQL to get the public URL of media files. This allows direct file links to be used for downloads or other purposes.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-wordpress/docs/features/media-item-processing.md#_snippet_5\n\nLANGUAGE: GraphQL\nCODE:\n```\nquery {\n  allWpPost {\n    nodes {\n      featuredImage {\n        node {\n          localFile {\n            publicURL\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Gatsby Site\nDESCRIPTION: This command uses the Gatsby CLI to create a new Gatsby site named 'prismic-tutorial' based on the 'gatsby-starter-hello-world' starter template.  The 'prismic-tutorial' part can be changed to the desired project name.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/sourcing-data/sourcing-from-prismic.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngatsby new prismic-tutorial https://github.com/gatsbyjs/gatsby-starter-hello-world\n```\n\n----------------------------------------\n\nTITLE: Highlighting and Hiding Lines in JSX with gatsby-remark-prismjs\nDESCRIPTION: This JSX snippet demonstrates how to combine line highlighting and hiding within the same file using special comments.  It utilizes `highlight-next-line`, `highlight-range`, and `hide-line` along with `hide-range` to control the visibility of specific lines when embedded with `gatsby-remark-prismjs`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/using-remark/src/pages/2017-04-05---embed-snippets/index.md#_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n/* hide-range{1-3} */\nimport React from \"react\"\nimport ReactDOM from \"react-dom\"\n\n// highlight-next-line\nconst name = `Brian`\n\n// highlight-range{4-5}\n// hide-next-line\nReactDOM.render(\n  <div>\n    <h1>Hello, ${name}!</h1>\n    <h2>Welcome to this example</h2>\n  </div>,\n  document.getElementById(`root`) // hide-line\n) // hide-line\n```\n\n----------------------------------------\n\nTITLE: Remove useNavigate import (Diff)\nDESCRIPTION: Removes the `useNavigate` hook import from `@gatsbyjs/reach-router` and suggests using the `navigate` function from `gatsby` instead. This is due to updates in the router to be compatible with React 18 and React Server Components.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v4-to-v5.md#_snippet_14\n\nLANGUAGE: Diff\nCODE:\n```\n- import { useNavigate } from \"@gatsbyjs/reach-router\"\n+ import { navigate } from \"gatsby\"\n```\n\n----------------------------------------\n\nTITLE: Config Function for DSG based on Post Date\nDESCRIPTION: This code snippet configures Deferred Static Generation (DSG) based on the date of a blog post. It queries all posts older than 2021-10-31 and marks them as deferred. The inner function compares the current slug with the set of old posts to determine if the page should be deferred. Requires `gatsby-transformer-remark`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/rendering-options/using-deferred-static-generation.md#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nexport async function config() {\n  const { data } = graphql`\n    {\n      oldPosts: allMarkdownRemark(\n        filter: { frontmatter: { date: { lt: \"2021-10-31\" } } }\n      ) {\n        nodes {\n          frontmatter {\n            slug\n          }\n        }\n      }\n    }\n  `\n\n  const oldPosts = new Set(data.oldPosts.nodes.map(n => n.frontmatter.slug))\n\n  return ({ params }) => {\n    return {\n      defer: oldPosts.has(params.frontmatter__slug)\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing js-yaml dependency\nDESCRIPTION: This command installs the js-yaml package, which is required for loading and parsing YAML files safely when building a Gatsby site sourced from YAML.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/sourcing-data/sourcing-from-json-or-yaml.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnpm install js-yaml\n```\n\n----------------------------------------\n\nTITLE: Providing State to Link Component JSX\nDESCRIPTION: This JSX snippet illustrates how to pass state to a linked component using the `state` prop in the `<Link>` component. This allows you to provide additional context or data to the target component upon navigation.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/location-data-from-props.md#_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n// usually you'd do this\n<Link to=\"/somepagecomponent\"/>\n\n// but if you want to add some additional state\n<Link\n  to={'/somepagecomponent'}\n  state={{modal: true}}\n/>\n```\n\n----------------------------------------\n\nTITLE: TypegenPage Component with GraphQL Query\nDESCRIPTION: This React component fetches data using a GraphQL query and displays the site title.  The query's name (`TypegenPage`) is crucial for automatic type generation. The component utilizes Gatsby's `graphql` and `PageProps` for data fetching and type safety. This snippet shows basic query usage.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/local-development/graphql-typegen.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as React from \"react\"\nimport { graphql, PageProps } from \"gatsby\"\n\nconst TypegenPage = ({ data }: PageProps) => {\n  return (\n    <main style={pageStyles}>\n      <p>Site title: TODO</p>\n      <hr />\n      <p>Query Result:</p>\n      <pre>\n        <code>{JSON.stringify(data, null, 2)}</code>\n      </pre>\n    </main>\n  )\n}\n\nexport default TypegenPage\n\nexport const query = graphql`\n  query TypegenPage {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: Setting Sanity Project Credentials in .env\nDESCRIPTION: This snippet shows how to define environment variables for Sanity project ID, dataset, and token in a .env file.  These variables are used to avoid hardcoding sensitive information directly in the code and are loaded by the Gatsby configuration.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/sourcing-from-sanity.md#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nSANITY_PROJECT_ID = abc123\nSANITY_DATASET = production\nSANITY_TOKEN = my-super-secret-token\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering Based on __typename (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates how to use the `__typename` field from the GraphQL query to conditionally render different components based on the type of each node in the `allTeamMember` query results. It uses a `switch` statement to determine which component to render.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/graphql-data-layer/schema-customization.md#_snippet_44\n\nLANGUAGE: JavaScript\nCODE:\n```\ndata.allTeamMember.nodes.map(node => {\n  switch (node.__typename) {\n    case `AuthorJson`:\n      return <Author {...node} />\n    case `ContributorJson`:\n      return <Contributor {...node} />\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Highlighting Lines in React (JSX)\nDESCRIPTION: This snippet demonstrates how to highlight a specific line and a range of lines in a React component using `highlight-line` and `highlight-range` comments. It imports React and ReactDOM, defines a simple component, and renders it to the DOM.  The `name` variable declaration is highlighted, and a range of lines within the JSX is also highlighted.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-embed-snippet/README.md#_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\"\nimport ReactDOM from \"react-dom\"\n\nconst name = \"Brian\" // highlight-line\n\nReactDOM.render(\n  <div>\n    {/* highlight-range{1-3} */}\n    <h1>Hello, ${name}!</h1>\n  </div>,\n  document.getElementById(\"root\")\n)\n```\n\n----------------------------------------\n\nTITLE: Rendering Blog Posts in a Gatsby Component\nDESCRIPTION: This React component takes an array of blog post data as a prop and renders a list of blog posts, displaying the title and date of each post.  The title is rendered using `RichText.asText` from `prismic-reactjs`. The component iterates through the `posts` array and generates a `div` for each post, using the post's `id` as the key.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/prismic-source-graphql-tutorial.md#_snippet_6\n\nLANGUAGE: JSX\nCODE:\n```\nconst BlogPosts = ({ posts }) => {\n  if (!posts) return null\n  return (\n    <div>\n      {posts.map(post => {\n        return (\n          <div key={post.node._meta.id}>\n            <h2>{RichText.asText(post.node.title)}</h2>\n            <p>\n              <time>{post.node.date}</time>\n            </p>\n          </div>\n        )\n      })}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Querying ACF fields in Gatsby\nDESCRIPTION: This GraphQL query fetches a WordPress post in Gatsby using the gatsby-source-wordpress plugin. It filters posts by their database ID (2068) using the `wpPost` node. The query retrieves the post's ID, title, and the `textField` value from the `testPostFields` ACF field group.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-wordpress/docs/tutorials/using-advanced-custom-fields.md#_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  wpPost(databaseId: { eq: 2068 }) {\n    id\n    title\n    testPostFields {\n      textField\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Combine Operators with GraphQL\nDESCRIPTION: This query combines the `regex` and `ne` operators to filter MarkdownRemark nodes. It first filters for titles containing `/History/`, then excludes \"History of Magic\", resulting in only \"Hogwarts: A History\".\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/graphql-reference.md#_snippet_15\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  allMarkdownRemark(\n    filter: {\n      frontmatter: { title: { regex: \"/History/\", ne: \"History of Magic\" } }\n    }\n  ) {\n    totalCount\n    edges {\n      node {\n        frontmatter {\n          title\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring gatsby-plugin-manifest in gatsby-config.js\nDESCRIPTION: This code snippet demonstrates the basic configuration of the gatsby-plugin-manifest in the gatsby-config.js file. It sets the name, short_name, start_url, background_color, theme_color, and display options for the web app manifest. The resolve property specifies the plugin to use.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-manifest/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// in gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-manifest`,\n      options: {\n        name: `GatsbyJS`,\n        short_name: `GatsbyJS`,\n        start_url: `/`,\n        background_color: `#f7f0eb`,\n        theme_color: `#a2466c`,\n        display: `standalone`,\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Theme Options in gatsby-config.js\nDESCRIPTION: This code snippet illustrates how to access theme options within a theme's gatsby-config.js file. By exporting a function instead of a plain object, you can receive the options passed by the user. The `themeOptions` argument contains the configured values, which can be used to customize the theme's behavior.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/theme-api.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = themeOptions => {\n  console.log(themeOptions)\n  // logs `postsPath` and `colors`\n\n  return {\n    plugins: [\n      // ...\n    ],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Favicon with gatsby-plugin-manifest in JavaScript\nDESCRIPTION: This code snippet demonstrates how to disable the automatic favicon generation in the gatsby-plugin-manifest plugin by setting the `include_favicon` option to `false` in the gatsby-config.js file. This prevents the plugin from adding a `<link rel=\"icon\" />` tag to the document head.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-manifest/README.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// in gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-manifest`,\n      options: {\n        name: `GatsbyJS`,\n        short_name: `GatsbyJS`,\n        start_url: `/`,\n        background_color: `#f7f0eb`,\n        theme_color: `#a2466c`,\n        display: `standalone`,\n        icon: `src/images/icon.png`, // This path is relative to the root of the site.\n        include_favicon: false, // This will exclude favicon link tag\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Tags Index Page (src/pages/tags.js)\nDESCRIPTION: This React component renders a page listing all available tags with links to their respective tag pages. It queries the data layer to retrieve all tags and the number of posts associated with each tag.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/adding-tags-and-categories-to-blog-posts.md#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\n\n// Utilities\nimport kebabCase from \"lodash/kebabCase\"\n\n// Components\nimport { Helmet } from \"react-helmet\"\nimport { Link, graphql } from \"gatsby\"\n\nconst TagsPage = ({ \n  data: {\n    allMarkdownRemark: { group },\n    site: {\n      siteMetadata: { title },\n    },\n  },\n}) => (\n  <div>\n    <Helmet title={title} />\n    <div>\n      <h1>Tags</h1>\n      <ul>\n        {group.map(tag => (\n          <li key={tag.fieldValue}>\n            <Link to={`/tags/${kebabCase(tag.fieldValue)}/`}>\n              {tag.fieldValue} ({tag.totalCount})\n            </Link>\n          </li>\n        ))}\n      </ul>\n    </div>\n  </div>\n)\n\nTagsPage.propTypes = {\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      group: PropTypes.arrayOf(\n        PropTypes.shape({\n          fieldValue: PropTypes.string.isRequired,\n          totalCount: PropTypes.number.isRequired,\n        }).isRequired\n      ),\n    }),\n    site: PropTypes.shape({\n      siteMetadata: PropTypes.shape({\n        title: PropTypes.string.isRequired,\n      }),\n    }),\n  }),\n}\n\nexport default TagsPage\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(limit: 2000) {\n      group(field: { frontmatter: { tags: SELECT }}) {\n        fieldValue\n        totalCount\n      }\n    }\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: Installing and Using Node.js with NVM\nDESCRIPTION: This snippet installs a specific version of Node.js (version 18 in this example) using NVM and then instructs NVM to use that version.  It is crucial for ensuring the correct Node.js version is used for Gatsby development.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/local-development/gatsby-on-linux.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnvm install 18\nnvm use 18\n```\n\n----------------------------------------\n\nTITLE: Adding Video Data to Markdown Frontmatter\nDESCRIPTION: This code shows how to include video URL and title in the frontmatter of a Markdown file.  These values can then be queried with GraphQL and passed as props to the video component, making the video data dynamic and manageable within content files.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/images-and-media/working-with-video.md#_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n---\npath: \"/blog/my-first-post\"\ndate: \"2019-03-27\"\ntitle: \"My first blog post\"\nvideoSrcURL: https://www.youtube.com/embed/dQw4w9WgXcQ\nvideoTitle: \"Gatsby is Never Gonna Give You Up\"\n---\n```\n\n----------------------------------------\n\nTITLE: Fetching Referenced Media Items\nDESCRIPTION: This snippet details the process of fetching MediaItem nodes (WPGraphQL File nodes) by analyzing other node types for connection IDs using regular expressions. It allows fetching only MediaItems that are actually used on the site, improving efficiency. The plugin implements retry logic for failed requests by adding them to the end of the queue.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-wordpress/ARCHITECTURE.md#_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Creating a Node with createNode in gatsby-node.ts\nDESCRIPTION: This code snippet demonstrates how to use the `createNode` action to create a node in Gatsby. It includes defining the node's `id`, `internal.type`, and `internal.contentDigest` properties, along with arbitrary data.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/creating-a-source-plugin/part-2/index.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { GatsbyNode, NodeInput } from \"gatsby\"\n\nexport const sourceNodes: GatsbyNode[`sourceNodes`] = (gatsbyApi) => {\n  // Your arbitrary, serializable data\n  const yourData = {\n    hello: `world`,\n  }\n\n  const node = {\n    ...yourData,\n    // Required fields\n    id: gatsbyApi.createNodeId(`some-string`),\n    internal: {\n      type: `TypeName`,\n      contentDigest: gatsbyApi.createContentDigest(yourData)\n    }\n  } satisfies NodeInput\n\n  gatsbyApi.actions.createNode(node)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring gatsby-plugin-fullstory in gatsby-config.js\nDESCRIPTION: This code snippet demonstrates how to configure the `gatsby-plugin-fullstory` plugin in your `gatsby-config.js` file. It requires the `fs_org` option to be set to your Fullstory organization ID. This configuration ensures that the Fullstory tracking code is added to your Gatsby site.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-fullstory/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// In your gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-fullstory`,\n      options: {\n        fs_org: YOUR_ORG_ID,\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Install Gatsby CLI Globally\nDESCRIPTION: This command installs the Gatsby CLI globally using npm, making Gatsby commands available system-wide. This allows you to use commands like `gatsby new`, `gatsby develop`, and `gatsby build` from your terminal.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/glossary/build.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install -g gatsby-cli\n```\n\n----------------------------------------\n\nTITLE: Configuring dataLoaderOptions in gatsby-source-graphql (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to configure the `dataLoaderOptions` in the `gatsby-source-graphql` plugin to override the default `maxBatchSize`. The `dataLoaderOptions` allows for customizing the DataLoader used for query batching, and the `maxBatchSize` option controls the maximum number of queries batched together.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-graphql/README.md#_snippet_12\n\nLANGUAGE: js\nCODE:\n```\nconst fs = require(\"fs\")\nconst { buildSchema, buildClientSchema } = require(\"graphql\")\n\nmodule.exports = {\n  plugins: [\n    {\n      resolve: \"gatsby-source-graphql\",\n      options: {\n        typeName: \"SWAPI\",\n        fieldName: \"swapi\",\n        url: \"https://api.graphcms.com/simple/v1/swapi\",\n        batch: true,\n        // See https://github.com/graphql/dataloader#new-dataloaderbatchloadfn--options\n        // for a full list of DataLoader options\n        dataLoaderOptions: {\n          maxBatchSize: 10,\n        },\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Components as Shortcodes in MDX\nDESCRIPTION: This code snippet demonstrates how to use components defined as shortcodes within an MDX file. It shows rendering a TomatoBox component containing a YouTube component without needing to import these components in the MDX file because they were made available globally via the MDXProvider.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-mdx/README.md#_snippet_20\n\nLANGUAGE: MDX\nCODE:\n```\n# Hello, world!\n\nHere's a YouTube embed\n\n<TomatoBox>\n  <YouTube id=\"123abc\" />\n</TomatoBox>\n```\n\n----------------------------------------\n\nTITLE: Hashing with gatsby-core-utils (JS)\nDESCRIPTION: Demonstrates hashing functionalities re-exported from or used within `gatsby-core-utils`, intended to substitute Node.js's `crypto` module, particularly for larger inputs. It shows how to create MD5 and SHA hashes of strings and files.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-core-utils/README.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { md5File, md5, createMD5, sha256, sha1 } = require(\"gatsby-core-utils\")\n\n// For md5, createMD5, sha256, sha1 refer to hash-wasm\nawait md5(`some-string`)\n\n// md5File gives you the MD5 hex hash for a given filepath\nawait md5File(`package.json`)\n```\n\n----------------------------------------\n\nTITLE: Define GraphQL types using Gatsby Type Builders TypeScript\nDESCRIPTION: This snippet shows how to use Gatsby Type Builders to define GraphQL types.  It uses `schema.buildObjectType` to create `User` and `UserAddress` types.  The `User` type implements the `Node` interface.  The `street` field in `UserAddress` is defined as Non-Null (`String!`). Type Builders are suited for dynamic schemas.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/creating-a-source-plugin/part-3/index.mdx#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport type { GatsbyNode } from \"gatsby\"\n\nexport const createSchemaCustomization: GatsbyNode[`createSchemaCustomization`] =\n  ({ actions, schema }) => {\n    const { createTypes } = actions\n\n    const typeDefs = [\n      schema.buildObjectType({\n        name: `User`,\n        interfaces: [`Node`],\n        fields: {\n          address: `UserAddress`,\n        },\n      }),\n      schema.buildObjectType({\n        name: `UserAddress`,\n        fields: {\n          street: {\n            type: `String!`,\n          },\n          state: `String`,\n        },\n      }),\n    ]\n\n    createTypes(typeDefs)\n  }\n```\n\n----------------------------------------\n\nTITLE: Helper Function to Transform YAML Data to Gatsby Nodes\nDESCRIPTION: This JavaScript function `transformObject` takes a JavaScript object derived from YAML, an ID, and a type, and then converts it into a Gatsby node using the `createNode` action.  It constructs the node's properties, including content digest, type, and parent-child relationships. It expects the `createNode` function to be available in the scope.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/plugins-and-themes/creating-a-transformer-plugin.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfunction transformObject(obj, id, type) {\n  const yamlNode = {\n    ...obj,\n    id,\n    children: [],\n    parent: null,\n    internal: {\n      contentDigest: createContentDigest(obj),\n      type,\n    },\n  }\n  createNode(yamlNode)\n}\n```\n\n----------------------------------------\n\nTITLE: Example User Stylesheet CSS\nDESCRIPTION: This CSS code is an example of a user stylesheet that targets the `.container` class. It demonstrates how end users can override the default styles applied by Styled Components.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/styling/styled-components.md#_snippet_6\n\nLANGUAGE: CSS\nCODE:\n```\n.container {\n  margin: 5rem auto;\n  font-size: 1.3rem;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Required Directories in Gatsby Theme\nDESCRIPTION: The `onPreBootstrap` hook allows you to initialize required directories like 'posts' or 'src/pages' if your theme depends on their existence. This prevents build crashes when Gatsby expects these directories to be present. It uses `fs.existsSync` to check for directory existence and `mkdirp.sync` to create them if they are missing. The `reporter` is used to log the directory creation.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/plugins-and-themes/theme-conventions.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexports.onPreBootstrap = ({ store, reporter }) => {\n  const { program } = store.getState()\n\n  const dirs = [\n    path.join(program.directory, \"posts\"),\n    path.join(program.directory, \"src/pages\"),\n    path.join(program.directory, \"src/data\"),\n  ]\n\n  dirs.forEach(dir => {\n    if (!fs.existsSync(dir)) {\n      reporter.log(`creating the ${dir} directory`)\n      mkdirp.sync(dir)\n    }\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying multiple compatible Gatsby versions (JSON)\nDESCRIPTION: This code demonstrates how to specify multiple major Gatsby versions that the adapter is compatible with, using the `||` operator.  This allows the adapter to work with both Gatsby 5 and Gatsby 6.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/previews-deploys-hosting/creating-an-adapter.md#_snippet_8\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"peerDependencies\": {\n    \"gatsby\": \"^5.0.0 || ^6.0.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Captions to Video Player in Gatsby with JSX\nDESCRIPTION: This code snippet demonstrates how to add captions to a video player in Gatsby using the HTML5 `<track>` element. It imports a video file and a VTT caption file, then nests the `<track>` element within the `<video>` element, specifying the kind, language, and source of the captions. The file-loader! prefix helps webpack import the .vtt caption file.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/images-and-media/working-with-video.md#_snippet_7\n\nLANGUAGE: JSX\nCODE:\n```\nimport React from \"react\"\nimport DogMp4 from \"../assets/dog.mp4\"\nimport Captions from \"file-loader!../assets/captions.vtt\" // highlight-line\n\nexport default function Home() {\n  return (\n    <video controls>\n      <source src={DogMp4} type=\"video/mp4\" />\n      // highlight-start\n      <track kind=\"captions\" srcLang=\"en\" src={Captions} />\n      // highlight-end\n    </video>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Image CDN\nDESCRIPTION: Configuration to explicitly disable Image CDN functionality and prevent fetching of extra image metadata. This is useful if `skipFileDownloads` is needed but Image CDN is not desired.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-drupal/README.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n  {\n    resolve: `gatsby-source-drupal`,\n    options: {\n      imageCDN: false,\n      // other plugin options go here\n    },\n  },\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query for Site Metadata JavaScript\nDESCRIPTION: This JavaScript code snippet shows a minimal GraphQL query to retrieve site-wide metadata, specifically the title.  The query is named SiteMetadataLookup and accepts a slug parameter.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v0-to-v1.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const pageQuery = graphql`\n  query SiteMetadataLookup($slug: String!) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: Adding Plugin to gatsby-config.js\nDESCRIPTION: This code snippet demonstrates how to add the gatsby-transformer-react-docgen plugin to the gatsby-config.js file. This enables the plugin to process React component files and extract documentation.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-react-docgen/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  plugins: [`gatsby-transformer-react-docgen`],\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Gatsby image plugins in gatsby-config.js\nDESCRIPTION: This snippet shows how to configure the installed Gatsby plugins in the `gatsby-config.js` file.  This step is essential to enable the plugins for your Gatsby site.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/image-migration-guide.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`,\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Using createFilePath in gatsby-node.js\nDESCRIPTION: Demonstrates how to use the `createFilePath` helper function in gatsby-node.js to generate URL paths from file paths. It extracts the relative file path based on a base path and creates a new 'slug' field on the node for querying.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-filesystem/README.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { createFilePath } = require(`gatsby-source-filesystem`)\n\nexports.onCreateNode = ({ node, getNode, actions }) => {\n  const { createNodeField } = actions\n  // Ensures we are processing only markdown files\n  if (node.internal.type === \"MarkdownRemark\") {\n    // Use `createFilePath` to turn markdown files in our `src/content` directory into `/blog/slug`\n    const relativeFilePath = createFilePath({\n      node,\n      getNode,\n      basePath: \"src/content\",\n    })\n\n    // Creates new query'able field with name of 'slug'\n    createNodeField({\n      node,\n      name: \"slug\",\n      value: `/blog${relativeFilePath}`,\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Dynamic Navigation in Header (JSX)\nDESCRIPTION: This JSX code within the `Header` component iterates over the `menuLinks` array and dynamically renders a list of navigation links. Each link is created using the `Link` component from Gatsby, with the `to` prop set to the `link` property of the menu item and the displayed text set to the `name` property.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/creating-dynamic-navigation.md#_snippet_4\n\nLANGUAGE: JSX\nCODE:\n```\nimport React from \"react\"\nimport { Link } from \"gatsby\"\nimport PropTypes from \"prop-types\"\n\nconst Header = ({ siteTitle, menuLinks }) => (\n  <header\n    style={{\n      background: \"rebeccapurple\",\n      marginBottom: \"1.45rem\",\n    }}\n  >\n    <div\n      style={{\n        background: \"rebeccapurple\",\n        marginBottom: \"1.45rem\",\n      }}\n    >\n      <div\n        style={{\n          margin: \"0 auto\",\n          maxWidth: 960,\n          padding: \"1.45rem 1.0875rem\",\n          display: \"flex\",\n          justifyItems: \"space-between\",\n          alignItems: \"center\",\n        }}\n      >\n        <h1 style={{ margin: 0, flex: 1 }}>\n          <Link\n            to=\"/\"\n            style={{\n              color: \"white\",\n              textDecoration: \"none\",\n            }}\n          >\n            {siteTitle}\n          </Link>\n        </h1>\n        // highlight-start\n        <div>\n          <nav>\n            <ul style={{ display: \"flex\", flex: 1 }}>\n              {menuLinks.map(link => (\n                <li\n                  key={link.name}\n                  style={{\n                    listStyleType: `none`,\n                    padding: `1rem`,\n                  }}\n                >\n                  <Link style={{ color: `white` }} to={link.link}>\n                    {link.name}\n                  </Link>\n                </li>\n              ))}\n            </ul>\n          </nav>\n        </div>\n        // highlight-end\n      </div>\n    </div>\n  </header>\n)\n\nHeader.propTypes = {\n  siteTitle: PropTypes.string,\n}\n\nHeader.defaultProps = {\n  siteTitle: ``,\n}\n\nexport default Header\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query in Template Component\nDESCRIPTION: This GraphQL query in `src/templates/product-graphql.js` fetches product data based on the slug passed in the context. It retrieves the title, description, price, and optimized image data for a specific product.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/why-gatsby-uses-graphql.md#_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\"\nimport { graphql } from \"gatsby\"\nimport { GatsbyImage } from \"gatsby-plugin-image\"\n\nexport const query = graphql`\n  query($slug: String!) {\n    productsJson(slug: { eq: $slug }) {\n      title\n      description\n      price\n      image {\n        childImageSharp {\n          gatsbyImageData(layout: CONSTRAINED, width: 150)\n        }\n      }\n    }\n  }\n`\n\nconst Product = ({ data }) => {\n  const product = data.productsJson\n\n  return (\n    <div>\n      <h1>{product.title}</h1>\n      <GatsbyImage\n        image={product.image.childImageSharp.gatsbyImageData}\n        alt={product.title}\n        style={{ float: \"left\", marginRight: \"1rem\" }}\n      />\n      <p>{product.price}</p>\n      <div dangerouslySetInnerHTML={{ __html: product.description }} />\n    </div>\n  )\n}\n\nexport default Product\n```\n\n----------------------------------------\n\nTITLE: Gatsby Head API Usage\nDESCRIPTION: This code snippet demonstrates how to use the Gatsby Head API to add elements to the document head of a page. It exports a `Head` function that returns JSX containing meta tags. The component imports React and exports a page with a title.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/v4.19/index.md#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from \"react\"\n\nconst Page = () => <div>Hello World</div>\nexport default Page\n\nexport function Head() {\n  return (\n    <title>Hello World</title>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Setting HTML and Body Attributes in Gatsby Head (JSX)\nDESCRIPTION: This example shows how to set attributes on the `<html>` and `<body>` elements using the Gatsby Head API.  It demonstrates setting the language and adding a class to the body.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/built-in-components/gatsby-head.md#_snippet_4\n\nLANGUAGE: JSX\nCODE:\n```\nexport function Head() {\n  return (\n    <>\n      <!-- highlight-start -->\n      <html lang=\"en\" />\n      <body className=\"my-body-class\" />\n      <!-- highlight-end -->\n      <title>Hello World</title>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Updating gatsby-config.js for MDX v4 (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to update the `gatsby-config.js` file to be compatible with gatsby-plugin-mdx v4. It involves moving `remarkPlugins` and `rehypePlugins` into the new `mdxOptions` config option.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-mdx/README.md#_snippet_22\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst config = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-mdx`,\n      options: {\n-       remarkPlugins: [],\n-       rehypePlugins: [],\n+       mdxOptions: {\n+         remarkPlugins: [],\n+         rehypePlugins: [],\n+       },\n      },\n    },\n  ],\n}\n\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Configure snippet directory JavaScript\nDESCRIPTION: Specifies the directory where code snippet files are located using the `directory` option within the gatsby-remark-embed-snippet plugin configuration.  This allows the plugin to locate the files to embed. __dirname refers to the current directory of the gatsby-config.js file.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-embed-snippet/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  resolve: `gatsby-remark-embed-snippet`,\n  options: {\n    directory: `${__dirname}`\n  }\n},\n```\n\n----------------------------------------\n\nTITLE: Update E2E Test Script for HTTPS in package.json\nDESCRIPTION: This code updates the `test:e2e` script in `package.json` to include the `START_SERVER_AND_TEST_INSECURE=1` environment variable.  This is necessary when running Gatsby's development server with the `--https` flag. It disables HTTPS certificate checks.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/testing/end-to-end-testing.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"scripts\": {\n    \"test:e2e\": \"START_SERVER_AND_TEST_INSECURE=1 CYPRESS_SUPPORT=y start-server-and-test develop http://localhost:8000 cy:open\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Sass Options\nDESCRIPTION: This snippet shows how to configure Sass options, such as include paths, within the `gatsby-plugin-sass` configuration in `gatsby-config.js`. This allows customizing the Sass compilation process. Requires knowledge of `node-sass` or `dart-sass` options.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-sass/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nplugins: [\n  {\n    resolve: `gatsby-plugin-sass`,\n    options: {\n      sassOptions: {\n        includePaths: [\"absolute/path/a\", \"absolute/path/b\"],\n        ...\n      }\n    },\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Filter files by sourceInstanceName using GraphQL\nDESCRIPTION: This GraphQL query filters the files retrieved by `allFile` to only include those with a specific `sourceInstanceName`. In this case, it filters for files where `sourceInstanceName` is equal to \"blog\", which corresponds to the `name` option set in the `gatsby-config.js` file for the `gatsby-source-filesystem` plugin.  This helps isolate files from a specific source directory.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-4/index.mdx#_snippet_15\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  allFile(filter: {sourceInstanceName: {eq: \"blog\"}}) {\n    nodes {\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query (Current)\nDESCRIPTION: Example of the current GraphQL query structure for sorting data. It shows the nested `frontmatter___date` syntax.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/v4.21/index.md#_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n    nodes {\n      ...fields\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Content by Tags with GraphQL\nDESCRIPTION: This GraphQL query filters content entries of type `ContentfulNumber` based on the presence of a specific tag (`numberInteger`).  It retrieves entries that have the `numberInteger` tag assigned and returns the `title` and `integer` fields.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-contentful/README.md#_snippet_16\n\nLANGUAGE: graphql\nCODE:\n```\nquery FilterByTagsQuery {\n  allContentfulNumber(\n    sort: { fields: contentful_id }\n    filter: {\n      metadata: {\n        tags: { elemMatch: { contentful_id: { eq: \"numberInteger\" } } }\n      }\n    }\n  ) {\n    nodes {\n      title\n      integer\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Skipping Disallowed Link Types (JavaScript)\nDESCRIPTION: This snippet demonstrates how to configure the `disallowedLinkTypes` option to skip certain link types found in JSON:API documents. This allows you to avoid fetching unnecessary data.  This particular code block skips `self`, `describedby`, `contact_message--feedback`, and `contact_message--personal` links.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-drupal/README.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n// In your gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-source-drupal`,\n      options: {\n        baseUrl: `https://live-contentacms.pantheonsite.io/`,\n        // skip the action--action resource type.\n        disallowedLinkTypes: [\n          `self`,\n          `describedby`,\n          `contact_message--feedback`,\n          `contact_message--personal`,\n        ],\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Update GraphQL query for Blog page\nDESCRIPTION: This snippet demonstrates how to update the GraphQL query in the Blog page component to fetch the `excerpt` field from the MDX nodes. This allows you to display a summary of each blog post on the main blog page.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-5/index.mdx#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react'\nimport { graphql } from 'gatsby'\nimport Layout from '../components/layout'\nimport Seo from '../components/seo'\n\nconst BlogPage = ({ data }) => {\n  return (\n    // ...\n  )\n}\n\n// highlight-start\nexport const query = graphql`\n  query {\n    allMdx(sort: { frontmatter: { date: DESC }}) {\n      nodes {\n        frontmatter {\n          date(formatString: \"MMMM D, YYYY\")\n          title\n        }\n        id\n        excerpt\n      }\n    }\n  }\n`\n// highlight-end\n\nexport const Head = () => <Seo title=\"My Blog Posts\" />\n\nexport default BlogPage\n```\n\n----------------------------------------\n\nTITLE: Using GraphQL Fragment in Query (GraphQL)\nDESCRIPTION: This snippet shows how to incorporate a previously defined GraphQL fragment (`MarkdownFrontmatter`) into a query.  The `...MarkdownFrontmatter` syntax includes the fragment's field selections, avoiding repetition and improving query maintainability. The query retrieves a specific markdown file based on the provided path.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/conceptual/graphql-concepts.md#_snippet_8\n\nLANGUAGE: graphql\nCODE:\n```\nquery ($path: String!) {\n  markdownRemark(frontmatter: { path: { eq: $path } }) {\n    ...MarkdownFrontmatter\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Collapsible Component Usage (JSX)\nDESCRIPTION: Demonstrates the usage of the Collapsible component within the blog post content.  The Collapsible component is provided through the MDXProvider in `src/templates/posts.jsx`.  It takes a `summary` prop, and displays its children when expanded.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/using-mdx/content/posts/blog-2.mdx#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<Collapsible summary={<em>Want to click on me?</em>}>\n\nYou'll find content here!\n\n</Collapsible>\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query with gatsbyImageData\nDESCRIPTION: A GraphQL query using the `gatsbyImageData` resolver, provided by `gatsby-plugin-image`, to request a fixed-width image.  This leverages the image processing capabilities of `gatsby-transformer-sharp` and `gatsby-plugin-image` to generate optimized images.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/images-and-media/preprocessing-external-images.md#_snippet_3\n\nLANGUAGE: GraphQL\nCODE:\n```\nquery {\n  allMarkdownRemark {\n    nodes {\n      featuredImg {\n        childImageSharp {\n          gatsbyImageData(width: 600, layout: FIXED)\n        }\n      }\n    }\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Aliasing Queries and Fields in GraphQL\nDESCRIPTION: This GraphQL query demonstrates the use of aliasing for both queries and fields. It aliases two queries on `allMarkdownRemark` as `someEntries` and `someMoreEntries`, each with different arguments.  It also aliases the `title` field as `header` and the `date` field formatted with `fromNow` as `relativeDate`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/graphql-reference.md#_snippet_28\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  someEntries: allMarkdownRemark(skip: 3, limit: 3) {\n    edges {\n      node {\n        frontmatter {\n          title\n        }\n      }\n    }\n  }\n  someMoreEntries: allMarkdownRemark(limit: 3) {\n    edges {\n      node {\n        frontmatter {\n          title\n        }\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  allMarkdownRemark(skip: 3, limit: 3) {\n    edges {\n      node {\n        frontmatter {\n          header: title\n          date\n          relativeDate: date(fromNow: true)\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring gatsby-plugin-subfont in gatsby-config.js\nDESCRIPTION: This code snippet demonstrates how to configure the `gatsby-plugin-subfont` within the `gatsby-config.js` file.  It shows how to specify options such as `silent`, `fallbacks`, and `inlineFonts` to customize the font optimization process. This configuration enables the plugin to automatically optimize font delivery during the Gatsby build process.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-subfont/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// In your gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-subfont`,\n      options: {\n        silent: true,\n        fallbacks: false,\n        inlineFonts: true,\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Featured Images in GraphQL\nDESCRIPTION: Shows how to query for featured images in GraphQL within a Gatsby template. The query retrieves the `featuredImage` field from the frontmatter of a `markdownRemark` node. It accesses the `childImageSharp` field to get image data and uses `gatsbyImageData` for responsive images.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/images-and-media/working-with-images-in-markdown.md#_snippet_5\n\nLANGUAGE: JSX\nCODE:\n```\nexport const query = graphql`\n  query PostQuery($id: String) {\n    markdownRemark(id: { eq: $id }) {\n      html\n      frontmatter {\n        title\n        // highlight-start\n        featuredImage {\n          childImageSharp {\n            gatsbyImageData(width: 800)\n          }\n        }\n        // highlight-end\n      }\n    }\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: Markdown AST Node Structure for Heading\nDESCRIPTION: This JSON represents the structure of a heading node in the Markdown AST. It includes properties like `type`, `depth`, `children` (containing text nodes), and `position` (indicating the location in the source document). This structure is used to modify and style the heading nodes.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/remark-plugin-tutorial.md#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"heading\",\n  \"depth\": 1,\n  \"children\": [\n    {\n      \"type\": \"text\",\n      \"value\": \"Hello World!\",\n      \"position\": {\n        \"start\": { \"line\": 1, \"column\": 3, \"offset\": 2 },\n        \"end\": { \"line\": 1, \"column\": 15, \"offset\": 14 },\n        \"indent\": []\n      }\n    }\n  ],\n  \"position\": {\n    \"start\": { \"line\": 1, \"column\": 1, \"offset\": 0 },\n    \"end\": { \"line\": 1, \"column\": 15, \"offset\": 14 },\n    \"indent\": []\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Default Value\nDESCRIPTION: Configures the `defval` option in `gatsby-config.js` to assign a default value to blank cells in the Excel spreadsheet. This prevents columns with only blank cells from being excluded in the GraphQL output.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-excel/README.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// In your gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-transformer-excel`,\n      options: {\n        defval: \"\",\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Full Post and Author Types with Fields in Gatsby\nDESCRIPTION: This code extends the previous examples by fully defining the `Post` and `Author` types with their respective fields and relationships. The `Post` type includes fields such as `_id`, `slug`, `title`, `author`, and a relationship to `PostImage`. The `Author` type includes `_id` and `name`. Additionally, it defines the `PostImage` type with fields `url`, `alt`, `width`, and `height`. All applicable fields are marked as non-nullable (`!`).\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/creating-a-source-plugin/part-3/index.mdx#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { GatsbyNode } from \"gatsby\"\nimport { NODE_TYPES } from \"./constants\"\n\nexport const createSchemaCustomization: GatsbyNode[`createSchemaCustomization`] =\n  ({ actions }) => {\n    const { createTypes } = actions\n\n    createTypes(`\n      type ${NODE_TYPES.Post} implements Node {\n        id: ID!\n        _id: Int!\n        slug: String!\n        title: String!\n        author: String!\n        image: ${NODE_TYPES.Post}Image!\n      }\n\n      type ${NODE_TYPES.Author} implements Node {\n        id: ID!\n        _id: Int!\n        name: String!\n      }\n\n      type ${NODE_TYPES.Post}Image {\n        url: String!\n        alt: String!\n        width: Int!\n        height: Int!\n      }\n    `)\n  }\n```\n\n----------------------------------------\n\nTITLE: Setting up environment variables for Flotiq API Key\nDESCRIPTION: This code snippet shows the required environment variables to connect to Flotiq. The `GATSBY_FLOTIQ_BASE_URL` specifies the base URL for the Flotiq API, and `GATSBY_FLOTIQ_API_KEY` stores the API key used for authentication.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/sourcing-from-flotiq.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nGATSBY_FLOTIQ_BASE_URL=https://api.flotiq.com\nGATSBY_FLOTIQ_API_KEY=YOUR FLOTIQ API KEY\n```\n\n----------------------------------------\n\nTITLE: Sourcing data using createNode API in gatsby-node.js\nDESCRIPTION: This code demonstrates how to source data manually using the `sourceNodes` API and `createNode` action in `gatsby-node.js`. It fetches data from the GitHub API and creates a node in Gatsby's data layer.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/conceptual/data-fetching.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst fetch = (...args) =>\n  import(`node-fetch`).then(({ default: fetch }) => fetch(...args))\n\nexports.sourceNodes = async ({\n  actions: { createNode },\n  createContentDigest,\n}) => {\n  // get data from GitHub API at build time\n  const result = await fetch(`https://api.github.com/repos/gatsbyjs/gatsby`)\n  const resultData = await result.json()\n  // create node for build time data example in the docs\n  createNode({\n    // nameWithOwner and url are arbitrary fields from the data\n    nameWithOwner: resultData.full_name,\n    url: resultData.html_url,\n    // required fields\n    id: `example-build-time-data`,\n    parent: null,\n    children: [],\n    internal: {\n      type: `Example`,\n      contentDigest: createContentDigest(resultData),\n    },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Gatsby Development Server\nDESCRIPTION: This command starts the Gatsby development server.  It builds the project in development mode, enabling hot reloading and other development features.  It allows you to preview your Gatsby site locally during development.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-wordpress/docs/getting-started.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngatsby develop\n```\n\n----------------------------------------\n\nTITLE: Setting pathPrefix in gatsby-config.js\nDESCRIPTION: This JavaScript snippet demonstrates how to set the pathPrefix in the gatsby-config.js file. This is required when deploying a Gatsby site to a path like `username.github.io/reponame/`. Replace `/reponame` with the desired path.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/previews-deploys-hosting/how-gatsby-works-with-github-pages.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  pathPrefix: \"/reponame\",\n}\n```\n\n----------------------------------------\n\nTITLE: Add Preload Fonts Script to Package.json\nDESCRIPTION: This snippet shows how to add a custom script called `preload-fonts` to the `scripts` section of your `package.json` file.  This allows you to run the font preloading process with a simple `npm run preload-fonts` command.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-preload-fonts/README.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"preload-fonts\": \"gatsby-preload-fonts\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Developing a Gatsby Site Locally\nDESCRIPTION: This command compiles and serves a development build of your Gatsby site, enabling real-time updates in the browser as you modify the source code. It should be executed from the root directory of your project.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-cli/README.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ngatsby develop\n```\n\n----------------------------------------\n\nTITLE: Update Babel Preprocessor for TypeScript (jest-preprocess.js)\nDESCRIPTION: This code adds the `@babel/preset-typescript` preset to the Babel configuration in `jest-preprocess.js`. This allows Babel to transpile TypeScript code during testing, ensuring that Jest can execute TypeScript tests correctly.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/testing/unit-testing.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst babelOptions = {\n  presets: [\"babel-preset-gatsby\", \"@babel/preset-typescript\"],\n}\n```\n\n----------------------------------------\n\nTITLE: Fetch Multiple Data Sources with Promise.all\nDESCRIPTION: This snippet demonstrates how to use `Promise.all` to fetch data from multiple asynchronous sources concurrently within the `createPages` lifecycle method. It fetches data from two REST APIs, using the `node-fetch` library and a helper function `getJSON`.  The `Promise.all` ensures that both API calls are completed before proceeding to create pages.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/debugging-async-lifecycles.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst fetch = require(\"node-fetch\")\n\nconst getJSON = uri => fetch(uri).then(response => response.json())\n\nexports.createPages = async function ({ actions, graphql }) {\n  // highlight-start\n  const [pokemonData, rickAndMortyData] = await Promise.all([\n    getJSON(\"https://some-rest-api.com/pokemon\"),\n    getJSON(\"https://some-rest-api.com/rick-and-morty\"),\n  ])\n  // highlight-end\n\n  // use data to create pages with actions.createPage\n}\n```\n\n----------------------------------------\n\nTITLE: Configuration for nodePerFile Option (JavaScript)\nDESCRIPTION: This code demonstrates the configuration for creating a single node per CSV file rather than one node per row.  The `nodePerFile` option is set to `'ingredients'`, which specifies that the content of the file should be stored in a field named `ingredients`. The `typeName` is set to `Foodstuffs` for all processed files.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-csv/README.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// In your gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-transformer-csv`,\n      options: {\n        typeName: () => `Foodstuffs`,\n        nodePerFile: `ingredients`,\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Gatsby Twitter Plugin\nDESCRIPTION: This code snippet shows how to add the gatsby-plugin-twitter to the plugins array in your gatsby-config.js file. This enables the plugin and allows you to embed Twitter content on your Gatsby site.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-twitter/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// In your gatsby-config.js\nplugins: [`gatsby-plugin-twitter`]\n```\n\n----------------------------------------\n\nTITLE: Feat: Add delayOnRouteUpdate option\nDESCRIPTION: This code snippet adds a new feature to the gatsby-plugin-google-gtag plugin: the `delayOnRouteUpdate` option. This option allows developers to specify a delay before sending a page view event on route updates, which can be useful in certain scenarios.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-google-gtag/CHANGELOG.md#_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n#### Features\n\n- Add `delayOnRouteUpdate` option [#37017](https://github.com/gatsbyjs/gatsby/issues/37017) ([c132f2d](https://github.com/gatsbyjs/gatsby/commit/c132f2d9099ccb7c9bf9a0a82f8179c3a6050f19))\n```\n\n----------------------------------------\n\nTITLE: Configure gatsby-plugin-typography\nDESCRIPTION: Configures the gatsby-plugin-typography plugin in the gatsby-config.js file. The pathToConfigModule option specifies the path to the typography.js configuration file. This plugin handles injecting styles and loading fonts based on the provided configuration.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-typography/README.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// In your gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-typography`,\n      options: {\n        pathToConfigModule: `src/utils/typography`,\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Installing a Gatsby site with a community starter URL\nDESCRIPTION: This command shows how to create a new Gatsby site named 'my-app' from a community starter located in a GitHub repository. It installs the Netlify CMS starter template.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/creating-a-starter.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngatsby new my-app https://github.com/netlify-templates/gatsby-starter-netlify-cms\n```\n\n----------------------------------------\n\nTITLE: Enabling DEV_SSR flag in gatsby-config.js\nDESCRIPTION: This code snippet illustrates how to enable server-side rendering (SSR) during Gatsby development by setting the `DEV_SSR` flag to `true` in the `gatsby-config.js` file. This allows developers to detect and fix SSR-related bugs without requiring full builds.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/debugging-html-builds.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  flags: {\n    DEV_SSR: true\n  },\n  plugins: [...]\n}\n```\n\n----------------------------------------\n\nTITLE: Implement OutboundLink Component in Gatsby\nDESCRIPTION: Demonstrates how to use the `<OutboundLink>` component to track clicks on outbound links using the gatsby-plugin-google-analytics plugin.  It imports the component and renders it as a replacement for the standard `<a>` element. Requires `gatsby-plugin-google-analytics` to be installed.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-google-analytics/README.md#_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\nimport React from \"react\"\nimport { OutboundLink } from \"gatsby-plugin-google-analytics\"\n\nconst Component = () => (\n  <div>\n    <OutboundLink href=\"https://www.gatsbyjs.com/plugins/gatsby-plugin-google-analytics/\">\n      Visit the Google Analytics plugin page!\n    </OutboundLink>\n  </div>\n)\n\nexport default Component\n```\n\n----------------------------------------\n\nTITLE: Rendering a Checkout Button (JSX)\nDESCRIPTION: This snippet renders a button component that triggers the `redirectToCheckout` function when clicked. The button's appearance changes based on the `loading` state, providing visual feedback to the user. The button's styles can be customized via `buttonStyles` and `buttonDisabledStyles`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/ecommerce-tutorial/index.md#_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nreturn (\n  <button\n    disabled={loading}\n    style={\n      loading ? { ...buttonStyles, ...buttonDisabledStyles } : buttonStyles\n    }\n    onClick={redirectToCheckout}\n  >\n    BUY MY BOOK\n  </button>\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel with reactImportSource\nDESCRIPTION: This example demonstrates how to configure Babel to use `@emotion/react` as the underlying JSX transformer by setting the `reactRuntime` to `automatic` and specifying the `reactImportSource`. This requires installing @emotion/react as a dependency.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/babel-preset-gatsby/README.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"presets\": [\n    [\n      \"babel-preset-gatsby\",\n      {\n        \"reactRuntime\": \"automatic\",\n        \"reactImportSource\": \"@emotion/react\"\n      }\n    ]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest to use setup-test-env.js\nDESCRIPTION: This configuration snippet modifies the `jest.config.js` file to instruct Jest to execute the `setup-test-env.js` file before running the tests.  This allows setting up the testing environment.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/testing/testing-react-components.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  testEnvironment: `jsdom`,\n  setupFilesAfterEnv: [\"<rootDir>/setup-test-env.js\"],\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Activity Ending on Error in Gatsby Source Drupal\nDESCRIPTION: This bug fix ensures that activities are properly ended when errors are encountered during the data sourcing process, preventing potential resource leaks or stalled builds.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-drupal/CHANGELOG.md#_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Filter with GraphQL - Not Equal Operator\nDESCRIPTION: This query filters MarkdownRemark nodes to find titles that are NOT equal to the empty string using the `ne` operator.  It's used to exclude nodes with missing or empty title values.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/graphql-reference.md#_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  # neq: I want all the titles which are NOT equal to the empty string\n  example_ne: allMarkdownRemark(\n    filter: { frontmatter: { title: { ne: \"\" } } }\n  ) {\n    edges {\n      node {\n        frontmatter {\n          title\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Securing Gatsby Function with JWT Verifier (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to secure a Gatsby Function using `@serverless-jwt/jwt-verifier`. It extracts the token from the Authorization header, verifies it using the `JwtVerifier`, and checks for the required scope. If the token is invalid or lacks the necessary scope, it returns a 403 error. Otherwise, it proceeds with the function logic.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/functions-auth0/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst {\n  JwtVerifier,\n  getTokenFromHeader,\n} = require(\"@serverless-jwt/jwt-verifier\")\n\nconst jwt = new JwtVerifier({\n  issuer: process.env.JWT_ISSUER,\n  audience: process.env.JWT_AUDIENCE,\n})\n\nconst shows = async (req, res) => {\n  const scope = \"read:shows\"\n  const token = getTokenFromHeader(req.get(\"authorization\"))\n  const claims = await jwt.verifyAccessToken(token)\n\n  if (!claims || !claims.scope || claims.scope.indexOf(scope) === -1) {\n    return res.status(403).json({\n      error: \"access_denied\",\n      error_description: `Token does not contain the required '${scope}' scope`,\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Gatsby Home Page with ButterCMS Data\nDESCRIPTION: This JSX snippet demonstrates how to create a Gatsby page (`src/pages/index.js`) that fetches data from ButterCMS using GraphQL. It uses the `allButterPage` query to retrieve homepage data and renders it on the page, including headline, customer logos and call to action button.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/sourcing-from-buttercms.md#_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\nimport React from \"react\"\nimport { graphql, Link } from \"gatsby\"\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\n\nconst IndexPage = ({ data }) => {\n  const home = data.home.edges[0].node\n\n  return (\n    <Layout>\n      <SEO\n        title={home.seo_title}\n        keywords={[`gatsby`, `application`, `react`]}\n      />\n      <div\n        style={{\n          height: `50%`,\n          display: `flex`,\n          padding: `1rem`,\n          alignItems: `center`,\n          justifyContent: `center`,\n          flexDirection: `column`,\n          background: `linear-gradient(-45deg, rgb(29, 64, 86) 0%, rgb(60, 24, 78) 100%)`,\n        }}\n      >\n        <h1\n          style={{\n            textAlign: `center`,\n            color: `white`,\n            fontSize: `2.5rem`,\n            fontWeight: `100`,\n            maxWidth: `960px`,\n          }}\n        >\n          {home.headline}\n        </h1>\n        <button\n          style={{\n            padding: `0.75rem`,\n            backgroundColor: `white`,\n            border: `none`,\n            fontSize: `1.5rem`,\n            borderRadius: `10px`,\n          }}\n        >\n          {home.call_to_action}\n        </button>\n      </div>\n\n      {/* <h1> {page.hero_image}</h1> */}\n\n      <h1 style={{ fontWeight: `100`, textAlign: `center` }}>Our Customers</h1>\n      <div\n        style={{\n          display: `flex`,\n          flexDirection: `column`,\n          alignItems: `center`,\n          justifyContent: `center`,\n        }}\n      >\n        {home.customer_logos.map(({ logo_image }) => (\n          <img\n            key={logo_image}\n            style={{ width: `200px`, borderRadius: `10px` }}\n            src={logo_image}\n          />\n        ))}\n      </div>\n    </Layout>\n  )\n}\n\n//GraphQl query to fetch homepage data\nexport const query = graphql`\n  {\n    home: allButterPage(filter: { slug: { eq: \"homepage\" } }) {\n      edges {\n        node {\n          slug\n          headline\n          seo_title\n          customer_logos {\n            logo_image\n          }\n          hero_image\n          call_to_action\n        }\n      }\n    }\n  }\n`\n\nexport default IndexPage\n```\n\n----------------------------------------\n\nTITLE: Adding sourceNodes to gatsby-node.ts in TypeScript\nDESCRIPTION: This snippet shows how to export the `sourceNodes` function from the `source-nodes.ts` file and include it in the `gatsby-node.ts` file. This step is crucial for Gatsby to recognize and execute the `sourceNodes` function during the build process. It also exports the type definition for plugin options.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/creating-a-source-plugin/part-2/index.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport type { IPluginOptions } from \"./types\"\n\nexport { onPluginInit } from \"./on-plugin-init\"\n// highlight-next-line\nexport { sourceNodes } from \"./source-nodes\"\n```\n\n----------------------------------------\n\nTITLE: Configure Gatsby Plugin Flow\nDESCRIPTION: This code snippet demonstrates how to add the gatsby-plugin-flow to your gatsby-config.js file. This enables Flow type checking for your Gatsby project.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-flow/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// In your gatsby-config.js\nmodule.exports = {\n  plugins: [`gatsby-plugin-flow`],\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugin Options in gatsby-config.js\nDESCRIPTION: This code snippet shows how to configure plugin options within the `gatsby-config.js` file. It specifies the plugin to use (`gatsby-plugin-console-log`) and passes an `options` object with key-value pairs that customize the plugin's behavior. These options can then be accessed within the plugin's code.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/plugins-and-themes/configuring-usage-with-plugin-options.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-console-log`,\n      options: { optionA: true, optionB: false, message: \"Hello world\" },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Nodes in TypeScript\nDESCRIPTION: This TypeScript code snippet demonstrates how to delete GraphQL nodes using the `deleteNode` API. It iterates through an array of `deletedEntries` and calls `deleteNode` for each entry. The type `node` is not explicitly defined but assumed to have properties needed by `deleteNode`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/creating-a-source-plugin/part-5/index.mdx#_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\ndeletedEntries.forEach(node => deleteNode(node))\n```\n\n----------------------------------------\n\nTITLE: Source Nodes with MySQL and createFileNodeFromBuffer JavaScript\nDESCRIPTION: This code snippet demonstrates how to use `createFileNodeFromBuffer` in a `gatsby-node.js` file to source data from a MySQL database. It defines a `sourceNodes` function that queries the database, processes the results, and creates nodes using `createNode`.  Binary data fields from the database are handled using `createFileNodeFromBuffer` to generate File nodes.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-filesystem/README.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst createMySqlNodes = require(`./create-nodes`)\n\nexports.sourceNodes = async ({ actions, createNodeId, getCache }, config) => {\n  const { createNode } = actions\n  const { conn, queries } = config\n  const { db, results } = await query(conn, queries)\n\n  try {\n    queries\n      .map((query, i) => ({ ...query, ___sql: results[i] }))\n      .forEach(result =>\n        createMySqlNodes(result, results, createNode, {\n          createNode,\n          createNodeId,\n          getCache,\n        })\n      )\n    db.end()\n  } catch (e) {\n    console.error(e)\n    db.end()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enable Debug Mode for Gatsby Source WordPress\nDESCRIPTION: This plugin configuration enables debug mode to write GraphQL queries to disk for debugging purposes. This allows you to inspect the queries that Gatsby is using to fetch data from WordPress and troubleshoot errors.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-wordpress/docs/debugging-and-troubleshooting.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  resolve: `gatsby-source-wordpress`,\n  options: {\n    debug: {\n      graphql: {\n        writeQueriesToDisk: true,\n      },\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Proxying with Self-Signed Certificates - Gatsby\nDESCRIPTION: This code snippet extends the advanced proxying example to handle self-signed certificates. It sets the `secure` option to `false` within the `createProxyMiddleware` configuration. This allows the proxy to accept connections to local APIs that use self-signed certificates without rejecting them.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/api-proxy.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { createProxyMiddleware } = require(\"http-proxy-middleware\") //v1.x.x\n// Use implicit require for v0.x.x of 'http-proxy-middleware'\n// const proxy = require('http-proxy-middleware')\n// be sure to replace 'createProxyMiddleware' with 'proxy' where applicable\n\nmodule.exports = {\n  developMiddleware: app => {\n    app.use(\n      \"/.netlify/functions/\",\n      createProxyMiddleware({\n        target: \"http://localhost:9000\",\n        secure: false, // Do not reject self-signed certificates.\n        pathRewrite: {\n          \"/.netlify/functions/\": \"\",\n        },\n      })\n    )\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Builder.io Pages by URL Path with GraphQL\nDESCRIPTION: This GraphQL query shows how to fetch a Builder.io page model based on a specific URL path using the allBuilderModels endpoint.  The query uses a variable $path for the URL path and also uses limit and options arguments.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/sourcing-from-builder-io.md#_snippet_2\n\nLANGUAGE: GraphQL\nCODE:\n```\nquery ($path: String!) {\n  allBuilderModels {\n    myPageModel(\n      target: { urlPath: $path }\n      limit: 1\n      options: { cachebust: true }\n    ) {\n      content\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Site Metadata\nDESCRIPTION: This JavaScript snippet shows how to configure site metadata in `gatsby-config.js`. It defines the `siteMetadata` object with properties like `title`, `description`, and `author`. This metadata can then be queried using GraphQL and displayed on the site.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/modifying-a-starter.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  // highlight-start\n  siteMetadata: {\n    title: `Gatsby Default Starter`,\n    description: `Kick off your next, great Gatsby project with this default starter. This barebones starter ships with the main Gatsby configuration files you might need.`,\n    author: `@gatsbyjs`,\n  },\n  // highlight-end\n  plugins: [\n    `gatsby-plugin-react-helmet`,\n    {\n      resolve: `gatsby-source-filesystem`,\n      options: {\n        name: `images`,\n        path: `${__dirname}/src/images`,\n      },\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-sharp`,\n    {\n      resolve: `gatsby-plugin-manifest`,\n      options: {\n        name: `gatsby-starter-default`,\n        short_name: `starter`,\n        start_url: `/`,\n        background_color: `#663399`,\n        theme_color: `#663399`,\n        display: `minimal-ui`,\n        icon: `src/images/gatsby-icon.png`, // This path is relative to the root of the site.\n      },\n    },\n    // this (optional) plugin enables Progressive Web App + Offline functionality\n    // To learn more, visit: https://gatsby.dev/offline\n    // `gatsby-plugin-offline`,\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PostCSS Plugins in Gatsby Config\nDESCRIPTION: Shows how to configure PostCSS plugins within the `gatsby-config.js` file, using the `postCssPlugins` option. This allows for adding custom post-processing steps to the CSS.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/styling/post-css.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nplugins: [\n  {\n    resolve: `gatsby-plugin-postcss`,\n    options: {\n      postCssPlugins: [require(`postcss-preset-env`)({ stage: 0 })],\n    },\n  },\n],\n```\n\n----------------------------------------\n\nTITLE: Using the Wrapper Component - JSX\nDESCRIPTION: This JSX code shows an example of how to use the custom ExampleImage component. It passes an image object with a URL, width, and height, along with layout, width, and background color props. The alt prop is also passed for accessibility.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/plugins-and-themes/adding-gatsby-image-support.md#_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n// This might come from an API at runtime\nconst image = {\n  url: \"baseurl.jpg\",\n  width: 800,\n  height: 600,\n}\n\nreturn (\n  <ExampleImage\n    image={image}\n    layout=\"fixed\"\n    width={400}\n    backgroundColor=\"#660033\"\n    alt=\"My image\"\n  />\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring gatsby-transformer-remark with PrismJS in JavaScript\nDESCRIPTION: This code snippet demonstrates how to configure the `gatsby-transformer-remark` plugin within `gatsby-config.js` to utilize `gatsby-remark-prismjs` for syntax highlighting.  It specifies the plugins array and includes the resolver for `gatsby-transformer-remark` with an options object that contains plugins like `gatsby-remark-prismjs`. No specific dependencies beyond Gatsby itself and these plugins are required. The expected output is Markdown files being transformed into HTML with syntax highlighted code blocks.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/contributing/docs-contributions/docs-components.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// In your gatsby-config.js\nplugins: [\n  {\n    resolve: `gatsby-transformer-remark`,\n    options: {\n      plugins: [\n        `gatsby-remark-prismjs`\n      ],\n    },\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Query Parameter Redirect in gatsby-node.js\nDESCRIPTION: This snippet shows how to redirect based on query parameters. `/param?id=7` is redirected to `/gatsby_file.pdf`. Requires Gatsby's `createPages` API and the `createRedirect` action.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/cloud/working-with-redirects-and-rewrites.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ncreateRedirect({\n  fromPath: `/param?id=7`,\n  toPath: `/gatsby_file.pdf`,\n})\n```\n\n----------------------------------------\n\nTITLE: HTML Image Tag Example for Gatsby Sourcing\nDESCRIPTION: Demonstrates HTML image tags with both relative and absolute paths that Gatsby will recognize and source, converting them into Gatsby images. It highlights the requirement of including `/wp-content/uploads` in the URL.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-wordpress/docs/features/media-item-processing.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<img src=\"/wp-content/uploads/2021/01/a.jpeg\" />\n<img src=\"https://mysite.com/wp-content/uploads/2021/01/b.jpeg\" />\n```\n\n----------------------------------------\n\nTITLE: Displaying a Blog Index Page in Gatsby (JSX)\nDESCRIPTION: This component fetches blog posts from ButterCMS using a GraphQL query and displays them as a list of links to individual blog post pages. It uses React to map over the post data.  It depends on the `gatsby` package and utilizes `Link` for navigation.  The `Layout` and `SEO` components are expected to be pre-existing.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/sourcing-from-buttercms.md#_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\"\nimport { Link, graphql } from \"gatsby\"\nimport Layout from \"../components/Layout\"\nimport SEO from \"../components/seo\"\n\nclass BlogIndex extends React.Component {\n  render() {\n    const { data } = this.props\n    const siteTitle = data.site.siteMetadata.title\n    const posts = data.allButterPost.edges\n\n    return (\n      <Layout location={this.props.location} title={siteTitle}>\n        <SEO\n          title=\"All posts\"\n          keywords={[`blog`, `gatsby`, `javascript`, `react`]}\n        />\n\n        <div\n          style={{\n            alignItems: `center`,\n            justifyContent: `center`,\n            margin: `20px 0px 20px 0px`,\n          }}\n        >\n          <div\n            style={{\n              maxWidth: `960px`,\n              padding: `30px`,\n            }}\n          >\n            {posts.map(({ node }) => {\n              const title = node.seo_title || node.slug\n              return (\n                <div\n                  key={node.slug}\n                  style={{ margin: `10px`, padding: `10px` }}\n                >\n                  <h3>\n                    <Link\n                      style={{ boxShadow: `none` }}\n                      to={`/blog/${node.slug}`}\n                    >\n                      {title}\n                    </Link>\n                  </h3>\n                  <small>{node.date}</small>\n                  <div\n                    dangerouslySetInnerHTML={{ __html: node.meta_description }}\n                  />\n                </div>\n              )\n            })}\n          </div>\n        </div>\n      </Layout>\n    )\n  }\n}\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allButterPost {\n      edges {\n        node {\n          id\n          seo_title\n          meta_description\n          slug\n          categories {\n            name\n            slug\n          }\n          author {\n            first_name\n            last_name\n            email\n            slug\n            bio\n            title\n            linkedin_url\n            facebook_url\n            instagram_url\n            pinterest_url\n            twitter_handle\n            profile_image\n          }\n          body\n        }\n      }\n    }\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: Babel Preset Configuration\nDESCRIPTION: This configuration shows how to set the `reactRuntime` to `automatic` and specify a `reactImportSource` for the `babel-preset-gatsby`. This allows using the automatic JSX runtime with a custom import source, such as `@emotion/react`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/v3.0/index.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"presets\": [\n    [\n      \"babel-preset-gatsby\",\n      {\n        \"reactRuntime\": \"automatic\",\n        \"reactImportSource\": \"@emotion/react\"\n      }\n    ]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Skip Results with GraphQL\nDESCRIPTION: This query demonstrates how to skip a number of results using the `skip` argument. It retrieves the total count of MarkdownRemark nodes but omits the first three results. The `allMarkdownRemark` node is queried, skipping the first 3.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/graphql-reference.md#_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  allMarkdownRemark(skip: 3) {\n    totalCount\n    edges {\n      node {\n        frontmatter {\n          title\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query for MDX Nodes\nDESCRIPTION: This GraphQL query retrieves all MDX nodes and extracts the `id` and `slug` from the `frontmatter` field, along with `internal` properties.  This data is used in `gatsby-node.js` to create pages programmatically.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/routing/mdx.md#_snippet_14\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  allMdx {\n    nodes {\n      id\n      frontmatter {\n        slug\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Layout Component in About Page - JavaScript\nDESCRIPTION: This snippet shows how to integrate the Layout component into the About page.  The Layout component is used to wrap the content of the page, setting the page title to \"About Me\". It imports React and Layout from the appropriate paths.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-2/index.mdx#_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as React from 'react'\nimport Layout from '../components/layout' // highlight-line\n\nconst AboutPage = () => {\n  return (\n    {\n      /* highlight-start */\n    }\n    <Layout pageTitle=\"About Me\">\n      <p>Hi there! I'm the proud creator of this site, which I built with Gatsby.</p>\n    </Layout>\n    {\n      /* highlight-end */\n    }\n  )\n}\n\nexport const Head = () => <title>About Me</title>\n\nexport default AboutPage\n```\n\n----------------------------------------\n\nTITLE: Querying MarkdownRemark nodes (GraphQL)\nDESCRIPTION: A GraphQL query to retrieve `MarkdownRemark` nodes, including their `html`, `headings`, and `frontmatter` fields. This demonstrates how to access the data parsed from Markdown files.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-remark/README.md#_snippet_4\n\nLANGUAGE: GraphQL\nCODE:\n```\n{\n  allMarkdownRemark {\n    edges {\n      node {\n        html\n        headings {\n          depth\n          value\n        }\n        frontmatter {\n          # Assumes you're using title in your frontmatter.\n          title\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using HeadProps for Gatsby Head API\nDESCRIPTION: This example shows how to type the Gatsby Head API using `HeadProps`. It demonstrates typing the props passed to the `Head` function.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/custom-configuration/typescript.md#_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as React from \"react\"\nimport type { HeadProps } from \"gatsby\"\n\nconst Page = () => <div>Hello World</div>\nexport default Page\n\nexport function Head(props: HeadProps) {\n  return (\n    <title>Hello World</title>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configure raw output\nDESCRIPTION: Configures the `raw` option in `gatsby-config.js` to convert all values to strings. This resolves field type conflicts when columns have different data types.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-excel/README.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// In your gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-transformer-excel`,\n      options: {\n        raw: false,\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Plugins to Gatsby Configuration\nDESCRIPTION: This code snippet demonstrates how to add plugins to the `plugins` array in `gatsby-config.js`.  It initializes the array, providing a placeholder for plugin entries.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/config-files/gatsby-config.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  plugins: [\n    //plugins go here\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Gatsby Adapter\nDESCRIPTION: This snippet shows how to set a Gatsby adapter using the `adapter` option. It requires importing the desired adapter and passing it to the configuration.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/config-files/gatsby-config.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst adapter = require(\"gatsby-adapter-foo\")\n\nmodule.exports = {\n  adapter: adapter({\n    // adapter options if available\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using useStaticQuery to fetch data at build time\nDESCRIPTION: This code snippet demonstrates how to use `useStaticQuery` in a React component to fetch data from Gatsby's data layer at build time. It retrieves repository information from the GitHub GraphQL API.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/conceptual/data-fetching.md#_snippet_4\n\nLANGUAGE: JSX\nCODE:\n```\nimport React from \"react\"\nimport { graphql, useStaticQuery } from \"gatsby\" // highlight-line\n\nconst IndexPage = () => {\n  // highlight-start\n  const gatsbyRepoData = useStaticQuery(graphql`\n    query {\n      github {\n        repository(name: \"gatsby\", owner: \"gatsbyjs\") {\n          id\n          nameWithOwner\n          url\n        }\n      }\n    }\n  `)\n  // highlight-end\n\n  return (\n    <section>\n      <p>\n        Build Time Data: Gatsby repo{` `}\n        <a href={gatsbyRepoData.github.repository.url}>\n          {gatsbyRepoData.github.repository.nameWithOwner} // highlight-line\n        </a>\n      </p>\n    </section>\n  )\n}\n\nexport default IndexPage\n```\n\n----------------------------------------\n\nTITLE: Using JSON Configuration for Redirects in gatsby-node.js\nDESCRIPTION: This snippet shows how to read redirects from a JSON file (`redirects.json`) and create them using the `createRedirect` action. It requires the JSON file shown above.  It improves code maintainability and enables easier collaboration. Requires Gatsby's `createPages` API and the `createRedirect` action.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/cloud/working-with-redirects-and-rewrites.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst redirects = require(\"./redirects.json\")\n\nexports.createPages = async ({ graphql, actions }) => {\n  const { createRedirect } = actions\n\n  redirects.forEach(redirect =>\n    createRedirect({\n      fromPath: redirect.fromPath,\n      toPath: redirect.toPath,\n    })\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using getShopifyImage for Runtime Images in Gatsby\nDESCRIPTION: This JavaScript code snippet demonstrates how to use the `getShopifyImage` function from `gatsby-source-shopify` to generate image data for Shopify images retrieved at runtime (e.g., from the Storefront API).  It expects an `image` object with `width`, `height`, and `originalSrc` properties. It returns an `imageData` object suitable for use with `<GatsbyImage>`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-shopify/README.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { getShopifyImage } from \"gatsby-source-shopify\"\n\nfunction getCartImage(storefrontProduct) {\n  const image = storefrontProduct.images.edges[0].node\n  const imageData = getShopifyImage({\n    image,\n    width: 200,\n    height: 200,\n    layout: \"fixed\",\n  })\n\n  return imageData\n}\n```\n\n----------------------------------------\n\nTITLE: Using `@link` Directive (After)\nDESCRIPTION: Illustrates the preferred method for creating node relations in Gatsby v2.5 and later using the `@link` directive in schema customization.  It shows how to replace the `___NODE` suffix with a direct field and establish the relationship via GraphQL schema.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v3-to-v4.md#_snippet_19\n\nLANGUAGE: JavaScript\nCODE:\n```\nexports.sourceNodes = ({ actions }) => {\n  actions.createNode({\n    // ...required node fields\n    author: userNode.id,\n    internal: { type: `BlogPost` /*...*/ },\n  })\n}\nexports.createSchemaCustomization = ({ actions }) => {\n  actions.createTypes(`\n    type BlogPost implements Node {\n      author: User @link\n    }\n  `)\n}\n```\n\n----------------------------------------\n\nTITLE: Gatsby Node API Access\nDESCRIPTION: Demonstrates accessing the cache API within a Gatsby Node API function.  The `cache` object allows plugins to persist data between builds. `store` and `graphql` are also available in the `onPostBootstrap` function.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/build-caching.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nexports.onPostBootstrap = async function ({ cache, store, graphql }) {}\n```\n\n----------------------------------------\n\nTITLE: Generating Pages with Ghost Data in gatsby-node.js\nDESCRIPTION: This code snippet demonstrates how to use the `createPages` API in `gatsby-node.js` to query Ghost data using GraphQL and generate pages for each post.  It fetches all Ghost posts, creates a URL for each post based on its slug, and creates a page using the `post.js` template, passing the slug as context.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/sourcing-from-ghost.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst path = require(`path`)\n\nexports.createPages = async ({ graphql, actions, reporter }) => {\n  const postTemplate = path.resolve(`./src/templates/post.js`)\n\n  // Query Ghost data\n  const result = await graphql(`\n    {\n      allGhostPost(sort: { published_at: ASC }) {\n        edges {\n          node {\n            slug\n          }\n        }\n      }\n    }\n  `)\n\n  // Handle errors\n  if (result.errors) {\n    reporter.panicOnBuild(`Error while running GraphQL query.`)\n    return\n  }\n\n  if (!result.data.allGhostPost) {\n    return\n  }\n\n  // Create pages for each Ghost post\n  const items = result.data.allGhostPost.edges\n  items.forEach(({ node }) => {\n    node.url = `/${node.slug}/`\n\n    actions.createPage({\n      path: node.url,\n      component: postTemplate,\n      context: {\n        slug: node.slug,\n      },\n    })\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring gatsby-source-filesystem\nDESCRIPTION: This snippet shows how to configure the `gatsby-source-filesystem` plugin in your `gatsby-config.js` file. The `resolve` property specifies the plugin's name, and the `options` object defines the source directory (`path`) and a descriptive name (`name`). Restarting the Gatsby development server is required for the changes to take effect.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/sourcing-data/sourcing-from-the-filesystem.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  siteMetadata: {\n    title: `Your Site Name`,\n  },\n  plugins: [\n    // highlight-start\n    {\n      resolve: `gatsby-source-filesystem`,\n      options: {\n        name: `src`,\n        path: `${__dirname}/src/`,\n      },\n    },\n    // highlight-end\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Theme UI Preset Funk - Shell\nDESCRIPTION: This command installs the `@theme-ui/preset-funk` package, which provides a pre-defined theme configuration for Theme UI. This is an optional dependency if you want to use a preset theme.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/styling/theme-ui.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install @theme-ui/preset-funk\n```\n\n----------------------------------------\n\nTITLE: Setting Accept Header for JSON:API\nDESCRIPTION: Example of setting the `accept` header to `application/vnd.api+json`. This resolves a `406 Not Acceptable` error returned by web servers that require strict JSON:API MIME type conformance.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-drupal/README.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-source-drupal`,\n      options: {\n        // ...\n        headers: {\n          accept: \"application/vnd.api+json\",\n        },\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Passing useUnifiedTopology option to MongoClient\nDESCRIPTION: This snippet passes the useUnifiedTopology option to the MongoClient when connecting to MongoDB.  This option enables the new unified topology engine in the MongoDB driver, improving connection management and stability.  It is a necessary configuration for newer MongoDB deployments.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-mongodb/CHANGELOG.md#_snippet_14\n\n\n\n----------------------------------------\n\nTITLE: Importing JSON into a React Component\nDESCRIPTION: This React component imports JSON data and renders it in a list. It uses the Array.map method to iterate over the content and create list items.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/sourcing-data/sourcing-from-json-or-yaml.md#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\"\nimport JSONData from \"../../content/My-JSON-Content.json\"\n\nconst JSONbuildtime = () => (\n  <div style={{ maxWidth: `960px`, margin: `1.45rem` }}>\n    <h1>{JSONData.title}</h1>\n    <ul>\n      {JSONData.content.map((data, index) => {\n        return <li key={`content_item_${index}`}>{data.item}</li>\n      })}\n    </ul>\n  </div>\n)\nexport default JSONbuildtime\n```\n\n----------------------------------------\n\nTITLE: Including gatsby-plugin-less in gatsby-config.js\nDESCRIPTION: This snippet shows how to include the gatsby-plugin-less in the gatsby-config.js file to enable Less stylesheet support. It is a minimal configuration example.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-less/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// in gatsby-config.js\nplugins: [`gatsby-plugin-less`]\n```\n\n----------------------------------------\n\nTITLE: Install gatsby-codemods\nDESCRIPTION: This command installs the gatsby-codemods package in your project.  This provides the codemod transformations that will be applied to the project's codebase.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/image-migration-guide.md#_snippet_11\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install gatsby-codemods\n```\n\n----------------------------------------\n\nTITLE: Configuring siteMetadata in gatsby-config.js\nDESCRIPTION: Defines site metadata like title, description, and site URL in `gatsby-config.js`.  This information is used by the `gatsby-plugin-feed` to populate the RSS feed's metadata.  These values get passed to the rss `feedOptions`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-feed/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  siteMetadata: {\n    title: `Your site title`,\n    description: `Your site desccription`,\n    site_url: `https://your-site-url.com`,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Install Gatsby Sitemap Plugin\nDESCRIPTION: Installs the gatsby-plugin-sitemap package using npm. This plugin generates sitemap files for a Gatsby site.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-sitemap/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install gatsby-plugin-sitemap\n```\n\n----------------------------------------\n\nTITLE: Querying Shopify Products with GraphQL\nDESCRIPTION: This GraphQL query retrieves all products from your Shopify store, sorted by title in ascending order. It fetches essential product details like title, shopifyId, description, price range, and status.  This is used to display a list of products on your Gatsby site.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/building-an-ecommerce-site-with-shopify.md#_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  allShopifyProduct(sort: { title: ASC }) {\n    edges {\n      node {\n        title\n        shopifyId\n        description\n        priceRangeV2 {\n          maxVariantPrice {\n            amount\n          }\n          minVariantPrice {\n            amount\n          }\n        }\n        status\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Invoke Custom Error in sourceNodes in TypeScript\nDESCRIPTION: Imports `ERROR_CODES` into `source-nodes.ts` and uses it inside the `panicOnBuild` call to invoke the custom error. The error includes a unique ID and context information, such as the source message and GraphQL error.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/creating-a-source-plugin/part-4/index.mdx#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { GatsbyNode, SourceNodesArgs, NodeInput } from \"gatsby\"\nimport { fetchGraphQL } from \"./utils\"\nimport type { IAuthorInput, IPostInput, NodeBuilderInput } from \"./types\"\nimport { NODE_TYPES, ERROR_CODES } from \"./constants\"\n\nexport const sourceNodes: GatsbyNode[`sourceNodes`] = async (gatsbyApi) => {\n  // Rest of sourceNodes\n\n  if (errors) {\n    sourcingTimer.panicOnBuild({\n      id: ERROR_CODES.GraphQLSourcing,\n      context: {\n        sourceMessage: `Sourcing from the GraphQL API failed`,\n        graphqlError: errors[0].message,\n      },\n    })\n\n    return\n  }\n\n  // Rest of sourceNodes\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL query for TypeName\nDESCRIPTION: GraphQL query to fetch the `hello` field from nodes of type `TypeName`. This demonstrates how to query data after creating nodes in Gatsby.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/creating-a-source-plugin/part-2/index.mdx#_snippet_8\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  typeName {\n    hello\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Gatsby Development Server\nDESCRIPTION: This command starts the Gatsby development server. It compiles the application and makes it accessible in a browser at `http://localhost:8000`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/using-mdx/README.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ngatsby develop\n```\n\n----------------------------------------\n\nTITLE: Creating a Branch in Git\nDESCRIPTION: This command creates a new branch in Git, allowing you to isolate your changes from the main branch.  It's used to work on specific features or bug fixes without affecting the main codebase.  The `some-change` is a placeholder for the name of your branch.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/contributing/how-to-open-a-pull-request.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit checkout -b some-change\n```\n\n----------------------------------------\n\nTITLE: Using Layout Component in Index Page\nDESCRIPTION: This code snippet shows how to integrate the Layout component into the index page of a Gatsby site. It imports the Layout component and wraps the page's content (a heading and subheading) within the Layout component. This ensures that the index page adheres to the site's overall layout and styling.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/porting-an-html-site-to-gatsby.md#_snippet_12\n\nLANGUAGE: JSX\nCODE:\n```\nimport React from \"react\"\nimport Layout from \"../components/layout\" // highlight-line\n\nexport default function Home() {\n  return (\n    {/* highlight-start */}\n    <Layout>\n      <h1>Welcome To Taylor's Tidy Trees</h1>\n      <h2>We care about trees of all kinds!</h2>\n    </Layout>\n    {/* highlight-end */}\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Heading Nodes to HTML in Gatsby Plugin (Asynchronous)\nDESCRIPTION: This code snippet demonstrates how to modify heading nodes to custom HTML nodes within a Gatsby plugin, using asynchronous behavior. The `async` keyword allows for asynchronous operations within the plugin. It checks the heading depth, extracts the text content using `mdast-util-to-string`, and then replaces the heading node with an HTML node containing custom styling. Requires `unist-util-visit` and `mdast-util-to-string`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/remark-plugin-tutorial.md#_snippet_11\n\nLANGUAGE: js\nCODE:\n```\nconst visit = require(\"unist-util-visit\")\nconst toString = require(\"mdast-util-to-string\")\n\n// highlight-next-line\nmodule.exports = async ({ markdownAST }, pluginOptions) => {\n  visit(markdownAST, \"heading\", node => {\n    let { depth } = node\n\n    // Skip if not an h1\n    if (depth !== 1) return\n\n    // Grab the innerText of the heading node\n    let text = toString(node)\n\n    const html = `\n        <h1 style=\"color: rebeccapurple\">\n          ${text}\n        </h1>\n      `\n\n    node.type = \"html\"\n    node.children = undefined\n    node.value = html\n  })\n\n  return markdownAST\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query Example\nDESCRIPTION: This GraphQL query fetches the author name from the `siteMetadata` within the `site` node.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/testing/testing-components-with-graphql.md#_snippet_1\n\nLANGUAGE: GraphQL\nCODE:\n```\nquery IndexQuery {\n  site {\n    siteMetadata {\n      author\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking if window is defined when requiring a module\nDESCRIPTION: This snippet illustrates how to conditionally require a module based on whether the `window` object is defined, preventing errors during the build process when the module attempts to access browser-specific APIs.  It uses a conditional statement to only require the module when running in a browser environment.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/debugging-html-builds.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Requiring a function causes an error during builds\n// as the code tries to reference window\nconst module = require(\"module\") // Error\n\n// Wrap the require in check for window\nif (typeof window !== `undefined`) {\n  const module = require(\"module\")\n}\n```\n\n----------------------------------------\n\nTITLE: Querying All GraphCMS Posts (GraphQL)\nDESCRIPTION: GraphQL query to retrieve a list of all available `GraphCMS_Post` nodes, including their `id`, `content.markdown`, `coverImage.url`, `date`, `slug`, and `title` fields.  This query demonstrates how to fetch data from GraphCMS using the generated GraphQL schema.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/sourcing-from-graphcms.md#_snippet_3\n\nLANGUAGE: GraphQL\nCODE:\n```\n{\n  allGraphCmsPost {\n    nodes {\n      id\n      content {\n        markdown\n      }\n      coverImage {\n        url\n      }\n      date\n      slug\n      title\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Gatsby Static Query Hook Implementation\nDESCRIPTION: This React component demonstrates how to use the `useStaticQuery` hook in Gatsby to fetch data from GraphCMS and display a list of post titles. The `graphql` tag is used to define the GraphQL query, which retrieves the `id`, `content.markdown`, `coverImage.url`, `date`, `slug`, and `title` fields for all `GraphCmsPost` nodes. The query results are then accessed via the `posts` property.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/sourcing-from-graphcms.md#_snippet_6\n\nLANGUAGE: JSX\nCODE:\n```\nimport React from \"react\"\nimport { graphql, useStaticQuery } from \"gatsby\"\n\nfunction IndexPage() {\n  const { posts } = useStaticQuery(graphql`\n    {\n      posts: allGraphCmsPost {\n        nodes {\n          id\n          content {\n            markdown\n          }\n          coverImage {\n            url\n          }\n          date\n          slug\n          title\n        }\n      }\n    }\n  `)\n\n  return (\n    <ul>\n      {posts.nodes.map(post => (\n        <li key={post.id}>\n          <h3>{post.title}</h3>\n        </li>\n      ))}\n    </ul>\n  )\n}\n\nexport default IndexPage\n```\n\n----------------------------------------\n\nTITLE: Fixing Data Fetching & Adding Limitation to Readme\nDESCRIPTION: This snippet describes a bug fix concerning data fetching, along with the addition of a limitation note to the README. This likely addresses issues where data was not being fetched correctly from the Medium API, and the limitation added clarifies the scope or functionality of the plugin.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-medium/CHANGELOG.md#_snippet_6\n\nLANGUAGE: Diff\nCODE:\n```\n- **gatsby-source-medium:** fix data fecthing & add limitation to readme ([#17547](https://github.com/gatsbyjs/gatsby/issues/17547)) ([3ba9f9c](https://github.com/gatsbyjs/gatsby/commit/3ba9f9c))\n```\n\n----------------------------------------\n\nTITLE: Update index.js to use layout component\nDESCRIPTION: Updates the `src/pages/index.js` file to use the layout component. The `Hello world!` text will now be wrapped by the layout component, and the global styles defined in `layout.js` will be applied.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/styling/emotion.md#_snippet_7\n\nLANGUAGE: JSX\nCODE:\n```\nimport React from \"react\"\nimport Layout from \"../components/layout\"\n\nexport default function Home() {\n  return <Layout>Hello world!</Layout>\n}\n```\n\n----------------------------------------\n\nTITLE: Render Contentful HTML in JSX\nDESCRIPTION: This JSX code snippet demonstrates how to render the HTML content retrieved from Contentful's `childMarkdownRemark` field within a React component.  It uses `dangerouslySetInnerHTML` to insert the HTML, which requires careful handling to prevent XSS vulnerabilities if the content source is untrusted.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-contentful/README.md#_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n<div\n  className=\"body\"\n  dangerouslySetInnerHTML={{\n    __html: data.contentfulCaseStudy.body.childMarkdownRemark.html,\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Adding getServerData Function Gatsby JavaScript\nDESCRIPTION: This code snippet demonstrates how to add the `getServerData` function to a Gatsby page component, enabling Server-Side Rendering (SSR). The function is initially empty but serves as a marker for Gatsby to use SSR for the page.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/rendering-options/using-server-side-rendering.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as React from \"react\"\n\nconst SSRPage = () => (\n  <main>\n    <h1>SSR Page with Dogs</h1>\n  </main>\n)\n\nexport default SSRPage\n\nexport async function getServerData() {}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query for Dynamic Images\nDESCRIPTION: Demonstrates a GraphQL query to fetch image data for dynamic images. It retrieves the title, body, and avatar of a blog post, with the avatar's `gatsbyImageData` field containing the processed image data, including a specified width.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-image/README.md#_snippet_5\n\nLANGUAGE: GraphQL\nCODE:\n```\nquery {\n  blogPost(id: { eq: $Id }) {\n    title\n    body\n    avatar {\n      childImageSharp {\n        gatsbyImageData(width: 200)\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enable Verbose Mode for Gatsby Source WordPress\nDESCRIPTION: This plugin configuration enables verbose mode to display detailed information about the data sourcing process. This helps identify potential bottlenecks or errors during the build.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-wordpress/docs/debugging-and-troubleshooting.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  resolve: `gatsby-source-wordpress`,\n  options: {\n    verbose: true,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Gatsby Project with Builder.io Starter\nDESCRIPTION: This command creates a new Gatsby project using the BuilderIO Gatsby starter, which provides a pre-configured setup for integrating with Builder.io.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/sourcing-from-builder-io.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngatsby new my-builder-site https://github.com/BuilderIO/gatsby-starter-builder\n```\n\n----------------------------------------\n\nTITLE: CSS Modules Typing Definition (TypeScript)\nDESCRIPTION: This code snippet defines a TypeScript module declaration for CSS Modules. This allows you to import CSS Modules in TypeScript files without type errors. The file `src/module.css.d.ts` declares that any module ending with `.module.css` is a valid module.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/custom-configuration/typescript.md#_snippet_16\n\nLANGUAGE: TypeScript\nCODE:\n```\ndeclare module \"*.module.css\";\n```\n\n----------------------------------------\n\nTITLE: Filtering Drupal Content by Status (JavaScript)\nDESCRIPTION: This code demonstrates filtering Drupal content based on status using the `filters` option in the `gatsby-source-drupal` plugin.  This example filters `file--file` entities to only include those with a status of 1. The `apiBase` option is also included for specifying the JSON API endpoint.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-drupal/README.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n// In your gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-source-drupal`,\n      options: {\n        baseUrl: `https://live-contentacms.pantheonsite.io/`,\n        apiBase: `api`,\n        filters: {\n          // collection : filter\n          \"file--file\": \"filter[status][value]=1\",\n        },\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Merge Workbox Config in Gatsby Offline Plugin (JavaScript)\nDESCRIPTION: This feature allows users to merge their custom Workbox configuration with the default configuration provided by the gatsby-plugin-offline. This provides more flexibility in customizing the service worker behavior.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-offline/CHANGELOG.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nMerge workboxConfig and default o‚Ä¶\n```\n\n----------------------------------------\n\nTITLE: Migrating theme file path to modifyVars require in gatsby-plugin-less\nDESCRIPTION: This snippet demonstrates a change in how theme files are handled.  It shows how the theme option accepting a file path has been replaced with modifyVars requiring the theme file.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-less/README.md#_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\nplugins: [\n  {\n    resolve: `gatsby-plugin-less`,\n    options: {\n-      theme: `./src/theme.js`,\n+      modifyVars: require(`./src/theme.js`),\n    },\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Querying the buildTime in GraphQL\nDESCRIPTION: This GraphQL query retrieves the `buildTime` from the `site` object. Using `buildTime` in static queries within layout components can cause a rebuild of all pages, since the time changes between builds.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/debugging-incremental-builds.md#_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  site {\n    buildTime\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing gatsby-transformer-yaml\nDESCRIPTION: Command to install the gatsby-transformer-yaml plugin using npm. Also highlights the need for gatsby-source-filesystem plugin.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-yaml/README.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nnpm install gatsby-transformer-yaml\n```\n\n----------------------------------------\n\nTITLE: Enabling Query Batching in gatsby-source-graphql (JavaScript)\nDESCRIPTION: This code snippet shows how to enable query batching in the `gatsby-source-graphql` plugin by setting the `batch` option to `true`. Batching improves query performance by executing multiple queries in a single network request. The plugin configuration includes typeName, fieldName, url, and batch.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-graphql/README.md#_snippet_11\n\nLANGUAGE: js\nCODE:\n```\nconst fs = require(\"fs\")\nconst { buildSchema, buildClientSchema } = require(\"graphql\")\n\nmodule.exports = {\n  plugins: [\n    {\n      resolve: \"gatsby-source-graphql\",\n      options: {\n        typeName: \"SWAPI\",\n        fieldName: \"swapi\",\n        url: \"https://api.graphcms.com/simple/v1/swapi\",\n        batch: true,\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling User Stylesheets with Stable Class Name\nDESCRIPTION: This React component adds a persistent CSS class name (`container`) to the JSX markup along with the dynamically-created CSS Module class name. This allows users to apply custom styles using User Stylesheets without being affected by changes in the CSS Module's generated class names.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/styling/css-modules.md#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\"\nimport * as containerStyles from \"./container.module.css\"\n\nexport default function Container({ children }) {\n  return (\n    <section className={`container ${containerStyles.container}`}>\n      {children}\n    </section>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Nodes in TypeScript\nDESCRIPTION: This TypeScript code snippet demonstrates how to use the `createNode` API to create new GraphQL nodes based on the data received from a remote API.  It iterates through an array of `entries` and calls `createNode` for each entry. The type `node` is not explicitly defined but assumed to be compatible with `createNode`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/creating-a-source-plugin/part-5/index.mdx#_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\nentries.forEach(node => createNode(node))\n```\n\n----------------------------------------\n\nTITLE: Custom Block Configuration Object (JavaScript)\nDESCRIPTION: Defines the structure for configuring custom blocks within the gatsby-remark-custom-blocks plugin. The configuration allows setting classes, specifying whether a title is optional or required, and enabling the details tag.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-custom-blocks/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntrigger: {\n  classes: String, space-separated classes, optional, default: ''\n  title: String, 'optional' | 'required', optional, default: custom titles not allowed\n  details: boolean, optional, default: false\n}\n```\n\n----------------------------------------\n\nTITLE: Installing gatsby-source-filesystem\nDESCRIPTION: This command installs the `gatsby-source-filesystem` plugin into your Gatsby project. It adds the plugin as a dependency in your `package.json` file, allowing you to use it in your `gatsby-config.js`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/sourcing-data/sourcing-from-the-filesystem.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install gatsby-source-filesystem\n```\n\n----------------------------------------\n\nTITLE: Convert Flat List to Hierarchical List in JavaScript\nDESCRIPTION: This JavaScript function converts a flat list of objects into a hierarchical list based on the objects' parentId property. It takes an array of data and optional configuration for the ID, parent ID, and children keys. It returns a tree-like structure representing the hierarchical relationships.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-wordpress/docs/tutorials/using-wordpress-menus.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst flatListToHierarchical = (\n  data = [],\n  { idKey = \"id\", parentKey = \"parentId\", childrenKey = \"children\" } = {}\n) => {\n  const tree = []\n  const childrenOf = {}\n  data.forEach(item => {\n    const newItem = { ...item }\n    const { [idKey]: id, [parentKey]: parentId = 0 } = newItem\n    childrenOf[id] = childrenOf[id] || []\n    newItem[childrenKey] = childrenOf[id]\n    parentId\n      ? (childrenOf[parentId] = childrenOf[parentId] || []).push(newItem)\n      : tree.push(newItem)\n  })\n  return tree\n}\n```\n\n----------------------------------------\n\nTITLE: Installing gatsby-source-stripe (Shell)\nDESCRIPTION: This command installs the `gatsby-source-stripe` plugin, which allows you to fetch data from your Stripe account during the Gatsby build process. This eliminates the need to hardcode product and price information.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/ecommerce-tutorial/index.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nnpm install gatsby-source-stripe\n```\n\n----------------------------------------\n\nTITLE: Modify gatsby-node.js for Tag Pages\nDESCRIPTION: This code snippet shows how to modify `gatsby-node.js` to generate tag pages. It queries all tags, then creates a page for each tag using the tag template. The tag name is passed as context to the template.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/adding-tags-and-categories-to-blog-posts.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nconst path = require(\"path\")\nconst _ = require(\"lodash\")\n\nexports.createPages = async ({ actions, graphql, reporter }) => {\n  const { createPage } = actions\n\n  const blogPostTemplate = path.resolve(\"src/templates/blog.js\")\n  const tagTemplate = path.resolve(\"src/templates/tags.js\")\n\n  const result = await graphql(`\n    {\n      postsRemark: allMarkdownRemark(\n        sort: { frontmatter: { date: DESC }}\n        limit: 2000\n      ) {\n        edges {\n          node {\n            fields {\n              slug\n            }\n            frontmatter {\n              tags\n            }\n          }\n        }\n      }\n      tagsGroup: allMarkdownRemark(limit: 2000) {\n        group(field: { frontmatter: { tags: SELECT }}) {\n          fieldValue\n        }\n      }\n    }\n  `)\n\n  // handle errors\n  if (result.errors) {\n    reporter.panicOnBuild(`Error while running GraphQL query.`)\n    return\n  }\n\n  const posts = result.data.postsRemark.edges\n\n  // Create post detail pages\n  posts.forEach(({ node }) => {\n    createPage({\n      path: node.fields.slug,\n      component: blogPostTemplate,\n    })\n  })\n\n  // Extract tag data from query\n  const tags = result.data.tagsGroup.group\n\n  // Make tag pages\n  tags.forEach(tag => {\n    createPage({\n      path: `/tags/${_.kebabCase(tag.fieldValue)}/`,\n      component: tagTemplate,\n      context: {\n        tag: tag.fieldValue,\n      },\n    })\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Article Template in Gatsby\nDESCRIPTION: This React component serves as a template for displaying a single article. It receives the slug as context, queries the corresponding Kontent.ai article, and renders the title and body copy.  The body copy is rendered using dangerouslySetInnerHTML.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/sourcing-data/sourcing-from-kontent-ai.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from \"react\"\nimport { graphql } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\n\nconst Article = ({ data }) => {\n  const item = data.kontentItemArticle.elements\n\n  return (\n    <Layout>\n      <h1>{item.title.value}</h1>\n      <div dangerouslySetInnerHTML={{ __html: item.body_copy.value }} />\n    </Layout>\n  )\n}\n\nexport default Article\n\nexport const query = graphql`\n  query articleQuery($slug: String!) {\n    kontentItemArticle(fields: { slug: { eq: $slug } }) {\n      fields {\n        slug\n      }\n      elements {\n        body_copy {\n          value\n        }\n        title {\n          value\n        }\n      }\n    }\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: Backup Apache alias.conf on Debian (Shell)\nDESCRIPTION: This shell command creates a backup of the alias.conf file on Debian-based systems. This backup allows you to revert changes made to the file if needed.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-manifest/README.md#_snippet_16\n\nLANGUAGE: Shell\nCODE:\n```\ncp /etc/apache2/mods-available/alias.conf /etc/apache2/mods-available/alias.conf.back\n```\n\n----------------------------------------\n\nTITLE: Configure Custom HTTP Headers in gatsby-config.js\nDESCRIPTION: This snippet demonstrates how to configure custom HTTP headers for a specific path using the `headers` option in `gatsby-config.js`. It sets the `x-custom-header` header to \"Hello World\" for the `/slug` path.  Gatsby normalizes trailing slashes, so `/slug` and `/slug/` are treated the same. This configuration affects the HTTP response headers for the specified path, enabling control over caching and access.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/previews-deploys-hosting/headers.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n  headers: [\n    {\n      source: `/slug`,\n      headers: [\n        {\n          key: `x-custom-header`,\n          value: `Hello World`,\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Asciidoctor Convert Options (JavaScript)\nDESCRIPTION: Passes Asciidoctor's convert options to the gatsby-transformer-asciidoc plugin. The `attributes` option is used to configure Asciidoctor's processing behavior, such as displaying the document title.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-asciidoc/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// In your gatsby-config.js\nplugins: [\n  {\n    resolve: `gatsby-transformer-asciidoc`,\n    options: {\n      attributes: {\n        showtitle: true,\n      },\n    },\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Create Node Field Example\nDESCRIPTION: This code snippet shows how to use `createNodeField` in `gatsby-node.js` to add a custom field (`someInformation`) to `MarkdownRemark` nodes. The value 'Hello World' is assigned to this field.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/graphql-data-layer/schema-customization.md#_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nexports.onCreateNode = ({ node, actions }) => {\n  const { createNodeField } = actions\n  if (node.internal.type === `MarkdownRemark`) {\n    createNodeField({\n      node,\n      name: `someInformation`,\n      value: `Hello World`\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring gatsby-plugin-nprogress in gatsby-config.js\nDESCRIPTION: This code snippet shows how to configure the gatsby-plugin-nprogress plugin within the gatsby-config.js file. It includes setting a custom color and disabling the loading spinner.  The resolve property specifies the plugin's name, and the options object allows you to customize its behavior.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-nprogress/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// In your gatsby-config.js\nplugins: [\n  {\n    resolve: `gatsby-plugin-nprogress`,\n    options: {\n      // Setting a color is optional.\n      color: `tomato`,\n      // Disable the loading spinner.\n      showSpinner: false,\n    },\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: GraphQL query for fetching WordPress posts\nDESCRIPTION: A GraphQL query that fetches all WordPress posts, sorted by date in ascending order. It includes the title, excerpt, and slug of each post.  This sorts blog posts by their publication date in ascending order.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/wordpress-source-plugin-tutorial.md#_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  allWordpressPost(sort: { date: ASC }) {\n    edges {\n      node {\n        title\n        excerpt\n        slug\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Gatsby Blog Post Template with ButterCMS (JSX)\nDESCRIPTION: This component serves as a template for individual blog posts, fetching data from ButterCMS based on the post's slug.  It displays the post's title, content, categories, and author bio. It relies on the `gatsby` package, `Link`, and expects `Bio`, `Layout`, and `SEO` components. The `pageContext` prop provides access to `previous` and `next` post objects for navigation.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/sourcing-from-buttercms.md#_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Bio from \"../components/Bio\"\nimport Layout from \"../components/Layout\"\nimport SEO from \"../components/seo\"\n\nclass BlogPostTemplate extends React.Component {\n  render() {\n    const post = this.props.data.allButterPost.edges[0].node\n    const siteTitle = this.props.data.site.siteMetadata.title\n    const { previous, next } = this.props.pageContext\n\n    return (\n      <Layout location={this.props.location} title={siteTitle}>\n        <SEO title={post.seo_title} description={post.description} />\n        <div\n          style={{\n            display: `flex`,\n            alignItems: `center`,\n            justifyContent: `center`,\n            margin: `20px 0px 20px 0px`,\n          }}\n        >\n          <div style={{ maxWidth: `960px`, padding: `30px` }}>\n            <h1>{post.seo_title}</h1> <span>{post.date}</span> &bull;\n            {post.categories.map(category => (\n              <span>{category.name}</span>\n            ))}\n            <hr />\n            <div\n              style={{ paddingTop: `20px` }}\n              dangerouslySetInnerHTML={{ __html: post.body }}\n            />\n            <hr />\n            <Bio />\n            <ul\n              style={{\n                display: `flex`,\n                flexWrap: `wrap`,\n                justifyContent: `space-between`,\n                listStyle: `none`,\n                padding: 0,\n              }}\n            >\n              <li>\n                {previous && (\n                  <Link to={`/blog/${previous.slug}`} rel=\"prev\">\n                    ‚Üê {previous.seo_title}\n                  </Link>\n                )}\n              </li>\n              <li>\n                {next && (\n                  <Link to={`/blog/${next.slug}`} rel=\"next\">\n                    {next.seo_title} ‚Üí\n                  </Link>\n                )}\n              </li>\n            </ul>\n          </div>\n        </div>\n      </Layout>\n    )\n  }\n}\n\nexport default BlogPostTemplate\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug($slug: String!) {\n    site {\n      siteMetadata {\n        title\n        author\n      }\n    }\n    allButterPost(filter: { slug: { eq: $slug } }) {\n      edges {\n        node {\n          id\n          body\n          seo_title\n          date\n          categories {\n            name\n          }\n        }\n      }\n    }\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: Filtering Data from Drupal\nDESCRIPTION: Example configuration of the `filters` option.  This allows limiting the data retrieved from Drupal by applying JSON API filters to specific collections. This can significantly reduce build times for large Drupal sites. The example filters recipes based on the `tags.name` field.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-drupal/README.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n// In your gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-source-drupal`,\n      options: {\n        baseUrl: `https://live-contentacms.pantheonsite.io/`,\n        apiBase: `api`,\n        filters: {\n          // collection : filter\n          recipe: \"filter[tags.name][value]=British\",\n        },\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring a Local Plugin in gatsby-config.js\nDESCRIPTION: This snippet demonstrates how to include a local plugin in your `gatsby-config.js` file. The plugin's folder name in the `plugins` directory should match the name used in the config. This allows Gatsby to discover and use the local plugin during the build process.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/creating-a-local-plugin.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  plugins: [\n    `gatsby-third-party-plugin`,\n    `my-own-plugin`, // highlight-line\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query Example\nDESCRIPTION: This GraphQL query demonstrates how to access a child node (`childMarkdownRemark`) from a parent node (`file`). It shows how to query the `html` field of a `childMarkdownRemark` node, which is a child of a `file` node that matches a specific `relativePath`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/schema-inference.md#_snippet_3\n\nLANGUAGE: GraphQL\nCODE:\n```\nquery {\n  file( relativePath { eq: \"blog/my-blog.md\" } ) {\n    childMarkdownRemark { html }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Cache Sync Token Key in JavaScript\nDESCRIPTION: This JavaScript code snippet shows how to create a cache key for storing the sync token by prepending a fixed string to the source ID. This ensures that each Contentful space and environment has its own unique sync token.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/creating-a-source-plugin/part-5/index.mdx#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst CACHE_SYNC_TOKEN = `contentful-sync-token-${sourceId}`\n```\n\n----------------------------------------\n\nTITLE: Querying a single post in WPGraphQL\nDESCRIPTION: This GraphQL query retrieves a single post from WordPress using WPGraphQL, identified by its database ID. It fetches the ID, title, and content of the specified post.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-wordpress/docs/features/graphql-wordpress-and-gatsby.md#_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  post(id: 123, idType: DATABASE_ID) {\n    id\n    title\n    content\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Query Contentful CaseStudy Body GraphQL\nDESCRIPTION: This GraphQL query retrieves the `body` field of a `ContentfulCaseStudy` node, which contains Markdown content.  It shows how to access the raw Markdown content via `body.body`. This requires `gatsby-transformer-remark` to transform the Markdown into HTML.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-contentful/README.md#_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  contentfulCaseStudy {\n    body {\n      body\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enable Babel Preset Options in gatsby-plugin-typescript\nDESCRIPTION: This feature allows users to specify custom options for the Babel preset within the gatsby-plugin-typescript plugin. This provides greater flexibility in configuring Babel for TypeScript compilation.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-typescript/CHANGELOG.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\n**gatsby-plugin-typescript:** allow specifying babel preset options\n```\n\n----------------------------------------\n\nTITLE: Setting Cache Control for App Data\nDESCRIPTION: This snippet displays the recommended cache-control header for the `public/page-data/app-data.json` file in a Gatsby site. This file contains the build hash for the current deployment and should not be cached to synchronize the browser's version with the deployed version. The header uses `public`, `max-age=0`, and `must-revalidate` to achieve this.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/previews-deploys-hosting/caching.md#_snippet_2\n\nLANGUAGE: HTTP\nCODE:\n```\ncache-control: public, max-age=0, must-revalidate\n```\n\n----------------------------------------\n\nTITLE: Using Stylus plugins in gatsby-config.js\nDESCRIPTION: This snippet illustrates how to integrate Stylus plugins, such as rupture, into your Gatsby project using gatsby-plugin-stylus. It allows you to extend Stylus's functionality with custom plugins. Requires installing both gatsby-plugin-stylus and the desired Stylus plugin (e.g., rupture).\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-stylus/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst rupture = require(\"rupture\")\n\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-stylus`,\n      options: {\n        use: [rupture()],\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Installing a Gatsby site with an official starter URL\nDESCRIPTION: This command demonstrates how to create a new Gatsby site named 'my-app' using the official Gatsby blog starter from the Gatsby repository on GitHub. It uses a publicly available repo URL.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/creating-a-starter.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngatsby new my-app https://github.com/gatsbyjs/gatsby-starter-blog\n```\n\n----------------------------------------\n\nTITLE: Configure Gatsby Plugins\nDESCRIPTION: This code configures the installed Gatsby plugins in `gatsby-config.js`. The `gatsby-source-filesystem` plugin is configured to read data from the `./data/` directory. Other plugins are added to the plugins array to enable JSON transformation and image optimization.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/why-gatsby-uses-graphql.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  plugins: [\n    {\n      resolve: \"gatsby-source-filesystem\",\n      options: {\n        path: \"./data/\",\n      },\n    },\n    \"gatsby-transformer-json\",\n    \"gatsby-transformer-sharp\",\n    \"gatsby-plugin-sharp\",\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Options for Rendering Embedded Image in Rich Text\nDESCRIPTION: This JSX code provides rendering options for embedded assets within a Rich Text field. It checks if the asset is an image and renders it using the `GatsbyImage` component if it is. Requires that you have already imported the `GatsbyImage` component from `gatsby-plugin-image`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-contentful/README.md#_snippet_21\n\nLANGUAGE: jsx\nCODE:\n```\nconst options = {\n  renderNode: {\n    \"embedded-asset-block\": node => {\n      const { gatsbyImageData } = node.data.target\n      if (!gatsbyImageData) {\n        // asset is not an image\n        return null\n      }\n      return <GatsbyImage image={gatsbyImageData} />\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Batch Result Transformation (JavaScript)\nDESCRIPTION: This example demonstrates how `gatsby-source-graphql` transforms the result of a batched GraphQL query back into individual results for each query. It shows the initial batched result containing data for both queries and then the transformed results where each individual query receives its corresponding data.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-graphql/README.md#_snippet_14\n\nLANGUAGE: js\nCODE:\n```\n{\n  data: {\n    gatsby0_node: { foo: `foo` },\n    gatsby1_node: { bar: `bar` },\n  },\n}\n```\n\nLANGUAGE: js\nCODE:\n```\n[\n  { data { node: { foo: `foo` } } },\n  { data { node: { bar: `bar` } } },\n]\n```\n\n----------------------------------------\n\nTITLE: Extend MDX Node with timeToRead field in gatsby-node.mjs\nDESCRIPTION: Extends the MDX node in Gatsby's GraphQL schema with a `timeToRead` field using the `reading-time` package. This field calculates the estimated reading time of the MDX content and adds it to the GraphQL schema.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-mdx/README.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport readingTime from \"reading-time\"\n\nexport const onCreateNode = ({ node, actions }) => {\n  const { createNodeField } = actions\n  if (node.internal.type === `Mdx`) {\n    createNodeField({\n      node,\n      name: `timeToRead`,\n      value: readingTime(node.body)\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Styletron in React Components\nDESCRIPTION: Demonstrates how to use Styletron with React components using `styletron-react`. It includes examples for statically styled components, dynamically styled components, and using the `useStyletron` hook for inline styles. This allows for creating styled components with Styletron's atomic CSS approach.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-styletron/README.md#_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\nimport React from \"react\"\nimport { styled, useStyletron } from \"styletron-react\"\n\n// statically styled component\nconst RedAnchor = styled(\"a\", { color: \"red\" })\n\n// dynamically styled component\nconst BigAnchor = styled(\"a\", ({ $size }) => ({ fontSize: `${$size}px` }))\n\nconst IndexPage = () => {\n  // an alternative hook based API\n  const [css] = useStyletron()\n  return (\n    <div>\n      <RedAnchor>Red Anchor</RedAnchor>\n      <BigAnchor $size={64}>Big Anchor</BigAnchor>\n      <p className={css({ color: \"blue\" })}>blue text</p>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Building Gatsby production-ready site\nDESCRIPTION: This command builds a production-ready version of your Gatsby site. It optimizes assets and prepares the site for deployment.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/creating-a-starter.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngatsby build\n```\n\n----------------------------------------\n\nTITLE: Example Gatsby Router Configuration (@reach/router)\nDESCRIPTION: This snippet demonstrates how to set up dynamic routing in a Gatsby application using `@reach/router`, which is included with Gatsby. It defines routes for user profiles and user details components.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/porting-from-create-react-app-to-gatsby.md#_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\"\nimport { Router } from \"@reach/router\"\n\nconst App = () => (\n  <Router>\n    <Route path=\"/user/\" component={Users} />\n    <Route path=\"/user/:id\" component={UserDetails} />\n  </Router>\n)\n\nexport default App\n```\n\n----------------------------------------\n\nTITLE: Updating Peer Dependencies\nDESCRIPTION: This snippet updates the peer dependencies for the package.  This chore ensures compatibility with other packages in the ecosystem.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-mongodb/CHANGELOG.md#_snippet_4\n\nLANGUAGE: none\nCODE:\n```\nUpdate peerDeps [#36965](https://github.com/gatsbyjs/gatsby/issues/36965) ([b624442](https://github.com/gatsbyjs/gatsby/commit/b6244424fe8b724cbc23b80b2b4f5424cc2055a4))\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query for MDX Slugs\nDESCRIPTION: This GraphQL query retrieves the slug values from the frontmatter of all MDX nodes. It is used to verify the availability of the slug data, which is later utilized for creating dynamic routes.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-6/index.mdx#_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  allMdx {\n    nodes {\n      frontmatter {\n        slug\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Navigation Component in React with Gatsby\nDESCRIPTION: This snippet creates a `Navigation` component using React and Gatsby.  It uses `useStaticQuery` and GraphQL to fetch the `menuLinks` from the `siteMetadata` in `gatsby-config.js`. It then maps over these links to render a list of navigation items using Gatsby's `<Link>` component and Theme UI for styling.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/using-multiple-themes-together.md#_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\"\nimport { Link, useStaticQuery, graphql } from \"gatsby\"\nimport { Styled, css } from \"theme-ui\"\n\nexport default function Navigation() {\n  const data = useStaticQuery(\n    graphql`\n      query SiteMetaData {\n        site {\n          siteMetadata {\n            menuLinks {\n              name\n              url\n            }\n          }\n        }\n      }\n    `\n  )\n  const navLinks = data.site.siteMetadata.menuLinks\n  return (\n    <nav\n      css={css({\n        py: 2, // Short form for paddingTop and paddingBottom\n      })}\n    >\n      <ul\n        css={css({\n          display: `flex`,\n          listStyle: `none`,\n          margin: 0,\n          padding: 0,\n        })}\n      >\n        {navLinks.map(link => (\n          <li\n            css={css({\n              marginRight: 2,\n              \":last-of-type\": {\n                marginRight: 0,\n              },\n            })}\n          >\n            <Styled.a\n              css={css({\n                fontFamily: `heading`,\n                fontWeight: `bold`,\n                textDecoration: `none`,\n                \":hover\": {\n                  textDecoration: `underline`,\n                },\n              })}\n              as={Link}\n              to={link.url}\n            >\n              {link.name}\n            </Styled.a>\n          </li>\n        ))}\n      </ul>\n    </nav>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring gatsby-config.js for Images and Posts in Different Directories\nDESCRIPTION: Configures the `gatsby-config.js` file to source markdown files and images from different directories (`src/content` and `src/images`, respectively). This is done by specifying two distinct instances of `gatsby-source-filesystem`, each with a different path. This setup allows for better organization of assets.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/images-and-media/working-with-images-in-markdown.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`,\n    `gatsby-transformer-remark`,\n    `gatsby-plugin-image`,\n    {\n      resolve: `gatsby-source-filesystem`,\n      options: {\n        path: `${__dirname}/src/content`, // highlight-line\n      },\n    },\n    {\n      resolve: `gatsby-source-filesystem`,\n      options: {\n        path: `${__dirname}/src/images`, // highlight-line\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Gatsby Head Implementation (JSX)\nDESCRIPTION: This code snippet demonstrates the basic usage of the Gatsby Head API by exporting a function named `Head` that returns a JSX title element. It sets the title of the page to \"Hello World\".\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/built-in-components/gatsby-head.md#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport * as React from \"react\"\n\nconst Page = () => <div>Hello World</div>\nexport default Page\n\nexport function Head() {\n  return (\n    <title>Hello World</title>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding css-loader Options\nDESCRIPTION: This snippet shows how to override the default options passed to `css-loader` within the `gatsby-plugin-sass` configuration. This allows customizing how CSS is loaded and processed by webpack. Requires understanding of `css-loader` options. Gatsby uses `css-loader@^5.0.0`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-sass/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nplugins: [\n  {\n    resolve: `gatsby-plugin-sass`,\n    options: {\n      cssLoaderOptions: {\n        camelCase: false,\n      },\n    },\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Opt Out of Type Inference with Gatsby Type Builders\nDESCRIPTION: This snippet shows how to opt out of type inference for a GraphQL type defined with Gatsby Type Builders using the `infer` extension.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/graphql-data-layer/schema-customization.md#_snippet_14\n\nLANGUAGE: diff\nCODE:\n```\nschema.buildObjectType({\n  name: \"ContributorJson\",\n  fields: {\n    name: \"String!\",\n  },\n  interfaces: [\"Node\"],\n+ extensions: {\n+   // While in SDL you have two different directives, @infer and @dontInfer to\n+   // control inference behavior, Gatsby Type Builders take a single `infer`\n+   // extension which accepts a Boolean\n+   infer: false\n+ },\n}),\n```\n\n----------------------------------------\n\nTITLE: Creating a Blog Post with MDX\nDESCRIPTION: This MDX code snippet demonstrates a simple blog post with a title and date in the frontmatter, followed by the content of the post.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/using-multiple-themes-together.md#_snippet_4\n\nLANGUAGE: MDX\nCODE:\n```\n---\ntitle: My first blog post\ndate: 2020-02-15\n---\n\nMultiple themes are great!\n```\n\n----------------------------------------\n\nTITLE: Adding Gatsby Plugin Theme UI - JavaScript\nDESCRIPTION: This code snippet demonstrates how to add the `gatsby-plugin-theme-ui` plugin to your Gatsby configuration file (`gatsby-config.js`).  This plugin enables Theme UI integration within your Gatsby site.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/styling/theme-ui.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  plugins: [\"gatsby-plugin-theme-ui\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding query pluginOption for MongoDB plugin\nDESCRIPTION: This snippet introduces a query pluginOption for the gatsby-source-mongodb plugin. This option allows users to specify a query to filter data retrieved from MongoDB. The query option enhances the flexibility of the plugin by allowing users to select specific data subsets.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-mongodb/CHANGELOG.md#_snippet_9\n\n\n\n----------------------------------------\n\nTITLE: Disabling Vendor Prefixes\nDESCRIPTION: This code snippet shows how to disable vendor prefixing within the `gatsby-plugin-styled-components` plugin.  Setting `disableVendorPrefixes` to `true` will prevent styled-components from automatically adding vendor prefixes (e.g., -webkit-, -moz-) to CSS properties. This can be useful when targeting modern browsers or when using a separate tool to handle vendor prefixing.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-styled-components/README.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\noptions: {\n  disableVendorPrefixes: true\n}\n```\n\n----------------------------------------\n\nTITLE: Using Link Resolver in Gatsby Component\nDESCRIPTION: This React component utilizes the `linkResolver` function to generate a dynamic URL for each blog post.  It maps over the `posts` array and renders a list item for each post. Inside each list item, a Gatsby `<Link>` component uses the resolved URL from `linkResolver(post.node._meta)` to create a navigation link to the corresponding blog post, using the post's `_meta` data (type and uid). The title of the blog post is also displayed as the link text.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/prismic-source-graphql-tutorial.md#_snippet_10\n\nLANGUAGE: JSX\nCODE:\n```\nconst BlogPosts = ({ posts }) => {\n  if (!posts) return null\n  return (\n    <ul>\n      {posts.map(post => {\n        return (\n          <li key={post.node._meta.id}>\n            // highlight-start\n            <Link to={linkResolver(post.node._meta)}>\n              {RichText.asText(post.node.title)}\n            </Link>\n            // highlight-end\n            <p>\n              <time>{post.node.date}</time>\n            </p>\n          </li>\n        )\n      })}\n    </ul>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Proxying API Requests (Basic) - Gatsby\nDESCRIPTION: This code snippet demonstrates how to configure Gatsby's development server to proxy API requests to a specified URL. It uses the `proxy` field in `gatsby-config.js` to define a prefix and target URL. When a request with the defined prefix is made, Gatsby will proxy it to the specified URL during development.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/api-proxy.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  proxy: {\n    prefix: \"/api\",\n    url: \"http://dev-mysite.com\",\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: gaOptout Function for Anonymizing IP\nDESCRIPTION: This JavaScript function, gaOptout, is used to set an opt-out cookie, preventing future tracking by Google Global Site Tag.  It is invoked when a user clicks a link to deactivate Google Tracking.  The function sets a cookie with an expiration date far in the future and sets a window property.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-google-gtag/README.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction gaOptout() {\n  ;(document.cookie =\n    disableStr + \"=true; expires=Thu, 31 Dec 2099 23:59:59 UTC;path=/\"),\n    (window[disableStr] = !0)\n}\n\nvar gaProperty = \"UA-XXXXXXXX-X\",\n  disableStr = \"ga-disable-\" + gaProperty\ndocument.cookie.indexOf(disableStr + \"=true\") > -1 && (window[disableStr] = !0)\n```\n\n----------------------------------------\n\nTITLE: Using the Refactored Index Post Component (JSX)\nDESCRIPTION: This Gatsby page component imports and uses the `IndexPost` component to display a list of posts. The GraphQL query now includes the `IndexPostFragment`, allowing the `IndexPost` component to receive the necessary data through props. This allows the query on the parent page to use the `...IndexPostFragment` syntax.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/conceptual/graphql-concepts.md#_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\"\nimport IndexPost from \"../components/IndexPost\"\nimport { graphql } from \"gatsby\"\n\nexport default function Home({ data }) {\n  return (\n    <div>\n      <h1>Index page</h1>\n      <h4>{data.allMarkdownRemark.totalCount} Posts</h4>\n      {data.allMarkdownRemark.edges.map(({ node }) => (\n        <IndexPost key={node.id} frontmatter={node.frontmatter} />\n      ))}\n    </div>\n  )\n}\n\nexport const query = graphql`\n  query {\n    allMarkdownRemark {\n      totalCount\n      edges {\n        node {\n          id\n          ...IndexPostFragment\n        }\n      }\n    }\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: Upgrading Apollo and GraphQL Tools dependencies\nDESCRIPTION: This commit upgrades the apollo and graphql-tools dependencies for the gatsby-source-graphql package. This is done to take advantage of new features, performance improvements, and bug fixes in these libraries. This ensures compatibility and stability within the Gatsby plugin.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-graphql/CHANGELOG.md#_snippet_11\n\nLANGUAGE: Text\nCODE:\n```\nupgrade apollo & graphql-tools deps [#34772](https://github.com/gatsbyjs/gatsby/issues/34772) ([d9fe5df](https://github.com/gatsbyjs/gatsby/commit/d9fe5df4effb7a4d59a798025626682542318007))\n```\n\n----------------------------------------\n\nTITLE: Cleaning Gatsby Cache and Public Directories\nDESCRIPTION: This command deletes the `.cache` and `public` directories in your Gatsby project. This is useful for resolving issues related to stale data, GraphQL errors, dependency problems, or plugin conflicts.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-cli/README.md#_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\ngatsby clean\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query for Customer Case Studies\nDESCRIPTION: This GraphQL query fetches all ButterCMS pages with the page_type 'customer_case_study'. It retrieves specific fields like id, facebook_open_graph_title, seo_title, headline, customer_logo, and testimonial. The query is designed to be used in GraphiQL to test the data structure and content.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/sourcing-from-buttercms.md#_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  allButterPage(filter: { page_type: { eq: \"customer_case_study\" } }) {\n    edges {\n      node {\n        id\n        facebook_open_graph_title\n        seo_title\n        headline\n        customer_logo\n        testimonial\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing PostCSS and Gatsby Plugin\nDESCRIPTION: Installs the postcss package and the gatsby-plugin-postcss plugin using npm. This allows Gatsby to process CSS files with PostCSS.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/styling/post-css.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install postcss gatsby-plugin-postcss\n```\n\n----------------------------------------\n\nTITLE: Creating ImageAsset Node with Required Fields in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create an `ImageAsset` node with all the required fields to utilize Gatsby's Image CDN. It defines a `sourceNodes` function, fetches image data, and creates a node of type `ImageAsset` with fields like `url`, `mimeType`, `filename`, `width`, `height`, and `alt`. The code utilizes `createNodeId` and `createContentDigest` for node identification and content hashing respectively.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/creating-a-source-plugin/part-6/index.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport type { GatsbyNode } from \"gatsby\"\n    import type { IRemoteImageNodeInput } from \"gatsby-plugin-utils\"\n\n    export const sourceNodes: GatsbyNode[`sourceNodes`] = (gatsbyApi) => {\n      const { actions, createNodeId, createContentDigest } = gatsbyApi\n      const { createNode } = actions\n\n      const remoteUrl = `https://images.unsplash.com/photo-1644310972589-643a2099d946?fm=jpg`\n\n      const imageData = {\n        url: remoteUrl,\n        placeholderUrl: `${data.url}&w=%width%&h=%height%`,\n        mimeType: `image/jpg`,\n        filename: `red-rosa-infinity`,\n        width: 3000,\n        height: 4000,\n        alt: `Red and rosa infinity thingy floating in air`,\n      }\n\n      const node: IRemoteImageNodeInput = {\n        ...imageData,\n        id: createNodeId(`ImageAsset-${remoteUrl}`),\n        parent: null,\n        children: [],\n        internal: {\n          type: `ImageAsset`,\n          contentDigest: createContentDigest(imageData),\n        },\n      }\n\n      createNode(node)\n    }\n```\n\n----------------------------------------\n\nTITLE: Supporting Multiple Video Formats (JSX)\nDESCRIPTION: This code shows how to support multiple video formats for different browsers by including multiple `<source>` elements within the `<video>` element. This ensures that the video can play across a wider range of browsers.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/images-and-media/working-with-video.md#_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\"\nimport DogMp4 from \"../assets/dog.mp4\"\nimport DogOgg from \"../assets/dog.ogg\" // highlight-line\n\nexport default function Home() {\n  return (\n    <video controls>\n      <source src={DogMp4} type=\"video/mp4\" />\n      <source src={DogOgg} type=\"video/ogg\" /> // highlight-line\n    </video>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Webpack Entry Point Configuration in JavaScript\nDESCRIPTION: This code snippet demonstrates a basic webpack configuration file (`webpack.config.js`) written in JavaScript. It defines a single entry point, which is the starting file for webpack's dependency graph analysis. webpack will begin bundling modules from `/scripts/index.js`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/glossary/webpack.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  entry: \"/scripts/index.js\",\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query with ID Query Variable\nDESCRIPTION: This GraphQL query retrieves data for a specific MDX node using the `id` query variable. It fetches the title and formatted date from the frontmatter of the MDX node.  The query uses the fastest way to look up nodes.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-6/index.mdx#_snippet_10\n\nLANGUAGE: graphql\nCODE:\n```\nquery MyQuery($id: String) {\n  mdx(id: { eq: $id }) {\n    frontmatter {\n      title\n      date(formatString: \"MMMM D, YYYY\")\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring the Kontent.ai Gatsby Source Plugin\nDESCRIPTION: This code snippet shows how to configure the @kontent-ai/gatsby-source plugin in gatsby-config.js. It requires the projectId and languageCodenames options to be set. The projectId is obtained from Kontent.ai, and languageCodenames specifies the languages to be sourced. Ensure the Project ID is inserted.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/sourcing-data/sourcing-from-kontent-ai.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  siteMetadata: {\n    // ...\n  },\n  plugins: [\n    // ...\n    {\n      resolve: `@kontent-ai/gatsby-source`,\n      options: {\n        projectId: `<YourProjectID>`, // Fill in your Project ID\n        // Please note that with the Sample Project generated above, `en-US` is the default language for the project and this config. For a blank project, this needs to be `default`.\n        languageCodenames: [\n          `en-US`, // Or the languages in your project (Project settings -> Localization)\n        ],\n      },\n    },\n    // ...\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Using ScriptStrategy Enum (TSX)\nDESCRIPTION: Demonstrates how to use the `ScriptStrategy` enum in TSX files to specify loading strategies for the `<Script>` component.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/built-in-components/gatsby-script.md#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Script, ScriptStrategy } from \"gatsby\"\n\n<Script src=\"https://my-example-script\" strategy={ScriptStrategy.postHydrate} />\n<Script src=\"https://my-example-script\" strategy={ScriptStrategy.idle} />\n<Script src=\"https://my-example-script\" strategy={ScriptStrategy.offMainThread} />\n```\n\n----------------------------------------\n\nTITLE: Add layout component with global styles\nDESCRIPTION: Adds a layout component at `src/components/layout.js` to demonstrate global styles using Emotion. It imports `Global` and `css` from `@emotion/react` to define and apply global styles to the `div` element.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/styling/emotion.md#_snippet_6\n\nLANGUAGE: JSX\nCODE:\n```\nimport React from \"react\"\nimport { Global, css } from \"@emotion/react\"\nimport styled from \"@emotion/styled\"\n\nconst Wrapper = styled(\"div\")`\n  border: 2px solid green;\n  padding: 10px;\n`\n\nexport default function Layout({ children }) {\n  return (\n    <Wrapper>\n      <Global\n        styles={css`\n          div {\n            background: red;\n            color: white;\n          }\n        `}\n      />\n      {children}\n    </Wrapper>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing shouldOnCreateNode for Performance (JavaScript)\nDESCRIPTION: This snippet shows an implementation of `shouldOnCreateNode` to optimize performance in Gatsby plugins.  It prevents unnecessary node processing by filtering nodes based on specific criteria. This can significantly reduce build times for large datasets.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-xml/CHANGELOG.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimplement shouldOnCreateNode for all our plugins/benchmarks ([#27545](https://github.com/gatsbyjs/gatsby/issues/27545)) ([df914d9](https://github.com/gatsbyjs/gatsby/commit/df914d94a7c47c6082b6f165eb44dc6e15e12c7d))\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query for Shopify Metafields\nDESCRIPTION: This GraphQL query demonstrates how to fetch metafields using the `allShopifyMetafield` and filtering by `ownerType`. It replaces the previous queries for specific metafield types like `allShopifyProductMetafield`, `allShopifyCollectionMetafield` or `allShopifyProductVariantMetafield`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-shopify/README.md#_snippet_12\n\nLANGUAGE: GraphQL\nCODE:\n```\nallShopifyMetafield(filter: {ownerType: {eq: PRODUCT}}) {\n  nodes {\n    id\n    value\n    description\n    value\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Reporter API in onPluginInit\nDESCRIPTION: This code snippet shows how to use the `reporter` API within the `onPluginInit` Node API to print a message to the terminal. The `reporter` API is available in all Node APIs.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/creating-a-source-plugin/part-4/index.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Doesn't have to only be onPluginInit, any Node API has it\nexport const onPluginInit = ({ reporter }) => {\n  reporter.info(`Hello World!`)\n}\n```\n\n----------------------------------------\n\nTITLE: StaticQuery Basic Example in Gatsby with JSX\nDESCRIPTION: This code snippet demonstrates a basic implementation of the StaticQuery component in Gatsby. It imports React, StaticQuery, and graphql from gatsby. It defines a Header component that uses StaticQuery to fetch the site title from siteMetadata and renders it within a header element. This allows colocating a component with its data without passing data down from parent components.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/querying-data/static-query.md#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport React from \"react\"\nimport { StaticQuery, graphql } from \"gatsby\"\n\nexport default function Header() {\n  return (\n    <StaticQuery\n      query={graphql`\n        query HeadingQuery {\n          site {\n            siteMetadata {\n              title\n            }\n          }\n        }\n      `}\n      render={data => (\n        <header>\n          <h1>{data.site.siteMetadata.title}</h1>\n        </header>\n      )}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Gatsby Prismic Plugin\nDESCRIPTION: These commands navigate into the newly created project directory and install the 'gatsby-source-prismic' plugin, which is essential for fetching data from Prismic into the Gatsby site.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/sourcing-data/sourcing-from-prismic.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ncd prismic-tutorial\nnpm install gatsby-source-prismic\n```\n\n----------------------------------------\n\nTITLE: Fix Global Styles Pollution in Styled Components\nDESCRIPTION: This code snippet addresses a bug where global styles were being polluted, affecting other components. The fix ensures that styles are properly scoped and do not inadvertently affect unrelated parts of the application.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-styled-components/CHANGELOG.md#_snippet_10\n\nLANGUAGE: Text\nCODE:\n```\n**gatsby-plugin-styled-components:** fix global styles pollution ([#9943](https://github.com/gatsbyjs/gatsby/issues/9943)) ([a75c641](https://github.com/gatsbyjs/gatsby/commit/a75c641)), closes [#9922](https://github.com/gatsbyjs/gatsby/issues/9922)\n```\n\n----------------------------------------\n\nTITLE: Sass example (.scss syntax)\nDESCRIPTION: This is an example of a Sass stylesheet using the .scss syntax. It defines variables for font stack and primary color, and then uses those variables to style the body element. SCSS is a superset of CSS and more popular.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/styling/sass.md#_snippet_2\n\nLANGUAGE: CSS\nCODE:\n```\n$font-stack: Helvetica, sans-serif;\n$primary-color: #333;\n\nbody {\n  font: 100% $font-stack;\n  color: $primary-color;\n}\n```\n\n----------------------------------------\n\nTITLE: Using the StaticImage component\nDESCRIPTION: This snippet shows how to use the `StaticImage` component for static image imports.  This component is useful for simple image display where the image path is known at build time.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/image-migration-guide.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nconst HomePage = () => (\n      <StaticImage src=\"./example.jpg\" alt=\"please include an alt\" />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring gatsby-plugin-facebook-analytics in gatsby-config.js\nDESCRIPTION: This code snippet demonstrates how to configure the `gatsby-plugin-facebook-analytics` plugin in your `gatsby-config.js` file. It shows the required `appId` option and other optional settings like `version`, `xfbml`, `cookie`, `includeInDevelopment`, `debug`, and `language` to customize the Facebook Analytics integration.  It's essential to replace `YOUR_APP_ID` with a valid Facebook App ID.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-facebook-analytics/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// In your gatsby-config.js\nplugins: [\n  {\n    resolve: `gatsby-plugin-facebook-analytics`,\n    options: {\n      // Required - set this to the ID of your Facebook app.\n      appId: `YOUR_APP_ID`,\n\n      // Which version of the SDK to load.\n      version: `v3.3`,\n\n      // Determines whether XFBML tags used by social plugins are parsed.\n      xfbml: true,\n\n      // Determines whether a cookie is created for the session or not.\n      cookie: false,\n\n      // Include Facebook analytics in development.\n      // Defaults to false meaning the library will only be loaded in production.\n      includeInDevelopment: false,\n\n      // Include debug version of sdk\n      // Defaults to false meaning the library will load sdk.js\n      debug: false,\n\n      // Select your language.\n      language: `en_US`,\n    },\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Shell Command: Increasing File Watchers Limit\nDESCRIPTION: This shell command increases the system's file watchers limit, which can resolve the `ENOSPC` error encountered when the number of files being monitored exceeds the system limit. The command modifies the `sysctl.conf` file and applies the changes.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/local-development/troubleshooting-common-errors.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\necho fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf && sudo sysctl -p\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query for Shopify Product Images\nDESCRIPTION: This GraphQL query demonstrates how to fetch product images using the `media` field, following the V7 migration guide for the Shopify plugin. It retrieves the `gatsbyImageData` from the `ShopifyMediaImage` type within the `media` array.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-shopify/README.md#_snippet_10\n\nLANGUAGE: GraphQL\nCODE:\n```\nshopifyProduct {\n  nodes {\n    media {\n      ... on ShopifyMediaImage {\n        image {\n          gatsbyImageData\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing AniLink\nDESCRIPTION: This line imports the `AniLink` component from the `gatsby-plugin-transition-link` package. This allows you to use the component to create page transitions with predefined animations.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/adding-common-features/adding-page-transitions-with-plugin-transition-link.md#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport AniLink from \"gatsby-plugin-transition-link/AniLink\"\n```\n\n----------------------------------------\n\nTITLE: Conditional Template Logic (JavaScript)\nDESCRIPTION: This JavaScript code snippet demonstrates how to dynamically select a template based on the `__typename` of a content node. It imports the `fs` module, checks if a specific template exists for the content type, and uses a default template if not found. The `actions.createPage` is then called with the resolved template. It also sets context to the node.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-wordpress/docs/tutorials/querying-data.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n// at the top of the file\nconst fs = require(\"fs\")\n\nif (allContent.nodes.length) {\n  allContent.nodes.map(node => {\n    // Set the default template to use if a specific one doesn't exist\n    let template = require.resolve(`./src/templates/WpContentNode.js`)\n\n    // Try to find the template path for the specific Post Type\n    let templatePath = `./src/templates/${node.__typename}.js`\n    try {\n      if (fs.existsSync(templatePath)) {\n        template = require.resolve(templatePath)\n      }\n    } catch (err) {\n      console.error(err)\n    }\n\n    if (node.uri.length) {\n      actions.createPage({\n        path: node.uri,\n        component: template,\n        context: node,\n      })\n    }\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Replicating require.resolve in ESM\nDESCRIPTION: This JavaScript snippet demonstrates how to replicate the `require.resolve` function, commonly used in CommonJS modules, within an ES module.  It uses `createRequire` from the `module` module to create a `require` function.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/custom-configuration/es-modules.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { createRequire } from \"module\"\n\nconst require = createRequire(import.meta.url)\n```\n\n----------------------------------------\n\nTITLE: Build Gatsby site for production\nDESCRIPTION: This command compiles your Gatsby application and prepares it for deployment to a production environment. It optimizes the site for performance and prepares static assets.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/cheat-sheet.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngatsby build\n```\n\n----------------------------------------\n\nTITLE: Migrating Gatsby Link Component (navigateTo)\nDESCRIPTION: This snippet demonstrates how to update the Gatsby Link component to use `navigate` instead of the deprecated `navigateTo`, `push`, or `replace` APIs. The `navigate` function should be used for programmatic navigation within your Gatsby site.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v2-to-v3.md#_snippet_7\n\nLANGUAGE: JSX\nCODE:\n```\nimport React from \"react\"\n- import { navigateTo, push, replace } from \"gatsby\"\n+ import { navigate } from \"gatsby\"\n\nconst Form = () => (\n  <form\n    onSubmit={event => {\n      event.preventDefault()\n\n-     navigateTo(\"/form-submitted/\") // or push() or replace()\n+     navigate(\"/form-submitted/\")\n    }}\n  >\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring gatsby-plugin-catch-links in gatsby-config.js\nDESCRIPTION: This snippet shows how to include the gatsby-plugin-catch-links in your gatsby-config.js file by adding it to the plugins array. This enables the plugin to intercept local links.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-catch-links/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// In your gatsby-config.js\nplugins: [`gatsby-plugin-catch-links`]\n```\n\n----------------------------------------\n\nTITLE: Using the navigate function in Gatsby\nDESCRIPTION: Shows how to use the `navigate` function from Gatsby for programmatic navigation.  The navigate function is used to redirect the user to a different page after a form submission.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/built-in-components/gatsby-link.md#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\"\nimport { navigate } from \"gatsby\" // highlight-line\n\nconst Form = () => (\n  <form\n    onSubmit={event => {\n      event.preventDefault()\n\n      // TODO: do something with form values\n      // highlight-next-line\n      navigate(\"/form-submitted/\")\n    }}\n  >\n    {/* (skip form inputs for brevity) */}\n  </form>\n)\n```\n\n----------------------------------------\n\nTITLE: Using loadable-components to Load Client-Side Dependent Components (JSX)\nDESCRIPTION: This code demonstrates using `loadable-components` to wrap a component that depends on client-side only packages. It imports `Loadable` from `@loadable/component` and wraps the `ShopifyBuyButton` component, which relies on the `shopify-buy` and `@shopify/buy-button-js` libraries. This allows the `ShopifyBuyButton` to be dynamically loaded only on the client-side, avoiding SSR issues.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/using-client-side-only-packages.md#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { Component } from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport Loadable from \"@loadable/component\"\n\n// these two libraries are client-side only\nimport Client from \"shopify-buy\"\nimport ShopifyBuy from \"@shopify/buy-button-js\"\n\nconst ShopifyBuyButton = props => {\n  // custom component using shopify client-side libraries\n  return <div>etc</div>\n}\n\nconst LoadableBuyButton = Loadable(() => import(\"./ShopifyBuyButton\"))\n\nexport default LoadableBuyButton\n```\n\n----------------------------------------\n\nTITLE: Installing Gatsby\nDESCRIPTION: This command installs Gatsby as a dependency within an existing Create React App project. This is a necessary step when porting a Create React App to Gatsby.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/porting-from-create-react-app-to-gatsby.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install gatsby\n```\n\n----------------------------------------\n\nTITLE: Applying CSS Module to Layout Component\nDESCRIPTION: This JavaScript snippet shows how to import a CSS Module class into a Layout component and apply it to the top-level div element. It imports the 'container' class and uses it with the className prop to style the Layout's container.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-2/index.mdx#_snippet_21\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as React from 'react'\nimport { Link } from 'gatsby'\nimport { container } from './layout.module.css' // highlight-line\n\nconst Layout = ({ pageTitle, children }) => {\n  return (\n    <div className={container}> // highlight-line\n      <nav>\n        <ul>\n          <li><Link to=\"/\">Home</Link></li>\n          <li><Link to=\"/about\">About</Link></li>\n        </ul>\n      </nav>\n      <main>\n        <h1>{pageTitle}</h1>\n        {children}\n      </main>\n    </div>\n  )\n}\n\nexport default Layout\n```\n\n----------------------------------------\n\nTITLE: Rendering Page Content with a Template\nDESCRIPTION: This JSX code defines a basic template for rendering page content and links passed via the `pageContext` prop. It iterates over the `pageContent` and `links` arrays and displays them in unordered lists. The `Link` component from `gatsby` is used for navigation.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/sourcing-data/sourcing-from-json-or-yaml.md#_snippet_8\n\nLANGUAGE: JSX\nCODE:\n```\nimport React from \"react\"\nimport { Link } from \"gatsby\"\nconst basicTemplate = props => {\n  const { pageContext } = props\n  const { pageContent, links } = pageContext\n\n  return (\n    <div style={{ maxWidth: `960px`, margin: `1.45rem` }}>\n      <ul>\n        {pageContent.map((data, index) => {\n          return <li key={`content_item_${index}`}>{data.item}</li>\n        })}\n      </ul>\n      <ul>\n        {links.map((item, index) => {\n          return (\n            <li key={`link_${index}`}>\n              <Link to={item.to}>{item.to}</Link>\n            </li>\n          )\n        })}\n      </ul>\n    </div>\n  )\n}\nexport default basicTemplate\n```\n\n----------------------------------------\n\nTITLE: GraphQL elemMatch Example\nDESCRIPTION: This code snippet presents a contrived `elemMatch` example. The filter uses `elemMatch` to traverse an array `a` and find elements where the `b` property is equal to 5. This demonstrates how to query within array elements in Gatsby's GraphQL layer.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/query-filters.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nfilter = { a: { elemMatch: { b: { eq: 5 } } } }\n\nnodes = [\n  {\n    id: 1,\n    a: [\n      { a: 1, b: 8, c: 7 },\n      { a: 3, b: 5, c: 6 },\n    ],\n  },\n  {\n    id: 2,\n    a: [\n      { a: 2, b: 4, c: 6 },\n      { a: 6, b: 3, c: 3 },\n    ],\n  },\n  {\n    id: 3,\n    a: [\n      { a: 3, b: 5, c: 3 },\n      { a: 5, b: 4, c: 1 },\n    ],\n  },\n  {\n    id: 4,\n    a: [\n      { a: 4, b: 7, c: 1 },\n      { a: 9, b: 1, c: 6 },\n    ],\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Updating useCommandLine in gatsby-remark-prismjs\nDESCRIPTION: This commit updates the useCommandLine functionality within the gatsby-remark-prismjs plugin. The purpose of this update is to enhance the plugin's ability to handle and display command-line-style code blocks with proper syntax highlighting.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-prismjs/CHANGELOG.md#_snippet_12\n\n\n\n----------------------------------------\n\nTITLE: Shadowing Header Component in Gatsby Theme Blog\nDESCRIPTION: This snippet demonstrates how to shadow the `header.js` component from `gatsby-theme-blog` and integrate the custom `Navigation` component. It imports the `Navigation` component and renders it within the header.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/using-multiple-themes-together.md#_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\"\nimport { css } from \"theme-ui\"\nimport Navigation from \"../../components/navigation\" // highlight-line\n\nexport default function Header() {\n  return (\n    <header>\n      <div\n        css={css({\n          maxWidth: `container`,\n          mx: `auto`,\n          px: 3,\n          pt: 4,\n        })}\n      >\n        <Navigation /> // highlight-line\n      </div>\n    </header>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Number List with JSX and Line Highlighting\nDESCRIPTION: This code snippet demonstrates rendering a number list using React (JSX), with specific lines highlighted. It uses the `NumberList` component to map an array of numbers to a list of `li` elements and renders the component to the DOM. The code showcases how to highlight specific lines or blocks within a code snippet.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/using-emotion-prismjs/src/pages/2017-10-17-code-highlighting-with-line-highlight/index.md#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nfunction NumberList(props) {\n  // highlight-line\n  const numbers = props.numbers\n  const listItems = numbers.map(number => (\n    // highlight-start\n    <li key={number.toString()}>{number}</li>\n  ))\n  // highlight-end\n  return <ul>{listItems}</ul>\n}\n\nconst numbers = [1, 2, 3, 4, 5]\nReactDOM.render(\n  <NumberList numbers={numbers} />,\n  document.getElementById(\"root\")\n)\n```\n\n----------------------------------------\n\nTITLE: Create page with hard-coded context in gatsby-node.js\nDESCRIPTION: This code snippet demonstrates how to pass data to a page using the `context` property within the `createPage` API.  The `context` object is then available in the page component through the `pageContext` prop.  Requires Gatsby's `createPages` Node API.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/why-gatsby-uses-graphql.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nexports.createPages = ({ actions: { createPage } }) => {\n  createPage({\n    path: \"/page-with-context/\",\n    component: require.resolve(\"./src/templates/with-context.js\"),\n    context: {\n      title: \"We Don‚Äôt Need No Stinkin‚Äô GraphQL!\",\n      content: \"<p>This is page content.</p><p>No GraphQL required!</p>\",\n    },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Install gatsby-remark-embed-snippet Shell\nDESCRIPTION: Installs the gatsby-remark-embed-snippet, gatsby-remark-prismjs, gatsby-transformer-remark, and prismjs npm packages.  This is a prerequisite for using the plugin to embed code snippets.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-embed-snippet/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install gatsby-remark-embed-snippet gatsby-remark-prismjs gatsby-transformer-remark prismjs\n```\n\n----------------------------------------\n\nTITLE: Registering the Link Resolver in Gatsby\nDESCRIPTION: This JavaScript code imports the `registerLinkResolver` function from `gatsby-source-prismic-graphql` and the custom `linkResolver` function defined in `src/utils/linkResolver.js`. It then registers the `linkResolver` function, enabling it to be used throughout the Gatsby application for generating correct URLs for Prismic documents. This setup is crucial for creating dynamic links to Prismic content within the Gatsby site.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/prismic-source-graphql-tutorial.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { registerLinkResolver } = require(\"gatsby-source-prismic-graphql\")\nconst { linkResolver } = require(\"./src/utils/linkResolver\")\n\nregisterLinkResolver(linkResolver)\n```\n\n----------------------------------------\n\nTITLE: Fix PnP require.resolve in gatsby-plugin-typescript\nDESCRIPTION: This code snippet addresses an issue with Plug'n'Play (PnP) environments where the `require.resolve` function is used to correctly locate and set the Babel preset.  This fix ensures proper Babel preset resolution in PnP setups.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-typescript/CHANGELOG.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nuse `require.resolve` on `setBabelPreset`\n```\n\n----------------------------------------\n\nTITLE: Configuring gatsby-plugin-mdx with gatsby-source-filesystem\nDESCRIPTION: This configuration adds gatsby-plugin-mdx and gatsby-source-filesystem to the Gatsby plugins array. gatsby-source-filesystem is configured to source MDX files from the `src/pages` directory.  It uses ES modules syntax, requiring Gatsby v5.3.0 or later.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-mdx/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { dirname } from \"path\"\nimport { fileURLToPath } from \"url\"\n\nconst __dirname = dirname(fileURLToPath(import.meta.url))\n\nconst config = {\n  plugins: [\n    `gatsby-plugin-mdx`,\n    {\n      resolve: `gatsby-source-filesystem`,\n      options: {\n        name: `pages`,\n        path: `${__dirname}/src/pages`,\n      },\n    },\n  ],\n}\n\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Page Component with GraphQL Query\nDESCRIPTION: This code snippet shows a page component that uses GraphQL to query data for a specific markdown file.  It takes an ID as a parameter, retrieves the markdown content, and displays it as JSON. This relies on `gatsby-transformer-remark`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/rendering-options/using-deferred-static-generation.md#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from \"react\"\nimport { graphql } from \"gatsby\"\n\nexport default function Component(props) {\n  return <pre>{JSON.stringify(props, null, 2)}</pre>\n}\n\nexport const query = graphql`\n  query ($id: String) {\n    markdownRemark(id: { eq: $id }) {\n      html\n      frontmatter {\n        slug\n        date\n      }\n    }\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: Checkout component using SKU ID\nDESCRIPTION: Alternative version of the checkout component for older Stripe accounts that use SKU IDs instead of Price IDs. Replace `sku_DjQJN2HJ1kkvI3` with a valid SKU ID from your Stripe account.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/ecommerce-tutorial/index.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { error } = await stripe.redirectToCheckout({\n  mode: \"payment\",\n  lineItems: [{ price: \"sku_DjQJN2HJ1kkvI3\", quantity: 1 }],\n  successUrl: `http://localhost:8000/page-2/`,\n  cancelUrl: `http://localhost:8000/`,\n})\n```\n\n----------------------------------------\n\nTITLE: Jest Module Name Mapper Configuration (package.json)\nDESCRIPTION: This snippet shows how to configure a module name mapper in Jest within `package.json` to correctly resolve the `@reach/router` alias to `@gatsbyjs/reach-router`. This is needed to resolve the reach-router dependency issues that can occur after upgrading to Gatsby v3, especially in testing environments. It maps imports from `@reach/router` to the vendored version provided by Gatsby.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v2-to-v3.md#_snippet_40\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"jest\": {\n    \"moduleNameMapper\": {\n      \"^@reach/router(.*)\": \"<rootDir>/node_modules/@gatsbyjs/reach-router$1\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Hiding ranges Javascript\nDESCRIPTION: Shows how to hide ranges of lines from an embedded file by adding `// hide-range` comments\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-embed-snippet/README.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// hide-range{1-2}\nimport React from \"react\"\nimport ReactDOM from \"react-dom\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ul>\n        <li>Not hidden</li>\n        <li>Not hidden</li>\n        {/* hide-range{1-2} */}\n        <li>Hidden</li>\n        <li>Hidden</li>\n        {/* hide-next-line */}\n        <li>Hidden</li>\n      </ul>\n    </div>\n  )\n}\n\n// hide-range{1-2}\nconst rootElement = document.getElementById(\"root\")\nReactDOM.render(<App />, rootElement)\n```\n\n----------------------------------------\n\nTITLE: Install gatsby-plugin-offline with npm\nDESCRIPTION: Installs the gatsby-plugin-offline package using npm.  This is the first step in adding offline support to your Gatsby site.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-offline/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install gatsby-plugin-offline\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query Before v4: Accessing SitePage Context Fields\nDESCRIPTION: This GraphQL query demonstrates how to access specific fields within the `SitePage.context` object before Gatsby v4. It shows querying for a `foo` field within the context.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v3-to-v4.md#_snippet_9\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  allSitePage {\n    nodes {\n      context {\n        foo\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Node Mapping Between Markdown Files\nDESCRIPTION: This JavaScript snippet demonstrates how to configure node mappings in `gatsby-config.js` to link Markdown files to other Markdown files, specifically linking a post to an author by matching the `author_id` field. This enables querying author information from a separate Markdown file.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/config-files/gatsby-config.md#_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  plugins: [...],\n  mapping: {\n    'MarkdownRemark.frontmatter.author': `MarkdownRemark.frontmatter.author_id`\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Wildcard Path HTTP Headers in gatsby-config.js\nDESCRIPTION: This snippet configures custom HTTP headers for a wildcard path using an asterisk (`*`).  For example, `/some-path/*` will match `/some-path/foo` and `/some-path/foo/bar`. The `x-custom-header` is set to \"Hello World\" for all paths matching this pattern. Wildcard path matching provides broad header application capabilities.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/previews-deploys-hosting/headers.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n  headers: [\n    {\n      source: `/some-path/*`,\n      headers: [\n        {\n          key: `x-custom-header`,\n          value: `Hello World`,\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Import specific weights/styles from Fontsource\nDESCRIPTION: This code snippet demonstrates how to import specific weights and styles of the Open Sans font from Fontsource in `gatsby-browser.js`. By specifying the desired weight or style in the import path, you can include only the necessary font files, optimizing your site's performance.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/styling/using-web-fonts.md#_snippet_5\n\nLANGUAGE: JSX\nCODE:\n```\nimport \"@fontsource/open-sans/500.css\" // Weight 500.\nimport \"@fontsource/open-sans/900-normal.css\" // Select either normal or italic.\n```\n\n----------------------------------------\n\nTITLE: Filter with GraphQL - Element Match Operator\nDESCRIPTION: This query filters SitePlugin nodes to find plugins that contain \"chokidar\" in their dependencies using the `elemMatch` operator. The `elemMatch` operator is used to apply filters to elements within an array field, effectively searching for specific values within the array of dependencies.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/graphql-reference.md#_snippet_13\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  # elemMatch: I want to know all the plugins that contain \"chokidar\" in their dependencies.\n  # Note: the `allSitePlugin` query lists all the plugins used in our Gatsby site.\n  example_elemMatch: allSitePlugin(\n    filter: {\n      packageJson: { dependencies: { elemMatch: { name: { eq: \"chokidar\" } } } }\n    }\n  ) {\n    edges {\n      node {\n        name\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Video Data in a Template (JSX)\nDESCRIPTION: This code shows how to use video data queried from Markdown with GraphQL in a page template. It extracts the video URL and title from the `frontmatter` object and passes them as props to the `Video` component, dynamically rendering the video based on the content of the Markdown file.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/images-and-media/working-with-video.md#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\"\nimport { graphql } from \"gatsby\"\n\nimport Video from \"../components/video\"\n\nexport default function VlogTemplate({\n  data, // this prop will be injected by the GraphQL query below.\n}) {\n  const { markdownRemark } = data // data.markdownRemark holds your post data\n  const { frontmatter, html } = markdownRemark\n  return (\n    <div className=\"blog-post-container\">\n      <div className=\"blog-post\">\n        <h1>{frontmatter.title}</h1>\n        <h2>{frontmatter.date}</h2>\n        <Video\n          videoSrcURL={frontmatter.videoSrcURL}\n          videoTitle={frontmatter.videoTitle}\n        />\n        <div\n          className=\"blog-post-content\"\n          dangerouslySetInnerHTML={{ __html: html }}\n        />\n      </div>\n    </div>\n  )\n}\n\nexport const pageQuery = graphql`\n  query($path: String!) {\n    markdownRemark(frontmatter: { path: { eq: $path } }) {\n      html\n      frontmatter {\n        date(formatString: \"MMMM DD, YYYY\")\n        path\n        title\n        videoSrcURL\n        videoTitle\n      }\n    }\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: Query Events with GraphQL (gatsby-node.js)\nDESCRIPTION: This snippet queries for all events using GraphQL and handles any errors. The GraphQL query retrieves all event nodes, sorted by 'startDate' in ascending order, fetching 'id' and 'slug' fields. If the query encounters errors, it logs a panic message using the reporter.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/building-a-theme.md#_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\n// query for events and create pages\nexports.createPages = async ({ actions, graphql, reporter }) => {\n  const basePath = \"/\"\n  actions.createPage({\n    path: basePath,\n    component: require.resolve(\"./src/templates/events.js\"),\n  })\n\n  // highlight-start\n  const result = await graphql(`\n    query {\n      allEvent(sort: { startDate: ASC }) {\n        nodes {\n          id\n          slug\n        }\n      }\n    }\n  `)\n\n  if (result.errors) {\n    reporter.panic(\"error loading events\", result.errors)\n    return\n  }\n  // highlight-end\n```\n\n----------------------------------------\n\nTITLE: Setting Graph Size with Graphviz Attributes\nDESCRIPTION: This snippet demonstrates how to control the size of the rendered SVG by using the `size` attribute within the `graph` section of the Graphviz code. The `size` attribute accepts width and height values separated by a comma, affecting the overall dimensions of the graph.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/using-remark/src/pages/2019-02-06---graphviz/index.md#_snippet_3\n\nLANGUAGE: dot\nCODE:\n```\ndigraph graphname {\n  graph [size=\"1.5,1.5\"];\n  a -> b;\n  b -> c;\n  a -> c;\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Netlify CMS Plugin in gatsby-config.js\nDESCRIPTION: Registers the `gatsby-plugin-netlify-cms` plugin in the `gatsby-config.js` file. This plugin automatically installs and builds the CMS along with the static site.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/sourcing-data/sourcing-from-netlify-cms.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  plugins: [`gatsby-plugin-netlify-cms`],\n}\n```\n\n----------------------------------------\n\nTITLE: Configure gatsby-transformer-sharp and gatsby-plugin-sharp\nDESCRIPTION: This code snippet demonstrates how to configure the `gatsby-transformer-sharp` and `gatsby-plugin-sharp` plugins in the `gatsby-config.js` file. This configuration enables the use of Sharp for image processing within a Gatsby project.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-sharp/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// In your gatsby-config.js\nmodule.exports = {\n  plugins: [`gatsby-plugin-sharp`, `gatsby-transformer-sharp`],\n}\n```\n\n----------------------------------------\n\nTITLE: Bug Fix: Truncate non-latin language excerpts correctly\nDESCRIPTION: This commit addresses an issue in the gatsby-plugin-mdx plugin where excerpts for non-latin languages were not being truncated correctly. The fix ensures that excerpts generated from MDX content are properly truncated regardless of the language. This improves the display of content summaries in Gatsby sites using MDX.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-mdx/CHANGELOG.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nec80671\n```\n\n----------------------------------------\n\nTITLE: Throwing Error in Browser Context with Gatsby\nDESCRIPTION: This code snippet demonstrates how to throw an error specifically when the code is running in a browser context within a Gatsby application. It checks if the `window` object is undefined, which indicates a server-side environment, and throws an error with the message \"GATSBY\" if it is.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/v3.1/index.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nif (typeof window === \"undefined\") {\n  throw new Error(\"GATSBY\")\n}\n\nexport default function MyPage() {}\n```\n\n----------------------------------------\n\nTITLE: Add Node Attributes in AsciiDoc File (AsciiDoc)\nDESCRIPTION: Defines custom data within an AsciiDoc file that will be automatically attached to the node attributes. Attributes with the prefix `page-` are added under `pageAttributes` and can be accessed via GraphQL.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-asciidoc/README.md#_snippet_6\n\nLANGUAGE: asciidoc\nCODE:\n```\n= AsciiDoc Article Title\nFirstname Lastname <author@example.org>\n1.0, July 29, 2018, Asciidoctor article template\n\n:page-title: Article\n:page-path: /my-blog-entry\n:page-category: My Category\n\n```\n\n----------------------------------------\n\nTITLE: Migrating to Gatsby Script Component (Diff)\nDESCRIPTION: Shows how to replace a standard HTML script tag with the Gatsby `<Script>` component, improving performance by loading the script after hydration.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/v4.15/index.md#_snippet_0\n\nLANGUAGE: Diff\nCODE:\n```\nimport { Script } from \"gatsby\";\n\n-<script src=\"https://my-example-script\" />\n+<Script src=\"https://my-example-script\" />\n```\n\n----------------------------------------\n\nTITLE: Gatsby Create Pages API Implementation\nDESCRIPTION: This JavaScript code uses Gatsby's `createPages` API to programmatically generate pages for blog posts and customer case studies. It queries data from ButterCMS using GraphQL and then iterates through the results to create individual pages based on predefined templates. The slug from ButterCMS is used to create the page path and is passed as context to the template.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/sourcing-from-buttercms.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst path = require(`path`)\n\nexports.createPages = async ({ graphql, actions }) => {\n  const { createPage } = actions\n\n  // Blog post template\n  const blogPost = path.resolve(`./src/templates/blog-post.js`)\n\n  //customer case study template\n  const customerCaseStudy = path.resolve(\n    `./src/templates/customer-case-study.js`\n  )\n\n  let posts\n  try {\n    posts = await graphql(`\n      {\n        allButterPost {\n          edges {\n            node {\n              id\n              seo_title\n              slug\n              categories {\n                name\n                slug\n              }\n              author {\n                first_name\n                last_name\n                email\n                slug\n                profile_image\n              }\n              body\n            }\n          }\n        }\n      }\n    `)\n  } catch (error) {\n    console.log(`Error Running Querying Posts`, error)\n  }\n\n  posts = posts.data.allButterPost.edges\n\n  posts.forEach((post, index) => {\n    const previous = index === posts.length - 1 ? null : posts[index + 1].node\n    const next = index === 0 ? null : posts[index - 1].node\n\n    // Create blog posts pages.\n    createPage({\n      path: `/blog/${post.node.slug}`,\n      component: blogPost,\n      context: {\n        slug: post.node.slug,\n        previous,\n        next,\n      },\n    })\n  })\n\n  // Fetch Customer Case study pages\n  let pages\n  try {\n    pages = await graphql(`\n      {\n        allButterPage(filter: { page_type: { eq: \"customer_case_study\" } }) {\n          edges {\n            node {\n              id\n              slug\n              facebook_open_graph_title\n              seo_title\n              headline\n              testimony\n              customer_logo\n            }\n          }\n        }\n      }\n    `)\n  } catch (error) {\n    console.log(`Error Running Querying Pages`, error)\n  }\n\n  //Create Customer Case study pages\n  pages.data.allButterPage.edges.forEach(page => {\n    createPage({\n      path: `/case-study/${page.node.slug}`,\n      component: customerCaseStudy,\n      context: {\n        slug: page.node.slug,\n      },\n    })\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Client-Side Package via CDN in React Component (JSX)\nDESCRIPTION: This code snippet demonstrates how to load a client-side only package via CDN in a React component using `react-helmet`. The `componentDidMount` lifecycle method is used to initialize and use the external library after the component has been mounted on the client. The `Helmet` component injects a `<script>` tag into the `<head>` of the document, loading the external library.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/using-client-side-only-packages.md#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { Component } from \"react\"\nimport { Helmet } from \"react-helmet\"\n\nclass MyComponent extends Component {\n  componentDidMount() {\n    // set up and use external package as needed\n    window.externalLibrary.method()\n  }\n\n  render(props) {\n    return (\n      <React.Fragment>\n        <Helmet>\n          <script src=\"https://cdn.example/path-to-external-library.js\" />\n        </Helmet>\n\n        <h1>Hello World</h1>\n        {/* etc */}\n      </React.Fragment>\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Query Single Contentful Asset GraphQL\nDESCRIPTION: This GraphQL query retrieves a single `ContentfulAsset` node with a specific title ('foo'). It includes the asset's `contentful_id`, `title`, `description`, and file details such as `fileName`, `url`, `contentType`, `size`, `height`, and `width`. The query is intended to be used with Gatsby's `graphql` tag.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-contentful/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport const assetQuery = graphql`\n  {\n    contentfulAsset(title: { eq: \"foo\" }) {\n      contentful_id\n      title\n      description\n      file {\n        fileName\n        url\n        contentType\n        details {\n          size\n          image {\n            height\n            width\n          }\n        }\n      }\n    }\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: Creating a New Gatsby Site with Prompt\nDESCRIPTION: This command initiates an interactive shell that guides you through setting up a new Gatsby site. It prompts you to configure options like CMS, styling system, and plugins.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-cli/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngatsby new\n```\n\n----------------------------------------\n\nTITLE: Gatsby Node Webpack Config Modification (JavaScript)\nDESCRIPTION: This code shows how to modify the webpack configuration in a gatsby-node.js file to add the GatsbyThemeComponentShadowingResolverPlugin. It retrieves flattened plugins and themes from the store and configures the resolver plugin to handle component shadowing. It uses the Gatsby API `onCreateWebpackConfig`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/conceptual/how-shadowing-works.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst GatsbyThemeComponentShadowingResolverPlugin = require(`.`) \n\nexports.onCreateWebpackConfig = (\n  { store, stage, getConfig, rules, loaders, actions },\n  pluginOptions\n) => {\n  const { flattenedPlugins, themes } = store.getState()\n\n  actions.setWebpackConfig({\n    resolve: {\n      plugins: [\n        new GatsbyThemeComponentShadowingResolverPlugin({\n          extensions: program.extensions,\n          themes: flattenedPlugins.map(plugin => {\n            return {\n              themeDir: plugin.pluginFilepath,\n              themeName: plugin.name,\n            }\n          }),\n          projectRoot: program.directory,\n        }),\n      ],\n    },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Importing renderRichText in JSX\nDESCRIPTION: This imports the `renderRichText` function from the `gatsby-source-contentful/rich-text` module, required for rendering contentful richtext fields.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-contentful/README.md#_snippet_19\n\nLANGUAGE: js\nCODE:\n```\nimport { renderRichText } from \"gatsby-source-contentful/rich-text\"\n```\n\n----------------------------------------\n\nTITLE: Querying excerpt with pruneLength (GraphQL)\nDESCRIPTION: A GraphQL query to retrieve the excerpt with a custom `pruneLength`. This example specifies a length of 500 characters.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-remark/README.md#_snippet_8\n\nLANGUAGE: GraphQL\nCODE:\n```\n{\n  allMarkdownRemark {\n    edges {\n      node {\n        html\n        excerpt(pruneLength: 500)\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing dependencies and running build\nDESCRIPTION: This snippet shows how to install the required node modules and then run the Gatsby build process. It is typically used as the first step in running the image processing benchmark.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/benchmarks/image-processing/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Configuring Styled-JSX with JSX Plugins in Gatsby (JavaScript)\nDESCRIPTION: This code snippet shows how to configure the gatsby-plugin-styled-jsx with JSX plugins, such as styled-jsx-plugin-postcss. The `jsxPlugins` option allows you to add CSS preprocessing capabilities to your styled-jsx styles. It requires the specified JSX plugins to be installed.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-styled-jsx/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nplugins: [\n  {\n    resolve: `gatsby-plugin-styled-jsx`,\n    options: {\n      jsxPlugins: [\"styled-jsx-plugin-postcss\"],\n    },\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Installing React Testing Library and Jest DOM\nDESCRIPTION: This command installs React Testing Library, Jest DOM (for custom Jest matchers), and jest-environment-jsdom as development dependencies for your project.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/testing/testing-react-components.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev @testing-library/react @testing-library/jest-dom jest-environment-jsdom\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query for Shopify Product Options\nDESCRIPTION: This GraphQL query demonstrates how to fetch product options using the `options` field and retrieve the `shopifyId` for each option, following the V7 migration guide for the Shopify plugin.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-shopify/README.md#_snippet_11\n\nLANGUAGE: GraphQL\nCODE:\n```\nshopifyProduct {\n  options { # each of these options are of type \"ShopifyProductOption\"\n    shopifyId\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Site Title\nDESCRIPTION: This JSX code snippet showcases how to display the site title within a Gatsby component. It receives the `siteTitle` as a prop and renders it within an `<h1>` tag, wrapped in a `Link` component that navigates to the homepage. The `siteTitle` prop is expected to be a string.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/modifying-a-starter.md#_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\nimport { Link } from \"gatsby\"\nimport PropTypes from \"prop-types\"\nimport React from \"react\"\n\nconst Header = (\n  { siteTitle } // highlight-line\n) => (\n  <header>\n    <div\n      style={{\n        margin: `0 auto`,\n        maxWidth: 960,\n        padding: `1.45rem 1.0875rem`,\n      }}\n    >\n      <h1 style={{ margin: 0 }}>\n        <Link\n          to=\"/\"\n          style={{\n            color: `white`,\n            textDecoration: `none`,\n          }}\n        >\n          {siteTitle} // highlight-line\n        </Link>\n      </h1>\n    </div>\n  </header>\n)\n\nHeader.propTypes = {\n  siteTitle: PropTypes.string,\n}\n\nHeader.defaultProps = {\n  siteTitle: ``,\n}\n\nexport default Header\n```\n\n----------------------------------------\n\nTITLE: Including GIFs in Components (JSX)\nDESCRIPTION: This code snippet demonstrates how to import and render an animated GIF in a Gatsby component using JSX. It imports the GIF file and then uses an `<img>` tag to display it. The `Layout` component is assumed to be defined elsewhere.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/images-and-media/working-with-gifs.md#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport * as React from 'react'\n\nimport Layout from '../components/layout'\nimport otterGIF from '../gifs/otter.gif'\n\nconst AboutPage = () => (\n    return (\n        <Layout>\n            <img src={otterGIF} alt=\"Otter dancing with a fish\" />\n        </Layout>\n    )\n)\n\nexport default AboutPage;\n```\n\n----------------------------------------\n\nTITLE: Configure Gatsby Plugin CXS in gatsby-config.js\nDESCRIPTION: This code snippet demonstrates how to add the `gatsby-plugin-cxs` to your `gatsby-config.js` file.  This configuration enables the plugin to handle cxs styling and server-side rendering. No dependencies beyond installing the plugin are needed.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-cxs/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  plugins: [`gatsby-plugin-cxs`],\n}\n```\n\n----------------------------------------\n\nTITLE: Update Gatsby version in package.json (JSON)\nDESCRIPTION: Updates the Gatsby dependency version in package.json to the latest v5 release.  This ensures the project uses the latest Gatsby features and fixes.  Modify the `dependencies` section of `package.json`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v4-to-v5.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"dependencies\": {\n    \"gatsby\": \"^5.0.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Pass Location Prop from Page to Layout\nDESCRIPTION: This code demonstrates how to pass the `location` prop from a page component to a layout component.  The page component receives the prop from Gatsby, and then passes it on to the layout component.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v1-to-v2.md#_snippet_10\n\nLANGUAGE: JSX\nCODE:\n```\nimport React from \"react\"\nimport Layout from \"../components/layout\"\n\nexport default function Home(props) {\n  return (\n    <Layout location={props.location}>\n      <div>Hello World</div>\n    </Layout>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Gatsby Head API Example\nDESCRIPTION: This code demonstrates the Gatsby Head API for adding <head> child elements and HTML attributes to the output page. It includes setting the page title and favicon.\n\nDependencies: React.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/porting-an-html-site-to-gatsby.md#_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\"\n\nimport \"../styles/normalize.css\"\nimport \"../styles/style.css\"\n\nexport default function Home() {\n  return (\n    <>\n      <header></header>\n      <main>\n        <div>Hello world!</div>\n      </main>\n    </>\n  )\n}\n\n// highlight-start\nexport const Head = () => (\n  <>\n    <title>Taylor's Tidy Trees</title>\n    <link href=\"/favicon.ico\" rel=\"shortcut icon\" type=\"image/x-icon\" />\n  </>\n)\n// highlight-end\n```\n\n----------------------------------------\n\nTITLE: Find Alias in alias.conf on Debian (Shell)\nDESCRIPTION: This command uses cat and grep to find and display the line in the alias.conf file that defines the alias for the /icons/ directory. This confirms the existence and content of the problematic alias.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-manifest/README.md#_snippet_17\n\nLANGUAGE: Shell\nCODE:\n```\ncat /etc/apache2/mods-available/alias.conf | grep \"Alias /icons/\"\n```\n\n----------------------------------------\n\nTITLE: Submitting Data to Airtable via POST Request\nDESCRIPTION: This JSON payload represents the data expected in a POST request to the `/api/airtable` route.  The request should include the name, email, and message fields. Upon successful submission, the data will be stored in the configured Airtable base.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/functions-airtable-form/README.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"name\": \"Sample Name\",\n  \"email\": \"sample@example.com\",\n  \"message\": \"Hello, World!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Dynamic defaultDataLayer using a Function\nDESCRIPTION: This code snippet illustrates how to define the `defaultDataLayer` option as a function in your `gatsby-config.js`. This allows you to dynamically set data layer values at runtime, leveraging browser APIs like `window`.  The function should return an object representing the data layer. Ensure that the `window` object and any properties accessed within it are available in the browser context when the GTM script is executed.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-google-tagmanager/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// In your gatsby-config.js\nplugins: [\n  {\n    resolve: \"gatsby-plugin-google-tagmanager\",\n    options: {\n      // datalayer to be set before GTM is loaded\n      // should be a stringified object or object\n      //\n      // Defaults to null\n      defaultDataLayer: function () {\n        return {\n          pageType: window.pageType,\n        }\n      },\n    },\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query for Product Media and Videos\nDESCRIPTION: GraphQL query to fetch all media previews (images and videos) for products.  Commonly used on product pages to display images and videos. Returns ShopifyExternalVideo and ShopifyVideo nodes.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-shopify/README.md#_snippet_5\n\nLANGUAGE: GraphQL\nCODE:\n```\nquery {\n  products: allShopifyProduct {\n    nodes {\n      media {\n        preview {\n          image {\n            gatsbyImageData\n          }\n        }\n        ... on ShopifyExternalVideo {\n          embeddedUrl\n          host\n        }\n        ... on ShopifyVideo {\n          sources {\n            format\n            height\n            url\n            width\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Gatsby Remark Images Dynamic Wrapper Style\nDESCRIPTION: This code snippet demonstrates how to configure the `gatsby-remark-images` plugin with a dynamic `wrapperStyle`. It uses the aspect ratio of the image to create a flexible layout. The lodash library is used for rounding the aspect ratio to two decimal places.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-images/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  resolve: `gatsby-remark-images`,\n  options: {\n    maxWidth: 800,\n    wrapperStyle: fluidResult => `flex:${_.round(fluidResult.aspectRatio, 2)};`,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Creating slug for Markdown nodes in gatsby-node.js\nDESCRIPTION: This code snippet shows how to create a slug for Markdown nodes in `gatsby-node.js` using the `gatsby-source-filesystem` plugin. This is necessary to uniquely identify content for the RSS feed.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/adding-common-features/adding-an-rss-feed.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { createFilePath } = require(`gatsby-source-filesystem`)\n\nexports.onCreateNode = ({ node, actions, getNode }) => {\n  const { createNodeField } = actions\n  // highlight-next-line\n  if (node.internal.type === `MarkdownRemark`) {\n    const value = createFilePath({ node, getNode })\n    createNodeField({\n      name: `slug`,\n      node,\n      value,\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Prevent Caching Invalid Relative Paths (JavaScript)\nDESCRIPTION: This bug fix prevents the gatsby-plugin-offline from caching invalid relative paths. This ensures that only valid resources are cached, preventing errors and improving the overall offline experience.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-offline/CHANGELOG.md#_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nprevent caching invalid relative paths\n```\n\n----------------------------------------\n\nTITLE: 2.x gatsby-plugin-offline configuration\nDESCRIPTION: Example configuration of gatsby-plugin-offline in version 2.x. Shows setting the importWorkboxFrom option.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-offline/README.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nplugins: [\n  {\n    resolve: `gatsby-plugin-offline`,\n    options: {\n      importWorkboxFrom: `cdn`,\n    },\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Gatsby source filesystem for posts\nDESCRIPTION: Configures `gatsby-source-filesystem` to source MDX files from a `content/posts` directory, allowing these files to be used for programmatically created pages.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/routing/mdx.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-mdx`,\n    // Add a collection called \"posts\" that looks\n    // for files in content/posts\n    {\n      resolve: `gatsby-source-filesystem`,\n      options: {\n        name: `posts`,\n        path: `${__dirname}/content/posts`,\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Render product data in React\nDESCRIPTION: This React component is used as a template for product pages. It receives product data via the `pageContext` prop and renders the product's title, image, price, and description.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/why-gatsby-uses-graphql.md#_snippet_6\n\nLANGUAGE: JSX\nCODE:\n```\nimport React from \"react\"\n\nconst Product = ({ pageContext }) => (\n  <div>\n    <h1>{pageContext.title}</h1>\n    <img\n      src={pageContext.image}\n      alt={pageContext.title}\n      style={{ float: \"left\", marginRight: \"1rem\", width: 150 }}\n    />\n    <p>{pageContext.price}</p>\n    <div dangerouslySetInnerHTML={{ __html: pageContext.description }} />\n  </div>\n)\n\nexport default Product\n```\n\n----------------------------------------\n\nTITLE: Supporting PREFIX_PATHS env variable - gatsby-cli JavaScript\nDESCRIPTION: This snippet adds support for the `PREFIX_PATHS` environment variable in the gatsby-cli.  This allows users to easily configure path prefixing for their Gatsby sites during deployment, particularly useful for sites hosted on subpaths.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-cli/CHANGELOG.md#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nsupport for PREFIX_PATHS env variable ([#21627](https://github.com/gatsbyjs/gatsby/issues/21627)) ([7bc2c3b](https://github.com/gatsbyjs/gatsby/commit/7bc2c3b))\n```\n\n----------------------------------------\n\nTITLE: Fetching Delta Updates Using Contentful Sync API in JavaScript\nDESCRIPTION: This JavaScript code snippet illustrates how to use the Contentful Sync API to fetch delta updates based on the presence of a sync token. If a sync token exists, it uses the `nextSyncToken` parameter; otherwise, it requests an initial sync. The `basicSyncConfig` object contains common configuration options for the sync API.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/creating-a-source-plugin/part-5/index.mdx#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst query = syncToken\n      ? { nextSyncToken: syncToken, ...basicSyncConfig }\n      : { initial: true, ...basicSyncConfig }\n    currentSyncData = await syncClient.sync(query)\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query for MDX Node\nDESCRIPTION: This JavaScript code snippet shows a GraphQL query designed to fetch an MDX node based on its title.  It searches for an MDX node where the `title` field matches the string \"Using a Theme\".  The query returns the `id` and `title` fields of the matching node.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/querying-data/page-query.md#_snippet_6\n\nLANGUAGE: GraphQL\nCODE:\n```\nexport const query = graphql`\n  query {\n    mdx(title: { eq: \"Using a Theme\" }) {\n      id\n      title\n    }\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: Creating Pages in gatsby-node.js (JavaScript)\nDESCRIPTION: This snippet demonstrates the `createPages` API in `gatsby-node.js`. It queries WordPress posts using GraphQL and then uses the `createPage` action to generate pages for each post, using the post's slug as the page path and passing the slug to the blog post template as context. Requires the `path` module and the Gatsby `graphql` and `actions` APIs.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/wordpress-source-plugin-tutorial.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst path = require(`path`)\n\nexports.createPages = ({ graphql, actions }) => {\n  const { createPage } = actions\n  return graphql(`\n    {\n      allWordpressPost(sort: { date: ASC }) {\n        edges {\n          node {\n            title\n            excerpt\n            content\n            slug\n          }\n        }\n      }\n    }\n  `).then(result => {\n    console.log(JSON.stringify(result, null, 4))\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Type Name Function (JavaScript)\nDESCRIPTION: This JavaScript code demonstrates how to provide a custom function for determining the type name of the generated nodes. The function accepts a `node` and `object` argument and returns a string representing the type name. In this example, it creates a type name by combining the base name of the directory containing the CSV file with the suffix 'Data', using lodash to camelCase and capitalize the result.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-csv/README.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// In your gatsby-config.js\nconst _ = require(`lodash`)\nconst path = require(`path`)\n\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-transformer-csv`,\n      options: {\n        typeName: ({ node, object }) =>\n          _.upperFirst(_.camelCase(`${path.basename(node.dir)} Data`)),\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring the Plugin in gatsby-config.js\nDESCRIPTION: This snippet demonstrates how to configure the gatsby-plugin-google-gtag in the gatsby-config.js file.  It includes the required trackingIds, gtagConfig options for anonymizing IP addresses and setting cookie expiry, and pluginConfig options for controlling script placement, respecting Do Not Track, excluding paths, setting origin, and delaying route updates.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-google-gtag/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-google-gtag`,\n      options: {\n        // You can add multiple tracking ids and a pageview event will be fired for all of them.\n        trackingIds: [\n          \"GA-TRACKING_ID\", // Google Analytics / GA\n          \"AW-CONVERSION_ID\", // Google Ads / Adwords / AW\n          \"DC-FLOODIGHT_ID\", // Marketing Platform advertising products (Display & Video 360, Search Ads 360, and Campaign Manager)\n        ],\n        // This object gets passed directly to the gtag config command\n        // This config will be shared across all trackingIds\n        gtagConfig: {\n          optimize_id: \"OPT_CONTAINER_ID\",\n          anonymize_ip: true,\n          cookie_expires: 0,\n        },\n        // This object is used for configuration specific to this plugin\n        pluginConfig: {\n          // Puts tracking script in the head instead of the body\n          head: false,\n          // Setting this parameter is also optional\n          respectDNT: true,\n          // Avoids sending pageview hits from custom paths\n          exclude: [\"/preview/**\", \"/do-not-track/me/too/\"],\n          // Defaults to https://www.googletagmanager.com\n          origin: \"YOUR_SELF_HOSTED_ORIGIN\",\n          // Delays processing pageview events on route update (in milliseconds)\n          delayOnRouteUpdate: 0,\n        },\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Example Data for Gatsby GraphQL Schema Inference\nDESCRIPTION: This JSON demonstrates a simple data structure that Gatsby can use to infer a GraphQL schema. Gatsby will automatically create a schema based on the structure of this data, allowing you to query the `title` field using GraphQL. If you give Gatsby data that looks like this, it will create a schema that looks something like this: `title: String`\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/conceptual/graphql-concepts.md#_snippet_6\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"title\": \"A long long time ago\"\n}\n```\n\n----------------------------------------\n\nTITLE: Applying CSS Module Style in React Component\nDESCRIPTION: This JavaScript snippet demonstrates how to import and apply a CSS Module style to a React component. It imports the 'title' style from the corresponding CSS Module file and applies it to an h1 element using the className prop, ensuring that the style is scoped to this component.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-2/index.mdx#_snippet_19\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as React from 'react'\nimport { title } from './my-component.module.css' // highlight-line\n\nconst MyComponent = () => {\n  return (\n    {/* highlight-next-line */}\n    <h1 className={title}>\n      Super Sweet Title Page\n    </h1>\n  )\n}\n\nexport default MyComponent\n```\n\n----------------------------------------\n\nTITLE: Feature Detection with hasFeature (JavaScript)\nDESCRIPTION: This example shows how to use `hasFeature` to check if the current version of Gatsby has a certain feature. This allows plugins to conditionally use new features or provide polyfills for older versions. It imports `hasFeature` from `gatsby-plugin-utils`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-utils/README.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { hasFeature } = require(`gatsby-plugin-utils`)\n\nif (!hasFeature(`image-cdn`)) {\n  // You can polyfill image-cdn here so older versions have support as well\n}\n```\n\n----------------------------------------\n\nTITLE: Configure OpenTelemetry Tracing (Honeycomb)\nDESCRIPTION: This JavaScript file configures OpenTelemetry to send tracing data to Honeycomb. It sets up the OpenTelemetry SDK, configures the gRPC exporter with the Honeycomb API key and dataset, and initializes the tracer. It exports `create` and `stop` functions for Gatsby to use during the build process to initialize and shut down the tracer, leveraging the OpenTracing shim for compatibility.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/performance-tracing.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst process = require(`process`)\nconst { Metadata, credentials } = require(`@grpc/grpc-js`)\nconst api = require(`@opentelemetry/api`)\nconst { TracerShim } = require(`@opentelemetry/shim-opentracing`)\nconst opentracing = require(`opentracing`)\nconst { NodeSDK } = require(`@opentelemetry/sdk-node`)\nconst {\n  getNodeAutoInstrumentations,\n} = require(`@opentelemetry/auto-instrumentations-node`)\nconst { Resource } = require(`@opentelemetry/resources`)\nconst {\n  SemanticResourceAttributes,\n} = require(`@opentelemetry/semantic-conventions`)\nconst {\n  CollectorTraceExporter,\n} = require(`@opentelemetry/exporter-collector-grpc`)\n\nconst metadata = new Metadata()\nmetadata.set(`x-honeycomb-team`, `ADD YOUR API KEY`)\nmetadata.set(`x-honeycomb-dataset`, `ADD YOUR DATASET NAME`)\nconst traceExporter = new CollectorTraceExporter({\n  url: `grpc://api.honeycomb.io:443/`,\n  credentials: credentials.createSsl(),\n  metadata,\n})\n\nconst sdk = new NodeSDK({\n  resource: new Resource({\n    [SemanticResourceAttributes.SERVICE_NAME]: `gatsby`,\n  }),\n  traceExporter,\n  instrumentations: [getNodeAutoInstrumentations()],\n})\n\nsdk\n  .start()\n  .then(() => console.log(`Tracing initialized`))\n  .catch(error => console.log(`Error initializing tracing`, error))\n\nexports.create = () => {\n  // We shim Gatsby's use of OpenTracing for OpenTelemetry\n  const tracer = api.trace.getTracer(`my-tracer`)\n  return new TracerShim(tracer)\n}\n\nexports.stop = async () => {\n  await sdk.shutdown()\n}\n```\n\n----------------------------------------\n\nTITLE: Using AgilityImage Component for Responsive Images (JSX)\nDESCRIPTION: This code snippet showcases the usage of the AgilityImage component from the `@agility/gatsby-image-agilitycms` package. It demonstrates how to render responsive images stored in Agility CMS.  The image prop is passed to the AgilityImage component, along with layout options to control how the image is displayed.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/sourcing-from-agilitycms.md#_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\nimport { AgilityImage } from \"@agility/gatsby-image-agilitycms\"\n\nconst Component = ({ image }) => (\n  <AgilityImage image={image} layout=\"fullWidth\" />\n)\n```\n\n----------------------------------------\n\nTITLE: gatsby-config.js: Apollo Link with Retry (JavaScript)\nDESCRIPTION: Illustrates how to configure gatsby-source-graphql with Apollo Link to add retry functionality. This code snippet utilizes `@apollo/client` to implement retries for GraphQL queries that fail.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-graphql/README.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n// gatsby-config.js\nconst { createHttpLink, from } = require(`@apollo/client`)\nconst { RetryLink } = require(`@apollo/client/link/retry`)\n\nconst retryLink = new RetryLink({\n  delay: {\n    initial: 100,\n    max: 2000,\n    jitter: true,\n  },\n  attempts: {\n    max: 5,\n    retryIf: (error, operation) =>\n      Boolean(error) && ![500, 400].includes(error.statusCode),\n  },\n})\n\nmodule.exports = {\n  plugins: [\n    {\n      resolve: \"gatsby-source-graphql\",\n      options: {\n        typeName: \"SWAPI\",\n        fieldName: \"swapi\",\n        url: \"https://api.graphcms.com/simple/v1/swapi\",\n\n        // `pluginOptions`: all plugin options\n        //   (i.e. in this example object with keys `typeName`, `fieldName`, `url`, `createLink`)\n        createLink: pluginOptions =>\n          from([retryLink, createHttpLink({ uri: pluginOptions.url })]),\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Data File Example\nDESCRIPTION: This JSON snippet illustrates a sample data file (`data/posts.json`) containing an array of post objects. Each object has properties like `id`, `text`, and `image`. The `image` field's value is a file path, which Gatsby can infer as a `File` type and resolve accordingly.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/schema-inference.md#_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n[{\n    \"id\": \"1685001452849004065\",\n    \"text\": \"Venice is üëå\",\n    \"image\": \"images/BdiU-TTFP4h.jpg\"\n}]\n```\n\n----------------------------------------\n\nTITLE: Cloning a Gatsby Starter from GitHub (Shell)\nDESCRIPTION: This command clones a Gatsby starter project directly from a GitHub repository, skipping the interactive prompt. The first argument is the desired name for the new site directory, and the second is the GitHub URL of the starter.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/gatsby-cli.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ngatsby new my-new-blog https://github.com/gatsbyjs/gatsby-starter-blog\n```\n\n----------------------------------------\n\nTITLE: Create Schema Customization with Date Formatting\nDESCRIPTION: This code snippet demonstrates how to use Gatsby Type Builders to add date formatting options to fields using the `dateformat` extension. It defines a schema with `AuthorJson` and `MarkdownRemark` types, applying date formatting to `joinedAt` and `publishedAt` fields respectively. The options are then available as field arguments when querying.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/graphql-data-layer/schema-customization.md#_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nexports.createSchemaCustomization = ({ actions, schema }) => {\n  const { createTypes } = actions\n  const typeDefs = [\n    \"type MarkdownRemark implements Node { frontmatter: Frontmatter }\",\n    `type Frontmatter { \n      publishedAt: Date @dateformat(formatString: \\\"DD-MM-YYYY\\\")\n    }`,\n    schema.buildObjectType({\n      name: \"AuthorJson\",\n      fields: {\n        joinedAt: {\n          type: \"Date\",\n          extensions: {\n            dateformat: {},\n          },\n        },\n      },\n    }),\n  ]\n  createTypes(typeDefs)\n}\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting npm install failures (PowerShell)\nDESCRIPTION: These commands are used to resolve issues with `npm install` failing due to problems with `node-gyp` or missing libraries after installing `windows-build-tools`. They uninstall `node-gyp`, configure npm to use Python 2.7 and Visual Studio 2015, clear the npm cache, and then attempt to install the project's dependencies again. This is specifically for Visual Studio 2015.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/local-development/gatsby-on-windows.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nnpm uninstall node-gyp -g\nnpm config set python python2.7\nnpm config set msvs_version 2015\nnpm cache clean -f\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Adding Skip Navigation Links to Layout Component (React)\nDESCRIPTION: This snippet demonstrates how to add SkipNavLink and SkipNavContent components from the @reach/skip-nav library to a Gatsby layout component. SkipNavLink provides a link at the top of the page, and SkipNavContent marks the beginning of the main content. The skip link allows keyboard users to bypass navigation and jump directly to the content, enhancing accessibility.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/using-reach-skip-nav/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// src/components/layout.js\n\nimport { SkipNavLink, SkipNavContent } from \"@reach/skip-nav\"\nimport \"@reach/skip-nav/styles.css\" //this will show/hide the link on focus\n\nconst Layout = ({ children }) => (\n  <>\n    <SkipNavLink /> //put the link at the very top of your page\n    <Navigation />\n    <Header />\n    <SkipNavContent /> //the link will go to here, so put it right before main content\n    <main>{children}</main>\n    <Footer />\n  </>\n)\nexport default Layout\n```\n\n----------------------------------------\n\nTITLE: HTML Link Tag for Script Preloading\nDESCRIPTION: This code snippet demonstrates how Gatsby uses the `<link>` tag with `rel=\"preload\"` to instruct the browser to prioritize downloading a JavaScript file. The `as=\"script\"` attribute specifies that the resource is a script. The `href` attribute provides the URL of the script to preload, and `key` provides a unique identifier for the element.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-code-splitting-works.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<link\n  as=\"script\"\n  rel=\"preload\"\n  key=\"app-2e49587d85e03a033f58.js\"\n  href=\"/app-2e49587d85e03a033f58.js\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating a Page Component in Gatsby with JSX\nDESCRIPTION: This code snippet demonstrates how to create a basic page component in Gatsby. Components placed under `src/pages` are automatically converted into pages with paths based on their file name. This example shows a simple 'About' page.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/conceptual/building-with-components.md#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport * as React from \"react\"\n\nfunction AboutPage() {\n  return (\n    <div className=\"about-container\">\n      <p>About me.</p>\n    </div>\n  )\n}\n\nexport default AboutPage\n```\n\n----------------------------------------\n\nTITLE: Query all files with GraphQL\nDESCRIPTION: This GraphQL query retrieves the `name` of all files in the Gatsby data layer using the `allFile` field. It demonstrates how to access the `nodes` and their associated `name` properties. This query fetches all files without filtering.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-4/index.mdx#_snippet_13\n\nLANGUAGE: graphql\nCODE:\n```\nquery MyQuery {\n  allFile {\n    nodes {\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure gatsby-plugin-canonical-urls\nDESCRIPTION: Configures the `gatsby-plugin-canonical-urls` plugin in `gatsby-config.js`. It sets the `siteUrl` option, which is required for generating the canonical URLs.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-canonical-urls/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// In your gatsby-config.js\nplugins: [\n  {\n    resolve: `gatsby-plugin-canonical-urls`,\n    options: {\n      siteUrl: `https://www.example.com`,\n    },\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Running navigate-calls codemod\nDESCRIPTION: This command executes the `navigate-calls` codemod, replacing `navigateTo` calls from `gatsby-link` with `navigate` calls from `gatsby`.  This codemod updates the code to use the new `navigate` function available in the main Gatsby package.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-codemods/README.md#_snippet_10\n\nLANGUAGE: Shell\nCODE:\n```\nnpx gatsby-codemods navigate-calls <filepath>\n```\n\n----------------------------------------\n\nTITLE: Installing Firebase CLI with npm\nDESCRIPTION: This command installs the Firebase CLI globally using npm. It's a prerequisite for deploying to Firebase Hosting.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/previews-deploys-hosting/deploying-to-firebase.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install -g firebase-tools\n```\n\n----------------------------------------\n\nTITLE: Configure Gatsby Plugin in gatsby-config.js\nDESCRIPTION: This code snippet demonstrates how to include a local plugin in the `gatsby-config.js` file of a Gatsby site.  It uses `require.resolve` to dynamically import the plugin based on its file path, allowing Gatsby to load and utilize the plugin during the build process.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/starters/gatsby-starter-plugin/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  plugins: [\n    // other gatsby plugins\n    // ...\n    require.resolve(`../my-plugin`),\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom REST API Route Prefix in Gatsby Source WordPress\nDESCRIPTION: This feature allows users to configure a custom REST API route prefix for the gatsby-source-wordpress plugin. This is useful when the WordPress installation uses a non-standard REST API endpoint.  Configuration enables flexibility and compatibility with various WordPress setups.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-wordpress/CHANGELOG.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n**gatsby-source-wordpress:** Ability to set a custom rest api route prefix ([#20998](https://github.com/gatsbyjs/gatsby/issues/20998)) ([789fb1c](https://github.com/gatsbyjs/gatsby/commit/789fb1c))\n```\n\n----------------------------------------\n\nTITLE: Configuring gatsby-plugin-gatsby-cloud\nDESCRIPTION: Configures the `gatsby-plugin-gatsby-cloud` plugin with various options, including headers, allPageHeaders, and flags to control the merging of security, link, and caching headers. Also contains an option to transform headers and another to control generation of matchPath rewrites.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-gatsby-cloud/README.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-gatsby-cloud`,\n      options: {\n        headers: {}, // option to add more headers. `Link` headers are transformed by the below criteria\n        allPageHeaders: [], // option to add headers for all pages. `Link` headers are transformed by the below criteria\n        mergeSecurityHeaders: true, // boolean to turn off the default security headers\n        mergeLinkHeaders: true, // boolean to turn off the default gatsby js headers\n        mergeCachingHeaders: true, // boolean to turn off the default caching headers\n        transformHeaders: (headers, path) => headers, // optional transform for manipulating headers under each path (e.g.sorting), etc.\n        generateMatchPathRewrites: true, // boolean to turn off automatic creation of redirect rules for client only paths\n      },\n    },\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Gatsby Plugin Emotion\nDESCRIPTION: This code snippet shows how to add the gatsby-plugin-emotion to your gatsby-config.js file and configure its options. The options allow customization of the Emotion Babel plugin, such as enabling source maps, auto-labeling, label formatting, and CSS prop optimization.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-emotion/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-emotion`,\n      options: {\n        // Accepts the following options, all of which are defined by `@emotion/babel-plugin` plugin.\n        // The values for each key in this example are the defaults the plugin uses.\n        sourceMap: true,\n        autoLabel: \"dev-only\",\n        labelFormat: `[local]`,\n        cssPropOptimization: true,\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Writing Sass/SCSS stylesheets\nDESCRIPTION: This snippet shows an example of a Sass/SCSS stylesheet. It defines styles for the `html` element, setting the background color and the color of `p` elements. This file should be placed in the `src` directory or another location where your Gatsby project expects stylesheets.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-sass/README.md#_snippet_1\n\nLANGUAGE: scss\nCODE:\n```\nhtml {\n  background-color: rebeccapurple;\n  p {\n    color: white;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Import Example JavaScript\nDESCRIPTION: Demonstrates how Gatsby's `.cache/async-requires.js` file uses dynamic imports to split code. Each component is mapped to a function that imports its corresponding file using a webpack chunk name for separate bundling.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-code-splitting-works.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexports.components = {\n  \"component--src-blog-js\": () =>\n    import(\n      \"/home/site/src/blog.js\" /* webpackChunkName: \"component---src-blog-js\" */\n    ),\n  // more components\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering ResponsiveLine Chart with Nivo\nDESCRIPTION: This code renders the `ResponsiveLine` component from the Nivo library, configuring various properties such as data, margins, scales, axes, points, and legends to customize the appearance and behavior of the chart. The `data` prop is bound to the `lineData` constant. The component is wrapped in a div to control its size.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/using-mdx/src/pages/chart-info.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<div style={{ height: \"40vh\" }} id=\"line-chart\">\n  <ResponsiveLine\n    data={lineData}\n    margin={{ top: 50, right: 110, bottom: 50, left: 60 }}\n    xScale={{ type: \"point\" }}\n    yScale={{\n      type: \"linear\",\n      min: \"auto\",\n      max: \"auto\",\n      stacked: true,\n      reverse: false,\n    }}\n    yFormat=\" >-.2f\"\n    axisTop={null}\n    axisRight={null}\n    axisBottom={{\n      orient: \"bottom\",\n      tickSize: 5,\n      tickPadding: 5,\n      tickRotation: 0,\n      legend: \"Year\",\n      legendOffset: 36,\n      legendPosition: \"middle\",\n    }}\n    axisLeft={{\n      orient: \"left\",\n      tickSize: 5,\n      tickPadding: 5,\n      tickRotation: 0,\n      legend: \"Spend in MM\",\n      legendOffset: -40,\n      legendPosition: \"middle\",\n    }}\n    pointSize={10}\n    pointColor={{ theme: \"background\" }}\n    pointBorderWidth={2}\n    pointLabelYOffset={-12}\n    useMesh={true}\n    legends=[\n      {\n        anchor: \"bottom-right\",\n        direction: \"column\",\n        justify: false,\n        translateX: 100,\n        translateY: 0,\n        itemsSpacing: 0,\n        itemDirection: \"left-to-right\",\n        itemWidth: 80,\n        itemHeight: 20,\n        itemOpacity: 0.75,\n        symbolSize: 12,\n        symbolShape: \"circle\",\n        symbolBorderColor: \"rgba(0, 0, 0, .5)\",\n        effects: [\n          {\n            on: \"hover\",\n            style: {\n              itemBackground: \"rgba(0, 0, 0, .03)\",\n              itemOpacity: 1,\n            },\n          },\n        ],\n      },\n    ]\n  />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Component Extension Example Using Shadowing\nDESCRIPTION: This code snippet demonstrates how to extend a `Box` component using shadowing in Gatsby. The component imports the original `Box` component from the theme and wraps it in a `div` with custom styles.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/conceptual/how-shadowing-works.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from \"react\"\nimport Box from \"gatsby-theme-tomato/src/box\"\nimport Card from \"../components/card\"\n\nexport default function MyBox(props) {\n  return (\n    <div style={{ padding: \"20px\", backgroundColor: \"rebeccapurple\" }}>\n      <Box {...props} />\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Gatsby Plugin in gatsby-config.js\nDESCRIPTION: This JavaScript code snippet demonstrates how to include the `gatsby-plugin-preload-fonts` plugin in your `gatsby-config.js` file. This is a required step to enable the plugin within your Gatsby site.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-preload-fonts/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  plugins: [`gatsby-plugin-preload-fonts`],\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Profile Component (React/JSX)\nDESCRIPTION: This React component, Profile, displays the user's profile information. In this basic example, it's a placeholder with static text, demonstrating where user data would be rendered after successful authentication. It's meant to be a protected route accessible only to logged-in users.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/authentication-tutorial.md#_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\"\n\nconst Profile = () => (\n  <>\n    <h1>Your profile</h1>\n    <ul>\n      <li>Name: Your name will appear here</li>\n      <li>E-mail: And here goes the mail</li>\n    </ul>\n  </>\n)\n\nexport default Profile\n```\n\n----------------------------------------\n\nTITLE: Installing Gatsby Image and Sharp Plugins\nDESCRIPTION: This shell command installs the `gatsby-plugin-image` and `gatsby-plugin-sharp` npm packages, which are required for using responsive images in Gatsby with Contentful.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-contentful/README.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nnpm install gatsby-plugin-image gatsby-plugin-sharp\n```\n\n----------------------------------------\n\nTITLE: Convert Layout Children Prop\nDESCRIPTION: This diff demonstrates how to convert the `children` prop in a layout component from a render prop (function) to a normal prop. This is a breaking change in Gatsby v2 where the `children` prop is no longer a function.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v1-to-v2.md#_snippet_6\n\nLANGUAGE: Diff\nCODE:\n```\nimport React from \"react\"\n\nexport default function Layout({ children }) {\n  return (\n    <div>\n-    {children()}\n+    {children}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Adding PostCSS plugins to gatsby-plugin-less\nDESCRIPTION: This snippet demonstrates how to add PostCSS plugins to the gatsby-plugin-less configuration.  It shows how to specify custom PostCSS plugins to further process the Less output. The `somePostCssPlugin` function is a placeholder for an actual PostCSS plugin.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-less/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// in gatsby-config.js\nplugins: [\n  {\n    resolve: `gatsby-plugin-less`,\n    options: {\n      postCssPlugins: [somePostCssPlugin()],\n    },\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Configure gatsby-source-filesystem\nDESCRIPTION: Shows how to configure `gatsby-source-filesystem` to enable querying for the public URL of local files in WordPress Media Items. Requires installation via npm or yarn and pointing to a local file path.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-wordpress/docs/features/media-item-processing.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-source-filesystem`,\n      options: {\n        name: `assets`,\n        path: `${__dirname}/content/assets`, // this needs to include a path with atleast 1 file\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Cleaning Gatsby Cache and Public Directories (Shell)\nDESCRIPTION: This command deletes the `.cache` and `public` directories in your Gatsby project, effectively resetting the build process.  This is useful for resolving issues related to stale data, GraphQL errors, dependency conflicts, or plugin problems. This should be run from the root of your project.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/gatsby-cli.md#_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\ngatsby clean\n```\n\n----------------------------------------\n\nTITLE: async-requires.js exports in JavaScript\nDESCRIPTION: This code snippet demonstrates the structure of `async-requires.js`. It exports components and data as functions that use dynamic imports with webpackChunkName hints for code splitting. The components function lazily loads components, while the data function imports data.json.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/write-pages.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexports.components = {\n  \"component---src-blog-2-js\": () =>\n    import(\n      \"/home/site/src/blog/2.js\" /* webpackChunkName: \\\"component---src-blog-2-js\\\" */\n    ),\n  // more components\n}\n\nexports.data = () => import(\"/home/site/.cache/data.json\")\n```\n\n----------------------------------------\n\nTITLE: Download and Install nvm\nDESCRIPTION: This command downloads and executes the nvm (Node Version Manager) installation script. nvm is used to manage multiple Node.js versions on a single system. The script is downloaded from the official nvm repository on GitHub using `curl` and executed using `bash`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-0/index.mdx#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash\n```\n\n----------------------------------------\n\nTITLE: Install gatsby-transformer-remark\nDESCRIPTION: Installs the `gatsby-transformer-remark` plugin to recognize markdown files and read their content. This plugin converts the frontmatter metadata part of your markdown files to `frontmatter` and the content part to HTML.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/routing/adding-markdown-pages.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install gatsby-transformer-remark\n```\n\n----------------------------------------\n\nTITLE: Configure Gatsby Plugin\nDESCRIPTION: This code snippet shows how to configure the `gatsby-transformer-hjson` plugin in `gatsby-config.js`. Adding this plugin to the `plugins` array enables Gatsby to process HJSON files and make their data available for querying via GraphQL.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-hjson/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// In your gatsby-config.js\nmodule.exports = {\n  plugins: [`gatsby-transformer-hjson`],\n}\n```\n\n----------------------------------------\n\nTITLE: Using gatsby-remark-* plugins with gatsby-plugin-mdx\nDESCRIPTION: This configuration shows how to use Gatsby-specific remark plugins with `gatsby-plugin-mdx`.  In this case, `gatsby-remark-images` is used to optimize images within MDX files. It requires installing the plugin separately.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-mdx/README.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst config = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-mdx`,\n      options: {\n        gatsbyRemarkPlugins: [\n          {\n            resolve: `gatsby-remark-images`,\n            options: {\n              maxWidth: 590,\n            },\n          },\n        ],\n      },\n    },\n  ],\n}\n\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Install Gatsby Source WordPress Plugin (Shell)\nDESCRIPTION: This command installs the `gatsby-source-wordpress` plugin using npm. This plugin is essential for sourcing data from a WordPress site into the Gatsby application.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-wordpress/docs/tutorials/building-a-new-site-wordpress-and-gatsby.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install gatsby-source-wordpress\n```\n\n----------------------------------------\n\nTITLE: Updating gatsby-dev-cli Minor and Patch\nDESCRIPTION: This commit updates the `gatsby-dev-cli` package to a newer minor and patch version.  It addresses bug fixes and minor improvements. The pull request is referenced by its GitHub issue number.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-dev-cli/CHANGELOG.md#_snippet_6\n\nLANGUAGE: Text\nCODE:\n```\nupdate minor and patch for gatsby-dev-cli [#28971](https://github.com/gatsbyjs/gatsby/issues/28971) ([2e10dae](https://github.com/gatsbyjs/gatsby/commit/2e10dae130d77861bb229d21fd7e46046f5c73d7))\n```\n\n----------------------------------------\n\nTITLE: Adding iTunes RSS blocks\nDESCRIPTION: This code demonstrates how to add iTunes RSS blocks to the feed configuration using the `setup` option in `gatsby-config.js`. This is useful for creating RSS feeds for podcasts.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/adding-common-features/adding-an-rss-feed.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-feed`,\n      options: {\n        query: `\n          {\n            site {\n              siteMetadata {\n                title\n                description\n                siteUrl\n                site_url: siteUrl\n              }\n            }\n          }\n        `,\n        /* highlight-start */\n        setup: options => ({\n          ...options,\n          custom_namespaces: {\n            itunes: 'http://www.itunes.com/dtds/podcast-1.0.dtd',\n          },\n          custom_elements: [\n            { 'itunes:author': 'Michael Scott' },\n            { 'itunes:explicit': 'clean' },\n          ],\n        }),\n        /* highlight-end */\n        feeds: [\n          {\n            ...\n          },\n        ],\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query for Extracted Data\nDESCRIPTION: This GraphQL query retrieves the data extracted from JavaScript files by the gatsby-transformer-javascript-static-exports plugin. The query fetches all nodes of type `JsFrontmatter` and returns the `data` field, which contains the metadata extracted from the JavaScript exports.  The example fields include error, path, title, written, category, description, and updated.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-javascript-static-exports/README.md#_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  allJsFrontmatter {\n    edges {\n      node {\n        data {\n          error\n          path\n          title\n          written\n          category\n          description\n          updated\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding gatsby-plugin-react-helmet to gatsby-config.js\nDESCRIPTION: This example shows how to add the gatsby-plugin-react-helmet to the plugins array in your gatsby-config.js file. This enables the plugin to automatically handle React Helmet components.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-react-helmet/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nplugins: [`gatsby-plugin-react-helmet`]\n```\n\n----------------------------------------\n\nTITLE: Displaying SQIP Previews using Pure JSX\nDESCRIPTION: This code snippet demonstrates how to display SQIP previews using pure JSX, by layering the SQIP data URI as a low-resolution placeholder behind the full-resolution image.  This approach avoids client-side JavaScript but loads all images regardless of the viewport.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-sqip/README.md#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<div className=\"image-wrapper\">\n  <img src={image.sqip.dataURI} alt=\"\" role=\"presentation\" />\n  <img src={image.src} alt=\"Useful description\" className=\"image\" />\n</div>\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query for Embedding Image in Rich Text\nDESCRIPTION: This GraphQL query retrieves Rich Text content with embedded asset references. It includes the `gatsbyImageData` field on the `ContentfulAsset` to retrieve image data optimized for Gatsby images.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-contentful/README.md#_snippet_20\n\nLANGUAGE: graphql\nCODE:\n```\nmainContent {\n  raw\n  references {\n    ... on ContentfulAsset {\n      contentful_id\n      __typename\n      gatsbyImageData\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Forestry CMS Settings Configuration (settings.yml)\nDESCRIPTION: This YAML configuration file (`.forestry/settings.yml`) defines the settings for the Forestry CMS, including the new page extension, upload directories, and build commands.  The `upload_dir` and `public_path` are configured to save media files in the `/static/uploads` directory.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/sourcing-from-forestry.md#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\n---\nnew_page_extension: md\nauto_deploy: false\nadmin_path: /static/admin\nwebhook_url:\nsections:\nupload_dir: uploads\npublic_path: \"/uploads\"\nfront_matter_path: \"\"\nuse_front_matter_path: false\nfile_template: \":filename:\"\nbuild:\n  preview_output_directory: public\n  install_dependencies_command: npm install\n  preview_docker_image: node:10\n  mount_path: \"/srv\"\n  working_dir: \"/srv\"\n  instant_preview_command: npm run forestry:preview\n```\n\nLANGUAGE: YAML\nCODE:\n```\nupload_dir: static/uploads\npublic_path: \"/static/uploads\"\n```\n\n----------------------------------------\n\nTITLE: Run Gatsby with OpenTelemetry Configuration\nDESCRIPTION: This shell command runs the Gatsby build process with OpenTelemetry tracing enabled. It uses the `node -r` flag to require the tracing configuration file (`tracing.js`) immediately, ensuring that tracing is initialized before Gatsby starts. It sets the `GATSBY_OPEN_TRACING_CONFIG_FILE` environment variable to specify the tracing configuration file.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/performance-tracing.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nGATSBY_OPEN_TRACING_CONFIG_FILE=tracing.js node -r ./tracing.js node_modules/gatsby/cli.js build\n```\n\n----------------------------------------\n\nTITLE: Obtaining JWT Token for Authenticated Requests in Gatsby Source WordPress\nDESCRIPTION: This commit adds a feature to gatsby-source-wordpress that allows users to obtain a JWT (JSON Web Token) to make authenticated requests to the WordPress data source. This enables secure access to protected content and resources.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-wordpress/CHANGELOG.md#_snippet_19\n\n\n\n----------------------------------------\n\nTITLE: Updating Peer Dependencies for React and React-DOM\nDESCRIPTION: This commit updates the peer dependencies for React and React-DOM to versions 16.9.0 and 17+. This ensures compatibility with a wider range of React versions.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-styled-components/CHANGELOG.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nMove peerdeps to 16.9.0 & 17+ for react & react-dom [#29735](https://github.com/gatsbyjs/gatsby/issues/29735) ([6b86b99](https://github.com/gatsbyjs/gatsby/commit/6b86b99f7e760c6ffa74b1330399d9fdd94e48a2))\n```\n\n----------------------------------------\n\nTITLE: getServerData Example (Basic)\nDESCRIPTION: Illustrates the basic structure of the `getServerData` function, which is required to enable server-side rendering for a page in Gatsby. It shows how to return a status code, props, and headers.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/rendering-options/server-side-rendering.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nexport async function getServerData(context) {\n  return {\n    status: 200, // The HTTP status code that should be returned\n    props: {}, // Will be passed to the page component as \"serverData\" prop\n    headers: {}, // HTTP response headers for this page\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Collection Route Component Example\nDESCRIPTION: This JavaScript code shows a React component for a collection route page. It accesses the `sku` from `props.data.fields` and the dynamic segment `name` from `props.params`. It also defines a GraphQL query to fetch the `sku` field for a given product `id`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/routing/file-system-route-api.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from \"react\"\nimport { graphql } from \"gatsby\"\n\nexport default function Component(props) {\n  return props.data.fields.sku + props.params.name // highlight-line\n}\n\n// This is the page query that connects the data to the actual component. Here you can query for any and all fields\n// you need access to within your code. Again, since Gatsby always queries for `id` in the collection, you can use that\n// to connect to this GraphQL query.\n\nexport const query = graphql`\n  query($id: String) {\n    product(id: { eq: $id }) {\n      fields {\n        sku\n      }\n    }\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: Calling a Custom Event\nDESCRIPTION: This JavaScript snippet shows how to call a custom event using window.gtag.  The first example calls the event for all products, while the second targets a specific product using the send_to parameter.  It is important to guard against SSR (Server-Side Rendering) by checking if the window object is defined before calling window.gtag.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-google-gtag/README.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nwindow.gtag(\"event\", \"click\", { ...data })\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nwindow.gtag(\"event\", \"click\", { send_to: \"AW-CONVERSION_ID\", ...data })\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\ntypeof window !== \"undefined\" && window.gtag(\"event\", \"click\", { ...data })\n```\n\n----------------------------------------\n\nTITLE: Reading State with Context Consumer\nDESCRIPTION: This component demonstrates how to use `ContextConsumer` to read state from the context. It conditionally renders a `Menu` component based on the `menuOpen` state.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-layout/README.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport ContextConsumer from \"./Context\"\n\nconst ComponentThatReadState = () => (\n  <ContextConsumer>\n    {({ data }) => {\n      data.menuOpen ? <Menu /> : null\n    }}\n  </ContextConsumer>\n)\n```\n\n----------------------------------------\n\nTITLE: Mapping generic HTML elements to React components\nDESCRIPTION: This JavaScript code snippet demonstrates how to map generic HTML elements like `h1`, `h2`, and `h3` to custom React components (e.g., `PrimaryTitle`, `SecondaryTitle`, `TertiaryTitle`) using `rehype-react`. This allows you to use styled components or other custom elements in your Markdown.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/using-remark/src/pages/2018-01-27---custom-components/index.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst renderAst = new rehypeReact({\n  createElement: React.createElement,\n  components: {\n    h1: PrimaryTitle,\n    h2: SecondaryTitle,\n    h3: TertiaryTitle,\n  },\n}).Compiler\n```\n\n----------------------------------------\n\nTITLE: Enable Stateful Source Nodes JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to use the `enableStatefulSourceNodes` action to opt-out of stale node deletion. It checks for the `stateful-source-nodes` feature using `gatsby-plugin-utils` and calls the action if supported.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/node-creation.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { hasFeature } from \"gatsby-plugin-utils\"\n\nexports.sourceNodes = ({ actions }) => {\n  if (hasFeature(`stateful-source-nodes`)) {\n    actions.enableStatefulSourceNodes()\n  } else {\n    // fallback to old behavior where all nodes are iterated on and touchNode is called.\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Gatsby Development Server (Shell)\nDESCRIPTION: This command navigates into the newly created project directory and starts the Gatsby development server. This will compile the project and serve it locally, allowing for live editing and previewing.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/starters/gatsby-starter-wordpress-blog/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ncd my-gatsby-starter-wordpress-blog-starter/\ngatsby develop\n```\n\n----------------------------------------\n\nTITLE: React component to display blog post data\nDESCRIPTION: This React component (`blog-post.js`) fetches and displays blog post data using a GraphQL query. It retrieves the title, content, and header image from the Flotiq CMS via Gatsby's GraphQL layer and renders them within the component. The image URL is dynamically constructed using environment variables and data from the query.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/sourcing-from-flotiq.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from \"react\"\nimport { graphql } from \"gatsby\"\n\nclass BlogPostTemplate extends React.Component {\n  render() {\n    const post = this.props.data.blogpost\n    const siteTitle = this.props.data.site.siteMetadata.title\n    const { previous, next } = this.props.pageContext\n\n    return (\n      <article>\n        <header>\n          <h1>{post.title}</h1>\n        </header>\n        {post.headerImage && post.headerImage[0] && (\n          <img\n            src={`${process.env.GATSBY_FLOTIQ_BASE_URL}/image/1920x0/${post.headerImage[0].id}.${post.headerImage[0].extension}`}\n            alt=\"${post.title}\"\n            style={{ maxWidth: \"100%\", height: \"auto\" }}\n          />\n        )}\n        <div dangerouslySetInnerHTML={{ __html: post.content }} />\n      </article>\n    )\n  }\n}\n\nexport default BlogPostTemplate\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug($slug: String!) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    blogpost(slug: { eq: $slug }) {\n      id\n      title\n      content\n      headerImage {\n        extension\n        id\n      }\n    }\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: Automatic Icon Generation Configuration\nDESCRIPTION: This code configures the plugin to automatically generate icons from a single source icon. The path to the icon is specified using the `icon` option.  The plugin will generate various icon sizes based on this single source image.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-manifest/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nicon: `src/images/icon.png`, // This path is relative to the root of the site.\n```\n\n----------------------------------------\n\nTITLE: Single JSON object example\nDESCRIPTION: Example JSON file containing a single object. The object will be converted into a single GraphQL node. The node type is based on the parent directory name.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-json/README.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{ \"value\": \"c\" }\n```\n\n----------------------------------------\n\nTITLE: Logging API Data to Console\nDESCRIPTION: This code snippet demonstrates how to log the fetched data to the console using `console.dir`. It sets the `depth` option to `null` to ensure that the entire object is displayed, including nested properties. This is useful for inspecting the structure and content of the data retrieved from the API.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/creating-a-source-plugin/part-2/index.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// Imports\n\nexport const sourceNodes: GatsbyNode[`sourceNodes`] = async (gatsbyApi) => {\n  // Rest of the code\n\n  console.dir(data, { depth: null })\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel for Emotion Plugin\nDESCRIPTION: This diff shows how to modify the `jest-preprocess.js` file to include the Emotion Babel plugin. This plugin allows Jest to understand and process Emotion's CSS-in-JS syntax during testing, enabling proper rendering and snapshotting of styled components.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/testing/testing-css-in-js.md#_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\nconst babelOptions = {\n~  presets: [\"babel-preset-gatsby\", \"@emotion/babel-preset-css-prop\"],\n+  plugins: [\n+    \"emotion\",\n+  ],\n}\n\nmodule.exports = require(\"babel-jest\").createTransformer(babelOptions)\n```\n\n----------------------------------------\n\nTITLE: CSS for Line Highlighting\nDESCRIPTION: This CSS snippet provides styles for highlighting specific lines of code within the code blocks. It sets the background color, display properties, margins, padding, and border to visually emphasize the selected lines.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-prismjs/README.md#_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.gatsby-highlight-code-line {\n  background-color: #feb;\n  display: block;\n  margin-right: -1em;\n  margin-left: -1em;\n  padding-right: 1em;\n  padding-left: 0.75em;\n  border-left: 0.25em solid #f99;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing babel-preset-gatsby\nDESCRIPTION: Installs babel-preset-gatsby as a development dependency using npm. This is a necessary first step to use the preset in your Gatsby project.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/babel-preset-gatsby/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --dev babel-preset-gatsby\n```\n\n----------------------------------------\n\nTITLE: Installing gatsby-remark-katex\nDESCRIPTION: Install gatsby-transformer-remark, gatsby-remark-katex, and katex using npm. This allows you to use LaTeX math equations in your Gatsby markdown files.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-katex/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install gatsby-transformer-remark gatsby-remark-katex katex\n```\n\n----------------------------------------\n\nTITLE: Babel Preprocessor (jest-preprocess.js)\nDESCRIPTION: This JavaScript file configures Babel for Jest. It defines a Babel options object that uses the babel-preset-gatsby preset and exports a transformer created using babel-jest, enabling Babel to process JavaScript files during testing.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/testing/unit-testing.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst babelOptions = {\n  presets: [\"babel-preset-gatsby\"],\n}\n\nmodule.exports = require(\"babel-jest\").default.createTransformer(babelOptions)\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Gatsby Script\nDESCRIPTION: Illustrates how to import the `Script` component from `gatsby` and use it within a React component to load a script from a URL.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/built-in-components/gatsby-script.md#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\"\n// highlight-next-line\nimport { Script } from \"gatsby\"\n\nfunction MyPage() {\n  // highlight-next-line\n  return <Script src=\"https://my-example-script\" />\n}\n\nexport default MyPage\n```\n\n----------------------------------------\n\nTITLE: Configure Cross-Origin Option\nDESCRIPTION: This JavaScript code snippet demonstrates how to configure the `crossOrigin` option for the `gatsby-plugin-preload-fonts` plugin in your `gatsby-config.js` file.  It shows both setting it to a static value and using a function for more dynamic control.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-preload-fonts/README.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-preload-fonts`,\n      options: {\n        crossOrigin: `use-credentials`,\n        // OR\n        crossOrigin: pathname =>\n          pathname.match(/^\\/elevated/) ? `use-credentials` : `anonymous`,\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphQL Language Server\nDESCRIPTION: This snippet shows how to configure the GraphQL language server (e.g., in VSCode) to use the generated GraphQL schema and provide autocompletion and validation. It involves creating a `graphql.config.js` file that points to the generated `graphql.config.json` file in the `.cache/typegen` directory. This enables features like autocompletion within GraphQL queries.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/v4.14/index.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = require(\"./.cache/typegen/graphql.config.json\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Slice with createPages API in Gatsby\nDESCRIPTION: This code snippet demonstrates how to create a slice using the `createPages` API action in Gatsby. It defines the slice's ID and specifies the component to be used for rendering the slice.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/v4.21/index.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nactions.createSlice({\n  id: `footer`,\n  component: require.resolve(`./src/components/footer.js`),\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Styled Components Plugin to Gatsby Config\nDESCRIPTION: This JavaScript code snippet configures the `gatsby-plugin-styled-components` plugin in the `gatsby-config.js` file.  This plugin enables the use of Styled Components for CSS-in-JS styling within the Gatsby project.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/adding-search-with-algolia.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nplugins: [\n    ... // your existing plugins here\n    `gatsby-plugin-styled-components`,\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Enhanced Product HTML using Snipcart attributes on a Button in JSX\nDESCRIPTION: This JSX code snippet shows the updated product HTML where the Snipcart attributes are applied to a `<button>` element.  This is for keyboard accessibility purposes. data-item-url is also hardcoded with a valid URL.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/e-commerce-with-datocms-and-snipcart/index.md#_snippet_11\n\nLANGUAGE: JSX\nCODE:\n```\nrender={data => (\n  <Layout site={data.site}>\n    <div className=\"Catalogue\">\n      {\n        data.products.edges.map(({ node: product }) => (\n          <div className=\"Catalogue__item\" key={product.id}>\n            <div>\n              <div className=\"Product__image\">\n                <Img sizes={product.image.sizes} />\n              </div> <div className=\"Product__details\">\n                <div className=\"Product__name\">\n                  {product.name}\n                  <div className=\"Product__price\">\n                    ${product.price}\n                  </div>\n                </div>\n                <button\n                  className=\"Product__buy Product snipcart-add-item\"\n                  data-item-id={product.id}\n                  data-item-price={product.price}\n                  data-item-image={product.image.url}\n                  data-item-name={product.name}\n                  data-item-url={`https://determined-easley-e806d0.netlify.app/`}\n                >\n                  Add to cart\n                </button>\n              </div>\n            </div>\n          </div>\n        ))\n      }\n    </div>\n  </Layout>\n)}\n```\n\n----------------------------------------\n\nTITLE: Update Blog Index Import Path - JavaScript\nDESCRIPTION: Updates the import statement for the Layout component within the blog index page after moving the file to the `src/pages/blog` directory and renaming it to `index.js`. This is necessary to maintain the correct component hierarchy and rendering of the blog index page.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-6/index.mdx#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as React from 'react'\nimport { graphql } from 'gatsby'\nimport Layout from '../../components/layout' // highlight-line\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Using string reference for gatsbyRemarkPlugins\nDESCRIPTION: This configuration shows how to use Gatsby-specific remark plugins with `gatsby-plugin-mdx` using a string reference. It is a shorter syntax when no options are needed.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-mdx/README.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\ngatsbyRemarkPlugins: [`gatsby-remark-images`]\n```\n\n----------------------------------------\n\nTITLE: Configure with Custom Settings JavaScript\nDESCRIPTION: Example of how to configure the `gatsby-remark-copy-linked-files` plugin with custom settings for `destinationDir` and `ignoreFileExtensions`.  This snippet configures the plugin within gatsby-transformer-remark to modify copy behavior. `destinationDir` controls the output path, and `ignoreFileExtensions` controls which files are ignored.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-copy-linked-files/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-transformer-remark`,\n      options: {\n        plugins: [\n          {\n            resolve: `gatsby-remark-copy-linked-files`,\n            options: {\n              destinationDir: `path/to/dir`,\n              ignoreFileExtensions: [`png`, `jpg`, `jpeg`, `bmp`, `tiff`],\n            },\n          },\n        ],\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Setting the adapter version in package.json (JSON)\nDESCRIPTION: This snippet shows how to set the initial version of a Gatsby adapter in its package.json file.  It's recommended to start with 1.0.0 for the first release.  Subsequent releases should follow semantic versioning.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/previews-deploys-hosting/creating-an-adapter.md#_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"version\": \"1.0.0\",\n}\n```\n\n----------------------------------------\n\nTITLE: Resolving a Shadowed Component (JavaScript)\nDESCRIPTION: This snippet attempts to resolve a shadowed component path. If a shadowed component is found, it tells Webpack to resolve and bundle that specific file using `doResolve`. If no shadowed component is found, it lets Webpack continue with its default resolution algorithm by invoking the callback.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/conceptual/how-shadowing-works.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n// This is the shadowing algorithm.\nconst builtComponentPath = this.resolveComponentPath({\n  theme,\n  component,\n  originalRequestComponent,\n})\n\nif (builtComponentPath) {\n  return resolver.doResolve(\n    resolver.hooks.describedRelative,\n    { ...request, path: builtComponentPath },\n    null,\n    {},\n    callback\n  )\n} else {\n  return callback()\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Applying Multiple CSS Module Styles\nDESCRIPTION: This JavaScript snippet shows how to import multiple CSS Module classes into a Layout component and apply them to different elements. It imports 'container', 'heading', 'navLinks', 'navLinkItem', and 'navLinkText' and applies them to the corresponding elements within the Layout component using the className prop.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-2/index.mdx#_snippet_23\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as React from 'react'\nimport { Link } from 'gatsby'\n// highlight-start\nimport {\n  container,\n  heading,\n  navLinks,\n  navLinkItem,\n  navLinkText\n} from './layout.module.css'\n// highlight-end\n\nconst Layout = ({ pageTitle, children }) => {\n  return (\n    <div className={container}>\n      <nav>\n        <ul className={navLinks}> // highlight-line\n          <li className={navLinkItem}> // highlight-line\n            <Link to=\"/\" className={navLinkText}> // highlight-line\n              Home\n            </Link>\n          </li>\n          <li className={navLinkItem}> // highlight-line\n            <Link to=\"/about\" className={navLinkText}> // highlight-line\n              About\n            </Link>\n          </li>\n        </ul>\n      </nav>\n      <main>\n        <h1 className={heading}>{pageTitle}</h1> // highlight-line\n        {children}\n      </main>\n    </div>\n  )\n}\n\nexport default Layout\n```\n\n----------------------------------------\n\nTITLE: Enabling downloadLocal in gatsby-config.js\nDESCRIPTION: This Javascript snippet shows how to enable the `downloadLocal` option in the `gatsby-source-contentful` plugin configuration. This setting downloads and caches Contentful assets locally for improved performance and control over image processing.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-contentful/README.md#_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\n// In your gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-source-contentful`,\n      options: {\n        spaceId: `your_space_id`,\n        // Learn about environment variables: https://gatsby.app/env-vars\n        accessToken: process.env.CONTENTFUL_ACCESS_TOKEN,\n        downloadLocal: true,\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Example: Installing Gatsby Starter Blog (Shell)\nDESCRIPTION: This command demonstrates installing the Gatsby Starter Blog from its GitHub URL. It creates a new directory named `blog` and populates it with the starter's contents, including necessary dependencies.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/starters.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ngatsby new blog https://github.com/gatsbyjs/gatsby-starter-blog\n```\n\n----------------------------------------\n\nTITLE: Configuring node limits in gatsby-config.js\nDESCRIPTION: This code snippet demonstrates how to configure the `gatsby-source-wordpress` plugin in `gatsby-config.js` to limit the number of Post nodes fetched from WordPress during development. It uses a conditional check based on the `NODE_ENV` environment variable to limit the number of posts to 50 in development and fetch all posts in production.  The snippet requires the `gatsby-source-wordpress` plugin to be installed and configured and `WPGRAPHQL_URL` to be set in environment variables.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-wordpress/docs/features/limit-nodes-during-development.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-source-wordpress`,\n      options: {\n        url: process.env.WPGRAPHQL_URL,\n        type: {\n          Post: {\n            limit:\n              process.env.NODE_ENV === `development`\n                ?\n                  50\n                :\n                  null,\n          },\n        },\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: gatsby-config.js: Apollo Link Configuration (JavaScript)\nDESCRIPTION: Shows how to configure gatsby-source-graphql with a custom Apollo Link, enabling advanced features like authentication, retries, and error handling using Apollo's link composition capabilities. Requires `@apollo/client`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-graphql/README.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n// In your gatsby-config.js\nmodule.exports = {\n  plugins: [\n    // Complex situations: creating arbitrary Apollo Link\n    {\n      resolve: \"gatsby-source-graphql\",\n      options: {\n        typeName: \"GitHub\",\n        fieldName: \"github\",\n        // Create Apollo Link manually. Can return a Promise.\n        createLink: pluginOptions => {\n          return createHttpLink({\n            uri: \"https://api.github.com/graphql\",\n            headers: {\n              Authorization: `Bearer ${process.env.GITHUB_TOKEN}`,\n            },\n            fetch,\n          })\n        },\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Resulting JSON from GraphQL Query (JSON)\nDESCRIPTION: This JSON shows the result of the basic GraphQL query. It contains an array of `LettersCsv` nodes, each with a `letter` and `value` field representing the data from the CSV file.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-csv/README.md#_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"allLettersCsv\": {\n    \"edges\": [\n      {\n        \"node\": {\n          \"letter\": \"a\",\n          \"value\": 65\n        }\n      },\n      {\n        \"node\": {\n          \"letter\": \"b\",\n          \"value\": 66\n        }\n      },\n      {\n        \"node\": {\n          \"letter\": \"c\",\n          \"value\": 67\n        }\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: DSG Configuration with File System Route API (JSX)\nDESCRIPTION: Demonstrates how to configure Deferred Static Generation (DSG) within a File System Route template using the `config()` function. It uses GraphQL to query posts created before a specific date and defers pages older than that date. The `config()` function returns a function that receives `params` and returns a `defer` configuration object. Requires Gatsby and GraphQL.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/v4.1/index.md#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport React from \"react\"\nimport { graphql } from \"gatsby\"\n\nexport default function Component(props) {\n  return <pre>{JSON.stringify(props, null, 2)}</pre>\n}\n\nexport async function config() {\n  // Get all posts that were created before 2020-10-31\n  const { data } = await graphql`\n    {\n      oldPosts: allMarkdownRemark(\n        filter: { frontmatter: { date: { lt: \\\"2020-10-31\\\" } } }\n      ) {\n        nodes {\n          fields {\n            slug\n          }\n        }\n      }\n    }\n  `\n  // Create a Set for easier comparison/lookup\n  const oldPosts = new Set(data.oldPosts.nodes.map(n => n.fields.slug))\n\n  // Return a function that when called will return a config for FS route pages\n  // (right now only `defer` is supported)\n  return ({ params }) => {\n    return {\n      // Defer pages older than 2020-10-31\n      defer: oldPosts.has(params.fields__slug),\n    }\n  }\n}\n\nexport const pageQuery = graphql`\n  query BlogPost($id: String!) {\n    markdownRemark(id: { eq: $id }) {\n      html\n      frontmatter {\n        title\n        date(formatString: \\\"MMMM DD, YYYY\\\")\n        description\n      }\n    }\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: Install gatsby-page-utils\nDESCRIPTION: Installs the gatsby-page-utils package using npm, making its functions available for use in a Gatsby project. This is the first step in utilizing the utility functions provided by the package.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-page-utils/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install gatsby-page-utils\n```\n\n----------------------------------------\n\nTITLE: Returning Asset ID from createAssetNode (TS)\nDESCRIPTION: This snippet demonstrates how to return the generated ID from the createAssetNode function.  This ID is later used to link the Asset node to the Post node.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/creating-a-source-plugin/part-6/index.mdx#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nexport function createAssetNode(\n  gatsbyApi: SourceNodesArgs,\n  data: IPostImageInput\n) {\n  const id = gatsbyApi.createNodeId(`${NODE_TYPES.Asset}-${data.url}`)\n\n  const assetNode = {/* Contents */} satisfies IRemoteImageNodeInput\n\n  gatsbyApi.actions.createNode(assetNode)\n\n  // highlight-next-line\n  return id\n}\n```\n\n----------------------------------------\n\nTITLE: Skipping Link Types with Includes (JavaScript)\nDESCRIPTION: This code snippet shows an example of using `disallowedLinkTypes` in conjunction with includes. It skips certain link types such as `node--page`, `paragraph--text`, and `paragraph--image` and then uses includes to fetch specific paragraph components for news nodes. This demonstrates a method for optimizing data fetching.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-drupal/README.md#_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n// In your gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-source-drupal`,\n      options: {\n        baseUrl: `https://live-contentacms.pantheonsite.io/`,\n        // Skip the node--page resource type and paragraph components.\n        disallowedLinkTypes: [\n          `self`,\n          `describedby`,\n          `node--page`,\n          `paragraph--text`,\n          `paragraph--image`,\n        ],\n        filters: {\n          // Use includes so only the news content paragraph components are fetched.\n          \"node--news\": \"include=field_content\",\n        },\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Query Parent File Node\nDESCRIPTION: This GraphQL query demonstrates using the parent node to access data from the original source file. This is using the parent field which can be used to access data from the original File node.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-5/index.mdx#_snippet_14\n\nLANGUAGE: graphql\nCODE:\n```\nquery MyQuery {\n  allMdx {\n    nodes {\n      parent {\n        ... on File {\n          modifiedTime(formatString: \"MMMM D, YYYY\")\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Debugging: VS Code launch.json Configuration (Windows) JSON\nDESCRIPTION: This JSON configuration is similar to the Linux configuration, but it includes a `windows` property to specify the correct path to the Gatsby executable on Windows systems. This ensures that the debugger can locate and execute the Gatsby CLI properly. It allows users to debug both the `develop` and `build` processes.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/debugging-the-build-process.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"name\": \"Gatsby develop\",\n      \"type\": \"pwa-node\",\n      \"request\": \"launch\",\n      \"program\": \"${workspaceRoot}/node_modules/.bin/gatsby\",\n      \"windows\": {\n        \"program\": \"${workspaceRoot}/node_modules/gatsby/dist/bin/gatsby\"\n      },\n      \"args\": [\"develop\"],\n      \"env\": {\n        \"PARCEL_WORKERS\": \"0\",\n        \"GATSBY_CPU_COUNT\": \"1\",\n      },\n      \"runtimeArgs\": [\"--nolazy\"],\n      \"console\": \"integratedTerminal\"\n    },\n    {\n      \"name\": \"Gatsby build\",\n      \"type\": \"pwa-node\",\n      \"request\": \"launch\",\n      \"program\": \"${workspaceRoot}/node_modules/.bin/gatsby\",\n      \"windows\": {\n        \"program\": \"${workspaceRoot}/node_modules/gatsby/dist/bin/gatsby\"\n      },\n      \"args\": [\"build\"],\n      \"env\": {\n        \"PARCEL_WORKERS\": \"0\",\n        \"GATSBY_CPU_COUNT\": \"1\",\n      },\n      \"runtimeArgs\": [\"--nolazy\"],\n      \"console\": \"integratedTerminal\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring gatsby-plugin-mdx with Remark Plugin\nDESCRIPTION: This JavaScript code shows how to configure `gatsby-plugin-mdx` to use a local Remark plugin. The `gatsbyRemarkPlugins` option is used to specify an array of remark plugins.  The `require.resolve` function is used to specify the path to the local plugin.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/remark-plugin-tutorial.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  resolve: `gatsby-plugin-mdx`,\n  options: {\n    gatsbyRemarkPlugins: [\n      {\n        resolve: require.resolve(`./plugins/gatsby-remark-purple-headers`),\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Sharp Settings in gatsby-config.js\nDESCRIPTION: This snippet demonstrates how to configure default options for gatsby-plugin-sharp in gatsby-config.js. This allows setting default image processing options like AVIF generation and breakpoint support for hero images. Sizing options, such as width and height, should be specified on a per-image basis.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/v2.32/index.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `avif`],\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          placeholder: `blurred`,\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Populate Error Map with Custom Error Definition in TypeScript\nDESCRIPTION: Populates the error map with a custom error definition for `GraphQLSourcing`. This includes the error message (text), level (ERROR), and category (THIRD_PARTY). The text property is a function receiving a context containing error information.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/creating-a-source-plugin/part-4/index.mdx#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { GatsbyNode } from \"gatsby\"\nimport { ERROR_CODES } from \"./constants\"\n\nexport const onPluginInit: GatsbyNode[`onPluginInit`] = ({ reporter }) => {\n  reporter.setErrorMap({\n    [ERROR_CODES.GraphQLSourcing]: {\n      text: (context) => `${context.sourceMessage}: ${context.graphqlError}`,\n      level: `ERROR`,\n      category: `THIRD_PARTY`,\n    },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind CSS content array in tailwind.config.js\nDESCRIPTION: This snippet demonstrates how to configure the `content` array in `tailwind.config.js` to avoid including the `src/gatsby-types.d.ts` file when using GraphQL Typegen, preventing an infinite loop. It modifies the content array to only include source files within the `pages` and `components` directories.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/styling/tailwind-css.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  content: [\n    \"./src/pages/*.{js,jsx,ts,tsx}\",\n    \"./src/components/**/*.{js,jsx,ts,tsx}\"\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Querying MDX Frontmatter in GraphQL\nDESCRIPTION: This GraphQL query retrieves the title and date from the MDX frontmatter for a specific blog post, identified by its ID.  It is used to fetch basic post metadata for display on the blog post page.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-7/index.mdx#_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nquery ($id: String) {\n  mdx(id: { eq: $id }) {\n    frontmatter {\n      title\n      date(formatString: \"MMMM D, YYYY\")\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Queryable Interface in gatsby-node.js (JavaScript)\nDESCRIPTION: This snippet defines a queryable interface `TeamMember` and two types, `AuthorJson` and `ContributorJson`, that implement the interface. It uses `createSchemaCustomization` in `gatsby-node.js` to create the GraphQL types. The `TeamMember` interface automatically gets root query fields.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/graphql-data-layer/schema-customization.md#_snippet_42\n\nLANGUAGE: JavaScript\nCODE:\n```\nexports.createSchemaCustomization = ({ actions }) => {\n  const { createTypes } = actions\n  const typeDefs = `\n    interface TeamMember implements Node {\n      id: ID!\n      name: String!\n      firstName: String!\n      email: String!\n    }\n\n    type AuthorJson implements Node & TeamMember {\n      name: String!\n      firstName: String!\n      email: String!\n      joinedAt: Date\n    }\n\n    type ContributorJson implements Node & TeamMember {\n      name: String!\n      firstName: String!\n      email: String!\n      receivedSwag: Boolean\n    }\n  `\n  createTypes(typeDefs)\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Post Example\nDESCRIPTION: This is an example of a Markdown post file with frontmatter containing slug and date.  This is used in conjunction with the File System Route API and the config function to selectively enable DSG based on post date.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/rendering-options/using-deferred-static-generation.md#_snippet_1\n\nLANGUAGE: md\nCODE:\n```\n---\nslug: my-first-post\ndate: 2021-10-30\n---\n\n# My First Post\n\nSome text about something cool.\n```\n\n----------------------------------------\n\nTITLE: Starting the Gatsby Development Server\nDESCRIPTION: This command starts the Gatsby development server, enabling hot-reloading. It requires npm and a Gatsby project with the `develop` script defined in `package.json`. The server is accessible by default at `http://localhost:8000` and provides a live-reloading development environment for making changes to the site.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/quick-start.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm run develop\n```\n\n----------------------------------------\n\nTITLE: Using componentDidMount for Browser Globals (React)\nDESCRIPTION: This snippet shows how to move references to browser globals within a React class component into the `componentDidMount` lifecycle method, which is only executed in the browser, thus avoiding build-time errors in Gatsby.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/porting-from-create-react-app-to-gatsby.md#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { Component } from \"react\"\n\nclass MyComponment() extends Component {\n  render() {\n    window.alert(\"This will break the build\")\n\n    return (\n      <div>\n        <p>Component</p>\n      </div>\n    )\n  }\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { Component } from \"react\"\n\nclass MyComponment() extends Component {\n  componentDidMount() {\n    // code that references the browser global\n    window.alert(\"This won't break the build\")\n  }\n\n  render() {\n    return (\n      <div>\n        <p>Component</p>\n      </div>\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sort, Filter, Limit, Format Query GraphQL\nDESCRIPTION: This query combines sorting, filtering, limiting, and date formatting.  It limits the number of results, filters for non-null dates, sorts by date in descending order, and formats the date string. It also retrieves the slug from the fields.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/graphql-reference/content/queries.md#_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  allMarkdownRemark(\n    limit: 3\n    filter: { frontmatter: { date: { ne: null } } }\n    sort: { frontmatter: { date: DESC } }\n  ) {\n    edges {\n      node {\n        fields {\n          slug\n        }\n        frontmatter {\n          title\n          date(formatString: \"dddd DD MMMM YYYY\")\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Check n Installation\nDESCRIPTION: This command checks if the `n` Node.js version manager is installed. If it's installed, it will likely display information about its usage.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/upgrading-node-js.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nn\n```\n\n----------------------------------------\n\nTITLE: Modifying component Path in gatsby-node.js\nDESCRIPTION: This `diff` shows how to modify `gatsby-node.js` to use the custom layout template.  It imports the template and constructs the component path to include a query parameter pointing to the MDX content file.  This allows Gatsby to wrap the MDX content with the custom template.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/routing/mdx.md#_snippet_17\n\nLANGUAGE: diff\nCODE:\n```\nconst path = require(\"path\")\n+ const postTemplate = path.resolve(`./src/templates/post.jsx`)\n\n// Rest of the createPages API...\n\ncreatePage({\n  path: node.frontmatter.slug,\n-  component: node.internal.contentFilePath,\n+  component: `${postTemplate}?__contentFilePath=${node.internal.contentFilePath}`,\n  context: { id: node.id },\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Gatsby Adapter for Netlify\nDESCRIPTION: This command installs the `gatsby-adapter-netlify` package as a project dependency using npm. This adapter enables Gatsby sites to leverage Netlify-specific features.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-adapter-netlify/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install gatsby-adapter-netlify\n```\n\n----------------------------------------\n\nTITLE: Importing CSS Styles\nDESCRIPTION: Demonstrates how to import a CSS file into a JavaScript file.  This allows the styles defined in the CSS file to be applied to the React components.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/styling/post-css.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"./styles.css\"\n```\n\n----------------------------------------\n\nTITLE: Configure Plugin in Markdown\nDESCRIPTION: This snippet shows how to use the `gatsby-remark-prismjs` plugin within a Markdown file by including it in the `gatsby-config.js` file within the options for the `gatsby-transformer-remark` plugin.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-prismjs/README.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nplugins: [\n  {\n    resolve: `gatsby-transformer-remark`,\n    options: {\n      plugins: [\n        `gatsby-remark-prismjs`,\n      ]\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Search Template Component\nDESCRIPTION: This snippet defines a Gatsby page template named `ClientSearchTemplate`. It retrieves book data and search options from the `pageContext` passed by `gatsby-node.js`. It renders a heading and passes the `allBooks` data and `options` to the `ClientSearch` component for performing the client-side search.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/adding-search-with-js-search.md#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\"\nimport ClientSearch from \"../components/ClientSearch\"\n\nconst SearchTemplate = props => {\n  const { pageContext } = props\n  const { bookData } = pageContext\n  const { allBooks, options } = bookData\n  return (\n    <div>\n      <h1 style={{ marginTop: `3em`, textAlign: `center` }}>\n        Search data using JS Search using Gatsby API\n      </h1>\n      <div>\n        <ClientSearch books={allBooks} engine={options} />\n      </div>\n    </div>\n  )\n}\n\nexport default SearchTemplate\n```\n\n----------------------------------------\n\nTITLE: Running Gatsby Codemods with npx\nDESCRIPTION: This command executes a specified codemod on a given filepath using npx. If no filepath is provided, it defaults to the current directory. This approach automatically targets `js, jsx, ts, tsx` files, ignoring `node_modules`, `.cache`, and `public` directories.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-codemods/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpx gatsby-codemods <codemod-name> <filepath>\n```\n\n----------------------------------------\n\nTITLE: Set imagesdir Attribute (JavaScript)\nDESCRIPTION: Sets the `imagesdir` attribute to specify the directory where AsciiDoc files can find images. This configuration allows Asciidoctor to locate images referenced in the AsciiDoc content. The image directive is `image::myimage.png[]`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-asciidoc/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// In your gatsby-config.js\nplugins: [\n  {\n    resolve: `gatsby-transformer-asciidoc`,\n    options: {\n      attributes: {\n        imagesdir: `/images`,\n      },\n    },\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Sass Precision (Bootstrap 3)\nDESCRIPTION: This snippet shows how to configure Sass precision for Bootstrap 3 using `gatsby-plugin-sass`. This is important for maintaining consistent theming and styling when using Bootstrap.  Requires `node-sass` implementation and potentially PostCSS plugins.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-sass/README.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nplugins: [\n  {\n    resolve: `gatsby-plugin-sass`,\n    options: {\n      implementation: require(\"node-sass\"),\n      postCssPlugins: [somePostCssPlugin()],\n      sassOptions: {\n        precision: 8,\n      },\n    },\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Displaying Etsy listings in a React component\nDESCRIPTION: This JSX code snippet demonstrates how to display featured Etsy listings within a React component using data fetched from a GraphQL query. It iterates over the `nodes` array in the `allFeaturedEtsyListing` data and renders each item's title, image, price, and description within a section. The image is displayed using Gatsby's `Img` component.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/sourcing-from-etsy.md#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n{\n  data.allFeaturedEtsyListing.nodes.map(item => (\n    <section key={item.id}>\n      <a href={item.url}>\n        <h2>{item.title}</h2>\n      </a>\n      <Img fixed={item.childEtsyListingImage.childFile.childImageSharp.fixed} />\n      <p>${item.price}</p>\n      <p>{item.description}</p>\n    </section>\n  ))\n}\n```\n\n----------------------------------------\n\nTITLE: Navigating to the Example Directory\nDESCRIPTION: This command changes the current directory to the 'using-mdx' example directory within the cloned Gatsby repository. It's essential to run subsequent commands in the correct context.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/using-mdx/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ncd gatsby/examples/using-mdx\n```\n\n----------------------------------------\n\nTITLE: Configuring Caching in web.config for Gatsby on IIS\nDESCRIPTION: This XML snippet defines the `web.config` file to configure caching for a Gatsby site deployed on IIS. It sets cache control headers for static assets and page data, and uses URL rewrite rules to adjust caching behavior based on file type. The IIS URL Rewrite module is required for the outbound rules.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/previews-deploys-hosting/deploying-to-iis.md#_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<configuration>\n    <location path=\"static\">\n        <system.webServer>\n            <httpProtocol>\n                <customHeaders>\n                    <remove name=\"cache-control\" />\n                    <add name=\"cache-control\" value=\"public, max-age=31536000, immutable\" />\n                </customHeaders>\n            </httpProtocol>\n        </system.webServer>\n    </location>\n    <location path=\"page-data\">\n        <system.webServer>\n            <httpProtocol>\n                <customHeaders>\n                    <remove name=\"cache-control\" />\n                    <add name=\"cache-control\" value=\"public, max-age=0, must-revalidate\" />\n                </customHeaders>\n            </httpProtocol>\n        </system.webServer>\n    </location>\n\n    <system.webServer>\n        <staticContent>\n            <mimeMap fileExtension=\".webmanifest\" mimeType=\"application/manifest+json\" />\n        </staticContent>\n        <rewrite>\n            <outboundRules>\n              <rule name=\"AdjustCacheForDontCacheFiles\" preCondition=\"IsDontCacheFile\" stopProcessing=\"true\">\n                <match serverVariable=\"RESPONSE_Cache-Control\" pattern=\".*\" />\n                <action type=\"Rewrite\" value=\"public, max-age=0, must-revalidate\" />\n              </rule>\n              <rule name=\"AdjustCacheForCachePermanentlyFiles\" preCondition=\"IsCachePermanentlyFile\" stopProcessing=\"true\">\n                <match serverVariable=\"RESPONSE_Cache-Control\" pattern=\".*\" />\n                <action type=\"Rewrite\" value=\"public, max-age=31536000, immutable\" />\n              </rule>\n              <preConditions>\n                <preCondition name=\"IsDontCacheFile\">\n                  <add input=\"{REQUEST_FILENAME}\" pattern=\"(.*\\.html)|(sw\\.js)|(app\\-data\\.json)|(page\\-data\\.json)\" />\n                </preCondition>\n                <preCondition name=\"IsCachePermanentlyFile\">\n                  <add input=\"{REQUEST_FILENAME}\" pattern=\"((.*\\.js)|(.*\\.css))$\" />\n                </preCondition>\n              </preConditions>\n            </outboundRules>\n        </rewrite>\n    </system.webServer>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Configuring Gatsby Flags\nDESCRIPTION: This code demonstrates how to set experimental or upcoming features in Gatsby using the `flags` option. It sets the `DEV_SSR` flag to `true`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/config-files/gatsby-config.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  flags: {\n    DEV_SSR: true,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Testing a Page Component with Mocked Data - JavaScript\nDESCRIPTION: This test renders a `PageTwo` component and checks if the rendered output matches a snapshot. It mocks the `data` prop with sample GraphQL data to simulate the data provided by a GraphQL query.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/testing/testing-components-with-graphql.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from \"react\"\nimport renderer from \"react-test-renderer\"\nimport PageTwo from \"../page-2\"\n\ndescribe(\"PageTwo\", () => {\n  it(\"renders correctly\", () => {\n    const tree = renderer.create(<PageTwo />).toJSON()\n    expect(tree).toMatchSnapshot()\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Child Relations with types\nDESCRIPTION: This GraphQL snippet demonstrates how to use the `@childOf` extension with the `types` argument to explicitly define what node types a node is a child of. It adds `childMdx` as a field of `File` and `Markdown` nodes.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/graphql-data-layer/schema-customization.md#_snippet_8\n\nLANGUAGE: graphql\nCODE:\n```\n# Adds `childMdx` as a field of `File` and `Markdown` nodes\ntype Mdx implements Node @childOf(types: [\"File\", \"Markdown\"]) {\n  id: ID!\n}\n```\n\n----------------------------------------\n\nTITLE: Installing gatsby-plugin-gatsby-cloud with npm\nDESCRIPTION: Installs the gatsby-plugin-gatsby-cloud plugin using npm. This is the standard installation method for Gatsby plugins.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-gatsby-cloud/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install gatsby-plugin-gatsby-cloud\n```\n\n----------------------------------------\n\nTITLE: Tap into Resolve Hook for Original Request Path\nDESCRIPTION: This snippet taps into the `resolve` hook to store the original request path in `_gatsbyThemeShadowingOriginalRequestPath`. This allows access to the original file name later in the `before-resolved` hook. It's used to enable shadowing of files with different extensions.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/conceptual/how-shadowing-works.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\napply(resolver) {\n    // This hook is executed very early and captures the original file name\n    resolver\n      .getHook(`resolve`)\n      .tapAsync(\n        `GatsbyThemeComponentShadowingResolverPlugin`,\n        (request, stack, callback) => {\n          if (!request._gatsbyThemeShadowingOriginalRequestPath) {\n            request._gatsbyThemeShadowingOriginalRequestPath = request.request\n          }\n          return callback()\n        }\n      )\n```\n\n----------------------------------------\n\nTITLE: Overriding default css-loader options in gatsby-config.js\nDESCRIPTION: This snippet shows how to override the default options passed to css-loader when using gatsby-plugin-stylus. It allows customization of css-loader behavior, such as enabling or disabling camelCase conversion. It requires gatsby-plugin-stylus to be installed.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-stylus/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nplugins: [\n  {\n    resolve: `gatsby-plugin-stylus`,\n    options: {\n      cssLoaderOptions: {\n        camelCase: false,\n      },\n    },\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query for PDF Files\nDESCRIPTION: This GraphQL query fetches all files with the `.pdf` extension and returns their public URLs.  It utilizes the `allFile` query with a filter on the `extension` field. The `publicURL` field provides the URL that can be used to access the file in the built site. Dependencies: gatsby-source-filesystem.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/images-and-media/importing-assets-into-files.md#_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  allFile(filter: { extension: { eq: \"pdf\" } }) {\n    edges {\n      node {\n        publicURL\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating redirects in gatsby-node.js\nDESCRIPTION: Creates redirects using the `createRedirect` action in the `gatsby-node.js` file. This example demonstrates creating permanent redirects, language-specific redirects, and redirects with custom status codes.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-gatsby-cloud/README.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nexports.createPages = ({ actions }) => {\n  const { createRedirect } = actions\n\n  createRedirect({ fromPath: \"/old-url\", toPath: \"/new-url\", isPermanent: true })\n  createRedirect({ fromPath: \"/url\", toPath: \"/zn-CH/url\", Language: \"zn\" })\n  createRedirect({\n    fromPath: \"/url_that_is/not_pretty\",\n    toPath: \"/pretty/url\",\n    statusCode: 200,\n  })\n  createRedirect({\n    fromPath: \"/packages/*\",\n    toPath: \"/plugins/*\",\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Jest and Dependencies\nDESCRIPTION: This command installs Jest, babel-jest, babel-preset-gatsby, and identity-obj-proxy as development dependencies. These packages are required for running Jest tests in a Gatsby project, ensuring that Babel transformations and module mocking are correctly configured.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/testing/unit-testing.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev jest babel-jest babel-preset-gatsby identity-obj-proxy\n```\n\n----------------------------------------\n\nTITLE: Feature: Override Sass Rule Tests in Gatsby\nDESCRIPTION: This commit introduces the ability to override sassRuleTest and sassRuleModulesTest within the gatsby-plugin-sass. This provides developers more control over how Sass files are processed, allowing for customization of the test conditions.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-sass/CHANGELOG.md#_snippet_8\n\n\n\n----------------------------------------\n\nTITLE: Install @sindresorhus/slugify package\nDESCRIPTION: Installs the `@sindresorhus/slugify` package as a dependency. This package is used to generate slugs from strings, typically from the title of an MDX document.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-mdx/README.md#_snippet_11\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install @sindresorhus/slugify\n```\n\n----------------------------------------\n\nTITLE: Installing Gatsby Dev CLI Globally\nDESCRIPTION: This command installs the `gatsby-dev-cli` package globally using Yarn. This tool helps to test local changes in a Gatsby project against a forked version of Gatsby.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/contributing/code-contributions.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nyarn global add gatsby-dev-cli\n```\n\n----------------------------------------\n\nTITLE: Initializing Plugin in All Processes with Gatsby\nDESCRIPTION: This snippet describes the addition of the `unstable_onPluginInit` feature to the `gatsby-plugin-sharp` plugin. This feature allows a function to be executed once in all processes, which is beneficial for initializing resources that need to be shared across multiple processes within a Gatsby build.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-sharp/CHANGELOG.md#_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Query Result File Content\nDESCRIPTION: This JavaScript object shows the expected structure of a query result file located in the `/public/static/d/` directory. It contains the `data` field, which holds the results of the GraphQL query, and the `pageContext` field, which contains context data passed to the query. This file is generated after the GraphQL query has been executed for a specific page.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/gatsby-internals-terminology.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"data\": {\n    \"markdownRemark\": {\n      \"html\": \"<p>Today we....\",\n      \"timeToRead\": 2,\n      \"fields\": {\n        \"slug\": \"/blog/2018-07-17-announcing-gatsby-preview/\"\n      },\n      \"frontmatter\": {\n        \"title\": \"Announcing Gatsby Preview\",\n        \"date\": \"July 17th 2018\",\n        ...\n      },\n      ...\n    }\n  },\n  \"pageContext\": {\n    \"slug\": \"/blog/2018-07-17-announcing-gatsby-preview/\",\n    \"prev\": {\n      ...\n    },\n    \"next\": null\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Component Extension Example in Gatsby\nDESCRIPTION: This code snippet shows an example of extending a component in Gatsby using component shadowing. It imports the original component from the theme and wraps it with a new component (Card).\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/conceptual/how-shadowing-works.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from \"react\"\nimport { Author } from \"gatsby-theme-blog/src/components/author\"\nimport Card from \"../components/card\"\n\nexport default function MyAuthor(props) {\n  return (\n    <Card>\n      <Author {...props} />\n    </Card>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Iterative Icon Options Configuration\nDESCRIPTION: This configuration utilizes the `icon_options` object to iteratively add configuration items to each object in the `icons` array.  The `purpose` property is added to each icon object.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-manifest/README.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// in gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-manifest`,\n      options: {\n        name: `GatsbyJS`,\n        short_name: `GatsbyJS`,\n        start_url: `/`,\n        background_color: `#f7f0eb`,\n        theme_color: `#a2466c`,\n        display: `standalone`,\n        icon: `src/images/icon.png`,\n        icon_options: {\n          // For all the options available,\n          // please see the section \"Additional Resources\" below.\n          purpose: `any maskable`,\n        },\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Plugin in gatsby-config.js\nDESCRIPTION: Example configuration of the gatsby-transformer-screenshot plugin in gatsby-config.js.  It shows how to specify the screenshotEndpoint option, which is the URL of the AWS Lambda function. The resolve field indicates the plugin being used.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-screenshot/README.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-transformer-screenshot`,\n      options: {\n        // See \"Lambda setup\" below to see how to create an endpoint\n        screenshotEndpoint: `your-aws-endpoint`,\n      }\n    }\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Featured Image Path in Markdown Frontmatter (Different Directories)\nDESCRIPTION: Adds a `featuredImage` field to the frontmatter of a markdown file when images are sourced from a different directory. The path to the image is specified relative to the markdown file, allowing Gatsby to locate the image.  It assumes the image is located in the `/images` directory, one level above the content.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/images-and-media/working-with-images-in-markdown.md#_snippet_4\n\nLANGUAGE: Markdown\nCODE:\n```\n---\ntitle: About\nfeaturedImage: ../images/team-cat.png\n---\n\nContent goes here!\n```\n\n----------------------------------------\n\nTITLE: Define Slug Resolver for Event Type (gatsby-node.js)\nDESCRIPTION: This snippet defines a resolver for the 'slug' field within the 'Event' type. It uses the 'createResolvers' API to specify a 'resolve' function for the 'slug' field. This function calls the 'slugify' helper, passing the 'name' property of the source (Event node) to generate the slug.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/building-a-theme.md#_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nexports.createResolvers = ({ createResolvers }) => {\n  const basePath = \"/\"\n\n  // Quick-and-dirty helper to convert strings into URL-friendly slugs.\n  const slugify = str => {\n    const slug = str\n      .toLowerCase()\n      .replace(/[^a-z0-9]+/g, \"-\")\n      .replace(/(^-|-\\$)+/g, \"\")\n\n    return `/${basePath}/${slug}`.replace(/\\/\\/+/g, \"/\")\n  }\n\n  // highlight-start\n  createResolvers({\n    Event: {\n      slug: {\n        resolve: source => slugify(source.name),\n      },\n    },\n  })\n  // highlight-end\n}\n```\n\n----------------------------------------\n\nTITLE: Serving a Gatsby site with a path prefix\nDESCRIPTION: This shell command shows how to serve a Gatsby application locally with the `--prefix-paths` flag. This allows you to test the build output with the path prefix applied before deploying it to a production environment.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/previews-deploys-hosting/path-prefix.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ngatsby serve --prefix-paths\n```\n\n----------------------------------------\n\nTITLE: Example of Merged GraphQL Query (JavaScript)\nDESCRIPTION: This example demonstrates how `gatsby-source-graphql` merges multiple GraphQL queries into a single query for batch execution. It shows two individual queries with different IDs being combined into a single query with aliased fields and variables. This merged query is then sent to the GraphQL server in a single network request.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-graphql/README.md#_snippet_13\n\nLANGUAGE: js\nCODE:\n```\n{\n  query: `query(id: Int!) {\n    node(id: $id) {\n      foo\n    }\n  }`,\n  variables: { id: 1 },\n}\n```\n\nLANGUAGE: js\nCODE:\n```\n{\n  query: `query(id: Int!) {\n    node(id: $id) {\n      bar\n    }\n  }`,\n  variables: { id: 2 },\n}\n```\n\nLANGUAGE: js\nCODE:\n```\n{\n  query: `\n    query(\n      $gatsby0_id: Int!\n      $gatsby1_id: Int!\n    ) {\n      gatsby0_node: node(id: $gatsby0_id) {\n        foo\n      }\n      gatsby1_node: node(id: $gatsby1_id) {\n        bar\n      }\n    }\n  `,\n  variables: {\n    gatsby0_id: 1,\n    gatsby1_id: 2,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Modified html.js Body Section JSX\nDESCRIPTION: This JSX code snippet shows the updated body section of the html.js file. It includes the div with id `___gatsby`, the `postBodyComponents` prop, and demonstrates how to pass the body content as a prop.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v0-to-v1.md#_snippet_8\n\nLANGUAGE: JSX\nCODE:\n```\n<body>\n  <div id=\"___gatsby\" dangerouslySetInnerHTML={{ __html: this.props.body }} />\n  {this.props.postBodyComponents}\n</body>\n```\n\n----------------------------------------\n\nTITLE: Configure custom typeName (static)\nDESCRIPTION: Example configuration for setting a static typeName to query all json nodes with a simple query.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-json/README.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-transformer-json`,\n      options: {\n        typeName: `Json`, // a fixed string\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Bumping Node Version for Gatsby\nDESCRIPTION: This code snippet indicates a feature update in Gatsby, where the minimum required Node.js version was increased to 10.13.0.  This ensures compatibility with newer features and functionalities within the Gatsby ecosystem.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-documentationjs/CHANGELOG.md#_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\n**gatsby:** bump node min version to 10.13.0 ([#22400](https://github.com/gatsbyjs/gatsby/issues/22400)) ([83d681a](https://github.com/gatsbyjs/gatsby/commit/83d681a))\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugin with Custom Resolver\nDESCRIPTION: This code snippet shows how to configure the gatsby-transformer-react-docgen plugin with a custom resolver. Custom resolvers allow you to modify the extracted documentation data before it is made available in Gatsby's GraphQL schema. The last argument passed to the custom handlers is the component file `Node` object.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-react-docgen/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  plugins: [\n    {\n      resolve: \"gatsby-transformer-react-docgen\",\n      options: {\n        resolver: require(\"./custom-resolver\"),\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query for Fixed Size Images\nDESCRIPTION: This GraphQL query retrieves data for WordPress posts, specifically focusing on the `childWordPressAcfPostPhoto` field to fetch image data. It uses `childImageSharp` to process the image and the `fixed` fragment to create images with fixed widths and heights. This is useful for creating consistently sized image thumbnails or logos.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/wordpress-image-tutorial.md#_snippet_6\n\nLANGUAGE: GraphQL\nCODE:\n```\n{\n  allWordpressPost {\n    edges {\n      node {\n        childWordPressAcfPostPhoto {\n          photo {\n            localFile {\n              childImageSharp {\n                # Try editing the \"width\" and \"height\" values.\n                fixed(width: 200, height: 200) {\n                  # In the GraphQL explorer, use field names\n                  # like \"src\". In your site's code, remove them\n                  # and use the fragments provided by Gatsby.\n                  src\n\n                  # This fragment won't work in the GraphQL\n                  # explorer, but you can use it in your site.\n                  # ...GatsbyImageSharpFixed_withWebp\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Webpack Configuration\nDESCRIPTION: Shows a sample webpack configuration for Gatsby's build-javascript stage. It highlights key aspects such as entry points, output filenames, chunking, and optimization settings for production builds, including code splitting and minification.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/production-app.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  entry: {\n    app: `.cache/production-app`\n  },\n  output: {\n    // e.g. app-2e49587d85e03a033f58.js\n    filename: `[name]-[contenthash].js`,\n    // e.g. component---src-blog-2-js-cebc3ae7596cbb5b0951.js\n    chunkFilename: `[name]-[contenthash].js`,\n    path: `/public`,\n    publicPath: `/`\n  },\n  target: `web`,\n  devtool: `source-map`,\n  mode: `production`,\n  node: {\n    ___filename: true\n  },\n  optimization: {\n    runtimeChunk: {\n      // e.g. webpack-runtime-e402cdceeae5fad2aa61.js\n      name: `webpack-runtime`\n    },\n    splitChunks: {\n      chunks: `all`,\n      cacheGroups: {\n        // disable webpack's default cacheGroup\n        default: false,\n        // disable webpack's default vendor cacheGroup\n        vendors: false,\n        // Create a framework bundle that contains React libraries\n        // They hardly change so we bundle them together to improve\n        framework: {},\n        // Big modules that are over 160kb are moved to their own file to\n        // optimize browser parsing & execution\n        lib: {},\n        // All libraries that are used on all pages are moved into a common chunk\n        commons: {},\n        // When a module is used more than once we create a shared bundle to save user's bandwidth\n        shared: {},\n        // All CSS is bundled into one stylesheet\n        styles: {}\n      },\n      // Keep maximum initial requests to 25\n      maxInitialRequests: 25,\n      // A chunk should be at least 20kb before using splitChunks\n      minSize: 20000\n    },\n    minimizers: [\n      // Minify javascript using Terser (https://terser.org/)\n      plugins.minifyJs(),\n      // Minify CSS by using cssnano (https://cssnano.co/)\n      plugins.minifyCss(),\n    ]\n  }\n  plugins: [\n    // A custom webpack plugin that implements logic to write out chunk-map.json and webpack.stats.json\n    plugins.extractStats(),\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating GraphQL Types for Aliased Fields\nDESCRIPTION: This GraphQL code snippet defines the MDX type with aliased fields. The `@proxy` directive is used to map existing fields to the new GraphQL schema. The directive enables defining fields at the root level of the Mdx node.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-mdx/README.md#_snippet_28\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mdx implements Node {\n  # You can also use other keys from fields.timeToRead if you don't want \"minutes\"\n  timeToRead: Float @proxy(from: \"fields.timeToRead.minutes\")\n  wordCount: Int @proxy(from: \"fields.timeToRead.words\")\n}\n```\n\n----------------------------------------\n\nTITLE: Create Require From Path with gatsby-core-utils (JS)\nDESCRIPTION: Creates a `require` function that resolves modules relative to a specified path, using `gatsby-core-utils`. This is a cross-version polyfill for Node's `Module.createRequire`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-core-utils/README.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { createRequireFromPath } = require(\"gatsby-core-utils\")\n\nconst requireUtil = createRequireFromPath(\"../src/utils/\")\n\n// Require `../src/utils/some-tool`\nrequireUtil(\"./some-tool\")\n// ...\n```\n\n----------------------------------------\n\nTITLE: Verifying Remote Name and URL\nDESCRIPTION: Verifies the remote name and URL that have been configured for the repository. This confirms that the upstream remote has been added correctly and points to the correct Gatsby repository.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/contributing/how-to-open-a-pull-request.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ngit remote -v\n```\n\n----------------------------------------\n\nTITLE: Install Gatsby Plugins\nDESCRIPTION: This command installs the necessary Gatsby plugins for loading data into GraphQL. These include plugins for sourcing data from the filesystem, transforming JSON data, optimizing images, and displaying optimized images.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/why-gatsby-uses-graphql.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnpm install gatsby-source-filesystem gatsby-transformer-json gatsby-plugin-sharp gatsby-transformer-sharp gatsby-plugin-image\n```\n\n----------------------------------------\n\nTITLE: Listing Available Contentful Tags with GraphQL\nDESCRIPTION: This GraphQL query fetches all available tags from Contentful, sorting them by their `contentful_id`. The query retrieves the `name` and `contentful_id` for each tag.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-contentful/README.md#_snippet_15\n\nLANGUAGE: graphql\nCODE:\n```\nquery TagsQuery {\n  allContentfulTag(sort: { fields: contentful_id }) {\n    nodes {\n      name\n      contentful_id\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Styled Component for Search Result in React\nDESCRIPTION: This styled component, `StyledSearchResult`, styles the search result popover. It uses `styled-components` and the `SearchResult` component. It creates a `Popover` style using the `css` helper, defining properties like max height, overflow, positioning, and box shadow. The `show` property controls the visibility of the result list.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/adding-search-with-algolia.md#_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\nimport styled, { css } from \"styled-components\"\nimport SearchResult from \"./search-result\"\n\nconst Popover = css`\n  max-height: 80vh;\n  overflow: scroll;\n  -webkit-overflow-scrolling: touch;\n  position: absolute;\n  z-index: 2;\n  right: 0;\n  top: 100%;\n  margin-top: 0.5em;\n  width: 80vw;\n  max-width: 30em;\n  box-shadow: 0 0 5px 0;\n  padding: 1em;\n  border-radius: 2px;\n  background: ${({ theme }) => theme.background};\n`\n\nexport default styled(SearchResult)`\n  display: ${props => (props.show ? `block` : `none`)};\n  ${Popover}\n\n  .HitCount {\n    display: flex;\n    justify-content: flex-end;\n  }\n\n  .Hits {\n    ol {\n      list-style: none;\n      margin-left: 0;\n    }\n\n    li.ais-Hits-item {\n      margin-bottom: 1em;\n\n      a {\n        color: ${({ theme }) => theme.foreground};\n\n        h4 {\n          margin-top: 0;\n          margin-bottom: 0.2em;\n        }\n      }\n    }\n  }\n\n  .ais-PoweredBy {\n    display: flex;\n    justify-content: flex-end;\n    font-size: 80%;\n\n    svg {\n      width: 130px;\n    }\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: Filter with GraphQL - In Operator\nDESCRIPTION: This query filters MarkdownRemark nodes to find titles that are either \"Children's Anthology of Monsters\" or \"Hogwarts: A History\" using the `in` operator. It demonstrates how to check if a field's value is in a specified array.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/graphql-reference.md#_snippet_10\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  # in: I want all the titles and dates from `frontmatter`\n  # where the title is either\n  # - \"Children's Anthology of Monsters\", or\n  # - \"Hogwarts: A History\".\n  example_in: allMarkdownRemark(\n    filter: {\n      frontmatter: {\n        title: {\n          in: [\"Children's Anthology of Monsters\", \"Hogwarts: A History\"]\n        }\n      }\n    }\n  ) {\n    edges {\n      node {\n        frontmatter {\n          title\n          date\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Theme-UI Theme in Gatsby\nDESCRIPTION: This code snippet demonstrates how to export the `theme-ui` theme from the `gatsby-design-tokens` package as the default export in a Gatsby theme file. This allows you to easily integrate the design tokens into your theme's styling.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-design-tokens/CHANGELOG.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport { theme as default } from \"gatsby-design-tokens/dist/theme-gatsbyjs-org\"\n```\n\n----------------------------------------\n\nTITLE: Cleaning up Stack Traces for HTML Build Errors in Gatsby JavaScript\nDESCRIPTION: This snippet aims to clean up the stack traces that are displayed when HTML build errors occur in Gatsby. By cleaning up the stack traces, developers can more easily identify the root cause of the errors. This results in improved debuggability and faster resolution of HTML build issues.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-cli/CHANGELOG.md#_snippet_23\n\nLANGUAGE: JavaScript\nCODE:\n```\nd029f7b\n```\n\n----------------------------------------\n\nTITLE: Installing gatsby-plugin-react-helmet\nDESCRIPTION: This command installs the gatsby-plugin-react-helmet and its peer dependency react-helmet using npm.  This plugin allows you to manage document head metadata using React Helmet.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-react-helmet/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install gatsby-plugin-react-helmet react-helmet\n```\n\n----------------------------------------\n\nTITLE: Fixing maxWidth/maxHeight in gatsby-image (JavaScript)\nDESCRIPTION: This snippet addresses a bug in gatsby-image where the `fluid` property was not respecting the `maxWidth` and `maxHeight` configurations. This fix ensures that the image is correctly resized within the specified dimensions.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-sharp/CHANGELOG.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nad7cd6b\n```\n\n----------------------------------------\n\nTITLE: Querying All Product Data in gatsby-node.js\nDESCRIPTION: This JavaScript code snippet showcases an alternative approach to fetching all required data for a product page within the `gatsby-node.js` file. This method involves querying for all the product properties directly and passing the complete product data to the template component via the `pageContext`. While simplifying template queries, this approach can lead to performance issues and a loss of hot reload capabilities.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/creating-and-modifying-pages.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst path = require(\"path\")\n\nexports.createPages = async ({ graphql, actions }) => {\n  const { createPage } = actions\n  const queryResults = await graphql(`\n    query AllProducts {\n      allProducts {\n        nodes {\n          id\n          name\n          price\n          description\n        }\n      }\n    }\n  `)\n\n  const productTemplate = path.resolve(`src/templates/product.js`)\n  queryResults.data.allProducts.nodes.forEach(node => {\n    createPage({\n      path: `/products/${node.id}`,\n      component: productTemplate,\n      context: {\n        // This time the entire product is passed down as context\n        product: node,\n      },\n    })\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Preserving Webpack and Downloaded Files Cache (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to enable caching of webpack and downloaded files to improve the speed of subsequent `gatsby develop` runs. It uses the `PRESERVE_WEBPACK_CACHE` and `PRESERVE_FILE_DOWNLOAD_CACHE` flags in `gatsby-config.js`. This prevents clearing the cache on changes like installing/updating plugins or modifying `gatsby-node.js` or `gatsby-config.js`.\n\nDependencies: None\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/v2.28/index.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  // your existing config\n  flags: {\n    PRESERVE_WEBPACK_CACHE: true,\n    PRESERVE_FILE_DOWNLOAD_CACHE: true,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Gatsby Site with the WordPress Blog Starter (Shell)\nDESCRIPTION: This command uses the Gatsby CLI to create a new site based on the gatsby-starter-wordpress-blog starter from GitHub. It initializes a new project directory with the specified starter template.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/starters/gatsby-starter-wordpress-blog/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngatsby new my-gatsby-starter-wordpress-blog-starter https://github.com/gatsbyjs/gatsby-starter-wordpress-blog\n```\n\n----------------------------------------\n\nTITLE: Limiting Table of Contents Depth Markdown\nDESCRIPTION: This Markdown snippet demonstrates how to limit the depth of subheadings displayed in the Table of Contents by using the `tableOfContentsDepth` frontmatter tag. This allows you to control the level of detail shown in the table of contents, useful for long pages. It limits the table of contents depth to 2 on the Glossary page.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/contributing/docs-contributions/index.md#_snippet_4\n\nLANGUAGE: Markdown\nCODE:\n```\n---\ntitle: Glossary\ntableOfContentsDepth: 2\n---\n\nWhen you're new to Gatsby there can be a lot of words to learn...\n```\n\n----------------------------------------\n\nTITLE: Updating Gatsby Plugins with npm\nDESCRIPTION: This command updates multiple Gatsby plugins, including `gatsby-plugin-sharp`, `gatsby-plugin-manifest`, `gatsby-remark-images-contentful`, `gatsby-source-contentful`, `gatsby-transformer-sharp`, and `gatsby-transformer-sqip`. This is useful for resolving compatibility issues, especially those related to the `sharp` package.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-images-contentful/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install gatsby-plugin-sharp gatsby-plugin-manifest gatsby-remark-images-contentful gatsby-source-contentful gatsby-transformer-sharp gatsby-transformer-sqip\n```\n\n----------------------------------------\n\nTITLE: Setting allPageHeaders in gatsby-config.js\nDESCRIPTION: Sets headers that apply to all pages using the `allPageHeaders` option. This example configures a Link header for preloading an image and basic authentication for all routes.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-gatsby-cloud/README.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-gatsby-cloud`,\n      options: {\n        allPageHeaders: [\n          \"Link: </static/my-logo.png>; rel=preload; as=image\",\n        ],\n        headers: {\n          \"/*\": [\n            \"Basic-Auth: someuser:somepassword anotheruser:anotherpassword\",\n          ],\n        },\n      }\n    },\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Querying GraphQL data with sort (proposed)\nDESCRIPTION: Illustrates the proposed new method of sorting data in Gatsby's GraphQL API. This example shows how to retrieve all MarkdownRemark nodes, ordering them by the `date` field within the `frontmatter` object in descending order using the simplified syntax. This change aims to improve performance and reduce resource usage during builds.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/v4.20/index.md#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n{\n  allMarkdownRemark(sort: { frontmatter: { date: DESC } }) {\n    nodes {\n      ...fields\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running the Gatsby Redux example locally (Shell)\nDESCRIPTION: These commands navigate to the example directory, install dependencies, and start the Gatsby development server. It's used to test the Redux lazy loading implementation locally.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/using-redux-w-interaction-code-splitting/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncd examples/using-redux-w-interaction-code-splitting\nnpm install\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Configuring gatsby-source-filesystem and gatsby-transformer-javascript-frontmatter in gatsby-config.js\nDESCRIPTION: This code snippet shows how to configure the gatsby-source-filesystem and gatsby-transformer-javascript-frontmatter plugins in your gatsby-config.js file. It defines the source filesystem for pages and then applies the transformer plugin to extract frontmatter.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-javascript-frontmatter/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// In your gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-source-filesystem`,\n      options: {\n        name: `pages`,\n        path: `${__dirname}/src/pages/`,\n      },\n    },\n    \"gatsby-transformer-javascript-frontmatter\",\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Handling process is not defined error in Gatsby\nDESCRIPTION: This snippet demonstrates how to handle the `process is not defined` error in Gatsby v3.  Webpack 4 automatically polyfilled `process`, but webpack 5 does not.  This example shows how to use `typeof window !== \"undefined\"` instead of `process.browser`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v2-to-v3.md#_snippet_22\n\nLANGUAGE: diff\nCODE:\n```\nimport React from \"react\"\n\nconst Base64 = ({ text }) => {\n  let base64;\n-  if (process.browser) {\n+  if (typeof window !== \"undefined\") {\n    base64 = btoa(text)\n  } else {\n    base64 = Buffer.from(text).toString('base64')\n  }\n\n  return (\n    <div>\n      {base64}\n    </div>\n  )\n}\n\nexport default Base64\n```\n\n----------------------------------------\n\nTITLE: Migrate deleteNode API usage\nDESCRIPTION: Illustrates how to update the usage of the `deleteNode` action in `gatsby-node.js` from Gatsby v3 to v4. Instead of passing `{ node }`, the full `node` object is now passed directly.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v3-to-v4.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nexports.onCreateNode = ({ actions, node }) => {\n  const { deleteNode } = actions\n\n  deleteNode(node)\n}\n```\n\n----------------------------------------\n\nTITLE: Sending and Receiving Messages in Parent (TypeScript)\nDESCRIPTION: This TypeScript code demonstrates how the parent process can send messages to worker processes and receive messages from them using the `gatsby-worker` utility. It initializes a `WorkerPool`, sends a message to a specific worker using `workerPool.sendMessage`, and listens for messages from workers using `workerPool.onMessage`, providing the worker ID that sent the message.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-worker/README.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getMessenger } from \"gatsby-worker\"\n\nimport { MessagesFromParent, MessagesFromChild } from \"./message-types\"\n\nconst workerPool = new WorkerPool<\n  typeof import(\"./worker\"),\n  MessagesFromParent,\n  MessagesFromChild\n>(\n  workerPath: require.resolve(`./worker`)\n)\n\n// `sendMessage` on WorkerPool instance requires second parameter\n// `workerId` to specify to which worker to send message to\n// (`workerId` starts at 1 for first worker).\nworkerPool.sendMessage(\n  {\n    type: `OTHER_MESSAGE_FROM_PARENT`,\n    payload: {\n      foo: `baz`\n    }\n  },\n  1\n)\n\n// start listening to messages from child\n// `onMessage` callback will be called with message sent from worker\n// and `workerId` (to identify which worker send this message)\nworkerPool.onMessage((msg: MessagesFromChild, workerId: number): void => {\n  switch(msg.type) {\n    case: `PING`: {\n      // send message back making sure we send it back to same worker\n      // that sent `PING` message\n      workerPool.sendMessage({ type: `PONG` }, workerId)\n      break\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Pages in gatsby-node.js (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to create paginated blog list pages in `gatsby-node.js`. It queries all MarkdownRemark nodes and then creates a series of pages, each displaying a limited number of posts.  The `createPage` action is used to generate each page with the appropriate path, template, and context (limit, skip, numPages, currentPage).\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/adding-pagination.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst path = require(\"path\")\nconst { createFilePath } = require(\"gatsby-source-filesystem\")\n\nexports.createPages = async ({ graphql, actions, reporter }) => {\n  const { createPage } = actions\n\n  const result = await graphql(\n    `\n      {\n        allMarkdownRemark(\n          sort: { frontmatter: { date: DESC }}\n          limit: 1000\n        ) {\n          edges {\n            node {\n              fields {\n                slug\n              }\n            }\n          }\n        }\n      }\n    `\n  )\n\n  if (result.errors) {\n    reporter.panicOnBuild(`Error while running GraphQL query.`)\n    return\n  }\n\n  // ...\n\n  // Create blog-list pages\n  // highlight-start\n  const posts = result.data.allMarkdownRemark.edges\n  const postsPerPage = 6\n  const numPages = Math.ceil(posts.length / postsPerPage)\n\n  Array.from({ length: numPages }).forEach((_, i) => {\n    createPage({\n      path: i === 0 ? `/blog` : `/blog/${i + 1}`,\n      component: path.resolve(\"./src/templates/blog-list-template.js\"),\n      context: {\n        limit: postsPerPage,\n        skip: i * postsPerPage,\n        numPages,\n        currentPage: i + 1,\n      },\n    })\n  })\n  // highlight-end\n}\n\nexports.onCreateNode = ({ node, actions, getNode }) => {\n  const { createNodeField } = actions\n  if (node.internal.type === `MarkdownRemark`) {\n    const value = createFilePath({ node, getNode })\n    createNodeField({\n      name: `slug`,\n      node,\n      value,\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Create Product Card Component with Stripe Integration in React\nDESCRIPTION: This React component creates a product card with a dropdown to select the price and a button to initiate the Stripe checkout process.  It uses the `getStripe` utility to get the Stripe instance and `redirectToCheckout` to redirect the user to Stripe for payment. The price selection is handled via a form element.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/ecommerce-tutorial/index.md#_snippet_17\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from \"react\"\nimport getStripe from \"../../utils/stripejs\"\n\nconst cardStyles = {\n  display: \"flex\",\n  flexDirection: \"column\",\n  justifyContent: \"space-around\",\n  alignItems: \"flex-start\",\n  padding: \"1rem\",\n  marginBottom: \"1rem\",\n  boxShadow: \"5px 5px 25px 0 rgba(46,61,73,.2)\",\n  backgroundColor: \"#fff\",\n  borderRadius: \"6px\",\n  maxWidth: \"300px\",\n}\nconst buttonStyles = {\n  display: \"block\",\n  fontSize: \"13px\",\n  textAlign: \"center\",\n  color: \"#000\",\n  padding: \"12px\",\n  boxShadow: \"2px 5px 10px rgba(0,0,0,.1)\",\n  backgroundColor: \"rgb(255, 178, 56)\",\n  borderRadius: \"6px\",\n  letterSpacing: \"1.5px\",\n}\n\nconst buttonDisabledStyles = {\n  opacity: \"0.5\",\n  cursor: \"not-allowed\",\n}\n\nconst formatPrice = (amount, currency) => {\n  let price = (amount / 100).toFixed(2)\n  let numberFormat = new Intl.NumberFormat([\"en-US\"], {\n    style: \"currency\",\n    currency: currency,\n    currencyDisplay: \"symbol\",\n  })\n  return numberFormat.format(price)\n}\n\nconst ProductCard = ({ product }) => {\n  const [loading, setLoading] = useState(false)\n\n  const handleSubmit = async event => {\n    event.preventDefault()\n    setLoading(true)\n\n    const price = new FormData(event.target).get(\"priceSelect\")\n    const stripe = await getStripe()\n    const { error } = await stripe.redirectToCheckout({\n      mode: \"payment\",\n      lineItems: [{ price, quantity: 1 }],\n      successUrl: `${window.location.origin}/page-2/`,\n      cancelUrl: `${window.location.origin}/advanced`,\n    })\n\n    if (error) {\n      console.warn(\"Error:\", error)\n      setLoading(false)\n    }\n  }\n\n  return (\n    <div style={cardStyles}>\n      <form onSubmit={handleSubmit}>\n        <fieldset style={{ border: \"none\" }}>\n          <legend>\n            <h4>{product.name}</h4>\n          </legend>\n          <label>\n            Price{\" \"}\n            <select name=\"priceSelect\">\n              {product.prices.map(price => (\n                <option key={price.id} value={price.id}>\n                  {formatPrice(price.unit_amount, price.currency)}\n                </option>\n              ))}\n            </select>\n          </label>\n        </fieldset>\n        <button\n          disabled={loading}\n          style=\n            loading\n              ? { ...buttonStyles, ...buttonDisabledStyles }\n              : buttonStyles\n          }\n        >\n          BUY ME\n        </button>\n      </form>\n    </div>\n  )\n}\n\nexport default ProductCard\n```\n\n----------------------------------------\n\nTITLE: Creating SEO Component in React/JSX\nDESCRIPTION: This code defines the `SEO` component in React/JSX. It takes `title`, `description`, `pathname`, and `children` as props. It uses the `useSiteMetadata` hook to fetch default metadata if props are not provided. It generates meta tags for title, description, image, and Twitter cards based on the provided props or default values. The `pathname` prop is used to create absolute URLs for the page.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/adding-common-features/adding-seo-component.md#_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\nimport React from \"react\"\nimport { useSiteMetadata } from \"../hooks/use-site-metadata\"\n\nexport const SEO = ({ title, description, pathname, children }) => {\n  const { title: defaultTitle, description: defaultDescription, image, siteUrl, twitterUsername } = useSiteMetadata()\n\n  const seo = {\n    title: title || defaultTitle,\n    description: description || defaultDescription,\n    image: `${siteUrl}${image}`,\n    url: `${siteUrl}${pathname || ``}`,\n    twitterUsername,\n  }\n\n  return (\n    <>\n      <title>{seo.title}</title>\n      <meta name=\"description\" content={seo.description} />\n      <meta name=\"image\" content={seo.image} />\n      <meta name=\"twitter:card\" content=\"summary_large_image\" />\n      <meta name=\"twitter:title\" content={seo.title} />\n      <meta name=\"twitter:url\" content={seo.url} />\n      <meta name=\"twitter:description\" content={seo.description} />\n      <meta name=\"twitter:image\" content={seo.image} />\n      <meta name=\"twitter:creator\" content={seo.twitterUsername} />\n      <link rel=\"icon\" href=\"data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'><text y='0.9em' font-size='90'>üë§</text></svg>\" />\n      {children}\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Define Resolvers and Create Data Directory (gatsby-node.js)\nDESCRIPTION: This code snippet defines resolvers for custom fields like 'slug' within the Gatsby theme, ensures a data directory exists, and customizes the schema for the Event type. It uses the 'createResolvers' API to generate URL-friendly slugs from event names. The 'onPreBootstrap' hook checks for and creates the data directory, and the 'createSchemaCustomization' hook defines the 'Event' type with specific fields and directives.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/building-a-theme.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst fs = require(\"fs\")\n\n// Make sure the data directory exists\nexports.onPreBootstrap = ({ reporter }) => {\n  const contentPath = `${__dirname}/data/`\n\n  if (!fs.existsSync(contentPath)) {\n    reporter.info(`creating the ${contentPath} directory`)\n    fs.mkdirSync(contentPath)\n  }\n}\n\n// Define the \"Event\" type\nexports.createSchemaCustomization = ({ actions }) => {\n  actions.createTypes(`\n    type Event implements Node @dontInfer {\n      id: ID!\n      name: String!\n      location: String!\n      startDate: Date! @dateformat @proxy(from: \"start_date\")\n      endDate: Date! @dateformat @proxy(from: \"end_date\")\n      url: String!\n      slug: String!\n    }\n  `)\n}\n\n// highlight-start\n// Define resolvers for custom fields\nexports.createResolvers = ({ createResolvers }) => {\n  const basePath = \"/\"\n\n  // Quick-and-dirty helper to convert strings into URL-friendly slugs.\n  const slugify = str => {\n    const slug = str\n      .toLowerCase()\n      .replace(/[^a-z0-9]+/g, \"-\")\n      .replace(/(^-|-$)+/g, \"\")\n\n    return `/${basePath}/${slug}`.replace(/\\/\\/+/g, \"/\")\n  }\n\n  createResolvers({\n    Event: {\n      slug: {\n        resolve: source => slugify(source.name),\n      },\n    },\n  })\n}\n// highlight-end\n```\n\n----------------------------------------\n\nTITLE: gatsby-config.js: createSchema with schema.sdl (JavaScript)\nDESCRIPTION: Demonstrates how to use the `createSchema` option to build the schema from a schema SDL file.  This avoids schema introspection at runtime.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-graphql/README.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst fs = require(\"fs\")\nconst { buildSchema, buildClientSchema } = require(\"graphql\")\n\nmodule.exports = {\n  plugins: [\n    {\n      resolve: \"gatsby-source-graphql\",\n      options: {\n        typeName: \"SWAPI\",\n        fieldName: \"swapi\",\n        url: \"https://api.graphcms.com/simple/v1/swapi\",\n\n        createSchema: async () => {\n          const sdl = fs.readFileSync(`${__dirname}/schema.sdl`).toString()\n          return buildSchema(sdl)\n        },\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Gatsby Source Plugin for ButterCMS\nDESCRIPTION: This JavaScript snippet shows how to configure the `gatsby-source-buttercms` plugin in `gatsby-config.js`.  It requires an API token and specifies content fields, pages, and page types to be fetched from ButterCMS. Replace `your_auth_token` with the actual ButterCMS API token.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/sourcing-from-buttercms.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n{\n      resolve: `gatsby-source-buttercms`,\n      options: {\n        authToken: `your_auth_token`,\n        // Optional. Returns values for the supplied content field keys.\n        contentFields: {\n          keys: [`faq_items`, `faq_headline`],\n          // Optional. Set to 1 to enable test mode for viewing draft content.\n          test: 0,\n        },\n        // Optional. Array of page slugs.\n        pages: [`homepage`],\n        // Optional. Array of page types.\n        pageTypes: [`customer_case_study`],\n      },\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: webpack.stats.json Example\nDESCRIPTION: An example of the `webpack.stats.json` file generated by Gatsby. It maps chunk groups (componentChunkNames) to their corresponding chunk asset names, enabling Gatsby to include the correct JavaScript and CSS files in the HTML.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-code-splitting-works.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  \"assetsByChunkName\": {\n    \"app\": [\n      \"webpack-runtime-e402cdceeae5fad2aa61.js\",\n      \"app-2e49587d85e03a033f58.js\"\n    ],\n    \"component---src-blog-2-js\": [\n      \"0.f8e7f9e53550f997bc53.css\",\n      \"0-d55d2d6645e11739b63c.js\",\n      \"1.93002d5bafe5ca491b1a.css\",\n      \"1-4c94a37dc2061cb7beb9.js\",\n      \"component---src-blog-2-js-cebc3ae7596cbb5b0951.js\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Gatsby Preview Secret Configuration (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to pass a secret key for the Gatsby Preview feature. This adds a layer of security between the Drupal instance and the Gatsby Preview instance, ensuring that only authorized requests are processed. The secret must match the one configured in the Drupal Gatsby Preview settings.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-drupal/README.md#_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\n// In your gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-source-drupal`,\n      options: {\n        baseUrl: `https://live-contentacms.pantheonsite.io/`,\n        secret: process.env.PREVIEW_SECRET, // optional, must match Drupal instance preview secret\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Git Branch\nDESCRIPTION: This command creates a new branch in the local Git repository. It's used to isolate changes for a specific feature or bug fix.  `topics/new-feature-name` should be replaced with a descriptive name for the new branch.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/contributing/code-contributions.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngit checkout -b topics/new-feature-name\n```\n\n----------------------------------------\n\nTITLE: Query All Contentful Assets GraphQL\nDESCRIPTION: This GraphQL query retrieves all `ContentfulAsset` nodes, including their `contentful_id`, `title`, and `description`. It can be used in `gatsby-node.js` to create pages or in components to display a list of assets.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-contentful/README.md#_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  allContentfulAsset {\n    nodes {\n      contentful_id\n      title\n      description\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Passing props to custom component in Markdown\nDESCRIPTION: This HTML snippet shows how to pass the `initialvalue` prop to the custom React component `interactive-counter` within a Markdown file. The component will receive the prop value as a string.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/using-remark/src/pages/2018-01-27---custom-components/index.md#_snippet_8\n\nLANGUAGE: HTML\nCODE:\n```\n<interactive-counter initialvalue=\"10\"></interactive-counter>\n```\n\n----------------------------------------\n\nTITLE: Install gatsby-transformer-excel\nDESCRIPTION: Installs the gatsby-transformer-excel plugin using npm. This plugin is used to transform Excel files into JSON arrays that can be queried in Gatsby.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-excel/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install gatsby-transformer-excel\n```\n\n----------------------------------------\n\nTITLE: Serving a Production Build of a Gatsby Site (Shell)\nDESCRIPTION: This command serves the production build of your Gatsby site locally for testing before deployment.  It simulates a production environment to verify the site's behavior after the build process. This should be executed from the root directory of the project.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/gatsby-cli.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\ngatsby serve\n```\n\n----------------------------------------\n\nTITLE: Applying New Props to Shadowed NewsletterCTA (JSX)\nDESCRIPTION: This snippet illustrates extending a component and applying a new prop. The `NewsletterCTA` component is re-exported and the `variant` prop is added with a value of `link`, overriding the component's default value.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/plugins-and-themes/shadowing.md#_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { NewsletterCTA } from \"gatsby-theme-blog/src/components/newsletter\"\n\nexport default function CallToAction(props) {\n  return <NewsletterCTA {...props} variant=\"link\" />\n}\n```\n\n----------------------------------------\n\nTITLE: Agility Page Component (JSX)\nDESCRIPTION: This is the `AgilityPage` component, which fetches page and item data from Agility CMS using GraphQL queries based on the page and content IDs. It then renders the page content using the `AgilityPageTemplate` component, passing in the viewModel. This component acts as the master page template.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/sourcing-from-agilitycms.md#_snippet_8\n\nLANGUAGE: JSX\nCODE:\n```\nimport React from \"react\"\nimport { graphql } from \"gatsby\"\n\nexport const query = graphql`\n  query($pageID: Int!, $contentID: Int!, $languageCode: String!) {\n    agilitypage(languageCode: { eq: $languageCode }, itemID: { eq: $pageID }) {\n      pageJson\n    }\n    agilityitem(\n      languageCode: { eq: $languageCode }\n      itemID: { eq: $contentID }\n    ) {\n      itemJson\n    }\n  }\n`\n\nconst AgilityPage = ({ pageContext, data }) => {\n  return (\n    <>\n      <SEO\n        title={viewModel.page.title}\n        description={viewModel.page.seo.metaDescription}\n        keywords={viewModel.page.seo.metaKeywords}\n        ogImage={viewModel.dynamicPageItem?.customFields?.image?.url}\n      />\n      <PreviewBar isPreview={viewModel.isPreview} />\n      <div id=\"site-wrapper\" className=\"flex flex-col min-h-screen\">\n        <SiteHeader\n          languageCode={viewModel.languageCode}\n          isMultiLanguage={viewModel.isMultiLanguage}\n        />\n        <main className=\"flex-grow\">\n          <AgilityPageTemplate {...viewModel} />\n        </main>\n        <SiteFooter />\n      </div>\n    </>\n  )\n}\n\nexport default AgilityPage\n```\n\n----------------------------------------\n\nTITLE: Defining Frame Component with children prop - JavaScript\nDESCRIPTION: This snippet shows how to define the Frame component that accepts a 'children' prop. The 'children' prop contains the elements passed between the opening and closing tags of the component.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-2/index.mdx#_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from 'react'\n\nconst Frame = ({ children }) => { // highlight-line\n  return (\n    <div>\n      <h1>This is the page title</h1>\n      {\n        /* highlight-next-line */\n      }\n      { children }\n    </div>\n  )\n}\n\nexport default Frame\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query Example (gatsby-source-wordpress v4)\nDESCRIPTION: This code snippet demonstrates how to modify the GraphQL query to work with the `gatsby-source-wordpress` plugin. The root field is changed to `allWpPage`, and the `wp` wrapper is removed, allowing for direct access to WordPress nodes.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-wordpress/docs/migrating-from-other-wp-source-plugins.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n{\n  allWpPage {\n    nodes {\n      title\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing gatsby-source-graphql using npm\nDESCRIPTION: This command installs the `gatsby-source-graphql` plugin, which allows you to fetch data from a GraphQL API at build time.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/conceptual/data-fetching.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install gatsby-source-graphql\n```\n\n----------------------------------------\n\nTITLE: Initializing a Gatsby Adapter (JavaScript)\nDESCRIPTION: This code snippet demonstrates the basic structure of a Gatsby adapter in JavaScript. It includes the required `name`, `cache` (optional), `adapt`, and `config` (optional) hooks. The adapter's entry point should export a function, adhering to the specified API for seamless integration with Gatsby's build process.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/previews-deploys-hosting/creating-an-adapter.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n/**\n * @type {import(\"gatsby\").AdapterInit}\n */\nconst createAdapterFoo = adapterOptions => {\n  return {\n    name: `gatsby-adapter-foo`,\n    cache: {\n      restore({ directories, reporter }) {\n        // Cache restore implementation\n      },\n      store({ directories, reporter }) {\n        // Cache store implementation\n      },\n    },\n    adapt({\n      routesManifest,\n      functionsManifest,\n      pathPrefix,\n      trailingSlash,\n      reporter,\n    }) {\n      // Adapt implementation\n    },\n    config({ reporter }) {\n      return {\n        // Information passed back to Gatsby\n      }\n    },\n  }\n}\n\nmodule.exports = createAdapterFoo\n```\n\n----------------------------------------\n\nTITLE: Creating a new Gatsby site with the CLI\nDESCRIPTION: Creates a new Gatsby site using the Gatsby CLI, then navigates into the newly created project directory. This command is a prerequisite for the following steps, where the WordPress plugin will be installed and configured.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/wordpress-source-plugin-tutorial.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngatsby new wordpress-tutorial-site\ncd wordpress-tutorial-site\n```\n\n----------------------------------------\n\nTITLE: Install Gatsby Flow Plugin\nDESCRIPTION: This command installs the gatsby-plugin-flow package from npm. It is a prerequisite for using Flow type checking in a Gatsby project.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-flow/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install gatsby-plugin-flow\n```\n\n----------------------------------------\n\nTITLE: Example MDX blog post\nDESCRIPTION: This is an example of a blog post written in MDX, showing how to include frontmatter for metadata like title, date, and slug, followed by Markdown content. This demonstrates the basic structure of an MDX file for blog content.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-5/index.mdx#_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\n---\ntitle: \"My First Post\"\ndate: \"2021-07-23\"\nslug: \"my-first-post\"\n---\n\nThis is my first blog post! Isn't it *great*?\n\nSome of my **favorite** things are:\n\n* Petting dogs\n* Singing\n* Eating potato-based foods\n\n```\n\n----------------------------------------\n\nTITLE: List npm configuration values\nDESCRIPTION: This command lists all configuration values in npm, including the value of the `cafile` option. This allows you to verify that the certificate path has been set correctly.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/local-development/configuring-ca-certificates.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnpm config ls -l\n```\n\n----------------------------------------\n\nTITLE: SameSite Cookie Attribute Example\nDESCRIPTION: This example shows how to set the `SameSite` attribute for a cookie, which helps prevent CSRF attacks. The `SameSite=Strict` attribute ensures that the cookie is only sent with requests originating from the same site.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/conceptual/security-in-gatsby.md#_snippet_5\n\nLANGUAGE: Text\nCODE:\n```\nSet-Cookie: example=1; SameSite=Strict\n```\n\n----------------------------------------\n\nTITLE: Configuring gatsby-source-graphql in gatsby-config.js\nDESCRIPTION: This JavaScript code configures the `gatsby-source-graphql` plugin in `gatsby-config.js`. It specifies the type name, field name, and URL of the Gentics Mesh GraphQL API. The `typeName` and `fieldName` determine how the data will be accessed in Gatsby's GraphQL layer.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/sourcing-from-gentics-mesh.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n    resolve: \"gatsby-source-graphql\",\n        options: {\n        // The top level query type, can be anything you want!\n        typeName: \"MESH\",\n        // The field you'll query against, can also be anything you want.\n        fieldName: \"mesh\",\n        // Local Gentics Mesh server url\n        url: \"http://localhost:8080/api/v2/demo/graphql\",\n    },\n},\n```\n\n----------------------------------------\n\nTITLE: GraphQL query for Etsy listings with images\nDESCRIPTION: This GraphQL query retrieves detailed information about featured Etsy listings, including their ID, title, price, URL, description, and an image with a fixed width and height. It uses nested queries to access the image data through `childEtsyListingImage`, `childFile`, and `childImageSharp`. The fixed image data is configured using Gatsby Image Sharp.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/sourcing-from-etsy.md#_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nallFeaturedEtsyListing {\n  nodes {\n    id\n    title\n    price\n    url\n    description\n    childEtsyListingImage {\n      childFile {\n        childImageSharp {\n          fixed(width: 400, height: 400) {\n            ...GatsbyImageSharpFixed\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Type, PropType, tests, and docs for 'st'\nDESCRIPTION: This commit adds Type, PropType, tests, and documentation for the 'st' prop in gatsby-link.  This improves the type safety and usability of the component. Issue #20807 relates to this commit.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-link/CHANGELOG.md#_snippet_7\n\n\n\n----------------------------------------\n\nTITLE: Setting Source Map Option with resolve-url-loader\nDESCRIPTION: This snippet shows how to explicitly set the `sourceMap` option when using `resolve-url-loader`.  Enabling source maps is required for `resolve-url-loader` to function correctly, but this allows control over whether to output them.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-sass/README.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nplugins: [\n  {\n    resolve: \"gatsby-plugin-sass\",\n    options: {\n      useResolveUrlLoader: {\n        options: {\n          sourceMap: true, //default is false\n        },\n      },\n    },\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Copying Files from a Specific Package\nDESCRIPTION: This command copies files from a specific package using `gatsby-dev`. It's used to isolate changes to a specific package during development. For example, the command `gatsby-dev --packages gatsby` copies files from the `gatsby` package. This facilitates testing of isolated changes in a Gatsby environment.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/contributing/code-contributions.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ngatsby-dev --packages gatsby\n```\n\nLANGUAGE: shell\nCODE:\n```\ngatsby-dev --packages gatsby-link\n```\n\n----------------------------------------\n\nTITLE: Creating a new Gatsby site\nDESCRIPTION: This snippet shows how to create a new Gatsby site using the `gatsby new` command after the Gatsby CLI has been installed. This assumes that gatsby-cli has been installed globally.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/glossary/node.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngatsby new\n```\n\n----------------------------------------\n\nTITLE: Importing CSS files in Gatsby\nDESCRIPTION: This code imports CSS files directly into the Gatsby page component. Gatsby's bundling system efficiently delivers the CSS with the site, eliminating the need for manual <link> tags in the HTML.\n\nDependencies: React, CSS files.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/porting-an-html-site-to-gatsby.md#_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\"\n\nimport \"../styles/normalize.css\" // highlight-line\nimport \"../styles/style.css\" // highlight-line\n\nexport default function Home() {\n  return <div>Hello world!</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CDN Proxy for gatsby-source-drupal (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to configure the `proxyUrl` option within the `gatsby-source-drupal` plugin to use a CDN as a proxy for Drupal's `baseUrl`.  This ensures that URLs returned from Drupal point to the CDN, addressing issues where Drupal is unaware of the CDN's presence. The `apiBase` option is also shown, allowing the user to specify the JSON API endpoint.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-drupal/README.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// In your gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-source-drupal`,\n      options: {\n        baseUrl: `https://live-contentacms.pantheonsite.io/`,\n        proxyUrl: `https://xyz.cloudfront.net/`, // optional, defaults to the value of baseUrl\n        apiBase: `api`, // optional, defaults to `jsonapi`\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Append custom script to service worker\nDESCRIPTION: This configuration demonstrates how to append a custom JavaScript file to the end of the generated service worker file.  This allows for custom logic, such as displaying notifications or registering custom routes, to be added to the service worker.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-offline/README.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nplugins: [\n  {\n    resolve: `gatsby-plugin-offline`,\n    options: {\n      appendScript: require.resolve(`src/custom-sw-code.js`),\n    },\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query Example\nDESCRIPTION: This GraphQL query demonstrates how to query file nodes by their relativePath and retrieve specific fields within childMarkdownRemark.  It showcases the structure of a typical Gatsby GraphQL query and how data is accessed through nested fields.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/schema-inference.md#_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  file( relativePath: {  eq: `blogs/my-blog.md` } ) {\n    childMarkdownRemark {\n      frontmatter: {\n        title\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Install and Use Specific Node.js Version\nDESCRIPTION: These commands install and activate a specific version of Node.js using nvm (Node Version Manager). The `nvm install` command downloads and installs the specified Node.js version. The `nvm use` command activates the specified Node.js version for the current shell session.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-0/index.mdx#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nnvm install 18\n```\n\nLANGUAGE: shell\nCODE:\n```\nnvm use 18\n```\n\n----------------------------------------\n\nTITLE: Join Paths with gatsby-core-utils (JS)\nDESCRIPTION: Joins paths using `/` as a separator, compatible with both Windows and Unix-like systems using `gatsby-core-utils`. This is useful for creating URLs or file paths.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-core-utils/README.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { joinPath } = require(\"gatsby-core-utils\")\n\nconst BASEPATH = \"/mybase/\"\nconst pathname = \"./gatsby/is/awesome\"\nconst url = joinPath(BASEPATH, pathname)\n// ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Typography.js Plugin in gatsby-config.js\nDESCRIPTION: This code snippet demonstrates how to add the `gatsby-plugin-typography` to the `gatsby-config.js` file.  It configures the plugin to use a specific file (`src/utils/typography`) as the Typography.js configuration module.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/using-typography-js.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  plugins: [\n    // highlight-start\n    {\n      resolve: `gatsby-plugin-typography`,\n      options: {\n        pathToConfigModule: `src/utils/typography`,\n      },\n    },\n    // highlight-end\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Plugin Authoring Help to gatsby-cli JavaScript\nDESCRIPTION: This snippet adds plugin authoring help to the gatsby-cli tool. This enhancement likely provides users with guidance and resources for creating their own Gatsby plugins. By offering plugin authoring help, gatsby-cli empowers developers to extend the functionality of Gatsby and contribute to the Gatsby ecosystem.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-cli/CHANGELOG.md#_snippet_28\n\nLANGUAGE: JavaScript\nCODE:\n```\n41c0166\n```\n\n----------------------------------------\n\nTITLE: Render Excerpt on Blog page\nDESCRIPTION: This snippet illustrates how to render the excerpt of each blog post in the Blog page component.  It integrates the `node.excerpt` value into the JSX within the `<article>` element to display the excerpt below the title and date.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-5/index.mdx#_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react'\nimport { graphql } from 'gatsby'\nimport Layout from '../components/layout'\nimport Seo from '../components/seo'\n\nconst BlogPage = ({ data }) => {\n  return (\n    <Layout pageTitle=\"My Blog Posts\">\n      {\n        data.allMdx.nodes.map((node) => (\n          <article key={node.id}>\n            <h2>{node.frontmatter.title}</h2>\n            <p>Posted: {node.frontmatter.date}</p>\n            {/* highlight-start */}\n            <p>{node.excerpt}</p>\n            {/* highlight-end */}\n          </article>\n        ))\n      }\n    </Layout>\n  )\n}\n\nexport const query = graphql`\n  query {\n    allMdx(sort: { frontmatter: { date: DESC }}) {\n      nodes {\n        frontmatter {\n          title\n          date(formatString: \"MMMM DD, YYYY\")\n        }\n        id\n        excerpt\n      }\n    }\n  }\n`\n\nexport const Head = () => <Seo title=\"My Blog Posts\" />\n\nexport default BlogPage\n```\n\n----------------------------------------\n\nTITLE: Rename `modifyWebpackConfig` to `onCreateWebpackConfig` (Diff)\nDESCRIPTION: This code snippet demonstrates the API change from `modifyWebpackConfig` to `onCreateWebpackConfig` for plugin configuration in Gatsby v2. It highlights how to configure webpack plugins using the new `actions.setWebpackConfig` method.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v1-to-v2.md#_snippet_38\n\nLANGUAGE: Diff\nCODE:\n```\n- exports.modifyWebpackConfig = ({ config, stage }) => {\n+ exports.onCreateWebpackConfig = ({ stage, actions }) => {\n  switch (stage) {\n    case `build-javascript`:\n-       config.plugin(`Foo`, webpackFooPlugin, null)\n-       break\n-   }\n-   return config\n+       actions.setWebpackConfig({\n+         plugins: [webpackFooPlugin],\n+       })\n+   }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Keywords to package.json (JSON)\nDESCRIPTION: This snippet demonstrates how to include the 'gatsby' and 'gatsby-plugin' keywords in the package.json file.  These keywords are essential for discoverability in the Gatsby plugin library. The plugin library helps users find appropriate plugins for their projects.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/creating-a-source-plugin/part-8/index.mdx#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"keywords\": [\n    \"gatsby\",\n    \"gatsby-plugin\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Bulma and Sass\nDESCRIPTION: This command installs Bulma, Sass, and the Gatsby plugin for Sass, which are required for using Bulma in a Gatsby project.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/styling/bulma.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nyarn add bulma sass gatsby-plugin-sass\n```\n\n----------------------------------------\n\nTITLE: GraphQL query for headings field\nDESCRIPTION: GraphQL query to retrieve the `headings` field and its properties (value, depth) from the MDX node.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-mdx/README.md#_snippet_17\n\nLANGUAGE: GraphQL\nCODE:\n```\nquery {\n  mdx {\n    headings {\n      value\n    depth\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Sync Token from Plugin Status in JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to retrieve a sync token stored in the plugin's status using the `store.getState()` method. It accesses the plugin's status and retrieves the value associated with the `CACHE_SYNC_TOKEN` key. This is useful for persisting sync tokens between Gatsby builds.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/creating-a-source-plugin/part-5/index.mdx#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst syncToken =\n      store.getState().status.plugins?.[`gatsby-source-contentful`]?.[\n        CACHE_SYNC_TOKEN\n      ]\n```\n\n----------------------------------------\n\nTITLE: Sending and Receiving Messages in Worker (TypeScript)\nDESCRIPTION: This TypeScript code shows how a worker process can send messages to the parent process and receive messages from it. It utilizes the `getMessenger` function from `gatsby-worker` to obtain a messenger instance. The code then demonstrates sending messages of different types using `messenger.send` and listening for messages from the parent using `messenger.onMessage`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-worker/README.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getMessenger } from \"gatsby-worker\"\n\nimport { MessagesFromParent, MessagesFromChild } from \"./message-types\"\n\nconst messenger = getMessenger<MessagesFromParent, MessagesFromChild>()\n// messenger might be `undefined` if `getMessenger`\n// is called NOT in worker context\nif (messenger) {\n  // send a message to a parent\n  messenger.send({ type: `PING` })\n  messenger.send({\n    type: `OTHER_MESSAGE_FROM_CHILD`,\n    payload: {\n      foo: `bar`,\n    },\n  })\n\n  // following would cause type error as message like that is\n  // not part of MessagesFromChild type union\n  // messenger.send({ type: `NOT_PART_OF_TYPES` })\n\n  // start listening to messages from parent\n  messenger.onMessage(msg => {\n    switch (msg.type) {\n      case `PONG`: {\n        // handle PONG message\n        break\n      }\n      case `OTHER_MESSAGE_FROM_PARENT`: {\n        // msg.payload.foo will be typed as `string` here\n        // handle\n        break\n      }\n\n      // following would cause type error as there is no msg with\n      // given type as part of MessagesFromParent type union\n      // case `NOT_PART_OF_TYPES`: {}\n    }\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a new Gatsby site\nDESCRIPTION: This command creates a new Gatsby site using the hello-world starter. It is the starting point for the examples in the guide.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/sourcing-data/sourcing-from-json-or-yaml.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngatsby new gatsby-YAML-JSON-at-buildtime https://github.com/gatsbyjs/gatsby-starter-hello-world\n```\n\n----------------------------------------\n\nTITLE: Add gatsby-plugin-lodash to gatsby-config.js\nDESCRIPTION: This snippet demonstrates how to include the gatsby-plugin-lodash in your gatsby-config.js file.  No dependencies other than the plugin itself are required. It enables modular Lodash builds.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-lodash/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nplugins: [`gatsby-plugin-lodash`]\n```\n\n----------------------------------------\n\nTITLE: Allowing React/ReactDOM Experimental Versions\nDESCRIPTION: This code snippet represents a chore that allows the use of experimental versions of React and ReactDOM. This might be done for testing and compatibility purposes, enabling the `gatsby-plugin-feed` plugin to be used with the latest experimental features of React. This can also expose potential issues or allow early adoption of new functionalities.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-feed/CHANGELOG.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nallow react/react-dom@experimental [#36533](https://github.com/gatsbyjs/gatsby/issues/36533) ([7ef4a3f](https://github.com/gatsbyjs/gatsby/commit/7ef4a3fe080d45e9edaff9f1d4deebd12a00ddbd))\n```\n\n----------------------------------------\n\nTITLE: Home Page Component\nDESCRIPTION: Defines the `IndexPage` component for the home page, including importing React, defining the component with JSX, and exporting it. It also includes the `Head` component to set the page title.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-2/index.mdx#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Step 1: Import React\nimport * as React from 'react'\n\n// Step 2: Define your component\nconst IndexPage = () => {\n  return (\n    <main>\n      <h1>Welcome to my Gatsby site!</h1>\n      <p>I'm making this by following the Gatsby Tutorial.</p>\n    </main>\n  )\n}\n\n// You'll learn about this in the next task, just copy it for now\nexport const Head = () => <title>Home Page</title>\n\n// Step 3: Export your component\nexport default IndexPage\n```\n\n----------------------------------------\n\nTITLE: CSS Styles for Site Title\nDESCRIPTION: This CSS defines the styles for the site title, including font size, color, font weight, and margin.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-4/index.mdx#_snippet_9\n\nLANGUAGE: CSS\nCODE:\n```\n/* ... your existing styles */\n\n.site-title {\n  font-size: 3rem;\n  color: gray;\n  font-weight: 700;\n  margin: 3rem 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Running sort-and-aggr-graphql codemod\nDESCRIPTION: This command executes the `sort-and-aggr-graphql` codemod, which updates the `sort` and aggregation's `field` arguments in GraphQL queries to the new Gatsby v5 format. This script aligns GraphQL queries with the changes introduced in Gatsby v5 regarding sorting and aggregation fields.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-codemods/README.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nnpx gatsby-codemods sort-and-aggr-graphql <filepath>\n```\n\n----------------------------------------\n\nTITLE: Example: Converting to Array from nodeModel.findAll for Array Methods\nDESCRIPTION: This JavaScript code shows how to convert the iterable object returned by `nodeModel.findAll` into an array to utilize array-specific methods in a GraphQL resolver.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v3-to-v4.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n// Example: Convert to array to use methods not available on iterable\nresolve: async (source, args, context, info) => {\n  const { entries } = await context.nodeModel.findAll({\n    type: \"MarkdownRemark\",\n  })\n  const posts = entries.filter(post => post.frontmatter.author === source.email)\n  return Array.from(posts).length\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Default Filter Splice in gatsby-plugin-sitemap\nDESCRIPTION: This commit addresses a bug related to the default filter in the gatsby-plugin-sitemap. It removes the `splice` method, potentially fixing issues with how pages are filtered when generating the sitemap.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-sitemap/CHANGELOG.md#_snippet_0\n\nLANGUAGE: TEXT\nCODE:\n```\nremove splice for default filter [#37916](https://github.com/gatsbyjs/gatsby/issues/37916) ([dd47b7c](https://github.com/gatsbyjs/gatsby/commit/dd47b7c09359387f8471faf9ffa469d1242fa5d9))\n```\n\n----------------------------------------\n\nTITLE: Configure trailingSlash in gatsby-config.js (JavaScript)\nDESCRIPTION: Sets the `trailingSlash` option in `gatsby-config.js` to `always`. This ensures that all URLs have a trailing slash, which is the default behavior in Gatsby 5. It's recommended to explicitly define this option.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v4-to-v5.md#_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  trailingSlash: `always`,\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Style Tag for Inline CSS Injection\nDESCRIPTION: This code snippet illustrates how Gatsby injects CSS styles directly into the HTML head using a `<style>` tag. The `data-href` attribute stores the original CSS file path, and the `dangerouslySetInnerHTML` attribute is used to insert the CSS content. This is useful for critical CSS that should be loaded as quickly as possible.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-code-splitting-works.md#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<style\n  data-href=\"/1.93002d5bafe5ca491b1a.css\"\n  dangerouslySetInnerHTML=\"...contents of public/1.93002d5bafe5ca491b1a.css\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Deploying Gatsby site to Firebase\nDESCRIPTION: This command deploys the generated Gatsby site from the `public` directory to Firebase Hosting. It requires a Firebase project to be initialized and configured.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/previews-deploys-hosting/deploying-to-firebase.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nfirebase deploy\n```\n\n----------------------------------------\n\nTITLE: Remark AST Example\nDESCRIPTION: This JSON represents the Abstract Syntax Tree (AST) generated by Remark from the provided Markdown.  The AST contains information about the document structure, including headings, paragraphs, text, and links.  Each node in the AST contains a type, value, and position.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/remark-plugin-tutorial.md#_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"type\": \"root\",\n  \"children\": [\n    {\n      \"type\": \"heading\",\n      \"depth\": 1,\n      \"children\": [\n        {\n          \"type\": \"text\",\n          \"value\": \"Hello World!\",\n          \"position\": {\n            \"start\": { \"line\": 1, \"column\": 3, \"offset\": 2 },\n            \"end\": { \"line\": 1, \"column\": 15, \"offset\": 14 },\n            \"indent\": []\n          }\n        }\n      ],\n      \"position\": {\n        \"start\": { \"line\": 1, \"column\": 1, \"offset\": 0 },\n        \"end\": { \"line\": 1, \"column\": 15, \"offset\": 14 },\n        \"indent\": []\n      }\n    },\n    {\n      \"type\": \"paragraph\",\n      \"children\": [\n        {\n          \"type\": \"text\",\n          \"value\": \"This is a \",\n          \"position\": {\n            \"start\": { \"line\": 3, \"column\": 1, \"offset\": 16 },\n            \"end\": { \"line\": 3, \"column\": 11, \"offset\": 26 },\n            \"indent\": []\n          }\n        },\n        {\n          \"type\": \"link\",\n          \"title\": null,\n          \"url\": \"https://google.com\",\n          \"children\": [\n            {\n              \"type\": \"text\",\n              \"value\": \"Real page\",\n              \"position\": {\n                \"start\": { \"line\": 3, \"column\": 12, \"offset\": 27 },\n                \"end\": { \"line\": 3, \"column\": 21, \"offset\": 36 },\n                \"indent\": []\n              }\n            }\n          ],\n          \"position\": {\n            \"start\": { \"line\": 3, \"column\": 11, \"offset\": 26 },\n            \"end\": { \"line\": 3, \"column\": 42, \"offset\": 57 },\n            \"indent\": []\n          }\n        }\n      ],\n      \"position\": {\n        \"start\": { \"line\": 3, \"column\": 1, \"offset\": 16 },\n        \"end\": { \"line\": 3, \"column\": 42, \"offset\": 57 },\n        \"indent\": []\n      }\n    }\n  ],\n  \"position\": {\n    \"start\": { \"line\": 1, \"column\": 1, \"offset\": 0 },\n    \"end\": { \"line\": 4, \"column\": 1, \"offset\": 58 }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Figure Component in MDX\nDESCRIPTION: This snippet demonstrates how to import and use the `Figure` component defined in the previous snippet within an MDX document. It shows how JSX components can be seamlessly integrated into Markdown content.  The component replaces the standard HTML figure.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/glossary/mdx.md#_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nimport { Figure } from \"./components/Figure\"\n\n# Hello world!\n\nYou can use Markdown to create documents for [Gatsby](https://www.gatsbyjs.com/).\n\n<Figure data=\"chart.svg\" caption=\"MDX adoption has increased 120% since last year.\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Keywords in package.json for Gatsby Plugin\nDESCRIPTION: This snippet shows the `keywords` field in a `package.json` file for a Gatsby plugin. It includes the required keywords `gatsby` and `gatsby-plugin`, as well as other relevant keywords to help users find the plugin. This is an example for a Markdown MathJax transformer plugin.  The package.json file should be a valid JSON format.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/plugins-and-themes/submit-to-plugin-library.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"keywords\": [\n    \"gatsby\",\n    \"gatsby-plugin\",\n    \"gatsby-transformer-plugin\",\n    \"mathjax\",\n    \"markdown\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting the path to the Gatsby repository\nDESCRIPTION: Configures the gatsby-dev-cli tool with the path to the cloned Gatsby repository. This is typically done once during initial setup. Replace `/path/to/my/cloned/version/gatsby` with the actual path to your cloned Gatsby repository.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-dev-cli/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ngatsby-dev --set-path-to-repo /path/to/my/cloned/version/gatsby\n```\n\n----------------------------------------\n\nTITLE: Passing Proxy Configuration to Contentful - JavaScript\nDESCRIPTION: This code allows users to configure a proxy server to be used when connecting to the Contentful API. This is useful for scenarios where the Gatsby site is deployed behind a firewall or requires a proxy for external network access. This enables the `gatsby-source-contentful` plugin to work correctly in these environments.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-contentful/CHANGELOG.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n744c07d\n```\n\n----------------------------------------\n\nTITLE: Importing Individual Token Groups\nDESCRIPTION: This code snippet shows how to directly import individual token groups from the `gatsby-design-tokens` package. This is useful when you need to access specific design tokens outside of the `theme-ui` context, such as in custom components or utility functions.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-design-tokens/CHANGELOG.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { mediaQueries } from \"gatsby-design-tokens/dist/theme-gatsbyjs-org\"\n```\n\n----------------------------------------\n\nTITLE: Create a Minimal Gatsby Site\nDESCRIPTION: This command creates a minimal Gatsby site without interactive prompts. The `-y` flag bypasses the prompts, and `<site-directory>` specifies the directory for the new site. This requires the user to know the necessary configuration details in advance.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/create-gatsby/README.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nnpm init gatsby -y <site-directory>\n```\n\n----------------------------------------\n\nTITLE: Using withPrefix to handle path prefixes in Gatsby\nDESCRIPTION: Demonstrates how to use the `withPrefix` function to prepend the path prefix to URLs when your site is hosted in a sub-directory. This ensures that the correct URLs are constructed in both development and production environments.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/built-in-components/gatsby-link.md#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { withPrefix } from \"gatsby\"\n\nconst IndexLayout = ({ children, location }) => {\n  const isHomepage = location.pathname === withPrefix(\"/\")\n\n  return (\n    <div>\n      <h1>Welcome {isHomepage ? \"home\" : \"aboard\"}!</h1>\n      {children}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Run Gatsby Development Server\nDESCRIPTION: This command starts the Gatsby development server, which builds the project and serves it locally. Running this command is necessary to generate the `gatsby-types.d.ts` file and enable autocompletion in VSCode.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/using-graphql-typegen/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnpm run develop\n```\n\n----------------------------------------\n\nTITLE: Initializing Google Tag Manager Plugin in gatsby-config.js\nDESCRIPTION: This code snippet demonstrates how to add the gatsby-plugin-google-tagmanager to your gatsby-config.js file. It includes options for setting the Google Tag Manager ID, enabling GTM in development, defining a default data layer, specifying GTM environment details, and configuring route change event tracking. It is crucial to replace the placeholder values with your actual GTM credentials and desired configuration.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-google-tagmanager/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// In your gatsby-config.js\nplugins: [\n  {\n    resolve: \"gatsby-plugin-google-tagmanager\",\n    options: {\n      id: \"YOUR_GOOGLE_TAGMANAGER_ID\",\n\n      // Include GTM in development.\n      //\n      // Defaults to false meaning GTM will only be loaded in production.\n      includeInDevelopment: false,\n\n      // datalayer to be set before GTM is loaded\n      // should be an object or a function that is executed in the browser\n      //\n      // Defaults to null\n      defaultDataLayer: { platform: \"gatsby\" },\n\n      // Specify optional GTM environment details.\n      gtmAuth: \"YOUR_GOOGLE_TAGMANAGER_ENVIRONMENT_AUTH_STRING\",\n      gtmPreview: \"YOUR_GOOGLE_TAGMANAGER_ENVIRONMENT_PREVIEW_NAME\",\n      dataLayerName: \"YOUR_DATA_LAYER_NAME\",\n\n      // Name of the event that is triggered\n      // on every Gatsby route change.\n      //\n      // Defaults to gatsby-route-change\n      routeChangeEventName: \"YOUR_ROUTE_CHANGE_EVENT_NAME\",\n      // Defaults to false\n      enableWebVitalsTracking: true,\n      // Defaults to https://www.googletagmanager.com\n      selfHostedOrigin: \"YOUR_SELF_HOSTED_ORIGIN\",\n      // Defaults to gtm.js\n      selfHostedPath: \"YOUR_SELF_HOSTED_PATH\",\n    },\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Install Jaeger Client Dependency (yarn)\nDESCRIPTION: This command adds the Jaeger client library to your project using yarn. The Jaeger client is used to send tracing data to a Jaeger instance for analysis.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/performance-tracing.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nyarn add jaeger-client\n```\n\n----------------------------------------\n\nTITLE: Including gatsby-plugin-sass\nDESCRIPTION: This snippet demonstrates how to include the `gatsby-plugin-sass` plugin in your `gatsby-config.js` file. This is the most basic setup required to enable Sass support in your Gatsby project. No dependencies are explicitly required in this simple case, but the plugin itself must be installed.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-sass/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nplugins: [`gatsby-plugin-sass`]\n```\n\n----------------------------------------\n\nTITLE: Install curl (Ubuntu/Debian)\nDESCRIPTION: This command installs the `curl` command-line tool on Ubuntu and Debian-based Linux distributions. `curl` is used to transfer data with URLs and is required for downloading the nvm installation script.  The `-y` flag automatically answers 'yes' to any prompts during the installation process.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-0/index.mdx#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt-get install curl\n```\n\n----------------------------------------\n\nTITLE: Forestry CMS Blog Frontmatter Configuration (blog.yml)\nDESCRIPTION: This YAML file (`.forestry/front_matter/blog.yml`) configures the frontmatter for blog posts in Forestry CMS. It defines the fields that will be available when creating new blog posts, such as `date` and `title`, along with their types, labels, and configurations. These fields will be used to structure the content of the Markdown files.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/sourcing-from-forestry.md#_snippet_5\n\nLANGUAGE: YAML\nCODE:\n```\n---\nlabel: Blog\nhide_body: false\nfields:\n  - name: date\n    type: datetime\n    label: Date\n    description: \"\"\n    config:\n      required: true\n      date_format:\n      time_format:\n      display_utc: false\n    default: now\n  - name: title\n    type: text\n    label: Title\n    description: \"\"\n    config:\n      required: true\n```\n\n----------------------------------------\n\nTITLE: Creating the Index Page Component in React\nDESCRIPTION: This React component displays a list of blog posts. It receives the blog post data through props and renders a list of PostLink components. The component filters posts based on the existence of a date in the frontmatter.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/adding-a-list-of-markdown-blog-posts.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from \"react\"\nimport PostLink from \"../components/post-link\"\n\nconst IndexPage = ({\n  data: {\n    allMarkdownRemark: { edges },\n  },\n}) => {\n  const Posts = edges\n    .filter(edge => !!edge.node.frontmatter.date) // You can filter your posts based on some criteria\n    .map(edge => <PostLink key={edge.node.id} post={edge.node} />)\n\n  return <div>{Posts}</div>\n}\n\nexport default IndexPage\n```\n\n----------------------------------------\n\nTITLE: Fixing LESS Ignore Pattern in Gatsby\nDESCRIPTION: This code snippet wraps the ignore pattern in quotes within the gatsby-plugin-less configuration. This ensures that the ignore pattern is correctly interpreted and applied when processing LESS files.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-less/CHANGELOG.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nwrap ignore pattern in quotes ([#23176](https://github.com/gatsbyjs/gatsby/issues/23176)) ([7563db6](https://github.com/gatsbyjs/gatsby/commit/7563db6))\n```\n\n----------------------------------------\n\nTITLE: Fixing navigate function in Gatsby\nDESCRIPTION: This commit fixes an issue in the navigate function within Gatsby, allowing it to correctly handle numbers as input. This bug was identified and addressed in issue #25611.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-link/CHANGELOG.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Enhanced Layout Component with Links and Styles\nDESCRIPTION: This code shows an enhanced layout component for a Gatsby site. It imports React and Link from Gatsby, along with CSS styles. The component renders a header with a site title and navigation links using Gatsby's Link component, ensuring smooth transitions between pages.  This provides a consistent look and feel across the entire site.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/porting-an-html-site-to-gatsby.md#_snippet_10\n\nLANGUAGE: JSX\nCODE:\n```\nimport React from \"react\"\nimport { Link } from \"gatsby\"\n\nimport \"../styles/normalize.css\"\nimport \"../styles/style.css\"\n\nexport default function Layout({ children }) {\n  return (\n    <>\n      <header>\n        <Link to=\"/\" className=\"brand-color logo-text\">\n          Taylor's Tidy Trees\n        </Link>\n        <nav>\n          <ul>\n            <li>\n              <Link to=\"/about.html\">About</Link>\n            </li>\n            <li>\n              <Link to=\"/services/index.html\">Services</Link>\n            </li>\n            <li>\n              <Link to=\"/who/index.html\">Who We Are</Link>\n            </li>\n            <li>\n              <Link to=\"/contact.html\">Contact</Link>\n            </li>\n          </ul>\n        </nav>\n      </header>\n      <main>{children}</main>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Tracing Source Plugin with startSpan\nDESCRIPTION: Demonstrates how to use the `tracing` API to add performance tracing to a source plugin. The code snippet shows how to start a span, set a tag, perform operations, and finish the span. The `parentSpan` argument is passed to `startSpan` to connect tracing spans.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/creating-a-source-plugin/part-7/index.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport const sourceNodes = ({ tracing }) => {\n  const fetchSpan = tracing.startSpan(`sourceNodes.fetch`)\n\n  fetchSpan.setTag(`sourceNodes.fetch.type`, `delta`)\n\n  // Do things\n\n  fetchSpan.finish()\n}\n```\n\n----------------------------------------\n\nTITLE: Example: Directly Returning Entries from nodeModel.findAll in GraphQL resolvers\nDESCRIPTION: This JavaScript code demonstrates how to directly return entries from `nodeModel.findAll` in GraphQL resolvers, showcasing the use of the iterable object returned by `findAll`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v3-to-v4.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n// Example: Directly return `entries`\nresolve: async (source, args, context, info) => {\n  const { entries } = await context.nodeModel.findAll({\n    query: {\n      filter: {\n        frontmatter: {\n          author: { eq: source.email },\n          date: { gt: \"2019-01-01\" },\n        },\n      },\n    },\n    type: \"MarkdownRemark\",\n  })\n  return entries\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Page Information in GraphiQL\nDESCRIPTION: This GraphQL query retrieves information about all site pages, including their paths, components, and the plugins that created them. It's useful for debugging page creation during development. The query should be run in the GraphiQL IDE available at `HOST:PORT/___graphql` when the development server is running.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/creating-and-modifying-pages.md#_snippet_0\n\nLANGUAGE: GraphQL\nCODE:\n```\n{\n  allSitePage {\n    edges {\n      node {\n        path\n        component\n        pluginCreator {\n          name\n          pluginFilepath\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Sitemap Configuration\nDESCRIPTION: Demonstrates an advanced configuration for the gatsby-plugin-sitemap in the gatsby-config.js file.  It includes a GraphQL query to fetch site pages and WordPress content nodes, custom resolvers for the site URL and pages, and a serialize function to format the sitemap entries with a last modified date.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-sitemap/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst siteUrl = process.env.URL || `https://fallback.net`\n\n// In your gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: \"gatsby-plugin-sitemap\",\n      options: {\n        query: `\n        {\n          allSitePage {\n            nodes {\n              path\n            }\n          }\n          allWpContentNode(filter: {nodeType: {in: [\"Post\", \"Page\"]}}) {\n            nodes {\n              ... on WpPost {\n                uri\n                modifiedGmt\n              }\n              ... on WpPage {\n                uri\n                modifiedGmt\n              }\n            }\n          }\n        }\n      `,\n        resolveSiteUrl: () => siteUrl,\n        resolvePages: ({\n          allSitePage: { nodes: allPages },\n          allWpContentNode: { nodes: allWpNodes },\n        }) => {\n          const wpNodeMap = allWpNodes.reduce((acc, node) => {\n            const { uri } = node\n            acc[uri] = node\n\n            return acc\n          }, {})\n\n          return allPages.map(page => {\n            return { ...page, ...wpNodeMap[page.path] }\n          })\n        },\n        serialize: ({ path, modifiedGmt }) => {\n          return {\n            url: path,\n            lastmod: modifiedGmt,\n          }\n        },\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Migrate touchNode API usage\nDESCRIPTION: Demonstrates how to update the usage of the `touchNode` action in `gatsby-node.js` from Gatsby v3 to v4. Instead of passing `nodeId`, the full `node` object is now expected.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v3-to-v4.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nexports.sourceNodes = ({ actions, getNodesByType }) => {\n  const { touchNode } = actions\n\n  getNodesByType(\"YourSourceType\").forEach(node => touchNode(node))\n}\n```\n\n----------------------------------------\n\nTITLE: Install Gatsby Google Analytics Plugin\nDESCRIPTION: Installs the gatsby-plugin-google-analytics package using npm. This command adds the plugin and its dependencies to the project.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-google-analytics/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install gatsby-plugin-google-analytics\n```\n\n----------------------------------------\n\nTITLE: Creating Gatsby project with hello world starter\nDESCRIPTION: This command creates a new Gatsby project named 'global-styles' using the 'gatsby-starter-hello-world' starter template.  It provides a basic project setup for adding global styles.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/styling/global-css.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngatsby new global-styles https://github.com/gatsbyjs/gatsby-starter-hello-world\n```\n\n----------------------------------------\n\nTITLE: Handling WooCommerce Categories and Tags in Gatsby Source WordPress\nDESCRIPTION: This commit fixes a bug in gatsby-source-wordpress related to handling WooCommerce categories and tags. The fix ensures that WooCommerce categories and tags are correctly processed and integrated into the Gatsby site.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-wordpress/CHANGELOG.md#_snippet_13\n\n\n\n----------------------------------------\n\nTITLE: Importing and Using Material-UI Button (JSX)\nDESCRIPTION: This snippet illustrates how to import and use a component from a third-party library (Material-UI) within a Gatsby page. It imports the `Button` component from `@material-ui/core` and renders it within a functional component. The `variant` prop is used to style the button as a contained button.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/adding-react-components.md#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\"\n\n// import my fancy third-party component\nimport Button from \"@material-ui/core/Button\"\n\nexport default function Home() {\n  return (\n    <div>\n      <p>This is my super awesome page made with Gatsby!</p>\n\n      {/* use my fancy third-party component */}\n      <Button variant=\"contained\">Fancy button!</Button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Improving error message in gatsby-remark-images-contentful (JavaScript)\nDESCRIPTION: This commit improves the error message when the loader fails. This change makes it easier to debug issues related to image loading, providing clearer guidance to developers.  The improvement assists developers in troubleshooting Contentful image loading problems.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-images-contentful/CHANGELOG.md#_snippet_31\n\nLANGUAGE: JavaScript\nCODE:\n```\n**gatsby-remark-images-contentful:** make clear error when lo‚Ä¶ ([#21756](https://github.com/gatsbyjs/gatsby/issues/21756)) ([99e39a0](https://github.com/gatsbyjs/gatsby/commit/99e39a0))\n```\n\n----------------------------------------\n\nTITLE: Configuring pathPrefix in gatsby-config.js\nDESCRIPTION: This snippet demonstrates how to add a `pathPrefix` value to your `gatsby-config.js` file. This configuration tells Gatsby to add the specified prefix to all paths when building the site with the `--prefix-paths` flag. The prefix must start with a forward slash.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/previews-deploys-hosting/path-prefix.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  pathPrefix: `/blog`,\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring excludePattern for gatsby-plugin-catch-links\nDESCRIPTION: This snippet demonstrates how to use the `excludePattern` option to prevent specific links from being handled by the plugin. The provided regular expression defines which paths will be excluded.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-catch-links/README.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  resolve: `gatsby-plugin-catch-links`,\n  options: {\n    excludePattern: /(excluded-link|external)/,\n  },\n},\n```\n\n----------------------------------------\n\nTITLE: Create basic Event component (JSX)\nDESCRIPTION: This snippet creates a basic `Event` component that displays the event data as JSON. It accepts props and renders the JSON stringified representation of those props within a pre tag for debugging purposes.  Dependencies: React.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/building-a-theme.md#_snippet_33\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\"\n\nconst Event = props => <pre>{JSON.stringify(props, null, 2)}</pre>\n\nexport default Event\n```\n\n----------------------------------------\n\nTITLE: Running Gatsby Development Server\nDESCRIPTION: This command starts the Gatsby development server, enabling hot-reloading and other development features. It allows developers to preview changes in real-time during development.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/using-gatsby-head/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm run develop\n```\n\n----------------------------------------\n\nTITLE: Import Cache Keys and Get Cache API - TypeScript\nDESCRIPTION: This snippet imports the `CACHE_KEYS` constant and extracts the `cache` API from the `gatsbyApi` object within the `sourceNodes` function. Accessing the cache API allows the plugin to store and retrieve data for subsequent builds.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/creating-a-source-plugin/part-4/index.mdx#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n// Rest of imports\n// highlight-next-line\nimport { NODE_TYPES, ERROR_CODES, CACHE_KEYS } from \"./constants\"\n\nexport const sourceNodes: GatsbyNode[`sourceNodes`] = async (gatsbyApi) => {\n  // highlight-next-line\n  const { reporter, cache } = gatsbyApi\n\n  // Rest of sourceNodes\n}\n\n// Rest of file\n```\n\n----------------------------------------\n\nTITLE: Updating PostCSS Plugin for Gatsby\nDESCRIPTION: This update incorporates minor and patch updates for the gatsby-plugin-postcss package.  It includes bug fixes and performance improvements that address issues reported in previous versions.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-postcss/CHANGELOG.md#_snippet_13\n\n\n\n----------------------------------------\n\nTITLE: Example API Data Structure\nDESCRIPTION: This shell output shows the example structure of data that is received after querying the GraphQL API. It includes arrays of posts and authors, with their respective fields like id, slug, title, image, author, and name. This is meant to be an example of data you'd expect after successfully connecting to the example API and querying the relevant data.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/creating-a-source-plugin/part-2/index.mdx#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n{\n  posts: [\n    {\n      id: '1',\n      slug: 'post-1',\n      title: 'The first post',\n      image: {\n        url: 'https://images.unsplash.com/photo-1615751072497-5f5169febe17?fm=jpg',\n        alt: 'brown and white long coated dog',\n        width: 3024,\n        height: 4032\n      },\n      author: 'Jay Gatsby'\n    },\n    {\n      id: '2',\n      slug: 'post-2',\n      title: 'The second post',\n      image: {\n        url: 'https://images.unsplash.com/photo-1591160690555-5debfba289f0?fm=jpg',\n        alt: 'golden retriever puppy on focus',\n        width: 5394,\n        height: 6743\n      },\n      author: 'Jay Gatsby'\n    },\n    {\n      id: '3',\n      slug: 'post-3',\n      title: 'The third post',\n      image: {\n        url: 'https://images.unsplash.com/photo-1547525623-c7d42c20284c?fm=jpg',\n        alt: 'long fur white dog on grass',\n        width: 4000,\n        height: 6000\n      },\n      author: 'Daisy Buchanan'\n    }\n  ],\n  authors: [\n    { id: '1', name: 'Jay Gatsby' },\n    { id: '2', name: 'Daisy Buchanan' }\n  ]\n}\nwarn The plugin plugin has generated no Gatsby nodes. Do you need it? This could also suggest the plugin is misconfigured.\n```\n\n----------------------------------------\n\nTITLE: Example response from GraphQL query for frontmatter data\nDESCRIPTION: This is an example of the JSON data returned by the GraphQL query shown above.  It showcases the structure of the frontmatter data and the fields that are available for each node.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-javascript-frontmatter/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"data\": {\n    \"allJavascriptFrontmatter\": {\n      \"edges\": [\n        {\n          \"node\": {\n            \"frontmatter\": {\n              \"error\": false,\n              \"path\": \"choropleth-on-d3v4\",\n              \"title\": \"Choropleth on d3v4\",\n              \"written\": \"2017-05-04\",\n              \"category\": \"data science\",\n              \"description\": \"Things about the choropleth.\",\n              \"updated\": null\n            }\n          }\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Navigating to the project directory and starting the development server\nDESCRIPTION: These commands navigate into the newly created project directory ('my-default-starter') and then starts the Gatsby development server. This server automatically rebuilds and refreshes the site when changes are made to the source code, enabling rapid development.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/using-shopify/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ncd my-default-starter/\ngatsby develop\n```\n\n----------------------------------------\n\nTITLE: Default File Extensions Categories\nDESCRIPTION: This code snippet defines a constant object `DEFAULT_FILE_EXTENSIONS_CATEGORIES` that categorizes different file extensions into categories like code, json, stylesheet, image, and font. This categorization is used to check extension compatibility during shadowing.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/conceptual/how-shadowing-works.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst DEFAULT_FILE_EXTENSIONS_CATEGORIES = {\n  // Code formats\n  js: `code`,\n  jsx: `code`,\n  ts: `code`,\n  tsx: `code`,\n  cjs: `code`,\n  mjs: `code`,\n  coffee: `code`,\n\n  // JSON-like data formats\n  json: `json`,\n  yaml: `json`,\n  yml: `json`,\n\n  // Stylesheets formats\n  css: `stylesheet`,\n  sass: `stylesheet`,\n  scss: `stylesheet`,\n  less: `stylesheet`,\n  \"css.js\": `stylesheet`,\n\n  // Images formats\n  jpeg: `image`,\n  jpg: `image`,\n  jfif: `image`,\n  png: `image`,\n  tiff: `image`,\n  webp: `image`,\n  avif: `image`,\n  gif: `image`,\n\n  // Fonts\n  woff: `font`,\n  woff2: `font`,\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query for XML Data\nDESCRIPTION: This GraphQL query demonstrates how to retrieve data from the parsed XML nodes using `allBooksXml`. It fetches the `name` and `xmlChildren` fields for each book.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-xml/README.md#_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  allBooksXml {\n    edges {\n      node {\n        name\n        xmlChildren {\n          name\n          content\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Default Gatsby project structure\nDESCRIPTION: This code snippet showcases the file structure of a default Gatsby project. It highlights the key differences compared to Create React App projects, emphasizing additional configuration files (gatsby-browser.js, gatsby-config.js, gatsby-node.js, gatsby-ssr.js) and the `/pages` directory.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/porting-from-create-react-app-to-gatsby.md#_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n  my-gatsby-site\n  ‚îú‚îÄ‚îÄ .git\n  ‚îú‚îÄ‚îÄ .gitignore\n+ ‚îú‚îÄ‚îÄ .prettierrc\n+ ‚îú‚îÄ‚îÄ LICENSE\n  ‚îú‚îÄ‚îÄ README.md\n+ ‚îú‚îÄ‚îÄ gatsby-browser.js\n+ ‚îú‚îÄ‚îÄ gatsby-config.js\n+ ‚îú‚îÄ‚îÄ gatsby-node.js\n+ ‚îú‚îÄ‚îÄ gatsby-ssr.js\n  ‚îú‚îÄ‚îÄ node_modules\n  ‚îú‚îÄ‚îÄ package.json\n  ‚îú‚îÄ‚îÄ src\n+ ‚îÇ   ‚îú‚îÄ‚îÄ components\n+ ‚îÇ   ‚îú‚îÄ‚îÄ images\n+ ‚îÇ   ‚îî‚îÄ‚îÄ pages\n  ‚îî‚îÄ‚îÄ yarn.lock\n```\n\n----------------------------------------\n\nTITLE: HTML Form Example\nDESCRIPTION: This is an example of a basic HTML form that is vulnerable to CSRF attacks.  A malicious website could copy this form and submit it on behalf of a logged-in user.  The form submits to the `http://mywebsite.com/blog/addcomment` endpoint using the POST method, taking a comment as input.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/conceptual/security-in-gatsby.md#_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<form action=\"http://mywebsite.com/blog/addcomment\" method=\"POST\">\n  <input type=\"text\" name=\"comment\" />\n  <input type=\"submit\" />\n</form>\n```\n\n----------------------------------------\n\nTITLE: Replacing current path in Gatsby Link history\nDESCRIPTION: This commit fixes an issue where gatsby-link was pushing a new entry into the history instead of replacing the current one. The fix ensures that the current path is replaced in the history, resolving issue #22124.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-link/CHANGELOG.md#_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Opening Gatsby Node.js REPL\nDESCRIPTION: This command opens a Node.js REPL (interactive shell) with the context of your Gatsby environment. This allows you to inspect and interact with your Gatsby site's data and configuration in real-time.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-cli/README.md#_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\ngatsby repl\n```\n\n----------------------------------------\n\nTITLE: Running Gatsby Development Server\nDESCRIPTION: This command starts the Gatsby development server.  It allows you to preview the site and access the GraphiQL interface.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/wordpress-image-tutorial.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\nnpm run develop\n```\n\n----------------------------------------\n\nTITLE: Using the <Slice> Placeholder (JSX)\nDESCRIPTION: Shows how to use the `<Slice>` placeholder component in JSX.  The `alias` prop is required and specifies which Slice component to render in its place. Additional props passed to the `<Slice>` component are passed to the underlying Slice component.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/built-in-components/gatsby-slice.md#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Slice alias=\"unique-name\" />\n```\n\n----------------------------------------\n\nTITLE: Concise Gatsby Head using Arrow Function (JSX)\nDESCRIPTION: This snippet shows a more concise way to define the `Head` function using arrow function syntax.  It achieves the same result as the previous example, setting the page title to \"Hello World\".\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/built-in-components/gatsby-head.md#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\nexport const Head = () => <title>Hello World</title>\n```\n\n----------------------------------------\n\nTITLE: Running a Gatsby build with memory constraints\nDESCRIPTION: This command runs a test build within a Docker container with specified memory allocation, number of nodes, and node size. It's used to simulate different memory scenarios and identify potential bottlenecks during the build process. The `--memory` flag sets the memory limit, `--num-nodes` specifies the number of nodes to create, and `--node-size` determines the size of each node's string property. The `--command` flag specifies the Gatsby command to run (e.g., build, develop).\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/benchmarks/docker-runner/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn test --memory 8g --num-nodes 500 --node-size 1m --command build\n```\n\n----------------------------------------\n\nTITLE: Gatsby Index Page Component with ButterCMS Data\nDESCRIPTION: This React component displays the home page content fetched from ButterCMS using GraphQL. It uses the `graphql` function to query data for the homepage and customer case studies.  It iterates through the customer logos and case studies to render them using Gatsby's Link component.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/sourcing-from-buttercms.md#_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\"\nimport { graphql, Link } from \"gatsby\"\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\n\nconst IndexPage = ({ data }) => {\n  console.log(data)\n  const home = data.home.edges[0].node\n  const case_studies = data.case_studies.edges\n\n  return (\n    <Layout>\n      <SEO\n        title={home.seo_title}\n        keywords={[`gatsby`, `application`, `react`]}\n      />\n      <div\n        style={{\n          height: `50%`,\n          display: `flex`,\n          padding: `1rem`,\n          alignItems: `center`,\n          justifyContent: `center`,\n          flexDirection: `column`,\n          background: `linear-gradient(-45deg, rgb(29, 64, 86) 0%, rgb(60, 24, 78) 100%)`,\n        }}\n      >\n        <h1\n          style={{\n            textAlign: `center`,\n            color: `white`,\n            fontSize: `2.5rem`,\n            fontWeight: `100`,\n            maxWidth: `960px`,\n          }}\n        >\n          {home.headline}\n        </h1>\n        <button\n          style={{\n            padding: `0.75rem`,\n            backgroundColor: `white`,\n            border: `none`,\n            fontSize: `1.5rem`,\n            borderRadius: `10px`,\n          }}\n        >\n          {home.call_to_action}\n        </button>\n      </div>\n\n      <h1 style={{ fontWeight: `100`, textAlign: `center` }}>Our Customers</h1>\n      <div\n        style={{\n          display: `flex`,\n          flexDirection: `column`,\n          alignItems: `center`,\n          justifyContent: `center`,\n        }}\n      >\n        {home.customer_logos.map(({ logo_image }) => (\n          <img\n            key={logo_image}\n            style={{ width: `200px`, borderRadius: `10px` }}\n            src={logo_image}\n          />\n        ))}\n\n        <h1 style={{ fontWeight: `100` }}>Case Studies</h1>\n        {case_studies.map(({ node: { id, slug, headline } }) => (\n          <div key={id}>\n            <Link to={`case-study/${slug}`}>{headline}</Link>\n          </div>\n        ))}\n      </div>\n    </Layout>\n  )\n}\n\nexport const query = graphql`\n  {\n    home: allButterPage(filter: { slug: { eq: \"homepage\" } }) {\n      edges {\n        node {\n          slug\n          headline\n          seo_title\n          customer_logos {\n            logo_image\n          }\n          hero_image\n          call_to_action\n        }\n      }\n    }\n    case_studies: allButterPage(\n      filter: { page_type: { eq: \"customer_case_study\" } }\n    ) {\n      edges {\n        node {\n          id\n          slug\n          facebook_open_graph_title\n          seo_title\n          headline\n          testimony\n          customer_logo\n        }\n      }\n    }\n  }\n`\n\nexport default IndexPage\n```\n\n----------------------------------------\n\nTITLE: Filter with GraphQL - Not In Operator\nDESCRIPTION: This query filters MarkdownRemark nodes to find titles that are neither \"Children's Anthology of Monsters\" nor \"Hogwarts: A History\" using the `nin` operator. It excludes values that are present in the specified array.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/graphql-reference.md#_snippet_11\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  # nin: I want all the titles and dates from `frontmatter`\n  # where the title is neither\n  # - \"Children's Anthology of Monsters\", nor\n  # - \"Hogwarts: A History\".\n  example_nin: allMarkdownRemark(\n    filter: {\n      frontmatter: {\n        title: {\n          nin: [\"Children's Anthology of Monsters\", \"Hogwarts: A History\"]\n        }\n      }\n    }\n  ) {\n    edges {\n      node {\n        frontmatter {\n          title\n          date\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Gatsby to Use the Remark Plugin\nDESCRIPTION: This JavaScript code shows how to configure Gatsby to use the local remark plugin.  The `gatsby-source-filesystem` plugin is used to source markdown files from a specific directory. The `gatsby-transformer-remark` plugin is configured with the local plugin `gatsby-remark-purple-headers`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/remark-plugin-tutorial.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  plugins: [\n    {\n      resolve: \"gatsby-source-filesystem\",\n      options: {\n        name: `data`,\n        path: `${__dirname}/src/data/`,\n      },\n    },\n    {\n      resolve: `gatsby-transformer-remark`,\n      options: {\n        plugins: [`gatsby-remark-purple-headers`],\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping Field Example in gatsby-config.js\nDESCRIPTION: This JavaScript code snippet demonstrates how to configure a mapping in `gatsby-config.js` to map a field from one node type to a field in another node type. It enables linking data across different node types during GraphQL schema inference.  The mapping specifies that the `MarkdownRemark.frontmatter.author` field should be linked to the `AuthorYaml.name` field.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/schema-inference.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmapping: {\n  \"MarkdownRemark.frontmatter.author\": `AuthorYaml.name`,\n},\n```\n\n----------------------------------------\n\nTITLE: Customizing Styled-JSX Options in Gatsby Config (JavaScript)\nDESCRIPTION: This snippet illustrates how to customize styled-jsx configuration options such as `optimizeForSpeed`, `sourceMaps`, and `vendorPrefixes` within the gatsby-plugin-styled-jsx plugin. These options control various aspects of styled-jsx's behavior. No specific dependencies are needed beyond the plugin.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-styled-jsx/README.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nplugins: [\n  {\n    resolve: `gatsby-plugin-styled-jsx`,\n    options: {\n      optimizeForSpeed: true,\n      sourceMaps: false,\n      vendorPrefixes: true,\n    },\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Building a Gatsby Site for Production\nDESCRIPTION: This command compiles your Gatsby site for production deployment. It optimizes the site for performance and prepares it for serving in a production environment. This command should be run from the root of your project.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-cli/README.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\ngatsby build\n```\n\n----------------------------------------\n\nTITLE: Configure Gatsby Source WordPress Plugin (JavaScript)\nDESCRIPTION: This code snippet configures the `gatsby-source-wordpress` plugin in `gatsby-config.js`. It specifies the URL of the WordPress site's GraphQL API, which allows Gatsby to fetch data from WordPress.  Dependencies: `gatsby-config.js` file.  Input: URL of WordPress GraphQL API. Output: Gatsby site configured to fetch data from WordPress.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-wordpress/docs/tutorials/building-a-new-site-wordpress-and-gatsby.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  siteMetadata: {\n    title: `Gatsby WordPress Tutorial`,\n    description: `An example to learn how to source data from WordPress.`,\n    author: `@gatsbyjs`,\n  },\n  plugins: [\n    /*\n     * Gatsby's data processing layer begins with ‚Äúsource‚Äù\n     * plugins. Here the site sources its data from WordPress.\n     */\n    // highlight-start\n    {\n      resolve: `gatsby-source-wordpress`,\n      options: {\n        /*\n         * The full URL of the WordPress site's GraphQL API.\n         * Example : 'https://www.example-site.com/graphql'\n         */\n        url: `https://wpgatsbydemo.wpengine.com/graphql`,\n      },\n    },\n    // highlight-end\n    /**\n     * The following plugins aren't required for gatsby-source-wordpress,\n     * but we need them so the default starter we installed above will keep working.\n     **/\n    `gatsby-plugin-react-helmet`,\n    {\n      resolve: `gatsby-source-filesystem`,\n      options: {\n        name: `images`,\n        path: `${__dirname}/src/images`,\n      },\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-sharp`,\n    {\n      resolve: `gatsby-plugin-manifest`,\n      options: {\n        name: `gatsby-starter-default`,\n        short_name: `starter`,\n        start_url: `/`,\n        background_color: `#663399`,\n        theme_color: `#663399`,\n        display: `minimal-ui`,\n        icon: `src/images/gatsby-icon.png`, // This path is relative to the root of the site.\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Gatsby Node Create Pages Function\nDESCRIPTION: This snippet shows the basic structure of a createPages function within gatsby-node.js. It queries all MDX nodes and creates a page for each one, using a specified blog post template.  It is a prerequisite for more advanced DSG configurations.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/rendering-options/using-deferred-static-generation.md#_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nconst blogPostTemplate = require.resolve(`./src/templates/blog-post.js`)\n\nexports.createPages = async ({ graphql, actions, reporter }) => {\n  const { createPage } = actions\n\n  const result = await graphql(`\n    query {\n      allMdx(sort: { frontmatter: { date: DESC }}) {\n        nodes {\n          slug\n        }\n      }\n    }\n  `)\n\n  if (result.errors) {\n    reporter.panicOnBuild(`There was an error loading posts`, result.errors)\n    return\n  }\n\n  const posts = result.data.allMdx.nodes\n\n  posts.forEach(post => {\n    createPage({\n      path: post.slug,\n      component: blogPostTemplate,\n      context: {\n        slug: post.slug,\n      },\n    })\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Updating xstate dependency in gatsby-source-filesystem\nDESCRIPTION: This commit updates the `xstate` dependency to version ^4.26.1 to address issue #34134 in the gatsby-source-filesystem package. This update potentially provides bug fixes or performance improvements related to state management within the plugin.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-filesystem/CHANGELOG.md#_snippet_13\n\n\n\n----------------------------------------\n\nTITLE: Installing gatsby-source-cloudinary\nDESCRIPTION: This command installs the gatsby-source-cloudinary plugin, allowing you to source images from Cloudinary.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/images-and-media/using-cloudinary-image-service.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n  npm install gatsby-source-cloudinary\n```\n\n----------------------------------------\n\nTITLE: Adding Additional Data to Sass\nDESCRIPTION: This snippet shows how to prepend Sass code before the actual entry file using the `additionalData` option. This can be useful for injecting environmental variables or global Sass imports. Requires knowledge of webpack's sass-loader documentation.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-sass/README.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nplugins: [\n  {\n    resolve: `gatsby-plugin-sass`,\n    options: {\n      additionalData: \"$env: \" + process.env.NODE_ENV + \";\",\n    },\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring css-loader options in gatsby-config.js\nDESCRIPTION: This snippet shows how to override the default options passed into `css-loader` within the `gatsby-plugin-postcss` configuration. This allows for customization of CSS loading behavior. It requires understanding of `css-loader` options and their effects on CSS processing.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-postcss/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nplugins: [\n  {\n    resolve: `gatsby-plugin-postcss`,\n    options: {\n      cssLoaderOptions: {\n        camelCase: false,\n      },\n    },\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Gatsby Index Page Component with StaticQuery\nDESCRIPTION: This JSX code defines a Gatsby index page component using `StaticQuery` to fetch and display vehicle data from the Gentics Mesh API. It imports React and the `StaticQuery` component from Gatsby. The GraphQL query retrieves vehicle data (name, weight) and renders it in a list.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/sourcing-from-gentics-mesh.md#_snippet_6\n\nLANGUAGE: JSX\nCODE:\n```\nimport React from \"react\"\nimport { StaticQuery } from \"gatsby\"\n\nconst IndexPage = () => (\n  <StaticQuery\n    query={graphql`\n      query {\n        mesh {\n          nodes(filter: { schema: { is: vehicle } }) {\n            elements {\n              uuid\n              ... on MESH_vehicle {\n                fields {\n                  name\n                  weight\n                }\n              }\n            }\n          }\n        }\n      }\n    `}\n    render={data => (\n      <div>\n        <h1>Vehicles</h1>\n        <ul>\n          {data.mesh.nodes.elements.map(vehicle => {\n            const { name, weight } = vehicle.fields\n            return (\n              <li>\n                <strong>{name}: </strong>\n                {weight} kg\n              </li>\n            )\n          })}\n        </ul>\n      </div>\n    )}\n  />\n)\n\nexport default IndexPage\n```\n\n----------------------------------------\n\nTITLE: Ignoring files using ignore options\nDESCRIPTION: This snippet demonstrates the use of the `ignore` option with detailed settings for ignoring files.  It includes `patterns` to define the files to ignore and `options` to configure the matching behavior, such as case-insensitive matching using `nocase: true`. Micromatch is used for pattern matching.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-page-creator/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-page-creator`,\n      options: {\n        path: `${__dirname}/src/examples/pages`,\n        ignore: {\n          // Example: Ignore `file.example.js`, `dir/s/file.example.tsx`\n          patterns: [`**/*.example.(js|ts)?(x)`],\n          // Example: Match both `file.example.js` and `file.EXAMPLE.js`\n          options: { nocase: true },\n          // See all available micromatch options\n          // https://www.npmjs.com/package/micromatch#optionsnocase\n        },\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Error Messages with Joi in Gatsby\nDESCRIPTION: Demonstrates how to add custom error messages to Joi schema validation in Gatsby plugins using the `.messages()` method. This allows for more informative and user-friendly error messages when validation fails for specific fields.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/plugins-and-themes/configuring-usage-with-plugin-options.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexports.pluginOptionsSchema = ({ Joi }) => {\n  return Joi.object({\n    optionA: Joi.boolean()\n      .required()\n      .description(`Enables optionA.`)\n      // highlight-start\n      .messages({\n        // Override the error message if the .required() call fails\n        \"any.required\": `\"optionA\" needs to be specified to true or false. Get the correct value from your dashboard settings.`,`,\n      }),\n    // highlight-end\n    message: Joi.string()\n      .default(`default message`)\n      .description(`The message logged to the console.`),\n    optionB: Joi.boolean().description(`Enables optionB.`),\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Gatsby Plugin Configuration with Preset Nullification\nDESCRIPTION: This code snippet shows how to configure the `gatsby-source-wordpress` plugin in `gatsby-config.js`. By setting `presets: null`, the default preview optimization preset is disabled. This allows developers to fully customize the plugin's behavior during preview builds.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-wordpress/docs/features/preview.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n{\n    resolve: `gatsby-source-wordpress`,\n    options: {\n        url: `https://your-site.com/graphql`,\n        presets: null\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting theme as default\nDESCRIPTION: This code snippet demonstrates how to export the `theme` object from `gatsby-design-tokens/dist/theme` as the default export from `src/gatsby-plugin-theme-ui/index.js`, when used with `gatsby-plugin-theme-ui`. This allows the theme to be easily used in a Gatsby project with Theme UI.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-design-tokens/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { theme } from \"gatsby-design-tokens/dist/theme\"\n\n// when used with `gatsby-plugin-theme-ui`, export the theme\n// as default from `src/gatsby-plugin-theme-ui/index.js`\nexport { theme as default } from \"gatsby-design-tokens/dist/theme\"\n\n// in case you need theme tokens outside of the `emotion` context\nimport {\n  breakpoints,\n  colors,\n  fonts,\n  fontSizes,\n  fontWeights,\n  letterSpacings,\n  lineHeights,\n  mediaQueries,\n  radii,\n  shadows\n  space,\n  transition,\n} from \"gatsby-design-tokens/dist/theme\n```\n\n----------------------------------------\n\nTITLE: Installing a Gatsby site with a starter URL\nDESCRIPTION: This command uses the Gatsby CLI to create a new Gatsby site from a specified starter URL. It takes two arguments: the name of the new site and the URL of the starter repository.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/creating-a-starter.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngatsby new <site-name> <starter-url>\n```\n\n----------------------------------------\n\nTITLE: Aliasing MDX Node Fields in Gatsby\nDESCRIPTION: This snippet demonstrates how to alias fields to keep the original shape of the MDX node by using `createNodeField` and `createTypes` APIs in `gatsby-node.mjs`. This is useful to maintain backwards compatibility with existing queries and components.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-mdx/README.md#_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nimport readingTime from \"reading-time\"\n\nexport const onCreateNode = ({ node, actions }) => {\n  const { createNodeField } = actions\n  if (node.internal.type === `Mdx`) {\n    createNodeField({\n      node,\n      name: `timeToRead`,\n      value: readingTime(node.body)\n    })\n  }\n}\n\nexport const createSchemaCustomization = ({ actions }) => {\n  const { createTypes } = actions\n\n  createTypes(`#graphql\n    type Mdx implements Node {\n      # You can also use other keys from fields.timeToRead if you don't want \"minutes\"\n      timeToRead: Float @proxy(from: \"fields.timeToRead.minutes\")\n      wordCount: Int @proxy(from: \"fields.timeToRead.words\")\n    }\n  `)\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Queries with Directives in GraphQL\nDESCRIPTION: This GraphQL query shows how to conditionally include or skip parts of a query using the `@include` and `@skip` directives, controlled by variables. It conditionally includes the `date` field based on the `$withDate` variable.  It also includes different fragments and entire queries based on `$preview` variable.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/graphql-reference.md#_snippet_29\n\nLANGUAGE: graphql\nCODE:\n```\nquery GetBlogPosts($withDate: Boolean = false) {\n  allMarkdownRemark(limit: 3, skip: 1) {\n    edges {\n      node {\n        frontmatter {\n          title\n          date @include(if: $withDate)\n        }\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: graphql\nCODE:\n```\nquery GetBlogPosts($preview: Boolean = true) {\n  allMarkdownRemark(limit: 3, skip: 1) {\n    edges {\n      node {\n        ...BlogPost @skip(if: $preview)\n        ...BlogPostPreview @include(if: $preview)\n      }\n    }\n  }\n  allFile(limit: 2) @skip(if: $preview) {\n    edges {\n      node {\n        relativePath\n      }\n    }\n  }\n}\n\nfragment BlogPost on MarkdownRemark {\n  html\n  frontmatter {\n    title\n    date\n  }\n}\n\nfragment BlogPostPreview on MarkdownRemark {\n  excerpt\n  frontmatter {\n    title\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: React Context Provider in Gatsby (SSR)\nDESCRIPTION: This snippet demonstrates how to wrap the root element of a Gatsby site in a React Context Provider within `gatsby-ssr.js`, ensuring the context is available during server-side rendering. This is used for global state management.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/porting-from-create-react-app-to-gatsby.md#_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\"\n\nconst defaultTheme = \"light\"\nexport const ThemeContext = React.createContext(defaultTheme)\n\nexport const wrapRootElement = ({ element }) => {\n  return (\n    <ThemeContext.Provider value={defaultTheme}>\n      {element}\n    </ThemeContext.Provider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Starting the Gatsby Development Server\nDESCRIPTION: This shell command starts the Gatsby development server, which allows you to preview the site locally.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/using-multiple-themes-together.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ngatsby develop\n```\n\n----------------------------------------\n\nTITLE: Configure checkSupportedExtensions option\nDESCRIPTION: This code shows how to disable the warning behavior for unsupported image extensions in gatsby-transformer-sharp. By setting `checkSupportedExtensions` to `false`, you can prevent warnings when using image formats that Sharp doesn't directly support, like .gif, and rely on `publicURL` instead.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-sharp/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// In your gatsby-config.js\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-sharp`,\n    {\n      resolve: `gatsby-transformer-sharp`,\n      options: {\n        // The option defaults to true\n        checkSupportedExtensions: false,\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: sync-requires.js exports in JavaScript\nDESCRIPTION: This code shows how `sync-requires.js` exports components as an object, where keys are componentChunkNames and values are require expressions pointing to the component implementation. It is used during static-entry.js for mapping componentChunkNames to their implementations.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/write-pages.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexports.components = {\n  \"component---src--blog-2-js\": require(\"/home/site/src/blog/2.js\"),\n  // more components\n}\n```\n\n----------------------------------------\n\nTITLE: StaticImage Invalid Styled Component Usage (JS)\nDESCRIPTION: This example shows incorrect usage of StaticImage with styled components. The parser cannot identify `StaticImage` components when they're passed to a styled function. This will prevent the Gatsby Image plugin from processing the image correctly.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/built-in-components/gatsby-plugin-image.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// ‚ö†Ô∏è Doesn't work\n\nconst AwesomeImage = styled(StaticImage)`\n  border: 4px green dashed;\n`\n\nexport function Dino() {\n  // Parser doesn't know that this is a StaticImage\n  return <AwesomeImage src=\"trex.png\" />\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Syntax for Creating Custom Blocks (Markdown)\nDESCRIPTION: Illustrates the Markdown syntax used to create custom blocks with and without titles. The syntax involves using double square brackets to define the block type and optionally including a title after a pipe (|) symbol.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-custom-blocks/README.md#_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n[[danger]]\n| content\n\n[[info | This is a title!]]\n| content\n```\n\n----------------------------------------\n\nTITLE: Re-exporting Head Function in Gatsby\nDESCRIPTION: This code snippet shows how to re-export a `Head` function from another location. This is useful when multiple pages need to have the same meta tags. The component imports React, exports a basic page, and then re-exports the Head function from a different file.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/v4.19/index.md#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from \"react\"\n\nconst Page = () => <div>Hello World</div>\nexport default Page\n\n// highlight-next-line\nexport { Head } from \"../another/location\"\n```\n\n----------------------------------------\n\nTITLE: Disabling Legacy Icons Configuration\nDESCRIPTION: This configuration disables the generation of legacy apple-touch-icon links in the `<head>` section. It is done by setting the `legacy` option to `false`. This is useful if you only want to rely on the web app manifest.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-manifest/README.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// in gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-manifest`,\n      options: {\n        name: `GatsbyJS`,\n        short_name: `GatsbyJS`,\n        start_url: `/`,\n        background_color: `#f7f0eb`,\n        theme_color: `#a2466c`,\n        display: `standalone`,\n        icon: `src/images/icon.png`,\n        legacy: false, // this will not add apple-touch-icon links to <head>\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: CSS Styles for .primary class\nDESCRIPTION: This CSS snippet defines styles for a `.primary` class, setting the background color to orangered. This corresponds to the usage in the previous JSX example.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/styling/global-css.md#_snippet_10\n\nLANGUAGE: CSS\nCODE:\n```\n.primary {\n  background: orangered;\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Image with Alt Text\nDESCRIPTION: Demonstrates the syntax for including images in Markdown with alternative text for accessibility. The alt text is enclosed in square brackets, followed by the image path in parentheses.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/markdown-syntax.md#_snippet_4\n\nLANGUAGE: Markdown\nCODE:\n```\n![alt text](path-to-image)\n```\n\n----------------------------------------\n\nTITLE: Setting Global State in onPluginInit (New Way)\nDESCRIPTION: This code demonstrates the new method of initializing global state using `onPluginInit` in Gatsby 4. It checks for support of `onPluginInit` using `gatsby-plugin-utils` and uses a fallback to `onPreBootstrap` for Gatsby 3 compatibility.  It also demonstrates checking for stable vs unstable versions of `onPluginInit`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-source-plugin-from-v3-to-v4.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nlet coreSupportsOnPluginInit: \"unstable\" | \"stable\" | undefined\n\ntry {\n  const { isGatsbyNodeLifecycleSupported } = require(`gatsby-plugin-utils`)\n  if (isGatsbyNodeLifecycleSupported(`onPluginInit`)) {\n    coreSupportsOnPluginInit = \"stable\"\n  } else if (isGatsbyNodeLifecycleSupported(`unstable_onPluginInit`)) {\n    coreSupportsOnPluginInit = \"unstable\"\n  }\n} catch (e) {\n  console.error(`Could not check if Gatsby supports onPluginInit lifecycle`)\n}\n\nlet globalPluginOptions = {}\n\nconst initializeGlobalState = (_, pluginOptions) => {\n  globalPluginOptions = pluginOptions\n}\n\nif (coreSupportsOnPluginInit === \"stable\") {\n  exports.onPluginInit = initializeGlobalState // highlight-line\n} else if (coreSupportsOnPluginInit === \"unstable\") {\n  exports.unstable_onPluginInit = initializeGlobalState // highlight-line\n} else {\n  exports.onPreBootstrap = initializeGlobalState // highlight-line\n}\n\nfunction aDeepNestedFunction(arg) {\n  if (globalPluginOptions.convert) {\n    return arg.toUpperCase()\n  } else {\n    return arg\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Start the Gatsby development server\nDESCRIPTION: This command starts the Gatsby development server, which allows you to preview your site locally during development.  It includes hot reloading and other development features.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/cheat-sheet.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngatsby develop\n```\n\n----------------------------------------\n\nTITLE: Markdown Example\nDESCRIPTION: A simple markdown example to demonstrate how Remark translates it into an Abstract Syntax Tree (AST). The example includes a top-level heading and a paragraph containing a link.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/remark-plugin-tutorial.md#_snippet_4\n\nLANGUAGE: Markdown\nCODE:\n```\n# Hello World!\n\nThis is a [Real page](https://google.com)\n```\n\n----------------------------------------\n\nTITLE: Adding Image Plugins to gatsby-config.js\nDESCRIPTION: This JavaScript snippet adds `gatsby-transformer-sharp` and `gatsby-plugin-sharp` to the plugins array in `gatsby-config.js`. These plugins are essential for image processing, allowing Gatsby to optimize and transform images for different screen sizes and formats.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/wordpress-image-tutorial.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  siteMetadata: {\n    title: \"Gatsby WordPress Tutorial\",\n  },\n  plugins: [\n    // https://public-api.wordpress.com/wp/v2/sites/gatsbyjsexamplewordpress.wordpress.com/pages/\n    /*\n     * Gatsby's data processing layer begins with ‚Äúsource‚Äù\n     * plugins. Here the site sources its data from WordPress.\n     */\n    {\n      resolve: `gatsby-source-wordpress`,\n      options: {\n        /*\n         * The base URL of the WordPress site without the trailing slash and the protocol. This is required.\n         * Example : 'dev-gatbsyjswp.pantheonsite.io' or 'www.example-site.com'\n         */\n        baseUrl: `dev-gatbsyjswp.pantheonsite.io`,\n        // The protocol. This can be http or https.\n        protocol: `http`,\n        // Indicates whether the site is hosted on wordpress.com.\n        // If false, then the assumption is made that the site is self hosted.\n        // If true, then the plugin will source its content on wordpress.com using the JSON REST API V2.\n        // If your site is hosted on wordpress.org, then set this to false.\n        hostingWPCOM: false,\n        // If useACF is true, then the source plugin will try to import the WordPress ACF Plugin contents.\n        // This feature is untested for sites hosted on WordPress.com\n        useACF: true,\n      },\n    },\n    // highlight-start\n    \"gatsby-transformer-sharp\",\n    \"gatsby-plugin-sharp\",\n    // highlight-end\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Node Engine Version in Package.json\nDESCRIPTION: This snippet shows how to update the `engines` key in a `package.json` file to specify the minimum supported Node.js version for a Gatsby project. In this case, the minimum version is updated to Node.js 18.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v4-to-v5.md#_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"engines\": {\n    \"node\": \">=18.0.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure gatsby-transformer-json\nDESCRIPTION: Example configuration of the gatsby-transformer-json plugin within the gatsby-config.js file.  It also includes configuration for gatsby-source-filesystem to specify the path to the JSON files to be transformed.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-json/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  plugins: [\n    `gatsby-transformer-json`,\n    {\n      resolve: `gatsby-source-filesystem`,\n      options: {\n        path: `./src/data/`,\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Running Gatsby Development Server\nDESCRIPTION: These commands navigate into the project directory, install the necessary npm packages, and then start the Gatsby development server, allowing you to view and interact with the site locally.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/sourcing-from-flotiq.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ncd my-blog-starter/\nnpm install\ngatsby develop\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Query Field for Contributors with Swag in gatsby-node.js\nDESCRIPTION: This code snippet demonstrates how to add a custom root query field called `contributorsWithSwag` that returns contributors who have received their swag. It uses `context.nodeModel.findAll` with a filter to retrieve the relevant `ContributorJson` nodes.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/graphql-data-layer/schema-customization.md#_snippet_37\n\nLANGUAGE: js\nCODE:\n```\nexports.createResolvers = ({ createResolvers }) => {\n  const resolvers = {\n    Query: {\n      contributorsWithSwag: {\n        type: [\"ContributorJson\"],\n        resolve: async (source, args, context, info) => {\n          const { entries } = await context.nodeModel.findAll({\n            query: {\n              filter: {\n                receivedSwag: { eq: true },\n              },\n            },\n            type: \"ContributorJson\",\n          })\n\n          return entries\n        },\n      },\n    },\n  }\n  createResolvers(resolvers)\n}\n```\n\n----------------------------------------\n\nTITLE: AuthorJson Type Definition\nDESCRIPTION: This GraphQL snippet defines the `AuthorJson` type, which implements the `Node` interface.  It represents the structure of author data in Gatsby's GraphQL schema, including fields like name, firstName, email, and joinedAt.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/graphql-data-layer/schema-customization.md#_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\ntype AuthorJson implements Node {\n  id: ID!\n  parent: Node!\n  children: [Node!]!\n  internal: Internal!\n  name: String\n  firstName: String\n  email: String\n  joinedAt: Date\n}\n```\n\n----------------------------------------\n\nTITLE: Watching for Changes in Gatsby Packages\nDESCRIPTION: This command watches for changes to the source code of Gatsby packages and compiles them on-the-fly.  It allows developers to see the effect of their changes in real-time. The optional `--scope` flag limits the command to specific packages to reduce resource consumption.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/contributing/code-contributions.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nyarn run watch --scope={gatsby,gatsby-cli}\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn run watch --scope=gatsby\n```\n\n----------------------------------------\n\nTITLE: Build Gatsby Site (Shell)\nDESCRIPTION: Builds the Gatsby site using either `gatsby build` or `npm run build`. This command compiles the Markdown pages and generates the static site.  The site uses the number of pages specified in the `NUM_PAGES` environment variable, creating pages from the mock data generated during installation.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/benchmarks/md/README.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n$ gatsby build    # or npm run build\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query for Shopify Locations\nDESCRIPTION: This GraphQL query demonstrates how to fetch Shopify Locations.  Note that the `fulfillmentService.callbackUrl` has been removed temporarily due to a bug in the Shopify API.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-shopify/README.md#_snippet_13\n\nLANGUAGE: GraphQL\nCODE:\n```\nallShopifyLocation {\n  edges {\n    nodes {\n      fulfillmentService {\n        callbackUrl\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking build priority\nDESCRIPTION: Checks build priority based on environment variables and plugin options. Determines if a build is considered high priority for Shopify API usage.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-shopify/README.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst isGatsbyCloudPriorityBuild =\n  CI === `true` && GATSBY_CLOUD === `true` && GATSBY_IS_PR_BUILD !== `true`\n\nconst isNetlifyPriorityBuild =\n  CI === `true` && NETLIFY === `true` && CONTEXT === `production`\n\nreturn pluginOptions.prioritize !== undefined\n  ? pluginOptions.prioritize\n  : isGatsbyCloudPriorityBuild || isNetlifyPriorityBuild\n```\n\n----------------------------------------\n\nTITLE: Status Code Redirect in gatsby-node.js\nDESCRIPTION: This snippet demonstrates how to return a specific status code based on country.  In this case, a 404 status is returned for all users from the United States. It requires Gatsby's `createPages` API and the `createRedirect` action.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/cloud/working-with-redirects-and-rewrites.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ncreateRedirect({\n  fromPath: `/*`,\n  toPath: `/`,\n  statusCode: 404,\n  conditions: {\n    country: `us`\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Storybook Story for a Gatsby Component\nDESCRIPTION: This code creates a Storybook story for a Gatsby component named `Header`. It imports the component, defines a default export with the component and a title, and creates a template for rendering the component with arguments. It showcases a simple story using Storybook's args feature.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/testing/visual-testing-with-storybook.md#_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\"\n\nimport Header from \"./header\"\n\nexport default {\n  component: Header,\n  title: \"Components/Header\",\n}\n\nconst Template = args => <Header {...args} />\n\nexport const Default = Template.bind({})\nDefault.args = {\n  siteTitle: \"Something\",\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Gatsby Site with TypeScript Starter (Shell)\nDESCRIPTION: Uses the Gatsby CLI to initialize a new Gatsby site with the minimal TypeScript starter. The `npm init gatsby -- -ts` command sets up the project with TypeScript support.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/starters/gatsby-starter-minimal-ts/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm init gatsby -- -ts\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response with gatsbyImageData\nDESCRIPTION: This JSON object illustrates the structure of the GraphQL response including the `gatsbyImageData` object.  It displays the data returned for the hero image, including layout, background color, image sources, and dimensions.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-7/index.mdx#_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"mdx\": {\n      \"frontmatter\": {\n        // ...\n        // highlight-start\n        \"hero_image\": {\n          \"childImageSharp\": [\n            {\n              \"gatsbyImageData\": {\n                \"layout\": \"constrained\",\n                \"backgroundColor\": \"#282828\",\n                \"images\": {\n                  \"fallback\": {\n                    \"src\": \"/static/402ec135e08c3b799c16c08a82ae2dd8/68193/christopher-ayme-ocZ-_Y7-Ptg-unsplash.jpg\",\n                    \"srcSet\": \"/static/402ec135e08c3b799c16c08a82ae2dd8/86d57/christopher-ayme-ocZ-_Y7-Ptg-unsplash.jpg 919w,\\n/static/402ec135e08c3b799c16c08a82ae2dd8/075d8/christopher-ayme-ocZ-_Y7-Ptg-unsplash.jpg 1839w,\\n/static/402ec135e08c3b799c16c08a82ae2dd8/68193/christopher-ayme-ocZ-_Y7-Ptg-unsplash.jpg 3677w\",\n                    \"sizes\": \"(min-width: 3677px) 3677px, 100vw\"\n                  },\n                  \"sources\": [\n                    {\n                      \"srcSet\": \"/static/402ec135e08c3b799c16c08a82ae2dd8/6b4aa/christopher-ayme-ocZ-_Y7-Ptg-unsplash.webp 919w,\\n/static/402ec135e08c3b799c16c08a82ae2dd8/0fe0b/christopher-ayme-ocZ-_Y7-Ptg-unsplash.webp 1839w,\\n/static/402ec135e08c3b799c16c08a82ae2dd8/5d6d7/christopher-ayme-ocZ-_Y7-Ptg-unsplash.webp 3677w\",\n                      \"type\": \"image/webp\",\n                      \"sizes\": \"(min-width: 3677px) 3677px, 100vw\"\n                    }\n                  ]\n                },\n                \"width\": 3677,\n                \"height\": 2456\n              }\n            }\n          ]\n        }\n        // highlight-end\n      }\n    }\n  },\n  \"extensions\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Highlighting Lines via gatsby-config.js using JavaScript\nDESCRIPTION: This snippet demonstrates how to specify line highlighting in a JavaScript file, specifically in the `gatsby-config.js` file for the `gatsby-transformer-remark` plugin.  The `{1,4-6}` specifies that lines 1 and 4 through 6 should be highlighted.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-prismjs/README.md#_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\n// In your gatsby-config.js\nplugins: [\n  {\n    resolve: `gatsby-transformer-remark`,\n    options: {\n      plugins: [\n        `gatsby-remark-prismjs`,\n      ]\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Backup autoindex.conf on Red Hat/CentOS (Shell)\nDESCRIPTION: This shell command creates a backup of the autoindex.conf file on Red Hat or CentOS systems. This backup allows you to revert changes made to the file if needed.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-manifest/README.md#_snippet_19\n\nLANGUAGE: Shell\nCODE:\n```\ncp /etc/httpd/conf.d/autoindex.conf /etc/httpd/conf.d/autoindex.conf.back\n```\n\n----------------------------------------\n\nTITLE: Configuring gatsby-source-faker in gatsby-config.js\nDESCRIPTION: Configures the gatsby-source-faker plugin within the gatsby-config.js file. This defines the schema based on faker.js options, the number of fake objects to generate, and the name of the GraphQL query node.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-faker/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// In your gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-source-faker`,\n      // derive schema from faker's options\n      options: {\n        schema: {\n          name: [\"firstName\", \"lastName\"],\n        },\n        count: 3, // how many fake objects you need\n        type: \"NameData\", // Name of the graphql query node\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Run create-gatsby script locally\nDESCRIPTION: This command executes the `create-gatsby` script directly using Node.js. It allows developers to test local changes to the `create-gatsby` package without publishing it to npm. Make sure to run this from the root directory of the monorepo or a directory with appropriate access to the script's location.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/create-gatsby/README.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\nnode packages/create-gatsby/cli.js\n```\n\n----------------------------------------\n\nTITLE: Update and Upgrade Packages (Ubuntu/Debian)\nDESCRIPTION: These commands update the package lists and upgrade installed packages on Ubuntu and Debian-based Linux distributions. It is recommended to run these commands before installing new software. The first command updates the package list, and the second command upgrades all installed packages to their latest versions.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-0/index.mdx#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt update\n```\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt -y upgrade\n```\n\n----------------------------------------\n\nTITLE: Gatsby Develop vs Build Output Diff\nDESCRIPTION: This snippet shows a diff between the outputs of the `gatsby develop` and `gatsby build` commands, highlighting the differences in their respective processes.  It emphasizes the steps unique to `gatsby build`, such as deleting HTML/CSS files from previous builds, generating image thumbnails, building JavaScript/CSS bundles, rewriting compilation hashes, and building static HTML for pages. It illustrates the extra steps needed to prepare a Gatsby site for a production environment.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/conceptual/overview-of-the-gatsby-build-process.md#_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\nsuccess open and validate gatsby-configs - 0.051 s\nsuccess load plugins - 0.915 s\nsuccess onPreInit - 0.021 s\n+ success delete html and css files from previous builds - 0.030 s\nsuccess initialize cache - 0.034 s\nsuccess copy gatsby files - 0.099 s\nsuccess onPreBootstrap - 0.034 s\nsuccess source and transform nodes - 0.121 s\nsuccess Add explicit types - 0.025 s\nsuccess Add inferred types - 0.144 s\nsuccess Processing types - 0.110 s\nsuccess building schema - 0.365 s\nsuccess createPages - 0.016 s\nsuccess createPagesStatefully - 0.079 s\nsuccess onPreExtractQueries - 0.025 s\nsuccess update schema - 0.041 s\nsuccess extract queries from components - 0.333 s\nsuccess write out requires - 0.020 s\nsuccess write out redirect data - 0.019 s\nsuccess Build manifest and related icons - 0.141 s\nsuccess onPostBootstrap - 0.130 s\n‚†Ä\ninfo bootstrap finished - 3.674 s\n‚†Ä\nsuccess run static queries - 0.057 s ‚Äî 3/3 89.08 queries/second\n- success run page queries - 0.033 s ‚Äî 5/5 347.81 queries/second\n- success start webpack server - 1.707 s ‚Äî 1/1 6.06 pages/second\n+ success run page queries - 0.026s - 3/3 114.85/s\n+ success Generating image thumbnails ‚Äî 6/6 - 1.059 s\n+ success Building production JavaScript and CSS bundles - 8.050 s\n+ success Rewriting compilation hashes - 0.021 s\n+ success Building static HTML for pages - 0.852 s ‚Äî 4/4 23.89 pages/second\n+ info Done building in 16.143999152 sec\n```\n\n----------------------------------------\n\nTITLE: Array of JSON objects example\nDESCRIPTION: Example JSON file containing an array of objects. Each object in the array will be converted into a separate GraphQL node.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-json/README.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n[{ \"value\": \"a\" }, { \"value\": \"b\" }, { \"value\": \"c\" }]\n```\n\n----------------------------------------\n\nTITLE: Proxying Multiple API Requests - Gatsby\nDESCRIPTION: This code snippet shows how to configure Gatsby to proxy multiple API endpoints to different backend servers.  It uses an array of proxy configurations within the `proxy` field of `gatsby-config.js`. Each configuration specifies a `prefix` and a `url` to which requests with that prefix will be proxied during development.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/api-proxy.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  proxy: [\n    {\n      prefix: \"/api\",\n      url: \"http://dev-mysite.com\",\n    },\n    {\n      prefix: \"/api2\",\n      url: \"http://dev2-mysite.com\",\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Prompting user for options in gatsby new JavaScript\nDESCRIPTION: This snippet implements a feature that prompts the user for options when running `gatsby new` without any arguments. This makes it easier for users to create new Gatsby projects by guiding them through the necessary configuration steps. The prompt provides a more user-friendly way to set up new projects.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-cli/CHANGELOG.md#_snippet_24\n\nLANGUAGE: JavaScript\nCODE:\n```\n99fb7b4\n```\n\n----------------------------------------\n\nTITLE: Setting HTML and Body Attributes (JSX)\nDESCRIPTION: This snippet demonstrates how to set attributes on the `<html>` and `<body>` tags using the Gatsby Head API. This allows developers to customize these tags directly from a component.  Requires the Gatsby Head API.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/v5.5/index.md#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\nexport function Head() {\n  return (\n    <>\n      <html lang=\"en\">\n      <body className=\"my-body-class\">\n      <title>Hello World</title>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Typography.js Configuration\nDESCRIPTION: Shows a typical typography.js file that imports the Typography library and a theme.  It then exports the typography object, along with helper functions like scale, rhythm, and options. This configuration file is referenced by the gatsby-plugin-typography.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-typography/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Typography from \"typography\"\nimport grandViewTheme from \"typography-theme-grand-view\"\n\nconst typography = new Typography(grandViewTheme)\n\n// Export helper functions\nexport const { scale, rhythm, options } = typography\nexport default typography\n```\n\n----------------------------------------\n\nTITLE: Start Gatsby Development Server (Shell)\nDESCRIPTION: Starts the Gatsby development server, which allows you to view and develop the site locally. This command compiles the site and serves it at a local address.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/using-multiple-local-plugins/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngatsby develop\n```\n\n----------------------------------------\n\nTITLE: Figure Component in JSX\nDESCRIPTION: This snippet defines a React component named `Figure` using JSX.  It takes `data` and `caption` as props and renders a `figure` element with an `object` for the data and a `figcaption` for the caption. The component can be imported and used in MDX documents.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/glossary/mdx.md#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport const Figure = props => {\n  return (\n    <figure class=\"chart\">\n      <object data={props.data} type=\"image/svg+xml\"></object>\n      <figcaption>{props.caption}</figcaption>\n    </figure>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Navigating to Example Directory\nDESCRIPTION: This command changes the current directory to the 'using-multiple-themes' example directory within the Gatsby repository. This step is necessary to perform further operations specific to the example.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/using-multiple-themes/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncd gatsby/examples/using-multiple-themes\n```\n\n----------------------------------------\n\nTITLE: Querying Excerpts with GraphQL in Gatsby\nDESCRIPTION: This GraphQL query retrieves excerpts from all MarkdownRemark nodes. It uses the `excerpt` field with an optional `pruneLength` argument to specify the desired excerpt length in characters. The `pruneLength` parameter overrides the default excerpt length.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/using-remark/src/pages/2017-11-14---excerpts/index.md#_snippet_0\n\nLANGUAGE: GraphQL\nCODE:\n```\n{\n  allMarkdownRemark {\n    edges {\n      node {\n        excerpt(pruneLength: 280)\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Including GIFs in Markdown\nDESCRIPTION: This code snippet shows how to include an animated GIF in a Markdown file. It uses the standard Markdown image syntax: `![alt text](path/to/image.gif)`.  The image path is relative to the Markdown file's location.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/images-and-media/working-with-gifs.md#_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n![otter dancing with a fish](../../images/dancing-otter.gif)\n```\n\n----------------------------------------\n\nTITLE: Creating a Gatsby project\nDESCRIPTION: This command uses the Gatsby CLI to create a new Gatsby project named `gatsby-site` using the `gatsby-starter-hello-world` starter template.\n\nDependencies: Gatsby CLI, Node.js, npm or yarn.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/porting-an-html-site-to-gatsby.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngatsby new gatsby-site https://github.com/gatsbyjs/gatsby-starter-hello-world\n```\n\n----------------------------------------\n\nTITLE: Bumping documentationjs with TypeScript Support in Gatsby\nDESCRIPTION: This commit updates the `documentationjs` dependency to a version that includes TypeScript support within the `gatsby-transformer-documentationjs` plugin. This enables the plugin to properly handle and transform TypeScript-based documentation.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-documentationjs/CHANGELOG.md#_snippet_19\n\nLANGUAGE: JavaScript\nCODE:\n```\n**gatsby-transformer-documentationjs:** bump documentationjs to get TypeScript support ([#13751](https://github.com/gatsbyjs/gatsby/issues/13751)) ([e5f9a22](https://github.com/gatsbyjs/gatsby/commit/e5f9a22)), closes [#13692](https://github.com/gatsbyjs/gatsby/issues/13692)\n```\n\n----------------------------------------\n\nTITLE: Configuring Site Metadata with Menu Links in Gatsby\nDESCRIPTION: This snippet demonstrates how to add a `menuLinks` array to the `siteMetadata` object in `gatsby-config.js`. This array is used to define the navigation links for the site. The `name` and `url` properties define the text and destination of each link, respectively.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/using-multiple-themes-together.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  siteMetadata: {\n    title: `Your Site Title`,\n    description: `A description for your blazing fast site, using multiple themes!`,\n    author: `Your name`,\n    // highlight-start\n    menuLinks: [\n      {\n        name: `Blog`,\n        url: `/`,\n      },\n      {\n        name: `Notes`,\n        url: `/notes`,\n      },\n    ],\n    // highlight-end\n    social: [\n      // ...social array is unchanged.\n    ],\n  },\n  plugins: [\n    // ...plugins array is unchanged.\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Importing CSS into a component (menu.js)\nDESCRIPTION: This JavaScript snippet imports a CSS file (`css/menu.css`) into a component (`menu.js`). This allows the component to use the styles defined in the CSS file.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/styling/global-css.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"css/menu.css\"\n```\n\n----------------------------------------\n\nTITLE: Pulling Changes from Forestry CMS\nDESCRIPTION: This command pulls the changes made by Forestry CMS to the GitHub repository into the local Gatsby project. This includes the `.forestry` directory and the `/static/admin` directory, which are essential for Forestry's configuration and admin interface.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/sourcing-from-forestry.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ngit pull\n```\n\n----------------------------------------\n\nTITLE: Create Schema Customization with Proxy for Nested Field\nDESCRIPTION: This snippet shows how to use the `@proxy` directive to alias a nested field (`fields.someInformation`) to a top-level field (`someInformation`) on the `MarkdownRemark` type.  This simplifies querying the custom field.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/graphql-data-layer/schema-customization.md#_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nexports.createSchemaCustomization = ({ actions }) => {\n  const { createTypes } = actions\n\n  createTypes(`\n    type MarkdownRemark implements Node {\n      someInformation: String @proxy(from: \\\"fields.someInformation\\\")\n    }\n  `)\n}\n```\n\n----------------------------------------\n\nTITLE: Running the Gatsby Example Site\nDESCRIPTION: This command starts the Gatsby development server for the example site, which will be accessible at `http://localhost:8000`. It uses Yarn workspaces to run the `develop` script within the `example-site` project's `package.json`, automatically including and executing the source plugin as part of the build process.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/creating-source-plugins/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn workspace example-site develop\n```\n\n----------------------------------------\n\nTITLE: Single JSON object example\nDESCRIPTION: Example JSON file containing a single object. The object will be converted into a single GraphQL node. The node type is based on the parent directory name.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-json/README.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{ \"value\": \"b\" }\n```\n\n----------------------------------------\n\nTITLE: Installing Gatsby Starter from Local Path (Shell)\nDESCRIPTION: This command installs a Gatsby starter from a local directory.  Replace `[SITE_DIRECTORY]` with the desired directory name and `[LOCAL_PATH_TO_STARTER]` with the path to the local starter directory.  The path can be relative or absolute.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/starters.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\ngatsby new [SITE_DIRECTORY] [LOCAL_PATH_TO_STARTER]\n```\n\n----------------------------------------\n\nTITLE: Querying excerpt with MARKDOWN format (GraphQL)\nDESCRIPTION: A GraphQL query to retrieve the excerpt in Markdown format.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-remark/README.md#_snippet_11\n\nLANGUAGE: GraphQL\nCODE:\n```\n{\n  allMarkdownRemark {\n    edges {\n      node {\n        excerpt(format: MARKDOWN)\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Unnamed Splat Route Parameter\nDESCRIPTION: This code shows how to access the value captured by an unnamed splat route (using `[...]`). The splat parameter is accessed via `props.params['*']`. This is how you obtain the splat route value when no explicit name is given.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/routing/file-system-route-api.md#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction AppPage(props) {\n  const splat = props.params[‚Äò*‚Äô]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Authentication\nDESCRIPTION: Example configuration showing how to use basic authentication to access a Drupal site protected by basicauth. It utilizes environment variables for the username and password for security.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-drupal/README.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n// In your gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-source-drupal`,\n      options: {\n        baseUrl: `https://live-contentacms.pantheonsite.io/`,\n        apiBase: `api`, // optional, defaults to `jsonapi`\n        basicAuth: {\n          username: process.env.BASIC_AUTH_USERNAME,\n          password: process.env.BASIC_AUTH_PASSWORD,\n        },\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Inspecting file changes between Gatsby builds\nDESCRIPTION: These commands clean the Gatsby cache, build the site, copy the public directory to a backup, rebuild the site, and then compare the two public directories to generate a diff file. This diff file can be used to identify the exact changes that triggered the rebuild.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/debugging-incremental-builds.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngatsby clean\ngatsby build --no-uglify\ncp -r public public-first-build\n```\n\nLANGUAGE: shell\nCODE:\n```\ngatsby build --no-uglify --verbose --log-pages\ndiff -u -r public-first-build public > build-diff.diff\n```\n\n----------------------------------------\n\nTITLE: Update node-fetch dependency - Gatsby Telemetry\nDESCRIPTION: This commit updates the node-fetch dependency for the gatsby-telemetry package to version ^2.6.7. This update likely includes bug fixes and security improvements for making HTTP requests from Node.js, enhancing the reliability of telemetry data transmission.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-telemetry/CHANGELOG.md#_snippet_6\n\n\n\n----------------------------------------\n\nTITLE: Installing gatsby-plugin-manifest with npm\nDESCRIPTION: This command installs the gatsby-plugin-manifest package using npm.  It's a prerequisite for using the plugin in your Gatsby project.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-manifest/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install gatsby-plugin-manifest\n```\n\n----------------------------------------\n\nTITLE: Updating peerDeps\nDESCRIPTION: This chore involves updating the peer dependencies of the gatsby-plugin-twitter package.  Updating peer dependencies ensures compatibility with other packages in the Gatsby ecosystem.  It typically involves updating version ranges in the package.json file.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-twitter/CHANGELOG.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nUpdate peerDeps [#36965](https://github.com/gatsbyjs/gatsby/issues/36965) ([b624442](https://github.com/gatsbyjs/gatsby/commit/b6244424fe8b724cbc23b80b2b4f5424cc2055a4))\n```\n\n----------------------------------------\n\nTITLE: Configure ESLint Rules\nDESCRIPTION: This JavaScript code snippet configures ESLint by defining global variables and extending the 'react-app' preset.  The `globals` section defines `__PATH_PREFIX__` as a global variable, and `extends` specifies that the configuration should inherit from the `react-app` ESLint configuration. The file should be named `.eslintrc.js`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/custom-configuration/eslint.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  globals: {\n    __PATH_PREFIX__: true,\n  },\n  extends: `react-app`,\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a new Gatsby project using Flotiq starter\nDESCRIPTION: This command uses the Gatsby CLI to create a new project based on the gatsby-starter-blog from Flotiq. It clones the specified repository into a new directory named 'my-blog-starter'.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/sourcing-from-flotiq.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngatsby new my-blog-starter https://github.com/flotiq/gatsby-starter-blog\n```\n\n----------------------------------------\n\nTITLE: Accessibility Test Example in TypeScript\nDESCRIPTION: This code defines an example Cypress test for accessibility.  It uses `cypress-axe` to check for accessibility violations on the homepage and a second page, and it uses testing-library commands to find elements and assert their attributes.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/testing/end-to-end-testing.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\ndescribe(\"Accessibility tests\", () => {\n  beforeEach(() => {\n      cy.visit(\"/\").waitForRouteChange().get(\"main\")\n      cy.injectAxe()\n  })\n  it(\"Has no detectable accessibility violations on load\", () => {\n    cy.checkA11y()\n  })\n  it(\"Navigates to page 2 and checks for accessibility violations\", () => {\n    cy.findByText(/go to page 2/i)\n      .click()\n      .waitForRouteChange()\n      .checkA11y()\n  })\n  it(\"Focuses on the footer link and asserts its attributes\", () => {\n    cy.findAllByText(\"Gatsby\").focus()\n\n    cy.focused()\n      .should(\"have.text\", \"Gatsby\")\n      .should(\"have.attr\", \"href\", \"https://www.gatsbyjs.com\")\n      .should(\"not.have.css\", \"outline-width\", \"0px\")\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Use onPluginInit API to share context\nDESCRIPTION: Shows how to use the `onPluginInit` API to share context and state between different lifecycle APIs, specifically `onPreBootstrap` and schema APIs. This is required for Gatsby v4 to ensure that each worker has the initial plugin state when using Parallel Query Running.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v3-to-v4.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nexports.onPluginInit = async (args, pluginOptions) => {\n  await initializePlugin(args, pluginOptions)\n}\n\n// Schema APIs stay the same\n```\n\n----------------------------------------\n\nTITLE: Inferred GraphQL type definition GraphQL\nDESCRIPTION: This GraphQL code shows how Gatsby infers the data types based on the JSON example. It defines types like `Post` and `PostImage`, mapping JavaScript strings to GraphQL strings and JavaScript numbers to GraphQL Int. The `Post` type implements the `Node` interface.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/creating-a-source-plugin/part-3/index.mdx#_snippet_5\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype Post implements Node {\n  slug: String\n  title: String\n  image: PostImage\n  author: String\n}\n\ntype PostImage {\n  url: String\n  alt: String\n  width: Int\n  height: Int\n}\n```\n\n----------------------------------------\n\nTITLE: Install Stripe.js module\nDESCRIPTION: Installs the `@stripe/stripe-js` npm package, which is required for loading and using Stripe.js in the Gatsby project.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/ecommerce-tutorial/index.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install @stripe/stripe-js\n```\n\n----------------------------------------\n\nTITLE: Handle No Theme Matches (JavaScript)\nDESCRIPTION: This code snippet handles the case where no matching themes are found for a given filepath.  If no theme is found, the callback function is invoked to allow Webpack to continue with its default module resolution process.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/conceptual/how-shadowing-works.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nif (matchingThemes.length === 0) {\n  return callback()\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PostCSS using postcss.config.js\nDESCRIPTION: This snippet illustrates how to configure PostCSS using a `postcss.config.js` file. This provides an alternative to configuring PostCSS plugins directly within the `gatsby-config.js` file. It requires the necessary PostCSS plugins to be installed as dependencies.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-postcss/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst postcssPresetEnv = require(`postcss-preset-env`)\n\nmodule.exports = () => ({\n  plugins: [\n    postcssPresetEnv({\n      stage: 0,\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Create MySQL Nodes with Buffer Handling JavaScript\nDESCRIPTION: This snippet from `create-nodes.js` defines the `createMySqlNodes` function, which iterates over the query results and creates nodes for each row. The `attach` function checks if a value is a Buffer and, if so, uses `createFileNodeFromBuffer` to create a File node and link it as a child to the current node. The original value is then replaced with the string \"Buffer\".\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-filesystem/README.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// create-nodes.js\nconst { createFileNodeFromBuffer } = require(`gatsby-source-filesystem`)\nconst createNodeHelpers = require(`gatsby-node-helpers`).default\n\nconst { createNodeFactory } = createNodeHelpers({ typePrefix: `mysql` })\n\nfunction attach(node, key, value, ctx) {\n  if (Buffer.isBuffer(value)) {\n    ctx.linkChildren.push(parentNodeId =>\n      createFileNodeFromBuffer({\n        buffer: value,\n        getCache: ctx.getCache,\n        createNode: ctx.createNode,\n        createNodeId: ctx.createNodeId,\n      })\n    )\n    value = `Buffer`\n  }\n\n  node[key] = value\n}\n\nfunction createMySqlNodes({ name, __sql, idField, keys }, results, ctx) {\n  const MySqlNode = createNodeFactory(name)\n  ctx.linkChildren = []\n\n  return __sql.forEach(row => {\n    if (!keys) keys = Object.keys(row)\n\n    const node = { id: row[idField] }\n\n    for (const key of keys) {\n      attach(node, key, row[key], ctx)\n    }\n\n    node = ctx.createNode(node)\n\n    for (const link of ctx.linkChildren) {\n      link(node.id)\n    }\n  })\n}\n\nmodule.exports = createMySqlNodes\n```\n\n----------------------------------------\n\nTITLE: Updating Emotion Babel Preset for gatsby-plugin-emotion\nDESCRIPTION: This snippet shows a bug fix where the `@emotion/babel-preset-css-prop` dependency is updated to version `^11.11.0` within the `gatsby-plugin-emotion` package. The update addresses potential issues related to CSS prop handling and Babel compatibility with Emotion.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-emotion/CHANGELOG.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nupdate dependency @emotion/babel-preset-css-prop to ^11.11.0 for gatsby-plugin-emotion [#38173](https://github.com/gatsbyjs/gatsby/issues/38173) ([8a76a20](https://github.com/gatsbyjs/gatsby/commit/8a76a208391f0c8dc31621d91e32cdbafb477877))\n```\n\n----------------------------------------\n\nTITLE: Modifying Heading Nodes to HTML in Gatsby Plugin (Synchronous)\nDESCRIPTION: This code snippet demonstrates how to modify heading nodes to custom HTML nodes within a Gatsby plugin. It checks the heading depth, extracts the text content using `mdast-util-to-string`, and then replaces the heading node with an HTML node containing custom styling. Requires `unist-util-visit` and `mdast-util-to-string`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/remark-plugin-tutorial.md#_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nconst visit = require(\"unist-util-visit\")\nconst toString = require(\"mdast-util-to-string\")\n\nmodule.exports = ({ markdownAST }, pluginOptions) => {\n  visit(markdownAST, \"heading\", node => {\n    let { depth } = node\n\n    // Skip if not an h1\n    if (depth !== 1) return\n\n    // Grab the innerText of the heading node\n    let text = toString(node)\n\n    const html = `\n        <h1 style=\"color: rebeccapurple\">\n          ${text}\n        </h1>\n      `\n\n    node.type = \"html\"\n    node.children = undefined\n    node.value = html\n  })\n\n  return markdownAST\n}\n```\n\n----------------------------------------\n\nTITLE: Default Create React App project structure\nDESCRIPTION: This code snippet displays a typical file structure for a Create React App project. Understanding the initial structure is important for planning the migration to a Gatsby project structure.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/porting-from-create-react-app-to-gatsby.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n  my-create-react-app\n  ‚îú‚îÄ‚îÄ .git\n  ‚îú‚îÄ‚îÄ .gitignore\n  ‚îú‚îÄ‚îÄ README.md\n  ‚îú‚îÄ‚îÄ node_modules\n  ‚îú‚îÄ‚îÄ package.json\n  ‚îú‚îÄ‚îÄ src\n  ‚îÇ   ‚îú‚îÄ‚îÄ App.css\n  ‚îÇ   ‚îú‚îÄ‚îÄ App.js\n  ‚îÇ   ‚îú‚îÄ‚îÄ App.test.js\n  ‚îÇ   ‚îú‚îÄ‚îÄ index.css\n  ‚îÇ   ‚îú‚îÄ‚îÄ index.js\n  ‚îÇ   ‚îú‚îÄ‚îÄ logo.svg\n  ‚îÇ   ‚îî‚îÄ‚îÄ serviceWorker.js\n  ‚îî‚îÄ‚îÄ yarn.lock\n```\n\n----------------------------------------\n\nTITLE: CSRF Token Implementation\nDESCRIPTION: This snippet demonstrates how to use a CSRF token to protect against CSRF attacks. A hidden input field contains a unique token that is validated by the server upon form submission. If the token is missing or invalid, the request is rejected.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/conceptual/security-in-gatsby.md#_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<form action=\"http://mywebsite.com/blog/addcoment\" method=\"POST\">\n  <input type=\"text\" name=\"comment\" />\n  // highlight-next-line\n  <input type=\"hidden\" name=\"token\" value=\"SU9J3tMoT1w5q6uJ1VMXaaf9UXzLvyNd\" />\n  <input type=\"submit\" />\n</form>\n```\n\n----------------------------------------\n\nTITLE: Install HJSON Transformer\nDESCRIPTION: This command installs the `gatsby-transformer-hjson` package, enabling the parsing of HJSON files in a Gatsby project. It is a required dependency for using HJSON data within the Gatsby site.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-hjson/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install gatsby-transformer-hjson\n```\n\n----------------------------------------\n\nTITLE: Installing Gatsby CLI (Shell)\nDESCRIPTION: This command installs the Gatsby CLI globally, which is required to create and manage Gatsby projects.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/sourcing-from-agilitycms.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install -g gatsby-cli\n```\n\n----------------------------------------\n\nTITLE: Configuring tableOfContents in GraphQL query (GraphQL)\nDESCRIPTION: A GraphQL query demonstrating how to configure the `tableOfContents` field with `absolute`, `pathToSlugField`, `heading`, and `maxDepth` options. These options customize the generation of the table of contents.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-remark/README.md#_snippet_6\n\nLANGUAGE: GraphQL\nCODE:\n```\n{\n  allMarkdownRemark {\n    edges {\n      node {\n        html\n        tableOfContents(\n          absolute: true\n          pathToSlugField: \"frontmatter.path\"\n          heading: \"only show toc from this heading onwards\"\n          maxDepth: 2\n        )\n        frontmatter {\n          # Assumes you're using path in your frontmatter.\n          path\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying excerpt with MARKDOWN format and separator (GraphQL)\nDESCRIPTION: A GraphQL query to retrieve the excerpt in Markdown format when an excerpt separator is used in the Markdown file.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-remark/README.md#_snippet_15\n\nLANGUAGE: GraphQL\nCODE:\n```\n{\n  markdownRemark {\n    excerpt(format: MARKDOWN)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying posts from Gatsby's GraphQL API\nDESCRIPTION: This GraphQL query retrieves all WordPress posts from Gatsby's GraphQL API, which caches data from WPGraphQL. It fetches the ID and title of each post within the nodes array from allWpPost.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-wordpress/docs/features/graphql-wordpress-and-gatsby.md#_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  allWpPost {\n    nodes {\n      id\n      title\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fix Runtime Caching Casing in Gatsby Offline Plugin (JavaScript)\nDESCRIPTION: This bug fix corrects an incorrect casing for runtimeCaching in the gatsby-plugin-offline configuration. Correcting the casing ensures that the runtime caching configuration is properly applied.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-offline/CHANGELOG.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nUpdate incorrect casing for runtimeCachin‚Ä¶\n```\n\n----------------------------------------\n\nTITLE: Displaying Frontmatter Title in React\nDESCRIPTION: This JSX snippet demonstrates how to display the title from the frontmatter in a React component using `props.pageContext.frontmatter?.title`. If the title is not present in the frontmatter, it defaults to the string 'disabled', indicating that frontmatter parsing is working as expected.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/e2e-tests/mdx/src/pages/frontmatter-javascript.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<span data-cy=\"frontmatter\">\n  {props.pageContext.frontmatter?.title || `disabled`}\n</span>\n```\n\n----------------------------------------\n\nTITLE: Query Single Contentful CaseStudy GraphQL\nDESCRIPTION: This GraphQL query retrieves a single `ContentfulCaseStudy` node with a specific title ('bar'). It includes the `title` and `subtitle` fields. The `filter` argument is used to narrow down the search to a specific entry.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-contentful/README.md#_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\n{\n    contentfulCaseStudy(filter: { title: { eq: 'bar' } })  {\n      title\n      subtitle\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Good CommonJS Syntax (JavaScript)\nDESCRIPTION: This code snippet shows the correct way to use CommonJS syntax, which is acceptable in Gatsby v2.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v1-to-v2.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n// GOOD: CommonJS syntax works\nconst foo = require(\"foo\")\nmodule.exports = foo\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query for Products\nDESCRIPTION: This GraphQL query retrieves the slug for each product from the `allProductsJson` data. It traverses the edges and nodes to access the `slug` field.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/why-gatsby-uses-graphql.md#_snippet_10\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  allProductsJson {\n    edges {\n      node {\n        slug\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Netlify CMS Configuration\nDESCRIPTION: This code snippet shows the change required in `static/admin/config.yml` to configure the Netlify CMS to connect to the correct GitHub repository. Replace `your-username/your-repo-name` with your GitHub username and repository name.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/blog-netlify-cms-tutorial/index.md#_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\nbackend:\n-  name: test-repo\n\n+  name: github\n+  repo: your-username/your-repo-name\n```\n\n----------------------------------------\n\nTITLE: Update Bluebird Dependency to 3.5.5\nDESCRIPTION: This snippet updates the bluebird dependency to version ^3.5.5. Bluebird is a promise library and this update likely includes bug fixes and performance improvements.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-javascript-static-exports/CHANGELOG.md#_snippet_16\n\nLANGUAGE: none\nCODE:\n```\n- update dependency bluebird to ^3.5.5 ([#16825](https://github.com/gatsbyjs/gatsby/issues/16825)) ([ec0be83](https://github.com/gatsbyjs/gatsby/commit/ec0be83))\n```\n\n----------------------------------------\n\nTITLE: Configuring gatsby-remark-katex\nDESCRIPTION: Configure the gatsby-transformer-remark plugin in gatsby-config.js to use gatsby-remark-katex. This plugin will then process markdown files and render LaTeX equations using KaTeX.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-katex/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// In your gatsby-config.js\nplugins: [\n  {\n    resolve: `gatsby-transformer-remark`,\n    options: {\n      plugins: [\n        {\n          resolve: `gatsby-remark-katex`,\n          options: {\n            // Add any KaTeX options from https://github.com/KaTeX/KaTeX/blob/master/docs/options.md here\n            strict: `ignore`\n          }\n        }\n      ],\n    },\n  },\n],\n```\n\n----------------------------------------\n\nTITLE: Creating a New Page Component with React and Gatsby\nDESCRIPTION: This code snippet demonstrates the basic structure of a Gatsby page component. It imports React, defines a functional component, and exports it as the default export.  The component returns a basic HTML structure with a heading and a paragraph.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-2/index.mdx#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// Step 1: Import React\nimport * as React from 'react'\n\n// Step 2: Define your component\nconst AboutPage = () => {\n  return (\n    <main>\n      <h1>About Me</h1>\n      <p>Hi there! I'm the proud creator of this site, which I built with Gatsby.</p>\n    </main>\n  )\n}\n\n// Step 3: Export your component\nexport default AboutPage\n```\n\n----------------------------------------\n\nTITLE: Feat: Add transformSchema Option\nDESCRIPTION: This snippet highlights a feature added to gatsby-source-graphql that introduces the transformSchema option. This new feature allows users to transform the schema.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-graphql/CHANGELOG.md#_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\ngatsby-source-graphql: Add transformSchema option ([#25048](https://github.com/gatsbyjs/gatsby/issues/25048)) ([b61e484](https://github.com/gatsbyjs/gatsby/commit/b61e484)), closes [#23552](https://github.com/gatsbyjs/gatsby/issues/23552)\n```\n\n----------------------------------------\n\nTITLE: Excel to JSON example\nDESCRIPTION: Illustrates how the `gatsby-transformer-excel` plugin transforms data from an Excel file into JSON format.  Each worksheet row is converted into a JSON node.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-excel/README.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n------ Sheet1 ------\n/|    A    |   B   |\n-+---------+-------+\n1| letter  | value |\n-+---------+-------+\n2|    a    |   97  |\n-+---------+-------+\n3|    b    |   98  |\n\n------ Sheet2 ------\n/|    A    |   B   |\n-+---------+-------+\n1| letter  | value |\n-+---------+-------+\n2|    A    |   65  |\n-+---------+-------+\n3|    B    |   66  |\n```\n\n----------------------------------------\n\nTITLE: Install latest Gatsby version (Shell)\nDESCRIPTION: Installs the latest version of Gatsby using npm. It's important to update Gatsby to benefit from new features and bug fixes. The `--legacy-peer-deps` flag may be required for npm 7 or higher.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v4-to-v5.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install gatsby@latest\n```\n\n----------------------------------------\n\nTITLE: Example YAML File\nDESCRIPTION: This is an example YAML file containing data for two individuals, Jane Doe and John Smith, with their names and biographies.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/plugins-and-themes/creating-a-transformer-plugin.md#_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Jane Doe\n  bio: Developer based in Somewhere, USA\n- name: John Smith\n  bio: Developer based in Maintown, USA\n```\n\n----------------------------------------\n\nTITLE: Querying Hacker News data with GraphQL\nDESCRIPTION: This GraphQL query retrieves Hacker News stories, sorts them by their order, and fetches various fields, including ID, title, score, URL, author, and comments. The `timeISO` field is formatted to show the time since the story was posted using `fromNow: true`. The query demonstrates how to access nested comment data.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-hacker-news/README.md#_snippet_2\n\nLANGUAGE: GraphQL\nCODE:\n```\nquery {\n  allHnStory(sort: { fields: [order] }) {\n    edges {\n      node {\n        id\n        title\n        score\n        order\n        domain\n        url\n        by\n        descendants\n        timeISO(fromNow: true)\n        childrenHnComment {\n          id\n          text\n          timeISO(fromNow: true)\n          by\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Layout Component with Client Footer\nDESCRIPTION: Demonstrates how a layout component (`Layout`) can incorporate a client component (`Footer`). The `Footer` component is imported as a regular module. This illustrates how server components can import and render client components, establishing a client boundary.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/performance/partial-hydration.md#_snippet_4\n\nLANGUAGE: JSX\nCODE:\n```\nimport * as React from \"react\"\n// Footer is a client component\nimport Footer from \"./footer\"\n\nconst Layout = ({ children }) => (\n  <>\n    <main>{children}</main>\n    <Footer />\n  </>\n)\n\nexport default Layout\n```\n\n----------------------------------------\n\nTITLE: Install mdast-util-to-string and unist-util-visit\nDESCRIPTION: Installs the `mdast-util-to-string` and `unist-util-visit` packages. These are used in the remark plugin to extract heading information from the MDX content.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-mdx/README.md#_snippet_14\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install mdast-util-to-string unist-util-visit\n```\n\n----------------------------------------\n\nTITLE: Minimal HTML Document Structure\nDESCRIPTION: This code snippet demonstrates a minimal HTML document structure used for client-side rendered React applications. The `___gatsby` element serves as the application's container where React will mount the application. The JavaScript file then hydrates this container.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/conceptual/react-hydration.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width,user-scalable=yes\" />\n    <title>Gatsby App</title>\n  </head>\n  <body>\n    <!-- This empty element becomes the application's container -->\n    <main id=\"___gatsby\"></main>\n    <script type=\"text/javascript\" src=\"./js/name.hash.js\"></script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Querying excerpt with PLAIN format (GraphQL)\nDESCRIPTION: A GraphQL query to retrieve the excerpt in plain text format.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-remark/README.md#_snippet_9\n\nLANGUAGE: GraphQL\nCODE:\n```\n{\n  allMarkdownRemark {\n    edges {\n      node {\n        excerpt(format: PLAIN)\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing global namespace hack in gatsby-react-router-scroll (JavaScript)\nDESCRIPTION: This commit removes a global namespace hack to implement a proper workflow. This change aims to improve the reliability and maintainability of `gatsby-react-router-scroll` package by ensuring proper encapsulation and avoiding potential conflicts with other libraries or code within the Gatsby ecosystem.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-react-router-scroll/CHANGELOG.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nRemove global namespace hack for a proper workflow ([#21591](https://github.com/gatsbyjs/gatsby/issues/21591)) ([4bc595b](https://github.com/gatsbyjs/gatsby/commit/4bc595b))\n```\n\n----------------------------------------\n\nTITLE: Installing the Algolia plugin for Gatsby\nDESCRIPTION: This command installs the 'gatsby-plugin-algolia' package using npm. This plugin facilitates indexing Gatsby pages in Algolia for search functionality. It's a necessary dependency to push content to Algolia.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/adding-search-with-algolia.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install gatsby-plugin-algolia\n```\n\n----------------------------------------\n\nTITLE: Start Gatsby Development Server\nDESCRIPTION: This command starts the Gatsby development server, allowing the user to view and test their site locally in a web browser. It watches for file changes and automatically rebuilds the site.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-1/index.mdx#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ngatsby develop\n```\n\n----------------------------------------\n\nTITLE: Using PageProps in a Gatsby page\nDESCRIPTION: This code demonstrates how to use the `PageProps` type from Gatsby in a page component. It imports `PageProps` and uses it to type the props passed to the `IndexRoute` component, improving developer experience with IDE support.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/custom-configuration/typescript.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as React from \"react\"\nimport type { PageProps } from \"gatsby\"\n\nconst IndexRoute = ({ path }: PageProps) => {\n  return (\n    <main>\n      <h1>Path: {path}</h1>\n    </main>\n  )\n}\n\nexport default IndexRoute\n```\n\n----------------------------------------\n\nTITLE: Using GetServerData shorthand type in Gatsby with TypeScript\nDESCRIPTION: This snippet shows the shorthand usage of the `GetServerData` type alias in Gatsby with TypeScript. It defines a `getServerData` function using the `GetServerData` type, making the code more concise while still providing type safety for the function's arguments and return value.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/v4.5/index.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst getServerData: GetServerData<ServerDataProps> = async props => {\n  // your function body\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering basic Graphviz diagram with gatsby-remark-graphviz\nDESCRIPTION: This snippet demonstrates how to render a basic Graphviz diagram using the gatsby-remark-graphviz plugin.  It requires the gatsby-remark-graphviz plugin to be installed and configured in your Gatsby project. The `dot` code block is parsed by the plugin and converted to an SVG.  No specific inputs or outputs are required, the plugin handles the conversion. The diagram is defined using the Graphviz `dot` language.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/using-remark/src/pages/2019-02-06---graphviz/index.md#_snippet_0\n\nLANGUAGE: dot\nCODE:\n```\ndigraph graphname {\n  a -> b;\n  b -> c;\n  a -> c;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Basic Auth for Remote Files in Gatsby Source Drupal\nDESCRIPTION: This bug fix allows the gatsby-source-drupal plugin to use basic authentication credentials when fetching remote files from the Drupal server. This ensures that files requiring authentication can be accessed and processed correctly.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-drupal/CHANGELOG.md#_snippet_28\n\n\n\n----------------------------------------\n\nTITLE: Hiding Lines in JSX with gatsby-remark-prismjs\nDESCRIPTION: This JSX code snippet shows how to hide specific lines using `hide-line` and `hide-range` comments.  These comments instruct `gatsby-remark-prismjs` to exclude certain lines or ranges from the displayed code block.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/using-remark/src/pages/2017-04-05---embed-snippets/index.md#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n/* hide-range{1-3} */\nimport React from \"react\"\nimport ReactDOM from \"react-dom\"\n\nconst name = `Brian`\n\n// hide-next-line\nReactDOM.render(\n  <div>\n    <h1>Hello, ${name}!</h1>\n    <h2>Welcome to this example</h2>\n  </div>,\n  document.getElementById(`root`) // hide-line\n) // hide-line\n```\n\n----------------------------------------\n\nTITLE: Adding assetPrefix support to gatsby\nDESCRIPTION: This commit adds assetPrefix support to Gatsby, enabling the deployment of assets separately from HTML. This feature is associated with issue #12128.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-catch-links/CHANGELOG.md#_snippet_14\n\nLANGUAGE: Text\nCODE:\n```\nadd assetPrefix to support deploying assets separate from html ([#12128](https://github.com/gatsbyjs/gatsby/issues/12128)) ([8291044](https://github.com/gatsbyjs/gatsby/commit/8291044))\n```\n\n----------------------------------------\n\nTITLE: Configuring CoffeeScript Plugin in Gatsby\nDESCRIPTION: This snippet demonstrates how to include and configure the `gatsby-plugin-coffeescript` plugin in your `gatsby-config.js` file.  It shows both the basic inclusion and a more advanced configuration with options. The options object is passed directly to the CoffeeScript compiler.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-coffeescript/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// in gatsby-config.js\nplugins: [\n  // no configuration\n  `gatsby-plugin-coffeescript`,\n  // custom configuration\n  {\n    resolve: `gatsby-plugin-coffeescript`,\n    // options are passed directly to the compiler\n    options: {},\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Setting up Jest DOM\nDESCRIPTION: This code snippet imports `@testing-library/jest-dom` into a setup file, which Jest automatically runs before each test, providing custom Jest matchers for DOM assertions.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/testing/testing-react-components.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"@testing-library/jest-dom\"\n```\n\n----------------------------------------\n\nTITLE: Adding Deployment Script to package.json\nDESCRIPTION: Adds a deployment script to the package.json file to simplify the deployment process. This script uses the gatsby-plugin-s3 deploy command to deploy the built Gatsby site to the configured S3 bucket.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/previews-deploys-hosting/deploying-to-s3-cloudfront.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"scripts\": {\n    \"deploy\": \"gatsby-plugin-s3 deploy\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query for Gatsby Image\nDESCRIPTION: This React component demonstrates how to use `gatsby-plugin-image` to query and display an optimized image. It fetches image data using GraphQL and then renders the image using the `GatsbyImage` component. The GraphQL query specifies the image processing specifications, such as width, height, and layout, directly in the query.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/conceptual/graphql-concepts.md#_snippet_5\n\nLANGUAGE: JSX\nCODE:\n```\nimport React from \"react\"\nimport { GatsbyImage } from \"gatsby-plugin-image\"\nimport { graphql } from \"gatsby\"\n\nexport default function Page({ data }) {\n  return (\n    <div>\n      <h1>Hello gatsby-plugin-image</h1>\n      <GatsbyImage image={data.file.childImageSharp.gatsbyImageData} />\n    </div>\n  )\n}\n\nexport const query = graphql`\n  query {\n    file(relativePath: { eq: \"blog/avatars/kyle-mathews.jpeg\" }) {\n      childImageSharp {\n        # Specify the image processing specifications right in the query.\n        # Makes it trivial to update as your page's design changes.\n        gatsbyImageData(width: 125, height: 125, layout: FIXED)\n      }\n    }\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: Install gatsby-transformer-sharp and gatsby-plugin-sharp\nDESCRIPTION: This command installs the `gatsby-transformer-sharp` and `gatsby-plugin-sharp` packages, which are necessary for transforming and optimizing images in Gatsby projects using the Sharp library.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-sharp/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install gatsby-transformer-sharp gatsby-plugin-sharp\n```\n\n----------------------------------------\n\nTITLE: Highlighting Lines in YAML\nDESCRIPTION: This YAML snippet illustrates how to highlight a single line and a range of lines using `highlight-line` and `highlight-range` comments.  The line containing `foo: \"highlighted\"` is highlighted individually. The lines with `baz` and `quz` are highlighted within the specified range.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-embed-snippet/README.md#_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nfoo: \"highlighted\" # highlight-line\nbar: \"not highlighted\"\n# highlight-range{1-2}\nbaz: \"highlighted\"\nquz: \"highlighted\"\n```\n\n----------------------------------------\n\nTITLE: DatoCMS API Token Environment Variable\nDESCRIPTION: This text snippet shows how to set the `DATO_API_TOKEN` environment variable in the `.env.development` file. This is necessary for the Gatsby application to authenticate with DatoCMS in the local development environment. Replace `xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx` with your actual API token.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/e-commerce-with-datocms-and-snipcart/index.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nDATO_API_TOKEN=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n```\n\n----------------------------------------\n\nTITLE: StaticQuery Component Deprecation - Before\nDESCRIPTION: This snippet demonstrates the usage of the deprecated `<StaticQuery />` component for querying data in Gatsby. It shows how to import the necessary modules, define a GraphQL query, and render the data within the component. This pattern is being replaced by `useStaticQuery`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v4-to-v5.md#_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\"\nimport { StaticQuery, graphql } from \"gatsby\"\n\nexport default function Title() {\n  return (\n    <StaticQuery\n      query={graphql`\n        query {\n          site {\n            siteMetadata {\n              title\n            }\n          }\n        }\n      `}\n      render={data => <h1>{data.site.siteMetadata.title}</h1>}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Write Current Node.js Version to .nvmrc (Shell)\nDESCRIPTION: This shell command writes the currently active Node.js version to a `.nvmrc` file. This allows the user to quickly create a `.nvmrc` file based on their local development environment.  This assumes that the `node` command is available and correctly points to the desired Node.js version.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/cloud/set-node-version.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnode -v > .nvmrc\n```\n\n----------------------------------------\n\nTITLE: GraphQL query for JSON data\nDESCRIPTION: Example GraphQL query to retrieve the data transformed by the gatsby-transformer-json plugin.  The query retrieves all nodes of type `LettersJson` and their `value` field.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-json/README.md#_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  allLettersJson {\n    edges {\n      node {\n        value\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Gatsby Plugin Emotion\nDESCRIPTION: This command installs the necessary packages for using gatsby-plugin-emotion, including the plugin itself, @emotion/react, and @emotion/styled.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-emotion/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install gatsby-plugin-emotion @emotion/react @emotion/styled\n```\n\n----------------------------------------\n\nTITLE: Deploying with AWS Profile\nDESCRIPTION: Deploys the Gatsby site using a specific AWS profile. This is useful when you have multiple AWS profiles configured on your machine. The `AWS_PROFILE` environment variable is set before running the deploy script.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/previews-deploys-hosting/deploying-to-s3-cloudfront.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nAWS_PROFILE=yourprofilename npm run deploy\n```\n\n----------------------------------------\n\nTITLE: How-To Guide Template Markdown\nDESCRIPTION: This is a template for a Gatsby How-To Guide, written in Markdown. It includes sections for an introduction, prerequisites, step-by-step directions, and additional resources. The template provides a basic structure to guide users in writing their own How-To Guides.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/contributing/docs-contributions/how-to-write-a-how-to-guide.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Do Some Task\n---\n\n## Introduction\n\nThe introductory paragraph should be a 2-3 sentence explanation of the\nmain topic and answer the following questions:\n\nWhat is the purpose of this guide? What will readers have achieved by\nfollowing the steps in this guide?\n\nWhy is this process worth doing? How will it help readers improve their\nGatsby site?\n\n## Prerequisites\n\nIf applicable, list any prerequisites to reading and understanding your\narticle.\n\nDoes the reader need to read another document first, install a particular\nplugin, or already know a certain skill? List those things here.\n\n## Directions\n\nThis section should be a step-by-step list of instructions for how readers\ncan achieve the goal.\n\n1. Do the first thing.\n2. Do the next thing.\n\nUse code blocks to show exactly what readers should type. The\nGatsby Style Guide includes tips for best practices when using code\nblocks:\nhttps://www.gatsbyjs.com/contributing/gatsby-style-guide/#format-code-blocks-inline-code-and-images\n\nIf it's a particularly long list of directions, you can split the steps into\nsections. Use subheadings to label each chunk. For example:\n\n### Step 1: Do the first thing.\n\n1. The first step of the first thing.\n2. The second step of the first thing.\n\n### Step 2: Do some other thing.\n\n1. The first step of some other thing.\n2. The second step of some other thing.\n\n## Additional Resources\n\nInclude other resources you think readers would benefit from or next steps\nthey might want to take after reading your How-To Guide. You can also\nmention any resources that helped you write the article (blog posts, outside\ntutorials, etc.).\n\nBest-case scenario, these should be high-quality, evergreen\n(not quickly outdated) resources.\n\n- Link to a blog post\n- Link to a YouTube tutorial\n- Link to an example site\n- Link to source code for a live site\n- Links to relevant plugins\n- Links to starters\n\n```\n\n----------------------------------------\n\nTITLE: Typing the data prop in a Gatsby page using PageProps\nDESCRIPTION: This code shows how to use generics with `PageProps` to type the `data` prop in a Gatsby page component. It defines a `DataProps` type and uses it as a generic for `PageProps` to provide type information for the `site` property.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/custom-configuration/typescript.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as React from \"react\"\nimport { graphql, PageProps } from \"gatsby\"\n\ntype DataProps = {\n  site: {\n    siteMetadata: {\n      title: string\n    }\n  }\n}\n\nconst IndexRoute = ({ data: { site } }: PageProps<DataProps>) => {\n  return (\n    <main>\n      <h1>{site.siteMetadata.title}</h1>\n    </main>\n  )\n}\n\nexport default IndexRoute\n\nexport const query = graphql`\n  {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: Installing the gatsby-source-etsy plugin\nDESCRIPTION: This command installs the `gatsby-source-etsy` plugin, which allows you to fetch data from the Etsy API and use it in your Gatsby site. It adds the plugin as a dependency to your project.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/sourcing-from-etsy.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install gatsby-source-etsy\n```\n\n----------------------------------------\n\nTITLE: Set Environment Variable for Page Generation (Shell)\nDESCRIPTION: Sets the `NUM_PAGES` environment variable to specify the number of pages to generate during the benchmark. This value is used by the Gatsby build process to create mock Markdown pages.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/benchmarks/md/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ export NUM_PAGES=1024\n```\n\n----------------------------------------\n\nTITLE: Gatsby Config with transformer and source plugins\nDESCRIPTION: This code snippet demonstrates how to configure `gatsby-transformer-yaml` and `gatsby-source-filesystem` in `gatsby-config.js`.  The filesystem source plugin allows Gatsby to read YAML files from a specified directory, and the transformer plugin converts the YAML data into GraphQL nodes.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/local-development/troubleshooting-common-errors.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  plugins: [\n    `gatsby-transformer-yaml`,\n    {\n      resolve: `gatsby-source-filesystem`,\n      options: {\n        path: `./src/data/`, // location of yaml files\n      },\n    },\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Page Templates in Gatsby MDX\nDESCRIPTION: This code snippet demonstrates the changes required in page templates when migrating to Gatsby Plugin MDX v4. It includes removing the import of `MDXRenderer` and using the `children` prop directly to render the MDX content, as well as removing the `body` field from the GraphQL query.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-mdx/README.md#_snippet_24\n\nLANGUAGE: diff\nCODE:\n```\nimport React from \"react\"\nimport { graphql } from \"gatsby\"\n- import { MDXRenderer } from \"gatsby-plugin-mdx\"\n\n- function PostTemplate({ data: { mdx } }) {\n+ function PostTemplate({ data: { mdx }, children }) {\n\n  return (\n    <main>\n      <h1>{mdx.frontmatter.title}</h1>\n-     <MDXRenderer>\n-       {mdx.body}\n-     </MDXRenderer>\n+     {children}\n    </main>\n  )\n}\n\n export const pageQuery = graphql`\n  query PostTemplate($id: String!) {\n    mdx(id: { eq: $id }) {\n      frontmatter {\n        title\n      }\n-     body\n    }\n  }\n`\n\nexport default PostTemplate\n```\n\n----------------------------------------\n\nTITLE: Formatting Dates with fromNow and difference functions in GraphQL\nDESCRIPTION: This GraphQL query retrieves data from `allMarkdownRemark` and formats the date using `fromNow` and `difference` functions.  It limits the results to 2 nodes for each query to improve performance and readability.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/graphql-reference.md#_snippet_21\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  one: allMarkdownRemark(\n    filter: { frontmatter: { date: { ne: null } } }\n    limit: 2\n  ) {\n    edges {\n      node {\n        frontmatter {\n          title\n          date(fromNow: true)\n        }\n      }\n    }\n  }\n  two: allMarkdownRemark(\n    filter: { frontmatter: { date: { ne: null } } }\n    limit: 2\n  ) {\n    edges {\n      node {\n        frontmatter {\n          title\n          date(difference: \"days\")\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fix: Encode space in data SVG URI in gatsby-plugin-image\nDESCRIPTION: This snippet fixes an issue where spaces in data SVG URIs were not properly encoded within the gatsby-plugin-image plugin. This ensures that SVGs with spaces in their data URIs are rendered correctly.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-image/CHANGELOG.md#_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\nEncode space in data SVG URI [#37241](https://github.com/gatsbyjs/gatsby/issues/37241) ([09ea753](https://github.com/gatsbyjs/gatsby/commit/09ea7534d23a1ab4e8983de275f4ab43ec88731b))\n```\n\n----------------------------------------\n\nTITLE: Fixing import issue - gatsby-cli JavaScript\nDESCRIPTION: This snippet addresses a broken import statement within the gatsby-cli, resolving an issue that could prevent the CLI from functioning correctly. Fixing the import ensures the CLI can properly load its dependencies.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-cli/CHANGELOG.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nFix import ([#22388](https://github.com/gatsbyjs/gatsby/issues/22388)) ([d65fb3c](https://github.com/gatsbyjs/gatsby/commit/d65fb3c))\n```\n\n----------------------------------------\n\nTITLE: Highlighting Lines of Code with Directives in JSX\nDESCRIPTION: This code demonstrates how to highlight specific lines in a JSX code block using comment directives. The `highlight-line`, `highlight-next-line`, `highlight-start`, `highlight-end`, and `highlight-range` directives are used to control which lines are highlighted. The code uses React components and form elements.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-prismjs/README.md#_snippet_12\n\nLANGUAGE: JSX\nCODE:\n```\nclass FlavorForm extends React.Component { // highlight-line\n  constructor(props) {\n    super(props);\n    this.state = {value: 'coconut'};\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {\n    // highlight-next-line\n    this.setState({value: event.target.value});\n  }\n\n  // highlight-start\n  handleSubmit(event) {\n    alert('Your favorite flavor is: ' + this.state.value);\n    event.preventDefault();\n  }\n  // highlight-end\n\n  render() {\n    return (\n      { /* highlight-range{1,4-9,12} */ }\n      <form onSubmit={this.handleSubmit}>\n        <label>\n          Pick your favorite flavor:\n          <select value={this.state.value} onChange={this.handleChange}>\n            <option value=\"grapefruit\">Grapefruit</option>\n            <option value=\"lime\">Lime</option>\n            <option value=\"coconut\">Coconut</option>\n            <option value=\"mango\">Mango</option>\n          </select>\n        </label>\n        <input type=\"submit\" value=\"Submit\" />\n      </form>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Shadowing CSS File in Gatsby Theme\nDESCRIPTION: Demonstrates shadowing a CSS file within a Gatsby theme. By creating a corresponding file in the user's `src` directory, the theme's original CSS is overridden, allowing custom styling to be applied.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/plugins-and-themes/shadowing.md#_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.bio {\n  border: 10px solid tomato;\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling WebP Sources in Gatsby Remark Images Contentful\nDESCRIPTION: This code snippet describes the feature enabling WebP sources in gatsby-remark-images-contentful. WebP is a modern image format that provides superior compression and quality compared to JPEG and PNG. This allows the plugin to generate and serve WebP versions of images for browsers that support it.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-images-contentful/CHANGELOG.md#_snippet_41\n\nLANGUAGE: none\nCODE:\n```\n- **gatsby-remark-images-contentful:** enable webp sources ([#11273](https://github.com/gatsbyjs/gatsby/issues/11273)) ([6866e76](https://github.com/gatsbyjs/gatsby/commit/6866e76)), closes [#11268](https://github.com/gatsbyjs/gatsby/issues/11268)\n```\n\n----------------------------------------\n\nTITLE: Shell Command: Cleaning Node Modules\nDESCRIPTION: These shell commands address `sharp` installation issues by deleting the `node_modules` directory and reinstalling dependencies. This ensures that the correct versions of `sharp` and its dependencies are installed.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/local-development/troubleshooting-common-errors.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n# be careful as this command will delete all files recursively in\n# the folder you provide, in this case, node_modules\nrm -rf node_modules\n\n# this command will install libraries from your package.json file\n# and place them in the node_modules folder\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Custom Tracing Example\nDESCRIPTION: This JavaScript code shows how to add custom tracing to a Gatsby plugin using the `tracing` object provided in the API implementer arguments. It demonstrates how to start a span, add tags, and finish the span, allowing you to trace specific operations within your plugin.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/performance-tracing.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nexports.sourceNodes = async ({ actions, tracing }) => {\n  const span = tracing.startSpan(`foo`)\n\n  // Perform any span operations. E.g. add a tag to your span\n  span.setTag(`bar`, `baz`)\n\n  // Rest of your plugin code\n\n  span.finish()\n}\n```\n\n----------------------------------------\n\nTITLE: Query all WordPress posts (GraphQL)\nDESCRIPTION: This GraphQL query retrieves all WordPress posts and their IDs and URIs. This is used to demonstrate querying for Posts.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-wordpress/docs/tutorials/querying-data.md#_snippet_12\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  allWpPost {\n    nodes {\n      id\n      uri\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Node and RemoteFile Interfaces using Type Builders (TS)\nDESCRIPTION: This snippet shows how to implement the Node and RemoteFile interfaces for the Asset type using Gatsby's schema.buildObjectType, providing an alternative to the SDL syntax.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/creating-a-source-plugin/part-6/index.mdx#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nschema.buildObjectType({\n  name: NODE_TYPES.Asset,\n  fields: {\n    url: `String!`,\n    alt: `String!`,\n    width: `Int!`,\n    height: `Int!`,\n  },\n  interfaces: [`Node`, `RemoteFile`],\n})\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response of Transformed Data\nDESCRIPTION: This JSON represents the successful result of the transformed YAML data based on the query. It shows the structure of a `ExampleYaml` node with the `id`, `name`, and `bio` fields populated with data from the YAML file.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/plugins-and-themes/creating-a-transformer-plugin.md#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"allExampleYaml\": {\n      \"edges\": [\n        {\n          \"node\": {\n            \"id\": \"3baa5e64-ac2a-5234-ba35-7af86746713f\",\n            \"name\": \"Jane Doe\",\n            \"bio\": \"Developer based in Somewhere, USA\"\n          }\n        },\n        {\n          \"node\": {\n            \"id\": \"2c733815-c342-5d85-aa3f-6795d0f25909\",\n            \"name\": \"John Smith\",\n            \"bio\": \"Developer based in Maintown, USA\"\n          }\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enable HTTPS with npm run develop\nDESCRIPTION: This command starts the Gatsby development server with HTTPS enabled using the `--https` flag. It leverages devcert to create and manage SSL certificates for local development.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/local-https.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm run develop -- --https\n```\n\n----------------------------------------\n\nTITLE: Support Storing Assets Locally\nDESCRIPTION: This code snippet enables the feature to store assets locally when using gatsby-source-contentful. This allows for faster access to assets and reduces dependency on external Contentful services during development.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-contentful/CHANGELOG.md#_snippet_26\n\nLANGUAGE: diff\nCODE:\n```\n([#10682](https://github.com/gatsbyjs/gatsby/issues/10682)) ([6d7bd76](https://github.com/gatsbyjs/gatsby/commit/6d7bd76))\n```\n\n----------------------------------------\n\nTITLE: Read GraphQL Schema from File (Old Way - gatsby-node.js)\nDESCRIPTION: This code shows the old way of reading a GraphQL schema definition from a `.gql` file using the `fs` module within a Gatsby plugin. This method is not recommended for Gatsby 4 and later due to bundling issues with DSG and SSR.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-source-plugin-from-v3-to-v4.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst fs = require(\"fs\")\nconst path = require(\"path\")\n\nexports.createSchemaCustomization = ({ actions }) => {\n  const { createTypes } = actions\n  const typeDefs = fs.readFileSync(\n    // .gql file with the SDL\n    path.resolve(__dirname, \"schema.gql\"),\n    \"utf8\"\n  )\n\n  createTypes(typeDefs)\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding an image using HTML\nDESCRIPTION: This snippet demonstrates how to embed an image using HTML syntax. The `src` attribute specifies the image source, and the `alt` attribute provides alternative text for accessibility.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/using-remark/src/pages/2017-01-02---responsive-images-and-iframes/index.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n&lt;img src=\"image.png\" alt=\"\"&gt;\n```\n\n----------------------------------------\n\nTITLE: Logging Correct Version in gatsby-cli JavaScript\nDESCRIPTION: This snippet fixes an issue where gatsby-cli was logging the incorrect version number. The fix ensures that gatsby-cli correctly reports its version. Accurate version logging is important for debugging and troubleshooting, as it allows developers to easily identify the version of gatsby-cli being used.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-cli/CHANGELOG.md#_snippet_31\n\nLANGUAGE: JavaScript\nCODE:\n```\n649f6d8\n```\n\n----------------------------------------\n\nTITLE: Clean Gatsby cache and public directories\nDESCRIPTION: This command wipes out Gatsby‚Äôs `.cache` and `public` directories. This is often useful when troubleshooting build issues or when you want to ensure a clean build.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/cheat-sheet.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngatsby clean\n```\n\n----------------------------------------\n\nTITLE: Fix App-Shell Path in Gatsby Offline Plugin (JavaScript)\nDESCRIPTION: This bug fix ensures that the app-shell.js file is run from the user's cache directory, enhancing compatibility with the Plug'n'Play (PNP) Node.js package manager.  This resolves issues where the app shell could not be found in certain environments.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-offline/CHANGELOG.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nRun app-shell.js from user cache directory for pnp compatibility\n```\n\n----------------------------------------\n\nTITLE: Configure Gatsby Sitemap Plugin\nDESCRIPTION: Configures the gatsby-plugin-sitemap in the gatsby-config.js file. This minimal configuration specifies the site URL and includes the plugin in the plugins array.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-sitemap/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  siteMetadata: {\n    // If you didn't use the resolveSiteUrl option this needs to be set\n    siteUrl: `https://www.example.com`,\n  },\n  plugins: [`gatsby-plugin-sitemap`]\n}\n```\n\n----------------------------------------\n\nTITLE: Update Content from Agility CMS (Shell)\nDESCRIPTION: This command updates the content of the Gatsby site from Agility CMS. It is executed using npm.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/benchmarks/source-agilitycms/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm run data-update\n```\n\n----------------------------------------\n\nTITLE: Updating lz-string dependency in gatsby-remark-code-repls\nDESCRIPTION: This snippet shows the update of the lz-string dependency to version ^1.5.0 in the gatsby-remark-code-repls package to address potential issues or improve functionality. It ensures that the plugin uses a compatible version of the lz-string library.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-code-repls/CHANGELOG.md#_snippet_0\n\nLANGUAGE: none\nCODE:\n```\nupdate dependency lz-string to ^1.5.0 for gatsby-remark-code-repls [#37857](https://github.com/gatsbyjs/gatsby/issues/37857) ([52ff154](https://github.com/gatsbyjs/gatsby/commit/52ff1543a6eb56756ff67f3315cb615b9231d4a4))\n```\n\n----------------------------------------\n\nTITLE: Configure multiple collections\nDESCRIPTION: Configures the gatsby-source-mongodb plugin to pull data from multiple MongoDB collections specified as an array.  It shows how to define an array of collection names within the `collection` option.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-mongodb/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// In your gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-source-mongodb`,\n      options: { dbName: `local`, collection: [`documents`, `vehicles`] },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Fix: Update typescript (major) in gatsby-plugin-image\nDESCRIPTION: This snippet updates the typescript to v5 (major) in the gatsby-plugin-image package. This change ensures compatibility with the latest TypeScript features and improvements.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-image/CHANGELOG.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nupdate typescript to v5 (major) [#37906](https://github.com/gatsbyjs/gatsby/issues/37906) ([3859ba6](https://github.com/gatsbyjs/gatsby/commit/3859ba6ce629e658525f858a8799b08c34c3eda5))\n```\n\n----------------------------------------\n\nTITLE: Add Gatsby Plugin JSS\nDESCRIPTION: This code snippet demonstrates how to add the `gatsby-plugin-jss` plugin to your `gatsby-config.js` file. It enables JSS support in your Gatsby project. No specific dependencies are required beyond the plugin itself.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-jss/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nplugins: [`gatsby-plugin-jss`]\n```\n\n----------------------------------------\n\nTITLE: Contributor JSON Data\nDESCRIPTION: This JSON snippet represents contributor data, including name, first name, email, and receivedSwag. It provides data for creating ContributorJson nodes in Gatsby's GraphQL schema.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/graphql-data-layer/schema-customization.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"name\": \"Doe\",\n    \"firstName\": \"Zoe\",\n    \"email\": \"zoe@example.com\",\n    \"receivedSwag\": true\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Updating Babel Monorepo in Gatsby Plugin JSS (JavaScript)\nDESCRIPTION: This commit updates the Babel monorepo in the gatsby-plugin-jss package. This ensures compatibility with the latest JavaScript features and improvements.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-jss/CHANGELOG.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nupdate babel monorepo [#31143](https://github.com/gatsbyjs/gatsby/issues/31143) ([701ab2f](https://github.com/gatsbyjs/gatsby/commit/701ab2f6690c3f1bbaf60cf572513ea566cc9ec9))\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphQL Typegen Output Path in Gatsby\nDESCRIPTION: This code snippet demonstrates how to configure the output path for the generated TypeScript types using the `typesOutputPath` option in the `gatsby-config.js` file. The path is relative to the site root. This allows developers to customize where the `gatsby-types.d.ts` file is generated.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/v4.18/index.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  graphqlTypegen: {\n    typesOutputPath: `gatsby-types.d.ts`,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Emotion and Babel Plugin\nDESCRIPTION: This command installs the @emotion/jest package and the @emotion/babel-plugin as development dependencies. These packages are essential for enabling Jest to properly handle and test Emotion-styled components.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/testing/testing-css-in-js.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev @emotion/jest @emotion/babel-plugin\n```\n\n----------------------------------------\n\nTITLE: Configuring gatsby-plugin-transition-link\nDESCRIPTION: This code adds `gatsby-plugin-transition-link` to the plugins array in `gatsby-config.js`. This step is necessary to enable the plugin in your Gatsby site.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/adding-common-features/adding-page-transitions-with-plugin-transition-link.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n    plugins: [\n      `gatsby-plugin-transition-link`\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Horizontal Theme Composition\nDESCRIPTION: Shows how multiple themes can be used together in a Gatsby site by including them in the plugins array of the site's gatsby-config.js. This allows for combining features and functionalities from different themes into a single site.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/theme-api.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  plugins: [`gatsby-theme-blog`, `gatsby-theme-notes`],\n}\n```\n\n----------------------------------------\n\nTITLE: Complete onCreateNode Implementation\nDESCRIPTION: This code snippet shows the complete `onCreateNode` implementation in `gatsby-node.js`, including importing necessary modules, checking the media type, parsing the content, and iterating through the parsed content to create new nodes using the `transformObject` helper function.  It uses `lodash` for string manipulation and generates unique IDs for each node.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/plugins-and-themes/creating-a-transformer-plugin.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst jsYaml = require(`js-yaml`)\nconst _ = require(`lodash`)\n\nasync function onCreateNode({\n  node,\n  actions, // highlight-line\n  loadNodeContent,\n  createNodeId, // highlight-line\n  createContentDigest, // highlight-line\n}) {\n  // highlight-start\n  function transformObject(obj, id, type) {\n    const yamlNode = {\n      ...obj,\n      id,\n      children: [],\n      parent: node.id,\n      internal: {\n        contentDigest: createContentDigest(obj),\n        type,\n      },\n    }\n\n    createNode(yamlNode)\n    createParentChildLink({ parent: node, child: yamlNode })\n  }\n  // highlight-end\n\n  const { createNode, createParentChildLink } = actions\n\n  if (node.internal.mediaType !== `text/yaml`) {\n    return\n  }\n\n  const content = await loadNodeContent(node)\n  const parsedContent = jsYaml.load(content)\n\n  // highlight-start\n  parsedContent.forEach((obj, i) => {\n    transformObject(\n      obj,\n      obj.id ? obj.id : createNodeId(`${node.id} [${i}] >>> YAML`),\n      _.upperFirst(_.camelCase(`${node.name} Yaml`))\n    )\n  })\n  // highlight-end\n}\n\nexports.onCreateNode = onCreateNode\n```\n\n----------------------------------------\n\nTITLE: Resulting JSON Nodes from CSV Parsing (JSON)\nDESCRIPTION: This JSON array shows the three nodes that would be created when parsing the `letters.csv` file in the default configuration. Each node represents a row from the CSV file, with the CSV headers as keys and an additional `type` field indicating the type of node.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-csv/README.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n[\n  { \"letter\": \"a\", \"value\": 65, \"type\": \"LettersCsv\" },\n  { \"letter\": \"b\", \"value\": 66, \"type\": \"LettersCsv\" },\n  { \"letter\": \"c\", \"value\": 67, \"type\": \"LettersCsv\" }\n]\n```\n\n----------------------------------------\n\nTITLE: Overriding a Layout Component\nDESCRIPTION: This JSX code snippet shows how to override a layout component in a Gatsby theme using component shadowing.  It creates a basic layout component that renders its children. By placing this component in the correct directory within the `src` folder, it shadows the original layout component of the theme, completely replacing its styles and structure.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/building-a-theme.md#_snippet_41\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\"\n\nexport default function Layout({ children }) {\n  return <>{children}</>\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Git Repository Only if it Doesn't Exist JavaScript\nDESCRIPTION: This snippet modifies gatsby-cli to only initialize a Git repository if one does not already exist. This prevents gatsby-cli from overwriting or interfering with existing Git repositories. By checking for the existence of a Git repository before initializing one, gatsby-cli avoids potential data loss or conflicts.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-cli/CHANGELOG.md#_snippet_32\n\nLANGUAGE: JavaScript\nCODE:\n```\n7ca32c2\n```\n\n----------------------------------------\n\nTITLE: Fixing Ignore Pattern in Gatsby Source GraphQL\nDESCRIPTION: This code snippet shows a bug fix related to the ignore pattern within the gatsby-source-graphql plugin. It addresses an issue where the ignore pattern needed to be wrapped in quotes to function correctly.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-graphql/CHANGELOG.md#_snippet_26\n\nLANGUAGE: diff\nCODE:\n```\nwrap ignore pattern in quotes ([#23176](https://github.com/gatsbyjs/gatsby/issues/23176)) ([7563db6](https://github.com/gatsbyjs/gatsby/commit/7563db6))\n```\n\n----------------------------------------\n\nTITLE: Setting Heroku Buildpacks\nDESCRIPTION: This snippet sets the necessary Heroku buildpacks for deploying a Gatsby site: `heroku/nodejs` for Node.js support and `heroku-buildpack-static` for serving static files. It configures the Heroku environment to handle the Gatsby build process and static asset delivery.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/previews-deploys-hosting/deploying-to-heroku.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nheroku buildpacks:set heroku/nodejs\nheroku buildpacks:add https://github.com/heroku/heroku-buildpack-static.git\n```\n\n----------------------------------------\n\nTITLE: Starting Gatsby Development Server with npm\nDESCRIPTION: These commands navigate to the project directory and start the Gatsby development server. The development server will run at `http://localhost:8000` and provide hot-reloading as changes are made to the source code.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ncd my-gatsby-site/\nnpm run develop\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query with Publish Status Filter in Gatsby\nDESCRIPTION: This code snippet demonstrates a GraphQL query used in a Gatsby `createPages` function.  The query fetches all WordPress posts but filters them to only include those with a 'publish' status. This can cause issues with Gatsby previews because previewing an unpublished post will not generate a page for it.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-wordpress/docs/features/preview.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nexports.createPages = async ({ graphql }) => {\n  const graphqlResult = await graphql(/* GraphQL */ `\n    query {\n      allWpPost(filter: { status: { eq: \"publish\" } }) {\n        edges {\n          node {\n            id\n            uri\n          }\n        }\n      }\n    }\n  `)\n}\n```\n\n----------------------------------------\n\nTITLE: Gatsby Config with TypeScript\nDESCRIPTION: This code snippet shows a basic gatsby-config.ts file written in TypeScript. It defines the site metadata and plugins. It requires the \"gatsby\" package to be installed.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/v4.9/index.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { GatsbyConfig } from \"gatsby\"\n\nconst config: GatsbyConfig = {\n  siteMetadata: {\n    title: \"Your Title\",\n  },\n  plugins: [],\n}\n\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Enabling gatsby-remark-smartypants in gatsby-config.js\nDESCRIPTION: This snippet shows how to enable the `gatsby-remark-smartypants` plugin within the `gatsby-transformer-remark` plugin in your `gatsby-config.js` file. It requires that `gatsby-transformer-remark` is already installed. The plugin will then automatically process Markdown content to replace dumb punctuation with smart punctuation.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-smartypants/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// In your gatsby-config.js\nplugins: [\n  {\n    resolve: `gatsby-transformer-remark`,\n    options: {\n      plugins: [`gatsby-remark-smartypants`],\n    },\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: HTTPS Setup Password Prompt\nDESCRIPTION: This text shows the password prompt that may appear when setting up a development SSL certificate for the first time on a machine.  This happens when devcert needs elevated permissions/sudo access.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/local-https.md#_snippet_5\n\nLANGUAGE: Text\nCODE:\n```\ninfo setting up SSL certificate (may require elevated permissions/sudo)\n\nPassword:\n```\n\n----------------------------------------\n\nTITLE: JSON Response from GraphQL Query\nDESCRIPTION: This JSON represents the response from the GraphQL query that fetches an MDX node with a hardcoded slug. It contains the data field, which includes the title from the frontmatter of the retrieved MDX node.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-6/index.mdx#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"mdx\": {\n      \"frontmatter\": {\n        \"title\": \"Another Post\"\n      }\n    }\n  },\n  \"extensions\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Placing GTM Script\nDESCRIPTION: This feature allows developers to choose where the GTM script is placed on the page, giving more control over the script's execution and potential impact on page performance.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-google-tagmanager/CHANGELOG.md#_snippet_21\n\nLANGUAGE: text\nCODE:\n```\n**gatsby-plugin-google-tagmanager:** Allow to place the GTM script ‚Ä¶ ([#13424](https://github.com/gatsbyjs/gatsby/issues/13424)) ([0b56c3b](https://github.com/gatsbyjs/gatsby/commit/0b56c3b))\n```\n\n----------------------------------------\n\nTITLE: Gatsby Starter Installation\nDESCRIPTION: This command uses the Gatsby CLI to create a new Gatsby project from a specified starter. It clones the starter repository and installs the necessary dependencies. Replace `my-wordpress-gatsby-site` with your desired project name.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-wordpress/docs/getting-started.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngatsby new my-wordpress-gatsby-site https://github.com/gatsbyjs/gatsby-starter-wordpress-blog\n```\n\n----------------------------------------\n\nTITLE: Enable Parallel Query Running Flag JavaScript\nDESCRIPTION: This code snippet shows how to enable the experimental Parallel Query Running feature in Gatsby by adding a flag to the `gatsby-config.js` file. The flag `PARALLEL_QUERY_RUNNING` is set to `true` within the `flags` object.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/v3.10/index.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  flags: {\n    PARALLEL_QUERY_RUNNING: true,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Create Root Page (gatsby-node.js)\nDESCRIPTION: This snippet creates the root page for the events theme using the 'createPages' API. It sets the 'basePath' to '/' and uses the 'createPage' action to define a page at the base path, rendering the './src/templates/events.js' component.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/building-a-theme.md#_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n// query for events and create pages\n// highlight-start\nexports.createPages = async ({ actions, graphql, reporter }) => {\n  const basePath = \"/\"\n  actions.createPage({\n    path: basePath,\n    component: require.resolve(\"./src/templates/events.js\"),\n  })\n}\n// highlight-end\n```\n\n----------------------------------------\n\nTITLE: Bug Fix: Pass proper `modules` option value to babel\nDESCRIPTION: This commit fixes an issue in gatsby-plugin-mdx where the incorrect `modules` option value was being passed to Babel. By passing the correct `modules` option, the plugin ensures proper Babel configuration for MDX transformations. This fix resolves a potential issue related to Babel module handling within the gatsby-plugin-mdx plugin.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-mdx/CHANGELOG.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ncd120ae\n```\n\n----------------------------------------\n\nTITLE: Fix: Replacing \\n with newlines for guess in www\nDESCRIPTION: This code snippet fixes an issue in the `www` package where newline characters (`\\n`) were not being properly converted to actual newlines for the 'guess' functionality. This ensures correct rendering or processing of text containing newline characters.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-core-utils/CHANGELOG.md#_snippet_6\n\n\n\n----------------------------------------\n\nTITLE: Creating a New Gatsby Site\nDESCRIPTION: This command initializes a new Gatsby site.  It prompts the user for information like the site title, project directory name, preferred language (JavaScript or TypeScript), CMS, styling tools, and additional features. It requires npm to be installed.  The output is a new Gatsby project directory with the specified configurations.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/quick-start.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm init gatsby\n```\n\n----------------------------------------\n\nTITLE: GraphQL query for retrieving data from a custom node\nDESCRIPTION: This GraphQL query retrieves the `nameWithOwner` and `url` fields from the `example` node that was created in `gatsby-node.js` using the `createNode` API.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/conceptual/data-fetching.md#_snippet_3\n\nLANGUAGE: GraphQL\nCODE:\n```\nquery {\n  example {\n    nameWithOwner\n    url\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Post Updates with GraphQL\nDESCRIPTION: This GraphQL subscription listens for changes to posts and returns the `id` and `description` fields when a post is updated. It requires the API to support GraphQL subscriptions and the client to be properly configured to receive subscription events.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/creating-source-plugins/README.md#_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nsubscription {\n  posts {\n    id\n    description\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Gatsby Link Component in JSX\nDESCRIPTION: Demonstrates the basic usage of the Gatsby `<Link>` component within a React component.  It imports the Link component from gatsby and renders a paragraph containing a link to the /blog page. Note that external links still use <a> tags.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/built-in-components/gatsby-link.md#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\"\n// highlight-next-line\nimport { Link } from \"gatsby\"\n\nconst Page = () => (\n  <div>\n    <p>\n      {/* highlight-next-line */}\n      Check out my <Link to=\"/blog\">blog</Link>!\n    </p>\n    <p>\n      {/* Note that external links still use `a` tags. */}\n      Follow me on <a href=\"https://twitter.com/gatsbyjs\">Twitter</a>!\n    </p>\n  </div>\n)\n```\n\n----------------------------------------\n\nTITLE: Fixing Clipboard on Windows for gatsby-cli JavaScript\nDESCRIPTION: This snippet fixes an issue with the `--clipboard` option on Windows for gatsby-cli. The fix ensures that the `--clipboard` option works correctly on Windows, allowing users to copy content to their clipboard as intended. This improves the cross-platform compatibility of gatsby-cli.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-cli/CHANGELOG.md#_snippet_33\n\nLANGUAGE: JavaScript\nCODE:\n```\na7383c5\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphQL Endpoint in gatsby-config.ts (TypeScript)\nDESCRIPTION: This code snippet shows how to configure a GraphQL endpoint as a plugin option in the site's gatsby-config.ts file. The `endpoint` option is passed to the plugin, making the GraphQL API URL configurable. It relies on the `plugin` and `gatsby` packages.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/creating-a-source-plugin/part-4/index.mdx#_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { GatsbyConfig } from \"gatsby\"\nimport type { IPluginOptions } from \"plugin\"\n\n// highlight-next-line\nconst GRAPHQL_ENDPOINT = `http://localhost:4000/graphql`\n\nconst config: GatsbyConfig = {\n  graphqlTypegen: true,\n  plugins: [\n    {\n      resolve: `plugin`,\n      options: {\n        // highlight-next-line\n        endpoint: GRAPHQL_ENDPOINT,\n      } satisfies IPluginOptions,\n    },\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`,\n  ],\n}\n\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Removing and Installing MDX Dependencies (Shell)\nDESCRIPTION: These shell commands demonstrate how to remove the old `@mdx-js/mdx` dependency and install the latest versions of `gatsby-plugin-mdx` and `@mdx-js/react` using npm. This is a required step during the migration from gatsby-plugin-mdx v3 to v4.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-mdx/README.md#_snippet_21\n\nLANGUAGE: Shell\nCODE:\n```\nnpm remove @mdx-js/mdx\nnpm install gatsby-plugin-mdx@latest @mdx-js/react@latest\n```\n\n----------------------------------------\n\nTITLE: Selling Digital Products with File GUID in JSX\nDESCRIPTION: This code snippet illustrates how to sell digital products by adding the `data-item-file-guid` attribute with the GUID of the uploaded file from the Snipcart dashboard.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/adding-a-shopping-cart-with-snipcart.md#_snippet_4\n\nLANGUAGE: JSX\nCODE:\n```\n<section>\n  <h2>Silver Stacking Ring</h2>\n  <p>$19.99</p>\n  <p>Wear one or seventeen! These rings are fun to mix and match.</p>\n  <button\n    class=\"snipcart-add-item\"\n    data-item-id=\"silver-stacking-ring\"\n    data-item-price=\"19.99\"\n    data-item-url=\"/\"\n    data-item-name=\"Silver Stacking Ring\"\n    <!--highlight-start-->\n    data-item-file-guid=\"your-digital-product-guid\">\n    <!-- highlight-end -->\n    Add to cart\n  </button>\n</section>\n```\n\n----------------------------------------\n\nTITLE: Deprecation: Replacing nodeModel.runQuery with nodeModel.findAll\nDESCRIPTION: This JavaScript code demonstrates replacing the deprecated `nodeModel.runQuery` with `nodeModel.findAll`. It shows equivalent code snippets using both methods for fetching multiple nodes and a single node.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v3-to-v4.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst entries = await nodeModel.runQuery({\n  type: `MyType`,\n  query: {\n    /* ... */\n  },\n  firstOnly: false,\n})\n// is the same as:\nconst { entries } = await nodeModel.findAll({\n  type: `MyType`,\n  query: {\n    /* ... */\n  },\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst node = await nodeModel.runQuery({\n  type: `MyType`,\n  query: {\n    /* ... */\n  },\n  firstOnly: true,\n})\n// is the same as:\nconst node = await nodeModel.findOne({\n  type: `MyType`,\n  query: {\n    /* ... */\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Default DataLayer Feature\nDESCRIPTION: This commit adds the ability to specify a defaultDataLayer. This allows developers to prepopulate the dataLayer with default values before GTM is initialized, enabling more comprehensive tracking from the start.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-google-tagmanager/CHANGELOG.md#_snippet_18\n\nLANGUAGE: text\nCODE:\n```\n**gatsby-plugin-google-tagmanager:** defaultDataLayer ([#11379](https://github.com/gatsbyjs/gatsby/issues/11379)) ([3e26eeb](https://github.com/gatsbyjs/gatsby/commit/3e26eeb))\n```\n\n----------------------------------------\n\nTITLE: Enable Parallel Data Sourcing in gatsby-config.js (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to enable the experimental Parallel Data Sourcing feature in Gatsby by setting the PARALLEL_SOURCING flag within the gatsby-config.js file.  Parallel data sourcing can significantly improve build times for sites with multiple source plugins by running them concurrently. The plugins array remains unchanged.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/v2.29/index.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// In your gatsby-config.js\nmodule.exports = {\n  flags: {\n    PARALLEL_SOURCING: true,\n  },\n  plugins: [], // your plugins stay the same\n}\n```\n\n----------------------------------------\n\nTITLE: Install Gatsby Markdown Plugins\nDESCRIPTION: Installs the `gatsby-source-filesystem` and `gatsby-transformer-remark` plugins using npm.  `gatsby-source-filesystem` reads files from your computer. The `gatsby-transformer-remark` plugin makes the contents of your Markdown files available to GraphQL.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/glossary/markdown.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install gatsby-source-filesystem gatsby-transformer-remark\n```\n\n----------------------------------------\n\nTITLE: Updating minor updates in packages\nDESCRIPTION: This commit updates minor updates in various packages, except react, babel, and eslint. This ensures that gatsby-link is using the latest versions of its dependencies. Issue #17716 tracks this update.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-link/CHANGELOG.md#_snippet_9\n\n\n\n----------------------------------------\n\nTITLE: Implement shouldOnCreateNode for gatsby plugins\nDESCRIPTION: This code snippet demonstrates a performance improvement by implementing the `shouldOnCreateNode` function for Gatsby plugins, including gatsby-transformer-excel.  This function allows plugins to selectively process nodes, reducing unnecessary processing and improving build times.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-excel/CHANGELOG.md#_snippet_23\n\nLANGUAGE: Text\nCODE:\n```\n- implement shouldOnCreateNode for all our plugins/benchmarks ([#27545](https://github.com/gatsbyjs/gatsby/issues/27545)) ([df914d9](https://github.com/gatsbyjs/gatsby/commit/df914d94a7c47c6082b6f165eb44dc6e15e12c7d))\n```\n\n----------------------------------------\n\nTITLE: Dependencies in Site package.json\nDESCRIPTION: Defines the dependencies within the site/package.json file. This shows gatsby, gatsby-theme-events, react, and react-dom as dependencies.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/building-a-theme.md#_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"dependencies\": {\n    \"gatsby\": \"^4.15.1\",\n    \"gatsby-theme-events\": \"*\",\n    \"react\": \"^18.1.0\",\n    \"react-dom\": \"^18.1.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Developing a Gatsby Site (Shell)\nDESCRIPTION: This command compiles and serves a development build of your Gatsby site, enabling real-time updates in the browser as you modify the source code.  It should be executed from the root directory of the Gatsby project.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/gatsby-cli.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ngatsby develop\n```\n\n----------------------------------------\n\nTITLE: Configure gatsby-transformer-documentationjs\nDESCRIPTION: This configuration adds the `gatsby-transformer-documentationjs` plugin to your `gatsby-config.js` file. It enables the plugin to process your source code and extract documentation.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-documentationjs/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nplugins: [`gatsby-transformer-documentationjs`]\n```\n\n----------------------------------------\n\nTITLE: Check Gatsby Node Lifecycle Support (JavaScript)\nDESCRIPTION: This example shows how to use `isGatsbyNodeLifecycleSupported` to check if a specific Gatsby Node lifecycle API is supported in the current Gatsby core version.  This is useful for plugins that need to support multiple Gatsby versions and conditionally use newer APIs. It imports `isGatsbyNodeLifecycleSupported` from `gatsby-plugin-utils`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-utils/README.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { isGatsbyNodeLifecycleSupported } = require(`gatsby-plugin-utils`)\n\n// only use createSchemaCustomization lifecycle only when it's available.\nif (isGatsbyNodeLifecycleSupported(`createSchemaCustomization`)) {\n  exports.createSchemaCustomization = function createSchemaCustomization({\n    actions,\n  }) {\n    // customize schema\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Ignore Pattern in Gatsby Configuration\nDESCRIPTION: This commit addresses an issue where the ignore pattern in the Gatsby configuration was not properly wrapped in quotes. Wrapping the pattern in quotes ensures that it is correctly interpreted by the system.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-styled-components/CHANGELOG.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nwrap ignore pattern in quotes ([#23176](https://github.com/gatsbyjs/gatsby/issues/23176)) ([7563db6](https://github.com/gatsbyjs/gatsby/commit/7563db6))\n```\n\n----------------------------------------\n\nTITLE: Serving a Gatsby Site for Production Testing\nDESCRIPTION: This command serves the production build of your Gatsby site, allowing you to test it before deployment. It simulates a production environment and allows you to verify the site's functionality and appearance.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-cli/README.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\ngatsby serve\n```\n\n----------------------------------------\n\nTITLE: Updating @emotion/babel-preset-css-prop Dependency\nDESCRIPTION: This snippet updates the @emotion/babel-preset-css-prop dependency to version ^10.0.14.  It addresses issue #16795. This updates a Babel preset specific to Emotion, ensuring compatibility between Emotion and Babel's transpilation process. Dependencies include Babel and Emotion.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-emotion/CHANGELOG.md#_snippet_11\n\nLANGUAGE: Other\nCODE:\n```\nupdate dependency [@emotion](https://github.com/emotion)/babel-preset-css-prop to ^10.0.14 ([#16795](https://github.com/gatsbyjs/gatsby/issues/16795)) ([82dac42](https://github.com/gatsbyjs/gatsby/commit/82dac42))\n```\n\n----------------------------------------\n\nTITLE: Simple Usage of destinationDir JavaScript\nDESCRIPTION: A simplified example showcasing the configuration of the `destinationDir` option to specify a custom output directory for copied files. It copies linked files to a custom path within the public directory.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-copy-linked-files/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  resolve: `gatsby-transformer-remark`,\n  options: {\n    plugins: [\n      {\n        resolve: \"gatsby-remark-copy-linked-files\",\n        options: {\n          destinationDir: \"path/to/dir\",\n        },\n      },\n    ],\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Installing gatsby-plugin-manifest with npm\nDESCRIPTION: This command installs the `gatsby-plugin-manifest` package as a dependency for your Gatsby project. This plugin generates a web app manifest file for PWA support.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/performance/add-a-manifest-file.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install gatsby-plugin-manifest\n```\n\n----------------------------------------\n\nTITLE: Supporting Markdown Captions in Gatsby Remark Images\nDESCRIPTION: This feature introduces support for markdownCaptions within gatsby-remark-images, specifically when used with MDX. It also includes a fix related to Remark processing, ensuring proper handling of captions for images in markdown. This change addresses issue #21188.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-remark/CHANGELOG.md#_snippet_8\n\n\n\n----------------------------------------\n\nTITLE: Using images in Markdown with relative path\nDESCRIPTION: Demonstrates how to include images in Markdown files using relative paths. The alt text is specified within the square brackets.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-images/README.md#_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n![Alt text here](./image.jpg)\n```\n\n----------------------------------------\n\nTITLE: Gatsby Build Command Output\nDESCRIPTION: This snippet shows the terminal output when running `gatsby build` in a fresh Gatsby default starter project. It illustrates the steps involved in creating a production-ready build of a Gatsby site, including optimizations like JavaScript and CSS bundling, image thumbnail generation, and static HTML page building. This output provides details on the production build process and the timing of each stage.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/conceptual/overview-of-the-gatsby-build-process.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsuccess open and validate gatsby-configs - 0.062 s\nsuccess load plugins - 0.915 s\nsuccess onPreInit - 0.021 s\nsuccess delete html and css files from previous builds - 0.030 s\nsuccess initialize cache - 0.034 s\nsuccess copy gatsby files - 0.099 s\nsuccess onPreBootstrap - 0.034 s\nsuccess source and transform nodes - 0.121 s\nsuccess Add explicit types - 0.025 s\nsuccess Add inferred types - 0.144 s\nsuccess Processing types - 0.110 s\nsuccess building schema - 0.365 s\nsuccess createPages - 0.016 s\nsuccess createPagesStatefully - 0.079 s\nsuccess onPreExtractQueries - 0.025 s\nsuccess update schema - 0.041 s\nsuccess extract queries from components - 0.333 s\nsuccess write out requires - 0.020 s\nsuccess write out redirect data - 0.019 s\nsuccess Build manifest and related icons - 0.141 s\nsuccess onPostBootstrap - 0.164 s\n‚†Ä\ninfo bootstrap finished - 6.932 s\n‚†Ä\nsuccess run static queries - 0.166 s ‚Äî 3/3 20.90 queries/second\nsuccess Generating image thumbnails ‚Äî 6/6 - 1.059 s\nsuccess Building production JavaScript and CSS bundles - 8.050 s\nsuccess Rewriting compilation hashes - 0.021 s\nsuccess run page queries - 0.034 s ‚Äî 4/4 441.23 queries/second\nsuccess Building static HTML for pages - 0.852 s ‚Äî 4/4 23.89 pages/second\ninfo Done building in 16.143999152 sec\n```\n\n----------------------------------------\n\nTITLE: Initializing Stripe with getStripe Function (JSX)\nDESCRIPTION: This code snippet initializes Stripe.js using the `loadStripe` function and caches the Stripe instance in a promise. This ensures that Stripe is only initialized once, improving performance. It is intended to be used within a React component.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/ecommerce-tutorial/index.md#_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nlet stripePromise\nconst getStripe = () => {\n  if (!stripePromise) {\n    stripePromise = loadStripe(\"< YOUR STRIPE PUBLISHABLE KEY >\")\n  }\n  return stripePromise\n}\n```\n\n----------------------------------------\n\nTITLE: Focusing Skip Link on Route Update (Gatsby Browser API)\nDESCRIPTION: This code snippet uses the onRouteUpdate browser API in gatsby-browser.js to automatically focus the skip link when navigating to a new page. It selects the element with the data-reach-skip-link attribute (added by the SkipNavLink component) and calls the focus() method. This improves accessibility by placing focus on an interactive element after navigation.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/using-reach-skip-nav/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// gatsby-browser.js\n\nexport const onRouteUpdate = ({ location, prevLocation }) => {\n  if (prevLocation !== null) {\n    const skipLink = document.querySelector(\"[data-reach-skip-link]\") //this is the query selector that comes with the <SkipNavLink> component\n    if (skipLink) {\n      skipLink.focus()\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Prismic Data with GraphQL\nDESCRIPTION: This GraphQL query retrieves all documents from the Prismic repository and returns their `__typename`. This is a basic query to verify that the Prismic data is accessible through the GraphiQL interface after configuring the Gatsby source plugin. It confirms the successful connection to the Prismic repository.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/prismic-source-graphql-tutorial.md#_snippet_3\n\nLANGUAGE: GraphQL\nCODE:\n```\n{\n  prismic {\n    _allDocuments {\n      edges {\n        node {\n          __typename\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Install Gatsby Theme Minimal Dependencies (Shell)\nDESCRIPTION: This command creates a new directory for the Gatsby site, navigates into it, initializes a new Yarn project, and then installs the Gatsby core, React, React DOM, and the gatsby-theme-minimal theme as dependencies.  This is necessary to start building a site with the theme.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/starters/gatsby-starter-theme-workspace/gatsby-theme-minimal/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmkdir my-site\ncd my-site\nyarn init\n# install gatsby-theme-minimal and it's dependencies\nyarn add gatsby react react-dom gatsby-theme-minimal\n```\n\n----------------------------------------\n\nTITLE: Install gatsby-omni-font-loader\nDESCRIPTION: This command installs the `gatsby-omni-font-loader` plugin and its peer dependency `react-helmet` using npm. The plugin allows for easy loading of web fonts in a Gatsby site.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/styling/using-web-fonts.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install gatsby-omni-font-loader react-helmet\n```\n\n----------------------------------------\n\nTITLE: YAML Author Data\nDESCRIPTION: This YAML snippet represents author data, including name, bio, and Twitter handle. It is used as a target for mapping from Markdown posts to author information in a Gatsby blog.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/config-files/gatsby-config.md#_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Kyle Mathews\n  bio: Founder @ GatsbyJS. Likes tech, reading/writing, founding things. Blogs at bricolage.io.\n  twitter: \"@kylemathews\"\n```\n\n----------------------------------------\n\nTITLE: Add global variable and LESS loader to webpack - JS\nDESCRIPTION: This code snippet demonstrates how to add a global variable using the `DefinePlugin` and configure the `less-loader` in the webpack configuration. It defines a webpack rule to handle `.less` files, using loaders for CSS extraction, CSS processing, and LESS compilation. It also defines a global variable `__DEVELOPMENT__` based on the Gatsby stage.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/custom-configuration/add-custom-webpack-config.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexports.onCreateWebpackConfig = ({\n  stage,\n  rules,\n  loaders,\n  plugins,\n  actions,\n}) => {\n  actions.setWebpackConfig({\n    module: {\n      rules: [\n        {\n          test: /\\.less$/,\n          use: [\n            // You don't need to add the matching ExtractText plugin\n            // because gatsby already includes it and makes sure it's only\n            // run at the appropriate stages, e.g. not in development\n            loaders.miniCssExtract(),\n            loaders.css({ importLoaders: 1 }),\n            // the postcss loader comes with some nice defaults\n            // including autoprefixer for our configured browsers\n            loaders.postcss(),\n            `less-loader`,\n          ],\n        },\n      ],\n    },\n    plugins: [\n      plugins.define({\n        __DEVELOPMENT__: stage === `develop` || stage === `develop-html`,\n      }),\n    ],\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: chunk-map.json Example\nDESCRIPTION: Shows a sample `chunk-map.json` file created by Gatsby. This file contains a mapping from chunk group to the core chunk for the component (JavaScript and CSS), which is used for rendering.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-code-splitting-works.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  \"app\":[\"/app-2e49587d85e03a033f58.js\"],\n  \"component---src-blog-2-js\": [\n    \"/component---src-blog-2-js-cebc3ae7596cbb5b0951.css\",\n    \"/component---src-blog-2-js-860f9fbc5c3881586b5d.js\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using `import` instead of `fs` in SSR (gatsby-ssr.js)\nDESCRIPTION: Using `fs` in `gatsby-ssr.js` disables incremental builds. This code demonstrates how to replace `fs` with `import` and `raw-loader` to inline styles, enabling incremental builds.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v2-to-v3.md#_snippet_36\n\nLANGUAGE: diff\nCODE:\n```\nimport * as React from \"react\"\n-import * as fs from \"fs\"\n-import * as path from \"path\"\n+import stylesToInline from \"!!raw-loader!/some-auto-generated.css\"\n\nexport function onRenderBody({ setHeadComponents }) {\n-  const stylesToInline = fs.readFileSync(path.join(process.cwd(), `some-auto-generated.css`))\n  setHeadComponents(\n    <style\n      dangerouslySetInnerHTML={{\n        __html: stylesToInline,\n      }}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Route Lookup in Gatsby Plugin\nDESCRIPTION: This code snippet addresses an issue in gatsby-plugin-preload-fonts related to looking up routes with and without trailing slashes. It fixes an issue where routes without trailing slashes were not being correctly matched. This fix was introduced in version 1.0.36.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-preload-fonts/CHANGELOG.md#_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\n**gatsby-plugin-preload-fonts:** lookup routes with and without trailing slash ([#21890](https://github.com/gatsbyjs/gatsby/issues/21890)) ([6475398](https://github.com/gatsbyjs/gatsby/commit/6475398)), closes [#21814](https://github.com/gatsbyjs/gatsby/issues/21814)\n```\n\n----------------------------------------\n\nTITLE: Fetching Latest Changes from Gatsby\nDESCRIPTION: Fetches the latest changes from the Gatsby repository's master branch using the upstream remote. This downloads the commits and branches from the upstream repository without merging them into your local branch.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/contributing/how-to-open-a-pull-request.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ngit fetch upstream master\n```\n\n----------------------------------------\n\nTITLE: CSS for Command Line Prompt\nDESCRIPTION: This CSS snippet customizes the appearance of the command-line prompt for shell code blocks. It sets the color, content, display properties, and padding to style the prompt.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-prismjs/README.md#_snippet_9\n\nLANGUAGE: css\nCODE:\n```\n.command-line-prompt > span:before {\n  color: #999;\n  content: \" \";\n  display: block;\n  padding-right: 0.8em;\n}\n\n/* Prompt for all users */\n.command-line-prompt > span[data-user]:before {\n  content: \"[\" attr(data-user) \"@\" attr(data-host) \"] $\";\n}\n\n/* Prompt for root */\n.command-line-prompt > span[data-user=\"root\"]:before {\n  content: \"[\" attr(data-user) \"@\" attr(data-host) \"] #\";\n}\n\n.command-line-prompt > span[data-prompt]:before {\n  content: attr(data-prompt);\n}\n```\n\n----------------------------------------\n\nTITLE: Using location.key for scroll behavior in gatsby-react-router-scroll (JavaScript)\nDESCRIPTION: This commit uses `location.key` for scroll behaviors. This change enhances scroll restoration by correctly tracking the scroll position for individual entries in the React Router history, addressing issues where the scroll position wasn't being correctly restored when navigating back and forth.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-react-router-scroll/CHANGELOG.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\n**scroll:** use location.key for scroll behaviours ([#12403](https://github.com/gatsbyjs/gatsby/issues/12403)) ([853ceb9](https://github.com/gatsbyjs/gatsby/commit/853ceb9)), closes [/github.com/taion/scroll-behavior/issues/135#issuecomment-468962628](https://github.com/gatsbyjs/gatsby/issues/issuecomment-468962628) [#12390](https://github.com/gatsbyjs/gatsby/issues/12390)\n```\n\n----------------------------------------\n\nTITLE: Configure gatsby-source-filesystem with gatsby-transformer-documentationjs\nDESCRIPTION: This configures `gatsby-source-filesystem` to point to your source code directory and also includes `gatsby-transformer-documentationjs`. This allows the transformer to extract documentation from the specified files.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-documentationjs/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nplugins: [\n  `gatsby-transformer-documentationjs`,\n  {\n    resolve: `gatsby-source-filesystem`,\n    options: {\n      name: `source`,\n      path: `${__dirname}/../src/`,\n    },\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Adding Benchmark Reporting Plugin to gatsby-config.js\nDESCRIPTION: This code snippet demonstrates how to add the `gatsby-plugin-benchmark-reporting` plugin to your `gatsby-config.js` file.  It simply includes the plugin name in the `plugins` array. This plugin then handles the reporting of benchmark results to either the console or a remote endpoint if configured with the `BENCHMARK_REPORTING_URL` environment variable.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-benchmark-reporting/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  plugins: [\"gatsby-plugin-benchmark-reporting\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Updating createRemoteFileNode args in gatsby-source-filesystem\nDESCRIPTION: This commit updates the arguments of `createRemoteFileNode` to address issue #35422 and fixes issue #35363 in the gatsby-source-filesystem package. The update likely modifies the parameters passed to the function for creating remote file nodes.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-filesystem/CHANGELOG.md#_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: GraphQL Query with Image Options\nDESCRIPTION: GraphQL query demonstrating the configuration of image options within the `gatsbyImageData` resolver. It sets the width, placeholder, and formats for the image. These options control the image's appearance and optimization.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-image/README.md#_snippet_6\n\nLANGUAGE: GraphQL\nCODE:\n```\nquery {\n  blogPost(id: { eq: $Id }) {\n    title\n    body\n    author\n    avatar {\n      childImageSharp {\n        gatsbyImageData(\n          width: 200\n          placeholder: BLURRED\n          formats: [AUTO, WEBP, AVIF]\n        )\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Match Plugin Option to gatsby-plugin-feed\nDESCRIPTION: This feature adds a `match` plugin option to `gatsby-plugin-feed`, allowing users to specify which files should be included in the feed based on a regular expression.  This enables fine-grained control over the content included in the feed. This feature was added in version 2.2.1.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-feed/CHANGELOG.md#_snippet_15\n\n\n\n----------------------------------------\n\nTITLE: Creating a New Gatsby Site\nDESCRIPTION: Creates a new Gatsby site using the default starter. This command initializes a basic Gatsby project in a directory named `gatsby-site`. The command downloads and installs the necessary dependencies and files to set up a new Gatsby project.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/sourcing-from-graphcms.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngatsby new gatsby-site https://github.com/gatsbyjs/gatsby-starter-default\n```\n\n----------------------------------------\n\nTITLE: Starting the Development Server with Environment Variables\nDESCRIPTION: These commands navigate to the example directory, install the necessary dependencies using npm, and then start the Gatsby development server.  Ensure that the required Airtable API key and database ID are available as environment variables during development (e.g., defined in a `.env.development` file).\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/functions-airtable-form/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncd examples/functions-airtable-form\nnpm install\nnpm run develop\n```\n\n----------------------------------------\n\nTITLE: Wrapping ignore pattern in quotes\nDESCRIPTION: This commit addresses an issue where an ignore pattern was not properly wrapped in quotes. Wrapping the ignore pattern in quotes ensures that the pattern is correctly interpreted by the underlying tooling, preventing unexpected behavior during file processing.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-prismjs/CHANGELOG.md#_snippet_14\n\n\n\n----------------------------------------\n\nTITLE: Bumping Node Min Version (JavaScript)\nDESCRIPTION: This snippet bumps the minimum required Node.js version to 10.13.0. This change ensures that the package utilizes features and improvements available in newer Node.js versions, potentially enhancing performance or security.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-sharp/CHANGELOG.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n83d681a\n```\n\n----------------------------------------\n\nTITLE: Install Gatsby Plugin Sharp (Lazy Images)\nDESCRIPTION: This command installs a special version of `gatsby-plugin-sharp` which implements lazy image processing. Image processing only occurs when a page is requested, which speeds up the local development experience, especially for sites with many images.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/v2.27/index.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpm install gatsby-plugin-sharp@lazy-images\n```\n\n----------------------------------------\n\nTITLE: Feature: Bump node min version to 10.13.0\nDESCRIPTION: This feature bumps the minimum required Node.js version to 10.13.0 for the Gatsby project. This ensures compatibility with newer JavaScript features and APIs.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-facebook-analytics/CHANGELOG.md#_snippet_3\n\nLANGUAGE: N/A\nCODE:\n```\n**gatsby:** bump node min version to 10.13.0 ([#22400](https://github.com/gatsbyjs/gatsby/issues/22400)) ([83d681a](https://github.com/gatsbyjs/gatsby/commit/83d681a))\n```\n\n----------------------------------------\n\nTITLE: Ensuring Compatibility with Mini CSS Extract Plugin\nDESCRIPTION: This fix resolves compatibility issues between the gatsby-plugin-postcss and the mini-css-extract-plugin.  Ensures correct integration of the plugin and prevents unexpected behavior.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-postcss/CHANGELOG.md#_snippet_12\n\n\n\n----------------------------------------\n\nTITLE: Using useEffect Hook for Browser Globals (React)\nDESCRIPTION: This snippet illustrates how to use the `useEffect` hook in a React function component to safely access browser globals, ensuring the code only runs in the browser after the component has mounted, preventing build-time errors in Gatsby.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/porting-from-create-react-app-to-gatsby.md#_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\"\n\nconst Foo = () => {\n  window.alert(\"This will break the build\")\n  return <span>Bar</span>\n}\n\nexport default Foo\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\"\n\nconst Foo = () => {\n  React.useEffect(() => {\n    window.alert(\"This won't break the build\")\n  })\n  return <span>Bar</span>\n}\n\nexport default Foo\n```\n\n----------------------------------------\n\nTITLE: Passing Layout Information in gatsby-node.js\nDESCRIPTION: This code snippet shows how to use `onCreatePage` in `gatsby-node.js` to add a `layout` property to the page context. This allows you to specify different layouts for different pages.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-layout/README.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nexports.onCreatePage = ({ page, actions }) => {\n  const { createPage } = actions\n\n  if (page.path.match(/special-page/)) {\n    page.context.layout = \"special\"\n    createPage(page)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Feature: Dart Sass Support in Gatsby\nDESCRIPTION: This commit adds support for Dart Sass within gatsby-plugin-sass.  Dart Sass is a faster and more feature-rich implementation of Sass, offering improved performance and compatibility with newer Sass features.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-sass/CHANGELOG.md#_snippet_13\n\n\n\n----------------------------------------\n\nTITLE: Prevent Image and File Sourcing in Gatsby\nDESCRIPTION: Illustrates how to prevent Gatsby from fetching any images or files from WordPress, which can improve build times for large sites with many images in HTML fields. It disables static file creation, Gatsby Image usage in HTML, and MediaItem file node creation.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-wordpress/docs/features/media-item-processing.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n    resolve: `gatsby-source-wordpress`,\n    options: {\n        url: process.env.WPGRAPHQL_URL,\n        html: {\n            createStaticFiles: false,\n            useGatsbyImage: false,\n        },\n        type: {\n            MediaItem: { createFileNodes: false },\n        },\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Developing a Gatsby Site with Network Access\nDESCRIPTION: This command starts the Gatsby development server with a host configuration that allows access from other devices on the same network. The `-H 0.0.0.0` option specifies that the server should listen on all available network interfaces.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-cli/README.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ngatsby develop -H 0.0.0.0\n```\n\n----------------------------------------\n\nTITLE: Using Node API Helpers in gatsby-node.js\nDESCRIPTION: Demonstrates how to access and use the API helpers provided in Gatsby's Node APIs, specifically within the `createPages` function. It shows the initial argument object passed to the function, containing helpers like `actions` and `reporter`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/config-files/node-api-helpers.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nexports.createPages = gatsbyNodeHelpers => {\n  const { actions, reporter } = gatsbyNodeHelpers\n  // use helpers\n}\n```\n\n----------------------------------------\n\nTITLE: Chore: Update semver in gatsby-plugin-image\nDESCRIPTION: This snippet represents a chore update for the semver dependency. It involves updating semver in the gatsby-plugin-image package.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-image/CHANGELOG.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nupdate semver [#38171](https://github.com/gatsbyjs/gatsby/issues/38171) ([208cdef](https://github.com/gatsbyjs/gatsby/commit/208cdef13f6488251ba1810a57a1e28c38635631))\n```\n\n----------------------------------------\n\nTITLE: Updating Babel Monorepo\nDESCRIPTION: This commit updates the babel monorepo to the latest version. This keeps the babel dependencies up to date.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-cxs/CHANGELOG.md#_snippet_8\n\n\n\n----------------------------------------\n\nTITLE: Reading and Setting State with Context\nDESCRIPTION: This component demonstrates how to use `ContextConsumer` to both read and set state from the context. Clicking the div toggles the `menuOpen` state.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-layout/README.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport ContextConsumer from \"./Context\"\n\nconst ComponentThatChangeState = () => (\n  <ContextConsumer>\n    {({ data, set }) => (\n      <div onClick={() => set({ menuOpen: !data.menuOpen })}>\n        {data.menuOpen ? `Opened Menu` : `Closed Menu`}\n      </div>\n    )}\n  </ContextConsumer>\n)\n```\n\n----------------------------------------\n\nTITLE: Installing gatsby-source-sanity Package\nDESCRIPTION: This command installs the gatsby-source-sanity plugin from npm, allowing you to fetch data from a Sanity.io CMS and integrate it into your Gatsby site.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/sourcing-from-sanity.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install gatsby-source-sanity\n```\n\n----------------------------------------\n\nTITLE: Bumping Potrace Version (JavaScript)\nDESCRIPTION: This snippet updates the potrace dependency to a newer version. This update might include bug fixes, performance improvements, or new features in the potrace library, enhancing the overall functionality of gatsby-transformer-sharp.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-sharp/CHANGELOG.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n7a8f016\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query Example\nDESCRIPTION: Demonstrates how to query the data transformed from Excel using GraphQL.  The `allLettersXlsxSheet1` query retrieves all nodes of the specified type.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-excel/README.md#_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  allLettersXlsxSheet1 {\n    edges {\n      node {\n        letter\n        value\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Import useStaticQuery and GraphQL (events.js)\nDESCRIPTION: This snippet imports the necessary modules from Gatsby to perform static queries. It imports 'graphql' and 'useStaticQuery' from the 'gatsby' package to fetch data during build time.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/building-a-theme.md#_snippet_25\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\"\n// highlight-next-line\nimport { graphql, useStaticQuery } from \"gatsby\"\n\nconst EventsTemplate = () => <p>TODO: Build the events page template</p>\n\nexport default EventsTemplate\n```\n\n----------------------------------------\n\nTITLE: Using the Slice placeholder in layout.js\nDESCRIPTION: This code snippet shows how to use the `<Slice>` placeholder in a layout component.  The `alias` prop corresponds to the `id` specified when creating the slice in `gatsby-node.js`. This tells Gatsby where to insert the pre-built slice's HTML.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/v5.0/index.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Slice } from \"gatsby\"\nimport { Footer } from \"./footer\"\n\nexport const DefaultLayout = ({ children, headerClassName }) => {\n  return (\n    <div className={styles.defaultLayout} />\n      <Slice alias=\"header\" className={headerClassName} />\n      {children}\n      <Footer />\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Applying patches for v5 in gatsby-transformer-asciidoc\nDESCRIPTION: This commit applies necessary patches for v5 to the `gatsby-transformer-asciidoc` package. It addresses issue #36796 by applying a specific commit that resolves compatibility issues with v5.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-asciidoc/CHANGELOG.md#_snippet_4\n\nLANGUAGE: patch\nCODE:\n```\napply patches for v5 [#36796](https://github.com/gatsbyjs/gatsby/issues/36796) ([25f79b6](https://github.com/gatsbyjs/gatsby/commit/25f79b6c3719fdf09584ade620a05c66ba2a697c))\n```\n\n----------------------------------------\n\nTITLE: Installing gatsby-remark-images and gatsby-plugin-sharp\nDESCRIPTION: Installs the gatsby-remark-images plugin along with gatsby-plugin-sharp which is a dependency. This command uses npm to install the packages.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-images/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install gatsby-remark-images gatsby-plugin-sharp\n```\n\n----------------------------------------\n\nTITLE: Installing gatsby-source-shopify\nDESCRIPTION: Installs the gatsby-source-shopify plugin and its peer dependency, gatsby-plugin-image, using npm. This is a necessary step to fetch data from Shopify and use images in your Gatsby site.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-shopify/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install gatsby-source-shopify gatsby-plugin-image\n```\n\n----------------------------------------\n\nTITLE: Simple React Component\nDESCRIPTION: Illustrates a basic React component named `Greeting` that returns a 'Hello world!' heading. This shows the structure of a React component as a function returning a React element.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-2/index.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst Greeting = () => {\n  return <h1>Hello world!</h1>\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Storybook main.js Configuration\nDESCRIPTION: This is an example of a complete `.storybook/main.js` file which configures Storybook to work with Gatsby, including transpiling Gatsby modules, webpack 5 support, excluding core-js, removing graphql queries and specifying story locations. It sets up the environment for visual testing of Gatsby components within Storybook.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/testing/visual-testing-with-storybook.md#_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nconst React = require(\"react\");\n\nmodule.exports = {\n  // You will want to change this to wherever your Stories will live\n  stories: [\"../src/**/*.stories.mdx\", \"../src/**/*.stories.@(js|jsx|ts|tsx)\"],\n  addons: [\"@storybook/addon-links\", \"@storybook/addon-essentials\"],\n  framework: \"@storybook/react\",\n  // highlight-start\n  core: {\n    builder: \"webpack5\",\n  },\n  webpackFinal: async config => {\n    // Transpile Gatsby module because Gatsby includes un-transpiled ES6 code.\n    config.module.rules[0].exclude = [/node_modules\\/(?!(gatsby|gatsby-script)\\/)/]\n\n    // Use correct react-dom depending on React version.\n    if (parseInt(React.version) <= 18) {\n      config.externals = [\"react-dom/client\"];\n    }\n\n    // Remove core-js to prevent issues with Storybook\n    config.module.rules[0].exclude= [/core-js/]\n    // Use babel-plugin-remove-graphql-queries to remove static queries from components when rendering in storybook\n    config.module.rules[0].use[0].options.plugins.push(\n      require.resolve(\"babel-plugin-remove-graphql-queries\")\n    )\n\n    config.resolve.mainFields=[\"browser\", \"module\", \"main\"]\n    return config\n  },\n  // highlight-end\n}\n```\n\n----------------------------------------\n\nTITLE: Gatsby SSR Configuration with TypeScript\nDESCRIPTION: Illustrates how to use TypeScript in the `gatsby-ssr.tsx` file. It imports React and the `GatsbySSR` type from the `gatsby` package. The `wrapPageElement` function, typed as `GatsbySSR[\"wrapPageElement\"]`, is used to wrap each page element within a simple div with a heading.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/v4.8/index.md#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from \"react\"\nimport { GatsbySSR } from \"gatsby\"\n\nexport const wrapPageElement: GatsbySSR[\"wrapPageElement\"] = ({ element }) => {\n  return (\n    <div>\n      <h1>Hello World</h1>\n      {element}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Install latest React version with legacy-peer-deps (Shell)\nDESCRIPTION: Installs the latest versions of React and React DOM using npm with the `--legacy-peer-deps` flag, which is needed for npm versions 7 and above to handle peer dependency conflicts during installation.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v4-to-v5.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install react@latest react-dom@latest --legacy-peer-deps\n```\n\n----------------------------------------\n\nTITLE: Gatsby Config in ESM\nDESCRIPTION: This code shows the migrated `gatsby-config.mjs` using ES Module syntax.  It uses `import` instead of `require` and includes the necessary ESM-compatible replacements for `__dirname` and `require.resolve`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/custom-configuration/es-modules.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { createRequire } from \"module\"\nimport { dirname } from \"path\"\nimport { fileURLToPath } from \"url\"\nimport remarkGfm from \"remark-gfm\"\nimport { siteUrl } from \"./defaults.mjs\"\n\nconst __dirname = dirname(fileURLToPath(import.meta.url))\nconst require = createRequire(import.meta.url)\n\nconst config = {\n  siteMetadata: {\n    title: `Using ESM`,\n    siteUrl,\n  },\n  plugins: [\n    {\n      resolve: `gatsby-source-filesystem`,\n      options: {\n        name: `posts`,\n        path: `${__dirname}/content/posts/`,\n      },\n    },\n    {\n      resolve: require.resolve(\"./local-plugin-with-path\"),\n      options: {},\n    },\n    {\n      resolve: `gatsby-plugin-mdx`,\n      options: {\n        mdxOptions: {\n          remarkPlugins: [remarkGfm],\n        },\n      },\n    },\n  ],\n}\n\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Configuring gatsby-source-wordpress Plugin\nDESCRIPTION: This JavaScript code configures the `gatsby-source-wordpress` plugin within the `gatsby-config.js` file. It specifies the WordPress site's base URL, protocol, and other options necessary for Gatsby to fetch data correctly, including whether the site is hosted on WordPress.com and whether to use ACF data.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/wordpress-image-tutorial.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  siteMetadata: {\n    title: \"Gatsby WordPress Tutorial\",\n  },\n  plugins: [\n    // https://public-api.wordpress.com/wp/v2/sites/gatsbyjsexamplewordpress.wordpress.com/pages/\n    /*\n     * Gatsby's data processing layer begins with ‚Äúsource‚Äù\n     * plugins. Here the site sources its data from WordPress.\n     */\n    // highlight-start\n    {\n      resolve: `gatsby-source-wordpress`,\n      options: {\n        /*\n         * The base URL of the WordPress site without the trailingslash and the protocol. This is required.\n         * Example : 'dev-gatbsyjswp.pantheonsite.io' or 'www.example-site.com'\n         */\n        baseUrl: `dev-gatbsyjswp.pantheonsite.io`,\n        // The protocol. This can be http or https.\n        protocol: `http`,\n        // Indicates whether the site is hosted on wordpress.com.\n        // If false, then the assumption is made that the site is self hosted.\n        // If true, then the plugin will source its content on wordpress.com using the JSON REST API V2.\n        // If your site is hosted on wordpress.com, then set this to true.\n        hostingWPCOM: false,\n        // If useACF is true, then the source plugin will try to import the WordPress ACF Plugin contents.\n        // This feature is untested for sites hosted on WordPress.com\n        useACF: true,\n      },\n    },\n    // highlight-end\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Using createRemoteFileNode with explicit file extension and name\nDESCRIPTION: Illustrates how to use `createRemoteFileNode` with explicit `ext` and `name` parameters, which is necessary when the remote URL does not contain a file extension.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-filesystem/README.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\ncreateRemoteFileNode({\n  // The source url of the remote file\n  url: `https://example.com/a-file-without-an-extension`,\n  parentNodeId: node.id,\n  getCache,\n  createNode,\n  createNodeId,\n  // if necessary!\n  ext: `.jpg`,\n  name: `image`,\n})\n```\n\n----------------------------------------\n\nTITLE: Installing gatsby-plugin-catch-links with npm\nDESCRIPTION: This command installs the gatsby-plugin-catch-links package as a dependency to your Gatsby project.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-catch-links/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install gatsby-plugin-catch-links\n```\n\n----------------------------------------\n\nTITLE: Install Jaeger Client Dependency (npm)\nDESCRIPTION: This command adds the Jaeger client library to your project using npm. The Jaeger client is used to send tracing data to a Jaeger instance for analysis.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/performance-tracing.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install jaeger-client\n```\n\n----------------------------------------\n\nTITLE: data.json structure in JavaScript\nDESCRIPTION: This code illustrates the structure of the `data.json` file, which includes the contents of `pages.json` and the Redux `jsonDataPaths`.  It maps jsonNames to the actual data paths for loading JSON results.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/write-pages.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  pages: [\n    {\n        \"componentChunkName\": \"component---src-blog-2-js\",\n        \"jsonName\": \"blog-2-c06\",\n        \"path\": \"/blog/2\"\n    },\n    // more pages\n ],\n\n // jsonName -> dataPath\n dataPaths: {\n   \"blog-2-c06\":\"952/path---blog-2-c06-meTS6Okzenz0aDEeI6epU4DPJuE\",\n   // more pages\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing nprogress with accessible-nprogress in Gatsby\nDESCRIPTION: This commit replaces the nprogress library with accessible-nprogress in the gatsby-plugin-nprogress package. accessible-nprogress provides an accessible loading indicator, enhancing the user experience for users with disabilities.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-nprogress/CHANGELOG.md#_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\nReplace `nprogress` with `accessible-nprogress` [#34038](https://github.com/gatsbyjs/gatsby/issues/34038) ([3f65d17](https://github.com/gatsbyjs/gatsby/commit/3f65d17d17aa17a3253abfe00c6521910b48e4b7))\n```\n\n----------------------------------------\n\nTITLE: Update babel monorepo\nDESCRIPTION: This snippet demonstrates a chore update for the babel monorepo dependency within the gatsby-plugin-react-css-modules package. It likely updates the babel dependencies to resolve issues or improve compatibility.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-react-css-modules/CHANGELOG.md#_snippet_5\n\nLANGUAGE: Chores\nCODE:\n```\n- update babel monorepo [#27528](https://github.com/gatsbyjs/gatsby/issues/27528) ([539dbb0](https://github.com/gatsbyjs/gatsby/commit/539dbb09166e346a6cee568973d2de3d936e8ef3))\n```\n\n----------------------------------------\n\nTITLE: File System Route API - General Availability\nDESCRIPTION: This commit announces the general availability of the File System Route API in the gatsby-plugin-page-creator. This API allows developers to define routes based on the file system structure, simplifying the process of creating complex websites with dynamic content.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-page-creator/CHANGELOG.md#_snippet_28\n\nLANGUAGE: TEXT\nCODE:\n```\n07eeb2e\n```\n\n----------------------------------------\n\nTITLE: Fixing mapPostsToTagsCategories Error in gatsby-source-wordpress\nDESCRIPTION: This commit addresses a bug in gatsby-source-wordpress related to `mapPostsToTagsCategories`. The fix involves adding an undefined check to prevent the error from occurring. This ensures the code handles cases where data might be missing.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-wordpress/CHANGELOG.md#_snippet_5\n\nLANGUAGE: Commit Message\nCODE:\n```\nad646d6\n```\n\n----------------------------------------\n\nTITLE: Creating a new Gatsby site\nDESCRIPTION: This command uses the Gatsby CLI to create a new Gatsby site named 'gatsby-example-site'. This command bootstraps a new Gatsby project with the default starter template.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/e2e-tests/contentful/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ngatsby new gatsby-example-site\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query with gatsby-transformer-sharp\nDESCRIPTION: This GraphQL query demonstrates how to retrieve SQIP data URI along with the standard fluid image data using gatsby-transformer-sharp. It requests a SQIP version with specified parameters and fluid image with 'noBase64' fragment.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-sqip/README.md#_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nimage {\n  sqip(numberOfPrimitives: 12, blur: 12, width: 256, height: 256) {\n    dataURI\n  },\n  fluid(maxWidth: 400, maxHeight: 400) {\n    ...GatsbyImageSharpFluid_noBase64\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Missing Fields to Asset Node (TypeScript)\nDESCRIPTION: This snippet extends the `createAssetNode` function to include the missing fields required by `IRemoteImageNodeInput`. It adds `url`, `mimeType`, `filename`, `width`, `height`, `placeholderUrl`, and `alt` properties to the `assetNode` object, pulling their values from the input `data`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/creating-a-source-plugin/part-6/index.mdx#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nexport function createAssetNode(\n  gatsbyApi: SourceNodesArgs,\n  data: IPostImageInput\n) {\n  const id = gatsbyApi.createNodeId(`${NODE_TYPES.Asset}-${data.url}`)\n\n  const assetNode = {\n    id,\n    // highlight-start\n    url: data.url,\n    mimeType: `image/jpg`,\n    filename: data.url,\n    width: data.width,\n    height: data.height,\n    placeholderUrl: `${data.url}&w=%width%&h=%height%`,\n    alt: data.alt,\n    // highlight-end\n    parent: null,\n    children: [],\n    internal: {\n      type: NODE_TYPES.Asset,\n      contentDigest: gatsbyApi.createContentDigest(data),\n    },\n  } satisfies IRemoteImageNodeInput\n\n  gatsbyApi.actions.createNode(assetNode)\n}\n```\n\n----------------------------------------\n\nTITLE: Updating README instructions for gatsby-plugin-feed\nDESCRIPTION: This code snippet represents a chore that updates the README file with clearer instructions. The update likely improves the usability of the `gatsby-plugin-feed` plugin by providing more straightforward and understandable instructions for installation, configuration, and usage. This helps users effectively integrate the plugin into their Gatsby projects.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-feed/CHANGELOG.md#_snippet_3\n\nLANGUAGE: Markdown\nCODE:\n```\nUpdate README with clearer instructions [#37930](https://github.com/gatsbyjs/gatsby/issues/37930) ([4a1b2ce](https://github.com/gatsbyjs/gatsby/commit/4a1b2ce278d08bd6b473e891dab588efc51c9f63))\n```\n\n----------------------------------------\n\nTITLE: GraphQL: Querying the Remote Schema (GraphQL)\nDESCRIPTION: Demonstrates how to query the remote GraphQL schema using the field names defined in the gatsby-config.js.  This allows you to access the remote data within your Gatsby GraphQL queries.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-graphql/README.md#_snippet_4\n\nLANGUAGE: GraphQL\nCODE:\n```\n{\n  # This is the fieldName you've defined in the config\n  swapi {\n    allSpecies {\n      name\n    }\n  }\n  github {\n    viewer {\n      email\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implement shouldOnCreateNode for Performance Improvement\nDESCRIPTION: This snippet relates to a performance improvement in the gatsby-transformer-pdf plugin. It implements `shouldOnCreateNode` which potentially optimizes node creation by determining if a node should be processed based on its content or other criteria. This prevents unnecessary processing and enhances overall build performance.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-pdf/CHANGELOG.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n([#27545](https://github.com/gatsbyjs/gatsby/issues/27545)) ([df914d9](https://github.com/gatsbyjs/gatsby/commit/df914d94a7c47c6082b6f165eb44dc6e15e12c7d))\n```\n\n----------------------------------------\n\nTITLE: Running global-graphql-calls codemod\nDESCRIPTION: This command executes the `global-graphql-calls` codemod, which adds a `graphql` import statement to files that use the `graphql` tag function. It addresses the change from Gatsby v1 to v2 where the `graphql` tag function requires an explicit import.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-codemods/README.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\nnpx gatsby-codemods global-graphql-calls <filepath>\n```\n\n----------------------------------------\n\nTITLE: Install Gatsby v4 using npm\nDESCRIPTION: Installs the latest version of Gatsby using npm. If npm version 7 or higher is used, the `--legacy-peer-deps` flag might be necessary to resolve peer dependency issues.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v3-to-v4.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install gatsby@latest\n```\n\n----------------------------------------\n\nTITLE: Importing Katex CSS\nDESCRIPTION: Import the katex.min.css file to ensure that the formulas are rendered correctly. This is a required step to style the KaTeX output.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-katex/README.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(`katex/dist/katex.min.css`)\n```\n\n----------------------------------------\n\nTITLE: Improving remote file fetching in gatsby-source-filesystem\nDESCRIPTION: This commit improves the `fetch-remote-file` functionality, addressing issue #34758 in the gatsby-source-filesystem package. These improvements may include enhanced error handling, performance optimization, or better support for various remote file types.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-filesystem/CHANGELOG.md#_snippet_9\n\n\n\n----------------------------------------\n\nTITLE: Installing gatsby-source-flotiq plugin\nDESCRIPTION: This command uses npm to install the `gatsby-source-flotiq` plugin.  This plugin is required to pull data from Flotiq CMS into a Gatsby site.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/sourcing-from-flotiq.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install gatsby-source-flotiq\n```\n\n----------------------------------------\n\nTITLE: Editing Currency Symbol in index.js with JSX\nDESCRIPTION: This code snippet shows how to find the product price in `src/pages/index.js` and change it to display the desired currency symbol within the JSX structure.  The `product.price` is rendered within a div with the class `Product__price`. It assumes you have JSX setup and React components configured. Changing the `$` to another symbol would change the displayed currency symbol.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/e-commerce-with-datocms-and-snipcart/index.md#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<div className=\"Product__price\">${product.price}</div>\n```\n\n----------------------------------------\n\nTITLE: Upgrading Sharp version JavaScript\nDESCRIPTION: This snippet upgrades the Sharp dependency to version 0.32.6. Sharp is a high-speed Node.js module for image processing, converting large images to smaller, web-friendly JPEG, PNG, WebP and AVIF formats. The upgrade provides the plugin with the latest image processing capabilities and bug fixes.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-images-contentful/CHANGELOG.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nupgrade sharp to latest v0.32.6 [#38374](https://github.com/gatsbyjs/gatsby/issues/38374) ([ca15ef3](https://github.com/gatsbyjs/gatsby/commit/ca15ef37be3febbacfb830193556048008b2fd58))\n```\n\n----------------------------------------\n\nTITLE: Get Theme and Component Function (JavaScript)\nDESCRIPTION: This code extracts the theme and component path from a given filepath.  It identifies the theme to which the file belongs and the local path of the file inside the theme's 'src' directory. It ensures only one matching theme is found to avoid ambiguity. It depends on the `lodash` library for the `uniqBy` function and the `path` module.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/conceptual/how-shadowing-works.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\ngetThemeAndComponent(filepath) {\n  // find out which theme's src/components dir we're requiring from\n  const allMatchingThemes = this.themes.filter(({ themeDir }) =>\n    filepath.startsWith(path.join(themeDir, `src`))\n  )\n\n  // The same theme can be included twice in the themes list causing multiple\n  // matches. This case should only be counted as a single match for that theme.\n  const matchingThemes = _.uniqBy(allMatchingThemes, `themeName`)\n\n  // 0 matching themes happens a lot for paths we don't want to handle\n  // > 1 matching theme means we have a path like\n  //   `gatsby-theme-blog/src/components/gatsby-theme-something/src/components`\n  if (matchingThemes.length > 1) {\n    throw new Error(\n      `Gatsby can't differentiate between themes ${matchingThemes\n        .map(theme => theme.themeName)\n        .join(` and `)} for path ${filepath}`\n    )\n  }\n\n  if (matchingThemes.length === 0) {\n    return [null, null]\n  }\n\n  const theme = matchingThemes[0]\n\n  // get the location of the component relative to its theme's src/\n  const [, component] = filepath.split(path.join(theme.themeDir, `src`))\n\n  return [theme, component]\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Styles in Graphviz\nDESCRIPTION: This snippet illustrates how to override the default styles applied to the SVG. By setting the `style` attribute to an empty string, the default inline styles can be removed, allowing for custom styling through other means.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/using-remark/src/pages/2019-02-06---graphviz/index.md#_snippet_7\n\nLANGUAGE: dot\nCODE:\n```\ndigraph graphname {\n\n  node [ style = filled, fillcolor = white ];\n\n  ## Legend\n\n  subgraph cluster_legend {\n    ...\n\n```\n\n----------------------------------------\n\nTITLE: Install Gatsby Image Plugin\nDESCRIPTION: Installs the necessary packages for using the Gatsby Image plugin, including gatsby-plugin-image, gatsby-plugin-sharp, gatsby-source-filesystem, and gatsby-transformer-sharp.  These packages provide the core image processing and sourcing functionalities.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-image/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n----------------------------------------\n\nTITLE: Installing gatsby-source-graphql Plugin\nDESCRIPTION: This command installs the `gatsby-source-graphql` plugin using npm. This plugin allows Gatsby to fetch data from any GraphQL API, including the one provided by Gentics Mesh.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/sourcing-from-gentics-mesh.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install gatsby-source-graphql\n```\n\n----------------------------------------\n\nTITLE: Configuring gatsby-remark-images-contentful\nDESCRIPTION: This code snippet shows how to configure the `gatsby-remark-images-contentful` plugin within your `gatsby-config.js` file. It demonstrates setting the `maxWidth` option, which is essential for generating responsive image variations. The plugin is nested within `gatsby-transformer-remark` plugin configuration.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-images-contentful/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// In your gatsby-config.js\nplugins: [\n  `gatsby-plugin-sharp`,\n  {\n    resolve: `gatsby-transformer-remark`,\n    options: {\n      plugins: [\n        {\n          resolve: `gatsby-remark-images-contentful`,\n          options: {\n            // It's important to specify the maxWidth (in pixels) of\n            // the content container as this plugin uses this as the\n            // base for generating different widths of each image.\n            maxWidth: 590,\n          },\n        },\n      ],\n    },\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Update Event component with markup (JSX)\nDESCRIPTION: This snippet updates the `Event` component to display event data using markup, including the event name, location, URL, start date, and end date. It expects props for `name`, `location`, `url`, `startDate`, and `endDate`. Dependencies: React.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/building-a-theme.md#_snippet_34\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\"\n\n// highlight-start\nconst Event = ({ name, location, url, startDate, endDate }) => (\n  <div>\n    <h2>\n      {name} ({location})\n    </h2>\n    <p>\n      {startDate}-{endDate}\n    </p>\n    <p>\n      Website: <a href={url}>{url}</a>\n    </p>\n  </div>\n)\n// highlight-end\n\nexport default Event\n```\n\n----------------------------------------\n\nTITLE: Example CSV Content (Text)\nDESCRIPTION: This is an example of a `letters.csv` file that will be parsed by the plugin. It contains two columns: `letter` and `value`. Each row represents a letter and its corresponding value.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-csv/README.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nletter,value\na,65\nb,66\nc,67\n```\n\n----------------------------------------\n\nTITLE: Starting Gatsby development server\nDESCRIPTION: This command navigates into the newly created Gatsby site's directory and starts the Gatsby development server. The development server automatically rebuilds and refreshes the browser when code changes are detected, providing a rapid development experience. The site will be accessible at http://localhost:8000.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/using-type-definitions/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ncd my-default-starter/\ngatsby develop\n```\n\n----------------------------------------\n\nTITLE: Fixing Ignore Pattern Wrapping\nDESCRIPTION: This bug fix addresses an issue where the ignore pattern was not properly wrapped in quotes. Proper quoting is essential for the correct interpretation of ignore patterns, especially when they contain special characters.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-javascript-static-exports/CHANGELOG.md#_snippet_12\n\nLANGUAGE: None\nCODE:\n```\nwrap ignore pattern in quotes ([#23176](https://github.com/gatsbyjs/gatsby/issues/23176)) ([7563db6](https://github.com/gatsbyjs/gatsby/commit/7563db6))\n```\n\n----------------------------------------\n\nTITLE: Fix missing linked assets in Gatsby Contentful\nDESCRIPTION: This commit fixes a bug in gatsby-source-contentful where linked assets were missing when editing unrelated fields. This ensures that all linked assets are correctly retrieved and displayed, even when changes are made to other parts of the content.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-contentful/CHANGELOG.md#_snippet_35\n\n\n\n----------------------------------------\n\nTITLE: CSS for Line Number Positioning\nDESCRIPTION: This CSS snippet adjusts the positioning of line numbers alongside code. It adds padding to the left of the code block to accommodate the line numbers.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-prismjs/README.md#_snippet_6\n\nLANGUAGE: css\nCODE:\n```\n/**\n * If you already use line highlighting\n */\n\n/* Adjust the position of the line numbers */\n.gatsby-highlight pre[class*=\"language-\"].line-numbers {\n  padding-left: 2.8em;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Size in Gatsby\nDESCRIPTION: This snippet demonstrates how to configure the size of the Button component in Gatsby. It renders three buttons with different sizes: small, medium, and large, using the `size` prop.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/styleguide/src/components/Button/README.md#_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<div>\n  <div>\n    <Button size=\"sm\">Get Started</Button>\n  </div>\n  <div>\n    <Button size=\"md\">Get Started</Button>\n  </div>\n  <div>\n    <Button size=\"lg\">Get Started</Button>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Chrome on Linux Certutil Warning\nDESCRIPTION: This text shows the warning that appears when Chrome is installed on Linux, but certutil is not installed, or the installation was skipped.  Without certutil, Chrome will warn that the certificates are untrusted.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/local-https.md#_snippet_7\n\nLANGUAGE: Text\nCODE:\n```\nWARNING: It looks like you have Chrome installed, but you specified\n'skipCertutilInstall: true'. Unfortunately, without installing\ncertutil, it's impossible get Chrome to trust devcert's certificates\nThe certificates will work, but Chrome will continue to warn you that\nthey are untrusted.\n```\n\n----------------------------------------\n\nTITLE: Cloning a Forked Gatsby Repository\nDESCRIPTION: This command clones a forked repository from GitHub to the local machine.  It allows the developer to work on a personal copy of the Gatsby codebase. Replace `<your-username>` with the actual GitHub username.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/contributing/code-contributions.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/<your-username>/gatsby.git\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query Response for Site Title\nDESCRIPTION: This JSON object represents the expected response from executing the GraphQL query to retrieve the site title. The `data` object mirrors the structure of the GraphQL query and contains the requested `title` value from the `siteMetadata` object.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-4/index.mdx#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"data\": {\n    \"site\": {\n      \"siteMetadata\": {\n        \"title\": \"My First Gatsby Site\"\n      }\n    }\n  },\n  \"extensions\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Polyfilling process in Gatsby using webpack\nDESCRIPTION: This snippet demonstrates how to polyfill the `process` object in Gatsby v3 using webpack. This is useful when components rely on process properties.  It involves installing the `process` library and configuring webpack to provide a browser-compatible version of `process`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v2-to-v3.md#_snippet_23\n\nLANGUAGE: diff\nCODE:\n```\nexports.onCreateWebpackConfig = ({ actions, stage, plugins }) => {\n  if (stage === 'build-javascript' || stage === 'develop') {\n    actions.setWebpackConfig({\n      plugins: [\n        plugins.provide({ process: 'process/browser' })\n      ]\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and using design tokens\nDESCRIPTION: This code snippet demonstrates how to import design tokens from the `gatsby-design-tokens` package and provides examples of the available tokens, which are plain objects or arrays of values for related CSS properties. These tokens can be used in components or themes to maintain a consistent design system.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-design-tokens/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  borders,\n  // [ 0, `1px solid`, `2px solid` ]\n  breakpoints,\n  // { xs:`400px`, sm:`550px`, ‚Ä¶}\n  breakpointsArray,\n  // [ \"400px\", \"550px\", ‚Ä¶]\n  colors,\n  // { primary:`#639`, blackFade: { 5: `rgba(‚Ä¶)`, 10: ‚Ä¶}, ‚Ä¶}\n  fonts,\n  // { body: `-apple-system, ‚Ä¶, sans-serif`, monospace: {‚Ä¶} }\n  fontsLists,\n  // { body: [`-apple-system`, ‚Ä¶, `sans-serif`], monospace: [‚Ä¶] }\n  fontSizes,\n  // [ `0.75rem`, ‚Ä¶, `5.75rem` ]\n  fontSizesPx,\n  // [ `12px`, ‚Ä¶, `92px` ]\n  fontSizesRaw,\n  // [ 12, 14, 16, 18, 20, 24, 28, 32, ‚Ä¶, 84, 92 ]\n  fontWeights,\n  // { body: 400, semiBold: 600, ‚Ä¶, heading: 700 }\n  letterSpacings,\n  // { normal: \"normal\", tracked: \"0.075em\", tight: \"-0.015em\" }\n  lineHeights,\n  // { solid: 1, dense: 1.25, ‚Ä¶ }\n  mediaQueries,\n  // { xs: \"@media (min-width: 400px)\", ‚Ä¶, xxl: \"@media (min-width: 1600px)\" }\n  radii,\n  // [ 0, \"2px\", \"4px\", \"8px\", \"16px\", \"9999px\", \"100%\" ]\n  shadows,\n  // { raised: `0px 1px 2px rgba(46,‚Ä¶)`, floating: `0px 2px 4px‚Ä¶` }\n  space,\n  // [ \"0rem\", \"0.25rem\", \"0.5rem\", ‚Ä¶, \"4.5rem\"]\n  spacePx,\n  // [ \"0px\", \"4px\", \"8px\", ‚Ä¶, \"72px\"]\n  spaceRaw,\n  // [ 0, 4, 8, 12, 16, 20, 24, 32, 40, 48, 56, 64, 72]\n  transition,\n  // transition = {\n  //   default: `250ms cubic-bezier(0.4, 0, 0.2, 1)`,\n  //   curve: { default: `cubic-bezier(0.4, 0, 0.2, 1)`, ‚Ä¶ },\n  //   speed: { faster: `50ms`, ‚Ä¶ },\n  // }\n} from \"gatsby-design-tokens\"\n```\n\n----------------------------------------\n\nTITLE: Updating Bluebird Dependency in Gatsby\nDESCRIPTION: This code snippet shows the update of the bluebird dependency to version ^3.5.5 in the gatsby-plugin-page-creator. It resolves potential issues and ensures compatibility with the plugin's functionalities. The update is part of a bug fix.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-page-creator/CHANGELOG.md#_snippet_40\n\nLANGUAGE: Text\nCODE:\n```\nupdate dependency bluebird to ^3.5.5 ([#16825](https://github.com/gatsbyjs/gatsby/issues/16825)) ([ec0be83](https://github.com/gatsbyjs/gatsby/commit/ec0be83))\n```\n\n----------------------------------------\n\nTITLE: Installing unist-util-visit via npm\nDESCRIPTION: This command installs version 2 of `unist-util-visit` as a dependency for a Gatsby plugin.  Newer versions are ESM and not fully supported by Gatsby.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/remark-plugin-tutorial.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnpm install unist-util-visit@^2\n```\n\n----------------------------------------\n\nTITLE: Generating a Gatsby site from a starter using Gatsby CLI\nDESCRIPTION: This command uses the Gatsby CLI to generate a new Gatsby site based on a specified starter. Replace `{your-project-name}` with the desired name for your project directory and `{link-to-starter}` with the URL or local path of the starter.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/local-development/starters.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngatsby new {your-project-name} {link-to-starter}\n```\n\n----------------------------------------\n\nTITLE: Preventing Empty Title Tags in React Helmet\nDESCRIPTION: This code snippet addresses an issue where empty title tags were being appended by the `gatsby-plugin-react-helmet`. It fixes issue #36303 with a specific commit to prevent this behavior.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-react-helmet/CHANGELOG.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nstop appending empty title tags [#36303](https://github.com/gatsbyjs/gatsby/issues/36303) ([e7f0ce3](https://github.com/gatsbyjs/gatsby/commit/e7f0ce36935b6919f00760ce4fb7655530e999f2))\n```\n\n----------------------------------------\n\nTITLE: Adding Meta Description HTML\nDESCRIPTION: This HTML snippet demonstrates how to add meta description tags for SEO in Gatsby. It includes meta tags for 'description', 'og:description', and 'twitter:description', all using the same content.  This is for documentation pages and should be customized for each page.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/contributing/docs-contributions/index.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<meta name=\"description\" content=\"Documentation of Gatsby\" />\n<meta property=\"og:description\" content=\"Documentation of Gatsby\" />\n<meta name=\"twitter:description\" content=\"Documentation of Gatsby\" />\n```\n\n----------------------------------------\n\nTITLE: Support Gatsby v2 and v3 with Peer Dependency\nDESCRIPTION: This snippet demonstrates how to specify a peer dependency range in a plugin's package.json file to support both Gatsby v2 and v3. Using the `||` operator allows the plugin to be installed with either version of Gatsby. This approach ensures compatibility with a wider range of Gatsby projects.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v2-to-v3.md#_snippet_38\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"peerDependencies\": {\n    \"gatsby\": \"^2.32.0 || ^3.0.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Create a new Gatsby site from a starter\nDESCRIPTION: This command creates a new Gatsby site using a specified starter.  The URL points to the Git repository of the starter.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/cheat-sheet.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ngatsby new my-blog-starter https://github.com/gatsbyjs/gatsby-starter-blog\n```\n\n----------------------------------------\n\nTITLE: Enabling Remote Image Support (Shell)\nDESCRIPTION: These code snippets demonstrate how to enable experimental support for remote images in the StaticImage component by setting the GATSBY_EXPERIMENTAL_REMOTE_IMAGES environment variable to 1. This allows the StaticImage component to download and process images from remote URLs at build time. This is an experimental feature and is only supported in the StaticImage component.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/v2.30/index.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nGATSBY_EXPERIMENTAL_REMOTE_IMAGES=1 gatsby develop\n```\n\nLANGUAGE: Shell\nCODE:\n```\nGATSBY_EXPERIMENTAL_REMOTE_IMAGES=1 gatsby build\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Feed URL Generation in gatsby-plugin-feed\nDESCRIPTION: This feature allows developers to override the default feed URL generation within the gatsby-plugin-feed. It provides greater flexibility in customizing the feed URL according to specific project requirements. This feature was introduced in version 2.3.23.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-feed/CHANGELOG.md#_snippet_10\n\n\n\n----------------------------------------\n\nTITLE: Updating Gatsby plugins with sharp dependency using npm\nDESCRIPTION: This command updates several official Gatsby plugins that depend on the `sharp` package to resolve potential incompatibility issues. It ensures that the latest versions of these plugins are installed, which may include a compatible version of `sharp`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-sharp/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm install gatsby-plugin-sharp gatsby-plugin-manifest gatsby-remark-images-contentful gatsby-source-contentful gatsby-transformer-sharp gatsby-transformer-sqip\n```\n\n----------------------------------------\n\nTITLE: Installing Gatsby Starter with GitHub Username/Repo (Shell)\nDESCRIPTION: This command installs a Gatsby starter using the GitHub username and repository name instead of a URL. Replace `[SITE_DIRECTORY]` with the desired directory name and `[GITHUB_USER_NAME/REPO]` with the appropriate GitHub identifier.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/starters.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ngatsby new [SITE_DIRECTORY] [GITHUB_USER_NAME/REPO]\n```\n\n----------------------------------------\n\nTITLE: Add ImageCDN Support via Polyfill (JavaScript)\nDESCRIPTION: This example demonstrates how to add ImageCDN support to a Gatsby plugin using the provided polyfills.  It uses `addRemoteFilePolyfillInterface` to extend the schema and `polyfillImageServiceDevRoutes` to set up development server routes.  It requires importing these functions from `gatsby-plugin-utils/pollyfill-remote-file`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-utils/README.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst {\n  addRemoteFilePolyfillInterface,\n  polyfillImageServiceDevRoutes,\n} = require(`gatsby-plugin-utils/pollyfill-remote-file`)\n\nexports.createSchemaCustomization ({ actions, schema, store }) => {\n  actions.createTypes([\n    addRemoteFilePolyfillInterface(\n      schema.buildObjectType({\n        name: `PrefixAsset`,\n        fields: {\n          // your fields\n        },\n        interfaces: [`Node`, 'RemoteFile'],\n      }),\n      {\n        schema,\n        actions,\n        store\n      }\n    )\n  ]);\n}\n\n/** @type {import('gatsby').onCreateDevServer} */\nexports.onCreateDevServer = ({ app, store }) => {\n  polyfillImageServiceDevRoutes(app, store)\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced gatsby-plugin-feed Configuration\nDESCRIPTION: Demonstrates advanced configuration options for `gatsby-plugin-feed`, including `match` (to filter pages included in the feed) and `link` (to override the default RSS link). It also shows how to pass custom namespaces and language settings to the underlying RSS feed generator.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-feed/README.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  siteMetadata: {/* siteMetadata contents */},\n  plugins: [\n    {\n      resolve: `gatsby-plugin-feed`,\n      options: {\n        feeds: [\n          {\n            serialize: ({ query: { site, allMarkdownRemark } }) => {\n              /* contents go here */\n            },\n            query: `/* query goes here */`,\n            output: \"/rss.xml\",\n            title: \"Your Site's RSS Feed\",\n            // Optional configuration specific for plugin:\n            match: \"^/blog/\",\n            link: \"https://feeds.feedburner.com/gatsby/blog\",\n            // Optional configuration passed through to itemOptions\n            custom_namespaces: {\n              media: 'http://search.yahoo.com/mrss/',\n            },\n            language: `en-US`,\n          },\n        ],\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Adding the plugin to gatsby-config.js\nDESCRIPTION: Adds the `gatsby-plugin-gatsby-cloud` plugin to the `gatsby-config.js` file. This activates the plugin and its default functionalities.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-gatsby-cloud/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  plugins: [`gatsby-plugin-gatsby-cloud`]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring gatsby-plugin-s3 for CloudFront\nDESCRIPTION: Configures the `gatsby-plugin-s3` plugin with `protocol` and `hostname` options to ensure redirects work correctly when using CloudFront. These parameters are vital for ensuring redirects are applied relative to the correct domain.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/previews-deploys-hosting/deploying-to-s3-cloudfront.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n    resolve: `gatsby-plugin-s3`,\n    options: {\n        bucketName: \"my-example-bucket\",\n        protocol: \"https\",\n        hostname: \"www.example.com\",\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Navigation Bar with User Authentication in Gatsby\nDESCRIPTION: This code snippet updates the navigation bar to display a greeting message with the user's name if they are logged in, or a default message if not. It also includes a logout option that redirects to the login page after logging out. It uses `gatsby` for routing and `react` for component creation.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/authentication-tutorial.md#_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\"\nimport { Link, navigate } from \"gatsby\" // highlight-line\nimport { getUser, isLoggedIn, logout } from \"../services/auth\" // highlight-line\n\n// highlight-start\nexport default function NavBar() {\n  let greetingMessage = \"\"\n  if (isLoggedIn()) {\n    greetingMessage = `Hello ${getUser().name}`\n  } else {\n    greetingMessage = \"You are not logged in\"\n  }\n\n  return (\n    // highlight-end\n    <div\n      style={{\n        display: \"flex\",\n        flex: \"1\",\n        justifyContent: \"space-between\",\n        borderBottom: \"1px solid #d1c1e0\",\n      }}\n    >\n      <span>{greetingMessage}</span> {/* highlight-line */}\n      <nav>\n        <Link to=\"/\">Home</Link>\n        {` `}\n        <Link to=\"/app/profile\">Profile</Link> {/* highlight-line */}\n        {` `}\n        {/* highlight-start */}\n        {isLoggedIn() ? (\n          <a\n            href=\"/\"\n            onClick={event => {\n              event.preventDefault()\n              logout(() => navigate(`/app/login`))\n            }}\n          >\n            Logout\n          </a>\n        ) : null}\n        {/* highlight-end */}\n      </nav>\n    </div>\n  )\n} // highlight-line\n```\n\n----------------------------------------\n\nTITLE: Rendering Images in Index Page\nDESCRIPTION: This JSX code snippet demonstrates how to render images fetched from a WordPress site using Gatsby's `gatsby-image` plugin. It queries all WordPress posts and maps over the edges to extract the `fixed` image data. The `Img` component is then used to display the images with the optimized properties provided by Gatsby.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/wordpress-image-tutorial.md#_snippet_8\n\nLANGUAGE: JSX\nCODE:\n```\nimport React from \"react\"\nimport { graphql, Link } from \"gatsby\"\nimport Img from \"gatsby-image\"\n\nconst IndexPage = ({ data }) => {\n  const imagesResolutions = data.allWordpressPost.edges.map(\n    edge =>\n      edge.node.childWordPressAcfPostPhoto.photo.localFile.childImageSharp.fixed\n  )\n  return (\n    <div>\n      <h1>Hi people</h1>\n      <p>Welcome to your new Gatsby site.</p>\n      <p>Now go build something great.</p>\n      {imagesResolutions.map(imageRes => (\n        <Img fixed={imageRes} key={imageRes.src} />\n      ))}\n      <Link to=\"/page-2/\">Go to page 2</Link>\n    </div>\n  )\n}\n\nexport default IndexPage\n\nexport const query = graphql`\n  query {\n    allWordpressPost {\n      edges {\n        node {\n          childWordPressAcfPostPhoto {\n            photo {\n              localFile {\n                childImageSharp {\n                  # edit the maxWidth value to generate resized images\n                  fixed(width: 500, height: 500) {\n                    ...GatsbyImageSharpFixed_withWebp\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: Google Analytics Page View with Custom Dimension - JavaScript\nDESCRIPTION: This JavaScript snippet sends a pageview event to Google Analytics and sets a custom dimension named `dimension2` to the value of the Netlify branch name (either `master` or `heading-variation`). The branch name is dynamically inserted using the `{{ BRANCH }}` placeholder.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/testing/ab-testing-with-google-analytics-and-netlify.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nga(\"send\", \"pageview\", {\n  dimension2: \"{{ BRANCH }}\",\n})\n\n```\n\n----------------------------------------\n\nTITLE: Syntax Highlighting inside diffs in gatsby-remark-prismjs\nDESCRIPTION: This commit introduces a feature to enable syntax highlighting within diffs when using the gatsby-remark-prismjs plugin. It enhances the readability and presentation of code changes by applying Prism.js syntax highlighting to the content within diff blocks.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-prismjs/CHANGELOG.md#_snippet_9\n\n\n\n----------------------------------------\n\nTITLE: Parsed JSON Output from XML\nDESCRIPTION: This JSON shows the output of parsing the above XML with `xml-parser`.  This data is then used to generate GraphQL nodes. Notice how the structure represents the XML hierarchy with names, attributes and content.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-xml/README.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"declaration\": {\n    \"attributes\": {\n      \"version\": \"1.0\"\n    }\n  },\n  \"root\": {\n    \"name\": \"catalog\",\n    \"attributes\": {},\n    \"children\": [\n      {\n        \"name\": \"book\",\n        \"attributes\": {\n          \"id\": \"bk101\"\n        },\n        \"children\": [\n          {\n            \"name\": \"author\",\n            \"attributes\": {},\n            \"children\": [],\n            \"content\": \"Gambardella, Matthew\"\n          },\n          {\n            \"name\": \"title\",\n            \"attributes\": {},\n            \"children\": [],\n            \"content\": \"XML Developer's Guide\"\n          },\n          {\n            \"name\": \"genre\",\n            \"attributes\": {},\n            \"children\": [],\n            \"content\": \"Computer\"\n          },\n          {\n            \"name\": \"price\",\n            \"attributes\": {},\n            \"children\": [],\n            \"content\": \"44.95\"\n          },\n          {\n            \"name\": \"publish_date\",\n            \"attributes\": {},\n            \"children\": [],\n            \"content\": \"2000-10-01\"\n          },\n          {\n            \"name\": \"description\",\n            \"attributes\": {},\n            \"children\": [],\n            \"content\": \"An in-depth look at creating applications\\n      with XML.\"\n          }\n        ],\n        \"content\": \"\"\n      },\n      {\n        \"name\": \"book\",\n        \"attributes\": {\n          \"id\": \"bk102\"\n        },\n        \"children\": [\n          {\n            \"name\": \"author\",\n            \"attributes\": {},\n            \"children\": [],\n            \"content\": \"Ralls, Kim\"\n          },\n          {\n            \"name\": \"title\",\n            \"attributes\": {},\n            \"children\": [],\n            \"content\": \"Midnight Rain\"\n          },\n          {\n            \"name\": \"genre\",\n            \"attributes\": {},\n            \"children\": [],\n            \"content\": \"Fantasy\"\n          },\n          {\n            \"name\": \"price\",\n            \"attributes\": {},\n            \"children\": [],\n            \"content\": \"5.95\"\n          },\n          {\n            \"name\": \"publish_date\",\n            \"attributes\": {},\n            \"children\": [],\n            \"content\": \"2000-12-16\"\n          },\n          {\n            \"name\": \"description\",\n            \"attributes\": {},\n            \"children\": [],\n            \"content\": \"A former architect battles corporate zombies,\\n      an evil sorceress, and her own childhood to become queen\\n      of the world.\"\n          }\n        ],\n        \"content\": \"\"\n      }\n    ],\n    \"content\": \"\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Copying Relationship Meta\nDESCRIPTION: This commit adds a feature to copy relationship meta (if any) to a node's field. This enhancement allows additional metadata associated with relationships to be transferred to the Gatsby node, providing more context and flexibility when querying data.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-drupal/CHANGELOG.md#_snippet_23\n\n\n\n----------------------------------------\n\nTITLE: Fixing pluginOptionsSchema warnings\nDESCRIPTION: This commit addresses an issue where warnings in the `pluginOptionsSchema` were causing errors. The fix ensures that warnings are properly handled without throwing errors, improving the stability of the plugin.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-twitter/CHANGELOG.md#_snippet_6\n\nLANGUAGE: TEXT\nCODE:\n```\ndon't throw on warnings in `pluginOptionsSchema` [#34182](https://github.com/gatsbyjs/gatsby/issues/34182) ([252f50d](https://github.com/gatsbyjs/gatsby/commit/252f50d0f282bee4c7e10065682bea52a603aa0c))\n```\n\n----------------------------------------\n\nTITLE: Update Peer Dependencies\nDESCRIPTION: This commit updates the peer dependencies for gatsby-plugin-stylus. It ensures compatibility with the latest versions of Gatsby and its dependencies. This addresses issue #36965 on the Gatsby repository.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-stylus/CHANGELOG.md#_snippet_3\n\nLANGUAGE: none\nCODE:\n```\nUpdate peerDeps [#36965](https://github.com/gatsbyjs/gatsby/issues/36965) ([b624442](https://github.com/gatsbyjs/gatsby/commit/b6244424fe8b724cbc23b80b2b4f5424cc2055a4))\n```\n\n----------------------------------------\n\nTITLE: Displaying Search Results with React InstantSearch\nDESCRIPTION: This JSX code creates a `SearchResult` component that displays search results from Algolia. It iterates over specified indices, using the `Hits` component to render individual search hits.  The component displays highlights and snippets from each hit, providing a preview of the search result.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/adding-search-with-algolia.md#_snippet_9\n\nLANGUAGE: JSX\nCODE:\n```\nimport React from \"react\"\nimport { Link } from \"gatsby\"\nimport {\n  Highlight,\n  Hits,\n  Index,\n  Snippet,\n  PoweredBy,\n  useStats,\n} from \"react-instantsearch\"\n\nconst HitCount = () => {\n  const { nbHits } = useStats()\n\n  return nbHits > 0 ? (\n    <div className=\"HitCount\">\n      {nbHits} result{nbHits !== 1 ? \"s\" : \"\"}\n    </div>\n  ) : null\n}\n\nconst PageHit = ({ hit }) => (\n  <div>\n    <Link to={hit.slug}>\n      <h4>\n        <Highlight attribute=\"title\" hit={hit} />\n      </h4>\n    </Link>\n    <Snippet attribute=\"excerpt\" hit={hit} />\n  </div>\n)\n\nconst HitsInIndex = ({ index }) => (\n  <Index indexName={index.name}>\n    <HitCount />\n    <Hits className=\"Hits\" hitComponent={PageHit} />\n  </Index>\n)\n\nconst SearchResult = ({ indices, className }) => (\n  <div className={className}>\n    {indices.map(index => (\n      <HitsInIndex index={index} key={index.name} />\n    ))}\n    <PoweredBy />\n  </div>\n)\n\nexport default SearchResult\n```\n\n----------------------------------------\n\nTITLE: Splat Route Example - Gatsby\nDESCRIPTION: This snippet illustrates how to create a splat (wildcard) route using Gatsby's Function routing. It extracts the path segments after the base route using `req.params[`*`]` and splits them into an array.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/functions/routing.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nexport default function handler(req, res) {\n  const params = req.params[`*`].split(`/`)\n\n  // `src/api/foo/1/2 // params[0] === `1`\n  // params[1] === `2`\n}\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests with Jest\nDESCRIPTION: This command runs the unit tests using Jest. It's used to ensure that the changes made to the codebase do not introduce any regressions. Running `yarn test` executes all tests in the project, while `yarn jest <package-name>` runs tests for a specific package, and `yarn jest <file-path>` runs a single test file.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/contributing/code-contributions.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nyarn test\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn jest <package-name>\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn jest <file-path>\n```\n\n----------------------------------------\n\nTITLE: Updating Packages\nDESCRIPTION: This commit updates minor updates in packages except react, babel and eslint.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-google-tagmanager/CHANGELOG.md#_snippet_23\n\nLANGUAGE: text\nCODE:\n```\nupdate minor updates in packages except react, babel and eslint ([#17254](https://github.com/gatsbyjs/gatsby/issues/17254)) ([252d867](https://github.com/gatsbyjs/gatsby/commit/252d867))\n```\n\n----------------------------------------\n\nTITLE: Querying Posts with GraphQL\nDESCRIPTION: This GraphQL query retrieves the `id` and `slug` fields for all posts available through the API. It can be executed in a GraphQL IDE such as GraphiQL or the GraphQL Playground.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/creating-source-plugins/README.md#_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  posts {\n    id\n    slug\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Feature: Add selfHostedOrigin option (gatsby-plugin-google-tagmanager)\nDESCRIPTION: Introduces the `selfHostedOrigin` option, allowing users to specify the origin for self-hosted Google Tag Manager scripts. This provides more control over script loading and improves privacy. This feature relates to issue #32733.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-google-tagmanager/CHANGELOG.md#_snippet_6\n\nLANGUAGE: None\nCODE:\n```\nadd option for selfHostedOrigin [#32733](https://github.com/gatsbyjs/gatsby/issues/32733) ([ed72e68](https://github.com/gatsbyjs/gatsby/commit/ed72e68c42da68eaeb0dd7a5ba5404f2f6133a44))\n```\n\n----------------------------------------\n\nTITLE: Importing required modules\nDESCRIPTION: This code imports the necessary modules: `createElement` from React, `rehypeReact` for rendering React components in HTML, `unified` for processing, and the custom `Counter` component.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/using-remark/src/pages/2018-01-27---custom-components/index.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { createElement } from \"react\"\nimport rehypeReact from \"rehype-react\"\nimport unified from \"unified\"\nimport Counter from \"../components/Counter\"\n```\n\n----------------------------------------\n\nTITLE: Installing gatsby-design-tokens with Yarn\nDESCRIPTION: This command installs the `gatsby-design-tokens` package as a dependency in your project using Yarn. The `add` command is used to install packages in Yarn.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-design-tokens/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add gatsby-design-tokens\n```\n\n----------------------------------------\n\nTITLE: Configure Query on Demand in gatsby-config.js (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to enable or disable the Query on Demand feature in Gatsby by setting the QUERY_ON_DEMAND flag within the gatsby-config.js file. The feature aims to improve development performance by lazily loading data when pages are requested. The plugins array remains unchanged.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/v2.29/index.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// In your gatsby-config.js\nmodule.exports = {\n  flags: {\n    QUERY_ON_DEMAND: false,\n  },\n  plugins: [], // your plugins stay the same\n}\n```\n\n----------------------------------------\n\nTITLE: Creating render function (TypeScript)\nDESCRIPTION: This TypeScript code creates a `processor` using `unified` and `rehypeReact` to render React components within Markdown. It maps the custom HTML tag `interactive-counter` to the `Counter` React component. It also provides type definitions.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/using-remark/src/pages/2018-01-27---custom-components/index.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst processor = unified().use(rehypeReact, {\n  createElement,\n  components: {\n    \"interactive-counter\": Counter,\n  },\n})\n\nexport const renderAst = (ast: any): JSX.Element => {\n  return processor.stringify(ast) as unknown as JSX.Element\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Running Development Server (Shell)\nDESCRIPTION: This snippet demonstrates how to install the necessary packages and start the Gatsby development server for the SendGrid email example. It first navigates to the example directory, installs the npm packages, and then starts the development server.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/functions-sendgrid-email/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd examples/functions-sendgrid-email\nnpm install\nnpm run develop\n```\n\n----------------------------------------\n\nTITLE: Adding PostCSS plugins in gatsby-config.js\nDESCRIPTION: This snippet demonstrates how to add PostCSS plugins to process your Stylus output in Gatsby. It allows you to apply additional post-processing steps, such as autoprefixing, to your CSS. It requires gatsby-plugin-stylus to be installed.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-stylus/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nplugins: [\n  {\n    resolve: `gatsby-plugin-stylus`,\n    options: {\n      postCssPlugins: [somePostCssPlugin()],\n    },\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: File Structure for Component Shadowing in Gatsby\nDESCRIPTION: This snippet illustrates the file structure required for component shadowing in Gatsby.  Specifically, it shows the location of the shadowed `header.js` file within the `src` directory to override the default header component from `gatsby-theme-blog`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/using-multiple-themes-together.md#_snippet_14\n\nLANGUAGE: text\nCODE:\n```\n‚îî‚îÄ‚îÄ src\n    ‚îú‚îÄ‚îÄ gatsby-theme-blog\n    ‚îÇ   ‚îú‚îÄ‚îÄ components\n    ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ header.js // highlight-line\n```\n\n----------------------------------------\n\nTITLE: Creating an Index\nDESCRIPTION: This JavaScript code demonstrates how to create an index using the `createIndex` function. It takes the node type name and a configuration object specifying the fields to index, similar to MongoDB's indexing approach. It supports dot notation for nested fields.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby/src/datastore/lmdb/query/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nawait createIndex(nodeTypeName, { foo: 1, \"nested.bar\": 1 })\n```\n\n----------------------------------------\n\nTITLE: Implement Query Batching Feature\nDESCRIPTION: This code snippet introduces the query batching feature within the gatsby-source-graphql plugin. This enhancement is designed to improve the efficiency of querying data from GraphQL APIs.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-graphql/CHANGELOG.md#_snippet_28\n\nLANGUAGE: diff\nCODE:\n```\n**gatsby-source-graphql:** Query batching ([#22347](https://github.com/gatsbyjs/gatsby/issues/22347)) ([2a4c7fd](https://github.com/gatsbyjs/gatsby/commit/2a4c7fd))\n```\n\n----------------------------------------\n\nTITLE: Querying Site Metadata\nDESCRIPTION: This JSX code snippet demonstrates how to query site metadata using GraphQL within a Gatsby component. It utilizes the `useStaticQuery` hook to execute a GraphQL query that fetches the `title` from `siteMetadata`. The fetched data is then used to pass the title to the `Header` component as a prop.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/modifying-a-starter.md#_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { useStaticQuery, graphql } from \"gatsby\" // highlight-line\n\nimport Header from \"./header\"\nimport \"./layout.css\"\n\nconst Layout = ({ children }) => {\n  // highlight-start\n  const data = useStaticQuery(graphql`\n    query SiteTitleQuery {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `)\n  // highlight-end\n\n  return (\n    <>\n      <Header siteTitle={data.site.siteMetadata.title} /> // highlight-line\n      <div\n        style={{\n          margin: `0 auto`,\n          maxWidth: 960,\n          padding: `0px 1.0875rem 1.45rem`,\n          paddingTop: 0,\n        }}\n      >\n        <main>{children}</main>\n        <footer>\n          ¬© {new Date().getFullYear()}, Built with\n          {` `}\n          <a href=\"https://www.gatsbyjs.com\">Gatsby</a>\n        </footer>\n      </div>\n    </>\n  )\n}\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n```\n\n----------------------------------------\n\nTITLE: Run Gatsby Develop (Shell)\nDESCRIPTION: This command starts the Gatsby development server, allowing you to view the site in your browser and access the GraphiQL interface for creating GraphQL queries.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-wordpress/docs/tutorials/building-a-new-site-wordpress-and-gatsby.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ngatsby develop\n```\n\n----------------------------------------\n\nTITLE: Chore: Update to GraphQL 16\nDESCRIPTION: This snippet documents a chore in version 5.0.0 of the gatsby-source-graphql plugin. It upgrades the GraphQL dependency to version 16, providing access to new features and improvements in the GraphQL ecosystem.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-graphql/CHANGELOG.md#_snippet_6\n\n\n\n----------------------------------------\n\nTITLE: GraphQL Schema Customization Update JavaScript\nDESCRIPTION: This code shows the difference between the old and new method to define queryable interfaces in GraphQL schema customization.  Before v3, `@nodeInterface` directive was necessary but after the update, `implements Node` is the correct way to define such interfaces.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/v3.0/index.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nexports.createSchemaCustomization = function createSchemaCustomization({ actions }) {\n  const { createTypes } = actions\n  createTypes(`\n-   interface Foo @nodeInterface\n+   interface Foo implements Node\n    {\n      id: ID!\n    }\n  `)\n}\n```\n\n----------------------------------------\n\nTITLE: Update Packages (Arch/Manjaro)\nDESCRIPTION: This command updates the package lists and upgrades installed packages on Arch and Manjaro-based Linux distributions. It is recommended to run this command before installing new software. The `-Syu` flag synchronizes the package databases and upgrades all installed packages.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-0/index.mdx#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nsudo pacman -Syu\n```\n\n----------------------------------------\n\nTITLE: Detect CI Environment with gatsby-core-utils (JS)\nDESCRIPTION: Detects if the code is running in a Continuous Integration (CI) environment using `gatsby-core-utils`. It enhances the `ci-info` library with support for Vercel and Heroku.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-core-utils/README.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { isCI } = require(\"gatsby-core-utils\")\n\nif (isCI()) {\n  // execute CI-specific code\n}\n// ...\n```\n\n----------------------------------------\n\nTITLE: Custom .babelrc Configuration\nDESCRIPTION: This JSON configuration file shows how to customize Babel settings in a Gatsby project. It includes a plugin for decorators and a preset for `babel-preset-gatsby`, configuring browser targets.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/custom-configuration/babel.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugins\": [\n    [\"@babel/plugin-proposal-decorators\", { \"legacy\": true }]\n  ],\n  \"presets\": [\n    [\n      \"babel-preset-gatsby\",\n      {\n        \"targets\": {\n          \"browsers\": [\">0.25%\", \"not dead\"]\n        }\n      }\n    ]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query for Lever Jobs\nDESCRIPTION: Example GraphQL query to retrieve all Lever job postings. This query retrieves various job details such as ID, creation date, text, URLs, categories, descriptions, and additional information.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-lever/README.md#_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nallLever {\n    edges {\n      node {\n        id\n        lever_id\n        createdAt\n        text\n        hostedUrl\n        applyUrl\n        categories {\n          commitment\n          location\n          team\n        }\n        description\n        descriptionPlain\n        lists {\n          text\n          content\n        }\n        additional\n        additionalPlain\n      }\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Inline Math Equation Markdown\nDESCRIPTION: This snippet demonstrates how to render an inline math equation using KaTeX within a Markdown file. The equation is surrounded by single dollar signs (`$`).\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/using-remark/src/pages/2017-08-07---katex/index.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n$a^2 + b^2 = c^2$\n```\n\n----------------------------------------\n\nTITLE: Commit and Push Changes to GitHub\nDESCRIPTION: This snippet shows the shell commands required to commit and push the changes to a GitHub repository. This ensures that the latest version of the code is deployed to Gatsby Cloud.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-5/index.mdx#_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\ngit add .\ngit commit -m \"Finished Gatsby Tutorial Part 5\"\ngit push\n```\n\n----------------------------------------\n\nTITLE: Feature: Removing Domain for Self-Hosted Fonts in Gatsby\nDESCRIPTION: This commit removes the domain for self-hosted fonts within the gatsby-plugin-preload-fonts plugin. This allows for more flexibility in how fonts are served and avoids potential issues with cross-origin requests when fonts are hosted on the same domain as the Gatsby site.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-preload-fonts/CHANGELOG.md#_snippet_11\n\nLANGUAGE: Text\nCODE:\n```\n**gatsby-plugin-preload-fonts:** remove domain for self-hosted fonts ([#17235](https://github.com/gatsbyjs/gatsby/issues/17235)) ([5a107e9](https://github.com/gatsbyjs/gatsby/commit/5a107e9))\n```\n\n----------------------------------------\n\nTITLE: Firebase Hosting Configuration\nDESCRIPTION: This JSON configuration defines the Firebase Hosting settings, including the public directory, ignored files, and cache control headers for various file types. It's crucial for optimizing caching and ensuring proper content delivery.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/previews-deploys-hosting/deploying-to-firebase.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hosting\": {\n    \"public\": \"public\",\n    \"ignore\": [\"firebase.json\", \"**/.*\", \"**/node_modules/**\"],\n    \"headers\": [\n      {\n        \"source\": \"**/*\",\n        \"headers\": [\n          {\n            \"key\": \"cache-control\",\n            \"value\": \"public, max-age=0, must-revalidate\"\n          }\n        ]\n      },\n      {\n        \"source\": \"static/**\",\n        \"headers\": [\n          {\n            \"key\": \"cache-control\",\n            \"value\": \"public, max-age=31536000, immutable\"\n          }\n        ]\n      },\n      {\n        \"source\": \"**/*.@(css|js)\",\n        \"headers\": [\n          {\n            \"key\": \"cache-control\",\n            \"value\": \"public, max-age=31536000, immutable\"\n          }\n        ]\n      },\n      {\n        \"source\": \"sw.js\",\n        \"headers\": [\n          {\n            \"key\": \"cache-control\",\n            \"value\": \"public, max-age=0, must-revalidate\"\n          }\n        ]\n      },\n      {\n        \"source\": \"page-data/**\",\n        \"headers\": [\n          {\n            \"key\": \"cache-control\",\n            \"value\": \"public, max-age=0, must-revalidate\"\n          }\n        ]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL query for transformed markdown\nDESCRIPTION: A GraphQL query to fetch data from the MongoDB collection after applying the markdown transformation.  The query retrieves the `id`, `name`, `url`, and the transformed `html` content from the `body` field via `childMarkdownRemark`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-mongodb/README.md#_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nquery ($id: String!) {\n  mongodbCloudDocuments(id: { eq: $id }) {\n    id\n    name\n    url\n    body {\n      childMarkdownRemark {\n        id\n        html\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching and Displaying FAQs in Gatsby with ButterCMS (JSX)\nDESCRIPTION: This component fetches FAQ data and a headline from ButterCMS using GraphQL queries and displays them within a Gatsby layout.  It utilizes React to map over the FAQ items and render them. Requires the `gatsby` package and assumes a `Layout` and `SEO` component are already defined.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/sourcing-from-buttercms.md#_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\"\nimport { graphql } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\n\nconst Faq = ({ data }) => {\n  const FAQs = data.allButterCollection.edges[0].node.value\n  const headline = data.allButterContentField.edges[0].node.value\n\n  return (\n    <Layout>\n      <SEO title=\"FAQ - Frequently Asked Questions\" />\n      <h1\n        style={{\n          height: `30%`,\n          color: `white`,\n          display: `flex`,\n          padding: `1rem`,\n          alignItems: `center`,\n          justifyContent: `center`,\n          flexDirection: `column`,\n          background: `linear-gradient(-45deg, rgb(29, 64, 86) 0%, rgb(60, 24, 78) 100%)`,\n        }}\n      >\n        {headline}\n      </h1>\n      <div style={{ display: `flex`, padding: `10px` }}>\n        {FAQs.map(faq => (\n          <div\n            style={{\n              flexBasis: `50%`,\n              padding: `10px`,\n              background: `whitesmoke`,\n              borderRadius: `10px`,\n              margin: `5px`,\n            }}\n          >\n            <h2 style={{ color: `#213b55` }}>{faq.question}</h2>\n            <p style={{ fontSize: `1.5rem` }}>{faq.answer} </p>\n          </div>\n        ))}\n      </div>\n    </Layout>\n  )\n}\n\nexport const query = graphql`\n  {\n    allButterCollection(filter: { id: { eq: \"faq_items\" } }) {\n      edges {\n        node {\n          id\n          value {\n            question\n            answer\n          }\n        }\n      }\n    }\n\n    allButterContentField(filter: { id: { eq: \"faq_headline\" } }) {\n      edges {\n        node {\n          id\n          value\n        }\n      }\n    }\n  }\n`\nexport default Faq\n```\n\n----------------------------------------\n\nTITLE: Install Gatsby with Queries on Demand\nDESCRIPTION: Shows the command to install a specific version of Gatsby (`gatsby@qod`) that includes the experimental 'Queries on Demand' feature. This command uses `npm` to install the specified Gatsby version.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/v2.26/index.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpm install gatsby@qod\n```\n\n----------------------------------------\n\nTITLE: Updating qs Dependency in gatsby-source-wordpress\nDESCRIPTION: This commit updates the qs dependency to version ^6.9.0 in the gatsby-source-wordpress package. Updating dependencies ensures compatibility and access to the newest features.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-wordpress/CHANGELOG.md#_snippet_7\n\nLANGUAGE: Commit Message\nCODE:\n```\n8119d4b\n```\n\n----------------------------------------\n\nTITLE: Event List Component (event-list.js)\nDESCRIPTION: This snippet defines a simple event list component. It receives an 'events' prop containing event data and renders a stringified JSON representation of the events within a 'pre' element. This is intended as a temporary placeholder for the actual event list UI.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/building-a-theme.md#_snippet_28\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\"\n\nconst EventList = ({ events }) => <pre>{JSON.stringify(events, null, 2)}</pre>\n\nexport default EventList\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query for Prismic Data\nDESCRIPTION: This GraphQL query fetches data from Prismic using the 'allPrismicPost' node. It retrieves the 'date', 'title.text', and 'content.html' fields for each post. This query is designed to be used in GraphiQL or within Gatsby page components to access content from Prismic.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/sourcing-data/sourcing-from-prismic.md#_snippet_4\n\nLANGUAGE: GraphQL\nCODE:\n```\nquery {\n  allPrismicPost {\n    edges {\n      node {\n        data {\n          date\n          title {\n            text\n          }\n          content {\n            html\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Gatsby Frontmatter Metadata\nDESCRIPTION: This YAML snippet defines the frontmatter metadata for a Gatsby blog post. The 'slug' property determines the URL path for the post, 'date' specifies the publication date, and 'title' sets the title of the post.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/using-markdown-pages/src/markdown-pages/post-2.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n---\nslug: \"/blog/my-second-post\"\ndate: \"2020-05-07\"\ntitle: \"My second blog post\"\n---\n```\n\n----------------------------------------\n\nTITLE: Install Emotion dependencies\nDESCRIPTION: Installs the necessary dependencies for Emotion and Gatsby, including gatsby-plugin-emotion, @emotion/react, and @emotion/styled.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/styling/emotion.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install gatsby-plugin-emotion @emotion/react @emotion/styled\n```\n\n----------------------------------------\n\nTITLE: Render Blog Posts on Index Page (JSX)\nDESCRIPTION: This code snippet renders a list of sorted blog posts on the homepage (`src/pages/index.js`). It uses the data from a GraphQL query to display the title and excerpt of each post. Dependencies: React, Gatsby, GraphQL, Layout component, SEO component. Input: GraphQL query result containing blog post data. Output: HTML markup displaying a list of blog posts.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-wordpress/docs/tutorials/building-a-new-site-wordpress-and-gatsby.md#_snippet_6\n\nLANGUAGE: JSX\nCODE:\n```\nimport React from \"react\"\nimport { graphql } from \"gatsby\"\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\n\nexport default function Home({ data }) {\n  //highlight-line\n  return (\n    <Layout>\n      <SEO title=\"home\" />\n      {/* highlight-start */}\n      <h1>My WordPress Blog</h1>\n      <h4>Posts</h4>\n      {data.allWpPost.nodes.map(node => (\n        <div>\n          <p>{node.title}</p>\n          <div dangerouslySetInnerHTML={{ __html: node.excerpt }} />\n        </div>\n      ))}\n      {/* highlight-end */}\n    </Layout>\n  )\n}\n\n//highlight-start\nexport const pageQuery = graphql`\n  query {\n    allWpPost(sort: { fields: [date] }) {\n      nodes {\n        title\n        excerpt\n        slug\n      }\n    }\n  }\n`\n//highlight-end\n```\n\n----------------------------------------\n\nTITLE: Webpack configuration for replacing a module\nDESCRIPTION: This code demonstrates how to customize the webpack configuration in `gatsby-node.js` to replace a problematic module with a null loader during the HTML build process. It targets the `build-html` and `develop-html` stages and uses the `loaders.null()` function to effectively remove the module from the build.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/debugging-html-builds.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nexports.onCreateWebpackConfig = ({ stage, loaders, actions }) => {\n  if (stage === \"build-html\" || stage === \"develop-html\") {\n    actions.setWebpackConfig({\n      module: {\n        rules: [\n          {\n            test: /bad-module/,\n            use: loaders.null(),\n          },\n        ],\n      },\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Gatsby Site with Starter Default\nDESCRIPTION: This command initializes a new Gatsby site using the 'gatsby-starter-default' starter. It sets up a basic Gatsby project structure in the specified directory.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/adding-search-with-js-search.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngatsby new js-search-example https://github.com/gatsbyjs/gatsby-starter-default\n```\n\n----------------------------------------\n\nTITLE: Adding checkSupportedExtensions (JavaScript)\nDESCRIPTION: This snippet adds the `checkSupportedExtensions` function, likely to improve the validation or handling of image file extensions. This ensures that only supported image types are processed by the sharp transformer, preventing errors.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-sharp/CHANGELOG.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n91e7bfb\n```\n\n----------------------------------------\n\nTITLE: Bump Node Version Requirement\nDESCRIPTION: This feature update bumps the minimum required Node.js version for Gatsby to 10.13.0. This ensures compatibility with newer JavaScript features and security updates provided by more recent Node.js releases.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-google-tagmanager/CHANGELOG.md#_snippet_16\n\nLANGUAGE: text\nCODE:\n```\n**gatsby:** bump node min version to 10.13.0 ([#22400](https://github.com/gatsbyjs/gatsby/issues/22400)) ([83d681a](https://github.com/gatsbyjs/gatsby/commit/83d681a))\n```\n\n----------------------------------------\n\nTITLE: Gatsby Benchmark Execution\nDESCRIPTION: This command executes the Gatsby benchmark with specified parameters: number of pages (1000), memory limit (2GB), image width (100px), and image height (200px). It first generates image pools if they don't exist or are insufficient.  It cleans up previous runs, generates pages with content and images, cleans the Gatsby cache, and builds the site.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/benchmarks/gabe-fs-markdown-images/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nW=100 H=200 N=1000 M=2 yarn bench\n```\n\n----------------------------------------\n\nTITLE: Configuring tableOfContents in gatsby-config.js (JavaScript)\nDESCRIPTION: Shows how to configure default options for the table of contents generation within the `gatsby-config.js` file. This allows setting default values for `heading` and `maxDepth`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-remark/README.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-transformer-remark`,\n      options: {\n        tableOfContents: {\n          heading: null,\n          maxDepth: 6,\n        },\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Create Gatsby Site using Gatsby CLI\nDESCRIPTION: This command uses the Gatsby CLI to create a new Gatsby site based on a specified starter. It clones the starter repository and initializes a new project with it.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/starters/README-template.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# create a new Gatsby site using the <%= name %> starter\ngatsby new my-<%= name %>-starter https://github.com/gatsbyjs/gatsby-starter-<%= name %>\n```\n\n----------------------------------------\n\nTITLE: Displaying Gatsby Environment Information\nDESCRIPTION: This command displays helpful environment information about your Gatsby project, which is often required when submitting bug reports. The command provides details about your Gatsby version, Node.js version, and other relevant dependencies.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-cli/README.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\ngatsby info\n```\n\n----------------------------------------\n\nTITLE: Bumping Babel minor version\nDESCRIPTION: This commit bumps the minor version of the Babel dependency.  It includes minor updates and bug fixes in the Babel transpiler.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-twitter/CHANGELOG.md#_snippet_13\n\nLANGUAGE: TEXT\nCODE:\n```\nbump babel minor [#31857](https://github.com/gatsbyjs/gatsby/issues/31857) ([7d42e8d](https://github.com/gatsbyjs/gatsby/commit/7d42e8d866e46e9c39838d812d080d06433f7060))\n```\n\n----------------------------------------\n\nTITLE: Importing Bulma styles and usage\nDESCRIPTION: This React component (index.js) imports the custom SCSS file and utilizes Bulma's CSS classes to structure the content within a container and columns layout, showcasing basic Bulma elements such as titles and content paragraphs.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/styling/bulma.md#_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\nimport React from \"react\"\nimport \"./mystyles.scss\"\n\nconst IndexPage = () => {\n  return (\n    <div className=\"container\">\n      <div className=\"columns\">\n        <div className=\"column\">\n          <h2 className=\"title is-2\">Level 2 heading</h2>\n          <p className=\"content\">Cool content. Using Bulma!</p>\n        </div>\n\n        <div className=\"column is-four-fifths\">\n          <h2 className=\"title is-2\">Level 2 heading</h2>\n          <p className=\"content\">This column is cool too!</p>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default IndexPage\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query for Nested Field\nDESCRIPTION: This GraphQL query demonstrates how to access the custom field `someInformation` created using `createNodeField`. It queries the `fields` object nested within the node.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/graphql-data-layer/schema-customization.md#_snippet_25\n\nLANGUAGE: graphql\nCODE:\n```\nnodes {\n  fields {\n    someInformation\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Run Gatsby Query Timing (Loki No Index) - More Pages & Types\nDESCRIPTION: This shell command executes the `runQueryTiming.sh` script to benchmark Gatsby query performance with Loki datastore and no indexes enabled, with more pages and types. It sets the number of page types (NUM_TYPES) and the number of pages (NUM_PAGES) as environment variables for the script.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/benchmarks/query/recording.md#_snippet_7\n\nLANGUAGE: Shell Script\nCODE:\n```\nquery $ NUM_TYPES=100 NUM_PAGES=20000 bin/runQueryTiming.sh\n27.486\n```\n\n----------------------------------------\n\nTITLE: Bump node min version\nDESCRIPTION: This snippet details a feature where the minimum required Node.js version is bumped to 10.13.0 for the gatsby-plugin-react-css-modules package. This ensures compatibility with newer JavaScript features and dependencies.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-react-css-modules/CHANGELOG.md#_snippet_7\n\nLANGUAGE: Features\nCODE:\n```\n- **gatsby:** bump node min version to 10.13.0 ([#22400](https://github.com/gatsbyjs/gatsby/issues/22400)) ([83d681a](https://github.com/gatsbyjs/gatsby/commit/83d681a))\n```\n\n----------------------------------------\n\nTITLE: Profiling Gatsby Build Memory Usage with process-top\nDESCRIPTION: This command uses the `process-top` tool to profile the memory usage of the `gatsby build` process. It outputs profile information every second, including CPU usage, RSS (total memory used), heap usage, external memory usage, delay, timestamp, and load averages. This helps in identifying memory spikes and establishing a baseline for memory usage during builds.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/performance/resolving-out-of-memory-issues.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpx process-top ./node_modules/.bin/gatsby build\n```\n\n----------------------------------------\n\nTITLE: Create Pages from Markdown Nodes JavaScript\nDESCRIPTION: This JavaScript code snippet from gatsby-node.js demonstrates how to create pages from MarkdownRemark nodes using the previously generated slugs. It queries all MarkdownRemark nodes, extracts the slug from each node's fields, and calls createPage to generate a page for each markdown file.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v0-to-v1.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nexports.createPages = ({ graphql, boundActionCreators }) => {\n  const { createPage } = boundActionCreators\n\n  return new Promise((resolve, reject) => {\n    const pages = []\n    const blogPost = path.resolve(\"src/templates/blog-post.js\")\n    // Query for all markdown \"nodes\" and for the slug you previously created.\n    resolve(\n      graphql(\n        `\n          {\n            allMarkdownRemark {\n              edges {\n                node {\n                  fields {\n                    slug\n                  }\n                }\n              }\n            }\n          }\n        `\n      ).then(result => {\n        if (result.errors) {\n          console.log(result.errors)\n          reject(result.errors)\n        }\n\n        // Create blog posts pages.\n        result.data.allMarkdownRemark.edges.forEach(edge => {\n          createPage({\n            path: edge.node.fields.slug, // required\n            component: blogPost,\n            context: {\n              slug: edge.node.fields.slug,\n            },\n          })\n        })\n\n        return\n      })\n    )\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Default Pageview Tracking in Gatsby Google Gtag\nDESCRIPTION: This commit disables default pageview tracking in the gatsby-plugin-google-gtag plugin, giving users more control over what is tracked and how it is tracked.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-google-gtag/CHANGELOG.md#_snippet_28\n\nLANGUAGE: Diff\nCODE:\n```\n1e8f665\n```\n\n----------------------------------------\n\nTITLE: Inline HTML Syntax\nDESCRIPTION: Demonstrates how to embed raw HTML within Markdown content. It also notes that while HTML works, Markdown within HTML does not render well.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/using-remark/src/pages/2016-04-15---hello-world-kitchen-sink/index.md#_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<dl>\n  <dt>Definition list</dt>\n  <dd>Is something people use sometimes.</dd>\n\n  <dt>Markdown in HTML</dt>\n  <dd>Does *not* work **very** well. Use HTML <em>tags</em>.</dd>\n</dl>\n```\n\n----------------------------------------\n\nTITLE: Replacing GatsbyJS.org URLs Chore JavaScript\nDESCRIPTION: This commit replaces all instances of `gatsbyjs.org` with the updated domain `gatsbyjs.com`. This ensures that links and references within the codebase point to the correct and current Gatsby website. This is a maintenance task that helps keep documentation and resources up-to-date and accurate.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-catch-links/CHANGELOG.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nreplace all uses of gatsbyjs.org with gatsbyjs.com [#35101](https://github.com/gatsbyjs/gatsby/issues/35101) ([16cff41](https://github.com/gatsbyjs/gatsby/commit/16cff413e154dc4e74fc5be631d52c76273e5cbc))\n```\n\n----------------------------------------\n\nTITLE: Updating Gatsby Dependency in package.json\nDESCRIPTION: This snippet shows how to update the Gatsby version in your package.json file to the latest version (v3).  This is the first step in migrating from Gatsby v2 to v3. You will need to modify the \"gatsby\" key within the \"dependencies\" object.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v2-to-v3.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"dependencies\": {\n    \"gatsby\": \"^3.0.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Agility Content (GraphQL)\nDESCRIPTION: This GraphQL query retrieves all `AgilityPost` nodes and selects specific custom fields for each post, including the title, formatted date, image URL and label, and content. This is used for sourcing blog posts from Agility CMS.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/sourcing-from-agilitycms.md#_snippet_6\n\nLANGUAGE: GraphQL\nCODE:\n```\nquery {\n  posts: allAgilityPost {\n    nodes {\n      customFields {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        image {\n          url\n          label\n        }\n        content\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Install Gatsby CLI globally using npm\nDESCRIPTION: This command installs the Gatsby CLI globally using npm, allowing you to use Gatsby CLI commands such as `gatsby new` from anywhere in your terminal. The `-g` flag specifies a global installation. It requires npm to be installed.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/glossary/npm.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install -g gatsby-cli\n```\n\n----------------------------------------\n\nTITLE: Create page in gatsby-node.js\nDESCRIPTION: This code snippet demonstrates how to programmatically create a page in Gatsby using the `createPages` API. It specifies the path and component for the new page. Requires Gatsby's `createPages` Node API.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/why-gatsby-uses-graphql.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nexports.createPages = ({ actions: { createPage } }) => {\n  createPage({\n    path: \"/no-data/\",\n    component: require.resolve(\"./src/templates/no-data.js\"),\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring excerpt separator (JavaScript)\nDESCRIPTION: Demonstrates configuring an excerpt separator in `gatsby-config.js` to define where the excerpt should end. The `excerpt_separator` option specifies the string used to mark the end of the excerpt in Markdown files.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-remark/README.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-transformer-remark`,\n      options: {\n        excerpt_separator: `<!-- end -->`\n      }\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Highlighting Lines in HTML\nDESCRIPTION: This HTML snippet demonstrates how to highlight a single line and the next line using `highlight-line` and `highlight-next-line` comments.  The `<h1>` element is highlighted, and the `<p>` element and its text content are highlighted as the next line.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-embed-snippet/README.md#_snippet_16\n\nLANGUAGE: html\nCODE:\n```\n<html>\n  <body>\n    <h1>highlight me</h1> <!-- highlight-line -->\n    <p>\n      <!-- highlight-next-line -->\n      And me\n    </p>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Single Page App HTML Structure\nDESCRIPTION: This HTML snippet demonstrates the basic structure of a single-page application (SPA).  All URL requests are routed to this single HTML file. The JavaScript file then handles rendering the application's content within the 'app' div. The main drawback is that the content is not initially present in the HTML, impacting SEO and perceived load time.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/glossary/server-side-rendering.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width,user-scalable=yes\" />\n    <title>My Single Page App</title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"./style.css\" />\n  </head>\n  <body>\n    <main id=\"app\"></main>\n    <script type=\"text/javascript\" src=\"./js.js\"></script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Fixing Respect DNT Option Path in Gatsby Google Gtag\nDESCRIPTION: This commit corrects the path used by the respectDNT option in the gatsby-plugin-google-gtag plugin, ensuring it functions correctly and respects users' Do Not Track preferences.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-google-gtag/CHANGELOG.md#_snippet_27\n\nLANGUAGE: Diff\nCODE:\n```\na0eb2dd\n```\n\n----------------------------------------\n\nTITLE: Run Preload Fonts Script\nDESCRIPTION: This command executes the `gatsby-preload-fonts` script defined in `package.json`.  This script analyzes your site's routes and generates the `font-preload-cache.json` file which is required by the plugin.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-preload-fonts/README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm run preload-fonts\n```\n\n----------------------------------------\n\nTITLE: Updating component path in createPage to include contentFilePath\nDESCRIPTION: This code modifies the `createPage` action to include the `internal.contentFilePath` as a query parameter in the component path.  This ensures that the correct MDX content is rendered for each page.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/routing/migrate-remark-to-mdx.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\ncreatePage({\n  path: post.fields.slug,\n- component: blogPost,\n+ component: `${blogPost}?__contentFilePath=${post.internal.contentFilePath}`,\n  context: {\n```\n\n----------------------------------------\n\nTITLE: Configuring gatsby-source-flotiq in gatsby-config.js\nDESCRIPTION: This code snippet configures the `gatsby-source-flotiq` plugin in `gatsby-config.js`. It specifies the `baseUrl` and `authToken` options using environment variables defined in `.env`. This configuration allows Gatsby to fetch data from Flotiq.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/sourcing-from-flotiq.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n// required to pull the variables from .env\nrequire(\"dotenv\").config()\n\nmodule.exports = {\n  // ...\n  plugins: [\n    {\n      resolve: \"gatsby-source-flotiq\",\n      options: {\n        baseUrl: process.env.GATSBY_FLOTIQ_BASE_URL,\n        authToken: process.env.GATSBY_FLOTIQ_API_KEY,\n      },\n    },\n  ],\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Cache Control for Static Files\nDESCRIPTION: This snippet illustrates the cache-control header for files located in the `static` directory of a Gatsby site. These files, identified by content-based hashes in their filenames, can be cached indefinitely. The header utilizes `public`, `max-age=31536000`, and `immutable` to enable long-term caching.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/previews-deploys-hosting/caching.md#_snippet_3\n\nLANGUAGE: HTTP\nCODE:\n```\ncache-control: public, max-age=31536000, immutable\n```\n\n----------------------------------------\n\nTITLE: Creating a Foreign-Key Relationship Between Post and Asset (TS)\nDESCRIPTION: This snippet shows how to create a foreign-key relationship between the Post and Asset types in Gatsby using the @link directive. This establishes a connection between the image field of a Post and an Asset node.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/creating-a-source-plugin/part-6/index.mdx#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ncreateTypes(`\n  type ${NODE_TYPES.Post} implements Node {\n    id: ID!\n    _id: Int!\n    slug: String!\n    title: String!\n    author: ${NODE_TYPES.Author} @link(by: \"name\")\n// highlight-next-line\n    image: ${NODE_TYPES.Asset} @link\n  }\n\n  type ${NODE_TYPES.Author} implements Node {\n    id: ID!\n    _id: Int!\n    name: String!\n  }\n\n  type ${NODE_TYPES.Asset} implements Node & RemoteFile {\n    url: String!\n    alt: String!\n    width: Int!\n    height: Int!\n  }\n`)\n```\n\n----------------------------------------\n\nTITLE: Updating @graphql-tools/wrap Dependency\nDESCRIPTION: This commit updates the @graphql-tools/wrap dependency to version ^7.0.8 within the gatsby-source-graphql package. Updating this dependency ensures compatibility, takes advantage of new features, and incorporates any relevant bug fixes or security improvements.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-graphql/CHANGELOG.md#_snippet_17\n\nLANGUAGE: Text\nCODE:\n```\nupdate dependency @graphql-tools/wrap to ^7.0.8 for gatsby-source-graphql [#32572](https://github.com/gatsbyjs/gatsby/issues/32572) ([e5d8603](https://github.com/gatsbyjs/gatsby/commit/e5d860380cb2f6a1dc4dc6ee29b2cdaab02ca670))\n```\n\n----------------------------------------\n\nTITLE: Creating a new Gatsby site using default starter in Shell\nDESCRIPTION: This command creates a new Gatsby site named 'my-blazing-fast-site' using the default starter. It clones the default starter into the specified directory.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/starters/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# create a new Gatsby site using the default starter\ngatsby new my-blazing-fast-site\n```\n\n----------------------------------------\n\nTITLE: CodeSandbox Import Example - JavaScript\nDESCRIPTION: Illustrates how to import modules within a CodeSandbox example when using multiple files. Specifically shows importing a utility function from `./utils` and a CSS file `./index.css` using ES6 module syntax. This is used in conjunction with the `gatsby-remark-code-repls` plugin to create a CodeSandbox REPL from local files.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-code-repls/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { foo } from \"./utils\"\n\nimport \"./index.css\"\n```\n\n----------------------------------------\n\nTITLE: Install gatsby-plugin-canonical-urls\nDESCRIPTION: Installs the gatsby-plugin-canonical-urls package using npm. This is a prerequisite for using the plugin in a Gatsby project.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-canonical-urls/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install gatsby-plugin-canonical-urls\n```\n\n----------------------------------------\n\nTITLE: Logical Conditional Rendering\nDESCRIPTION: This code snippet demonstrates a FlexPage component that conditionally renders a Carousel component based on the `hasCarousel` prop.  This is a simpler form of conditional rendering where a component is rendered or not depending on a boolean value. The Heading, Text and Carousel components need to be defined.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/using-loadable-components/README.md#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from \"react\"\n\nconst FlexPage = ({ hasCarousel }) => {\n  return (\n    <div>\n      <Heading />\n      <Text />\n      {hasCarousel && <Carousel />}\n    </div>\n  )\n}\n\nexport default FlexPage\n```\n\n----------------------------------------\n\nTITLE: GraphQL query result example\nDESCRIPTION: Example result of the GraphQL query. Demonstrates how the JSON data is structured after transformation by the gatsby-transformer-json plugin.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-json/README.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  allLettersJson: {\n    edges: [\n      {\n        node: {\n          value: \"a\",\n        },\n      },\n      {\n        node: {\n          value: \"b\",\n        },\n      },\n      {\n        node: {\n          value: \"c\",\n        },\n      },\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Markdown Excerpt with Custom Length in GraphQL\nDESCRIPTION: This GraphQL query retrieves all MarkdownRemark nodes and extracts an excerpt from each. The `pruneLength` parameter is used to specify the desired length of the excerpt in characters, overriding the default value. This allows for customized excerpt lengths based on the content and design requirements.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/using-remark/src/pages/examples/example---no-separator/index.md#_snippet_0\n\nLANGUAGE: GraphQL\nCODE:\n```\n{\n  allMarkdownRemark {\n    edges {\n      node {\n        excerpt(pruneLength: 280)\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Canonical URL\nDESCRIPTION: Shows an example of the canonical URL added to the HTML head. The `href` attribute contains the full URL for the page.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-canonical-urls/README.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"canonical\" href=\"https://www.example.com/about-us/\" />\n```\n\n----------------------------------------\n\nTITLE: Format Dates and Create EventDate Component (JSX)\nDESCRIPTION: This snippet creates a helper function `getDate` and an `EventDate` component to format and display event dates in a human-readable format. It handles single-day, multi-day, and events spanning different months. The main Event component then uses the EventDate component to display the dates.  Dependencies: React.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/building-a-theme.md#_snippet_35\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\"\n\n// highlight-start\nconst getDate = (date, { day = true, month = true, year = true } = {}) =>\n  date.toLocaleDateString(\"en-US\", {\n    day: day ? \"numeric\" : undefined,\n    month: month ? \"long\" : undefined,\n    year: year ? \"numeric\" : undefined,\n  })\n\nconst EventDate = ({ startDate, endDate }) => {\n  const start = new Date(startDate)\n  const end = new Date(endDate)\n  const isOneDay = start.toDateString() === end.toDateString()\n\n  return (\n    <>\n      <time dateTime={start.toISOString()}>\n        {getDate(start, { year: isOneDay })}\n      </time>\n      {!isOneDay && (\n        <>\n          ‚Äì\n          <time dateTime={end.toISOString()}>\n            {getDate(end, { month: start.getMonth() !== end.getMonth() })}\n          </time>\n        </>\n      )}\n    </>\n  )\n}\n// highlight-end\n\nconst Event = ({ name, location, url, startDate, endDate }) => (\n  <div>\n    <h2>\n      {name} ({location})\n    </h2>\n    <p>\n      // highlight-start\n      <EventDate startDate={startDate} endDate={endDate} />\n      // highlight-end\n    </p>\n    <p>\n      Website: <a href={url}>{url}</a>\n    </p>\n  </div>\n)\n\nexport default Event\n```\n\n----------------------------------------\n\nTITLE: Ignoring files using shorthand\nDESCRIPTION: This snippet shows how to use the `ignore` option with a shorthand syntax to prevent the creation of specific pages. It demonstrates how to ignore a specific file (blog index page) using a regular expression pattern.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-page-creator/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-page-creator`,\n      options: {\n        path: `${__dirname}/src/indexes/pages`,\n        ignore: [`blog.(js|ts)?(x)`],\n        // See pattern syntax recognized by micromatch\n        // https://www.npmjs.com/package/micromatch#matching-features\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Babel Monorepo in GatsbyJS\nDESCRIPTION: This snippet outlines the chore of updating the Babel monorepo within GatsbyJS. This involves upgrading the Babel packages to their latest versions, ensuring compatibility with the latest JavaScript features and improvements in the transpilation process.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-excel/CHANGELOG.md#_snippet_20\n\nLANGUAGE: None\nCODE:\n```\nupdate babel monorepo [#31143](https://github.com/gatsbyjs/gatsby/issues/31143) ([701ab2f](https://github.com/gatsbyjs/gatsby/commit/701ab2f6690c3f1bbaf60cf572513ea566cc9ec9))\n```\n\n----------------------------------------\n\nTITLE: Run Gatsby develop\nDESCRIPTION: This command starts the Gatsby development server.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/using-plugin-options/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngatsby develop\n```\n\n----------------------------------------\n\nTITLE: GraphQL Config for VSCode\nDESCRIPTION: This JavaScript file configures the VSCode GraphQL extension to use Gatsby's autogenerated GraphQL schema.  It points the extension to the `graphql.config.json` file located in the `.cache/typegen` directory, allowing for autocompletion and validation in GraphQL queries. Requires the VSCode GraphQL extension.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/local-development/graphql-typegen.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = require(\"./.cache/typegen/graphql.config.json\")\n```\n\n----------------------------------------\n\nTITLE: Example HJSON Object (b.hjson)\nDESCRIPTION: This HJSON snippet shows the content of a single HJSON file (`b.hjson`).  When used with `gatsby-transformer-hjson` and placed in a specific directory structure, it will be converted into a Gatsby node. The `value` property will be accessible via GraphQL queries.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-hjson/README.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\nvalue: b\n```\n\n----------------------------------------\n\nTITLE: Modifying MediaItem nodes before creation/update in Gatsby\nDESCRIPTION: This code snippet demonstrates how to use `beforeChangeNode` to fetch files from WPGraphQL and create local Gatsby nodes when a MediaItem node is created or updated. It checks if lazy nodes are enabled and creates a local file node using `createLocalFileNode`. The ID of the created node is then saved to link the remote node.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-wordpress/docs/tutorials/transforming-data.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst defaultPluginOptions = {\n  // ...\n  type: {\n    MediaItem: {\n      beforeChangeNode: async ({ remoteNode, actionType, typeSettings }) => {\n        // we fetch lazy nodes files in resolvers, no need to fetch them here.\n        if (typeSettings.lazyNodes) {\n          return {\n            remoteNode,\n          }\n        }\n\n        if (\n          actionType === `CREATE_ALL` ||\n          actionType === `CREATE` ||\n          actionType === `UPDATE`\n        ) {\n          const createdMediaItem = await createLocalFileNode({\n            mediaItemNode: remoteNode,\n            parentName: `Node action ${actionType}`,\n          })\n\n          if (createdMediaItem) {\n            remoteNode.localFile = {\n              id: createdMediaItem.id,\n            }\n\n            return {\n              remoteNode,\n            }\n          }\n        }\n\n        return {\n          remoteNode,\n        }\n      },\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Applying CSS Class to GatsbyImage for Art Direction in Gatsby\nDESCRIPTION: This code snippet shows how to apply a CSS class to the `GatsbyImage` component when using `withArtDirection` for responsive images. This allows for styling the image container based on media queries, enabling changes to the aspect ratio or other visual properties for different screen sizes. The class `.art-directed` is defined in a separate CSS file (`./style.css`).\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/built-in-components/gatsby-plugin-image.md#_snippet_13\n\nLANGUAGE: JSX\nCODE:\n```\nimport { GatsbyImage, getImage, withArtDirection } from \"gatsby-plugin-image\"\nimport \"./style.css\"\n\nexport function MyImage({ data }) {\n  const images = withArtDirection(getImage(data.largeImage), [\n    {\n      media: \"(max-width: 1024px)\",\n      image: getImage(data.smallImage),\n    },\n  ])\n\n  return <GatsbyImage className=\"art-directed\" image={images} />\n}\n```\n\n----------------------------------------\n\nTITLE: Query Menu by Location in Gatsby with GraphQL\nDESCRIPTION: This GraphQL query retrieves a specific WordPress menu by its location using Gatsby's GraphQL API. It fetches the menu's ID, name, and its connected menu items, including their IDs, labels, titles, paths, and parent IDs. The 'GATSBY_HEADER_MENU' variable is expected to be defined.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-wordpress/docs/tutorials/using-wordpress-menus.md#_snippet_0\n\nLANGUAGE: GraphQL\nCODE:\n```\n{\n  wpMenu(locations: { eq: GATSBY_HEADER_MENU }) {\n    id\n    name\n    menuItems {\n      nodes {\n        id\n        label\n        title\n        path\n        parentId\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Query Parameter Redirect in gatsby-node.js\nDESCRIPTION: This snippet demonstrates a more complex query parameter redirect. `/param?id=id` is redirected to `/param/:id`. Requires Gatsby's `createPages` API and the `createRedirect` action.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/cloud/working-with-redirects-and-rewrites.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ncreateRedirect({\n  fromPath: `/param?id=:id`,\n  toPath: `/param/:id`,\n})\n```\n\n----------------------------------------\n\nTITLE: Importing YAML into a React Component\nDESCRIPTION: This React component imports YAML data and renders it in a list. It uses the Array.map method to iterate over the content and create list items.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/sourcing-data/sourcing-from-json-or-yaml.md#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\"\nimport YAMLData from \"../../content/My-YAML-Content.yaml\"\n\nconst YAMLbuildtime = () => (\n  <div style={{ maxWidth: `960px`, margin: `1.45rem` }}>\n    <h1>{YAMLData.title}</h1>\n    <ul>\n      {YAMLData.content.map((data, index) => {\n        return <li key={`content_item_${index}`}>{data.item}</li>\n      })}\n    </ul>\n  </div>\n)\nexport default YAMLbuildtime\n```\n\n----------------------------------------\n\nTITLE: Creating Pages with gatsby-node.js\nDESCRIPTION: This snippet demonstrates how to use `gatsby-node.js` to dynamically create a page in Gatsby and pass data to it via the `pageContext`. It fetches book data from an external source, configures options for js-search and creates a search page component with the fetched data. The snippet utilizes `axios` for fetching external data.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/adding-search-with-js-search.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst path = require(\"path\")\nconst axios = require(\"axios\")\n\nexports.createPages = ({ actions }) => {\n  const { createPage } = actions\n  return new Promise((resolve, reject) => {\n    axios\n      .get(\"https://bvaughn.github.io/js-search/books.json\")\n      .then(result => {\n        const { data } = result\n        /**\n         * creates a dynamic page with the data received\n         * injects the data into the context object alongside with some options\n         * to configure js-search\n         */\n        createPage({\n          path: \"/search\",\n          component: path.resolve(`./src/templates/ClientSearchTemplate.js`),\n          context: {\n            bookData: {\n              allBooks: data.books,\n              options: {\n                indexStrategy: \"Prefix match\",\n                searchSanitizer: \"Lower Case\",\n                TitleIndex: true,\n                AuthorIndex: true,\n                SearchByTerm: true,\n              },\n            },\n          },\n        })\n        resolve()\n      })\n      .catch(err => {\n        console.log(\"====================================\")\n        console.log(`error creating Page:${err}`)\n        console.log(\"====================================\")\n        reject(new Error(`error on page creation:\\n${err}`))\n      })\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Netlify Image CDN Configuration for Drupal\nDESCRIPTION: This TOML snippet demonstrates how to configure Netlify's image CDN for use with Drupal. It specifies a regular expression to allow images from the Drupal base URL, where `<your-drupal-base-url>` should be replaced with your actual Drupal base URL.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-adapter-netlify/README.md#_snippet_3\n\nLANGUAGE: TOML\nCODE:\n```\n[images]\nremote_images = [\n  # <your-drupal-base-url> is speciafied in the `baseUrl` option for the\n  # gatsby-source-drupal plugin in your gatsby-config file.\n  \"<your-drupal-base-url>/.*\"\n]\n```\n\n----------------------------------------\n\nTITLE: Using Constants for Node Type Names in Gatsby Schema Customization\nDESCRIPTION: This snippet illustrates how to use constants defined in a separate file (`./constants`) to dynamically define GraphQL type names in Gatsby's `createSchemaCustomization`. By using string interpolation with the `NODE_TYPES` constant, the code avoids hardcoding type names, making the code more maintainable and adaptable to changes. The `NODE_TYPES` constant is assumed to contain the string names for `Post` and `Author` types.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/creating-a-source-plugin/part-3/index.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { GatsbyNode } from \"gatsby\"\n// highlight-next-line\nimport { NODE_TYPES } from \"./constants\"\n\nexport const createSchemaCustomization: GatsbyNode[`createSchemaCustomization`] =\n  ({ actions }) => {\n    const { createTypes } = actions\n\n    createTypes(`\n// highlight-next-line\n      type ${NODE_TYPES.Post} implements Node {\n        id: ID!\n      }\n\n// highlight-next-line\n      type ${NODE_TYPES.Author} implements Node {\n        id: ID!\n      }\n    `)\n  }\n```\n\n----------------------------------------\n\nTITLE: Adding error handling using panicOnBuild\nDESCRIPTION: This code snippet demonstrates how to handle errors returned from a GraphQL API using `panicOnBuild`. It destructures the `errors` property from the `fetchGraphQL` response and uses a conditional statement to check for errors. If errors are present, it uses `reporter.panicOnBuild` to output the error message and immediately exit the build process. An early return is also added to prevent further node creation.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/creating-a-source-plugin/part-4/index.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Imports\n\nexport const sourceNodes: GatsbyNode[`sourceNodes`] = async (gatsbyApi) => {\n  // highlight-next-line\n  const { reporter } = gatsbyApi\n\n  // Types\n\n  // highlight-next-line\n  const { data, errors } = await fetchGraphQL<IApiResponse>(\n    `http://localhost:4000/graphql`,\n    `query FetchApi {\n      posts {\n        id\n        slug\n        title\n        image {\n          url\n          alt\n          width\n          height\n        }\n        author\n      }\n      authors {\n        id\n        name\n      }\n    }\n    `\n  )\n\n  // highlight-start\n  if (errors) {\n    // Do something...\n  }\n  // highlight-end\n\n  // Rest of sourceNodes\n}\n\n// Rest of file\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// Imports\n\nexport const sourceNodes: GatsbyNode[`sourceNodes`] = async (gatsbyApi) => {\n  // Rest of sourceNodes\n\n  if (errors) {\n    // highlight-next-line\n    reporter.panicOnBuild(errors[0].message)\n\n    // highlight-next-line\n    return\n  }\n\n  // Rest of sourceNodes\n}\n\n// Rest of file\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst { data, errors } = await fetchGraphQL<IApiResponse>(\n  `http://localhost:4000/graphql`,\n  `query FetchApi {\n    posts {\n      id\n      slug\n// highlight-next-line\n      title2\n      image {\n        url\n        alt\n        width\n        height\n      }\n      author\n    }\n    authors {\n      id\n      name\n    }\n  }\n  `\n)\n```\n\n----------------------------------------\n\nTITLE: Bug Fix: Use getNodesByType for plugin transformation\nDESCRIPTION: This commit updates the gatsby-plugin-mdx plugin to use `getNodesByType` during plugin transformation. This change ensures that the plugin correctly retrieves and processes nodes of a specific type, improving the reliability of transformations. This resolves a specific issue where node retrieval was failing during plugin execution.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-mdx/CHANGELOG.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n63d091a\n```\n\n----------------------------------------\n\nTITLE: Performance Improvement: Babel Parse Prevention in gatsby-plugin-mdx\nDESCRIPTION: This commit prevents the Babel parsing step during sourcing time within the gatsby-plugin-mdx plugin. This optimization aims to improve performance by skipping unnecessary Babel processing during the source data phase. The change is specific to the gatsby-plugin-mdx plugin.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-mdx/CHANGELOG.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n760845a\n```\n\n----------------------------------------\n\nTITLE: Filter Unused Variables\nDESCRIPTION: This code snippet shows a bug fix that filters out unused variables in GraphQL queries within the gatsby-source-graphql plugin. This optimization prevents unnecessary data retrieval and improves performance.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-graphql/CHANGELOG.md#_snippet_30\n\nLANGUAGE: diff\nCODE:\n```\n**gatsby-source-graphql:** filter unused variables ([#20293](https://github.com/gatsbyjs/gatsby/issues/20293)) ([cb8d987](https://github.com/gatsbyjs/gatsby/commit/cb8d987)), closes [#20280](https://github.com/gatsbyjs/gatsby/issues/20280)\n```\n\n----------------------------------------\n\nTITLE: Running Changelog Generator CLI\nDESCRIPTION: This command executes the Gatsby changelog generator CLI tool. It assumes that the script is located at `scripts/gatsby-changelog-generator/cli.js` and that the command is being run from the project root directory.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/scripts/gatsby-changelog-generator/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnode scripts/gatsby-changelog-generator/cli.js\n```\n\n----------------------------------------\n\nTITLE: Run Gatsby Development Server\nDESCRIPTION: This command starts the Gatsby development server. It allows you to preview and test your Gatsby site locally during development.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/using-gatsby-script/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnpm run develop\n```\n\n----------------------------------------\n\nTITLE: Using Correct Glob Pattern Paths for Routes in Gatsby Source WordPress\nDESCRIPTION: This commit fixes a bug in gatsby-source-wordpress where incorrect glob pattern paths were used for routes. The fix ensures that the correct glob pattern paths are used, allowing for proper route matching and data fetching.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-wordpress/CHANGELOG.md#_snippet_17\n\n\n\n----------------------------------------\n\nTITLE: Apply Patches for v5 JavaScript\nDESCRIPTION: This code snippet applies patches specifically for version 5 of the package. Patches usually contain bug fixes or minor adjustments to improve the stability and performance of the package.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-canonical-urls/CHANGELOG.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\napply patches for v5 [#36796](https://github.com/gatsbyjs/gatsby/issues/36796) ([25f79b6](https://github.com/gatsbyjs/gatsby/commit/25f79b6c3719fdf09584ade620a05c66ba2a697c))\n```\n\n----------------------------------------\n\nTITLE: Handling Links as Objects in Gatsby Drupal REST Responses\nDESCRIPTION: This bug fix addresses an issue where links were outputted as objects in REST responses from Drupal. The fix ensures that these links are properly handled, preventing errors during data processing.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-drupal/CHANGELOG.md#_snippet_31\n\n\n\n----------------------------------------\n\nTITLE: GraphQL Query to Fetch Product Prices from Stripe\nDESCRIPTION: This GraphQL query is used in Gatsby to fetch product prices from Stripe.  It retrieves all active Stripe prices and sorts them by unit amount. The query returns the ID, active status, currency, unit amount, and associated product details (ID and name) for each price.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/ecommerce-tutorial/index.md#_snippet_19\n\nLANGUAGE: graphql\nCODE:\n```\nquery ProductPrices {\n  prices: allStripePrice(\n    filter: { active: { eq: true } }\n    sort: { fields: [unit_amount] }\n  ) {\n    edges {\n      node {\n        id\n        active\n        currency\n        unit_amount\n        product {\n          id\n          name\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Gatsby Adapter in gatsby-config.js\nDESCRIPTION: This code snippet demonstrates how to configure the `gatsby-adapter-netlify` in `gatsby-config.js`. It shows importing the adapter and setting options like `excludeDatastoreFromEngineFunction` and `imageCDN`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-adapter-netlify/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst adapter = require(\"gatsby-adapter-netlify\").default\n\nmodule.exports = {\n  adapter: adapter({\n    excludeDatastoreFromEngineFunction: false,\n    imageCDN: false,\n  }),\n}\n```\n\n----------------------------------------\n\nTITLE: Allowing React Experimental in gatsby-plugin-sitemap\nDESCRIPTION: This chore allows the use of `react` and `react-dom` experimental versions within the `gatsby-plugin-sitemap`. This enables developers to test the plugin with the latest React features.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-sitemap/CHANGELOG.md#_snippet_9\n\nLANGUAGE: TEXT\nCODE:\n```\nallow react/react-dom@experimental [#36533](https://github.com/gatsbyjs/gatsby/issues/36533) ([7ef4a3f](https://github.com/gatsbyjs/gatsby/commit/7ef4a3fe080d45e9edaff9f1d4deebd12a00ddbd))\n```\n\n----------------------------------------\n\nTITLE: Fixing ignore pattern\nDESCRIPTION: This snippet showcases a bug fix addressing an issue with the ignore pattern. It involves wrapping the ignore pattern in quotes, possibly to ensure it is correctly interpreted by the underlying tooling.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-react-css-modules/CHANGELOG.md#_snippet_6\n\nLANGUAGE: Bug Fixes\nCODE:\n```\n- wrap ignore pattern in quotes ([#23176](https://github.com/gatsbyjs/gatsby/issues/23176)) ([7563db6](https://github.com/gatsbyjs/gatsby/commit/7563db6))\n```\n\n----------------------------------------\n\nTITLE: Destructuring Data in sourceNodes\nDESCRIPTION: Destructuring the `data` object to extract `posts` and `authors` arrays, with default empty array values.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/creating-a-source-plugin/part-2/index.mdx#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n// Rest of the file\n\nexport const sourceNodes: GatsbyNode[`sourceNodes`] = async (gatsbyApi) => {\n  // Rest of sourceNodes\n\n  const { posts = [], authors = [] } = data\n}\n```\n\n----------------------------------------\n\nTITLE: Updating sharp dependency in gatsby-remark-images-contentful\nDESCRIPTION: This code snippet shows the chore of updating the sharp dependency.  This likely involves upgrading to a newer version of the sharp library to leverage new features, performance improvements, or security patches.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-images-contentful/CHANGELOG.md#_snippet_11\n\nLANGUAGE: None\nCODE:\n```\nupdate sharp [#35303](https://github.com/gatsbyjs/gatsby/issues/35303) ([d267bb3](https://github.com/gatsbyjs/gatsby/commit/d267bb3d7547d08cfaabfbfc93199c785c50aec3))\n```\n\n----------------------------------------\n\nTITLE: Fixing Joi Validation for Production Bundles in Webpack JavaScript\nDESCRIPTION: This snippet addresses an issue where Joi validation was breaking for production bundles in Webpack. The fix ensures that Joi validation works correctly, allowing for more robust error handling and configuration validation during the build process. This prevents unexpected issues in production environments.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-cli/CHANGELOG.md#_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\n4c50024\n```\n\n----------------------------------------\n\nTITLE: Markdown Relative Hyperlink - Good Example\nDESCRIPTION: This example demonstrates the preferred way to create relative hyperlinks within the GatsbyJS website. Using relative paths ensures that links function correctly when running locally or in preview environments.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/contributing/gatsby-style-guide.md#_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n[Gatsby's glossary](/docs/glossary/)\n```\n\n----------------------------------------\n\nTITLE: Determine CPU Core Count using gatsby-core-utils (JS)\nDESCRIPTION: Calculates the number of CPU cores using `gatsby-core-utils`. It can be configured with the `GATSBY_CPU_COUNT` environment variable. When set to `logical_cores`, it returns the number of logical cores. Without the env variable, it returns the number of real cores.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-core-utils/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { cpuCoreCount } = require(\"gatsby-core-utils\")\n\nconst coreCount = cpuCoreCount(false)\n// ...\n```\n\n----------------------------------------\n\nTITLE: Using package.json Scripts for Asset Deployment\nDESCRIPTION: This JSON snippet shows how to use `package.json` scripts to deploy assets after a Gatsby build. It defines a `postbuild` script that uses the `aws s3 sync` command to synchronize the contents of the `public` folder with an S3 bucket.  The `build` script includes the `--prefix-paths` option to properly prefix the assets during build.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/previews-deploys-hosting/asset-prefix.md#_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"scripts\": {\n    \"build\": \"gatsby build --prefix-paths\",\n    \"postbuild\": \"aws s3 sync public s3://mybucket\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Inject Page Info to CDATA - HTML Snippet\nDESCRIPTION: This code snippet demonstrates how Gatsby injects page-specific information into CDATA within the HTML document. This allows the client-side application (production-app.js) to access the page's path, component chunk name, and JSON name upon initial load. This ensures that the client-side application knows the page it is rendering.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/html-generation.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n/*\n<![\n  CDATA[ */\n    window.page={\n      \"path\": \"/blog/2.js\",\n      \"componentChunkName\": \"component---src-blog-2-js\",\n      \"jsonName\": \"blog-2-995\"\n    };\n    window.dataPath=\"621/path---blog-2-995-a74-dwfQIanOJGe2gi27a9CLKHjamc\";\n  */ ]\n]>\n*/\n```\n\n----------------------------------------\n\nTITLE: Updating peer dependencies\nDESCRIPTION: This code snippet shows the update of peer dependencies for gatsby-remark-embed-snippet. Peer dependencies are external packages that the current package relies on but does not bundle, ensuring compatibility and preventing conflicts.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-embed-snippet/CHANGELOG.md#_snippet_4\n\nLANGUAGE: none\nCODE:\n```\nUpdate peerDeps [#36965](https://github.com/gatsbyjs/gatsby/issues/36965) ([b624442](https://github.com/gatsbyjs/gatsby/commit/b6244424fe8b724cbc23b80b2b4f5424cc2055a4))\n```\n\n----------------------------------------\n\nTITLE: Detailed Benchmark Steps\nDESCRIPTION: This script outlines the detailed steps for running the Gatsby markdown benchmark. It includes installing dependencies using yarn, removing existing markdown pages, generating new pages with a specified number, cleaning the Gatsby cache, and building the Gatsby site with an increased maximum old space size to handle larger projects.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/benchmarks/markdown_slug/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n# Requires node 8+\n# nvm use 8\nyarn\nrm -r markdown-pages\nNUM_PAGES=2000 node md.generate.js\ngatsby clean\nnode --max_old_space_size=2000 node_modules/.bin/gatsby build\n```\n\n----------------------------------------\n\nTITLE: Using typeNameFromDir Function (JavaScript)\nDESCRIPTION: This snippet shows how to use the `typeNameFromDir` function provided by the `gatsby-transformer-csv` plugin to create a type name based on the directory containing the CSV files.  This function simplifies type naming based on directory structure, resulting in a cleaner and more organized schema.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-csv/README.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// In your gatsby-config.js\nconst { typeNameFromDir } = require(\"gatsby-transformer-csv\")\n\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-transformer-csv`,\n      options: {\n        typeName: typeNameFromDir,\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Query Medium Posts with GraphQL\nDESCRIPTION: This GraphQL query retrieves all Medium posts, sorted by creation date in descending order. It fetches the post's ID, title, subtitle, preview image ID, and author's name. The data is accessed through the `allMediumPost` node.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-medium/README.md#_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  allMediumPost(sort: { fields: [createdAt], order: DESC }) {\n    edges {\n      node {\n        id\n        title\n        virtuals {\n          subtitle\n          previewImage {\n            imageId\n          }\n        }\n        author {\n          name\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Ignore Pattern in Gatsby Config - JavaScript\nDESCRIPTION: This code snippet addresses a bug where the ignore pattern in the Gatsby configuration was not properly wrapped in quotes. It ensures that the ignore pattern is correctly interpreted, preventing unexpected behavior during Gatsby's build process. The fix involves wrapping the ignore pattern within quotes in the configuration file.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-jss/CHANGELOG.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nwrap ignore pattern in quotes ([#23176](https://github.com/gatsbyjs/gatsby/issues/23176)) ([7563db6](https://github.com/gatsbyjs/gatsby/commit/7563db6))\n```\n\n----------------------------------------\n\nTITLE: Adding TypeScript Types for OutboundLink in Gatsby\nDESCRIPTION: This commit introduces TypeScript types for the OutboundLink component in the gatsby-plugin-google-gtag plugin to improve type safety and developer experience.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-google-gtag/CHANGELOG.md#_snippet_23\n\nLANGUAGE: Diff\nCODE:\n```\nbc72163\n```\n\n----------------------------------------\n\nTITLE: Feature: Enable Core Web Vitals Tracking (gatsby-plugin-google-tagmanager)\nDESCRIPTION: Enables tracking of Core Web Vitals within Google Tag Manager. This allows users to monitor and improve website performance metrics directly through GTM. This feature relates to issue #31665.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-google-tagmanager/CHANGELOG.md#_snippet_7\n\nLANGUAGE: None\nCODE:\n```\nenable core webvitals tracking [#31665](https://github.com/gatsbyjs/gatsby/issues/31665) ([1ecd6e1](https://github.com/gatsbyjs/gatsby/commit/1ecd6e12eeedcabc54f3be00137a5d092978de58))\n```\n\n----------------------------------------\n\nTITLE: Configure Partytown to Resolve Google Analytics URL\nDESCRIPTION: This snippet shows how to use Partytown's `resolveUrl` vanilla config option to handle the Google Analytics script URL loaded by Google Tag Manager.  It modifies the URL to use a secure connection (HTTPS) and points to a proxied URL via Gatsby's third-party proxy, ensuring proper handling of the script in the Partytown context. Requires `location` to be defined in the scope, usually available in browser environments.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/built-in-components/gatsby-script.md#_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\"\n\nexport const onRenderBody = ({ setHeadComponents }) => {\n   setHeadComponents([\n     <script\n       key=\"partytown-vanilla-config\"\n       dangerouslySetInnerHTML={{\n         __html: `partytown = {\n           resolveUrl(url, location) {\n              if (url.hostname.includes('google-analytics')) {\n                // Use a secure connection\n                if (url?.protocol === 'http:') {\n                  url = new URL(url.href.replace('http', 'https'))\n                }\n\n                // Point to our proxied URL\n                const proxyUrl = new URL(location.origin + '/__third-party-proxy')\n                proxyUrl.searchParams.append('url', url)\n\n                return proxyUrl\n              }\n\n              return url\n           }\n         }`,\n       }}\n     />,\n   ])\n}\n```\n\n----------------------------------------\n\nTITLE: Define Custom Converter (JavaScript)\nDESCRIPTION: Defines a custom converter factory to override the default HTML conversion process. This example shows how to configure the `converterFactory` option in `gatsby-config.js` to use a custom converter class.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-asciidoc/README.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// In your gatsby-config.js, make sure to import or declare CustomConverter\nplugins: [\n  {\n    resolve: `gatsby-transformer-asciidoc`,\n    options: {\n      converterFactory: CustomConverter,\n    },\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: JSX Highlighting Example JSX\nDESCRIPTION: Illustrates how to highlight specific lines or ranges of lines in a JSX code snippet using comments. The highlight-line and highlight-range comments are used to specify which lines to highlight.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-embed-snippet/README.md#_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\"\nimport ReactDOM from \"react-dom\"\n\nconst name = \"Brian\" // highlight-line\n\nReactDOM.render(\n  <div>\n    {/* highlight-range{1-3} */}\n    <h1>Hello, ${name}!</h1>\n  </div>,\n  document.getElementById(\"root\")\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring gatsby-remark-smartypants options\nDESCRIPTION: This snippet demonstrates how to pass options to the `gatsby-remark-smartypants` plugin within the `gatsby-config.js` file.  It allows customization of the punctuation replacement behavior using the `retext-smartypants` API. Here, the `dashes` option is set to \"oldschool\".\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-smartypants/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// In your gatsby-config.js\nplugins: [\n  {\n    resolve: `gatsby-transformer-remark`,\n    options: {\n      plugins: [\n        {\n          resolve: \"gatsby-remark-smartypants\",\n          options: {\n            dashes: \"oldschool\",\n          },\n        },\n      ],\n    },\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Fixing File Node Creation in Gatsby Source Filesystem\nDESCRIPTION: This commit fixes an issue in gatsby-source-filesystem where plugins were unable to set the parent when creating File nodes using createRemoteFileNode. This ensures that plugins can correctly establish parent-child relationships between nodes, improving data consistency and query capabilities within Gatsby.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-screenshot/CHANGELOG.md#_snippet_15\n\nLANGUAGE: Diff\nCODE:\n```\n([5a3c1fc](https://github.com/gatsbyjs/gatsby/commit/5a3c1fc))\n```\n\n----------------------------------------\n\nTITLE: Updating Arch Linux\nDESCRIPTION: This snippet updates the package lists on Arch Linux and other pacman based distributions using the pacman package manager. This ensures the system is running the latest package information.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/local-development/gatsby-on-linux.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nsudo pacman -Sy\n```\n\n----------------------------------------\n\nTITLE: Sample Query Response (title, date and id)\nDESCRIPTION: This JSON response shows sample data returned from the GraphQL query fetching title, date and id of MDX nodes. Each node represents a blog post, with its `frontmatter` containing title and date, and a unique `id`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-5/index.mdx#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"allMdx\": {\n      \"nodes\": [\n        {\n          \"frontmatter\": {\n            \"date\": \"July 25, 2021\",\n            \"title\": \"Yet Another Post\"\n          },\n          \"id\": \"c4b5ae6d-f3ad-5ea4-ab54-b08a72badea1\"\n        },\n        {\n          \"frontmatter\": {\n            \"date\": \"July 23, 2021\",\n            \"title\": \"My First Post\"\n          },\n          \"id\": \"11b3a825-30c5-551d-a713-dd748e7d554a\"\n        },\n        {\n          \"frontmatter\": {\n            \"date\": \"July 24, 2021\",\n            \"title\": \"Another Post\"\n          },\n          \"id\": \"560896e4-0148-59b8-9a2b-bf79bee68fba\"\n        }\n      ]\n    }\n  },\n  \"extensions\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Define Error Codes Constant in TypeScript\nDESCRIPTION: Defines a constant object `ERROR_CODES` in TypeScript to store unique error IDs for a Gatsby plugin. This allows for namespaced error identification and easier debugging.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/creating-a-source-plugin/part-4/index.mdx#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport const NODE_TYPES = {\n  Post: `Post`,\n  Author: `Author`,\n} as const\n\nexport const ERROR_CODES = {\n  GraphQLSourcing: `10000`,\n} as const\n```\n\n----------------------------------------\n\nTITLE: Guarding Against Undefined DataLayer\nDESCRIPTION: This commit guards against the dataLayer being undefined in development. This fix prevents errors that could occur when the dataLayer is not yet initialized, improving the development experience.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-google-tagmanager/CHANGELOG.md#_snippet_19\n\nLANGUAGE: text\nCODE:\n```\n**gatsby-plugin-google-tagmanager:** guard against dataLayer being undefined in development ([#14437](https://github.com/gatsbyjs/gatsby/issues/14437)) ([ecb5d7b](https://github.com/gatsbyjs/gatsby/commit/ecb5d7b)), closes [#14424](https://github.com/gatsbyjs/gatsby/issues/14424)\n```\n\n----------------------------------------\n\nTITLE: Configure package.json for patch updates\nDESCRIPTION: This example shows how to configure the package.json file to allow updates only for patch releases by using the tilde (~) symbol before the version number.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/upgrade-gatsby-and-dependencies.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"dependencies\"{\n  \"gatsby\": \"~5.0.0\",\n}\n```\n\n----------------------------------------\n\nTITLE: Update Regex for Static Query Results\nDESCRIPTION: This commit updates the regular expression used to identify and cache static query results in gatsby-plugin-offline. This change ensures that new static query result patterns are correctly handled, improving the plugin's ability to provide offline support for dynamic content.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-offline/CHANGELOG.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n75ab9b8\n```\n\n----------------------------------------\n\nTITLE: Configuring Gatsby Source Ghost Plugin in gatsby-config.js\nDESCRIPTION: This configuration sets up the `gatsby-source-ghost` plugin with the necessary API credentials (apiUrl and contentApiKey) to connect to a Ghost CMS instance. The plugin will then fetch content from the specified Ghost site during the Gatsby build process.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/sourcing-from-ghost.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// These are working demo credentials, try them out!\n\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-source-ghost`,\n      options: {\n        apiUrl: `https://gatsby.ghost.io`,\n        contentApiKey: `9cc5c67c358edfdd81455149d0`,\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Manifest Icon Configuration in gatsby-config.js (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to configure the gatsby-plugin-manifest plugin to use icons in a 'favicons' directory instead of the restricted 'icons' directory. It shows the 'icon' and 'icons' properties within the plugin configuration, specifying the image source, sizes, and type.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-manifest/README.md#_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\n// In the gatsby-plugin-manifest section of your gatsby-config.js\n  icon: `src/images/icon.png`, // This path is relative to the root of the site.\n  icons: [\n    {\n        \"src\": \"favicons/icon-144x144.png\",\n        \"sizes\": \"144x144\",\n        \"type\": \"image/png\"\n    },  // Add or remove icon sizes as desired\n  ]\n```\n\n----------------------------------------\n\nTITLE: Querying Rich Text Content and References with GraphQL\nDESCRIPTION: This GraphQL query retrieves Rich Text content and its references from a Contentful blog post. It fetches the `title`, `slug`, and `bodyRichText` (which contains the raw Rich Text data and references to assets and other blog posts). It also includes fragments to retrieve specific fields from the referenced ContentfulAsset and ContentfulBlogPost nodes, including the `contentful_id` and `__typename` fields which are needed for rendering.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-contentful/README.md#_snippet_17\n\nLANGUAGE: graphql\nCODE:\n```\nquery pageQuery($id: String!) {\n  contentfulBlogPost(id: { eq: $id }) {\n    title\n    slug\n    # This is the rich text field, the name depends on your field configuration in Contentful\n    bodyRichText {\n      raw\n      references {\n        ... on ContentfulAsset {\n          # You'll need to query contentful_id in each reference\n          contentful_id\n          __typename\n          fixed(width: 1600) {\n            width\n            height\n            src\n            srcSet\n          }\n        }\n        ... on ContentfulBlogPost {\n          contentful_id\n          __typename\n          title\n          slug\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Product Listing Page\nDESCRIPTION: This React component displays a list of products fetched from Shopify. It uses Gatsby's `graphql` function to query the product data and renders a list of product titles with links to individual product pages, along with their descriptions and minimum prices. It requires the `gatsby` and `react` packages and `Layout` component.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/building-an-ecommerce-site-with-shopify.md#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\n\nconst ProductsPage = ({ data }) => (\n  <Layout>\n    <h1>Products</h1>\n    <ul>\n      {data.allShopifyProduct.edges.map(({ node }) => (\n        <li key={node.shopifyId}>\n          <h3>\n            <Link to={`/products/${node.handle}`}>{node.title}</Link>\n            {\" - \"}${node.priceRangeV2.minVariantPrice.amount}\n          </h3>\n          <p>{node.description}</p>\n        </li>\n      ))}\n    </ul>\n  </Layout>\n)\n\nexport default ProductsPage\n\nexport const query = graphql`\n  {\n    allShopifyProduct(sort: { title: ASC }) {\n      edges {\n        node {\n          title\n          shopifyId\n          description\n          handle\n          priceRangeV2 {\n            minVariantPrice {\n              amount\n            }\n          }\n        }\n      }\n    }\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: Adding JSON content\nDESCRIPTION: This JSON file defines the data structure that will be imported into the Gatsby page. It contains a title and a list of content items.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/sourcing-data/sourcing-from-json-or-yaml.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"title\": \"JSON content used at build time with Gatsby\",\n  \"content\": [\n    {\n      \"item\": \"Cupcake ipsum dolor. Sit amet marshmallow topping cheesecake muffin. Halvah croissant candy canes bonbon candy. Apple pie jelly beans topping carrot cake danish tart cake cheesecake. Muffin danish chocolate souffl√© pastry icing bonbon oat cake. Powder cake jujubes oat cake. Lemon drops tootsie roll marshmallow halvah carrot cake.\"\n    },\n    {\n      \"item\": \"Doggo ipsum borkdrive much ruin diet you are doing me the shock the neighborhood pupper doggorino length boy many pats, boofers heckin shooberino wrinkler. Very good spot very jealous pupper very hand that feed shibe smol, shoob. Long bois pupper doggo you are doin me a concern big ol yapper, smol boof most angery pupper I have ever seen puggorino. Mlem blep wow very biscit dat tungg tho wow very biscit, thicc ur givin me a spook. Many pats heckin you are doing me the shock corgo ur givin me a spook very hand that feed shibe shooberino, big ol pupper doge pats borkdrive. Such treat what a nice floof super chub such treat, smol thicc. Puggorino very good spot most angery pupper I have ever seen you are doing me the shock big ol pupper porgo corgo shoober, heckin good boys lotsa pats noodle horse very taste wow thicc. What a nice floof long doggo blep length boy borking doggo, much ruin diet floofs borkf.\"\n    },\n    {\n      \"item\": 192.33\n    },\n    {\n      \"item\": 111111\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Reference Guide Template - Markdown\nDESCRIPTION: Provides a markdown template to structure a Gatsby reference guide. Includes sections for introduction, feature details, and additional resources, as well as guidance on including diagrams, code examples, and parameter lists.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/contributing/docs-contributions/how-to-write-a-reference-guide.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Feature Name\n---\n\n## Introduction\n\nIn 2-3 sentences, give a high-level description of what this feature does,\nwhy it's important, and when it might be helpful for users.\n\n## Feature Name\n\nBreak up this section into multiple headings, as needed.\n\nHere are some general tips for helpful things to include:\n\n- Diagrams or other visuals, to show key processes or architectures.\n  - Make sure to include alt text for accessibility! For\n    help writing great alt text, refer to the W3C alt decision\n    tree: https://www.w3.org/WAI/tutorials/images/decision-tree/\n- Code examples, to show how to use the feature in practice.\n  - Be sure to include all the necessary imports!\n  - Introduce the code snippet with a sentence describing what the code does\n    and which parts the reader should pay particular attention to.\n  - Code snippets should be as close to real-world examples as possible.\n    Avoid using \"foobar\" examples.\n- Lists of parameters, including:\n  - A description of what it does\n  - The expected data type\n  - The default value\n- Tips for troubleshooting.\n  - Are there any edge cases that readers should be aware of?\n  - What common error messages might readers encounter? How can they\n    resolve the problem?\n\n## Additional Resources\n\nInclude other resources you think readers would benefit from or next steps\nthey might want to take after reading your Reference Guide. You can also\nmention any resources that helped you write the article (blog posts, outside\ntutorials, etc.).\n\n- Link to a blog post\n- Link to a YouTube tutorial\n- Link to an example site\n- Link to source code for a live site\n- Links to relevant plugins\n- Links to starters\n\n```\n\n----------------------------------------\n\nTITLE: Migrating Node Mutation with createNodeField in Gatsby\nDESCRIPTION: This code snippet demonstrates how to migrate from directly mutating nodes in `onCreateNode` to using `createNodeField` to update the datastore correctly. It shows the `diff` output to highlight changes in `onCreateNode` function and adds `createSchemaCustomization` function to preserve schema shape.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/local-development/debugging-missing-data.md#_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\nconst { createRemoteFileNode } = require(`gatsby-source-filesystem`)\n\nexports.onCreateNode = async ({\n  node, // the node that was just created\n-  actions: { createNode },\n+  actions: { createNode, createNodeField },\n  createNodeId,\n  getCache,\n}) => {\n  if (node.internal.type === `SomeNodeType`) {\n    const fileNode = await createRemoteFileNode({\n      // the url of the remote image to generate a node for\n      url: node.imgUrl,\n      parentNodeId: node.id,\n      createNode,\n      createNodeId,\n      getCache,\n    })\n\n    if (fileNode) {\n-      node.localFile___NODE = fileNode.id\n+      createNodeField({ node, name: 'localFile', value: fileNode.id })\n    }\n  }\n}\n+\n+exports.createSchemaCustomization = ({ actions }) => {\n+  const { createTypes } = actions\n+\n+  createTypes(`\n+    type SomeNodeType implements Node {\n+      localFile: File @link(from: \"fields.localFile\")\n+    }\n+  `)\n+}\n```\n\n----------------------------------------\n\nTITLE: Configuring gatsby-remark-images with gatsby-plugin-mdx\nDESCRIPTION: Configures the `gatsby-remark-images` plugin within the `gatsby-plugin-mdx` plugin in `gatsby-config.js`.  This makes `gatsby-remark-images` a sub-plugin of `gatsby-plugin-mdx`. It sets the `maxWidth` option to 1200, limiting the maximum width of inline images.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/images-and-media/working-with-images-in-markdown.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  plugins: [\n    // Rest of your plugins...\n    {\n      resolve: `gatsby-plugin-mdx`,\n      options: {\n        gatsbyRemarkPlugins: [\n          {\n            resolve: `gatsby-remark-images`,\n            options: {\n              maxWidth: 1200,\n            },\n          },\n        ],\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Pushing Code to GitHub Repository (Shell)\nDESCRIPTION: This code snippet shows how to push an existing codebase from a local machine to a new GitHub repository. It involves adding the remote origin, renaming the branch to 'main', and pushing the code to the remote repository.  It's crucial to replace 'YOUR_GITHUB_USERNAME' and 'YOUR_GITHUB_REPO_NAME' with actual GitHub credentials.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-1/index.mdx#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ngit remote add origin https://github.com/YOUR_GITHUB_USERNAME/YOUR_GITHUB_REPO_NAME.git\ngit branch -M main\ngit push -u origin main\n```\n\n----------------------------------------\n\nTITLE: Wrapping Ignore Pattern in Quotes (JavaScript)\nDESCRIPTION: This snippet fixes an issue where the ignore pattern was not correctly wrapped in quotes, potentially causing errors or unexpected behavior during file processing. Wrapping the pattern in quotes ensures correct interpretation by the system.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-sharp/CHANGELOG.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n7563db6\n```\n\n----------------------------------------\n\nTITLE: Pinning Cheerio version JavaScript\nDESCRIPTION: This snippet addresses a bug by pinning the Cheerio dependency to a specific version. This ensures compatibility and resolves potential issues arising from Cheerio updates. Cheerio is a fast, flexible, and lean implementation of core jQuery designed specifically for the server.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-images-contentful/CHANGELOG.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\npin cheerio [#39066](https://github.com/gatsbyjs/gatsby/issues/39066) ([e2c3a86](https://github.com/gatsbyjs/gatsby/commit/e2c3a866e438618275a5c2979cb20e47b84fe8dc))\n```\n\n----------------------------------------\n\nTITLE: Querying Author and Post Nodes with GraphQL\nDESCRIPTION: This GraphQL query fetches all author and post nodes, retrieving their names, titles, slugs, image URLs, and author information. It is used in the GraphiQL IDE to verify the data structure and content.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/creating-a-source-plugin/part-2/index.mdx#_snippet_15\n\nLANGUAGE: graphql\nCODE:\n```\nquery MyQuery {\n  allAuthor {\n    nodes {\n      name\n    }\n  }\n  allPost {\n    nodes {\n      title\n      slug\n      image {\n        url\n      }\n      author\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fix: Update fs-extra dependency in gatsby-plugin-image\nDESCRIPTION: This snippet updates the fs-extra dependency to version ^11.1.1 within the gatsby-plugin-image package. This change addresses a bug and ensures compatibility with the latest fs-extra features and fixes.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-image/CHANGELOG.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nupdate dependency fs-extra to ^11.1.1 [#37827](https://github.com/gatsbyjs/gatsby/issues/37827) ([3e9a590](https://github.com/gatsbyjs/gatsby/commit/3e9a590fdc0b4cdbc763b6a6e3ca3e983ac8231a))\n```\n\n----------------------------------------\n\nTITLE: Updating Axios Dependency\nDESCRIPTION: This update upgrades the axios dependency to version ^0.19.2, addressing potential security vulnerabilities or bug fixes in the previous version.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-drupal/CHANGELOG.md#_snippet_8\n\n\n\n----------------------------------------\n\nTITLE: Installing cURL on Ubuntu/Debian\nDESCRIPTION: This snippet installs cURL, a command-line tool for transferring data with URLs, on Ubuntu and Debian-based Linux distributions using the apt package manager. cURL is used to download additional dependencies.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/local-development/gatsby-on-linux.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt install curl\n```\n\n----------------------------------------\n\nTITLE: Installing the WordPress source plugin with npm\nDESCRIPTION: Installs the gatsby-source-wordpress plugin using npm. This plugin is necessary to fetch data from a WordPress site into the Gatsby application. It enables GraphQL queries to retrieve blog posts, pages, and other content.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/wordpress-source-plugin-tutorial.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install gatsby-source-wordpress\n```\n\n----------------------------------------\n\nTITLE: Install NPM Package\nDESCRIPTION: Installs the `gatsby-source-npm-package-search` plugin using npm. This plugin is necessary to fetch package information from Yarn's Algolia search index within a Gatsby project.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-npm-package-search/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install gatsby-source-npm\n```\n\n----------------------------------------\n\nTITLE: Adding Error Handling for Empty Body in Gatsby Source Drupal\nDESCRIPTION: This code snippet adds error handling for cases where an empty body is encountered when sourcing data from Drupal, preventing potential crashes or unexpected behavior in Gatsby.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-drupal/CHANGELOG.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nadd error handling for empty body\n```\n\n----------------------------------------\n\nTITLE: Bumping Babel Minor Version (Duplicate)\nDESCRIPTION: This commit increments the minor version of the Babel dependency. A minor version bump typically includes new features or improvements without breaking existing functionality.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-javascript-frontmatter/CHANGELOG.md#_snippet_12\n\nLANGUAGE: Shell\nCODE:\n```\nbump babel minor [#31857](https://github.com/gatsbyjs/gatsby/issues/31857) [#31859](https://github.com/gatsbyjs/gatsby/issues/31859) ([8636025](https://github.com/gatsbyjs/gatsby/commit/863602567930a39142ed33d9d1f1813b7dec8686))\n```\n\n----------------------------------------\n\nTITLE: Detailed Gatsby Build Steps with Page Generation\nDESCRIPTION: This snippet details the commands to generate markdown pages, clean the Gatsby cache, and build the Gatsby site. It includes setting the NUM_PAGES environment variable to control the number of generated pages and increasing the maximum old space size for the Node process.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/benchmarks/markdown_id/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n# Requires node 8+\n# nvm use 8\nyarn\nrm -r markdown-pages\nNUM_PAGES=2000 node md.generate.js\ngatsby clean\nnode --max_old_space_size=2000 node_modules/.bin/gatsby build\n```\n\n----------------------------------------\n\nTITLE: Creating a Page with Layout Component\nDESCRIPTION: This code demonstrates how to create a page in Gatsby using a layout component. It imports React, Link, and the Layout component, and then defines a function component called Who that returns JSX. The page content, including headings and links, is wrapped inside the Layout component to maintain a consistent structure. The Head component defines the title and favicon for the page.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/porting-an-html-site-to-gatsby.md#_snippet_11\n\nLANGUAGE: JSX\nCODE:\n```\nimport React from \"react\"\nimport { Link } from \"gatsby\"\nimport Layout from \"../components/layout\"\n\nexport default function Who() {\n  return (\n    <Layout>\n      <h1>Who We Are</h1>\n      <h2>These are our staff:</h2>\n      <ul>\n        <li>\n          <Link to=\"/who/ella-arborist\">Ella (Arborist)</Link>\n        </li>\n        <li>\n          <Link to=\"/who/sam-surgeon\">Sam (Tree Surgeon)</Link>\n        </li>\n        <li>\n          <Link to=\"/who/marin-leafer\">Marin (Leafer)</Link>\n        </li>\n      </ul>\n    </Layout>\n  )\n}\n\nexport const Head = () => (\n  <>\n    <title>Taylor's Tidy Trees - Who We Are</title>\n    <link href=\"/favicon.ico\" rel=\"shortcut icon\" type=\"image/x-icon\" />\n  </>\n)\n```\n\n----------------------------------------\n\nTITLE: Updating Contentful Dependency to ^6.1.3 - JavaScript\nDESCRIPTION: This snippet updates the `contentful` dependency to version ^6.1.3. This ensures that `gatsby-source-contentful` is using the most current version of the Contentful SDK, benefitting from bug fixes, performance improvements, and new features in the Contentful API client.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-contentful/CHANGELOG.md#_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\n53f67a7\n```\n\n----------------------------------------\n\nTITLE: Contentstack Environment Configuration\nDESCRIPTION: This code snippet shows the environment variables that need to be configured for the Gatsby site to connect to Contentstack. These variables include the API key, delivery token, and environment.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/sourcing-from-contentstack.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nCONTENTSTACK_API_KEY='apikey'\nCONTENTSTACK_ACCESS_TOKEN='deliverytoken'\nCONTENTSTACK_ENVIRONMENT='development' # or production, staging, etc.\n```\n\n----------------------------------------\n\nTITLE: Fixing Top Level Import Paths in Gatsby Plugin\nDESCRIPTION: This commit addresses an issue related to top-level import paths within the Gatsby plugin. It ensures that the `topLevelImportPaths` option is properly supported, resolving a reported bug.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-styled-components/CHANGELOG.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nSupport `topLevelImportPaths` option [#29544](https://github.com/gatsbyjs/gatsby/issues/29544) ([a6be92e](https://github.com/gatsbyjs/gatsby/commit/a6be92eb80bb98c308310a0fb3c340dab8e104aa))\n```\n\n----------------------------------------\n\nTITLE: Limiting Data Fetched by Specific Type\nDESCRIPTION: This snippet demonstrates limiting the amount of data fetched from WordPress for specific content types using the `type.[typename].limit` option. It limits the `Post` and `Page` types to 50 during both development and production.  This will speed up development builds.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-wordpress/docs/tutorials/creating-a-new-site-from-a-starter.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n      resolve: `gatsby-source-wordpress`,\n      options: {\n        url: `https://demo.wpgraphql.com/graphql`,\n        type: {\n            Post: {\n                limit: 50\n            },\n            Page: {\n                limit: 50\n            }\n        }\n      },\n    }\n```\n\n----------------------------------------\n\nTITLE: Adding Linting Support to gatsby-plugin-typescript\nDESCRIPTION: This commit introduces linting support to the gatsby-plugin-typescript plugin. This feature enables developers to automatically check their TypeScript code for style and potential errors during the build process, improving code quality and maintainability.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-typescript/CHANGELOG.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n**gatsby-plugin-typescript:** Supports linting ([#18721](https://github.com/gatsbyjs/gatsby/issues/18721)) ([d28a0bd](https://github.com/gatsbyjs/gatsby/commit/d28a0bd))\n```\n\n----------------------------------------\n\nTITLE: Enabling Parallel Data Sourcing (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to enable parallel data sourcing by adding the `PARALLEL_SOURCING` flag to the `gatsby-config.js` file. Parallel data sourcing can speed up the sourcing process on sites with multiple source plugins that are network-bound, as it allows them to make API calls concurrently.\n\nDependencies: None\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/v2.28/index.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n// In your gatsby-config.js\nmodule.exports = {\n  // your existing config\n  flags: {\n    PARALLEL_SOURCING: true,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Running Gatsby development server\nDESCRIPTION: This command starts the Gatsby development server, allowing you to preview and test your Gatsby site locally during development. It watches for file changes and automatically rebuilds the site.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/creating-a-starter.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngatsby develop\n```\n\n----------------------------------------\n\nTITLE: Using frontmatter in MDX file\nDESCRIPTION: Example of how to declare frontmatter metadata (title, slug, date) at the beginning of an MDX document. This metadata can then be queried with GraphQL and used in the page's content.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/routing/mdx.md#_snippet_2\n\nLANGUAGE: MDX\nCODE:\n```\n---\ntitle: Hello, world!\nslug: /hello-world\ndate: 2019-01-29\n---\n\n# Hello, world!\n```\n\n----------------------------------------\n\nTITLE: Use Base Path Instead of Path Prefix (JavaScript)\nDESCRIPTION: This bug fix ensures that the gatsby-plugin-offline uses the base path instead of the path prefix. This ensures correct asset caching and serving in scenarios where a base path is configured.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-offline/CHANGELOG.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nuse base path instead of path prefix\n```\n\n----------------------------------------\n\nTITLE: Set Placeholder with dotenv\nDESCRIPTION: Example showing how to set the `GATSBY_SCREENSHOT_PLACEHOLDER` environment variable to `true` using `dotenv`. This involves adding the variable to a `.env.development` file in the project root.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-screenshot/README.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\nGATSBY_SCREENSHOT_PLACEHOLDER=true\n```\n\n----------------------------------------\n\nTITLE: Bug Fix: Pass getNodesByType in gatsby-plugin-mdx\nDESCRIPTION: This commit fixes an issue in the gatsby-plugin-mdx plugin by ensuring that the `getNodesByType` function is correctly passed during plugin transformation. This resolves an issue where plugin transformation failed due to a missing dependency. The fix addresses a reported issue where the plugin was not properly retrieving node data.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-mdx/CHANGELOG.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nc62d2fd\n```\n\n----------------------------------------\n\nTITLE: Fix: Updating dependencies for gatsby-remark-images\nDESCRIPTION: This snippet describes a bug fix related to updating minor and patch dependencies for the gatsby-remark-images plugin. The fix addresses potential issues arising from outdated dependencies, ensuring the plugin's stability and compatibility.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-images/CHANGELOG.md#_snippet_2\n\nLANGUAGE: N/A\nCODE:\n```\n**deps:** update minor and patch for gatsby-remark-images ([#27135](https://github.com/gatsbyjs/gatsby/issues/27135)) ([817d062](https://github.com/gatsbyjs/gatsby/commit/817d062879fa9547c9880a76b9389f39180d7dd0))\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query Example (GraphQL)\nDESCRIPTION: This is a basic GraphQL query to retrieve data from the transformed CSV nodes. It fetches all `LettersCsv` nodes and retrieves the `letter` and `value` fields from each node.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-csv/README.md#_snippet_10\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  allLettersCsv {\n    edges {\n      node {\n        letter\n        value\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Install Gatsby Image and Sharp Plugins\nDESCRIPTION: This command installs the necessary packages for using Gatsby Image: gatsby-image, gatsby-plugin-sharp, and gatsby-transformer-sharp. These plugins provide the core functionality for image optimization and integration with Gatsby.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/built-in-components/gatsby-image.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install gatsby-image gatsby-plugin-sharp gatsby-transformer-sharp\n```\n\n----------------------------------------\n\nTITLE: Default Layout with Header and Footer - JavaScript\nDESCRIPTION: This snippet defines a default layout component that includes a Header and Footer component. It accepts children and a headerClassName prop for styling the header.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/performance/using-slices.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Header, Footer } from \"../components\"\n\nexport const DefaultLayout = ({ children, headerClassName }) => {\n  return (\n    <div>\n      <Header className={headerClassName} />\n      {content}\n      <Footer />\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Installing gatsby-source-hacker-news with npm\nDESCRIPTION: This command installs the gatsby-source-hacker-news plugin using npm. It adds the plugin to your project's dependencies.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-hacker-news/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install gatsby-source-hacker-news\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Background Color in Gatsby\nDESCRIPTION: This snippet demonstrates how to configure the background color of the Button component in Gatsby. It renders three buttons with different background colors: blue, green, and orange, using the `backgroundColor` prop.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/styleguide/src/components/Button/README.md#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<div>\n  <div>\n    <Button backgroundColor=\"blue\">Get Started</Button>\n  </div>\n  <div>\n    <Button backgroundColor=\"green\">Get Started</Button>\n  </div>\n  <div>\n    <Button backgroundColor=\"orange\">Get Started</Button>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Update Node Version in Gatsby Config (JavaScript)\nDESCRIPTION: This update bumps the minimum required Node.js version for Gatsby to 10.13.0. This is a feature enhancement that ensures compatibility with newer JavaScript features and security updates.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-offline/CHANGELOG.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nbump node min version to 10.13.0\n```\n\n----------------------------------------\n\nTITLE: Updating Babel Monorepo\nDESCRIPTION: This snippet updates the Babel monorepo dependency for the gatsby-plugin-google-gtag package.  This ensures the plugin utilizes the latest Babel transformations and features.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-google-gtag/CHANGELOG.md#_snippet_15\n\n\n\n----------------------------------------\n\nTITLE: Run Gatsby Development Server\nDESCRIPTION: This command starts the Gatsby development server, allowing access to the GraphiQL interface at `localhost:8000/___graphql`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/why-gatsby-uses-graphql.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ngatsby develop\n```\n\n----------------------------------------\n\nTITLE: Serving Gatsby production site locally\nDESCRIPTION: This command serves the built Gatsby site locally, allowing you to test the production-ready version before deploying it.  It requires that you have already run `gatsby build`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/creating-a-starter.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngatsby serve\n```\n\n----------------------------------------\n\nTITLE: Markdown example for line embedding Markdown\nDESCRIPTION: Shows a Markdown code to embed a specific line range from a Javascript file\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-embed-snippet/README.md#_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\nThis is the JSX of my app:\n\n`embed:App.js#L6-8`\n```\n\n----------------------------------------\n\nTITLE: Initializing package.json for Theme (gatsby-theme-events)\nDESCRIPTION: Initializes the package.json file for the `gatsby-theme-events` theme. Specifies the theme's name, version, main entry point, and license. The `main` entry point is crucial for the theme to be installed as a package.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/building-a-theme.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"name\": \"gatsby-theme-events\",\n  \"version\": \"1.0.0\",\n  \"main\": \"index.js\",\n  \"license\": \"MIT\"\n}\n```\n\n----------------------------------------\n\nTITLE: Forestry CMS Settings Configuration for Content Sections (settings.yml)\nDESCRIPTION: This YAML snippet shows how to configure content sections in `.forestry/settings.yml`. It defines a directory-based content section named `Posts` located in `src/content/posts`. It allows creating new documents from the `blog` template defined earlier, and matches all files within that directory.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/sourcing-from-forestry.md#_snippet_6\n\nLANGUAGE: YAML\nCODE:\n```\n---\nnew_page_extension: md\nauto_deploy: false\nadmin_path: /static/admin\nwebhook_url:\nupload_dir: static/uploads\npublic_path: \"/static/uploads\"\nfront_matter_path: \"\"\nuse_front_matter_path: false\nfile_template: \":filename:\"\nbuild:\n  preview_output_directory: public\n  install_dependencies_command: npm install\n  preview_docker_image: node:10\n  mount_path: \"/srv\"\n  working_dir: \"/srv\"\n  instant_preview_command: npm run forestry:preview\nsections:\n  - type: directory\n    path: src/content/posts\n    label: Posts\n    create: documents\n    match: \"**/*\"\n    templates:\n      - blog\n---\n```\n\n----------------------------------------\n\nTITLE: Bumping minimum Node version for Gatsby (JavaScript)\nDESCRIPTION: This feature bumps the minimum required Node.js version to 10.13.0 for Gatsby. This change allows Gatsby to use newer language features and libraries that are only available in more recent Node.js versions. Users must upgrade their Node.js version to use this version of Gatsby.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-images-contentful/CHANGELOG.md#_snippet_35\n\nLANGUAGE: JavaScript\nCODE:\n```\n**gatsby:** bump node min version to 10.13.0 ([#22400](https://github.com/gatsbyjs/gatsby/issues/22400)) ([83d681a](https://github.com/gatsbyjs/gatsby/commit/83d681a))\n```\n\n----------------------------------------\n\nTITLE: Gatsby Node with TypeScript\nDESCRIPTION: This code snippet demonstrates a gatsby-node.ts file using TypeScript to source data and create nodes. It defines a Person type and uses the sourceNodes API. It uses the \"gatsby\" package and requires the getSomeData function to be defined elsewhere.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/v4.9/index.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { GatsbyNode } from \"gatsby\"\n\ntype Person = {\n  id: number\n  name: string\n  age: number\n}\n\nexport const sourceNodes: GatsbyNode[\"sourceNodes\"] = async ({\n  actions,\n  createNodeId,\n  createContentDigest,\n}) => {\n  const { createNode } = actions\n\n  const data = await getSomeData()\n\n  data.forEach((person: Person) => {\n    const node = {\n      ...person,\n      parent: null,\n      children: [],\n      id: createNodeId(`person__${person.id}`),\n      internal: {\n        type: \"Person\",\n        content: JSON.stringify(person),\n        contentDigest: createContentDigest(person),\n      },\n    }\n\n    createNode(node)\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing falsy value handling in console methods - gatsby-cli JavaScript\nDESCRIPTION: This snippet addresses an issue in the gatsby-cli where console methods were incorrectly handling falsy values, leading to unexpected behavior. It ensures that falsy values are properly processed when using console logging within the Gatsby CLI.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-cli/CHANGELOG.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nFix console methods incorrectly handling falsy values ([#23021](https://github.com/gatsbyjs/gatsby/issues/23021)) ([66a1b7f](https://github.com/gatsbyjs/gatsby/commit/66a1b7f))\n```\n\n----------------------------------------\n\nTITLE: Webpack Chunk Group Diagram\nDESCRIPTION: A visual representation of webpack chunk groups and chunks showing their dependencies. This DOT graph illustrates how common libraries are shared among different pages and the core Gatsby app.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-code-splitting-works.md#_snippet_2\n\nLANGUAGE: DOT\nCODE:\n```\ndigraph {\n\n  rankdir = LR;\n  node [ fillcolor = \"lightgray\", style = \"filled\" ];\n\n  subgraph cluster_chunks {\n    label = \"chunks\";\n    node [ shape = \"Mrecord\" ];\n    \"id0\" [ label = \"id: 0 | asset: 0-d55d2d6645e11739b63c.js | common libs (e.g. react)\" ];\n    \"id1\" [ label = \"id: 1 | asset: 1-4c94a37dc2061cb7beb9.js | more common libs\" ];\n    \"id5\" [ label = \"id: 5 | asset: app-2e49587d85e03a033f58.js | Gatsby core app\" ];\n    \"id42\" [ label = \"id: 42 | asset: webpack-runtime-e402cdceeae5fad2aa61.js | webpack runtime\" ];\n    \"id7\" [ label = \"id: 7 | asset: component---src-blog-1-js-cebc3ae7596cbb5b0951.js | js for src/blog/1.js\" ];\n    \"id8\" [ label = \"id: 8 | asset: component---src-blog-2-js-cebc3ae7596cbb5b0951.js | js for src/blog/2.js\" ];\n  }\n\n  subgraph cluster_chunkGroups {\n   label = \"chunkGroups\";\n   node [ shape = \"Mbox\" ];\n   \"app\" [ label = \"app\" ];\n    \"component1\" [ label = \"component---src-blog-1-js\" ];\n    \"component2\" [ label = \"component---src-blog-2-js\" ];\n  }\n\n  app -> id5;\n  app -> id42;\n  component1 -> id7;\n  component1 -> id0;\n  component1 -> id1;\n\n  component2 -> id8;\n  component2 -> id0;\n  component2 -> id1;\n}\n```\n\n----------------------------------------\n\nTITLE: Filter Markdown Remark Query GraphQL\nDESCRIPTION: This query retrieves MarkdownRemark nodes that match a specified filter condition. The `filter` argument is used to select nodes where the frontmatter title is not empty. It fetches the total count and frontmatter title for each node.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/graphql-reference/content/queries.md#_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  allMarkdownRemark(filter: { frontmatter: { title: { ne: \"\" } } }) {\n    totalCount\n    edges {\n      node {\n        frontmatter {\n          title\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: StaticImage Invalid Prop Usage Example (JS)\nDESCRIPTION: This example demonstrates incorrect usage of the StaticImage component where the `src` prop is passed from outside the component.  `StaticImage` props must be statically analyzable at build time, and can't be passed from parent components. This will result in an error during the build process.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/built-in-components/gatsby-plugin-image.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// ‚ö†Ô∏è Doesn't work\n\nexport function Logo({ logo }) {\n  // You can't use a prop passed into the parent component\n  return <StaticImage src={logo} />\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Nodes with WPGraphQL and Cursor Pagination\nDESCRIPTION: This snippet explains how nodes are fetched from WPGraphQL using cursor pagination. The plugin leverages options like `Type.limit`, `schema.requestConcurrency`, and `schema.perPage` to control the behavior of node sourcing. Request retry logic is limited due to the fragility of cursor pagination in sourcing all existing nodes.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-wordpress/ARCHITECTURE.md#_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Query with Variables in GraphQL\nDESCRIPTION: This GraphQL query defines a query named `GetBlogPosts` that accepts three variables: `$limit`, `$filter`, and `$sort`. These variables are then used as arguments to the `allMarkdownRemark` query, allowing for dynamic control over the query's behavior.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/graphql-reference.md#_snippet_24\n\nLANGUAGE: graphql\nCODE:\n```\nquery GetBlogPosts(\n  $limit: Int\n  $filter: MarkdownRemarkFilterInput\n  $sort: MarkdownRemarkSortInput\n) {\n  allMarkdownRemark(limit: $limit, filter: $filter, sort: $sort) {\n    edges {\n      node {\n        frontmatter {\n          title\n          date(formatString: \"dddd DD MMMM YYYY\")\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure custom typeName (dynamic)\nDESCRIPTION: Example configuration for setting a dynamic typeName based on the object's level. The `typeName` option now accepts a function that receives the node, object and isArray.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-json/README.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-transformer-json`,\n      options: {\n        typeName: ({ node, object, isArray }) => object.level,\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Emotion Version\nDESCRIPTION: This snippet updates the emotion library to version 11 within the gatsby-plugin-emotion package.  It resolves issue #27981. This update is crucial for keeping the plugin compatible with the latest features and improvements in the emotion library. No dependencies are directly shown but the commit relates to emotion.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-emotion/CHANGELOG.md#_snippet_6\n\nLANGUAGE: Other\nCODE:\n```\nupdate to emotion@11 [#27981](https://github.com/gatsbyjs/gatsby/issues/27981) ([9c00fc9](https://github.com/gatsbyjs/gatsby/commit/9c00fc9ec27ebedb440b8400aee8b41892b173ee))\n```\n\n----------------------------------------\n\nTITLE: Adding Link Preconnect in Gatsby Google Gtag Plugin\nDESCRIPTION: This commit adds link preconnect functionality to the gatsby-plugin-google-gtag plugin to improve page loading performance by establishing early connections to Google's servers.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-google-gtag/CHANGELOG.md#_snippet_21\n\nLANGUAGE: Diff\nCODE:\n```\nc57fc91\n```\n\n----------------------------------------\n\nTITLE: GraphQL query with dynamic typeName\nDESCRIPTION: Example of a GraphQL query using the dynamically generated type name based on the `level` field in the YAML data.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-yaml/README.md#_snippet_11\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  allInfo {\n    edges {\n      node {\n        message\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using GATSBY_EMPTY_ALT to generate empty alt attribute\nDESCRIPTION: Shows how to use the reserved keyword GATSBY_EMPTY_ALT within the Markdown image syntax to generate an empty alt attribute in the resulting HTML img tag.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-images/README.md#_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n![GATSBY_EMPTY_ALT](./image.png)\n```\n\n----------------------------------------\n\nTITLE: Configuring gatsby-remark-autolink-headers options\nDESCRIPTION: This code snippet demonstrates how to configure various options for the `gatsby-remark-autolink-headers` plugin, including `offsetY`, `icon`, `className`, `maintainCase`, `removeAccents`, `isIconAfterHeader`, and `elements`. These options allow customization of the anchor link's appearance and behavior.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-autolink-headers/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// In your gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-transformer-remark`,\n      options: {\n        plugins: [\n          {\n            resolve: `gatsby-remark-autolink-headers`,\n            options: {\n              offsetY: `100`,\n              icon: `<svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>`,\n              className: `custom-class`,\n              maintainCase: true,\n              removeAccents: true,\n              isIconAfterHeader: true,\n              elements: [`h1`, `h4`],\n            },\n          },\n        ],\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Filter on Multiple Fields with GraphQL\nDESCRIPTION: This query demonstrates filtering on multiple fields by separating the filters with a comma, acting as an AND condition.  It finds books that belong to the `magical creatures` category AND have `Fantastic` in their title using the `in` and `regex` operators.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/graphql-reference.md#_snippet_14\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  allMarkdownRemark(\n    filter: {\n      frontmatter: {\n        categories: { in: [\"magical creatures\"] }\n        title: { regex: \"/Fantastic/\" }\n      }\n    }\n  ) {\n    totalCount\n    edges {\n      node {\n        frontmatter {\n          title\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Debugging: VS Code launch.json Configuration (Linux) JSON\nDESCRIPTION: This JSON configuration provides settings for debugging Gatsby's `develop` and `build` commands within VS Code on Linux. It specifies the program to execute, command-line arguments, environment variables, and runtime arguments for the debugger. The `PARCEL_WORKERS` and `GATSBY_CPU_COUNT` are set to limit parallel processing during debugging.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/debugging-the-build-process.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"name\": \"Gatsby develop\",\n      \"type\": \"pwa-node\",\n      \"request\": \"launch\",\n      \"program\": \"${workspaceRoot}/node_modules/.bin/gatsby\",\n      \"args\": [\"develop\"],\n      \"env\": {\n        \"PARCEL_WORKERS\": \"0\",\n        \"GATSBY_CPU_COUNT\": \"1\",\n      },\n      \"runtimeArgs\": [\"--nolazy\"],\n      \"console\": \"integratedTerminal\"\n    },\n    {\n      \"name\": \"Gatsby build\",\n      \"type\": \"pwa-node\",\n      \"request\": \"launch\",\n      \"program\": \"${workspaceRoot}/node_modules/.bin/gatsby\",\n      \"args\": [\"build\"],\n      \"env\": {\n        \"PARCEL_WORKERS\": \"0\",\n        \"GATSBY_CPU_COUNT\": \"1\",\n      },\n      \"runtimeArgs\": [\"--nolazy\"],\n      \"console\": \"integratedTerminal\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Update Static Image Source - React/Gatsby\nDESCRIPTION: This code snippet shows how to update the `src` prop of the `StaticImage` component to load an image from the local filesystem in a Gatsby project. The image is placed in the `src/images` directory, and the `src` attribute is set to a relative path pointing to the image file. The `alt` prop should also be updated to describe the image. The component imports React, the Layout component, and the StaticImage component from gatsby-plugin-image.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-3/index.mdx#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as React from 'react'\nimport Layout from '../components/layout'\nimport { StaticImage } from 'gatsby-plugin-image'\n\nconst IndexPage = () => {\n  return (\n    <Layout pageTitle=\"Home Page\">\n      <p>I'm making this by following the Gatsby Tutorial.</p>\n      <StaticImage\n        {/* highlight-start */}\n        alt=\"Clifford, a reddish-brown pitbull, dozing in a bean bag chair\"\n        src=\"../images/clifford.jpg\"\n        {/* highlight-end */}\n      />\n    </Layout>\n  )\n}\n\nexport const Head = () => <title>Home Page</title>\n\nexport default IndexPage\n```\n\n----------------------------------------\n\nTITLE: Adding YAML content\nDESCRIPTION: This YAML file defines the data structure that will be imported into the Gatsby page. It contains a title and a list of content items.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/sourcing-data/sourcing-from-json-or-yaml.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: YAML content used at build time with Gatsby\ncontent:\n  - item:\n      Cupcake ipsum dolor. Sit amet marshmallow topping cheesecake muffin. Halvah\n      croissant candy canes bonbon candy. Apple pie jelly beans topping carrot cake\n      danish tart cake cheesecake. Muffin danish chocolate souffl√© pastry icing bonbon\n      oat cake. Powder cake jujubes oat cake. Lemon drops tootsie roll marshmallow halvah\n      carrot cake.\n  - item:\n      Doggo ipsum borkdrive much ruin diet you are doing me the shock the neighborhood pupper doggorino length boy many pats, boofers heckin shooberino wrinkler.\n      Very good spot very jealous pupper very hand that feed shibe smol, shoob.\n      Long bois pupper doggo you are doin me a concern big ol yapper, smol boof most angery pupper I have ever seen puggorino.\n      Mlem blep wow very biscit dat tungg tho wow very biscit, thicc ur givin me a spook.\n      Many pats heckin you are doing me the shock corgo ur givin me a spook very hand that feed shibe shooberino, big ol pupper doge pats borkdrive.\n      Such treat what a nice floof super chub such treat, smol thicc.\n      Puggorino very good spot most angery pupper I have ever seen you are doing me the shock big ol pupper porgo corgo shoober, heckin good boys lotsa pats noodle horse very taste wow thicc.\n      What a nice floof long doggo blep length boy borking doggo, much ruin diet floofs borkf.\n  - item: 192.33\n  - item: 111111\n```\n\n----------------------------------------\n\nTITLE: Upgrading Jest for Testing\nDESCRIPTION: This commit upgrades the Jest testing framework used by the `gatsby-transformer-remark` package. The upgrade aims to improve testing performance, provide access to new testing features, and maintain compatibility with other dependencies.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-remark/CHANGELOG.md#_snippet_3\n\nLANGUAGE: None\nCODE:\n```\nupgrade jest [#33277](https://github.com/gatsbyjs/gatsby/issues/33277) ([34cb202](https://github.com/gatsbyjs/gatsby/commit/34cb202d9c8c202f082edb03c4cc1815eb81abe1))\n```\n\n----------------------------------------\n\nTITLE: Waiting for contentTypes to be created (JavaScript)\nDESCRIPTION: This commit addresses an issue where the gatsby-plugin-contentful plugin would not wait for contentTypes to be created before proceeding, potentially causing errors. This change ensures that the plugin waits for contentTypes to be created before continuing.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-contentful/CHANGELOG.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n75b041e\n```\n\n----------------------------------------\n\nTITLE: Example YAML array of objects\nDESCRIPTION: Example of YAML data structured as an array of objects, demonstrating the data format used for creating nodes.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-yaml/README.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n- character: a\n- character: b\n- character: c\n```\n\n----------------------------------------\n\nTITLE: Importing the graphql tag in Gatsby\nDESCRIPTION: This snippet demonstrates the change required to explicitly import the `graphql` tag from Gatsby when using it for queries.  In previous versions, the `graphql` tag was globally available, but now it must be explicitly imported.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v2-to-v3.md#_snippet_16\n\nLANGUAGE: diff\nCODE:\n```\nimport React from \"react\"\n+ import { graphql } from \"gatsby\"\n\nconst Page = ({ data }) => (\n  <div>Show my data: {JSON.stringify(data, null, 2)}</div>\n)\n\nexport default Page\n\nexport const query = graphql`\n  {\n    site {\n      siteMetadata {\n        description\n      }\n    }\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: Using CommonJS Instead of ES Modules in Gatsby\nDESCRIPTION: This commit replaces ES modules with CommonJS in the gatsby-plugin-google-gtag plugin to ensure compatibility and avoid potential issues with module loading.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-google-gtag/CHANGELOG.md#_snippet_30\n\nLANGUAGE: Diff\nCODE:\n```\nb05bed5\n```\n\n----------------------------------------\n\nTITLE: Updating Peer Dependencies JavaScript\nDESCRIPTION: This snippet updates the peer dependencies for the package.  Updating peer dependencies helps to ensure compatibility with other packages in the Gatsby ecosystem.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-images-contentful/CHANGELOG.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nUpdate peerDeps [#36965](https://github.com/gatsbyjs/gatsby/issues/36965) ([b624442](https://github.com/gatsbyjs/gatsby/commit/b6244424fe8b724cbc23b80b2b4f5424cc2055a4))\n```\n\n----------------------------------------\n\nTITLE: Deprecation: nodeModel.runQuery with limit/skip vs nodeModel.findAll\nDESCRIPTION: This JavaScript code illustrates the difference in behavior between `nodeModel.runQuery` and `nodeModel.findAll` when using `limit` and `skip` arguments. `runQuery` ignores them, while `findAll` correctly applies them.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v3-to-v4.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n// Assuming we have 100,000 nodes of the type `MyQuery`,\n// the following returns an array with all 100,000 nodes\nconst entries = await nodeModel.runQuery({\n  type: `MyType`,\n  query: { limit: 20, skip: 10 },\n})\n\n// findAll returns 20 entries (starting from 10th)\n// and allows to get total count using totalCount() if required:\nconst { entries, totalCount } = await nodeModel.findAll({\n  type: `MyType`,\n  query: { limit: 20, skip: 10 },\n})\nconst count = await totalCount()\n```\n\n----------------------------------------\n\nTITLE: Setting Google Service Account Email and Private Key\nDESCRIPTION: This code snippet demonstrates setting the Google Service Account email and private key within the `.env.development` file. These values are required for authenticating with the Google Sheets API.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/functions-google-sheets/README.md#_snippet_0\n\nLANGUAGE: env\nCODE:\n```\nGOOGLE_SERVICE_ACCOUNT_EMAIL=copy service account email\nGOOGLE_PRIVATE_KEY=copy private key\n```\n\n----------------------------------------\n\nTITLE: Run Gatsby development server\nDESCRIPTION: Starts the Gatsby development server, which watches for file changes and automatically rebuilds the site. This allows for rapid development and testing.\n\nDependencies: Gatsby CLI.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/porting-an-html-site-to-gatsby.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngatsby develop\n```\n\n----------------------------------------\n\nTITLE: Updating dependencies in gatsby-source-graphql\nDESCRIPTION: This commit updates the minor and patch dependencies for the gatsby-source-graphql package. This ensures the package is using the latest versions of its dependencies, which may include bug fixes, performance improvements, and new features.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-graphql/CHANGELOG.md#_snippet_10\n\nLANGUAGE: Text\nCODE:\n```\nupdate minor and patch dependencies for gatsby-source-graphql [#35297](https://github.com/gatsbyjs/gatsby/issues/35297) ([e138218](https://github.com/gatsbyjs/gatsby/commit/e1382186889cd9da6dce946ad5a68976b9c90f47))\n```\n\n----------------------------------------\n\nTITLE: Bumping Babel Minor Version\nDESCRIPTION: This chore focuses on bumping the minor version of Babel within the gatsby-transformer-javascript-static-exports package. Bumping the minor version includes new features and improvements while maintaining backward compatibility.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-javascript-static-exports/CHANGELOG.md#_snippet_6\n\nLANGUAGE: Text\nCODE:\n```\nbump babel minor [#31857](https://github.com/gatsbyjs/gatsby/issues/31857) [#31859](https://github.com/gatsbyjs/gatsby/issues/31859) ([8636025](https://github.com/gatsbyjs/gatsby/commit/863602567930a39142ed33d9d1f1813b7dec8686))\n```\n\n----------------------------------------\n\nTITLE: Updating GraphQL Query for Images (Diff)\nDESCRIPTION: Illustrates how to update GraphQL queries when migrating to Gatsby V2 due to changes in how nodes are identified. Instead of querying nodes by `id` using a regex, the example shows how to query by `fluid.originalName`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v1-to-v2.md#_snippet_25\n\nLANGUAGE: diff\nCODE:\n```\n  query MyImageQuery {\n    allImageSharp(filter: {\n-     id: {regex: \"/default.jpg/\"}\n+     fluid: {originalName: {regex: \"/default.jpg/\"}}\n    }) {\n      edges {\n        node {\n          id\n          fluid(maxWidth: 660) {\n            src\n          }\n        }\n      }\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Updating urijs dependency to ^1.19.10 for gatsby-remark-code-repls\nDESCRIPTION: This snippet shows an update to the urijs dependency, specifically to version ^1.19.10, for the gatsby-remark-code-repls plugin. Updating dependencies like urijs ensures the plugin benefits from bug fixes, performance improvements, and potentially new features offered by the updated library.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-code-repls/CHANGELOG.md#_snippet_7\n\nLANGUAGE: none\nCODE:\n```\nupdate dependency urijs to ^1.19.10 for gatsby-remark-code-repls [#35294](https://github.com/gatsbyjs/gatsby/issues/35294) ([d426849](https://github.com/gatsbyjs/gatsby/commit/d42684912691617d71ea82d8b91d9f53a06280bc))\n```\n\n----------------------------------------\n\nTITLE: Layout Component (layout.js)\nDESCRIPTION: This snippet defines a basic layout component for the Gatsby theme. It includes a title, \"Gatsby Events Theme\", and renders the provided 'children' within a 'div' element.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/building-a-theme.md#_snippet_27\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\"\n\nconst Layout = ({ children }) => (\n  <div>\n    <h1>Gatsby Events Theme</h1>\n    {children}\n  </div>\n)\n\nexport default Layout\n```\n\n----------------------------------------\n\nTITLE: Update Bluebird Dependency\nDESCRIPTION: This snippet updates the bluebird dependency to version ^3.7.0. Bluebird is a promise library and this update likely includes bug fixes and performance improvements.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-javascript-static-exports/CHANGELOG.md#_snippet_15\n\nLANGUAGE: none\nCODE:\n```\n- update dependency bluebird to ^3.7.0 ([#18029](https://github.com/gatsbyjs/gatsby/issues/18029)) ([bd235a8](https://github.com/gatsbyjs/gatsby/commit/bd235a8))\n```\n\n----------------------------------------\n\nTITLE: Updating to Parcel 2.6.0\nDESCRIPTION: This commit updates the project to Parcel version 2.6.0.  This may include new features, performance improvements, or bug fixes.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-parcel-config/CHANGELOG.md#_snippet_11\n\nLANGUAGE: Shell\nCODE:\n```\nUpdate to Parcel 2.6.0 [#35782](https://github.com/gatsbyjs/gatsby/issues/35782) ([2d2b323](https://github.com/gatsbyjs/gatsby/commit/2d2b323c2ba49fa729a901851d17b779b7c9ef2a))\n```\n\n----------------------------------------\n\nTITLE: Updating Cross-Env Dependency JavaScript\nDESCRIPTION: This snippet updates the dependency cross-env to version ^7.0.3. cross-env makes it possible to set and use environment variables across platforms. This update might include bug fixes and improvements.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-copy-linked-files/CHANGELOG.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nupdate dependency cross-env to ^7.0.3 [#28505](https://github.com/gatsbyjs/gatsby/issues/28505) ([a819b9b](https://github.com/gatsbyjs/gatsby/commit/a819b9bfb663139f7b06c3ed7d6d6069a2382b2c))\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query with Grayscale Effect\nDESCRIPTION: This GraphQL code demonstrates how to query a fixed image and apply a grayscale effect.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/built-in-components/gatsby-image.md#_snippet_8\n\nLANGUAGE: GraphQL\nCODE:\n```\nfixed(\n  grayscale: true\n)\n```\n\n----------------------------------------\n\nTITLE: Import Header component with loadable\nDESCRIPTION: This code snippet demonstrates how to import a Header component using `loadable` from `loadable-components`. This approach allows for code splitting of the Header component, improving initial load times. This snippet assumes you have loadable-components installed and configured.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/using-loadable-components/README.md#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// src/components/layout.jsx\nimport * as React from \"react\"\n\nconst Header = loadable(() => import(\"./header\"))\nexport default Header\n```\n\n----------------------------------------\n\nTITLE: Updating Babel Monorepo (Another Instance)\nDESCRIPTION: This commit updates the babel monorepo to the latest version. This keeps the babel dependencies up to date.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-cxs/CHANGELOG.md#_snippet_12\n\n\n\n----------------------------------------\n\nTITLE: Configuring Node Mutation Detection via Gatsby Config\nDESCRIPTION: This snippet shows how to enable diagnostic mode in Gatsby to detect node mutations by setting the `DETECT_NODE_MUTATIONS` flag to `true` in `gatsby-config.js`. This configuration allows Gatsby to detect and warn about direct node mutations, which are not persisted in the LMDB datastore without explicit upserts.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/local-development/debugging-missing-data.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  flags: {\n    DETECT_NODE_MUTATIONS: true,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Images Syntax\nDESCRIPTION: Shows how to insert images in Markdown using both inline-style and reference-style syntax, including the use of alt text and title attributes.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/using-remark/src/pages/2016-04-15---hello-world-kitchen-sink/index.md#_snippet_4\n\nLANGUAGE: no-highlight\nCODE:\n```\nHere's our logo (hover to see the title text):\n\nInline-style:\n![alt text](https://pbs.twimg.com/profile_images/875556871427375106/Xuq8DypK_bigger.jpg \"Logo Title Text 1\")\n\nReference-style:\n![alt text][logo]\n\n[logo]: https://pbs.twimg.com/profile_images/875556871427375106/Xuq8DypK_bigger.jpg \"Logo Title Text 2\"\n```\n\n----------------------------------------\n\nTITLE: Update node-fetch dependency - Gatsby Telemetry\nDESCRIPTION: This commit updates the node-fetch dependency for the gatsby-telemetry package to version ^2.6.5.  This update likely addresses bug fixes, security vulnerabilities, or performance improvements in the node-fetch library used for making HTTP requests.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-telemetry/CHANGELOG.md#_snippet_13\n\n\n\n----------------------------------------\n\nTITLE: Configuring Adapters in gatsby-config.js (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to configure an adapter within the `gatsby-config.js` file. It shows how to import an adapter and then use it within the adapter option in the config.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/v5.11/index.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst adapter = require(\"gatsby-adapter-foo\")\n\nmodule.exports = {\n  adapter: adapter()\n}\n```\n\n----------------------------------------\n\nTITLE: Query Multiple Data Nodes with GraphQL\nDESCRIPTION: This query retrieves the total count of plugins and specific information about each plugin, including its name, version, and description from the `packageJson`. It demonstrates querying collections of nodes and their associated data in Gatsby's GraphQL layer. It accesses the `allSitePlugin` node.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/graphql-reference.md#_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  allSitePlugin {\n    totalCount\n    edges {\n      node {\n        name\n        version\n        packageJson {\n          description\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fix: Updating Packages in Gatsby\nDESCRIPTION: This commit updates minor packages within the Gatsby project. This ensures that the project utilizes the latest bug fixes and performance improvements from these packages.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-preload-fonts/CHANGELOG.md#_snippet_14\n\nLANGUAGE: Text\nCODE:\n```\nupdate minor updates in packages ([#18875](https://github.com/gatsbyjs/gatsby/issues/18875)) ([b692879](https://github.com/gatsbyjs/gatsby/commit/b692879))\n```\n\n----------------------------------------\n\nTITLE: Sample Query Response (sorting by date)\nDESCRIPTION: This JSON response shows sample data returned from the GraphQL query, sorted in descending order based on date. Each node represents a blog post, with its `frontmatter` containing title and date, and a unique `id`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-5/index.mdx#_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"allMdx\": {\n      \"nodes\": [\n        {\n          \"frontmatter\": {\n            \"date\": \"July 25, 2021\",\n            \"title\": \"Yet Another Post\"\n          },\n          \"id\": \"c4b5ae6d-f3ad-5ea4-ab54-b08a72badea1\"\n        },\n        {\n          \"frontmatter\": {\n            \"date\": \"July 24, 2021\",\n            \"title\": \"Another Post\"\n          },\n          \"id\": \"560896e4-0148-59b8-9a2b-bf79bee68fba\"\n        },\n        {\n          \"frontmatter\": {\n            \"date\": \"July 23, 2021\",\n            \"title\": \"My First Post\"\n          },\n          \"id\": \"11b3a825-30c5-551d-a713-dd748e7d554a\"\n        }\n      ]\n    }\n  },\n  \"extensions\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Ensuring queued remote file downloads in gatsby-source-filesystem\nDESCRIPTION: This commit ensures that remote file downloads are queued in all cases, addressing issue #34414 in the gatsby-source-filesystem package. This ensures reliable processing and prevents potential concurrency issues when downloading files.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-filesystem/CHANGELOG.md#_snippet_10\n\n\n\n----------------------------------------\n\nTITLE: Fixing package changelog links in Gatsby\nDESCRIPTION: This commit corrects the links in the package changelogs within the Gatsby project. It ensures that the links point to the correct locations for users to access more information about the package updates and fixes.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-preact/CHANGELOG.md#_snippet_0\n\nLANGUAGE: None\nCODE:\n```\ncorrect links in package changelogs ([#15630](https://github.com/gatsbyjs/gatsby/issues/15630)) ([d07b9dd](https://github.com/gatsbyjs/gatsby/commit/d07b9dd))\n```\n\n----------------------------------------\n\nTITLE: Gatsby Config Usage - JavaScript\nDESCRIPTION: Demonstrates how to configure the `gatsby-remark-code-repls` plugin in your `gatsby-config.js` file.  It shows how to specify the plugin and configure options like default link text, example code directory, link target, and provider-specific options for Codepen and CodeSandbox.  It includes paths and dependencies configurations.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-code-repls/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// In your gatsby-config.js\n{\n  resolve: 'gatsby-remark-code-repls',\n  options: {\n    // Optional default link text.\n    // Defaults to \"REPL\".\n    // e.g. <a href=\"...\">Click here</a>\n    defaultText: 'Click here',\n\n\n    // Example code links are relative to this dir.\n    // e.g. examples/path/to/file.js\n    directory: `${__dirname}/examples/`,\n\n    // Optional link target.\n    // Note that if a target is specified, \"noreferrer\" will also be added.\n    // e.g. <a href=\"...\" target=\"_blank\" rel=\"noreferrer\">...</a>\n    target: '_blank',\n\n\n    // Provider specific options\n    codepen: {\n      // Optional path to a custom redirect template.\n      // The redirect page is only shown briefly,\n      // But you can use this setting to override its CSS styling.\n      redirectTemplate: `${__dirname}/src/redirect-template.js`,\n\n      // Optional HTML contents to inject into REPL.\n      // Defaults to `<div id=\"root\"></div>`.\n      // e.g. '<div id=\"root\"></div>'\n      html: '',\n\n      // Optional externals to load from a CDN.\n      // e.g. '//unpkg.com/react/umd/react.development.js'\n      externals: [],\n\n      // Include CSS with matching name.\n      // If set to `true`, when specifying `file1.js` as example file,\n      // it will try to inject the CSS in `file1.css` if the file exists,\n      // otherwise the default behaviour is preserved\n      includeMatchingCSS: false,\n    },\n\n    codesandbox: {\n      // Optional HTML contents to inject into REPL.\n      // Defaults to `<div id=\"root\"></div>`.\n      // e.g. '<div id=\"root\"></div>'\n      html: '',\n\n      // Optional runtime dependencies to load from NPM.\n      // e.g. ['react', 'react-dom'] or ['react@15', 'react-dom@15']\n      dependencies: [],\n    }\n  },\n},\n```\n\n----------------------------------------\n\nTITLE: Example GraphCMS Post Data (JSON)\nDESCRIPTION: Example JSON response from the GraphQL query for all GraphCMS posts.  This demonstrates the structure of the data returned from the `allGraphCmsPost` query, including the `nodes` array and the fields within each post node.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/sourcing-from-graphcms.md#_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"data\": {\n    \"allGraphCmsPost\": {\n      \"nodes\": [\n        {\n          \"id\": \"Post:ckadrcx4g00pw01525c5d2e56\",\n          \"content\": {\n            \"markdown\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quid ergo? Huius ego nunc auctoritatem sequens idem faciam. Duo Reges: constructio interrete. Sed in rebus apertissimis nimium longi sumus. Itaque his sapiens semper vacabit. Non semper, inquam;\\n\\n\\n\\nVerum hoc idem saepe faciamus. Quamquam haec quidem praeposita recte et reiecta dicere licebit.\\n\\n\\n\\nAt coluit ipse amicitias. Certe non potest. Bonum incolumis acies: misera caecitas. Quo studio Aristophanem putamus aetatem in litteris duxisse? Idem iste, inquam, de voluptate quid sentit? Facillimum id quidem est, inquam.\\n\"\n          },\n          \"coverImage\": {\n            \"url\": \"https://media.graphcms.com/QEg7oQCTEeEjLSEPQJtg\"\n          },\n          \"date\": \"2020-05-05\",\n          \"slug\": \"technical-seo-with-graphcms\",\n          \"title\": \"Technical SEO with GraphCMS\"\n        },\n        {\n          \"id\": \"Post:ckadrfuu000pe0148kels2b5e\",\n          \"content\": {\n            \"markdown\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Id enim natura desiderat. Falli igitur possumus. Negat enim summo bono afferre incrementum diem. Indicant pueri, in quibus ut in speculis natura cernitur.\\n\\n\\n\\n# Lorem Ipsum\\n\\n\\n\\nNe amores quidem sanctos a sapiente alienos esse arbitrantur. Summus dolor plures dies manere non potest? Expectoque quid ad id, quod quaerebam, respondeas. Non est ista, inquam, Piso, magna dissensio. Respondeat totidem verbis. Non est igitur summum malum dolor.\\n\\n\\n\\nHic ambiguo ludimur. Nam Pyrrho, Aristo, Erillus iam diu abiecti. Si longus, levis dictata sunt. Duo Reges: constructio interrete. Deinde dolorem quem maximum?\\n\"\n          },\n          \"coverImage\": {\n            \"url\": \"https://media.graphcms.com/gzYJIkMRRHCq0JLDOqgU\"\n          },\n          \"date\": \"2020-05-01\",\n          \"slug\": \"union-types-and-sortable-relations\",\n          \"title\": \"Union Types and Sortable Relations with GraphCMS\"\n        }\n\n        // ...more results\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Context Provider in Layout\nDESCRIPTION: This code demonstrates how to wrap your layout component with the `ContextProviderComponent` to provide context to all child components. It includes a header, the page content (`children`), and a footer.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-layout/README.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ContextProviderComponent } from \"./Context\"\n\nexport default ({ children }) => (\n  <ContextProviderComponent>\n    <Header />\n    {children}\n    <Footer />\n  </ContextProviderComponent>\n)\n```\n\n----------------------------------------\n\nTITLE: useStaticQuery Hook in Gatsby (JavaScript)\nDESCRIPTION: Adds the useStaticQuery hook to Gatsby. This allows components to easily fetch data via GraphQL during build time without needing to pass queries down through props.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/babel-plugin-remove-graphql-queries/CHANGELOG.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nf149c4c\n```\n\n----------------------------------------\n\nTITLE: Limit Markdown Remark Query GraphQL\nDESCRIPTION: This query retrieves a limited number of MarkdownRemark nodes. The `limit` argument is used to specify the maximum number of nodes to return.  It fetches the total count and frontmatter title for each node.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/graphql-reference/content/queries.md#_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  allMarkdownRemark(limit: 2) {\n    totalCount\n    edges {\n      node {\n        frontmatter {\n          title\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: CSS Styling Example\nDESCRIPTION: I can highlight `css¬±.some-class { background-color: red }` with CSS syntax.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-prismjs/README.md#_snippet_19\n\nLANGUAGE: CSS\nCODE:\n```\n.some-class { background-color: red }\n```\n\n----------------------------------------\n\nTITLE: Diff Syntax Highlighting\nDESCRIPTION: This snippet demonstrates how to enable syntax highlighting for `diff` code blocks by using the `diff-[language]` syntax. This is useful for showing changes in code with syntax highlighting.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-prismjs/README.md#_snippet_16\n\nLANGUAGE: Diff\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Using HeadFC type for Gatsby Head API\nDESCRIPTION: This code demonstrates the shorthand `HeadFC` type for typing the `Head` function when using an anonymous function in Gatsby's Head API.  It improves type safety and developer experience.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/custom-configuration/typescript.md#_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const Head: HeadFC<DataProps> = props => {\n  // your return value\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Client-Side Routes with Reach Router in Gatsby\nDESCRIPTION: This code snippet demonstrates how to set up client-side routes using `@reach/router` within a Gatsby page component. It imports necessary components, defines the routes using the `<Router>` component, and maps paths to specific components.  The `basepath` prop is used to specify the base URL for the routes.  This approach allows dynamic content rendering on the client-side without pre-rendered HTML files.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/routing/client-only-routes-and-user-authentication.md#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport React from \"react\"\nimport { Router } from \"@reach/router\" // highlight-line\nimport Layout from \"../components/Layout\"\nimport Profile from \"../components/Profile\"\nimport Details from \"../components/Details\"\nimport Login from \"../components/Login\"\nimport Default from \"../components/Default\"\n\nconst App = () => {\n  return (\n    <Layout>\n      // highlight-start\n      <Router basepath=\"/app\">\n        <Profile path=\"/profile\" />\n        <Details path=\"/details\" />\n        <Login path=\"/login\" />\n        <Default path=\"/\" />\n      </Router>\n      // highlight-end\n    </Layout>\n  )\n}\n\nexport default App\n```\n\n----------------------------------------\n\nTITLE: Blog List Template with GraphQL Query (JSX)\nDESCRIPTION: This template component displays a list of blog posts, fetching data using a GraphQL query with limit and skip variables. The query retrieves a subset of all MarkdownRemark nodes based on the specified limit and skip values passed through the context. The component then maps over the fetched posts and renders them within a Layout component.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/adding-pagination.md#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport React from \"react\"\nimport { graphql } from \"gatsby\"\nimport Layout from \"../components/layout\"\n\nexport default class BlogList extends React.Component {\n  render() {\n    const posts = this.props.data.allMarkdownRemark.edges\n    return (\n      <Layout>\n        {posts.map(({ node }) => {\n          const title = node.frontmatter.title || node.fields.slug\n          return <div key={node.fields.slug}>{title}</div>\n        })}\n      </Layout>\n    )\n  }\n}\n\nexport const blogListQuery = graphql`\n// highlight-start\n  query blogListQuery($skip: Int!, $limit: Int!) {\n    allMarkdownRemark(\n      sort: { frontmatter: { date: DESC }}\n      limit: $limit\n      skip: $skip\n    ) {\n// highlight-end\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n          }\n        }\n      }\n    }\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: Redux Node Storage Example JavaScript\nDESCRIPTION: This code snippet illustrates how Gatsby stores nodes and their relationships in Redux. The `children` field of a parent node (`File`) contains an array of IDs referencing child nodes of different types (`markdownRemark`, `postsJson`). This example demonstrates the storage structure of nodes and their children in Gatsby's Redux store.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/schema-inference.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  `id1`: { type: `File`, children: [`id2`, `id3`], ...other_fields },\n  `id2`: { type: `markdownRemark`, ...other_fields },\n  `id3`: { type: `postsJson`, ...other_fields }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Babel Monorepo in gatsby-source-hacker-news\nDESCRIPTION: This commit updates the Babel monorepo within the gatsby-source-hacker-news package.  It is part of the chore tasks for the 2.6.0 release.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-hacker-news/CHANGELOG.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nupdate babel monorepo [#27528](https://github.com/gatsbyjs/gatsby/issues/27528) ([539dbb0](https://github.com/gatsbyjs/gatsby/commit/539dbb09166e346a6cee568973d2de3d936e8ef3))\n```\n\n----------------------------------------\n\nTITLE: Installing gatsby-source-filesystem using npm\nDESCRIPTION: Installs the gatsby-source-filesystem plugin using npm. This plugin is required to source data from the local filesystem in a Gatsby project.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-filesystem/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install gatsby-source-filesystem\n```\n\n----------------------------------------\n\nTITLE: Applying Patches for v5\nDESCRIPTION: This snippet indicates that patches are being applied specifically for version 5 of Gatsby within the gatsby-remark-code-repls package. Applying patches addresses specific issues or bugs identified in version 5 and ensures the package functions correctly within that version.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-code-repls/CHANGELOG.md#_snippet_5\n\nLANGUAGE: none\nCODE:\n```\napply patches for v5 [#36796](https://github.com/gatsbyjs/gatsby/issues/36796) ([25f79b6](https://github.com/gatsbyjs/gatsby/commit/25f79b6c3719fdf09584ade620a05c66ba2a697c))\n```\n\n----------------------------------------\n\nTITLE: Updating Babel Monorepo\nDESCRIPTION: This code snippet indicates an update to the Babel monorepo within the context of the `gatsby-plugin-postcss` package.  This likely includes updates to Babel dependencies or configurations used by the plugin.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-postcss/CHANGELOG.md#_snippet_5\n\nLANGUAGE: none\nCODE:\n```\nupdate babel monorepo [#37568](https://github.com/gatsbyjs/gatsby/issues/37568) ([13a0a9e](https://github.com/gatsbyjs/gatsby/commit/13a0a9e83dcb015b65dff6b73cdd5dea09c2988f))\n```\n\n----------------------------------------\n\nTITLE: Chore: Babel Monorepo Update in babel-preset-gatsby\nDESCRIPTION: This snippet describes the chore for updating the babel monorepo in the babel-preset-gatsby package. This update addresses an issue reported in issue #37386 on the gatsbyjs/gatsby repository.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/babel-preset-gatsby/CHANGELOG.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nupdate babel monorepo [#37386](https://github.com/gatsbyjs/gatsby/issues/37386) ([b941876](https://github.com/gatsbyjs/gatsby/commit/b94187633d94d0f0071b38ffe93380dd802ec70f))\n```\n\n----------------------------------------\n\nTITLE: Rename responsive image queries (Diff)\nDESCRIPTION: This code snippet demonstrates how to update deprecated image query names (`sizes` and `resolutions`) to their new counterparts (`fluid` and `fixed`) in Gatsby v2. This change improves code readability and aligns with the updated Gatsby Image API.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v1-to-v2.md#_snippet_34\n\nLANGUAGE: Diff\nCODE:\n```\nimport React from \"react\"\nimport { graphql } from \"gatsby\"\n\nconst Example = ({ data }) => {\n  <div>\n-    <Img sizes={data.foo.childImageSharp.sizes} />\n-    <Img resolutions={data.bar.childImageSharp.resolutions} />\n+    <Img fluid={data.foo.childImageSharp.fluid} />\n+    <Img fixed={data.bar.childImageSharp.fixed} />\n  </div>\n}\n\nexport default Example\n\nexport const pageQuery = graphql`\n  query IndexQuery {\n    foo: file(relativePath: { regex: \"/foo.jpg/\" }) {\n      childImageSharp {\n-        sizes(maxWidth: 700) {\n-          ...GatsbyImageSharpSizes\n+        fluid(maxWidth: 700) {\n+          ...GatsbyImageSharpFluid\n        }\n      }\n    }\n    bar: file(relativePath: { regex: \"/bar.jpg/\" }) {\n      childImageSharp {\n-        resolutions(width: 500) {\n-          ...GatsbyImageSharpResolutions_withWebp\n+        fixed(width: 500) {\n          ...GatsbyImageSharpFixed_withWebp\n        }\n      }\n    }\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: Create Pages with GraphQL (Incorrect)\nDESCRIPTION: This code snippet demonstrates an incorrect implementation of the `createPages` lifecycle method in `gatsby-node.js`. It calls `graphql` asynchronously but does not `return` or `await` the Promise, leading to potential data errors because the lifecycle method might be marked as complete before the `graphql` call finishes. This can result in missing data when Gatsby builds the pages.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/debugging-async-lifecycles.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexports.createPages = async function ({ actions, graphql }) {\n  // highlight-start\n  graphql(`\n    {\n      allMarkdownRemark {\n        edges {\n          node {\n            fields {\n              slug\n            }\n          }\n        }\n      }\n    }\n  `).then(res => {\n    res.data.allMarkdownRemark.edges.forEach(edge => {\n      const slug = edge.node.fields.slug\n      actions.createPage({\n        path: slug,\n        component: require.resolve(`./src/templates/post.js`),\n        context: { slug },\n      })\n    })\n  })\n  // highlight-end\n}\n```\n\n----------------------------------------\n\nTITLE: Starting the Gatsby development server\nDESCRIPTION: This command navigates into the newly created site's directory and starts the Gatsby development server.  It allows you to view and interact with your Gatsby site locally during development. The server hot-reloads changes made to the code.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/e2e-tests/development-runtime/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncd my-default-starter/\ngatsby develop\n```\n\n----------------------------------------\n\nTITLE: Using Set for Tracking Existing Files in Gatsby\nDESCRIPTION: This commit optimizes the gatsby-plugin-page-creator by using a set for tracking existing files. Using a set improves the performance of file tracking, reducing the time required to process large numbers of files.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-page-creator/CHANGELOG.md#_snippet_31\n\nLANGUAGE: TEXT\nCODE:\n```\n843259e\n```\n\n----------------------------------------\n\nTITLE: Adding a Slice Component in Gatsby\nDESCRIPTION: This code snippet demonstrates how to add a `<Slice />` component to a Gatsby page or template. The `alias` prop specifies the name of the slice to render.  Additional props passed to the `<Slice />` component are forwarded to the underlying slice component. This allows for dynamic content and configuration of the slice.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/v4.22/index.md#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\nreturn (\n  <>\n    <Header className=\"my-header\" />\n    {children}\n    <Slice alias=\"footer\" />\n  </>\n)\n```\n\n----------------------------------------\n\nTITLE: Installing the gatsby-remark-autolink-headers plugin\nDESCRIPTION: This command installs the gatsby-remark-autolink-headers plugin using npm. This plugin adds GitHub-style hover links to headers in your markdown files when they're rendered.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-autolink-headers/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install gatsby-remark-autolink-headers\n```\n\n----------------------------------------\n\nTITLE: Updating Babel Monorepo for gatsby-plugin-emotion\nDESCRIPTION: This snippet demonstrates a bug fix involving updating the Babel monorepo dependency within the gatsby-plugin-emotion package. The update aims to resolve issues related to Babel compatibility and functionality within the plugin.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-emotion/CHANGELOG.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nupdate babel monorepo [#37568](https://github.com/gatsbyjs/gatsby/issues/37568) ([13a0a9e](https://github.com/gatsbyjs/gatsby/commit/13a0a9e83dcb015b65dff6b73cdd5dea09c2988f))\n```\n\n----------------------------------------\n\nTITLE: Configure with Default Settings JavaScript\nDESCRIPTION: Example of how to configure the `gatsby-remark-copy-linked-files` plugin in `gatsby-config.js` with default settings. This plugin will copy linked files from markdown to the public folder with default configurations.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-copy-linked-files/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-transformer-remark`,\n      options: {\n        plugins: [`gatsby-remark-copy-linked-files`],\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Gatsby onPreInit API (JavaScript)\nDESCRIPTION: This JavaScript code snippet demonstrates a basic implementation of the `onPreInit` Gatsby Node API within a plugin. The function logs a simple message to the console when the Gatsby site is initialized in develop or build mode.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/using-multiple-local-plugins/README.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexports.onPreInit = () => {\n  console.log(\"logging to the console...\")\n}\n```\n\n----------------------------------------\n\nTITLE: Install Gatsby Twitter Plugin\nDESCRIPTION: This command installs the gatsby-plugin-twitter package from npm. It is a necessary prerequisite before configuring the plugin in the gatsby-config.js file.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-twitter/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install gatsby-plugin-twitter\n```\n\n----------------------------------------\n\nTITLE: Check for outdated npm packages\nDESCRIPTION: This command checks for outdated packages in the project. It displays a table indicating the current, wanted, and latest versions for each package.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/upgrade-gatsby-and-dependencies.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm outdated\n```\n\n----------------------------------------\n\nTITLE: Migrating from wrapRootComponent to wrapRootElement (Diff)\nDESCRIPTION: Shows the differences between the old `wrapRootComponent` API and the new `wrapRootElement` API in Gatsby. The main change is that `wrapRootElement` receives an `element` instead of a `Root` component and expects a React element to be returned instead of a component.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v1-to-v2.md#_snippet_24\n\nLANGUAGE: diff\nCODE:\n```\n-export const wrapRootComponent = ({ Root }) => {\n+export const wrapRootElement = ({ element }) => {\n-  const ConnectedRootComponent = () => (\n+  const ConnectedRootElement = (\n    <Provider store={store}>\n-      <Root />\n+      {element}\n    </Provider>\n  )\n-  return ConnectedRootComponent\n+  return ConnectedRootElement\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Packages\nDESCRIPTION: This commit updates various packages to their latest versions, potentially including bug fixes and performance improvements. The pull request is referenced by its GitHub issue number.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-dev-cli/CHANGELOG.md#_snippet_16\n\nLANGUAGE: Text\nCODE:\n```\nupdate packages ([#25381](https://github.com/gatsbyjs/gatsby/issues/25381)) ([622e3c1](https://github.com/gatsbyjs/gatsby/commit/622e3c1))\n```\n\n----------------------------------------\n\nTITLE: Fixing HTML Escaping in Headings\nDESCRIPTION: This bug fix addresses a plugin conflict that was causing escaped HTML within headings when using gatsby-transformer-remark. This ensures that HTML tags within headings are rendered correctly instead of being escaped. This fix was implemented to address issue #20024.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-remark/CHANGELOG.md#_snippet_11\n\n\n\n----------------------------------------\n\nTITLE: Correcting hash usage in createFileNodeFromBuffer in gatsby-source-filesystem\nDESCRIPTION: This commit corrects the hash used when using `createFileNodeFromBuffer`, addressing issue #35243 in the gatsby-source-filesystem package. This fix ensures that the correct hash is generated and used for file nodes created from buffers.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-filesystem/CHANGELOG.md#_snippet_5\n\n\n\n----------------------------------------\n\nTITLE: Updating xlsx Dependency in GatsbyJS\nDESCRIPTION: This snippet addresses updating the `xlsx` dependency in `gatsby-transformer-excel`. This change ensures compatibility and addresses potential issues related to the excel parsing library. The dependency is updated to ensure it aligns with the requirements of `gatsby-transformer-excel`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-excel/CHANGELOG.md#_snippet_8\n\nLANGUAGE: None\nCODE:\n```\nupdate dependency xlsx to ^0.17.3 for gatsby-transformer-excel [#33767](https://github.com/gatsbyjs/gatsby/issues/33767) ([5ef7dfe](https://github.com/gatsbyjs/gatsby/commit/5ef7dfe4279aaf178422c5c80f7db758f642f921))\n```\n\n----------------------------------------\n\nTITLE: Accessing Transition Props\nDESCRIPTION: This code defines a functional component `PageOrTemplate` that receives props like `transitionStatus`, `entry`, and `exit`. These props are provided by the `TransitionLink` component and can be used to control the animation or styling of the page during the transition.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/adding-common-features/adding-page-transitions-with-plugin-transition-link.md#_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nconst PageOrTemplate = ({ children, transitionStatus, entry, exit }) => {\n  console.log(transitionStatus, entry, exit)\n  return <div className={transitionStatus}>{children}</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring gatsby-plugin-layout (custom)\nDESCRIPTION: This configuration specifies a custom layout component path using the `component` option in `gatsby-config.js`. It resolves the path relative to the configuration file.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-layout/README.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-layout`,\n      options: {\n        component: require.resolve(`./relative/path/to/layout/component`),\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Import Line Numbers CSS\nDESCRIPTION: This code snippet shows how to import the PrismJS line numbers CSS file in `gatsby-browser.js`. This will enable line numbering for code blocks.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-prismjs/README.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// gatsby-browser.js\nrequire(\"prismjs/plugins/line-numbers/prism-line-numbers.css\")\n```\n\n----------------------------------------\n\nTITLE: Correcting Links in Package Changelogs\nDESCRIPTION: This commit focuses on rectifying broken or inaccurate links found within the changelogs of various packages. The update ensures that users are directed to the correct resources and documentation, improving navigation and accessibility within the project's documentation.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-typescript/CHANGELOG.md#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\ncorrect links in package changelogs ([#15630](https://github.com/gatsbyjs/gatsby/issues/15630)) ([d07b9dd](https://github.com/gatsbyjs/gatsby/commit/d07b9dd))\n```\n\n----------------------------------------\n\nTITLE: Adding Numeric Separator Support to gatsby-plugin-typescript\nDESCRIPTION: This commit adds support for numeric separators in gatsby-plugin-typescript. This allows developers to use underscores as separators in numeric literals, improving readability and maintainability of code that uses large numbers.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-typescript/CHANGELOG.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n**gatsby-plugin-typescript:** add support for numeric separa‚Ä¶ ([#19610](https://github.com/gatsbyjs/gatsby/issues/19610)) ([2921221](https://github.com/gatsbyjs/gatsby/commit/2921221))\n```\n\n----------------------------------------\n\nTITLE: Gatsby Page Query for Post List\nDESCRIPTION: This snippet showcases a Gatsby page query used to fetch a list of posts. It queries all MDX nodes, sorts them by date in descending order, and filters out draft posts. The data is then passed to a `PostList` component for rendering. The query uses GraphQL to select specific fields from the MDX nodes, including title, path, and date.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/plugins-and-themes/theme-conventions.md#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\nimport React from \"react\"\nimport { graphql } from \"gatsby\"\n\nimport PostList from \"../components/PostList\"\n\nexport default function MyPostsList(props) {\n  return <PostList posts={props.allMdx.edges} />\n}\n\nexport const query = graphql`\n  query {\n    allMdx(\n      sort: { frontmatter: { date: DESC }}\n      filter: { frontmatter: { draft: { ne: true }}} \n    ) {\n      edges {\n        node {\n          id\n          parent {\n            ... on File {\n              name\n              sourceInstanceName\n            }\n          }\n          frontmatter {\n            title\n            path\n            date(formatString: \"MMMM DD, YYYY\")\n          }\n        }\n      }\n    }\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: HTML Highlighting Example HTML\nDESCRIPTION: Demonstrates highlighting lines in an HTML snippet using highlight-line and highlight-next-line comments.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-embed-snippet/README.md#_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<html>\n  <body>\n    <h1>highlight me</h1> <!-- highlight-line -->\n    <p>\n      <!-- highlight-next-line -->\n      And me\n    </p>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Updating cross-env dependency in Gatsby\nDESCRIPTION: This commit updates the cross-env dependency to version ^7.0.3 within the Gatsby project. Cross-env is used to set environment variables across different platforms.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-react-helmet/CHANGELOG.md#_snippet_16\n\nLANGUAGE: Shell\nCODE:\n```\nupdate dependency cross-env to ^7.0.3 [#28505](https://github.com/gatsbyjs/gatsby/issues/28505) ([a819b9b](https://github.com/gatsbyjs/gatsby/commit/a819b9bfb663139f7b06c3ed7d6d6069a2382b2c))\n```\n\n----------------------------------------\n\nTITLE: Updating Parcel version in gatsby-parcel-config\nDESCRIPTION: This commit updates the Parcel dependency to version 2.8.0 within the gatsby-parcel-config package. This update may include new features, bug fixes, and performance improvements in the Parcel bundler.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-parcel-config/CHANGELOG.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nupdate parcel to v2.8.0 [#37132](https://github.com/gatsbyjs/gatsby/issues/37132) ([479702c](https://github.com/gatsbyjs/gatsby/commit/479702cc5d2b792d4f35b024c834a8231f237259))\n```\n\n----------------------------------------\n\nTITLE: GraphQL query for custom dynamic typeName\nDESCRIPTION: Example GraphQL query to retrieve the data using the custom dynamic typeName. In this case we query for all nodes where level is 'info'.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-json/README.md#_snippet_12\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  allInfo {\n    edges {\n      node {\n        message\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook main.js for webpack 5\nDESCRIPTION: This code configures the `.storybook/main.js` file to use webpack 5 as the builder for Storybook. It also specifies the location of story files, addons and sets the framework to React.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/testing/visual-testing-with-storybook.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n  // highlight-start\n  stories: [\"../src/**/*.stories.mdx\", \"../src/**/*.stories.@(js|jsx|ts|tsx)\"],\n  addons: [\"@storybook/addon-links\", \"@storybook/addon-essentials\"],\n  framework: \"@storybook/react\",\n  core: {\n    builder: \"webpack5\",\n  },\n  // highlight-end\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Types in types.ts\nDESCRIPTION: This code snippet defines TypeScript types for node builder input, using discriminated unions to ensure type safety.  It imports node type constants from `constants.ts`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/creating-a-source-plugin/part-2/index.mdx#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// Rest of imports\nimport { NODE_TYPES } from \"./constants\"\n\nexport type NodeBuilderInput =\n  | { type: typeof NODE_TYPES.Author; data: IAuthorInput }\n  | { type: typeof NODE_TYPES.Post; data: IPostInput }\n\n// Rest of types\n```\n\n----------------------------------------\n\nTITLE: Querying Drupal Nodes (GraphQL)\nDESCRIPTION: This snippet demonstrates a GraphQL query for fetching article nodes from Drupal, showcasing how to retrieve fields like title, internalId, and the formatted creation date.  It's assumed the `gatsby-source-drupal` plugin has been configured to pull data from a Drupal instance.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-drupal/README.md#_snippet_22\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  allArticle {\n    edges {\n      node {\n        title\n        internalId\n        created(formatString: \"DD-MMM-YYYY\")\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating onCreateNode to watch for Mdx node type\nDESCRIPTION: This snippet updates the `onCreateNode` function to watch for the `Mdx` node type instead of `MarkdownRemark`. This ensures that slugs are created for MDX files.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/routing/migrate-remark-to-mdx.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nexports.onCreateNode = ({ node, actions, getNode }) => {\n  const { createNodeField } = actions\n\n-  if (node.internal.type === `MarkdownRemark`) {\n+  if (node.internal.type === `Mdx`) {\n```\n\n----------------------------------------\n\nTITLE: Develop Site with Yarn (shell)\nDESCRIPTION: This command initiates the Gatsby development server for the 'site' workspace using Yarn.  It allows developers to preview and test the theme during development.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/building-a-theme.md#_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\nyarn workspace site develop\n```\n\n----------------------------------------\n\nTITLE: Configure Lazy Images in gatsby-config.js (JavaScript)\nDESCRIPTION: This code snippet shows how to enable or disable the Lazy Images feature in Gatsby by setting the LAZY_IMAGES flag in the gatsby-config.js file. This feature improves development performance by processing images only when the page gets requested. The plugins array remains unchanged.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/v2.29/index.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// In your gatsby-config.js\nmodule.exports = {\n  flags: {\n    LAZY_IMAGES: false,\n  },\n  plugins: [], // your plugins stay the same\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing package changelog links in gatsby-react-router-scroll (JavaScript)\nDESCRIPTION: This commit corrects the links in the package changelogs. It fixes incorrect or broken links within the changelog, ensuring that developers can properly navigate to the relevant commit or issue for more details on specific changes in the `gatsby-react-router-scroll` package.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-react-router-scroll/CHANGELOG.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\ncorrect links in package changelogs ([#15630](https://github.com/gatsbyjs/gatsby/issues/15630)) ([d07b9dd](https://github.com/gatsbyjs/gatsby/commit/d07b9dd))\n```\n\n----------------------------------------\n\nTITLE: Rendering Prismic Data in a Gatsby Component\nDESCRIPTION: This React component fetches data using GraphQL and renders the home page content, including the headline, description, and image.  It retrieves data from Prismic, extracts the first 'blog_home' document, and renders its headline and description using `RichText.asText` from `prismic-reactjs`. It also renders the image with an alt attribute. The component is passed data as a prop, which it uses to populate the content.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/prismic-source-graphql-tutorial.md#_snippet_5\n\nLANGUAGE: JSX\nCODE:\n```\nexport default function Home({ data }) {\n  const doc = data.prismic.allBlog_homes.edges.slice(0, 1).pop()\n  const posts = data.prismic.allPosts.edges\n\n  if (!doc) return null\n\n  return (\n    <Layout>\n      <div>\n        <img src={doc.node.image.url} alt={doc.node.image.alt} /> // Make sure\n        to add an accessible alt attribute when adding images in Prismic:\n        https://user-guides.prismic.io/articles/768849-add-metadata-to-an-asset\n        <h1>{RichText.asText(doc.node.headline)}</h1>\n        <p>{RichText.asText(doc.node.description)}</p>\n      </div>\n    </Layout>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring gatsby-plugin-typescript with Options\nDESCRIPTION: This code snippet demonstrates how to configure the `gatsby-plugin-typescript` in `gatsby-config.js`. It shows how to set options like `isTSX`, `jsxPragma`, and `allExtensions` to customize the Babel preset.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-typescript/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-typescript`,\n      options: {\n        isTSX: true, // defaults to false\n        jsxPragma: `jsx`, // defaults to \"React\"\n        allExtensions: true, // defaults to false\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Package Links in Changelogs\nDESCRIPTION: This snippet addresses an issue with incorrect links in the package changelogs.  It ensures that the links to issues and commits are properly formatted and functional within the changelog document.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-styled-components/CHANGELOG.md#_snippet_9\n\nLANGUAGE: Text\nCODE:\n```\ncorrect links in package changelogs ([#15630](https://github.com/gatsbyjs/gatsby/issues/15630)) ([d07b9dd](https://github.com/gatsbyjs/gatsby/commit/d07b9dd))\n```\n\n----------------------------------------\n\nTITLE: Configuring Feature Flags in gatsby-config.js (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to configure feature flags within the `gatsby-config.js` file. It shows how to enable the `FAST_DEV` flag, which encompasses `DEV_SSR`, `QUERY_ON_DEMAND`, and `LAZY_IMAGES`. This allows developers to toggle experimental features without using environment variables, providing a more consistent experience across different platforms and deployment environments.\n\nDependencies: None\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/v2.28/index.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// In your gatsby-config.js\nmodule.exports = {\n  // your existing config\n  flags: {\n    FAST_DEV: true,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing check for fluid and fixed size filters\nDESCRIPTION: This code snippet fixes a bug related to checking fluid and fixed size filters in gatsby-source-contentful. This ensures that the filters for image sizing are applied correctly when querying Contentful assets.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-contentful/CHANGELOG.md#_snippet_28\n\nLANGUAGE: diff\nCODE:\n```\n([#11009](https://github.com/gatsbyjs/gatsby/issues/11009)) ([aeb2bbd](https://github.com/gatsbyjs/gatsby/commit/aeb2bbd))\n```\n\n----------------------------------------\n\nTITLE: Adding Ignore Support to Gatsby Page Creator\nDESCRIPTION: This code snippet details the addition of ignore support via plugin options in gatsby-plugin-page-creator. This allows users to specify files and directories that should be ignored during page creation, and addresses test file ignores on Windows. It closes related issues.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-page-creator/CHANGELOG.md#_snippet_43\n\nLANGUAGE: Text\nCODE:\n```\n**gatsby-plugin-page-creator:** add ignore support via plugin options, fix test file ignores on Windows ([#11304](https://github.com/gatsbyjs/gatsby/issues/11304)) ([9fdc223](https://github.com/gatsbyjs/gatsby/commit/9fdc223)), closes [/github.com/gatsbyjs/gatsby/blob/026d2a956296cb01936bcf45d2be1066dd844d00/packages/gatsby-plugin-page-creator/src/gatsby-node.js#L51-L66](https://github.com/gatsbyjs/gatsby/issues/L51-L66) [/github.com/gatsbyjs/gatsby/blob/026d2a956296cb01936bcf45d2be1066dd844d00/packages/gatsby-plugin-page-creator/src/validate-path.js#L11](https://github.com/gatsbyjs/gatsby/issues/L11) [#11168](https://github.com/gatsbyjs/gatsby/issues/11168)\n```\n\n----------------------------------------\n\nTITLE: Configuring Gatsby with ESM syntax\nDESCRIPTION: This code snippet shows how to configure a `gatsby-config.mjs` file using ES module syntax. It defines the `siteMetadata` and exports the `config` object as the default export.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/custom-configuration/es-modules.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst config = {\n  siteMetadata: {\n    title: `ESM in Gatsby`,\n  },\n}\n\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Install gatsby-source-lever\nDESCRIPTION: Command to install the gatsby-source-lever plugin using npm.  This command adds the plugin as a dependency to your Gatsby project.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-lever/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install gatsby-source-lever\n```\n\n----------------------------------------\n\nTITLE: Run Gatsby Query Timing (Loki With Index)\nDESCRIPTION: This shell command executes the `runQueryTiming.sh` script to benchmark Gatsby query performance with Loki datastore and indexes enabled. It sets the number of page types (NUM_TYPES) and the number of pages (NUM_PAGES) as environment variables for the script.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/benchmarks/query/recording.md#_snippet_8\n\nLANGUAGE: Shell Script\nCODE:\n```\nquery $ NUM_TYPES=1 NUM_PAGES=10000 bin/runQueryTiming.sh\n8.126\n```\n\n----------------------------------------\n\nTITLE: Markdown Headers Syntax\nDESCRIPTION: Demonstrates the syntax for creating headers in Markdown, ranging from H1 to H6, using both hash symbols and underline styles.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/using-remark/src/pages/2016-04-15---hello-world-kitchen-sink/index.md#_snippet_0\n\nLANGUAGE: no-highlight\nCODE:\n```\n# H1\n## H2\n### H3\n#### H4\n##### H5\n###### H6\n\nAlternatively, for H1 and H2, an underline-ish style:\n\nAlt-H1\n======\n\nAlt-H2\n------\n```\n\n----------------------------------------\n\nTITLE: Query Variables in JSON\nDESCRIPTION: This JSON object defines the values for the variables used in the `GetBlogPosts` GraphQL query. It sets a limit of 5, filters for entries with non-null dates, and sorts by the `frontmatter___title` field in descending order.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/graphql-reference.md#_snippet_25\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"limit\": 5,\n  \"filter\": {\n    \"frontmatter\": {\n      \"date\": {\n        \"ne\": null\n      }\n    }\n  },\n  \"sort\": {\n    \"fields\": \"frontmatter___title\",\n    \"order\": \"DESC\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query with Aggregation Resolvers\nDESCRIPTION: This GraphQL query demonstrates the usage of new aggregation resolvers: `min()`, `max()`, and `sum()`. These resolvers allow you to find the minimum, maximum, and sum of values from a field in your data. In this example, the query retrieves the minimum price, maximum price, and total price of Shopify products.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/v3.4/index.md#_snippet_1\n\nLANGUAGE: GraphQL\nCODE:\n```\n{\n  allShopifyProduct {\n    maxPrice: max(field: variants___price)\n    minPrice: min(field: variants___price)\n    totalPrice: sum(field: variants___price)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating to Gatsby Script\nDESCRIPTION: Demonstrates how to replace a standard HTML `<script>` tag with the Gatsby `<Script>` component by importing `Script` and changing the tag name.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/built-in-components/gatsby-script.md#_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\nimport React from \"react\"\n+import { Script } from \"gatsby\"\n\nfunction MyPage() {\n  return (\n-   <script src=\"https://my-example-script\" />\n+   <Script src=\"https://my-example-script\" />\n  )\n}\n\nexport default MyPage\n```\n\n----------------------------------------\n\nTITLE: Overriding css-loader options in gatsby-plugin-less\nDESCRIPTION: This snippet shows how to override the default css-loader options used by gatsby-plugin-less.  It configures the `camelCase` option. Gatsby uses `css-loader@^5.0.0`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-less/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// in gatsby-config.js\nplugins: [\n  {\n    resolve: `gatsby-plugin-less`,\n    options: {\n      cssLoaderOptions: {\n        camelCase: false,\n      },\n    },\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring mdxOptions for the MDX compiler\nDESCRIPTION: This configuration demonstrates how to pass options directly to the MDX compiler using the `mdxOptions` configuration. It includes using remark plugins like `remark-gfm` for GitHub Flavored Markdown and `remark-external-links`, and rehype plugins like `rehype-slug` and `rehype-autolink-headings`. This snippet requires ESM.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-mdx/README.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport remarkGfm from \"remark-gfm\"\nimport remarkExternalLinks from \"remark-external-links\"\nimport rehypeSlug from \"rehype-slug\"\nimport rehypeAutolinkHeadings from \"rehype-autolink-headings\"\n\nconst config = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-mdx`,\n      options: {\n        mdxOptions: {\n          remarkPlugins: [\n            // Add GitHub Flavored Markdown (GFM) support\n            remarkGfm,\n            // To pass options, use a 2-element array with the\n            // configuration in an object in the second element\n            [remarkExternalLinks, { target: false }],\n          ],\n          rehypePlugins: [\n            // Generate heading ids for rehype-autolink-headings\n            rehypeSlug,\n            // To pass options, use a 2-element array with the\n            // configuration in an object in the second element\n            [rehypeAutolinkHeadings, { behavior: `wrap` }],\n          ],\n        },\n      },\n    },\n  ],\n}\n\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Define GraphQL Types with @link Directive (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to define GraphQL types using the `createTypes` action from Gatsby's `createSchemaCustomization` API. It shows the use of the `@link` directive to create a foreign-key relationship between the `author` field in the `Post` type and the `name` field in the `Author` type. The `author` field's type is changed from `String!` to `Author`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/creating-a-source-plugin/part-3/index.mdx#_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport type { GatsbyNode } from \"gatsby\"\nimport { NODE_TYPES } from \"./constants\"\n\nexport const createSchemaCustomization: GatsbyNode[`createSchemaCustomization`] =\n  ({ actions }) => {\n    const { createTypes } = actions\n\n    createTypes(`\n      type ${NODE_TYPES.Post} implements Node {\n        id: ID!\n        _id: Int!\n        slug: String!\n        title: String!\n// highlight-next-line\n        author: ${NODE_TYPES.Author} @link(by: \"name\")\n        image: ${NODE_TYPES.Post}Image!\n      }\n\n      type ${NODE_TYPES.Author} implements Node {\n        id: ID!\n        _id: Int!\n        name: String!\n      }\n\n      type ${NODE_TYPES.Post}Image {\n        url: String!\n        alt: String!\n        width: Int!\n        height: Int!\n      }\n    `)\n  }\n```\n\n----------------------------------------\n\nTITLE: Custom Link Component for Internal/External Links\nDESCRIPTION: Provides an example of a custom `Link` component that intelligently renders either a Gatsby `<Link>` component for internal links or a standard `<a>` element for external links, based on a URL pattern.  The internal link is determined by a regular expression check. This allows dynamic rendering of links based on content from a CMS.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/built-in-components/gatsby-link.md#_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Link as GatsbyLink } from \"gatsby\"\n\n// Since DOM elements <a> cannot receive activeClassName\n// and partiallyActive, destructure the prop here and\n// pass it only to GatsbyLink\nconst Link = ({ children, to, activeClassName, partiallyActive, ...other }) => {\n  // Tailor the following test to your environment.\n  // This example assumes that any internal link (intended for Gatsby)\n  // will start with exactly one slash, and that anything else is external.\n  const internal = /^\\/(?!\\/)/.test(to)\n\n  // Use Gatsby Link for internal links, and <a> for others\n  if (internal) {\n    return (\n      <GatsbyLink\n        to={to}\n        activeClassName={activeClassName}\n        partiallyActive={partiallyActive}\n        {...other}\n      >\n        {children}\n      </GatsbyLink>\n    )\n  }\n  return (\n    <a href={to} {...other}>\n      {children}\n    </a>\n  )\n}\n\nexport default Link\n```\n\n----------------------------------------\n\nTITLE: Jest Configuration File (jest.config.js)\nDESCRIPTION: This JavaScript file configures Jest for a Gatsby project. It specifies the transformation of JSX files using babel-jest, mocks CSS and static file imports, ignores node_modules and .cache directories, configures transformIgnorePatterns to handle Gatsby's ES6 code, sets global variables, and specifies a setup file for additional configuration.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/testing/unit-testing.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  transform: {\n    \"^.+\\\\.jsx?$\": `<rootDir>/jest-preprocess.js`,\n  },\n  moduleNameMapper: {\n    \".+\\\\.(css|styl|less|sass|scss)$\": `identity-obj-proxy`,\n    \".+\\\\.(jpg|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)$\": `<rootDir>/__mocks__/file-mock.js`,\n  },\n  testPathIgnorePatterns: [`node_modules`, `\\\\.cache`, `<rootDir>.*/public`],\n  transformIgnorePatterns: [`node_modules/(?!(gatsby|gatsby-script|gatsby-link)/)`],\n  globals: {\n    __PATH_PREFIX__: ``,\n  },\n  testEnvironmentOptions: {\n    url: `http://localhost`,\n  },\n  setupFiles: [`<rootDir>/loadershim.js`],\n}\n```\n\n----------------------------------------\n\nTITLE: Applying patches for v4\nDESCRIPTION: Applies necessary patches to the gatsby-source-npm-package-search package for version 4 of Gatsby. This ensures compatibility and addresses potential issues.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-npm-package-search/CHANGELOG.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\napply patches for v4 [#33170](https://github.com/gatsbyjs/gatsby/issues/33170) ([f8c5141](https://github.com/gatsbyjs/gatsby/commit/f8c5141bf72108a53338fd01514522ae7a1b37bf))\n```\n\n----------------------------------------\n\nTITLE: Starting Gatsby Development Server\nDESCRIPTION: This command starts the Gatsby development server, allowing you to preview your site in development mode.  It enables live reloading and hot module replacement.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/sourcing-data/sourcing-from-kontent-ai.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ngatsby develop\n```\n\n----------------------------------------\n\nTITLE: Fixing PostCSS Loader in SSR with Gatsby\nDESCRIPTION: Addresses an issue where the PostCSS loader was incorrectly being used during server-side rendering (SSR). This fix ensures that the loader is not used in SSR, resolving potential conflicts or errors that may arise during the rendering process.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-postcss/CHANGELOG.md#_snippet_11\n\n\n\n----------------------------------------\n\nTITLE: Updating babel-plugin-macros dependency\nDESCRIPTION: This commit updates the babel-plugin-macros dependency to version ^2.6.1. Babel macros allow developers to write more expressive and reusable code by performing compile-time transformations. Keeping dependencies updated provides access to bug fixes and improvements.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/babel-preset-gatsby/CHANGELOG.md#_snippet_14\n\n\n\n----------------------------------------\n\nTITLE: Update Packages in Gatsby\nDESCRIPTION: This commit updates minor dependency packages in the Gatsby project. It ensures that the project is using the latest versions of its dependencies, which can improve performance and security.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-typography/CHANGELOG.md#_snippet_1\n\nLANGUAGE: None\nCODE:\n```\nupdate minor updates in packages ([#18875](https://github.com/gatsbyjs/gatsby/issues/18875)) ([b692879](https://github.com/gatsbyjs/gatsby/commit/b692879))\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query for Fixed Image Parameters\nDESCRIPTION: This GraphQL code demonstrates how to query for a fixed image with specific width and height parameters.  It uses the GatsbyImageSharpFixed fragment to retrieve the necessary fields for the Img component.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/built-in-components/gatsby-image.md#_snippet_3\n\nLANGUAGE: GraphQL\nCODE:\n```\nfile(relativePath: { eq: \"images/default.jpg\" }) {\n  childImageSharp {\n    // highlight-start\n    fixed(width: 400, height: 400) {\n      ...GatsbyImageSharpFixed\n      // highlight-end\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Package Dependencies in Gatsby\nDESCRIPTION: This code snippet describes the update of minor package dependencies in the Gatsby project, excluding react, babel, and eslint. The updates ensure that the project uses the latest versions of its dependencies, improving stability and security.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-images-contentful/CHANGELOG.md#_snippet_38\n\nLANGUAGE: none\nCODE:\n```\n- update minor updates in packages except react, babel and eslint ([#17254](https://github.com/gatsbyjs/gatsby/issues/17254)) ([252d867](https://github.com/gatsbyjs/gatsby/commit/252d867))\n```\n\n----------------------------------------\n\nTITLE: Configuring fastHash in gatsby-source-filesystem (JS)\nDESCRIPTION: This snippet shows how to configure the `gatsby-source-filesystem` plugin with the `fastHash` option enabled. This option skips MD5 hashing and uses `inode` and `mtime` to determine if files have changed, improving performance on modern OSes. Requires gatsby-source-filesystem plugin.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/v5.5/index.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-source-filesystem`,\n      options: {\n        name: `data`,\n        path: `${__dirname}/src/data/`,\n        // highlight-next-line\n        fastHash: true,\n      },\n    },\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Peer Dependencies in gatsby-plugin-page-creator\nDESCRIPTION: This snippet updates the peer dependencies of the package. Peer dependencies are dependencies that the package expects the consumer to have installed already.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-page-creator/CHANGELOG.md#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nUpdate peerDeps [#36965](https://github.com/gatsbyjs/gatsby/issues/36965) ([b624442](https://github.com/gatsbyjs/gatsby/commit/b6244424fe8b724cbc23b80b2b4f5424cc2055a4))\n```\n\n----------------------------------------\n\nTITLE: Upgrading Jest Dependency - Chore\nDESCRIPTION: This chore involves upgrading the Jest testing framework dependency to a newer version. This ensures that the project utilizes the latest features and bug fixes of Jest. The issue and commit associated with the upgrade are included.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-documentationjs/CHANGELOG.md#_snippet_2\n\nLANGUAGE: N/A\nCODE:\n```\nupgrade jest [#33277](https://github.com/gatsbyjs/gatsby/issues/33277) ([34cb202](https://github.com/gatsbyjs/gatsby/commit/34cb202d9c8c202f082edb03c4cc1815eb81abe1))\n```\n\n----------------------------------------\n\nTITLE: CSS Styling for Pure JSX SQIP Implementation\nDESCRIPTION: These CSS rules style the container and images for displaying SQIP previews with the full resolution image layered on top. The .image-wrapper sets up relative positioning and overflow hidden, while the .image class is absolutely positioned.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-sqip/README.md#_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n.image-wrapper {\n  position: relative;\n  overflow: hidden;\n}\n.image-wrapper img {\n  display: block;\n}\n\n.image-wrapper img.image {\n  position: absolute;\n  left: 0;\n  top: 0;\n  bottom: 0;\n  width: 100%;\n  height: auto;\n  z-index: 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Preventing unpublished Contentful entries from breaking content sync (JavaScript)\nDESCRIPTION: This commit prevents unpublished Contentful entries from causing content synchronization to break in gatsby-source-contentful. This makes the sync process more robust by handling unpublished entries gracefully.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-contentful/CHANGELOG.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n11274db\n```\n\n----------------------------------------\n\nTITLE: Running Gatsby Benchmark with 'gt' Filter - Small Number of Nodes\nDESCRIPTION: This command runs the Gatsby benchmark with the 'gt' filter and a small number of nodes (1000). It's the first step in determining the time complexity of the 'gt' filter.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/benchmarks/query-filters-sort/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nNUM_NODES=1000 FILTER=gt yarn bench\n```\n\n----------------------------------------\n\nTITLE: Robots.txt Disallow Rules\nDESCRIPTION: This snippet shows a basic robots.txt configuration that disallows all user agents from accessing any part of the site. This configuration is often used during development or staging environments.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/benchmarks/markdown_slug/static/robots.txt#_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Updating minor package updates in gatsby-remark-images-contentful (JavaScript)\nDESCRIPTION: This commit updates minor dependencies in the package. This ensures that the package is using the latest bug fixes and performance improvements from its dependencies. These updates ensure compatibility and improve the overall stability of the plugin.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-images-contentful/CHANGELOG.md#_snippet_33\n\nLANGUAGE: JavaScript\nCODE:\n```\nupdate minor updates in packages ([#19087](https://github.com/gatsbyjs/gatsby/issues/19087)) ([294a48f](https://github.com/gatsbyjs/gatsby/commit/294a48f))\n```\n\n----------------------------------------\n\nTITLE: Installing dependencies and running Gatsby develop\nDESCRIPTION: This shell command installs the necessary packages and starts the Gatsby development server. It assumes the current directory is `examples/functions-google-gmail` and that Node.js and npm are installed.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/functions-google-gmail/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd examples/functions-google-gmail\nnpm install\nnpm run develop\n```\n\n----------------------------------------\n\nTITLE: Exporting theme-gatsbyjs-org as default\nDESCRIPTION: This code snippet demonstrates how to export the `theme` object from `gatsby-design-tokens/dist/theme-gatsbyjs-org` as the default export from `src/gatsby-plugin-theme-ui/index.js`, when used with `gatsby-plugin-theme-ui`. This theme is specific to gatsbyjs.com and includes color modes, sizes, and z-indices.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-design-tokens/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { theme } from \"gatsby-design-tokens/dist/theme-gatsbyjs-org\"\n\n// when used with `gatsby-plugin-theme-ui`, export the theme\n// as default from `src/gatsby-plugin-theme-ui/index.js`\nexport { theme as default } from \"gatsby-design-tokens/dist/theme-gatsbyjs-org\"\n\n// in case you need theme tokens outside of the `emotion` context\nimport {\n  breakpoints,\n  colors,\n  fonts,\n  fontSizes,\n  fontWeights,\n  letterSpacings,\n  lineHeights,\n  mediaQueries,\n  radii,\n  shadows,\n  sizes,\n  space,\n  transition,\n  zIndices,\n} from \"gatsby-design-tokens/dist/theme-gatsbyjs-org\"\n```\n\n----------------------------------------\n\nTITLE: Resolving Entity Reference Revisions (JavaScript)\nDESCRIPTION: This snippet demonstrates how to configure the `entityReferenceRevisions` option to resolve entity reference relationships using both ID and revision ID. This is particularly useful when using the Entity reference revisions and Paragraphs contrib modules.  It is only needed in advanced use cases with custom Drupal code.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-drupal/README.md#_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n// In your gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-source-drupal`,\n      options: {\n        baseUrl: `https://live-contentacms.pantheonsite.io/`,\n        apiBase: `api`,\n        entityReferenceRevisions: [\"paragraph\"], // optional, defaults to `[]`\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Babel Monorepo in Gatsby\nDESCRIPTION: This snippet updates the Babel monorepo. Updating Babel is essential for keeping the Gatsby project up-to-date with the latest JavaScript features and syntax transformations.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-canonical-urls/CHANGELOG.md#_snippet_6\n\nLANGUAGE: none\nCODE:\n```\nupdate babel monorepo [#27528](https://github.com/gatsbyjs/gatsby/issues/27528) ([539dbb0](https://github.com/gatsbyjs/gatsby/commit/539dbb09166e346a6cee568973d2de3d936e8ef3))\n```\n\n----------------------------------------\n\nTITLE: Bumping node minimum version for Gatsby\nDESCRIPTION: This feature bumps the minimum required Node.js version for Gatsby to 10.13.0. This change ensures compatibility with newer JavaScript features and improves overall performance. It affects all Gatsby packages, including gatsby-plugin-lodash.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-lodash/CHANGELOG.md#_snippet_1\n\nLANGUAGE: Other\nCODE:\n```\n**gatsby:** bump node min version to 10.13.0 ([#22400](https://github.com/gatsbyjs/gatsby/issues/22400)) ([83d681a](https://github.com/gatsbyjs/gatsby/commit/83d681a))\n```\n\n----------------------------------------\n\nTITLE: Sorting with Ascending and Descending Order in GraphQL\nDESCRIPTION: This GraphQL query sorts the `allMarkdownRemark` results by `frontmatter.date` in ascending order and then by `frontmatter.title` in descending order. It retrieves the `totalCount` and the `title` and `date` of each node in the edges.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/graphql-reference.md#_snippet_18\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  allMarkdownRemark(\n    sort: [{ frontmatter: { date: ASC } }, { frontmatter: { title: DESC } }]\n  ) {\n    totalCount\n    edges {\n      node {\n        frontmatter {\n          title\n          date\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Git on Fedora/RedHat\nDESCRIPTION: This snippet installs Git on Fedora, RedHat, and other dnf based Linux distributions using the dnf package manager. Git is necessary for creating Gatsby projects from starters.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/local-development/gatsby-on-linux.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nsudo dnf install git\n```\n\n----------------------------------------\n\nTITLE: Setting Path to Gatsby Fork\nDESCRIPTION: This command configures the Gatsby Dev CLI to point to a specific forked version of Gatsby. This enables the CLI to use the local changes in the forked repository for testing.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/contributing/code-contributions.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ngatsby-dev --set-path-to-repo /path/to/my/forked/version/gatsby\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query for AsciiDoc Nodes (GraphQL)\nDESCRIPTION: A sample GraphQL query to retrieve AsciiDoc nodes. It demonstrates how to access the parsed HTML, document metadata (title, subtitle, main), author information, and revision details from the AsciiDoc content.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-asciidoc/README.md#_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  allAsciidoc {\n    edges {\n      node {\n        html\n        document {\n          title\n          subtitle\n          main\n        }\n        author {\n          fullName\n          firstName\n          lastName\n          middleName\n          authorInitials\n          email\n        }\n        revision {\n          date\n          number\n          remark\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Install Xcode Command Line Tools (macOS)\nDESCRIPTION: This command installs Xcode Command Line Tools, which are necessary for compiling software on macOS.  It is required for some Homebrew packages and development tasks. The command prompts the user to accept a software license agreement before proceeding with the installation.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-0/index.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nxcode-select --install\n```\n\n----------------------------------------\n\nTITLE: Example JSON Output\nDESCRIPTION: Shows the resulting JSON nodes that are created by the `gatsby-transformer-excel` plugin after processing an Excel file with two worksheets.  The type attribute is dynamically generated.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-excel/README.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n[\n  { \"letter\": \"a\", \"value\": 97, \"type\": \"LettersXlsxSheet1\" },\n  { \"letter\": \"b\", \"value\": 98, \"type\": \"LettersXlsxSheet1\" },\n  { \"letter\": \"A\", \"value\": 65, \"type\": \"LettersXlsxSheet2\" },\n  { \"letter\": \"B\", \"value\": 66, \"type\": \"LettersXlsxSheet2\" }\n]\n```\n\n----------------------------------------\n\nTITLE: Adding lazy loading support in gatsby-remark-images-contentful (JavaScript)\nDESCRIPTION: This commit adds native lazy loading support to Contentful images. This feature improves page load performance by deferring the loading of images until they are about to enter the viewport. Lazy loading enhances the user experience on pages with many images.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-images-contentful/CHANGELOG.md#_snippet_32\n\nLANGUAGE: JavaScript\nCODE:\n```\n**gatsby-remark-images-contentful:** add native lazy loading support to contentful images ([#18883](https://github.com/gatsbyjs/gatsby/issues/18883)) ([0fc9534](https://github.com/gatsbyjs/gatsby/commit/0fc9534))\n```\n\n----------------------------------------\n\nTITLE: Upgrading Non-Breaking Major Versions in gatsby-plugin-feed\nDESCRIPTION: This chore involves upgrading certain non-breaking major versions of dependencies. This aims to leverage newer features and improvements from dependency updates while maintaining backward compatibility and avoiding breaking changes in the `gatsby-plugin-feed` plugin. This improves the performance and stability of the plugin.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-feed/CHANGELOG.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nUpgrade some non-breaking major versions [#37406](https://github.com/gatsbyjs/gatsby/issues/37406) ([2ea80c0](https://github.com/gatsbyjs/gatsby/commit/2ea80c02e464fe9306f6a1eccbb6c74983a76208))\n```\n\n----------------------------------------\n\nTITLE: Updating Minor Updates in Packages\nDESCRIPTION: This snippet represents a bug fix that updated minor versions of packages, excluding react, babel, and eslint. The referenced issue and commit provide further context.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-smartypants/CHANGELOG.md#_snippet_7\n\nLANGUAGE: None\nCODE:\n```\n- update minor updates in packages except react, babel and eslint ([#17254](https://github.com/gatsbyjs/gatsby/issues/17254)) ([252d867](https://github.com/gatsbyjs/gatsby/commit/252d867))\n```\n\n----------------------------------------\n\nTITLE: Clean Cache Script with gatsby clean\nDESCRIPTION: This snippet demonstrates the recommended `npm` script that uses the `gatsby clean` command to remove the Gatsby cache.  Requires gatsby version 2.1.1 or higher.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/debugging-cache-issues.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"clean\": \"gatsby clean\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Dependency Update: Bluebird Library\nDESCRIPTION: This snippet describes an update to the Bluebird dependency within the gatsby-transformer-javascript-frontmatter package. It updates the bluebird dependency to a version greater than or equal to 3.7.0.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-javascript-frontmatter/CHANGELOG.md#_snippet_15\n\n\n\n----------------------------------------\n\nTITLE: Markdown file with excerpt separator (Markdown)\nDESCRIPTION: An example Markdown file that includes an excerpt separator tag (`<!-- endexcerpt -->`). This tag defines the end of the excerpt when HTML is embedded in the Markdown file.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-remark/README.md#_snippet_14\n\nLANGUAGE: Markdown\nCODE:\n```\n---\ntitle: \"my little pony\"\ndate: \"2017-09-18T23:19:51.246Z\"\n---\n\n<p>Where oh where is that pony?</p>\n<!-- endexcerpt -->\n<p>Is he in the stable or down by the stream?</p>\n```\n\n----------------------------------------\n\nTITLE: Breaking Change: Styletron CSS Removal - Gatsby Styletron\nDESCRIPTION: This code snippet highlights a breaking change in gatsby-plugin-styletron version 4.0.0, where the styletron.css() method was removed. The recommended replacement is useStyletron, a native replacement.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-styletron/CHANGELOG.md#_snippet_13\n\nLANGUAGE: none\nCODE:\n```\nstyletron.css() removed, useStyletron as a native replacement\n```\n\n----------------------------------------\n\nTITLE: Query All Site Plugins GraphQL\nDESCRIPTION: This query fetches information about all installed site plugins. It retrieves the total count of plugins and details like name, version, and description from the `packageJson` of each plugin.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/graphql-reference/content/queries.md#_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  allSitePlugin {\n    totalCount\n    edges {\n      node {\n        name\n        version\n        packageJson {\n          description\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Performing side-effects before deleting a Menu node in Gatsby\nDESCRIPTION: This example shows how to use `beforeChangeNode` to perform side effects before deleting a Menu node. It finds all child MenuItem nodes of the Menu being deleted and then deletes those child items. This is done as a performance optimization to avoid fetching and deleting each child individually.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-wordpress/docs/tutorials/transforming-data.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const menuBeforeChangeNode = async api => {\n  if (api.remoteNode && api.actionType === `DELETE`) {\n    const {\n      pluginOptions,\n      helpers: { getNodesByType, actions },\n    } = api.helpers\n\n    // get all existing MenuItem nodes\n    const allMenuItems = getNodesByType(\n      `${pluginOptions.schema.typePrefix}MenuItem`\n    )\n\n    // find the nodes that are children of the current menu\n    const allMenuItemsNodesWithThisMenuIdAsAParent = allMenuItems.filter(\n      menuItemNode => menuItemNode.menu.node.id === api.remoteNode.id\n    )\n\n    // delete each child menu item\n    allMenuItemsNodesWithThisMenuIdAsAParent?.forEach(menuItemNode =>\n      actions.deleteNode(menuItemNode)\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Previews in gatsby-config.js for Gatsby Prismic Plugin\nDESCRIPTION: This code snippet shows how to enable previews for content in a Gatsby site using the `gatsby-source-prismic-graphql` plugin. It sets the `previews` option to `true` and defines the path for the preview endpoint. This allows content editors to preview changes before publishing them.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/prismic-source-graphql-tutorial.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  resolve: `gatsby-source-prismic-graphql`,\n  options: {\n    repositoryName: 'gatsby-blog-scratch',\n    //highlight-start\n    previews: true,\n    path: '/preview',\n    //highlight-end\n    pages: [{\n      type: 'Post',\n      match: '/blog/:uid',\n      path: '/blog-preview',\n      component: require.resolve('./src/templates/post.js')\n    }]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Preview Optimization Preset Configuration\nDESCRIPTION: This code snippet shows a configuration object that represents a Gatsby plugin preset. It is designed to optimize preview builds by disabling static asset transformations in HTML fields and limiting the number of nodes fetched.  This preset only applies when the Gatsby site is in Preview mode (either `inDevelopPreview` or `inPreviewRunner` is true).\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-wordpress/docs/features/preview.md#_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\n{\n  // this is an internal name\n  presetName: `PREVIEW_OPTIMIZATION`,\n\n  // these are the conditions the preset will be added under\n  useIf: () => inDevelopPreview || inPreviewRunner,\n\n  // these options will be merged into the global default options and your options will be merged into these options\n  options: {\n    html: {\n      useGatsbyImage: false,\n      createStaticFiles: false,\n    },\n    type: {\n      __all: {\n        //   all nodes are limited to 50 in cold builds\n        limit: 50,\n      },\n      Comment: {\n        //   all comments are excluded\n        limit: 0,\n      },\n      //   there's no limit to the following three types in cold builds\n      Menu: {\n        limit: null,\n      },\n      MenuItem: {\n        limit: null,\n      },\n      User: {\n        limit: null,\n      },\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Individual Post Pages with TSX in Gatsby\nDESCRIPTION: This TypeScript React component creates individual post pages in a Gatsby site. It fetches the post data using a GraphQL query with a slug parameter and renders the title and author of the post, along with a link back to the home page.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/creating-a-source-plugin/part-2/index.mdx#_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from \"react\"\nimport { Link, graphql, PageProps, HeadFC } from \"gatsby\"\n\nexport default function PostPage({\n  data: { post },\n}: PageProps<{ post: Queries.Post }>): React.ReactElement {\n  return (\n    <main>\n      <h1>{post.title}</h1>\n      <p>Author: {post.author}</p>\n      <br />\n      <Link to=\"/\">Back to home page</Link>\n    </main>\n  )\n}\n\nexport const Head: HeadFC<{ post: Queries.Post }> = ({ data: { post } }) => (\n  <React.Fragment>\n    <title>{post.title}</title>\n    <link\n      rel=\"icon\"\n      href=\"data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'><text y='0.9em' font-size='90'>üåà</text></svg>\"\n    />\n  </React.Fragment>\n)\n\nexport const query = graphql`\n  query PostPage($slug: String!) {\n    post(slug: { eq: $slug }) {\n      title\n      author\n    }\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: Migrating image queries from sizes/resolutions to fluid/fixed in Gatsby\nDESCRIPTION: This snippet demonstrates how to update image queries from using the deprecated `sizes` and `resolutions` fields to using `fluid` and `fixed`, which are preferred in Gatsby v3. It also shows the corresponding changes in the React component using the `gatsby-image` component.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v2-to-v3.md#_snippet_13\n\nLANGUAGE: diff\nCODE:\n```\nimport React from \"react\"\nimport { graphql } from \"gatsby\"\nimport Img from \"gatsby-image\"\n\nconst Example = ({ data }) => {\n  <div>\n-    <Img sizes={data.foo.childImageSharp.sizes} />\n-    <Img resolutions={data.bar.childImageSharp.resolutions} />\n+    <Img fluid={data.foo.childImageSharp.fluid} />\n+    <Img fixed={data.bar.childImageSharp.fixed} />\n  </div>\n}\n\nexport default Example\n\nexport const pageQuery = graphql`\n  query IndexQuery {\n    foo: file(relativePath: { regex: \"/foo.jpg/\" }) {\n      childImageSharp {\n-        sizes(maxWidth: 700) {\n-          ...GatsbyImageSharpSizes\n+        fluid(maxWidth: 700) {\n+          ...GatsbyImageSharpFluid\n        }\n      }\n    }\n    bar: file(relativePath: { regex: \"/bar.jpg/\" }) {\n      childImageSharp {\n-        resolutions(width: 500) {\n-          ...GatsbyImageSharpResolutions_withWebp\n+        fixed(width: 500) {\n+          ...GatsbyImageSharpFixed_withWebp\n        }\n      }\n    }\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: Configuring gatsby-plugin-catch-links in gatsby-config.js\nDESCRIPTION: This code snippet demonstrates how to disable the default `gatsby-plugin-catch-links` included with `gatsby-source-wordpress` and configure it manually in your `gatsby-config.js` file. The `catchLinks: false` option within the `gatsby-source-wordpress` configuration disables the auto-installed version, allowing for custom configurations.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-wordpress/docs/features/gatsby-link.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-source-wordpress`,\n      options: {\n        catchLinks: false,\n      },\n    },\n    {\n      resolve: `gatsby-plugin-catch-links`,\n      options: {\n        // add the options you need here.\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring gatsby-source-drupal in gatsby-config.js\nDESCRIPTION: This snippet demonstrates how to configure the `gatsby-source-drupal` plugin within the `gatsby-config.js` file. It shows the necessary `resolve` and `options` parameters, including `baseUrl` (the Drupal site URL) and `apiBase` (the API endpoint).  This configuration is required to fetch data from Drupal and make it available to Gatsby.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/sourcing-data/sourcing-from-drupal.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  siteMetadata: {\n    title: `Gatsby with Drupal`,\n  },\n  plugins: [\n    {\n      resolve: `gatsby-source-drupal`,\n      options: {\n        baseUrl: `https://live-contentacms.pantheonsite.io/`,\n        apiBase: `api`,\n      },\n    },\n    {\n      resolve: `gatsby-plugin-google-analytics`,\n      options: {\n        trackingId: `UA-93349937-2`,\n      },\n    },\n    `gatsby-plugin-offline`,\n    `gatsby-plugin-glamor`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`,\n    {\n      resolve: `gatsby-plugin-typography`,\n      options: {\n        pathToConfigModule: `src/utils/typography.js`,\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using WorkerPool in TypeScript\nDESCRIPTION: This TypeScript code demonstrates how to initialize and use the `WorkerPool` class to execute tasks in worker processes. It creates a `WorkerPool` instance, specifies the path to the worker module, the number of workers, environment variables, and whether output should be silenced. It then queues tasks using `workerPool.all` and `workerPool.single`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-worker/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { WorkerPool } from \"gatsby-worker\"\n\nconst workerPool = new WorkerPool<typeof import(\"./worker\")>(\n  require.resolve(`./worker`),\n  {\n    numWorkers: 5,\n    env: {\n      CUSTOM_ENV_VAR_TO_SET_IN_WORKER: `foo`,\n    },\n    silent: false,\n  }\n)\n\n// queue a task on all workers\nconst arrayOfPromises = workerPool.all.setupStep(`bar`)\n\n// queue a task on single worker\nconst singlePromise = workerPool.single.heavyTask(`baz`)\n```\n\n----------------------------------------\n\nTITLE: Fixing href attribute in gatsby-plugin-catch-links\nDESCRIPTION: Addresses an issue with the href attribute in gatsby-plugin-catch-links. This fix resolves a bug that might have been preventing links from being properly captured and processed by the plugin.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-catch-links/CHANGELOG.md#_snippet_8\n\n\n\n----------------------------------------\n\nTITLE: Feature: Adding isCI and getCIName to gatsby-core-utils\nDESCRIPTION: This code snippet adds `isCI` and `getCIName` functions to `gatsby-core-utils`. These functions provide information about the current Continuous Integration (CI) environment, allowing Gatsby to adapt its behavior accordingly.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-core-utils/CHANGELOG.md#_snippet_5\n\n\n\n----------------------------------------\n\nTITLE: Installing loadable-components (Shell)\nDESCRIPTION: This code snippet shows the command to install `@loadable/component` using npm. `loadable-components` is used to dynamically load components that depend on client-side only packages.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/using-client-side-only-packages.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @loadable/component\n```\n\n----------------------------------------\n\nTITLE: Formatting Changelog Files\nDESCRIPTION: This commit focuses on formatting the changelog files within the gatsby-source-graphql package. This chore ensures the changelog is readable, consistent, and follows a specific format, making it easier for users to understand the changes made in each version.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-graphql/CHANGELOG.md#_snippet_12\n\nLANGUAGE: Text\nCODE:\n```\nFormat changelog files ([088f23b](https://github.com/gatsbyjs/gatsby/commit/088f23b084b67f746a383e06e9216cef83270317))\n```\n\n----------------------------------------\n\nTITLE: Adding Undefined Check to Avoid Taxonomy Mapping Error in Gatsby Source WordPress\nDESCRIPTION: This commit fixes a bug in gatsby-source-wordpress where a taxonomy mapping error could occur if a certain value was undefined. The fix adds an undefined check to prevent the error and ensure the mapping process works correctly.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-wordpress/CHANGELOG.md#_snippet_18\n\n\n\n----------------------------------------\n\nTITLE: Gatsby Benchmark Postinstall Script\nDESCRIPTION: This snippet illustrates a typical `postinstall` script for a Gatsby benchmark. It ensures previous benchmark runs do not interfere with the current run by deleting generated files, cleaning the Gatsby cache, and regenerating any necessary code.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/benchmarks/README.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n\"postinstall\": \"del-cli ./generated && gatsby clean && npm run generate\"\n```\n\n----------------------------------------\n\nTITLE: Schema Customization: Extensions must be set explicitly (gatsby-node.js)\nDESCRIPTION: In Gatsby v3, extensions for complex type fields like Date, File, or other types must be assigned explicitly. This snippet demonstrates how to add `@dateformat`, `@fileByRelativePath`, and `@link` extensions to field definitions.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v2-to-v3.md#_snippet_27\n\nLANGUAGE: diff\nCODE:\n```\nexports.createSchemaCustomization = ({ actions }) => {\n  const { createTypes } = actions\n  createTypes(`\n    type MyType {\n-     date: Date\n+     date: Date @dateformat\n-     image: File\n+     image: File @fileByRelativePath\n-     authorByEmail: Author\n+     authorByEmail: Author @link\n    }\n  `)\n}\n```\n\n----------------------------------------\n\nTITLE: MainTemplate Page Template Component in Gatsby (JSX)\nDESCRIPTION: This code snippet defines a React component that serves as a Page Template in a Gatsby site using Agility CMS. It imports React, a ContentZone component, and a utility function to get modules. The MainTemplate component renders a ContentZone within a div, dynamically loading modules based on the CMS configuration.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/sourcing-from-agilitycms.md#_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\"\nimport ContentZone from \"../../agility/components/ContentZone\"\nimport { getModule } from \"../../components/agility-pageModules\"\n\nconst MainTemplate = props => {\n  return (\n    <div id=\"main-template\">\n      <ContentZone name=\"MainContentZone\" {...props} getModule={getModule} />\n    </div>\n  )\n}\nexport default MainTemplate\n```\n\n----------------------------------------\n\nTITLE: Installing Image Processing Plugins\nDESCRIPTION: This command installs `gatsby-transformer-sharp`, `gatsby-plugin-sharp`, and `gatsby-image`. These plugins are required for optimizing and displaying images in a Gatsby site using the Gatsby Image API.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/wordpress-image-tutorial.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install gatsby-transformer-sharp gatsby-plugin-sharp gatsby-image\n```\n\n----------------------------------------\n\nTITLE: Updating PostCSS Loader Dependency to ^7.0.2\nDESCRIPTION: This code snippet indicates the update of `postcss-loader` to version `^7.0.2` for `gatsby-plugin-postcss`. This update likely resolves issues or introduces new features available in version `7.0.2` of `postcss-loader`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-postcss/CHANGELOG.md#_snippet_6\n\nLANGUAGE: none\nCODE:\n```\nupdate dependency postcss-loader to ^7.0.2 for gatsby-plugin-postcss [#37372](https://github.com/gatsbyjs/gatsby/issues/37372) ([bbb8388](https://github.com/gatsbyjs/gatsby/commit/bbb83880625a9cee9e4cb5110e15f5426aa77111))\n```\n\n----------------------------------------\n\nTITLE: Importing GraphQL in index.js\nDESCRIPTION: This JavaScript code imports the `graphql` function from the `gatsby` library, which is necessary for defining GraphQL queries in page components. It's added to the top of the index.js file.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/querying-data/page-query.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as React from 'react'\n+ import { graphql } from 'gatsby'\n\nconst HomePage = () => {\n  return (\n    <div>\n      Hello!\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Update Index Page Query and Usage (TSX)\nDESCRIPTION: This code snippet updates the index page component to fetch and display the author's name from the linked `author` node. The GraphQL query is modified to include the `author.name` field, and the component's JSX is updated to render the author's name.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/creating-a-source-plugin/part-3/index.mdx#_snippet_11\n\nLANGUAGE: TSX\nCODE:\n```\n// Imports\n\nexport default function IndexPage({\n  data: {\n    allPost: { nodes: posts },\n  },\n}: PageProps<Queries.IndexPageQuery>): React.ReactElement {\n  return (\n    <main>\n      <h1>All posts</h1>\n      <section className=\"posts-grid\">\n        {posts.map((post) => (\n          <Link key={post.id} to={post.slug} className=\"posts-card\">\n            <h2>{post.title}</h2>\n            {/* highlight-next-line */}\n            <span>Author: {post.author.name}</span>\n          </Link>\n        ))}\n      </section>\n    </main>\n  )\n}\n\n// Head API\n\nexport const query = graphql`\n  query IndexPage {\n    allPost {\n      nodes {\n        id\n        slug\n        title\n// highlight-start\n        author {\n          name\n        }\n// highlight-end\n      }\n    }\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: Updating peerDeps in gatsby-remark-smartypants\nDESCRIPTION: This snippet shows the update of peer dependencies for the gatsby-remark-smartypants package. Updating peer dependencies ensures compatibility with other packages in the Gatsby ecosystem.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-smartypants/CHANGELOG.md#_snippet_2\n\nLANGUAGE: Text\nCODE:\n```\nUpdate peerDeps [#36965](https://github.com/gatsbyjs/gatsby/issues/36965) ([b624442](https://github.com/gatsbyjs/gatsby/commit/b6244424fe8b724cbc23b80b2b4f5424cc2055a4))\n```\n\n----------------------------------------\n\nTITLE: Creating German 404 Page (JSX)\nDESCRIPTION: This component creates a basic 404 page in German. It imports React and a Layout component. The NotFound function renders a 'Seite nicht gefunden' heading and a short description wrapped in the Layout component.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/creating-prefixed-404-pages-for-different-languages.md#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\nimport React from \"react\"\nimport Layout from \"../../components/layout\"\n\nexport default function NotFound() {\n  return (\n    <Layout>\n      <h1>Seite nicht gefunden</h1>\n      <p>Ups, wir konnten diese Seite nicht finden!</p>\n    </Layout>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Patches for v5 in gatsby-transformer-pdf\nDESCRIPTION: This code snippet indicates the application of patches for version 5 of the `gatsby-transformer-pdf` package.  Applying patches usually addresses specific issues or bugs identified in a particular version, ensuring stability and improved functionality.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-pdf/CHANGELOG.md#_snippet_5\n\nLANGUAGE: Text\nCODE:\n```\napply patches for v5 [#36796](https://github.com/gatsbyjs/gatsby/issues/36796) ([25f79b6](https://github.com/gatsbyjs/gatsby/commit/25f79b6c3719fdf09584ade620a05c66ba2a697c))\n```\n\n----------------------------------------\n\nTITLE: Installing ESLint and GraphQL ESLint Dependencies\nDESCRIPTION: This command installs eslint, @graphql-eslint/eslint-plugin, @typescript-eslint/eslint-plugin, and @typescript-eslint/parser as development dependencies. These are required for linting GraphQL queries and TypeScript files.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/local-development/graphql-typegen.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev eslint @graphql-eslint/eslint-plugin @typescript-eslint/eslint-plugin @typescript-eslint/parser\n```\n\n----------------------------------------\n\nTITLE: Coercing ID Field in gatsby-transformer-json\nDESCRIPTION: This snippet addresses a bug in gatsby-transformer-json where the id field was not consistently a String.  The fix ensures that the id field is coerced to a String, preventing potential issues when accessing or processing the data. It resolves issue #17072.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-json/CHANGELOG.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Add `trailingSlash` configuration option\nDESCRIPTION: Introduces the `trailingSlash` configuration option. This allows users to configure whether URLs should have a trailing slash. This feature adds more control over URL structure.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-page-creator/CHANGELOG.md#_snippet_21\n\nLANGUAGE: none\nCODE:\n```\n`trailingSlash` config option [#34268](https://github.com/gatsbyjs/gatsby/issues/34268) ([d94c8e4](https://github.com/gatsbyjs/gatsby/commit/d94c8e48a3640b59423c37da1439531ab0c023ec))\n```\n\n----------------------------------------\n\nTITLE: Using the Data Prop to Render a List of Filenames\nDESCRIPTION: This code snippet demonstrates how to access the data returned by the page query using the `data` prop and render a list of filenames. It utilizes the JavaScript `.map()` method to iterate over the `nodes` array and display each filename within an `<li>` element.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-4/index.mdx#_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react'\nimport { graphql } from 'gatsby'\nimport Layout from '../components/layout'\nimport Seo from '../components/seo'\n\nconst BlogPage = ({ data }) => { // highlight-line\n  return (\n    <Layout pageTitle=\"My Blog Posts\">\n      {/* highlight-start */}\n      <ul>\n      {\n        data.allFile.nodes.map(node => (\n          <li key={node.name}>\n            {node.name}\n          </li>\n        ))\n      }\n      </ul>\n      {/* highlight-end */}\n    </Layout>\n  )\n}\n\nexport const query = graphql`\n  query {\n    allFile {\n      nodes {\n        name\n      }\n    }\n  }\n`\n\nexport const Head = () => <Seo title=\"My Blog Posts\" />\n\nexport default BlogPage\n```\n\n----------------------------------------\n\nTITLE: Chores: Apply patches for v5 in babel-preset-gatsby\nDESCRIPTION: This snippet describes the chore of applying patches for v5 in the babel-preset-gatsby package. This chore addresses an issue reported in issue #36796 on the gatsbyjs/gatsby repository.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/babel-preset-gatsby/CHANGELOG.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\napply patches for v5 [#36796](https://github.com/gatsbyjs/gatsby/issues/36796) ([25f79b6](https://github.com/gatsbyjs/gatsby/commit/25f79b6c3719fdf09584ade620a05c66ba2a697c))\n```\n\n----------------------------------------\n\nTITLE: Updating axios dependency in gatsby-remark-images-contentful (JavaScript)\nDESCRIPTION: This commit updates the axios dependency to version ^0.19.2. This update ensures that the package uses the latest bug fixes and performance improvements from the axios library. This dependency update may affect network request handling.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-images-contentful/CHANGELOG.md#_snippet_30\n\nLANGUAGE: JavaScript\nCODE:\n```\nupdate dependency axios to ^0.19.2 ([#22317](https://github.com/gatsbyjs/gatsby/issues/22317)) ([91e780f](https://github.com/gatsbyjs/gatsby/commit/91e780f))\n```\n\n----------------------------------------\n\nTITLE: Removing README.md Display Issue in Gatsby Plugin Library\nDESCRIPTION: This resolves an issue where the README.md file was not displaying correctly on the Gatsby plugin library. Corrects display problems and renders the README.md as intended.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-postcss/CHANGELOG.md#_snippet_16\n\n\n\n----------------------------------------\n\nTITLE: Updating Peer Dependencies in gatsby-plugin-emotion\nDESCRIPTION: This snippet illustrates a chore involving the update of peer dependencies within the `gatsby-plugin-emotion` package. This ensures compatibility with other Gatsby packages.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-emotion/CHANGELOG.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nUpdate peerDeps [#36965](https://github.com/gatsbyjs/gatsby/issues/36965) ([b624442](https://github.com/gatsbyjs/gatsby/commit/b6244424fe8b724cbc23b80b2b4f5424cc2055a4))\n```\n\n----------------------------------------\n\nTITLE: Cloning Contentstack Gatsby Starter\nDESCRIPTION: This command downloads the required files and initializes the Gatsby site with the Contentstack starter.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/sourcing-from-contentstack.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngatsby new gatsby-starter-contentstack\n```\n\n----------------------------------------\n\nTITLE: Limiting Concurrent File Requests\nDESCRIPTION: This commit limits the number of concurrent file requests while downloading remote images. This change prevents the plugin from overwhelming the Drupal server with too many requests, improving performance and reliability.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-drupal/CHANGELOG.md#_snippet_24\n\n\n\n----------------------------------------\n\nTITLE: Installing missing emotion library\nDESCRIPTION: This command installs the `@emotion/react` library using npm. This is often necessary when using `gatsby-plugin-emotion` and encountering errors related to missing dependencies. It ensures that the required styling library is available for the plugin to function correctly.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/local-development/troubleshooting-common-errors.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @emotion/react\n```\n\n----------------------------------------\n\nTITLE: Create Slugs in gatsby-node.js using createNodeField\nDESCRIPTION: This code snippet demonstrates how to use the `createNodeField` action within the `onCreateNode` API in `gatsby-node.js` to add a slug field to `MarkdownRemark` nodes. It leverages the `createFilePath` function from `gatsby-source-filesystem` to generate the slug based on the file path.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/creating-slugs-for-pages.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { createFilePath } = require(`gatsby-source-filesystem`)\n\n// highlight-start\nexports.onCreateNode = ({ node, getNode, actions }) => {\n  const { createNodeField } = actions\n  // highlight-end\n  if (node.internal.type === `MarkdownRemark`) {\n    // highlight-start\n    const slug = createFilePath({ node, getNode, basePath: `pages` })\n    createNodeField({\n      node,\n      name: `slug`,\n      value: slug,\n    })\n    // highlight-end\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Patches for v5 in Gatsby React Helmet\nDESCRIPTION: This code snippet indicates the application of patches for version 5 of the `gatsby-plugin-react-helmet` package. Issue #36796 provides more context.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-react-helmet/CHANGELOG.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\napply patches for v5 [#36796](https://github.com/gatsbyjs/gatsby/issues/36796) ([25f79b6](https://github.com/gatsbyjs/gatsby/commit/25f79b6c3719fdf09584ade620a05c66ba2a697c))\n```\n\n----------------------------------------\n\nTITLE: Formatting Changelog Files\nDESCRIPTION: This snippet demonstrates a chore focused on formatting the changelog files themselves. This improves readability and consistency in the project's documentation.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-lever/CHANGELOG.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nFormat changelog files ([088f23b](https://github.com/gatsbyjs/gatsby/commit/088f23b084b67f746a383e06e9216cef83270317))\n```\n\n----------------------------------------\n\nTITLE: Querying Site Metadata with GraphQL\nDESCRIPTION: This GraphQL query retrieves the `siteMetadata` from the `site` node. It specifically extracts the `title` field, which was defined in the `gatsby-config.js` file. This allows access to configuration data within pages or static queries.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/internal-data-bridge.md#_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  site {\n    siteMetadata {\n      title # returns \"My beautiful Gatsby site title\" as entered above in gatsby-config.js.\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Assets with static.json\nDESCRIPTION: This snippet shows an example `static.json` file, used by the `heroku-buildpack-static` buildpack. It configures the root directory for static assets, sets caching headers for various file types (CSS, JS, static assets), enforces HTTPS, and defines the error page. The cache control headers are crucial for Gatsby's suggested caching strategy.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/previews-deploys-hosting/deploying-to-heroku.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"root\": \"public/\",\n  \"headers\": {\n    \"/**\": {\n      \"Cache-Control\": \"public, max-age=0, must-revalidate\"\n    },\n    \"/**.css\": {\n      \"Cache-Control\": \"public, max-age=31536000, immutable\"\n    },\n    \"/**.js\": {\n      \"Cache-Control\": \"public, max-age=31536000, immutable\"\n    },\n    \"/static/**\": {\n      \"Cache-Control\": \"public, max-age=31536000, immutable\"\n    },\n    \"sw.js\": {\n      \"Cache-Control\": \"public, max-age=0, must-revalidate\"\n    },\n    \"page-data/**\": {\n      \"Cache-Control\": \"public, max-age=0, must-revalidate\"\n    },\n  },\n  \"https_only\": true,\n  \"error_page\": \"404.html\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Gatsby Image Plugin Defaults in gatsby-config.js\nDESCRIPTION: This code snippet shows how to configure the default options for the `gatsby-plugin-sharp` plugin within your `gatsby-config.js` file.  It allows setting default image formats, placeholder styles, quality, breakpoints, and other format-specific options.  This avoids repetitive option setting across multiple `GatsbyImage` and `StaticImage` components. The plugin also requires `gatsby-transformer-sharp` and `gatsby-plugin-image`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/built-in-components/gatsby-plugin-image.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        },\n      },\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Defining IPluginOptionsKeys in types.ts (TypeScript)\nDESCRIPTION: This code snippet defines the `IPluginOptionsKeys` TypeScript type in `plugin/src/types.ts`. It specifies the `endpoint` option as a string, ensuring type safety within the plugin. This definition allows external and internal types to be correct.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/creating-a-source-plugin/part-4/index.mdx#_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\ninterface IPluginOptionsKeys {\n  // highlight-next-line\n  endpoint: string\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Fast Refresh in gatsby-config.js (JavaScript)\nDESCRIPTION: This snippet illustrates how to enable React Fast Refresh in Gatsby by adding the `FAST_REFRESH` flag to the `gatsby-config.js` file. React Fast Refresh provides instantaneous feedback during development, improving the overall developer experience.  Recommended for React versions >= 17.0.\n\nDependencies: React >= 17.0\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/v2.28/index.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// In your gatsby-config.js\nmodule.exports = {\n  // your existing config\n  flags: {\n    FAST_REFRESH: true,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Allow Override Fetch\nDESCRIPTION: This code snippet adds a feature to the gatsby-source-graphql plugin that allows users to override the default fetch function. This provides greater flexibility in how data is fetched from GraphQL APIs.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-graphql/CHANGELOG.md#_snippet_33\n\nLANGUAGE: diff\nCODE:\n```\n**gatsby-source-graphql:** Allow override fetch ([#19630](https://github.com/gatsbyjs/gatsby/issues/19630)) ([2867fb2](https://github.com/gatsbyjs/gatsby/commit/2867fb2))\n```\n\n----------------------------------------\n\nTITLE: Single JSON object example\nDESCRIPTION: Example JSON file containing a single object. The object will be converted into a single GraphQL node. The node type is based on the parent directory name.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-json/README.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{ \"value\": \"a\" }\n```\n\n----------------------------------------\n\nTITLE: Installing gatsby-source-faker\nDESCRIPTION: Installs the gatsby-source-faker plugin using npm. This is a necessary prerequisite for using the plugin in a Gatsby project.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-faker/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install gatsby-source-faker\n```\n\n----------------------------------------\n\nTITLE: Fixing Node URI Value Prefix Check\nDESCRIPTION: This bug fix addresses an issue where the node.uri.value prefix was not properly checked, potentially leading to incorrect URL resolution or data fetching errors.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-drupal/CHANGELOG.md#_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Bumping Babel Minor Version\nDESCRIPTION: This chore focuses on bumping the minor version of Babel within the gatsby-transformer-javascript-static-exports package. Bumping the minor version includes new features and improvements while maintaining backward compatibility.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-javascript-static-exports/CHANGELOG.md#_snippet_5\n\nLANGUAGE: Text\nCODE:\n```\nbump babel minor [#31857](https://github.com/gatsbyjs/gatsby/issues/31857) ([7d42e8d](https://github.com/gatsbyjs/gatsby/commit/7d42e8d866e46e9c39838d812d080d06433f7060))\n```\n\n----------------------------------------\n\nTITLE: Start Gatsby Development Server\nDESCRIPTION: This command navigates into the project directory and starts the Gatsby development server. The server watches for file changes and automatically reloads the browser.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/starters/README-template.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncd my-<%= name %>-starter/\ngatsby develop\n```\n\n----------------------------------------\n\nTITLE: Building all Gatsby examples using a shell script\nDESCRIPTION: This shell script automates the process of navigating into each example folder, installing dependencies using `npm i`, and then building the Gatsby site using `gatsby build`. It redirects output to a file for later review.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncd examples\n./build-all-examples.sh > build-results.txt\n```\n\n----------------------------------------\n\nTITLE: Importing components into MDX\nDESCRIPTION: Illustrates importing a React component (`Message` from `theme-ui`) into an MDX file and using it within the Markdown content. The component is imported using a standard JavaScript `import` statement and then rendered using JSX syntax.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/routing/mdx.md#_snippet_5\n\nLANGUAGE: MDX\nCODE:\n```\n---\ntitle: Importing Components Example\n---\n\nimport { Message } from \"theme-ui\" // highlight-line\n\nYou can import your own components.\n\n<Message>MDX gives you JSX in Markdown!</Message> // highlight-line\n```\n\n----------------------------------------\n\nTITLE: Handle Special Characters in Windows Paths (JavaScript)\nDESCRIPTION: This bug fix addresses an issue where special characters in Windows paths were not properly handled by Gatsby. The fix ensures that Gatsby can correctly resolve paths containing special characters on Windows systems.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-offline/CHANGELOG.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nHandle special characters in windows paths\n```\n\n----------------------------------------\n\nTITLE: Run Jaeger Docker Container\nDESCRIPTION: This command starts a Jaeger all-in-one Docker container. It maps various ports for the Jaeger UI, collector, and agent, and configures the collector to accept Zipkin traces. It exposes ports required for the Jaeger UI (16686), HTTP collector (14268), and Zipkin compatibility (9411).\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/performance-tracing.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\ndocker run -d --name jaeger \\\n       -e COLLECTOR_ZIPKIN_HTTP_PORT=9411 \\\n       -p 5775:5775/udp \\\n       -p 6831:6831/udp \\\n       -p 6832:6832/udp \\\n       -p 5778:5778 \\\n       -p 16686:16686 \\\n       -p 14268:14268 \\\n       -p 9411:9411 \\\n       jaegertracing/all-in-one:1.8\n```\n\n----------------------------------------\n\nTITLE: Warning on Unsupported Extensions (JavaScript)\nDESCRIPTION: This snippet implements a warning mechanism when an unsupported image extension is used. This provides feedback to the user, informing them that the image format might not be processed correctly by gatsby-transformer-sharp.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-sharp/CHANGELOG.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n4519c05\n```\n\n----------------------------------------\n\nTITLE: Fixing Typo in Gatsby LESS Plugin\nDESCRIPTION: This commit fixes a typo in the gatsby-plugin-less. This aims to improve the overall quality and maintainability of the plugin's codebase.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-less/CHANGELOG.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n**gatsby-plugin-less:** fix typo ([#17189](https://github.com/gatsbyjs/gatsby/issues/17189)) ([17c12b2](https://github.com/gatsbyjs/gatsby/commit/17c12b2))\n```\n\n----------------------------------------\n\nTITLE: Run example Gatsby Theme\nDESCRIPTION: This command executes the `develop` script within the `example` workspace, using `yarn`. This starts the Gatsby development server for the example site, allowing you to preview and test the theme.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/starters/gatsby-starter-theme-workspace/README.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nyarn workspace example develop\n```\n\n----------------------------------------\n\nTITLE: Markdown Headings\nDESCRIPTION: Demonstrates the syntax for creating headings in Markdown, ranging from level 1 to level 6.  Each heading level uses a corresponding number of '#' characters.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/markdown-syntax.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# heading 1\n\n## heading 2\n\n### heading 3\n\n#### heading 4\n\n##### heading 5\n\n###### heading 6\n```\n\n----------------------------------------\n\nTITLE: Querying PDF Content with GraphQL\nDESCRIPTION: This GraphQL query retrieves the textual content of PDF files that have been processed by `gatsby-transformer-pdf`. It queries the `allPdf` node, which is created by the plugin, and retrieves the `content` field for each PDF file. The expected output is a JSON object containing the extracted text from the PDF files.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-pdf/README.md#_snippet_1\n\nLANGUAGE: GraphQL\nCODE:\n```\n{\n  allPdf {\n    edges {\n      node {\n        content\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example: Installing Gatsby Starter Blog using GitHub (Shell)\nDESCRIPTION: This command demonstrates installing the Gatsby Starter Blog using the GitHub username and repository name. It creates a new directory named `blog` and populates it with the starter's contents.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/starters.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ngatsby new blog gatsbyjs/gatsby-starter-blog\n```\n\n----------------------------------------\n\nTITLE: Install gatsby-plugin-utils\nDESCRIPTION: Installs the gatsby-plugin-utils package using npm. This package provides utility functions for developing Gatsby plugins.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-utils/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install gatsby-plugin-utils\n```\n\n----------------------------------------\n\nTITLE: Configuring gatsby-plugin-page-creator\nDESCRIPTION: This snippet shows how to configure multiple instances of the `gatsby-plugin-page-creator` plugin in `gatsby-config.js`. Each instance defines a `path` option, specifying the directory to look for React components to create pages. It also shows how to overwrite the default `src/pages` behavior and ignore specific files.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-page-creator/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// gatsby-config.js\n\nmodule.exports = {\n  plugins: [\n    // You can have multiple instances of this plugin\n    // to create pages from React components in different directories.\n    //\n    // The following sets up the pattern of having multiple\n    // \"pages\" directories in your project\n    {\n      resolve: `gatsby-plugin-page-creator`,\n      options: {\n        path: `${__dirname}/src/account/pages`,\n      },\n    },\n    {\n      resolve: `gatsby-plugin-page-creator`,\n      options: {\n        path: `${__dirname}/src/settings/pages`,\n      },\n    },\n    // You can also overwrite the default behavior for src/pages\n    // This changes the page-creator instance used by Gatsby\n    {\n      resolve: `gatsby-plugin-page-creator`,\n      options: {\n        path: `${__dirname}/src/pages`,\n        ignore: [`foo-bar.js`],\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Art Direction with withArtDirection in Gatsby\nDESCRIPTION: This code demonstrates how to use `withArtDirection` to display different images based on media queries using `gatsby-plugin-image`. It takes a default image and an array of art-directed images, where each art-directed image has a `media` (media query) and `image` (the `gatsbyImageData` object) property. When a media query matches, the corresponding image is displayed.  It requires `gatsby-plugin-image` and the `GatsbyImage` component.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/built-in-components/gatsby-plugin-image.md#_snippet_11\n\nLANGUAGE: JSX\nCODE:\n```\nimport { GatsbyImage, getImage, withArtDirection } from \"gatsby-plugin-image\"\n\nexport function MyImage({ data }) {\n  const images = withArtDirection(getImage(data.largeImage), [\n    {\n      media: \"(max-width: 1024px)\",\n      image: getImage(data.smallImage),\n    },\n  ])\n\n  return <GatsbyImage image={images} />\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook preview.js for Gatsby\nDESCRIPTION: This code configures the `.storybook/preview.js` file to handle Gatsby's `Link` component and the `___navigate` function by creating mock implementations, preventing errors during Storybook rendering. This allows Gatsby components that rely on these functions to be rendered correctly within Storybook.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/testing/visual-testing-with-storybook.md#_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nimport { action } from \"@storybook/addon-actions\"\n\n// Gatsby's Link overrides:\n// Gatsby Link calls the `enqueue` & `hovering` methods on the global variable ___loader.\n// This global object isn't set in storybook context, requiring you to override it to empty functions (no-op),\n// so Gatsby Link doesn't throw errors.\nglobal.___loader = {\n  enqueue: () => {},\n  hovering: () => {},\n}\n// This global variable prevents the \"__BASE_PATH__ is not defined\" error inside Storybook.\nglobal.__BASE_PATH__ = \"/\"\n\n// Navigating through a gatsby app using gatsby-link or any other gatsby component will use the `___navigate` method.\n// In Storybook, it makes more sense to log an action than doing an actual navigate. Check out the actions addon docs for more info: https://storybook.js.org/docs/react/essentials/actions\n\nwindow.___navigate = pathname => {\n  action(\"NavigateTo:\")(pathname)\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying PDF Downloads using GraphQL and React (JSX)\nDESCRIPTION: This React component utilizes `useStaticQuery` and GraphQL to fetch a list of PDF files and display them as downloadable links. It queries for the `publicURL` and `name` of each PDF file and creates a list of links using the fetched data. Dependencies: React, gatsby, gatsby-source-filesystem.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/images-and-media/importing-assets-into-files.md#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\n\nconst DownloadsPage = () => {\n  const data = useStaticQuery(graphql`\n    {\n      allFile(filter: { extension: { eq: \"pdf\" } }) {\n        edges {\n          node {\n            publicURL\n            name\n          }\n        }\n      }\n    }\n  `)\n  return (\n    <Layout>\n      <h1>All PDF Downloads</h1>\n      <ul>\n        {data.allFile.edges.map((file, index) => {\n          return (\n            <li key={`pdf-${index}`}>\n              <a href={file.node.publicURL} download>\n                {file.node.name}\n              </a>\n            </li>\n          )\n        })}\n      </ul>\n    </Layout>\n  )\n}\nexport default DownloadsPage\n```\n\n----------------------------------------\n\nTITLE: Updating Coffeescript Dependency\nDESCRIPTION: This code snippet shows a bug fix related to updating the coffeescript dependency to version ^2.7.0 for gatsby-plugin-coffeescript. The dependency update is intended to resolve known bugs, improve performance, or maintain compatibility with other libraries or components.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-coffeescript/CHANGELOG.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nupdate dependency coffeescript to ^2.7.0 for gatsby-plugin-coffeescript [#35550](https://github.com/gatsbyjs/gatsby/issues/35550) ([0abdcd6](https://github.com/gatsbyjs/gatsby/commit/0abdcd6cab17b8e79aa4036b7a19c8aed8af032c))\n```\n\n----------------------------------------\n\nTITLE: Allowing Experimental React Versions\nDESCRIPTION: Allows the use of experimental versions of React and ReactDOM. This likely enables developers to test the package with cutting-edge React features, though it might introduce instability.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-react-router-scroll/CHANGELOG.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nallow react/react-dom@experimental [#36533](https://github.com/gatsbyjs/gatsby/issues/36533) ([7ef4a3f](https://github.com/gatsbyjs/gatsby/commit/7ef4a3fe080d45e9edaff9f1d4deebd12a00ddbd))\n```\n\n----------------------------------------\n\nTITLE: Chore: Update babel monorepo\nDESCRIPTION: This code snippet represents a chore that updates the Babel monorepo. It is a maintenance task that ensures the gatsby-remark-prismjs package uses the latest Babel dependencies, resolving issue #37386.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-prismjs/CHANGELOG.md#_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\nb941876(https://github.com/gatsbyjs/gatsby/commit/b94187633d94d0f0071b38ffe93380dd802ec70f)\n```\n\n----------------------------------------\n\nTITLE: Clean Cache Script with rm -rf\nDESCRIPTION: This snippet shows a basic `npm` script that removes the `.cache` directory. It's a common but less efficient way to clean the Gatsby cache.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/debugging-cache-issues.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"clean\": \"rm -rf .cache\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Upgrading Jest in Gatsby plugin-nprogress\nDESCRIPTION: This commit upgrades Jest in the gatsby-plugin-nprogress package. Jest is a JavaScript testing framework, and upgrading it can improve testing capabilities and performance.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-nprogress/CHANGELOG.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\nupgrade jest [#33277](https://github.com/gatsbyjs/gatsby/issues/33277) ([34cb202](https://github.com/gatsbyjs/gatsby/commit/34cb202d9c8c202f082edb03c4cc1815eb81abe1))\n```\n\n----------------------------------------\n\nTITLE: Fix: Package Updates in gatsby-transformer-csv\nDESCRIPTION: This commit updates minor updates in packages except react, babel and eslint within the gatsby-transformer-csv package. It ensures that the package remains up-to-date with the latest dependencies while excluding specific packages from the update process.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-csv/CHANGELOG.md#_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\nupdate minor updates in packages except react, babel and eslint ([#17254](https://github.com/gatsbyjs/gatsby/issues/17254)) ([252d867](https://github.com/gatsbyjs/gatsby/commit/252d867))\n```\n\n----------------------------------------\n\nTITLE: Create AuthorBio Component with GraphQL Fragment (JavaScript)\nDESCRIPTION: This JavaScript code defines a React component called `AuthorBio` that renders author information.  It uses a GraphQL fragment called `AuthorBio` to declare the data it needs from the `WpUser` type, including `id`, `name`, and `description`. It imports React and graphql from gatsby.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-wordpress/docs/tutorials/querying-data.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from \"react\"\nimport { graphql } from \"gatsby\"\n\nexport const AuthorFragment = graphql`\n  fragment AuthorBio on WpUser {\n    id\n    name\n    description\n  }\n`\n\nconst AuthorBio = ({ author: { id, name, description } }) => {\n  return (\n    <div className={`author-${id}`}>\n      <h2>{name}</h2>\n      <div dangerouslySetInnerHTML={{ __html: description }} />\n    </div>\n  )\n}\n\nexport default AuthorBio\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel with .babelrc\nDESCRIPTION: Adds a .babelrc file to the root of the project and configures it to use the babel-preset-gatsby preset.  This enables Gatsby to use the preset when transpiling JavaScript code.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/babel-preset-gatsby/README.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"presets\": [\"babel-preset-gatsby\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing gatsby-source-graphcms plugin\nDESCRIPTION: Installs the `gatsby-source-graphcms` plugin, which is required to fetch data from a GraphCMS project. This command adds the plugin to the project's dependencies, allowing Gatsby to source data from GraphCMS.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/sourcing-from-graphcms.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install gatsby-source-graphcms\n```\n\n----------------------------------------\n\nTITLE: Regenerating Changelogs\nDESCRIPTION: This commit regenerates the changelogs within the gatsby-source-graphql package. This ensures that the changelogs accurately reflect all changes made to the package, especially after significant updates or refactoring.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-graphql/CHANGELOG.md#_snippet_23\n\nLANGUAGE: Text\nCODE:\n```\nre-generate changelogs [#32886](https://github.com/gatsbyjs/gatsby/issues/32886) ([417df15](https://github.com/gatsbyjs/gatsby/commit/417df15230be368a9db91f2ad1a9bc0442733177))\n```\n\n----------------------------------------\n\nTITLE: Example YAML single object file\nDESCRIPTION: Example of a single YAML object file. The filename represents the data in the object.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-yaml/README.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ncharacter: a\n```\n\n----------------------------------------\n\nTITLE: Updating Examples\nDESCRIPTION: This commit updates examples related to the plugin. It aims to ensure the examples are current and accurately reflect the functionality of the gatsby-plugin-react-helmet.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-react-helmet/CHANGELOG.md#_snippet_8\n\nLANGUAGE: Other\nCODE:\n```\na8cab557fa690707780ee4a59fed5368b634c885\n```\n\n----------------------------------------\n\nTITLE: Deploy script for subdomain deployment in package.json\nDESCRIPTION: This JSON snippet configures the deploy script in package.json to build the Gatsby site and then publish the `public` directory to the `main` branch using the gh-pages package. This is used for deploying to a GitHub Pages subdomain.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/previews-deploys-hosting/how-gatsby-works-with-github-pages.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"scripts\": {\n    \"deploy\": \"gatsby build && gh-pages -d public -b main\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Ignore Pattern in Gatsby Config\nDESCRIPTION: This snippet shows a bug fix for the gatsby-plugin-layout related to wrapping an ignore pattern in quotes. It resolves an issue where the ignore pattern was not being correctly applied, potentially leading to incorrect file processing during the build.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-layout/CHANGELOG.md#_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n- wrap ignore pattern in quotes ([#23176](https://github.com/gatsbyjs/gatsby/issues/23176)) ([7563db6](https://github.com/gatsbyjs/gatsby/commit/7563db6))\n```\n\n----------------------------------------\n\nTITLE: Chore: Format Changelog Files (gatsby-plugin-less)\nDESCRIPTION: This code snippet describes a chore update that formats changelog files. The purpose is to maintain consistency and readability of the changelog, contributing to better documentation practices. The commit hash associated with this change is 088f23b.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-less/CHANGELOG.md#_snippet_4\n\nLANGUAGE: Text\nCODE:\n```\nFormat changelog files ([088f23b](https://github.com/gatsbyjs/gatsby/commit/088f23b084b67f746a383e06e9216cef83270317))\n```\n\n----------------------------------------\n\nTITLE: Update chokidar dependency\nDESCRIPTION: Updates the chokidar dependency to version ^3.5.3. Chokidar is a library used for watching file system events. This update likely addresses bug fixes or performance improvements within the file watching functionality.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-page-creator/CHANGELOG.md#_snippet_16\n\nLANGUAGE: none\nCODE:\n```\nupdate dependency chokidar to ^3.5.3 [#34643](https://github.com/gatsbyjs/gatsby/issues/34643) ([9b308cb](https://github.com/gatsbyjs/gatsby/commit/9b308cb744047beeea3a5b2f500fbf5a8b8ef2d5))\n```\n\n----------------------------------------\n\nTITLE: Starting the Node.js API\nDESCRIPTION: This command starts the Node.js API server, which runs at `http://localhost:4000`. It leverages Yarn workspaces to execute the `start` script defined in the `api` project's `package.json`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/creating-source-plugins/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn workspace api start\n```\n\n----------------------------------------\n\nTITLE: Agility CMS Environment Variables\nDESCRIPTION: This shows the required environment variables to connect the Gatsby site to Agility CMS. `AGILITY_GUID` is the instance ID, `AGILITY_API_KEY` is the API key (preferably the Preview API Key), and `AGILITY_API_ISPREVIEW` should be set to true if using the Preview API Key.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/sourcing-from-agilitycms.md#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n# Your Instance Id\nAGILITY_GUID=\n\n# Your Preview API Key (recommended) - you can get this from the Getting Started Page in Agility CMS. It starts with defaultpreview.\nAGILITY_API_KEY=\n\n# If using your Preview API Key, set this to true\nAGILITY_API_ISPREVIEW=true\n```\n\n----------------------------------------\n\nTITLE: Updating Babel Monorepo for gatsby-plugin-emotion\nDESCRIPTION: This snippet illustrates a chore involving the update of the Babel monorepo within the `gatsby-plugin-emotion` package. This aims to ensure compatibility and leverage the latest features and bug fixes provided by Babel.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-emotion/CHANGELOG.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nupdate babel monorepo [#37386](https://github.com/gatsbyjs/gatsby/issues/37386) ([b941876](https://github.com/gatsbyjs/gatsby/commit/b94187633d94d0f0071b38ffe93380dd802ec70f))\n```\n\n----------------------------------------\n\nTITLE: Example GraphQL Query for Site Metadata\nDESCRIPTION: This GraphQL query retrieves the title from the `siteMetadata` field within the `site` node. It demonstrates how to traverse nested objects in the GraphQL schema to access specific data. The query can be executed in GraphiQL to view the results.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/querying-data/running-queries-with-graphiql.md#_snippet_1\n\nLANGUAGE: GraphQL\nCODE:\n```\nquery {\n  site {\n    siteMetadata {\n      title\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Strapi Data using Yarn\nDESCRIPTION: This command updates the Strapi data. It is executed via yarn, which is a package manager for JavaScript. This command likely runs a script defined in the package.json file to refresh the data used by the Strapi application.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/benchmarks/source-strapi/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nyarn date-update\n```\n\n----------------------------------------\n\nTITLE: Change client paths in gatsby-node.js (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to change client paths in gatsby-node.js to use a splat (*) instead of a colon (:path) when creating a client route for @reach/router.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v1-to-v2.md#_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nexports.onCreatePage = async ({ page, actions }) => {\n  const { createPage } = actions\n\n  // page.matchPath is a special key that's used for matching pages\n  // only on the client.\n  if (page.path.match(/^\\/app/)) {\n-    page.matchPath = \"/app/:path\"\n+    page.matchPath = \"/app/*\"\n\n    // Update the page.\n    createPage(page)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Minimal Gatsby Config JavaScript\nDESCRIPTION: This JavaScript code snippet illustrates a minimal gatsby-config.js file, including the siteMetadata object with a title property. This file replaces config.toml in Gatsby v1.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v0-to-v1.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  siteMetadata: {\n    title: `My Sweet Gatsby Site!`,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Schema Customization: Add explicit `childOf` extension (gatsby-node.js)\nDESCRIPTION: In Gatsby v3, parent-child relationships must be explicitly declared using the `@childOf` directive. This snippet shows how to add this directive to a type definition to replace the automatic inference from Gatsby v2.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v2-to-v3.md#_snippet_26\n\nLANGUAGE: diff\nCODE:\n```\nexports.createSchemaCustomization = ({ actions }) => {\n  const { createTypes } = actions\n  createTypes(`\n    type Foo implemenst Node @dontInfer {\n       id: ID!\n    }\n-   type Bar implements Node {\n+   type Bar implements Node @childOf(types: [\"Foo\"]) {\n      id: ID!\n    }\n  `)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating render function (JavaScript)\nDESCRIPTION: This JavaScript code creates a `processor` using `unified` and `rehypeReact` to render React components within Markdown. It maps the custom HTML tag `interactive-counter` to the `Counter` React component.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/using-remark/src/pages/2018-01-27---custom-components/index.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst processor = unified().use(rehypeReact, {\n  createElement,\n  components: {\n    \"interactive-counter\": Counter,\n  },\n})\n\nexport const renderAst = ast => {\n  return processor.stringify(ast)\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Safety Check for Datum Existence in Gatsby Source Drupal\nDESCRIPTION: This code snippet introduces a safety check to verify the existence of `datum` before accessing its properties, preventing potential errors when sourcing data from Drupal in Gatsby.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-drupal/CHANGELOG.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ndatum.\n```\n\n----------------------------------------\n\nTITLE: Gatsby Static Query in Layout Component\nDESCRIPTION: This demonstrates the use of a static query in a Gatsby layout component to fetch site metadata. The `useStaticQuery` hook is used to execute the GraphQL query, retrieving the site title and social media handles. The retrieved data is then passed as props to the `Header` and `Footer` components, enabling dynamic content rendering based on the site's configuration.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/plugins-and-themes/theme-conventions.md#_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\nimport React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nimport Header from \"../header.js\"\nimport Footer from \"../footer.js\"\n\nconst Layout = ({ children }) => {\n  const {\n    site: { siteMetadata },\n  } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            social {\n              twitter\n              github\n            }\n          }\n        }\n      }\n    `\n  )\n\n  const { title, social } = siteMetadata\n\n  return (\n    <>\n      <Header title={title} />\n      <main>{children}</main>\n      <Footer {...social} />\n    </>\n  )\n}\n\nexport default Layout\n```\n\n----------------------------------------\n\nTITLE: Default Icon Configuration in gatsby-plugin-manifest using JSON\nDESCRIPTION: This JSON snippet represents the default icon configuration injected into the manifest when using automatic mode.  It defines an array of icon objects, each specifying the `src`, `sizes`, and `type` for different icon resolutions.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-manifest/README.md#_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"src\": \"icons/icon-48x48.png\",\n    \"sizes\": \"48x48\",\n    \"type\": \"image/png\"\n  },\n  {\n    \"src\": \"icons/icon-72x72.png\",\n    \"sizes\": \"72x72\",\n    \"type\": \"image/png\"\n  },\n  {\n    \"src\": \"icons/icon-96x96.png\",\n    \"sizes\": \"96x96\",\n    \"type\": \"image/png\"\n  },\n  {\n    \"src\": \"icons/icon-144x144.png\",\n    \"sizes\": \"144x144\",\n    \"type\": \"image/png\"\n  },\n  {\n    \"src\": \"icons/icon-192x192.png\",\n    \"sizes\": \"192x192\",\n    \"type\": \"image/png\"\n  },\n  {\n    \"src\": \"icons/icon-256x256.png\",\n    \"sizes\": \"256x256\",\n    \"type\": \"image/png\"\n  },\n  {\n    \"src\": \"icons/icon-384x384.png\",\n    \"sizes\": \"384x384\",\n    \"type\": \"image/png\"\n  },\n  {\n    \"src\": \"icons/icon-512x512.png\",\n    \"sizes\": \"512x512\",\n    \"type\": \"image/png\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query to fetch htmlAst\nDESCRIPTION: This GraphQL query retrieves the `htmlAst` field from the `markdownRemark` node. This field contains the abstract syntax tree of the HTML generated from the Markdown content, which is used for rendering with `rehype-react`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/using-remark/src/pages/2018-01-27---custom-components/index.md#_snippet_6\n\nLANGUAGE: GraphQL\nCODE:\n```\n# ...\nmarkdownRemark(fields: { slug: { eq: $slug } }) {\n  htmlAst # previously `html`\n\n  # other fields...\n}\n# ...\n```\n\n----------------------------------------\n\nTITLE: Run Gatsby Develop Command\nDESCRIPTION: This command initiates the Gatsby development server, which builds and serves the Gatsby site. It's used to verify that the newly added plugin is correctly loaded and functioning.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/starters/gatsby-starter-plugin/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ gatsby develop\nsuccess open and validate gatsby-configs - 0.033s\nsuccess load plugins - 0.074s\nLoaded gatsby-starter-plugin\nsuccess onPreInit - 0.016s\n...\n```\n\n----------------------------------------\n\nTITLE: Install Cypress Axe and Testing Library\nDESCRIPTION: This code snippet shows the command to install `cypress-axe`, `axe-core`, and `@testing-library/cypress` as development dependencies.  These packages are used for accessibility testing.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/testing/end-to-end-testing.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --save-dev cypress-axe axe-core @testing-library/cypress\n```\n\n----------------------------------------\n\nTITLE: Adding HTML Escapes in PrismJS\nDESCRIPTION: This code snippet shows a commit that adds additional HTML escapes for gatsby-remark-prism-js. This likely addresses issues related to the proper rendering of special characters in code blocks highlighted by PrismJS.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-prismjs/CHANGELOG.md#_snippet_16\n\nLANGUAGE: text\nCODE:\n```\n- **gatsby-remark-prism-js:** add additional html escapes ([#20156](https://github.com/gatsbyjs/gatsby/issues/20156)) ([c484c04](https://github.com/gatsbyjs/gatsby/commit/c484c04))\n```\n\n----------------------------------------\n\nTITLE: Updating Minor Packages\nDESCRIPTION: This commit updates minor versions of various packages within the project, excluding React, Babel, and ESLint. Updating packages ensures compatibility with latest features, bug fixes and security patches.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-lever/CHANGELOG.md#_snippet_16\n\nLANGUAGE: Shell\nCODE:\n```\nupdate minor updates in packages except react, babel and eslint ([#17254](https://github.com/gatsbyjs/gatsby/issues/17254)) ([252d867](https://github.com/gatsbyjs/gatsby/commit/252d867))\n```\n\n----------------------------------------\n\nTITLE: Correct Prop Usage: Passing a Serializable Value (JavaScript/JSX)\nDESCRIPTION: Shows the correct way to pass data to the `<Slice>` component, where the prop is a serializable value (in this case, a string returned by a function call).\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/built-in-components/gatsby-slice.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// OK\n\nexport function MyImage() {\n  const fetchImage = () => {\n    return \"/static/images/img.jpg\"\n  }\n\n  // `image` ends up being a string when passed to <Slice />\n  // highlight-next-line\n  return <Slice alias=\"my-image\" image={fetchImage()} />\n}\n```\n\n----------------------------------------\n\nTITLE: Updating fs-extra dependency in gatsby-plugin-feed (older)\nDESCRIPTION: This code snippet represents a bug fix where the `fs-extra` dependency is updated to version `^11.1.1`. This update likely addresses a specific bug or compatibility issue within the `gatsby-plugin-feed` plugin that was resolved in the newer version of `fs-extra`. Updating the dependency ensures that the plugin benefits from the bug fixes and improvements.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-feed/CHANGELOG.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nupdate dependency fs-extra to ^11.1.1 [#37827](https://github.com/gatsbyjs/gatsby/issues/37827) ([3e9a590](https://github.com/gatsbyjs/gatsby/commit/3e9a590fdc0b4cdbc763b6a6e3ca3e983ac8231a))\n```\n\n----------------------------------------\n\nTITLE: Installing Theme UI and Dependencies - Shell\nDESCRIPTION: This command installs the necessary packages for using Theme UI in a Gatsby project, including theme-ui, @theme-ui/mdx, gatsby-plugin-theme-ui, @emotion/react, and @mdx-js/react.  These dependencies are required to integrate Theme UI's styling capabilities with Gatsby.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/styling/theme-ui.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install theme-ui @theme-ui/mdx gatsby-plugin-theme-ui @emotion/react @mdx-js/react\n```\n\n----------------------------------------\n\nTITLE: Adding Image Credit to Blog Post Template in Gatsby\nDESCRIPTION: This snippet demonstrates how to add a photo credit below the hero image in a Gatsby blog post. It uses the GatsbyImage component to display the image and an HTML <a> tag to link to the photographer's credit page.  It retrieves image and credit information from the MDX frontmatter.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-7/index.mdx#_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\n// imports\n\nconst BlogPost = ({ data, children }) => {\n  const image = getImage(data.mdx.frontmatter.hero_image)\n\n  return (\n    <Layout pageTitle={data.mdx.frontmatter.title}>\n      <p>{data.mdx.frontmatter.date}</p>\n      <GatsbyImage\n        image={image}\n        alt={data.mdx.frontmatter.hero_image_alt}\n      />\n      {/* highlight-start */}\n      <p>\n        Photo Credit:{\" \"}\n        <a href={data.mdx.frontmatter.hero_image_credit_link}>\n          {data.mdx.frontmatter.hero_image_credit_text}\n        </a>\n      </p>\n      {/* highlight-end */}\n      {children}\n    </Layout>\n  )\n  }\n\nexport const query = graphql`\n  ...\n`\n\nexport const Head = ({ data }) => <Seo title={data.mdx.frontmatter.title} />\n\nexport default BlogPost\n```\n\n----------------------------------------\n\nTITLE: Creating Authentication Service (JavaScript)\nDESCRIPTION: This JavaScript module provides a set of functions for handling user authentication. It includes functions for checking if the code is running in a browser environment, getting the user from local storage, setting the user in local storage, handling login (with hardcoded credentials), checking if a user is logged in, and logging out. It uses local storage to persist user data.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/authentication-tutorial.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport const isBrowser = () => typeof window !== \"undefined\"\n\nexport const getUser = () =>\n  isBrowser() && window.localStorage.getItem(\"gatsbyUser\")\n    ? JSON.parse(window.localStorage.getItem(\"gatsbyUser\"))\n    : {}\n\nconst setUser = user =>\n  window.localStorage.setItem(\"gatsbyUser\", JSON.stringify(user))\n\nexport const handleLogin = ({ username, password }) => {\n  if (username === `john` && password === `pass`) {\n    return setUser({\n      username: `john`,\n      name: `Johnny`,\n      email: `johnny@example.org`,\n    })\n  }\n\n  return false\n}\n\nexport const isLoggedIn = () => {\n  const user = getUser()\n\n  return !!user.username\n}\n\nexport const logout = callback => {\n  setUser({})\n  callback()\n}\n```\n\n----------------------------------------\n\nTITLE: Releasing Plugin Option Validation in Gatsby\nDESCRIPTION: This commit releases plugin option validation for Gatsby. It addresses the issue reported in the provided GitHub issue link.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-sass/CHANGELOG.md#_snippet_2\n\nLANGUAGE: none\nCODE:\n```\n- **gatsby:** release plugin option validation ([#27437](https://github.com/gatsbyjs/gatsby/issues/27437)) ([41ae1c0](https://github.com/gatsbyjs/gatsby/commit/41ae1c07ad9919655782ef17feed8cf4f14f12d8))\n```\n\n----------------------------------------\n\nTITLE: Updating activityTimer Status - TypeScript\nDESCRIPTION: Uses the `setStatus()` method to update the `activityTimer` with more detailed information, such as the number of posts and authors being processed. This provides real-time feedback to the user about the progress of the sourcing process. Parameters include a string message describing the current status.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/creating-a-source-plugin/part-4/index.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// Imports\n\nexport const sourceNodes: GatsbyNode[`sourceNodes`] = async (gatsbyApi) => {\n  // Rest of sourceNodes\n\n  const { posts = [], authors = [] } = data\n\n  // highlight-start\n  sourcingTimer.setStatus(\n    `Processing ${posts.length} posts and ${authors.length} authors`\n  )\n  // highlight-end\n\n  for (const post of posts) {\n    nodeBuilder({ gatsbyApi, input: { type: NODE_TYPES.Post, data: post } })\n  }\n\n  for (const author of authors) {\n    nodeBuilder({ gatsbyApi, input: { type: NODE_TYPES.Author, data: author } })\n  }\n}\n\n// Rest of file\n```\n\n----------------------------------------\n\nTITLE: Updating Babel Plugin React CSS Modules Dependency\nDESCRIPTION: Updates the dependency babel-plugin-react-css-modules to version ^3.4.2. This change likely brings in new features, performance improvements, or bug fixes from the updated dependency.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-react-css-modules/CHANGELOG.md#_snippet_8\n\n\n\n----------------------------------------\n\nTITLE: Highlighting Recommended Plugin in gatsby-plugin-google-analytics\nDESCRIPTION: Highlights the recommended Google Analytics plugin within the Gatsby ecosystem. This chore enhances user experience by directing users to the most suitable plugin option.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-google-analytics/CHANGELOG.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n79aee20\n```\n\n----------------------------------------\n\nTITLE: Making unstable_shouldOnCreateNode stable\nDESCRIPTION: This commit stabilizes the `unstable_shouldOnCreateNode` API. This change makes the API a stable part of the gatsby-transformer-toml package and reduces the risk of breaking changes in future releases. The issue relates to #36516.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-toml/CHANGELOG.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmake unstable_shouldOnCreateNode stable [#36516](https://github.com/gatsbyjs/gatsby/issues/36516) ([90f9ab4](https://github.com/gatsbyjs/gatsby/commit/90f9ab47593ba7458fc5bc677c4b0282b30808c8))\n```\n\n----------------------------------------\n\nTITLE: Adding Forestry Preview Script to package.json\nDESCRIPTION: This JSON snippet adds a new script to the `package.json` file called `forestry:preview`. This script uses `gatsby develop` to start a local development server on port 8080, binding to all network interfaces (0.0.0.0). This allows Forestry's preview functionality to work correctly by accessing the Gatsby development server.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/sourcing-from-forestry.md#_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n\"scripts\": {\n  \"forestry:preview\": \"gatsby develop -p 8080 -H 0.0.0.0\"\n},\n```\n\n----------------------------------------\n\nTITLE: Upgrading Jest dependency\nDESCRIPTION: This commit upgrades the Jest testing framework within the `gatsby-remark-code-repls` package.  This ensures that the package's tests are run with the latest version of Jest, benefiting from any new features or bug fixes. It also ensures compatibility with other updated dependencies.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-code-repls/CHANGELOG.md#_snippet_10\n\n\n\n----------------------------------------\n\nTITLE: Removing sizeByPixelDensity in gatsby-remark-images-contentful\nDESCRIPTION: This code snippet represents a chore where the `sizeByPixelDensity` option was removed. This indicates a change in how image sizes are handled, potentially simplifying the configuration or improving performance.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-images-contentful/CHANGELOG.md#_snippet_17\n\nLANGUAGE: None\nCODE:\n```\nRemove `sizeByPixelDensity` option [#33468](https://github.com/gatsbyjs/gatsby/issues/33468) ([d467372](https://github.com/gatsbyjs/gatsby/commit/d4673723a14cfbeb727bf6c2472e6693beeee817))\n```\n\n----------------------------------------\n\nTITLE: Applying Patches for v4\nDESCRIPTION: This commit applies necessary patches for version 4 of the plugin. It includes bug fixes or small improvements specifically targeting v4 to maintain compatibility and address identified issues.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-react-helmet/CHANGELOG.md#_snippet_9\n\nLANGUAGE: Other\nCODE:\n```\nf8c5141bf72108a53338fd01514522ae7a1b37bf\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query result\nDESCRIPTION: The expected result of the GraphQL query, showing the structure of the returned data. Each node contains the `character` field with its respective value.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-yaml/README.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  allLettersYaml: {\n    edges: [\n      {\n        node: {\n          character: \"a\",\n        },\n      },\n      {\n        node: {\n          character: \"b\",\n        },\n      },\n      {\n        node: {\n          character: \"c\",\n        },\n      },\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Get CI Environment Name with gatsby-core-utils (JS)\nDESCRIPTION: Retrieves the name of the current CI environment, if available, using `gatsby-core-utils`. Returns `null` if no CI environment is detected.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-core-utils/README.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { getCIName } = require(\"gatsby-core-utils\")\n\nconst CI_NAME = getCIName()\nconsole.log({ CI_NAME })\n// {CI_NAME: null}, or\n// {CI_NAME: \"Vercel\"}\n// ...\n```\n\n----------------------------------------\n\nTITLE: Updating Minor and Patch Dependencies\nDESCRIPTION: This snippet describes an update to minor and patch dependencies for gatsby-source-medium. This keeps the project secure and up to date with the latest features.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-medium/CHANGELOG.md#_snippet_7\n\nLANGUAGE: Diff\nCODE:\n```\n- **deps:** update minor and patch for gatsby-source-medium ([#27654](https://github.com/gatsbyjs/gatsby/issues/27654)) ([f4f874e](https://github.com/gatsbyjs/gatsby/commit/f4f874eac94bd2d6ffa11d0d02b6153f8c76249a))\n```\n\n----------------------------------------\n\nTITLE: Updating dependencies with npm-check-updates\nDESCRIPTION: This command uses the `npm-check-updates` tool to update the dependencies listed in your `package.json` file to their latest versions.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/plugins-and-themes/maintaining-a-plugin.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nncu -u\n```\n\n----------------------------------------\n\nTITLE: Installing gatsby-plugin-layout\nDESCRIPTION: This command installs the gatsby-plugin-layout plugin using npm. This plugin enables persisting layout components across page changes in Gatsby.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-layout/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install gatsby-plugin-layout\n```\n\n----------------------------------------\n\nTITLE: Updating Babel Monorepo\nDESCRIPTION: This chore updates the Babel monorepo. Babel is a JavaScript compiler that transforms edge JavaScript into plain old ES5 JavaScript that can run in any browser. This update ensures the latest features and bug fixes from Babel are integrated.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-javascript-static-exports/CHANGELOG.md#_snippet_10\n\nLANGUAGE: None\nCODE:\n```\nupdate babel monorepo [#27528](https://github.com/gatsbyjs/gatsby/issues/27528) ([539dbb0](https://github.com/gatsbyjs/gatsby/commit/539dbb09166e346a6cee568973d2de3d936e8ef3))\n```\n\n----------------------------------------\n\nTITLE: Adding Webhook Body Support for Incremental Builds\nDESCRIPTION: This feature enhances the gatsby-source-drupal plugin by adding support for webhook bodies, enabling more efficient incremental builds triggered by content updates in Drupal.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-drupal/CHANGELOG.md#_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Start Gatsby Development Server with npm\nDESCRIPTION: This command starts the Gatsby development server using npm, which is an alternative method if the Gatsby CLI is not installed globally.  It achieves the same outcome as 'gatsby develop'.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-1/index.mdx#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnpm run develop\n```\n\n----------------------------------------\n\nTITLE: Registering Enum Types Explicitly (JavaScript)\nDESCRIPTION: This snippet explicitly registers enum types. Explicit registration ensures that the enum types are correctly recognized and processed by the GraphQL schema, improving type safety and query predictability.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-sharp/CHANGELOG.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nfdc7ccd\n```\n\n----------------------------------------\n\nTITLE: Incorrectly Define a GraphQL Type with SDL in Gatsby\nDESCRIPTION: This snippet demonstrates an incorrect way to define a `Frontmatter` type using GraphQL SDL in Gatsby. It highlights that the `Frontmatter` type must be explicitly linked to a field on a Node type for Gatsby to recognize and apply it.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/graphql-data-layer/schema-customization.md#_snippet_12\n\nLANGUAGE: js\nCODE:\n```\nexports.createSchemaCustomization = ({ actions }) => {\n  const { createTypes } = actions\n  const typeDefs = `\n    # This will fail!!!\n    type Frontmatter {\n      tags: [String]!\n    }\n  `\n  createTypes(typeDefs)\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Slash Dependency in Gatsby (JavaScript)\nDESCRIPTION: This code snippet shows the commit hash associated with updating the slash dependency to v3. The `slash` package is likely used for normalizing file paths across different operating systems.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-page-utils/CHANGELOG.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nc81f45c\n```\n\n----------------------------------------\n\nTITLE: Applying Patches for v5 in gatsby-plugin-emotion\nDESCRIPTION: This snippet illustrates a chore involving applying patches for version 5 of Gatsby in the `gatsby-plugin-emotion` package. This ensures the plugin is up-to-date with the required changes for Gatsby v5 compatibility.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-emotion/CHANGELOG.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\napply patches for v5 [#36796](https://github.com/gatsbyjs/gatsby/issues/36796) ([25f79b6](https://github.com/gatsbyjs/gatsby/commit/25f79b6c3719fdf09584ade620a05c66ba2a697c))\n```\n\n----------------------------------------\n\nTITLE: RemoteFile GraphQL Interface\nDESCRIPTION: This GraphQL code defines the `RemoteFile` interface that a Gatsby source plugin must implement to support Image CDN. It specifies the required fields: `id`, `mimeType`, `filename`, `publicUrl`, and the optional fields: `filesize`, `width`, `height`, `resize`, and `gatsbyImage`. `resize` and `gatsbyImage` are GraphQL resolvers provided by Gatsby.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/creating-a-source-plugin/part-6/index.mdx#_snippet_3\n\nLANGUAGE: GraphQL\nCODE:\n```\ninterface RemoteFile {\n  id: ID!\n  mimeType: String!\n  filename: String!\n  filesize: Int\n  width: Int\n  height: Int\n  publicUrl: String!\n  resize(/* args */): RemoteFileResize\n  gatsbyImage(/* args */): GatsbyImageData\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting changelog files\nDESCRIPTION: This commit formats changelog files to maintain consistency and readability. It ensures that the changelog files follow a specific format, making it easier to track changes and updates in the package.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-twitter/CHANGELOG.md#_snippet_5\n\nLANGUAGE: TEXT\nCODE:\n```\nFormat changelog files ([088f23b](https://github.com/gatsbyjs/gatsby/commit/088f23b084b67f746a383e06e9216cef83270317))\n```\n\n----------------------------------------\n\nTITLE: Installing WPGraphQL and WPGraphiQL via Composer\nDESCRIPTION: This command uses Composer, a package manager for PHP, to install the WPGraphQL and WPGraphiQL plugins directly into a WordPress installation. This is an alternative to uploading the plugins as ZIP archives.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/glossary/wpgraphql.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer require wp-graphql/wp-graphql wp-graphql/wp-graphiql\n```\n\n----------------------------------------\n\nTITLE: Debugging: Add Console Log to onCreateNode JavaScript\nDESCRIPTION: This snippet demonstrates using `console.log` within the `onCreateNode` function to inspect the `args` object. This helps identify the structure and content of the arguments passed to the function, revealing the presence of the `node` property in lowercase and helping diagnose the original error.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/debugging-the-build-process.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { createFilePath } = require(\"gatsby-source-filesystem\")\n\nexports.onCreateNode = args => {\n  console.log(args) // highlight-line\n  const { actions, node } = args\n  if (node.internal.type === \"MarkdownRemark\") {\n    const { createNodeField } = actions\n\n    const value = createFilePath({ node, getNode })\n    createNodeField({\n      name: `slug`,\n      node,\n      value,\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating createPage action in gatsby-node.js (JavaScript)\nDESCRIPTION: This code snippet shows how to update the `createPage` action in `gatsby-node.js` to work with the new layout system in gatsby-plugin-mdx v4. It demonstrates querying the absolute path to the MDX file and attaching it to the layout file via the `__contentFilePath` query parameter.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-mdx/README.md#_snippet_23\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst postTemplate = path.resolve(`./src/templates/post.jsx`)\n\nactions.createPage({\n-  component: postTemplate,\n+  component: `${postTemplate}?__contentFilePath=/path/to/content.mdx`,\n})\n\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst postTemplate = path.resolve(`./src/templates/post.jsx`)\n\n// Rest of createPages API...\n\nconst { data } = await graphql(`\n  {\n    allMdx {\n      nodes {\n        id\n        frontmatter {\n          slug\n        }\n// highlight-start\n        internal {\n          contentFilePath\n        }\n// highlight-end\n      }\n    }\n  }\n`)\n\ndata.allMdx.nodes.forEach(node => {\n  actions.createPage({\n    path: node.frontmatter.slug,\n    component: `${postTemplate}?__contentFilePath=${node.internal.contentFilePath}`, // highlight-line\n    context: {\n      id: node.id,\n    },\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Bumping node min version in Gatsby\nDESCRIPTION: This snippet describes a feature to bump the minimum supported Node.js version to 10.13.0 within the Gatsby project. This enhancement is included in version 3.1.0 of the gatsby-remark-code-repls package.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-code-repls/CHANGELOG.md#_snippet_19\n\n\n\n----------------------------------------\n\nTITLE: Linking project to forked Gatsby repository\nDESCRIPTION: Runs the gatsby-dev tool in a project directory to link it to a forked Gatsby repository. This scans the project's package.json for Gatsby dependencies and copies the latest source from the cloned Gatsby repository into the project's node_modules folder. A watch task is then created.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-dev-cli/README.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ngatsby-dev\n```\n\n----------------------------------------\n\nTITLE: Chore: Update peerDeps\nDESCRIPTION: This snippet documents a chore in version 5.0.0 of the gatsby-source-graphql plugin. It updates the peer dependencies, typically adjusting version requirements of packages required by the plugin. This ensures compatibility with other packages used in Gatsby projects.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-graphql/CHANGELOG.md#_snippet_5\n\n\n\n----------------------------------------\n\nTITLE: GraphQL Query Example for Gatsby\nDESCRIPTION: This GraphQL query retrieves the ID and title of all WordPress pages using the `allWpPage` node in a Gatsby project. It's used to check if data is being sourced correctly from WordPress.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-wordpress/docs/debugging-and-troubleshooting.md#_snippet_0\n\nLANGUAGE: GraphQL\nCODE:\n```\n{\n  allWpPage {\n    nodes {\n      id\n      title\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JSON with consistent object types\nDESCRIPTION: Example JSON with consistent data types in objects within arrays, resolving GraphQL schema conflicts.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-json/README.md#_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"stuff\": [{ \"count\": 25, \"name\": \"bob\" }],\n  \"orEven\": [\n    { \"count\": 25, \"name\": \"bob\" },\n    { \"count\": 23, \"name\": \"joe\" }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating createAssetNode Shell (TypeScript)\nDESCRIPTION: This snippet adds a shell function for `createAssetNode` in `source-nodes.ts`.  It imports required types and defines the basic function signature, taking `gatsbyApi` and `data` as arguments. `data` should conform to `IPostImageInput` type.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/creating-a-source-plugin/part-6/index.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { GatsbyNode, SourceNodesArgs, NodeInput } from \"gatsby\"\n// highlight-next-line\nimport type { IRemoteImageNodeInput } from \"gatsby-plugin-utils\"\nimport { fetchGraphQL } from \"./utils\"\nimport type {\n// highlight-next-line\n  IPostImageInput,\n  IAuthorInput,\n  IPostInput,\n  NodeBuilderInput,\n  IPluginOptionsInternal,\n} from \"./types\"\nimport { NODE_TYPES, ERROR_CODES, CACHE_KEYS } from \"./constants\"\n\nlet isFirstSource = true\n\nexport const sourceNodes: GatsbyNode[`sourceNodes`] = async (\n  gatsbyApi,\n  pluginOptions: IPluginOptionsInternal\n) => {\n  // sourceNodes contents\n}\n\n// nodeBuilder utility\n\n// highlight-start\nexport function createAssetNode(\n  gatsbyApi: SourceNodesArgs,\n  data: IPostImageInput\n) {}\n// highlight-end\n```\n\n----------------------------------------\n\nTITLE: Import Cypress Axe and Testing Library Commands\nDESCRIPTION: This code imports `cypress-axe` and `@testing-library/cypress` commands into the `cypress/support/e2e.ts` file.  This allows you to use the `cy.checkA11y()` and testing-library commands in your Cypress tests.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/testing/end-to-end-testing.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport \"gatsby-cypress/commands\"\nimport \"cypress-axe\"\nimport \"@testing-library/cypress/add-commands\"\n```\n\n----------------------------------------\n\nTITLE: Starting Gatsby Development Server\nDESCRIPTION: These commands navigate into the newly created Gatsby site directory and start the development server. The development server enables hot-reloading and provides a local environment for development at http://localhost:8000.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/integration-tests/functions/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ncd my-gatsby-site/\nnpm run develop\n```\n\n----------------------------------------\n\nTITLE: Bumping Babel Minor Dependency in Gatsby Plugin\nDESCRIPTION: This snippet bumps the babel minor dependency for the gatsby-plugin-coffeescript package, addressing issue #31857.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-coffeescript/CHANGELOG.md#_snippet_10\n\nLANGUAGE: Other\nCODE:\n```\nbump babel minor [#31857](https://github.com/gatsbyjs/gatsby/issues/31857) ([7d42e8d](https://github.com/gatsbyjs/gatsby/commit/7d42e8d866e46e9c39838d812d080d06433f7060))\n```\n\n----------------------------------------\n\nTITLE: Implementing shouldOnCreateNode in Gatsby Plugins\nDESCRIPTION: This commit implements the `shouldOnCreateNode` function for all plugins and benchmarks within the Gatsby ecosystem. This function allows for more efficient node creation by determining whether a node should be processed based on its type and content. This optimizes performance by avoiding unnecessary processing of irrelevant nodes.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-hjson/CHANGELOG.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ndf914d94a7c47c6082b6f165eb44dc6e15e12c7d\n```\n\n----------------------------------------\n\nTITLE: Chore: Add peerDependenciesMeta in gatsby-plugin-image\nDESCRIPTION: This snippet adds `peerDependenciesMeta` to the gatsby-plugin-image. The peerDependenciesMeta field specifies metadata about peer dependencies, which can be used to control how peer dependencies are handled during installation.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-image/CHANGELOG.md#_snippet_22\n\nLANGUAGE: JavaScript\nCODE:\n```\nAdd `peerDependenciesMeta` [#35146](https://github.com/gatsbyjs/gatsby/issues/35146) ([c935f05](https://github.com/gatsbyjs/gatsby/commit/c935f053b70265257873c235b610642fcd775932))\n```\n\n----------------------------------------\n\nTITLE: Creating custom SCSS file\nDESCRIPTION: This SCSS file (mystyles.scss) imports the Bulma library and allows for custom styling by defining variables before the import statement.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/styling/bulma.md#_snippet_2\n\nLANGUAGE: SCSS\nCODE:\n```\n@charset \"utf-8\";\n\n// If need, change your variables before importing Bulma\n$title-color: #ff0000;\n\n@import \"~bulma/bulma.sass\";\n```\n\n----------------------------------------\n\nTITLE: Group Markdown Remark Query GraphQL\nDESCRIPTION: This query groups MarkdownRemark nodes by a specified field. The `group` argument is used to group the nodes by the frontmatter author field. It retrieves the field value, total count, and frontmatter title for each group.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/graphql-reference/content/queries.md#_snippet_9\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  allMarkdownRemark {\n    group(field: frontmatter___author) {\n      fieldValue\n      totalCount\n      edges {\n        node {\n          frontmatter {\n            title\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Create Gatsby Cloud Deploy Button (Markdown)\nDESCRIPTION: This Markdown snippet provides a concise way to create a \"Deploy to Gatsby Cloud\" button, linking to the Gatsby Cloud deployment URL with the specified GitHub repository. The image acts as the button, and clicking it redirects the user to the Gatsby Cloud dashboard to initiate the deployment process.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/cloud/create-a-deploy-to-gatsby-cloud-button.md#_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n[![Deploy to Gatsby Cloud](https://www.gatsbyjs.com/deploynow.svg)](https://www.gatsbyjs.com/dashboard/deploynow?url=https://github.com/gatsbyjs/gatsby-starter-blog)\n```\n\n----------------------------------------\n\nTITLE: Querying frontmatter data using GraphQL\nDESCRIPTION: This GraphQL query retrieves all JavascriptFrontmatter nodes and their frontmatter fields. It demonstrates how to access the extracted metadata within your Gatsby components.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-javascript-frontmatter/README.md#_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  allJavascriptFrontmatter {\n    edges {\n      node {\n        frontmatter {\n          error\n          path\n          title\n          written\n          category\n          description\n          updated\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating better-queue Dependency in gatsby-source-wordpress to ^3.8.10\nDESCRIPTION: This commit updates the better-queue dependency to version ^3.8.10 in the gatsby-source-wordpress package. Updating ensures stability and access to improvements in queue management.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-wordpress/CHANGELOG.md#_snippet_9\n\nLANGUAGE: Commit Message\nCODE:\n```\n6834344\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphQL Type Generation\nDESCRIPTION: This example showcases how to configure the GraphQL Typegen feature by passing an object to the `graphqlTypegen` option.  It allows customizing options such as the output path and document search paths.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/config-files/gatsby-config.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  graphqlTypegen: {\n    typesOutputPath: `gatsby-types.d.ts`,\n    generateOnBuild: false,\n    documentSearchPaths: [`./gatsby-node.ts`, `./plugins/**/gatsby-node.ts`],\n    // Other options...\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Normalizers Option to Gatsby Source WordPress\nDESCRIPTION: This feature introduces a `normalizers` option to the gatsby-source-wordpress plugin.  Normalizers allow developers to modify the data fetched from WordPress before it's used to create Gatsby nodes.  This enables custom data transformations and manipulation to better fit the Gatsby schema.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-wordpress/CHANGELOG.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n**gatsby-source-wordpress:** add normalizers option to modif‚Ä¶ ([#18079](https://github.com/gatsbyjs/gatsby/issues/18079)) ([2f67bce](https://github.com/gatsbyjs/gatsby/commit/2f67bce))\n```\n\n----------------------------------------\n\nTITLE: Adding NpmPackage Node type in gatsby-source-npm-package-search\nDESCRIPTION: This feature introduces a new Node type called NpmPackage within the gatsby-source-npm-package-search plugin. This Node type likely represents an npm package and its associated data, allowing Gatsby to query and utilize information about npm packages within its GraphQL schema.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-npm-package-search/CHANGELOG.md#_snippet_8\n\nLANGUAGE: Text\nCODE:\n```\ngatsby-source-npm-package-search: add Node type NpmPackage ([#25038](https://github.com/gatsbyjs/gatsby/issues/25038)) ([0b58ef2](https://github.com/gatsbyjs/gatsby/commit/0b58ef2))\n```\n\n----------------------------------------\n\nTITLE: Build Gatsby site using Yarn\nDESCRIPTION: Builds the Gatsby site after installing dependencies. This command triggers the generation of static files for the website.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/benchmarks/markdown_table/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nyarn build\n```\n\n----------------------------------------\n\nTITLE: GraphQL query for userToml data\nDESCRIPTION: This GraphQL query demonstrates how to retrieve data from a TOML file using the gatsby-transformer-toml plugin.  It retrieves the userName, userAvatar, userDescription, and userLink fields from the userToml node.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-toml/README.md#_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  userToml {\n    userName\n    userAvatar\n    userDescription\n    userLink {\n      label\n      url\n      icon\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Chunk Mapping in CDATA for Gatsby Loader\nDESCRIPTION: This code snippet shows the structure of the `window.___chunkMapping` object, which is injected into the HTML as CDATA.  This object maps chunk names (like \"app\" or \"component---src-blog-2-js\") to the corresponding asset paths. This allows the Gatsby loader to dynamically create prefetch links and other resources.  The \\\"CDATA\\\" section ensures proper parsing of the contained JavaScript object.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-code-splitting-works.md#_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n/*\n<![CDATA[ */\n    window.___chunkMapping={\n      \"app\":[\n        \"/app-2e49587d85e03a033f58.js\"\n      ],\n      \"component---src-blog-2-js\": [\n        \"/component---src-blog-2-js-cebc3ae7596cbb5b0951.css\",\n        \"/component---src-blog-2-js-860f9fbc5c3881586b5d.js\"\n      ]\n    }\n  */ ]\n]>\n*/\n```\n\n----------------------------------------\n\nTITLE: Creating a Slice in gatsby-node.js (JavaScript)\nDESCRIPTION: Demonstrates how to use the `createSlice` action in `gatsby-node.js` to create a new Slice. It defines a unique ID, specifies the component to use as the Slice component, and passes a context object that will be available as `sliceContext` within the component.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/built-in-components/gatsby-slice.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexports.createPages = async ({ actions }) => {\n  actions.createSlice({\n    id: `navigation-bar`,\n    component: require.resolve(`./src/components/navigation-bar.js`),\n    context: {\n      jokeOfTheDay: `What's blue and not heavy? Light blue.`,\n    }\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Configure ignoreFileExtensions JavaScript\nDESCRIPTION: Configuration of the `ignoreFileExtensions` option, demonstrating how to override the default ignored file types and specify an empty array to copy all linked files. This shows how to include images by overriding the default settings.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-copy-linked-files/README.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  resolve: `gatsby-transformer-remark`,\n  options: {\n    plugins: [\n      {\n        resolve: \"gatsby-remark-copy-linked-files\",\n        options: {\n          // `ignoreFileExtensions` defaults to [`png`, `jpg`, `jpeg`, `bmp`, `tiff`]\n          // as we assume you'll use gatsby-remark-images to handle\n          // images in markdown as it automatically creates responsive\n          // versions of images.\n          //\n          // If you'd like to not use gatsby-remark-images and just copy your\n          // original images to the public directory, set\n          // `ignoreFileExtensions` to an empty array.\n          ignoreFileExtensions: [],\n        },\n      },\n    ],\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing TSV Files with extensions and delimiter Options (JavaScript)\nDESCRIPTION: This example configures the gatsby-transformer-csv plugin to parse TSV (Tab-Separated Values) files instead of the default CSV files. It uses the `extensions` option to specify that files with the `.tsv` extension should be parsed and the `delimiter` option to set the delimiter character to a tab (`\\t`).  This customization allows the plugin to handle different file formats beyond standard CSV.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-csv/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// In your gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-source-filesystem`,\n      options: {\n        name: `data`,\n        path: `${__dirname}/src/data/`,\n      },\n    },\n    {\n      resolve: `gatsby-transformer-csv`,\n      options: {\n        extensions: [`tsv`],\n        delimiter: '\\t'\n      },\n    },\n  ];\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Index Page for Authentication Status in Gatsby\nDESCRIPTION: This snippet modifies the index page to display a personalized greeting based on the user's authentication status. If the user is logged in, it shows their name and a link to their profile. Otherwise, it prompts them to log in. It uses `gatsby` for routing and `react` for creating dynamic content.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/authentication-tutorial.md#_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\"\nimport { Link } from \"gatsby\" // highlight-line\nimport { getUser, isLoggedIn } from \"../services/auth\" // highlight-line\n\nimport Layout from \"../components/layout\"\n\nexport default function Home() {\n  return (\n    <Layout>\n      {/* highlight-start */}\n      <h1>Hello {isLoggedIn() ? getUser().name : \"world\"}!</h1>\n      <p>\n        {isLoggedIn() ? (\n          <>\n            You are logged in, so check your{\" \"}\n            <Link to=\"/app/profile\">profile</Link>\n          </>\n        ) : (\n          <>\n            You should <Link to=\"/app/login\">log in</Link> to see restricted\n            content\n          </>\n        )}\n      </p>\n      {/* highlight-end */}\n    </Layout>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Message Types Definition in TypeScript\nDESCRIPTION: This TypeScript code defines interfaces for messages exchanged between the parent process and worker processes using the `gatsby-worker` utility. It defines message types and payload structures for both directions. The interfaces are then combined into type unions (`MessagesFromChild`, `MessagesFromParent`) to ensure type safety when sending and receiving messages.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-worker/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// `gatsby-worker` supports message types. Creating common module that centralize possible messages\n// that is shared by worker and parent will ensure messages type safety.\ninterface IPingMessage {\n  type: `PING`\n}\n\ninterface IAnotherMessageFromChild {\n  type: `OTHER_MESSAGE_FROM_CHILD`\n  payload: {\n    foo: string\n  }\n}\n\nexport type MessagesFromChild = IPingMessage | IAnotherMessageFromChild\n\ninterface IPongMessage {\n  type: `PONG`\n}\n\ninterface IAnotherMessageFromParent {\n  type: `OTHER_MESSAGE_FROM_PARENT`\n  payload: {\n    foo: string\n  }\n}\n\nexport type MessagesFromParent = IPongMessage | IAnotherMessageFromParent\n```\n\n----------------------------------------\n\nTITLE: Fix Babel Monorepo update - JavaScript\nDESCRIPTION: This commit updates the babel monorepo to address an issue.  It is a bug fix related to babel dependencies.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-subfont/CHANGELOG.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nupdate babel monorepo [#37568](https://github.com/gatsbyjs/gatsby/issues/37568) ([13a0a9e](https://github.com/gatsbyjs/gatsby/commit/13a0a9e83dcb015b65dff6b73cdd5dea09c2988f))\n```\n\n----------------------------------------\n\nTITLE: Enable SSR Pages During Development\nDESCRIPTION: This commit enables server-side rendering (SSR) for pages during development. SSR can improve the initial load time of pages and make them more accessible to search engines.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-typography/CHANGELOG.md#_snippet_5\n\nLANGUAGE: None\nCODE:\n```\nSSR pages during development [#27432](https://github.com/gatsbyjs/gatsby/issues/27432) ([23da2c3](https://github.com/gatsbyjs/gatsby/commit/23da2c3fb2e16b7e3fe1e15c19decd799000a212))\n```\n\n----------------------------------------\n\nTITLE: Update Plugin Schema Testing Util\nDESCRIPTION: This commit updates the plugin schema testing utility and associated tests within the Gatsby project. The update aims to improve the accuracy and robustness of schema validation during plugin development.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-offline/CHANGELOG.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n6d81283\n```\n\n----------------------------------------\n\nTITLE: Initializing a Gatsby Adapter (TypeScript)\nDESCRIPTION: This code snippet demonstrates the basic structure of a Gatsby adapter in TypeScript. It showcases how to use the `AdapterInit` type and define custom adapter options. The adapter exports a function with the `name`, `cache` (optional), `adapt`, and `config` (optional) hooks, ensuring type safety and proper integration with the Gatsby build process.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/previews-deploys-hosting/creating-an-adapter.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport type { AdapterInit } from \"gatsby\"\n\ntype AdapterOptions = {\n  foo: boolean\n}\n\nconst createAdapterFoo: AdapterInit<AdapterOptions> = ({ foo }) => {\n  return {\n    name: `gatsby-adapter-foo`,\n    cache: {\n      restore({ directories, reporter }) {\n        // Cache restore implementation\n      },\n      store({ directories, reporter }) {\n        // Cache store implementation\n      },\n    },\n    adapt({\n      routesManifest,\n      functionsManifest,\n      pathPrefix,\n      trailingSlash,\n      reporter,\n    }) {\n      // Adapt implementation\n    },\n    config({ reporter }) {\n      return {\n        // Information passed back to Gatsby\n      }\n    },\n  }\n}\n\nexport default createAdapterFoo\n```\n\n----------------------------------------\n\nTITLE: Updating cross-env dependency\nDESCRIPTION: This code snippet updates the `cross-env` dependency, likely to address bug fixes or introduce new features in cross-environment support. The change log notes that the dependency `cross-env` is updated to version `7.0.3`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-excel/CHANGELOG.md#_snippet_25\n\nLANGUAGE: Text\nCODE:\n```\n- update dependency cross-env to ^7.0.3 ([#28505](https://github.com/gatsbyjs/gatsby/issues/28505)) ([a819b9b](https://github.com/gatsbyjs/gatsby/commit/a819b9bfb663139f7b06c3ed7d6d6069a2382b2c))\n```\n\n----------------------------------------\n\nTITLE: Fixing ignore pattern with quotes in Gatsby\nDESCRIPTION: This snippet describes a bug fix that involves wrapping an ignore pattern in quotes within the Gatsby project. This fix is included in version 3.1.3 of the gatsby-remark-code-repls package.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-code-repls/CHANGELOG.md#_snippet_18\n\n\n\n----------------------------------------\n\nTITLE: Update Typescript dependency - Gatsby Telemetry\nDESCRIPTION: This commit updates the typescript dependency for the gatsby-telemetry package to version ^4.5.2.  This update ensures the package leverages the latest type system features and performance optimizations provided by TypeScript.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-telemetry/CHANGELOG.md#_snippet_10\n\n\n\n----------------------------------------\n\nTITLE: Updating Bluebird Dependency - JavaScript\nDESCRIPTION: This snippet updates the `bluebird` dependency to version ^3.7.0. Bluebird is a Promise library used by `gatsby-source-contentful`, and updating it ensures that the plugin benefits from the latest bug fixes and performance improvements in the library.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-contentful/CHANGELOG.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nbd235a8\n```\n\n----------------------------------------\n\nTITLE: Webpack Plugin Structure (JavaScript)\nDESCRIPTION: This snippet outlines the basic structure of the GatsbyThemeComponentShadowingResolverPlugin. It includes the constructor, which initializes the plugin with themes, project root, and extensions, and the apply method, which taps into the 'resolve' and 'before-resolved' hooks to modify module resolution.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/conceptual/how-shadowing-works.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = class GatsbyThemeComponentShadowingResolverPlugin {\n  constructor({ projectRoot, themes, extensions, extensionsCategory }) {\n    this.themes = themes\n    this.projectRoot = projectRoot\n\n    // See more on extensions handling below\n    this.extensions = ...\n    this.extensionsCategory = ...\n    this.additionalShadowExtensions = ...\n  }\n\n  apply(resolver) {\n    // This hook is executed very early and captures the original file name\n    resolver\n      .getHook(`resolve`)\n      .tapAsync(\n        `GatsbyThemeComponentShadowingResolverPlugin`,\n        (request, stack, callback) => {\n          if (!request._gatsbyThemeShadowingOriginalRequestPath) {\n            request._gatsbyThemeShadowingOriginalRequestPath = request.request\n          }\n          return callback()\n        }\n      )\n\n    // This is where the magic really happens\n    resolver\n      .getHook(`before-resolved`)\n      .tapAsync(\n        `GatsbyThemeComponentShadowingResolverPlugin`,\n        (request, stack, callback) => {\n          // highlight-line\n          // ...\n        }\n      )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting changelog files\nDESCRIPTION: This commit formats the changelog files for consistency and readability. Consistent formatting improves maintainability and makes it easier to track changes across different versions.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-cypress/CHANGELOG.md#_snippet_5\n\n\n\n----------------------------------------\n\nTITLE: Example Error Object\nDESCRIPTION: This code demonstrates the structure of the error object that will be returned if an error occurs during data extraction. The error object contains information about the error, including a boolean flag indicating whether an error occurred, the error message, and the stack trace.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-javascript-static-exports/README.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n\"error\": {\n          \"err\": true,\n          \"message\": \"we threw an error\",\n          \"stack\": \"This is a stringified stack trace\"\n        },\n```\n\n----------------------------------------\n\nTITLE: Fixing Ignore Pattern in Gatsby Page Utils (JavaScript)\nDESCRIPTION: This code snippet addresses an issue related to ignore patterns within the gatsby-page-utils package. It ensures that ignore patterns are properly wrapped in quotes to prevent errors during processing. This fix enhances the reliability of page generation by correctly excluding specified files or directories.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-page-utils/CHANGELOG.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nwrap ignore pattern in quotes ([#23176](https://github.com/gatsbyjs/gatsby/issues/23176)) ([7563db6](https://github.com/gatsbyjs/gatsby/commit/7563db6))\n```\n\n----------------------------------------\n\nTITLE: Updating Babel Monorepo in Gatsby\nDESCRIPTION: This commit updates the Babel monorepo in the gatsby-plugin-nprogress package. Keeping Babel up to date ensures compatibility with new JavaScript syntax and features.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-nprogress/CHANGELOG.md#_snippet_6\n\nLANGUAGE: Markdown\nCODE:\n```\nupdate babel monorepo [#32238](https://github.com/gatsbyjs/gatsby/issues/32238) ([466d4c0](https://github.com/gatsbyjs/gatsby/commit/466d4c087bbc96abb942a02c67243bcc9a4f2a0a))\n```\n\n----------------------------------------\n\nTITLE: Modifying GraphQL Schema in sourceNodes (Old Way)\nDESCRIPTION: This code demonstrates the old way of modifying Gatsby's GraphQL schema within the `sourceNodes` lifecycle.  It uses the `createTypes` action to define a GraphQL type.  This approach is no longer allowed in Gatsby 4 and must be moved to `createSchemaCustomization`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-source-plugin-from-v3-to-v4.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexports.sourceNodes = ({ actions }) => { // highlight-line\n  const { createTypes } = actions;\n\n  createTypes(`\n    type AuthorJson implements Node {\n      joinedAt: Date\n    }\n  `)\n}\n```\n\n----------------------------------------\n\nTITLE: Updating transformer excel dependencies\nDESCRIPTION: This code snippet updates minor and patch dependencies for the gatsby-transformer-excel plugin, potentially fixing bugs or improving performance within the plugin itself.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-excel/CHANGELOG.md#_snippet_30\n\nLANGUAGE: Text\nCODE:\n```\n- update minor and patch for gatsby-transformer-excel [#28973](https://github.com/gatsbyjs/gatsby/issues/28973) ([f95caeb](https://github.com/gatsbyjs/gatsby/commit/f95caeb3051fbc0bb29ab8008c7fdcc78971a8d3))\n```\n\n----------------------------------------\n\nTITLE: Executing Benchmark Script\nDESCRIPTION: This command executes the benchmark script, instructing it to build a site of 1000 pages with a memory allocation of 2GB for Node.js. The script generates pages with pseudo-random content, cleans the Gatsby cache, and runs a Gatsby build.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/benchmarks/gabe-fs-text/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nN=1000 M=2 yarn bench\n```\n\n----------------------------------------\n\nTITLE: Change Directory to Gatsby project\nDESCRIPTION: Changes the current directory in the terminal to the newly created Gatsby project directory.\n\nDependencies: Shell environment.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/porting-an-html-site-to-gatsby.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncd gatsby-site\n```\n\n----------------------------------------\n\nTITLE: Adding Styled-JSX Plugin to Gatsby Config (JavaScript)\nDESCRIPTION: This snippet demonstrates how to add the gatsby-plugin-styled-jsx to the plugins array in your gatsby-config.js file. This is the basic setup required to enable styled-jsx support in your Gatsby project. No dependencies are explicitly required beyond the plugin itself.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-styled-jsx/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nplugins: [`gatsby-plugin-styled-jsx`]\n```\n\n----------------------------------------\n\nTITLE: Fixing Babel Monorepo with Gatsby\nDESCRIPTION: This code snippet shows a bug fix related to updating the Babel monorepo within the Gatsby plugin ecosystem. The fix aims to resolve issues arising from outdated Babel dependencies. It involves updating the relevant packages in the monorepo.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-twitter/CHANGELOG.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nupdate babel monorepo [#37568](https://github.com/gatsbyjs/gatsby/issues/37568) ([13a0a9e](https://github.com/gatsbyjs/gatsby/commit/13a0a9e83dcb015b65dff6b73cdd5dea09c2988f))\n```\n\n----------------------------------------\n\nTITLE: Configuring MDX file extensions\nDESCRIPTION: This configuration specifies the file extensions that `gatsby-plugin-mdx` should process.  Here, both `.mdx` and `.md` files will be treated as MDX files.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-mdx/README.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst config = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-mdx`,\n      options: {\n        extensions: [`.mdx`, `.md`]\\\n      },\n    },\n  ],\n}\n\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Adding React profiling option - gatsby JavaScript\nDESCRIPTION: This snippet introduces a new feature to Gatsby that allows for React profiling. This enables developers to measure and analyze the performance of React components within their Gatsby sites, helping identify bottlenecks and optimize rendering.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-cli/CHANGELOG.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nadd react profiling option ([#21863](https://github.com/gatsbyjs/gatsby/issues/21863)) ([3e8f2c7](https://github.com/gatsbyjs/gatsby/commit/3e8f2c7))\n```\n\n----------------------------------------\n\nTITLE: Chore: Regenerate Changelogs\nDESCRIPTION: Regenerates the changelogs to ensure accuracy and completeness. This ensures that all changes are properly documented. The chore relates to issue #32886.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-google-tagmanager/CHANGELOG.md#_snippet_12\n\nLANGUAGE: None\nCODE:\n```\nre-generate changelogs [#32886](https://github.com/gatsbyjs/gatsby/issues/32886) ([417df15](https://github.com/gatsbyjs/gatsby/commit/417df15230be368a9db91f2ad1a9bc0442733177))\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Themes in gatsby-config.js (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates how to configure multiple Gatsby themes within the `gatsby-config.js` file.  It includes configuration for both `gatsby-theme-notes` and `gatsby-theme-blog`. The `options` parameter allows customizing theme behavior. The order of themes matters when using gatsby-plugin-theme-ui, with the last theme overriding the theme-ui context. The 'resolve' key specifies the theme package, and 'options' allows customization.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/themes/using-multiple-gatsby-themes.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-theme-notes`,\n      options: {\n        mdx: true,\n        basePath: `/notes`,\n      },\n    },\n    // with gatsby-plugin-theme-ui, the last theme in the config\n    // will override the theme-ui context from other themes\n    { resolve: `gatsby-theme-blog` },\n  ],\n  siteMetadata: {\n    title: `Shadowed Site Title`,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Updating semver dependency in gatsby-remark-images-contentful\nDESCRIPTION: This code snippet shows a chore of updating the semver dependency. This keeps the version management library up-to-date, ensuring accurate version comparisons and dependency resolution.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-images-contentful/CHANGELOG.md#_snippet_21\n\nLANGUAGE: None\nCODE:\n```\nupdate semver [#32979](https://github.com/gatsbyjs/gatsby/issues/32979) ([ecf1fa7](https://github.com/gatsbyjs/gatsby/commit/ecf1fa7ef10a60e7631a8f8fad8a33c1d0acaad6))\n```\n\n----------------------------------------\n\nTITLE: Configure gatsby-plugin-no-sourcemaps (JavaScript)\nDESCRIPTION: Configures the gatsby-plugin-no-sourcemaps plugin within your gatsby-config.js file. This involves adding an entry for the plugin to the plugins array in your Gatsby configuration.  This effectively disables sourcemap generation during the Gatsby build process.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-no-sourcemaps/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// gatsby-config.js\nmodule.exports = {\n  // ...\n  plugins: [\n    {\n      resolve: \"gatsby-plugin-no-sourcemaps\",\n    },\n  ],\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Watching Directories and Creating Pages in Gatsby\nDESCRIPTION: Demonstrates how to watch a directory for file changes, validate and filter paths, and create Gatsby pages dynamically. It uses the `watchDirectory`, `validatePath`, `ignorePath`, and `createPath` functions from `gatsby-page-utils` to manage page creation and deletion based on file system events.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-page-utils/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst {\n  createPath,\n  ignorePath,\n  validatePath,\n  watchDirectory,\n} = require(`gatsby-page-utils`)\n\n// ...\n\nconst pagesDirectory = \"/pages\"\nwatchDirectory(\n  pagesDirectory,\n  \"**/*.{js, jsx}\",\n  addedPath => {\n    // Filter out special components that shouldn't be made into\n    // pages.\n    if (!validatePath(addedPath)) {\n      return\n    }\n\n    // Filter out anything matching the given ignore patterns and options\n    if (ignorePath(addedPath, \"*/connexion\")) {\n      return\n    }\n\n    // Create page object\n    const createdPath = createPath(addedPath)\n    const page = {\n      path: createdPath,\n      component: systemPath.join(pagesDirectory, addedPath),\n    }\n\n    // Add page\n    createPage(page)\n  },\n  removedPath => {\n    // Delete the page for the now deleted component.\n    const componentPath = systemPath.join(pagesDirectory, removedPath)\n    store.getState().pages.forEach(page => {\n      if (page.component === componentPath) {\n        deletePage({\n          path: createPath(removedPath),\n          component: componentPath,\n        })\n      }\n    })\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Preventing File Type Expectation\nDESCRIPTION: This snippet prevents the expectation that application/json type nodes should be files. This ensures that nodes with the application/json type are not treated as files, avoiding potential errors or incorrect behavior. It resolves issue #8544.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-json/CHANGELOG.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Updating Gatsby Remark Graphviz (minor/patch)\nDESCRIPTION: This commit updates the minor and patch versions for the `gatsby-remark-graphviz` package. It aims to incorporate the latest features, bug fixes, and improvements from the package.  The related issue is [#28086](https://github.com/gatsbyjs/gatsby/issues/28086).\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-graphviz/CHANGELOG.md#_snippet_9\n\nLANGUAGE: Text\nCODE:\n```\nupdate minor and patch for gatsby-remark-graphviz [#28086](https://github.com/gatsbyjs/gatsby/issues/28086) ([b30ad09](https://github.com/gatsbyjs/gatsby/commit/b30ad09f53b145eacb95961110e01fe18b846e94))\n```\n\n----------------------------------------\n\nTITLE: Creating a Gatsby Page with Contentstack Data\nDESCRIPTION: This JSX code creates a Gatsby page that displays the title of the 'Home' content type fetched from Contentstack using GraphQL. It imports React and the graphql function from Gatsby.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/sourcing-from-contentstack.md#_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\nimport React from \"react\"\nimport { graphql } from \"gatsby\"\n\nexport default function Home({ data }) {\n  return (\n    <div>\n      <h1>{data.contentstackHome.title}</h1>\n    </div>\n  )\n}\n\nexport const pageQuery = graphql`\n  query HomeQuery {\n    contentstackHome {\n      title\n    }\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: Installing Gatsby Latest Version Using npm with Legacy Peer Deps\nDESCRIPTION: This snippet shows the command to install the latest version of Gatsby using npm when you are using npm 7. The `--legacy-peer-deps` flag is included to avoid peer dependency issues.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v2-to-v3.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install gatsby@latest --legacy-peer-deps\n```\n\n----------------------------------------\n\nTITLE: Developing a Gatsby Site with Network Access (Shell)\nDESCRIPTION: This command compiles and serves a development build of your Gatsby site accessible from other devices on the same network by specifying the host as 0.0.0.0. This allows testing the site on multiple devices without deploying to a server.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/gatsby-cli.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ngatsby develop -H 0.0.0.0\n```\n\n----------------------------------------\n\nTITLE: Fixing idb-keyval version import\nDESCRIPTION: This commit fixes an issue where the idb-keyval dependency was not being versioned correctly in gatsby-plugin-offline. This change ensures that a specific version of idb-keyval is used, preventing potential compatibility issues and improving the stability of the plugin.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-offline/CHANGELOG.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n13aaa16\n```\n\n----------------------------------------\n\nTITLE: HTML token styling example\nDESCRIPTION: This HTML code demonstrates how prismJS wraps the matched tokens with a span element and gives it the classes token and the token name you defined.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-prismjs/README.md#_snippet_18\n\nLANGUAGE: HTML\nCODE:\n```\n<span class=\"token superscript_keywords\">superif</span>\n```\n\n----------------------------------------\n\nTITLE: Applying Patches for v4 in GatsbyJS\nDESCRIPTION: This snippet describes a chore to apply patches for version 4 of GatsbyJS. Applying patches ensures that the codebase is up-to-date with necessary fixes and improvements. This helps maintain stability and address known issues in the specified version.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-excel/CHANGELOG.md#_snippet_12\n\nLANGUAGE: None\nCODE:\n```\napply patches for v4 [#33170](https://github.com/gatsbyjs/gatsby/issues/33170) ([f8c5141](https://github.com/gatsbyjs/gatsby/commit/f8c5141bf72108a53338fd01514522ae7a1b37bf))\n```\n\n----------------------------------------\n\nTITLE: Updating fs-extra dependency in gatsby-plugin-page-creator\nDESCRIPTION: This snippet updates the fs-extra dependency to version ^11.2.0. fs-extra is a module providing extra file system utility methods, and this update aims to incorporate the latest features and fixes.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-page-creator/CHANGELOG.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nupdate dependency fs-extra to ^11.2.0 [#38727](https://github.com/gatsbyjs/gatsby/issues/38727) ([cb33fe5](https://github.com/gatsbyjs/gatsby/commit/cb33fe5d02b3a42cf629baf948a7aae7a9e7dd0f))\n```\n\n----------------------------------------\n\nTITLE: Use StaticImage Component in Index Page\nDESCRIPTION: This code snippet demonstrates how to use the `StaticImage` component from `gatsby-plugin-image` to add an image to the home page. It imports the component, specifies the image `src` and `alt` text, and renders it within the `IndexPage` component. The `src` attribute points to an external image URL.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-3/index.mdx#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react'\nimport Layout from '../components/layout'\nimport { StaticImage } from 'gatsby-plugin-image' // highlight-line\n\nconst IndexPage = () => {\n  return (\n    <Layout pageTitle=\"Home Page\">\n      <p>I'm making this by following the Gatsby Tutorial.</p>\n      {/* highlight-start */}\n      <StaticImage\n        alt=\"Clifford, a reddish-brown pitbull, posing on a couch and looking stoically at the camera\"\n        src=\"https://pbs.twimg.com/media/E1oMV3QVgAIr1NT?format=jpg&name=large\"\n      />\n      {/* highlight-end */}\n    </Layout>\n  )\n}\n\nexport const Head = () => <title>Home Page</title>\n\nexport default IndexPage\n```\n\n----------------------------------------\n\nTITLE: Interactive Footer Client Component Example\nDESCRIPTION: Illustrates a client component, `Footer`, that utilizes React's `useEffect` hook for client-side operations, such as fetching data.  The `'use client'` directive marks it as a client component. This example fetches data on the client and displays it in a footer.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/performance/partial-hydration.md#_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\n\"use client\"\n\nimport * as React from \"react\"\n\nconst Footer = () => {\n  React.useEffect(() => {\n    // do fetching stuff\n  })\n\n  return (\n    <footer>My Tweets</footer>\n  )\n}\n\nexport default Footer\n```\n\n----------------------------------------\n\nTITLE: Displaying dynamic images with GatsbyImage component\nDESCRIPTION: Shows how to display a dynamic image using the `GatsbyImage` component, with GraphQL to query the data. It imports `GatsbyImage` and `getImage` from `gatsby-plugin-image`, retrieves the image data using `getImage()`, and passes it to the `image` prop of `GatsbyImage`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/images-and-media/using-gatsby-plugin-image.md#_snippet_7\n\nLANGUAGE: JSX\nCODE:\n```\nimport { graphql } from \"gatsby\"\n// highlight-next-line\nimport { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\nfunction BlogPost({ data }) {\n  // highlight-next-line\n  const image = getImage(data.blogPost.avatar)\n  return (\n    <section>\n      <h2>{data.blogPost.title}</h2>\n      {/* highlight-next-line */}\n      <GatsbyImage image={image} alt={data.blogPost.author} />\n      <p>{data.blogPost.body}</p>\n    </section>\n  )\n}\n\nexport const pageQuery = graphql`\n  query ($id: String) {\n    blogPost(id: { eq: $id }) {\n      title\n      body\n      author\n      avatar {\n        childImageSharp {\n          gatsbyImageData(\n            width: 200\n            placeholder: BLURRED\n            formats: [AUTO, WEBP, AVIF]\n          )\n        }\n      }\n    }\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: Gatsby BlogPost Component with Data\nDESCRIPTION: This JavaScript code snippet shows a Gatsby BlogPost component that receives data from the page query as a `data` prop and MDX content as a `children` prop.  The component renders the title, date, and MDX content within a Layout component.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-6/index.mdx#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react'\nimport { graphql } from 'gatsby'\nimport Layout from '../../components/layout'\nimport Seo from '../../components/seo'\n\nconst BlogPost = ({ data, children }) => { // highlight-line\n  return (\n    {/* highlight-start */}\n    <Layout pageTitle={data.mdx.frontmatter.title}>\n      <p>{data.mdx.frontmatter.date}</p>\n      {children}\n    {/* highlight-end */}\n    </Layout>\n  )\n}\n\nexport const query = graphql`\n  query ($id: String) {\n    mdx(id: {eq: $id}) {\n      frontmatter {\n        title\n        date(formatString: \"MMMM D, YYYY\")\n      }\n    }\n  }\n`\n\n// highlight-next-line\nexport const Head = ({ data }) => <Seo title={data.mdx.frontmatter.title} />\n\nexport default BlogPost\n```\n\n----------------------------------------\n\nTITLE: Styling Art Directed Images with CSS in Gatsby\nDESCRIPTION: This CSS snippet demonstrates how to adjust the aspect ratio of art-directed images using CSS media queries. When the screen size matches the media query (in this case, less than 1024px), the width and height of the container `.art-directed` are adjusted, effectively changing the aspect ratio. This works in conjunction with the `withArtDirection` function to provide a visually consistent experience across different screen sizes.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/built-in-components/gatsby-plugin-image.md#_snippet_12\n\nLANGUAGE: CSS\nCODE:\n```\n@media screen and (max-width: 1024px) {\n  .art-directed {\n    width: 400px;\n    height: 300px;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Gatsby Customer Case Study Template\nDESCRIPTION: This React component serves as a template for displaying individual customer case study pages. It receives data from a GraphQL query and renders the page content, including the SEO title, headline, customer logo, and testimonial.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/sourcing-from-buttercms.md#_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\"\nimport { graphql } from \"gatsby\"\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\n\nfunction CustomerCaseStudy({ data }) {\n  const page = data.allButterPage.edges[0].node\n\n  return (\n    <Layout>\n      <SEO title={page.facebook_open_graph_title} description={page.headline} />\n      <div>\n        <h1>{page.seo_title}</h1>\n        <p>{page.headline}</p>\n        <img alt=\"customer_logo\" src={page.customer_logo} />\n        <p>{page.testimonial}</p>\n      </div>\n    </Layout>\n  )\n}\n\nexport const pageQuery = graphql`\n  query CaseStudyPageBySlug($slug: String!) {\n    allButterPage(filter: { slug: { eq: $slug } }) {\n      edges {\n        node {\n          id\n          slug\n          facebook_open_graph_title\n          seo_title\n          headline\n          testimony\n          customer_logo\n        }\n      }\n    }\n  }\n`\n\nexport default CustomerCaseStudy\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Query Field with Arguments in gatsby-node.js\nDESCRIPTION: This code snippet shows how to add a custom root query field called `contributors` that accepts an argument `receivedSwag` to filter contributors based on whether they have received swag or not.  The `args` configuration defines the expected GraphQL argument. It uses `context.nodeModel.findAll` with a filter that uses the argument value.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/graphql-data-layer/schema-customization.md#_snippet_38\n\nLANGUAGE: js\nCODE:\n```\nexports.createResolvers = ({ createResolvers }) => {\n  const resolvers = {\n    Query: {\n      contributors: {\n        type: [\"ContributorJson\"],\n        args: {\n          receivedSwag: \"Boolean!\",\n        },\n        resolve: async (source, args, context, info) => {\n          const { entries } = await context.nodeModel.findAll({\n            query: {\n              filter: {\n                receivedSwag: { eq: args.receivedSwag },\n              },\n            },\n            type: \"ContributorJson\",\n          })\n\n          return entries\n        },\n      },\n    },\n  }\n  createResolvers(resolvers)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing useClickOutside Hook in React\nDESCRIPTION: This React hook, `useClickOutside`, detects clicks outside of a specified component. It takes a React ref and a callback function as arguments. When a click occurs outside the referenced element, the callback function is executed. It utilizes `useEffect` to add and remove event listeners for `mousedown` and `touchstart` events.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/adding-search-with-algolia.md#_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useEffect } from \"react\"\n\nconst events = [`mousedown`, `touchstart`]\n\nconst useClickOutside = (ref, onClickOutside) => {\n  const isOutside = element => !ref.current || !ref.current.contains(element)\n\n  const onClick = event => {\n    if (isOutside(event.target)) {\n      onClickOutside()\n    }\n  }\n\n  useEffect(() => {\n    for (const event of events) {\n      document.addEventListener(event, onClick)\n    }\n\n    return () => {\n      for (const event of events) document.removeEventListener(event, onClick)\n    }\n  })\n}\n\nexport default useClickOutside\n```\n\n----------------------------------------\n\nTITLE: Render Title and Date on Blog page\nDESCRIPTION: This snippet shows how to modify the JSX in the Blog page component to render the title and date of each blog post using the data fetched from the GraphQL query. It uses the `<article>` tag and includes a `key` prop for proper React rendering.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-5/index.mdx#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n// imports\n\nconst BlogPage = ({ data }) => {\n  return (\n    <Layout pageTitle=\"My Blog Posts\">\n      {/* highlight-start */}\n      {\n        data.allMdx.nodes.map((node) => (\n          <article key={node.id}>\n            <h2>{node.frontmatter.title}</h2>\n            <p>Posted: {node.frontmatter.date}</p>\n          </article>\n        ))\n      }\n      {/* highlight-end */}\n    </Layout>\n  )\n}\n\nexport const query = graphql`\n  query {\n    allMdx(sort: { frontmatter: { date: DESC }}) {\n      nodes {\n        frontmatter {\n          title\n          date(formatString: \"MMMM DD, YYYY\")\n        }\n        id\n        excerpt\n      }\n    }\n  }\n`\n\nexport const Head = () => <Seo title=\"My Blog Posts\" />\n\nexport default BlogPage\n```\n\n----------------------------------------\n\nTITLE: Save Timestamp to Cache - TypeScript\nDESCRIPTION: This snippet generates a timestamp before fetching data and saves it to the cache after a successful fetch operation using `cache.set`. Saving the timestamp ensures that the plugin knows when the data was last fetched, enabling potential delta updates in the future. The timestamp is stored using the defined `CACHE_KEYS.Timestamp`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/creating-a-source-plugin/part-4/index.mdx#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n// Imports\n\nexport const sourceNodes: GatsbyNode[`sourceNodes`] = async (gatsbyApi) => {\n  // Rest of sourceNodes\n\n  // highlight-next-line\n  const lastFetchedDateCurrent = Date.now()\n\n  const { data, errors } = await fetchGraphQL<IApiResponse>(/* Query */)\n\n  if (errors) {\n    sourcingTimer.panicOnBuild({\n      id: ERROR_CODES.GraphQLSourcing,\n      context: {\n        sourceMessage: `Sourcing from the GraphQL API failed`,\n        graphqlError: errors[0].message,\n      },\n    })\n\n    return\n  }\n\n  // highlight-next-line\n  await cache.set(CACHE_KEYS.Timestamp, lastFetchedDateCurrent)\n\n  // Rest of sourceNodes\n}\n\n// Rest of file\n```\n\n----------------------------------------\n\nTITLE: Integrating customCreateNodeManifest in sourceNodes (TypeScript)\nDESCRIPTION: This code snippet illustrates how to integrate the `customCreateNodeManifest` function within the `sourceNodes` API. It shows how to iterate through sourced data, create Gatsby nodes, and conditionally call `customCreateNodeManifest` for eligible nodes (e.g., entry nodes) to enable Content Sync features.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/creating-a-source-plugin/part-7/index.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { customCreateNodeManifest } from \"./utils\"\n\nexport const sourceNodes = async (\n  { actions }\n) => {\n  const { unstable_createNodeManifest, createNode } = actions\n\n  // Sourcing data, modifying it, setting up \"nodes\"\n\n  nodes.forEach(node => {\n    const gatsbyNode = createNode(node)\n\n    // Some conditional\n    const nodeIsEntryNode = true\n\n    if (nodeIsEntryNode) {\n      customCreateNodeManifest({\n        attributes: node,\n        gatsbyNode,\n        unstable_createNodeManifest,\n      })\n    }\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Porting a Page with Layout and Head component\nDESCRIPTION: This code illustrates porting an HTML page to Gatsby, using the Layout component to maintain consistent structure. It includes a heading, subheading, and an image with alt text. The `Head` component is used to define the page title and favicon.  It converts an HTML page representing an employee bio to a Gatsby component.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/porting-an-html-site-to-gatsby.md#_snippet_13\n\nLANGUAGE: JSX\nCODE:\n```\nimport React from \"react\"\nimport { Link } from \"gatsby\"\nimport Layout from \"../components/layout\"\n\nexport default function EllaArborist() {\n  return (\n    <Layout>\n      <h1>Ella - Arborist</h1>\n      <h2>Ella is an excellent Arborist. We guarantee it.</h2>\n      <div className=\"bio-card\">\n        <img\n          alt=\"Comically crude stick person sketch\"\n          src=\"/person.png\"\n        />\n        <p>Ella</p>\n      </div>\n    </Layout>\n  );\n}\n\nexport const Head = () => (\n  <>\n    <title>Taylor's Tidy Trees - Who We Are - Ella</title>\n    <link href=\"/favicon.ico\" rel=\"shortcut icon\" type=\"image/x-icon\" />\n  </>\n)\n```\n\n----------------------------------------\n\nTITLE: Flex Page Component with Conditional Rendering\nDESCRIPTION: This code snippet showcases a FlexPage component that conditionally renders different components based on the `type` property of elements within a `components` array. This is a common pattern in headless CMS setups where content editors can define page layouts.  The components Header, Text and Carousel need to be defined.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/using-loadable-components/README.md#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// src/components/flex-page.jsx\nimport * as React from \"react\"\n\nconst FlexPage = ({ components }) => {\n  return (\n    <>\n      {components.map(component => {\n        switch (component.type) {\n          case \"header\":\n            return <Header {...component} />\n          case \"text\":\n            return <Text {...component} />\n          case \"carousel\":\n            return <Carousel {...component} />\n          default:\n            return <div>empty</div>\n        }\n      })}\n    </>\n  )\n}\n\nexport default FlexPage\n```\n\n----------------------------------------\n\nTITLE: Defining Endpoint Validation in plugin-options-schema.ts (TypeScript)\nDESCRIPTION: This code snippet defines the validation schema for the `endpoint` option in `plugin-options-schema.ts`. It uses Joi to specify that the `endpoint` must be a string, a valid URI, and is required, along with a description.  Requires the `gatsby` and `gatsby-plugin-utils` packages.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/creating-a-source-plugin/part-4/index.mdx#_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { GatsbyNode } from \"gatsby\"\nimport type { ObjectSchema } from \"gatsby-plugin-utils\"\n\nexport const pluginOptionsSchema: GatsbyNode[\"pluginOptionsSchema\"] = ({\n  Joi,\n}): ObjectSchema => {\n  return Joi.object({\n    // highlight-start\n    endpoint: Joi.string()\n      .uri()\n      .required()\n      .description(`The endpoint of your GraphQL API`),\n    // highlight-end\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Define Cache Keys in Constants - TypeScript\nDESCRIPTION: This snippet defines constants for cache keys used in the plugin. Defining cache keys as constants minimizes the risk of typos and improves code maintainability. This ensures consistency when setting and retrieving values from the cache.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/creating-a-source-plugin/part-4/index.mdx#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nexport const NODE_TYPES = {\n  Post: `Post`,\n  Author: `Author`,\n} as const\n\nexport const ERROR_CODES = {\n  GraphQLSourcing: `10000`,\n} as const\n\n// highlight-start\nexport const CACHE_KEYS = {\n  Timestamp: `timestamp`,\n} as const\n// highlight-end\n```\n\n----------------------------------------\n\nTITLE: Move away from old default UUID\nDESCRIPTION: This commit migrates away from using an older default UUID generation method in the gatsby-telemetry package. The change is aimed at adopting a more robust or standard approach to generating unique identifiers.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-telemetry/CHANGELOG.md#_snippet_15\n\n\n\n----------------------------------------\n\nTITLE: Updating Minor Updates in Packages (JavaScript)\nDESCRIPTION: This snippet updates minor dependencies within the project. Keeping dependencies up-to-date typically includes bug fixes and incremental improvements. This contributes to the overall stability and security of the `gatsby-transformer-sharp` package.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-sharp/CHANGELOG.md#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nb692879\n```\n\n----------------------------------------\n\nTITLE: Update Peer Dependencies JavaScript\nDESCRIPTION: This snippet reflects the update of peer dependencies for the package. Updating peer dependencies ensures compatibility with other packages in the ecosystem.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-canonical-urls/CHANGELOG.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nUpdate peerDeps [#36965](https://github.com/gatsbyjs/gatsby/issues/36965) ([b624442](https://github.com/gatsbyjs/gatsby/commit/b6244424fe8b724cbc23b80b2b4f5424cc2055a4))\n```\n\n----------------------------------------\n\nTITLE: Updating Babel Monorepo\nDESCRIPTION: Updates the Babel monorepo to the latest version. This is a chore that updates the Babel dependencies used by the gatsby-plugin-stylus package.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-stylus/CHANGELOG.md#_snippet_6\n\n\n\n----------------------------------------\n\nTITLE: Fixing Bluebird Dependency in gatsby-source-lever\nDESCRIPTION: This code snippet shows the commit hash for updating the bluebird dependency to version ^3.5.5 in the gatsby-source-lever package. This update addresses potential issues or vulnerabilities in older versions of the bluebird promise library.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-lever/CHANGELOG.md#_snippet_17\n\nLANGUAGE: Text\nCODE:\n```\nupdate dependency bluebird to ^3.5.5 ([#16825](https://github.com/gatsbyjs/gatsby/issues/16825)) ([ec0be83](https://github.com/gatsbyjs/gatsby/commit/ec0be83))\n```\n\n----------------------------------------\n\nTITLE: Creating Nodes in createResolvers (Old Way)\nDESCRIPTION: This code demonstrates the old way of creating a node inside a resolver function within the `createResolvers` API.  It fetches a remote file node using `createRemoteFileNode`.  This approach is no longer allowed in Gatsby 4; node creation must occur in `sourceNodes` or `onCreateNode`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-source-plugin-from-v3-to-v4.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexports.createResolvers = ({ // highlight-line\n  createNodeId,\n  actions,\n  createResolvers,\n  store,\n  cache,\n  reporter,\n}) => {\n  createResolvers({\n    CustomImage: {\n      localImage: {\n        type: \"File!\",\n        resolve: async (source, args, context, info) => {\n          return createRemoteFileNode({ // highlight-line\n            url: source.url,\n            parentNodeId: source.id,\n            store,\n            cache,\n            createNode: actions.createNode,\n            createNodeId,\n            reporter,\n          })\n        },\n      },\n    },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Index Page Example\nDESCRIPTION: This is an example of a basic HTML index page structure, demonstrating common elements like header, navigation, and main content. It includes links to other pages on the site and provides the overall layout before being converted to a Gatsby component.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/porting-an-html-site-to-gatsby.md#_snippet_8\n\nLANGUAGE: HTML\nCODE:\n```\n<html lang=\"en\">\n  <head>\n    <title>Taylor's Tidy Trees - Who We Are</title>\n    <link href=\"/assets/favicon.ico\" rel=\"shortcut icon\" type=\"image/x-icon\" />\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"/assets/normalize.css\" />\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"/assets/style.css\" />\n  </head>\n  <body>\n    <header>\n      <a href=\"/\" class=\"brand-color logo-text\">Taylor's Tidy Trees</a>\n      <nav>\n        <ul>\n          <li><a href=\"/about.html\">About</a></li>\n          <li><a href=\"/services/index.html\">Services</a></li>\n          <li><a href=\"/index.html\">Who We Are</a></li>\n          <li><a href=\"/contact.html\">Contact</a></li>\n        </ul>\n      </nav>\n    </header>\n    <main>\n      <h1>Who We Are</h1>\n      <h2>These are our staff:</h2>\n      <ul>\n        <li><a href=\"/who/ella-arborist.html\">Ella (Arborist)</a></li>\n        <li><a href=\"/who/sam-surgeon.html\">Sam (Tree Surgeon)</a></li>\n        <li><a href=\"/who/marin-leafer.html\">Marin (Leafer)</a></li>\n      </ul>\n    </main>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Bumping Babel Minor - JavaScript\nDESCRIPTION: This snippet bumps the babel minor version for the gatsby-plugin-benchmark-reporting package. It relates to issues #31857 and #31859 on GitHub.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-benchmark-reporting/CHANGELOG.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nbump babel minor [#31857](https://github.com/gatsbyjs/gatsby/issues/31857) [#31859](https://github.com/gatsbyjs/gatsby/issues/31859) ([8636025](https://github.com/gatsbyjs/gatsby/commit/863602567930a39142ed33d9d1f1813b7dec8686))\n```\n\n----------------------------------------\n\nTITLE: Fix: Updating Plugin Schema Testing Util\nDESCRIPTION: This snippet refers to a bug fix related to updating the plugin schema testing utility and associated tests within the gatsby-remark-images plugin. It addresses issues related to schema validation and testing, ensuring the plugin functions correctly with the updated schema.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-images/CHANGELOG.md#_snippet_0\n\nLANGUAGE: N/A\nCODE:\n```\nUpdate plugin schema testing util and associated tests ([#27574](https://github.com/gatsbyjs/gatsby/issues/27574)) ([6d81283](https://github.com/gatsbyjs/gatsby/commit/6d81283e4f47ae2cb571626bf4d02fcd2c9d1af4))\n```\n\n----------------------------------------\n\nTITLE: Using TransitionState with react-pose\nDESCRIPTION: This JSX snippet uses the `TransitionState` component to provide transition-related props to a child component, specifically the `Box` component.  It uses `react-pose` to create a fade-in/fade-out animation based on the mounting state of the page.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/adding-common-features/adding-page-transitions-with-plugin-transition-link.md#_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport { TransitionState } from \"gatsby-plugin-transition-link\"\n\nconst Box = posed.div({\n  hidden: { opacity: 0 },\n  visible: { opacity: 1 },\n})\n\n<TransitionState>\n      {({ transitionStatus, exit, entry, mount }) => {\n        console.log(\"current page's transition status is\", transitionStatus)\n        console.log(\"exit object is\", exit)\n        console.log(\"entry object is\", entry)\n\n        return (\n            <Box\n              className=\"box\"\n              pose={\n                mount // this is true while the page is mounting or has mounted\n                  ? 'visible'\n                  : 'hidden'\n              }\n            />\n        )\n      }}\n</TransitionState>\n```\n\n----------------------------------------\n\nTITLE: Fixing Babel Monorepo Issue in gatsby-plugin-styled-jsx\nDESCRIPTION: This commit updates the babel monorepo to address issue #37568. This fix ensures compatibility and stability within the gatsby-plugin-styled-jsx package by using the latest babel packages.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-styled-jsx/CHANGELOG.md#_snippet_0\n\nLANGUAGE: Other\nCODE:\n```\nupdate babel monorepo [#37568](https://github.com/gatsbyjs/gatsby/issues/37568) ([13a0a9e](https://github.com/gatsbyjs/gatsby/commit/13a0a9e83dcb015b65dff6b73cdd5dea09c2988f))\n```\n\n----------------------------------------\n\nTITLE: Conditional Logic with isFirstSource TypeScript\nDESCRIPTION: Implements a conditional block using the `isFirstSource` variable. The code within this block will only execute during the first run of the source plugin. After execution, the `isFirstSource` variable is set to `false`, preventing the code from running again on subsequent builds.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/creating-a-source-plugin/part-5/index.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Imports\n\nlet isFirstSource = true\n\nexport const sourceNodes: GatsbyNode[`sourceNodes`] = async (gatsbyApi) => {\n  const { actions, reporter, cache, getNodes } = gatsbyApi\n  const { touchNode } = actions\n  const { endpoint } = pluginOptions\n\n  const sourcingTimer = reporter.activityTimer(`Sourcing from plugin API`)\n  sourcingTimer.start()\n\n  // highlight-start\n  if (isFirstSource) {\n    // Do something on first source\n\n    isFirstSource = false\n  }\n  // highlight-end\n\n  // Rest of sourceNodes\n}\n\n// Rest of file\n```\n\n----------------------------------------\n\nTITLE: Fixing File Paths in gatsby-plugin-subfont\nDESCRIPTION: This commit fixes a bug in the gatsby-plugin-subfont that was related to improperly escaped file paths. The fix ensures that file paths are properly escaped.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-subfont/CHANGELOG.md#_snippet_6\n\nLANGUAGE: Text\nCODE:\n```\n- **gatsby-plugin-subfont:** escape file paths ([#12905](https://github.com/gatsbyjs/gatsby/issues/12905)) ([2133288](https://github.com/gatsbyjs/gatsby/commit/2133288)), closes [#12702](https://github.com/gatsbyjs/gatsby/issues/12702)\n```\n\n----------------------------------------\n\nTITLE: Adding Error Codes and Structured Errors to gatsby-cli JavaScript\nDESCRIPTION: This snippet introduces error codes and structured errors in gatsby-cli. The addition of error codes makes it easier to identify and diagnose specific issues. Structured errors provide more context and details about the error, allowing developers to quickly resolve problems.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-cli/CHANGELOG.md#_snippet_19\n\nLANGUAGE: JavaScript\nCODE:\n```\nd26651e\n```\n\n----------------------------------------\n\nTITLE: Install Certutil on OpenSUSE\nDESCRIPTION: This command installs the `certutil` utility on OpenSUSE using `zypper`.  `certutil` is required for updating the trust store for browsers like Firefox and Chrome so they trust the local development certificate.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/local-https.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nsudo zypper install mozilla-nss-tools\n```\n\n----------------------------------------\n\nTITLE: Broadening Webpack support in gatsby-plugin-typescript\nDESCRIPTION: This commit broadens the webpack support for gatsby-plugin-typescript. This ensures that the plugin is compatible with a wider range of webpack configurations, enhancing its usability in diverse Gatsby projects and resolving potential compatibility issues.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-typescript/CHANGELOG.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n**gatsby-plugin-typescript:** Broader webpack support ([#22003](https://github.com/gatsbyjs/gatsby/issues/22003)) ([4b93826](https://github.com/gatsbyjs/gatsby/commit/4b93826))\n```\n\n----------------------------------------\n\nTITLE: Check Gatsby Node Lifecycle Support in Plugins (gatsby-node.js)\nDESCRIPTION: This code snippet demonstrates how to use `gatsby-plugin-utils` to determine if the `onPluginInit` lifecycle method is supported in the current Gatsby version. It dynamically assigns either the stable or unstable version of `onPluginInit` based on the Gatsby version. It includes error handling for cases where `gatsby-plugin-utils` is not installed or cannot be accessed.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-source-plugin-from-v3-to-v4.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nlet coreSupportsOnPluginInit: \"unstable\" | \"stable\" | undefined\n\ntry {\n  const { isGatsbyNodeLifecycleSupported } = require(`gatsby-plugin-utils`)\n  if (isGatsbyNodeLifecycleSupported(`onPluginInit`)) {\n    coreSupportsOnPluginInit = \"stable\"\n  } else if (isGatsbyNodeLifecycleSupported(`unstable_onPluginInit`)) {\n    coreSupportsOnPluginInit = \"unstable\"\n  } else {}\n} catch (e) {\n  console.error(`Could not check if Gatsby supports onPluginInit lifecycle`)\n}\n\nconst ERROR_MAP = {\n  [CODES.Generic]: {\n    text: context => context.sourceMessage,\n    level: `ERROR`,\n    type: `PLUGIN`,\n  },\n  [CODES.MissingResource]: {\n    text: context => context.sourceMessage,\n    level: `ERROR`,\n    type: `PLUGIN`,\n    category: `USER`,\n  },\n}\n\nconst initializePlugin = ({ reporter }) => {\n  if (reporter.setErrorMap) {\n    reporter.setErrorMap(ERROR_MAP)\n  }\n}\n\n// need to conditionally export otherwise it throws an error for older versions\nif (coreSupportsOnPluginInit === \"stable\") {\n  exports.onPluginInit = initializePlugin // highlight-line\n} else if (coreSupportsOnPluginInit === \"unstable\") {\n  exports.unstable_onPluginInit = initializePlugin // highlight-line\n} else {\n  exports.onPreInit = initializePlugin // highlight-line\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Babel Monorepo (Chore)\nDESCRIPTION: This commit updates the Babel monorepo to the latest versions as a chore. Updating Babel ensures compatibility and access to the latest features and bug fixes in the Babel ecosystem. It addresses issue #37386.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-cypress/CHANGELOG.md#_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Creating a Slice with Gatsby API\nDESCRIPTION: This code snippet demonstrates how to create a slice using the `createSlice` action in Gatsby's `createPages` API. It defines a slice with a specific ID and associates it with a component.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/v4.23/index.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nactions.createSlice({\n  id: `footer`,\n  component: require.resolve(`./src/components/footer.js`),\n})\n```\n\n----------------------------------------\n\nTITLE: Dropping custom innerRef typing in Gatsby Link\nDESCRIPTION: This commit removes the custom innerRef typing in gatsby-link and reuses the one from @reach/router. This simplifies the code and ensures consistency with @reach/router. Issue #22770 tracks this change.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-link/CHANGELOG.md#_snippet_6\n\n\n\n----------------------------------------\n\nTITLE: Initializing activityTimer in sourceNodes - TypeScript\nDESCRIPTION: Initializes an `activityTimer` instance using the Gatsby reporter API within the `sourceNodes` function. This timer is used to track the sourcing process from the plugin API. The timer is initialized with a descriptive message indicating the task being performed.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/creating-a-source-plugin/part-4/index.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Imports\n\nexport const sourceNodes: GatsbyNode[`sourceNodes`] = async (gatsbyApi) => {\n  const { reporter } = gatsbyApi\n\n  const sourcingTimer = reporter.activityTimer(`Sourcing from plugin API`)\n\n  // Rest of sourceNodes\n}\n\n// Rest of file\n```\n\n----------------------------------------\n\nTITLE: GraphQL query for timeToRead field\nDESCRIPTION: GraphQL query to retrieve the `timeToRead` field and its properties (minutes, text, time, words) from the MDX node.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-mdx/README.md#_snippet_10\n\nLANGUAGE: GraphQL\nCODE:\n```\nquery {\n  mdx {\n    fields {\n      timeToRead {\n        minutes\n        text\n        time\n        words\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring webpack for node APIs in Gatsby\nDESCRIPTION: This snippet demonstrates how to configure webpack to handle node APIs (like `path` or `fs`) that may be required by some components.  Webpack 5 no longer automatically polyfills these APIs, so they need to be manually configured.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v2-to-v3.md#_snippet_21\n\nLANGUAGE: diff\nCODE:\n```\nexports.onCreateWebpackConfig = ({ actions }) => {\n  actions.setWebpackConfig({\n-    node: {\n-      fs: \"empty\",\n-      path: \"mock\",\n-    },\n+    resolve: {\n+       alias: {\n+          path: require.resolve(\"path-browserify\")\n+       },\n+       fallback: {\n+         fs: false,\n+       }\n+    }\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Events Template Component (events.js)\nDESCRIPTION: This snippet defines a placeholder React component for the events template. It renders a paragraph indicating that the component needs to be built.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/building-a-theme.md#_snippet_23\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\"\n\nconst EventsTemplate = () => <p>TODO: Build the events page template</p>\n\nexport default EventsTemplate\n```\n\n----------------------------------------\n\nTITLE: Ensuring Consistent Schema and Adding TypeScript Support in Gatsby\nDESCRIPTION: This commit ensures a consistent schema for `gatsby-plugin-documentationjs` and adds TypeScript support. It aligns the plugin with TypeScript and ensures that the schema used for documentation generation remains consistent.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-documentationjs/CHANGELOG.md#_snippet_20\n\nLANGUAGE: JavaScript\nCODE:\n```\n**gatsby-plugin-documentationjs:** Ensure a consistent schema for gatsby-plugin-documentationjs and add TypeScript support ([#13692](https://github.com/gatsbyjs/gatsby/issues/13692)) ([950b9d6](https://github.com/gatsbyjs/gatsby/commit/950b9d6))\n```\n\n----------------------------------------\n\nTITLE: Updating minor packages in Gatsby\nDESCRIPTION: This commit updates minor versions of packages within the Gatsby project, excluding react, babel, and eslint.  This ensures dependencies are up-to-date with the latest bug fixes and improvements, enhancing project stability and security.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-codemods/CHANGELOG.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nupdate minor updates in packages except react, babel and eslint ([#17254](https://github.com/gatsbyjs/gatsby/issues/17254)) ([252d867](https://github.com/gatsbyjs/gatsby/commit/252d867))\n```\n\n----------------------------------------\n\nTITLE: Querying Stripe Prices with GraphQL (JSX)\nDESCRIPTION: This React component uses a `StaticQuery` to fetch Stripe prices using GraphQL. It filters for active prices and sorts them by unit amount.  The query retrieves the price ID, active status, currency, unit amount, and associated product name. Requires Gatsby and GraphQL.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/ecommerce-tutorial/index.md#_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\"\nimport { graphql, StaticQuery } from \"gatsby\"\n\nexport default function Products(props) {\n  return (\n    <StaticQuery\n      query={graphql`\n        query ProductPrices {\n          prices: allStripePrice(\n            filter: { active: { eq: true } }\n            sort: { fields: [unit_amount] }\n          ) {\n            edges {\n              node {\n                id\n                active\n                currency\n                unit_amount\n                product {\n                  id\n                  name\n                }\n              }\n            }\n          }\n        }\n      `}\n      render={({ prices }) => (\n        <div>\n          {prices.edges.map(({ node: price }) => (\n            <p key={price.id}>{price.product.name}</p>\n          ))}\n        </div>\n      )}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Gatsby Configuration\nDESCRIPTION: A basic JavaScript object that exports the module. This object will contain the configuration for the Gatsby site, such as site metadata and plugins.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/config-files/gatsby-config.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  //configuration object\n}\n```\n\n----------------------------------------\n\nTITLE: Using defer prop in Helmet component\nDESCRIPTION: This shows how to use the `defer` prop in the `Helmet` component to work around an issue with `gatsby-plugin-offline`.  Setting `defer={false}` ensures that the title appears in the tab bar even when opening a link in the background.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-react-helmet/README.md#_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<Helmet title=\"foo bar\" defer={false} />\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query Result for XML Data\nDESCRIPTION: This is the result of the GraphQL query to get the data from the xml. The query gets the book information, author, title, genre, etc. Each field comes from the XML file.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-xml/README.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"data\": {\n    \"allBooksXml\": {\n      \"edges\": [\n        {\n          \"node\": {\n            \"name\": \"book\",\n            \"xmlChildren\": [\n              {\n                \"name\": \"author\",\n                \"content\": \"Gambardella, Matthew\"\n              },\n              {\n                \"name\": \"title\",\n                \"content\": \"XML Developer's Guide\"\n              },\n              {\n                \"name\": \"genre\",\n                \"content\": \"Computer\"\n              },\n              {\n                \"name\": \"price\",\n                \"content\": \"44.95\"\n              },\n              {\n                \"name\": \"publish_date\",\n                \"content\": \"2000-10-01\"\n              },\n              {\n                \"name\": \"description\",\n                \"content\": \"An in-depth look at creating applications\\n      with XML.\"\n              }\n            ]\n          }\n        },\n        {\n          \"node\": {\n            \"name\": \"book\",\n            \"xmlChildren\": [\n              {\n                \"name\": \"author\",\n                \"content\": \"Ralls, Kim\"\n              },\n              {\n                \"name\": \"title\",\n                \"content\": \"Midnight Rain\"\n              },\n              {\n                \"name\": \"genre\",\n                \"content\": \"Fantasy\"\n              },\n              {\n                \"name\": \"price\",\n                \"content\": \"5.95\"\n              },\n              {\n                \"name\": \"publish_date\",\n                \"content\": \"2000-12-16\"\n              },\n              {\n                \"name\": \"description\",\n                \"content\": \"A former architect battles corporate zombies,\\n      an evil sorceress, and her own childhood to become queen\\n      of the world.\"\n              }\n            ]\n          }\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Number List React Component with JSX\nDESCRIPTION: This code snippet demonstrates how to render a list of numbers as an unordered list using React and JSX.  It defines a `NumberList` component that takes an array of numbers as props and maps each number to a list item. The component is then rendered into the DOM element with the ID \"root\".\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/using-emotion-prismjs/src/pages/2017-10-16-code-highlighting/index.md#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nfunction NumberList(props) {\n  const numbers = props.numbers\n  const listItems = numbers.map(number => (\n    <li key={number.toString()}>{number}</li>\n  ))\n  return <ul>{listItems}</ul>\n}\n\nconst numbers = [1, 2, 3, 4, 5]\nReactDOM.render(\n  <NumberList numbers={numbers} />,\n  document.getElementById(\"root\")\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies\nDESCRIPTION: This command installs the necessary dependencies for the 'using-mdx' example using npm. It ensures that all required packages are available for the application to run correctly.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/using-mdx/README.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n\nnpm install\n\n```\n\n----------------------------------------\n\nTITLE: Correcting Links\nDESCRIPTION: This commit corrects the links in the package changelogs.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-google-tagmanager/CHANGELOG.md#_snippet_24\n\nLANGUAGE: text\nCODE:\n```\ncorrect links in package changelogs ([#15630](https://github.com/gatsbyjs/gatsby/issues/15630)) ([d07b9dd](https://github.com/gatsbyjs/gatsby/commit/d07b9dd))\n```\n\n----------------------------------------\n\nTITLE: Replacing Layout Query with StaticQuery (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to replace a layout's query using the data prop in Gatsby v1 with Gatsby v2's StaticQuery feature. It shows the old and new implementations.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v1-to-v2.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport React, { Fragment } from \"react\"\nimport { Helmet } from \"react-helmet\"\n+ import { StaticQuery, graphql } from \"gatsby\"\n\n- export default function Layout({ children, data }) {\n-   return (\n-     <>\n-       <Helmet titleTemplate={`%s | ${data.site.siteMetadata.title}`} defaultTitle={data.site.siteMetadata.title} />\n-       <div>\n-         {children()}\n-       </div>\n-     </>\n-   );\n- }\n-\n- export const query = graphql`\n-   query LayoutQuery {\n-     site {\n-       siteMetadata {\n-         title\n-       }\n-     }\n-   }\n- `\n+ export default function Layout({ children }) {\n+   return (\n+     <StaticQuery\n+       query={graphql`\n+         query LayoutQuery {\n+           site {\n+             siteMetadata {\n+               title\n+             }\n+           }\n+         }\n+       `}\n+       render={data => (\n+         <>\n+           <Helmet titleTemplate={`%s | ${data.site.siteMetadata.title}`} defaultTitle={data.site.siteMetadata.title} />\n+           <div>\n+             {children}\n+           </div>\n+         </>\n+       )}\n+     />\n+   );\n+ }\n```\n\n----------------------------------------\n\nTITLE: Pull Content from Agility CMS (Shell)\nDESCRIPTION: This command pulls the initial content from Agility CMS for the Gatsby site. It's typically run only once during the initial setup. This task has already been done by Agility CMS Staff\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/benchmarks/source-agilitycms/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm run setup\n```\n\n----------------------------------------\n\nTITLE: Feature: Preloading Used Fonts in Gatsby\nDESCRIPTION: This commit introduces the ability to preload used fonts within the gatsby-plugin-preload-fonts plugin. This feature improves website performance by ensuring that fonts are loaded early in the rendering process, reducing the time it takes for text to be displayed.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-preload-fonts/CHANGELOG.md#_snippet_12\n\nLANGUAGE: Text\nCODE:\n```\n**gatsby-plugin-preload-fonts:** preload used fonts ([#14608](https://github.com/gatsbyjs/gatsby/issues/14608)) ([5b2a76a](https://github.com/gatsbyjs/gatsby/commit/5b2a76a))\n```\n\n----------------------------------------\n\nTITLE: Creating Content Directories and MDX Files\nDESCRIPTION: These shell commands create the necessary directories and empty MDX files for blog posts. The `mkdir` command creates the `content/posts` directory if it doesn't exist, and the `touch` command creates two MDX files named `blog-1.mdx` and `blog-2.mdx` within the directory.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/routing/mdx.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nmkdir -p content/posts\ntouch content/posts/blog-{1,2}.mdx\n```\n\n----------------------------------------\n\nTITLE: Bumping Node Min Version\nDESCRIPTION: This snippet represents a feature update where the minimum required Node.js version for Gatsby was bumped to 10.13.0.  The referenced issue and commit provide further context.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-smartypants/CHANGELOG.md#_snippet_6\n\nLANGUAGE: None\nCODE:\n```\n- **gatsby:** bump node min version to 10.13.0 ([#22400](https://github.com/gatsbyjs/gatsby/issues/22400)) ([83d681a](https://github.com/gatsbyjs/gatsby/commit/83d681a))\n```\n\n----------------------------------------\n\nTITLE: Enable Web Vitals Tracking in gatsby-config.js\nDESCRIPTION: This code snippet demonstrates how to enable Web Vitals tracking in your `gatsby-config.js` file for `gatsby-plugin-google-analytics` and `gatsby-plugin-google-tagmanager`. Setting `enableWebVitalsTracking` to `true` activates the tracking of Largest Contentful Paint (LCP), First Input Delay (FID), and Cumulative Layout Shift (CLS) metrics.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/v3.8/index.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  resolve: `gatsby-plugin-google-analytics`,\n  options: {\n    // The property ID; the tracking code won't be generated without it\n    trackingId: \"YOUR_GOOGLE_ANALYTICS_TRACKING_ID\",\n    // Defines where to place the tracking script - `true` in the head and `false` in the body\n    head: false,\n    // Setting this parameter is optional\n    anonymize: true,\n    // Setting this parameter is also optional\n    respectDNT: true,\n    // Avoids sending pageview hits from custom paths\n    exclude: [\"/preview/**\", \"/do-not-track/me/too/\"],\n    // Enables Google Optimize using your container Id\n    optimizeId: \"YOUR_GOOGLE_OPTIMIZE_CONTAINER_ID\",\n    // Enables Google Optimize Experiment ID\n    experimentId: \"YOUR_GOOGLE_EXPERIMENT_ID\",\n    // Set Variation ID. 0 for original 1,2,3....\n    variationId: \"YOUR_GOOGLE_OPTIMIZE_VARIATION_ID\",\n    // Defers execution of google analytics script after page load\n    defer: false,\n    // Any additional optional fields\n    sampleRate: 5,\n    siteSpeedSampleRate: 10,\n    cookieDomain: \"example.com\",\n    // Enables the web vitals tracking.\n    enableWebVitalsTracking: true\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies\nDESCRIPTION: Several chore entries indicate dependency updates, such as updating cross-env and algoliasearch. Dependency updates are important for maintaining compatibility, resolving security vulnerabilities, and leveraging new features in underlying libraries.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-npm-package-search/CHANGELOG.md#_snippet_13\n\nLANGUAGE: Text\nCODE:\n```\nupdate dependency cross-env to ^7.0.3 [#28505](https://github.com/gatsbyjs/gatsby/issues/28505) ([a819b9b](https://github.com/gatsbyjs/gatsby/commit/a819b9bfb663139f7b06c3ed7d6d6069a2382b2c))\n\nUpgrade algoliasearch [#28671](https://github.com/gatsbyjs/gatsby/issues/28671) ([b691b69](https://github.com/gatsbyjs/gatsby/commit/b691b69e8e2183a50fa6ebc61876303497e0c362))\n```\n\n----------------------------------------\n\nTITLE: Using Gatsby Node APIs with ESM\nDESCRIPTION: This code snippet demonstrates how to use Gatsby Node APIs within a `gatsby-node.mjs` file using ES module syntax. It defines the `onPostBuild` function and exports it.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/custom-configuration/es-modules.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const onPostBuild = () => {\n  console.log(\"Build is done!\")\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Relative Path in Table of Contents\nDESCRIPTION: This feature allows for the generation of relative paths within the `tableOfContents` functionality of gatsby-transformer-remark. This can be useful for creating table of contents links that are relative to the current page. This enhancement was added based on issue #18543.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-remark/CHANGELOG.md#_snippet_12\n\n\n\n----------------------------------------\n\nTITLE: Example user.toml file\nDESCRIPTION: This is an example TOML file named user.toml. It defines user-related data such as username, avatar, description, and a website link. This structure can then be queried via GraphQL after installing gatsby-transformer-toml.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-toml/README.md#_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\nuserName = \"Random User\"\nuserAvatar = \"https://api.adorable.io/avatars/150/test.png\"\nuserDescription = \"Lorem...\"\n[userLink]\n     label='Website'\n     url='//mywebsite.example.local'\n     icon='fa fa-link'\n```\n\n----------------------------------------\n\nTITLE: Applying patches for v5 in gatsby-plugin-flow\nDESCRIPTION: This snippet showcases a chore update involving the application of patches for version 5 within the gatsby-plugin-flow package. It references issue #36796 and includes a commit hash for detailed information.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-flow/CHANGELOG.md#_snippet_4\n\nLANGUAGE: Diff\nCODE:\n```\n+ apply patches for v5 [#36796](https://github.com/gatsbyjs/gatsby/issues/36796) ([25f79b6](https://github.com/gatsbyjs/gatsby/commit/25f79b6c3719fdf09584ade620a05c66ba2a697c))\n```\n\n----------------------------------------\n\nTITLE: Setting custom headers in gatsby-config.js\nDESCRIPTION: Sets custom headers for specific paths using the `headers` option in the plugin configuration. This example configures basic authentication headers for the root path and a specific page.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-gatsby-cloud/README.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-gatsby-cloud`,\n      options: {\n        headers: {\n          \"/*\": [\n            \"Basic-Auth: someuser:somepassword anotheruser:anotherpassword\",\n          ],\n          \"/my-page\": [\n            // matching headers (by type) are replaced by Gatsby Cloud with more specific routes\n            \"Basic-Auth: differentuser:differentpassword\",\n          ],\n        },\n      }\n    },\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query: Proposed Sort Syntax\nDESCRIPTION: This GraphQL query demonstrates the proposed syntax for sorting data in Gatsby. It retrieves all MarkdownRemark nodes and sorts them by the `date` field within the `frontmatter` object in descending order. This new syntax aims to improve performance and reduce resource usage during builds.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/v4.22/index.md#_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\n{\n  allMarkdownRemark(sort: { frontmatter: { date: DESC } }) {\n    nodes {\n      ...fields\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Ignoring Dot Files in Gatsby Page Creator\nDESCRIPTION: This code snippet describes a bug fix that makes the Gatsby page creator plugin ignore dot files (files starting with a `.`). This prevents hidden files from being inadvertently treated as pages.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-page-creator/CHANGELOG.md#_snippet_47\n\nLANGUAGE: Text\nCODE:\n```\nignore dot files in page creator plugin ([#8573](https://github.com/gatsbyjs/gatsby/issues/8573)) ([482416b](https://github.com/gatsbyjs/gatsby/commit/482416b))\n```\n\n----------------------------------------\n\nTITLE: Bumping Node Min Version to 10.13.0\nDESCRIPTION: This commit bumps the minimum required Node.js version to 10.13.0 for Gatsby. It addresses the issue reported in the provided GitHub issue link.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-sass/CHANGELOG.md#_snippet_6\n\nLANGUAGE: none\nCODE:\n```\n- **gatsby:** bump node min version to 10.13.0 ([#22400](https://github.com/gatsbyjs/gatsby/issues/22400)) ([83d681a](https://github.com/gatsbyjs/gatsby/commit/83d681a))\n```\n\n----------------------------------------\n\nTITLE: Accessing Product Data in Template Component (product.js)\nDESCRIPTION: This JavaScript (JSX) code snippet demonstrates how to access product data passed via the `pageContext` in a template component.  It receives the `pageContext` as a prop and destructures the `product` object to display the product's name, price, and description. This approach avoids the need for a GraphQL query within the template, but relies on the data being passed correctly from `gatsby-node.js`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/creating-and-modifying-pages.md#_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\nfunction Product({ pageContext }) {\n  const { product } = pageContext\n  return (\n    <div>\n      Name: {product.name}\n      Price: {product.price}\n      Description: {product.description}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Slices with Aliases in gatsby-node.js (JavaScript)\nDESCRIPTION: Demonstrates how to create multiple slices and use aliases to customize which Slice component is rendered based on the page. The `slices` key in `createPage` maps aliases to specific slice IDs, allowing for dynamic slice selection.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/built-in-components/gatsby-slice.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexports.createPages = async ({ actions }) => {\n  const animals = ['dog', 'cat', 'giraffe']\n\n  for (const animal of animals) {\n    // create a slice for each animal, i.e. `my-image--dog`\n    actions.createSlice({\n      // highlight-next-line\n      id: `my-image--${animal}`,\n      component: require.resolve(`./src/components/my-image-slice.js`),\n      context: {\n        imagePath: `./images/${animal}.jpg`,\n      }\n    })\n\n    actions.createPage({\n      path: `/animals/${animal}`,\n      // a page component that utilizes the MyImage slice\n      component: require.resolve(`./src/templates/page.js`),\n      slices: {\n        // Any time `<Slice alias=\"my-image\">` is seen on this page,\n        // use the `my-image--${animal}` id\n        // highlight-next-line\n        'my-image': `my-image--${animal}`\n      }\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Concurrent File Requests (JavaScript)\nDESCRIPTION: This snippet shows how to adjust the number of concurrent file requests made to the Drupal server using the `concurrentFileRequests` option. Adjusting this can improve build speed but may lead to memory exhaustion on the server if set too high. The `apiBase` option is also shown, allowing the user to specify the JSON API endpoint.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-drupal/README.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n// In your gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-source-drupal`,\n      options: {\n        baseUrl: `https://live-contentacms.pantheonsite.io/`,\n        apiBase: `api`, // optional, defaults to `jsonapi`\n        concurrentFileRequests: 60, // optional, defaults to `20`\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Configure gatsby-plugin-sharp in gatsby-config.js\nDESCRIPTION: This code snippet shows how to configure gatsby-plugin-sharp in your gatsby-config.js file. It includes setting default options for image processing and handling errors when Sharp encounters corrupted images. The `resolve` field specifies the plugin, and the `options` field contains configuration settings.  The failOn option determines whether the build fails on warnings or ignores them.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-sharp/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        // Defaults used for gatsbyImageData and StaticImage\n        defaults: {},\n        // Relates to \"options.failOn\" in https://sharp.pixelplumbing.com/api-constructor#parameters\n        failOn: `warning`,\n      },\n    },\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Deprecated `@nodeInterface`: Use interface inheritance (gatsby-node.js)\nDESCRIPTION: The `@nodeInterface` directive is deprecated in favor of using interface inheritance to define queryable interfaces.  This code shows how to implement the Node interface directly.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v2-to-v3.md#_snippet_34\n\nLANGUAGE: diff\nCODE:\n```\nexports.createSchemaCustomization = function createSchemaCustomization({ actions }) {\n  const { createTypes } = actions\n  createTypes(`\n-   interface Foo @nodeInterface\n+   interface Foo implements Node\n    {\n      id: ID!\n    }\n  `)\n}\n```\n\n----------------------------------------\n\nTITLE: Create React App .env Example\nDESCRIPTION: This snippet shows an example of setting an environment variable in a Create React App project.  Note the `REACT_APP_` prefix, which is required for Create React App to expose the variable to the browser.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/porting-from-create-react-app-to-gatsby.md#_snippet_7\n\nLANGUAGE: env\nCODE:\n```\nREACT_APP_API_URL=http://someapi.com\n```\n\n----------------------------------------\n\nTITLE: Updating Babel Monorepo\nDESCRIPTION: This snippet reflects an update to the Babel monorepo within the gatsby-remark-code-repls package. This update ensures compatibility and incorporates the latest features and fixes from Babel. Updating Babel is crucial for maintaining support for modern JavaScript syntax.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-code-repls/CHANGELOG.md#_snippet_1\n\nLANGUAGE: none\nCODE:\n```\nupdate babel monorepo [#37568](https://github.com/gatsbyjs/gatsby/issues/37568) ([13a0a9e](https://github.com/gatsbyjs/gatsby/commit/13a0a9e83dcb015b65dff6b73cdd5dea09c2988f))\n```\n\n----------------------------------------\n\nTITLE: JSON data for products\nDESCRIPTION: This JSON file represents a list of product objects, each containing properties like title, slug, description, price, and image path. This data is used as input for creating product pages dynamically in Gatsby.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/why-gatsby-uses-graphql.md#_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n[\n  {\n    \"title\": \"Vintage Purple Tee\",\n    \"slug\": \"vintage-purple-tee\",\n    \"description\": \"<p>Keep it simple with this vintage purple tee.</p>\",\n    \"price\": \"$10.00\",\n    \"image\": \"/images/amberley-romo-riggins.jpg\"\n  },\n  {\n    \"title\": \"Space Socks\",\n    \"slug\": \"space-socks\",\n    \"description\": \"<p>Get your feet into these spaced-out black socks with a Gatsby purple border and heel.</p>\",\n    \"price\": \"$10.00\",\n    \"image\": \"/images/erin-fox-and-sullivan.jpg\"\n  },\n  {\n    \"title\": \"This Purple Hat Is Blazing Fast\",\n    \"slug\": \"purple-hat\",\n    \"description\": \"<p>Add more blazingly blazing speed to your wardrobe with this solid purple laundered chino twill hat.</p>\",\n    \"price\": \"$10.00\",\n    \"image\": \"/images/david-bailey-cat-hat.jpg\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Bumping Node Minimum Version for Gatsby\nDESCRIPTION: This commit updates the minimum required Node.js version for Gatsby to 10.13.0. This change ensures that Gatsby can leverage newer features and improvements in Node.js.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-styled-components/CHANGELOG.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n**gatsby:** bump node min version to 10.13.0 ([#22400](https://github.com/gatsbyjs/gatsby/issues/22400)) ([83d681a](https://github.com/gatsbyjs/gatsby/commit/83d681a))\n```\n\n----------------------------------------\n\nTITLE: Updating Babel Monorepo\nDESCRIPTION: This snippet illustrates a bug fix related to updating the Babel monorepo. This ensures the gatsby-source-lever package is compatible with the latest Babel features and fixes.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-lever/CHANGELOG.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nupdate babel monorepo [#37568](https://github.com/gatsbyjs/gatsby/issues/37568) ([13a0a9e](https://github.com/gatsbyjs/gatsby/commit/13a0a9e83dcb015b65dff6b73cdd5dea09c2988f))\n```\n\n----------------------------------------\n\nTITLE: Update Minor Updates in Packages\nDESCRIPTION: This code snippet indicates a bulk update of minor version updates for multiple packages, excluding react, babel and eslint. These updates likely included bug fixes and minor feature enhancements.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-graphql/CHANGELOG.md#_snippet_35\n\nLANGUAGE: diff\nCODE:\n```\nupdate minor updates in packages except react, babel and‚Ä¶ ([#16960](https://github.com/gatsbyjs/gatsby/issues/16960)) ([d6bd515](https://github.com/gatsbyjs/gatsby/commit/d6bd515))\n```\n\n----------------------------------------\n\nTITLE: Markdown table and Headings in MDX\nDESCRIPTION: This snippet illustrates the use of Markdown syntax within an MDX file. It includes a table and headings to structure the content. This demonstrates how Markdown features can be seamlessly integrated with React components in an MDX document.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/using-mdx/content/posts/blog-1.mdx#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Hello   | World |   |   |   |\n|---------|-------|---|---|---|\n| How are | you?  |   |   |   |\n\n## Heading Level Two\n\nSome text\n\n### Heading Level Three\n\nSome more text\n```\n\n----------------------------------------\n\nTITLE: Fix: Update parse-numeric-range dependency\nDESCRIPTION: Updates the `parse-numeric-range` dependency to version ^1.3.0 for the `gatsby-remark-prismjs` plugin. This addresses issue #37861 by ensuring compatibility and incorporating potential bug fixes or improvements in the updated dependency.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-prismjs/CHANGELOG.md#_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\nc4f8987(https://github.com/gatsbyjs/gatsby/commit/c4f8987a9671ed714a6476401747d133ecaa890b)\n```\n\n----------------------------------------\n\nTITLE: Using Frame Component with children - Gallery Page - JavaScript\nDESCRIPTION: This snippet demonstrates how to use the Frame component and pass content as children. The content within the <Frame> tags in the GalleryPage component is passed to the Frame component's 'children' prop.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-2/index.mdx#_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from 'react'\nimport Frame from '../components/frame' // highlight-line\n\nconst GalleryPage = () => {\n  return (\n    {\n      /* highlight-start */\n      <Frame>\n        <p>This will be passed in as children</p>\n      </Frame>\n      /* highlight-end */\n    }\n  )\n}\n\nexport default GalleryPage\n```\n\n----------------------------------------\n\nTITLE: Updating scroll-behavior dependency in gatsby-react-router-scroll (JavaScript)\nDESCRIPTION: This commit updates the `scroll-behavior` dependency to the latest version. This is a bug fix that addresses issues related to scroll behavior within the `gatsby-react-router-scroll` package. The update is referenced by a GitHub issue and commit hash.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-react-router-scroll/CHANGELOG.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nupdate dependency scroll-behavior ([#22322](https://github.com/gatsbyjs/gatsby/issues/22322)) ([9b8c914](https://github.com/gatsbyjs/gatsby/commit/9b8c914))\n```\n\n----------------------------------------\n\nTITLE: Updating xlsx Dependency in GatsbyJS\nDESCRIPTION: This snippet addresses updating the `xlsx` dependency in `gatsby-transformer-excel`. This change ensures compatibility and addresses potential issues related to the excel parsing library. The dependency is updated to ensure it aligns with the requirements of `gatsby-transformer-excel`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-excel/CHANGELOG.md#_snippet_7\n\nLANGUAGE: None\nCODE:\n```\nupdate dependency xlsx to ^0.17.4 for gatsby-transformer-excel [#34133](https://github.com/gatsbyjs/gatsby/issues/34133) ([1528d61](https://github.com/gatsbyjs/gatsby/commit/1528d6176b43cb86a48978e6739574cefbedabb8))\n```\n\n----------------------------------------\n\nTITLE: Fixing Babel Monorepo in gatsby-plugin-flow\nDESCRIPTION: This code snippet represents a bug fix related to updating the Babel monorepo within the gatsby-plugin-flow package.  It addresses an issue (37568) and commits the change with a specific hash.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-flow/CHANGELOG.md#_snippet_0\n\nLANGUAGE: Diff\nCODE:\n```\n+ update babel monorepo [#37568](https://github.com/gatsbyjs/gatsby/issues/37568) ([13a0a9e](https://github.com/gatsbyjs/gatsby/commit/13a0a9e83dcb015b65dff6b73cdd5dea09c2988f))\n```\n\n----------------------------------------\n\nTITLE: Testing a Simple Emotion Styled Component\nDESCRIPTION: This JavaScript code demonstrates a unit test for a simple Emotion-styled component. It uses `react-test-renderer` to render the component and then asserts that the rendered output matches a snapshot. This verifies that the component renders with the correct styling.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/testing/testing-css-in-js.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from \"react\"\nimport styled from \"react-emotion\"\nimport renderer from \"react-test-renderer\"\n\nconst Button = styled.div`\n  color: hotpink;\n`\n\ntest(\"Button renders correctly\", () => {\n  expect(\n    renderer.create(<Button>This is hotpink.</Button>).toJSON()\n  ).toMatchSnapshot()\n})\n```\n\n----------------------------------------\n\nTITLE: Updating babel monorepo chore in gatsby-design-tokens\nDESCRIPTION: This code snippet represents a chore update in the gatsby-design-tokens package, specifically updating the babel monorepo.  It addresses issue #37386 and was part of the 5.4.0 release of the package.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-design-tokens/CHANGELOG.md#_snippet_2\n\nLANGUAGE: TEXT\nCODE:\n```\n- update babel monorepo [#37386](https://github.com/gatsbyjs/gatsby/issues/37386) ([b941876](https://github.com/gatsbyjs/gatsby/commit/b94187633d94d0f0071b38ffe93380dd802ec70f))\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies\nDESCRIPTION: This command installs all the necessary dependencies for the Gatsby application. This includes Gatsby itself, the themes being used (gatsby-theme-blog, gatsby-theme-notes, gatsby-mdx-embed), and any other required packages. This step ensures that the application has all the libraries it needs to run.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/using-multiple-themes/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query Example (gatsby-source-graphql v1)\nDESCRIPTION: This code snippet shows a GraphQL query used with `gatsby-source-graphql` to fetch a list of pages from WordPress.  It illustrates the structure where the query is wrapped within a `wp` root field.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-wordpress/docs/migrating-from-other-wp-source-plugins.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n{\n  wp {\n    pages {\n      nodes {\n        title\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Gatsby Config with Agility CMS Plugin (JavaScript)\nDESCRIPTION: This configures the `@agility/gatsby-source-agilitycms` plugin in `gatsby-config.js`. It specifies the `masterPageTemplate`, which is the component used to render Agility CMS pages. The ellipsis represent other plugins that may be present in the configuration.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/sourcing-from-agilitycms.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  siteMetadata: {\n    title: \"Agility CMS Gatsby Starter\",\n  },\n  plugins: [\n    ...\n    {\n      //the name of the plugin\n      resolve: \"@agility/gatsby-source-agilitycms\",\n      //the options for our plugin\n      options: {\n        ...\n         //the page template that will be used to render Agility CMS pages\n        masterPageTemplate: \"./src/AgilityPage.jsx\"\n      },\n    },\n    ...\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Apply Patches for v5 in gatsby-remark-graphviz\nDESCRIPTION: This commit applies patches for version 5 of the `gatsby-remark-graphviz` package. The patches address any known issues or regressions introduced in version 5, ensuring stability and reliability.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-graphviz/CHANGELOG.md#_snippet_5\n\n\n\n----------------------------------------\n\nTITLE: Install gatsby-remark-copy-linked-files\nDESCRIPTION: Command to install the `gatsby-remark-copy-linked-files` plugin using npm. This plugin is necessary to copy linked files to the public directory.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-copy-linked-files/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install gatsby-remark-copy-linked-files\n```\n\n----------------------------------------\n\nTITLE: Using children prop in <Slice> (JavaScript/JSX)\nDESCRIPTION: Demonstrates the usage of the `children` prop with the `<Slice>` component.  The children prop can be used to pass content to the Slice component.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/built-in-components/gatsby-slice.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// OK\n\nexport function MyImage() {\n  return (\n    <Slice alias=\"my-image\">\n      // highlight-next-line\n      <p>I am a caption, neat!</p>\n    </Slice>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Run Gatsby Query Timing (Loki No Index) - More Pages\nDESCRIPTION: This shell command executes the `runQueryTiming.sh` script to benchmark Gatsby query performance with Loki datastore and no indexes enabled, with more pages. It sets the number of page types (NUM_TYPES) and the number of pages (NUM_PAGES) as environment variables for the script.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/benchmarks/query/recording.md#_snippet_6\n\nLANGUAGE: Shell Script\nCODE:\n```\nquery $ NUM_TYPES=1 NUM_PAGES=20000 bin/runQueryTiming.sh\n58.377\n```\n\n----------------------------------------\n\nTITLE: Building a Gatsby site with a path prefix (env variable)\nDESCRIPTION: These shell commands show how to build a Gatsby application with the `--prefix-paths` flag or the `PREFIX_PATHS` environment variable. This ensures that the `pathPrefix` defined in `gatsby-config.js` is applied during the build process.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/previews-deploys-hosting/path-prefix.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nPREFIX_PATHS=true gatsby build\n```\n\n----------------------------------------\n\nTITLE: Update peerDeps - JavaScript\nDESCRIPTION: This commit updates peer dependencies for the gatsby-plugin-subfont package.  It ensures compatibility and proper functioning with peer packages.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-subfont/CHANGELOG.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nUpdate peerDeps [#36965](https://github.com/gatsbyjs/gatsby/issues/36965) ([b624442](https://github.com/gatsbyjs/gatsby/commit/b6244424fe8b724cbc23b80b2b4f5424cc2055a4))\n```\n\n----------------------------------------\n\nTITLE: Building and Serving Gatsby Site with Trailing Slash Option\nDESCRIPTION: This command builds and serves the Gatsby site with a specified `trailingSlash` option. The `TRAILING_SLASH` environment variable sets the option for the build process. After the build completes, the site is served, allowing verification of the trailing slash configuration in a production-like environment.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/e2e-tests/trailing-slash/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nTRAILING_SLASH=your-option yarn build && yarn debug:build\n```\n\n----------------------------------------\n\nTITLE: Installing gatsby-dev-cli\nDESCRIPTION: Installs the gatsby-dev-cli tool globally using npm. This allows the tool to be used from any directory in the command line.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-dev-cli/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install -g gatsby-dev-cli\n```\n\n----------------------------------------\n\nTITLE: Chore: Bump Babel Minor\nDESCRIPTION: Bumps the Babel minor version. This ensures the plugin uses the latest minor version of Babel, which includes new features and bug fixes. This chore relates to issue #31857.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-google-tagmanager/CHANGELOG.md#_snippet_13\n\nLANGUAGE: None\nCODE:\n```\nbump babel minor [#31857](https://github.com/gatsbyjs/gatsby/issues/31857) ([7d42e8d](https://github.com/gatsbyjs/gatsby/commit/7d42e8d866e46e9c39838d812d080d06433f7060))\n```\n\n----------------------------------------\n\nTITLE: Keeping scroll positions on reload in gatsby-react-router-scroll (JavaScript)\nDESCRIPTION: This commit ensures that scroll positions are preserved on page reload. This improvement makes sure that when a user reloads the page, their scroll position is maintained, enhancing user experience.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-react-router-scroll/CHANGELOG.md#_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\n**gatsby-react-router-scroll:** keep scroll positions in tact on reload ([#11224](https://github.com/gatsbyjs/gatsby/issues/11224)) ([3cbaade](https://github.com/gatsbyjs/gatsby/commit/3cbaade))\n```\n\n----------------------------------------\n\nTITLE: Replacing gatsbyjs.org with gatsbyjs.com in gatsby-plugin-google-analytics\nDESCRIPTION: Replaces all instances of the gatsbyjs.org domain with gatsbyjs.com within the gatsby-plugin-google-analytics plugin. This chore ensures consistency and aligns with the current official domain.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-google-analytics/CHANGELOG.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n16cff41\n```\n\n----------------------------------------\n\nTITLE: Updating Babel Monorepo in gatsby-transformer-toml\nDESCRIPTION: This commit updates the babel monorepo.  It likely updates the babel dependencies used by the gatsby-transformer-toml plugin for better compatibility or bug fixes. The update is associated with issue #37386.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-toml/CHANGELOG.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nupdate babel monorepo [#37386](https://github.com/gatsbyjs/gatsby/issues/37386) ([b941876](https://github.com/gatsbyjs/gatsby/commit/b94187633d94d0f0071b38ffe93380dd802ec70f))\n```\n\n----------------------------------------\n\nTITLE: Bumping Babel Minor Version in gatsby-plugin-google-analytics\nDESCRIPTION: Bumps the minor version of Babel in the gatsby-plugin-google-analytics package, addressing issues #31857 and #31859. This upgrade ensures compatibility and incorporates potential bug fixes and performance improvements.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-google-analytics/CHANGELOG.md#_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\n8636025\n```\n\n----------------------------------------\n\nTITLE: Author JSON Data\nDESCRIPTION: This JSON snippet represents author data, including name, first name, email, and joinedAt.  It's an example of data that Gatsby can transform into a GraphQL node for querying.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/graphql-data-layer/schema-customization.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"name\": \"Doe\",\n    \"firstName\": \"Jane\",\n    \"email\": \"jane@example.com\",\n    \"joinedAt\": \"2018-01-01\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Creating a Gatsby Project (Shell)\nDESCRIPTION: This command creates a new Gatsby project named `agilitycms-gatsby-starter` using the Agility CMS Gatsby Starter repository from GitHub.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/sourcing-from-agilitycms.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ngatsby new agilitycms-gatsby-starter https://github.com/agility/agilitycms-gatsby-starter\n```\n\n----------------------------------------\n\nTITLE: Bump Babel Minor Version\nDESCRIPTION: This snippet represents bumping the babel minor version. A minor version update often includes new features or improvements that are backwards compatible.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-preload-fonts/CHANGELOG.md#_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Markdown Example\nDESCRIPTION: This snippet demonstrates a basic Markdown document with inline HTML.  It shows how Markdown can be used to create headings, links, and include HTML elements like figures.  The output is rendered as HTML.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/glossary/mdx.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Hello world!\n\nYou can use Markdown to create documents for [Gatsby](https://www.gatsbyjs.com/).\n\n<figure class=\"chart\">\n  <object data=\"chart.svg\" type=\"image/svg+xml\"></object>\n  <figcaption>MDX adoption has increased 120% since last year.</figcaption>\n</figure>\n```\n\n----------------------------------------\n\nTITLE: Configuring Styletron Plugin in gatsby-config.js\nDESCRIPTION: Configures the gatsby-plugin-styletron in the gatsby-config.js file. It shows how to set options such as the CSS prefix and disable debug mode.  This configuration enables Styletron to be used within the Gatsby project.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-styletron/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-styletron`,\n      options: {\n        // You can pass options to Styletron.\n        prefix: \"_\",\n        // Disable dev debug mode, enabled by default\n        debug: false,\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Link Resolver Function\nDESCRIPTION: This JavaScript code defines a link resolver function that generates URLs based on the document type and unique identifier (UID) from Prismic. It returns a specific URL structure for 'post' document types (e.g., '/blog/{unique slug}') and a default root URL for other document types. This function is used to create dynamic links to Prismic content within the Gatsby site.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/prismic-source-graphql-tutorial.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nexports.linkResolver = function linkResolver(doc) {\n  // Route for blog posts\n  if (doc.type === \"post\") {\n    return \"/blog/\" + doc.uid\n  }\n  // Homepage route fallback\n  return \"/\"\n}\n```\n\n----------------------------------------\n\nTITLE: MDX Frontmatter: Adding Hero Image Metadata\nDESCRIPTION: This code snippet demonstrates how to add hero image metadata (path, alt text, credit) to an MDX file's frontmatter. The `hero_image` specifies the relative path to the image. The `hero_image_alt` provides alternative text. The `hero_image_credit_text` and `hero_image_credit_link` give credit to the photographer.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-7/index.mdx#_snippet_2\n\nLANGUAGE: mdx\nCODE:\n```\n---\ntitle: \"Yet Another Post\"\ndate: \"2021-07-25\"\nslug: \"yet-another-post\"\n// highlight-start\nhero_image: \"./jane-almon-7rriIaBH6JY-unsplash.jpg\"\nhero_image_alt: \"A white pitbull wearing big googly-eye glasses\"\nhero_image_credit_text: \"Jane Almon\"\nhero_image_credit_link: \"https://unsplash.com/photos/7rriIaBH6JY\"\n// highlight-end\n---\n\n...\n```\n\n----------------------------------------\n\nTITLE: Importing Layout and EventList components in events.js (JSX)\nDESCRIPTION: This snippet imports the `Layout` and `EventList` components into the `events.js` template. It refactors the render method to use the imported components and passes event data to the `<EventList>` component.  Dependencies: React, gatsby, graphql, useStaticQuery, Layout, EventList.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/building-a-theme.md#_snippet_29\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\"\nimport { graphql, useStaticQuery } from \"gatsby\"\n// highlight-start\nimport Layout from \"../components/layout\"\nimport EventList from \"../components/event-list\"\n// highlight-end\n\nconst EventsTemplate = () => {\n  const data = useStaticQuery(graphql`\n    query {\n      allEvent(sort: { startDate: ASC }) {\n        nodes {\n          id\n          name\n          startDate\n          endDate\n          location\n          url\n          slug\n        }\n      }\n    }\n  `)\n\n  const events = data.allEvent.nodes\n\n  // highlight-start\n  return (\n    <Layout>\n      <EventList events={events} />\n    </Layout>\n  )\n  // highlight-end\n}\n\nexport default EventsTemplate\n```\n\n----------------------------------------\n\nTITLE: CSS \"Buy Now\" Hover Text Removal\nDESCRIPTION: This CSS snippet from `src/style/Product.scss` adds flashing text when hovering over the \"BUY NOW\" buttons. Removing this CSS code disables this flashing effect, resulting in a cleaner hover state. It uses the `mix-blend-mode` and `animation` properties to create the visual effect.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/e-commerce-with-datocms-and-snipcart/index.md#_snippet_6\n\nLANGUAGE: CSS\nCODE:\n```\n&:hover {\n  text-decoration: underline;\n\n  &:before {\n    content: \"Yes now\";\n    position: absolute;\n    top: -10px;\n    left: 60%;\n    white-space: nowrap;\n    font-family: \"times new roman\", times, serif;\n    font-weight: normal;\n    font-style: italic;\n    mix-blend-mode: difference;\n    text-transform: lowercase;\n    text-decoration: overline;\n    color: #00efff;\n    font-size: 2em;\n    animation: blink 6s steps(4, end) infinite alternate-reverse;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Passing menuLinks to Header Component (JavaScript)\nDESCRIPTION: This code snippet shows how to pass the `menuLinks` data obtained from the GraphQL query to the `Header` component. The `Header` component then uses this data to dynamically render the navigation menu.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/creating-dynamic-navigation.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst Layout = ({ children }) => (\n  <StaticQuery\n    query={graphql`\n      query SiteTitleQuery {\n        site {\n          siteMetadata {\n            title\n+            menuLinks {\n+              name\n+              link\n+            }\n          }\n        }\n      }\n    `}\n    render={data => (\n      <React.Fragment>\n        <Helmet\n          title={'title'}\n          meta={[\n            { name: 'description', content: 'Sample' },\n            { name: 'keywords', content: 'sample, something' },\n          ]}\n        >\n        </Helmet>\n-      <Header siteTitle={data.site.siteMetadata.title} />\n+      <Header menuLinks={data.site.siteMetadata.menuLinks} siteTitle={data.site.siteMetadata.title} />\n        <div\n          style={{\n            margin: '0 auto',\n            maxWidth: 960,\n            padding: '0px 1.0875rem 1.45rem',\n            paddingTop: 0,\n          }}\n        >\n          {children}\n        </div>\n      </React.Fragment>\n    )}\n  />\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing onCreatePage API (JavaScript)\nDESCRIPTION: This code snippet implements the Gatsby `onCreatePage` API to modify pages dynamically. It checks if a page's path starts with '/app/' and, if so, sets the `matchPath` property to '/app/*', effectively making it a client-only route. This configuration allows @reach/router to handle the routing for these pages on the client-side.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/authentication-tutorial.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// Implement the Gatsby API ‚ÄúonCreatePage‚Äù. This is\n// called after every page is created.\nexports.onCreatePage = async ({ page, actions }) => {\n  const { createPage } = actions\n\n  // page.matchPath is a special key that's used for matching pages\n  // only on the client.\n  if (page.path.match(/^\\/app/)) {\n    page.matchPath = \"/app/*\"\n\n    // Update the page.\n    createPage(page)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Gatsby Website File Structure\nDESCRIPTION: This code snippet illustrates the directory structure of a compiled Gatsby website. It shows how HTML files are organized within directories to represent different pages and subpages. The structure also includes static assets like favicon.ico and images.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/porting-an-html-site-to-gatsby.md#_snippet_15\n\nLANGUAGE: text\nCODE:\n```\nwebsite-domain\n  ‚îú‚îÄ‚îÄ favicon.ico\n  ‚îú‚îÄ‚îÄ person.png\n  ‚îú‚îÄ‚îÄ index.html\n  ‚îú‚îÄ‚îÄ 404\n  ‚îÇ   ‚îî‚îÄ‚îÄ index.html\n  ‚îú‚îÄ‚îÄ about\n  ‚îÇ   ‚îî‚îÄ‚îÄ index.html\n  ‚îú‚îÄ‚îÄ contact\n  ‚îÇ   ‚îî‚îÄ‚îÄ index.html\n  ‚îú‚îÄ‚îÄ services\n  ‚îÇ   ‚îú‚îÄ‚îÄ index.html\n  ‚îÇ   ‚îú‚îÄ‚îÄ growing\n  ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ index.html\n  ‚îÇ   ‚îú‚îÄ‚îÄ cleaning\n  ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ index.html\n  ‚îÇ   ‚îú‚îÄ‚îÄ shrinking\n  ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ index.html\n  ‚îî‚îÄ‚îÄ who\n      ‚îú‚îÄ‚îÄ index.html\n      ‚îú‚îÄ‚îÄ ellla-arborist\n      ‚îÇ   ‚îî‚îÄ‚îÄ index.html\n      ‚îú‚îÄ‚îÄ marin-leafer\n      ‚îÇ   ‚îî‚îÄ‚îÄ index.html\n      ‚îî‚îÄ‚îÄ sam-surgeon\n          ‚îî‚îÄ‚îÄ index.html\n```\n\n----------------------------------------\n\nTITLE: Displaying API Data in Gatsby SSR Page JavaScript\nDESCRIPTION: This code snippet demonstrates how to access and display data fetched by the `getServerData` function within a Gatsby page component. The `serverData` prop is used to render a dynamic dog image based on the URL returned by the API.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/rendering-options/using-server-side-rendering.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as React from \"react\"\n\nconst SSRPage = ({ serverData }) => ( // highlight-line\n  <main>\n    <h1>SSR Page with Dogs</h1>\n    {/* highlight-next-line */}\n    <img alt=\"Happy dog\" src={serverData.message} />\n  </main>\n)\n\nexport default SSRPage\n\nexport async function getServerData() {\n  try {\n    const res = await fetch(`https://dog.ceo/api/breeds/image/random`)\n\n    if (!res.ok) {\n      throw new Error(`Response failed`)\n    }\n\n    return {\n      props: await res.json(),\n    }\n  } catch (error) {\n    return {\n      status: 500,\n      headers: {},\n      props: {}\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query for Blog Post Data in GatsbyJS with Prismic\nDESCRIPTION: This GraphQL query retrieves blog post data from Prismic based on a UID. It fetches the title, date, and post body of a single blog post. The query uses the `gatsby` and `prismic-reactjs` libraries.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/prismic-source-graphql-tutorial.md#_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\"\nimport { graphql, Link } from \"gatsby\"\nimport { RichText } from \"prismic-reactjs\"\n\nexport const query = graphql`\n  query BlogPostQuery($uid: String) {\n    prismic {\n      allPosts(uid: $uid) {\n        edges {\n          node {\n            title\n            date\n            post_body\n          }\n        }\n      }\n    }\n  }\n`\n\nexport default function Post({ data }) {\n  const doc = data.prismic.allPosts.edges.slice(0, 1).pop()\n  if (!doc) return null\n\n  return (\n    <div>\n      <Link to=\"/\">\n        <span>go back</span>\n      </Link>\n      <h1>{RichText.asText(doc.node.title)}</h1>\n      <span>\n        <em>{doc.node.date}</em>\n      </span>\n      <div>{RichText.render(doc.node.post_body)}</div>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Post and Author Types with Basic Fields in Gatsby\nDESCRIPTION: This code snippet demonstrates the initial definition of `Post` and `Author` types in Gatsby using `createSchemaCustomization`. It creates two GraphQL types, `Post` and `Author`, both implementing the `Node` interface and defining an `id` field of type `ID!`. This is a foundational step for defining data structures in Gatsby's GraphQL schema.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/creating-a-source-plugin/part-3/index.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { GatsbyNode } from \"gatsby\"\n\nexport const createSchemaCustomization: GatsbyNode[`createSchemaCustomization`] =\n  ({ actions }) => {\n    const { createTypes } = actions\n\n    createTypes(`\n      type Post implements Node {\n        id: ID!\n      }\n\n      type Author implements Node {\n        id: ID!\n      }\n    `)\n  }\n```\n\n----------------------------------------\n\nTITLE: Gatsby Develop Command Output\nDESCRIPTION: This snippet represents the terminal output when running `gatsby develop` in a fresh Gatsby default starter project. It shows the sequence of operations Gatsby performs to start a development server, including plugin loading, data sourcing, schema building, and query execution. The output provides insights into the different phases of the development build process and the timing of each step.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/conceptual/overview-of-the-gatsby-build-process.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsuccess open and validate gatsby-configs - 0.051 s\nsuccess load plugins - 0.591 s\nsuccess onPreInit - 0.015 s\nsuccess initialize cache - 0.019 s\nsuccess copy gatsby files - 0.076 s\nsuccess onPreBootstrap - 0.021 s\nsuccess source and transform nodes - 0.082 s\nsuccess Add explicit types - 0.018 s\nsuccess Add inferred types - 0.106 s\nsuccess Processing types - 0.080 s\nsuccess building schema - 0.266 s\nsuccess createPages - 0.014 s\nsuccess createPagesStatefully - 0.067 s\nsuccess onPreExtractQueries - 0.017 s\nsuccess update schema - 0.034 s\nsuccess extract queries from components - 0.222 s\nsuccess write out requires - 0.044 s\nsuccess write out redirect data - 0.014 s\nsuccess Build manifest and related icons - 0.110 s\nsuccess onPostBootstrap - 0.130 s\n‚†Ä\ninfo bootstrap finished - 3.674 s\n‚†Ä\nsuccess run static queries - 0.057 s ‚Äî 3/3 89.08 queries/second\nsuccess run page queries - 0.026s - 3/3 114.85/s\nsuccess start webpack server - 1.707 s ‚Äî 1/1 6.06 pages/second\n```\n\n----------------------------------------\n\nTITLE: Initializing Gatsby project with TypeScript using flag\nDESCRIPTION: This command initializes a new Gatsby project with TypeScript support using the `-ts` flag to skip the language selection prompt.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/custom-configuration/typescript.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnpm init gatsby -ts\n```\n\n----------------------------------------\n\nTITLE: Updating gatsby-remark-custom-blocks - GatsbyJS\nDESCRIPTION: This chore updates the minor and patch versions for gatsby-remark-custom-blocks. This ensures the plugin includes the latest bug fixes and minor enhancements.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-custom-blocks/CHANGELOG.md#_snippet_10\n\nLANGUAGE: none\nCODE:\n```\nupdate minor and patch for gatsby-remark-custom-blocks [#28085](https://github.com/gatsbyjs/gatsby/issues/28085) ([15849f9](https://github.com/gatsbyjs/gatsby/commit/15849f99ac81e5fc1e87904eed52c6234465d1a7))\n```\n\n----------------------------------------\n\nTITLE: Updating Babel Monorepo Chores in gatsby-plugin-no-sourcemaps\nDESCRIPTION: This commit focuses on maintaining dependencies by updating the Babel monorepo as a chore for the gatsby-plugin-no-sourcemaps package. The chore ensures the plugin is using the latest Babel version, improving performance and security.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-no-sourcemaps/CHANGELOG.md#_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n#### Chores\n\n- update babel monorepo [#37386](https://github.com/gatsbyjs/gatsby/issues/37386) ([b941876](https://github.com/gatsbyjs/gatsby/commit/b94187633d94d0f0071b38ffe93380dd802ec70f))\n```\n\n----------------------------------------\n\nTITLE: Updating dependencies for gatsby-source-hacker-news\nDESCRIPTION: This commit updates minor and patch dependencies for the gatsby-source-hacker-news package. The update addresses a bug fix.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-hacker-news/CHANGELOG.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n**deps:** update minor and patch for gatsby-source-hacker-news ([#27652](https://github.com/gatsbyjs/gatsby/issues/27652)) ([0650f8a](https://github.com/gatsbyjs/gatsby/commit/0650f8a0d1efb25f4e039ad18ce6bc2f6bea3b58))\n```\n\n----------------------------------------\n\nTITLE: Replacing pathContext with pageContext\nDESCRIPTION: This snippet demonstrates how to rename instances of `pathContext` to `pageContext` in your components. The `pathContext` API has been removed and replaced with `pageContext`. This is a crucial step when migrating from Gatsby v2 to v3.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v2-to-v3.md#_snippet_9\n\nLANGUAGE: JSX\nCODE:\n```\nimport React from \"react\"\n\n- const ContextPage = ({ pathContext }) => (\n+ const ContextPage = ({ pageContext }) => (\n  <main>\n    <h1>Hello from a page that uses the old pathContext</h1>\n    <p>It was deprecated in favor of pageContext</p>\n-   <p>{pathContext.foo}</p>\n+   <p>{pageContext.foo}</p>\n  </main>\n)\n\nexport default ContextPage\n```\n\n----------------------------------------\n\nTITLE: Wrapping Ignore Pattern in Quotes\nDESCRIPTION: This commit wraps an ignore pattern in quotes within the Gatsby plugin. It addresses the issue reported in the provided GitHub issue link.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-sass/CHANGELOG.md#_snippet_5\n\nLANGUAGE: none\nCODE:\n```\n- wrap ignore pattern in quotes ([#23176](https://github.com/gatsbyjs/gatsby/issues/23176)) ([7563db6](https://github.com/gatsbyjs/gatsby/commit/7563db6))\n```\n\n----------------------------------------\n\nTITLE: Updating Axios Dependency\nDESCRIPTION: This snippet shows a bug fix where the axios dependency was updated to version ^0.19.2. This update likely addresses security vulnerabilities or bug fixes present in older versions of axios, a popular HTTP client library.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-medium/CHANGELOG.md#_snippet_5\n\nLANGUAGE: Diff\nCODE:\n```\n- update dependency axios to ^0.19.2 ([#22317](https://github.com/gatsbyjs/gatsby/issues/22317)) ([91e780f](https://github.com/gatsbyjs/gatsby/commit/91e780f))\n```\n\n----------------------------------------\n\nTITLE: JSON API collections list\nDESCRIPTION: Example JSON showing the structure of the JSON API endpoint and how the `articles` and `recipes` collections are listed.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-drupal/README.md#_snippet_6\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  ...\n  links: {\n    articles: \"https://live-contentacms.pantheonsite.io/api/articles\",\n    recipes: \"https://live-contentacms.pantheonsite.io/api/recipes\",\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing ignore pattern wrapping\nDESCRIPTION: This code snippet fixes an issue where an ignore pattern was not properly wrapped in quotes. This ensures that the ignore pattern is correctly interpreted by the system, preventing unexpected behavior.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-excel/CHANGELOG.md#_snippet_28\n\nLANGUAGE: Text\nCODE:\n```\n- wrap ignore pattern in quotes ([#23176](https://github.com/gatsbyjs/gatsby/issues/23176)) ([7563db6](https://github.com/gatsbyjs/gatsby/commit/7563db6))\n```\n\n----------------------------------------\n\nTITLE: Normalizing Base URL in Gatsby Source WordPress\nDESCRIPTION: This commit adds a feature to gatsby-source-wordpress to normalize the base URL. This ensures that the base URL is consistent and properly formatted, preventing potential issues with data fetching and routing.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-wordpress/CHANGELOG.md#_snippet_20\n\n\n\n----------------------------------------\n\nTITLE: Handling Errors with activityTimer - TypeScript\nDESCRIPTION: Updates the `panicOnBuild` call to use the `activityTimer` to properly stop the timer and report an error.  This ensures accurate reporting of errors encountered during the sourcing process, providing developers with the necessary information for debugging.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/creating-a-source-plugin/part-4/index.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// Imports\n\nexport const sourceNodes: GatsbyNode[`sourceNodes`] = async (gatsbyApi) => {\n  // Rest of sourceNodes\n\n  if (errors) {\n    // highlight-next-line\n    sourcingTimer.panicOnBuild(errors[0].message)\n\n    return\n  }\n\n  // Rest of sourceNodes\n}\n\n// Rest of file\n```\n\n----------------------------------------\n\nTITLE: Updating Babel monorepo JavaScript\nDESCRIPTION: This snippet updates the Babel monorepo to the latest version. This ensures that the plugin uses the latest JavaScript transpilation features and bug fixes provided by Babel.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-images-contentful/CHANGELOG.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nupdate babel monorepo [#37568](https://github.com/gatsbyjs/gatsby/issues/37568) ([13a0a9e](https://github.com/gatsbyjs/gatsby/commit/13a0a9e83dcb015b65dff6b73cdd5dea09c2988f))\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nupdate babel monorepo [#37386](https://github.com/gatsbyjs/gatsby/issues/37386) ([b941876](https://github.com/gatsbyjs/gatsby/commit/b94187633d94d0f0071b38ffe93380dd802ec70f))\n```\n\n----------------------------------------\n\nTITLE: Allowing recursive git URL cloning - gatsby-cli JavaScript\nDESCRIPTION: This snippet introduces a feature to the gatsby-cli that allows the use of the `--recursive` flag when cloning from a git URL.  This is useful when creating new Gatsby sites from repositories with submodules, ensuring that all dependencies are correctly fetched.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-cli/CHANGELOG.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nallow --recursive git url ([#22747](https://github.com/gatsbyjs/gatsby/issues/22747)) ([f4198e2](https://github.com/gatsbyjs/gatsby/commit/f4198e2))\n```\n\n----------------------------------------\n\nTITLE: Display Mode Math Equation Example\nDESCRIPTION: Use the `$$` symbols with newlines to generate a math equation in display mode. This renders the equation on its own line and centers it.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-katex/README.md#_snippet_4\n\nLANGUAGE: Markdown\nCODE:\n```\n$$\na^2 + b^2 = c^2\n$$\n```\n\n----------------------------------------\n\nTITLE: Updating pages when nodes change\nDESCRIPTION: This snippet updates the pages when nodes change.  It ensures that the generated pages are up-to-date with the latest content.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-page-creator/CHANGELOG.md#_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nupdate pages when nodes change [#36623](https://github.com/gatsbyjs/gatsby/issues/36623) ([d302879](https://github.com/gatsbyjs/gatsby/commit/d3028796c01afd9de962910372c5aa3748a5015b))\n```\n\n----------------------------------------\n\nTITLE: Installing Gatsby CLI Globally with Yarn\nDESCRIPTION: This command installs the Gatsby CLI globally using Yarn. The `global add` command is used to make the `gatsby` command available in your terminal for creating new Gatsby projects.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/glossary/yarn.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn global add gatsby-cli\n```\n\n----------------------------------------\n\nTITLE: Structured Logging in Gatsby (JavaScript)\nDESCRIPTION: Introduces structured logging within the Gatsby framework. The structured logging implementation should improve the clarity and analyzability of the logs, aiding in debugging and monitoring.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/babel-plugin-remove-graphql-queries/CHANGELOG.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\neafb8c6\n```\n\n----------------------------------------\n\nTITLE: HTML Output from Markdown\nDESCRIPTION: Shows the HTML output generated from the example Markdown code, demonstrating the conversion of Markdown syntax into HTML tags.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/glossary/markdown.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<h1>Markdown!</h1>\n<p>\n  You can use Markdown to create documents for\n  <a href=\"https://www.gatsbyjs.com/\">Gatsby</a>.\n</p>\n<figure class=\"chart\">\n  <object data=\"chart.svg\" type=\"image/svg+xml\"></object>\n  <figcaption>\n    Developers who love using Gatsby versus those who haven't tried it yet.\n  </figcaption>\n</figure>\n```\n\n----------------------------------------\n\nTITLE: Applying patches for v4\nDESCRIPTION: This snippet represents applying patches specific to version 4 of the package. This could involve bug fixes or compatibility adjustments for the new major version.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-custom-blocks/CHANGELOG.md#_snippet_6\n\nLANGUAGE: Text\nCODE:\n```\napply patches for v4 [#33170](https://github.com/gatsbyjs/gatsby/issues/33170) ([f8c5141](https://github.com/gatsbyjs/gatsby/commit/f8c5141bf72108a53338fd01514522ae7a1b37bf))\n```\n\n----------------------------------------\n\nTITLE: Configure gatsby-transformer-toml in gatsby-config.js\nDESCRIPTION: This code snippet shows how to add the gatsby-transformer-toml plugin to the plugins array in your gatsby-config.js file. This enables the plugin to parse TOML files during the Gatsby build process.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-toml/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// In your gatsby-config.js\nplugins: [`gatsby-transformer-toml`]\n```\n\n----------------------------------------\n\nTITLE: Using request URL for base64 image cache key (JavaScript)\nDESCRIPTION: This commit fixes an issue where the base64 image cache key in gatsby-source-contentful was not using the request URL, potentially leading to cache collisions. This change uses the request URL to generate a more unique key.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-contentful/CHANGELOG.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\ncfd2384\n```\n\n----------------------------------------\n\nTITLE: Initialize Git Repository and Push to GitLab\nDESCRIPTION: This snippet initializes a Git repository, adds the GitLab remote, adds all files, and pushes the code to the main branch. Replace `git@gitlab.com:examplerepository` with your actual GitLab repository URL.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/previews-deploys-hosting/deploying-to-gitlab-pages.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngit init\ngit remote add origin git@gitlab.com:examplerepository\ngit add .\ngit push -u origin main\n```\n\n----------------------------------------\n\nTITLE: Page Information Injection\nDESCRIPTION: Illustrates how page information, such as the page path, component chunk name, and JSON name, is injected into the window object within a CDATA section.  This allows the JavaScript code running in the browser to access necessary information about the page after the initial HTML has loaded.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/production-app.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n/*\n<![CDATA[ */\n    window.page={\n      \"path\": \"/blog/2.js\",\n      \"componentChunkName\": \"component---src-blog-2-js\",\n      jsonName\": \"blog-2-995\"\n    };\n    window.dataPath=\"621/path---blog-2-995-a74-dwfQIanOJGe2gi27a9CLKHjamc\";\n  */ ]\n]>\n*/\n```\n\n----------------------------------------\n\nTITLE: Create Slugs for Markdown Files JavaScript\nDESCRIPTION: This JavaScript code snippet in gatsby-node.js demonstrates how to create slugs for MarkdownRemark nodes based on the file path.  It extracts the relative path, parses it, and constructs a URL-friendly slug value. The slug is added as a field to the node.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v0-to-v1.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n// In your gatsby-node.js\nconst path = require(\"path\")\n\nexports.onCreateNode = ({ node, boundActionCreators, getNode }) => {\n  const { createNodeField } = boundActionCreators\n  let slug\n  if (node.internal.type === `MarkdownRemark`) {\n    const fileNode = getNode(node.parent)\n    const parsedFilePath = path.parse(fileNode.relativePath)\n    if (parsedFilePath.name !== `index` && parsedFilePath.dir !== ``) {\n      slug = `/${parsedFilePath.dir}/${parsedFilePath.name}/`\n    } else if (parsedFilePath.dir === ``) {\n      slug = `/${parsedFilePath.name}/`\n    } else {\n      slug = `/${parsedFilePath.dir}/`\n    }\n\n    // Add slug as a field on the node.\n    createNodeField({ node, name: `slug`, value: slug })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing jscodeshift process call in Gatsby codemods\nDESCRIPTION: This commit fixes an issue with spawning the jscodeshift process natively within the Gatsby codemods package. It ensures that the codemods run correctly by addressing a bug related to how jscodeshift is called during the transformation process.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-codemods/CHANGELOG.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncall jscodeshift natively [#38635](https://github.com/gatsbyjs/gatsby/issues/38635) ([f129c37](https://github.com/gatsbyjs/gatsby/commit/f129c37e4540754613f403af1e54e74f674b178a))\n```\n\n----------------------------------------\n\nTITLE: Bumping Node.js minimum version for Gatsby\nDESCRIPTION: This commit bumps the minimum required Node.js version for Gatsby to 10.13.0.  This change enables Gatsby to leverage newer features and improvements available in more recent versions of Node.js.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-toml/CHANGELOG.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n**gatsby:** bump node min version to 10.13.0 ([#22400](https://github.com/gatsbyjs/gatsby/issues/22400)) ([83d681a](https://github.com/gatsbyjs/gatsby/commit/83d681a))\n```\n\n----------------------------------------\n\nTITLE: Gatsby Markdown Content\nDESCRIPTION: This Markdown snippet represents the content of a Gatsby blog post. It contains the main text of the post, which will be rendered as HTML by Gatsby during the build process. This example shows a simple 'Hello World!' message.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/using-markdown-pages/src/markdown-pages/post-1.md#_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\nHello World!\n```\n\n----------------------------------------\n\nTITLE: Configuring siteMetadata in gatsby-config.js\nDESCRIPTION: This code snippet shows how to configure the `siteMetadata` object in `gatsby-config.js` to store site-wide metadata such as title, description, Twitter username, image path, and the site URL. This data is then accessible via GraphQL and can be used in the SEO component. The `siteUrl` is used to create absolute URLs for meta tags.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/adding-common-features/adding-seo-component.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  siteMetadata: {\n    title: `Using Gatsby Head`,\n    description: `Example project for the Gatsby Head API`,\n    twitterUsername: `@gatsbyjs`,\n    image: `/gatsby-icon.png`,\n    siteUrl: `https://www.yourdomain.tld`,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Another Example MDX blog post\nDESCRIPTION: Another example of an MDX blog post to demonstrate the inclusion of frontmatter data and markdown content within the file. This code is similar to the previous one, demonstrating the basic structure of an MDX file.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-5/index.mdx#_snippet_2\n\nLANGUAGE: mdx\nCODE:\n```\n---\ntitle: \"Another Post\"\ndate: \"2021-07-24\"\nslug: \"another-post\"\n---\n\nHere's another post! It's even better than the first one!\n\n```\n\n----------------------------------------\n\nTITLE: Install React and React DOM\nDESCRIPTION: This command installs the `react` and `react-dom` packages, which are now peer dependencies in Gatsby v2. Required because these packages are no longer included in the `gatsby` package itself.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v1-to-v2.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install react react-dom\n```\n\n----------------------------------------\n\nTITLE: Feature: Accept CSS-Loader Options in Gatsby\nDESCRIPTION: This commit allows users to pass css-loader options directly to gatsby-plugin-sass. This feature enables developers to customize the behavior of the css-loader, providing more control over CSS processing.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-sass/CHANGELOG.md#_snippet_14\n\n\n\n----------------------------------------\n\nTITLE: Create a new Gatsby site\nDESCRIPTION: This command creates a new Gatsby site using the default starter.  The <site-name> argument specifies the name of the new site's directory.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/cheat-sheet.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngatsby new <span style=\"font-weight:normal\">my-site-name</span>\n```\n\n----------------------------------------\n\nTITLE: Update Cross-Env Dependency\nDESCRIPTION: This commit updates the cross-env dependency to version ^7.0.3. Cross-env is a tool for setting environment variables across different platforms.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-typography/CHANGELOG.md#_snippet_3\n\nLANGUAGE: None\nCODE:\n```\nupdate dependency cross-env to ^7.0.3 [#28505](https://github.com/gatsbyjs/gatsby/issues/28505) ([a819b9b](https://github.com/gatsbyjs/gatsby/commit/a819b9bfb663139f7b06c3ed7d6d6069a2382b2c))\n```\n\n----------------------------------------\n\nTITLE: Navigate to Project Directory (Shell)\nDESCRIPTION: Navigates the command line to the 'gatsby-site-using-local-plugins' directory, which contains the Gatsby site to be run.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/using-multiple-local-plugins/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd gatsby-site-using-local-plugins\n```\n\n----------------------------------------\n\nTITLE: Upgrading Major Versions in gatsby-plugin-page-creator\nDESCRIPTION: This snippet upgrades some non-breaking major versions of dependencies. This ensures the project is using the latest stable releases of its dependencies.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-page-creator/CHANGELOG.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nUpgrade some non-breaking major versions [#37406](https://github.com/gatsbyjs/gatsby/issues/37406) ([2ea80c0](https://github.com/gatsbyjs/gatsby/commit/2ea80c02e464fe9306f6a1eccbb6c74983a76208))\n```\n\n----------------------------------------\n\nTITLE: Update Bluebird dependency in Gatsby\nDESCRIPTION: This commit updates the dependency bluebird to version ^3.7.0.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-page-creator/CHANGELOG.md#_snippet_39\n\nLANGUAGE: plaintext\nCODE:\n```\nupdate dependency bluebird to ^3.7.0 ([#18029](https://github.com/gatsbyjs/gatsby/issues/18029)) ([bd235a8](https://github.com/gatsbyjs/gatsby/commit/bd235a8))\n```\n\n----------------------------------------\n\nTITLE: Replace gatsby-plugin-offline with gatsby-plugin-remove-serviceworker\nDESCRIPTION: Updates the `gatsby-config.js` file to replace `gatsby-plugin-offline` with `gatsby-plugin-remove-serviceworker`. This ensures that the old service worker is properly unregistered.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-offline/README.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nplugins: [\n-  `gatsby-plugin-offline`,\n+  `gatsby-plugin-remove-serviceworker`,\n]\n```\n\n----------------------------------------\n\nTITLE: Upgrading Axios in gatsby-source-medium\nDESCRIPTION: This chore updates the axios dependency to the latest version within the gatsby-source-medium package. This ensures that the package utilizes the most recent features and security patches available in axios.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-medium/CHANGELOG.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Create New Gatsby Site\nDESCRIPTION: This command initiates the interactive prompt for creating a new Gatsby site using the Gatsby CLI. It guides the user through a series of questions to configure the new site.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-1/index.mdx#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngatsby new\n```\n\n----------------------------------------\n\nTITLE: Example GraphQL Query Result for PDF Content\nDESCRIPTION: This JSON object represents the expected result of the GraphQL query for PDF content. It shows the structure of the data returned by the `allPdf` query, including the extracted content of a single PDF file. The `content` field contains the textual content extracted from the PDF, including newline and carriage return characters.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-pdf/README.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  \"data\": {\n    \"allPdf\": {\n      \"edges\": [\n        {\n          \"node\": {\n            \"content\": \"1 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed vel purus id tortor \\r\\neleifend vulputate. Integer interdum ultricies ligula, nec mattis lorem viverra ac. \\r\\n\"\n          }\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating peerDeps in gatsby-transformer-toml\nDESCRIPTION: This commit updates the peer dependencies for the gatsby-transformer-toml package. This ensures compatibility with other packages within the Gatsby ecosystem.  The update relates to issue #36965.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-toml/CHANGELOG.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nUpdate peerDeps [#36965](https://github.com/gatsbyjs/gatsby/issues/36965) ([b624442](https://github.com/gatsbyjs/gatsby/commit/b6244424fe8b724cbc23b80b2b4f5424cc2055a4))\n```\n\n----------------------------------------\n\nTITLE: Updating minor packages in gatsby-source-wikipedia (JavaScript)\nDESCRIPTION: This code snippet updates minor updates in packages except react, babel and eslint for gatsby-source-wikipedia package.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-wikipedia/CHANGELOG.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nupdate minor updates in packages except react, babel and eslint ([#17254](https://github.com/gatsbyjs/gatsby/issues/17254)) ([252d867](https://github.com/gatsbyjs/gatsby/commit/252d867))\n```\n\n----------------------------------------\n\nTITLE: Install Fontsource Open Sans package\nDESCRIPTION: This command installs the Fontsource package for the Open Sans font using npm.  This allows for self-hosting the font, reducing reliance on external CDNs and potentially improving site performance.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/styling/using-web-fonts.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install @fontsource/open-sans\n```\n\n----------------------------------------\n\nTITLE: Installing node-sass\nDESCRIPTION: This command installs the `node-sass` package, which can be used as an alternative Sass implementation. This is necessary if you want to use the Node-based implementation instead of the default Dart implementation.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-sass/README.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnpm install node-sass\n```\n\n----------------------------------------\n\nTITLE: Fixing Default Output Style and Allowing Unknown Options in Gatsby Plugin Sass\nDESCRIPTION: This commit fixes the default output style and allows unknown options in the gatsby-plugin-sass. It addresses the issue reported in the provided GitHub issue link.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-sass/CHANGELOG.md#_snippet_0\n\nLANGUAGE: none\nCODE:\n```\n- fix default output style & allow unknown options fix [#27822](https://github.com/gatsbyjs/gatsby/issues/27822) ([decd4ff](https://github.com/gatsbyjs/gatsby/commit/decd4ff5ea73ba2706e4034f3a1f8e089c4cc31e))\n```\n\n----------------------------------------\n\nTITLE: Fixing BabelRC Configs JavaScript\nDESCRIPTION: This commit addresses the use of proper babelrc configurations for compiling packages. It ensures consistent and correct Babel configurations across different packages within the Gatsby project. This fixes potential build issues and ensures that all JavaScript code is transpiled correctly according to the project's Babel settings, improving compatibility across different environments.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-catch-links/CHANGELOG.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nuse proper babelrc configs for compiling packages [#35948](https://github.com/gatsbyjs/gatsby/issues/35948) ([384e801](https://github.com/gatsbyjs/gatsby/commit/384e8019152ad9bfa221e3e8b6da54675c93f293))\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query for Fluid Images\nDESCRIPTION: This GraphQL query is designed to fetch images from WordPress posts and generate responsive images using the `fluid` fragment within `childImageSharp`.  The `maxWidth` parameter allows for creating images that adapt to different screen sizes, improving performance and user experience.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/wordpress-image-tutorial.md#_snippet_7\n\nLANGUAGE: GraphQL\nCODE:\n```\n{\n  allWordpressPost {\n    edges {\n      node {\n        childWordPressAcfPostPhoto {\n          photo {\n            localFile {\n              childImageSharp {\n                # Try editing the \"maxWidth\" value to generate resized images.\n                fluid(maxWidth: 500) {\n                  # In the GraphQL explorer, use field names\n                  # like \"src\". In your site's code, remove them\n                  # and use the fragments provided by Gatsby.\n                  src\n\n                  # This fragment won't work in the GraphQL\n                  # explorer, but you can use it in your site\n                  # ...GatsbyImageSharpFluid_withWebp\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing createAssetNode (TypeScript)\nDESCRIPTION: This snippet implements the `createAssetNode` function. It creates a unique ID for the asset node, defines the basic structure of the node, including `id`, `parent`, `children`, and `internal` properties. The `contentDigest` is generated based on the input data, and the node is created using `gatsbyApi.actions.createNode`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/creating-a-source-plugin/part-6/index.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport function createAssetNode(\n  gatsbyApi: SourceNodesArgs,\n  data: IPostImageInput\n) {\n  const id = gatsbyApi.createNodeId(`${NODE_TYPES.Asset}-${data.url}`)\n\n  const assetNode = {\n    id,\n    parent: null,\n    children: [],\n    internal: {\n      type: NODE_TYPES.Asset,\n      contentDigest: gatsbyApi.createContentDigest(data),\n    },\n  } satisfies IRemoteImageNodeInput\n\n  gatsbyApi.actions.createNode(assetNode)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating App Providers in Gatsby\nDESCRIPTION: This code snippet shows how to create a context provider in Gatsby using React's `createContext` and `useStaticQuery` hook to fetch site metadata. The `AppProviders` component wraps its children with `SiteMetadataContext.Provider`, making the site metadata available to any component that consumes the context.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/v5.6/index.md#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\nimport React from \"react\";\nimport { useStaticQuery, graphql } from \"gatsby\";\n\nconst SiteMetadataContext = React.createContext();\n\nexport const AppProviders = ({ children }) => {\n  const data = useStaticQuery(graphql`\n    {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `);\n\n  return (\n    <SiteMetadataContext.Provider value={data.site.siteMetadata}>\n      {children}\n    </SiteMetadataContext.Provider>\n  );\n};\n\nexport function useSiteMetadataContext() {\n  return React.useContext(SiteMetadataContext);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring gatsby-source-filesystem in gatsby-config.js\nDESCRIPTION: Configures multiple instances of the gatsby-source-filesystem plugin in the gatsby-config.js file.  Each instance is configured with a unique name and path, allowing files from different locations on the filesystem to be sourced into Gatsby. The ignore option specifies files to exclude, and fastHash improves performance.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-filesystem/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-source-filesystem`,\n      options: {\n        // The unique name for each instance\n        name: `pages`,\n        // Path to the directory\n        path: `${__dirname}/src/pages/`,\n      },\n    },\n    {\n      resolve: `gatsby-source-filesystem`,\n      options: {\n        name: `data`,\n        path: `${__dirname}/src/data/`,\n        // Ignore files starting with a dot\n        ignore: [`**/\\.*`],\n        // Use \"mtime\" and \"inode\" to fingerprint files (to check if file has changed)\n        fastHash: true,\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: CSS Title Animation Removal\nDESCRIPTION: This CSS code from `src/style/Header.scss` creates a glitching animation effect for the page title. Removing this snippet will disable the animation, presenting a static title. The animation is achieved using pseudo-elements and text shadows.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/e-commerce-with-datocms-and-snipcart/index.md#_snippet_5\n\nLANGUAGE: CSS\nCODE:\n```\n&:after,\n&:before {\n  content: attr(data-text);\n  position: absolute;\n  top: 0;\n  color: white;\n  background: #663399;\n  overflow: hidden;\n  clip: rect(0, 900px, 0, 0);\n  display: block;\n  padding: 2px;\n}\n\n&:after {\n  left: 3px;\n  text-shadow: -2px 0 red;\n  animation: noise-anim 2s infinite linear alternate-reverse;\n}\n\n&:before {\n  content: attr(data-text);\n  left: -3px;\n  text-shadow: 2px 0 blue;\n  animation: noise-anim-2 3s infinite linear alternate-reverse;\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Special Characters in Windows Paths (JavaScript)\nDESCRIPTION: This code snippet resolves an issue where special characters in Windows paths were not being handled correctly within the gatsby-page-utils package. It ensures that paths containing special characters are properly processed, preventing errors and improving compatibility across different operating systems. The change improves the reliability of file system operations within the Gatsby build process.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-page-utils/CHANGELOG.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n**gatsby:** Handle special characters in windows paths ([#19600](https://github.com/gatsbyjs/gatsby/issues/19600)) ([9929cf0](https://github.com/gatsbyjs/gatsby/commit/9929cf0))\n```\n\n----------------------------------------\n\nTITLE: Defining Font Face in CSS\nDESCRIPTION: This CSS snippet defines a font face for the 'Inter var' font family, specifying the font's weight, style, display behavior, and the source URL of the font file. The `font-display: swap;` property is used to ensure that text is visible even before the font has loaded. The `src` property points to the location of the font file in the `public` folder.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/styling/using-local-fonts.md#_snippet_1\n\nLANGUAGE: CSS\nCODE:\n```\n@font-face {\n  font-family: 'Inter var';\n  font-weight: 100 900;\n  font-display: swap;\n  font-style: normal;\n  font-named-instance: 'Regular';\n  src: url(/fonts/Inter-roman.var.woff2) format(\"woff2\");\n}\n```\n\n----------------------------------------\n\nTITLE: DSG based on Post Index in gatsby-node.js\nDESCRIPTION: This code snippet demonstrates how to implement Deferred Static Generation (DSG) based on the index of a post in gatsby-node.js. It defers the generation of all but the latest 100 posts, assuming posts are sorted by date in descending order.  The index in the forEach loop is used to determine which pages get `defer: true`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/rendering-options/using-deferred-static-generation.md#_snippet_6\n\nLANGUAGE: js\nCODE:\n```\n// Rest of gatsby-node.js\n\nconst posts = result.data.allMdx.nodes\n\nposts.forEach((post, index) => {\n  createPage({\n    path: post.slug,\n    component: blogPostTemplate,\n    context: {\n      slug: post.slug,\n    },\n    // index is zero-based index\n    defer: index + 1 > 100, // highlight-line\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Test Plugin Options Schema (JavaScript)\nDESCRIPTION: This example demonstrates how to use `testPluginOptionsSchema` to validate and test plugin options schemas, often used in conjunction with Jest. It checks if the provided plugin options conform to the expected schema, returning validation errors if not. It requires the Joi validation library.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-utils/README.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// This is an example using Jest (https://jestjs.io/)\nimport { testPluginOptionsSchema } from \"gatsby-plugin-utils\"\n\nit(`should partially validate one value of a schema`, async () => {\n  const pluginSchema = ({ Joi }) =>\n    Joi.object({\n      someOtherValue: Joi.string(),\n      toVerify: Joi.boolean(),\n    })\n  const expectedErrors = [`\"toVerify\" must be a boolean`]\n\n  // Only the \"toVerify\" key of the schema will be verified in this test\n  const { isValid, errors } = await testPluginOptionsSchema(pluginSchema, {\n    toVerify: `abcd`,\n  })\n\n  expect(isValid).toBe(false)\n  expect(errors).toEqual(expectedErrors)\n})\n```\n\n----------------------------------------\n\nTITLE: Webhook Message Payload Example\nDESCRIPTION: This JSON payload shows the structure of the message sent to a webhook when a Gatsby Cloud event occurs. It includes details like build ID, workspace name, site name, deploy preview URL, logs URL, duration, resource ID, resource type, and the event that triggered the notification.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/cloud/outgoing-notifications.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"body\": \"Markdown message similar to PR comment\",\n  \"buildId\": \"string-id-of-your-build\",\n  \"workspaceName\": \"your-workspace-name\",\n  \"siteName\": \"your-project-name\",\n  \"deployPreviewUrl\": \"https://your-project.staging-previews.gtsb.io\",\n  \"logsUrl\": \"https://staging.gtsb.io/dashboard/{workspace-id}/sites/{site-id}/builds/{build-id}/details\",\n  \"duration\": \"time-of-build\",\n  \"resourceId\": \"UUID of resource\",\n  \"resourceType\": \"SITE\",\n  \"event\": \"BUILD_SUCCEEDED\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding GET Search Parameters to Drupal Requests (JavaScript)\nDESCRIPTION: This code snippet shows how to add GET request parameters to the Drupal request URL using the `params` option in the `gatsby-source-drupal` plugin. This allows passing API keys or other custom parameters required by the Drupal JSON API.  The `apiBase` option is also included for specifying the JSON API endpoint.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-drupal/README.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// In your gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-source-drupal`,\n      options: {\n        baseUrl: `https://live-contentacms.pantheonsite.io/`,\n        apiBase: `api`, // optional, defaults to `jsonapi`\n        params: {\n          \"api-key\": \"your-api-key-header-here\", // any valid key value pair here\n        },\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Minor Package Updates (JavaScript)\nDESCRIPTION: These code snippets reflect updates to minor versions of packages within the gatsby-page-utils environment. The updates likely include bug fixes, performance improvements, or small feature additions that maintain backwards compatibility. They keep the package up-to-date with the latest improvements and security patches from its dependencies.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-page-utils/CHANGELOG.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nupdate minor updates in packages ([#18875](https://github.com/gatsbyjs/gatsby/issues/18875)) ([b692879](https://github.com/gatsbyjs/gatsby/commit/b692879))\nupdate minor updates in packages ([#19080](https://github.com/gatsbyjs/gatsby/issues/19080)) ([95e908e](https://github.com/gatsbyjs/gatsby/commit/95e908e))\n```\n\n----------------------------------------\n\nTITLE: Counter Component in React\nDESCRIPTION: This is a simple React component called 'Counter' that displays a number and allows the user to increment or decrement it. It uses React's state management and handles increment and decrement events.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/using-remark/src/pages/2018-01-27---custom-components/index.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from \"react\"\n\nconst counterStyle = {\n  /* styles skipped for brevity */\n}\n\nexport default class Counter extends React.Component {\n  static defaultProps = {\n    initialvalue: 0,\n  }\n\n  state = {\n    value: Number(this.props.initialvalue),\n  }\n\n  handleIncrement = () => {\n    this.setState(state => {\n      return {\n        value: state.value + 1,\n      }\n    })\n  }\n\n  handleDecrement = () => {\n    this.setState(state => {\n      return {\n        value: state.value - 1,\n      }\n    })\n  }\n\n  render() {\n    return (\n      <span style={counterStyle}>\n        <strong style={{ flex: `1 1` }}>{this.state.value}</strong>\n        <button onClick={this.handleDecrement}>-1</button>\n        <button onClick={this.handleIncrement}>+1</button>\n      </span>\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Re-generating Changelogs in gatsby-plugin-google-analytics\nDESCRIPTION: Re-generates the changelogs for the gatsby-plugin-google-analytics package. This chore ensures the documentation is up-to-date and accurately reflects the changes made to the plugin.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-google-analytics/CHANGELOG.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\n417df15\n```\n\n----------------------------------------\n\nTITLE: Configuring Parcel to use the namer plugin\nDESCRIPTION: This JSON snippet shows how to configure Parcel to use the `@gatsbyjs/parcel-namer-relative-to-cwd` namer plugin. It extends the default Parcel configuration and adds the plugin to the list of namers.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-parcel-namer-relative-to-cwd/README.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"@parcel/config-default\",\n  \"namers\": [\"@gatsbyjs/parcel-namer-relative-to-cwd\", \"...\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Updating gatsby-remark-responsive-iframe - JavaScript\nDESCRIPTION: This commit updates the minor and patch versions for the gatsby-remark-responsive-iframe package itself.  This likely contains minor bug fixes or improvements to the responsive iframe functionality.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-responsive-iframe/CHANGELOG.md#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nupdate minor and patch for gatsby-remark-responsive-iframe [#28087](https://github.com/gatsbyjs/gatsby/issues/28087) ([a5b27b5](https://github.com/gatsbyjs/gatsby/commit/a5b27b50e97dd8a7a0c271d1a412159fd72ef5bc))\n```\n\n----------------------------------------\n\nTITLE: GraphQL Config for Multiple Projects\nDESCRIPTION: This snippet shows how to configure the VSCode GraphQL plugin for multiple GraphQL projects including Gatsby, using the `projects` key.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/local-development/graphql-typegen.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  projects: {\n    site: require(\"./.cache/typegen/graphql.config.json\"),\n    other: {\n      // other config\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Node Engine Version (package.json)\nDESCRIPTION: Illustrates how to update the `engines` field in `package.json` to specify the minimum required Node.js version for Gatsby v4.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v3-to-v4.md#_snippet_22\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"engines\": {\n    \"node\": \">=14.15.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Node version in Gatsby\nDESCRIPTION: This snippet bumps the minimum required Node.js version for Gatsby to 10.13.0. This change ensures compatibility with newer features and security updates in Node.js, improving the overall stability and performance of Gatsby projects.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-npm-package-search/CHANGELOG.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n83d681a\n```\n\n----------------------------------------\n\nTITLE: Detecting Gatsby Cloud Environment (Node.js)\nDESCRIPTION: This code snippet demonstrates how to detect if the script is running in a Gatsby Cloud environment by checking the value of the `GATSBY_CLOUD` environment variable. It's crucial for adapting the script's behavior between local and cloud contexts, such as disabling interactive prompts in Gatsby Cloud.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/config-files/gatsby-provision.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nprocess.env.GATSBY_CLOUD === \"true\"\n```\n\n----------------------------------------\n\nTITLE: Fixing Ignore Pattern\nDESCRIPTION: This snippet fixes an issue where the ignore pattern was not wrapped in quotes.  It resolves issue #23176.  This fix prevents errors during file processing by ensuring the ignore patterns are correctly interpreted. No specific dependencies are present in the snippet.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-emotion/CHANGELOG.md#_snippet_8\n\nLANGUAGE: Other\nCODE:\n```\nwrap ignore pattern in quotes ([#23176](https://github.com/gatsbyjs/gatsby/issues/23176)) ([7563db6](https://github.com/gatsbyjs/gatsby/commit/7563db6))\n```\n\n----------------------------------------\n\nTITLE: Updating xlsx Dependency in GatsbyJS\nDESCRIPTION: This snippet addresses updating the `xlsx` dependency in `gatsby-transformer-excel`. This change ensures compatibility and addresses potential issues related to the excel parsing library. The dependency is updated to ensure it aligns with the requirements of `gatsby-transformer-excel`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-excel/CHANGELOG.md#_snippet_9\n\nLANGUAGE: None\nCODE:\n```\nupdate dependency xlsx to ^0.17.2 for gatsby-transformer-excel [#33370](https://github.com/gatsbyjs/gatsby/issues/33370) ([8cfcc26](https://github.com/gatsbyjs/gatsby/commit/8cfcc260053b51bc3069def6314af3cc54bea5fd))\n```\n\n----------------------------------------\n\nTITLE: Example frontmatter error object\nDESCRIPTION: This JSON object shows an example of the error object that can be returned in the frontmatter if an error occurs during processing. It includes information such as the error message and stack trace.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-javascript-frontmatter/README.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"error\": {\n    \"err\": true,\n    \"message\": \"we threw an error\",\n    \"stack\": \"This is a stringified stack trace\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Re-generating Changelogs in Gatsby Plugin\nDESCRIPTION: This snippet re-generates changelogs for the gatsby-plugin-coffeescript package, addressing issue #32886.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-coffeescript/CHANGELOG.md#_snippet_7\n\nLANGUAGE: Other\nCODE:\n```\nre-generate changelogs [#32886](https://github.com/gatsbyjs/gatsby/issues/32886) ([417df15](https://github.com/gatsbyjs/gatsby/commit/417df15230be368a9db91f2ad1a9bc0442733177))\n```\n\n----------------------------------------\n\nTITLE: Bug Fix: JSON Parse Error Improvement in Gatsby\nDESCRIPTION: This code snippet improves the JSON parse error message to help users locate problematic content more easily. It enhances the error reporting mechanism within the `gatsby-transformer-json` plugin, providing better debugging information. No specific dependencies are listed.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-json/CHANGELOG.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n66fc314\n```\n\n----------------------------------------\n\nTITLE: Adding JSON API Filters in Gatsby Source Drupal\nDESCRIPTION: This feature adds the ability to use JSON API filters when querying data from Drupal within the Gatsby environment. It enables more specific and efficient data retrieval based on filter criteria defined in the query.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-drupal/CHANGELOG.md#_snippet_26\n\n\n\n----------------------------------------\n\nTITLE: HTML Output with Details Tag (HTML)\nDESCRIPTION: Demonstrates the HTML output when the details option is enabled in the configuration. It illustrates how the plugin transforms custom blocks into HTML details and summary elements.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-custom-blocks/README.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<details class=\"custom-block danger\">\n  <div class=\"custom-block-body\"><p>content</p></div>\n</details>\n\n<details class=\"custom-block\">\n  <summary class=\"custom-block-heading\">This is a title!</summary>\n  <div class=\"custom-block-body\"><p>content</p></div>\n</details>\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Yarn\nDESCRIPTION: This command installs all the dependencies for the three projects (api, example-site, and source-plugin) within the monorepo using Yarn. This requires Yarn to be installed globally.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/creating-source-plugins/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Initializing package.json for Theme Development (root)\nDESCRIPTION: Initializes the root package.json file to enable yarn workspaces. It defines the `gatsby-theme-events` and `site` directories as workspaces, allowing for local theme development and testing.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/building-a-theme.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"private\": true,\n  \"workspaces\": [\"gatsby-theme-events\", \"site\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up SVG for Choropleth with d3v4\nDESCRIPTION: This JavaScript code snippet sets up the SVG element for a Choropleth map using d3v4. It appends an SVG element to the specified selection and sets its width and height based on the provided measurements, maintaining a 1.6 aspect ratio. The function expects a d3 selection and a measurements object containing the width.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/using-javascript-transforms/src/articles/2017-03-09-choropleth-on-d3v4/_choropleth.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngraph.setup = (selection, measurements) => {\n  // the path string is drawn expecting:\n  // a width of 950px\n  // a height of 600px\n  // which gives an aspect ratio of 1.6\n\n  let svg = selection\n    .append(\"svg\")\n    .attr(\"width\", measurements.width)\n    .attr(\"height\", measurements.width / 1.6)\n\n  return svg\n}\n```\n\n----------------------------------------\n\nTITLE: Gatsby Project File Structure\nDESCRIPTION: This snippet outlines the typical file structure of a Gatsby project created with the default starter. It shows the key directories and configuration files, providing an overview of where different parts of the project are located.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/e2e-tests/development-runtime/README.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n.\n‚îú‚îÄ‚îÄ node_modules\n‚îú‚îÄ‚îÄ src\n‚îú‚îÄ‚îÄ .gitignore\n‚îú‚îÄ‚îÄ .prettierrc\n‚îú‚îÄ‚îÄ gatsby-browser.js\n‚îú‚îÄ‚îÄ gatsby-config.js\n‚îú‚îÄ‚îÄ gatsby-node.js\n‚îú‚îÄ‚îÄ gatsby-ssr.js\n‚îú‚îÄ‚îÄ LICENSE\n‚îú‚îÄ‚îÄ package-lock.json\n‚îú‚îÄ‚îÄ package.json\n‚îú‚îÄ‚îÄ README.md\n‚îî‚îÄ‚îÄ yarn.lock\n```\n\n----------------------------------------\n\nTITLE: Configuring Gatsby Theme\nDESCRIPTION: This code snippet demonstrates how to configure a Gatsby theme by adding the theme as a plugin in the `gatsby-config.js` file. It exports a configuration object with a plugins array containing the theme's name.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/building-a-theme.md#_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  plugins: [\"@jlengstorf/gatsby-theme-events\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Gatsby SSR File System Read Example JavaScript\nDESCRIPTION: This code snippet demonstrates how the `fs` module can be used within a `gatsby-ssr.js` file, which can potentially interfere with Gatsby's incremental build process.  It reads a file directly from the filesystem, which Gatsby may not be able to track effectively, leading to unreliable incremental builds. Gatsby disables Incremental Builds when it detects use of `fs` module.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/v3.0/index.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst fs = require(`fs`)\nconst someUntrackedInput = fs.readFileSync(`some-path.txt`)\n\n// Rest of gatsby-ssr.js file\n```\n\n----------------------------------------\n\nTITLE: Applying patches for v4\nDESCRIPTION: This snippet indicates the application of patches for version 4 of the gatsby-transformer-asciidoc package. Patches are typically used to address bugs or introduce minor improvements without requiring a full version upgrade.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-asciidoc/CHANGELOG.md#_snippet_18\n\nLANGUAGE: Text\nCODE:\n```\napply patches for v4 [#33170](https://github.com/gatsbyjs/gatsby/issues/33170) ([f8c5141](https://github.com/gatsbyjs/gatsby/commit/f8c5141bf72108a53338fd01514522ae7a1b37bf))\n```\n\n----------------------------------------\n\nTITLE: Install gatsby-transformer-toml\nDESCRIPTION: This command installs the gatsby-transformer-toml plugin from npm, enabling TOML file parsing in a Gatsby project.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-toml/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install gatsby-transformer-toml\n```\n\n----------------------------------------\n\nTITLE: Updating Babel Monorepo in gatsby-plugin-google-analytics\nDESCRIPTION: Updates the Babel monorepo in the gatsby-plugin-google-analytics package. This maintenance task ensures the plugin leverages the most recent Babel features and transformations for enhanced performance and improved compatibility.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-google-analytics/CHANGELOG.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\n466d4c0\n```\n\n----------------------------------------\n\nTITLE: Updating semver dependency in gatsby-remark-images-contentful\nDESCRIPTION: This code snippet represents a bug fix where the semver dependency was updated to version ^7.3.7. This ensures compatibility and stability for the gatsby-remark-images-contentful package.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-images-contentful/CHANGELOG.md#_snippet_10\n\nLANGUAGE: None\nCODE:\n```\nupdate dependency semver to ^7.3.7 [#35543](https://github.com/gatsbyjs/gatsby/issues/35543) ([f593e00](https://github.com/gatsbyjs/gatsby/commit/f593e005e4561b423a297e967205d833451a2f55))\n```\n\n----------------------------------------\n\nTITLE: Playground setup: Run create-gatsby script\nDESCRIPTION: This command executes the `create-gatsby` script from a specific path, typically within the Gatsby monorepo. This allows developers to test local changes to the `create-gatsby` package by creating new Gatsby sites in the playground directory.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/create-gatsby/README.md#_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\nnode <some-path>/packages/create-gatsby/cli.js\n```\n\n----------------------------------------\n\nTITLE: Installing Gatsby CLI with npm\nDESCRIPTION: This snippet demonstrates how to install the Gatsby command-line interface (CLI) globally using npm. This allows users to use Gatsby commands like `gatsby new` to create new Gatsby sites.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/glossary/node.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g gatsby-cli\n```\n\n----------------------------------------\n\nTITLE: Chore: Update Babel Monorepo\nDESCRIPTION: This code snippet updates the Babel monorepo dependency. Keeping Babel up to date ensures that the gatsby-plugin-google-gtag package can leverage the latest JavaScript features and maintain compatibility with modern build tools.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-google-gtag/CHANGELOG.md#_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n#### Chores\n\n- update babel monorepo [#37386](https://github.com/gatsbyjs/gatsby/issues/37386) ([b941876](https://github.com/gatsbyjs/gatsby/commit/b94187633d94d0f0071b38ffe93380dd802ec70f))\n```\n\nLANGUAGE: diff\nCODE:\n```\n#### Bug Fixes\n\n- update babel monorepo [#37568](https://github.com/gatsbyjs/gatsby/issues/37568) ([13a0a9e](https://github.com/gatsbyjs/gatsby/commit/13a0a9e83dcb015b65dff6b73cdd5dea09c2988f))\n```\n\n----------------------------------------\n\nTITLE: MDX Content for Blog Post 2\nDESCRIPTION: This MDX file contains the content for the second blog post, including a title and slug defined in the frontmatter, and the actual content \"Gatsby is the best\". The frontmatter data can be queried and used to generate pages.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/routing/mdx.md#_snippet_13\n\nLANGUAGE: mdx\nCODE:\n```\n---\ntitle: Blog Post 2\nslug: /blog-2\n---\n\nGatsby is the best\n```\n\n----------------------------------------\n\nTITLE: Updating Babel Monorepo in Gatsby Plugin JSS (JavaScript)\nDESCRIPTION: This commit updates the Babel monorepo dependency within the gatsby-plugin-jss package.  Keeping Babel up-to-date ensures proper transpilation of modern JavaScript syntax.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-jss/CHANGELOG.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nupdate babel monorepo [#27528](https://github.com/gatsbyjs/gatsby/issues/27528) ([539dbb0](https://github.com/gatsbyjs/gatsby/commit/539dbb09166e346a6cee568973d2de3d936e8ef3))\n```\n\n----------------------------------------\n\nTITLE: Bumping Node Min Version\nDESCRIPTION: This snippet increases the minimum required Node.js version to 10.13.0 for the Gatsby project.  This change ensures compatibility with newer features and improvements in the Gatsby framework.  Older Node.js versions will no longer be supported.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-mongodb/CHANGELOG.md#_snippet_13\n\n\n\n----------------------------------------\n\nTITLE: Bumping Babel Minor Version\nDESCRIPTION: This commit increments the minor version of the Babel dependency. A minor version bump typically includes new features or improvements without breaking existing functionality.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-javascript-frontmatter/CHANGELOG.md#_snippet_11\n\nLANGUAGE: Shell\nCODE:\n```\nbump babel minor [#31857](https://github.com/gatsbyjs/gatsby/issues/31857) ([7d42e8d](https://github.com/gatsbyjs/gatsby/commit/7d42e8d866e46e9c39838d812d080d06433f7060))\n```\n\n----------------------------------------\n\nTITLE: Updating babel monorepo in gatsby-source-wikipedia (JavaScript)\nDESCRIPTION: This commit message shows the update of the babel monorepo. It updates the babel monorepo as a chore.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-wikipedia/CHANGELOG.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nupdate babel monorepo [#27528](https://github.com/gatsbyjs/gatsby/issues/27528) ([539dbb0](https://github.com/gatsbyjs/gatsby/commit/539dbb09166e346a6cee568973d2de3d936e8ef3))\n```\n\n----------------------------------------\n\nTITLE: Importing MDX into JSX\nDESCRIPTION: Shows how to import an MDX file (`some-text.mdx`) into a JSX component (`component.jsx`). This allows using MDX content within React components.  Note the explicit `.mdx` extension in the import.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/routing/mdx.md#_snippet_7\n\nLANGUAGE: JSX\nCODE:\n```\nimport * as React from \"react\"\n// highlight-next-line\nimport SomeText from \"../content/some-text.mdx\"\n\nconst Component = () => (\n  <main>\n    {/* highlight-next-line */}\n    <SomeText />\n  </main>\n)\n\nexport default Component\n```\n\n----------------------------------------\n\nTITLE: Include gatsby-plugin-postcss in gatsby-config.js (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to include the gatsby-plugin-postcss in your gatsby-config.js file to restore v1 PostCSS plugin setup.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v1-to-v2.md#_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nplugins: [`gatsby-plugin-postcss`],\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query for Gentics Mesh Content\nDESCRIPTION: This GraphQL query fetches vehicle nodes from the Gentics Mesh API using the configured `mesh` field. It filters the nodes based on the schema being 'vehicle', limits the results to 2 items per page, and retrieves the UUID, slug, weight, and vehicleImage path for each vehicle. It also specifies the page number.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/sourcing-from-gentics-mesh.md#_snippet_4\n\nLANGUAGE: GraphQL\nCODE:\n```\nquery {\n  mesh {\n    nodes(filter: { schema: { is: vehicle } }, perPage: 2, page: 5) {\n      elements {\n        uuid\n        ... on MESH_vehicle {\n          fields {\n            slug\n            weight\n            vehicleImage {\n              path\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating App Page with Router (React/JSX)\nDESCRIPTION: This React component, App, uses @reach/router to define the routing structure for the client-only routes. It includes routes for '/app/profile' (Profile component) and '/app/login' (Login component), wrapped within a Layout component. It acts as a central routing point for authenticated areas of the application.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/authentication-tutorial.md#_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\"\nimport { Router } from \"@reach/router\"\nimport Layout from \"../components/layout\"\nimport Profile from \"../components/profile\"\nimport Login from \"../components/login\"\n\nconst App = () => (\n  <Layout>\n    <Router>\n      <Profile path=\"/app/profile\" />\n      <Login path=\"/app/login\" />\n    </Router>\n  </Layout>\n)\n\nexport default App\n```\n\n----------------------------------------\n\nTITLE: Creating a Page Template Component in Gatsby with JSX and GraphQL\nDESCRIPTION: This code demonstrates creating a page template component in Gatsby that fetches data using GraphQL. This template is used for programmatically creating pages from data, such as Markdown files. It queries for a specific post by slug and renders its title and content.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/conceptual/building-with-components.md#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\nimport * as React from \"react\"\nimport { graphql } from \"gatsby\"\n\nfunction BlogPostTemplate(props) {\n  const post = props.data.markdownRemark\n  return (\n    <div>\n      <h1>{post.frontmatter.title}</h1>\n      <div dangerouslySetInnerHTML={{ __html: post.html }} />\n    </div>\n  )\n}\n\nexport default BlogPostTemplate\n\nexport const pageQuery = graphql`\n  query($slug: String!) {\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      html\n      frontmatter {\n        title\n      }\n    }\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: Gatsby Node Schema Customization\nDESCRIPTION: Defines GraphQL types for MarkdownRemark and Frontmatter using Gatsby's Schema Customization API. This allows for flexibility in querying blog posts, especially when a featured image is not present in the frontmatter.  The `featuredImg` field is linked to the `File` node using the `@link` directive.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/images-and-media/preprocessing-external-images.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { createRemoteFileNode } = require(\"gatsby-source-filesystem\")\n\nexports.createSchemaCustomization = ({ actions }) => {\n  const { createTypes } = actions\n\n  createTypes(`\n    type MarkdownRemark implements Node {\n      frontmatter: Frontmatter\n      featuredImg: File @link(from: \"fields.localFile\")\n    }\n\n    type Frontmatter {\n      title: String!\n      featuredImgUrl: String\n      featuredImgAlt: String\n    }\n  `)\n}\n\n```\n\n----------------------------------------\n\nTITLE: Handling Stripe Redirect to Checkout (JSX)\nDESCRIPTION: This function handles the redirection to Stripe's hosted checkout page. It takes an event object, prevents the default action, sets a loading state, and uses the `stripe.redirectToCheckout` method to redirect the user to Stripe. It also handles potential errors during the checkout process.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/ecommerce-tutorial/index.md#_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nconst redirectToCheckout = async event => {\n  event.preventDefault()\n  setLoading(true)\n\n  const stripe = await getStripe()\n  const { error } = await stripe.redirectToCheckout({\n    mode: \"payment\",\n    lineItems: [{ price: \"price_1GriHeAKu92npuros981EDUL\", quantity: 1 }],\n    successUrl: `http://localhost:8000/page-2/`,\n    cancelUrl: `http://localhost:8000/`,\n  })\n\n  if (error) {\n    console.warn(\"Error:\", error)\n    setLoading(false)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Restoring Gatsby v1 CSS Modules Behavior (JavaScript)\nDESCRIPTION: Provides JavaScript code to restore the Gatsby V1 behavior for CSS Modules class names using webpack configuration. This involves adjusting the `camelCase` option in the CSS Loader to `false` in `gatsby-node.js`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v1-to-v2.md#_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nconst cssLoaderRe = /\\/css-loader\\//\nconst targetFile = `.module.css`\n\nconst processRule = rule => {\n  if (rule.oneOf) {\n    return {\n      ...rule,\n      oneOf: rule.oneOf.map(processRule),\n    }\n  }\n\n  if (!rule.test.test(targetFile)) {\n    return rule\n  }\n\n  if (Array.isArray(rule.use)) {\n    return {\n      ...rule,\n      use: rule.use.map(use => {\n        if (!cssLoaderRe.test(use.loader)) {\n          return use\n        }\n\n        // adjust css-loader options\n        return {\n          ...use,\n          options: {\n            ...use.options,\n            camelCase: false,\n          },\n        }\n      }),\n    }\n  }\n\n  return rule\n}\n\nexports.onCreateWebpackConfig = ({ getConfig, actions }) => {\n  const config = getConfig()\n\n  const newConfig = {\n    ...config,\n    module: {\n      ...config.module,\n      rules: config.module.rules.map(processRule),\n    },\n  }\n  actions.replaceWebpackConfig(newConfig)\n}\n```\n\n----------------------------------------\n\nTITLE: Theme UI Spacing - JavaScript\nDESCRIPTION: This code snippet adds a `space` array to the theme object, defining a scale of values for margin and padding.  These values can be referenced in the `sx` prop to create consistent spacing across your site.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/styling/theme-ui.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default {\n  colors: {\n    text: \"#333\",\n    background: \"#fff\",\n    primary: \"#639\",\n    secondary: \"#ff6347\",\n  },\n  fonts: {\n    body: \"system-ui, sans-serif\",\n    heading: \"system-ui, sans-serif\",\n    monospace: \"Menlo, monospace\",\n  },\n  fontWeights: {\n    body: 400,\n    heading: 700,\n    bold: 700,\n  },\n  lineHeights: {\n    body: 1.5,\n    heading: 1.125,\n  },\n  fontSizes: [12, 14, 16, 20, 24, 32, 48, 64, 72],\n  space: [0, 4, 8, 16, 32, 64, 128, 256, 512],\n}\n```\n\n----------------------------------------\n\nTITLE: Destructure Gatsby APIs TypeScript\nDESCRIPTION: Destructures `actions` (including `touchNode`), `reporter`, `cache`, and `getNodes` from the `gatsbyApi` object passed to the `sourceNodes` function. These destructured elements provide access to Gatsby's internal APIs for managing nodes, reporting progress, caching data, and accessing existing nodes.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/creating-a-source-plugin/part-5/index.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Imports\n\nlet isFirstSource = true\n\nexport const sourceNodes: GatsbyNode[`sourceNodes`] = async (gatsbyApi) => {\n  // highlight-next-line\n  const { actions, reporter, cache, getNodes } = gatsbyApi\n  // highlight-next-line\n  const { touchNode } = actions\n  const { endpoint } = pluginOptions\n\n  // Rest of sourceNodes\n}\n\n// Rest of file\n```\n\n----------------------------------------\n\nTITLE: Using the `config` Function for Deferred Static Generation (DSG)\nDESCRIPTION: This code shows how to use the `config` function in a Gatsby page to configure Deferred Static Generation (DSG).  The `config` function can define a GraphQL query and return an object with a `defer` property based on query results and URL parameters.  This example defers generation based on the product name.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/routing/file-system-route-api.md#_snippet_12\n\nLANGUAGE: JSX\nCODE:\n```\nimport { graphql } from \"gatsby\"\n\n// The rest of your page, including imports, page component & page query etc.\n\nexport async function config() {\n  const { data } = graphql`\n    {\n      # Your GraphQL query\n    }\n  `\n\n  return ({ params }) => {\n    return {\n      defer: params.name === data.someValue.name,\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON middleware for all requests (JS)\nDESCRIPTION: This snippet shows how to configure the `json` middleware to handle all possible requests for a given function. It sets the `type` property to `*/*` for the `json` middleware, and sets the type to `-` for `raw`, `text`, and `urlencoded` middleware to prevent them from processing the request before the `json` middleware. Dependencies: None.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/functions/middleware-and-helpers.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport const config = {\n  bodyParser: {\n    raw: {\n      type: `-`,\n    },\n    text: {\n      type: `-`,\n    },\n    urlencoded: {\n      type: `-`,\n      extended: true,\n    },\n    json: {\n      type: `*/*`,\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Bug Fix: Disable HMR for CSS Modules\nDESCRIPTION: This commit disables Hot Module Replacement (HMR) for CSS modules within gatsby-plugin-sass.  Disabling HMR for CSS modules can prevent issues with CSS updates during development.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-sass/CHANGELOG.md#_snippet_12\n\n\n\n----------------------------------------\n\nTITLE: Generated HTML Script Tag with Asset Prefix\nDESCRIPTION: This HTML snippet shows an example of a script tag with the asset prefix applied. After building the Gatsby site with the `--prefix-paths` flag or the `PREFIX_PATHS` environment variable, all asset URLs will be prefixed with the specified `assetPrefix` value from the configuration.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/previews-deploys-hosting/asset-prefix.md#_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<script src=\"https://cdn.example.com/app-common-1234.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Updating Axios Dependency in Gatsby\nDESCRIPTION: This code snippet represents an update to the axios dependency to version ^0.19.2 within the Gatsby project. Updating axios ensures the project benefits from the latest bug fixes and features in the axios library, which is commonly used for making HTTP requests. This update maintains compatibility and potentially improves the reliability of network requests.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-screenshot/CHANGELOG.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n91e780f\n```\n\n----------------------------------------\n\nTITLE: Applying Patches for v4 in Gatsby\nDESCRIPTION: This commit applies patches for v4 in the gatsby-plugin-nprogress package. These patches address issues and ensure compatibility with the v4 release of Gatsby.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-nprogress/CHANGELOG.md#_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\napply patches for v4 [#33170](https://github.com/gatsbyjs/gatsby/issues/33170) ([f8c5141](https://github.com/gatsbyjs/gatsby/commit/f8c5141bf72108a53338fd01514522ae7a1b37bf))\n```\n\n----------------------------------------\n\nTITLE: Updating babel monorepo\nDESCRIPTION: This snippet describes updating the babel monorepo. This update is intended to update babel dependencies.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-asciidoc/CHANGELOG.md#_snippet_8\n\nLANGUAGE: Text\nCODE:\n```\nupdate babel monorepo [#32996](https://github.com/gatsbyjs/gatsby/issues/32996) ([048c7a7](https://github.com/gatsbyjs/gatsby/commit/048c7a727bbc6a9ad8e27afba72ee20e946c4aaa))\n```\n\n----------------------------------------\n\nTITLE: Configure custom snippet directory JavaScript\nDESCRIPTION: Configures the plugin to look for code snippet files in a `snippets` directory.  The `directory` option specifies the path to this directory relative to the gatsby-config.js file's location.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-embed-snippet/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  resolve: `gatsby-remark-embed-snippet`,\n  options: {\n    directory: `${__dirname}/snippets/`\n  }\n},\n```\n\n----------------------------------------\n\nTITLE: Basic Router Component Example in JSX\nDESCRIPTION: Demonstrates a basic implementation of the `<Router>` component from `@reach/router` in a Gatsby project.  It illustrates how to define routes using the `path` prop on the immediate children of the `<Router>` component. It shows a simple setup for routing to different content based on the URL.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v1-to-v2.md#_snippet_21\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\"\nimport { Router } from \"@reach/router\"\n\nexport default function Routes() {\n  return (\n    <Router>\n      <div path=\"/\">I am the home!</div>\n      <div path=\"/about\">Here's a bit about me</div>\n      <div path=\"/store\">Buy my t-shirts!</div>\n    </Router>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Running Gatsby Codemods with JSCodeshift\nDESCRIPTION: This command runs a specified codemod on a project using the JSCodeshift CLI. It requires the path to the transform script within the gatsby-codemods package and the target path (typically the Gatsby project directory).\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-codemods/README.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\njscodeshift -t node_modules/gatsby-codemods/transforms/global-graphql-calls.js my-project\n```\n\n----------------------------------------\n\nTITLE: Installing TypeScript Dependencies for Jest\nDESCRIPTION: This command installs @types/jest and @babel/preset-typescript as development dependencies. These packages provide TypeScript typings for Jest and a Babel preset for transpiling TypeScript code, respectively, enabling the use of TypeScript in Jest tests.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/testing/unit-testing.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @types/jest @babel/preset-typescript --save-dev\n```\n\n----------------------------------------\n\nTITLE: Add structured text node type in Gatsby Contentful\nDESCRIPTION: This commit introduces a structured text node type to gatsby-source-contentful. This new node type allows for more structured and organized content retrieval from Contentful, improving the flexibility and usability of the plugin.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-contentful/CHANGELOG.md#_snippet_36\n\n\n\n----------------------------------------\n\nTITLE: Fix: Update dependency @apollo/client for gatsby-source-graphql\nDESCRIPTION: This snippet describes a bug fix in version 5.12.0 of the gatsby-source-graphql plugin.  It updates the @apollo/client dependency to version ^3.7.16. This is likely to address compatibility issues or resolve bugs related to the Apollo Client within the GraphQL source plugin.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-graphql/CHANGELOG.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Install Dependencies using Yarn\nDESCRIPTION: Installs the node modules required by the package.json file. This is a one-time setup step before running the benchmark.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/benchmarks/markdown_table/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Installing resolve-url-loader\nDESCRIPTION: This command installs the `resolve-url-loader` package, which is used to resolve `url()` paths relative to the entry SCSS/Sass file. This is needed to correctly handle relative paths in `url()` declarations.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-sass/README.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nnpm install resolve-url-loader --save-dev\n```\n\n----------------------------------------\n\nTITLE: Correcting Links in Package Changelogs\nDESCRIPTION: This snippet mentions correcting links in package changelogs. This improves the usability of the changelog by ensuring users can navigate to the related commits or issues.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-medium/CHANGELOG.md#_snippet_8\n\nLANGUAGE: Diff\nCODE:\n```\n- correct links in package changelogs ([#15630](https://github.com/gatsbyjs/gatsby/issues/15630)) ([d07b9dd](https://github.com/gatsbyjs/gatsby/commit/d07b9dd))\n```\n\n----------------------------------------\n\nTITLE: Adding Info about Page Object in gatsby-plugin-sitemap\nDESCRIPTION: This chore commit adds information about the `page` object to the README file of the `gatsby-plugin-sitemap`. This enhancement makes it easier for users to understand and utilize page object in their sitemap configuration.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-sitemap/CHANGELOG.md#_snippet_10\n\nLANGUAGE: TEXT\nCODE:\n```\nAdd info about `page` object to README [#36582](https://github.com/gatsbyjs/gatsby/issues/36582) ([b005669](https://github.com/gatsbyjs/gatsby/commit/b00566970a0acdec8cdefbd4b8bd2584ab15cf38))\n```\n\n----------------------------------------\n\nTITLE: Fixing ignore pattern wrapping\nDESCRIPTION: This commit fixes an issue where the ignore pattern was not properly wrapped in quotes. This ensures that the ignore pattern is correctly interpreted.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-twitter/CHANGELOG.md#_snippet_20\n\nLANGUAGE: Text\nCODE:\n```\n- wrap ignore pattern in quotes ([#23176](https://github.com/gatsbyjs/gatsby/issues/23176)) ([7563db6](https://github.com/gatsbyjs/gatsby/commit/7563db6))\n```\n\n----------------------------------------\n\nTITLE: JSX Example\nDESCRIPTION: Demonstrates a simple JSX example showing how to assign a heading to a variable.  JSX is a JavaScript syntax extension that describes the DOM structure for your component.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-2/index.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst hello = <h1>Hello world!</h1>\n```\n\n----------------------------------------\n\nTITLE: Install OpenTelemetry Dependencies (npm)\nDESCRIPTION: This command installs the necessary npm packages for configuring OpenTelemetry with gRPC to send build traces to a backend like Honeycomb. It includes packages for the OpenTelemetry API, auto-instrumentation, gRPC exporter, Node SDK, shim for OpenTracing, and OpenTracing itself.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/performance-tracing.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install @grpc/grpc-js @opentelemetry/api @opentelemetry/auto-instrumentations-node @opentelemetry/exporter-collector-grpc @opentelemetry/sdk-node @opentelemetry/shim-opentracing opentracing\n```\n\n----------------------------------------\n\nTITLE: Determine Logical CPU Core Count using gatsby-core-utils (JS)\nDESCRIPTION: Calculates the number of logical CPU cores using `gatsby-core-utils`. It is configured with the `GATSBY_CPU_COUNT` environment variable set to 'logical_cores'.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-core-utils/README.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { cpuCoreCount } = require(\"gatsby-core-utils\")\nprocess.env.GATSBY_CPU_COUNT = \"logical_cores\"\n\nconst coreCount = cpuCoreCount()\n// ...\n```\n\n----------------------------------------\n\nTITLE: Displaying Gatsby Environment Information (Shell)\nDESCRIPTION: This command displays helpful environment information about your Gatsby project and system, including versions of Gatsby, Node.js, and installed plugins. This information is often required when reporting bugs or seeking support. It should be run from the root of your project.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/gatsby-cli.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\ngatsby info\n```\n\n----------------------------------------\n\nTITLE: Markdown Unordered List\nDESCRIPTION: Demonstrates how to create an unordered list using hyphens in Markdown.  The list consists of three items: Red, Green, and Blue.  This snippet shows the basic syntax for a simple Markdown list.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/starters/blog/content/blog/hello-world/index.md#_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n- Red\n- Green\n- Blue\n\n* Red\n* Green\n* Blue\n\n- Red\n- Green\n- Blue\n```\n\n----------------------------------------\n\nTITLE: Supporting Gatsby 4\nDESCRIPTION: This commit ensures compatibility with Gatsby 4 within the gatsby-source-graphql plugin. It addresses any breaking changes or API updates introduced in Gatsby 4 to maintain proper functionality.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-graphql/CHANGELOG.md#_snippet_21\n\nLANGUAGE: Text\nCODE:\n```\nsupport Gatsby 4 [#33310](https://github.com/gatsbyjs/gatsby/issues/33310) ([98ae718](https://github.com/gatsbyjs/gatsby/commit/98ae718ae803f03546b5ad65f04ba3c09ec5993a))\n```\n\n----------------------------------------\n\nTITLE: Install gatsby-source-filesystem using npm\nDESCRIPTION: This command installs the `gatsby-source-filesystem` plugin, which allows Gatsby to read files from the local filesystem and add them to the data layer. This is a necessary prerequisite for sourcing files from directories like the 'blog' directory.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-4/index.mdx#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nnpm install gatsby-source-filesystem\n```\n\n----------------------------------------\n\nTITLE: Adding Dependencies to Site with Yarn\nDESCRIPTION: Adds Gatsby, React, React DOM, and the local `gatsby-theme-events` theme as dependencies to the `site` project using yarn workspaces.  The `gatsby-theme-events@*` syntax ensures that the local theme is referenced.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/building-a-theme.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nyarn workspace site add gatsby react react-dom gatsby-theme-events@*\n```\n\n----------------------------------------\n\nTITLE: Configuring Gatsby with Multiple Themes\nDESCRIPTION: This JavaScript code snippet demonstrates how to configure a Gatsby site with multiple themes. It defines site metadata, including title, description, author, and social links, and configures the `gatsby-theme-blog` and `gatsby-theme-notes` plugins with their respective base paths.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/using-multiple-themes-together.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  siteMetadata: {\n    title: `Your Site Title`,\n    description: `A description for your blazing fast site, using multiple themes!`,\n    author: `Your name`,\n    social: [\n      {\n        name: `Twitter`,\n        url: `https://twitter.com/gatsbyjs`,\n      },\n      {\n        name: `GitHub`,\n        url: `https://github.com/gatsbyjs`,\n      },\n    ],\n  },\n  plugins: [\n    {\n      resolve: `gatsby-theme-blog`,\n      options: {\n        basePath: `/blog`,\n      },\n    },\n    {\n      resolve: `gatsby-theme-notes`,\n      options: {\n        basePath: `/notes`,\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Addressing path length and base64 encoding in gatsby-source-filesystem\nDESCRIPTION: This commit addresses the issue of overly long path pieces and implements URL-safe base64 encoding, related to issue #35160 in the gatsby-source-filesystem package. This change likely ensures that file paths and encoded data are compatible with URL constraints.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-filesystem/CHANGELOG.md#_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Initializing Gatsby project with TypeScript\nDESCRIPTION: This command initializes a new Gatsby project with TypeScript support. It either prompts the user to select TypeScript or uses the `-ts` flag to skip the question.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/custom-configuration/typescript.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm init gatsby\n```\n\n----------------------------------------\n\nTITLE: Using createRemoteFileNode in gatsby-node.js\nDESCRIPTION: Demonstrates how to use the `createRemoteFileNode` helper function in gatsby-node.js to download remote files and create File nodes. This example preprocesses external images by downloading them and linking them to MarkdownRemark nodes.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-filesystem/README.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { createRemoteFileNode } = require(\"gatsby-source-filesystem\")\n\nexports.onCreateNode = async ({ \n  node, \n  actions: { createNode, createNodeField }, \n  createNodeId, \n  getCache \n}) => {\n  // For all MarkdownRemark nodes that have a featured image url, call createRemoteFileNode\n  if (\n    node.internal.type === \"MarkdownRemark\" &&\n    node.frontmatter.featuredImgUrl !== null\n  ) {\n    const fileNode = await createRemoteFileNode({\n      url: node.frontmatter.featuredImgUrl, // string that points to the URL of the image\n      parentNodeId: node.id, // id of the parent node of the fileNode you are going to create\n      createNode, // helper function in gatsby-node to generate the node\n      createNodeId, // helper function in gatsby-node to generate the node id\n      getCache,\n    })\n\n    // if the file was created, extend the node with \"localFile\"\n    if (fileNode) {\n      createNodeField({ node, name: \"localFile\", value: fileNode.id })\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Contentful Node Creation with Space ID - JavaScript\nDESCRIPTION: This snippet addresses a bug in `gatsby-source-contentful` where the space ID was not being properly considered during node creation. It ensures that the space ID is correctly taken into account, preventing potential issues with content retrieval and organization.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-contentful/CHANGELOG.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nfdd57d3\n```\n\n----------------------------------------\n\nTITLE: Updating Coffeescript dependency in Gatsby\nDESCRIPTION: This commit updates the coffeescript dependency to version ^2.4.1. It ensures that the plugin is using the latest version of Coffeescript, which may include bug fixes and performance improvements.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-coffeescript/CHANGELOG.md#_snippet_18\n\nLANGUAGE: Markdown\nCODE:\n```\nupdate dependency coffeescript to ^2.4.1 ([#16833](https://github.com/gatsbyjs/gatsby/issues/16833)) ([7d5a9f0](https://github.com/gatsbyjs/gatsby/commit/7d5a9f0))\n```\n\n----------------------------------------\n\nTITLE: File Content Example\nDESCRIPTION: This YAML file contains developer IDs and bios for example projects.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/plugins-and-themes/creating-a-transformer-plugin.md#_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\n- id: Jane Doe\n  bio: Developer based in Somewhere, USA\n- id: John Smith\n  bio: Developer based in Maintown, USA\n```\n\n----------------------------------------\n\nTITLE: Referencing Static Asset in Gatsby with JSX\nDESCRIPTION: This code snippet demonstrates how to reference an asset located in the `static` folder within a Gatsby component using JSX.  It emphasizes that this is an \"escape hatch\" and that using `import` for assets is generally preferred. The code renders an `img` tag with the `src` attribute pointing to `/logo.png`, assuming the `logo.png` file is located in the `static` folder.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/images-and-media/static-folder.md#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nrender() {\n  // Note: this is an escape hatch and should be used sparingly!\n  // Normally we recommend using `import` for getting asset URLs\n  // as described in the ‚ÄúImporting Assets Directly Into Files‚Äù page.\n  return <img src={'/logo.png'} alt=\"Logo\" />;\n}\n```\n\n----------------------------------------\n\nTITLE: Refactored Gatsby Index Post Component (JSX)\nDESCRIPTION: This React component displays a single post with its title and date. It accepts `frontmatter` as a prop, extracting `title` and `date` for rendering. It also defines and exports a GraphQL fragment, `IndexPostFragment`, that specifies which fields to retrieve for the post's frontmatter.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/conceptual/graphql-concepts.md#_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\"\nimport { graphql } from \"gatsby\"\n\nexport default function IndexPost({ frontmatter: { title, date } }) {\n  return (\n    <div>\n      <h3>\n        {title} <span>‚Äî {date}</span>\n      </h3>\n    </div>\n  )\n}\n\nexport const query = graphql`\n  fragment IndexPostFragment on MarkdownRemark {\n    frontmatter {\n      title\n      date(formatString: \"MMMM DD, YYYY\")\n    }\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: JavaScript Data Export (CommonJS)\nDESCRIPTION: This code demonstrates how to export a data object using CommonJS syntax in a JavaScript file.  The `data` object contains metadata that will be extracted by the Gatsby transformer. This data can then be queried via GraphQL.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-javascript-static-exports/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react'\n\nexports.data = {\n    title: 'Choropleth on d3v4',\n    written: '2017-05-04',\n    layoutType: 'post',\n    path: 'choropleth-on-d3v4',\n    category: 'data science',\n    description: 'Things about the choropleth.'\n}\n\nexport default MyComponent ...\n```\n\n----------------------------------------\n\nTITLE: Getting Image Source with getSrc in Gatsby\nDESCRIPTION: This code snippet demonstrates how to retrieve the default image `src` as a string using the `getSrc` helper function from `gatsby-plugin-image`.  It extracts the URL of the fallback image (usually JPG or PNG) from the `gatsbyImageData` object.  It's suitable for use in scenarios where a simple image URL is required, such as setting the `og:image` meta tag.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/built-in-components/gatsby-plugin-image.md#_snippet_10\n\nLANGUAGE: JSX\nCODE:\n```\nimport { getSrc } from \"gatsby-plugin-image\"\n//...\nconst src = getSrc(data.hero)\n\nreturn <meta property=\"og:image\" content={src} />\n```\n\n----------------------------------------\n\nTITLE: Creating a new Gatsby project with a local starter\nDESCRIPTION: This command creates a new Gatsby project using a starter located on the local filesystem.  `project-name` is the name of the new project, and `../relative/path/to/your/starter` should be replaced with the path to the starter directory.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/creating-a-starter.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngatsby new project-name ../relative/path/to/your/starter\n```\n\n----------------------------------------\n\nTITLE: Example pages.json structure in JavaScript\nDESCRIPTION: This code shows the structure of the `pages.json` file, which contains an array of page objects with properties like `componentChunkName`, `jsonName`, and `path`. It is used during development to map routes to components.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/write-pages.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n[{\n  componentChunkName: \"component---src-blog-2-js\",\n  jsonName: \"blog-c06\",\n  path: \"/blog\",\n},\n// more pages\n]\n```\n\n----------------------------------------\n\nTITLE: gatsby-config.js: Custom Fetch Function Configuration (JavaScript)\nDESCRIPTION: Demonstrates the use of a custom `fetch` function in gatsby-source-graphql, allowing for modifications to the request before it's sent. This allows for request signing or other custom logic.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-graphql/README.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// In your gatsby-config.js\nmodule.exports = {\n  plugins: [\n    // Advanced config, using a custom fetch function\n    {\n      resolve: \"gatsby-source-graphql\",\n      options: {\n        typeName: \"GitHub\",\n        fieldName: \"github\",\n        url: \"https://api.github.com/graphql\",\n        // A `fetch`-compatible API to use when making requests.\n        fetch: (uri, options = {}) =>\n          fetch(uri, { ...options, headers: sign(options.headers) }),\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Bad Mixed ES and CommonJS Syntax (JavaScript)\nDESCRIPTION: This code snippet shows another incorrect way of mixing ES and CommonJS module syntax, which will cause failures in Gatsby v2.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v1-to-v2.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n// BAD: Mixed ES and CommonJS module syntax will cause failures\nimport foo from \"foo\"\nmodule.exports = foo\n```\n\n----------------------------------------\n\nTITLE: Declaring mimeType for Markdown Transformer\nDESCRIPTION: This bug fix declares the mimeType so that markdown transformer children are correctly added. This likely resolves an issue where markdown files were not being processed correctly or their child nodes were not being properly linked within Gatsby's data graph.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-npm-package-search/CHANGELOG.md#_snippet_10\n\nLANGUAGE: Text\nCODE:\n```\ndeclare mimeType so markdown trasformer children are added [#29615](https://github.com/gatsbyjs/gatsby/issues/29615) ([cbcd996](https://github.com/gatsbyjs/gatsby/commit/cbcd9962de044a746e5336dfe2db58d202950e73))\n```\n\n----------------------------------------\n\nTITLE: Create a Simple Index Page (JSX)\nDESCRIPTION: This JSX snippet creates a basic index page for the Gatsby site. It defines a React component named Home that returns a simple div containing the text \"My Site!\". This component is then exported as the default export, making it the page rendered at the root URL.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/starters/gatsby-starter-theme-workspace/gatsby-theme-minimal/README.md#_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\nimport React from \"react\"\n\nexport default function Home() {\n  return <div>My Site!</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Git on Ubuntu/Debian\nDESCRIPTION: This snippet installs Git, a distributed version control system, on Ubuntu and Debian-based Linux distributions using the apt package manager. Git is necessary for creating Gatsby projects from starters.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/local-development/gatsby-on-linux.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt install git\n```\n\n----------------------------------------\n\nTITLE: Updating MongoDB dependency\nDESCRIPTION: This snippet updates the dependency `mongodb` to version `^3.7.3` for the `gatsby-source-mongodb` plugin. This is intended to fix bugs or improve compatibility with the MongoDB driver.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-mongodb/CHANGELOG.md#_snippet_1\n\nLANGUAGE: none\nCODE:\n```\nupdate dependency mongodb to ^3.7.3 for gatsby-source-mongodb [#37859](https://github.com/gatsbyjs/gatsby/issues/37859) ([a146069](https://github.com/gatsbyjs/gatsby/commit/a1460695471ea8677ec997fa74a0ba59ea7e7b3f))\n```\n\n----------------------------------------\n\nTITLE: Exporting frontmatter object in a JavaScript file (Named Export)\nDESCRIPTION: This code snippet demonstrates how to export a frontmatter object from a JavaScript file using a named export. The frontmatter object contains metadata for the page. This uses a named export.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-javascript-frontmatter/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport const frontmatter = {\n  title: \"Choropleth on d3v4\",\n  written: \"2017-05-04\",\n  layoutType: \"post\",\n  path: \"choropleth-on-d3v4\",\n  category: \"data science\",\n  description: \"Things about the choropleth.\",\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Babel Monorepo\nDESCRIPTION: This commit updates the Babel monorepo as part of chore updates related to issue #27528. This involves updating the Babel packages used within the Gatsby project.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-twitter/CHANGELOG.md#_snippet_18\n\nLANGUAGE: Text\nCODE:\n```\n- update babel monorepo [#27528](https://github.com/gatsbyjs/gatsby/issues/27528) ([539dbb0](https://github.com/gatsbyjs/gatsby/commit/539dbb09166e346a6cee568973d2de3d936e8ef3))\n```\n\n----------------------------------------\n\nTITLE: Installing JSCodeshift Globally\nDESCRIPTION: Installs JSCodeshift as a global Node.js module. This is a prerequisite for running codemods using the JSCodeshift CLI directly.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-codemods/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --global jscodeshift\n```\n\n----------------------------------------\n\nTITLE: Installing experimental React versions\nDESCRIPTION: This command demonstrates how to install the experimental versions of `react` and `react-dom` required for using Partial Hydration in Gatsby 5. The `--save-exact` flag ensures the exact specified versions are installed.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/v5.0/index.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --save-exact react@experimental react-dom@experimental\n```\n\n----------------------------------------\n\nTITLE: Updating Babel Monorepo\nDESCRIPTION: This commit updates the Babel monorepo. Updating Babel ensures that the project uses the latest JavaScript syntax and features.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-javascript-frontmatter/CHANGELOG.md#_snippet_9\n\nLANGUAGE: Shell\nCODE:\n```\nupdate babel monorepo [#32564](https://github.com/gatsbyjs/gatsby/issues/32564) ([a554998](https://github.com/gatsbyjs/gatsby/commit/a554998b4f6765103b650813cf52dbfcc575fecf))\n```\n\n----------------------------------------\n\nTITLE: Updating Vulnerable Packages JavaScript\nDESCRIPTION: This snippet updates vulnerable packages and includes React 17 in peerDependencies. This ensures compatibility with React 17 and addresses security vulnerabilities in underlying dependencies.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-copy-linked-files/CHANGELOG.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nupdate vulnerable packages, include React 17 in peerDeps [#28545](https://github.com/gatsbyjs/gatsby/issues/28545) ([18b5f30](https://github.com/gatsbyjs/gatsby/commit/18b5f30e367895aa5f3af46e4989b347912a0f35))\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query for Markdown HTML\nDESCRIPTION: This GraphQL query retrieves the HTML version of Markdown content using the `gatsby-transformer-remark` plugin.  After installing the plugin, you can query the `html` field of a `markdownRemark` node to access the transformed HTML. This provides a way to easily render Markdown content as HTML in your Gatsby site.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/conceptual/graphql-concepts.md#_snippet_4\n\nLANGUAGE: GraphQL\nCODE:\n```\nmarkdownRemark {\n  html\n}\n```\n\n----------------------------------------\n\nTITLE: Copy Firebase Configuration to Public Directory with Node.js\nDESCRIPTION: This code snippet copies the `firebase.json` file from the project root to the `/public` directory during the Gatsby build process. This ensures that Firebase hosting configurations are deployed with the site. The `fs` module is used for file system operations, and the `onPostBuild` lifecycle API in `gatsby-node.js` triggers the copy operation after the build is complete.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/cloud/deploying-to-firebase.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst fs = require(\"fs\");\nexports.onPostBuild = () => {\n  fs.copyFile(`./firebase.json`, `./public/firebase.json`, (err) => {\n    if (err) {\n      throw err;\n    }\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Applying Patches for v5 in gatsby-plugin-sitemap\nDESCRIPTION: This commit applies patches for version 5 of the gatsby-plugin-sitemap. This likely contains fixes and improvements specifically targeting the v5 release.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-sitemap/CHANGELOG.md#_snippet_6\n\nLANGUAGE: TEXT\nCODE:\n```\napply patches for v5 [#36796](https://github.com/gatsbyjs/gatsby/issues/36796) ([25f79b6](https://github.com/gatsbyjs/gatsby/commit/25f79b6c3719fdf09584ade620a05c66ba2a697c))\n```\n\n----------------------------------------\n\nTITLE: HTML Script Tag for JavaScript Inclusion\nDESCRIPTION: This snippet shows how Gatsby includes a JavaScript file in the HTML body using a `<script>` tag. The `src` attribute specifies the file's URL, and the `async` attribute indicates that the script should be executed asynchronously, preventing it from blocking the page rendering. The `key` attribute offers a unique identifier for React's reconciliation process.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-code-splitting-works.md#_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<script\n  key=\"app-2e49587d85e03a033f58.js\"\n  src=\"app-2e49587d85e03a033f58.js\"\n  async\n/>\n```\n\n----------------------------------------\n\nTITLE: Page Object Structure\nDESCRIPTION: This JavaScript object demonstrates the structure of a page object within the Redux `components` namespace. It includes properties like `query`, `path`, `jsonName`, and `componentPath`, which are crucial for Gatsby's page rendering and data fetching mechanisms. The `query` field starts as an empty string and is populated during the query extraction phase.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/gatsby-internals-terminology.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  `/src/templates/template-blog-post.js`: {\n    query: ``,\n    path: `/blog/2018-07-17-announcing-gatsby-preview/`,\n    jsonName: `blog-2018-07-17-announcing-gatsby-preview-995`,\n    componentPath: `/src/templates/template-blog-post.js`,\n    ...restOfPage\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting npm install failures with Visual Studio 2017 (PowerShell)\nDESCRIPTION: These commands are used to resolve issues with `npm install` failing after installing Visual Studio 2017. They uninstall `node-gyp`, configure npm to use Python 2.7 and Visual Studio 2017, clear the npm cache, and then attempt to install the project's dependencies again. This is specifically for Visual Studio 2017.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/local-development/gatsby-on-windows.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nnpm uninstall node-gyp -g\nnpm config set python python2.7\nnpm config set msvs_version 2017\nnpm cache clean -f\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Configuration Options - JavaScript\nDESCRIPTION: This code block defines the available configuration options for the `gatsby-plugin-schema-snapshot` plugin. It includes options for specifying the path to save the schema, including/excluding types and plugins, ensuring field types are included, and controlling schema updates. All options are optional.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-schema-snapshot/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  // Path where the type definitions will be saved to\n  path: `schema.gql`,\n  // include types by name, or all types owned by a plugin\n  include: {\n    types: [],\n    plugins: [],\n  },\n  // exclude types by name, or all types owned by a plugin\n  // by default, internal and built-in types are excluded\n  exclude: {\n    types: [],\n    plugins: [],\n  },\n  // ensure all field types are included\n  // don't turn this off unless you have a very good reason to\n  withFieldTypes: true,\n  // manually control if a saved schema snapshot should be replaced with an\n  // updated version\n  update: false,\n}\n```\n\n----------------------------------------\n\nTITLE: Checking if window is defined in React\nDESCRIPTION: This code snippet demonstrates how to check if the `window` object is defined within a React component, which is crucial when dealing with browser-specific code that shouldn't run during server-side rendering. It uses a simple boolean flag to determine whether the code is running in a browser environment.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/debugging-html-builds.md#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport * as React from \"react\"\n\n// Check if window is defined (so if in the browser or in node.js).\nconst isBrowser = typeof window !== \"undefined\"\n\nexport default function MyComponent() {\n  let loggedIn = false\n  if (isBrowser) {\n    window.localStorage.getItem(\"isLoggedIn\") === \"true\"\n  }\n\n  return <div>Am I logged in? {loggedIn}</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Add Google Analytics URL to Partytown Proxied URLs\nDESCRIPTION: This code snippet configures the `gatsby-config.js` file to include the Google Analytics URL in the `partytownProxiedURLs` array. This tells Gatsby that it's safe to proxy this URL, allowing Partytown to properly handle the script.  Requires the `dotenv` package for managing environment variables.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/built-in-components/gatsby-script.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport dotenv from \"dotenv\"\n\ndotenv.config({\n  path: `.env.${process.env.NODE_ENV}`,\n})\n\nmodule.exports = {\n  siteMetadata: {\n    title: `Gatsby`,\n  },\n  partytownProxiedURLs: [\n    `https://www.googletagmanager.com/gtm.js?id=${process.env.GTM}`,\n    // highlight-next-line\n    `https://www.google-analytics.com/analytics.js`,\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Query All Contentful CaseStudy with Assets GraphQL\nDESCRIPTION: This GraphQL query retrieves all `ContentfulCaseStudy` nodes, including their `id`, `slug`, `title`, `subtitle`, `body`, and `heroImage`.  The `heroImage` is an asset field, and the query includes its `title`, `description`, and `gatsbyImageData`. This demonstrates querying for content types with associated assets.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-contentful/README.md#_snippet_10\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  allContentfulCaseStudy {\n    edges {\n      node {\n        id\n        slug\n        title\n        subtitle\n        body {\n          body\n        }\n        heroImage {\n          title\n          description\n          gatsbyImageData(layout: CONSTRAINED)\n          # Further below in this doc you can learn how to use these response images\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding option name to overwrite node middle...\nDESCRIPTION: This snippet adds an option name to overwrite node middleware. It adds flexibility and customization options when creating nodes.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-mongodb/CHANGELOG.md#_snippet_7\n\nLANGUAGE: none\nCODE:\n```\nAdd option name to overwrite node middle‚Ä¶ [#33820](https://github.com/gatsbyjs/gatsby/issues/33820) ([fb082bc](https://github.com/gatsbyjs/gatsby/commit/fb082bcf48f5551a32100fdfd0dd08c3e17a2121))\n```\n\n----------------------------------------\n\nTITLE: Formatting changelog files in gatsby-source-filesystem\nDESCRIPTION: This commit formats the changelog files in the gatsby-source-filesystem package. This chore likely involves standardizing the formatting of the changelog for better readability and consistency.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-filesystem/CHANGELOG.md#_snippet_8\n\n\n\n----------------------------------------\n\nTITLE: Bumping Node.js min version in Gatsby\nDESCRIPTION: Increases the minimum required Node.js version to 10.13.0. This feature update allows the project to leverage newer Node.js features and improvements, potentially enhancing performance and security.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-catch-links/CHANGELOG.md#_snippet_10\n\n\n\n----------------------------------------\n\nTITLE: Reload Apache service on Debian (Shell)\nDESCRIPTION: This command reloads the Apache2 service, applying any changes made to the configuration files without requiring a full restart of the server. This is necessary to activate the modified alias configuration.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-manifest/README.md#_snippet_18\n\nLANGUAGE: Shell\nCODE:\n```\nservice apache2 reload\n```\n\n----------------------------------------\n\nTITLE: Bad Mixed ES and CommonJS Syntax (JavaScript)\nDESCRIPTION: This code snippet shows an incorrect way of mixing ES and CommonJS module syntax, which will cause failures in Gatsby v2.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v1-to-v2.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n// BAD: Mixed ES and CommonJS module syntax will cause failures\nconst foo = require(\"foo\")\nexport default foo\n```\n\n----------------------------------------\n\nTITLE: Gatsby .env Example\nDESCRIPTION: This snippet shows an example of setting an environment variable in a Gatsby project.  Note the `GATSBY_` prefix, which is required for Gatsby to expose the variable to the browser.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/porting-from-create-react-app-to-gatsby.md#_snippet_8\n\nLANGUAGE: env\nCODE:\n```\nGATSBY_API_URL=http://someapi.com\n```\n\n----------------------------------------\n\nTITLE: Fixing Ignore Pattern in gatsby-plugin-manifest\nDESCRIPTION: This code snippet shows a bug fix for the gatsby-plugin-manifest. The fix addresses an issue where the ignore pattern was not properly wrapped in quotes. This commit ensures that the ignore pattern is correctly processed, preventing unexpected behavior during the manifest generation process. The fix was implemented in commit 7563db6.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-manifest/CHANGELOG.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Ordering Plugins: gatsby-remark-autolink-headers and gatsby-remark-prismjs\nDESCRIPTION: This example demonstrates the correct and incorrect ordering of `gatsby-remark-autolink-headers` and `gatsby-remark-prismjs` within the `gatsby-transformer-remark` plugin options. It emphasizes that `gatsby-remark-prismjs` should be listed *after* `gatsby-remark-autolink-headers` to avoid potential issues.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-autolink-headers/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// good\n{\n  resolve: `gatsby-transformer-remark`,\n  options: {\n    plugins: [\n      `gatsby-remark-autolink-headers`,\n      `gatsby-remark-prismjs`,\n    ],\n  },\n}\n\n// bad\n{\n  resolve: `gatsby-transformer-remark`,\n  options: {\n    plugins: [\n      `gatsby-remark-prismjs`, // should be placed after `gatsby-remark-autolink-headers`\n      `gatsby-remark-autolink-headers`,\n    ],\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Yarn Workspaces (JSON)\nDESCRIPTION: This `package.json` file sets up Yarn workspaces, defining `gatsby-theme-minimal` and `example` as workspaces. This allows for managing multiple packages within a single repository, facilitating local theme development and testing with an example site. The build script specifies how to build the example site.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/plugins-and-themes/building-themes.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"name\": \"gatsby-starter-theme-workspace\",\n  \"private\": true,\n  \"version\": \"0.0.1\",\n  \"main\": \"index.js\",\n  \"license\": \"MIT\",\n  \"scripts\": {\n    \"build\": \"yarn workspace example build\"\n  },\n  // highlight-start\n  \"workspaces\": [\"gatsby-theme-minimal\", \"example\"]\n  // highlight-end\n}\n```\n\n----------------------------------------\n\nTITLE: Bump Node Minimum Version to 10.13.0\nDESCRIPTION: This commit bumps the minimum required Node.js version for Gatsby to 10.13.0. It allows Gatsby to take advantage of newer Node.js features and improvements.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-typography/CHANGELOG.md#_snippet_7\n\nLANGUAGE: None\nCODE:\n```\n**gatsby:** bump node min version to 10.13.0 ([#22400](https://github.com/gatsbyjs/gatsby/issues/22400)) ([83d681a](https://github.com/gatsbyjs/gatsby/commit/83d681a))\n```\n\n----------------------------------------\n\nTITLE: Updating Peer Dependencies in gatsby-plugin-sitemap\nDESCRIPTION: This chore updates the peer dependencies for the `gatsby-plugin-sitemap` package. This ensures compatibility with the latest versions of Gatsby and its core dependencies.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-sitemap/CHANGELOG.md#_snippet_5\n\nLANGUAGE: TEXT\nCODE:\n```\nUpdate peerDeps [#36965](https://github.com/gatsbyjs/gatsby/issues/36965) ([b624442](https://github.com/gatsbyjs/gatsby/commit/b6244424fe8b724cbc23b80b2b4f5424cc2055a4))\n```\n\n----------------------------------------\n\nTITLE: Node Example\nDESCRIPTION: This JavaScript code represents an example node object with properties including id, a, b (an array), and internal. The node is used to demonstrate how data is indexed within Gatsby's LMDB data store.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby/src/datastore/lmdb/query/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst a1 = {\n  id: \"a1\",\n  a: \"foo\",\n  b: [\"bar\", \"baz\"],\n  internal: { type: \"A\" },\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Usage of destinationDir JavaScript\nDESCRIPTION: Examples of advanced usage of the `destinationDir` option using function expressions to dynamically define the output path based on file properties like `name`, `hash`, and `absolutePath`. It provides granular control over the output directory structure.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-copy-linked-files/README.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n# save `my-awesome-pdf.pdf` to `public/my-awesome-pdf.pdf`\ndestinationDir: f => `${f.name}`\n\n# save `my-awesome-pdf.pdf` to `public/2a0039f3a61f4510f41678438e4c863a.pdf`\ndestinationDir: f => `${f.hash}`\n\n# save `my-awesome-pdf.pdf` to `public/downloads/2a0039f3a61f4510f41678438e4c863a/my-awesome-pdf.pdf`\ndestinationDir: f => `downloads/${f.hash}/${f.name}`\n\n# save `my-awesome-pdf.pdf` to `public/downloads/2a0039f3a61f4510f41678438e4c863a-my-awesome-pdf.pdf`\ndestinationDir: f => `downloads/${f.hash}-${f.name}`\n\n# save `my-awesome-pdf.pdf` to `public/my-awesome-pdf/2a0039f3a61f4510f41678438e4c863a.pdf`\ndestinationDir: f => `${f.name}/${f.hash}`\n\n# save `my-awesome-pdf.pdf` to `public/path/to/dir/hello-my-awesome-pdf+2a0039f3a61f4510f41678438e4c863a_world.pdf`\ndestinationDir: f => `path/to/dir/hello-${f.name}+${f.hash}_world`\n\n# save `src/pages/custom-folder/my-awesome-pdf.pdf` to `public/custom-folder/my-awesome-pdf.pdf`\n# Note: Import `path` to use this example https://nodejs.org/api/path.html\ndestinationDir: f => `${path.dirname(path.relative(path.join(__dirname, `src`, `pages`), f.absolutePath))}/${f.name}`\n```\n\n----------------------------------------\n\nTITLE: Updating Babel Monorepo\nDESCRIPTION: This commit updates the Babel monorepo dependency. The pull request is referenced by its GitHub issue number.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-dev-cli/CHANGELOG.md#_snippet_10\n\nLANGUAGE: Text\nCODE:\n```\nupdate babel monorepo [#27528](https://github.com/gatsbyjs/gatsby/issues/27528) ([539dbb0](https://github.com/gatsbyjs/gatsby/commit/539dbb09166e346a6cee568973d2de3d936e8ef3))\n```\n\n----------------------------------------\n\nTITLE: Fixing Polylang Error in gatsby-source-wordpress\nDESCRIPTION: This commit fixes a bug in gatsby-source-wordpress where a \"Cannot read property of undefined\" error occurred when using Polylang. An undefined property was causing issues when attempting to access Polylang features.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-wordpress/CHANGELOG.md#_snippet_4\n\nLANGUAGE: Commit Message\nCODE:\n```\nbd48b21\n```\n\n----------------------------------------\n\nTITLE: Updating sharp dependency in gatsby-remark-images-contentful\nDESCRIPTION: This code snippet represents a bug fix where the sharp dependency was updated to version ^0.30.1. This update addresses potential issues and improves image processing capabilities within the gatsby-remark-images-contentful plugin.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-images-contentful/CHANGELOG.md#_snippet_12\n\nLANGUAGE: None\nCODE:\n```\nupdate dependency sharp to ^0.30.1 [#34755](https://github.com/gatsbyjs/gatsby/issues/34755) ([326a483](https://github.com/gatsbyjs/gatsby/commit/326a483bc01c5a3e433e3a82fd52c92a9f6467d5))\n```\n\n----------------------------------------\n\nTITLE: Using the Video Component in a 404 Page (JSX)\nDESCRIPTION: This code snippet shows how to use the `Video` component in a 404 page. It imports the component and passes a YouTube video URL and title as props. This demonstrates how to embed a specific video into a page.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/images-and-media/working-with-video.md#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport Video from \"../components/video\"\n\nconst NotFoundPage = () => (\n  <Layout>\n    <SEO title=\"404: Not found\" />\n    <section>\n      <h1>NOT FOUND</h1>\n      <p>You just hit a page that doesn't exist... the sadness.</p>\n      <p>May I suggest a video instead?</p>\n      <Video\n        videoSrcURL=\"https://www.youtube.com/embed/dQw4w9WgXcQ\"\n        videoTitle=\"Official Music Video on YouTube\"\n      />\n    </section>\n  </Layout>\n)\n\nexport default NotFoundPage\n```\n\n----------------------------------------\n\nTITLE: Redux jsonDataPaths Example\nDESCRIPTION: This JSON snippet illustrates the structure of the `jsonDataPaths` namespace in the Redux store, which maps a page's `jsonName` to its `dataPath`. This mapping is established after query execution and is essential for locating the query results on disk. The `dataPath` is a unique identifier for the query result file within the `/public/static/d/{modInt}` directory.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/gatsby-internals-terminology.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  // jsonName -> dataPath\n  \"blog-2018-07-17-announcing-gatsby-preview-995\": \"621/path---blog-2018-07-17-announcing-gatsby-preview-995-a74-dwfQIanOJGe2gi27a9CLKHjamc\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example HJSON Object (a.hjson)\nDESCRIPTION: This HJSON snippet shows the content of a single HJSON file (`a.hjson`).  When used with `gatsby-transformer-hjson` and placed in a specific directory structure, it will be converted into a Gatsby node. The `value` property will be accessible via GraphQL queries.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-hjson/README.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\nvalue: a\n```\n\n----------------------------------------\n\nTITLE: Run Preload Fonts Script with No Sandbox\nDESCRIPTION: This command demonstrates how to pass the `--no-sandbox` flag to the Puppeteer instance used by the `gatsby-preload-fonts` script. This is often needed in environments like CI where running Chrome in a sandbox is problematic.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-preload-fonts/README.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nnpm run preload-fonts -- --no-sandbox\n```\n\n----------------------------------------\n\nTITLE: Fix: Update minor and patch dependencies for gatsby-source-graphql\nDESCRIPTION: This snippet describes a bug fix in version 5.11.0 of the gatsby-source-graphql plugin. It updates minor and patch dependencies, potentially resolving compatibility issues or bugs within the plugin.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-graphql/CHANGELOG.md#_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Fixing links in changelogs - JavaScript\nDESCRIPTION: This snippet highlights a bug fix that corrected broken links within the package changelogs. This ensures users can easily access relevant information and documentation. The associated issue number is 15630, and the commit hash is d07b9dd.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-faker/CHANGELOG.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ncorrect links in package changelogs ([#15630](https://github.com/gatsbyjs/gatsby/issues/15630)) ([d07b9dd](https://github.com/gatsbyjs/gatsby/commit/d07b9dd))\n```\n\n----------------------------------------\n\nTITLE: Set path to Gatsby repository\nDESCRIPTION: This command sets the path to the local Gatsby repository for gatsby-dev-cli.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-design-tokens/README.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ngatsby-dev --set-path-to-repo /path-to-local-gatsby/gatsby\n```\n\n----------------------------------------\n\nTITLE: Migrating theme option to modifyVars in gatsby-plugin-less\nDESCRIPTION: This snippet highlights a breaking change in gatsby-plugin-less, specifically the migration from the `theme` option to `modifyVars` for customizing Less variables.  It showcases the configuration update required when upgrading to a version where `theme` is no longer supported.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-less/README.md#_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\nplugins: [\n  {\n    resolve: `gatsby-plugin-less`,\n    options: {\n-      theme: {\n-        \"text-color\": `#fff`,\n-      }\n+      modifyVars: {\n+        \"text-color\": `#fff`,\n+      }\n    },\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Track Custom Events with Gatsby Google Analytics Plugin\nDESCRIPTION: Illustrates how to use the `trackCustomEvent` function to track custom events in Google Analytics. It imports the function and calls it within a component's event handler.  Requires `gatsby-plugin-google-analytics` to be installed.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-google-analytics/README.md#_snippet_4\n\nLANGUAGE: JSX\nCODE:\n```\nimport React from \"react\"\nimport { trackCustomEvent } from \"gatsby-plugin-google-analytics\"\n\nconst Component = () => (\n  <div>\n    <button\n      onClick={e => {\n        // To stop the page reloading\n        e.preventDefault()\n        // Lets track that custom click\n        trackCustomEvent({\n          // string - required - The object that was interacted with (e.g.video)\n          category: \"Special Button\",\n          // string - required - Type of interaction (e.g. 'play')\n          action: \"Click\",\n          // string - optional - Useful for categorizing events (e.g. 'Spring Campaign')\n          label: \"Gatsby Plugin Example Campaign\",\n          // number - optional - Numeric value associated with the event. (e.g. A product ID)\n          value: 43,\n        })\n        //... Other logic here\n      }}\n    >\n      Tap that!\n    </button>\n  </div>\n)\n\nexport default Component\n```\n\n----------------------------------------\n\nTITLE: Robots.txt Disallow All\nDESCRIPTION: This configuration within the robots.txt file instructs all user agents (identified by '*') not to access any resources on the website (indicated by 'Disallow:'). This essentially blocks all web crawlers from indexing the entire site.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/starters/blog/static/robots.txt#_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Install gatsby-source-mongodb\nDESCRIPTION: Installs the gatsby-source-mongodb plugin using npm. This command adds the plugin as a project dependency.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-mongodb/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install gatsby-source-mongodb\n```\n\n----------------------------------------\n\nTITLE: Example JavaScript Array\nDESCRIPTION: This JavaScript array demonstrates the structure of nodes created when parsing an HJSON file containing an array of objects. Each object in the HJSON array is converted into a node with properties such as `value` and `type`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-hjson/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n;[\n  { value: \"a\", type: \"Letters\" },\n  { value: \"b\", type: \"Letters\" },\n  { value: \"c\", type: \"Letters\" },\n]\n```\n\n----------------------------------------\n\nTITLE: Set Log Level (Windows)\nDESCRIPTION: This command demonstrates how to set the `LOG_LEVEL` environment variable before running the `gatsby-preload-fonts` script on Windows. This allows you to control the amount of logging output from the script for debugging purposes.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-preload-fonts/README.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nset LOG_LEVEL=info & npm run preload-fonts\n```\n\n----------------------------------------\n\nTITLE: Configure Plugin with Node Types\nDESCRIPTION: Example configuration showing how to specify custom node types for the plugin to target. This configuration adds node types `StartersYaml` and `WhateverType`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-screenshot/README.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-transformer-screenshot`,\n      options: {\n        nodeTypes: [`StartersYaml`, `WhateverType`],\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Babel Monorepo\nDESCRIPTION: This snippet updates the babel monorepo as part of a maintenance task. This ensures that the gatsby-source-mongodb package uses the latest babel transformations and polyfills.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-mongodb/CHANGELOG.md#_snippet_2\n\nLANGUAGE: none\nCODE:\n```\nupdate babel monorepo [#37568](https://github.com/gatsbyjs/gatsby/issues/37568) ([13a0a9e](https://github.com/gatsbyjs/gatsby/commit/13a0a9e83dcb015b65dff6b73cdd5dea09c2988f))\n```\n\n----------------------------------------\n\nTITLE: Updating Babel Monorepo in Gatsby Plugin JSS (JavaScript)\nDESCRIPTION: This commit upgrades the Babel monorepo dependency within the gatsby-plugin-jss package. Regular Babel updates ensure compatibility with new language features and performance improvements.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-jss/CHANGELOG.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nupdate babel monorepo [#32238](https://github.com/gatsbyjs/gatsby/issues/32238) ([466d4c0](https://github.com/gatsbyjs/gatsby/commit/466d4c087bbc96abb942a02c67243bcc9a4f2a0a))\n```\n\n----------------------------------------\n\nTITLE: Shallow Cloning a Gatsby Repository\nDESCRIPTION: This command performs a shallow clone of the Gatsby repository. This creates a partial clone, downloading only the most recent commits, resulting in a smaller download size and faster cloning time. `--depth=1` specifies that only the most recent commit should be downloaded. While faster, it can cause issues when referencing older branches.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/contributing/code-contributions.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ngit clone --depth=1 https://github.com/<your-username>/gatsby.git\n```\n\n----------------------------------------\n\nTITLE: Making createContentDigest Deterministic\nDESCRIPTION: This bug fix ensures that `createContentDigest` function within `gatsby-core-utils` produces deterministic output. This is important for consistent and reliable content hashing. This fix was implemented in response to issue #19832.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-remark/CHANGELOG.md#_snippet_14\n\n\n\n----------------------------------------\n\nTITLE: Updating Babel Monorepo JavaScript\nDESCRIPTION: This code snippet describes a chore involving updating the Babel monorepo. It references issue #37386 in the Gatsby repository. The commit hash associated with this update is b94187633d94d0f0071b38ffe93380dd802ec70f.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-javascript-frontmatter/CHANGELOG.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nupdate babel monorepo [#37386](https://github.com/gatsbyjs/gatsby/issues/37386) ([b941876](https://github.com/gatsbyjs/gatsby/commit/b94187633d94d0f0071b38ffe93380dd802ec70f))\n```\n\n----------------------------------------\n\nTITLE: Defining CSS Module for Layout Container\nDESCRIPTION: This CSS snippet defines the container style using CSS Modules for a Layout component. It sets the margin to auto, defines a maximum width of 500px, and sets the font family to sans-serif. This style will be applied to the Layout component to control the overall layout.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-2/index.mdx#_snippet_20\n\nLANGUAGE: CSS\nCODE:\n```\n.container {\n  margin: auto;\n  max-width: 500px;\n  font-family: sans-serif;\n}\n```\n\n----------------------------------------\n\nTITLE: Schema Customization: Remove `noDefaultResolvers` argument (gatsby-node.js)\nDESCRIPTION: The `noDefaultResolvers` argument from the `@infer` and `@dontInfer` directives is deprecated in Gatsby v3.  This snippet shows how to remove the `noDefaultResolvers` argument from your schema definitions.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v2-to-v3.md#_snippet_28\n\nLANGUAGE: diff\nCODE:\n```\nexports.createSchemaCustomization = ({ actions }) => {\n  const { createTypes } = actions\n  createTypes(`\n-   type Foo implements Node @infer(noDefaultResolvers: true)\n+   type Foo implements Node @infer\n    {\n      id: ID!\n    }\n\n-   type Bar implements Node @dontInfer(noDefaultResolvers: true)\n+   type Foo implements Node @dontInfer\n    {\n      id: ID!\n    }\n\n  `)\n}\n```\n\n----------------------------------------\n\nTITLE: Adding custom attributes to Graphviz diagram\nDESCRIPTION: This snippet demonstrates adding custom attributes such as `id`, `style`, `class`, and `data-*` attributes to the rendered SVG element using gatsby-remark-graphviz. It requires the gatsby-remark-graphviz plugin.  The attributes are added directly within the `dot` code block, before the Graphviz code itself.  The plugin parses these attributes and applies them to the resulting SVG.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/using-remark/src/pages/2019-02-06---graphviz/index.md#_snippet_1\n\nLANGUAGE: dot\nCODE:\n```\ndigraph graphname {\n  a -> b;\n  b -> c;\n  a -> c;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding custom attributes to Graphviz diagram\nDESCRIPTION: This snippet demonstrates adding custom attributes such as `id`, `style`, `class`, and `data-*` attributes to the rendered SVG element using gatsby-remark-graphviz. It requires the gatsby-remark-graphviz plugin.  The attributes are added directly within the `dot` code block, before the Graphviz code itself.  The plugin parses these attributes and applies them to the resulting SVG.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/using-remark/src/pages/2019-02-06---graphviz/index.md#_snippet_2\n\nLANGUAGE: dot\nCODE:\n```\ndigraph graphname {\n  a -> b;\n  b -> c;\n  a -> c;\n}\n```\n\n----------------------------------------\n\nTITLE: Protecting Browser Globals During Build (JavaScript)\nDESCRIPTION: This JavaScript snippet illustrates how to prevent build errors in Gatsby by checking if the code is running in the browser before accessing browser globals like `window`. It wraps the initialization of a third-party service (Firebase in this case) within a conditional statement that checks if `window` is defined. This avoids errors during the build process which runs in a Node.js environment.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/adding-common-features/building-a-site-with-authentication.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport app from \"firebase/app\"\n\n...\n\nif (typeof window !== 'undefined') { // highlight-line\n  app.initializeApp(config)\n} // highlight-line\n```\n\n----------------------------------------\n\nTITLE: Customizing Default Gatsby Sharp Options\nDESCRIPTION: Demonstrates customizing the default options for `gatsby-plugin-sharp`. This allows setting global defaults for image processing, such as formats, placeholder, quality, breakpoints, and background color. These configurations affect all `GatsbyImage` and `StaticImage` instances.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-image/README.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-sharp`,\n      options: {\n        defaults: {\n          formats: [`auto`, `webp`],\n          placeholder: `dominantColor`,\n          quality: 50,\n          breakpoints: [750, 1080, 1366, 1920],\n          backgroundColor: `transparent`,\n          tracedSVGOptions: {},\n          blurredOptions: {},\n          jpgOptions: {},\n          pngOptions: {},\n          webpOptions: {},\n          avifOptions: {},\n        }\n      }\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-image`,\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Handling onCreateNode for YAML Files in gatsby-node.js\nDESCRIPTION: This code snippet implements the `onCreateNode` API in `gatsby-node.js` to process nodes with a media type of `text/yaml`.  It loads the content of the node, parses it using `js-yaml`, and stores the parsed content in a variable. This function sets up the transformation pipeline.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/plugins-and-themes/creating-a-transformer-plugin.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst jsYaml = require(`js-yaml`)\n\nasync function onCreateNode({ node, loadNodeContent }) {\n  // only log for nodes of mediaType `text/yaml`\n  if (node.internal.mediaType !== `text/yaml`) {\n    return\n  }\n\n  const content = await loadNodeContent(node)\n  const parsedContent = jsYaml.load(content)\n}\n\nexports.onCreateNode = onCreateNode\n```\n\n----------------------------------------\n\nTITLE: Disable named exports and configure exportLocalsConvention\nDESCRIPTION: This code shows how to disable named exports and configure the `exportLocalsConvention` in `gatsby-config.js`. Disabling named exports is necessary when you want to import CSS using `import styles from './file.css'` instead of `import * as styles from './file.module.css'`.  This example sets `exportLocalsConvention` to `false` and `namedExport` to `false` to disable conversion of classnames to camel case.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-postcss/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nplugins: [\n  {\n    resolve: `gatsby-plugin-postcss`,\n    options: {\n      cssLoaderOptions: {\n        exportLocalsConvention: false,\n        namedExport: false,\n      },\n    },\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Running the Markdown Benchmark\nDESCRIPTION: This command initiates a benchmark run for generating a Gatsby site. It accepts two environment variables: `N` to specify the number of pages to generate and `M` to allocate memory in GB for nodejs. The command first deletes generated files, generates a new CSV file with random content, cleans the Gatsby cache, and then executes the Gatsby build process.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/benchmarks/gabe-csv-text/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nN=1000 M=2 yarn bench\n```\n\n----------------------------------------\n\nTITLE: Blog Post Template Component JSX\nDESCRIPTION: This JSX code defines a React component that serves as a blog post template.  It renders the title and HTML content of a markdown post, retrieving the data from the GraphQL query. This template is used by the createPages function to create individual blog post pages.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v0-to-v1.md#_snippet_7\n\nLANGUAGE: JSX\nCODE:\n```\nimport React from \"react\"\n\nclass BlogPostTemplate extends React.Component {\n  render() {\n    const post = this.props.data.markdownRemark\n\n    return (\n      <div>\n        <h1>{post.frontmatter.title}</h1>\n        <div dangerouslySetInnerHTML={{ __html: post.html }} />\n      </div>\n    )\n  }\n}\n\nexport default BlogPostTemplate\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug($slug: String!) {\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      html\n      frontmatter {\n        title\n      }\n    }\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: Testing Themed Emotion Styled Component\nDESCRIPTION: This JavaScript code showcases a unit test for an Emotion-styled component that relies on a theme. It wraps the component with a `ThemeProvider` and defines a theme object. The test asserts that the rendered output matches a snapshot, ensuring that the component renders correctly with the applied theme.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/testing/testing-css-in-js.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from \"react\"\nimport { ThemeProvider, withTheme } from \"@emotion/react\"\nimport renderer from \"react-test-renderer\"\n\nconst theme = {\n  maxWidth: \"1450px\",\n}\n\nconst Wrapper = styled.section`\n  max-width: ${props => props.theme.maxWidth};\n`\n\ntest(\"Wrapper renders correctly\", () => {\n  expect(\n    renderer\n      .create(\n        <ThemeProvider theme={theme}>\n          <Wrapper>Content.</Wrapper>\n        </ThemeProvider>\n      )\n      .toJSON()\n  ).toMatchSnapshot()\n})\n```\n\n----------------------------------------\n\nTITLE: Updating PostCSS Loader Dependency\nDESCRIPTION: This code snippet represents a bug fix where the postcss-loader dependency is updated to version ^7.3.4 for the gatsby-plugin-postcss package. This update addresses issues or incorporates new features provided by the updated loader.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-postcss/CHANGELOG.md#_snippet_0\n\nLANGUAGE: none\nCODE:\n```\nupdate dependency postcss-loader to ^7.3.4 for gatsby-plugin-postcss [#38792](https://github.com/gatsbyjs/gatsby/issues/38792) ([dd0ae15](https://github.com/gatsbyjs/gatsby/commit/dd0ae154062949043e95276765581ddac2e72c30))\n```\n\n----------------------------------------\n\nTITLE: Markdown Post Example\nDESCRIPTION: This Markdown snippet represents a blog post with metadata (title, publishedAt, author, tags) and content.  It serves as an example of data that can be queried using GraphQL after being transformed by Gatsby plugins.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/graphql-data-layer/schema-customization.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Sample Post\npublishedAt: 2019-04-01\nauthor: jane@example.com\ntags:\n  - wow\n---\n\n# Heading\n\nText\n```\n\n----------------------------------------\n\nTITLE: Updating README for gatsby-source-faker\nDESCRIPTION: This snippet updates the README file for the `gatsby-source-faker` package with better instructions. The updated README provides clearer guidance and instructions for users to easily understand and utilize the package effectively.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-faker/CHANGELOG.md#_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\nUpdate READMEs for better instructions ([0890a5c](https://github.com/gatsbyjs/gatsby/commit/0890a5cf2c881b49193113a1e1bd5fe13a2c328f))\n```\n\n----------------------------------------\n\nTITLE: Capture SSG/DSG/SSR pages in telemetry\nDESCRIPTION: This commit introduces a feature to capture the number of statically generated (SSG), deferred static generation (DSG), and server-side rendered (SSR) pages in telemetry data. This information helps to analyze the rendering strategies employed in Gatsby sites.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-telemetry/CHANGELOG.md#_snippet_14\n\n\n\n----------------------------------------\n\nTITLE: Moving React Peerdeps (JavaScript)\nDESCRIPTION: This commit moves peer dependencies for React and React DOM to versions 16.9.0 and 17+ in the gatsby-plugin-jss package. This ensures compatibility with a wider range of React versions.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-jss/CHANGELOG.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nMove peerdeps to 16.9.0 & 17+ for react & react-dom [#29735](https://github.com/gatsbyjs/gatsby/issues/29735) ([6b86b99](https://github.com/gatsbyjs/gatsby/commit/6b86b99f7e760c6ffa74b1330399d9fdd94e48a2))\n```\n\n----------------------------------------\n\nTITLE: Move Source Directories Shell\nDESCRIPTION: These shell commands demonstrate how to move source directories such as pages, components, and utils into the src directory, separating them from config/data/build folders.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v0-to-v1.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmkdir src\ngit mv pages src\ngit mv components src\ngit mv utils src\n...\n```\n\n----------------------------------------\n\nTITLE: Configure Additional File Extensions (JavaScript)\nDESCRIPTION: Configures additional file extensions to be recognized as AsciiDoc files by the plugin.  By default, the plugin recognizes `.adoc` and `.asciidoc` extensions. The `fileExtensions` option allows adding more extensions like `.ad`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-asciidoc/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// In your gatsby-config.js\nplugins: [\n  {\n    resolve: `gatsby-transformer-asciidoc`,\n    options: {\n      attributes: {\n        showtitle: true,\n      },\n      fileExtensions: [`ad`, `adoc`],\n    },\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Configure Gatsby Plugin\nDESCRIPTION: This code snippet shows how to configure the gatsby-transformer-javascript-static-exports plugin in your gatsby-config.js file.  Adding the plugin to the `plugins` array enables it to parse JavaScript files and extract data from exports.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-javascript-static-exports/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// In your gatsby-config.js\nplugins: [`gatsby-transformer-javascript-static-exports`]\n```\n\n----------------------------------------\n\nTITLE: Update Babel Monorepo - JavaScript\nDESCRIPTION: This commit updates the babel monorepo as part of chore updates. It addresses dependencies and ensures compatibility.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-subfont/CHANGELOG.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nupdate babel monorepo [#37386](https://github.com/gatsbyjs/gatsby/issues/37386) ([b941876](https://github.com/gatsbyjs/gatsby/commit/b94187633d94d0f0071b38ffe93380dd802ec70f))\n```\n\n----------------------------------------\n\nTITLE: Fixing graphviz on node < 10 in gatsby-remark-graphviz\nDESCRIPTION: This commit fixes a bug related to running graphviz on Node.js versions less than 10. This ensures compatibility with older Node.js environments.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-graphviz/CHANGELOG.md#_snippet_14\n\nLANGUAGE: Other\nCODE:\n```\n- **gatsby-remark-graphviz:** fix graphviz on node < 10 ([#14691](https://github.com/gatsbyjs/gatsby/issues/14691)) ([728a63d](https://github.com/gatsbyjs/gatsby/commit/728a63d))\n```\n\n----------------------------------------\n\nTITLE: Updating Peer Dependencies in gatsby-plugin-styled-jsx\nDESCRIPTION: This commit updates the peer dependencies for gatsby-plugin-styled-jsx to ensure compatibility with newer versions of Gatsby and its related packages. Updating peer dependencies is crucial for maintaining stability and preventing conflicts between different package versions.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-styled-jsx/CHANGELOG.md#_snippet_2\n\nLANGUAGE: Other\nCODE:\n```\nUpdate peerDeps [#36965](https://github.com/gatsbyjs/gatsby/issues/36965) ([b624442](https://github.com/gatsbyjs/gatsby/commit/b6244424fe8b724cbc23b80b2b4f5424cc2055a4))\n```\n\n----------------------------------------\n\nTITLE: Installing Gatsby Latest Version Using npm\nDESCRIPTION: This snippet shows the command to install the latest version of Gatsby using npm. Running this command will update your local project's Gatsby version to the latest available. If you are using npm 7, include `--legacy-peer-deps` flag.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v2-to-v3.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install gatsby@latest\n```\n\n----------------------------------------\n\nTITLE: Running the Gatsby development server\nDESCRIPTION: These commands navigate to the newly created Gatsby site directory and start the development server, which automatically rebuilds the site on file changes.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/e2e-tests/path-prefix/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncd gatsby-example-site\ngatsby develop\n```\n\n----------------------------------------\n\nTITLE: Changing navigateTo to navigate (JavaScript)\nDESCRIPTION: This code snippet illustrates how to rename the navigateTo method in gatsby-link to navigate, which mirrors the API used by @reach/router.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v1-to-v2.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from \"react\"\n- import { navigateTo } from \"gatsby-link\"\n+ import { navigate } from \"gatsby\"\n\n// Don't use navigate with an onClick btw :-)\n// Generally use the `<Link>` component.\nexport default function Page(props) {\n  return (\n-    <div onClick={() => navigateTo(`/`)}>Click to go to home</div>\n+    <div onClick={() => navigate(`/`)}>Click to go to home</div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning Gatsby Default Starter with Git\nDESCRIPTION: This command clones the Gatsby default starter repository from GitHub. It creates a new directory named `gatsby-forestry-example` and downloads the starter project into it. This provides a basic Gatsby project to integrate with Forestry CMS.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/sourcing-from-forestry.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngit clone https://github.com/gatsbyjs/gatsby-starter-default.git gatsby-forestry-example\n```\n\n----------------------------------------\n\nTITLE: Updating node-fetch Dependency\nDESCRIPTION: This commit updates the node-fetch dependency to version ^2.6.7 within gatsby-source-graphql. This update likely addresses security vulnerabilities or bug fixes present in earlier versions of node-fetch, ensuring the plugin's HTTP requests are more robust and secure.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-graphql/CHANGELOG.md#_snippet_13\n\nLANGUAGE: Text\nCODE:\n```\nupdate dependency node-fetch to ^2.6.7 for gatsby-source-graphql [#34647](https://github.com/gatsbyjs/gatsby/issues/34647) ([9590a44](https://github.com/gatsbyjs/gatsby/commit/9590a44c42a5253bda965a42f1682673baad6c29))\n```\n\n----------------------------------------\n\nTITLE: Installing Gatsby Source Ghost Plugin\nDESCRIPTION: This command installs the `gatsby-source-ghost` plugin, which allows Gatsby to fetch data from a Ghost CMS instance.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/sourcing-from-ghost.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install gatsby-source-ghost\n```\n\n----------------------------------------\n\nTITLE: Updating Packages in Gatsby\nDESCRIPTION: This commit updates minor versions of packages in the Gatsby project, excluding `react`, `babel`, and `eslint`. This brings the project up-to-date with the latest minor releases of its dependencies.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-documentationjs/CHANGELOG.md#_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\nupdate minor updates in packages except react, babel and eslint ([#17254](https://github.com/gatsbyjs/gatsby/issues/17254)) ([252d867](https://github.com/gatsbyjs/gatsby/commit/252d867))\n```\n\n----------------------------------------\n\nTITLE: Serving Gatsby Production Site Locally (Shell)\nDESCRIPTION: This command starts a local server to serve the production build of your Gatsby site from the `public` directory.  It allows you to preview the optimized site before deploying it. The site will be accessible at `http://localhost:9000`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/performance/audit-with-lighthouse.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ngatsby serve\n```\n\n----------------------------------------\n\nTITLE: Initializing a New Gatsby Project\nDESCRIPTION: This command initializes a new Gatsby project using the `npm init gatsby` command. It prompts the user to provide a name for the new site and sets up the basic project structure.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm init gatsby\n```\n\n----------------------------------------\n\nTITLE: Example activityTimer Output - Shell\nDESCRIPTION: Shows an example of the output in the terminal after implementing the `activityTimer`. The output includes the timer's success status, the initial message, the duration, and the updated status.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/creating-a-source-plugin/part-4/index.mdx#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nsuccess Sourcing from plugin API - 0.019s - Processing 3 posts and 2 authors\n```\n\n----------------------------------------\n\nTITLE: Feature: Add CSS Loader Options in Gatsby Plugin\nDESCRIPTION: This code introduces the ability to configure css-loader options within the gatsby-plugin-postcss. This feature allows users to customize the behavior of the CSS loader, providing greater control over CSS processing. This feature was added in version 2.0.7 of the plugin.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-postcss/CHANGELOG.md#_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n**gatsby-plugin-postcss:** added css-loader options ([#10861](https://github.com/gatsbyjs/gatsby/issues/10861)) ([88b3158](https://github.com/gatsbyjs/gatsby/commit/88b3158))\n```\n\n----------------------------------------\n\nTITLE: Schema Customization: Consistent return for `nodeModel.runQuery` (gatsby-node.js)\nDESCRIPTION: In Gatsby v2, `nodeModel.runQuery` with `firstOnly: false` returned `null` when nothing was found, whereas in v3, it returns an empty array. This code shows how to update checks for emptiness to account for this change.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v2-to-v3.md#_snippet_30\n\nLANGUAGE: diff\nCODE:\n```\nexports.createResolvers = ({ createResolvers }) => {\n  const resolvers = {\n    Foo: {\n      bars: {\n        resolve(source, args, context, info) {\n          const result = context.nodeModel.runQuery({\n            query: {/* */},\n            type: \"Bar\",\n            firstOnly: false,\n          })\n-         if (result === null) {\n+         if (result.length === 0) {\n            throw new Error(\"Not found!\")\n          }\n          return result\n        },\n      },\n    },\n  }\n  createResolvers(resolvers)\n}\n```\n\n----------------------------------------\n\nTITLE: Installing gatsby-transformer-cloudinary\nDESCRIPTION: This command installs the gatsby-transformer-cloudinary and gatsby-source-filesystem plugins. gatsby-source-filesystem is needed to create File nodes on which gatsby-transformer-cloudinary works.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/images-and-media/using-cloudinary-image-service.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n npm install gatsby-transformer-cloudinary gatsby-source-filesystem\n```\n\n----------------------------------------\n\nTITLE: Feature: Gatsby Head API in babel-preset-gatsby\nDESCRIPTION: This snippet describes the addition of the Gatsby Head API to the babel-preset-gatsby package. This feature addresses an issue reported in issue #35980 on the gatsbyjs/gatsby repository.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/babel-preset-gatsby/CHANGELOG.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nGatsby Head API [#35980](https://github.com/gatsbyjs/gatsby/issues/35980) ([40810c4](https://github.com/gatsbyjs/gatsby/commit/40810c46d18753ea10c8f60ebdabc164482e7983))\n```\n\n----------------------------------------\n\nTITLE: Updating dependency cheerio in gatsby-remark-graphviz\nDESCRIPTION: This code snippet addresses a bug by updating the cheerio dependency to version ^1.0.0-rc.3. Cheerio is a fast, flexible, and lean implementation of core jQuery designed specifically for the server.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-graphviz/CHANGELOG.md#_snippet_13\n\nLANGUAGE: Other\nCODE:\n```\n- update dependency cheerio to ^1.0.0-rc.3 ([#16831](https://github.com/gatsbyjs/gatsby/issues/16831)) ([55bee35](https://github.com/gatsbyjs/gatsby/commit/55bee35))\n```\n\n----------------------------------------\n\nTITLE: Allowing React Experimental in gatsby-plugin-fullstory\nDESCRIPTION: This snippet highlights a chore update to allow the use of experimental React versions within the gatsby-plugin-fullstory package. It refers to issue #36533 and provides a commit hash.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-fullstory/CHANGELOG.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nallow react/react-dom@experimental [#36533](https://github.com/gatsbyjs/gatsby/issues/36533) ([7ef4a3f](https://github.com/gatsbyjs/gatsby/commit/7ef4a3fe080d45e9edaff9f1d4deebd12a00ddbd))\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query for Large Files\nDESCRIPTION: This GraphQL query retrieves media items with file sizes greater than a specified limit. Used to identify files excluded due to the `maxFileSizeBytes` configuration option.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-wordpress/docs/debugging-and-troubleshooting.md#_snippet_6\n\nLANGUAGE: GraphQL\nCODE:\n```\nquery TOO_LARGE_FILES {\n  allWpMediaItem(filter: { fileSize: { gt: 15728640 } }) {\n    nodes {\n      id\n      sourceUrl\n      fileSize\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring gatsby-source-stripe Plugin (JavaScript)\nDESCRIPTION: This code configures the `gatsby-source-stripe` plugin in your `gatsby-config.js` file. It specifies the Stripe objects to fetch (e.g., \"Price\"), your Stripe secret API key (obtained from environment variables), and whether to download files.  It also requires installing `gatsby-plugin-react-helmet`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/ecommerce-tutorial/index.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  siteMetadata: {\n    title: `Gatsby E-commerce Starter`,\n  },\n  plugins: [\n    `gatsby-plugin-react-helmet`,\n    {\n      resolve: `gatsby-source-stripe`,\n      options: {\n        objects: [\"Price\"],\n        secretKey: process.env.STRIPE_SECRET_KEY,\n        downloadFiles: false,\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Updating CSS Modules Class Names (Diff)\nDESCRIPTION: Illustrates how to update class names in CSS Modules when migrating to Gatsby V2. It shows how to access class names with dashes in them using camelCase notation (e.g., `.my-class-name` becomes `myStyles.myClassName`).\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v1-to-v2.md#_snippet_28\n\nLANGUAGE: diff\nCODE:\n```\nimport React from \"react\"\nimport * as myStyles from \"./my.module.css\"\n\nexport default function Component({ children }) (\n-  <div className={myStyles['my-class-name']}>\n+  <div className={myStyles.myClassName}>\n    {children}\n  </div>\n)\n```\n\n----------------------------------------\n\nTITLE: Include PostCSS plugins in postcss.config.js (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to include PostCSS plugins in your postcss.config.js file to have the same configuration as in v1.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v1-to-v2.md#_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nconst postcssImport = require(`postcss-import`)\nconst postcssCssNext = require(`postcss-cssnext`)\nconst postcssBrowserReporter = require(`postcss-browser-reporter`)\nconst postcssReporter = require(`postcss-reporter`)\n\nmodule.exports = () => ({\n  plugins: [\n    postcssImport(),\n    postcssCssNext(),\n    postcssBrowserReporter(),\n    postcssReporter(),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Wrapping Root Element in Gatsby\nDESCRIPTION: This code snippet demonstrates how to wrap the root element in Gatsby using the `wrapRootElement` API in `gatsby-ssr.js` or `gatsby-browser.js`. It imports a React component called `AppProviders` and uses it to wrap the `element` prop, providing context to the application.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/v5.6/index.md#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport * as React from \"react\";\nimport { AppProviders } from \"./src/components/app-providers\";\n\nexport const wrapRootElement = ({ element }) => (\n  <AppProviders>{element}</AppProviders>\n);\n```\n\n----------------------------------------\n\nTITLE: Update Gatsby plugins that depend on sharp\nDESCRIPTION: This command updates several Gatsby plugins that depend on the `sharp` package to resolve incompatibility issues arising from multiple `sharp` versions in `node_modules`. Updating these plugins ensures that the project uses compatible versions of `sharp`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-sharp/README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm install gatsby-plugin-sharp gatsby-plugin-manifest gatsby-remark-images-contentful gatsby-source-contentful gatsby-transformer-sharp gatsby-transformer-sqip\n```\n\n----------------------------------------\n\nTITLE: Bug Fix: Webpack rebuild on new scopes in gatsby-plugin-mdx\nDESCRIPTION: This commit fixes an issue in the gatsby-plugin-mdx plugin to ensure that Webpack rebuilds when new scopes are created. By triggering a rebuild, the plugin reflects the changes in the generated site content. This resolves a bug related to Webpack not picking up on dynamic changes.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-mdx/CHANGELOG.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nf62001e\n```\n\n----------------------------------------\n\nTITLE: Creating Gatsby Theme Workspace (Shell)\nDESCRIPTION: This command uses the Gatsby CLI to create a new project based on the `gatsby-starter-theme-workspace` starter. It initializes a new Gatsby theme project, setting up a basic file structure for theme development.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/plugins-and-themes/building-themes.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngatsby new gatsby-theme-my-theme gatsbyjs/gatsby-starter-theme-workspace\n```\n\n----------------------------------------\n\nTITLE: Installing n using n-install\nDESCRIPTION: This command installs the 'n' Node.js version manager using 'n-install'. 'n' provides a simplified way to manage and switch between different Node.js versions, offering an alternative to nvm.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/local-development/gatsby-on-linux.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\ncurl -L https://raw.githubusercontent.com/mklement0/n-install/stable/bin/n-install | bash\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook main.js with webpack and Babel\nDESCRIPTION: This code modifies the webpack configuration within `.storybook/main.js` to transpile Gatsby modules, prevent issues with core-js, remove static GraphQL queries, and set the correct react-dom based on the React version, allowing Gatsby components to be rendered in Storybook. It returns the modified webpack configuration.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/testing/visual-testing-with-storybook.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nconst React = require(\"react\");\n\nmodule.exports = {\n  webpackFinal: async config => {\n    // Transpile Gatsby module because Gatsby includes un-transpiled ES6 code.\n    config.module.rules[0].exclude = [/node_modules\\/(?!(gatsby|gatsby-script)\\/)/]\n\n    // Use correct react-dom depending on React version.\n    if (parseInt(React.version) <= 18) {\n      config.externals = [\"react-dom/client\"];\n    }\n\n    // Remove core-js to prevent issues with Storybook\n    config.module.rules[0].exclude= [/core-js/]\n    // Use babel-plugin-remove-graphql-queries to remove static queries from components when rendering in storybook\n    config.module.rules[0].use[0].options.plugins.push(\n      require.resolve(\"babel-plugin-remove-graphql-queries\")\n    )\n\n    config.resolve.mainFields=[\"browser\", \"module\", \"main\"]\n    return config\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Importing TransitionLink\nDESCRIPTION: This line imports the `TransitionLink` component from the `gatsby-plugin-transition-link` package. This allows you to use the component in your React components to create custom page transitions.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/adding-common-features/adding-page-transitions-with-plugin-transition-link.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport TransitionLink from \"gatsby-plugin-transition-link\"\n```\n\n----------------------------------------\n\nTITLE: Plugin Options Schema Definition - gatsby-node.js\nDESCRIPTION: Defines a plugin options schema using Joi, specifying that the plugin doesn't accept any options. This is the 'before' state for a migration example related to `gatsby-plugin-utils` update.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/v4.6/index.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// The plugin doesn't take any options\nexports.pluginOptionsSchema = ({ Joi }) => Joi.object({})\n```\n\n----------------------------------------\n\nTITLE: Run the Gatsby codemod for gatsby-plugin-image\nDESCRIPTION: This command demonstrates how to run the Gatsby codemod for `gatsby-plugin-image`. The codemod automates many of the necessary code changes for migrating from `gatsby-image` to `gatsby-plugin-image`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/image-migration-guide.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnpx gatsby-codemods gatsby-plugin-image <optional-path>\n```\n\n----------------------------------------\n\nTITLE: Update Packages in Gatsby\nDESCRIPTION: This snippet updates minor versions of packages in the Gatsby project, excluding react, babel and eslint. This ensures that the project utilizes the latest bug fixes and performance improvements in dependency packages.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-javascript-static-exports/CHANGELOG.md#_snippet_14\n\nLANGUAGE: none\nCODE:\n```\n- update minor updates in packages except react, babel and eslint ([#17254](https://github.com/gatsbyjs/gatsby/issues/17254)) ([252d867](https://github.com/gatsbyjs/gatsby/commit/252d867))\n```\n\n----------------------------------------\n\nTITLE: Configuring Sass Precision (Bootstrap 4)\nDESCRIPTION: This snippet shows how to configure Sass precision for Bootstrap 4 using `gatsby-plugin-sass`. This is important for maintaining consistent theming and styling when using Bootstrap. Requires `node-sass` implementation and potentially PostCSS plugins.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-sass/README.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nplugins: [\n  {\n    resolve: `gatsby-plugin-sass`,\n    options: {\n      implementation: require(\"node-sass\"),\n      postCssPlugins: [somePostCssPlugin()],\n      sassOptions: {\n        precision: 6,\n      },\n    },\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Updating Coffeescript Dependency in Gatsby Plugin\nDESCRIPTION: This snippet updates the coffeescript dependency to version ^2.6.1 for the gatsby-plugin-coffeescript package, addressing issue #33380.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-coffeescript/CHANGELOG.md#_snippet_5\n\nLANGUAGE: Other\nCODE:\n```\nupdate dependency coffeescript to ^2.6.1 for gatsby-plugin-coffeescript [#33380](https://github.com/gatsbyjs/gatsby/issues/33380) ([c0b5214](https://github.com/gatsbyjs/gatsby/commit/c0b5214393446c451cf74a2e703e493c4a741580))\n```\n\n----------------------------------------\n\nTITLE: Using AVIF Format in StaticImage Component (JSX)\nDESCRIPTION: This code snippet demonstrates how to use the AVIF image format within the StaticImage component. By adding \"avif\" to the formats array, the component will generate AVIF images in addition to the auto and WebP formats for broader browser support.  This requires the latest versions of gatsby-plugin-sharp, gatsby-transformer-sharp, and gatsby-plugin-image.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/v2.30/index.md#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<StaticImage\n  src=\"./cornwall.jpg\"\n  formats=[\"auto\", \"webp\", \"avif\"]\n  alt=\"Cornwall\"\n/>\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query (Proposed)\nDESCRIPTION: Example of the proposed GraphQL query structure for sorting data. It shows the simplified `frontmatter: { date: DESC }` syntax.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/v4.21/index.md#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n{\n  allMarkdownRemark(sort: { frontmatter: { date: DESC } }) {\n    nodes {\n      ...fields\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure gatsby-plugin-manifest and gatsby-plugin-offline for icon caching\nDESCRIPTION: This configuration ensures icons are cached correctly when using both `gatsby-plugin-manifest` and `gatsby-plugin-offline` by disabling cache busting for manifest icons and explicitly defining the icon glob pattern.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-offline/README.md#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\n// gatsby-config.js\n{\n   resolve: 'gatsby-plugin-manifest',\n   options: {\n      icon: 'icon.svg',\n      cache_busting_mode: 'none'\n   }\n},\n{\n   resolve: 'gatsby-plugin-offline',\n   options: {\n      workboxConfig: {\n         globPatterns: ['**/icon-path*']\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Bug Fix: Language Loader for Imports\nDESCRIPTION: This commit ensures that the language loader is used for imports, rather than PostCSS. This resolves issues where imports were incorrectly being handled by PostCSS, leading to unexpected behavior.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-sass/CHANGELOG.md#_snippet_15\n\n\n\n----------------------------------------\n\nTITLE: Debugging: Initial onCreateNode Function JavaScript\nDESCRIPTION: This snippet shows an initial implementation of the `onCreateNode` function in a `gatsby-node.js` file. It attempts to create a slug field for MarkdownRemark nodes using the `gatsby-source-filesystem` plugin. A bug exists because it uses `Node` instead of `node` in the destructured arguments, causing an error.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/debugging-the-build-process.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { createFilePath } = require(\"gatsby-source-filesystem\")\n\nexports.onCreateNode = args => {\n  const { actions, node } = args\n\n  if (node.internal.type === \"MarkdownRemark\") {\n    const { createNodeField } = actions\n\n    const value = createFilePath({ node, getNode })\n    createNodeField({\n      name: `slug`,\n      node,\n      value,\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Typing Gatsby Slice API component\nDESCRIPTION: This code demonstrates how to type a Slice component using `SliceComponentProps` from Gatsby's Slice API. It includes generics for `DataType`, `SliceContextType`, and `AdditionalSerializableProps` to type the `data` and `pageContext` props.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/custom-configuration/typescript.md#_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as React from \"react\"\nimport { SliceComponentProps, graphql } from \"gatsby\"\n\ntype DataType = {\n  site: {\n    siteMetadata: {\n      title: string\n    }\n  }\n}\n\ntype SliceContextType = {\n  locale: string\n}\n\ntype AdditionalSerializableProps = {\n  theme: \"light\" | \"dark\"\n}\n\nconst Navigation = ({\n  data,\n  sliceContext,\n  theme,\n}: SliceComponentProps<\n  DataType,\n  SliceContextType,\n  AdditionalSerializableProps\n>) => (\n  <nav className={`theme---${theme}`}>\n    Menu for {sliceContext.locale} at {data.site.siteMetadata.title}\n  </nav>\n)\n\nexport default Navigation\n\nexport const query = graphql`\n  {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: Destructuring Endpoint in source-nodes.ts (TypeScript)\nDESCRIPTION: This code snippet shows how to destructure the `endpoint` option from the `pluginOptions` object in `plugin/src/source-nodes.ts` and use it in the `fetchGraphQL` call. This makes the GraphQL API endpoint configurable and allows the plugin to fetch data from the specified endpoint.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/creating-a-source-plugin/part-4/index.mdx#_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nexport const sourceNodes: GatsbyNode[`sourceNodes`] = async (\n  gatsbyApi,\n  pluginOptions: IPluginOptionsInternal\n) => {\n  const { reporter, cache } = gatsbyApi\n  // highlight-next-line\n  const { endpoint } = pluginOptions\n\n  // Rest of sourceNodes\n\n  const { data, errors } = await fetchGraphQL<IApiResponse>(\n    // highlight-next-line\n    endpoint,\n    `/* GraphQL Query */`\n  )\n\n  // Rest of sourceNodes\n}\n```\n\n----------------------------------------\n\nTITLE: Example JSON data for GraphQL inference\nDESCRIPTION: This JSON example demonstrates the structure of data that Gatsby would inspect for automatic GraphQL type inference.  It contains fields like `slug`, `title`, `image`, and `author` which are used to generate the GraphQL schema. The `image` field itself contains nested data.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/creating-a-source-plugin/part-3/index.mdx#_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"slug\": \"post-1\",\n  \"title\": \"The first post\",\n  \"image\": {\n    \"url\": \"https://images.unsplash.com/photo-1615751072497-5f5169febe17?fm=jpg\",\n    \"alt\": \"brown and white long coated dog\",\n    \"width\": 3024,\n    \"height\": 4032\n  },\n  \"author\": \"Jay Gatsby\"\n}\n```\n\n----------------------------------------\n\nTITLE: Create Gatsby Cloud Deploy Button (HTML)\nDESCRIPTION: This HTML snippet creates a link that, when clicked, redirects the user to the Gatsby Cloud dashboard to deploy a Gatsby site from the specified GitHub repository. The `href` attribute points to the Gatsby Cloud deployment URL, and the `url` parameter specifies the GitHub repository. The image provides a visual representation of the deploy button.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/cloud/create-a-deploy-to-gatsby-cloud-button.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<a\n  href=\"https://www.gatsbyjs.com/dashboard/deploynow?url=https://github.com/gatsbyjs/gatsby-starter-blog\"\n  target=\"_blank\"\n>\n  <img\n    src=\"https://www.gatsbyjs.com/deploynow.svg\"\n    alt=\"Deploy to Gatsby Cloud\"\n  />\n</a>\n```\n\n----------------------------------------\n\nTITLE: Configure Dynamic Path HTTP Headers in gatsby-config.js\nDESCRIPTION: This snippet configures custom HTTP headers for a dynamic path using a colon (`:`) to declare a path segment. For example, `/some-path/:slug` will match `/some-path/foo` and `/some-path/bar`. This allows setting the `x-custom-header` to \"Hello World\" for all paths matching this pattern. Dynamic path matching provides flexibility in applying headers to multiple paths.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/previews-deploys-hosting/headers.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n  headers: [\n    {\n      source: `/some-path/:slug`,\n      headers: [\n        {\n          key: `x-custom-header`,\n          value: `Hello World`,\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Pages in gatsby-config.js for Prismic Integration\nDESCRIPTION: This configuration snippet shows how to set up the `gatsby-source-prismic-graphql` plugin to generate pages from Prismic content. It defines the custom type, match pattern, preview path, and template component for generating blog post pages.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/prismic-source-graphql-tutorial.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\noptions: {\n  repositoryName: 'gatsby-blog-scratch',\n  //highlight-start\n  pages: [{\n    type: 'Post',          // Custom type of the document\n    match: '/blog/:uid',   // Pages will be generated in this pattern\n    path: '/blog-preview', // Placeholder route for previews\n    component: require.resolve('./src/templates/post.js') // Template file\n  }]\n  //highlight-end\n}\n```\n\n----------------------------------------\n\nTITLE: CSS for PrismJS Pre Styles\nDESCRIPTION: This CSS snippet removes the default PrismJS theme styles for the `<pre>` element within the `.gatsby-highlight` container. It ensures that the background color, margin, padding, and overflow are reset to allow for custom styling of the code block.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-prismjs/README.md#_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n/**\n * Remove the default PrismJS theme background-color, border-radius, margin,\n * padding and overflow.\n * 1. Make the element just wide enough to fit its content.\n * 2. Always fill the visible space in .gatsby-highlight.\n * 3. Adjust the position of the line numbers\n */\n.gatsby-highlight pre[class*=\"language-\"] {\n  background-color: transparent;\n  margin: 0;\n  padding: 0;\n  overflow: initial;\n  float: left; /* 1 */\n  min-width: 100%; /* 2 */\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing body as a Buffer (JS)\nDESCRIPTION: This snippet shows how to configure Gatsby Functions to treat the request body as a `Buffer` regardless of the `Content-Type` header. It modifies the `bodyParser` configuration to force the `raw` parser to handle all requests. The `config` object is exported to override default body parsing behavior. Dependencies: None.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/functions/middleware-and-helpers.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const config = {\n  bodyParser: {\n    raw: {\n      type: `*/*`,\n    },\n  },\n}\n\nexport default function MyAPIFunction(req, res) {\n  // req.body will be a Buffer, no matter what's the `Content-type` header on request\n}\n```\n\n----------------------------------------\n\nTITLE: Using generic HeadProps with data prop\nDESCRIPTION: This example shows how to use generics with `HeadProps` to type the `data` prop in the Gatsby Head API. It defines a `DataProps` type and uses it as a generic for `HeadProps` to provide type information for the `site` property.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/custom-configuration/typescript.md#_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as React from \"react\"\nimport { graphql, HeadProps, PageProps } from \"gatsby\"\n\ntype DataProps = {\n  site: {\n    siteMetadata: {\n      title: string\n    }\n  }\n}\n\nconst IndexRoute = ({ data: { site } }: PageProps<DataProps>) => {\n  return (\n    <main>\n      <h1>{site.siteMetadata.title}</h1>\n    </main>\n  )\n}\n\nexport default IndexRoute\n\nexport function Head(props: HeadProps<DataProps>) {\n  return (\n    <title>{props.data.site.siteMetadata.title}</title>\n  )\n}\n\nexport const query = graphql`\n  {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: Loading Scripts Dependently\nDESCRIPTION: This snippet showcases how to load scripts dependently using the `onLoad` callback. It uses a state variable to track whether the first script has loaded, and only loads the second script if the first one has loaded successfully. Relies on React hooks and the `gatsby` package.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/built-in-components/gatsby-script.md#_snippet_17\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from \"react\"\nimport { Script } from \"gatsby\"\n\nfunction MyPage() {\n  const [loaded, setLoaded] = useState(false)\n\n  return (\n    <>\n      // highlight-next-line\n      <Script src=\"https://my-example-script\" onLoad={() => setLoaded(true)} />\n      {loaded && <Script src=\"https://my-other-example-script\" />}\n    </>\n  )\n}\n\nexport default Page\n```\n\n----------------------------------------\n\nTITLE: DSG Config with File System Route API in Gatsby\nDESCRIPTION: This code snippet demonstrates how to use the File System Route API in Gatsby to configure Deferred Static Generation (DSG) for a page.  It exports an async config function that returns an object with the defer key set to true, which defers the page generation until the first user request.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/rendering-options/using-deferred-static-generation.md#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// The rest of your page, including imports, page component & page query etc.\n\nexport async function config() {\n  // Optionally use GraphQL here\n\n  return ({ params }) => {\n    return {\n      defer: true,\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Gatsby Starter README Template (Markdown)\nDESCRIPTION: This Markdown snippet presents a template for a Gatsby starter's README file, outlining key sections such as the starter's name, quick start instructions, features, and next steps for developers. It provides a clear structure for informing users about the starter's purpose, setup, and potential extensions.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/contributing/docs-contributions/how-to-write-a-starter-readme.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Name of starter\n\n## Quick start\n\nGive instructions on how to install this starter\n\n## Features\n\nTell features comes with this starter. This is a chance to give users a brief tour of how to use this starter effectively.\n\n## Next steps\n\nAny tips on how to deploy this starter? What CMS to use? Other fun ways to build on top of the starter? Say those here!\n```\n\n----------------------------------------\n\nTITLE: Rendering a React Component with Props\nDESCRIPTION: This code snippet demonstrates how to render a React component and pass props to it.  The `Greeting` component is rendered three times, each time with a different value for the `name` prop. This showcases how props can be used to customize the output of a component.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-2/index.mdx#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport Greeting from \"../components/greeting\" // highlight-line\n\n// Rendering the <Greeting> component\nconst SayHello = () => {\n  return (\n    <div>\n        {/* highlight-start */}\n        <Greeting name=\"Megan\" />\n        <Greeting name=\"Obinna\" />\n        <Greeting name=\"Generosa\" />\n        {/* highlight-end */}\n      </div>\n    )\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Accessing Plugin Options in source-nodes.ts (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to access the plugin options within the `sourceNodes` function in `plugin/src/source-nodes.ts`. It uses the `IPluginOptionsInternal` type to ensure type safety when accessing the options, and then logs the options to the console. Requires the `gatsby` package.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/creating-a-source-plugin/part-4/index.mdx#_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {\n  IAuthorInput,\n  IPostInput,\n  NodeBuilderInput,\n  // highlight-next-line\n  IPluginOptionsInternal,\n} from \"./types\"\n\nexport const sourceNodes: GatsbyNode[`sourceNodes`] = async (\n  gatsbyApi,\n  // highlight-next-line\n  pluginOptions: IPluginOptionsInternal\n) => {\n  const { reporter, cache } = gatsbyApi\n\n  // highlight-next-line\n  console.log({ pluginOptions })\n\n  // Rest of sourceNodes\n}\n```\n\n----------------------------------------\n\nTITLE: Create Page with Context for Query Variable\nDESCRIPTION: This JavaScript code illustrates how to create a page dynamically using the `createPage` API in Gatsby's `gatsby-node.js` file. It demonstrates how to pass data to the page's GraphQL query using the `context` object.  The `title` property within the context object becomes the `$title` variable in the page query.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/querying-data/page-query.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nposts.forEach(({ node }, index) => {\n  createPage({\n    path: node.fields.slug,\n    component: path.resolve(`./src/templates/blog-post.js`),\n    // values in the context object are passed in as variables to page queries\n    context: {\n      title: node.title, // \"Using a Theme\"\n    },\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Fixing Documentation with Shell Script\nDESCRIPTION: This code snippet demonstrates how to change the language from bash to shell in documentation code blocks. This is intended to correct language identification in documentation to improve syntax highlighting and clarity.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/babel-preset-gatsby-package/CHANGELOG.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nchange bash to shell in code language blocks ([#22899](https://github.com/gatsbyjs/gatsby/issues/22899)) ([6b6b2f2](https://github.com/gatsbyjs/gatsby/commit/6b6b2f2))\n```\n\n----------------------------------------\n\nTITLE: Bumping Babel Minor Version\nDESCRIPTION: This snippet describes the chore of bumping the minor version of Babel. This involves updating Babel to the next minor version, potentially introducing new features or improvements while maintaining backward compatibility.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-excel/CHANGELOG.md#_snippet_19\n\nLANGUAGE: None\nCODE:\n```\nbump babel minor [#31857](https://github.com/gatsbyjs/gatsby/issues/31857) [#31859](https://github.com/gatsbyjs/gatsby/issues/31859) ([8636025](https://github.com/gatsbyjs/gatsby/commit/863602567930a39142ed33d9d1f1813b7dec8686))\n```\n\n----------------------------------------\n\nTITLE: Updating Peer Dependencies in gatsby-plugin-no-sourcemaps\nDESCRIPTION: This commit updates the peer dependencies for the `gatsby-plugin-no-sourcemaps` package. It ensures compatibility with the latest Gatsby versions and their dependencies.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-no-sourcemaps/CHANGELOG.md#_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n#### Chores\n\n- Update peerDeps [#36965](https://github.com/gatsbyjs/gatsby/issues/36965) ([b624442](https://github.com/gatsbyjs/gatsby/commit/b6244424fe8b724cbc23b80b2b4f5424cc2055a4))\n```\n\n----------------------------------------\n\nTITLE: Adding navigateTo -> navigate codemod in Gatsby\nDESCRIPTION: This commit introduces a new codemod to replace `navigateTo` with `navigate` within Gatsby projects. This codemod automates the process of updating code to use the new `navigate` API.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-codemods/CHANGELOG.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nadd a navigateTo -> navigate codemod ([#7532](https://github.com/gatsbyjs/gatsby/issues/7532)) ([5f679fa](https://github.com/gatsbyjs/gatsby/commit/5f679fa))\n```\n\n----------------------------------------\n\nTITLE: Check if Request Path is Issuer Shadow Path\nDESCRIPTION: This function `requestPathIsIssuerShadowPath` checks if the issuer's path is a potential shadow path of the requested component. This is used to handle component extending, allowing a shadowed component to import and wrap the original component. The function returns `true` if the issuer path is a shadow path.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/conceptual/how-shadowing-works.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nrequestPathIsIssuerShadowPath({ theme, component, issuerPath, userSiteDir }) {\n  if (!theme || !component) {\n    return false\n  }\n\n  // get list of potential shadow locations\n  const shadowFiles = this.getBaseShadowDirsForThemes(theme.themeName)\n    .concat(path.join(userSiteDir, `src`, theme.themeName))\n    .map(dir => path.join(dir, component))\n    .flatMap(comp => this.getAcceptableShadowFileNames(comp))\n\n  // if the issuer is requesting a path that is a potential shadow path of itself\n  return shadowFiles.includes(issuerPath)\n}\n```\n\n----------------------------------------\n\nTITLE: Updating dependency cross-env\nDESCRIPTION: Updates the cross-env dependency to version ^7.0.3. This is a chore update related to environment variable handling in the gatsby-plugin-stylus package.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-stylus/CHANGELOG.md#_snippet_5\n\n\n\n----------------------------------------\n\nTITLE: Updating pluginOptionsSchema tests\nDESCRIPTION: This change updates the pluginOptionsSchema tests to ensure the plugin's options are validated correctly. It improves the reliability and maintainability of the plugin's configuration.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-google-tagmanager/CHANGELOG.md#_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Using useContentfulImage Hook with GatsbyImage\nDESCRIPTION: This code snippet demonstrates how to use the `useContentfulImage` hook from `gatsby-source-contentful` to dynamically generate images from the Contentful Image API. It uses `GatsbyImage` to display the generated image within a React component. The `image` parameter within `useContentfulImage` accepts an object containing the URL, width, and height of the desired image.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/v4.16/index.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { GatsbyImage } from \"gatsby-plugin-image\"\nimport * as React from \"react\"\nimport { useContentfulImage } from \"gatsby-source-contentful/hooks\"\n\nconst MyComponent = () => {\n  const dynamicImage = useContentfulImage({\n    image: {\n      url: \"//images.ctfassets.net/k8iqpp6u0ior/3BSI9CgDdAn1JchXmY5IJi/f97a2185b3395591b98008647ad6fd3c/camylla-battani-AoqgGAqrLpU-unsplash.jpg\",\n      width: 2000,\n      height: 1000,\n    },\n  })\n  return <GatsbyImage image={dynamicImage} />\n}\n\nexport default MyComponent\n```\n\n----------------------------------------\n\nTITLE: Configure GitLab CI/CD with .gitlab-ci.yml\nDESCRIPTION: This snippet provides the configuration for GitLab CI/CD using the `.gitlab-ci.yml` file. It specifies the Docker image, caching options, deployment stage, build script, artifacts path, and the branch to trigger the CI/CD pipeline.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/previews-deploys-hosting/deploying-to-gitlab-pages.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\nimage: node:latest\n\n# This folder is cached between builds\n# https://docs.gitlab.com/ce/ci/yaml/README.html#cache\ncache:\n  paths:\n    - node_modules/\n    # Enables git-lab CI caching. Both .cache and public must be cached, otherwise builds will fail.\n    - .cache/\n    - public/\n\npages:\n  stage: deploy\n  script:\n    - npm install\n    - ./node_modules/.bin/gatsby build --prefix-paths\n  artifacts:\n    paths:\n      - public\n  only:\n    - main\n```\n\n----------------------------------------\n\nTITLE: Updating Minor Updates in Packages\nDESCRIPTION: This snippet highlights updating minor updates in packages, excluding react, babel, and eslint. This ensures the project leverages the latest enhancements and bug fixes from its dependencies, while deliberately excluding major frameworks to maintain stability.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-medium/CHANGELOG.md#_snippet_9\n\nLANGUAGE: Diff\nCODE:\n```\n- update minor updates in packages except react, babel and eslint ([#17254](https://github.com/gatsbyjs/gatsby/issues/17254)) ([252d867](https://github.com/gatsbyjs/gatsby/commit/252d867))\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query Example\nDESCRIPTION: Example GraphQL query to retrieve the URL and screenshot file ID from the generated Screenshot nodes. The query traverses through the `allSitesYaml` node, its edges, and its childScreenshot to access the `screenshotFile`'s ID.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-screenshot/README.md#_snippet_4\n\nLANGUAGE: GraphQL\nCODE:\n```\n{\n  allSitesYaml {\n    edges {\n      node {\n        url\n        childScreenshot {\n          screenshotFile {\n            id\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Chore: Soft deprecate this plugin\nDESCRIPTION: This snippet documents a chore in version 4.23.0 of the gatsby-source-graphql plugin. It soft deprecates the plugin, indicating that it may be phased out in future releases.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-graphql/CHANGELOG.md#_snippet_8\n\n\n\n----------------------------------------\n\nTITLE: Example diff for rename-bound-action-creators codemod\nDESCRIPTION: This diff demonstrates the renaming of `boundActionCreators` to `actions` as performed by the `rename-bound-action-creators` codemod. It updates the variable name to align with the new Gatsby API.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-codemods/README.md#_snippet_13\n\nLANGUAGE: Diff\nCODE:\n```\n- exports.onCreateNode = ({ node, getNode, boundActionCreators }) => {\n+ exports.onCreateNode = ({ node, getNode, actions }) => {\n- const { createNodeField } = boundActionCreators\n+ const { createNodeField } = actions\n  if (node.internal.type === `MarkdownRemark`) {\n    const slug = createFilePath({ node, getNode, basePath: `pages` })\n    createNodeField({\n      node,\n      name: `slug`,\n      value: slug,\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Gatsby site using the default starter\nDESCRIPTION: This command utilizes the Gatsby CLI to generate a new Gatsby site using the default starter template. It creates a directory named 'my-default-starter' containing the basic project structure and configuration files. This is the first step in setting up a new Gatsby project.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/using-type-definitions/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngatsby new my-default-starter https://github.com/gatsbyjs/gatsby-starter-default\n```\n\n----------------------------------------\n\nTITLE: Rendering Frontmatter Title - HTML/JavaScript\nDESCRIPTION: This HTML snippet displays the `title` property from the page's frontmatter, or 'disabled' if the title is not available. It relies on Gatsby's `props.pageContext.frontmatter` object to access the frontmatter data. The purpose is to check if the frontmatter is correctly parsed and rendered, but without executing the embedded JavaScript.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/e2e-tests/mdx/src/posts/frontmatter-engine/javascript-frontmatter.mdx#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<span data-cy=\"js-frontmatter\">\n  {props.pageContext.frontmatter?.title || `disabled`}\n</span>\n```\n\n----------------------------------------\n\nTITLE: Adding inside and outside fit options (JavaScript)\nDESCRIPTION: This snippet adds 'inside' and 'outside' fit options for image transformations.  These options provide more control over how images are resized and cropped, allowing for better visual results when transforming images with sharp.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-sharp/CHANGELOG.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n1aa2974\n```\n\n----------------------------------------\n\nTITLE: Updating cross-env dependency in Gatsby\nDESCRIPTION: This commit updates the `cross-env` dependency to version ^7.0.3.  This update is part of ongoing maintenance and aims to incorporate the latest features, bug fixes, and security enhancements from the `cross-env` package. `cross-env` is a utility for setting environment variables across different platforms.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-graphviz/CHANGELOG.md#_snippet_8\n\nLANGUAGE: Text\nCODE:\n```\nupdate dependency cross-env to ^7.0.3 [#28505](https://github.com/gatsbyjs/gatsby/issues/28505) ([a819b9b](https://github.com/gatsbyjs/gatsby/commit/a819b9bfb663139f7b06c3ed7d6d6069a2382b2c))\n```\n\n----------------------------------------\n\nTITLE: Installing gatsby-design-tokens with npm\nDESCRIPTION: This command installs the `gatsby-design-tokens` package as a dependency in your project using npm. The `--save` flag ensures that the package is added to your `package.json` file.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-design-tokens/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install gatsby-design-tokens --save\n```\n\n----------------------------------------\n\nTITLE: Release Plugin Option Validation in Gatsby\nDESCRIPTION: This commit introduces plugin option validation to the Gatsby framework. The validation ensures that the options provided to the plugin conform to the defined schema, enhancing the reliability and maintainability of the plugin configuration.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-offline/CHANGELOG.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n41ae1c0\n```\n\n----------------------------------------\n\nTITLE: Formatting Changelog Files\nDESCRIPTION: This commit formats changelog files within the gatsby-plugin-flow package. The formatting ensures consistency and readability of the changelog entries, aiding in maintenance and version tracking.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-flow/CHANGELOG.md#_snippet_5\n\n\n\n----------------------------------------\n\nTITLE: Querying for AVIF Images in GraphQL\nDESCRIPTION: This code snippet demonstrates how to query for AVIF images using GraphQL.  The formats array within the gatsbyImageData resolver is used to specify the desired image formats, including AUTO, WEBP, and AVIF. This allows the selection of AVIF images during GraphQL queries, requiring updated versions of gatsby-plugin-sharp, gatsby-transformer-sharp and gatsby-plugin-image.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/v2.30/index.md#_snippet_2\n\nLANGUAGE: GraphQL\nCODE:\n```\nquery {\n  file(relativePath: { eq: \"cornwall.jpg\" }) {\n    childImageSharp {\n      gatsbyImageData(maxWidth: 720, formats: [AUTO, WEBP, AVIF])\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a new Gatsby site\nDESCRIPTION: This command creates a new Gatsby site named 'gatsby-example-site' using the default starter template.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/e2e-tests/path-prefix/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngatsby new gatsby-example-site\n```\n\n----------------------------------------\n\nTITLE: Updating Gatsby Plugins to resolve sharp module incompatibility using shell\nDESCRIPTION: This shell command provides a way to update gatsby related plugin packages to a compatible version of sharp library, resolving any module incompatibility issues.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-manifest/README.md#_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nnpm install gatsby-plugin-sharp gatsby-plugin-manifest gatsby-remark-images-contentful gatsby-source-contentful gatsby-transformer-sharp gatsby-transformer-sqip\n```\n\n----------------------------------------\n\nTITLE: Chore: Apply Patches for v5 (gatsby-plugin-less)\nDESCRIPTION: This code snippet documents applying patches specifically for version 5 of the gatsby-plugin-less. The action is associated with issue #36796. Patch applications are essential for addressing critical bugs and security vulnerabilities in a stable release, ensuring proper functionality.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-less/CHANGELOG.md#_snippet_3\n\nLANGUAGE: Text\nCODE:\n```\napply patches for v5 [#36796](https://github.com/gatsbyjs/gatsby/issues/36796) ([25f79b6](https://github.com/gatsbyjs/gatsby/commit/25f79b6c3719fdf09584ade620a05c66ba2a697c))\n```\n\n----------------------------------------\n\nTITLE: Fix structured content fields\nDESCRIPTION: This code snippet addresses an issue with structured content fields in gatsby-source-contentful. The fix ensures that structured content, such as nested objects and arrays, is correctly parsed and processed when fetching data from Contentful.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-contentful/CHANGELOG.md#_snippet_32\n\nLANGUAGE: diff\nCODE:\n```\n([#9768](https://github.com/gatsbyjs/gatsby/issues/9768)) ([b7992fb](https://github.com/gatsbyjs/gatsby/commit/b7992fb))\n```\n\n----------------------------------------\n\nTITLE: Updating Babel Monorepo JavaScript\nDESCRIPTION: This snippet updates the babel monorepo. Babel is a JavaScript compiler that converts ECMAScript 2015+ code into a backwards compatible version of JavaScript that can be run by older JavaScript engines. This update ensures compatibility with newer JavaScript features and provides performance improvements.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-copy-linked-files/CHANGELOG.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nupdate babel monorepo [#27528](https://github.com/gatsbyjs/gatsby/issues/27528) ([539dbb0](https://github.com/gatsbyjs/gatsby/commit/539dbb09166e346a6cee568973d2de3d936e8ef3))\n```\n\n----------------------------------------\n\nTITLE: Navigating to the Gatsby site directory and starting development server\nDESCRIPTION: This set of commands first navigates into the newly created Gatsby project directory 'gatsby-example-site' using the cd command. Then, it starts the Gatsby development server using the gatsby develop command, allowing you to view and work on your site locally.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/e2e-tests/contentful/README.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ncd gatsby-example-site\ngatsby develop\n```\n\n----------------------------------------\n\nTITLE: Bumping Node Min Version in gatsby\nDESCRIPTION: This code snippet refers to updating the minimum required Node.js version to 10.13.0 in the Gatsby project. This change ensures that the project utilizes features and functionalities available in newer Node.js versions, improving performance and security. The update was implemented in commit 83d681a.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-manifest/CHANGELOG.md#_snippet_5\n\n\n\n----------------------------------------\n\nTITLE: Populating Heading IDs in Gatsby Transformer Remark\nDESCRIPTION: This feature adds the ability to populate IDs to headings directly from the markdownAST within the gatsby-transformer-remark plugin. This enables easier linking to specific headings within the generated HTML. It was implemented in response to issue #23546.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-remark/CHANGELOG.md#_snippet_7\n\n\n\n----------------------------------------\n\nTITLE: Setting mediaType in createNode for Markdown\nDESCRIPTION: Shows how to set the `mediaType` property within the `internal` object when using `createNode`. This allows transformer plugins to identify nodes with raw content (e.g., Markdown) for transformation. This example demonstrates setting it for a markdown file.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/creating-a-source-plugin/part-7/index.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ncreateNode({\n  foo: `bar`,\n  id: `some-unique-id`,\n  parent: null,\n  children: [],\n  internal: {\n    type: `TypeName`,\n    // highlight-next-line\n    mediaType: `text/markdown`,\n    contentDigest: `contentDigest`\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Jest Module Name Mapper Configuration (jest.config.js)\nDESCRIPTION: This snippet shows how to configure a module name mapper in Jest to correctly resolve the `@reach/router` alias to `@gatsbyjs/reach-router`. This is needed to resolve the reach-router dependency issues that can occur after upgrading to Gatsby v3, especially in testing environments. It maps imports from `@reach/router` to the vendored version provided by Gatsby.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v2-to-v3.md#_snippet_39\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  moduleNameMapper: {\n    \"^@reach/router(.*)\": \"<rootDir>/node_modules/@gatsbyjs/reach-router$1\",\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing CSV Parsing with noheader Option (JavaScript)\nDESCRIPTION: This snippet showcases how to customize the CSV parsing process by passing the `noheader` option to the gatsby-transformer-csv plugin.  This option configures the parser to treat the first row of the CSV file as data rather than column headers.  It requires the `gatsby-transformer-csv` plugin to be installed.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-csv/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// In your gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-source-filesystem`,\n      options: {\n        name: `data`,\n        path: `${__dirname}/src/data/`,\n      },\n    },\n    {\n      resolve: `gatsby-transformer-csv`,\n      options: {\n        noheader: true,\n      },\n    },\n  ];\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Excerpt Separator in gatsby-config.js (JSON)\nDESCRIPTION: This code snippet demonstrates how to configure the `gatsby-transformer-remark` plugin in `gatsby-config.js` to use a custom excerpt separator.  The `excerpt_separator` option specifies the string that will be used to determine where the excerpt ends in a Markdown file. Any file lacking the separator will fall back to default excerpt pruning.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/using-remark/src/pages/examples/example---custom-separator/index.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"resolve\": `gatsby-transformer-remark`,\n  \"options\": {\n    \"excerpt_separator\": `<!-- end -->`\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing windows-build-tools (PowerShell)\nDESCRIPTION: This command installs the `windows-build-tools` package globally using npm. This package automates the installation of Visual C++ Build Tools 2015 and Python 2.7, which are required for compiling native Node.js modules in Gatsby projects on Windows. The `--vs2015` flag ensures the correct version of the build tools is installed.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/local-development/gatsby-on-windows.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nnpm install --global windows-build-tools --vs2015\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response from GraphQL Query\nDESCRIPTION: This JSON represents the response from the GraphQL query, showing the structure of a `File` node.  It confirms that the file is of type `File`, has a media type of `text/yaml`, and provides a description and owner. This provides the node data to be transformed.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/plugins-and-themes/creating-a-transformer-plugin.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"allFile\": {\n      \"edges\": [\n        {\n          \"node\": {\n            \"internal\": {\n              \"contentDigest\": \"c1644b03f380bc5508456ce91faf0c08\",\n              \"type\": \"File\",\n              \"mediaType\": \"text/yaml\",\n              \"description\": \"File \\\"src/data/example.yml\\\"\",\n              \"owner\": \"gatsby-source-filesystem\"\n            }\n          }\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Regenerating backup.sql for Gatsby WordPress Source\nDESCRIPTION: This command regenerates the `backup.sql` file used in integration tests for the `gatsby-source-wordpress` plugin. It connects to the WordPress database and dumps the database structure and data into the `backup.sql` file, which is used to seed the database for consistent testing environments. The command requires `mysqldump` to be installed and access to the WordPress database.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/integration-tests/gatsby-source-wordpress/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmysqldump --port=3306 --host=127.0.0.1 --user=wordpress --password=gtsb-wp-dckr-user --no-tablespaces --skip-extended-insert wordpress > ./docker/seed/backup.sql\n```\n\n----------------------------------------\n\nTITLE: Creating a New Gatsby Site\nDESCRIPTION: This command uses the Gatsby CLI to create a new Gatsby site named 'gatsby-site' based on the default Gatsby starter. It downloads the starter template from the specified GitHub repository and initializes a new project.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/sourcing-from-gentics-mesh.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ngatsby new gatsby-site https://github.com/gatsbyjs/gatsby-starter-default\n```\n\n----------------------------------------\n\nTITLE: Markdown Image without Alt Text\nDESCRIPTION: Shows the syntax for including images in Markdown without alternative text. This pattern is appropriate for decorative images. The image path is enclosed in parentheses.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/markdown-syntax.md#_snippet_5\n\nLANGUAGE: Markdown\nCODE:\n```\n![](path-to-image)\n```\n\n----------------------------------------\n\nTITLE: Correcting links in package changelogs\nDESCRIPTION: This commit fixes incorrect links within the package changelogs, improving navigation and access to relevant information.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-graphviz/CHANGELOG.md#_snippet_16\n\nLANGUAGE: Other\nCODE:\n```\n- correct links in package changelogs ([#15630](https://github.com/gatsbyjs/gatsby/issues/15630)) ([d07b9dd](https://github.com/gatsbyjs/gatsby/commit/d07b9dd))\n```\n\n----------------------------------------\n\nTITLE: Lowering required React version - gatsby-cli JavaScript\nDESCRIPTION: This snippet lowers the required React version for gatsby-cli, increasing compatibility and reducing potential dependency conflicts for users. This change broadens the range of React versions that can be used with the Gatsby CLI.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-cli/CHANGELOG.md#_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nlower required react version ([#21522](https://github.com/gatsbyjs/gatsby/issues/21522)) ([41c620b](https://github.com/gatsbyjs/gatsby/commit/41c620b))\n```\n\n----------------------------------------\n\nTITLE: Run interactive upgrade command\nDESCRIPTION: This command executes the custom script added to package.json, which runs npm-check in update mode, providing an interactive interface to select and update dependencies.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/upgrade-gatsby-and-dependencies.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nnpm run upgrade-interactive\n```\n\n----------------------------------------\n\nTITLE: Fixing Axios Dependency in Gatsby Source Wikipedia\nDESCRIPTION: This commit addresses a bug in the gatsby-source-wikipedia package where axios was not included as a dependency. The fix involves adding axios as a dependency to ensure the package functions correctly.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-wikipedia/CHANGELOG.md#_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\n([#9088](https://github.com/gatsbyjs/gatsby/issues/9088)) ([b055dde](https://github.com/gatsbyjs/gatsby/commit/b055dde))\n```\n\n----------------------------------------\n\nTITLE: Applying patches for v5 in gatsby-source-faker\nDESCRIPTION: This snippet applies patches for version 5 of the `gatsby-source-faker` package. It fixes any known issues and improves the overall stability and performance of the plugin for Gatsby v5.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-faker/CHANGELOG.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\napply patches for v5 [#36796](https://github.com/gatsbyjs/gatsby/issues/36796) ([25f79b6](https://github.com/gatsbyjs/gatsby/commit/25f79b6c3719fdf09584ade620a05c66ba2a697c))\n```\n\n----------------------------------------\n\nTITLE: Update Babel Monorepo\nDESCRIPTION: This commit updates the babel monorepo to the latest version. Babel is a JavaScript compiler that transforms edge JavaScript into plain old ES5 JavaScript that can run in any browser.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-typography/CHANGELOG.md#_snippet_4\n\nLANGUAGE: None\nCODE:\n```\nupdate babel monorepo [#27528](https://github.com/gatsbyjs/gatsby/issues/27528) ([539dbb0](https://github.com/gatsbyjs/gatsby/commit/539dbb09166e346a6cee568973d2de3d936e8ef3))\n```\n\n----------------------------------------\n\nTITLE: Checking Yarn Version\nDESCRIPTION: This command checks the installed version of the Yarn package manager. It's used to verify that the developer has a compatible version (^1) before proceeding with the Gatsby development setup. Gatsby monorepo doesn't yet support later versions of Yarn.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/contributing/code-contributions.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn --version\n```\n\n----------------------------------------\n\nTITLE: Gatsby develop output example\nDESCRIPTION: This is an example output from running `gatsby develop`, showing the logging messages from the configured plugin with and without options.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/using-plugin-options/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ gatsby develop\nsuccess open and validate gatsby-configs - 0.034s\nsuccess load plugins - 0.050s\nlogging: \"Hello world\" to the console\nlogging: \"default message\" to the console\nsuccess onPreInit - 0.022s\n```\n\n----------------------------------------\n\nTITLE: Fixing gatsby new command - gatsby-cli JavaScript\nDESCRIPTION: This snippet addresses a breaking change that impacted the `gatsby new` command. Specifically, an import change broke the command. This fix ensures that users can once again create new Gatsby projects using the CLI.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-cli/CHANGELOG.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nFix an import change that broke `gatsby new` ([#22161](https://github.com/gatsbyjs/gatsby/issues/22161)) ([29773a3](https://github.com/gatsbyjs/gatsby/commit/29773a3))\n```\n\n----------------------------------------\n\nTITLE: Installing dependencies and running development server\nDESCRIPTION: This snippet shows the commands to navigate to the project directory, install the necessary npm packages, and start the Gatsby development server.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/functions-basic-form/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd examples/functions-basic-form\nnpm install\nnpm run develop\n```\n\n----------------------------------------\n\nTITLE: Updating Babel Monorepo\nDESCRIPTION: This commit updates the babel monorepo dependency. This update brings the latest features and bug fixes from Babel to the package, ensuring compatibility with the latest JavaScript syntax and features.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-graphql/CHANGELOG.md#_snippet_18\n\nLANGUAGE: Text\nCODE:\n```\nupdate babel monorepo [#32564](https://github.com/gatsbyjs/gatsby/issues/32564) ([a554998](https://github.com/gatsbyjs/gatsby/commit/a554998b4f6765103b650813cf52dbfcc575fecf))\n```\n\n----------------------------------------\n\nTITLE: Using activeClassName and activeStyle with Gatsby Link\nDESCRIPTION: Illustrates how to use the `activeClassName` and `activeStyle` props to style the Link component when the current URL matches the `to` prop. Also demonstrates `partiallyActive` for partial URL matching.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/built-in-components/gatsby-link.md#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\"\nimport { Link } from \"gatsby\"\n\nconst IndexPage = () => (\n  <Link\n    to=\"/about\"\n    {/* highlight-start */}\n    {/* You must define the `active` class in your CSS */}\n    activeClassName=\"active\"\n    {/* highlight-end */}\n  >\n    About\n  </Link>\n  <Link\n    to=\"/company\"\n    {/* highlight-next-line */}\n    activeStyle={{ color: \"blue\" }}\n  >\n    Company\n  </Link>\n  <Link\n    to=\"/blog\"\n    activeStyle={{ color: \"green\" }}\n    {/* highlight-next-line */}\n    partiallyActive={true} // `/blog#hello-world` matches now\n  >\n    Blog\n  </Link>\n)\n```\n\n----------------------------------------\n\nTITLE: YAML Data Example\nDESCRIPTION: Example YAML data structure showing the expected format for the sites.yml file.  It contains a list of sites, each with a URL and a name. The plugin targets nodes sourced from this type of YAML file by default.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-screenshot/README.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n- url: https://reactjs.org/\n  name: React\n- url: https://about.sourcegraph.com/\n  name: Sourcegraph\n- url: https://simply.co.za/\n  name: Simply\n```\n\n----------------------------------------\n\nTITLE: Update MDX Page Import Paths - JavaScript\nDESCRIPTION: Updates the import statements for the Layout and Seo components within the mdx blog post template file to reflect the new directory structure after moving the file to the `src/pages/blog` directory. This ensures that the components are correctly imported for rendering the blog posts.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-6/index.mdx#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as React from 'react'\nimport Layout from '../../components/layout' // highlight-line\nimport Seo from '../../components/seo' // highlight-line\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Fixing Typo in Gatsby Page Utils (JavaScript)\nDESCRIPTION: This code snippet shows the commit hash associated with fixing a minor typo in the gatsby-page-utils package. This indicates attention to detail and code quality within the project.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-page-utils/CHANGELOG.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n9625abd\n```\n\n----------------------------------------\n\nTITLE: Integrating gatsby-plugin-manifest with gatsby-plugin-offline in JavaScript\nDESCRIPTION: This code snippet shows how to configure `gatsby-plugin-manifest` and `gatsby-plugin-offline` to ensure icons are properly cached.  `cache_busting_mode` needs to be set to `none` to prevent issues with workbox. The `globPatterns` option in `gatsby-plugin-offline` must include the icon path to ensure the icons are cached.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-manifest/README.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// gatsby-config.js\n{\n   resolve: 'gatsby-plugin-manifest',\n   options: {\n      icon: 'icon.svg',\n      cache_busting_mode: 'none'\n   }\n},\n{\n   resolve: 'gatsby-plugin-offline',\n   options: {\n      workboxConfig: {\n         globPatterns: ['**/icon-path*']\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Set cafile in yarn configuration\nDESCRIPTION: This command sets the `cafile` configuration option in yarn to the path of your certificate file. This is necessary when using a private package registry that requires a CA certificate.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/local-development/configuring-ca-certificates.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nyarn config set cafile \"path-to-my-cert.pem\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Show Cart Button in JSX\nDESCRIPTION: This code snippet shows how to create a button that will display the shopping cart.  This is required when the automatic popup is disabled.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/adding-a-shopping-cart-with-snipcart.md#_snippet_6\n\nLANGUAGE: JSX\nCODE:\n```\n<button className=\"snipcart-checkout\">View Cart</button>\n```\n\n----------------------------------------\n\nTITLE: Displaying Posts on Index Page in Gatsby with TSX\nDESCRIPTION: This TypeScript React component displays all posts on the index page of a Gatsby site. It fetches the post data using a GraphQL query and renders a list of links to individual post pages, displaying the title and author for each post.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/creating-a-source-plugin/part-2/index.mdx#_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from \"react\"\nimport { Link, graphql, HeadFC, PageProps } from \"gatsby\"\n\nexport default function IndexPage({\n  data: {\n    allPost: { nodes: posts },\n  },\n}: PageProps<Queries.IndexPageQuery>): React.ReactElement {\n  return (\n    <main>\n      <h1>All posts</h1>\n      <section className=\"posts-grid\">\n        {posts.map((post) => (\n          <Link key={post.id} to={post.slug} className=\"posts-card\">\n            <h2>{post.title}</h2>\n            <span>Author: {post.author}</span>\n          </Link>\n        ))}\n      </section>\n    </main>\n  )\n}\n\nexport const Head: HeadFC = () => (\n  <React.Fragment>\n    <title>Example Site</title>\n    <link\n      rel=\"icon\"\n      href=\"data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'><text y='0.9em' font-size='90'>üåà</text></svg>\"\n    />\n  </React.Fragment>\n)\n\nexport const query = graphql`\n  query IndexPage {\n    allPost {\n      nodes {\n        id\n        slug\n        title\n        author\n      }\n    }\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: Creating English 404 Page (JSX)\nDESCRIPTION: This component creates a basic 404 page in English. It imports React and a Layout component. The NotFound function renders a 'Page Not Found' heading and a short description wrapped in the Layout component.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/creating-prefixed-404-pages-for-different-languages.md#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport React from \"react\"\nimport Layout from \"../../components/layout\"\n\nexport default function NotFound() {\n  return (\n    <Layout>\n      <h1>Page Not Found</h1>\n      <p>Oops, we couldn't find this page!</p>\n    </Layout>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Updating DataLayer to CamelCase\nDESCRIPTION: This commit updates the dataLayer to use camelCase. This change aligns the dataLayer naming convention with standard JavaScript practices, improving code readability and maintainability.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-google-tagmanager/CHANGELOG.md#_snippet_22\n\nLANGUAGE: text\nCODE:\n```\n**gatsby-plugin-google-tagmanager:** update dataLayer to be camelCased ([#12920](https://github.com/gatsbyjs/gatsby/issues/12920)) ([057dc9a](https://github.com/gatsbyjs/gatsby/commit/057dc9a))\n```\n\n----------------------------------------\n\nTITLE: Fixing ignore pattern in gatsby-source-wikipedia (JavaScript)\nDESCRIPTION: This code snippet addresses a bug by wrapping the ignore pattern in quotes. It fixes issues related to incorrect ignore patterns.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-wikipedia/CHANGELOG.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nwrap ignore pattern in quotes ([#23176](https://github.com/gatsbyjs/gatsby/issues/23176)) ([7563db6](https://github.com/gatsbyjs/gatsby/commit/7563db6))\n```\n\n----------------------------------------\n\nTITLE: Create Schema Customization with Custom Field Extension\nDESCRIPTION: This code snippet demonstrates how to create a custom field extension named `fullName` that encapsulates the logic for generating a full name. It then uses this extension in the definitions of the `AuthorJson` and `ContributorJson` types.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/graphql-data-layer/schema-customization.md#_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nexports.createSchemaCustomization = ({ actions }) => {\n  const { createFieldExtension, createTypes } = actions\n\n  createFieldExtension({\n    name: \"fullName\",\n    extend(options, prevFieldConfig) {\n      return {\n        resolve(source) {\n          return `${source.firstName} ${source.name}`\n        },\n      }\n    },\n  })\n\n  createTypes(`\n    type AuthorJson implements Node {\n      fullName: String @fullName\n    }\n    type ContributorJson implements Node {\n      fullName: String @fullName\n    }\n  `)\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Environment Variables in a Gatsby Function\nDESCRIPTION: This JavaScript snippet shows how to access environment variables within a Gatsby serverless function. It retrieves the value of the `SAMPLE_VAR` environment variable and uses it within the function logic before sending a JSON response.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/cloud/deploying-functions-on-gatsby-cloud.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst sample = (req, res) => {\n  let key = process.env.SAMPLE_VAR;\n  //run code that uses key\n\n  res.status(200).json({ message: \"Hello, World!\" });\n};\n\nexport default sample;\n```\n\n----------------------------------------\n\nTITLE: Example Usage with Base URL - JSX\nDESCRIPTION: This JSX snippet demonstrates using the ExampleImage component with just a base URL. It shows how the component can handle cases where the dimensions of the source image are not known. The component uses aspectRatio to maintain correct visual proportions and layout is set to \"fullWidth\".\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/plugins-and-themes/adding-gatsby-image-support.md#_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n<ExampleImage\n  image=\"https://example.com/nnnnn/bighero.jpg\"\n  loading=\"eager\"\n  layout=\"fullWidth\"\n  aspectRatio={16 / 9}\n  alt=\"\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Replacing gatsbyjs.org with gatsbyjs.com\nDESCRIPTION: This snippet involves replacing all instances of the domain \"gatsbyjs.org\" with \"gatsbyjs.com\" within the gatsby-plugin-google-gtag package. This is a chore related to updating the project's branding and domain usage.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-google-gtag/CHANGELOG.md#_snippet_10\n\n\n\n----------------------------------------\n\nTITLE: Query Multiple Data Nodes with GraphQL (nodes)\nDESCRIPTION: This query is a variation of the previous one, using the `nodes` structure instead of `edges` and `node`. It requires Gatsby version 2.2.0 or later. The query fetches the total count of plugins and specific information about each plugin.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/graphql-reference.md#_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  allSitePlugin {\n    totalCount\n    nodes {\n      name\n      version\n      packageJson {\n        description\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query for Transformed YAML Data\nDESCRIPTION: This GraphQL query retrieves the transformed YAML data, specifically the `id`, `name`, and `bio` fields from all `ExampleYaml` nodes.  It demonstrates how to query the newly created nodes after the transformation process. The allExampleYaml corresponds to what was defined in the onCreateNode implementation.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/plugins-and-themes/creating-a-transformer-plugin.md#_snippet_8\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  allExampleYaml {\n    edges {\n      node {\n        id\n        name\n        bio\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Cheerio Dependency\nDESCRIPTION: This change updates the cheerio dependency to version ^1.0.0-rc.10. Cheerio is a fast, flexible, and lean implementation of core jQuery designed specifically for the server.  This update addresses potential bugs or introduces new features for HTML parsing within the gatsby-remark-responsive-iframe plugin.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-responsive-iframe/CHANGELOG.md#_snippet_6\n\nLANGUAGE: Text\nCODE:\n```\nupdate dependency cheerio to ^1.0.0-rc.10 for gatsby-remark-responsive-iframe [#32580](https://github.com/gatsbyjs/gatsby/issues/32580) ([f9d8722](https://github.com/gatsbyjs/gatsby/commit/f9d87223518f4310b87013dc567ebb77f6f1df6f))\n```\n\n----------------------------------------\n\nTITLE: Running Gatsby Benchmark with 'gt' Filter - Medium Number of Nodes\nDESCRIPTION: This command runs the Gatsby benchmark with the 'gt' filter and a medium number of nodes (10000). It's the second step in determining the time complexity of the 'gt' filter.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/benchmarks/query-filters-sort/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nNUM_NODES=10000 FILTER=gt yarn bench\n```\n\n----------------------------------------\n\nTITLE: Configuring gatsby-remark-copy-linked-files in gatsby-config.js\nDESCRIPTION: This code snippet demonstrates how to configure the gatsby-remark-copy-linked-files plugin within the gatsby-config.js file. It shows the resolve and options settings, including the ignoreFileExtensions parameter. The ignoreFileExtensions parameter, when set to an empty array, instructs the plugin to copy all linked files, even those with image extensions.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/using-remark-copy-linked-files/src/pages/2017-11-13-gatsby-remark-copy-linked-files/index.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  resolve: `gatsby-transformer-remark`,\n  options: {\n    plugins: [\n      {\n        resolve: `gatsby-remark-responsive-iframe`,\n        options: {\n          wrapperStyle: `margin-bottom: 1.0725rem`,\n        },\n      },\n      'gatsby-remark-prismjs',\n      {\n        resolve: 'gatsby-remark-copy-linked-files',\n        options: {\n          // `ignoreFileExtensions` defaults to [`png`, `jpg`, `jpeg`, `bmp`, `tiff`]\n          // as we assume you'll use gatsby-remark-images to handle\n          // images in markdown as it automatically creates responsive\n          // versions of images.\n          //\n          // If you'd like to not use gatsby-remark-images and just copy your\n          // original images to the public directory, set\n          // `ignoreFileExtensions` to an empty array.\n          ignoreFileExtensions: [],\n        },\n      },\n      'gatsby-remark-smartypants',\n    ],\n  },\n},\n```\n\n----------------------------------------\n\nTITLE: Configure Gatsby Theme (JavaScript)\nDESCRIPTION: This JavaScript snippet configures the gatsby-theme-minimal plugin within the gatsby-config.js file. The resolve property specifies the plugin's package name, and the options object allows for customizing the theme's behavior (though it is empty in this basic example). This configuration tells Gatsby to use the installed theme.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/starters/gatsby-starter-theme-workspace/gatsby-theme-minimal/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  plugins: [\n    {\n      resolve: \"gatsby-theme-minimal\",\n      options: {},\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Use theme options in gatsby-node.js (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use the theme options in `gatsby-node.js`. It retrieves the `contentPath` and `basePath` options and uses them to configure the theme. Default values are set if options are not provided.  Dependencies: None.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/building-a-theme.md#_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\n// highlight-start\nexports.onPreBootstrap = ({ reporter }, options) => {\n  const contentPath = options.contentPath || `${__dirname}/data/`\n  // highlight-end\n\n  // {...}\n}\n\nexports.createSchemaCustomization = ({ actions }) => {\n  // {...}\n}\n\n// highlight-start\nexports.createResolvers = ({ createResolvers }, options) => {\n  const basePath = options.basePath || \"/\"\n  // highlight-end\n\n  // {...}\n}\n\n// highlight-start\nexports.createPages = async ({ actions, graphql, reporter }, options) => {\n  const basePath = options.basePath || \"/\"\n  // highlight-end\n\n  // {...}\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Changelog Files with Gatsby\nDESCRIPTION: This commit formats the changelog files within the gatsby-transformer-remark package. It ensures consistency and readability of the changelog entries, enhancing the overall maintainability of the project.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-remark/CHANGELOG.md#_snippet_0\n\nLANGUAGE: None\nCODE:\n```\nFormat changelog files ([088f23b](https://github.com/gatsbyjs/gatsby/commit/088f23b084b67f746a383e06e9216cef83270317))\n```\n\n----------------------------------------\n\nTITLE: Starting Gatsby in Development Mode\nDESCRIPTION: This command navigates to the newly created Gatsby project directory and starts the Gatsby development server using `npm run develop`. This allows developers to preview and test their site locally with hot-reloading capabilities.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ncd my-gatsby-site/\nnpm run develop\n```\n\n----------------------------------------\n\nTITLE: Update npm packages\nDESCRIPTION: This command updates all packages in the project to the latest 'wanted' version, according to the version ranges specified in package.json (e.g., using ^ or ~).\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/upgrade-gatsby-and-dependencies.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpm update\n```\n\n----------------------------------------\n\nTITLE: Full Google Analytics Script with Custom Dimension - JavaScript\nDESCRIPTION: This is the complete Google Analytics tracking script, including the initialization, pageview tracking, and custom dimension setup. The script asynchronously loads the Google Analytics library and sends a pageview event with the branch name as a custom dimension.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/testing/ab-testing-with-google-analytics-and-netlify.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n<script>\n(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\n(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\nm=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\n})(window,document,'script','https://www.google-analytics.com/analytics.js','ga');\n\nga('create', 'UA-XXXXXXXXX-X', 'auto');\nga('send', 'pageview', {\n   'dimension2': '{{ BRANCH }}'\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Running Gatsby Development Server\nDESCRIPTION: This code snippet shows the commands used to install dependencies and start the Gatsby development server. It allows users to test Gatsby functions locally before deploying.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/functions-google-sheets/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncd examples/functions-google-sheets\nnpm install\nnpm run develop\n```\n\n----------------------------------------\n\nTITLE: Adding Slugify Option in Gatsby\nDESCRIPTION: This commit introduces a new slugify option to the gatsby-plugin-page-creator. This option allows developers to customize the way URLs are generated for pages, providing greater control over SEO and user experience.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-page-creator/CHANGELOG.md#_snippet_24\n\nLANGUAGE: TEXT\nCODE:\n```\n721f42a\n```\n\n----------------------------------------\n\nTITLE: Updating minor packages in gatsby-plugin-lodash\nDESCRIPTION: The change updates minor version dependencies in the packages, excluding react, babel, and eslint, aiming to bring in enhancements and bug fixes from newer versions. The gatsby-plugin-lodash is also updated.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-lodash/CHANGELOG.md#_snippet_2\n\nLANGUAGE: Other\nCODE:\n```\nupdate minor updates in packages except react, babel and eslint ([#17254](https://github.com/gatsbyjs/gatsby/issues/17254)) ([252d867](https://github.com/gatsbyjs/gatsby/commit/252d867))\n```\n\n----------------------------------------\n\nTITLE: Enabling Lazy Images in gatsby-config.js (JavaScript)\nDESCRIPTION: This snippet shows how to enable lazy image loading during development by adding the `LAZY_IMAGES` flag to the `gatsby-config.js` file. Lazy image loading speeds up the development server by only processing images when they are requested from the browser.  Requires `gatsby-plugin-sharp@^2.10.0`.\n\nDependencies: gatsby-plugin-sharp@^2.10.0\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/v2.28/index.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// In your gatsby-config.js\nmodule.exports = {\n  // your existing config\n  flags: {\n    LAZY_IMAGES: true,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Handling require with expression in Gatsby\nDESCRIPTION: This snippet demonstrates how to handle `require with expression` or `require.context` when importing file assets in Gatsby v3. The `.default` property must be appended to the require statement to make it work with ES Modules.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v2-to-v3.md#_snippet_20\n\nLANGUAGE: diff\nCODE:\n```\nimport React from \"react\"\nimport { Helmet } from \"react-helmet\";\n\nconst Layout = ({ children, font }) => (\n  <div>\n    <Helmet>\n-      <link rel=\"preload\" href={require('../assets/fonts/' + font + '.woff2')} as=\"fonts/woff2\" crossOrigin=\"anonymous\" type=\"font/woff2\" />\n+      <link rel=\"preload\" href={require('../assets/fonts/' + font + '.woff2').default} as=\"fonts/woff2\" crossOrigin=\"anonymous\" type=\"font/woff2\" /\n    </Helmet>\n    {children}\n  </div>\n)\n\nexport default Layout\n```\n\n----------------------------------------\n\nTITLE: Importing file assets as ES Modules in Gatsby\nDESCRIPTION: This snippet demonstrates how to import file assets (fonts, PDFs, etc.) as ES Modules in Gatsby v3. Instead of using `require`, the assets are imported using the `import` statement, ensuring compatibility with ES Module handling.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v2-to-v3.md#_snippet_19\n\nLANGUAGE: diff\nCODE:\n```\nimport React from \"react\"\nimport { Helmet } from \"react-helmet\";\n+ import myFont from '../assets/fonts/myfont.woff2'\n\nconst Layout = ({ children }) => (\n  <div>\n    <Helmet>\n-      <link rel=\"preload\" href={require('../assets/fonts/myfont.woff2')} as=\"fonts/woff2\" crossOrigin=\"anonymous\" type=\"font/woff2\" />\n+      <link rel=\"preload\" href={myFont} as=\"fonts/woff2\" crossOrigin=\"anonymous\" type=\"font/woff2\" />\n    </Helmet>\n    {children}\n  </div>\n)\n\nexport default Layout\n```\n\n----------------------------------------\n\nTITLE: Testing Plugin Options Schema (After) - __tests__/gatsby-node.js\nDESCRIPTION: Tests the plugin options schema, but now expects warnings instead of errors for unknown options, reflecting changes in `gatsby-plugin-utils`.  `testPluginOptionsSchema` now returns `warnings`, `isValid` and `hasWarnings`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/v4.6/index.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { testPluginOptionsSchema } from \"gatsby-plugin-utils\"\nimport { pluginOptionsSchema } from \"../gatsby-node\"\n\nit(`should not accept any options`, async () => {\n  const expectedWarnings = [`\"optionA\" is not allowed`]\n\n  const { warnings, isValid, hasWarnings } = await testPluginOptionsSchema(\n    pluginOptionsSchema,\n    {\n      optionA: `This options shouldn't exist`,\n    }\n  )\n  expect(isValid).toBe(true)\n  expect(hasWarnings).toBe(true)\n  expect(warnings).toEqual(expectedWarnings)\n})\n```\n\n----------------------------------------\n\nTITLE: Updating Packages (excluding react, babel, eslint)\nDESCRIPTION: This snippet refers to updating minor versions of packages excluding `react`, `babel`, and `eslint`. This is a common maintenance task to bring in bug fixes and enhancements from the dependencies, while explicitly avoiding upgrades to major tools to prevent compatibility issues or breaking changes.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-pdf/CHANGELOG.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n([#17254](https://github.com/gatsbyjs/gatsby/issues/17254)) ([252d867](https://github.com/gatsbyjs/gatsby/commit/252d867))\n```\n\n----------------------------------------\n\nTITLE: Chore: Babel Monorepo Update (gatsby-plugin-less)\nDESCRIPTION: This code snippet represents a chore update related to updating the babel monorepo within the gatsby-plugin-less package. The update is associated with issue number 37386 on the Gatsby repository. The chore is performed to keep dependencies up-to-date and improve the overall build process and maintainability of the plugin.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-less/CHANGELOG.md#_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\nupdate babel monorepo [#37386](https://github.com/gatsbyjs/gatsby/issues/37386) ([b941876](https://github.com/gatsbyjs/gatsby/commit/b94187633d94d0f0071b38ffe93380dd802ec70f))\n```\n\n----------------------------------------\n\nTITLE: Using a GraphQL Fragment in a Component\nDESCRIPTION: This JSX code demonstrates how to define a GraphQL fragment within a React component (IndexPost.jsx) using Gatsby's `graphql` tag. The fragment is named `SiteInformation` and specifies the fields to retrieve from the `Site` type's `siteMetadata` field.  This allows for reusable data fetching logic within the component.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/graphql-data-layer/using-graphql-fragments.md#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\nimport React from \"react\"\nimport { graphql } from \"gatsby\"\n\nexport default function IndexPost( props ) {\n  return (...)\n}\n\nexport const query = graphql`\n  fragment SiteInformation on Site {\n    siteMetadata {\n      title\n      siteDescription\n    }\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: Installing Remark Plugin Canary Versions\nDESCRIPTION: This snippet demonstrates how to install pre-release (canary) versions of Gatsby remark plugins for testing purposes. These specific versions are designed to be compatible with Remark v13.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/v3.2/index.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngatsby-remark-autolink-headers@alpha-remark13\ngatsby-remark-code-repls@alpha-remark13\ngatsby-remark-copy-linked-files@alpha-remark13\ngatsby-remark-custom-blocks@alpha-remark13\ngatsby-remark-embed-snippet@alpha-remark13\ngatsby-remark-graphviz@alpha-remark13\ngatsby-remark-images-contentful@alpha-remark13\ngatsby-remark-images@alpha-remark13\ngatsby-remark-katex@alpha-remark13\ngatsby-remark-prismjs@alpha-remark13\ngatsby-remark-responsive-iframe@alpha-remark13\ngatsby-remark-smartypants@alpha-remark13\ngatsby-transformer-remark@alpha-remark13\n```\n\n----------------------------------------\n\nTITLE: Implementing shouldOnCreateNode in Gatsby Plugins\nDESCRIPTION: This code snippet implements the `shouldOnCreateNode` function within the gatsby-transformer-screenshot plugin. This function is used to determine whether a node should be processed based on its type and other criteria, improving performance by avoiding unnecessary processing of irrelevant nodes. It enhances the efficiency of Gatsby's node creation process.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-screenshot/CHANGELOG.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ndf914d94a7c47c6082b6f165eb44dc6e15e12c7d\n```\n\n----------------------------------------\n\nTITLE: Manifest theme color fix - JavaScript\nDESCRIPTION: This snippet describes a feature in gatsby-plugin-manifest that will no longer output the `theme-color` meta tag if it's not defined. This prevents the rendering of potentially empty or misleading theme color information. The issue number is 10069, and the commit hash is 7802470.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-faker/CHANGELOG.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n**gatsby-plugin-manifest:** don't output `theme-color` meta tag if it's not defined ([#10069](https://github.com/gatsbyjs/gatsby/issues/10069)) ([7802470](https://github.com/gatsbyjs/gatsby/commit/7802470))\n```\n\n----------------------------------------\n\nTITLE: Displaying SQIP Previews using Gatsby Image\nDESCRIPTION: This code snippet shows how to use Gatsby Image component and replace the default base64 value with the SQIP data URI. This allows leveraging Gatsby Image's features like fade-in effect and lazy loading.  Requires installation of the gatsby-image plugin.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-sqip/README.md#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nconst Img = require(`gatsby-image`)\n\n<Img\n  fixed={{\n    ...image.fixed,\n    base64: image.sqip.dataURI\n  }}\n/>\n\n// or\n\n<Img\n  fluid={{\n    ...image.fluid,\n    base64: image.sqip.dataURI\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining a Splat Route in Gatsby\nDESCRIPTION: This code defines a splat route that captures all segments after `/image/`. The `params` object contains a key `*` with the value of the captured segments.  This is useful for handling dynamic URLs without needing to define every possible route at build time.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/routing/file-system-route-api.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default function ImagePage({ params }) {\n  const param = params[`*`]\n\n  // When visiting a route like `image/hello/world`,\n  // the value of `param` is `hello/world`.\n}\n```\n\n----------------------------------------\n\nTITLE: Using onPostBuild API for CDN Deployment\nDESCRIPTION: This JavaScript code demonstrates the usage of the `onPostBuild` API in `gatsby-node.js`. This API hook allows you to execute custom logic after the Gatsby build process is complete. The example shows how to deploy the contents of the `public` folder to a CDN, such as uploading it to an S3 bucket.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/previews-deploys-hosting/asset-prefix.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst assetsDirectory = `public`\n\nexports.onPostBuild = async function onPostBuild() {\n  // do something with public\n  // e.g. upload to S3\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Page Template React JS\nDESCRIPTION: This JavaScript snippet defines a basic React component that serves as a page template. It's a placeholder that returns a simple `<h1>` element with the text 'My Template...'. This template will be used to initially verify that pages are being created correctly before adding dynamic data.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-wordpress/docs/tutorials/querying-data.md#_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nimport React from \"react\"\n\nconst WpPost = () => {\n  return <h1>My Template...</h1>\n}\n\nexport default WpPost\n```\n\n----------------------------------------\n\nTITLE: Extending Shadowed Bio Component with Card (JSX)\nDESCRIPTION: This snippet showcases how to extend a shadowed component (Bio) by importing it and wrapping it with a custom Card component. This allows customization without needing to reimplement the entire component.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/plugins-and-themes/shadowing.md#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\"\nimport { Avatar, MediaObject, Icon } from \"gatsby-theme-blog\"\nimport Card from \"../components/card\"\n\nexport default function Bio({ name, bio, avatar, twitterUrl, githubUrl }) {\n  return (\n    <Card>\n      <MediaObject>\n        <Avatar {...avatar} />\n        <div>\n          <h3>{name}</h3>\n          <p>{bio}</p>\n          <a href={twitterUrl}>\n            <Icon name=\"twitter\" />\n          </a>\n          <a href={githubUrl}>\n            <Icon name=\"github\" />\n          </a>\n        </div>\n      </MediaObject>\n    </Card>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Pages in Gatsby\nDESCRIPTION: This JavaScript code snippet demonstrates how to programmatically create pages in Gatsby using the `createPages` API. It fetches data using GraphQL and then iterates through the results to create pages for each blog post.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/v3.14/index.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst path = require(`path`)\n\nexports.createPages = async ({ graphql, actions }) => {\n  const { createPage } = actions\n\n  const result = await graphql(`\n    {\n      allContentfulBlogPosts {\n        nodes {\n          id\n          slug\n        }\n      }\n    }\n  `)\n  const templatePath = path.resolve(`PATH/TO/TEMPLATE.js`)\n\n  result.data.allContentfulBlogPosts.nodes.forEach(node => {\n    createPage({\n      path: NODE_SLUG,\n      component: templatePath,\n      context: {\n        slug: NODE_SLUG,\n      },\n    })\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Cancelling node updates based on language in Gatsby\nDESCRIPTION: This code snippet demonstrates how to use `beforeChangeNode` to cancel node create, update, or delete operations based on a language filter. It checks if the language of the node matches the `BUILD_LANGUAGE` environment variable. If not, it cancels the update by returning `cancelUpdate: true`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-wordpress/docs/tutorials/transforming-data.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst beforeChangeNodePage = ({ remoteNode, actionType }) => {\n  if (\n    [`CREATE`, `CREATE_ALL`, `UPDATE`].includes(actionType) &&\n    remoteNode.language !== process.env.BUILD_LANGUAGE\n  ) {\n    return {\n      cancelUpdate: true,\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Yarn Resolutions for Gatsby v3 Migration\nDESCRIPTION: This snippet defines yarn resolutions within the package.json file to force specific versions of graphql, graphql-compose and webpack. This is a workaround for dependency issues that may arise when migrating to Gatsby v3, particularly when dealing with community plugins that have not yet been updated.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v2-to-v3.md#_snippet_6\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"resolutions\": {\n    \"graphql\": \"^15.4.0\",\n    \"graphql-compose\": \"^7.25.0\",\n    \"webpack\": \"^5.24.2\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing babel-preset-gatsby\nDESCRIPTION: This command installs the `babel-preset-gatsby` package as a development dependency. This preset is used to configure Babel for Gatsby projects.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/custom-configuration/babel.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --save-dev babel-preset-gatsby\n```\n\n----------------------------------------\n\nTITLE: Use safe stringification for Rich Text fields\nDESCRIPTION: This code snippet implements safe stringification for Rich Text fields. This ensures that complex Rich Text data from Contentful is properly converted to a string format suitable for Gatsby's data layer, preventing errors during the stringification process.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-contentful/CHANGELOG.md#_snippet_30\n\nLANGUAGE: diff\nCODE:\n```\n([#10228](https://github.com/gatsbyjs/gatsby/issues/10228)) ([2d2ac7c](https://github.com/gatsbyjs/gatsby/commit/2d2ac7c))\n```\n\n----------------------------------------\n\nTITLE: Running development dependency script\nDESCRIPTION: This command executes the `develop:deps` script, which starts watching the `api` and `plugin` directories for changes. Any modification triggers a restart of the GraphQL server or recompilation of TypeScript files.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/creating-a-source-plugin/part-1/index.mdx#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nyarn develop:deps\n```\n\n----------------------------------------\n\nTITLE: Adding Drupal Fastbuilds to Gatsby Source Drupal\nDESCRIPTION: This feature introduces Drupal Fastbuilds to the gatsby-source-drupal plugin, enhancing build performance by leveraging incremental builds and content updates.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-drupal/CHANGELOG.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Bumping Babel Minor Version\nDESCRIPTION: This snippet describes the chore of bumping the minor version of Babel. This involves updating Babel to the next minor version, potentially introducing new features or improvements while maintaining backward compatibility.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-excel/CHANGELOG.md#_snippet_18\n\nLANGUAGE: None\nCODE:\n```\nbump babel minor [#31857](https://github.com/gatsbyjs/gatsby/issues/31857) ([7d42e8d](https://github.com/gatsbyjs/gatsby/commit/7d42e8d866e46e9c39838d812d080d06433f7060))\n```\n\n----------------------------------------\n\nTITLE: Creating a basic Gatsby adapter (JavaScript)\nDESCRIPTION: This snippet demonstrates a minimal Gatsby adapter implementation. It defines a function that returns an object with a name and an adapt function. The adapt function receives manifests, a path prefix, trailing slash setting and a reporter and performs the adaptation logic, in this case, logging a message.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/previews-deploys-hosting/creating-an-adapter.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst createAdapterFoo = adapterOptions => {\n  return {\n    name: `gatsby-adapter-foo`,\n    // cache hooks...\n    adapt({\n     routesManifest,\n     functionsManifest,\n     pathPrefix,\n     trailingSlash,\n     reporter\n    }) {\n      // Adapt implementation\n      reporter.info('gatsby-adapter-foo is working')\n    },\n  }\n}\n\nmodule.exports = createAdapterFoo\n```\n\n----------------------------------------\n\nTITLE: Updating Packages in Gatsby\nDESCRIPTION: This code snippet represents a commit that updates various packages within the Gatsby ecosystem. This commit ensures that the project benefits from the latest bug fixes, performance improvements, and features available in the updated packages. It promotes stability and enhances the overall functionality of the project.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-screenshot/CHANGELOG.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nba1f73f\n```\n\n----------------------------------------\n\nTITLE: Updating dependencies in gatsby-source-graphql (2)\nDESCRIPTION: This commit updates the minor and patch dependencies for the gatsby-source-graphql package. By keeping dependencies up-to-date, the package benefits from the latest security patches, bug fixes, and performance improvements.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-graphql/CHANGELOG.md#_snippet_16\n\nLANGUAGE: Text\nCODE:\n```\nupdate minor and patch dependencies for gatsby-source-graphql [#32981](https://github.com/gatsbyjs/gatsby/issues/32981) ([aceaba4](https://github.com/gatsbyjs/gatsby/commit/aceaba408ca5a0c23268fe485a83f545ac858ab2))\n```\n\n----------------------------------------\n\nTITLE: Integrating Search Component into Gatsby Layout\nDESCRIPTION: This code snippet shows how to integrate the `Search` component into a Gatsby layout component. It imports the `Search` component and defines the `searchIndices` array. The `Search` component is then rendered within the layout's header, passing the `searchIndices` as a property. The searchIndices define the sources to be searched in Algolia.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/adding-search-with-algolia.md#_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\"\nimport { Link } from \"gatsby\"\n// highlight-start\nimport Search from \"./search\"\n\nconst searchIndices = [{ name: `Pages`, title: `Pages` }]\n// highlight-end\n\nconst Layout = ({ location, title, children }) => {\n  // ...\n\n  return (\n    <div className=\"global-wrapper\" data-is-root-path={isRootPath}>\n      <header className=\"global-header\">\n        // highlight-next-line\n        <Search indices={searchIndices} />\n        {header}\n      </header>\n      <main>{children}</main>\n      <footer>\n        ¬© {new Date().getFullYear()}, Built with\n        {` `}\n        <a href=\"https://www.gatsbyjs.com\">Gatsby</a>\n      </footer>\n    </div>\n  )\n}\n\nexport default Layout\n```\n\n----------------------------------------\n\nTITLE: Building a Package with Lerna\nDESCRIPTION: This command builds a specific package within the monorepo using Lerna.  It's used to create the distribution files for the package after changes have been made.  `<package-name>` should be replaced with the directory containing the code to be built.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/contributing/code-contributions.md#_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nyarn lerna run build --scope=<package-name>\n```\n\n----------------------------------------\n\nTITLE: Updating Babel Monorepo Chore JavaScript\nDESCRIPTION: This commit performs a chore update to the babel monorepo, addressing issue #37386. This likely involves updating dependencies or configurations related to Babel. This ensures the gatsby-plugin-catch-links plugin remains compatible with the latest Babel features and improvements, maintaining a consistent build process.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-catch-links/CHANGELOG.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nupdate babel monorepo [#37386](https://github.com/gatsbyjs/gatsby/issues/37386) ([b941876](https://github.com/gatsbyjs/gatsby/commit/b94187633d94d0f0071b38ffe93380dd802ec70f))\n```\n\n----------------------------------------\n\nTITLE: Updating Babel Monorepo\nDESCRIPTION: This snippet represents a chore update to the babel monorepo within the gatsby-remark-smartypants package. It indicates a task related to updating the babel dependencies.  The referenced issue and commit provide further context.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-smartypants/CHANGELOG.md#_snippet_4\n\nLANGUAGE: None\nCODE:\n```\n- update babel monorepo [#27528](https://github.com/gatsbyjs/gatsby/issues/27528) ([539dbb0](https://github.com/gatsbyjs/gatsby/commit/539dbb09166e346a6cee568973d2de3d936e8ef3))\n```\n\n----------------------------------------\n\nTITLE: Bumping Node.js minimum version\nDESCRIPTION: This commit bumps the minimum required Node.js version for Gatsby to 10.13.0, related to issue #22400. This ensures compatibility with newer features and security updates.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-twitter/CHANGELOG.md#_snippet_21\n\nLANGUAGE: Text\nCODE:\n```\n- **gatsby:** bump node min version to 10.13.0 ([#22400](https://github.com/gatsbyjs/gatsby/issues/22400)) ([83d681a](https://github.com/gatsbyjs/gatsby/commit/83d681a))\n```\n\n----------------------------------------\n\nTITLE: Add createSchemaCustomization export to gatsby-node.ts TypeScript\nDESCRIPTION: This snippet shows how to export the `createSchemaCustomization` function from `create-schema-customization.ts` and include it in the `gatsby-node.ts` file. This ensures that the function is executed when Gatsby builds the GraphQL schema.  It also exports other functions related to plugin initialization and data sourcing.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/creating-a-source-plugin/part-3/index.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type { IPluginOptions } from \"./types\"\n\nexport { onPluginInit } from \"./on-plugin-init\"\nexport { sourceNodes } from \"./source-nodes\"\n// highlight-next-line\nexport { createSchemaCustomization } from \"./create-schema-customization\"\n```\n\n----------------------------------------\n\nTITLE: Exporting frontmatter object in a JavaScript file (Default Export)\nDESCRIPTION: This code snippet demonstrates how to export a frontmatter object from a JavaScript file. The frontmatter object contains metadata for the page, such as title, written date, layout type, path, category, and description. This uses a default export.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-javascript-frontmatter/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from \"react\"\n\nexports.frontmatter = {\n  title: \"Choropleth on d3v4\",\n  written: \"2017-05-04\",\n  layoutType: \"post\",\n  path: \"choropleth-on-d3v4\",\n  category: \"data science\",\n  description: \"Things about the choropleth.\",\n}\n\nexport default MyComponent\n```\n\n----------------------------------------\n\nTITLE: Attempting RCE in Frontmatter - JavaScript\nDESCRIPTION: This JavaScript snippet attempts to write a file to the Cypress fixtures directory, which should not execute due to Gatsby's security measures. It creates a file containing a stack trace and logs a trace to the console. This is to verify that JavaScript execution within frontmatter is disabled.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/e2e-tests/mdx/src/posts/frontmatter-engine/javascript-frontmatter.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n(() => {\nrequire(`fs`).writeFileSync(`${process.cwd()}/cypress/fixtures/file-to-attempt-rce-on.txt`, (new Error('Helpful stack trace if this does execute. It should not execute.')).stack)\nconsole.trace()\nreturn {\ntitle: `I should not be parsed`\n}\n})()\n```\n\n----------------------------------------\n\nTITLE: Creating a Slice using createSlice API in Gatsby\nDESCRIPTION: This code snippet demonstrates how to create a slice in Gatsby using the `createSlice` API. It defines a slice with a specific ID and associates it with a component. This slice can then be used within Gatsby pages to render reusable UI elements.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/v4.22/index.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nactions.createSlice({\n  id: `footer`,\n  component: require.resolve(`./src/components/footer.js`),\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a New Gatsby Site\nDESCRIPTION: This command uses the Gatsby CLI to create a new Gatsby site named 'my-hello-world-starter' based on the 'gatsby-starter-hello-world' starter template. It downloads the starter template from the specified GitHub repository and sets up a new project directory with the necessary files and configurations.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/starters/hello-world/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngatsby new my-hello-world-starter https://github.com/gatsbyjs/gatsby-starter-hello-world\n```\n\n----------------------------------------\n\nTITLE: Querying Interface with Inline Fragments (GraphQL)\nDESCRIPTION: This GraphQL query retrieves data from the `allTeamMember` query. It uses inline fragments (`... on AuthorJson`, `... on ContributorJson`) to select fields specific to each implementing type.  The `__typename` field is included to identify the type of each node.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/graphql-data-layer/schema-customization.md#_snippet_43\n\nLANGUAGE: GraphQL\nCODE:\n```\nexport const query = graphql`\n  {\n    allTeamMember {\n      nodes {\n        name\n        firstName\n        email\n        __typename\n        ... on AuthorJson {\n          joinedAt\n        }\n        ... on ContributorJson {\n          receivedSwag\n        }\n        ... on Node {\n          parent {\n            id\n          }\n        }\n      }\n    }\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: Defining main and files in package.json (JSON)\nDESCRIPTION: This snippet shows how to define the main entry point and files to include for publishing in the package.json. The main entry point points to the compiled JavaScript file in the dist folder, and the files array specifies the files to be included in the published package.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/previews-deploys-hosting/creating-an-adapter.md#_snippet_10\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"main\": \"./dist/index.js\",\n  \"files\": [\n    \"./dist/*\"\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL query before codemod (GraphQL)\nDESCRIPTION: Example of a GraphQL query using the old syntax for sorting, which uses an enum for the field. This syntax needs to be updated for Gatsby 5 compatibility.  The codemod automates this transformation.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v4-to-v5.md#_snippet_9\n\nLANGUAGE: GraphQL\nCODE:\n```\n{\n  allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n    nodes {\n      ...fields\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Changelog Files in gatsby-source-faker\nDESCRIPTION: This snippet formats the changelog files for the `gatsby-source-faker` package. It applies consistent formatting to the changelog files, improving readability and maintainability of the project history.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-faker/CHANGELOG.md#_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\nFormat changelog files ([088f23b](https://github.com/gatsbyjs/gatsby/commit/088f23b084b67f746a383e06e9216cef83270317))\n```\n\n----------------------------------------\n\nTITLE: Depending upon @hapi/joi in gatsby-cli JavaScript\nDESCRIPTION: This snippet updates the gatsby-cli dependency to use @hapi/joi. This change ensures that gatsby-cli uses the latest version of Joi, which may include bug fixes, performance improvements, or new features. By depending on @hapi/joi, gatsby-cli can leverage the latest validation capabilities.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-cli/CHANGELOG.md#_snippet_18\n\nLANGUAGE: JavaScript\nCODE:\n```\n59a021d\n```\n\n----------------------------------------\n\nTITLE: Example GraphQL query result for userToml\nDESCRIPTION: This JSON object represents the result of the GraphQL query for userToml data. It shows how the data from the TOML file is structured and returned by Gatsby's GraphQL API.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-toml/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"data\": {\n    \"userToml\": {\n      \"userName\": \"Random User\",\n      \"userAvatar\": \"https://api.adorable.io/avatars/150/test.png\",\n      \"userDescription\": \"Lorem...\",\n      \"userLink\": {\n        \"label\": \"Website\",\n        \"url\": \"//mywebsite.example.local\",\n        \"icon\": \"fa fa-link\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Stopping activityTimer - TypeScript\nDESCRIPTION: Calls the `end()` method on the `activityTimer` to stop the timer once node creation is complete. This ensures that the timer accurately reflects the duration of the entire sourcing and node creation process.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/creating-a-source-plugin/part-4/index.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// Imports\n\nexport const sourceNodes: GatsbyNode[`sourceNodes`] = async (gatsbyApi) => {\n  // Rest of sourceNodes\n\n  const { posts = [], authors = [] } = data\n\n  sourcingTimer.setStatus(\n    `Processing ${posts.length} posts and ${authors.length} authors`\n  )\n\n  for (const post of posts) {\n    nodeBuilder({ gatsbyApi, input: { type: NODE_TYPES.Post, data: post } })\n  }\n\n  for (const author of authors) {\n    nodeBuilder({ gatsbyApi, input: { type: NODE_TYPES.Author, data: author } })\n  }\n\n  // highlight-next-line\n  sourcingTimer.end()\n}\n\n// Rest of file\n```\n\n----------------------------------------\n\nTITLE: Importing ResponsiveLine from Nivo\nDESCRIPTION: This line imports the `ResponsiveLine` component from the `@nivo/line` library. This component is used to render the interactive line chart.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/using-mdx/src/pages/chart-info.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ResponsiveLine } from \"@nivo/line\"\n```\n\n----------------------------------------\n\nTITLE: Gatsby Browser Configuration with TypeScript\nDESCRIPTION: Demonstrates how to use TypeScript with the `gatsby-browser.tsx` file.  It imports React and the `GatsbyBrowser` type from the `gatsby` package. The `wrapPageElement` function, typed as `GatsbyBrowser[\"wrapPageElement\"]`, wraps each page element in a simple div with a heading.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/v4.8/index.md#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from \"react\"\nimport { GatsbyBrowser } from \"gatsby\"\n\nexport const wrapPageElement: GatsbyBrowser[\"wrapPageElement\"] = ({ element }) => {\n  return (\n    <div>\n      <h1>Hello World</h1>\n      {element}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing packages links in Gatsby Markdown\nDESCRIPTION: This commit addresses issue #28816 by updating all occurrences of `/packages` links to `/plugins`. This change ensures that links to Gatsby plugins are correctly pointing to the appropriate resources in the Gatsby documentation.  The update was necessary due to a change in the organization of the Gatsby documentation.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-graphviz/CHANGELOG.md#_snippet_7\n\nLANGUAGE: Text\nCODE:\n```\nFix all `/packages` links to `/plugins` Fix [#28816](https://github.com/gatsbyjs/gatsby/issues/28816) ([200e307](https://github.com/gatsbyjs/gatsby/commit/200e30748102a478267a67700238304a2a56068b))\n```\n\n----------------------------------------\n\nTITLE: Adding gatsby-plugin-postcss to gatsby-config.js\nDESCRIPTION: This code snippet demonstrates how to include `gatsby-plugin-postcss` in your `gatsby-config.js` file to enable PostCSS support in your Gatsby project.  This is the basic setup required to start using PostCSS in your Gatsby project. There are no external dependencies beyond the plugin itself. Stylesheets written using PostCSS (.css files) can then be imported as normal.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-postcss/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nplugins: [`gatsby-plugin-postcss`]\n```\n\n----------------------------------------\n\nTITLE: Create URL Builder Function (gatsby-plugin-image)\nDESCRIPTION: This JavaScript function builds an image URL based on the provided base URL, width, height, format, and options. It's similar to the `generateImageSource` function but returns a URL string directly. This function is used when creating a custom image component to generate image URLs at runtime.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/plugins-and-themes/adding-gatsby-image-support.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nfunction urlBuilder({ baseUrl, width, height, format, options }) {\n  return `https://myexampleimagehost.com/${baseURL}?w=${width}&h=${height}&fmt=${format}&q=${options.quality}`\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Resolver to Frontmatter Type in gatsby-node.js\nDESCRIPTION: This code snippet demonstrates how to add a custom resolver to the `Frontmatter` type in `gatsby-node.js`. The resolver fetches an `AuthorJson` node by ID using the `context.nodeModel.getNodeById` method and returns it. This allows linking frontmatter data to author data.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/graphql-data-layer/schema-customization.md#_snippet_35\n\nLANGUAGE: js\nCODE:\n```\nexports.createResolvers = ({ createResolvers }) => {\n  const resolvers = {\n    Frontmatter: {\n      author: {\n        type: \"AuthorJson\",\n        resolve(source, args, context, info) {\n          return context.nodeModel.getNodeById({\n            id: source.author,\n            type: \"AuthorJson\",\n          })\n        },\n      },\n    },\n  }\n  createResolvers(resolvers)\n}\n```\n\n----------------------------------------\n\nTITLE: Create schema customization function TypeScript\nDESCRIPTION: This code snippet defines a `createSchemaCustomization` function that can be exported and used with Gatsby. It imports the `GatsbyNode` type from \"gatsby\" and uses the `actions` object to access the `createTypes` function. This provides a basic setup for customizing the GraphQL schema.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/creating-a-source-plugin/part-3/index.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport type { GatsbyNode } from \"gatsby\"\n\nexport const createSchemaCustomization: GatsbyNode[`createSchemaCustomization`] =\n  ({ actions }) => {\n    const { createTypes } = actions\n  }\n```\n\n----------------------------------------\n\nTITLE: Bug Fix: Babel Monorepo Update (gatsby-plugin-less)\nDESCRIPTION: This code snippet documents a bug fix related to updating the babel monorepo within the gatsby-plugin-less package. The fix addresses an issue identified by the issue number 37568 on the Gatsby repository. This update is important for maintaining compatibility and addressing potential vulnerabilities within the plugin.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-less/CHANGELOG.md#_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\nupdate babel monorepo [#37568](https://github.com/gatsbyjs/gatsby/issues/37568) ([13a0a9e](https://github.com/gatsbyjs/gatsby/commit/13a0a9e83dcb015b65dff6b73cdd5dea09c2988f))\n```\n\n----------------------------------------\n\nTITLE: Querying Data in Slice Components - JavaScript\nDESCRIPTION: This snippet demonstrates how to query data within a Slice component using GraphQL. The query results are passed to the component via the `data` prop.  It also shows how slice queries can accept parameters from the `context` passed to `createSlice`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/performance/using-slices.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst Header = ({ data }) => {\n  return (\n    <div>\n      {data.allHeaderItems.nodes.map(headerItem => (\n        // highlight-next-line\n        <Link to={headerItem.path}>{headerItem.text}</Link>\n      ))}\n    </div>\n  )\n}\n\nexport default Header\n\nexport const query = graphql`\n  query {\n    allHeaderItems {\n      nodes {\n        path\n        text\n      }\n    }\n  }\n`\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport const query = graphql`\n  // highlight-next-line\n  query ($title: String) {\n    // highlight-next-line\n    myField(title: {eq: $title}) {\n      id\n      title\n    }\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: Markdown Links Syntax\nDESCRIPTION: Demonstrates different ways to create links in Markdown, including inline-style links, inline-style links with titles, reference-style links, relative references, and automatic URL conversion.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/using-remark/src/pages/2016-04-15---hello-world-kitchen-sink/index.md#_snippet_3\n\nLANGUAGE: no-highlight\nCODE:\n```\n[I'm an inline-style link](https://www.google.com)\n\n[I'm an inline-style link with title](https://www.google.com \"Google's Homepage\")\n\n[I'm a reference-style link][Arbitrary case-insensitive reference text]\n\n[I'm a relative reference to a repository file](../blob/master/LICENSE)\n\n[You can use numbers for reference-style link definitions][1]\n\nOr leave it empty and use the [link text itself].\n\nURLs and URLs in angle brackets will automatically get turned into links.\nhttp://www.example.com or <http://www.example.com> and sometimes\nexample.com (but not on GitHub, for example).\n\nSome text to show that the reference links can follow later.\n\n[arbitrary case-insensitive reference text]: https://www.mozilla.org\n[1]: https://slashdot.org\n[link text itself]: https://www.reddit.com\n```\n\n----------------------------------------\n\nTITLE: Configuring Theme UI with Local Preset - JavaScript\nDESCRIPTION: This code snippet demonstrates how to configure `gatsby-plugin-theme-ui` to use a locally defined preset theme. Instead of specifying a package name, it uses `require` to import a local JavaScript file containing the theme object. This is useful for themes that are not publicly available as packages.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/styling/theme-ui.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-theme-ui`,\n      options: {\n        preset: require(\"my-local-preset\"),\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Theme Workspace Directory Structure\nDESCRIPTION: This text represents the directory structure of a Gatsby theme workspace, showing the location of key files such as `gatsby-config.js`, `package.json`, and source directories for both the theme and the example site. This structure is important for understanding how the theme and its usage are organized.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/starters/gatsby-starter-theme-workspace/README.md#_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\n.\n‚îú‚îÄ‚îÄ README.md\n‚îú‚îÄ‚îÄ gatsby-theme-minimal\n‚îÇ¬†¬† ‚îú‚îÄ‚îÄ README.md\n‚îÇ¬†¬† ‚îú‚îÄ‚îÄ gatsby-config.js\n‚îÇ¬†¬† ‚îú‚îÄ‚îÄ index.js\n‚îÇ¬†¬† ‚îî‚îÄ‚îÄ package.json\n‚îú‚îÄ‚îÄ example\n‚îÇ¬†¬† ‚îú‚îÄ‚îÄ README.md\n‚îÇ¬†¬† ‚îú‚îÄ‚îÄ gatsby-config.js\n‚îÇ¬†¬† ‚îú‚îÄ‚îÄ package.json\n‚îÇ¬†¬† ‚îî‚îÄ‚îÄ src\n‚îú‚îÄ‚îÄ package.json\n‚îî‚îÄ‚îÄ yarn.lock\n\n3 directories, 10 files\n```\n\n----------------------------------------\n\nTITLE: Installing gatsby-plugin-styled-components\nDESCRIPTION: This command installs the gatsby-plugin-styled-components plugin along with its peer dependencies, styled-components and babel-plugin-styled-components, which are required for its functionality.  It uses npm, the Node Package Manager, to fetch and install the packages from the npm registry. After installation, the packages will be available in the project's node_modules directory.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-styled-components/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install gatsby-plugin-styled-components styled-components babel-plugin-styled-components\n```\n\n----------------------------------------\n\nTITLE: Configure gatsby-source-mongodb\nDESCRIPTION: Configures the gatsby-source-mongodb plugin in gatsby-config.js to pull data from a specific MongoDB collection. It specifies the database name (`dbName`) and collection name (`collection`). The query option filters the documents retrieved based on the `as_of` field.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-mongodb/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// In your gatsby-config.js\nmodule.exports = {\n  plugins: [\n    /*\n     * Gatsby's data processing layer begins with ‚Äúsource‚Äù plugins. Here we\n     * setup the site to pull data from the \"documents\" collection in a local\n     * MongoDB instance\n     */\n    {\n      resolve: `gatsby-source-mongodb`,\n      options: { dbName: `local`, collection: `documents` },\n      query: { documents: { as_of: { $gte: 1604397088013 } } },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Babel Monorepo in gatsby-plugin-coffeescript\nDESCRIPTION: This code snippet shows a bug fix related to updating the babel monorepo in the gatsby-plugin-coffeescript. This update addresses potential compatibility issues or vulnerabilities within the babel dependencies used by the plugin. It was implemented as part of a larger effort to maintain up-to-date dependencies.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-coffeescript/CHANGELOG.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nupdate babel monorepo [#37568](https://github.com/gatsbyjs/gatsby/issues/37568) ([13a0a9e](https://github.com/gatsbyjs/gatsby/commit/13a0a9e83dcb015b65dff6b73cdd5dea09c2988f))\n```\n\n----------------------------------------\n\nTITLE: Creating a Deferred Page\nDESCRIPTION: Illustrates how to create a deferred page using the `createPage` action in `gatsby-node.js`. The key difference from creating a regular page is the `defer` argument, which, when set to `true`, tells Gatsby to exclude the page from the build step and generate it during the first HTTP request.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/rendering-options/deferred-static-generation.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nexports.createPages = async function ({ actions, graphql }) {\n  actions.createPage({\n    path: \"/the-page-path/\",\n    component: require.resolve(\"./src/templates/template.js\"),\n    context: {},\n    defer: true, // highlight-line\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Visiting Heading Nodes in Gatsby Plugin (Synchronous)\nDESCRIPTION: This code snippet shows how to traverse the Markdown AST and visit heading nodes within a Gatsby plugin using `unist-util-visit`.  It takes the `markdownAST` from Gatsby and applies a visitor function to all heading nodes.  The visitor function is where the node manipulation logic is applied.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/remark-plugin-tutorial.md#_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nconst visit = require(\"unist-util-visit\")\n\nmodule.exports = ({ markdownAST }, pluginOptions) => {\n  // highlight-next-line\n  visit(markdownAST, \"heading\", node => {\n    // Do stuff with heading nodes\n  })\n\n  return markdownAST\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript console.log props output\nDESCRIPTION: This JavaScript object is the output of console logging the props for the BlogPost page component.  The `pageContext` contains the `id` and `frontmatter__slug` that are available as query variables. This happens when using Gatsby's File System Route API.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-6/index.mdx#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nObject {\n  // ...\n  pageContext: Object {\n    id: \"11b3a825-30c5-551d-a713-dd748e7d554a\"\n    frontmatter__slug: \"my-first-post\"\n  }\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Transition with trigger function\nDESCRIPTION: This JSX snippet showcases how to define a custom page transition using the `trigger` function within the `exit` and `entry` props of the `TransitionLink` component. It utilizes a custom animation function (`this.someCustomDefinedAnimation`) to handle the transition.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/adding-common-features/adding-page-transitions-with-plugin-transition-link.md#_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<TransitionLink\n  exit={{\n    length: length,\n    // highlight-next-line\n    trigger: ({ exit, node }) =>\n      this.someCustomDefinedAnimation({ exit, node, direction: \"out\" }),\n  }}\n  entry={{\n    length: 0,\n    // highlight-next-line\n    trigger: ({ exit, node }) =>\n      this.someCustomDefinedAnimation({ exit, node, direction: \"in\" }),\n  }}\n  {...props}\n>\n  {props.children}\n</TransitionLink>\n```\n\n----------------------------------------\n\nTITLE: Configuring Netlify CMS in config.yml\nDESCRIPTION: Configures Netlify CMS by defining the backend, media folder, public folder, and content collections in `static/admin/config.yml`. This example configures a \"blog\" collection with fields for path, date, title, and body (markdown).\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/sourcing-data/sourcing-from-netlify-cms.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nbackend:\n  name: test-repo\n\nmedia_folder: static/assets\npublic_folder: /assets\n\ncollections:\n  - name: blog\n    label: Blog\n    folder: blog\n    create: true\n    fields:\n      - { name: path, label: Path }\n      - { name: date, label: Date, widget: datetime }\n      - { name: title, label: Title }\n      - { name: body, label: Body, widget: markdown }\n```\n\n----------------------------------------\n\nTITLE: StaticImage Component Usage in Gatsby\nDESCRIPTION: Demonstrates how to use the `StaticImage` component from `gatsby-plugin-image` to display static images in a Gatsby application without GraphQL queries. It imports the component, defines a functional component `Dino`, and renders the `StaticImage` with specified width, height, source, and alt text.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/v2.26/index.md#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\"\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nexport const Dino = () => (\n  <StaticImage width={100} height={100} src=\"trex.png\" alt=\"T-Rex\" />\n)\n```\n\n----------------------------------------\n\nTITLE: Sourcing From Multiple Contentful Spaces\nDESCRIPTION: This Javascript code snippet shows how to source data from multiple Contentful spaces by adding multiple configurations for `gatsby-source-contentful` in `gatsby-config.js`. Each configuration should specify the `spaceId` and `accessToken` for a different Contentful space.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-contentful/README.md#_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\n// In your gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-source-contentful`,\n      options: {\n        spaceId: `your_space_id`,\n        accessToken: process.env.CONTENTFUL_ACCESS_TOKEN,\n      },\n    },\n    {\n      resolve: `gatsby-source-contentful`,\n      options: {\n        spaceId: `your_second_space_id`,\n        accessToken: process.env.SECONDARY_CONTENTFUL_ACCESS_TOKEN,\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Define GraphQL Type with Gatsby Type Builders\nDESCRIPTION: This snippet demonstrates how to define a GraphQL type `ContributorJson` using Gatsby Type Builders. It shows how to specify fields, their types, and a resolver for a field. It also demonstrates implementing the `Node` interface.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/graphql-data-layer/schema-customization.md#_snippet_13\n\nLANGUAGE: js\nCODE:\n```\nexports.createSchemaCustomization = ({ actions, schema }) => {\n  const { createTypes } = actions\n  const typeDefs = [\n    schema.buildObjectType({\n      name: \"ContributorJson\",\n      fields: {\n        name: \"String!\",\n        firstName: \"String!\",\n        email: \"String!\",\n        receivedSwag: {\n          type: \"Boolean\",\n          resolve: source => source.receivedSwag || false,\n        },\n      },\n      interfaces: [\"Node\"],\n    }),\n  ]\n  createTypes(typeDefs)\n}\n```\n\n----------------------------------------\n\nTITLE: Disabled JS Frontmatter React Component\nDESCRIPTION: This snippet shows how to render the title property from the page context's frontmatter object, or `disabled` if the property is undefined or frontmatter parsing is disabled.  It is used to confirm the frontmatter has not been executed and that the default is disabled, so the injected Javascript is not run.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/e2e-tests/mdx/src/pages/frontmatter-js.mdx#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<span data-cy=\"frontmatter\">\n  {props.pageContext.frontmatter?.title || `disabled`}\n</span>\n```\n\n----------------------------------------\n\nTITLE: Add upgrade-interactive script to package.json\nDESCRIPTION: This shows how to add a custom script to the package.json file that runs the npm-check command in update mode, allowing interactive updates of dependencies.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/upgrade-gatsby-and-dependencies.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"upgrade-interactive\": \"npm-check --update\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Check nvm Installation\nDESCRIPTION: This command checks if Node Version Manager (nvm) is installed on your system. If nvm is installed, it will display nvm's help information.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/upgrading-node-js.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnvm\n```\n\n----------------------------------------\n\nTITLE: Preventing Crash in Safari for Google Gtag in Gatsby\nDESCRIPTION: This commit adds an additional check to prevent a crash in Safari when using the gatsby-plugin-google-gtag plugin, enhancing compatibility and stability.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-google-gtag/CHANGELOG.md#_snippet_25\n\nLANGUAGE: Diff\nCODE:\n```\nc79bc6d\n```\n\n----------------------------------------\n\nTITLE: Running the Markdown Benchmark\nDESCRIPTION: This shell script shows how to run the markdown benchmark. It assumes that the dependencies are installed and it runs the benchmark script using `yarn`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/benchmarks/markdown_slug/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nyarn\nyarn bench\n```\n\n----------------------------------------\n\nTITLE: Adding pluginOptionsSchema validation\nDESCRIPTION: This commit adds pluginOptionsSchema validation as part of chore updates related to issue #27601. This ensures proper validation of plugin options.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-twitter/CHANGELOG.md#_snippet_19\n\nLANGUAGE: Text\nCODE:\n```\n- Add pluginOptionsSchema validation [#27601](https://github.com/gatsbyjs/gatsby/issues/27601) ([bf6624b](https://github.com/gatsbyjs/gatsby/commit/bf6624b2f09e020b973f0d3aec622a8193242d35))\n```\n\n----------------------------------------\n\nTITLE: Correcting Links in Gatsby Package Changelogs\nDESCRIPTION: This commit corrects broken or incorrect links within the package changelogs to ensure users can easily access relevant information and resources.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-google-gtag/CHANGELOG.md#_snippet_22\n\nLANGUAGE: Diff\nCODE:\n```\nd07b9dd\n```\n\n----------------------------------------\n\nTITLE: Formatting Changelog Files - Chore\nDESCRIPTION: This chore focuses on formatting the changelog files to improve readability and maintainability. This ensures a consistent style for the changelog. The commit associated with this formatting change is also provided.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-documentationjs/CHANGELOG.md#_snippet_1\n\nLANGUAGE: N/A\nCODE:\n```\nFormat changelog files ([088f23b](https://github.com/gatsbyjs/gatsby/commit/088f23b084b67f746a383e06e9216cef83270317))\n```\n\n----------------------------------------\n\nTITLE: Use Mutex for Concurrency Control with gatsby-core-utils (JS)\nDESCRIPTION: Implements a mutex to ensure that a block of code is executed only once at a time using `gatsby-core-utils`. Other threads/async workloads will wait until the current one is done.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-core-utils/README.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { createMutex } = require(\"gatsby-core-utils/mutex\")\n\nconst mutex = createMutex(\"my-custom-mutex-key\")\nawait mutex.acquire()\n\nawait fs.writeFile(\"pathToFile\", \"my custom content\")\n\nawait mutex.release()\n```\n\n----------------------------------------\n\nTITLE: Meaningful error for long directory names - gatsby JavaScript\nDESCRIPTION: This snippet enhances the error message displayed when a user attempts to create a Gatsby site with a directory name that is too long. The more informative error message assists users in understanding and resolving the issue.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-cli/CHANGELOG.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nShow meaningful error when directory names are too long ([#21518](https://github.com/gatsbyjs/gatsby/issues/21518)) ([4404af1](https://github.com/gatsbyjs/gatsby/commit/4404af1))\n```\n\n----------------------------------------\n\nTITLE: Opening Gatsby REPL (Shell)\nDESCRIPTION: This command opens a Node.js REPL (interactive shell) with the context of your Gatsby environment. It allows you to inspect and explore Gatsby's internal data structures, configurations, and components in real-time.  This should be run from the root of your project.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/gatsby-cli.md#_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\ngatsby repl\n```\n\n----------------------------------------\n\nTITLE: Adding csproj to language map for XML recognition\nDESCRIPTION: This code snippet shows the addition of csproj to the language map, ensuring that files with the .csproj extension are recognized as XML files. This allows for proper syntax highlighting and code embedding within Gatsby projects using gatsby-remark-embed-snippet.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-embed-snippet/CHANGELOG.md#_snippet_0\n\nLANGUAGE: none\nCODE:\n```\nadded csproj to language map so it will be recognized as xml [#36919](https://github.com/gatsbyjs/gatsby/issues/36919) ([59e2976](https://github.com/gatsbyjs/gatsby/commit/59e297646af7459194d8ac496242f7d19e3de4d2))\n```\n\n----------------------------------------\n\nTITLE: Adding prepare script to package.json (JSON)\nDESCRIPTION: This snippet shows how to add a 'prepare' script to the package.json file, which runs before 'npm publish'. It includes a 'clean' script to remove the 'dist' folder and then rebuilds the project. This guarantees that only the latest compiled code is published, preventing stale artifacts.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/creating-a-source-plugin/part-8/index.mdx#_snippet_7\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"scripts\": {\n    \"clean\": \"del-cli dist\",\n    \"build\": \"tsc\",\n    \"prepare\": \"npm run clean && npm run build\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating peerDeps in gatsby-plugin-flow\nDESCRIPTION: This code snippet highlights a chore update related to updating peer dependencies in the gatsby-plugin-flow package. It specifically references issue #36965 and includes a commit hash for traceability.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-flow/CHANGELOG.md#_snippet_3\n\nLANGUAGE: Diff\nCODE:\n```\n+ Update peerDeps [#36965](https://github.com/gatsbyjs/gatsby/issues/36965) ([b624442](https://github.com/gatsbyjs/gatsby/commit/b6244424fe8b724cbc23b80b2b4f5424cc2055a4))\n```\n\n----------------------------------------\n\nTITLE: Running Gatsby Benchmark with Shell Script\nDESCRIPTION: This shell script command runs the Gatsby benchmark. It sets the number of pages to generate (`N`) and the memory limit for Node.js (`M`). The script then executes the `yarn bench` command, which handles file deletion, page generation, Gatsby clean, and Gatsby build.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/benchmarks/gabe-fs-mdx/README.md#_snippet_0\n\nLANGUAGE: Shell Script\nCODE:\n```\nN=1000 M=2 yarn bench\n```\n\n----------------------------------------\n\nTITLE: Reducing encoding time and install size in gatsby-remark-images-contentful\nDESCRIPTION: This code snippet describes the feature of reducing encoding time and install size. This improvement optimizes the plugin's performance and reduces its footprint, enhancing the overall development experience.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-images-contentful/CHANGELOG.md#_snippet_22\n\nLANGUAGE: None\nCODE:\n```\nreduce encoding time and install size [#32851](https://github.com/gatsbyjs/gatsby/issues/32851) [#1](https://github.com/gatsbyjs/gatsby/issues/1) ([ddcfbd8](https://github.com/gatsbyjs/gatsby/commit/ddcfbd8e7b4b68fe31fa77815599b479e0cef6a1))\n```\n\n----------------------------------------\n\nTITLE: Fetching Data with API Key\nDESCRIPTION: This code snippet demonstrates how to fetch data from an API using an API key stored in an environment variable. The API key is included in the `Authorization` header of the request.  Using environment variables helps to protect sensitive keys.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/conceptual/security-in-gatsby.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  resolve: \"gatsby-source-graphql\",\n  options: {\n    typeName: \"GitHub\",\n    fieldName: \"github\",\n    url: \"https://api.github.com/graphql\",\n    headers: {\n      // highlight-next-line\n      Authorization: `Bearer ${process.env.GITHUB_TOKEN}`,\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sass example (.sass syntax)\nDESCRIPTION: This is an example of a Sass stylesheet using the .sass syntax (indented syntax).  It defines variables for font stack and primary color, and then uses those variables to style the body element.  Note the lack of curly braces and semicolons.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/styling/sass.md#_snippet_3\n\nLANGUAGE: CSS\nCODE:\n```\n$font-stack: Helvetica, sans-serif\n$primary-color: #333\n\nbody\n  font: 100% $font-stack\n  color: $primary-color\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter Definition\nDESCRIPTION: Defines the title and slug for the blog post using frontmatter. The title is \"Blog Post 2\" and the slug is \"/blog-2\".  This metadata is used by Gatsby to generate the blog post page.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/using-mdx/content/posts/blog-2.mdx#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n---\ntitle: Blog Post 2\nslug: /blog-2\n---\n```\n\n----------------------------------------\n\nTITLE: Using HMR Components in JSX\nDESCRIPTION: This snippet demonstrates how to use the imported HMR components within a JSX context.  `HMRImportEditComponent` is rendered directly, while `HMRPropEditComponent` is rendered with a `test` prop set to \"prop-before\". These components likely have internal logic for hot module replacement.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/e2e-tests/mdx/src/pages/hmr.mdx#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<HMRImportEditComponent />\n\n<HMRPropEditComponent test=\"prop-before\" />\n```\n\n----------------------------------------\n\nTITLE: ButterCMS JSON Response Example\nDESCRIPTION: This JSON snippet demonstrates the expected data structure returned by the ButterCMS API for a Case Study page. It includes fields like slug, SEO title and description, the main title, and the body content.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/sourcing-from-buttercms.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"data\": {\n    \"slug\": \"acme-co-case-study\",\n    \"fields\": {\n      \"seo_title\": \"Acme Co Customer Case Study\",\n      \"seo_description\": \"Acme Co saved 200% on Anvil costs with ButterCMS\",\n      \"title\": \"Acme Co loves ButterCMS\",\n      \"body\": \"<p>We've been able to make anvils faster than ever before! - Chief Anvil Maker</p>\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a prepare script to package.json (JSON)\nDESCRIPTION: This snippet demonstrates how to add a `prepare` script to the adapter's `package.json` that runs before `npm publish`.  It also includes a `clean` script to remove the `dist` folder before each build. This ensures that old artifacts aren't accidentally published.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/previews-deploys-hosting/creating-an-adapter.md#_snippet_11\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"scripts\": {\n      \"clean\": \"del-cli dist\",\n      \"build\": \"your-build-script\",\n      \"prepare\": \"npm run clean && npm run build\"\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Shell Prompt Configuration with Output Lines\nDESCRIPTION: This snippet shows how to configure the shell prompt in a code block using the `outputLines` option.  The `outputLines` option defines which lines will display the shell prompt indicator. The specified range can be a combination of single lines and ranges.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-prismjs/README.md#_snippet_14\n\nLANGUAGE: Shell\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Defining Image Fields as Non-Null in Schema (JavaScript)\nDESCRIPTION: This snippet defines required image fields as non-null in the schema. This enforces data integrity and ensures that required image properties are always present, preventing potential errors or unexpected behavior in data queries.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-sharp/CHANGELOG.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\ne3026c9\n```\n\n----------------------------------------\n\nTITLE: Export NODE_EXTRA_CA_CERTS environment variable\nDESCRIPTION: This command sets the `NODE_EXTRA_CA_CERTS` environment variable to the path of your certificate file. This allows Node.js to trust the CA certificate when making requests to the private package registry.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/local-development/configuring-ca-certificates.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nexport NODE_EXTRA_CA_CERTS=[\"path-to-my-cert.pem\"]\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query for File Nodes\nDESCRIPTION: This GraphQL query retrieves all `File` nodes and their internal details, including type, media type, description, and owner. This allows developers to inspect the structure of the sourced data. The query helps verify that the `gatsby-source-filesystem` plugin is working as expected.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/plugins-and-themes/creating-a-transformer-plugin.md#_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  allFile {\n    edges {\n      node {\n        internal {\n          type\n          mediaType\n          description\n          owner\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Axios dependency in gatsby-source-hacker-news\nDESCRIPTION: This commit updates the axios dependency to version ^0.19.2 within the gatsby-source-hacker-news package. This ensures compatibility and incorporates the latest features and security updates from Axios.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-hacker-news/CHANGELOG.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nupdate dependency axios to ^0.19.2 ([#22317](https://github.com/gatsbyjs/gatsby/issues/22317)) ([91e780f](https://github.com/gatsbyjs/gatsby/commit/91e780f))\n```\n\n----------------------------------------\n\nTITLE: Defining Child Relations with types and mimeTypes\nDESCRIPTION: This GraphQL snippet demonstrates how to combine the `types` and `mimeTypes` arguments in the `@childOf` extension to define child relations. It adds `childMdx` as a child to `File` nodes and nodes with `@mimeTypes` set to \"text/markdown\" or \"text/x-markdown\".\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/graphql-data-layer/schema-customization.md#_snippet_10\n\nLANGUAGE: graphql\nCODE:\n```\n# Adds `childMdx` as a child to `File` nodes *and* nodes with `@mimeTypes` set to \"text/markdown\" or \"text/x-markdown\"\ntype Mdx implements Node\n  @childOf(types: [\"File\"], mimeTypes: [\"text/markdown\", \"text/x-markdown\"]) {\n  id: ID!\n}\n```\n\n----------------------------------------\n\nTITLE: Running the Prettier linter\nDESCRIPTION: This command executes the Prettier linter, which automatically formats code according to predefined style rules. Running this ensures consistent code formatting throughout the project, improving readability and maintainability. It's an npm script that should be run from the project's base directory.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/contributing/how-to-open-a-pull-request.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm run format\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint in .eslintrc.js\nDESCRIPTION: This JavaScript file configures ESLint with overrides for TypeScript and GraphQL files. It uses the @graphql-eslint/eslint-plugin plugin to lint GraphQL queries and enforces naming conventions for operation definitions.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/local-development/graphql-typegen.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  root: true,\n  overrides: [\n    {\n      files: ['*.ts', '*.tsx'],\n      processor: '@graphql-eslint/graphql',\n      parser: \"@typescript-eslint/parser\",\n      extends: [\n        \"eslint:recommended\",\n        \"plugin:@typescript-eslint/recommended\"\n      ],\n      env: {\n        es6: true,\n      },\n    },\n    {\n      files: ['*.graphql'],\n      parser: '@graphql-eslint/eslint-plugin',\n      plugins: ['@graphql-eslint'],\n      rules: {\n        '@graphql-eslint/no-anonymous-operations': 'error',\n        '@graphql-eslint/naming-convention': [\n          'error',\n          {\n            OperationDefinition: {\n              style: 'PascalCase',\n              forbiddenPrefixes: ['Query', 'Mutation', 'Subscription', 'Get'],\n              forbiddenSuffixes: ['Query', 'Mutation', 'Subscription'],\n            },\n          },\n        ],\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Chokidar Dependency in Gatsby (JavaScript)\nDESCRIPTION: This code snippet shows the commit hash associated with updating the chokidar dependency to v3.2.1. The update aims to leverage the latest features and fixes provided by the newer version of the chokidar library. Chokidar is likely used for file system watching within gatsby-page-utils.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-page-utils/CHANGELOG.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n4df0306\n```\n\n----------------------------------------\n\nTITLE: Updating Bluebird Dependency\nDESCRIPTION: This snippet indicates an update to the Bluebird dependency to version ^3.7.0. Updating dependencies is important for security, bug fixes, and access to new features within the dependency. Bluebird is a promise library, so this update could impact asynchronous operations within the plugin.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-pdf/CHANGELOG.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n([#18029](https://github.com/gatsbyjs/gatsby/issues/18029)) ([bd235a8](https://github.com/gatsbyjs/gatsby/commit/bd235a8))\n```\n\n----------------------------------------\n\nTITLE: Install rehype-react and unified\nDESCRIPTION: This command installs rehype-react and unified as dependencies. These packages are required to render React components within markdown.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/using-remark/src/pages/2018-01-27---custom-components/index.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install rehype-react unified\n```\n\n----------------------------------------\n\nTITLE: Updating base64-img Dependency to ^1.0.4 - JavaScript\nDESCRIPTION: This snippet updates the `base64-img` dependency to version ^1.0.4. The `base64-img` library is used to convert images to base64 strings. The update likely includes fixes and improvements related to image handling and conversion within the `gatsby-source-contentful` plugin.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-contentful/CHANGELOG.md#_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nea39f67\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query Result\nDESCRIPTION: This JavaScript object represents the expected result of the GraphQL query for HJSON data. It shows the structure of the data returned, including the `value` field from each node.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-hjson/README.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  allLettersJson: {\n    edges: [\n      {\n        node: {\n          value: \"a\",\n        },\n      },\n      {\n        node: {\n          value: \"b\",\n        },\n      },\n      {\n        node: {\n          value: \"c\",\n        },\n      },\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing a Gatsby Theme using npm\nDESCRIPTION: This command installs a Gatsby theme, specifically `gatsby-theme-blog`, using npm.  It adds the theme as a dependency to the project. You must have Node.js and npm installed to run this command.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/plugins-and-themes/using-a-gatsby-theme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install gatsby-theme-blog\n```\n\n----------------------------------------\n\nTITLE: Example: Using .filter on the Iterable from nodeModel.findAll\nDESCRIPTION: This JavaScript code demonstrates using the `.filter` method on the iterable object returned by `nodeModel.findAll` within a GraphQL resolver.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v3-to-v4.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n// Example: Use .filter on the iterable\nresolve: async (source, args, context, info) => {\n  const { entries } = await context.nodeModel.findAll({ type: `BlogPost` })\n  return entries.filter(post => post.publishedAt > Date.UTC(2018, 0, 1))\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Layout Rendering\nDESCRIPTION: This code shows how to conditionally render different layouts based on the `layout` property in the `pageContext`. It checks for a \"special\" layout and renders `AlternativeLayout` if found, otherwise `RegularLayout`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-layout/README.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default ({ children, pageContext }) => {\n  if (pageContext.layout === \"special\") {\n    return <AlternativeLayout>{children}</AlternativeLayout>\n  }\n  return <RegularLayout>{children}</RegularLayout>\n}\n```\n\n----------------------------------------\n\nTITLE: Pinning Chokidar Version in Gatsby\nDESCRIPTION: This code snippet shows the pinning of the chokidar dependency to version 2.1.2 within the gatsby-source-filesystem plugin. This resolves issues specific to Unix-based systems and ensures consistent file watching behavior.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-page-creator/CHANGELOG.md#_snippet_44\n\nLANGUAGE: Text\nCODE:\n```\n**gatsby-source-filesystem:** pin chokidar@2.1.2 to fix unix issues ([#12759](https://github.com/gatsbyjs/gatsby/issues/12759)) ([0ea1505](https://github.com/gatsbyjs/gatsby/commit/0ea1505))\n```\n\n----------------------------------------\n\nTITLE: JavaScript Data Export (ES Modules)\nDESCRIPTION: This code shows how to export a data object using ES Module syntax in a JavaScript file. The `data` object contains metadata that will be extracted by the Gatsby transformer. Using `export const data` is an alternative way to define the data object.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-javascript-static-exports/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport const data = {\n  title: \"Choropleth on d3v4\",\n  written: \"2017-05-04\",\n  layoutType: \"post\",\n  path: \"choropleth-on-d3v4\",\n  category: \"data science\",\n  description: \"Things about the choropleth.\",\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Sharp dependency in gatsby-remark-images-contentful (JavaScript)\nDESCRIPTION: This commit updates the Sharp dependency to version ^0.23.1. This update ensures that the package uses the latest bug fixes and performance improvements from the Sharp image processing library.  This may impact image processing speed, memory usage, and supported image formats.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-images-contentful/CHANGELOG.md#_snippet_34\n\nLANGUAGE: JavaScript\nCODE:\n```\nupdate dependency sharp to ^0.23.1 ([#17904](https://github.com/gatsbyjs/gatsby/issues/17904)) ([f19ad3c](https://github.com/gatsbyjs/gatsby/commit/f19ad3c))\n```\n\n----------------------------------------\n\nTITLE: Profiling Bundle with webpack-bundle-analyzer and perf-budgets\nDESCRIPTION: This snippet involves configuring `gatsby-plugin-webpack-bundle-analyser-v2` and `gatsby-plugin-perf-budgets` within `gatsby-config.js` to analyze JavaScript bundle sizes on each page of the Gatsby application. This helps identify large dependencies and optimize overall bundle size by revealing how different chunks are structured.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/performance/improving-site-performance.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nWhen you add this tool to your `gatsby-config.js`, you can analyze the bundle size on each page in your application.\n```\n\n----------------------------------------\n\nTITLE: Set Base Path in Resolver (gatsby-node.js)\nDESCRIPTION: This snippet sets the base path for the URL slug generation. It initializes 'basePath' to '/' within the 'createResolvers' function.  This path will be prepended to the generated slug.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/building-a-theme.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nexports.createResolvers = ({ createResolvers }) => {\n  // highlight-next-line\n  const basePath = \"/\"\n\n  // Quick-and-dirty helper to convert strings into URL-friendly slugs.\n  const slugify = str => {\n    const slug = str\n      .toLowerCase()\n      .replace(/[^a-z0-9]+/g, \"-\")\n      .replace(/(^-|-\\$)+/g, \"\")\n\n    return `/${basePath}/${slug}`.replace(/\\/\\/+/g, \"/\")\n  }\n\n  createResolvers({\n    Event: {\n      slug: {\n        resolve: source => slugify(source.name),\n      },\n    },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Source Nodes API Implementation in TypeScript\nDESCRIPTION: This snippet demonstrates the implementation of the `sourceNodes` API in a Gatsby source plugin using TypeScript. It imports necessary types from Gatsby, defines the `sourceNodes` function, and logs a message to the terminal using the reporter API. This is the entry point for fetching and processing data for the plugin.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/creating-a-source-plugin/part-2/index.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { GatsbyNode } from \"gatsby\"\n\nexport const sourceNodes: GatsbyNode[`sourceNodes`] = async (gatsbyApi) => {\n  const { reporter } = gatsbyApi\n\n  reporter.info(`Example plugin sourceNodes...`)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a React Component with Props\nDESCRIPTION: This snippet shows how to define a React component that accepts props. The component `Greeting` takes a `props` object as an argument and uses the `name` property from that object to render a greeting.  This allows the component to be dynamic and reusable with different names.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-2/index.mdx#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// Defining the <Greeting> component\nconst Greeting = (props) => { // highlight-line\n  return (\n    <p>Hi {props.name}!</p> // highlight-line\n  )\n}\n\nexport default Greeting\n```\n\n----------------------------------------\n\nTITLE: Modify event template to access event data (JSX)\nDESCRIPTION: This snippet modifies the event template to access event data using the GraphQL query and passes it to the `<Event>` component. Dependencies: React, gatsby, graphql, Layout, Event.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/building-a-theme.md#_snippet_32\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\"\nimport { graphql } from \"gatsby\"\n// highlight-start\nimport Layout from \"../components/layout\"\nimport Event from \"../components/event\"\n// highlight-end\n\nexport const query = graphql`\n  query($eventID: String!) {\n    event(id: { eq: $eventID }) {\n      name\n      url\n      startDate(formatString: \"MMMM DD YYYY\")\n      endDate(formatString: \"MMMM DD YYYY\")\n      location\n      slug\n    }\n  }\n`\n// highlight-start\nconst EventTemplate = ({ data: { event } }) => (\n  <Layout>\n    <Event {...event} />\n  </Layout>\n)\n// highlight-end\n\nexport default EventTemplate\n```\n\n----------------------------------------\n\nTITLE: Updating Minor and Patch for Gatsby Transformer Excel\nDESCRIPTION: This snippet addresses updating the minor and patch versions of the gatsby-transformer-excel package. This update ensures compatibility and includes minor feature enhancements and bug fixes. The version is updated to ensure it aligns with the latest features and stability improvements.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-excel/CHANGELOG.md#_snippet_17\n\nLANGUAGE: None\nCODE:\n```\nupdate minor and patch for gatsby-transformer-excel [#31705](https://github.com/gatsbyjs/gatsby/issues/31705) ([eb5729a](https://github.com/gatsbyjs/gatsby/commit/eb5729a48f2375a0a25125016188f7e2305ac05a))\n```\n\n----------------------------------------\n\nTITLE: Typing Image Component Props - TypeScript\nDESCRIPTION: This TypeScript code defines the interface for a custom image component's props. It extends GetGatsbyImageDataProps and omits the \"image\" prop from GatsbyImageProps.  This is useful for ensuring type safety when passing dynamic image data.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/plugins-and-themes/adding-gatsby-image-support.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ImageComponentProps\n  //This is the type for your image data function\n  extends GetGatsbyImageDataProps,\n    // We omit \"image\" because that's the prop that we generate,\n    Omit<GatsbyImageProps, \"image\"> {\n  // Any other props can go here\n  myCustomProp?: string\n}\n```\n\n----------------------------------------\n\nTITLE: Using createMutex in Gatsby Core Utils\nDESCRIPTION: Shows how to use the `createMutex` API from `gatsby-core-utils` to safely perform concurrent processes. It acquires a mutex, writes to a file, and then releases the mutex, ensuring that only one worker can access the file at a time.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/v4.8/index.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { createMutex } = require(\"gatsby-core-utils/mutex\")\n\nconst mutex = createMutex(\"my-custom-mutex-key\")\nawait mutex.acquire()\n\nawait fs.writeFile(\"pathToFile\", \"my custom content\")\n\nawait mutex.release()\n```\n\n----------------------------------------\n\nTITLE: Adding Optional Chaining and Nullish Coalescing Support\nDESCRIPTION: This commit introduces support for optional chaining and nullish coalescing operators within the gatsby-plugin-typescript. This feature allows developers to write cleaner and more concise code when dealing with potentially null or undefined values, improving code safety and readability.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-typescript/CHANGELOG.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n**gatsby-plugin-typescript:** add support for optional chaining and nullish coalescing operator ([#19302](https://github.com/gatsbyjs/gatsby/issues/19302)) ([0647089](https://github.com/gatsbyjs/gatsby/commit/0647089))\n```\n\n----------------------------------------\n\nTITLE: Formatting Excerpts with Options in GraphQL\nDESCRIPTION: This GraphQL query retrieves data from `allMarkdownRemark` and formats the `excerpt` field. The `excerpt` is formatted as plain text (`PLAIN`), truncated to a length of 200 characters (`pruneLength`), and the truncation is enforced (`truncate`). It limits the results to 5 nodes.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/graphql-reference.md#_snippet_22\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  allMarkdownRemark(filter: { frontmatter: { date: { ne: null } } }, limit: 5) {\n    edges {\n      node {\n        frontmatter {\n          title\n        }\n        excerpt(format: PLAIN, pruneLength: 200, truncate: true)\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Gatsby Theme Options in gatsby-config.js\nDESCRIPTION: This code snippet shows how to configure a Gatsby theme with options in a site's gatsby-config.js file. It demonstrates passing options like `postsPath` and `colors` to a theme named `gatsby-theme-name`. The `resolve` field specifies the theme package, and the `options` field contains the configuration parameters.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/theme-api.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  plugins: [\n    {\n      resolve: \"gatsby-theme-name\",\n      options: {\n        postsPath: \"/blog\",\n        colors: {\n          primary: \"tomato\",\n        },\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Stateful Source Nodes in Gatsby\nDESCRIPTION: The `enableStatefulSourceNodes` action, when enabled, prevents Gatsby from checking for stale nodes. This requires source plugin authors to handle node deletion properly to avoid data persistence issues. It improves build performance by skipping staleness checks.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/v5.9/index.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexports.sourceNodes = (\n  { actions, createNodeId, createContentDigest },\n  configOptions\n) => {\n  const { enableStatefulSourceNodes } = actions\n\n  enableStatefulSourceNodes()\n}\n```\n\n----------------------------------------\n\nTITLE: Testing a Page Component with Mocked Data - JavaScript\nDESCRIPTION: This test renders a `PageTwo` component with mocked GraphQL data passed as a prop and asserts that the rendered output matches a snapshot. This allows testing components that rely on GraphQL data without actually executing GraphQL queries.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/testing/testing-components-with-graphql.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from \"react\"\nimport renderer from \"react-test-renderer\"\nimport PageTwo from \"../page-2\"\n\ndescribe(\"PageTwo\", () => {\n  it(\"renders correctly\", () => {\n    const data = {\n      site: {\n        siteMetadata: {\n          author: \"Your name\",\n        },\n      },\n    }\n\n    // highlight-next-line\n    const tree = renderer.create(<PageTwo data={data} />).toJSON()\n    expect(tree).toMatchSnapshot()\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Fix: Correct Links in Changelogs\nDESCRIPTION: This commit corrects broken links within the package changelogs. It improves the accessibility and navigability of the documentation, ensuring that users can easily follow links to relevant issues and commits. This fix is present in version 2.1.2 of the plugin.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-postcss/CHANGELOG.md#_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\ncorrect links in package changelogs ([#15630](https://github.com/gatsbyjs/gatsby/issues/15630)) ([d07b9dd](https://github.com/gatsbyjs/gatsby/commit/d07b9dd))\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Error Map in onPreInit (Old Way)\nDESCRIPTION: This code showcases the previous method of defining a custom error map in the `onPreInit` lifecycle.  In Gatsby 4, this must be moved to the `onPluginInit` lifecycle to be accessible to GraphQL resolvers.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-source-plugin-from-v3-to-v4.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst ERROR_MAP = {\n  [CODES.Generic]: {\n    text: context => context.sourceMessage,\n    level: `ERROR`,\n    type: `PLUGIN`,\n  },\n  [CODES.MissingResource]: {\n    text: context => context.sourceMessage,\n    level: `ERROR`,\n    type: `PLUGIN`,\n    category: `USER`,\n  },\n}\nexports.onPreInit = ({ reporter }) => { // highlight-line\n  if (reporter.setErrorMap) {\n    reporter.setErrorMap(ERROR_MAP)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL response for all files\nDESCRIPTION: This JSON represents the expected response from the GraphQL query that fetches all files. The `data.allFile.nodes` array contains objects representing each file, with the `name` property showing the filename.  The `extensions` field is also present.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-4/index.mdx#_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"allFile\": {\n      \"nodes\": [\n        {\n          \"name\": \"my-first-post\"\n        },\n        {\n          \"name\": \"another-post\"\n        },\n        {\n          \"name\": \"yet-another-post\"\n        }\n      ]\n    }\n  },\n  \"extensions\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Emotion Serializer for Jest\nDESCRIPTION: This JavaScript code creates a `setup-test-env.js` file to configure Jest with the Emotion serializer. The serializer enhances snapshot testing by formatting the CSS output from Emotion, making snapshots more readable and easier to compare. It removes unnecessary information and displays styling in a clear format.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/testing/testing-css-in-js.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createSerializer } from \"@emotion/jest\"\nimport * as emotion from \"@emotion/react\"\n\nexpect.addSnapshotSerializer(createSerializer(emotion))\n```\n\n----------------------------------------\n\nTITLE: Initialize isFirstSource Variable TypeScript\nDESCRIPTION: Initializes a boolean variable `isFirstSource` to track whether it's the first time the source plugin is run. This is used to conditionally execute code that only needs to run once, such as touching existing nodes to prevent garbage collection.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/creating-a-source-plugin/part-5/index.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Imports\n\n// highlight-next-line\nlet isFirstSource = true\n\nexport const sourceNodes: GatsbyNode[`sourceNodes`] = async (gatsbyApi) => {\n  // sourceNodes content\n}\n\n// Rest of file\n```\n\n----------------------------------------\n\nTITLE: Install Gatsby Image Plugin\nDESCRIPTION: This command installs the `gatsby-plugin-image`, `gatsby-plugin-sharp`, and `gatsby-source-filesystem` plugins using npm. These plugins are necessary for adding responsive images to a Gatsby site using the `StaticImage` component. `gatsby-plugin-sharp` handles image processing, and `gatsby-source-filesystem` allows importing images from the local filesystem.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-3/index.mdx#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem\n```\n\n----------------------------------------\n\nTITLE: Handling 'fields' edge case in GraphQL sort/aggr codemod\nDESCRIPTION: This commit addresses a specific edge case where the 'fields' field is encountered within the sort and aggregation codemod for GraphQL in Gatsby. The fix ensures that the codemod correctly handles scenarios involving the 'fields' field during the transformation.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-codemods/CHANGELOG.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nhandle 'fields' field edge case in sort/aggr codemod [#36844](https://github.com/gatsbyjs/gatsby/issues/36844) ([e574964](https://github.com/gatsbyjs/gatsby/commit/e574964a99b0541054489ed23ab591ee8c770703))\n```\n\n----------------------------------------\n\nTITLE: Bumping Babel Minor Version\nDESCRIPTION: This commit updates the Babel dependency to a newer minor version within the GatsbyJS project. The motivation is referenced by its GitHub issue number. Updating Babel ensures compatibility with the latest JavaScript features and improvements in compilation performance.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-dev-cli/CHANGELOG.md#_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\nbump babel minor [#31857](https://github.com/gatsbyjs/gatsby/issues/31857) ([7d42e8d](https://github.com/gatsbyjs/gatsby/commit/7d42e8d866e46e9c39838d812d080d06433f7060))\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables (.env)\nDESCRIPTION: This snippet shows how to define environment variables in a `.env.development` file. It is used to store sensitive information like Stripe API keys, which should never be directly embedded in your code.  Remember to install the `dotenv` package to load these variables.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/ecommerce-tutorial/index.md#_snippet_11\n\nLANGUAGE: text\nCODE:\n```\n# Stripe secret API key\nSTRIPE_PUBLISHABLE_KEY=pk_test_xxx\nSTRIPE_SECRET_KEY=sk_test_xxx\n```\n\n----------------------------------------\n\nTITLE: Replacing gatsbyjs.org with gatsbyjs.com - Chore\nDESCRIPTION: This chore replaces all instances of the old domain 'gatsbyjs.org' with the new domain 'gatsbyjs.com' within the codebase. This is done to keep references up-to-date. The specific commit that implemented the change is also included for reference.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-documentationjs/CHANGELOG.md#_snippet_0\n\nLANGUAGE: N/A\nCODE:\n```\nreplace all uses of gatsbyjs.org with gatsbyjs.com [#35101](https://github.com/gatsbyjs/gatsby/issues/35101) ([16cff41](https://github.com/gatsbyjs/gatsby/commit/16cff413e154dc4e74fc5be631d52c76273e5cbc))\n```\n\n----------------------------------------\n\nTITLE: Fix: PostCSS Config Loading in Gatsby Plugin\nDESCRIPTION: This code addresses an issue where the postcss.config.js file was not consistently loaded. It ensures that the PostCSS configuration is always loaded, resolving a related issue. This fix is present in version 2.1.3 of the plugin.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-postcss/CHANGELOG.md#_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\ngatsby-plugin-postcss: Always ensure postcss.config.js is loaded ([#16521](https://github.com/gatsbyjs/gatsby/issues/16521)) ([14179b0](https://github.com/gatsbyjs/gatsby/commit/14179b0)), closes [#10861](https://github.com/gatsbyjs/gatsby/issues/10861)\n```\n\n----------------------------------------\n\nTITLE: Using iframe in Markdown with gatsby-remark-responsive-iframe\nDESCRIPTION: This markdown snippet demonstrates how to use an iframe tag within a markdown file so that the `gatsby-remark-responsive-iframe` plugin will wrap it. It requires both `width` and `height` attributes to be set on the iframe tag for the plugin to calculate the aspect ratio. Both unitless and pixel values are supported.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-responsive-iframe/README.md#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nThis is a beautiful iframe:\n\n<iframe src=\"http://www.example.com/\" width=\"600\" height=\"400\"></iframe>\n```\n\n----------------------------------------\n\nTITLE: CSS Background Gradient Removal\nDESCRIPTION: This CSS snippet is intended to be removed from `src/style/reset.scss` to remove the background gradient. Removing this code will result in a plain white background for the store. The absence of this CSS results in a simpler, less visually striking background.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/e-commerce-with-datocms-and-snipcart/index.md#_snippet_4\n\nLANGUAGE: CSS\nCODE:\n```\nbody {\n  background: linear-gradient(\n    to bottom,\n    white,\n    cyan,\n    white,\n    MediumVioletRed,\n    white,\n    Green,\n    white,\n    cyan\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Checkbox Custom Field in JSX\nDESCRIPTION: This code snippet shows how to add a checkbox custom field. The `data-item-custom2-type` attribute is set to \"checkbox\".\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/adding-a-shopping-cart-with-snipcart.md#_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\n<section>\n  <h2>Silver Stacking Ring</h2>\n  <p>$19.99</p>\n  <p>Wear one or seventeen! These rings are fun to mix and match.</p>\n  <button\n    class=\"snipcart-add-item\"\n    data-item-id=\"silver-stacking-ring\"\n    data-item-price=\"19.99\"\n    data-item-url=\"/\"\n    data-item-name=\"Silver Stacking Ring\"\n    data-item-custom1-name=\"Size\"\n    data-item-custom1-options=\"6|6.5|7|7.5|8|8.5|9\"\n    <!--highlight-start-->\n    data-item-custom2-name=\"This is a gift\" data-item-custom2-type=\"checkbox\"\n   >\n    <!-- highlight-end -->\n    Add to cart\n  </button>\n</section>\n```\n\n----------------------------------------\n\nTITLE: Import GraphQL Schema from JS File (New Way - gatsby-node.js)\nDESCRIPTION: This code demonstrates the recommended way to import GraphQL schema definitions from a separate JavaScript or TypeScript file within a Gatsby plugin. This approach allows Gatsby's bundler to correctly include the schema definitions during DSG and SSR, avoiding file access errors.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-source-plugin-from-v3-to-v4.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// JS file containing the SDL strings now\nconst typeDefs = require(\"./schema\")\n\nexports.createSchemaCustomization = ({ actions }) => {\n  const { createTypes } = actions\n\n  createTypes(typeDefs)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining and Exporting a Page Query\nDESCRIPTION: This code defines and exports a GraphQL page query that retrieves all file nodes and their names.  This query is used to fetch the filenames of the blog posts.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-4/index.mdx#_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react'\nimport { graphql } from 'gatsby'\nimport Layout from '../components/layout'\nimport Seo from '../components/seo'\n\nconst BlogPage = () => {\n  return (\n    <Layout pageTitle=\"My Blog Posts\">\n      <p>My cool posts will go in here</p>\n    </Layout>\n  )\n}\n\n// highlight-start\nexport const query = graphql`\n  query {\n    allFile {\n      nodes {\n        name\n      }\n    }\n  }\n`\n// highlight-end\n\nexport const Head = () => <Seo title=\"My Blog Posts\" />\n\nexport default BlogPage\n```\n\n----------------------------------------\n\nTITLE: Netlify Image CDN Configuration for WordPress\nDESCRIPTION: This TOML snippet demonstrates how to configure Netlify's image CDN for use with WordPress. It specifies a regular expression to allow images from the WordPress URL, where `<your-wordpress-url>` should be replaced with your actual WordPress URL.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-adapter-netlify/README.md#_snippet_4\n\nLANGUAGE: TOML\nCODE:\n```\n[images]\nremote_images = [\n  # <your-wordpress-url> is specified in the `url` option for the\n  # gatsby-source-wordpress plugin in your gatsby-config file.\n  # There is no need to include `/graphql in the path here`\n  \"<your-wordpress-url>/.*\"\n]\n```\n\n----------------------------------------\n\nTITLE: Setting Request Headers\nDESCRIPTION: Example configuration to add custom request headers to the request to the Drupal site.  This can be useful for scenarios where the web server requires specific headers, such as the `accept` header for JSON:API conformance.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-drupal/README.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\n// In your gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-source-drupal`,\n      options: {\n        baseUrl: `https://live-contentacms.pantheonsite.io/`,\n        apiBase: `api`, // optional, defaults to `jsonapi`\n        headers: {\n          Host: \"https://example.com\", // any valid request header here\n        },\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Gatsby Config: Add gatsby-transformer-sharp Plugin\nDESCRIPTION: This code snippet demonstrates how to add the `gatsby-transformer-sharp` plugin to the `plugins` array in your `gatsby-config.js` file. This configuration enables Gatsby to create ImageSharp nodes from image files, allowing the use of the GatsbyImage component.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-7/index.mdx#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  siteMetadata: {\n    title: \"My First Gatsby Site\",\n  },\n  plugins: [\n    // ...existing plugins\n    \"gatsby-transformer-sharp\", // highlight-line\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Fullpage Option to Puppeteer API in Gatsby\nDESCRIPTION: This commit introduces the fullpage option to the Puppeteer API call within gatsby-transformer-screenshot. This enhancement allows developers to capture screenshots of entire web pages, including content that extends beyond the initial viewport, providing a more comprehensive visual representation of the target website.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-screenshot/CHANGELOG.md#_snippet_16\n\nLANGUAGE: Diff\nCODE:\n```\n([51a8c98](https://github.com/gatsbyjs/gatsby/commit/51a8c98))\n```\n\n----------------------------------------\n\nTITLE: Import tsconfig Paths (jest.config.js)\nDESCRIPTION: Import and map tsconfig.json paths.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/testing/unit-testing.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst { compilerOptions } = require(\"./tsconfig.json\")\nconst { pathsToModuleNameMapper } = require(\"ts-jest\")\nconst paths = pathsToModuleNameMapper(compilerOptions.paths, {\n  prefix: \"<rootDir>/\",\n})\n```\n\n----------------------------------------\n\nTITLE: Create a New Gatsby App with Yarn\nDESCRIPTION: An alternative command using Yarn to initiate the interactive CLI for creating a new Gatsby app.  It functions identically to the npm command, prompting for project configuration.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/create-gatsby/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nyarn create gatsby\n```\n\n----------------------------------------\n\nTITLE: Gatsby Configuration File API Token\nDESCRIPTION: This JavaScript code snippet shows how the DatoCMS API token is referenced in `gatsby-config.js`. `process.env.DATO_API_TOKEN` retrieves the API token from the environment variables, which is necessary for Gatsby to access the DatoCMS content. It depends on the gatsby-source-datocms plugin.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/e-commerce-with-datocms-and-snipcart/index.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  resolve: `gatsby-source-datocms`,\n  options: { apiToken: process.env.DATO_API_TOKEN },\n},\n```\n\n----------------------------------------\n\nTITLE: Fixing Field Names in gatsby-transformer-documentationjs\nDESCRIPTION: This commit fixes a bug in `gatsby-transformer-documentationjs` where quotes were missing around field names, potentially causing parsing or data retrieval issues. It ensures that field names are properly quoted for correct interpretation.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-documentationjs/CHANGELOG.md#_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\n**gatsby-transformer-documentationjs:** Add missing quotes around field names ([0c2eab0](https://github.com/gatsbyjs/gatsby/commit/0c2eab0))\n```\n\n----------------------------------------\n\nTITLE: Inject Polyfills Using Gatsby onCreateWebpackConfig API\nDESCRIPTION: This snippet demonstrates how to use the `onCreateWebpackConfig` API in `gatsby-node.js` to inject polyfills into the webpack configuration during the `build-javascript` stage.  It modifies the `entry.app` configuration to include the `polyfills.js` file. This ensures the polyfills are loaded before the main application code.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v2-to-v3.md#_snippet_43\n\nLANGUAGE: JavaScript\nCODE:\n```\nexports.onCreateWebpackConfig = ({ actions, stage, getConfig }) => {\n  if (stage === \"build-javascript\") {\n    const config = getConfig();\n    const app = typeof config.entry.app === 'string'\n      ? [config.entry.app]\n      : config.entry.app;\n    config.entry.app = ['./polyfills', ...app];\n    actions.replaceWebpackConfig(config);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Gatsby Benchmark with custom parameters (Shell)\nDESCRIPTION: This shell command runs the Gatsby benchmark with custom parameters. It sets the number of pages to 1000 (N=1000) and the memory limit for Node.js to 2GB (M=2). It then executes the 'bench' script using yarn.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/benchmarks/gabe-yaml-text/README.md#_snippet_0\n\nLANGUAGE: Shell Script\nCODE:\n```\nN=1000 M=2 yarn bench\n```\n\n----------------------------------------\n\nTITLE: Fixing cache key generation in gatsby-remark-images-contentful (JavaScript)\nDESCRIPTION: This commit fixes an issue where the `fileName` was used as the cache key instead of the `url`. This change ensures that the cache key is based on the actual image URL, improving cache hit rates and ensuring correct image processing. The fix impacts how images are cached and retrieved.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-images-contentful/CHANGELOG.md#_snippet_28\n\nLANGUAGE: JavaScript\nCODE:\n```\n**gatsby-remark-images-contentful:** use `url` for cache key instead of `fileName` ([#24338](https://github.com/gatsbyjs/gatsby/issues/24338)) ([08503b2](https://github.com/gatsbyjs/gatsby/commit/08503b2))\n```\n\n----------------------------------------\n\nTITLE: StaticImage Invalid Prop Usage Example 2 (JS)\nDESCRIPTION: This example demonstrates incorrect usage of the StaticImage component where the `width` prop comes from a function call. `StaticImage` props need to be statically-analyzed at build time, which means they cannot be the result of function calls.  This will result in an error during the build process.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/built-in-components/gatsby-plugin-image.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// ‚ö†Ô∏è Doesn't work\n\nexport function Dino() {\n  // Props can't come from function calls\n  const width = getTheWidthFromSomewhere()\n  return <StaticImage src=\"trex.png\" width={width} />\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Gatsby MDX Plugin\nDESCRIPTION: This snippet configures the `gatsby-plugin-mdx` plugin in the `gatsby-config.js` file. The plugin is added to the `plugins` array, enabling Gatsby to use it during site builds.  This requires a `gatsby-config.js` file to exist in the root of your project.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-5/index.mdx#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  siteMetadata: {\n    title: \"My Super Cool Blog\",\n  },\n  plugins: [\n    \"gatsby-plugin-image\",\n    \"gatsby-plugin-sharp\",\n    {\n      resolve: `gatsby-source-filesystem`,\n      options: {\n        name: `blog`,\n        path: `${__dirname}/blog/`,\n      },\n    },\n    \"gatsby-plugin-mdx\", // highlight-line\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Using the BlogPosts Component\nDESCRIPTION: This example shows how to integrate the `BlogPosts` component into the `Home` component to display a list of blog posts on the home page. The posts data is passed as a prop to the `BlogPosts` component, which renders the list of blog posts.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/prismic-source-graphql-tutorial.md#_snippet_7\n\nLANGUAGE: JSX\nCODE:\n```\nexport default function Home({ data }) {\n  const doc = data.prismic.allBlog_homes.edges.slice(0, 1).pop()\n  const posts = data.prismic.allPosts.edges\n\n  if (!doc) return null\n\n  return (\n    <Layout>\n      <div>\n        <img src={doc.node.image.url} alt={doc.node.image.alt} />\n        <h1>{RichText.asText(doc.node.headline)}</h1>\n        <p>{RichText.asText(doc.node.description)}</p>\n      </div>\n      <BlogPosts posts={posts} /> //highlight-line\n    </Layout>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using the query result in the HomePage component\nDESCRIPTION: This JSX code updates the `HomePage` component to receive the query results as a `data` prop and renders the `description` from the `siteMetadata`. This demonstrates how to access data fetched by the GraphQL query.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/querying-data/page-query.md#_snippet_5\n\nLANGUAGE: JSX\nCODE:\n```\nimport * as React from 'react'\nimport { graphql } from 'gatsby'\n\n- const HomePage = () => {\n+ const HomePage = ({data}) => {\n  return (\n    <div>\n-     Hello!\n+     {data.site.siteMetadata.description}\n    </div>\n  )\n}\n\nexport const query = graphql`\n  query HomePageQuery {\n    site {\n      siteMetadata {\n        description\n      }\n    }\n  }\n`\n\nexport default HomePage\n```\n\n----------------------------------------\n\nTITLE: Wildcard Path Redirect in gatsby-node.js\nDESCRIPTION: This snippet shows how to redirect all URLs under a specific path using a wildcard. All URLs matching `/blog/recipes/*` are redirected to `/recipes`. Requires Gatsby's `createPages` API and the `createRedirect` action.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/cloud/working-with-redirects-and-rewrites.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncreateRedirect({\n  fromPath: `/blog/recipes/mouthwatering-lasagna`,\n  toPath: `/recipes/mouthwatering-lasagna`,\n})\n\n// All your other redirects\n\ncreateRedirect({\n  fromPath: `/blog/recipes/*`,\n  toPath: `/recipes`,\n})\n```\n\n----------------------------------------\n\nTITLE: Defining peerDependencies with multiple versions in package.json (JSON)\nDESCRIPTION: This snippet shows how to declare peer dependencies, allowing for multiple compatible versions of Gatsby. It uses the `||` operator to specify that the plugin works with either Gatsby 5 or Gatsby 6. This ensures that users with different Gatsby versions can utilize the plugin.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/creating-a-source-plugin/part-8/index.mdx#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"peerDependencies\": {\n    \"gatsby\": \"^5.0.0 || ^6.0.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Add E2E Test Script to package.json\nDESCRIPTION: This code adds a `test:e2e` script to the `package.json` file. This script uses `start-server-and-test` to run Gatsby's development server and Cypress together. `CYPRESS_SUPPORT` environment variable enables test utilities inside Gatsby.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/testing/end-to-end-testing.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"scripts\": {\n    \"develop\": \"gatsby develop\",\n    \"cy:open\": \"cypress open --browser chrome --e2e\",\n    \"test:e2e\": \"CYPRESS_SUPPORT=y start-server-and-test develop http://localhost:8000 cy:open\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: gatsby-plugin-emotion Babel Preset Configuration\nDESCRIPTION: This snippet shows how to configure the babel preset with the `jsxRuntime` option in the `gatsby-config.js` file when using `gatsby-plugin-emotion`. It ensures the correct Babel preset is used with the JSX runtime option.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/v4.4/index.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngatsby-config.js\n```\n\n----------------------------------------\n\nTITLE: Updating fs-extra dependency in gatsby-source-filesystem\nDESCRIPTION: This commit updates the `fs-extra` dependency to version ^10.1.0 to address issue #34976 in the gatsby-source-filesystem package. This update likely incorporates bug fixes or performance enhancements related to file system operations.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-filesystem/CHANGELOG.md#_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Fix: Add plugin options to gatsby-plugin-google-gtag\nDESCRIPTION: This code snippet addresses a bug by adding plugin options to the gatsby-plugin-google-gtag package. It ensures that the plugin can be configured with various options, enhancing its functionality and flexibility.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-google-gtag/CHANGELOG.md#_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n#### Bug Fixes\n\n- Add plugin options [#37953](https://github.com/gatsbyjs/gatsby/issues/37953) ([c1f0bbf](https://github.com/gatsbyjs/gatsby/commit/c1f0bbfb3e74c12bbcf0413783d0b30975fdfc6a))\n```\n\n----------------------------------------\n\nTITLE: Testing Plugin Options Schema (Before) - __tests__/gatsby-node.js\nDESCRIPTION: Tests the plugin options schema to ensure it rejects unknown options. This is the 'before' state for a migration example using `testPluginOptionsSchema` from `gatsby-plugin-utils`, expecting errors for invalid options.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/v4.6/index.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { testPluginOptionsSchema } from \"gatsby-plugin-utils\"\nimport { pluginOptionsSchema } from \"../gatsby-node\"\n\nit(`should not accept any options`, async () => {\n  const expectedErrors = [`\"optionA\" is not allowed`]\n\n  const { errors } = await testPluginOptionsSchema(\n    pluginOptionsSchema,\n    {\n      optionA: `This options shouldn't exist`,\n    }\n  )\n\n  expect(errors).toEqual(expectedErrors)\n})\n```\n\n----------------------------------------\n\nTITLE: Check for outdated packages\nDESCRIPTION: This command checks for outdated Gatsby related packages. The output will allow you to compare \"Wanted\" and \"Latest\" versions to update `package.json` file manually.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v1-to-v2.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nnpm outdated\n```\n\n----------------------------------------\n\nTITLE: Skip Markdown Remark Query GraphQL\nDESCRIPTION: This query retrieves MarkdownRemark nodes, skipping a specified number of initial nodes. The `skip` argument is used for pagination. It fetches the total count and frontmatter title for each node.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/graphql-reference/content/queries.md#_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  allMarkdownRemark(skip: 3) {\n    totalCount\n    edges {\n      node {\n        frontmatter {\n          title\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating PostCSS Loader to v7\nDESCRIPTION: This code snippet documents the update of `postcss-loader` to version 7 for `gatsby-plugin-postcss`. This upgrade likely addresses compatibility issues, performance improvements, or new features introduced in `postcss-loader` v7.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-postcss/CHANGELOG.md#_snippet_8\n\nLANGUAGE: none\nCODE:\n```\nupdate dependency postcss-loader to v7 for gatsby-plugin-postcss [#33506](https://github.com/gatsbyjs/gatsby/issues/33506) ([bfe7ee0](https://github.com/gatsbyjs/gatsby/commit/bfe7ee0bfea48472879a1bfc47a444d5631bb8dc))\n```\n\n----------------------------------------\n\nTITLE: Fixing Custom DataLayer Name\nDESCRIPTION: This commit fixes a bug where the custom dataLayer name was not being properly utilized. By addressing this issue, developers can now reliably specify a custom name for the dataLayer used by Google Tag Manager, ensuring proper data tracking and analysis.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-google-tagmanager/CHANGELOG.md#_snippet_17\n\nLANGUAGE: text\nCODE:\n```\n**gatsby-plugin-google-tagmanager:** fix custom dataLayer name ([#16304](https://github.com/gatsbyjs/gatsby/issues/16304)) ([6d097a5](https://github.com/gatsbyjs/gatsby/commit/6d097a5))\n```\n\n----------------------------------------\n\nTITLE: Query MDX data (title, date and id)\nDESCRIPTION: This GraphQL query fetches the `title`, formatted `date` and `id` from the `frontmatter` of all MDX nodes. It also retrieves the unique `id` field from each node which is added by Gatsby, using the `allMdx` field to retrieve data.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-5/index.mdx#_snippet_8\n\nLANGUAGE: graphql\nCODE:\n```\nquery MyQuery {\n  allMdx {\n    nodes {\n      frontmatter {\n        date(formatString: \"MMMM D, YYYY\")\n        title\n      }\n      id\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Bump node version - JavaScript\nDESCRIPTION: This snippet showcases a feature enhancement where the minimum required Node.js version for Gatsby was increased to 10.13.0.  This change ensures compatibility with newer JavaScript features and improved performance. The commit hash associated with this change is 83d681a.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-faker/CHANGELOG.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n**gatsby:** bump node min version to 10.13.0 ([#22400](https://github.com/gatsbyjs/gatsby/issues/22400)) ([83d681a](https://github.com/gatsbyjs/gatsby/commit/83d681a))\n```\n\n----------------------------------------\n\nTITLE: Updating Babel Monorepo\nDESCRIPTION: This commit updates the Babel monorepo dependency to a newer version within the GatsbyJS project. The motivation is referenced by its GitHub issue number. Updating Babel ensures compatibility with the latest JavaScript features and improvements in compilation performance.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-dev-cli/CHANGELOG.md#_snippet_2\n\nLANGUAGE: Text\nCODE:\n```\nupdate babel monorepo [#31143](https://github.com/gatsbyjs/gatsby/issues/31143) ([701ab2f](https://github.com/gatsbyjs/gatsby/commit/701ab2f6690c3f1bbaf60cf572513ea566cc9ec9))\n```\n\n----------------------------------------\n\nTITLE: Adding Aria-hidden Attribute - Bug Fix\nDESCRIPTION: This commit addresses a bug by adding the aria-hidden attribute to an element. This improves accessibility by ensuring that the element is properly hidden from assistive technologies.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-google-tagmanager/CHANGELOG.md#_snippet_14\n\nLANGUAGE: diff\nCODE:\n```\ndiff --git a/packages/gatsby-plugin-google-tagmanager/src/index.js b/packages/gatsby-plugin-google-tagmanager/src/index.js\nindex 6f76c9f..76a57da 100644\n--- a/packages/gatsby-plugin-google-tagmanager/src/index.js\n+++ b/packages/gatsby-plugin-google-tagmanager/src/index.js\n@@ -71,6 +71,7 @@ exports.onRenderBody = ({ setHeadComponents }, pluginOptions) => {\n             src: `https://www.googletagmanager.com/ns.html?id=${pluginOptions.id}`,\n             height: `0`,\n             width: `0`,\n+            \"aria-hidden\": `true`,\n             style: {\n               display: `none`,\n               visibility: `hidden`,\n\n```\n\n----------------------------------------\n\nTITLE: Updating Babel Monorepo\nDESCRIPTION: This snippet updates the babel monorepo within the gatsby-plugin-emotion package. It addresses issue #27528. Keeping babel up to date ensures compatibility with the latest JavaScript syntax and features.  No explicit dependencies are shown, but it relies on the babel ecosystem.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-emotion/CHANGELOG.md#_snippet_7\n\nLANGUAGE: Other\nCODE:\n```\nupdate babel monorepo [#27528](https://github.com/gatsbyjs/gatsby/issues/27528) ([539dbb0](https://github.com/gatsbyjs/gatsby/commit/539dbb09166e346a6cee568973d2de3d936e8ef3))\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Fragment in React Component (JSX)\nDESCRIPTION: This code snippet demonstrates how to define a GraphQL fragment within a React component using a named export. The fragment is named `MarkdownFrontmatter` and specifies the fields to retrieve from the `MarkdownRemark` node's `frontmatter` object, including `path`, `title`, and a formatted `date`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/conceptual/graphql-concepts.md#_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nexport const markdownFrontmatterFragment = graphql`\n  fragment MarkdownFrontmatter on MarkdownRemark {\n    frontmatter {\n      path\n      title\n      date(formatString: \"MMMM DD, YYYY\")\n    }\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: Enabling Webpack Persistent Caching in gatsby-config.js (JavaScript)\nDESCRIPTION: This code snippet shows how to enable webpack persistent caching in a Gatsby project. By setting the `PRESERVE_WEBPACK_CACHE` flag to `true` in `gatsby-config.js`, webpack can reuse the results of previous compilations, which significantly speeds up subsequent builds. This feature is experimental.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/v3.4/index.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// In your gatsby-config.js\nmodule.exports = {\n  // your existing config\n  flags: {\n    PRESERVE_WEBPACK_CACHE: true,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Starting activityTimer in sourceNodes - TypeScript\nDESCRIPTION: Starts the `activityTimer` instance before the `fetchGraphQL` call to accurately measure the duration of the data sourcing process.  This ensures that the timer runs until `end()` is called, providing a complete timing of the operation.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/creating-a-source-plugin/part-4/index.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Imports\n\nexport const sourceNodes: GatsbyNode[`sourceNodes`] = async (gatsbyApi) => {\n  const { reporter } = gatsbyApi\n\n  const sourcingTimer = reporter.activityTimer(`Sourcing from plugin API`)\n  // highlight-next-line\n  sourcingTimer.start()\n\n  // Rest of sourceNodes\n}\n\n// Rest of file\n```\n\n----------------------------------------\n\nTITLE: Updating GraphQL query in gatsby-node.js to use allMdx\nDESCRIPTION: This snippet updates the GraphQL query in `gatsby-node.js` from `allMarkdownRemark` to `allMdx` to fetch MDX nodes instead of Markdown nodes. It also adds a query for `internal.contentFilePath` which is needed for createPage.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/routing/migrate-remark-to-mdx.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst result = await graphql(\n  `\n    {\n-     allMarkdownRemark(\n+     allMdx(\n        sort: { frontmatter: { date: DESC }}\n        limit: 1000\n      ) {\n        nodes {\n          id\n          fields {\n            slug\n          }\n+         internal {\n+           contentFilePath\n+         }\n        }\n      }\n    }\n`\n```\n\n----------------------------------------\n\nTITLE: Bumping Node.js min version to 10.13.0\nDESCRIPTION: This commit updates the minimum required Node.js version for Gatsby to 10.13.0. This change allows Gatsby to leverage newer Node.js features and optimizations, potentially improving performance and compatibility with newer JavaScript syntax. This update may require users to upgrade their Node.js version to continue using Gatsby.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/babel-preset-gatsby/CHANGELOG.md#_snippet_10\n\n\n\n----------------------------------------\n\nTITLE: Specify Node.js Version using .nvmrc\nDESCRIPTION: This snippet demonstrates how to specify a Node.js version using a `.nvmrc` file.  Gatsby Cloud will read the Node.js version from this file during builds and previews. The version must be a valid Node.js version string. This method requires the user to create a file in the root directory of the project named `.nvmrc`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/cloud/set-node-version.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nv18.9.0\n```\n\n----------------------------------------\n\nTITLE: Shared Component for Wrap Page Element\nDESCRIPTION: This shared component provides a reusable function to wrap the page element with a script. This component is meant to be imported and used in both `gatsby-ssr.js` and `gatsby-browser.js` to avoid code duplication. Relies on the `gatsby` package and its `<Script>` component.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/built-in-components/gatsby-script.md#_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\"\nimport { Script } from \"gatsby\"\n\nexport const wrapPageElement = ({ element }) => {\n  return (\n    <>\n      {element}\n      <Script src=\"https://my-example-script\" />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Updating PostCSS Loader Dependency to ^7.1.0\nDESCRIPTION: This code snippet documents the updating of the `postcss-loader` dependency to version `^7.1.0` within the `gatsby-plugin-postcss` package. This is a bug fix that likely addresses incompatibilities or leverages enhancements in the specified `postcss-loader` version.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-postcss/CHANGELOG.md#_snippet_4\n\nLANGUAGE: none\nCODE:\n```\nupdate dependency postcss-loader to ^7.1.0 for gatsby-plugin-postcss [#37863](https://github.com/gatsbyjs/gatsby/issues/37863) ([92ca951](https://github.com/gatsbyjs/gatsby/commit/92ca9514c77df6754e5e032f865f16864b635e00))\n```\n\n----------------------------------------\n\nTITLE: Fetching Site Title in Layout Component\nDESCRIPTION: This code block demonstrates how to use the `useStaticQuery` hook to fetch site metadata within the Layout component. A GraphQL query is used to retrieve the site title.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-4/index.mdx#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as React from 'react'\nimport { Link, useStaticQuery, graphql } from 'gatsby'\nimport {\n  container,\n  heading,\n  navLinks,\n  navLinkItem,\n  navLinkText\n} from './layout.module.css'\n\nconst Layout = ({ pageTitle, children }) => {\n  // highlight-start\n  const data = useStaticQuery(graphql`\n    query {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `)\n  // highlight-end\n\n  return (\n    // ...\n  )\n}\n\nexport default Layout\n```\n\n----------------------------------------\n\nTITLE: Status Code 451 Redirect in gatsby-node.js\nDESCRIPTION: This snippet demonstrates how to return a 451 status code for users located in the United States (us) and Canada (ca) from all paths. Requires Gatsby's `createPages` API and the `createRedirect` action.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/cloud/working-with-redirects-and-rewrites.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ncreateRedirect({\n  fromPath: `/*`,\n  toPath: `/`,\n  statusCode: 451,\n  conditions: {\n    country: [`us`, `ca`],\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Deferred Static Generation\nDESCRIPTION: Demonstrates how to configure Deferred Static Generation (DSG) within a File System Route API template by exporting an async `config` function that returns an object with the `defer` key set to `true`. This tells Gatsby to defer the page generation to the first user request.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/rendering-options/deferred-static-generation.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nexport async function config() {\n  // Optionally use GraphQL here\n\n  return ({ params }) => {\n    return {\n      defer: true,\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing fieldName & fieldValue with name & value\nDESCRIPTION: This snippet demonstrates how to replace the `fieldName` and `fieldValue` arguments in `createNodeField` with `name` and `value`. This change affects how node fields are created within the `onCreateNode` API in `gatsby-node.js`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v2-to-v3.md#_snippet_12\n\nLANGUAGE: JSX\nCODE:\n```\nexports.onCreateNode = ({ node, actions }) => {\n  const { createNodeField } = actions\n\n  createNodeField({\n    node,\n-   fieldName: \"slug\",\n-   fieldValue: \"my-custom-slug\",\n+   name: \"slug\",\n+   value: \"my-custom-slug\",\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Gatsby Plugin with Options\nDESCRIPTION: This code snippet shows how to configure a Gatsby plugin with custom options using a configuration object within the `plugins` array of the `gatsby-config.js` file. The `resolve` property specifies the plugin name, and the `options` property contains a configuration object with key-value pairs.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/plugins-and-themes/using-a-plugin-in-your-site.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  siteMetadata: {\n    title: \"My Cool Website\",\n  },\n  plugins: [\n    // highlight-start\n    {\n      resolve: \"gatsby-plugin-sitemap\",\n      options: {\n        output: `/sitemap`,\n      },\n    },\n    // highlight-end\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Typing Gatsby node API with GatsbyNode\nDESCRIPTION: This code demonstrates how to type Gatsby Node APIs in `gatsby-node.ts` using the `GatsbyNode` type from Gatsby. It shows how to type the `sourceNodes` API.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/custom-configuration/typescript.md#_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport type { GatsbyNode } from \"gatsby\"\n\ntype Person = {\n  id: number\n  name: string\n  age: number\n}\n\nexport const sourceNodes: GatsbyNode[\"sourceNodes\"] = async ({\n  actions,\n  createNodeId,\n  createContentDigest,\n}) => {\n  const { createNode } = actions\n\n  const data = await getSomeData()\n\n  data.forEach((person: Person) => {\n    const node = {\n      ...person,\n      parent: null,\n      children: [],\n      id: createNodeId(`person__${person.id}`),\n      internal: {\n        type: \"Person\",\n        content: JSON.stringify(person),\n        contentDigest: createContentDigest(person),\n      },\n    }\n\n    createNode(node)\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using MDXProvider for shortcodes\nDESCRIPTION: Demonstrates wrapping the component with `MDXProvider` to make the specified components globally available within MDX documents.  This eliminates the need to import them individually in each MDX file.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/routing/mdx.md#_snippet_8\n\nLANGUAGE: JSX\nCODE:\n```\nimport React from \"react\"\n// highlight-start\nimport { MDXProvider } from \"@mdx-js/react\"\nimport { Chart, Pullquote } from \"./ui\"\nimport { Message } from \"theme-ui\"\n// highlight-end\n\nconst shortcodes = { Chart, Pullquote, Message } // highlight-line\n\nexport default function Layout({ children }) {\n  return (\n    <MDXProvider components={shortcodes}>{children}</MDXProvider> // highlight-line\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Bumping Minimum Node Version\nDESCRIPTION: This snippet shows a feature addition where the minimum required Node.js version for Gatsby has been bumped to 10.13.0. This ensures that users are using a supported version of Node.js with necessary features and security updates.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-medium/CHANGELOG.md#_snippet_4\n\nLANGUAGE: Diff\nCODE:\n```\n- **gatsby:** bump node min version to 10.13.0 ([#22400](https://github.com/gatsbyjs/gatsby/issues/22400)) ([83d681a](https://github.com/gatsbyjs/gatsby/commit/83d681a))\n```\n\n----------------------------------------\n\nTITLE: Wrapping ignore pattern in quotes in gatsby-remark-images-contentful (JavaScript)\nDESCRIPTION: This commit fixes a bug where the ignore pattern was not wrapped in quotes. Wrapping the ignore pattern in quotes ensures that the pattern is correctly parsed and applied during file processing. The fix prevents potential errors related to incorrect ignore pattern matching.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-images-contentful/CHANGELOG.md#_snippet_29\n\nLANGUAGE: JavaScript\nCODE:\n```\nwrap ignore pattern in quotes ([#23176](https://github.com/gatsbyjs/gatsby/issues/23176)) ([7563db6](https://github.com/gatsbyjs/gatsby/commit/7563db6))\n```\n\n----------------------------------------\n\nTITLE: JavaScript Language Extension Definition\nDESCRIPTION: This code shows how to extend an existing language (JavaScript) by adding new tokens and rules using the `languageExtensions` option. The `language`, `extend`, `definition`, and `insertBefore` options are used to define the new language extension.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-prismjs/README.md#_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\nlanguageExtensions: [\n  {\n    language: \"superscript\",\n    extend: \"javascript\",\n    definition: {\n      superscript_types: /(SuperType)/,\n    },\n    insertBefore: {\n      function: {\n        superscript_keywords: /(superif|superelse)/,\n      },\n    },\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Import and Use gatsby-link JSX\nDESCRIPTION: This code snippet demonstrates how to import and use the gatsby-link component in place of react-router's Link component. It covers basic Link usage, NavLink usage (with activeClassName), and the use of the `exact` prop as a replacement for IndexLink.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v0-to-v1.md#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\nimport Link from 'gatsby-link'\n\n// Equivalent to react-router's <Link>\n<Link to=\"/page-2/\">Page 2</Link>\n\n// Equivalent to react-router's <NavLink>\n<Link to=\"/page-2/\" activeClassName=\"selected\">Page 2</Link>\n\n// `exact` prop replaces <IndexLink> from react-router v3\n<Link to=\"/\" exact>Home</Link>\n```\n\n----------------------------------------\n\nTITLE: Filter Results with GraphQL\nDESCRIPTION: This query demonstrates how to filter results using the `filter` argument and the `ne` (not equals) operator. It retrieves results that have a title. It uses the `allMarkdownRemark` node with a filter that only selects nodes where the title is not an empty string.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/graphql-reference.md#_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  allMarkdownRemark(filter: { frontmatter: { title: { ne: \"\" } } }) {\n    totalCount\n    edges {\n      node {\n        frontmatter {\n          title\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Git Commands for Deploying Changes\nDESCRIPTION: These shell commands are used to add, commit, and push changes to a Git repository.  They prepare the changes, create a commit message, and upload the changes to a remote repository (like GitHub), triggering a rebuild and deployment on platforms like Gatsby Cloud.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-2/index.mdx#_snippet_24\n\nLANGUAGE: Shell\nCODE:\n```\ngit add .\ngit commit -m \"Finished Gatsby Tutorial Part 2\"\ngit push\n```\n\n----------------------------------------\n\nTITLE: Setting Graph Size with Custom SVG Attributes\nDESCRIPTION: This snippet shows how to overwrite the default size attributes by passing custom SVG attributes like `width` and `height`. This allows for more direct control over the SVG's dimensions, overriding any Graphviz attributes that might conflict.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/using-remark/src/pages/2019-02-06---graphviz/index.md#_snippet_4\n\nLANGUAGE: dot\nCODE:\n```\ndigraph graphname {\n  a -> b;\n  b -> c;\n  a -> c;\n}\n```\n\n----------------------------------------\n\nTITLE: Receiving Location State JSX\nDESCRIPTION: This JSX code shows how to access the state passed to a component via the `location` prop. It checks for the presence of a `modal` property in the `state` object and conditionally renders a modal or regular content.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/location-data-from-props.md#_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\nconst SomePageComponent = ({ location }) => {\n  const { state = {} } = location\n  const { modal } = state\n  return modal ? (\n    <dialog className=\"modal\">I'm a modal of Some Page Component!</dialog>\n  ) : (\n    <div>Welcome to the Some Page Component!</div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Ensuring Tests Directory is Ignored in Gatsby\nDESCRIPTION: This code snippet describes a fix to ensure that the `**tests**` directory is properly ignored by gatsby-plugin-page-creator. This prevents test files from being mistakenly processed as pages, resolving issue #9629.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-page-creator/CHANGELOG.md#_snippet_46\n\nLANGUAGE: Text\nCODE:\n```\n**gatsby-plugin-page-creator:** ensure that **tests** directory is actually ignored ([#9720](https://github.com/gatsbyjs/gatsby/issues/9720)) ([a6d17d8](https://github.com/gatsbyjs/gatsby/commit/a6d17d8)), closes [#9629](https://github.com/gatsbyjs/gatsby/issues/9629)\n```\n\n----------------------------------------\n\nTITLE: Validating rootPath to Follow Naming Conventions JavaScript\nDESCRIPTION: This snippet adds validation to the `rootPath` in gatsby-cli to ensure it follows the required naming conventions.  This likely enforces specific rules for naming new Gatsby project directories. By validating the `rootPath`, gatsby-cli helps ensure consistency and prevents potential issues caused by invalid directory names.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-cli/CHANGELOG.md#_snippet_34\n\nLANGUAGE: JavaScript\nCODE:\n```\n68ac45f\n```\n\n----------------------------------------\n\nTITLE: Specifying Source Instance Name in Configuration\nDESCRIPTION: This code snippet shows how to specify the `name` property in the `gatsby-config.js` file. This `name` property is used to identify the source instance, which can then be used in GraphQL queries to filter for files from that specific source.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/sourcing-data/sourcing-from-the-filesystem.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  resolve: `gatsby-source-filesystem`,\n  options: {\n    path: `${__dirname}/src`,\n    name: `src`,\n  },\n},\n```\n\n----------------------------------------\n\nTITLE: Listing Outdated npm Dependencies\nDESCRIPTION: This snippet shows the command to list outdated dependencies in your project using npm.  This allows you to compare the currently installed versions with the wanted and latest versions available in the registry. This command is used to identify which gatsby plugins to update.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v2-to-v3.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nnpm outdated\n```\n\n----------------------------------------\n\nTITLE: List Gatsby CLI commands\nDESCRIPTION: This command lists all available Gatsby CLI commands and their options. It is helpful for understanding the capabilities of the Gatsby CLI.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/cheat-sheet.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngatsby --help\n```\n\n----------------------------------------\n\nTITLE: Installing babel-preset-gatsby-package (Shell)\nDESCRIPTION: This command installs the babel-preset-gatsby-package as a development dependency using npm. It prepares the project to use the preset for Babel transformations.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/babel-preset-gatsby-package/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --dev babel-preset-gatsby-package\n```\n\n----------------------------------------\n\nTITLE: Fixing HTTPS asset download in gatsby-source-contentful (JavaScript)\nDESCRIPTION: This commit fixes a bug in gatsby-source-contentful where assets were being downloaded using HTTP instead of HTTPS. This change ensures that all assets are downloaded securely.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-contentful/CHANGELOG.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nb49f74b\n```\n\n----------------------------------------\n\nTITLE: Running Gatsby Benchmark Script with Environment Variables\nDESCRIPTION: This command executes the Gatsby benchmark script using `yarn`. It sets the `N` environment variable to specify the number of pages to generate (e.g., 1000) and the `M` variable to define the memory limit for Node.js (e.g., 2GB). The script cleans up generated files from previous runs, generates new pages, and then performs `gatsby clean` and `gatsby build` operations.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/benchmarks/gabe-csv-markdown/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nN=1000 M=2 yarn bench\n```\n\n----------------------------------------\n\nTITLE: Updating Babel Monorepo in Gatsby\nDESCRIPTION: This snippet describes the update of the Babel monorepo in the Gatsby project. It is part of the chores section for version 3.4.0 of the gatsby-remark-code-repls package.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-code-repls/CHANGELOG.md#_snippet_17\n\n\n\n----------------------------------------\n\nTITLE: Example diff for sort-and-aggr-graphql codemod\nDESCRIPTION: This diff illustrates the transformation applied by the `sort-and-aggr-graphql` codemod. It updates GraphQL queries to use the new syntax for sorting data.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-codemods/README.md#_snippet_5\n\nLANGUAGE: Diff\nCODE:\n```\n{ \n- allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) { \n+ allMarkdownRemark(sort: { frontmatter: { date: DESC } }) { \n    nodes { \n      ...fields \n    } \n  } \n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Line Break and Paragraph Demo\nDESCRIPTION: This markdown code snippet showcases the difference between single and double newlines in Markdown. Double newlines create separate paragraphs, while single newlines within a paragraph result in line breaks.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/using-remark/src/pages/2016-04-15---hello-world-kitchen-sink/index.md#_snippet_10\n\nLANGUAGE: Markdown\nCODE:\n```\nHere's a line for us to start with.\n\nThis line is separated from the one above by two newlines, so it will be a *separate paragraph*.\n\nThis line is also a separate paragraph, but...\nThis line is only separated by a single newline, so it's a separate line in the *same paragraph*.\n```\n\n----------------------------------------\n\nTITLE: Adding better-opn as dependency to gatsby-cli JavaScript\nDESCRIPTION: This snippet adds `better-opn` as a dependency to `gatsby-cli`. The purpose of this change is to improve the way gatsby-cli opens URLs in the user's default browser. `better-opn` likely provides a more reliable or feature-rich way of opening URLs compared to the previous implementation.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-cli/CHANGELOG.md#_snippet_20\n\nLANGUAGE: JavaScript\nCODE:\n```\nd855e50\n```\n\n----------------------------------------\n\nTITLE: Gatsby Index Page Component\nDESCRIPTION: This is the basic index page component created by the hello world starter. It imports React and exports a functional component that returns a simple \"Hello world!\" message within a div.\n\nDependencies: React.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/porting-an-html-site-to-gatsby.md#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\"\n\nexport default function Home() {\n  return <div>Hello world!</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Queries using eq filter\nDESCRIPTION: These Javascript examples show query structures using the 'eq' filter with various sort configurations. They use index efficiently, with optional filters on additional fields, enhancing query performance.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby/src/datastore/lmdb/query/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{ filter: { a: { eq: \"foo\" } }, sort: { fields: [\"a\"] } }\n{ filter: { a: { eq: \"foo\" } }, sort: { fields: [\"a\", \"b\"] } }\n{ filter: { a: { eq: \"foo\" } }, sort: { fields: [\"b\"] } }\n```\n\n----------------------------------------\n\nTITLE: Specifying ownerNodeId in createPage API (JavaScript)\nDESCRIPTION: Shows how to specify which node owns which page using the `ownerNodeId` setting in the `createPage` API. This is used to ensure Content Sync routes to the desired page when content lives on multiple pages.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/conceptual/content-sync.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Running Gatsby Benchmark\nDESCRIPTION: This command runs the Gatsby benchmark with specified parameters. `N` determines the number of pages to generate, and `M` sets the memory limit for the Node.js process. It will clean the previous build, generate new pages, and then run `gatsby build`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/benchmarks/gabe-fs-markdown-route-api/README.md#_snippet_0\n\nLANGUAGE: Shell Script\nCODE:\n```\nN=1000 M=2 yarn bench\n```\n\n----------------------------------------\n\nTITLE: Babel Register Configuration (JavaScript)\nDESCRIPTION: This JavaScript code shows how to configure `@babel/register` to provide runtime support for new JavaScript syntax or TypeScript in worker processes during unit testing. It specifies the file extensions to transpile, the location of the Babel configuration file, and directories to ignore. This setup allows worker processes to execute code that requires transpilation.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-worker/README.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// spawned process won't use jest config (or other testing framework equivalent) to support TS, so we need to add support ourselves\nrequire(`@babel/register`)({\n  extensions: [`.js`, `.ts`],\n  configFile: require.resolve(relativePathToYourBabelConfig),\n  ignore: [/node_modules/],\n})\n```\n\n----------------------------------------\n\nTITLE: CI Configuration Scripts in package.json\nDESCRIPTION: This code shows example scripts in `package.json` for running Cypress in a Continuous Integration (CI) environment. It includes scripts to build, serve, and run Cypress tests using `gatsby build` and `gatsby serve`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/testing/end-to-end-testing.md#_snippet_7\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"scripts\": {\n    \"build\": \"gatsby build\",\n    \"serve\": \"gatsby serve\",\n    \"cy:run\": \"CYPRESS_baseUrl=http://localhost:9000 cypress run --browser chrome\",\n    \"test:e2e:ci\": \"CYPRESS_SUPPORT=y npm run build && start-server-and-test serve http://localhost:9000 cy:run\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Upgrading to Remark 13\nDESCRIPTION: This snippet denotes a feature that upgrades the Remark version to 13.  This brings in new functionalities, performance improvements, and potentially breaking changes for the gatsby-remark-custom-blocks plugin.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-custom-blocks/CHANGELOG.md#_snippet_7\n\nLANGUAGE: Text\nCODE:\n```\nupgrade to remark 13 [#29678](https://github.com/gatsbyjs/gatsby/issues/29678) ([a5b5cf8](https://github.com/gatsbyjs/gatsby/commit/a5b5cf8379b7c105119e348d41723f3b2bd7b527))\n```\n\n----------------------------------------\n\nTITLE: Gatsby Config - Local Plugins (JavaScript)\nDESCRIPTION: This JavaScript code snippet shows the `gatsby-config.js` file, which configures the Gatsby site and specifies which plugins to use. It demonstrates including local plugins from the plugins folder and from outside the plugins folder using `require.resolve`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/using-multiple-local-plugins/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  siteMetadata: {\n    title: `Using Multiple Local Plugins`,\n    description: `An example Gatsby site utilizing multiple local plugins`,\n    author: `@gatsbyjs`,\n  },\n  plugins: [\n    `gatsby-plugin-react-helmet`,\n    // including a plugin from the plugins folder\n    `gatsby-plugin-console-log-a`,\n    {\n      // including a plugin from outside the plugins folder needs the path to it\n      resolve: require.resolve(`../gatsby-plugin-console-log-b`),\n    },\n    // including a plugin with yarn or npm link\n    //   in order for this plugin to be found when you run gatsby develop\n    //   you first need to run `npm link ../gatsby-plugin-console-log-c` in the `gatsby-site-using-local-plugins` root folder\n    `gatsby-plugin-console-log-c`, // highlight-line\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Gatsby Img Component with Props\nDESCRIPTION: This JSX snippet demonstrates how to use the `Img` component from `gatsby-image` with various props. These props control aspects like image data, alt text, fade-in effect, CSS classes, placeholder styling, event handlers, custom HTML tag, and loading behavior.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/built-in-components/gatsby-image.md#_snippet_10\n\nLANGUAGE: JSX\nCODE:\n```\n<Img\n  fluid={data.file.childImageSharp.fluid}\n  alt=\"Cat taking up an entire chair\"\n  fadeIn={false}\n  className=\"customImg\"\n  placeholderStyle={{ `backgroundColor`: `black` }}\n  onLoad={() => {\n    // do loading stuff\n  }}\n  onStartLoad={({ wasCached }) => {\n    // do stuff on start of loading\n    // optionally with the wasCached boolean parameter\n  }}\n  onError={(error) => {\n    // do error stuff\n  }}\n  Tag=\"custom-image\"\n  loading=\"eager\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Updating chalk dependency in gatsby-remark-images-contentful\nDESCRIPTION: This code snippet represents a bug fix where the chalk dependency was updated to version ^4.1.2. This update addresses potential security vulnerabilities or bugs related to console output formatting.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-images-contentful/CHANGELOG.md#_snippet_25\n\nLANGUAGE: None\nCODE:\n```\nupdate dependency chalk to ^4.1.2 [#32576](https://github.com/gatsbyjs/gatsby/issues/32576) ([5c4e109](https://github.com/gatsbyjs/gatsby/commit/5c4e109313cd1b59f814332fdb4dfdcaf1faed1a))\n```\n\n----------------------------------------\n\nTITLE: Webpack Config for fs Resolution\nDESCRIPTION: This code snippet configures Webpack to prevent errors related to the `fs` module in a Gatsby project. It sets the `fs` property to `false` within the `resolve.fallback` configuration, preventing the inclusion of Node.js filesystem functions in the client-side bundle.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/local-development/troubleshooting-common-errors.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexports.onCreateWebpackConfig = ({ actions }) => {\n  actions.setWebpackConfig({\n    resolve: {\n      fallback: {\n        fs: false // highlight-line\n      }\n    }\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring gatsby-plugin-sass for ES Module compatibility\nDESCRIPTION: This snippet demonstrates how to configure `gatsby-plugin-sass` to work with ES Modules when importing CSS Modules. The `cssLoaderOptions` are updated to disable ES Module behavior, allowing for compatibility with existing Sass stylesheets.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v2-to-v3.md#_snippet_18\n\nLANGUAGE: diff\nCODE:\n```\nmodule.exports = {\n  plugins: [\n-    `gatsby-plugin-sass`,\n+    {\n+      resolve: `gatsby-plugin-sass`,\n+      options: {\n+       cssLoaderOptions: {\n+         esModule: false,\n+         modules: {\n+           namedExport: false,\n+         },\n+       },\n+     },\n+    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Babel monorepo in Gatsby\nDESCRIPTION: Updates the Babel monorepo. This chore keeps the project up-to-date with the latest Babel version, which may include new features, performance improvements, or bug fixes for JavaScript transpilation.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-catch-links/CHANGELOG.md#_snippet_7\n\n\n\n----------------------------------------\n\nTITLE: Using ternary operator to define module conditionally\nDESCRIPTION: This code shows how to use a ternary operator to conditionally define a module based on the availability of the `window` object. This approach allows the code to handle cases where the module needs to be defined regardless of the environment, providing a fallback value (null) when `window` is not available.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/debugging-html-builds.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst module = typeof window !== `undefined` ? require(\"module\") : null\n```\n\n----------------------------------------\n\nTITLE: CSS Module Definition (CSS)\nDESCRIPTION: Illustrates a CSS Module file defining styles for a container component. CSS Modules generate unique class names to prevent naming collisions and improve CSS encapsulation.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/styling/built-in-css.md#_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.container {\n  margin: 3rem auto;\n  max-width: 600px;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Typography Configuration\nDESCRIPTION: This code shows a basic Typography.js configuration file (`src/utils/typography.js`). It defines the base font size, line height, and font families for headers and body text.  It exports the configured `typography` object.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/using-typography-js.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport Typography from \"typography\"\n\nconst typography = new Typography({\n  baseFontSize: \"18px\",\n  baseLineHeight: 1.666,\n  headerFontFamily: [\n    \"Avenir Next\",\n    \"Helvetica Neue\",\n    \"Segoe UI\",\n    \"Helvetica\",\n    \"Arial\",\n    \"sans-serif\",\n  ],\n  bodyFontFamily: [\"Georgia\", \"serif\"],\n})\n\nexport default typography\n```\n\n----------------------------------------\n\nTITLE: Chore: Allow React experimental versions\nDESCRIPTION: This code snippet updates the configuration to allow the use of experimental versions of React and ReactDOM. This can enable developers to test and utilize the latest features and improvements from React's experimental builds within the gatsby-plugin-google-gtag package.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-google-gtag/CHANGELOG.md#_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\n#### Chores\n\n- allow react/react-dom@experimental [#36533](https://github.com/gatsbyjs/gatsby/issues/36533) ([7ef4a3f](https://github.com/gatsbyjs/gatsby/commit/7ef4a3fe080d45e9edaff9f1d4deebd12a00ddbd))\n```\n\n----------------------------------------\n\nTITLE: Enable Lazy Page Bundling\nDESCRIPTION: This command enables lazy page bundling in development, which can significantly improve the startup time of `gatsby develop`, especially for larger sites.  Webpack only compiles page components when they are first visited, reducing the initial compilation overhead.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/v2.27/index.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nGATSBY_EXPERIMENT_DEVJS_LAZY=true gatsby develop\n```\n\n----------------------------------------\n\nTITLE: Peer Dependencies in Theme package.json\nDESCRIPTION: Defines the peer dependencies within the gatsby-theme-events/package.json file.  Peer dependencies ensure compatibility between the theme and the site using it.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/building-a-theme.md#_snippet_7\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"peerDependencies\": {\n    \"gatsby\": \"^4.15.1\",\n    \"react\": \"^18.1.0\",\n    \"react-dom\": \"^18.1.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring gatsby-plugin-s3 with URL Object\nDESCRIPTION: Configures the `gatsby-plugin-s3` plugin using a URL object to define the protocol and hostname, allowing for a single source of truth for the site's URL in the Gatsby config.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/previews-deploys-hosting/deploying-to-s3-cloudfront.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst siteAddress = new URL(\"https://www.example.com\")\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n    resolve: `gatsby-plugin-s3`,\n    options: {\n        bucketName: \"my-example-bucket\",\n        protocol: siteAddress.protocol.slice(0, -1),\n        hostname: siteAddress.hostname,\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Configure package.json for minor/patch updates\nDESCRIPTION: This example shows how to configure the package.json file to allow updates for both patch and minor releases by using the caret (^) symbol before the version number.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/upgrade-gatsby-and-dependencies.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"dependencies\"{\n  \"gatsby\": \"^5.0.0\",\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Invalid Plugins Property in PostCSS Options\nDESCRIPTION: Addresses an issue where an invalid `plugins` property was present in the outer options object within the gatsby-plugin-postcss configuration. Removing this invalid property resolves configuration errors and ensures correct plugin behavior.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-postcss/CHANGELOG.md#_snippet_14\n\n\n\n----------------------------------------\n\nTITLE: Run Gatsby Query Timing (Master)\nDESCRIPTION: This shell command executes the `runQueryTiming.sh` script to benchmark Gatsby query performance on the master branch. It sets the number of page types (NUM_TYPES) and the number of pages (NUM_PAGES) as environment variables for the script.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/benchmarks/query/recording.md#_snippet_0\n\nLANGUAGE: Shell Script\nCODE:\n```\nquery $ NUM_TYPES=1 NUM_PAGES=10000 bin/runQueryTiming.sh\n21.135\n```\n\n----------------------------------------\n\nTITLE: Fixing edge cases and IE compatibility\nDESCRIPTION: This commit addresses several edge cases and improves compatibility with Internet Explorer in gatsby-plugin-catch-links. This resolves issue #8685.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-catch-links/CHANGELOG.md#_snippet_18\n\nLANGUAGE: Text\nCODE:\n```\nhandle more edge cases and fix IE ([#8646](https://github.com/gatsbyjs/gatsby/issues/8646)) ([4383a57](https://github.com/gatsbyjs/gatsby/commit/4383a57)), closes [#8685](https://github.com/gatsbyjs/gatsby/issues/8685)\n```\n\n----------------------------------------\n\nTITLE: Creating a new Gatsby site\nDESCRIPTION: This command uses the Gatsby CLI to create a new site based on the default starter.  It initiates a new Gatsby project in a directory named 'my-default-starter'.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/e2e-tests/development-runtime/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngatsby new my-default-starter\n```\n\n----------------------------------------\n\nTITLE: Configuring Excerpt Separator in gatsby-config.js\nDESCRIPTION: This JSON configuration snippet shows how to specify an `excerpt_separator` option in the `gatsby-transformer-remark` plugin configuration within the `gatsby-config.js` file. The `excerpt_separator` defines a custom marker in markdown files to indicate where the excerpt should end.  Files without this separator will use the default pruning method.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/using-remark/src/pages/2017-11-14---excerpts/index.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"resolve\": `gatsby-transformer-remark`,\n  \"options\": {\n    \"excerpt_separator\": `<!-- end -->`\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating cross-env dependency in gatsby-remark-katex\nDESCRIPTION: This commit updates the cross-env dependency to version ^7.0.3. This chore aims to bring in the latest fixes and improvements from the cross-env package, ensuring compatibility and stability for the gatsby-remark-katex plugin.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-katex/CHANGELOG.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nupdate dependency cross-env to ^7.0.3 [#28505](https://github.com/gatsbyjs/gatsby/issues/28505) ([a819b9b](https://github.com/gatsbyjs/gatsby/commit/a819b9bfb663139f7b06c3ed7d6d6069a2382b2c))\n```\n\n----------------------------------------\n\nTITLE: Fixing offline mode and downloadLocal usage (JavaScript)\nDESCRIPTION: This commit prevents gatsby-source-contentful from crashing when both GATSBY_CONTENTFUL_OFFLINE and downloadLocal options are enabled. It resolves an issue related to using offline mode with local asset downloading.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-contentful/CHANGELOG.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n02471fc\n```\n\n----------------------------------------\n\nTITLE: Removing Obsolete Options and Improving README\nDESCRIPTION: This commit removes two obsolete options from the gatsby-transformer-remark package and improves the README file. Removing obsolete options helps to simplify the API and reduce confusion, while improving the README enhances documentation and user experience.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-remark/CHANGELOG.md#_snippet_6\n\nLANGUAGE: None\nCODE:\n```\nRemove two obsolete options & improve README [#33295](https://github.com/gatsbyjs/gatsby/issues/33295) ([bd59514](https://github.com/gatsbyjs/gatsby/commit/bd595142d4391fa96444052785cfe65d8e7fc56c))\n```\n\n----------------------------------------\n\nTITLE: Moving createTypes to createSchemaCustomization - Feature\nDESCRIPTION: This feature migrates the 'createTypes' API to 'createSchemaCustomization'. This is likely a change in how Gatsby handles schema customization. The issue and commit associated with the change are included.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-documentationjs/CHANGELOG.md#_snippet_4\n\nLANGUAGE: N/A\nCODE:\n```\nmove createTypes to createSchemaCustomization [#33149](https://github.com/gatsbyjs/gatsby/issues/33149) ([1720988](https://github.com/gatsbyjs/gatsby/commit/1720988a0f14d6ff2008118086d5000fe185ee8d))\n```\n\n----------------------------------------\n\nTITLE: Copy default html.js file - Shell\nDESCRIPTION: This command copies the default html.js file from the Gatsby cache to the src directory, allowing for customization. This is the first step to modify the HTML structure of your Gatsby site.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/custom-html.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncp .cache/default-html.js src/html.js\n```\n\n----------------------------------------\n\nTITLE: Warning for Deprecations and Validating Options in gatsby-plugin-feed\nDESCRIPTION: This feature adds warnings for deprecated options within the gatsby-plugin-feed configuration. It also validates the options provided to ensure they are valid, improving configuration stability and reducing potential errors. This was added in version 2.1.0.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-feed/CHANGELOG.md#_snippet_17\n\n\n\n----------------------------------------\n\nTITLE: Installing Gatsby Starter with Git Repo URL (Shell)\nDESCRIPTION: This command clones a starter from a Git repository, installs dependencies using `npm install`, and clears the Git history. Replace `[SITE_DIRECTORY]` with the desired directory name and `[URL_OF_STARTER_GIT_REPO]` with the URL of the Git repository containing the Gatsby starter.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/starters.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngatsby new [SITE_DIRECTORY] [URL_OF_STARTER_GIT_REPO]\n```\n\n----------------------------------------\n\nTITLE: Fixing Page View Title Mismatch in Gatsby Google Gtag\nDESCRIPTION: This commit addresses an issue where the page view and title did not match, ensuring accurate tracking of page views with correct titles in Google Analytics.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-google-gtag/CHANGELOG.md#_snippet_24\n\nLANGUAGE: Diff\nCODE:\n```\nb95ae69\n```\n\n----------------------------------------\n\nTITLE: Querying Builder.io Data with GraphQL\nDESCRIPTION: This GraphQL query demonstrates how to fetch entries from specific Builder.io models (myHeader and myFooter) using the allBuilderModels GraphQL endpoint provided by the @builder.io/gatsby plugin. It uses the limit and options arguments to control the query.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/sourcing-from-builder-io.md#_snippet_1\n\nLANGUAGE: GraphQL\nCODE:\n```\n{\n  allBuilderModels {\n    myHeader(limit: 1, options: { cachebust: true }) {\n      content\n    }\n    myFooter(limit: 1, options: { cachebust: true }) {\n      content\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Linking between pages with Gatsby Link\nDESCRIPTION: This example demonstrates how to use the Gatsby `<Link />` component to create internal links between pages in a Gatsby site. It imports the `Link` component from 'gatsby' and uses it to create a link to the /contact/ page.  The `to` prop specifies the target path.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/linking-between-pages.md#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\"\nimport { Link } from \"gatsby\"\n\nexport default function Home() {\n  return (\n    <div>\n      <Link to=\"/contact/\">Contact</Link>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Grammar Issues in GatsbyJS\nDESCRIPTION: This commit fixes multiple grammar issues identified within the GatsbyJS codebase. The specific issue is referenced by its GitHub issue number. This ensures consistent and correct language usage within the project's documentation or user-facing messages.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-dev-cli/CHANGELOG.md#_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\nFix multiple grammar issues Fix [#31946](https://github.com/gatsbyjs/gatsby/issues/31946) ([aa3bad2](https://github.com/gatsbyjs/gatsby/commit/aa3bad2afaea4dcdd935f629d418f082a9451d47))\n```\n\n----------------------------------------\n\nTITLE: Querying ACF fields with WPGraphQL\nDESCRIPTION: This GraphQL query retrieves a specific WordPress post by its database ID and fetches the value of a custom field ('textField') within an ACF field group ('testPostFields'). It uses the WPGraphQL endpoint to access the post data and the ACF custom fields. The post ID is hardcoded as 2068.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-wordpress/docs/tutorials/using-advanced-custom-fields.md#_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  post(id: 2068, idType: DATABASE_ID) {\n    id\n    title\n    testPostFields {\n      textField\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Gatsby Site with a Starter\nDESCRIPTION: This command uses the Gatsby CLI to create a new Gatsby site using a specified starter.  It downloads the starter from the provided GitHub URL and installs the necessary packages and dependencies. Replace `[your-project-name]` with the desired name for your project.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/blog-netlify-cms-tutorial/index.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngatsby new [your-project-name] https://github.com/thomaswangio/gatsby-personal-starter-blog\n```\n\n----------------------------------------\n\nTITLE: Rendering HTML with dangerouslySetInnerHTML\nDESCRIPTION: This snippet shows how to render HTML tags using the `dangerouslySetInnerHTML` prop in React/JSX. It's crucial to sanitize the HTML string before using this prop to avoid XSS vulnerabilities. Failure to do so could allow malicious scripts to be injected into the application.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/conceptual/security-in-gatsby.md#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\nconst CommentRenderer = comment => (\n  // highlight-next-line\n  <p dangerouslySetInnerHTML={{ __html: comment }} />\n) // dangerous indeed.\n```\n\n----------------------------------------\n\nTITLE: Using getNode() with touchNode\nDESCRIPTION: Shows how to use `getNode()` API with `touchNode` action when you only have a Node ID at hand. This is a solution when node ID is stored in cache, and you need to get the complete node before touching it.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v3-to-v4.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nexports.sourceNodes = async ({ actions, getNode, getNodesByType, cache }) => {\n  const { touchNode } = actions\n  const myNodeId = await cache.get(\"some-key\")\n\n  touchNode(getNode(myNodeId)) // highlight-line\n}\n```\n\n----------------------------------------\n\nTITLE: Import GraphQL from Gatsby (Diff)\nDESCRIPTION: This code snippet demonstrates how to explicitly import the `graphql` tag function from the `gatsby` package in Gatsby v2, as the auto-import feature from v1 is deprecated. Importing from `'graphql'` instead of `'gatsby'` will result in errors.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v1-to-v2.md#_snippet_33\n\nLANGUAGE: Diff\nCODE:\n```\nimport React from \"react\"\n+ import { graphql } from \"gatsby\"\n\nexport default function Home({ data }) {\n  return (\n    <h1>{data.site.siteMetadata.title}</h1>\n  );\n}\n\nexport const query = graphql`\n  query HomeQuery {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: Setting Global State in onPreBootstrap (Old Way)\nDESCRIPTION: This code shows the old method of setting global state in the `onPreBootstrap` lifecycle, making it accessible to other functions. With Gatsby 4's parallel processing, this approach can lead to unpredictable results.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-source-plugin-from-v3-to-v4.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nlet globalPluginOptions = {}\n\nexports.onPreBootstrap = (_, pluginOptions) => { // highlight-line\n  globalPluginOptions = pluginOptions\n}\n\nfunction aDeepNestedFunction(arg) {\n  if (globalPluginOptions.convert) {\n    return arg.toUpperCase()\n  } else {\n    return arg\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query for Tech Data\nDESCRIPTION: This GraphQL query demonstrates how to query the `tech` object via the referred items in `experience` after setting up the node mapping in Gatsby.  This allows you to fetch linked technology data based on the tech IDs in the experience data.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/config-files/gatsby-config.md#_snippet_20\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  allExperienceJson {\n    edges {\n      node {\n        company\n        position\n        from\n        to\n        items {\n          label\n          description\n          link\n          tech {\n            label\n            color\n            icon\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple gatsby-source-wordpress Instances (JavaScript)\nDESCRIPTION: This example demonstrates how to configure multiple instances of `gatsby-source-wordpress` in `gatsby-config.js`. Each instance connects to a different WordPress endpoint and uses a unique `typePrefix` to avoid conflicts.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/v5.11/index.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-source-wordpress`,\n      options: {\n        url: `https://burgerplace.com/graphql`,\n        schema: {\n          typePrefix: `Burger`,\n        },\n      },\n    },\n    {\n      resolve: `gatsby-source-wordpress`,\n      options: {\n        url: `https://tacoplace.com/graphql`,\n        schema: {\n          typePrefix: `Taco`,\n        },\n      },\n    },\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Support for Route Whitelist in Gatsby Source WordPress\nDESCRIPTION: This commit adds support for a route whitelist to gatsby-source-wordpress, complementing the existing route blacklist option. This allows users to specify a list of routes that should be included in the data fetching process, providing more control over which data is retrieved from the WordPress data source.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-wordpress/CHANGELOG.md#_snippet_25\n\n\n\n----------------------------------------\n\nTITLE: Resulting HTML after embedding HTML\nDESCRIPTION: Shows the generated HTML output after the gatsby-remark-embed-snippet plugin processes the Markdown. The embedded code snippets are wrapped in div, pre, and code tags with appropriate classes for syntax highlighting.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-embed-snippet/README.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<h1>Sample JavaScript</h1>\n<div class=\"gatsby-highlight\">\n  <pre class=\"language-jsx\">\n    <code>\n      <!-- Embedded javascript-code.js content here ... -->\n    </code>\n  </pre>\n</div>\n\n<h1>Sample HTML</h1>\n<div class=\"gatsby-highlight\">\n  <pre class=\"language-html\">\n    <code>\n      <!-- Embedded html-code.html content here ... -->\n    </code>\n  </pre>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Render Frontmatter in React Component\nDESCRIPTION: This HTML/JavaScript snippet demonstrates how to access and render frontmatter data within a Gatsby page's React component. It uses `props.pageContext.frontmatter?.title` to retrieve the title defined in the YAML frontmatter and display it within a span element. The `data-cy` attribute is for testing purposes.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/e2e-tests/mdx/src/pages/frontmatter-yaml.mdx#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<h1>A page with YAML frontmatter</h1>\n\n<span data-cy=\"frontmatter\">{props.pageContext.frontmatter?.title}</span>\n```\n\n----------------------------------------\n\nTITLE: Updating pluginOptionsSchema tests\nDESCRIPTION: This change updates the pluginOptionsSchema tests. This is related to the configuration and validation of options passed to the Gatsby plugin during its initialization. The updates likely involve adjustments to the testing suite to ensure proper handling of plugin options.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-twitter/CHANGELOG.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nUpdate pluginOptionsSchema tests [#27904](https://github.com/gatsbyjs/gatsby/issues/27904) ([2d967cb](https://github.com/gatsbyjs/gatsby/commit/2d967cbf3be81bb036f1f1cbc108a5e36c49785c))\n```\n\n----------------------------------------\n\nTITLE: Adding all untracked files in Git\nDESCRIPTION: This command adds all untracked files from the current directory and subdirectories to the staging area in Git. It prepares these files to be included in the next commit, allowing you to track changes across your project. The dot character `.` specifies the current directory as the target.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/contributing/how-to-open-a-pull-request.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit add .\n```\n\n----------------------------------------\n\nTITLE: Defining peerDependencies in package.json (JSON)\nDESCRIPTION: This snippet illustrates how to declare peer dependencies, specifically for Gatsby. It shows compatibility ranges for different Gatsby versions using semantic versioning. The `peerDependencies` field informs users about compatible Gatsby versions, avoiding potential conflicts.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/creating-a-source-plugin/part-8/index.mdx#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"peerDependencies\": {\n    \"gatsby\": \"^5.0.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Run Preload Fonts Script with Puppeteer Args\nDESCRIPTION: This command demonstrates how to pass additional arguments to the Puppeteer instance used by the `gatsby-preload-fonts` script. In this example, the `--no-sandbox` flag is passed, which can be necessary in some environments to avoid issues related to Chrome's sandbox.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-preload-fonts/README.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpm run preload-fonts -- --no-sandbox\n```\n\n----------------------------------------\n\nTITLE: Import useStaticQuery in Layout Component\nDESCRIPTION: This snippet shows how to import `useStaticQuery` along with other necessary Gatsby modules like `Link` and `graphql` into the Layout component. This is the first step in using `useStaticQuery` within this component.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-4/index.mdx#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as React from 'react'\nimport { Link, useStaticQuery, graphql } from 'gatsby' // highlight-line\nimport {\n  container,\n  heading,\n  navLinks,\n  navLinkItem,\n  navLinkText\n} from './layout.module.css'\n\nconst Layout = ({ pageTitle, children }) => {\n  return (\n    // ...\n  )\n}\n\nexport default Layout\n```\n\n----------------------------------------\n\nTITLE: Pass Server Component as Children to Client Component\nDESCRIPTION: Shows how to pass a server component (`MyServerComponent`) as the `children` prop to a client component (`MyClientComponent`).  This allows server-rendered content to be displayed within a client-side context. The server component is imported and used as a child of the client component within the page.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/performance/partial-hydration.md#_snippet_6\n\nLANGUAGE: JSX\nCODE:\n```\nimport * as React from \"react\"\nimport { MyServerComponent } from \"../components/my-server-component\"\nimport { MyClientComponent } from \"../components/my-client-component\"\n\nconst Page = () => (\n  <MyClientComponent>\n    <MyServerComponent />\n  </MyClientComponent>\n)\n\nexport default Page\n```\n\n----------------------------------------\n\nTITLE: Modifying Index Page to Use Layout (React/JSX)\nDESCRIPTION: This React component represents the index page of the Gatsby site. It imports the Layout component and wraps the 'Hello world!' heading with it, applying the consistent layout and navigation. It demonstrates how to integrate the Layout component into a page.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/authentication-tutorial.md#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\"\n\nimport Layout from \"../components/layout\" // highlight-line\n\n// highlight-start\nexport default function Home() {\n  return (\n    <Layout>\n      <h1>Hello world!</h1>\n    </Layout>\n  )\n}\n// highlight-end\n```\n\n----------------------------------------\n\nTITLE: Bumping Node Version in Gatsby\nDESCRIPTION: This snippet highlights a feature update that bumps the minimum required Node.js version for Gatsby projects to 10.13.0. This change ensures compatibility with newer JavaScript features and improved performance within the Gatsby ecosystem.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-layout/CHANGELOG.md#_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\n- **gatsby:** bump node min version to 10.13.0 ([#22400](https://github.com/gatsbyjs/gatsby/issues/22400)) ([83d681a](https://github.com/gatsbyjs/gatsby/commit/83d681a))\n```\n\n----------------------------------------\n\nTITLE: Updating Lodash Monorepo\nDESCRIPTION: This commit updates the Lodash monorepo dependency to version ^4.17.21 within the GatsbyJS project. The motivation is referenced by its GitHub issue number. Updating Lodash provides potential performance improvements and bug fixes.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-dev-cli/CHANGELOG.md#_snippet_4\n\nLANGUAGE: Text\nCODE:\n```\nupdate lodash monorepo to ^4.17.21 [#29382](https://github.com/gatsbyjs/gatsby/issues/29382) ([9fd287b](https://github.com/gatsbyjs/gatsby/commit/9fd287ba89eacd55652d468b18f6e1526230e7c6))\n```\n\n----------------------------------------\n\nTITLE: Gatsby Configuration File Site Name Modification\nDESCRIPTION: This JavaScript code shows how to modify the site name in `gatsby-config.js`. Changing the `siteName` property in the `siteMetadata` object updates the title displayed on the site. The `siteMetadata` object is used to store information that is used across the site.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/e-commerce-with-datocms-and-snipcart/index.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  siteMetadata: {\n    siteName: 'My Shop',\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Trigger Gatsby Build without Cache with curl\nDESCRIPTION: This code snippet demonstrates how to trigger a Gatsby build without using the cache by setting the `x-gatsby-cache` header to `false`. It sends a `POST` request to the specified webhook URL. Replace `<site id>` with the actual site ID.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/cloud/build-and-preview-webhooks.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST https://webhook.gatsbyjs.com/hooks/builds/trigger/<site id> --header \"x-gatsby-cache: false\"\n```\n\n----------------------------------------\n\nTITLE: Redux Nodes Namespace Example JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates the structure of the `nodes` namespace in Redux, where each node is stored with its ID as the key and the node object as the value. The `children` field contains an array of child node IDs.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/node-creation.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  `id1`: { type: `File`, children: [`id2`, `id3`], ...other_fields },\n  `id2`: { type: `markdownRemark`, ...other_fields },\n  `id3`: { type: `postsJson`, ...other_fields }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Missing node-fetch Dependency to gatsby-cli JavaScript\nDESCRIPTION: This snippet adds the missing `node-fetch` dependency to `gatsby-cli`. `node-fetch` is likely used for making HTTP requests within the gatsby-cli tool. By adding this dependency, gatsby-cli can properly fetch data from external sources, ensuring that certain features or commands function correctly.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-cli/CHANGELOG.md#_snippet_25\n\nLANGUAGE: JavaScript\nCODE:\n```\nb7da1e4\n```\n\n----------------------------------------\n\nTITLE: Accessing and Setting Cache Content\nDESCRIPTION: This code snippet demonstrates how to access and set content in the Gatsby cache.  It first attempts to retrieve cached HTML using the generated cache key, and then sets the HTML in the cache. This is done to optimize performance by reusing previously transformed data.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/plugins-and-themes/creating-a-transformer-plugin.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst cachedHTML = await cache.get(htmlCacheKey(markdownNode))\n\ncache.set(htmlCacheKey(markdownNode), html)\n```\n\n----------------------------------------\n\nTITLE: Updating Gatsby Plugin Peer Dependencies\nDESCRIPTION: This snippet shows how to update the `peerDependencies` in a `package.json` file for a Gatsby plugin to be compatible with Gatsby v5.  It demonstrates updating the Gatsby version dependency to either `^5.0.0` for v5 only or `^4.0.0 || ^5.0.0` to support both v4 and v5.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v4-to-v5.md#_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"peerDependencies\": {\n    \"gatsby\": \"^5.0.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Slice Placeholder Component - JavaScript\nDESCRIPTION: This snippet shows how to use the <Slice /> React component to render a Slice.  It replaces the direct Header component import with the <Slice /> component, using the 'header' alias to refer to the Slice.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/performance/using-slices.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Slice } from \"gatsby\"\n-import { Header, Footer } from \"../components\"\n+import { Footer } from \"../components\"\n\nexport const DefaultLayout = ({ children, headerClassName }) => {\n  return (\n    <div className={styles.defaultLayout} />\n-     <Header className={headerClassName} />\n+     <Slice alias=\"header\" className={headerClassName} />\n      {content}\n      <Footer />\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Chore: Update dev dependencies in gatsby-plugin-image\nDESCRIPTION: This snippet updates minor and patch dependencies for gatsby-plugin-image in the development environment. This ensures that the plugin is using the latest versions of its development dependencies, which can improve performance and stability.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-image/CHANGELOG.md#_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\nupdate [dev] minor and patch dependencies for gatsby-plugin-image [#37352](https://github.com/gatsbyjs/gatsby/issues/37352) ([4c2ac49](https://github.com/gatsbyjs/gatsby/commit/4c2ac49b1805d24db81f1c7193a3518fc8c9a1b7))\n```\n\n----------------------------------------\n\nTITLE: Using elemMatch with @link for Array Linking\nDESCRIPTION: This example demonstrates how to use `elemMatch` when linking arrays with the `@link` directive in Gatsby. It shows how to link to a specific element within an array based on a nested field (e.g., `frontmatter.authors.email`).\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/graphql-data-layer/schema-customization.md#_snippet_17\n\nLANGUAGE: graphql\nCODE:\n```\ntype AuthorJson implements Node {\n  # Using .elemMatch is important here\n  posts: [MarkdownRemark]\n    @link(by: \"frontmatter.authors.elemMatch.email\", from: \"email\")\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Layout Component (React/JSX)\nDESCRIPTION: This React component, Layout, is a wrapper component that includes the NavBar component and renders its children. It's responsible for providing a consistent layout across all pages of the Gatsby site. It imports and uses the NavBar component defined previously.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/authentication-tutorial.md#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\"\n\nimport NavBar from \"./nav-bar\"\n\nconst Layout = ({ children }) => (\n  <>\n    <NavBar />\n    {children}\n  </>\n)\n\nexport default Layout\n```\n\n----------------------------------------\n\nTITLE: Updating Algoliasearch Dependency in Gatsby\nDESCRIPTION: This snippet updates the algoliasearch dependency to version ^3.33.0. This change addresses potential bugs and incorporates the latest features and improvements from the Algolia search library, ensuring seamless search functionality for Gatsby sites.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-npm-package-search/CHANGELOG.md#_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\n0c1f580\n```\n\n----------------------------------------\n\nTITLE: Fix Attribute Application in gatsby-remark-graphviz\nDESCRIPTION: This commit addresses an issue related to attribute application within the `gatsby-remark-graphviz` plugin. It ensures that attributes are correctly applied to the generated Graphviz diagrams, resolving a potential bug where attributes might not be properly rendered or processed.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-graphviz/CHANGELOG.md#_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Updating PostCSS Loader Dependency to ^7.3.2\nDESCRIPTION: This snippet shows updating the `postcss-loader` dependency for `gatsby-plugin-postcss` to version `^7.3.2`. This update addresses potential issues or incorporates new features from the `postcss-loader` library.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-postcss/CHANGELOG.md#_snippet_2\n\nLANGUAGE: none\nCODE:\n```\nupdate dependency postcss-loader to ^7.3.2 for gatsby-plugin-postcss [#38160](https://github.com/gatsbyjs/gatsby/issues/38160) ([6cb7dc6](https://github.com/gatsbyjs/gatsby/commit/6cb7dc678d3d05d28f274625e15a01a2228d1188))\n```\n\n----------------------------------------\n\nTITLE: Updating cross-env dependency\nDESCRIPTION: This commit updates the `cross-env` dependency to version ^7.0.3. The pull request is referenced by its GitHub issue number.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-dev-cli/CHANGELOG.md#_snippet_8\n\nLANGUAGE: Text\nCODE:\n```\nupdate dependency cross-env to ^7.0.3 [#28505](https://github.com/gatsbyjs/gatsby/issues/28505) ([a819b9b](https://github.com/gatsbyjs/gatsby/commit/a819b9bfb663139f7b06c3ed7d6d6069a2382b2c))\n```\n\n----------------------------------------\n\nTITLE: Configuring resolve-url-loader Options\nDESCRIPTION: This snippet shows how to configure options for `resolve-url-loader` within the `gatsby-plugin-sass` configuration. This allows customizing the behavior of `resolve-url-loader`. Requires understanding of `resolve-url-loader` options.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-sass/README.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nplugins: [\n  {\n    resolve: \"gatsby-plugin-sass\",\n    options: {\n      useResolveUrlLoader: {\n        options: {\n          debug: true,\n        },\n      },\n    },\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Polyfills Entry Point\nDESCRIPTION: This JavaScript snippet creates an entry point for polyfills. It imports the `setPrototypeOf` polyfill and assigns it to `Object.setPrototypeOf`. This ensures that the polyfill is loaded and available before other code that relies on `Object.setPrototypeOf` is executed.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v2-to-v3.md#_snippet_42\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { setPrototypeOf } from \"./setPrototypeOf\"\n\n// Polyfills\nObject.setPrototypeOf = setPrototypeOf\n```\n\n----------------------------------------\n\nTITLE: Running Gatsby Development Server with Trailing Slash Option\nDESCRIPTION: This command starts the Gatsby development server with a specified `trailingSlash` option.  The `TRAILING_SLASH` environment variable is used to pass the desired option to the development script.  This allows testing different trailing slash configurations during development.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/e2e-tests/trailing-slash/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nTRAILING_SLASH=your-option yarn debug:develop\n```\n\n----------------------------------------\n\nTITLE: Shell Command: Updating Gatsby Plugins\nDESCRIPTION: This shell command updates several Gatsby plugins that depend on the `sharp` package. This is used to resolve issues related to incompatible versions of `sharp` and its dependencies by ensuring that all relevant plugins are using the latest compatible version.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/local-development/troubleshooting-common-errors.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnpm install gatsby-plugin-sharp gatsby-plugin-manifest gatsby-remark-images-contentful gatsby-source-contentful gatsby-transformer-sharp gatsby-transformer-sqip\n```\n\n----------------------------------------\n\nTITLE: Create a new Gatsby project using npx\nDESCRIPTION: This command uses npx to download and install the latest version of Gatsby and then creates a new Gatsby project in the `my-project` folder.  It does not make the Gatsby CLI globally available. Requires npm version 5.2 or later (or Node.js with npx).\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/glossary/npm.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnpx gatsby new my-project\n```\n\n----------------------------------------\n\nTITLE: Updating Cross-Env Dependency\nDESCRIPTION: This commit updates the `cross-env` dependency to version ^7.0.3. This likely includes bug fixes and potential improvements in cross-platform environment variable handling.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-styled-components/CHANGELOG.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nupdate dependency cross-env to ^7.0.3 [#28505](https://github.com/gatsbyjs/gatsby/issues/28505) ([a819b9b](https://github.com/gatsbyjs/gatsby/commit/a819b9bfb663139f7b06c3ed7d6d6069a2382b2c))\n```\n\n----------------------------------------\n\nTITLE: Fixing Image URLs with HTTPS/HTTP Prefix\nDESCRIPTION: This code snippet fixes an issue in gatsby-remark-images-contentful where image URLs with either HTTPS or HTTP prefixes were not being handled correctly. The fix ensures that the plugin can correctly process images regardless of the protocol used in the URL.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-images-contentful/CHANGELOG.md#_snippet_42\n\nLANGUAGE: none\nCODE:\n```\n- **gatsby-remark-images-contentful:** fix image urls with https/http prefix ([#7537](https://github.com/gatsbyjs/gatsby/issues/7537)) ([768aaa0](https://github.com/gatsbyjs/gatsby/commit/768aaa0))\n```\n\n----------------------------------------\n\nTITLE: Deprecated `___NODE` Suffix Example (Before)\nDESCRIPTION: Demonstrates the deprecated `___NODE` suffix used for creating relations between nodes in Gatsby before v2.5. The `author___NODE` field linked a blog post to a user node using the user's ID.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v3-to-v4.md#_snippet_18\n\nLANGUAGE: JavaScript\nCODE:\n```\nexports.sourceNodes = ({ actions }) => {\n  actions.createNode({\n    // ...required node fields\n    author___NODE: userNode.id,\n    internal: { type: `BlogPost` /*...*/ },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Building and Serving Gatsby with Path Prefix (Shell)\nDESCRIPTION: This snippet demonstrates how to build a Gatsby site with a path prefix, move the generated files into a subdirectory named 'prefix', and serve the site locally. It allows you to simulate hosting the site under a subdirectory on a server.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/using-path-prefix/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngatsby build --prefix-paths\ncd public\nmkdir prefix\nmv * prefix # This will cause an error but you can ignore it\ncd ..\ngatsby serve\n# Open the served site at localhost:9000/prefix/\n```\n\n----------------------------------------\n\nTITLE: Running Gatsby in Development Mode\nDESCRIPTION: This command starts the Gatsby development server, allowing you to preview and test your application locally.  It is commonly used during development to see changes in real-time.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/sourcing-from-buttercms.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ngatsby develop\n```\n\n----------------------------------------\n\nTITLE: Performance Improvement: shouldOnCreateNode in Gatsby\nDESCRIPTION: This snippet implements `shouldOnCreateNode` for all Gatsby plugins and benchmarks, which is a performance optimization.  It aims to improve the efficiency of node creation during the Gatsby build process. No specific dependencies are mentioned but it targets Gatsby plugin development.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-json/CHANGELOG.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndf914d94a7c47c6082b6f165eb44dc6e15e12c7d\n```\n\n----------------------------------------\n\nTITLE: Prefixing ID and Using createNodeId\nDESCRIPTION: This commit prefixes the `id` and only uses `createNodeId` function to generate node IDs within the gatsby-transformer-yaml package. This ensures unique and consistent node ID generation, preventing conflicts and improving data management.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-yaml/CHANGELOG.md#_snippet_2\n\nLANGUAGE: \nCODE:\n```\nPrefix `id` and only use createNodeId fix [#28943](https://github.com/gatsbyjs/gatsby/issues/28943) ([76f0224](https://github.com/gatsbyjs/gatsby/commit/76f0224ae8590a8122ed5f9ef585a9fe29b94fa8))\n```\n\n----------------------------------------\n\nTITLE: Updating Babel Monorepo in Gatsby\nDESCRIPTION: This code snippet indicates an update to the Babel monorepo within the Gatsby project. Updating Babel ensures that the project can utilize the latest JavaScript features and maintain compatibility with modern browsers and environments.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-custom-blocks/CHANGELOG.md#_snippet_2\n\nLANGUAGE: Text\nCODE:\n```\nupdate babel monorepo [#32996](https://github.com/gatsbyjs/gatsby/issues/32996) ([048c7a7](https://github.com/gatsbyjs/gatsby/commit/048c7a727bbc6a9ad8e27afba72ee20e946c4aaa))\n```\n\nLANGUAGE: Text\nCODE:\n```\nupdate babel monorepo [#32564](https://github.com/gatsbyjs/gatsby/issues/32564) ([a554998](https://github.com/gatsbyjs/gatsby/commit/a554998b4f6765103b650813cf52dbfcc575fecf))\n```\n\nLANGUAGE: Text\nCODE:\n```\nupdate babel monorepo [#32238](https://github.com/gatsbyjs/gatsby/issues/32238) ([466d4c0](https://github.com/gatsbyjs/gatsby/commit/466d4c087bbc96abb942a02c67243bcc9a4f2a0a))\n```\n\nLANGUAGE: Text\nCODE:\n```\nupdate babel monorepo [#31143](https://github.com/gatsbyjs/gatsby/issues/31143) ([701ab2f](https://github.com/gatsbyjs/gatsby/commit/701ab2f6690c3f1bbaf60cf572513ea566cc9ec9))\n```\n\n----------------------------------------\n\nTITLE: Markdown Tables Syntax\nDESCRIPTION: Demonstrates how to create tables in Markdown, including column alignment using colons and the use of inline Markdown within table cells.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/using-remark/src/pages/2016-04-15---hello-world-kitchen-sink/index.md#_snippet_5\n\nLANGUAGE: no-highlight\nCODE:\n```\nColons can be used to align columns.\n\n| Tables        | Are           | Cool  |\n| ------------- |:-------------:| -----:|\n| col 3 is      | right-aligned | $1600 |\n| col 2 is      | centered      |   $12 |\n| zebra stripes | are neat      |    $1 |\n\nThere must be at least 3 dashes separating each header cell.\nThe outer pipes (|) are optional, and you don't need to make the\nraw Markdown line up prettily. You can also use inline Markdown.\n\nMarkdown | Less | Pretty\n--- | --- | ---\n*Still* | `renders` | **nicely**\n1 | 2 | 3\n```\n\n----------------------------------------\n\nTITLE: Reading File Buffer in GatsbyJS\nDESCRIPTION: This snippet addresses an issue related to reading file buffers within GatsbyJS.  It uses the `readFile` method to ensure proper handling of file data. This change was implemented to fix a reported bug related to file processing.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-excel/CHANGELOG.md#_snippet_6\n\nLANGUAGE: None\nCODE:\n```\nUse `readFile` Buffer [#35050](https://github.com/gatsbyjs/gatsby/issues/35050) ([aada85e](https://github.com/gatsbyjs/gatsby/commit/aada85e7aaff4c8f718758fb328e551a6933dec8))\n```\n\n----------------------------------------\n\nTITLE: Chore: Upgrade major versions in gatsby-plugin-image\nDESCRIPTION: This snippet upgrades some non-breaking major versions within the gatsby-plugin-image package. This allows the plugin to benefit from the latest features and improvements in its dependencies while minimizing the risk of breaking changes.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-image/CHANGELOG.md#_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nUpgrade some non-breaking major versions [#37406](https://github.com/gatsbyjs/gatsby/issues/37406) ([2ea80c0](https://github.com/gatsbyjs/gatsby/commit/2ea80c02e464fe9306f6a1eccbb6c74983a76208))\n```\n\n----------------------------------------\n\nTITLE: Updating Sharp Dependency in Gatsby\nDESCRIPTION: This code snippet updates the sharp dependency to version ^0.23.1 within the Gatsby project. Sharp is a popular image processing library used in Gatsby for optimizing and transforming images.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-images-contentful/CHANGELOG.md#_snippet_36\n\nLANGUAGE: none\nCODE:\n```\n- update dependency sharp to ^0.23.1 ([#17904](https://github.com/gatsbyjs/gatsby/issues/17904)) ([f19ad3c](https://github.com/gatsbyjs/gatsby/commit/f19ad3c))\n```\n\n----------------------------------------\n\nTITLE: Defining Worker Task Functions in TypeScript\nDESCRIPTION: This TypeScript code defines two asynchronous functions, `heavyTask` and `setupStep`, intended to be executed in a worker process. `heavyTask` performs a CPU-intensive operation using `heavyProcessing`, while `setupStep` performs a setup operation using `heavySetup`. These functions demonstrate how to structure tasks for the worker pool.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-worker/README.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function heavyTask(param: string): Promise<string> {\n  // using workers is ideal for CPU intensive tasks\n  return await heavyProcessing(param)\n}\n\nexport async function setupStep(param: string): Promise<void> {\n  await heavySetup(param)\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Bluebird Dependency (JavaScript)\nDESCRIPTION: This snippet updates the bluebird dependency to version ^3.7.0. Updating this dependency may include performance improvements, bug fixes, or new features from the bluebird library.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-sharp/CHANGELOG.md#_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nbd235a8\n```\n\n----------------------------------------\n\nTITLE: Bumping Node Minimum Version for Gatsby\nDESCRIPTION: This commit updates the minimum required Node.js version for the Gatsby project to 10.13.0. This change enables the use of newer JavaScript features and APIs, potentially improving performance and developer experience. The update is related to issue #22400.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-hjson/CHANGELOG.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n83d681a\n```\n\n----------------------------------------\n\nTITLE: Using Schema Customization API in gatsby-source-hacker-news\nDESCRIPTION: This commit implements the schema customization API within the gatsby-source-hacker-news package. This allows for more flexible and controlled data shaping during the Gatsby build process.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-hacker-news/CHANGELOG.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n**gatsby-source-hacker-news:** use schema customization API ([#20070](https://github.com/gatsbyjs/gatsby/issues/20070)) ([e993369](https://github.com/gatsbyjs/gatsby/commit/e993369))\n```\n\n----------------------------------------\n\nTITLE: Query Menu Items by Location in Gatsby with GraphQL\nDESCRIPTION: This GraphQL query retrieves WordPress menu items filtered by location using Gatsby's GraphQL API. It skips querying the menu itself and directly fetches the menu items associated with the specified location. The 'GATSBY_HEADER_MENU' variable represents the desired menu location.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-wordpress/docs/tutorials/using-wordpress-menus.md#_snippet_1\n\nLANGUAGE: GraphQL\nCODE:\n```\n{\n  allWpMenuItem(filter: { locations: { eq: GATSBY_HEADER_MENU } }) {\n    nodes {\n      id\n      label\n      title\n      path\n      parentId\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating touchNode calls in gatsby-node.js in Gatsby\nDESCRIPTION: This snippet demonstrates how to update calls to `touchNode` in `gatsby-node.js` to pass the full node object instead of just the node ID, as required in Gatsby v3. This change is necessary because passing only the ID was deprecated.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v2-to-v3.md#_snippet_14\n\nLANGUAGE: diff\nCODE:\n```\nexports.sourceNodes = ({ actions, getNodesByType }) => {\n  const { touchNode } = actions\n\n- getNodesByType(\"YourSourceType\").forEach(node => touchNode(node.id))\n+ getNodesByType(\"YourSourceType\").forEach(node => touchNode(node))\n}\n```\n\n----------------------------------------\n\nTITLE: Add Gatsby Plugin JSS with Theme\nDESCRIPTION: This code snippet shows how to configure the `gatsby-plugin-jss` plugin with a theme object in `gatsby-config.js`. The theme object allows you to define global styles and variables for your JSS-based components. The theme object is passed as an option to the plugin.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-jss/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst theme = {\n  fontSize: 16,\n  fontFamily: \"Roboto\",\n  color: \"#212121\",\n}\n\nplugins: [\n  {\n    resolve: \"gatsby-plugin-jss\",\n    options: { theme },\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Run Gatsby Query Timing (Loki With Index) - More Pages & Types\nDESCRIPTION: This shell command executes the `runQueryTiming.sh` script to benchmark Gatsby query performance with Loki datastore and indexes enabled, with more pages and types. It sets the number of page types (NUM_TYPES) and the number of pages (NUM_PAGES) as environment variables for the script.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/benchmarks/query/recording.md#_snippet_11\n\nLANGUAGE: Shell Script\nCODE:\n```\nquery $ NUM_TYPES=100 NUM_PAGES=20000 bin/runQueryTiming.sh\n27.020\n```\n\n----------------------------------------\n\nTITLE: Improving Time to Read Calculation for CJK Text\nDESCRIPTION: This feature improves the accuracy of the `timeToRead` calculation within gatsby-transformer-remark when dealing with Chinese/Japanese/Korean (CJK) texts. This provides a more realistic estimate of the reading time for content in these languages. This improvement was introduced in response to issue #21312.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-remark/CHANGELOG.md#_snippet_10\n\n\n\n----------------------------------------\n\nTITLE: Splat Redirect in gatsby-node.js\nDESCRIPTION: This snippet demonstrates the use of splat redirects. Any URL path after `/blog/recipes/` is appended to the `toPath`. `/blog/recipes/any-awesome-url-path` will redirect to `/recipes/any-awesome-url-path`.  Requires Gatsby's `createPages` API and the `createRedirect` action.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/cloud/working-with-redirects-and-rewrites.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncreateRedirect({\n  fromPath: `/blog/recipes/*`,\n  toPath: `/recipes/*`,\n})\n```\n\n----------------------------------------\n\nTITLE: Re-pinning select packages after 'lerna version'\nDESCRIPTION: This commit re-pins select packages after running 'lerna version'. This ensures that specific versions of dependencies are used after a versioning operation, likely to maintain consistency and prevent unexpected behavior.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-parcel-config/CHANGELOG.md#_snippet_12\n\nLANGUAGE: Shell\nCODE:\n```\nre-pin select packages after 'lerna version' [#35725](https://github.com/gatsbyjs/gatsby/issues/35725) ([08d6090](https://github.com/gatsbyjs/gatsby/commit/08d6090e98d697ea3ceda8472067d3acf0619b25))\n```\n\n----------------------------------------\n\nTITLE: Bumping Babel Minor Version in Gatsby\nDESCRIPTION: This code snippet shows a minor version bump for Babel within the Gatsby project. Minor version bumps typically include new features or improvements that are backwards-compatible, so updating Babel likely includes these changes.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-custom-blocks/CHANGELOG.md#_snippet_4\n\nLANGUAGE: Text\nCODE:\n```\nbump babel minor [#31857](https://github.com/gatsbyjs/gatsby/issues/31857) ([7d42e8d](https://github.com/gatsbyjs/gatsby/commit/7d42e8d866e46e9c39838d812d080d06433f7060))\n```\n\nLANGUAGE: Text\nCODE:\n```\nbump babel minor [#31857](https://github.com/gatsbyjs/gatsby/issues/31857) [#31859](https://github.com/gatsbyjs/gatsby/issues/31859) ([8636025](https://github.com/gatsbyjs/gatsby/commit/863602567930a39142ed33d9d1f1813b7dec8686))\n```\n\n----------------------------------------\n\nTITLE: gatsbyPath Example in GraphQL Query\nDESCRIPTION: This GraphQL query demonstrates how to use `gatsbyPath` to generate links to collection route pages.  It aliases the `gatsbyPath` field to `productPath` and `discountPath` to resolve the correct paths to products and discounts pages respectively.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/routing/file-system-route-api.md#_snippet_5\n\nLANGUAGE: GraphQL\nCODE:\n```\nquery {\n    allProduct {\n      name\n      productPath: gatsbyPath(filePath: \"/products/{Product.name}\") // highlight-line\n      discountPath: gatsbyPath(filePath: \"/discounts/{Product.name}\") // highlight-line\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Fixing ignore pattern in quotes - JavaScript\nDESCRIPTION: This snippet addresses a bug where the ignore pattern was not properly wrapped in quotes. The fix ensures that the ignore pattern is correctly interpreted, preventing unexpected behavior. The specific commit hash associated with the fix is 7563db6.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-faker/CHANGELOG.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nwrap ignore pattern in quotes ([#23176](https://github.com/gatsbyjs/gatsby/issues/23176)) ([7563db6](https://github.com/gatsbyjs/gatsby/commit/7563db6))\n```\n\n----------------------------------------\n\nTITLE: Configuring gatsby-config.js for Theme\nDESCRIPTION: Configures the `gatsby-config.js` file within the `gatsby-theme-events` theme to source data from the `events.yml` file using `gatsby-source-filesystem` and `gatsby-transformer-yaml`. This allows the theme to read and parse the YAML data into GraphQL nodes.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/building-a-theme.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  plugins: [\n    {\n      resolve: \"gatsby-source-filesystem\",\n      options: {\n        path: `${__dirname}/data/`,\n      },\n    },\n    {\n      resolve: \"gatsby-transformer-yaml\",\n      options: {\n        typeName: \"Event\",\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Set legacy-peer-deps in .npmrc (Shell)\nDESCRIPTION: Sets the `legacy-peer-deps` configuration in the project's `.npmrc` file. This is useful for ignoring peer dependency warnings and allowing installation of plugins that haven't yet updated their peer dependencies for Gatsby v5, especially in Gatsby Cloud environments.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v4-to-v5.md#_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\nnpm config -L project set legacy-peer-deps true\n```\n\n----------------------------------------\n\nTITLE: Access page context in React\nDESCRIPTION: This code snippet shows how to access the data passed through the `context` property in `gatsby-node.js`. Gatsby exposes this data via the `pageContext` prop to the component. `pageContext` is used to render the title and content.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/why-gatsby-uses-graphql.md#_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\nimport React from \"react\"\n\nconst WithContext = ({ pageContext }) => (\n  <section>\n    <h1>{pageContext.title}</h1>\n    <div dangerouslySetInnerHTML={{ __html: pageContext.content }} />\n  </section>\n)\n\nexport default WithContext\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query for Prismic Homepage Data\nDESCRIPTION: This GraphQL query retrieves data from a Prismic 'Homepage' Single Type. It fetches the title (text) and content (HTML) of the homepage.  The `prismicHomepage` query is used because Single Types have only one document in Prismic.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/sourcing-data/sourcing-from-prismic.md#_snippet_8\n\nLANGUAGE: graphql\nCODE:\n```\nexport const pageQuery = graphql`\n  query IndexQuery {\n    prismicHomepage {\n      data {\n        title {\n          text\n        }\n        content {\n          html\n        }\n      }\n    }\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: Updating deleteNode calls in gatsby-node.js in Gatsby\nDESCRIPTION: This snippet demonstrates how to update calls to `deleteNode` in `gatsby-node.js` to pass the full node object instead of just the node ID, as required in Gatsby v3.  This is a change from earlier versions where passing only the node id was allowed.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v2-to-v3.md#_snippet_15\n\nLANGUAGE: diff\nCODE:\n```\nexports.onCreateNode = ({ actions, node }) => {\n  const { deleteNode } = actions\n\n- deleteNode(node.id)\n+ deleteNode(node)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Browserslist in package.json (JSON)\nDESCRIPTION: This code snippet shows the default 'browserslist' configuration in package.json. It specifies the supported browsers for the Gatsby project, influencing the JavaScript and CSS output. This configuration targets browsers with over 0.25% usage and support for ES6 modules.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/custom-configuration/browser-support.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"browserslist\": [\">0.25%\", \"not dead and supports es6-module\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling TLS Rejection in Development (Shell)\nDESCRIPTION: This snippet demonstrates how to disable Node.js' rejection of unauthorized TLS certificates in a development environment. By setting the `NODE_TLS_REJECT_UNAUTHORIZED` environment variable to `0`, the application will bypass certificate validation. This should only be done for local development with self-signed certificates and never in production.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-wordpress/docs/tutorials/using-self-signed-certificates.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nNODE_TLS_REJECT_UNAUTHORIZED=0\n```\n\n----------------------------------------\n\nTITLE: Running develop:site script in shell\nDESCRIPTION: This snippet shows the command to run the `develop:site` script using yarn. This script starts the Gatsby development server with the example site, allowing you to see the changes made in the source plugin in real-time and verify that the `sourceNodes` function is being executed.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/creating-a-source-plugin/part-2/index.mdx#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn develop:site\n```\n\n----------------------------------------\n\nTITLE: Configuring Gatsby Shopify Plugin\nDESCRIPTION: This configuration enables the `gatsby-source-shopify` plugin in your `gatsby-config.js` file. Replace `[app-password]` and `[yourstore.myshopify.com]` with your Shopify private app password and store URL, respectively. This establishes the connection between your Gatsby site and your Shopify data.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/building-an-ecommerce-site-with-shopify.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nplugins: [\n    {\n      resolve: `gatsby-source-shopify`,\n      options: {\n        password: [app-password],\n        storeUrl: [yourstore.myshopify.com],\n      },\n    },\n]\n```\n\n----------------------------------------\n\nTITLE: Fixing Build with Optional Dependencies for gatsby-cli JavaScript\nDESCRIPTION: This snippet addresses an issue where gatsby-cli could fail to build successfully if optional dependencies were missing. The fix ensures that gatsby-cli can build even when optional dependencies are not present. This improves the robustness of the build process and avoids unnecessary build failures.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-cli/CHANGELOG.md#_snippet_29\n\nLANGUAGE: JavaScript\nCODE:\n```\ne5db077\n```\n\n----------------------------------------\n\nTITLE: Run Gatsby Query Timing (Loki With Index) - More Pages\nDESCRIPTION: This shell command executes the `runQueryTiming.sh` script to benchmark Gatsby query performance with Loki datastore and indexes enabled, with more pages. It sets the number of page types (NUM_TYPES) and the number of pages (NUM_PAGES) as environment variables for the script.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/benchmarks/query/recording.md#_snippet_10\n\nLANGUAGE: Shell Script\nCODE:\n```\nquery $ NUM_TYPES=1 NUM_PAGES=20000 bin/runQueryTiming.sh\n12.797\n```\n\n----------------------------------------\n\nTITLE: Implementing ShouldOnCreateNode\nDESCRIPTION: This performance improvement implements `shouldOnCreateNode` for plugins and benchmarks. This function is used to conditionally create nodes during the Gatsby build process, improving performance by skipping unnecessary node creation.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-javascript-static-exports/CHANGELOG.md#_snippet_11\n\nLANGUAGE: None\nCODE:\n```\nimplement shouldOnCreateNode for all our plugins/benchmarks ([#27545](https://github.com/gatsbyjs/gatsby/issues/27545)) ([df914d9](https://github.com/gatsbyjs/gatsby/commit/df914d94a7c47c6082b6f165eb44dc6e15e12c7d))\n```\n\n----------------------------------------\n\nTITLE: Run Gatsby Query Timing (Loki With Index) - Multiple Types\nDESCRIPTION: This shell command executes the `runQueryTiming.sh` script to benchmark Gatsby query performance with Loki datastore and indexes enabled, with multiple types. It sets the number of page types (NUM_TYPES) and the number of pages (NUM_PAGES) as environment variables for the script.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/benchmarks/query/recording.md#_snippet_9\n\nLANGUAGE: Shell Script\nCODE:\n```\nquery $ NUM_TYPES=100 NUM_PAGES=10000 bin/runQueryTiming.sh\n15.050\n```\n\n----------------------------------------\n\nTITLE: Setting GATSBY_EXPERIMENTAL_QUERY_CONCURRENCY (Shell)\nDESCRIPTION: This command sets the `GATSBY_EXPERIMENTAL_QUERY_CONCURRENCY` environment variable to 20, and then executes the `gatsby develop` command. This increases the number of parallel GraphQL queries executed by Gatsby, improving performance when combined with query batching.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-graphql/README.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ncross-env GATSBY_EXPERIMENTAL_QUERY_CONCURRENCY=20 gatsby develop\n```\n\n----------------------------------------\n\nTITLE: Creating plugin-options-schema.ts (TypeScript)\nDESCRIPTION: This code snippet creates a new file called `plugin-options-schema.ts` inside the plugin's `src` folder.  It defines a function that returns a Joi object, which will be used to validate the plugin options.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/creating-a-source-plugin/part-4/index.mdx#_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { GatsbyNode } from \"gatsby\"\nimport type { ObjectSchema } from \"gatsby-plugin-utils\"\n\nexport const pluginOptionsSchema: GatsbyNode[\"pluginOptionsSchema\"] = ({\n  Joi,\n}): ObjectSchema => {\n  return Joi.object({})\n}\n```\n\n----------------------------------------\n\nTITLE: Configure gatsby-remark-responsive-iframe in gatsby-config.js\nDESCRIPTION: This code snippet shows how to configure the `gatsby-remark-responsive-iframe` plugin within the `gatsby-config.js` file. It involves adding the plugin to the `plugins` array within the `gatsby-transformer-remark` options. No specific dependencies are required beyond the plugin itself and `gatsby-transformer-remark`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-responsive-iframe/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// In your gatsby-config.js\nplugins: [\n  {\n    resolve: `gatsby-transformer-remark`,\n    options: {\n      plugins: [`gatsby-remark-responsive-iframe`]},\n    },\n  ]\n\n```\n\n----------------------------------------\n\nTITLE: Overriding Theme Colors\nDESCRIPTION: This JavaScript code snippet demonstrates how to override theme colors in a Gatsby theme using component shadowing and Theme UI.  It imports the base theme and merges it with custom color configurations, specifically changing the primary color to blue. The new theme is then exported.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/building-a-theme.md#_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\nimport { merge } from \"theme-ui\"\nimport { theme } from \"@jlengstorf/gatsby-theme-events\"\n\nconst theme = merge(theme, {\n  colors: {\n    primary: \"blue\",\n  },\n})\n\nexport default theme\n```\n\n----------------------------------------\n\nTITLE: Rename `modifyBabelrc` to `onCreateBabelConfig` (Diff)\nDESCRIPTION: This code snippet demonstrates the API change from `modifyBabelrc` to `onCreateBabelConfig` for plugin configuration in Gatsby v2. It highlights how to configure Babel plugins using the new `actions.setBabelPlugin` method.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v1-to-v2.md#_snippet_37\n\nLANGUAGE: Diff\nCODE:\n```\n- exports.modifyBabelrc = ({ babelrc }) => {\n-   return {\n-     ...babelrc,\n-     plugins: babelrc.plugins.concat([`foo`]),\n-   }\n+ exports.onCreateBabelConfig = ({ actions }) => {\n+   actions.setBabelPlugin({\n+     name: `babel-plugin-foo`,\n+   })\n}\n```\n\n----------------------------------------\n\nTITLE: Client Component Accepting Server Component as Children\nDESCRIPTION: This client component (`MyClientComponent`) accepts a `children` prop, enabling it to render server components passed to it. The `'use client'` directive marks it as a client component. This approach enables server components to be rendered within client component boundaries.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/performance/partial-hydration.md#_snippet_5\n\nLANGUAGE: JSX\nCODE:\n```\n\"use client\"\n\nimport * as React from \"react\"\n\nexport const MyClientComponent = ({ children }) => (\n  <div>\n    <p>Re-Hydrated on the client</p>\n    {children}\n  </div>\n)\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query for Custom Interface\nDESCRIPTION: This GraphQL query retrieves the `fullName` field for all nodes that implement the `TeamMember` interface. It uses inline fragments (`... on`) to specify the fields to retrieve for each specific type (`AuthorJson` and `ContributorJson`).\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/graphql-data-layer/schema-customization.md#_snippet_41\n\nLANGUAGE: graphql\nCODE:\n```\nexport const query = graphql`\n  {\n    allTeamMembers {\n      ... on AuthorJson {\n        fullName\n      }\n      ... on ContributorJson {\n        fullName\n      }\n    }\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: Disabling File Downloads for Image CDN\nDESCRIPTION: Example configuration to disable file downloads when using Gatsby Image CDN.  Setting `skipFileDownloads` to true prevents Gatsby from fetching all image files during the build process, which is necessary for Image CDN to function correctly.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-drupal/README.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n  {\n    resolve: `gatsby-source-drupal`,\n    options: {\n      skipFileDownloads: true,\n      // other plugin options go here\n    },\n  },\n```\n\n----------------------------------------\n\nTITLE: Updating @hapi/joi Dependency to ^15.1.1 - JavaScript\nDESCRIPTION: This snippet updates the `@hapi/joi` dependency to version ^15.1.1. `@hapi/joi` is a validation library used to validate configuration options and data structures. Updating it likely ensures that the `gatsby-source-contentful` plugin benefits from the latest validation rules and security updates.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-contentful/CHANGELOG.md#_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\n2cfc19c\n```\n\n----------------------------------------\n\nTITLE: Updating Babel Monorepo in gatsby-source-faker\nDESCRIPTION: This snippet updates the Babel monorepo for the `gatsby-source-faker` package. This chore ensures that the plugin uses the latest version of Babel, providing access to new features, performance improvements, and bug fixes.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-faker/CHANGELOG.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nupdate babel monorepo [#37386](https://github.com/gatsbyjs/gatsby/issues/37386) ([b941876](https://github.com/gatsbyjs/gatsby/commit/b94187633d94d0f0071b38ffe93380dd802ec70f))\n```\n\n----------------------------------------\n\nTITLE: Update Gatsby plugin peer dependencies (Diff)\nDESCRIPTION: This code snippet demonstrates how to update the `peerDependencies` field in a Gatsby plugin's `package.json` file to ensure compatibility with Gatsby v2.  The `gatsby` dependency should specify a version range that includes Gatsby v2 (e.g., `\">=1\"`).\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v1-to-v2.md#_snippet_36\n\nLANGUAGE: Diff\nCODE:\n```\n\"peerDependencies\": {\n-  \"gatsby\": \"1\"\n+  \"gatsby\": \">=1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom JavaScript - JSX\nDESCRIPTION: This JSX snippet shows how to add custom JavaScript to the HTML document using the `dangerouslySetInnerHTML` attribute. It embeds a simple JavaScript code snippet that logs a message to the console. However, the documentation recommends using Gatsby's Script API instead.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/custom-html.md#_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<script\n  dangerouslySetInnerHTML={{__html: `\n      var name = 'world';\n      console.log('Hello ' + name);\n    `}}\n/>\n```\n\n----------------------------------------\n\nTITLE: Extracting Directory Watching Logic for Custom Page Creation (JavaScript)\nDESCRIPTION: This commit extracts the logic for watching a directory from `gatsby-page-creator` to allow reuse for custom page creation.  This promotes modularity and reusability within the Gatsby ecosystem. This enables developers to easily create custom page creation mechanisms by leveraging the existing directory watching capabilities.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-page-utils/CHANGELOG.md#_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\n68d9d6f\n```\n\n----------------------------------------\n\nTITLE: Fixing ignore pattern for Google Gtag in Gatsby\nDESCRIPTION: This commit fixes an issue where the ignore pattern was not properly wrapped in quotes, potentially causing unexpected behavior in the gatsby-plugin-google-gtag.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-google-gtag/CHANGELOG.md#_snippet_19\n\nLANGUAGE: diff\nCODE:\n```\n--- a/packages/gatsby-plugin-google-gtag/src/gatsby-node.js\n+++ b/packages/gatsby-plugin-google-gtag/src/gatsby-node.js\n@@ -38,7 +38,7 @@\n         `https://www.googletagmanager.com/gtag/js?id=${trackingId}`,\n         {\n           origin: `https://www.googletagmanager.com`,\n-          pathPrefix: `${pathPrefix}/__data`,\n+          pathPrefix: `\"${pathPrefix}/__data\"`,\n         }\n       )\n     }\n\n```\n\n----------------------------------------\n\nTITLE: Convert TypeScript to JavaScript\nDESCRIPTION: This code snippet addresses an issue where TypeScript files within the gatsby-source-graphql package were temporarily converted to plain JavaScript. This was done as a temporary measure until a more robust solution could be implemented.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-graphql/CHANGELOG.md#_snippet_27\n\nLANGUAGE: diff\nCODE:\n```\n**gatsby-source-graphql:** Convert ts to plain js until better times ([#22848](https://github.com/gatsbyjs/gatsby/issues/22848)) ([ad945ec](https://github.com/gatsbyjs/gatsby/commit/ad945ec))\n```\n\n----------------------------------------\n\nTITLE: Setting Cache Control for HTML files\nDESCRIPTION: This snippet demonstrates the recommended cache-control header for HTML files in a Gatsby site.  It instructs browsers not to cache HTML files to ensure the latest version is always served. The header uses `public`, `max-age=0`, and `must-revalidate` to achieve this.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/previews-deploys-hosting/caching.md#_snippet_0\n\nLANGUAGE: HTTP\nCODE:\n```\ncache-control: public, max-age=0, must-revalidate\n```\n\n----------------------------------------\n\nTITLE: Configuring Site Metadata and Plugins in gatsby-config.js\nDESCRIPTION: This code snippet shows the basic structure of the gatsby-config.js file, demonstrating how to define site metadata and add plugins. It initializes the site title and includes the gatsby-plugin-react-helmet for managing head elements.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/sourcing-data/sourcing-from-wordpress.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  siteMetadata: {\n    title: \"Gatsby Default Starter\",\n  },\n  plugins: [\"gatsby-plugin-react-helmet\"],\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Contentful Data with gatsbyImageData in GraphQL\nDESCRIPTION: This GraphQL query retrieves blog post data from Contentful, specifically targeting the hero image of each blog post. It uses the `gatsbyImageData` resolver to generate image data optimized for the Gatsby image plugin, specifying a full-width layout.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/v3.1/index.md#_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  allContentfulBlogPost {\n    nodes {\n      heroImage {\n        gatsbyImageData(layout: FULL_WIDTH)\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Theme Options in gatsby-node.js\nDESCRIPTION: This code snippet demonstrates how to access theme options within a theme's gatsby-node.js file. The `createPages` function receives a `themeOptions` argument as its second parameter, allowing you to access and utilize the configured theme options during page creation.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/theme-api.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexports.createPages = async ({ graphql, actions }, themeOptions) => {\n  console.log(themeOptions)\n}\n```\n\n----------------------------------------\n\nTITLE: Hard Caching Media Files in Development\nDESCRIPTION: This snippet demonstrates hard caching of media files in the development environment using the `develop.hardCacheMediaFiles` option. This prevents re-downloading image files every time the Gatsby cache is cleared, speeding up development. The develop.hardCacheMediaFiles option is set to true.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-wordpress/docs/tutorials/creating-a-new-site-from-a-starter.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n      resolve: `gatsby-source-wordpress`,\n      options: {\n        url: `https://demo.wpgraphql.com/graphql`,\n        develop: {\n            hardCacheMediaFiles: true,\n        }\n      },\n    }\n```\n\n----------------------------------------\n\nTITLE: Updating Babel Monorepo Chore in gatsby-plugin-coffeescript\nDESCRIPTION: This code snippet shows chore work related to updating the babel monorepo in the gatsby-plugin-coffeescript. This update ensures the plugin utilizes the latest features, security patches, and performance enhancements within the babel ecosystem. It contributes to the overall stability and efficiency of the plugin.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-coffeescript/CHANGELOG.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nupdate babel monorepo [#37386](https://github.com/gatsbyjs/gatsby/issues/37386) ([b941876](https://github.com/gatsbyjs/gatsby/commit/b94187633d94d0f0071b38ffe93380dd802ec70f))\n```\n\n----------------------------------------\n\nTITLE: Install Gatsby Preload Fonts Plugin\nDESCRIPTION: This command installs the `gatsby-plugin-preload-fonts` package as a project dependency using npm. This is a necessary first step to use the plugin in a Gatsby project.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-preload-fonts/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install gatsby-plugin-preload-fonts\n```\n\n----------------------------------------\n\nTITLE: Merging Gatsby Changes into Fork\nDESCRIPTION: Merges the changes fetched from the Gatsby repository's master branch into the current branch of your forked repository. This integrates the upstream changes into your local branch, potentially requiring conflict resolution.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/contributing/how-to-open-a-pull-request.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ngit merge upstream/master\n```\n\n----------------------------------------\n\nTITLE: Updating Babel Monorepo\nDESCRIPTION: This snippet represents an update to the babel monorepo. It indicates an upgrade or change within the Babel project's packages.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-facebook-analytics/CHANGELOG.md#_snippet_1\n\nLANGUAGE: N/A\nCODE:\n```\nupdate babel monorepo [#27528](https://github.com/gatsbyjs/gatsby/issues/27528) ([539dbb0](https://github.com/gatsbyjs/gatsby/commit/539dbb09166e346a6cee568973d2de3d936e8ef3))\n```\n\n----------------------------------------\n\nTITLE: Updating Packages in Gatsby\nDESCRIPTION: This code snippet represents a commit that updates various packages within the Gatsby ecosystem. Updating packages ensures that the project benefits from the latest bug fixes, performance improvements, and features. It also helps maintain compatibility and security.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-screenshot/CHANGELOG.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n622e3c1\n```\n\n----------------------------------------\n\nTITLE: Fixing ignore pattern in Gatsby\nDESCRIPTION: This snippet addresses a bug where an ignore pattern was not wrapped in quotes. Wrapping the ignore pattern in quotes ensures that it is correctly interpreted by the relevant tools or scripts.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-canonical-urls/CHANGELOG.md#_snippet_7\n\nLANGUAGE: none\nCODE:\n```\nwrap ignore pattern in quotes ([#23176](https://github.com/gatsbyjs/gatsby/issues/23176)) ([7563db6](https://github.com/gatsbyjs/gatsby/commit/7563db6))\n```\n\n----------------------------------------\n\nTITLE: Default CSS Styling for Gatsby-Remark-Graphviz\nDESCRIPTION: This snippet displays the default CSS styling that gatsby-remark-graphviz applies to every rendered SVG. It sets `max-width` to 100% and `height` to `auto`, ensuring that graphs fit within their parent container while maintaining aspect ratio.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/using-remark/src/pages/2019-02-06---graphviz/index.md#_snippet_5\n\nLANGUAGE: css\nCODE:\n```\nmax-width: 100%;\nheight: auto;\n```\n\n----------------------------------------\n\nTITLE: Disable Post Revisions Check PHP\nDESCRIPTION: This snippet checks for the `WP_POST_REVISIONS` constant in `wp-config.php`. If found and set to `FALSE`, it suggests removing the line to enable post revisions, which might resolve issues with previews not updating.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-wordpress/docs/debugging-and-troubleshooting.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\ndefine( 'WP_POST_REVISIONS', FALSE );\n```\n\n----------------------------------------\n\nTITLE: Moving Progress Bar into Ink for gatsby-cli JavaScript\nDESCRIPTION: This snippet moves the progress bar functionality into Ink for gatsby-cli. Ink is a React-based framework for building command-line apps. Moving the progress bar to Ink likely improves its visual appearance and integration with the command-line interface, making it more interactive and user-friendly.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-cli/CHANGELOG.md#_snippet_26\n\nLANGUAGE: JavaScript\nCODE:\n```\n967597c\n```\n\n----------------------------------------\n\nTITLE: Example GraphQL Query Result\nDESCRIPTION: This is an example of the JSON response you would receive after running the GraphQL query. The JSON contains the data extracted from your JavaScript files, specifically the fields defined in your exported `data` objects.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-javascript-static-exports/README.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"data\": {\n    \"allJsFrontmatter\": {\n      \"edges\": [\n        {\n          \"node\": {\n            \"data\": {\n              \"error\": false,\n              \"path\": \"choropleth-on-d3v4\",\n              \"title\": \"Choropleth on d3v4\",\n              \"written\": \"2017-05-04\",\n              \"category\": \"data science\",\n              \"description\": \"Things about the choropleth.\",\n              \"updated\": null\n            }\n          }\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Queries using range filters\nDESCRIPTION: These Javascript examples show query structures using range filters ('gt') with various sort configurations. They can use index effectively when sort and range fields are overlapping, thus improving query speed.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby/src/datastore/lmdb/query/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{ filter: { a: { gt: \"foo\" } }, sort: { fields: [\"a\"] } }\n{ filter: { a: { gt: \"foo\" } }, sort: { fields: [\"a\", \"b\"] } }\n```\n\n----------------------------------------\n\nTITLE: Commit Changes - Shell\nDESCRIPTION: These commands are used to commit the changes made to the Gatsby project and push them to a GitHub repository. This ensures that the updated code, including the changes to the image source, is saved and backed up in the repository, allowing for version control and collaboration.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-3/index.mdx#_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\ngit add .\ngit commit -m \"Finished Gatsby Tutorial Part 3\"\ngit push\n```\n\n----------------------------------------\n\nTITLE: Fixing Package Changelog Links\nDESCRIPTION: This snippet corrects links in the package changelogs. Incorrect links can lead to confusion and difficulty navigating the changelog history. The fix ensures that users can easily access the relevant information for each version. It resolves issue #15630.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-json/CHANGELOG.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Inline Math Equation Example\nDESCRIPTION: Use the `$` symbol to enclose inline math equations. This allows you to embed equations directly within the text.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-katex/README.md#_snippet_3\n\nLANGUAGE: Markdown\nCODE:\n```\n$a^2 + b^2 = c^2$\n```\n\n----------------------------------------\n\nTITLE: Bumping Node Minimum Version\nDESCRIPTION: This feature updates the minimum required Node.js version to 10.13.0 for Gatsby projects, ensuring compatibility with newer language features and dependencies.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-drupal/CHANGELOG.md#_snippet_7\n\n\n\n----------------------------------------\n\nTITLE: Enable webpack Persistent Cache JavaScript\nDESCRIPTION: This code snippet shows how to enable the experimental webpack persistent caching feature for `gatsby develop` by adding a flag to the `gatsby-config.js` file. The flag `DEV_WEBPACK_CACHE` is set to `true` within the `flags` object.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/v3.10/index.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  flags: {\n    DEV_WEBPACK_CACHE: true,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Dates with Locale in GraphQL\nDESCRIPTION: This GraphQL query filters `allMarkdownRemark` to exclude nodes where the `date` field is null. It then retrieves the `title` and formats the `date` field using Moment.js, specifying both the `formatString` and a `locale` (de-DE for German).\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/graphql-reference.md#_snippet_20\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  allMarkdownRemark(filter: { frontmatter: { date: { ne: null } } }) {\n    edges {\n      node {\n        frontmatter {\n          title\n          date(formatString: \"dddd DD MMMM YYYY\", locale: \"de-DE\")\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating cheerio dependency in gatsby-remark-images-contentful\nDESCRIPTION: This code snippet represents a bug fix where the cheerio dependency was updated to version ^1.0.0-rc.10. This update addresses compatibility issues or bugs related to HTML parsing.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-images-contentful/CHANGELOG.md#_snippet_19\n\nLANGUAGE: None\nCODE:\n```\nupdate dependency cheerio to ^1.0.0-rc.10 [#32984](https://github.com/gatsbyjs/gatsby/issues/32984) ([7805783](https://github.com/gatsbyjs/gatsby/commit/7805783335394bfedddc3af8e61a71fb763b9608))\n```\n\n----------------------------------------\n\nTITLE: Updating cross-env dependency\nDESCRIPTION: This chore updates the `cross-env` dependency to version ^7.0.3. `cross-env` allows setting environment variables across different platforms. Updating this dependency ensures compatibility and access to the latest features and security updates.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-javascript-static-exports/CHANGELOG.md#_snippet_9\n\nLANGUAGE: None\nCODE:\n```\nupdate dependency cross-env to ^7.0.3 [#28505](https://github.com/gatsbyjs/gatsby/issues/28505) ([a819b9b](https://github.com/gatsbyjs/gatsby/commit/a819b9bfb663139f7b06c3ed7d6d6069a2382b2c))\n```\n\n----------------------------------------\n\nTITLE: StaticImage Valid Prop Usage Example (JS)\nDESCRIPTION: This example demonstrates correct usage of the StaticImage component with a local variable.  The `width` prop is assigned a static value within the component's scope, which is valid because it can be statically analyzed at build time.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/built-in-components/gatsby-plugin-image.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// OK\nexport function Dino() {\n  // Local variables are fine\n  const width = 300\n  return <StaticImage src=\"trex.png\" width={width} />\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Peer Dependencies to Theme with Yarn\nDESCRIPTION: Adds Gatsby, React, and React DOM as peer dependencies to the `gatsby-theme-events` theme using yarn workspaces.  The `-P` flag is a shorthand for `--peer`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/building-a-theme.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\nyarn workspace gatsby-theme-events add -P gatsby react react-dom\n```\n\n----------------------------------------\n\nTITLE: Fixing Babel Monorepo Issue JavaScript\nDESCRIPTION: This code snippet represents a bug fix related to updating the Babel monorepo. It addresses issue #37568 in the Gatsby repository. The commit associated with this fix is 13a0a9e83dcb015b65dff6b73cdd5dea09c2988f.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-javascript-frontmatter/CHANGELOG.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nupdate babel monorepo [#37568](https://github.com/gatsbyjs/gatsby/issues/37568) ([13a0a9e](https://github.com/gatsbyjs/gatsby/commit/13a0a9e83dcb015b65dff6b73cdd5dea09c2988f))\n```\n\n----------------------------------------\n\nTITLE: Example JavaScript Array from Single Objects\nDESCRIPTION: This JavaScript array demonstrates the structure of nodes created when parsing individual HJSON files. Each HJSON file becomes a node, with properties like `value` and `type` (based on the parent directory).\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-hjson/README.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n;[\n  {\n    value: \"a\",\n    type: \"Letters\",\n  },\n  {\n    value: \"b\",\n    type: \"Letters\",\n  },\n  {\n    value: \"c\",\n    type: \"Letters\",\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Gatsby Source Wikipedia Plugin in gatsby-config.js\nDESCRIPTION: This code snippet demonstrates how to configure the gatsby-source-wikipedia plugin within a Gatsby project's gatsby-config.js file. The plugin fetches articles from Wikipedia based on specified queries and limits. The `queries` array contains objects that define the search query and the maximum number of articles to fetch.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-wikipedia/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// In your gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: \"gatsby-source-wikipedia\",\n      options: {\n        // For each query, the plugin will go to Wikipedia's API and search for the query\n        // and fetch the top articles to the specified limit.\n        queries: [\n          {\n            query: `progressive web app`,\n            limit: 5,\n          },\n          {\n            query: `cheese`,\n            limit: 10,\n          },\n          {\n            query: `developers`,\n            limit: 10,\n          },\n        ],\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Site Metadata Node in Gatsby Source WordPress\nDESCRIPTION: This commit adds a feature to gatsby-source-wordpress that creates a site metadata node. This node provides access to various site-level metadata, such as the site title and description, making it easier to configure and customize Gatsby sites using WordPress data.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-wordpress/CHANGELOG.md#_snippet_21\n\n\n\n----------------------------------------\n\nTITLE: Updating Cheerio Snapshots\nDESCRIPTION: This change updates the cheerio snapshots. This is likely related to changes in the cheerio dependency and ensures that the snapshots used for testing remain accurate.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-responsive-iframe/CHANGELOG.md#_snippet_7\n\nLANGUAGE: Text\nCODE:\n```\nupdate cheerio snapshots [#31298](https://github.com/gatsbyjs/gatsby/issues/31298) ([e06599d](https://github.com/gatsbyjs/gatsby/commit/e06599d9acc53442f8830b04f8fa2c749a820cc5))\n```\n\nLANGUAGE: Text\nCODE:\n```\nupdate cheerio snapshots [#31298](https://github.com/gatsbyjs/gatsby/issues/31298) [#31483](https://github.com/gatsbyjs/gatsby/issues/31483) ([67a4fce](https://github.com/gatsbyjs/gatsby/commit/67a4fcef4651443cbe89923d4ac80e5600d94c41))\n```\n\n----------------------------------------\n\nTITLE: Creating a new Gatsby site\nDESCRIPTION: This command uses the Gatsby CLI to create a new Gatsby site, specifying the minimal starter. It downloads the starter template and sets up the initial project structure. Requires npm to be installed.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/starters/gatsby-starter-minimal/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm init gatsby\n```\n\n----------------------------------------\n\nTITLE: Checking richTextOptions existence before use (JavaScript)\nDESCRIPTION: This commit checks if the richTextOptions exist before attempting to use them. This prevents errors that can occur if the options are not defined.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-contentful/CHANGELOG.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\n80acb8d\n```\n\n----------------------------------------\n\nTITLE: Fix: Making createContentDigest deterministic\nDESCRIPTION: This code snippet aims to make the `createContentDigest` function in `gatsby-core-utils` deterministic. Deterministic content digests are crucial for ensuring consistent builds and avoiding unnecessary rebuilds when the underlying content hasn't changed.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-core-utils/CHANGELOG.md#_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Updating gatsby-dev-cli Minor and Patch\nDESCRIPTION: This commit updates the `gatsby-dev-cli` package to a newer minor and patch version.  It addresses bug fixes and minor improvements. The pull request is referenced by its GitHub issue number.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-dev-cli/CHANGELOG.md#_snippet_3\n\nLANGUAGE: Text\nCODE:\n```\nupdate minor and patch for gatsby-dev-cli [#29174](https://github.com/gatsbyjs/gatsby/issues/29174) ([4f8ae3c](https://github.com/gatsbyjs/gatsby/commit/4f8ae3c1087f36619a8c6fecc0e2cc0187b02930))\n```\n\n----------------------------------------\n\nTITLE: Applying Patches for v5 in Javascript\nDESCRIPTION: This snippet applies patches for version 5 of gatsby-plugin-schema-snapshot. It addresses issue #36796 on the Gatsby repository.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-schema-snapshot/CHANGELOG.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\napply patches for v5 [#36796](https://github.com/gatsbyjs/gatsby/issues/36796) ([25f79b6](https://github.com/gatsbyjs/gatsby/commit/25f79b6c3719fdf09584ade620a05c66ba2a697c))\n```\n\n----------------------------------------\n\nTITLE: Linking Post to Asset via createAssetNode's ID (TS)\nDESCRIPTION: This snippet shows how to link a Post node to an Asset node by using the ID returned from the createAssetNode function and assigning it to the image field of the Post node.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/creating-a-source-plugin/part-6/index.mdx#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nexport function nodeBuilder({ gatsbyApi, input }: INodeBuilderArgs) {\n  const id = gatsbyApi.createNodeId(`${input.type}-${input.data.id}`)\n\n  const extraData: Record<string, unknown> = {}\n\n  if (input.type === `Post`) {\n    // highlight-next-line\n    const assetId = createAssetNode(gatsbyApi, input.data.image)\n\n    // highlight-next-line\n    extraData.image = assetId\n  }\n\n  // Rest of nodeBuilder\n}\n```\n\n----------------------------------------\n\nTITLE: Querying GraphQL data with sort (current)\nDESCRIPTION: Demonstrates the current method of sorting data in Gatsby's GraphQL API using the `sort` field. The query retrieves all MarkdownRemark nodes, ordering them by the `date` field within the `frontmatter` object in descending order. This is the syntax that will be deprecated in future versions.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/v4.20/index.md#_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n    nodes {\n      ...fields\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Babel Monorepo Update in gatsby-plugin-react-helmet\nDESCRIPTION: This code snippet represents a bug fix related to updating the Babel monorepo within the gatsby-plugin-react-helmet package. It addresses issue #37568 by applying a specific commit.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-react-helmet/CHANGELOG.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nupdate babel monorepo [#37568](https://github.com/gatsbyjs/gatsby/issues/37568) ([13a0a9e](https://github.com/gatsbyjs/gatsby/commit/13a0a9e83dcb015b65dff6b73cdd5dea09c2988f))\n```\n\n----------------------------------------\n\nTITLE: Fixing PnP issue in gatsby-plugin-emotion\nDESCRIPTION: This snippet shows how to fix an issue related to PnP (Plug'n'Play) by using `require.resolve` on `setBabelPreset`. This ensures that the Babel preset is correctly resolved in a PnP environment.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-emotion/CHANGELOG.md#_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire.resolve\n```\n\n----------------------------------------\n\nTITLE: Shadowing Gatsby Plugin Theme UI Index (JS)\nDESCRIPTION: This snippet shows how to shadow the index.js file from gatsby-plugin-theme-ui to customize styling. It modifies the default font sizes, space, and colors, overriding the existing theme settings.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/plugins-and-themes/shadowing.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nexport default {\n  fontSizes: [12, 14, 16, 24, 32, 48, 64, 96, 128],\n  space: [0, 4, 8, 16, 32, 64, 128, 256],\n  colors: {\n    primary: `tomato`,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Babel Monorepo in Gatsby\nDESCRIPTION: This snippet updates the babel monorepo. The update is part of a chore and addresses issue #27528 in the Gatsby repository. It ensures the plugin uses the latest version of Babel for improved JavaScript transpilation.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-cxs/CHANGELOG.md#_snippet_15\n\nLANGUAGE: Text\nCODE:\n```\nupdate babel monorepo [#27528](https://github.com/gatsbyjs/gatsby/issues/27528) ([539dbb0](https://github.com/gatsbyjs/gatsby/commit/539dbb09166e346a6cee568973d2de3d936e8ef3))\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest to use setup-test-env.js\nDESCRIPTION: This JSON snippet shows how to configure Jest in the `package.json` file to use the `setup-test-env.js` file. This file is executed before each test and is where the Emotion serializer is registered.  This ensures that the serializer is available for all tests.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/testing/testing-css-in-js.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n \"jest\": {\n  \"setupFilesAfterEnv\": [`<rootDir>/setup-test-env.js`]\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query to Fetch Linked Author Data\nDESCRIPTION: This GraphQL query retrieves all posts and their associated author names. It showcases the use of subfields to select the `name` field from the linked `author` node after establishing the foreign-key relationship using the `@link` directive.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/creating-a-source-plugin/part-3/index.mdx#_snippet_10\n\nLANGUAGE: GraphQL\nCODE:\n```\nquery MyQuery {\n  allPost {\n    nodes {\n      title\n      author {\n        name\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure theme options in gatsby-config.js (JavaScript)\nDESCRIPTION: This snippet configures the theme options in `gatsby-config.js` to accept `contentPath` and `basePath`. It sets default values for both options.  Dependencies: gatsby-source-filesystem, gatsby-transformer-yaml.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/building-a-theme.md#_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\n// highlight-next-line\nmodule.exports = ({ contentPath = `${__dirname}/data/`, basePath = \"/\" }) => ({\n  plugins: [\n    {\n      resolve: \"gatsby-source-filesystem\",\n      options: {\n        // highlight-next-line\n        path: contentPath,\n      },\n    },\n    {\n      resolve: \"gatsby-transformer-yaml\",\n      options: {\n        typeName: \"Event\",\n      },\n    },\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Creating resilient sharp wrapper in gatsby-remark-images-contentful\nDESCRIPTION: This code snippet describes the feature of creating a more resilient wrapper around sharp. This likely improves error handling and stability when using sharp for image processing within the gatsby-remark-images-contentful plugin.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-images-contentful/CHANGELOG.md#_snippet_13\n\nLANGUAGE: None\nCODE:\n```\ncreate more resilient wrapper around sharp [#34339](https://github.com/gatsbyjs/gatsby/issues/34339) ([a3fa646](https://github.com/gatsbyjs/gatsby/commit/a3fa646eb6b51004ef9e85a32f7be1cf2d0cc2db))\n```\n\n----------------------------------------\n\nTITLE: GraphQL query to fetch blog posts and category\nDESCRIPTION: This GraphQL query retrieves all blog posts and their associated categories from the Gatsby data layer, which is populated by the `gatsby-source-flotiq` plugin. It fetches the id, slug, and category name for each blog post.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/sourcing-from-flotiq.md#_snippet_6\n\nLANGUAGE: GraphQL\nCODE:\n```\nquery {\n  allBlogPost {\n    nodes {\n      id\n      slug\n      category {\n        name\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Promise API Example in Gatsby Node API\nDESCRIPTION: This snippet shows how to perform asynchronous operations using the Promise API within a Gatsby Node API (specifically `createPages`). Gatsby waits for the promise to resolve before continuing the build process. Requires a `resolve` and `reject` callback function.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/config-files/gatsby-node.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Promise API\nexports.createPages = () => {\n  return new Promise((resolve, reject) => {\n    // do async work\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Styled Component for Search Root in React\nDESCRIPTION: This styled component, `StyledSearchRoot`, is a wrapper for the search functionality. It uses styled-components library to create a div with relative positioning, which is necessary to position the search popover underneath it. It uses CSS for styling.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/adding-search-with-algolia.md#_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nimport styled from \"styled-components\"\n\nexport default styled.div`\n  position: relative;\n  margin: 0.6em 0;\n`\n```\n\n----------------------------------------\n\nTITLE: Query Created Slugs using GraphQL\nDESCRIPTION: This GraphQL query retrieves all `MarkdownRemark` nodes and their associated slugs from the `fields` object. It assumes that the slugs have been previously created and added to the nodes using the `createNodeField` API in `gatsby-node.js`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/creating-slugs-for-pages.md#_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  allMarkdownRemark {\n    edges {\n      node {\n        fields {\n          slug\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Chore: Apply patches for v5\nDESCRIPTION: This code snippet applies patches specifically for version 5 of the gatsby-plugin-google-gtag plugin. Patches often contain bug fixes, security enhancements, or minor improvements necessary for the stable operation of the specified version.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-google-gtag/CHANGELOG.md#_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n#### Chores\n\n- apply patches for v5 [#36796](https://github.com/gatsbyjs/gatsby/issues/36796) ([25f79b6](https://github.com/gatsbyjs/gatsby/commit/25f79b6c3719fdf09584ade620a05c66ba2a697c))\n```\n\n----------------------------------------\n\nTITLE: Updating README instructions in gatsby-design-tokens\nDESCRIPTION: This code snippet represents a chore that updates the README files for the gatsby-design-tokens package to provide better instructions. It does not reference a specific issue number.  Included as part of the 4.19.0 release.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-design-tokens/CHANGELOG.md#_snippet_5\n\nLANGUAGE: TEXT\nCODE:\n```\n- Update READMEs for better instructions ([0890a5c](https://github.com/gatsbyjs/gatsby/commit/0890a5cf2c881b49193113a1e1bd5fe13a2c328f))\n```\n\n----------------------------------------\n\nTITLE: Updating documentation for develop PORT - gatsby-cli JavaScript\nDESCRIPTION: This snippet updates the documentation for the `gatsby develop` command to clarify the usage of the `PORT` environment variable.  The updated documentation helps users understand how to configure the development server's port using the `PORT` environment variable.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-cli/CHANGELOG.md#_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\nupdate docs for develop PORT env var ([#20250](https://github.com/gatsbyjs/gatsby/issues/20250)) ([ff7ad18](https://github.com/gatsbyjs/gatsby/commit/ff7ad18))\n```\n\n----------------------------------------\n\nTITLE: Refactoring Console Functions in Gatsby JavaScript\nDESCRIPTION: This snippet performs a minor refactor of console functions within Gatsby. This likely involves changes to how console messages are logged, potentially improving readability, consistency, or providing more informative output. The refactor aims to enhance the developer experience by improving the clarity of console logs.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-cli/CHANGELOG.md#_snippet_22\n\nLANGUAGE: JavaScript\nCODE:\n```\n7775b3e\n```\n\n----------------------------------------\n\nTITLE: Defining CSS Module Style\nDESCRIPTION: This CSS snippet demonstrates how to define a CSS class within a CSS Module. It defines a style named 'title' with a blue color and a font size of 3rem.  This style will be scoped to the component in which it's imported.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-2/index.mdx#_snippet_18\n\nLANGUAGE: CSS\nCODE:\n```\n.title {\n  color: blue;\n  font-size: 3rem;\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Patches for v5 in gatsby-plugin-feed\nDESCRIPTION: This code snippet denotes a chore related to applying patches for version 5. These patches address specific issues or enhancements introduced in version 5 of the plugin. Applying these patches ensures the `gatsby-plugin-feed` plugin functions optimally within the version 5 environment.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-feed/CHANGELOG.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\napply patches for v5 [#36796](https://github.com/gatsbyjs/gatsby/issues/36796) ([25f79b6](https://github.com/gatsbyjs/gatsby/commit/25f79b6c3719fdf09584ade620a05c66ba2a697c))\n```\n\n----------------------------------------\n\nTITLE: Fixing links to Vercel in Gatsby\nDESCRIPTION: This commit fixes links related to Zeit by updating them to point to Vercel, likely due to a rebranding or migration of services. The fix ensures that links within the gatsby-plugin-styled-jsx package point to the correct platform.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-styled-jsx/CHANGELOG.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\nlinks zeit to vercel ([#24786](https://github.com/gatsbyjs/gatsby/issues/24786)) ([f14c99b](https://github.com/gatsbyjs/gatsby/commit/f14c99b))\n```\n\n----------------------------------------\n\nTITLE: Breadcrumb Title YAML Configuration\nDESCRIPTION: This YAML snippet demonstrates how to configure the `breadcrumbTitle` in a Gatsby sidebar YAML file. The breadcrumbTitle provides an abbreviated title to be displayed in the breadcrumb navigation component, improving readability for long titles. This only works in the private GitHub repo.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/contributing/docs-contributions/index.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\n- title: Adding Page Transitions\n  link: /docs/adding-page-transitions/\n  breadcrumbTitle: Page Transitions # highlight-line\n```\n\n----------------------------------------\n\nTITLE: Fetching Content with Sync Token in JavaScript\nDESCRIPTION: This JavaScript code snippet shows how to pass the sync token to a utility function `fetchContent` to retrieve delta updates from the remote API. The `fetchContent` function returns the `currentSyncData`, which contains the updated content.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/creating-a-source-plugin/part-5/index.mdx#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst {\n      currentSyncData,\n      // + other data\n    } = await fetchContent({ syncToken, pluginConfig, reporter })\n```\n\n----------------------------------------\n\nTITLE: Configuring gatsby-remark-autolink-headers in gatsby-config.js\nDESCRIPTION: This code snippet demonstrates how to configure the `gatsby-remark-autolink-headers` plugin within the `gatsby-config.js` file.  It shows the necessary structure to include the plugin as part of the `gatsby-transformer-remark` plugin options, which processes markdown files.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-autolink-headers/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// In your gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-transformer-remark`,\n      options: {\n        plugins: [`gatsby-remark-autolink-headers`],\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Draft Assets in Contentful - JavaScript\nDESCRIPTION: This fix ensures that the `gatsby-source-contentful` plugin correctly handles assets that are in a draft state in Contentful. It prevents errors or unexpected behavior that might occur when processing draft assets, ensuring that only published assets are included in the Gatsby build.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-contentful/CHANGELOG.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n7e40c1e\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video in MDX\nDESCRIPTION: This MDX code snippet demonstrates how to embed a YouTube video into a blog post using the `@pauliescanlon/gatsby-mdx-embed` plugin. It includes the `YouTube` component with the `youTubeId` prop to specify the video to embed.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/using-multiple-themes-together.md#_snippet_11\n\nLANGUAGE: MDX\nCODE:\n```\n---\ntitle: Jason and Jackson Talk Themes\ndate: 2020-02-21\n---\n\nHere is a video about composing and styling themes with J&J!\n\n<YouTube youTubeId=\"6Z4p-qjnKCQ\" />\n```\n\n----------------------------------------\n\nTITLE: Exporting WordPress Database\nDESCRIPTION: This command exports the WordPress database using the mysqldump command-line tool. It requires the MySQL client to be installed. The command connects to the database using the specified credentials and host and creates a SQL dump file named `backup.sql`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-wordpress/docs/tests.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmysqldump --user=wordpress --password=gtsb-wp-dckr-user --port=3306 --host=127.0.0.1 --no-tablespaces --databases wordpress > backup.sql\n```\n\n----------------------------------------\n\nTITLE: Define Nested GraphQL Type with SDL in Gatsby\nDESCRIPTION: This snippet defines a nested GraphQL type `Frontmatter` and links it to the `frontmatter` field of the `MarkdownRemark` type using GraphQL SDL in Gatsby. It ensures that the `tags` field in `frontmatter` is always an array of strings.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/graphql-data-layer/schema-customization.md#_snippet_11\n\nLANGUAGE: js\nCODE:\n```\nexports.createSchemaCustomization = ({ actions }) => {\n  const { createTypes } = actions\n  const typeDefs = `\n    type MarkdownRemark implements Node {\n      frontmatter: Frontmatter\n    }\n    type Frontmatter {\n      tags: [String!]!\n    }\n  `\n  createTypes(typeDefs)\n}\n```\n\n----------------------------------------\n\nTITLE: Import Fontsource in gatsby-browser.js\nDESCRIPTION: This code snippet shows how to import the Open Sans font package from Fontsource in the `gatsby-browser.js` file.  This makes the font available for use throughout the Gatsby site.  The default import includes weight 400 with the normal variant.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/styling/using-web-fonts.md#_snippet_4\n\nLANGUAGE: JSX\nCODE:\n```\nimport \"@fontsource/open-sans\" // Defaults to weight 400 with normal variant.\n```\n\n----------------------------------------\n\nTITLE: Configuring gatsby-plugin-mdx to accept .md and .mdx files\nDESCRIPTION: This code snippet shows how to configure `gatsby-plugin-mdx` to accept both `.md` and `.mdx` file extensions. This allows the plugin to process existing Markdown files without requiring a rename.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/routing/migrate-remark-to-mdx.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n    resolve: `gatsby-plugin-mdx`,\n    options: {\n      extensions: [`.md`, `.mdx`], // highlight-line\n    },\n  },\n```\n\n----------------------------------------\n\nTITLE: Fix Babel Monorepo Update JavaScript\nDESCRIPTION: This code snippet addresses a bug related to updating the Babel monorepo within the gatsby-plugin-canonical-urls package. It ensures that the Babel configurations are properly updated to maintain compatibility and functionality.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-canonical-urls/CHANGELOG.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nupdate babel monorepo [#37568](https://github.com/gatsbyjs/gatsby/issues/37568) ([13a0a9e](https://github.com/gatsbyjs/gatsby/commit/13a0a9e83dcb015b65dff6b73cdd5dea09c2988f))\n```\n\n----------------------------------------\n\nTITLE: Example HJSON Object (c.hjson)\nDESCRIPTION: This HJSON snippet shows the content of a single HJSON file (`c.hjson`).  When used with `gatsby-transformer-hjson` and placed in a specific directory structure, it will be converted into a Gatsby node. The `value` property will be accessible via GraphQL queries.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-hjson/README.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\nvalue: c\n```\n\n----------------------------------------\n\nTITLE: CSS Module Example\nDESCRIPTION: This CSS module defines a container class with specific margin and max-width properties.  The file extension `.module.css` indicates that it should be processed as a CSS Module, which will scope the class names locally to avoid naming conflicts.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/styling/css-modules.md#_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.container {\n  margin: 3rem auto;\n  max-width: 600px;\n}\n```\n\n----------------------------------------\n\nTITLE: Sort Markdown Remark Query GraphQL\nDESCRIPTION: This query retrieves MarkdownRemark nodes sorted by a specified field. The `sort` argument is used to order the nodes by the frontmatter date in ascending order. It fetches the total count, frontmatter title, and date for each node.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/graphql-reference/content/queries.md#_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  allMarkdownRemark(sort: { frontmatter: { date: ASC } }) {\n    totalCount\n    edges {\n      node {\n        frontmatter {\n          title\n          date\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Table of Contents Markdown\nDESCRIPTION: This Markdown snippet shows how to disable the Table of Contents in a Gatsby documentation page by setting the `disableTableOfContents` frontmatter tag to `true`. This is useful for pages where a table of contents is not necessary or relevant. This snippet shows how it is done on the Glossary page.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/contributing/docs-contributions/index.md#_snippet_3\n\nLANGUAGE: Markdown\nCODE:\n```\n---\ntitle: Glossary\ndisableTableOfContents: true\n---\n\nWhen you're new to Gatsby there can be a lot of words to learn...\n```\n\n----------------------------------------\n\nTITLE: Replacing gatsbyjs.org with gatsbyjs.com\nDESCRIPTION: This snippet illustrates a chore to replace all instances of the old domain (gatsbyjs.org) with the new one (gatsbyjs.com). This is crucial for keeping links and resources up-to-date.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-lever/CHANGELOG.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nreplace all uses of gatsbyjs.org with gatsbyjs.com [#35101](https://github.com/gatsbyjs/gatsby/issues/35101) ([16cff41](https://github.com/gatsbyjs/gatsby/commit/16cff413e154dc4e74fc5be631d52c76273e5cbc))\n```\n\n----------------------------------------\n\nTITLE: Fixing React Compatibility in gatsby-plugin-fullstory\nDESCRIPTION: This snippet documents a bug fix addressing compatibility issues with React Release Candidate 2 (rc 2) in the gatsby-plugin-fullstory. The fix is linked to issue #35108 and includes a commit hash for reference.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-fullstory/CHANGELOG.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ncompatibility with react rc 2 [#35108](https://github.com/gatsbyjs/gatsby/issues/35108) ([0c61265](https://github.com/gatsbyjs/gatsby/commit/0c6126574d203c0e6fef173b76859cdcab2f13aa))\n```\n\n----------------------------------------\n\nTITLE: Updating Bluebird Dependency\nDESCRIPTION: This commit updates the `bluebird` dependency to version ^3.7.0. Bluebird is a popular promise library for JavaScript.  Updating Bluebird ensures the project uses the latest bug fixes, performance improvements, and features of the library.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-lever/CHANGELOG.md#_snippet_15\n\nLANGUAGE: Shell\nCODE:\n```\nupdate dependency bluebird to ^3.7.0 ([#18029](https://github.com/gatsbyjs/gatsby/issues/18029)) ([bd235a8](https://github.com/gatsbyjs/gatsby/commit/bd235a8))\n```\n\n----------------------------------------\n\nTITLE: Extracting Logic for Page Watching in Gatsby\nDESCRIPTION: This code snippet outlines the extraction of the directory watching logic from gatsby-page-creator to gatsby-page-utils. This allows reuse for custom page creation and promotes modularity in Gatsby's architecture.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-page-creator/CHANGELOG.md#_snippet_42\n\nLANGUAGE: Text\nCODE:\n```\n**gatsby-page-utils:** extract logic for watching a directory from gatsby-page-creator so can reuse for custom page creation ([#14051](https://github.com/gatsbyjs/gatsby/issues/14051)) ([68d9d6f](https://github.com/gatsbyjs/gatsby/commit/68d9d6f))\n```\n\n----------------------------------------\n\nTITLE: Update Gatsby Peer Dependency in package.json\nDESCRIPTION: This snippet demonstrates how to update the Gatsby peer dependency in a plugin's package.json file to ensure compatibility with Gatsby v3. It shows the difference between an older Gatsby v2 version and the new Gatsby v3 version. This informs Gatsby that the plugin is compatible with the specified Gatsby version.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v2-to-v3.md#_snippet_37\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"peerDependencies\": {\n    \"gatsby\": \"^3.0.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Slice Component in Gatsby\nDESCRIPTION: This code shows how to use the `<Slice />` component in a Gatsby site to render a slice. It utilizes the `alias` prop to specify the slice to render. Additional props passed to the component are handed down to the underlying slice component.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/v4.21/index.md#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nreturn (\n  <>\n    <Header className=\"my-header\" />\n    {children}\n    <Slice alias=\"footer\" />\n  </>\n)\n```\n\n----------------------------------------\n\nTITLE: Chore: Remove tracedSVG in gatsby-plugin-image\nDESCRIPTION: This snippet represents a chore where `tracedSVG` functionality is removed from the `gatsby-plugin-image` package. This removal likely streamlines the plugin's codebase or replaces it with a more efficient alternative.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-image/CHANGELOG.md#_snippet_21\n\nLANGUAGE: JavaScript\nCODE:\n```\nremove tracedSVG [#37093](https://github.com/gatsbyjs/gatsby/issues/37093) ([94c2d73](https://github.com/gatsbyjs/gatsby/commit/94c2d735ad378bf05836e74cc47f7ca9523cabdc))\n```\n\n----------------------------------------\n\nTITLE: Run Gatsby Query Timing (Loki No Index)\nDESCRIPTION: This shell command executes the `runQueryTiming.sh` script to benchmark Gatsby query performance with Loki datastore and no indexes enabled. It sets the number of page types (NUM_TYPES) and the number of pages (NUM_PAGES) as environment variables for the script.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/benchmarks/query/recording.md#_snippet_4\n\nLANGUAGE: Shell Script\nCODE:\n```\nquery $ NUM_TYPES=1 NUM_PAGES=10000 bin/runQueryTiming.sh\n14.834\n```\n\n----------------------------------------\n\nTITLE: Updating Babel Monorepo - JavaScript\nDESCRIPTION: This commit updates the Babel monorepo. Babel is a JavaScript compiler that transforms ECMAScript 2015+ code into a backwards compatible version of JavaScript. Updating babel ensures compatibility with newer JavaScript syntax.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-responsive-iframe/CHANGELOG.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nupdate babel monorepo [#27528](https://github.com/gatsbyjs/gatsby/issues/27528) ([539dbb0](https://github.com/gatsbyjs/gatsby/commit/539dbb09166e346a6cee568973d2de3d936e8ef3))\n```\n\n----------------------------------------\n\nTITLE: Fix: Pin Cheerio Version - gatsby-remark-prismjs\nDESCRIPTION: This code snippet fixes a bug by pinning the Cheerio dependency. It ensures consistent behavior and resolves potential issues introduced by newer versions of Cheerio. The fix addresses issues #39066 and #39069.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-prismjs/CHANGELOG.md#_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n282caaf(https://github.com/gatsbyjs/gatsby/commit/282caafe45ff3f8f4a8bd0d82807ca5b9b742dd1)\n```\n\n----------------------------------------\n\nTITLE: Using the Slice Component in JSX\nDESCRIPTION: This code snippet shows how to use the `<Slice />` component within a JSX structure. It includes a header, child components, and a slice with the alias \"footer\". Props passed to the `<Slice />` component will be passed to the underlying component.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/v4.23/index.md#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\nreturn (\n  <>\n    <Header className=\"my-header\" />\n    {children}\n    <Slice alias=\"footer\" />\n  </>\n)\n```\n\n----------------------------------------\n\nTITLE: Using shortcode components in MDX\nDESCRIPTION: Example showing how to use components that have been made globally available through the `MDXProvider`.  The `<Message>` and `<Chart>` components can be directly used without importing them.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/routing/mdx.md#_snippet_9\n\nLANGUAGE: MDX\nCODE:\n```\n---\ntitle: Shortcode Components Example\n---\n\nNow, if you want to include the Message component, it's available in all MDX documents!\n\n<Message>MDX gives you JSX in Markdown!</Message> // highlight-line\n\nThe Chart is also available since it was passed into the MDXProvider:\n\n<Chart /> // highlight-line\n```\n\n----------------------------------------\n\nTITLE: Removing git.io URLs in gatsby-transformer-excel\nDESCRIPTION: This code snippet removes instances of `git.io` URLs within the `gatsby-transformer-excel` package. This update enhances maintainability and security by eliminating reliance on a deprecated URL shortener service.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-excel/CHANGELOG.md#_snippet_5\n\nLANGUAGE: Patch\nCODE:\n```\nremove git.io urls [#35497](https://github.com/gatsbyjs/gatsby/issues/35497) ([31c7a4d](https://github.com/gatsbyjs/gatsby/commit/31c7a4d54048a51331b49567c72068d7b638eb2e))\n```\n\n----------------------------------------\n\nTITLE: Configure Gatsby Plugin\nDESCRIPTION: Configures the `gatsby-source-npm-package-search` plugin in `gatsby-config.js`.  The `resolve` field specifies the plugin's name, and the `options` field allows specifying keywords to filter the packages searched.  The keywords should be an array of strings.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-npm-package-search/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// In your gatsby-config.js\nplugins: [\n  {\n    resolve: `gatsby-source-npm-package-search`,\n    options: {\n      keywords: [`keyword1`, `keyword2`],\n    },\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Updating Lodash Monorepo\nDESCRIPTION: This commit updates the lodash monorepo to version ^4.17.21. Lodash is a utility library providing helpful functions, and updating it ensures the package benefits from the latest bug fixes and performance improvements.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-yaml/CHANGELOG.md#_snippet_6\n\nLANGUAGE: \nCODE:\n```\nupdate lodash monorepo to ^4.17.21 [#29382](https://github.com/gatsbyjs/gatsby/issues/29382) ([9fd287b](https://github.com/gatsbyjs/gatsby/commit/9fd287ba89eacd55652d468b18f6e1526230e7c6))\n```\n\n----------------------------------------\n\nTITLE: Fixing Babel Monorepo bug in gatsby-transformer-asciidoc\nDESCRIPTION: This code snippet represents a bug fix related to updating the Babel monorepo within the gatsby-transformer-asciidoc package. It addresses issue #37568 by applying a specific commit that resolves the problem.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-asciidoc/CHANGELOG.md#_snippet_0\n\nLANGUAGE: patch\nCODE:\n```\nupdate babel monorepo [#37568](https://github.com/gatsbyjs/gatsby/issues/37568) ([13a0a9e](https://github.com/gatsbyjs/gatsby/commit/13a0a9e83dcb015b65dff6b73cdd5dea09c2988f))\n```\n\n----------------------------------------\n\nTITLE: Create a markdown file with frontmatter\nDESCRIPTION: Creates a markdown file with frontmatter, which is a set of key/value pairs used to provide additional data relevant to specific pages in the GraphQL data layer. The `slug` value is particularly important as it's used to define the final URL of the post.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/routing/adding-markdown-pages.md#_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n---\nslug: \"/my-first-blog-post\"\ndate: \"2022-11-24\"\ntitle: \"My first blog post\"\n---\n```\n\n----------------------------------------\n\nTITLE: Run gatsby-plugin-manifest Watch Mode (Shell)\nDESCRIPTION: This command runs the `watch` script from the root of the Gatsby repository, targeting the `gatsby-plugin-manifest` package. It compiles changes made to the plugin into the local `node_modules` directory.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/benchmarks/plugin-manifest/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nyarn run watch --scope=gatsby-plugin-manifest .\n```\n\n----------------------------------------\n\nTITLE: Adding gatsby-parcel-config & updating gatsby-script\nDESCRIPTION: This commit adds the `gatsby-parcel-config` package and updates `gatsby-script`. This likely involves integrating Parcel as a bundler and updating the gatsby-script component for improved functionality.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-parcel-config/CHANGELOG.md#_snippet_10\n\nLANGUAGE: Shell\nCODE:\n```\nAdd gatsby-parcel-config & update gatsby-script [#35978](https://github.com/gatsbyjs/gatsby/issues/35978) ([5feeea6](https://github.com/gatsbyjs/gatsby/commit/5feeea6866a9a4882672dcb2b5878c6826e229fc))\n```\n\n----------------------------------------\n\nTITLE: Feature: Enable Resolve-URL-Loader Option\nDESCRIPTION: This commit adds an option to enable the resolve-url-loader within gatsby-plugin-sass. The resolve-url-loader resolves relative URLs in Sass files, allowing for proper asset handling within Gatsby projects.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-sass/CHANGELOG.md#_snippet_10\n\n\n\n----------------------------------------\n\nTITLE: Enable Debug Mode for GraphQL Errors\nDESCRIPTION: This plugin configuration enables debug mode to write GraphQL queries to disk for debugging purposes. This allows you to inspect the queries that Gatsby is using to fetch data from WordPress and troubleshoot errors.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-wordpress/docs/debugging-and-troubleshooting.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  resolve: `gatsby-source-wordpress`,\n  options: {\n    debug: {\n      graphql: {\n        writeQueriesToDisk: true,\n      },\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Babel Monorepo - Chore\nDESCRIPTION: This chore updates the Babel monorepo to a newer version. Babel is a JavaScript compiler, and updating it ensures compatibility with the latest JavaScript features and improvements. The issue and commit associated with this update are included.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-documentationjs/CHANGELOG.md#_snippet_7\n\nLANGUAGE: N/A\nCODE:\n```\nupdate babel monorepo [#32564](https://github.com/gatsbyjs/gatsby/issues/32564) ([a554998](https://github.com/gatsbyjs/gatsby/commit/a554998b4f6765103b650813cf52dbfcc575fecf))\n```\n\n----------------------------------------\n\nTITLE: Formatting changelog files in gatsby-design-tokens\nDESCRIPTION: This code snippet represents a chore that formats the changelog files for consistency in the gatsby-design-tokens package. This change does not reference a specific issue number, and was applied as part of the 4.9.0 release.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-design-tokens/CHANGELOG.md#_snippet_6\n\nLANGUAGE: TEXT\nCODE:\n```\n- Format changelog files ([088f23b](https://github.com/gatsbyjs/gatsby/commit/088f23b084b67f746a383e06e9216cef83270317))\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for MDX Query\nDESCRIPTION: This JSON object represents a sample response from the GraphQL query for MDX frontmatter.  It shows the structure of the data returned, including the title and formatted date of a blog post.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-7/index.mdx#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"mdx\": {\n      \"frontmatter\": {\n        \"title\": \"My First Post\",\n        \"date\": \"July 23, 2021\"\n      }\n    }\n  },\n  \"extensions\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Polyfill for Object.setPrototypeOf for IE11\nDESCRIPTION: This snippet provides a polyfill for `Object.setPrototypeOf` in JavaScript, specifically designed for Internet Explorer 11. It defines a custom implementation of `Object.setPrototypeOf` to address the issue where IE11 does not natively support this method. The purpose is to ensure compatibility with older browsers that lack native support for modern JavaScript features.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v2-to-v3.md#_snippet_41\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst setPrototypeOf = (function(Object, magic) {\n    'use strict';\n    var set;\n    function checkArgs(O, proto) {\n        // React calls Object.setPrototypeOf with function type, exit\n        if (typeof O === 'function') { return; }\n        if (typeof O !== 'object' || O === null) {\n            throw new TypeError('can not set prototype on a non-object');\n        }\n    }\n    function setPrototypeOf(O, proto) {\n        checkArgs(O, proto);\n        set.call(O, proto);\n        return O;\n    }\n    try {\n        // this works already in Firefox and Safari\n        set = Object.getOwnPropertyDescriptor(Object.prototype, magic).set;\n        set.call({}, null);\n    } catch (o_O) {\n        set = function(proto) {\n            this[magic] = proto;\n        };\n        setPrototypeOf.polyfill = setPrototypeOf(\n            setPrototypeOf({}, null),\n            Object.prototype\n        ) instanceof Object;\n    }\n    return setPrototypeOf;\n}(Object, '__proto__'))\n\nexport { setPrototypeOf }\n```\n\n----------------------------------------\n\nTITLE: Opting out of Type Inference\nDESCRIPTION: This JavaScript code snippet demonstrates how to use the `@dontInfer` directive to opt out of Gatsby's automatic type inference.  This requires explicitly defining all fields for the `AuthorJson` type, but can improve performance for larger projects.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/graphql-data-layer/schema-customization.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexports.createSchemaCustomization = ({ actions }) => {\n  const { createTypes } = actions\n  const typeDefs = `\n    type AuthorJson implements Node @dontInfer {\n      name: String!\n      firstName: String!\n      email: String!\n      joinedAt: Date\n    }\n  `\n  createTypes(typeDefs)\n}\n```\n\n----------------------------------------\n\nTITLE: Verify Homebrew Installation (macOS)\nDESCRIPTION: This command checks if Homebrew is installed on a macOS system and displays the installed version.  It is a prerequisite for installing Node.js and other development tools on macOS using Homebrew.  The expected output is 'Homebrew' followed by a version number.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-0/index.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nbrew -v\n```\n\n----------------------------------------\n\nTITLE: DSG Configuration in createPage API\nDESCRIPTION: This snippet demonstrates how to enable Deferred Static Generation (DSG) when creating pages using the createPage API in gatsby-node.js. By setting the defer property to true in the createPage options, the page generation is deferred until the first user request.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/rendering-options/using-deferred-static-generation.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\ncreatePage({\n    path: \"page-path\",\n    component: \"component-path\",\n    context: {},\n    defer: true, // highlight-line\n  })\n```\n\n----------------------------------------\n\nTITLE: Updating dependency cross-env in Gatsby\nDESCRIPTION: This snippet describes the update of the cross-env dependency to version ^7.0.3 within the Gatsby project. It is part of the chores section for version 3.6.0 of the gatsby-remark-code-repls package.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-code-repls/CHANGELOG.md#_snippet_16\n\n\n\n----------------------------------------\n\nTITLE: Fix: Update babel monorepo\nDESCRIPTION: This snippet documents a bug fix in version 5.6.0 of the gatsby-source-graphql plugin. It updates the Babel monorepo, likely resolving compatibility issues or bugs related to JavaScript transpilation within the Gatsby environment.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-graphql/CHANGELOG.md#_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Updating Peer Dependencies JavaScript\nDESCRIPTION: This code snippet details a chore that involves updating peer dependencies. It refers to issue #36965 in the Gatsby repository. The commit associated with this update is b6244424fe8b724cbc23b80b2b4f5424cc2055a4.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-javascript-frontmatter/CHANGELOG.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nUpdate peerDeps [#36965](https://github.com/gatsbyjs/gatsby/issues/36965) ([b624442](https://github.com/gatsbyjs/gatsby/commit/b6244424fe8b724cbc23b80b2b4f5424cc2055a4))\n```\n\n----------------------------------------\n\nTITLE: Enabling Fastbuilds\nDESCRIPTION: Example configuration to enable fastbuilds.  This option requires the Gatsby Drupal module (gatsby_fastbuilds) to be enabled and a Drupal user with the appropriate permissions.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-drupal/README.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\n// In your gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-source-drupal`,\n      options: {\n        baseUrl: `https://live-contentacms.pantheonsite.io/`,\n        apiBase: `api`, // optional, defaults to `jsonapi`\n        basicAuth: {\n          username: process.env.BASIC_AUTH_USERNAME,\n          password: process.env.BASIC_AUTH_PASSWORD,\n        },\n        fastBuilds: true,\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Running Sanity Update Script\nDESCRIPTION: This script is used to update posts in Sanity. It requires environment variables including a write token. Make sure to populate the `.env.example` file with the necessary environment variables before running the script.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/benchmarks/source-sanity/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nyarn update-post\n```\n\n----------------------------------------\n\nTITLE: Installing Dotenv Package\nDESCRIPTION: This command installs the 'dotenv' package as a development dependency.  Dotenv is used to load environment variables from a '.env' file into 'process.env', allowing secure usage of API keys locally without committing them to the repository.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/sourcing-data/sourcing-from-prismic.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --save-dev dotenv\n```\n\n----------------------------------------\n\nTITLE: Allowing Not Defining Entry for Subplugins\nDESCRIPTION: This commit allows for not defining an entry point for subplugins within gatsby-transformer-remark.  This provides more flexibility in plugin configuration and potentially simplifies the plugin structure in certain use cases.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-remark/CHANGELOG.md#_snippet_4\n\nLANGUAGE: None\nCODE:\n```\nallow not defining entry for subplugins [#33900](https://github.com/gatsbyjs/gatsby/issues/33900) ([f87164f](https://github.com/gatsbyjs/gatsby/commit/f87164f6af6285365ec2098d6233313a6b4c0982))\n```\n\nLANGUAGE: None\nCODE:\n```\nallow not defining entry for subplugins [#33900](https://github.com/gatsbyjs/gatsby/issues/33900) [#33909](https://github.com/gatsbyjs/gatsby/issues/33909) ([4975ee2](https://github.com/gatsbyjs/gatsby/commit/4975ee26561a520daf8e2082479d21b2062a862e))\n```\n\n----------------------------------------\n\nTITLE: Feature: Bump node min version - JavaScript\nDESCRIPTION: This commit bumps the minimum required Node.js version to 10.13.0. This change allows the plugin to use newer JavaScript features and APIs available in Node.js 10.13.0 and later versions.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-responsive-iframe/CHANGELOG.md#_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\n**gatsby:** bump node min version to 10.13.0 ([#22400](https://github.com/gatsbyjs/gatsby/issues/22400)) ([83d681a](https://github.com/gatsbyjs/gatsby/commit/83d681a))\n```\n\n----------------------------------------\n\nTITLE: Query Documentation.js with GraphQL\nDESCRIPTION: This GraphQL query retrieves documentation data extracted by `gatsby-transformer-documentationjs`. It fetches information like name, description, return types, examples, and parameters from JSDoc comments.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-documentationjs/README.md#_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  allDocumentationJs {\n    edges {\n      node {\n        name\n        description {\n          childMarkdownRemark {\n            html\n          }\n        }\n        returns {\n          title\n        }\n        examples {\n          raw\n          highlighted\n        }\n        params {\n          name\n          type {\n            name\n          }\n          description {\n            childMarkdownRemark {\n              html\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: CSS for gatsby-highlight Container\nDESCRIPTION: This CSS snippet provides styles for the `.gatsby-highlight` container. It sets the background color, border-radius, margin, padding, and overflow properties to style the container around the code block.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-prismjs/README.md#_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n/**\n * Add back the container background-color, border-radius, padding, margin\n * and overflow that we removed from <pre>.\n */\n.gatsby-highlight {\n  background-color: #fdf6e3;\n  border-radius: 0.3em;\n  margin: 0.5em 0;\n  padding: 1em;\n  overflow: auto;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating New Gatsby Site\nDESCRIPTION: This command creates a new Gatsby site using the default starter.  It sets up the basic folder structure and necessary files for a Gatsby project.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/sourcing-from-buttercms.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\ngatsby new butter-site\n```\n\n----------------------------------------\n\nTITLE: Bug Fix: Update Minor Updates in Packages\nDESCRIPTION: This commit updates minor version dependencies within the Gatsby project. Updating the packages ensures that the project benefits from the latest bug fixes, performance improvements, and minor features in those dependencies. It contributes to the stability and performance of the Gatsby site.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-mdx/CHANGELOG.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nbfb864b\n```\n\n----------------------------------------\n\nTITLE: Making unstable_shouldOnCreateNode Stable in gatsby-transformer-pdf\nDESCRIPTION: This code snippet demonstrates a chore that makes `unstable_shouldOnCreateNode` stable within the `gatsby-transformer-pdf` package.  This change promotes a previously unstable API to a stable one, likely affecting how nodes are created and handled within the plugin.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-pdf/CHANGELOG.md#_snippet_3\n\nLANGUAGE: Text\nCODE:\n```\nmake unstable_shouldOnCreateNode stable [#36516](https://github.com/gatsbyjs/gatsby/issues/36516) ([90f9ab4](https://github.com/gatsbyjs/gatsby/commit/90f9ab47593ba7458fc5bc677c4b0282b30808c8))\n```\n\n----------------------------------------\n\nTITLE: Creating a Wrapper Component - JSX\nDESCRIPTION: This JSX code demonstrates how to create a wrapper component around GatsbyImage. It imports the getExampleImageData function and passes the appropriate props to it. The returned GatsbyImage component receives the generated imageData and any remaining props.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/plugins-and-themes/adding-gatsby-image-support.md#_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from \"react\"\nimport { GatsbyImage } from \"gatsby-plugin-image\"\nimport { getExampleImageData } from \"./my-image-data\"\n\nexport function ExampleImage({\n  // Destructure the props that you are passing to the image data function\n  image,\n  width,\n  height,\n  layout,\n  backgroundColor,\n  sizes,\n  aspectRatio,\n  options,\n  // Use ...rest for the GatsbyImage props\n  ...props\n}) {\n  const imageData = getExampleImageData({\n    image,\n    width,\n    height,\n    layout,\n    backgroundColor,\n    sizes,\n    aspectRatio,\n    options,\n  })\n\n  // Pass the image data and spread the rest of the props\n  return <GatsbyImage image={imageData} {...props} />\n}\n```\n\n----------------------------------------\n\nTITLE: Re-adding Type Definition Field Access in Gatsby\nDESCRIPTION: This commit re-adds the ability to get the `typeDef` field from a nested type field in `gatsby-transformer-documentationjs`. This functionality was likely removed or broken in a previous version and is now restored.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-documentationjs/CHANGELOG.md#_snippet_18\n\nLANGUAGE: JavaScript\nCODE:\n```\n**gatsby-transformer-documentationjs:** re-add ability to get typeDef field from nested type field ([#13768](https://github.com/gatsbyjs/gatsby/issues/13768)) ([d6714c1](https://github.com/gatsbyjs/gatsby/commit/d6714c1))\n```\n\n----------------------------------------\n\nTITLE: Updating babel monorepo\nDESCRIPTION: This code snippet updates the Babel monorepo, encompassing changes to the underlying JavaScript transpilation tooling.  This ensures the plugin uses the latest Babel features and bug fixes, improving JavaScript compatibility and performance.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-excel/CHANGELOG.md#_snippet_27\n\nLANGUAGE: Text\nCODE:\n```\n- update babel monorepo [#27528](https://github.com/gatsbyjs/gatsby/issues/27528) ([539dbb0](https://github.com/gatsbyjs/gatsby/commit/539dbb09166e346a6cee568973d2de3d936e8ef3))\n```\n\n----------------------------------------\n\nTITLE: Global CSS Styles in layout.css\nDESCRIPTION: This CSS snippet defines global styles for the `div` element, setting the background to red and the text color to white. These styles are meant to be applied site-wide.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/styling/global-css.md#_snippet_1\n\nLANGUAGE: CSS\nCODE:\n```\ndiv {\n  background: red;\n  color: white;\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Line Numbering in Markdown\nDESCRIPTION: This snippet shows how to enable line numbering for a specific code block in a Markdown file using the `numberLines` option within the code fence.  This will display line numbers alongside the highlighted code within that block.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-prismjs/README.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nplugins: [\n  {\n    resolve: `gatsby-transformer-remark`,\n    options: {\n      plugins: [\n        `gatsby-remark-prismjs`,\n      ]\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Create a page without data using React\nDESCRIPTION: This code snippet defines a simple React component that displays static text. It serves as a template for pages that don't require any external data.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/why-gatsby-uses-graphql.md#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport React from \"react\"\n\nconst NoData = () => (\n  <section>\n    <h1>This Page Was Created Programmatically</h1>\n    <p>\n      No data was required to create this page ‚Äî it‚Äôs just a React component!\n    </p>\n  </section>\n)\n\nexport default NoData\n```\n\n----------------------------------------\n\nTITLE: Fixing Package Updates in Gatsby\nDESCRIPTION: This snippet addresses an issue where minor updates were not being correctly applied across various Gatsby packages. It ensures that the package dependencies are up-to-date with the latest minor releases.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-screenshot/CHANGELOG.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nupdate minor updates in packages ([#19087](https://github.com/gatsbyjs/gatsby/issues/19087)) ([294a48f](https://github.com/gatsbyjs/gatsby/commit/294a48f))\n```\n\n----------------------------------------\n\nTITLE: Fix Yarn 2 Compatibility in Gatsby Typography Plugin\nDESCRIPTION: This commit addresses a bug that prevented gatsby-plugin-typography from working correctly with Yarn 2. It ensures that the plugin is compatible with Yarn 2's module resolution and package management.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-typography/CHANGELOG.md#_snippet_0\n\nLANGUAGE: None\nCODE:\n```\ngatsby-plugin-typography: make yarn 2 compatible ([#21978](https://github.com/gatsbyjs/gatsby/issues/21978)) ([b28c27a](https://github.com/gatsbyjs/gatsby/commit/b28c27a))\n```\n\n----------------------------------------\n\nTITLE: Removing dontInfer Option\nDESCRIPTION: This commit removes the `dontInfer` option from `gatsby-source-lever`. The `dontInfer` option was used to opt-out of schema inference. Its removal likely simplifies the plugin's configuration or addresses issues related to schema inference.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-lever/CHANGELOG.md#_snippet_13\n\nLANGUAGE: Diff\nCODE:\n```\n**gatsby-source-lever:** Removed inference opt out dontInfer ([#21017](https://github.com/gatsbyjs/gatsby/issues/21017)) ([0406b97](https://github.com/gatsbyjs/gatsby/commit/0406b97))\n```\n\n----------------------------------------\n\nTITLE: Handling skipped items in optimize-hook-destructuring\nDESCRIPTION: This commit fixes an issue in the optimize-hook-destructuring functionality. Specifically, it addresses a scenario where items are skipped during destructuring, ensuring that the optimization process handles these cases correctly, thus preventing errors and improving code stability.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/babel-preset-gatsby/CHANGELOG.md#_snippet_8\n\n\n\n----------------------------------------\n\nTITLE: Feature: Support markdownCaptions in mdx + fix for remark\nDESCRIPTION: This commit introduces support for markdownCaptions in MDX files when using gatsby-remark-images. It also includes a fix for remark. This feature enhances the image handling capabilities within MDX documents, enabling the use of markdown captions for images rendered by gatsby-remark-images.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-mdx/CHANGELOG.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n82c05aa\n```\n\n----------------------------------------\n\nTITLE: Adding Asset Node Type to Constants (TypeScript)\nDESCRIPTION: This snippet adds a new `Asset` node type to the `NODE_TYPES` object in the `constants.ts` file. This ensures that the plugin recognizes and can create nodes of the `Asset` type.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/creating-a-source-plugin/part-6/index.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport const NODE_TYPES = {\n  Post: `Post`,\n  Author: `Author`,\n  // highlight-next-line\n  Asset: `Asset`,\n} as const\n\n// Rest of contants\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies on Arch Linux for NVM\nDESCRIPTION: This snippet installs grep, awk, tar, and git on Arch Linux and other pacman based distros, which are necessary dependencies for NVM to function correctly. These tools are used by the NVM installation script and during its operation.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/local-development/gatsby-on-linux.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nsudo pacman -S grep awk tar git\n```\n\n----------------------------------------\n\nTITLE: Requiring CoffeeScript in coffee-loader\nDESCRIPTION: This snippet shows how to require CoffeeScript in the coffee-loader's index.js file. This is required to ensure that CoffeeScript@next is being loaded. The line `var coffee = require(\"coffeescript\")` should be the first line of source in the coffee-loader's index.js file.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-coffeescript/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar coffee = require(\"coffeescript\")\n```\n\n----------------------------------------\n\nTITLE: Define Plugin Options Schema - JavaScript\nDESCRIPTION: This snippet demonstrates how to define a schema for plugin options using the `pluginOptionsSchema` API. The schema is defined using Joi and specifies the type, requirement, and description of each option. Gatsby uses this schema to validate the plugin options provided by users.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/creating-a-source-plugin/part-4/index.mdx#_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nexports.pluginOptionsSchema = ({ Joi }) => {\n  return Joi.object({\n    message: Joi.string()\n      .required()\n      .description(`The message logged to the console.`),\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Adding custom SVG attributes and default styling in gatsby-remark-graphviz\nDESCRIPTION: This commit introduces a new feature that allows users to specify custom SVG attributes and default styling for Graphviz diagrams. This enhancement allows for greater control over the appearance of generated graphs.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-graphviz/CHANGELOG.md#_snippet_15\n\nLANGUAGE: Other\nCODE:\n```\n- **gatsby-remark-graphviz:** custom SVG attributes and default styling ([#11624](https://github.com/gatsbyjs/gatsby/issues/11624)) ([e64ac14](https://github.com/gatsbyjs/gatsby/commit/e64ac14))\n```\n\n----------------------------------------\n\nTITLE: Replace Cache Strategy in Gatsby Offline Plugin (JavaScript)\nDESCRIPTION: This bug fix replaces the cacheOnly strategy with cacheFirst in the gatsby-plugin-offline. The cacheFirst strategy first checks the cache and then fetches from the network if the resource is not found in the cache, while cacheOnly only checks the cache.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-offline/CHANGELOG.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nReplaced cacheOnly with cacheFirst\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel Roots\nDESCRIPTION: This snippet shows how to configure babelrcRoots option for the plugin, which is useful in monorepo setups.  This tells babel where to look for babel configuration files when parsing source files.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-react-docgen/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  plugins: [\n    {\n      resolve: \"gatsby-transformer-react-docgen\",\n      options: {\n        babelrcRoots: [\"../packages/*\"],\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Dev Dependencies in gatsby-plugin-styletron\nDESCRIPTION: This commit updates minor and patch dependencies for gatsby-plugin-styletron. This helps keep the development environment up to date. This chore update was released in version 7.21.0.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-styletron/CHANGELOG.md#_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\nChores\n\n- update [dev] minor and patch dependencies for gatsby-plugin-styletron [#36279](https://github.com/gatsbyjs/gatsby/issues/36279) ([587a8f3](https://github.com/gatsbyjs/gatsby/commit/587a8f3ef9aeb410344cb6b84192681a3ec2c83c))\n```\n\n----------------------------------------\n\nTITLE: Accessing Page Query Data in a Gatsby Page Component\nDESCRIPTION: This snippet shows how to access the data returned by a page query within a Gatsby page component. The data object is automatically passed as a prop to the component. It highlights how to access the `description` field from the `siteMetadata` object.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/graphql-data-layer/graphql-api.md#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// highlight-start\nconst HomePage = ({ data }) => {\n  // highlight-end\n  return (\n    <div>\n      Hello!\n      {data.site.siteMetadata.description} // highlight-line\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Adjusting peerDep\nDESCRIPTION: This commit adjusts the peer dependencies of the `gatsby-parcel-config` package, which specifies the versions of packages that are expected to be installed alongside it. This may resolve compatibility issues.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-parcel-config/CHANGELOG.md#_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\nAdjust peerDep [#36185](https://github.com/gatsbyjs/gatsby/issues/36185) ([49a8fc0](https://github.com/gatsbyjs/gatsby/commit/49a8fc02a8dbe49a02d62132d5fb7b7fd85cdf5d))\n```\n\n----------------------------------------\n\nTITLE: Incorrect Alias Usage: Dynamic Alias (JavaScript/JSX)\nDESCRIPTION: Shows an example of incorrect alias usage where the `alias` prop is dynamically generated from a parent component, function call or variable. This is not allowed, as the alias must be statically analyzable.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/built-in-components/gatsby-slice.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// ‚ö†Ô∏è Doesn't work\n\nexport function MyComponent({ sliceName }) {\n  // You can't use an alias passed from the parent component\n  return <Slice alias={sliceName} />\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// ‚ö†Ô∏è Doesn't work\n\nexport function MyComponent() {\n  // Aliases can't come from function calls\n  const aliasName = getAliasFromSomewhere()\n  return <Slice alias={aliasName} />\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Patches for v5\nDESCRIPTION: Applies necessary patches for version 5 of the `gatsby-react-router-scroll` package. These patches address compatibility issues, bug fixes, or other refinements required for the package to function correctly within the Gatsby v5 environment.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-react-router-scroll/CHANGELOG.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\napply patches for v5 [#36796](https://github.com/gatsbyjs/gatsby/issues/36796) ([25f79b6](https://github.com/gatsbyjs/gatsby/commit/25f79b6c3719fdf09584ade620a05c66ba2a697c))\n```\n\n----------------------------------------\n\nTITLE: Configuring gatsby-source-wordpress Plugin\nDESCRIPTION: This code snippet demonstrates how to configure the gatsby-source-wordpress plugin in gatsby-config.js to connect to a WPGraphQL endpoint. It specifies the URL of the WPGraphQL endpoint, which is essential for Gatsby to fetch data from the WordPress instance.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/glossary/wpgraphql.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  plugins: [\n    {\n      resolve: \"gatsby-source-wordpress\",\n      options: {\n        url:\n          process.env.WPGRAPHQL_URL ||\n          `https://path-to-your-wordpress-instance.com/graphql`,\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Gatsby Project\nDESCRIPTION: These commands initiate a new Gatsby project named 'gatsby-prismic-blog' using the default starter, and then navigates into the newly created directory. This setup is the initial step in integrating Prismic CMS with a Gatsby site.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/prismic-source-graphql-tutorial.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngatsby new gatsby-prismic-blog\ncd gatsby-prismic-blog\n```\n\n----------------------------------------\n\nTITLE: Creating the PostLink Component in React\nDESCRIPTION: This React component creates a link to a blog post. It takes a post object as a prop and renders a link to the post's slug with the post's title and date displayed.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/adding-a-list-of-markdown-blog-posts.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from \"react\"\nimport { Link } from \"gatsby\"\n\nconst PostLink = ({ post }) => (\n  <div>\n    <Link to={post.frontmatter.slug}>\n      {post.frontmatter.title} ({post.frontmatter.date})\n    </Link>\n  </div>\n)\n\nexport default PostLink\n```\n\n----------------------------------------\n\nTITLE: Enable Queries on Demand in Gatsby Config\nDESCRIPTION: Demonstrates how to enable the experimental 'Queries on Demand' feature in a Gatsby project by modifying the `gatsby-config.js` file. This feature aims to improve the `gatsby develop` bootup time by running GraphQL queries only when a page is requested.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/v2.26/index.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n  // your existing configuration\n  __experimentalQueryOnDemand: true,\n}\n```\n\n----------------------------------------\n\nTITLE: Invalid Usage of destinationDir JavaScript\nDESCRIPTION: Examples of invalid usage of the `destinationDir` option, illustrating cases where the destination points outside the `public` folder, which will result in an error. Shows the configurations that are not permitted.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-copy-linked-files/README.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n# cannot save outside `public` folder\ndestinationDir: `../path/to/dir`\ndestinationDir: _ => `../path/to/dir`\ndestinationDir: f => `../path/to/dir/${f.name}`\ndestinationDir: f => `../${f.hash}`\n```\n\n----------------------------------------\n\nTITLE: Updating Babel Monorepo chore in gatsby-transformer-asciidoc\nDESCRIPTION: This code snippet reflects a chore update related to updating the Babel monorepo within the gatsby-transformer-asciidoc package. It addresses issue #37386 by applying a specific commit that performs the necessary updates.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-asciidoc/CHANGELOG.md#_snippet_1\n\nLANGUAGE: patch\nCODE:\n```\nupdate babel monorepo [#37386](https://github.com/gatsbyjs/gatsby/issues/37386) ([b941876](https://github.com/gatsbyjs/gatsby/commit/b94187633d94d0f0071b38ffe93380dd802ec70f))\n```\n\n----------------------------------------\n\nTITLE: Bootstrapping the Gatsby Repository\nDESCRIPTION: This command sets up the Gatsby repository and installs dependencies using Yarn. It utilizes Lerna and Yarn workspaces to manage the monorepo, installing dependencies from multiple `package.json` files. It's essential to run this command after cloning the repository.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/contributing/code-contributions.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nyarn run bootstrap\n```\n\n----------------------------------------\n\nTITLE: Enabling Core Web Vitals Tracking in gatsby-plugin-google-analytics\nDESCRIPTION: Enables the tracking of Core Web Vitals within the gatsby-plugin-google-analytics plugin. This feature allows users to monitor key performance metrics for their website directly through Google Analytics, providing insights into user experience and site performance.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-google-analytics/CHANGELOG.md#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\n1ecd6e1\n```\n\n----------------------------------------\n\nTITLE: Using a linked adapter in gatsby-config.js (JavaScript)\nDESCRIPTION: This code snippet shows how to use a locally linked Gatsby adapter in your gatsby-config.js file.  It requires the adapter to be linked using npm link or yarn link. It imports the adapter and then calls it within the adapter configuration.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/previews-deploys-hosting/creating-an-adapter.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// gatsby-adapter-foo would be your linked adapter\nconst adapter = require(\"gatsby-adapter-foo\")\n\nmodule.exports = {\n  adapter: adapter()\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Babel Monorepo in Gatsby\nDESCRIPTION: This commit updates the Babel monorepo within the Gatsby project. It is a chore that helps maintain the project's dependencies and ensures compatibility with the latest Babel features and security updates.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-lever/CHANGELOG.md#_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\nupdate babel monorepo [#27528](https://github.com/gatsbyjs/gatsby/issues/27528) ([539dbb0](https://github.com/gatsbyjs/gatsby/commit/539dbb09166e346a6cee568973d2de3d936e8ef3))\n```\n\n----------------------------------------\n\nTITLE: TypeScript Error (Shell)\nDESCRIPTION: This snippet shows the TypeScript compiler error that occurs when the `assetNode` object is missing required fields from `IRemoteImageNodeInput`, specifically `width`, `height`, `url`, `mimeType`, and `filename`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/creating-a-source-plugin/part-6/index.mdx#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nX is missing the following properties from type 'IRemoteImageNodeInput': width, height, url, mimeType, filename\n```\n\n----------------------------------------\n\nTITLE: GraphQL Aggregation Query\nDESCRIPTION: This GraphQL query demonstrates the new aggregation fields available for the `group` resolver in Gatsby. It groups markdown nodes by author name and title, and then calculates the maximum price for each group.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/v3.14/index.md#_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  allMarkdown {\n    group(field: frontmatter___authors___name) {\n      fieldValue\n      group(field: frontmatter___title) {\n        fieldValue\n        max(field: frontmatter___price)\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Schema Customization: Workaround for SitePage.context in Gatsby v4\nDESCRIPTION: This JavaScript code provides a workaround for querying individual context fields in Gatsby v4 by manually defining a schema for `SitePage.context`. It uses `createSchemaCustomization` to create types for `SitePage` and `SitePageContext`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v3-to-v4.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// Workaround for missing sitePage.context:\nexports.createSchemaCustomization = ({ actions }) => {\n  const { createTypes } = actions\n  createTypes(`\n    type SitePage implements Node {\n      context: SitePageContext\n    }\n    type SitePageContext {\n      foo: String\n    }\n  `)\n}\n```\n\n----------------------------------------\n\nTITLE: Format Date in Markdown Remark Query GraphQL\nDESCRIPTION: This query retrieves MarkdownRemark nodes and formats the date field. It uses the `formatString` argument within the `date` field to format the date. It also applies a filter to ensure the date is not null.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/graphql-reference/content/queries.md#_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  allMarkdownRemark(filter: { frontmatter: { date: { ne: null } } }) {\n    edges {\n      node {\n        frontmatter {\n          title\n          date(formatString: \"dddd DD MMMM YYYY\")\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sort Results with GraphQL\nDESCRIPTION: This query sorts results in ascending order based on the `date` field within `frontmatter`. It uses the `sort` argument to specify the field and the order (ASC).  The query retrieves the title and date for each node.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/graphql-reference.md#_snippet_16\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  allMarkdownRemark(sort: { frontmatter: { date: ASC } }) {\n    totalCount\n    edges {\n      node {\n        frontmatter {\n          title\n          date\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Yet Another Example MDX blog post\nDESCRIPTION: A third example of an MDX blog post showcasing frontmatter and Markdown formatting. These examples serve to provide a clear template for creating blog posts in MDX format using the gatsby-plugin-mdx transformer.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-5/index.mdx#_snippet_3\n\nLANGUAGE: mdx\nCODE:\n```\n---\ntitle: \"Yet Another Post\"\ndate: \"2021-07-25\"\nslug: \"yet-another-post\"\n---\n\nWow look at all this content. How do they do it?\n\n```\n\n----------------------------------------\n\nTITLE: Reassigning start_url in gatsby-plugin-manifest\nDESCRIPTION: This code snippet shows a bug fix for the gatsby-plugin-manifest. The fix ensures that the `start_url` is only reassigned if it already exists in the manifest options. This prevents errors when the `start_url` is not initially defined. The fix was implemented in commit dd96604.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-manifest/CHANGELOG.md#_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Install Gatsby MDX Plugin\nDESCRIPTION: This command installs the `gatsby-plugin-mdx` plugin and its dependency `@mdx-js/react`. It adds these packages to the `dependencies` object in `package.json` and to the `node_modules` directory. No specific inputs or outputs beyond the installation process.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-5/index.mdx#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpm install gatsby-plugin-mdx @mdx-js/react\n```\n\n----------------------------------------\n\nTITLE: Update data-item-url attribute in JSX\nDESCRIPTION: This code snippet shows how to update the `data-item-url` attribute in your product HTML.  This attribute needs to match the live page where the products can be bought for Snipcart to verify the order.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/e-commerce-with-datocms-and-snipcart/index.md#_snippet_12\n\nLANGUAGE: JSX\nCODE:\n```\ndata-item-url={`URL of your live product page`}\n```\n\n----------------------------------------\n\nTITLE: Fix: Handling special characters in Windows paths\nDESCRIPTION: This code snippet addresses an issue where special characters in Windows paths were not being handled correctly. This fix ensures that Gatsby can correctly process paths containing special characters, preventing errors related to file access or manipulation.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-core-utils/CHANGELOG.md#_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Using GatsbyBrowser type in gatsby-browser.tsx\nDESCRIPTION: This example demonstrates how to use the `GatsbyBrowser` type to type the API functions in `gatsby-browser.tsx`.  It uses `wrapPageElement` function from the `GatsbyBrowser` type to enhance type safety and developer experience.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/custom-configuration/typescript.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as React from \"react\"\nimport type { GatsbyBrowser } from \"gatsby\"\n\nexport const wrapPageElement: GatsbyBrowser[\"wrapPageElement\"] = ({\n  element,\n}) => {\n  return (\n    <div>\n      <h1>Hello World</h1>\n      {element}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Gatsby Site with Default Starter (Shell)\nDESCRIPTION: This command uses the Gatsby CLI to create a new Gatsby site named 'my-default-starter' based on the default starter template. It downloads the necessary files and sets up the initial project structure. Requires the Gatsby CLI to be installed globally.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/starters/default/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n# create a new Gatsby site using the default starter\ngatsby new my-default-starter https://github.com/gatsbyjs/gatsby-starter-default\n```\n\n----------------------------------------\n\nTITLE: Install React Experimental Versions\nDESCRIPTION: Installs experimental versions of React and React DOM as a prerequisite for using Partial Hydration in Gatsby. The `--save-exact` flag ensures that the exact versions specified are installed and `--legacy-peer-deps` allows installation even with peer dependency conflicts.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/performance/partial-hydration.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-exact react@experimental react-dom@experimental --legacy-peer-deps\n```\n\n----------------------------------------\n\nTITLE: Example Sitemap Output\nDESCRIPTION: Shows the default output of the gatsby-plugin-sitemap in XML format. It includes the URL, change frequency, and priority for each page.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-sitemap/README.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n  <url>\n    <loc>https://example.net/blog/</loc>\n    <changefreq>daily</changefreq>\n    <priority>0.7</priority>\n  </url>\n  <url>\n    <loc>https://example.net/</loc>\n    <changefreq>daily</changefreq>\n    <priority>0.7</priority>\n  </url>\n</urlset>\n```\n\n----------------------------------------\n\nTITLE: Querying Site Title using GraphQL in GraphiQL\nDESCRIPTION: This GraphQL query retrieves the title of the site from the `siteMetadata` object. It accesses the `site` field, then the nested `siteMetadata` field, and finally requests the `title` field. This snippet is intended to be used within the GraphiQL interface.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-4/index.mdx#_snippet_1\n\nLANGUAGE: GraphQL\nCODE:\n```\nquery MyQuery {\n  site {\n    siteMetadata {\n      title\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Gatsby Benchmark with Custom Parameters\nDESCRIPTION: This command runs a Gatsby benchmark with custom parameters to generate a site with a specified number of pages and memory allocation. The `N` parameter determines the number of pages to generate, while the `M` parameter sets the maximum memory allocation for Node.js.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/benchmarks/gabe-json-text/README.md#_snippet_0\n\nLANGUAGE: Shell Script\nCODE:\n```\nN=1000 M=2 yarn bench\n```\n\n----------------------------------------\n\nTITLE: Iterating and Calling nodeBuilder in sourceNodes\nDESCRIPTION: Iterating over `posts` and `authors` arrays, and calling the `nodeBuilder` function to create nodes for each item.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/creating-a-source-plugin/part-2/index.mdx#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n// Rest of the file\n\nexport const sourceNodes: GatsbyNode[`sourceNodes`] = async (gatsbyApi) => {\n  // Rest of sourceNodes\n\n  const { posts = [], authors = [] } = data\n\n  // highlight-start\n  for (const post of posts) {\n    nodeBuilder({ gatsbyApi, input: { type: NODE_TYPES.Post, data: post } })\n  }\n\n  for (const author of authors) {\n    nodeBuilder({ gatsbyApi, input: { type: NODE_TYPES.Author, data: author } })\n  }\n  // highlight-end\n}\n```\n\n----------------------------------------\n\nTITLE: Avoiding rerenders in CLI static messages - gatsby-cli JavaScript\nDESCRIPTION: This snippet optimizes the gatsby-cli by preventing unnecessary re-renders of static messages within the command-line interface.  This performance improvement reduces CPU usage and enhances the responsiveness of the CLI during operation.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-cli/CHANGELOG.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\navoid unnecessary rerenders for static messages in CLI ([#21955](https://github.com/gatsbyjs/gatsby/issues/21955)) ([5aff49d](https://github.com/gatsbyjs/gatsby/commit/5aff49d))\n```\n\n----------------------------------------\n\nTITLE: Setting page title with Gatsby Head API\nDESCRIPTION: This code defines a Head component using Gatsby's Head API, setting the title of the page to 'Chart Info'. This improves SEO and user experience by providing a descriptive title in the browser tab or window.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/using-mdx/src/pages/chart-info.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nexport const Head = () => <title>Chart Info</title>\n```\n\n----------------------------------------\n\nTITLE: Accessing Named Splat Route Parameter\nDESCRIPTION: This code demonstrates how to access the value captured by a named splat route parameter `awsKey`. The `awsKey` parameter is accessed through the `props.params` object.  This approach enables retrieval of splat route segments with a custom name.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/routing/file-system-route-api.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction ProductsPage(props) {\n  const splat = props.params.awsKey\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query for Excluded Mime Types\nDESCRIPTION: This GraphQL query retrieves media items with mime types that are excluded in the configuration. This is used to identify files excluded due to the `excludeByMimeTypes` configuration option.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-wordpress/docs/debugging-and-troubleshooting.md#_snippet_7\n\nLANGUAGE: GraphQL\nCODE:\n```\nquery MIME_TYPE_EXCLUDED {\n  allWpMediaItem(filter: { mimeType: { in: [\"image/jpeg\", \"video/mp4\"] } }) {\n    nodes {\n      id\n      sourceUrl\n      mimeType\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Install Gatsby Plugin Sharp with Lazy Images\nDESCRIPTION: Demonstrates the command used to install a specific version of `gatsby-plugin-sharp` (`gatsby-plugin-sharp@lazy-images`) to enable lazy image loading during development. This aims to improve the performance of `gatsby develop` for image-heavy websites.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/v2.26/index.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnpm install gatsby-plugin-sharp@lazy-images\n```\n\n----------------------------------------\n\nTITLE: Fallback to GitHub and Unpkg for README\nDESCRIPTION: This snippet implements a fallback mechanism to retrieve README.md files from GitHub and unpkg. This enhancement ensures that README content is always accessible, even if the primary source is unavailable, enhancing the user experience on Gatsby sites.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-npm-package-search/CHANGELOG.md#_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nf38b40d\n```\n\n----------------------------------------\n\nTITLE: Handling empty 'to' prop in Gatsby Link\nDESCRIPTION: This commit fixes a bug in gatsby-link that caused it to fail when the `to` prop was empty. The fix ensures that the component gracefully handles the case where the `to` prop is not provided. Issue #24745 documents this fix.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-link/CHANGELOG.md#_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Running Gatsby Benchmark with Filters and Sorting\nDESCRIPTION: This command runs the Gatsby benchmark with specified parameters for the number of nodes, pages, filter type, sorting option, text content, and count. It leverages environment variables to configure the benchmark run.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/benchmarks/query-filters-sort/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nNUM_NODES=1000 NUM_PAGES=1000 FILTER=eq SORT=1 TEXT=1 COUNT=1 yarn bench\n```\n\n----------------------------------------\n\nTITLE: Wrapping Ignore Pattern in Quotes\nDESCRIPTION: This fix ensures that the ignore pattern is properly wrapped in quotes. Ensures correct parsing of ignore patterns preventing unexpected behavior when specifying files or directories to exclude.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-postcss/CHANGELOG.md#_snippet_17\n\n\n\n----------------------------------------\n\nTITLE: Installing gatsby-transformer-xml\nDESCRIPTION: This command installs the gatsby-transformer-xml plugin using npm. This allows you to transform XML files into queryable data nodes within your Gatsby project.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-xml/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install gatsby-transformer-xml\n```\n\n----------------------------------------\n\nTITLE: Disabling telemetry in gatsby-plugin-page-creator\nDESCRIPTION: This snippet disables telemetry collection within the gatsby-plugin-page-creator. Telemetry is used to gather data on plugin usage, and disabling it prevents this data collection.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-page-creator/CHANGELOG.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\ndisable telemetry [#39137](https://github.com/gatsbyjs/gatsby/issues/39137) ([1b1720b](https://github.com/gatsbyjs/gatsby/commit/1b1720bb75233661b30205000c4c3bff855d47c8))\n```\n\n----------------------------------------\n\nTITLE: Updating Peer Dependencies in gatsby-plugin-feed\nDESCRIPTION: This code snippet depicts a chore focused on updating peer dependencies. This activity aligns the `gatsby-plugin-feed` with compatible versions of its peer dependencies, notably Gatsby itself. Maintaining synchronized peer dependencies prevents version conflicts and ensures the plugin functions correctly within the Gatsby ecosystem.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-feed/CHANGELOG.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nUpdate peerDeps [#36965](https://github.com/gatsbyjs/gatsby/issues/36965) ([b624442](https://github.com/gatsbyjs/gatsby/commit/b6244424fe8b724cbc23b80b2b4f5424cc2055a4))\n```\n\n----------------------------------------\n\nTITLE: Using Default Export from node-fetch\nDESCRIPTION: This commit modifies the gatsby-source-graphql package to use the default export from node-fetch. This addresses compatibility issues or deprecated import methods, ensuring the package correctly imports and utilizes the node-fetch library.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-graphql/CHANGELOG.md#_snippet_14\n\nLANGUAGE: Text\nCODE:\n```\nUse default export from node-fetch [#33977](https://github.com/gatsbyjs/gatsby/issues/33977) ([82864cb](https://github.com/gatsbyjs/gatsby/commit/82864cb917ead6b11079b48dc4601b4fa3e3968c))\n```\n\n----------------------------------------\n\nTITLE: Register a Custom Service Worker\nDESCRIPTION: This code snippet shows how to register a custom service worker by adding a `sw.js` file to the `static` folder and using the `registerServiceWorker` browser API in `gatsby-browser.js`. The function simply returns `true` to enable the custom service worker.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/performance/add-offline-support-with-a-service-worker.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport const registerServiceWorker = () => true\n```\n\n----------------------------------------\n\nTITLE: Backing out resolutions and adding ignore-engines\nDESCRIPTION: This commit reverts some resolution changes and adds `ignore-engines` to the dev CLI. The pull request is referenced by its GitHub issue number.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-dev-cli/CHANGELOG.md#_snippet_7\n\nLANGUAGE: Text\nCODE:\n```\nBack out resolutions, and add ignore-engines to dev cli [#28464](https://github.com/gatsbyjs/gatsby/issues/28464) ([4add7d2](https://github.com/gatsbyjs/gatsby/commit/4add7d2340af559e3ed08f21d5ad2a2f94896da6))\n```\n\n----------------------------------------\n\nTITLE: Escaping HTML in JSX\nDESCRIPTION: This example demonstrates how JSX automatically escapes HTML tags to prevent XSS attacks. When a string containing a script tag is rendered in a JSX element, it is treated as plain text and displayed as a string rather than being executed as a script.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/conceptual/security-in-gatsby.md#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n// highlight-next-line\nconst username = `<script src='https://path/to/badness.js'></script>`\n\nconst User = () => <p> hello {username}</p>\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query Result (JSON)\nDESCRIPTION: This is the JSON response returned by the example GraphQL query. It shows the structure of the data returned, mirroring the structure of the query itself. The `title` field contains the string \"A Gatsby site!\"\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/conceptual/graphql-concepts.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"site\": {\n    \"siteMetadata\": {\n      \"title\": \"A Gatsby site!\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Ignore Pattern in Gatsby Config\nDESCRIPTION: This commit addresses an issue by wrapping an ignore pattern in quotes. This change likely ensures that the pattern is correctly interpreted by the underlying system, preventing unexpected behavior during file processing or builds.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-google-tagmanager/CHANGELOG.md#_snippet_15\n\nLANGUAGE: text\nCODE:\n```\nwrap ignore pattern in quotes ([#23176](https://github.com/gatsbyjs/gatsby/issues/23176)) ([7563db6](https://github.com/gatsbyjs/gatsby/commit/7563db6))\n```\n\n----------------------------------------\n\nTITLE: Importing dotenv in gatsby-config.js\nDESCRIPTION: This line imports the `dotenv` package in `gatsby-config.js`. This allows the Gatsby configuration to read environment variables from the `.env` file. The `dotenv` package is essential for accessing environment variables during build time.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/adding-search-with-algolia.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"dotenv\").config()\n```\n\n----------------------------------------\n\nTITLE: Using `getNode()` to get node for `touchNode` (gatsby-node.js)\nDESCRIPTION: If only the `nodeId` is available, use `getNode()` to retrieve the full node before calling `touchNode`.  This pattern is common when the ID comes from cache or `__NODE` references.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v2-to-v3.md#_snippet_32\n\nLANGUAGE: js\nCODE:\n```\nexports.sourceNodes = async ({ actions, getNode, getNodesByType, cache }) => {\n  const { touchNode } = actions\n  const myNodeId = await cache.get(\"some-key\")\n\n  touchNode(getNode(myNodeId))\n}\n```\n\n----------------------------------------\n\nTITLE: Enable SSR in Development\nDESCRIPTION: This command enables Server-Side Rendering (SSR) during development, helping to catch SSR-related errors earlier in the development process.  It can identify issues related to referencing browser globals like `window` or `document` in Node.js during SSR, which are common causes of build failures.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/v2.27/index.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nGATSBY_EXPERIMENTAL_DEV_SSR=true gatsby develop\n```\n\n----------------------------------------\n\nTITLE: Using custom component in Markdown\nDESCRIPTION: This HTML snippet shows how to use the custom React component `interactive-counter` directly within a Markdown file. The component will be rendered in place of this tag.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/using-remark/src/pages/2018-01-27---custom-components/index.md#_snippet_7\n\nLANGUAGE: HTML\nCODE:\n```\n<interactive-counter></interactive-counter>\n```\n\n----------------------------------------\n\nTITLE: Bumping babel minor dependency\nDESCRIPTION: This commit bumps the babel minor version dependency within the `gatsby-remark-code-repls` package. This ensures that any new non-breaking features or improvements in the Babel transpiler are available for use by the package.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-code-repls/CHANGELOG.md#_snippet_14\n\n\n\n----------------------------------------\n\nTITLE: Updating Sitemap Dependency in gatsby-plugin-sitemap\nDESCRIPTION: This commit updates the `sitemap` dependency to version ^7.1.1 in `gatsby-plugin-sitemap`. This likely includes bug fixes, performance improvements, or new features from the `sitemap` library.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-sitemap/CHANGELOG.md#_snippet_3\n\nLANGUAGE: TEXT\nCODE:\n```\nupdate dependency sitemap to ^7.1.1 for gatsby-plugin-sitemap [#37193](https://github.com/gatsbyjs/gatsby/issues/37193) ([5248413](https://github.com/gatsbyjs/gatsby/commit/52484139ff695d32daf1d5eeedde44cba149cae0))\n```\n\n----------------------------------------\n\nTITLE: Modify Header Background Color (Purple) - JavaScript\nDESCRIPTION: This JavaScript snippet changes the background color of the header component in a Gatsby project to a shade of purple (`#5B3284`). It targets the `style` attribute of the header element and modifies the `background` property.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/testing/ab-testing-with-google-analytics-and-netlify.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n<header\n  style={{\n    background: `#5B3284`, // highlight-line\n    marginBottom: `1.45rem`,\n  }}\n>\n\n```\n\n----------------------------------------\n\nTITLE: Creating New Gatsby Site with Starter Theme (Shell)\nDESCRIPTION: This command initializes a new Gatsby site using the `gatsby-starter-theme` starter. This starter demonstrates the composition of multiple themes, specifically `gatsby-theme-blog` and `gatsby-theme-notes`.  It requires Gatsby CLI to be installed globally.  No specific inputs are required other than the project name.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/themes/using-multiple-gatsby-themes.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngatsby new my-notes-blog https://github.com/gatsbyjs/gatsby-starter-theme\n```\n\n----------------------------------------\n\nTITLE: Complex Graphviz Diagram Example\nDESCRIPTION: This snippet presents a comprehensive Graphviz diagram illustrating the data flow and architecture of a Gatsby site.  It includes various components such as data sources, schema generation, page creation, query execution, and HTML generation. This graph visualizes the relationships between different parts of the Gatsby build process. \nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/using-remark/src/pages/2019-02-06---graphviz/index.md#_snippet_6\n\nLANGUAGE: dot\nCODE:\n```\ndigraph graphname {\n\n  node [ style = filled, fillcolor = white ];\n\n  ## Legend\n\n  subgraph cluster_legend {\n    label = \"Legend\";\n    gatsby [ label = \"Gatsby\", width=1 ];\n    redux [ label = \"redux namespace\", shape = box, fillcolor = skyblue, width=1 ];\n    cache [ label = \"site/.cache/\", shape = cylinder, fillcolor = moccasin, width=1 ];\n    public [ label =\"site/public/\", shape = cylinder, fillcolor = palegreen, width=1 ];\n    siteData [ label = \"site/external data\", shape = cylinder, fillcolor = gray, width=1 ];\n\n    siteData -> gatsby [ style = invis ];\n    gatsby -> redux [ style = invis ] ;\n    redux -> cache [ style = invis ];\n    cache -> public [ style = invis ];\n  }\n\n  ## Source Nodes\n\n  dataSource [ label = \"data sources. e.g. file, contentful\", shape = cylinder, fillcolor = gray ];\n  sourceNodes [ label = \"source nodes\" URL = \"/docs/node-creation/\" ];\n  nodes [ label = \"nodes\", shape = box, fillcolor = skyblue, URL = \"/docs/node-creation/\" ];\n  nodesTouched [ label = \"touchedNodes\", shape = box, fillcolor = skyblue, URL = \"/docs/node-creation/#freshstale-nodes\" ];\n  rootNodeMap [ label = \"rootNodeMap\", shape = box, fillcolor = skyblue, URL = \"/docs/node-tracking/\" ];\n\n  dataSource -> sourceNodes;\n  sourceNodes -> nodes;\n  sourceNodes -> nodesTouched;\n  sourceNodes -> rootNodeMap;\n\n  ## Schema\n\n  pluginResolvers [ label = \"plugin resolvers\", shape = cylinder, fillcolor = gray, URL = \"/docs/schema-input-gql/#inferring-input-filters-from-plugin-fields\" ];\n  generateSchema [ label = \"generate schema\", URL = \"/docs/schema-generation/\" ];\n  schema [ label = \"schema\\l (inc resolvers)\", shape = box, fillcolor = skyblue ];\n\n  nodes -> generateSchema;\n  nodes -> schema;\n  pluginResolvers -> generateSchema;\n  rootNodeMap -> generateSchema;\n  generateSchema -> schema;\n\n  ## Pages\n\n  componentFiles [ label = \"React components\\l (src/template.js)\", shape = cylinder, fillcolor = gray ];\n  createPages [ label = \"site.createPages\", URL = \"/docs/page-creation/\" ];\n  pages [ label = \"pages\", shape = box, fillcolor = skyblue ];\n  components [ label = \"components\", shape = box, fillcolor = skyblue ];\n\n  schema -> createPages;\n  componentFiles -> createPages;\n  createPages -> pages;\n  createPages -> components;\n\n  ## Query\n\n  fragments [ label = \"query fragments *.js\", shape = cylinder, fillcolor = gray ];\n  runQueries [ label = \"extract and run queries\", URL = \"/docs/query-behind-the-scenes/\" ];\n  componentsWithQueries [ label = \"components\\l (with queries)\", shape = box, fillcolor = skyblue ];\n  queryResults [ label = \"JSON result\\l /public/static/d/dataPath\", shape = cylinder, fillcolor = palegreen, URL = \"/docs/query-execution/#save-query-results-to-redux-and-disk\" ];\n  dataPaths [ label = \"jsonDataPaths\", shape = box, fillcolor = skyblue ];\n\n  fragments -> runQueries;\n  schema -> runQueries;\n  pages -> runQueries;\n  components -> runQueries;\n  runQueries -> componentsWithQueries;\n  runQueries -> queryResults;\n  runQueries -> dataPaths;\n\n  ## Write Pages\n\n  writePages [ label = \"writePages\", URL = \"/docs/write-pages/\" ];\n  dataJson [ label = \"data.json\", shape = cylinder, fillcolor = moccasin ];\n  asyncRequires [ label = \"async-requires.js\", shape = cylinder, fillcolor = moccasin ];\n  syncRequires [ label = \"sync-requires.js\", shape = cylinder, fillcolor = moccasin ];\n  pagesJson [ label = \"pages.json\", shape = cylinder, fillcolor = moccasin ];\n\n  dataPaths -> writePages;\n  components -> writePages;\n  pages -> writePages;\n  writePages -> dataJson;\n  writePages -> asyncRequires;\n  writePages -> syncRequires;\n  writePages -> pagesJson;\n\n  ## App.js\n\n  appWebpack [ label = \"configure webpack\\l (`build-javascript`)\", URL = \"/docs/production-app/#webpack-config\" ];\n  productionApp [ label = \"production-app.js\", shape = cylinder, fillcolor = moccasin, URL = \"/docs/production-app/#production-appjs\" ];\n  buildJavascript [ label = \"build-javascript.js\", URL = \"/docs/production-app/\" ];\n  componentChunks [ label = \"component chunks\\l component---src-blog-[hash].js\", shape = cylinder, fillcolor = palegreen, URL = \"/docs/how-code-splitting-works/\" ];\n  appChunk [ label = \"app-[hash].js\", shape = cylinder, fillcolor = palegreen ];\n  webpackStats [ label = \"webpack.stats.json\", shape = cylinder, fillcolor = palegreen, URL = \"/docs/how-code-splitting-works/#webpackstatsjson\" ];\n  chunkMap [ label = \"chunk-map.json\", shape = cylinder, fillcolor = palegreen, URL = \"/docs/how-code-splitting-works/#chunk-mapjson\" ];\n\n  appWebpack -> buildJavascript;\n  asyncRequires -> productionApp;\n  dataJson -> productionApp;\n  productionApp -> buildJavascript;\n  buildJavascript -> componentChunks;\n  buildJavascript -> appChunk;\n  buildJavascript -> webpackStats;\n  buildJavascript -> chunkMap;\n\n  queryResults -> componentChunks;\n\n  ## Generate html\n\n  htmlWebpack [ label = \"configure webpack\\l (`build-html`)\", URL = \"/docs/html-generation/#webpack\" ];\n  staticEntry [ label = \"static-entry.js\", shape = cylinder, fillcolor = moccasin, URL = \"/docs/html-generation/#static-entryjs\" ];\n  buildHtml [ label = \"build-html.js\", URL = \"/docs/html-generation/\" ];\n  pageRenderer [ label = \"page-renderer.js\", shape = cylinder, fillcolor = palegreen ];\n  htmlFiles [ label = \"html files\\l (index.html)\", shape = cylinder, fillcolor = palegreen ];\n\n  htmlWebpack -> buildHtml;\n  syncRequires -> staticEntry;\n  dataJson -> staticEntry;\n  webpackStats -> staticEntry;\n  chunkMap -> staticEntry;\n  staticEntry -> buildHtml;\n  buildHtml -> pageRenderer;\n  pages -> buildHtml;\n  pageRenderer -> buildHtml;\n  buildHtml -> htmlFiles;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Babel Monorepo in Gatsby Plugin JSS (JavaScript)\nDESCRIPTION: This commit updates the Babel monorepo dependency for the gatsby-plugin-jss package. Updating babel ensures the plugin remains compatible with the latest javascript syntax and features.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-jss/CHANGELOG.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nupdate babel monorepo [#32564](https://github.com/gatsbyjs/gatsby/issues/32564) ([a554998](https://github.com/gatsbyjs/gatsby/commit/a554998b4f6765103b650813cf52dbfcc575fecf))\n```\n\n----------------------------------------\n\nTITLE: Updating babel monorepo for Gatsby\nDESCRIPTION: This commit updates the babel monorepo to the latest version. This ensures that Gatsby projects are using the most up-to-date babel tooling, providing better performance and compatibility.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-coffeescript/CHANGELOG.md#_snippet_15\n\nLANGUAGE: Markdown\nCODE:\n```\nupdate babel monorepo [#27528](https://github.com/gatsbyjs/gatsby/issues/27528) ([539dbb0](https://github.com/gatsbyjs/gatsby/commit/539dbb09166e346a6cee568973d2de3d936e8ef3))\n```\n\n----------------------------------------\n\nTITLE: Running import-link codemod\nDESCRIPTION: This command executes the `import-link` codemod, replacing imports from `gatsby-link` with imports from `gatsby`. It updates the import statements to reflect the change in Gatsby v2 where the `Link` component is now available directly from the `gatsby` package.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-codemods/README.md#_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\nnpx gatsby-codemods import-link <filepath>\n```\n\n----------------------------------------\n\nTITLE: Minimal DSG Configuration (JavaScript)\nDESCRIPTION: A minimal example of using the `config()` function to defer every page in the current File System Route template.  This snippet demonstrates the basic structure required to enable DSG. Requires Gatsby.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/v4.1/index.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport async function config() {\n  return ({ params }) => {\n    return {\n      defer: true,\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Relative Hyperlink - Bad Example\nDESCRIPTION: This example demonstrates how *not* to create relative hyperlinks within the GatsbyJS website. Avoid using the full domain to ensure links work correctly in local and preview environments.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/contributing/gatsby-style-guide.md#_snippet_3\n\nLANGUAGE: Markdown\nCODE:\n```\n[Gatsby's glossary](https://www.gatsbyjs.com/docs/glossary/)\n```\n\n----------------------------------------\n\nTITLE: Update Gatsby plugin version in package.json (Diff)\nDESCRIPTION: Illustrates how to update a Gatsby plugin version (e.g., `gatsby-plugin-image`) in the `package.json` file. Update all `gatsby-*` packages to the latest version for Gatsby v5 compatibility.  The example shows a change from v2 to v3.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v4-to-v5.md#_snippet_6\n\nLANGUAGE: Diff\nCODE:\n```\n{\n  \"dependencies\": {\n-   \"gatsby-plugin-image\": \"^2.0.0\"\n+   \"gatsby-plugin-image\": \"^3.0.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing ID Generation for Nested ACF Flexible Content Fields\nDESCRIPTION: This commit addresses a bug in gatsby-source-wordpress related to ID generation for nested ACF (Advanced Custom Fields) flexible content fields. The fix ensures that IDs are correctly generated for these fields, allowing for proper data referencing and querying.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-wordpress/CHANGELOG.md#_snippet_23\n\n\n\n----------------------------------------\n\nTITLE: Fixing Typo in Gatsby TypeScript Plugin Readme\nDESCRIPTION: This commit addresses a typographical error found within the README file for the gatsby-plugin-typescript. This change contributes to enhanced clarity and accuracy of the plugin's documentation, improving user experience.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-typescript/CHANGELOG.md#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n**gatsby-plugin-typescript:** typo in readme ([#17640](https://github.com/gatsbyjs/gatsby/issues/17640)) ([dd87dd6](https://github.com/gatsbyjs/gatsby/commit/dd87dd6))\n```\n\n----------------------------------------\n\nTITLE: Bug Fix: CI Pipeline in babel-preset-gatsby\nDESCRIPTION: This snippet describes the fix for the CI pipeline in the babel-preset-gatsby package. This update addresses an issue reported in issue #36544 and #36568 on the gatsbyjs/gatsby repository.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/babel-preset-gatsby/CHANGELOG.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nci pipeline [#36544](https://github.com/gatsbyjs/gatsby/issues/36544) [#36568](https://github.com/gatsbyjs/gatsby/issues/36568) ([8e10e1c](https://github.com/gatsbyjs/gatsby/commit/8e10e1c6dbf24f506e1572d9eff9c4a39348e789))\n```\n\n----------------------------------------\n\nTITLE: Create a New Gatsby App\nDESCRIPTION: This command initiates the interactive CLI to create a new Gatsby app. It prompts the user for various project configurations and sets up the basic project structure.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/create-gatsby/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm init gatsby\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Fragments in GraphQL\nDESCRIPTION: This GraphQL query demonstrates how to define and use a fragment.  A fragment named `fragmentName` is defined on the `Site` type to retrieve the `title` from `siteMetadata`. This fragment is then used within a query to retrieve the same information.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/graphql-reference.md#_snippet_27\n\nLANGUAGE: graphql\nCODE:\n```\nfragment fragmentName on Site {\n  siteMetadata {\n    title\n  }\n}\n\n{\n  site {\n    ...fragmentName\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing dependencies with Yarn\nDESCRIPTION: This command installs all the necessary dependencies defined in the `package.json` file. It ensures that all required packages are present for the project to run correctly.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/creating-a-source-plugin/part-1/index.mdx#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Enabling CORS with gatsby-plugin-manifest in JavaScript\nDESCRIPTION: This code snippet demonstrates how to enable CORS by adding a `crossorigin` attribute to the manifest link tag using the `crossOrigin` option in gatsby-plugin-manifest. Setting `crossOrigin` to `use-credentials` enables sharing resources via cookies.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-manifest/README.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// in gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-manifest`,\n      options: {\n        name: `GatsbyJS`,\n        short_name: `GatsbyJS`,\n        start_url: `/`,\n        background_color: `#f7f0eb`,\n        theme_color: `#a2466c`,\n        display: `standalone`,\n        icon: `src/images/icon.png`,\n        crossOrigin: `use-credentials`, // `use-credentials` or `anonymous`\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Updating gatsby-dev-cli Dependencies\nDESCRIPTION: This commit updates minor and patch dependencies for `gatsby-dev-cli`. The pull request is referenced by its GitHub issue number.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-dev-cli/CHANGELOG.md#_snippet_11\n\nLANGUAGE: Text\nCODE:\n```\n**deps:** update minor and patch for gatsby-dev-cli ([#27775](https://github.com/gatsbyjs/gatsby/issues/27775)) ([82178c4](https://github.com/gatsbyjs/gatsby/commit/82178c4142f9f1959c00d1fc94ce2d4018477fb6))\n```\n\n----------------------------------------\n\nTITLE: Bumping Babel Minor Version - Chore (2)\nDESCRIPTION: This chore increments the minor version of the Babel dependency. This likely includes new features or improvements in Babel. The issues and commit are provided for reference.  This appears to be a duplicate entry with slightly different issue links and a different commit hash.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-documentationjs/CHANGELOG.md#_snippet_10\n\nLANGUAGE: N/A\nCODE:\n```\nbump babel minor [#31857](https://github.com/gatsbyjs/gatsby/issues/31857) [#31859](https://github.com/gatsbyjs/gatsby/issues/31859) ([8636025](https://github.com/gatsbyjs/gatsby/commit/863602567930a39142ed33d9d1f1813b7dec8686))\n```\n\n----------------------------------------\n\nTITLE: Updating qs Dependency - JavaScript\nDESCRIPTION: This snippet updates the `qs` dependency to version ^6.9.0. The `qs` library is used for query string parsing, and this update ensures that the `gatsby-source-contentful` plugin utilizes the latest version with potential security patches and bug fixes.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-contentful/CHANGELOG.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n8119d4b\n```\n\n----------------------------------------\n\nTITLE: Loader Shim (loadershim.js)\nDESCRIPTION: This JavaScript file defines a global mock for the Gatsby loader.  It sets the `___loader` global variable to an object with an `enqueue` method that's a Jest mock function, allowing tests to simulate Gatsby's component loading mechanism.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/testing/unit-testing.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nglobal.___loader = {\n  enqueue: jest.fn(),\n}\n```\n\n----------------------------------------\n\nTITLE: Allowing react-helmet@6 usage in gatsby-plugin-react-helmet\nDESCRIPTION: This commit allows the usage of `react-helmet@6` within the `gatsby-plugin-react-helmet` package. This change provides compatibility with newer versions of React Helmet, enabling access to new features and bug fixes.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-react-helmet/CHANGELOG.md#_snippet_20\n\nLANGUAGE: Shell\nCODE:\n```\n**gatsby-plugin-react-helmet:** allow the use of `react-helmet@6` ([#22993](https://github.com/gatsbyjs/gatsby/issues/22993)) ([ed2762f](https://github.com/gatsbyjs/gatsby/commit/ed2762f))\n```\n\n----------------------------------------\n\nTITLE: JSX Runtime Configuration in gatsby-config.js (JavaScript)\nDESCRIPTION: Configures the JSX runtime and import source in `gatsby-config.js`. Setting `jsxRuntime` to `automatic` allows JSX usage without importing React. `jsxImportSource` specifies the package to use as the JSX transformer. Requires Gatsby.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/v4.1/index.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  jsxRuntime: \"automatic\",\n  jsxImportSource: \"@emotion/react\",\n}\n```\n\n----------------------------------------\n\nTITLE: Update globby dependency\nDESCRIPTION: Updates the globby dependency to version ^11.1.0 specifically for the gatsby-plugin-page-creator. Globby is used for file path matching using glob patterns, which is important for page creation.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-page-creator/CHANGELOG.md#_snippet_18\n\nLANGUAGE: none\nCODE:\n```\nupdate dependency globby to ^11.1.0 for gatsby-plugin-page-creator [#35282](https://github.com/gatsbyjs/gatsby/issues/35282) ([9a28752](https://github.com/gatsbyjs/gatsby/commit/9a28752cfda8bbb7c00bed17a639e18e83a2b7ab))\n```\n\n----------------------------------------\n\nTITLE: Verify nvm Installation\nDESCRIPTION: This command checks if nvm (Node Version Manager) is installed correctly and displays the installed version.  It is used to confirm that the nvm installation script has executed successfully. The expected output is 'nvm' followed by a version number.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-0/index.mdx#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnvm --version\n```\n\n----------------------------------------\n\nTITLE: Add nodes db module\nDESCRIPTION: This code snippet adds a nodes database module to gatsby. This improves the performance and efficiency of Gatsby by providing a structured way to manage and access nodes during the build process.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-contentful/CHANGELOG.md#_snippet_33\n\nLANGUAGE: diff\nCODE:\n```\n([#9416](https://github.com/gatsbyjs/gatsby/issues/9416)) ([7d31fe7](https://github.com/gatsbyjs/gatsby/commit/7d31fe7)), closes [#9338](https://github.com/gatsbyjs/gatsby/issues/9338)\n```\n\n----------------------------------------\n\nTITLE: Initializing Gatsby project\nDESCRIPTION: This command initializes a new Gatsby project using the interactive `create-gatsby` tool. It guides the user through a series of questions to configure the project with their preferred CMS, styling tools, and plugins, and sets up a working Gatsby site.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/v2.27/index.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm init gatsby\n```\n\n----------------------------------------\n\nTITLE: Supporting CJS Modules for Typography Config - JavaScript\nDESCRIPTION: This commit introduces support for CommonJS (CJS) modules when loading the typography configuration. This allows users to use CJS-style modules for their typography settings. It addresses issue #10610.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-typography/CHANGELOG.md#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nsupport cjs modules when loading typography config ([#10610](https://github.com/gatsbyjs/gatsby/issues/10610)) ([2f7303d](https://github.com/gatsbyjs/gatsby/commit/2f7303d))\n```\n\n----------------------------------------\n\nTITLE: Excluding .html files from the build diff\nDESCRIPTION: This command generates a diff file between two builds, excluding all `.html` files. This can be helpful for focusing on other types of changes, such as JavaScript bundles or data files.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/debugging-incremental-builds.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndiff -u -r --exclude=\"*.html\" public-first-build public > build-diff.diff\n```\n\n----------------------------------------\n\nTITLE: Adding Event Data\nDESCRIPTION: This YAML snippet shows how to add event data to a Gatsby theme. The data includes event name, location, start and end dates, and a URL. This data is placed in a `events.yml` file within the `data` directory.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/building-a-theme.md#_snippet_39\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Party\n  location: My House\n  start_date: 2019-06-26\n  end_date: 2019-06-26\n  url: https://jason.af/party\n```\n\n----------------------------------------\n\nTITLE: Applying Patches for v4 in Gatsby Plugin JSS (JavaScript)\nDESCRIPTION: This commit applies necessary patches to the gatsby-plugin-jss package for version 4 of Gatsby. It addresses potential issues and ensures compatibility with the core Gatsby framework.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-jss/CHANGELOG.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\napply patches for v4 [#33170](https://github.com/gatsbyjs/gatsby/issues/33170) ([f8c5141](https://github.com/gatsbyjs/gatsby/commit/f8c5141bf72108a53338fd01514522ae7a1b37bf))\n```\n\n----------------------------------------\n\nTITLE: Bump Node Version in Gatsby\nDESCRIPTION: This snippet bumps the minimum required Node.js version for the Gatsby project to 10.13.0. This ensures that the project utilizes features and security updates available in newer Node.js versions.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-javascript-static-exports/CHANGELOG.md#_snippet_13\n\nLANGUAGE: none\nCODE:\n```\n- **gatsby:** bump node min version to 10.13.0 ([#22400](https://github.com/gatsbyjs/gatsby/issues/22400)) ([83d681a](https://github.com/gatsbyjs/gatsby/commit/83d681a))\n```\n\n----------------------------------------\n\nTITLE: GraphQL query for fetching WordPress pages\nDESCRIPTION: A GraphQL query that fetches all WordPress pages, including their ID, title, excerpt, slug, and date. The date is formatted using the \"MMMM DD, YYYY\" format string.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/wordpress-source-plugin-tutorial.md#_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  allWordpressPage {\n    edges {\n      node {\n        id\n        title\n        excerpt\n        slug\n        date(formatString: \"MMMM DD, YYYY\")\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Bumping node minimum version - gatsby JavaScript\nDESCRIPTION: This snippet describes the upgrade of the minimum required Node.js version for Gatsby projects to 10.13.0. This change ensures compatibility with newer features and security updates in the Node.js runtime.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-cli/CHANGELOG.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nbump node min version to 10.13.0 ([#22400](https://github.com/gatsbyjs/gatsby/issues/22400)) ([83d681a](https://github.com/gatsbyjs/gatsby/commit/83d681a))\n```\n\n----------------------------------------\n\nTITLE: Configure gatsby-source-lever\nDESCRIPTION: Configuration example for the gatsby-source-lever plugin in gatsby-config.js. This snippet shows how to configure the plugin with your Lever site name and verbose output option.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-lever/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// In your gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: \"gatsby-source-lever\",\n      options: {\n        // Your Lever site instance name.\n        site: \"lever\",\n        // Set verboseOutput to true to display a verbose output on `npm run develop` or `npm run build`\n        // It can help you debug specific API Endpoints problems\n        verboseOutput: false,\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Sharp dependency JavaScript\nDESCRIPTION: This snippet updates the Sharp dependency. Sharp is a high-speed Node.js module for image processing. The update ensures the plugin uses the newest image processing features and bug fixes.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-images-contentful/CHANGELOG.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nupdate sharp [#37131](https://github.com/gatsbyjs/gatsby/issues/37131) ([5a5e419](https://github.com/gatsbyjs/gatsby/commit/5a5e419709cd4cf39ae344a887249b0630756baf))\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nupdate sharp [#35539](https://github.com/gatsbyjs/gatsby/issues/35539) ([a9132a5](https://github.com/gatsbyjs/gatsby/commit/a9132a53eac37f713e8cb8a8246c62f4f8d8f142))\n```\n\n----------------------------------------\n\nTITLE: Updating asciidoctor dependency\nDESCRIPTION: This snippet describes updating the asciidoctor dependency to version ^2.2.5 for the gatsby-transformer-asciidoc package. This update is intended to fix bugs or introduce new features in the asciidoctor library.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-asciidoc/CHANGELOG.md#_snippet_7\n\nLANGUAGE: Text\nCODE:\n```\nupdate dependency asciidoctor to ^2.2.5 for gatsby-transformer-asciidoc [#32982](https://github.com/gatsbyjs/gatsby/issues/32982) ([08b3c76](https://github.com/gatsbyjs/gatsby/commit/08b3c764f697de51504a7e89d2d0199d28439416))\n```\n\n----------------------------------------\n\nTITLE: Use Embedded Remote Schemas\nDESCRIPTION: This code snippet describes the use of embedded remote schemas within the gatsby core, which is then used by `gatsby-source-graphql`. This allows for more efficient retrieval and processing of remote GraphQL schemas.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-graphql/CHANGELOG.md#_snippet_32\n\nLANGUAGE: diff\nCODE:\n```\n**gatsby:** use embedded remote schemas ([#19504](https://github.com/gatsbyjs/gatsby/issues/19504)) ([588eaf7](https://github.com/gatsbyjs/gatsby/commit/588eaf7))\n```\n\n----------------------------------------\n\nTITLE: Adding DiscussionEmbed to JSX in React\nDESCRIPTION: This snippet shows how to add the `DiscussionEmbed` component to the JSX code of a Gatsby blog post template, and passes the `disqusConfig` to it.  This will render the Disqus comment form on the page.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/adding-common-features/adding-comments.md#_snippet_5\n\nLANGUAGE: JSX\nCODE:\n```\nreturn (\n  <Global>\n    <PageBody>\n      {/* highlight-next-line */}\n      <DiscussionEmbed {...disqusConfig} />\n    </PageBody>\n  </Global>\n)\n```\n\n----------------------------------------\n\nTITLE: Chore: Update README instructions\nDESCRIPTION: This code snippet updates the README file for better instructions. This ensures that users have clear and concise guidance on how to use the gatsby-plugin-google-gtag package effectively.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-google-gtag/CHANGELOG.md#_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n#### Chores\n\n- Update READMEs for better instructions ([0890a5c](https://github.com/gatsbyjs/gatsby/commit/0890a5cf2c881b49193113a1e1bd5fe13a2c328f))\n```\n\n----------------------------------------\n\nTITLE: Example diff for navigate-calls codemod\nDESCRIPTION: This diff illustrates how the `navigate-calls` codemod replaces calls to `navigateTo` with calls to `navigate`.  It reflects the change in Gatsby's navigation API.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-codemods/README.md#_snippet_11\n\nLANGUAGE: Diff\nCODE:\n```\nimport React from \"react\"\n- import { navigateTo } from \"gatsby-link\"\n+ import { navigate } from \"gatsby\"\n\n// Don't use navigate with an onClick btw :-)\n// Generally just use the `<Link>` component.\nexport default props => (\n-  <div onClick={() => navigateTo(`/`)}>Click to go to home</div>\n+  <div onClick={() => navigate(`/`)}>Click to go to home</div>\n)\n```\n\n----------------------------------------\n\nTITLE: MDX Content for Blog Post 1\nDESCRIPTION: This MDX file contains the content for the first blog post, including a title and slug defined in the frontmatter, and the actual content \"Trying out MDX\". The frontmatter data can be queried and used to generate pages.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/routing/mdx.md#_snippet_12\n\nLANGUAGE: mdx\nCODE:\n```\n---\ntitle: Blog Post 1\nslug: /blog-1\n---\n\nTrying out MDX\n```\n\n----------------------------------------\n\nTITLE: Updating blog post template to render children\nDESCRIPTION: This code snippet updates the blog post template to accept a `children` prop and render it within the `articleBody` section.  It replaces the `dangerouslySetInnerHTML` approach with direct rendering of the MDX content.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/routing/migrate-remark-to-mdx.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\n-const BlogPostTemplate = ({ data, location }) => {\n+const BlogPostTemplate = ({ data, location, children }) => {\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n-<section dangerouslySetInnerHTML={{ __html: post.html }} itemProp=\"articleBody\" />\n+<section itemProp=\"articleBody\">{children}</section>\n```\n\n----------------------------------------\n\nTITLE: Running a Gatsby site after starter generation\nDESCRIPTION: These commands navigate into the newly created project directory, install the necessary npm dependencies, and start the Gatsby development server.  This allows you to view and work on the generated site.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/local-development/starters.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ncd {your-project-name}\nnpm install\ngatsby develop\n```\n\n----------------------------------------\n\nTITLE: Deprecated `touchNode` API: Pass the full node (gatsby-node.js)\nDESCRIPTION: In Gatsby v2, `touchNode` accepted `nodeId` as a named argument. This snippet shows how to update the usage of `touchNode` to pass the entire `node` object instead.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v2-to-v3.md#_snippet_31\n\nLANGUAGE: diff\nCODE:\n```\nexports.sourceNodes = ({ actions, getNodesByType }) => {\n  const { touchNode } = actions\n\n- getNodesByType(\"YourSourceType\").forEach(node => touchNode({ nodeId: node.id }))\n+ getNodesByType(\"YourSourceType\").forEach(node => touchNode(node))\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query Example (GraphQL)\nDESCRIPTION: This is an example GraphQL query to retrieve data when the `nodePerFile` option is used. The query retrieves all `Foodstuffs` nodes and their `ingredients` field, along with the name of the parent file.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-csv/README.md#_snippet_8\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  allFoodstuffs {\n    nodes {\n      ingredients {\n        ingredient\n        amount\n      }\n      parent {\n        ... on File {\n          name\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Dependency Version in Gatsby\nDESCRIPTION: This snippet fixes a dependency version. The fix is part of a chore and addresses issue #27837 in the Gatsby repository. It ensures the plugin uses the correct dependency version for stability.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-cxs/CHANGELOG.md#_snippet_16\n\nLANGUAGE: Text\nCODE:\n```\nFix dependency version Fix [#27837](https://github.com/gatsbyjs/gatsby/issues/27837) ([b40db9b](https://github.com/gatsbyjs/gatsby/commit/b40db9b78dc34667c3a612aaef6ff15ed4af9052))\n```\n\n----------------------------------------\n\nTITLE: Bump Node.js Minimum Version\nDESCRIPTION: This code snippet reflects a change to the minimum required Node.js version for the Gatsby project. The minimum version was bumped to 10.13.0 to ensure compatibility with newer features and dependencies.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-graphql/CHANGELOG.md#_snippet_29\n\nLANGUAGE: diff\nCODE:\n```\n**gatsby:** bump node min version to 10.13.0 ([#22400](https://github.com/gatsbyjs/gatsby/issues/22400)) ([83d681a](https://github.com/gatsbyjs/gatsby/commit/83d681a))\n```\n\n----------------------------------------\n\nTITLE: Correcting Changelog Links in Gatsby\nDESCRIPTION: This snippet shows a bug fix that corrects broken links in package changelogs. This resolves an issue related to navigation and linking to specific commits or issue numbers in the changelog.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-layout/CHANGELOG.md#_snippet_9\n\nLANGUAGE: diff\nCODE:\n```\n- correct links in package changelogs ([#15630](https://github.com/gatsbyjs/gatsby/issues/15630)) ([d07b9dd](https://github.com/gatsbyjs/gatsby/commit/d07b9dd))\n```\n\n----------------------------------------\n\nTITLE: CSS Styles for menu.css\nDESCRIPTION: This CSS snippet defines styles for a `.menu` class, setting the background color to black, text color to white, and using flexbox for layout.  This demonstrates how CSS styles can be created for specific components.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/styling/global-css.md#_snippet_7\n\nLANGUAGE: CSS\nCODE:\n```\n.menu {\n  background-color: black;\n  color: #fff;\n  display: flex;\n}\n```\n\n----------------------------------------\n\nTITLE: Stabilizing unstable_shouldOnCreateNode in gatsby-transformer-excel\nDESCRIPTION: This code snippet stabilizes the `unstable_shouldOnCreateNode` API within the `gatsby-transformer-excel` package. This promotes the unstable API to stable, improving its reliability and long-term support.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-excel/CHANGELOG.md#_snippet_3\n\nLANGUAGE: Patch\nCODE:\n```\nmake unstable_shouldOnCreateNode stable [#36516](https://github.com/gatsbyjs/gatsby/issues/36516) ([90f9ab4](https://github.com/gatsbyjs/gatsby/commit/90f9ab47593ba7458fc5bc677c4b0282b30808c8))\n```\n\n----------------------------------------\n\nTITLE: Creating a new Gatsby site using a starter blog\nDESCRIPTION: This command creates a new Gatsby site named 'gatsby-algolia-guide' using the 'gatsby-starter-blog' starter. This provides a pre-configured blog structure for demonstration purposes. It uses the Gatsby CLI to generate the project.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/adding-search-with-algolia.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngatsby new gatsby-algolia-guide https://github.com/gatsbyjs/gatsby-starter-blog\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query for MDX Node with Hardcoded Slug\nDESCRIPTION: This GraphQL query retrieves data for an MDX node based on a hardcoded slug value. It fetches the title from the frontmatter of the MDX node where the slug is equal to 'another-post'.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-6/index.mdx#_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nquery MyQuery {\n  mdx(frontmatter: { slug: { eq: \"another-post\" } }) {\n    frontmatter {\n      title\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding keepMediaDetails Feature in gatsby-source-wordpress\nDESCRIPTION: This commit adds the `keepMediaDetails` feature to gatsby-source-wordpress. This allows users to control whether or not media details are retained when sourcing data from WordPress, potentially improving performance and reducing data volume.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-wordpress/CHANGELOG.md#_snippet_10\n\nLANGUAGE: Commit Message\nCODE:\n```\n1b89f31\n```\n\n----------------------------------------\n\nTITLE: Configuring trailingSlash in gatsby-config.js\nDESCRIPTION: This code snippet demonstrates how to configure the `trailingSlash` option in `gatsby-config.js`. The `trailingSlash` option controls how Gatsby handles trailing slashes in URLs. Setting it to \"always\" ensures that all URLs have a trailing slash.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/v4.7/index.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  trailingSlash: \"always\"\n}\n```\n\n----------------------------------------\n\nTITLE: Styling the anchor link with CSS\nDESCRIPTION: This CSS snippet demonstrates how to style the anchor links generated by the `gatsby-remark-autolink-headers` plugin using the default `anchor` class. It sets the fill color to red, providing a basic example of how to customize the anchor link's appearance.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-autolink-headers/README.md#_snippet_4\n\nLANGUAGE: css\nCODE:\n```\na.anchor {\n  fill: \"red\";\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Gatsby Disqus Name in .env.example file\nDESCRIPTION: This snippet shows how to add the Disqus shortname to the `.env.example` file. This allows other developers to easily use Disqus comments for their forked projects by defining the `GATSBY_DISQUS_NAME` environment variable.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/adding-common-features/adding-comments.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n# enables Disqus comments for blog posts\nGATSBY_DISQUS_NAME=insertValue\n```\n\n----------------------------------------\n\nTITLE: Fixing package changelog links in Gatsby\nDESCRIPTION: This commit fixes incorrect links within the package changelogs for the Gatsby project. The fix ensures that links to issues and commits are correctly resolved, improving the usability of the changelog.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-codemods/CHANGELOG.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\ncorrect links in package changelogs ([#15630](https://github.com/gatsbyjs/gatsby/issues/15630)) ([d07b9dd](https://github.com/gatsbyjs/gatsby/commit/d07b9dd))\n```\n\n----------------------------------------\n\nTITLE: Updating Babel Monorepo in gatsby-plugin-styled-jsx\nDESCRIPTION: This commit updates the babel monorepo to address issue #37386. Updating Babel ensures that gatsby-plugin-styled-jsx stays current with the latest features and bug fixes from Babel.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-styled-jsx/CHANGELOG.md#_snippet_1\n\nLANGUAGE: Other\nCODE:\n```\nupdate babel monorepo [#37386](https://github.com/gatsbyjs/gatsby/issues/37386) ([b941876](https://github.com/gatsbyjs/gatsby/commit/b94187633d94d0f0071b38ffe93380dd802ec70f))\n```\n\n----------------------------------------\n\nTITLE: Gatsby Frontmatter Configuration YAML\nDESCRIPTION: This YAML snippet defines the metadata for a Gatsby blog post. It includes the slug (URL path), date (post creation date), and title (post title). This frontmatter is typically placed at the beginning of a Markdown file.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/using-markdown-pages/src/markdown-pages/post-1.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n---\nslug: \"/blog/my-first-post\"\ndate: \"2019-05-04\"\ntitle: \"My first blog post\"\n---\n```\n\n----------------------------------------\n\nTITLE: Updating remark-mdx Dependency\nDESCRIPTION: This change updates the remark-mdx dependency to version ^1.6.22.  This is done for gatsby-remark-responsive-iframe, possibly to maintain compatibility or incorporate new features from the dependency.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-responsive-iframe/CHANGELOG.md#_snippet_2\n\nLANGUAGE: Text\nCODE:\n```\nupdate dependency remark-mdx to ^1.6.22 for gatsby-remark-responsive-iframe [#32568](https://github.com/gatsbyjs/gatsby/issues/32568) ([a2159f1](https://github.com/gatsbyjs/gatsby/commit/a2159f19b64536fa7ca895cf0257812b42d2d4a0))\n```\n\n----------------------------------------\n\nTITLE: Importing Bio Component in Header (TSX)\nDESCRIPTION: This code demonstrates how the theme author can import the `Bio` component without specifying the file extension, allowing users to shadow the component with different file types (e.g., .js instead of .tsx).\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/plugins-and-themes/shadowing.md#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport Bio from \"./bio\"\n\n/* Rest of the code */\n```\n\n----------------------------------------\n\nTITLE: Update Minor Updates in Packages\nDESCRIPTION: This code snippet indicates a bulk update of minor version updates for multiple packages, excluding react, babel, and eslint. These updates likely included bug fixes and minor feature enhancements.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-graphql/CHANGELOG.md#_snippet_34\n\nLANGUAGE: diff\nCODE:\n```\nupdate minor updates in packages except react, babel and eslint ([#17254](https://github.com/gatsbyjs/gatsby/issues/17254)) ([252d867](https://github.com/gatsbyjs/gatsby/commit/252d867))\n```\n\n----------------------------------------\n\nTITLE: Updating minor updates in gatsby-remark-katex\nDESCRIPTION: This commit updates minor dependencies within the package, excluding react, babel, and eslint. The update aims to integrate the latest bug fixes and enhancements from other dependencies.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-katex/CHANGELOG.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\nupdate minor updates in packages except react, babel and eslint ([#17254](https://github.com/gatsbyjs/gatsby/issues/17254)) ([252d867](https://github.com/gatsbyjs/gatsby/commit/252d867))\n```\n\n----------------------------------------\n\nTITLE: Pass Props to Layout Component\nDESCRIPTION: This code demonstrates how to pass `location` props to the layout component from the page component. In Gatsby v2, only pages have access to these props and need to be explicitly passed to the layout if needed.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v1-to-v2.md#_snippet_9\n\nLANGUAGE: JSX\nCODE:\n```\nimport React from \"react\"\n\nexport default function Layout({ children, location }) {\n  return (\n    <div>\n      <p>Path is {location.pathname}</p>\n      {children}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Fix: Wrapping ignore pattern in quotes\nDESCRIPTION: This code fixes a bug by wrapping an ignore pattern in quotes. This is likely addressing an issue where the ignore pattern was not being correctly interpreted due to a lack of proper quoting.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-facebook-analytics/CHANGELOG.md#_snippet_2\n\nLANGUAGE: N/A\nCODE:\n```\nwrap ignore pattern in quotes ([#23176](https://github.com/gatsbyjs/gatsby/issues/23176)) ([7563db6](https://github.com/gatsbyjs/gatsby/commit/7563db6))\n```\n\n----------------------------------------\n\nTITLE: Defining Disqus Configuration Object in JavaScript\nDESCRIPTION: This snippet shows how to define a configuration object for the Disqus component, using the shortname defined in `.env` file. The `identifier` must be a unique string for each post to work correctly.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/adding-common-features/adding-comments.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst disqusConfig = {\n  shortname: process.env.GATSBY_DISQUS_NAME,\n  config: { identifier: slug, title },\n}\n```\n\n----------------------------------------\n\nTITLE: Query Site Metadata with GraphQL\nDESCRIPTION: This query fetches the `title` from the `siteMetadata` in the `gatsby-config.js` file. It's a basic example demonstrating how to access configuration data using GraphQL. No dependencies are needed beyond a configured Gatsby site.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/graphql-reference.md#_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  site {\n    siteMetadata {\n      title\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating ESLint in Gatsby\nDESCRIPTION: This commit updates ESLint to address linting issues in the Gatsby project, specifically related to issue #29988. This ensures code quality and consistency throughout the project.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-twitter/CHANGELOG.md#_snippet_16\n\nLANGUAGE: Text\nCODE:\n```\n- update eslint to fix linting issues fix [#29988](https://github.com/gatsbyjs/gatsby/issues/29988) ([5636389](https://github.com/gatsbyjs/gatsby/commit/5636389e8fa626c644e90abc14589e9961d98c68))\n```\n\n----------------------------------------\n\nTITLE: Updating Babel Monorepo Chore in gatsby-transformer-pdf\nDESCRIPTION: This code snippet shows a chore update for the babel monorepo within the gatsby-transformer-pdf package. This ensures compatibility and resolves potential issues related to the older version of the babel library.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-pdf/CHANGELOG.md#_snippet_2\n\nLANGUAGE: Text\nCODE:\n```\nupdate babel monorepo [#37386](https://github.com/gatsbyjs/gatsby/issues/37386) ([b941876](https://github.com/gatsbyjs/gatsby/commit/b94187633d94d0f0071b38ffe93380dd802ec70f))\n```\n\n----------------------------------------\n\nTITLE: Configuring the Build Script in package.json\nDESCRIPTION: This snippet demonstrates the `build` script within the `package.json` file, which is automatically executed by Heroku during the deployment process. It runs the `gatsby build` command, generating the static assets for the Gatsby site.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/previews-deploys-hosting/deploying-to-heroku.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"scripts\": {\n    \"build\": \"gatsby build\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Excluding .env files in .gitignore (Text)\nDESCRIPTION: This snippet shows how to exclude `.env` files from being tracked by Git. This is crucial for preventing sensitive information like API keys from being accidentally committed to your repository.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/ecommerce-tutorial/index.md#_snippet_13\n\nLANGUAGE: text\nCODE:\n```\n# dotenv environment variables files\n.env\n.env.development\n.env.production\n```\n\n----------------------------------------\n\nTITLE: Package.json Test Script\nDESCRIPTION: This JSON snippet shows the `test` script within a `package.json` file.  It defines the command to run Jest tests using the `jest` executable. Running `npm test` will execute the tests defined in the project.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/testing/unit-testing.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"test\": \"jest\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Chore: Apply patches for v5\nDESCRIPTION: This commit applies patches for version 5 of the gatsby-remark-prismjs package. This is likely a maintenance task that addresses specific issues or compatibility concerns related to the v5 release, resolving issue #36796.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-prismjs/CHANGELOG.md#_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\n25f79b6(https://github.com/gatsbyjs/gatsby/commit/25f79b6c3719fdf09584ade620a05c66ba2a697c)\n```\n\n----------------------------------------\n\nTITLE: Adding gatsby-plugin-feed to gatsby-config.js\nDESCRIPTION: This code snippet demonstrates how to add the `gatsby-plugin-feed` plugin to the `gatsby-config.js` file. It also includes the `siteMetadata` configuration for the site URL, which is required by the plugin.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/adding-common-features/adding-an-rss-feed.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  siteMetadata: {\n    siteUrl: `https://www.example.com`,\n  },\n  plugins: [`gatsby-plugin-feed`],\n}\n```\n\n----------------------------------------\n\nTITLE: HTTPS Setup Password Prompt on Windows\nDESCRIPTION: This text shows the password prompt that may appear when setting up a development SSL certificate for the first time on a Windows machine.  This is to set the password for future use.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/local-https.md#_snippet_6\n\nLANGUAGE: Text\nCODE:\n```\nA password is required to access the secure certificate authority key\nused for signing certificates.\n\nIf this is the first time this has run, then this is to set the password\nfor future use.  If any new certificates are signed later, you will need\nto use this same password.\n\nPlease enter the CA password:\n```\n\n----------------------------------------\n\nTITLE: Updating Babel Monorepo - Chore (3)\nDESCRIPTION: This chore updates the Babel monorepo to a newer version. Babel is a JavaScript compiler, and updating it ensures compatibility with the latest JavaScript features and improvements. The issue and commit associated with this update are included. This is another occurrence of Babel monorepo update.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-documentationjs/CHANGELOG.md#_snippet_11\n\nLANGUAGE: N/A\nCODE:\n```\nupdate babel monorepo [#31143](https://github.com/gatsbyjs/gatsby/issues/31143) ([701ab2f](https://github.com/gatsbyjs/gatsby/commit/701ab2f6690c3f1bbaf60cf572513ea566cc9ec9))\n```\n\n----------------------------------------\n\nTITLE: Install Node.js Version with Homebrew\nDESCRIPTION: This command uses Homebrew to install a specific version of Node.js. Replace `18` with the desired Node.js version number. This example installs Node.js version 18.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/upgrading-node-js.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nbrew install node@18\n```\n\n----------------------------------------\n\nTITLE: Using GraphQL from Gatsby\nDESCRIPTION: This commit ensures that the gatsby-plugin-page-creator uses the GraphQL instance provided by Gatsby itself. This change standardizes the use of GraphQL across the Gatsby ecosystem and avoids potential conflicts arising from different GraphQL versions.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-page-creator/CHANGELOG.md#_snippet_26\n\nLANGUAGE: TEXT\nCODE:\n```\ne797658\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query with GatsbyImageSharpFluid Fragment\nDESCRIPTION: This GraphQL query retrieves image data and includes the GatsbyImageSharpFluid fragment. This fragment provides the necessary fields for creating a responsive image with gatsby-image. The query filters for a specific image by its relative path.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/built-in-components/gatsby-image.md#_snippet_9\n\nLANGUAGE: GraphQL\nCODE:\n```\nfile(relativePath: { eq: \"images/default.jpg\" }) {\n  childImageSharp {\n    fluid {\n      // highlight-next-line\n      ...GatsbyImageSharpFluid\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Re-generating Changelogs\nDESCRIPTION: This chore re-generates the changelogs. This is likely done to ensure accuracy and completeness after a series of changes or updates.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-responsive-iframe/CHANGELOG.md#_snippet_5\n\nLANGUAGE: Text\nCODE:\n```\nre-generate changelogs [#32886](https://github.com/gatsbyjs/gatsby/issues/32886) ([417df15](https://github.com/gatsbyjs/gatsby/commit/417df15230be368a9db91f2ad1a9bc0442733177))\n```\n\n----------------------------------------\n\nTITLE: Bumping Babel Minor Version in Gatsby Plugin JSS (JavaScript)\nDESCRIPTION: This commit bumps the minor version of the Babel dependency in the gatsby-plugin-jss package. Minor version bumps usually include new features or improvements without breaking backward compatibility.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-jss/CHANGELOG.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nbump babel minor [#31857](https://github.com/gatsbyjs/gatsby/issues/31857) ([7d42e8d](https://github.com/gatsbyjs/gatsby/commit/7d42e8d866e46e9c39838d812d080d06433f7060))\n```\n\n----------------------------------------\n\nTITLE: Playground setup: Navigate to Playground\nDESCRIPTION: This command navigates to the playground directory where test projects can be easily created and deleted. It is used in conjunction with the create-gatsby script to test local changes.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/create-gatsby/README.md#_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\ncd <path-to-playground>\n```\n\n----------------------------------------\n\nTITLE: Fix: Disable HMR for CSS Modules in Gatsby Core\nDESCRIPTION: This code disables Hot Module Replacement (HMR) specifically for CSS Modules. HMR allows modules to be updated at runtime without a full refresh of the page. Disabling it for CSS Modules addresses issues related to style updates during development. This fix is present in version 2.0.4 of the plugin.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-postcss/CHANGELOG.md#_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\n**core:** Disable HMR for CSS modules ([#11032](https://github.com/gatsbyjs/gatsby/issues/11032)) ([97c98e9](https://github.com/gatsbyjs/gatsby/commit/97c98e9))\n```\n\n----------------------------------------\n\nTITLE: Implement Custom Converter Class (JavaScript)\nDESCRIPTION: Implements a custom converter class for Asciidoctor.  This example demonstrates how to convert paragraphs using a custom logic while delegating the conversion of other nodes to the built-in HTML5 converter.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-asciidoc/README.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst asciidoc = require(`asciidoctor`)()\n\nclass CustomConverter {\n  constructor() {\n    this.baseConverter = asciidoc.Html5Converter.$new()\n  }\n\n  convert(node, transform) {\n    if (node.getNodeName() === \"paragraph\") {\n      return `<p>${node.getContent()}</p>`\n    }\n\n    return this.baseConverter.convert(node, transform)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Babel Monorepo in Gatsby\nDESCRIPTION: This chore involves updating the Babel monorepo within the Gatsby plugin ecosystem. The update aims to keep the project aligned with the latest Babel features and bug fixes. It involves updating the relevant packages in the monorepo.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-twitter/CHANGELOG.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nupdate babel monorepo [#37386](https://github.com/gatsbyjs/gatsby/issues/37386) ([b941876](https://github.com/gatsbyjs/gatsby/commit/b94187633d94d0f0071b38ffe93380dd802ec70f))\n```\n\n----------------------------------------\n\nTITLE: Removing outerWrapperClassName from gatsby-image (Diff)\nDESCRIPTION: Illustrates the removal of the `outerWrapperClassName` prop from `gatsby-image` and explains how to merge the styles into the wrapper's class.  It also addresses updating CSS rules referencing `gatsby-image-outer-wrapper`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v1-to-v2.md#_snippet_31\n\nLANGUAGE: diff\nCODE:\n```\n<Img\n  fluid={data.file.childImageSharp.fluid}\n  className={styles.wrapper}\n- outerWrapperClassName={styles.outerWrapper}\n/>\n```\n\n----------------------------------------\n\nTITLE: Making Ink an Optional Dependency for gatsby-cli JavaScript\nDESCRIPTION: This snippet makes `ink` an optional dependency for `gatsby-cli`. This change means that `gatsby-cli` can function without `ink` being installed. This is useful because `ink` might have dependencies that are difficult to install in some environments.  By making `ink` optional, `gatsby-cli` becomes more flexible and easier to use in a wider range of environments.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-cli/CHANGELOG.md#_snippet_30\n\nLANGUAGE: JavaScript\nCODE:\n```\n10638f8\n```\n\n----------------------------------------\n\nTITLE: Configuring gatsby-transformer-remark in gatsby-config.js (JavaScript)\nDESCRIPTION: Adds the gatsby-transformer-remark plugin to the `gatsby-config.js` file, making it available to process Markdown files.  The resolve property specifies the plugin name, and the options property is used to configure the plugin's behavior.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-remark/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-transformer-remark`,\n      options: {},\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Packages in Gatsby\nDESCRIPTION: This snippet updates minor package dependencies, excluding react, babel, and eslint. This change aims to incorporate the latest improvements and bug fixes from various packages, ensuring the stability and performance of Gatsby projects.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-npm-package-search/CHANGELOG.md#_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n252d867\n```\n\n----------------------------------------\n\nTITLE: Bumping node min version in gatsby-remark-katex\nDESCRIPTION: This commit bumps the minimum required Node.js version to 10.13.0. This change ensures that the gatsby-remark-katex plugin is compatible with newer Node.js features and improvements.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-katex/CHANGELOG.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n**gatsby:** bump node min version to 10.13.0 ([#22400](https://github.com/gatsbyjs/gatsby/issues/22400)) ([83d681a](https://github.com/gatsbyjs/gatsby/commit/83d681a))\n```\n\n----------------------------------------\n\nTITLE: Defining Gatsby Disqus Name in .env file\nDESCRIPTION: This snippet defines the `GATSBY_DISQUS_NAME` environment variable in the `.env` file. This variable is used to store the Disqus shortname associated with the website, ensuring that the comments are correctly linked to the site.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/adding-common-features/adding-comments.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nGATSBY_DISQUS_NAME=yourSiteShortname\n```\n\n----------------------------------------\n\nTITLE: Hot Reloading Styles and Google Fonts - JavaScript\nDESCRIPTION: This feature introduces hot reloading for both styles and Google Fonts within the `gatsby-plugin-typography` plugin. This enables developers to see changes to their typography instantly during development without requiring a full page reload. It addresses issue #10545.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-typography/CHANGELOG.md#_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\n**gatsby-plugin-typography:** hot reloading for styles and Google Fonts ([#10545](https://github.com/gatsbyjs/gatsby/issues/10545)) ([7fbbd60](https://github.com/gatsbyjs/gatsby/commit/7fbbd60))\n```\n\n----------------------------------------\n\nTITLE: Updating github-slugger dependency Javascript\nDESCRIPTION: This commit updates the github-slugger dependency to version ^1.5.0 for the gatsby-remark-autolink-headers plugin. This resolves a bug and ensures compatibility with the latest slugger library.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-autolink-headers/CHANGELOG.md#_snippet_1\n\nLANGUAGE: Javascript\nCODE:\n```\nupdate dependency github-slugger to ^1.5.0 for gatsby-remark-autolink-headers [#37854](https://github.com/gatsbyjs/gatsby/issues/37854) ([19062c6](https://github.com/gatsbyjs/gatsby/commit/19062c6e619c1543e18c0496ed56b77679cb6cf6))\n```\n\n----------------------------------------\n\nTITLE: Configure Workbox Debug Mode in Gatsby Offline Plugin (JavaScript)\nDESCRIPTION: This feature allows developers to configure the Workbox debug mode through the gatsby-plugin-offline options. Enabling debug mode can help in troubleshooting service worker issues.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-offline/CHANGELOG.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nAllow configuring Workbox debug m‚Ä¶\n```\n\n----------------------------------------\n\nTITLE: Configuring Partytown Proxied URLs\nDESCRIPTION: Shows how to configure `partytownProxiedURLs` in `gatsby-config.js` to allow Gatsby to proxy requests for scripts loaded with the `off-main-thread` strategy.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/built-in-components/gatsby-script.md#_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nimport dotenv from \"dotenv\"\n\ndotenv.config({\n  path: `.env.${process.env.NODE_ENV}`,\n})\n\nmodule.exports = {\n  siteMetadata: {\n    title: `Gatsby`,\n  },\n  // highlight-start\n  partytownProxiedURLs: [\n    `https://www.googletagmanager.com/gtag/js?id=${process.env.GTAG}`\n  ],\n  // highlight-end\n}\n```\n\n----------------------------------------\n\nTITLE: Running Gatsby in Development Mode after Changes\nDESCRIPTION: After modifying your Gatsby project, run this command to restart the development server and see the updated changes.  This is necessary to reflect the new code in the browser.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/sourcing-from-buttercms.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\ngatsby develop\n```\n\n----------------------------------------\n\nTITLE: Fixing Missing Return\nDESCRIPTION: This change fixes a missing return statement, addressing a potential bug in the code logic. A missing return can lead to incorrect results or unexpected behavior, and resolving it improves the overall correctness of the plugin.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-npm-package-search/CHANGELOG.md#_snippet_14\n\nLANGUAGE: Text\nCODE:\n```\nFix missing return ([6375542](https://github.com/gatsbyjs/gatsby/commit/6375542419604a282d442bfbd5696939a716bb31))\n```\n\n----------------------------------------\n\nTITLE: Adding Sanity Check Before Accessing Field in Gatsby Source Drupal\nDESCRIPTION: This code snippet adds a sanity check to ensure that a field exists before attempting to access it, preventing potential errors when sourcing data from Drupal in Gatsby.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-drupal/CHANGELOG.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nsanity check before accessing field\n```\n\n----------------------------------------\n\nTITLE: Highlighting Lines in CSS\nDESCRIPTION: This CSS snippet shows how to highlight a range of lines and a single line using `highlight-range` and `highlight-line` comments. The height and width properties of the html selector are highlighted as a range. The box-sizing property of the universal selector is highlighted as a single line.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-embed-snippet/README.md#_snippet_15\n\nLANGUAGE: css\nCODE:\n```\nhtml {\n  /* highlight-range{1-2} */\n  height: 100%;\n  width: 100%;\n}\n\n* {\n  box-sizing: border-box; /* highlight-line */\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing links in package changelogs\nDESCRIPTION: Corrects broken or incorrect links found in package changelogs. This fix aims to improve the usability and reliability of the changelogs by ensuring that all links point to the correct destinations.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-lodash/CHANGELOG.md#_snippet_3\n\nLANGUAGE: Other\nCODE:\n```\ncorrect links in package changelogs ([#15630](https://github.com/gatsbyjs/gatsby/issues/15630)) ([d07b9dd](https://github.com/gatsbyjs/gatsby/commit/d07b9dd))\n```\n\n----------------------------------------\n\nTITLE: Supporting Multiple Gatsby Versions (package.json)\nDESCRIPTION: Shows how to specify a range of supported Gatsby versions (v3 and v4) in a plugin's `peerDependencies` within `package.json`. This allows the plugin to work with multiple Gatsby versions.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v3-to-v4.md#_snippet_21\n\nLANGUAGE: Diff\nCODE:\n```\n{\n  \"peerDependencies\": {\n-   \"gatsby\": \"^2.32.0\",\n+   \"gatsby\": \"^3.0.0 || ^4.0.0\",\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Gatsby S3 Plugin in gatsby-config.js\nDESCRIPTION: Configures the gatsby-plugin-s3 in the gatsby-config.js file. This includes specifying the bucket name where the Gatsby site will be deployed. Ensure to replace \"your-website-bucket\" with the actual S3 bucket name.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/previews-deploys-hosting/deploying-to-s3-cloudfront.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nplugins: [\n  {\n    resolve: `gatsby-plugin-s3`,\n    options: {\n      bucketName: \"your-website-bucket\",\n    },\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Fixing line highlighting in gatsby-remark-prismjs\nDESCRIPTION: This commit resolves an issue with line highlighting when multiline tokens are present. It ensures that line highlighting functions correctly in scenarios where code tokens span multiple lines, improving the user experience for code block highlighting.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-prismjs/CHANGELOG.md#_snippet_10\n\n\n\n----------------------------------------\n\nTITLE: Defining a Simple Serverless Function in Gatsby\nDESCRIPTION: This JavaScript snippet defines a simple serverless function that responds with a JSON message. It demonstrates the basic structure of a Gatsby function and how to set the HTTP status code and response body.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/cloud/deploying-functions-on-gatsby-cloud.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst sample = (req, res) => {\n    res.status(200).json({\"message\": \"Hello, World!\"})\n};\n\nexport default sample;\n```\n\n----------------------------------------\n\nTITLE: Gatsby Config with Sibling Themes (JavaScript)\nDESCRIPTION: This example shows a gatsby-config.js file that configures two sibling themes: gatsby-theme-tomato-blog and gatsby-theme-tomato-portfolio.  It demonstrates how multiple themes can be used together in a Gatsby project.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/conceptual/how-shadowing-works.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  plugins: [\"gatsby-theme-tomato-blog\", \"gatsby-theme-tomato-portfolio\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Netlify Identity Widget\nDESCRIPTION: Disables the Netlify Identity widget in `gatsby-config.js` when using the Client-Side Implicit Grant option for GitLab authentication. This prevents conflicts and ensures proper authentication flow.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/sourcing-data/sourcing-from-netlify-cms.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  resolve: `gatsby-plugin-netlify-cms`,\n  options: {\n    enableIdentityWidget: false,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Babel monorepo yet again\nDESCRIPTION: This commit updates the Babel monorepo to the latest version. The update includes improvements in performance, stability, and new features for transpiling JavaScript code.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-twitter/CHANGELOG.md#_snippet_15\n\nLANGUAGE: TEXT\nCODE:\n```\nupdate babel monorepo [#31143](https://github.com/gatsbyjs/gatsby/issues/31143) ([701ab2f](https://github.com/gatsbyjs/gatsby/commit/701ab2f6690c3f1bbaf60cf572513ea566cc9ec9))\n```\n\n----------------------------------------\n\nTITLE: Using Slice Queries (GraphQL & JavaScript)\nDESCRIPTION: Shows how to define a GraphQL query within a Slice component to fetch data. The query can use variables accessed from the `context` passed to the Slice via the `createSlice` action.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/built-in-components/gatsby-slice.md#_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nexport const query = graphql`\n  query ($title: String) { // highlight-line\n    myField(title: {eq: $title}) { // highlight-line\n      id\n      title\n    }\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: Updating babel monorepo in gatsby-remark-images-contentful\nDESCRIPTION: This code snippet shows the chore of updating the babel monorepo. This update likely ensures compatibility with the latest JavaScript features and improvements in the build process.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-images-contentful/CHANGELOG.md#_snippet_26\n\nLANGUAGE: None\nCODE:\n```\nupdate babel monorepo [#32564](https://github.com/gatsbyjs/gatsby/issues/32564) ([a554998](https://github.com/gatsbyjs/gatsby/commit/a554998b4f6765103b650813cf52dbfcc575fecf))\n```\n\n----------------------------------------\n\nTITLE: Installing Material-UI Package (Shell)\nDESCRIPTION: This command shows how to install the Material-UI library and its corresponding Gatsby plugin using npm.  The command installs `gatsby-plugin-material-ui` and `@material-ui/core`.  Installing the Gatsby plugin is recommended if it exists for the third-party library.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/adding-react-components.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install gatsby-plugin-material-ui @material-ui/core\n```\n\n----------------------------------------\n\nTITLE: Defining React Head component with title\nDESCRIPTION: This code defines a React component named Head which uses the title element to set the page title. It exports this component to be used within the Gatsby framework, allowing dynamic page titles to be set.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/using-mdx/content/posts/blog-1.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const Head = () => <title>Blog Post 1</title>\n```\n\n----------------------------------------\n\nTITLE: Updating Algoliasearch Dependency in Gatsby\nDESCRIPTION: This snippet updates the algoliasearch dependency to version ^3.35.1. This change addresses potential bugs and incorporates the latest features and improvements from the Algolia search library, ensuring seamless search functionality for Gatsby sites.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-npm-package-search/CHANGELOG.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n2155c9a\n```\n\n----------------------------------------\n\nTITLE: Filtering File nodes by sourceInstanceName using GraphQL\nDESCRIPTION: Demonstrates how to filter File nodes by the name specified in the gatsby-config.js file, using the sourceInstanceName field in the GraphQL query. This allows targeting specific files based on their source location.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-filesystem/README.md#_snippet_3\n\nLANGUAGE: GraphQL\nCODE:\n```\n{\n  allFile(filter: { sourceInstanceName: { eq: \"data\" } }) {\n    nodes {\n      extension\n      dir\n      modifiedTime\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom HTTPS with npm run develop\nDESCRIPTION: This command starts the Gatsby development server with HTTPS enabled, specifying custom key, certificate, and CA files.  The paths to the key and certificate files can be either relative or absolute.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/local-https.md#_snippet_9\n\nLANGUAGE: Shell\nCODE:\n```\nnpm run develop -- --https --key-file ../relative/path/to/key.key --cert-file ../relative/path/to/cert.crt --ca-file ../relative/path/to/ca.crt\n```\n\n----------------------------------------\n\nTITLE: Installing Gatsby Image Plugins\nDESCRIPTION: Installs the necessary Gatsby plugins for image optimization and processing, including gatsby-plugin-image, gatsby-plugin-sharp, gatsby-source-filesystem, and gatsby-transformer-sharp. These plugins are required to handle images efficiently in a Gatsby project.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/images-and-media/working-with-images-in-markdown.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem gatsby-transformer-sharp\n```\n\n----------------------------------------\n\nTITLE: Clearing Gatsby Cache\nDESCRIPTION: This command deletes the `.cache` and `public` folders, forcing Gatsby to recreate the cache and reprocess all resources during the next `gatsby develop` run. It resolves issues related to outdated or corrupted cached data.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/local-development/troubleshooting-common-errors.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngatsby clean\n```\n\n----------------------------------------\n\nTITLE: Creating a New Gatsby Project\nDESCRIPTION: These shell commands create a new Gatsby project named 'gatsby-auth' using the 'gatsby-starter-hello-world' starter and then navigate into the newly created directory. This provides the initial project setup for the authentication example.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/authentication-tutorial.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngatsby new gatsby-auth gatsbyjs/gatsby-starter-hello-world\ncd gatsby-auth\n```\n\n----------------------------------------\n\nTITLE: Updating Peer Dependencies in gatsby-plugin-styletron\nDESCRIPTION: This commit updates the peer dependencies for the gatsby-plugin-styletron package. This update ensures compatibility with other packages in the Gatsby ecosystem. The update was released in version 8.0.0.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-styletron/CHANGELOG.md#_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\nChores\n\n- Update peerDeps [#36965](https://github.com/gatsbyjs/gatsby/issues/36965) ([b624442](https://github.com/gatsbyjs/gatsby/commit/b6244424fe8b724cbc23b80b2b4f5424cc2055a4))\n```\n\n----------------------------------------\n\nTITLE: Formatting Preload Fonts Plugin\nDESCRIPTION: This code snippet addresses code formatting issues within the gatsby-plugin-preload-fonts package. It uses prettier to ensure consistent code style and readability. This fix was introduced in version 1.0.28.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-preload-fonts/CHANGELOG.md#_snippet_9\n\nLANGUAGE: diff\nCODE:\n```\nprettier for gatsby-plugin-preload-fonts ([69d2632](https://github.com/gatsbyjs/gatsby/commit/69d2632))\n```\n\n----------------------------------------\n\nTITLE: Update Typescript dependency - Gatsby Telemetry\nDESCRIPTION: This commit updates the typescript dependency for the gatsby-telemetry package to version ^4.7.2.  Updating TypeScript ensures the package utilizes the latest language features and type checking improvements, potentially leading to more robust and maintainable code.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-telemetry/CHANGELOG.md#_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Bumping Babel Minor Version - Chore\nDESCRIPTION: This chore increments the minor version of the Babel dependency. This likely includes new features or improvements in Babel. The issue and commit are provided for reference.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-documentationjs/CHANGELOG.md#_snippet_9\n\nLANGUAGE: N/A\nCODE:\n```\nbump babel minor [#31857](https://github.com/gatsbyjs/gatsby/issues/31857) ([7d42e8d](https://github.com/gatsbyjs/gatsby/commit/7d42e8d866e46e9c39838d812d080d06433f7060))\n```\n\n----------------------------------------\n\nTITLE: Installing Gatsby CLI with npm\nDESCRIPTION: This command installs the Gatsby CLI (Command Line Interface) globally using npm.  It allows you to use gatsby commands from anywhere in your terminal.  The --global flag makes the CLI accessible system-wide.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/e2e-tests/contentful/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --global gatsby-cli\n```\n\n----------------------------------------\n\nTITLE: Enabling GraphQL Typegen in gatsby-config.js (JavaScript)\nDESCRIPTION: Demonstrates how to enable the GraphQL Typegen feature by setting the `graphqlTypegen` option to `true` in the `gatsby-config.js` file. This allows for improved type safety when working with GraphQL queries.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/v4.15/index.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  graphqlTypegen: true,\n}\n```\n\n----------------------------------------\n\nTITLE: Updating babel monorepo\nDESCRIPTION: This code snippet shows the update of the Babel monorepo within the gatsby-remark-embed-snippet package. This ensures compatibility with the latest Babel features and improves code transpilation.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-embed-snippet/CHANGELOG.md#_snippet_2\n\nLANGUAGE: none\nCODE:\n```\nupdate babel monorepo [#37568](https://github.com/gatsbyjs/gatsby/issues/37568) ([13a0a9e](https://github.com/gatsbyjs/gatsby/commit/13a0a9e83dcb015b65dff6b73cdd5dea09c2988f))\n```\n\n----------------------------------------\n\nTITLE: Configuring Gatsby plugins in gatsby-config.js\nDESCRIPTION: Adds the Gatsby Image, Sharp, and Transformer Sharp plugins to the gatsby-config.js file. This configuration enables Gatsby to process images using these plugins. It assumes a module.exports structure for the configuration file.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/images-and-media/using-gatsby-plugin-image.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-image`,\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`,\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Updating cross-env Dependency in Gatsby\nDESCRIPTION: This commit updates the cross-env dependency to version ^7.0.3 in the gatsby-plugin-page-creator. This update ensures compatibility with the latest Node.js versions and improves the reliability of environment variable handling across different platforms.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-page-creator/CHANGELOG.md#_snippet_25\n\nLANGUAGE: TEXT\nCODE:\n```\na819b9b\n```\n\n----------------------------------------\n\nTITLE: Modify Header Background Color (Blue) - JavaScript\nDESCRIPTION: This JavaScript snippet modifies the background color of the header component to blue (`#1f618d`). It is used in the `heading-variation` branch to create the second variation for the A/B test.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/testing/ab-testing-with-google-analytics-and-netlify.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n<header\n  style={{\n    background: `#1f618d`, // highlight-line\n    marginBottom: `1.45rem`,\n  }}\n>\n\n```\n\n----------------------------------------\n\nTITLE: Updating GraphQL Fragment for Root Query Type (Diff)\nDESCRIPTION: Demonstrates how to update GraphQL fragments when migrating to Gatsby V2 due to the change in the root query type name. It shows how to replace `RootQueryType` with `Query` in the fragment definition.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v1-to-v2.md#_snippet_26\n\nLANGUAGE: diff\nCODE:\n```\n  query Blog {\n    ...Sidebar\n    blogPosts {\n      title\n      slug\n    }\n  }\n\n- fragment Sidebar on RootQueryType {\n+ fragment Sidebar on Query {\n    siteDescription\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Gatsby for content directory\nDESCRIPTION: Example configuration for `gatsby-source-filesystem` to specify the `src/content` directory as a source for files.  This enables MDX files within that directory to be imported into JSX components.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/routing/mdx.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  plugins: [\n    // Your other plugins...\n    {\n      resolve: `gatsby-source-filesystem`,\n      options: {\n        name: `content`,\n        path: `${__dirname}/src/content`,\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Gatsby Site with Styled Components\nDESCRIPTION: These shell commands create a new Gatsby site using the hello-world starter and then navigate into the newly created directory. This sets up the basic project structure for integrating Styled Components.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/styling/styled-components.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngatsby new styled-components-tutorial https://github.com/gatsbyjs/gatsby-starter-hello-world\ncd styled-components-tutorial\n```\n\n----------------------------------------\n\nTITLE: Preventing Unnecessary File Downloads\nDESCRIPTION: This commit prevents the 'file download' activity from being shown if there are no files to download. This improves the user experience by reducing unnecessary logging and visual clutter during the build process.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-drupal/CHANGELOG.md#_snippet_18\n\n\n\n----------------------------------------\n\nTITLE: Bug fix for remark-custom-blocks\nDESCRIPTION: This code snippet addresses a bug by updating the remark-custom-blocks dependency. This ensures compatibility and fixes any issues in gatsby-remark-custom-blocks related to remark-custom-blocks.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-custom-blocks/CHANGELOG.md#_snippet_5\n\nLANGUAGE: Text\nCODE:\n```\nupdate dependency remark-custom-blocks to ^2.5.1 for gatsby-remark-custom-blocks [#32589](https://github.com/gatsbyjs/gatsby/issues/32589) ([7102eaa](https://github.com/gatsbyjs/gatsby/commit/7102eaa4b3d164d36b3bc234aca1babd61eb610c))\n```\n\n----------------------------------------\n\nTITLE: Updating Plugin Peer Dependencies (package.json)\nDESCRIPTION: Demonstrates how to update the `peerDependencies` section in a plugin's `package.json` file to ensure compatibility with Gatsby v4.  It shows the change needed if the plugin only supports Gatsby v4.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v3-to-v4.md#_snippet_20\n\nLANGUAGE: Diff\nCODE:\n```\n{\n  \"peerDependencies\": {\n-   \"gatsby\": \"^3.0.0\",\n+   \"gatsby\": \"^4.0.0\",\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Gatsby build with verbose and log pages flags\nDESCRIPTION: This command runs a Gatsby build with verbose output and logs the pages that were built or updated. It is helpful for identifying which pages are being regenerated during an incremental build.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/debugging-incremental-builds.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngatsby build --verbose --log-pages\n```\n\n----------------------------------------\n\nTITLE: Fix: Add dataLoaderOptions validation to gatsby-source-graphql\nDESCRIPTION: This snippet describes a bug fix in version 4.22.0 of the gatsby-source-graphql plugin. It adds validation for dataLoaderOptions within the plugin's configuration, improving configuration and error handling when setting up GraphQL data sources.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-graphql/CHANGELOG.md#_snippet_9\n\n\n\n----------------------------------------\n\nTITLE: Configure Gatsby Offline Plugin\nDESCRIPTION: This code snippet demonstrates how to configure the `gatsby-plugin-offline` in your `gatsby-config.js` file to enable offline support. The `gatsby-plugin-manifest` should be listed before `gatsby-plugin-offline`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/performance/add-offline-support-with-a-service-worker.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  plugins: [\n    {\n      resolve: `gatsby-plugin-manifest`,\n      options: {\n        ...\n      }\n    },\n    'gatsby-plugin-offline'\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Gatsby CLI Configuration File (JSON)\nDESCRIPTION: This JSON configuration file, located at `~/.config/gatsby/config.json`, stores settings for the Gatsby CLI, such as the default package manager.  It is automatically created by the CLI after the first time `gatsby new` is used.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/gatsby-cli.md#_snippet_11\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"cli\": {\n    \"packageManager\": \"yarn\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Self Hosted Path Option\nDESCRIPTION: This feature adds the ability to specify a self-hosted path for the Google Tag Manager script. This allows users to host the GTM script on their own server instead of relying on Google's CDN.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-google-tagmanager/CHANGELOG.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Theme Composition Example (JavaScript)\nDESCRIPTION: This snippet shows how a theme composition is represented as an array. In this example, 'gatsby-theme-tomato-portfolio' receives priority for component resolution because it is last in the array. The last theme in the array wins in component resolution.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/conceptual/how-shadowing-works.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst themesArray = [\n  \"gatsby-theme-parent\",\n  \"gatsby-theme-tomato-blog\",\n  \"gatsby-theme-tomato-portfolio\",\n]\n```\n\n----------------------------------------\n\nTITLE: Installing Gatsby CLI Globally (npm)\nDESCRIPTION: This command installs the Gatsby CLI globally using npm, allowing users to create and manage Gatsby projects from the command line. It also updates the CLI to the latest version if an older version is already installed.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-0/index.mdx#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nnpm install -g gatsby-cli\n```\n\n----------------------------------------\n\nTITLE: Running Gentics Mesh Demo Server with Docker\nDESCRIPTION: This command sets up a Gentics Mesh server in a Docker container, mapping port 8080 of the container to port 8080 on the host machine. This allows access to the Gentics Mesh UI and API via localhost.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/sourcing-from-gentics-mesh.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ndocker run -p 8080:8080 -d gentics/mesh-demo\n```\n\n----------------------------------------\n\nTITLE: Fix: Supporting Yarn PnP in gatsby-plugin-mdx\nDESCRIPTION: This code snippet implements support for Yarn Plug'n'Play (PnP) in `gatsby-plugin-mdx`. Yarn PnP changes how dependencies are resolved, and this fix ensures that the plugin works correctly in Yarn PnP environments.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-core-utils/CHANGELOG.md#_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Create ESLint Configuration File\nDESCRIPTION: This command creates an empty .eslintrc.js file in the root directory of the project.  This file will be used to configure ESLint rules and settings for the project. Creating this file signals to Gatsby that you want to customize ESLint.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/custom-configuration/eslint.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ntouch .eslintrc.js\n```\n\n----------------------------------------\n\nTITLE: Migrating from Request to Alternative Modules\nDESCRIPTION: This commit migrates away from the deprecated `request` library to alternative modules. The pull request is referenced by its GitHub issue number.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-dev-cli/CHANGELOG.md#_snippet_13\n\nLANGUAGE: Text\nCODE:\n```\nmigrate from request to alternative modules ([#26653](https://github.com/gatsbyjs/gatsby/issues/26653)) ([22c62ee](https://github.com/gatsbyjs/gatsby/commit/22c62ee9b57c4edb4108b2b734603d3fba68cc3d))\n```\n\n----------------------------------------\n\nTITLE: Updating README Instructions\nDESCRIPTION: This snippet updates the README file with improved instructions. The changes are aimed to improve user experience and make it easier for developers to use the package.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-mongodb/CHANGELOG.md#_snippet_6\n\nLANGUAGE: none\nCODE:\n```\nUpdate READMEs for better instructions ([0890a5c](https://github.com/gatsbyjs/gatsby/commit/0890a5cf2c881b49193113a1e1bd5fe13a2c328f))\n```\n\n----------------------------------------\n\nTITLE: Pushing Changes to Remote\nDESCRIPTION: This command pushes the changes from your local branch to your remote repository (typically `origin`). It uploads your commits, allowing others to view and review your changes in a pull request. The `head` specifies the current branch.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/contributing/how-to-open-a-pull-request.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngit push origin head\n```\n\n----------------------------------------\n\nTITLE: Removing __experimentalThemes from gatsby-config.js\nDESCRIPTION: This snippet demonstrates how to migrate Gatsby theme configuration from the deprecated `__experimentalThemes` key to the `plugins` array in `gatsby-config.js`. This change is necessary as the `__experimentalThemes` key has been removed in Gatsby v3.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v2-to-v3.md#_snippet_8\n\nLANGUAGE: JSX\nCODE:\n```\nmodule.exports = {\n- __experimentalThemes: [\"gatsby-theme-blog\"]\n+ plugins: [\"gatsby-theme-blog\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Updating sharp Dependency in gatsby-plugin-manifest\nDESCRIPTION: This code snippet showcases updating the sharp dependency to version ^0.23.1 in the gatsby-plugin-manifest. This ensures compatibility and access to the latest features and bug fixes provided by the sharp library. The update was implemented in commit f19ad3c.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-manifest/CHANGELOG.md#_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: GraphQL Query for Fluid Image Parameters\nDESCRIPTION: This GraphQL code demonstrates how to query for a fluid image with a specific maxWidth parameter. It uses the GatsbyImageSharpFluid fragment to retrieve the necessary fields for the Img component.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/built-in-components/gatsby-image.md#_snippet_5\n\nLANGUAGE: GraphQL\nCODE:\n```\nfile(relativePath: { eq: \"images/default.jpg\" }) {\n  childImageSharp {\n    // highlight-start\n    fluid(maxWidth: 400) {\n      ...GatsbyImageSharpFluid\n      // highlight-end\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Image Data with GraphQL\nDESCRIPTION: This GraphQL query retrieves image data using the `gatsbyImageData` resolver for a `heroImage` field within Contentful blog post nodes. It specifies `layout: FULL_WIDTH` for the image layout.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-contentful/README.md#_snippet_13\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  allContentfulBlogPost {\n    nodes {\n      heroImage {\n        gatsbyImageData(layout: FULL_WIDTH)\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying patches for v4\nDESCRIPTION: This snippet applies necessary patches for version 4 of the gatsby-plugin-google-gtag package. This addresses any compatibility issues or required updates when migrating to version 4.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-google-gtag/CHANGELOG.md#_snippet_14\n\n\n\n----------------------------------------\n\nTITLE: GraphQL regex filter escape sequences in Gatsby\nDESCRIPTION: This snippet demonstrates how to update backslash escape sequences in `regex` filters of GraphQL queries. In Gatsby v3, backslashes only need to be escaped once, whereas in v2, they needed to be escaped twice.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v2-to-v3.md#_snippet_24\n\nLANGUAGE: diff\nCODE:\n```\nconst query = {\n  allFile(\n    filter: {\n-      relativePath: { regex: \"/\\\\\\.png/\" }\n+      relativePath: { regex: \"/\\.png/\" }\n    }\n  ) {\n    nodes {\n      relativePath\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Schema Example (Incorrect)\nDESCRIPTION: This GraphQL schema example demonstrates a case where the `image` field is not properly configured to return subfields. This can occur if plugins are not added in the correct order or are missing, preventing the transformation of the `image` field.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/local-development/troubleshooting-common-errors.md#_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nallMdx {\n  nodes {\n    id\n    title\n    image\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Plugin Schema Testing Util and Associated Tests\nDESCRIPTION: This commit updates the plugin schema testing utility and associated tests in Gatsby. It addresses the issue reported in the provided GitHub issue link.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-sass/CHANGELOG.md#_snippet_3\n\nLANGUAGE: none\nCODE:\n```\n- Update plugin schema testing util and associated tests ([#27574](https://github.com/gatsbyjs/gatsby/issues/27574)) ([6d81283](https://github.com/gatsbyjs/gatsby/commit/6d81283e4f47ae2cb571626bf4d02fcd2c9d1af4))\n```\n\n----------------------------------------\n\nTITLE: Updating sharp dependency in gatsby-remark-images-contentful\nDESCRIPTION: This code snippet represents a chore where the sharp dependency was updated. This keeps the image processing library up-to-date, potentially improving performance and security.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-images-contentful/CHANGELOG.md#_snippet_14\n\nLANGUAGE: None\nCODE:\n```\nupdate sharp [#34120](https://github.com/gatsbyjs/gatsby/issues/34120) ([df36406](https://github.com/gatsbyjs/gatsby/commit/df3640679b5e161c4fd285b87ed32bb1224928b8))\n```\n\n----------------------------------------\n\nTITLE: Cloudinary Credentials in .env\nDESCRIPTION: This snippet shows how to store Cloudinary credentials in a .env file.  These credentials are used to authenticate with the Cloudinary API. It requires the dotenv module to be installed.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/images-and-media/using-cloudinary-image-service.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nCLOUDINARY_API_KEY=xxxxxxxxxxxxxx\nCLOUDINARY_API_SECRET=xxxxxxxxxxxxxxxxxxxx\nCLOUDINARY_CLOUD_NAME=xxxxx\n```\n\n----------------------------------------\n\nTITLE: Running tests in Gatsby repository\nDESCRIPTION: This command run all tests in the gatsby repository, to make sure that everything works as expected.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-design-tokens/README.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n# make sure tests are passing\nyarn test\n```\n\n----------------------------------------\n\nTITLE: JSON array with mixed levels\nDESCRIPTION: Example JSON array that contains a level and message.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-json/README.md#_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"level\": \"info\",\n    \"message\": \"hurray\"\n  },\n  {\n    \"level\": \"info\",\n    \"message\": \"it works\"\n  },\n  {\n    \"level\": \"warning\",\n    \"message\": \"look out\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Increasing Verdaccio Max Body Size\nDESCRIPTION: This commit increases the `max_body_size` for Verdaccio.  It resolves issues related to large package sizes. The pull request is referenced by its GitHub issue number.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-dev-cli/CHANGELOG.md#_snippet_15\n\nLANGUAGE: Text\nCODE:\n```\n**gatsby-dev-cli:** Increase verdaccio max_body_size ([#26339](https://github.com/gatsbyjs/gatsby/issues/26339)) ([da1caa6](https://github.com/gatsbyjs/gatsby/commit/da1caa6))\n```\n\n----------------------------------------\n\nTITLE: Adding selfHostedOrigin option\nDESCRIPTION: This snippet adds the selfHostedOrigin option to the gatsby-plugin-google-gtag plugin. This feature allows users to configure the origin for self-hosted gtag implementations.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-google-gtag/CHANGELOG.md#_snippet_13\n\n\n\n----------------------------------------\n\nTITLE: Install latest Gatsby version with legacy-peer-deps (Shell)\nDESCRIPTION: Installs the latest version of Gatsby using npm with the `--legacy-peer-deps` flag, which is needed for npm versions 7 and above to handle peer dependency conflicts during installation.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v4-to-v5.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install gatsby@latest --legacy-peer-deps\n```\n\n----------------------------------------\n\nTITLE: Navigating to the Gatsby Site Directory\nDESCRIPTION: This command changes the current directory to the newly created Gatsby site directory. The directory name (e.g., `my-gatsby-site`) should match the name chosen when initializing the Gatsby site. It requires the directory to exist.  The command doesn't produce any output, but changes the current working directory in the terminal.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/quick-start.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncd my-gatsby-site\n```\n\n----------------------------------------\n\nTITLE: Setting Gatsby CLI Options (Shell)\nDESCRIPTION: This command is used to set options for the Gatsby CLI. The example shown allows the user to change the package manager used for new projects.  The key is the option to change and the value is the new value for that option.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/gatsby-cli.md#_snippet_9\n\nLANGUAGE: Shell\nCODE:\n```\ngatsby options set [<key> <value>]\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Description Markdown\nDESCRIPTION: This Markdown snippet shows how to add a custom description to a Gatsby documentation page using the `description` frontmatter tag. This overrides the default description generated from the page excerpt. This snippet highlights setting the title and providing a custom description for the Gatsby Community Events page.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/contributing/docs-contributions/index.md#_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n---\ntitle: Gatsby Community Events\ndescription: Learn about other events happening around the globe to connect with other members of the Gatsby community\n---\n```\n\n----------------------------------------\n\nTITLE: Cypress Configuration File in TypeScript\nDESCRIPTION: This code defines the Cypress configuration file (cypress.config.ts). It sets the base URL for `cy.visit()` calls to `http://localhost:8000` and specifies the directory containing the end-to-end tests.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/testing/end-to-end-testing.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { defineConfig } from \"cypress\"\n\nexport default defineConfig({\n  e2e: {\n    baseUrl: `http://localhost:8000`,\n    specPattern: `cypress/e2e`\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Bug Fix: Mdx Type Definition Extension in gatsby-plugin-mdx\nDESCRIPTION: This commit fixes an issue in the gatsby-plugin-mdx plugin where the childOf extension was not properly set for the Mdx type definition. By setting the childOf extension, the plugin correctly establishes the relationship between MDX nodes and their parent nodes. This fix resolves a type definition issue related to MDX nodes within the Gatsby GraphQL schema.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-mdx/CHANGELOG.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n49c0929\n```\n\n----------------------------------------\n\nTITLE: Amending the Previous Commit\nDESCRIPTION: This command amends the most recent commit in Git, allowing you to add changes to it or modify the commit message. It's useful for correcting mistakes or adding missing information to the previous commit before pushing your changes. Any linting changes are added to the previous commit.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/contributing/how-to-open-a-pull-request.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngit commit --amend\n```\n\n----------------------------------------\n\nTITLE: Fixing Markdown Regeneration on Image Changes\nDESCRIPTION: This commit addresses an issue where Markdown content was not regenerated when the images it used were changed. The fix ensures that the gatsby-transformer-remark plugin correctly updates the generated content whenever an associated image is modified.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-remark/CHANGELOG.md#_snippet_1\n\nLANGUAGE: None\nCODE:\n```\nregenerate markdown when used image changes [#34433](https://github.com/gatsbyjs/gatsby/issues/34433) ([3954944](https://github.com/gatsbyjs/gatsby/commit/3954944f70be205ff8202f26288263ba8db80730))\n```\n\n----------------------------------------\n\nTITLE: Embed snippets in Markdown Markdown\nDESCRIPTION: Demonstrates the syntax for embedding code snippets within a Markdown file. The `embed:filename` syntax is used to reference the file to embed, and the plugin replaces this with the file's contents.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-embed-snippet/README.md#_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n# Sample JavaScript\n\n`embed:javascript-code.js`\n\n# Sample HTML\n\n`embed:html-code.html`\n```\n\n----------------------------------------\n\nTITLE: Enabling Node Mutation Detection in Gatsby\nDESCRIPTION: This snippet shows how to enable diagnostic mode in Gatsby to detect node mutations, which can cause data inconsistencies when using the LMDB datastore. It demonstrates setting the `GATSBY_DETECT_NODE_MUTATIONS` environment variable to `1` during the `gatsby build` command.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/local-development/debugging-missing-data.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nGATSBY_DETECT_NODE_MUTATIONS=1 gatsby build\n```\n\n----------------------------------------\n\nTITLE: Update Typescript dependency - Gatsby Telemetry\nDESCRIPTION: This commit updates the typescript dependency for the gatsby-telemetry package to version ^4.5.4. This update integrates the latest type-checking features, bug fixes, and performance improvements from TypeScript into the telemetry package.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-telemetry/CHANGELOG.md#_snippet_8\n\n\n\n----------------------------------------\n\nTITLE: Using gatsby-highlight class for line number calculation\nDESCRIPTION: This commit modifies the gatsby-remark-prismjs plugin to utilize the `gatsby-highlight` class for calculating line numbers. This change ensures more accurate and reliable line number display in code blocks highlighted with Prism.js.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-prismjs/CHANGELOG.md#_snippet_13\n\n\n\n----------------------------------------\n\nTITLE: Fix Cheerio Version in gatsby-remark-graphviz\nDESCRIPTION: This commit pins the version of the `cheerio` dependency to address a bug. It ensures that a specific version of Cheerio is used to avoid potential issues in parsing or processing HTML content, particularly within the `gatsby-remark-graphviz` plugin.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-graphviz/CHANGELOG.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Skip Prefetching All Resources in Gatsby Offline Plugin (JavaScript)\nDESCRIPTION: This bug fix addresses an issue where the gatsby-plugin-offline was prefetching all resources, which could lead to performance problems. The fix skips prefetching all resources to improve initial load time.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-offline/CHANGELOG.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nskip prefetching all resources\n```\n\n----------------------------------------\n\nTITLE: Initialize Error Map in onPluginInit in TypeScript\nDESCRIPTION: Imports `ERROR_CODES` and initializes the error map using `reporter.setErrorMap({})` in the `onPluginInit` Gatsby Node API. This prepares the plugin for defining and reporting custom errors.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/creating-a-source-plugin/part-4/index.mdx#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { GatsbyNode } from \"gatsby\"\nimport { ERROR_CODES } from \"./constants\"\n\nexport const onPluginInit: GatsbyNode[`onPluginInit`] = ({ reporter }) => {\n  reporter.setErrorMap({})\n}\n```\n\n----------------------------------------\n\nTITLE: Deprecation: Replacing nodeModel.getAllNodes with nodeModel.findAll\nDESCRIPTION: This JavaScript code shows how to replace the deprecated `nodeModel.getAllNodes` with `nodeModel.findAll`. It also demonstrates how to restrict the number of fetched nodes using the `limit` option.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v3-to-v4.md#_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n// replace:\nconst entries = nodeModel.getAllNodes(`MyType`)\n\n// with\nconst { entries } = await nodeModel.findAll({ type: `MyType` })\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst { entries } = await nodeModel.findAll({\n  type: `MyType`,\n  query: { limit: 20 },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring typeName option\nDESCRIPTION: Shows how to configure the `typeName` option to override the default naming convention for the GraphQL node types. This example shows setting a static string value.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-yaml/README.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-transformer-yaml`,\n      options: {\n        typeName: `Yaml`, // a fixed string\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Vertical Theme Composition\nDESCRIPTION: Illustrates how a child theme declares a parent theme in its gatsby-config.js file using the plugins array. This establishes a parent/child relationship where the child theme can override or extend the functionality of the parent theme.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/theme-api.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  plugins: [`gatsby-theme-parent`],\n}\n```\n\n----------------------------------------\n\nTITLE: Example terminal error message\nDESCRIPTION: This shows the kind of error message output to the terminal when using `panicOnBuild` with a GraphQL error.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/creating-a-source-plugin/part-4/index.mdx#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nERROR  UNKNOWN\n\nCannot query field \"title2\" on type \"Post\". Did you mean \"title\"?\n```\n\n----------------------------------------\n\nTITLE: Fix: Normalize filename for hashing in gatsby-plugin-image\nDESCRIPTION: This snippet normalizes the filename before hashing, ensuring correct and consistent hashing behavior. This fix is applied to the gatsby-plugin-image.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-image/CHANGELOG.md#_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\nNormalize filename for correct hashing [#37262](https://github.com/gatsbyjs/gatsby/issues/37262) ([397fa3f](https://github.com/gatsbyjs/gatsby/commit/397fa3fc605b5e053fa3b3804e39621734dc79d3))\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nNormalize filename for correct hashing [#37262](https://github.com/gatsbyjs/gatsby/issues/37262) [#37263](https://github.com/gatsbyjs/gatsby/issues/37263) ([b7477f4](https://github.com/gatsbyjs/gatsby/commit/b7477f4cb680d60ee0d88e22a71937194764a9af))\n```\n\n----------------------------------------\n\nTITLE: Bumping Babel Minor Version\nDESCRIPTION: This commit bumps the minor version of the Babel dependency. This often includes new features and bug fixes from the Babel project, enhancing the performance and capabilities of gatsby-transformer-yaml.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-yaml/CHANGELOG.md#_snippet_5\n\nLANGUAGE: \nCODE:\n```\nbump babel minor [#31857](https://github.com/gatsbyjs/gatsby/issues/31857) ([7d42e8d](https://github.com/gatsbyjs/gatsby/commit/7d42e8d866e46e9c39838d812d080d06433f7060))\n```\n\nLANGUAGE: \nCODE:\n```\nbump babel minor [#31857](https://github.com/gatsbyjs/gatsby/issues/31857) [#31859](https://github.com/gatsbyjs/gatsby/issues/31859) ([8636025](https://github.com/gatsbyjs/gatsby/commit/863602567930a39142ed33d9d1f1813b7dec8686))\n```\n\n----------------------------------------\n\nTITLE: Fix: Dependency Update for bluebird in gatsby-transformer-csv\nDESCRIPTION: This commit updates the bluebird dependency to version ^3.5.5 in the gatsby-transformer-csv package.  Updating the dependency can address potential bugs or security vulnerabilities associated with older versions of the bluebird library.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-csv/CHANGELOG.md#_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\nupdate dependency bluebird to ^3.5.5 ([#16825](https://github.com/gatsbyjs/gatsby/issues/16825)) ([ec0be83](https://github.com/gatsbyjs/gatsby/commit/ec0be83))\n```\n\n----------------------------------------\n\nTITLE: Set Path Prefix in gatsby-config.js\nDESCRIPTION: This snippet configures the `pathPrefix` option in `gatsby-config.js`. This is required when deploying to GitLab Pages without a custom domain. Replace `/examplerepository` with the actual project name in your GitLab repository.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/previews-deploys-hosting/deploying-to-gitlab-pages.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  pathPrefix: `/examplerepository`,\n}\n```\n\n----------------------------------------\n\nTITLE: Verify Node.js and npm Versions\nDESCRIPTION: These commands check the installed versions of Node.js and npm (Node Package Manager).  They are used to verify that Node.js and npm have been installed correctly and that the desired versions are active. The expected output is the version number of each tool.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-0/index.mdx#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nnode --version\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm --version\n```\n\n----------------------------------------\n\nTITLE: Run benchmark with yarn and NUM_PAGES\nDESCRIPTION: This command runs the benchmark using yarn, setting the `NUM_PAGES` environment variable to 2000. This configures the benchmark to create 2000 pages. The `bench` script is assumed to be defined in `package.json` to execute the benchmark.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/benchmarks/create-pages/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nNUM_PAGES=2000 yarn bench\n```\n\n----------------------------------------\n\nTITLE: Fixing Babel Monorepo in gatsby-transformer-excel\nDESCRIPTION: This code snippet represents a bug fix within the `gatsby-transformer-excel` package, specifically addressing an issue related to the Babel monorepo. It updates the Babel dependencies to resolve the identified problem.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-excel/CHANGELOG.md#_snippet_0\n\nLANGUAGE: Patch\nCODE:\n```\nupdate babel monorepo [#37568](https://github.com/gatsbyjs/gatsby/issues/37568) ([13a0a9e](https://github.com/gatsbyjs/gatsby/commit/13a0a9e83dcb015b65dff6b73cdd5dea09c2988f))\n```\n\n----------------------------------------\n\nTITLE: Get Gatsby environment information\nDESCRIPTION: This command provides helpful environment information that is often required when reporting bugs or issues with Gatsby.  It includes details about your Gatsby version, Node.js version, and other relevant system information.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/cheat-sheet.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngatsby info\n```\n\n----------------------------------------\n\nTITLE: Applying patches for v4 Gatsby release\nDESCRIPTION: This commit applies necessary patches to ensure compatibility with version 4 of Gatsby. These patches address any breaking changes or API updates introduced in Gatsby v4, guaranteeing that `gatsby-remark-code-repls` functions correctly within the new Gatsby environment.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-code-repls/CHANGELOG.md#_snippet_11\n\n\n\n----------------------------------------\n\nTITLE: Deploy script for pathPrefix deployment in package.json\nDESCRIPTION: This JSON snippet configures the deploy script in package.json to build the Gatsby site with the path prefix and then publish the `public` directory to the `gh-pages` branch using the gh-pages package.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/previews-deploys-hosting/how-gatsby-works-with-github-pages.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"scripts\": {\n    \"deploy\": \"gatsby build --prefix-paths && gh-pages -d public\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Chore: Format changelog files\nDESCRIPTION: This chore formats the changelog files to improve readability and consistency. This ensures the changelog follows a standardized format.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-google-tagmanager/CHANGELOG.md#_snippet_8\n\nLANGUAGE: None\nCODE:\n```\nFormat changelog files ([088f23b](https://github.com/gatsbyjs/gatsby/commit/088f23b084b67f746a383e06e9216cef83270317))\n```\n\n----------------------------------------\n\nTITLE: Install Dependencies using npm\nDESCRIPTION: This command installs the project's dependencies using npm. It ensures that all required packages are available for the Gatsby project to function correctly.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/using-gatsby-script/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Installing NVM\nDESCRIPTION: This snippet downloads and installs Node Version Manager (NVM) using cURL. NVM allows managing multiple active Node.js versions. It downloads the installation script and executes it with bash.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/local-development/gatsby-on-linux.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash\n```\n\n----------------------------------------\n\nTITLE: Custom Resolver Example\nDESCRIPTION: Illustrates a custom GraphQL resolver for the 'b' field, demonstrating how Gatsby materializes values before adding them to the index. The resolver joins array elements with a hyphen.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby/src/datastore/lmdb/query/README.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexports.createResolvers = ({ createResolvers }) => {\n  createResolvers({\n    A: {\n      b: source => source.join(`-`),\n    },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Plugin Version in package.json (JSON)\nDESCRIPTION: This snippet shows how to set the initial version of a Gatsby plugin to 1.0.0 in the package.json file, following semantic versioning guidelines. It's crucial for managing updates and compatibility.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/creating-a-source-plugin/part-8/index.mdx#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"version\": \"1.0.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying packages to link\nDESCRIPTION: Links only the specified packages (gatsby and gatsby-transformer-remark in this example) from the cloned Gatsby repository to the current project. This prevents the tool from automatically scanning for dependencies. Allows selective linking.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-dev-cli/README.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\ngatsby-dev --packages gatsby gatsby-transformer-remark\n```\n\n----------------------------------------\n\nTITLE: Install Node.js with Homebrew (macOS)\nDESCRIPTION: This command installs Node.js on macOS using the Homebrew package manager. Node.js is a JavaScript runtime environment required for running Gatsby. The command downloads and installs the latest version of Node.js available through Homebrew.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-0/index.mdx#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nbrew install node\n```\n\n----------------------------------------\n\nTITLE: Query all Content Nodes (GraphQL)\nDESCRIPTION: This GraphQL query fetches all content nodes from WordPress, including their ID, URI, and `__typename`. This enables conditional template rendering based on the content type.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-wordpress/docs/tutorials/querying-data.md#_snippet_13\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  allWpContentNode {\n    nodes {\n      id\n      uri\n      __typename\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Fragments\nDESCRIPTION: This example demonstrates the usage of fragments in GraphQL.  A fragment `fragName` is defined to select the site metadata title, and then it's used within a query on the `site` object using the spread operator `...fragName`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/graphql-reference/content/queries.md#_snippet_10\n\nLANGUAGE: graphql\nCODE:\n```\nfragment fragName on Site {\n  siteMetadata {\n    title\n  }\n}\n```\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  site {\n    ...fragName\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Start Gatsby project (Shell)\nDESCRIPTION: This code snippet shows how to use the Gatsby CLI to start a new project using a specific starter. The `gatsby new` command creates a new project directory and downloads the specified starter project from GitHub.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v1-to-v2.md#_snippet_39\n\nLANGUAGE: Shell\nCODE:\n```\ngatsby new my-default-project https://github.com/gatsbyjs/gatsby-starter-default\n```\n\nLANGUAGE: Shell\nCODE:\n```\ngatsby new my-hello-world https://github.com/gatsbyjs/gatsby-starter-hello-world\n```\n\nLANGUAGE: Shell\nCODE:\n```\ngatsby new my-blog https://github.com/gatsbyjs/gatsby-starter-blog\n```\n\n----------------------------------------\n\nTITLE: Installing Gatsby Plugin for Netlify CMS\nDESCRIPTION: Installs the `netlify-cms-app` and `gatsby-plugin-netlify-cms` packages using npm. This command is executed within the Gatsby project directory to add the necessary dependencies for Netlify CMS integration.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/sourcing-data/sourcing-from-netlify-cms.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd netlify-cms-tutorial && npm install netlify-cms-app gatsby-plugin-netlify-cms\n```\n\n----------------------------------------\n\nTITLE: Exposing LMDB Cache Functionality in gatsby-plugin-sharp\nDESCRIPTION: This snippet details a bug fix that exposes the \".del\" function on the LMDB cache within the gatsby-plugin-sharp plugin. This allows for more direct management of the cache, potentially improving performance or resolving caching issues.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-sharp/CHANGELOG.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Updating ESLint Configuration\nDESCRIPTION: This chore updates the ESLint configuration to address linting issues. It aims to improve code quality and maintainability by enforcing consistent coding standards.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-javascript-static-exports/CHANGELOG.md#_snippet_8\n\nLANGUAGE: None\nCODE:\n```\nupdate eslint to fix linting issues fix [#29988](https://github.com/gatsbyjs/gatsby/issues/29988) ([5636389](https://github.com/gatsbyjs/gatsby/commit/5636389e8fa626c644e90abc14589e9961d98c68))\n```\n\n----------------------------------------\n\nTITLE: Upgrading Jest\nDESCRIPTION: This commit upgrades the Jest testing framework to the latest version. The upgrade includes improvements in performance, stability, and new features for writing and running tests.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-twitter/CHANGELOG.md#_snippet_7\n\nLANGUAGE: TEXT\nCODE:\n```\nupgrade jest [#33277](https://github.com/gatsbyjs/gatsby/issues/33277) ([34cb202](https://github.com/gatsbyjs/gatsby/commit/34cb202d9c8c202f082edb03c4cc1815eb81abe1))\n```\n\n----------------------------------------\n\nTITLE: Enabling node-modules plugin in Yarn\nDESCRIPTION: This snippet enables the `node-modules` plugin in Yarn to resolve compatibility issues in Plug'n'Play environments. It configures Yarn to use the traditional `node_modules` structure.  It requires a `.yarnrc.yml` file in the project's root.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/cloud/monorepos.md#_snippet_0\n\nLANGUAGE: yml\nCODE:\n```\nnodeLinker: node-modules\n```\n\n----------------------------------------\n\nTITLE: Setting Default Package Manager to Yarn (Shell)\nDESCRIPTION: This command sets the default package manager used by `gatsby new` to Yarn. Subsequent calls to `gatsby new` will use Yarn unless overridden. This provides a way to configure Gatsby to use a preferred package manager automatically.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/gatsby-cli.md#_snippet_10\n\nLANGUAGE: Shell\nCODE:\n```\ngatsby options set package-manager yarn\n```\n\n----------------------------------------\n\nTITLE: Update dependency cross-env\nDESCRIPTION: This snippet showcases a chore update for the cross-env dependency within the gatsby-plugin-react-css-modules package. It updates the dependency to version ^7.0.3 to resolve issues or improve compatibility.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-react-css-modules/CHANGELOG.md#_snippet_4\n\nLANGUAGE: Chores\nCODE:\n```\n- update dependency cross-env to ^7.0.3 [#28505](https://github.com/gatsbyjs/gatsby/issues/28505) ([a819b9b](https://github.com/gatsbyjs/gatsby/commit/a819b9bfb663139f7b06c3ed7d6d6069a2382b2c))\n```\n\n----------------------------------------\n\nTITLE: Install gatsby-source-filesystem\nDESCRIPTION: Installs the `gatsby-source-filesystem` plugin to read files into Gatsby from the file system. This plugin allows Gatsby to create `File` nodes in its GraphQL data layer, making the files available for querying.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/routing/adding-markdown-pages.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install gatsby-source-filesystem\n```\n\n----------------------------------------\n\nTITLE: Re-exporting Gatsby Head from another file (JSX)\nDESCRIPTION: This snippet illustrates how to re-export the `Head` function from another file. This allows for modularity and reuse of head configurations across different pages.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/built-in-components/gatsby-head.md#_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\nimport * as React from \"react\"\n\nconst Page = () => <div>Hello World</div>\nexport default Page\n\n// highlight-next-line\nexport { Head } from \"../another/location\"\n```\n\n----------------------------------------\n\nTITLE: Fixing Gatsby CLI Dependency\nDESCRIPTION: This commit addresses an issue with the gatsby-cli dependency in source-filesystem & plugin-sharp. The fix ensures the plugin correctly resolves and uses the gatsby-cli, resolving potential build errors or unexpected behavior.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-drupal/CHANGELOG.md#_snippet_22\n\n\n\n----------------------------------------\n\nTITLE: Typography.js Plugin Config Changes (Diff)\nDESCRIPTION: Explains the changes needed in `gatsby-plugin-typography` configuration.  It requires you to explicitly export `scale` and `rhythm` as named exports from your typography config module.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v1-to-v2.md#_snippet_27\n\nLANGUAGE: diff\nCODE:\n```\n- const typography = new Typography();\n- export default typography;\n\n+ const typography = new Typography();\n+ const { rhythm, scale } = typography;\n+ export { rhythm, scale, typography as default };\n```\n\n----------------------------------------\n\nTITLE: Specifying Gatsby peer dependencies in package.json (JSON)\nDESCRIPTION: This snippet demonstrates how to specify the Gatsby version range that the adapter is compatible with in the package.json file.  This ensures that users install compatible versions of Gatsby and the adapter.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/previews-deploys-hosting/creating-an-adapter.md#_snippet_7\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"peerDependencies\": {\n    \"gatsby\": \"^5.0.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Install Certutil on Debian/Ubuntu\nDESCRIPTION: This command installs the `certutil` utility on Debian-based Linux distributions (like Ubuntu) using `apt`. Certutil is required for updating the trust store for browsers like Firefox and Chrome.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/local-https.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nsudo apt install libnss3-tools\n```\n\n----------------------------------------\n\nTITLE: Sample Gatsby Config - JavaScript\nDESCRIPTION: Example of a Gatsby config file showing how to configure a plugin with options. The options are passed to the plugin when it is resolved in the `gatsby-config.js` file. These options can be used to configure how the plugin operates.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/creating-a-source-plugin/part-4/index.mdx#_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-console-log`,\n      options: { message: \"Hello world\" },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Magic JS Detection in Gatsby Offline Plugin (JavaScript)\nDESCRIPTION: This feature implements \"magic\" JavaScript detection to ensure sites function correctly even when JavaScript is retroactively disabled. It enhances the offline experience by handling cases where JavaScript is not available.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-offline/CHANGELOG.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n\"Magic\" JS detection to make sites function correctly when JS is disabled retroactively\n```\n\n----------------------------------------\n\nTITLE: Building a Gatsby site with a path prefix\nDESCRIPTION: These shell commands show how to build a Gatsby application with the `--prefix-paths` flag or the `PREFIX_PATHS` environment variable. This ensures that the `pathPrefix` defined in `gatsby-config.js` is applied during the build process.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/previews-deploys-hosting/path-prefix.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ngatsby build --prefix-paths\n```\n\n----------------------------------------\n\nTITLE: Install dependencies and start Gatsby development server\nDESCRIPTION: This snippet installs the necessary npm packages and starts the Gatsby development server. It assumes you are in the `examples/functions-google-oauth` directory. The Gatsby server runs on http://localhost:8000 by default.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/functions-google-oauth/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncd examples/functions-google-oauth\nnpm install\nnpm run develop\n```\n\n----------------------------------------\n\nTITLE: Stabilizing unstable_shouldOnCreateNode JavaScript\nDESCRIPTION: This code snippet relates to stabilizing the `unstable_shouldOnCreateNode` API. The change addresses issue #36516. The associated commit is 90f9ab47593ba7458fc5bc677c4b0282b30808c8.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-javascript-frontmatter/CHANGELOG.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nmake unstable_shouldOnCreateNode stable [#36516](https://github.com/gatsbyjs/gatsby/issues/36516) ([90f9ab4](https://github.com/gatsbyjs/gatsby/commit/90f9ab47593ba7458fc5bc677c4b0282b30808c8))\n```\n\n----------------------------------------\n\nTITLE: Only string `to` allowed in Link (JSX)\nDESCRIPTION: This code snippet shows how to migrate from object form of the `to` prop in the `<Link>` component in React Router to string form in @reach/router.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v1-to-v2.md#_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n- <Link to={{ pathname: `/about/`, search: `fun=true&pizza=false`, hash: `people`}}>Our people</Link>\n+ <Link to={`/about/?fun=true&pizza=false#people`}>Our people</Link>\n```\n\n----------------------------------------\n\nTITLE: Create Schema Customization with Markdown Field\nDESCRIPTION: This code shows how to use the `md` field extension defined in the previous snippet to transform the `content` field of a `BlogPost` type from Markdown to HTML.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/graphql-data-layer/schema-customization.md#_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nexports.createSchemaCustomization = ({ actions }) => {\n  actions.createTypes(`\n    type BlogPost implements Node {\n      content: String @md\n    }\n  `)\n}\n```\n\n----------------------------------------\n\nTITLE: Updating a Post with GraphQL Mutation\nDESCRIPTION: This GraphQL mutation updates the `description` field of a post with a given `id`. Replace `post-id` with a valid post ID retrieved from a query. Requires the API to be running and accessible.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/creating-source-plugins/README.md#_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nmutation {\n  updatePost(id: \"post-id\", description: \"Some data!\") {\n    id\n    slug\n    description\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Run Gatsby with Jaeger Configuration\nDESCRIPTION: This command runs the Gatsby build process with tracing enabled, using the Jaeger configuration file.  The `--open-tracing-config-file` argument specifies the path to the Jaeger configuration file, which tells Gatsby where to send tracing data.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/performance-tracing.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\ngatsby build --open-tracing-config-file node_modules/gatsby/dist/utils/tracer/jaeger-local.js\n```\n\n----------------------------------------\n\nTITLE: Enable RichText for all users\nDESCRIPTION: This code snippet enables the RichText feature for all users of gatsby-source-contentful. RichText support allows for more complex and styled content to be fetched and rendered from Contentful.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-contentful/CHANGELOG.md#_snippet_29\n\nLANGUAGE: diff\nCODE:\n```\n([#10301](https://github.com/gatsbyjs/gatsby/issues/10301)) ([ce65534](https://github.com/gatsbyjs/gatsby/commit/ce65534))\n```\n\n----------------------------------------\n\nTITLE: Install Gatsby v4 using npm with legacy peer deps\nDESCRIPTION: Installs the latest version of Gatsby using npm. The `--legacy-peer-deps` flag is used specifically when using npm version 7 or higher to avoid peer dependency resolution errors during the installation process.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v3-to-v4.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install gatsby@latest --legacy-peer-deps\n```\n\n----------------------------------------\n\nTITLE: Installing gatsby-plugin-nprogress using npm\nDESCRIPTION: This command installs the gatsby-plugin-nprogress package from npm, adding it as a dependency to your Gatsby project.  This allows you to use the plugin to display a progress bar during page transitions.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-nprogress/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install gatsby-plugin-nprogress\n```\n\n----------------------------------------\n\nTITLE: Updating Chalk Dependency to ^2.4.2 - JavaScript\nDESCRIPTION: This snippet updates the `chalk` dependency to version ^2.4.2. Chalk is a library for adding color to console output.  This update might include fixes or enhancements related to console messaging in the `gatsby-source-contentful` plugin.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-contentful/CHANGELOG.md#_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n3c89607\n```\n\n----------------------------------------\n\nTITLE: Adding gatsby-source-filesystem Dependency\nDESCRIPTION: This code snippet adds gatsby-source-filesystem as a dependency for gatsby-source-contentful. This ensures that necessary filesystem functionalities are available for the contentful source plugin to operate correctly.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-contentful/CHANGELOG.md#_snippet_25\n\nLANGUAGE: diff\nCODE:\n```\n([#12612](https://github.com/gatsbyjs/gatsby/issues/12612)) ([0e6d7a1](https://github.com/gatsbyjs/gatsby/commit/0e6d7a1))\n```\n\n----------------------------------------\n\nTITLE: Updating Vulnerable Packages and Peer Dependencies\nDESCRIPTION: This commit updates vulnerable packages and includes React 17 in peerDependencies. It addresses security concerns and ensures compatibility with React 17.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-typography/CHANGELOG.md#_snippet_2\n\nLANGUAGE: None\nCODE:\n```\nupdate vulnerable packages, include React 17 in peerDeps [#28545](https://github.com/gatsbyjs/gatsby/issues/28545) ([18b5f30](https://github.com/gatsbyjs/gatsby/commit/18b5f30e367895aa5f3af46e4989b347912a0f35))\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response from GraphQL Query\nDESCRIPTION: This JSON represents the expected output from the example GraphQL query.  It shows the structure of the response, with the title nested within the `site` and `siteMetadata` fields. It directly corresponds to the structure defined in the query.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/graphql.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"site\": {\n    \"siteMetadata\": {\n      \"title\": \"A Gatsby site!\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Blog Theme Base Path\nDESCRIPTION: This JavaScript code snippet configures the `gatsby-theme-blog` plugin to use the root path (`/`) as the base path for blog posts, effectively making the blog the homepage.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/using-multiple-themes-together.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n      resolve: `gatsby-theme-blog`,\n      options: {\n        // basePath defaults to `/` so this could also be included without options as just `gatsby-theme-blog`,\n        basePath: `/`,\n      },\n    },\n```\n\n----------------------------------------\n\nTITLE: Defining keywords for the adapter in package.json (JSON)\nDESCRIPTION: This snippet illustrates how to define keywords in the adapter's package.json to improve discoverability in the plugin library.  The keywords should include 'gatsby', 'gatsby-plugin', and 'gatsby-adapter'.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/previews-deploys-hosting/creating-an-adapter.md#_snippet_6\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"keywords\": [\n    \"gatsby\",\n    \"gatsby-plugin\",\n    \"gatsby-adapter\"\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Run Gatsby with Zipkin Configuration\nDESCRIPTION: This command runs the Gatsby build process with tracing enabled using the Zipkin configuration file. The `--open-tracing-config-file` argument specifies the path to the Zipkin configuration file, which tells Gatsby where to send tracing data.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/performance-tracing.md#_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\ngatsby build --open-tracing-config-file node_modules/gatsby/dist/utils/tracer/zipkin-local.js\n```\n\n----------------------------------------\n\nTITLE: Export Wrap Page Element from Shared Component (Browser)\nDESCRIPTION: This snippet exports the `wrapPageElement` function from the shared component in `gatsby-browser.js`. This allows Gatsby to use the component in the browser environment, ensuring the script is also included on client-side navigation.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/built-in-components/gatsby-script.md#_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\nexport { wrapPageElement } from \"./gatsby-shared\"\n```\n\n----------------------------------------\n\nTITLE: Improve JS Detection Reliability in Gatsby Offline Plugin (JavaScript)\nDESCRIPTION: This bug fix improves the reliability of JavaScript detection in the gatsby-plugin-offline plugin. This ensures that the plugin can accurately determine whether JavaScript is enabled or disabled, and adjust its behavior accordingly.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-offline/CHANGELOG.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nImprove reliability of JS detection\n```\n\n----------------------------------------\n\nTITLE: Getting Help with Gatsby CLI Commands\nDESCRIPTION: This command displays a list of available commands and options for the Gatsby CLI. It provides helpful information for users who want to learn more about the CLI's capabilities.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-0/index.mdx#_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\ngatsby --help\n```\n\n----------------------------------------\n\nTITLE: Apply Patches for v5 - JavaScript\nDESCRIPTION: This commit applies patches specifically for version 5 of the gatsby-plugin-subfont.  It addresses compatibility issues and ensures smooth integration during the major version update.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-subfont/CHANGELOG.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\napply patches for v5 [#36796](https://github.com/gatsbyjs/gatsby/issues/36796) ([25f79b6](https://github.com/gatsbyjs/gatsby/commit/25f79b6c3719fdf09584ade620a05c66ba2a697c))\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query for Custom AsciiDoc Attributes (GraphQL)\nDESCRIPTION: A GraphQL query to retrieve custom attributes defined in the AsciiDoc file.  These attributes are prefixed with `page-` in the AsciiDoc content and are available under the `pageAttributes` field in the GraphQL query.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-asciidoc/README.md#_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  allAsciidoc {\n    edges {\n      node {\n        pageAttributes {\n          title\n          path\n          category\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Use onPluginInit for reporter.setErrorMap\nDESCRIPTION: Demonstrates how to use the `onPluginInit` API for the `reporter.setErrorMap` function.  The function must be run inside `onPluginInit` instead of `onPreInit` for Gatsby v4 compatibility.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v3-to-v4.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst ERROR_MAP = {\n  10000: {\n    text: context => context.sourceMessage,\n    level: \"ERROR\",\n    category: \"SYSTEM\",\n  },\n}\n\nexports.onPluginInit = ({ reporter }) => {\n  reporter.setErrorMap(ERROR_MAP)\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Gatsby Page Creator Plugin\nDESCRIPTION: This shell command installs the `gatsby-plugin-page-creator` as a dependency for a Gatsby theme. This plugin is required to allow the theme to source pages from a directory other than the default `src/pages` directory.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/plugins-and-themes/converting-a-starter.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install gatsby-plugin-page-creator\n```\n\n----------------------------------------\n\nTITLE: Installing Gatsby CLI\nDESCRIPTION: Installs the Gatsby command-line interface (CLI) globally using npm. This allows you to create and manage Gatsby projects from your terminal. It requires Node.js and npm to be installed on your system.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/e2e-tests/production-runtime/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --global gatsby-cli\n```\n\n----------------------------------------\n\nTITLE: Run Gatsby Development Server (Shell)\nDESCRIPTION: This command starts the Gatsby development server, which builds the site and serves it locally. This allows you to preview the Gatsby site during development. It requires Gatsby to be installed as a dependency.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/starters/gatsby-starter-theme-workspace/gatsby-theme-minimal/README.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nyarn gatsby develop\n```\n\n----------------------------------------\n\nTITLE: Querying HJSON data\nDESCRIPTION: This GraphQL query demonstrates how to retrieve data from HJSON files using `allLettersJson`. It fetches all nodes of type `LettersJson` and retrieves the `value` field from each node.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-hjson/README.md#_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  allLettersJson {\n    edges {\n      node {\n        value\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL query after codemod (GraphQL)\nDESCRIPTION: Example of a GraphQL query using the new syntax for sorting, which uses nested input objects. This syntax is required by Gatsby 5.  The `gatsby-codemods` tool automates this transformation.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v4-to-v5.md#_snippet_10\n\nLANGUAGE: GraphQL\nCODE:\n```\n{\n  allMarkdownRemark(sort: { frontmatter: { date: DESC } }) {\n    nodes {\n      ...fields\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running benchmark with yarn\nDESCRIPTION: This snippet shows how to run the image processing benchmark using yarn, setting a custom number of pages via the `NUM_PAGES` environment variable. This allows for easily varying the workload on the image processing pipeline.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/benchmarks/image-processing/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nNUM_PAGES=2000 yarn bench\n```\n\n----------------------------------------\n\nTITLE: Bug Fix: Package Updates in Gatsby Plugin Sass\nDESCRIPTION: This commit updates minor packages in gatsby-plugin-sass, excluding react, babel, and eslint. It aims to incorporate the latest compatible versions of dependencies for improved stability and functionality.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-sass/CHANGELOG.md#_snippet_7\n\n\n\n----------------------------------------\n\nTITLE: Markdown Blockquotes Syntax\nDESCRIPTION: Illustrates the syntax for creating blockquotes in Markdown, which are useful for emulating reply text and can contain other Markdown elements.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/using-remark/src/pages/2016-04-15---hello-world-kitchen-sink/index.md#_snippet_7\n\nLANGUAGE: no-highlight\nCODE:\n```\n> Blockquotes are very handy in email to emulate reply text.\n> This line is part of the same quote.\n\nQuote break.\n\n> This is a very long line that will still be quoted properly when it wraps. Oh boy let's keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can *put* **Markdown** into a blockquote.\n```\n\n----------------------------------------\n\nTITLE: Updating Axios Dependency in gatsby-source-lever\nDESCRIPTION: This snippet shows the update of the axios dependency to version ^1.7.7 within the gatsby-source-lever package. This addresses issues and ensures compatibility.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-lever/CHANGELOG.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nupdate dependency axios to ^1.7.7 for gatsby-source-lever [#39118](https://github.com/gatsbyjs/gatsby/issues/39118) ([a55d755](https://github.com/gatsbyjs/gatsby/commit/a55d7557489939069edccf3aa881db4e5e6a0c94))\n```\n\n----------------------------------------\n\nTITLE: Fix Minor Updates in Packages\nDESCRIPTION: This snippet addresses minor updates across multiple packages within the Gatsby ecosystem. The updates likely include bug fixes, performance improvements, and compatibility adjustments to enhance overall stability and functionality.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-javascript-static-exports/CHANGELOG.md#_snippet_18\n\nLANGUAGE: none\nCODE:\n```\n- update minor updates in packages ([#18875](https://github.com/gatsbyjs/gatsby/issues/18875)) ([b692879](https://github.com/gatsbyjs/gatsby/commit/b692879))\n```\n\n----------------------------------------\n\nTITLE: Configuring gatsby-source-filesystem in gatsby-config.js\nDESCRIPTION: This code snippet configures the `gatsby-source-filesystem` plugin in `gatsby-config.js` to source data from the `./src/data/` directory.  This plugin is required to create File nodes that can then be transformed by other plugins. It specifies the path where the plugin should look for files.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/plugins-and-themes/creating-a-transformer-plugin.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-source-filesystem`,\n      options: {\n        path: `./src/data/`,\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Peer Dependency for API Hooks\nDESCRIPTION: This snippet addresses a dependency issue where plugins rely on an extra argument being passed in API hooks.  It updates the peer dependency to ensure compatibility and proper functioning of plugins.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-styled-components/CHANGELOG.md#_snippet_11\n\nLANGUAGE: Text\nCODE:\n```\nupdate peerDependency, plugins rely on extra arg being passed in API hooks ([#10045](https://github.com/gatsbyjs/gatsby/issues/10045)) ([83b7a18](https://github.com/gatsbyjs/gatsby/commit/83b7a18)), closes [/github.com/gatsbyjs/gatsby/pull/9943#issuecomment-440152666](https://github.com/gatsbyjs/gatsby/issues/issuecomment-440152666)\n```\n\n----------------------------------------\n\nTITLE: Chore: Apply patches for v5\nDESCRIPTION: This snippet documents a chore in version 5.0.0 of the gatsby-source-graphql plugin. It applies patches for version 5 of the plugin, likely fixing any issues or updating files for the major version release.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-graphql/CHANGELOG.md#_snippet_7\n\n\n\n----------------------------------------\n\nTITLE: Implementing Schema Customization API\nDESCRIPTION: This commit implements the schema customization API in `gatsby-source-lever`.  The schema customization API allows developers to define custom GraphQL schema types and resolvers, providing more control over the data exposed by the plugin.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-lever/CHANGELOG.md#_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\n**gatsby-source-lever:** use schema customization API ([#20069](https://github.com/gatsbyjs/gatsby/issues/20069)) ([#20521](https://github.com/gatsbyjs/gatsby/issues/20521)) ([d02adb1](https://github.com/gatsbyjs/gatsby/commit/d02adb1))\n```\n\n----------------------------------------\n\nTITLE: Update Gatsby dependency in package.json\nDESCRIPTION: Updates the Gatsby dependency in the `package.json` file to version 4.0.0.  This is a necessary step to begin the migration process to Gatsby v4.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v3-to-v4.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"dependencies\": {\n    \"gatsby\": \"^4.0.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating lodash monorepo\nDESCRIPTION: This snippet describes updating the lodash monorepo to version ^4.17.21. This update is intended to fix bugs or introduce new features in the lodash library.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-asciidoc/CHANGELOG.md#_snippet_15\n\nLANGUAGE: Text\nCODE:\n```\nupdate lodash monorepo to ^4.17.21 [#29382](https://github.com/gatsbyjs/gatsby/issues/29382) ([9fd287b](https://github.com/gatsbyjs/gatsby/commit/9fd287ba89eacd55652d468b18f6e1526230e7c6))\n```\n\n----------------------------------------\n\nTITLE: Chore: Update babel monorepo in gatsby-plugin-image\nDESCRIPTION: This snippet updates the babel monorepo in the gatsby-plugin-image package. This ensures that the plugin is using the latest versions of the babel tools, which can improve performance and stability.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-image/CHANGELOG.md#_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\nupdate babel monorepo [#37386](https://github.com/gatsbyjs/gatsby/issues/37386) ([b941876](https://github.com/gatsbyjs/gatsby/commit/b94187633d94d0f0071b38ffe93380dd802ec70f))\n```\n\n----------------------------------------\n\nTITLE: Fixing Babel Monorepo Issue JavaScript\nDESCRIPTION: This commit updates the babel monorepo to address issue #37568. This aims to resolve potential bugs or inconsistencies related to Babel's configuration and compilation processes within the Gatsby ecosystem. The update ensures compatibility and stability for projects using gatsby-plugin-catch-links.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-catch-links/CHANGELOG.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nupdate babel monorepo [#37568](https://github.com/gatsbyjs/gatsby/issues/37568) ([13a0a9e](https://github.com/gatsbyjs/gatsby/commit/13a0a9e83dcb015b65dff6b73cdd5dea09c2988f))\n```\n\n----------------------------------------\n\nTITLE: Example Query Result\nDESCRIPTION: Illustrates the output of the GraphQL query for the `allLettersXlsxSheet1` type.  This JSON shows the structure of the data returned from the query.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-excel/README.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  allLettersXlsxSheet1: {\n    edges: [\n      {\n        node: {\n          letter: 'a'\n          value: 97\n        }\n      },\n      {\n        node: {\n          letter: 'b'\n          value: 98\n        }\n      },\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Export Wrap Page Element from Shared Component (SSR)\nDESCRIPTION: This snippet exports the `wrapPageElement` function from the shared component in `gatsby-ssr.js`. This allows Gatsby to use the component during server-side rendering to wrap each page with the provided script.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/built-in-components/gatsby-script.md#_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\nexport { wrapPageElement } from \"./gatsby-shared\"\n```\n\n----------------------------------------\n\nTITLE: Updating Babel Monorepo Chore in gatsby-plugin-sitemap\nDESCRIPTION: This chore updates the Babel monorepo within the gatsby-plugin-sitemap. It ensures that the plugin uses the latest Babel version for improved compatibility and features.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-sitemap/CHANGELOG.md#_snippet_2\n\nLANGUAGE: TEXT\nCODE:\n```\nupdate babel monorepo [#37386](https://github.com/gatsbyjs/gatsby/issues/37386) ([b941876](https://github.com/gatsbyjs/gatsby/commit/b94187633d94d0f0071b38ffe93380dd802ec70f))\n```\n\n----------------------------------------\n\nTITLE: Webpack Chunk Filename Configuration Text\nDESCRIPTION: Shows the webpack configuration for chunk filenames in Gatsby.  `[name]` will be replaced with the `[id]` or name specified in the `import` block and `[contenthash]` will create a hash of the file.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-code-splitting-works.md#_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\n[name]-[contenthash].js\n```\n\n----------------------------------------\n\nTITLE: Fix: Update typescript in gatsby-plugin-image\nDESCRIPTION: This snippet updates the typescript version in the gatsby-plugin-image package. It is intended to fix a bug by aligning with latest version of typescript.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-image/CHANGELOG.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nupdate typescript [#38324](https://github.com/gatsbyjs/gatsby/issues/38324) ([5d0d7c1](https://github.com/gatsbyjs/gatsby/commit/5d0d7c12552fa7570bad2002806bca3d18f923de))\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nupdate typescript [#38133](https://github.com/gatsbyjs/gatsby/issues/38133) ([aa7a078](https://github.com/gatsbyjs/gatsby/commit/aa7a078383ca5a549743be3269e9bde44655a185))\n```\n\n----------------------------------------\n\nTITLE: Monorepo setup: Install dependencies and build\nDESCRIPTION: This command installs all dependencies and builds the packages within the Gatsby monorepo using the Yarn package manager. This prepares the environment for local testing and development.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/create-gatsby/README.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nyarn bootstrap\n```\n\n----------------------------------------\n\nTITLE: Callback API Example in Gatsby Node API\nDESCRIPTION: This snippet demonstrates how to handle asynchronous tasks within a Gatsby Node API (specifically `createPages`) using a callback function. Gatsby relies on the callback execution to determine when the asynchronous task is finished.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/config-files/gatsby-node.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Callback API\nexports.createPages = (_, pluginOptions, cb) => {\n  // do async work\n  cb()\n}\n```\n\n----------------------------------------\n\nTITLE: Bumping Node Minimum Version\nDESCRIPTION: This change upgrades the minimum required Node.js version for Gatsby to 10.13.0. This ensures compatibility with newer language features and APIs. This update was introduced based on issue #22400.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-remark/CHANGELOG.md#_snippet_16\n\n\n\n----------------------------------------\n\nTITLE: Upgrading Axios Dependency\nDESCRIPTION: This snippet demonstrates a chore to upgrade the Axios dependency, likely for improved performance, security, or compatibility. No specific version is given in this snippet.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-lever/CHANGELOG.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nupgrade axios [#38698](https://github.com/gatsbyjs/gatsby/issues/38698) ([e2b3ea3](https://github.com/gatsbyjs/gatsby/commit/e2b3ea3fbfa70b226f6c5c677efedc83f5386cce))\n```\n\n----------------------------------------\n\nTITLE: Reverting to current packages using git and yarn\nDESCRIPTION: Reverts the project's package.json file to the original state using git and then reinstalls dependencies using yarn with the --force flag to ensure all dependencies are updated. This is used to undo changes made by gatsby-dev.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-dev-cli/README.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ngit checkout package.json; yarn --force\n```\n\n----------------------------------------\n\nTITLE: Applying Patches for v5 in gatsby-transformer-excel\nDESCRIPTION: This code snippet represents the application of patches for version 5.0.0 within the `gatsby-transformer-excel` package. It addresses any necessary fixes and adjustments to ensure proper functionality for version 5.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-excel/CHANGELOG.md#_snippet_4\n\nLANGUAGE: Patch\nCODE:\n```\napply patches for v5 [#36796](https://github.com/gatsbyjs/gatsby/issues/36796) ([25f79b6](https://github.com/gatsbyjs/gatsby/commit/25f79b6c3719fdf09584ade620a05c66ba2a697c))\n```\n\n----------------------------------------\n\nTITLE: Updating Babel Monorepo in gatsby-remark-smartypants\nDESCRIPTION: This snippet represents a chore to update the babel monorepo within the gatsby-remark-smartypants package. It ensures that the plugin is using the latest version of babel and its related dependencies.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-smartypants/CHANGELOG.md#_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\nupdate babel monorepo [#37386](https://github.com/gatsbyjs/gatsby/issues/37386) ([b941876](https://github.com/gatsbyjs/gatsby/commit/b94187633d94d0f0071b38ffe93380dd802ec70f))\n```\n\n----------------------------------------\n\nTITLE: Markdown Example\nDESCRIPTION: Demonstrates basic Markdown syntax with headers, links, and inline HTML elements.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/glossary/markdown.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# Markdown!\n\nYou can use Markdown to create documents for [Gatsby](https://www.gatsbyjs.com/).\n\n<figure class=\"chart\">\n  <object data=\"chart.svg\" type=\"image/svg+xml\"></object>\n  <figcaption>\n    Developers who love using Gatsby versus those who haven't tried it yet.\n  </figcaption>\n</figure>\n```\n\n----------------------------------------\n\nTITLE: JSON Output of GraphQL Query\nDESCRIPTION: This JSON object is the result of the GraphQL query example and provides the structure and sample data to be used for mocking the GraphQL response in tests.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/testing/testing-components-with-graphql.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"data\": {\n    \"site\": {\n      \"siteMetadata\": {\n        \"author\": \"Your name\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Babel Monorepo\nDESCRIPTION: This commit updates the Babel monorepo to a newer version. Updating Babel ensures that the project uses the latest JavaScript syntax and features.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-javascript-frontmatter/CHANGELOG.md#_snippet_10\n\nLANGUAGE: Shell\nCODE:\n```\nupdate babel monorepo [#32238](https://github.com/gatsbyjs/gatsby/issues/32238) ([466d4c0](https://github.com/gatsbyjs/gatsby/commit/466d4c087bbc96abb942a02c67243bcc9a4f2a0a))\n```\n\n----------------------------------------\n\nTITLE: GraphQL query for custom static typeName\nDESCRIPTION: Example GraphQL query to retrieve the data using the custom static typeName.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-json/README.md#_snippet_9\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  allJson {\n    edges {\n      node {\n        value\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query Example\nDESCRIPTION: This GraphQL query retrieves all Contentful blog posts, including their ID and slug. It's used as an example to demonstrate the new `createPages` snippet generation feature in GraphiQL.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/v3.14/index.md#_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery MyQuery {\n  allContentfulBlogPosts {\n    nodes {\n      id\n      slug\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Babel Monorepo in gatsby-plugin-cxs\nDESCRIPTION: This commit updates the Babel monorepo within the gatsby-plugin-cxs package to address potential issues and ensure compatibility. It resolves issue #37568.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-cxs/CHANGELOG.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nupdate babel monorepo [#37568](https://github.com/gatsbyjs/gatsby/issues/37568) ([13a0a9e](https://github.com/gatsbyjs/gatsby/commit/13a0a9e83dcb015b65dff6b73cdd5dea09c2988f))\n```\n\n----------------------------------------\n\nTITLE: Create Content Digest with gatsby-core-utils (JS)\nDESCRIPTION: Creates an MD5 hash of the input object using `gatsby-core-utils`. This is useful for creating unique identifiers based on content.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-core-utils/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { createContentDigest } = require(\"gatsby-core-utils\")\n\nconst options = {\n  key: \"value\",\n  foo: \"bar\",\n}\n\nconst digest = createContentDigest(options)\n// ...\n```\n\n----------------------------------------\n\nTITLE: Regenerating Changelogs\nDESCRIPTION: This commit re-generates the changelogs. This is likely done to ensure the changelogs are up-to-date and accurately reflect the changes made in the project.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-javascript-frontmatter/CHANGELOG.md#_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\nre-generate changelogs [#32886](https://github.com/gatsbyjs/gatsby/issues/32886) ([417df15](https://github.com/gatsbyjs/gatsby/commit/417df15230be368a9db91f2ad1a9bc0442733177))\n```\n\n----------------------------------------\n\nTITLE: Installing JS Search and Axios Dependencies\nDESCRIPTION: These commands install the necessary dependencies for the search functionality. 'js-search' is the core library for performing the search, and 'axios' is used for making HTTP requests to fetch the data.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/adding-search-with-js-search.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install js-search axios\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add js-search axios\n```\n\n----------------------------------------\n\nTITLE: Updating urijs dependency in gatsby-remark-code-repls\nDESCRIPTION: This commit updates the `urijs` dependency to version `^1.19.8` within the `gatsby-remark-code-repls` package. The update addresses a potential bug or vulnerability within the older version of the dependency, ensuring compatibility and stability.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-code-repls/CHANGELOG.md#_snippet_8\n\n\n\n----------------------------------------\n\nTITLE: Fixing ignore pattern in quotes\nDESCRIPTION: This snippet represents a bug fix for wrapping an ignore pattern in quotes within the gatsby-remark-smartypants package. The referenced issue and commit provide further context.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-smartypants/CHANGELOG.md#_snippet_5\n\nLANGUAGE: None\nCODE:\n```\n- wrap ignore pattern in quotes ([#23176](https://github.com/gatsbyjs/gatsby/issues/23176)) ([7563db6](https://github.com/gatsbyjs/gatsby/commit/7563db6))\n```\n\n----------------------------------------\n\nTITLE: Configuring Gatsby Plugins in gatsby-config.js\nDESCRIPTION: This JavaScript snippet shows how to add `gatsby-plugin-sharp` and `gatsby-plugin-image` to the `plugins` array in `gatsby-config.js`.  This configuration enables the plugins within your Gatsby site.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-contentful/README.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  plugins: [\n    `gatsby-plugin-sharp`,\n    `gatsby-plugin-image`,\n    // ...etc\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Install Plugin Peer Dependencies\nDESCRIPTION: This command installs peer dependencies required by certain Gatsby plugins, like `gatsby-plugin-typography`. This is necessary because some plugins now have dependencies that are not automatically installed with the plugin.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v1-to-v2.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install typography react-typography\n```\n\n----------------------------------------\n\nTITLE: Correcting Package Changelog Links\nDESCRIPTION: This commit corrects the links in the package changelogs, ensuring users can access the correct information about each version. It fixes incorrect URLs, improving the overall usability and documentation of the plugin.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-drupal/CHANGELOG.md#_snippet_20\n\n\n\n----------------------------------------\n\nTITLE: List yarn configuration values\nDESCRIPTION: This command lists all configuration values in yarn, including the value of the `cafile` option. This allows you to verify that the certificate path has been set correctly.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/local-development/configuring-ca-certificates.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nyarn config list\n```\n\n----------------------------------------\n\nTITLE: Disabling Autopop in gatsby-config.js with JavaScript\nDESCRIPTION: This code snippet demonstrates how to disable the automatic popup of the Snipcart shopping cart by setting the `autopop` option to `false` in the `gatsby-config.js` file.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/adding-a-shopping-cart-with-snipcart.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  resolve: 'gatsby-plugin-snipcart',\n  options: {\n    apiKey: 'your-api-key',\n    autopop: false // highlight-line\n  }\n},\n```\n\n----------------------------------------\n\nTITLE: Adding Namespace Option to Styled Components Plugin\nDESCRIPTION: This commit introduces the `namespace` option to the gatsby-plugin-styled-components. This option enables better control over the scoping of styled components.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-styled-components/CHANGELOG.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nadd `namespace` option [#29095](https://github.com/gatsbyjs/gatsby/issues/29095) ([1a09302](https://github.com/gatsbyjs/gatsby/commit/1a09302d65817ce0d6b62819a5e1fcdddafc3ea3))\n```\n\n----------------------------------------\n\nTITLE: Markdown Hyperlink - Good Example\nDESCRIPTION: This example demonstrates the preferred way to create hyperlinks in Gatsby documentation. It shows how to use clear and descriptive text for the link, improving accessibility and user experience.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/contributing/gatsby-style-guide.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n[Gatsby Cloud](https://www.gatsbyjs.com/cloud/)\n```\n\n----------------------------------------\n\nTITLE: Updating minor updates in packages\nDESCRIPTION: This commit updates minor updates in various packages, except react, babel, and eslint. This ensures that gatsby-link is using the latest versions of its dependencies. Issue #17254 tracks this update.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-link/CHANGELOG.md#_snippet_10\n\n\n\n----------------------------------------\n\nTITLE: Configuring Gatsby Plugin with Options\nDESCRIPTION: This JavaScript code shows how to configure Gatsby to use the local remark plugin and pass options to the plugin. The plugin is configured using the object syntax allowing for passing options to the plugin.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/remark-plugin-tutorial.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  resolve: `gatsby-remark-purple-headers`,\n  options: {\n    // Options here\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Babel Monorepo\nDESCRIPTION: This chore involves updating the Babel monorepo within the gatsby-transformer-javascript-static-exports package. Updating Babel ensures compatibility with the latest JavaScript features and improvements.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-javascript-static-exports/CHANGELOG.md#_snippet_7\n\nLANGUAGE: Text\nCODE:\n```\nupdate babel monorepo [#31143](https://github.com/gatsbyjs/gatsby/issues/31143) ([701ab2f](https://github.com/gatsbyjs/gatsby/commit/701ab2f6690c3f1bbaf60cf572513ea566cc9ec9))\n```\n\n----------------------------------------\n\nTITLE: Update node-fetch dependency - Gatsby Telemetry\nDESCRIPTION: This commit updates the node-fetch dependency for the gatsby-telemetry package to version ^2.6.6. This update likely contains bug fixes and security enhancements for the node-fetch library, which is used for making HTTP requests.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-telemetry/CHANGELOG.md#_snippet_11\n\n\n\n----------------------------------------\n\nTITLE: Updating Babel Monorepo\nDESCRIPTION: This chore involves updating the Babel monorepo within the gatsby-transformer-javascript-static-exports package. Updating Babel ensures compatibility with the latest JavaScript features and improvements.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-javascript-static-exports/CHANGELOG.md#_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\nupdate babel monorepo [#32996](https://github.com/gatsbyjs/gatsby/issues/32996) ([048c7a7](https://github.com/gatsbyjs/gatsby/commit/048c7a727bbc6a9ad8e27afba72ee20e946c4aaa))\n```\n\n----------------------------------------\n\nTITLE: Node with Null Value\nDESCRIPTION: Shows a node with a null value for the 'a' field, explaining how Gatsby handles null and undefined values in the index. It uses null directly and a Symbol to represent undefined.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby/src/datastore/lmdb/query/README.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst a3 = {\n  id: \"a3\",\n  a: null,\n  internal: { type: \"A\" },\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Babel Monorepo in Gatsby\nDESCRIPTION: This commit updates the Babel monorepo, likely to incorporate bug fixes, performance improvements, or new features from Babel.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-styletron/CHANGELOG.md#_snippet_7\n\nLANGUAGE: none\nCODE:\n```\nupdate babel monorepo [#27528](https://github.com/gatsbyjs/gatsby/issues/27528) ([539dbb0](https://github.com/gatsbyjs/gatsby/commit/539dbb09166e346a6cee568973d2de3d936e8ef3))\n```\n\n----------------------------------------\n\nTITLE: Updating cross-env dependency\nDESCRIPTION: This code snippet updates the cross-env dependency to version ^7.0.3. cross-env is a package used to set environment variables across platforms.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-facebook-analytics/CHANGELOG.md#_snippet_0\n\nLANGUAGE: N/A\nCODE:\n```\nupdate dependency cross-env to ^7.0.3 [#28505](https://github.com/gatsbyjs/gatsby/issues/28505) ([a819b9b](https://github.com/gatsbyjs/gatsby/commit/a819b9bfb663139f7b06c3ed7d6d6069a2382b2c))\n```\n\n----------------------------------------\n\nTITLE: Ensuring Typed Elements in gatsby-transformer-documentationjs\nDESCRIPTION: This commit ensures that all documentation.js elements are correctly typed. It addresses potential type-related issues within the gatsby-transformer-documentationjs plugin for Gatsby.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-documentationjs/CHANGELOG.md#_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\nensure all docjs elements are typed ([#19510](https://github.com/gatsbyjs/gatsby/issues/19510)) ([ab8adbc](https://github.com/gatsbyjs/gatsby/commit/ab8adbc))\n```\n\n----------------------------------------\n\nTITLE: Configuring excerpt separator for HTML in Markdown (JavaScript)\nDESCRIPTION: Demonstrates configuring an excerpt separator in `gatsby-config.js` when Markdown files contain HTML. This ensures excerpts are generated correctly when HTML is present.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-remark/README.md#_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-transformer-remark`,\n      options: {\n        excerpt_separator: `<!-- endexcerpt -->`\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing Title Feed Requirement with a Warning in gatsby-plugin-feed\nDESCRIPTION: This change replaces the strict requirement for a title in the feed configuration with a warning. This provides more flexibility in configuring the feed and avoids unnecessary errors. This change was made in version 2.3.11.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-feed/CHANGELOG.md#_snippet_12\n\n\n\n----------------------------------------\n\nTITLE: Running Gatsby develop command\nDESCRIPTION: Runs the gatsby develop command, which starts the Gatsby development server. This allows developers to preview their site and access the GraphiQL explorer at http://localhost:8000/___graphql to test queries.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/wordpress-source-plugin-tutorial.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngatsby develop\n```\n\n----------------------------------------\n\nTITLE: Updating chokidar dependency in gatsby-source-filesystem\nDESCRIPTION: This commit updates the `chokidar` dependency to version ^3.5.3 to address issue #34643 in the gatsby-source-filesystem package.  This update aims to fix potential bugs or improve performance related to file watching.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-filesystem/CHANGELOG.md#_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Updating peerDeps in gatsby-transformer-asciidoc\nDESCRIPTION: This commit updates the peer dependencies in the `gatsby-transformer-asciidoc` package. It addresses issue #36965 by applying a specific commit that updates the peer dependencies.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-asciidoc/CHANGELOG.md#_snippet_3\n\nLANGUAGE: patch\nCODE:\n```\nUpdate peerDeps [#36965](https://github.com/gatsbyjs/gatsby/issues/36965) ([b624442](https://github.com/gatsbyjs/gatsby/commit/b6244424fe8b724cbc23b80b2b4f5424cc2055a4))\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query using Fragment\nDESCRIPTION: This snippet shows a GraphQL query that uses the `SiteInformation` fragment. The `...SiteInformation` syntax includes all the fields defined in the fragment in the query result.  Used in conjunction with the SiteInformation fragment definition.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/local-development/graphql-typegen.md#_snippet_4\n\nLANGUAGE: GraphQL\nCODE:\n```\n# Rest of the page above...\n\nquery IndexPage {\n  site {\n    ...SiteInformation\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: File Mock (__mocks__/file-mock.js)\nDESCRIPTION: This JavaScript file defines a mock module for static file imports. It exports a string \"test-file-stub\", which is used as a placeholder when Jest encounters static file imports (e.g., images) during testing.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/testing/unit-testing.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = \"test-file-stub\"\n```\n\n----------------------------------------\n\nTITLE: Creating a New Gatsby Site\nDESCRIPTION: These commands create a new Gatsby project named 'images-tutorial-site' and navigate into the project directory. This sets up the basic project structure for integrating with WordPress and handling images.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/wordpress-image-tutorial.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngatsby new images-tutorial-site\ncd images-tutorial-site\n```\n\n----------------------------------------\n\nTITLE: Applying Patches for v4\nDESCRIPTION: This commit applies patches specifically for version 4 of Gatsby. These patches likely contain bug fixes or minor enhancements necessary for the v4 release.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-javascript-frontmatter/CHANGELOG.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\napply patches for v4 [#33170](https://github.com/gatsbyjs/gatsby/issues/33170) ([f8c5141](https://github.com/gatsbyjs/gatsby/commit/f8c5141bf72108a53338fd01514522ae7a1b37bf))\n```\n\n----------------------------------------\n\nTITLE: Updating and upgrading Ubuntu/Debian\nDESCRIPTION: This snippet updates the package lists and upgrades the installed packages on Ubuntu and Debian-based Linux distributions using the apt package manager. This ensures the system is running the latest versions of software.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/local-development/gatsby-on-linux.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt update\nsudo apt -y upgrade\n```\n\n----------------------------------------\n\nTITLE: Set cafile in npm configuration\nDESCRIPTION: This command sets the `cafile` configuration option in npm to the path of your certificate file. This is necessary when using a private package registry that requires a CA certificate.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/local-development/configuring-ca-certificates.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm config set cafile \"path-to-my-cert.pem\"\n```\n\n----------------------------------------\n\nTITLE: Bumping Babel Minor Dependency in Gatsby Plugin\nDESCRIPTION: This snippet bumps the babel minor dependency for the gatsby-plugin-coffeescript package, addressing issues #31857 and #31859.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-coffeescript/CHANGELOG.md#_snippet_11\n\nLANGUAGE: Other\nCODE:\n```\nbump babel minor [#31857](https://github.com/gatsbyjs/gatsby/issues/31857) [#31859](https://github.com/gatsbyjs/gatsby/issues/31859) ([8636025](https://github.com/gatsbyjs/gatsby/commit/863602567930a39142ed33d9d1f1813b7dec8686))\n```\n\n----------------------------------------\n\nTITLE: Updating Babel Monorepo\nDESCRIPTION: This chore involves updating the Babel monorepo within the gatsby-transformer-javascript-static-exports package. Updating Babel ensures compatibility with the latest JavaScript features and improvements.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-javascript-static-exports/CHANGELOG.md#_snippet_3\n\nLANGUAGE: Text\nCODE:\n```\nupdate babel monorepo [#32564](https://github.com/gatsbyjs/gatsby/issues/32564) ([a554998](https://github.com/gatsbyjs/gatsby/commit/a554998b4f6765103b650813cf52dbfcc575fecf))\n```\n\n----------------------------------------\n\nTITLE: Updating peerDeps\nDESCRIPTION: This commit updates the peerDependencies of the gatsby-cypress package. Updating peer dependencies ensures compatibility with other packages in the Gatsby ecosystem and resolves potential dependency conflicts. It addresses issue #36965.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-cypress/CHANGELOG.md#_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Importing example blog posts to Flotiq\nDESCRIPTION: This command executes a Node.js script provided by Flotiq to import example blog posts and an image into the Flotiq account. It requires a Full Access API key.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/sourcing-from-flotiq.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nnode ./.flotiq/importExample.js\n```\n\n----------------------------------------\n\nTITLE: Install a specific version of a package\nDESCRIPTION: This command installs or updates a specific package to a specified version. The version can be a specific version number, a version range with *, ^, ~, or a wildcard x for major, minor, or patch versions.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/upgrade-gatsby-and-dependencies.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnpm install <package-name>@<version>\n```\n\n----------------------------------------\n\nTITLE: Type Hinting in gatsby-node.js using JSDoc\nDESCRIPTION: This code demonstrates how to use JSDoc to provide type hints in a `gatsby-node.js` file. It imports the `GatsbyNode` type and uses it to type the `createPages` API.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/custom-configuration/typescript.md#_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\n// @ts-check\n\n/**\n * @type {import('gatsby').GatsbyNode['createPages']}\n */\nexports.createPages = () => {}\n```\n\n----------------------------------------\n\nTITLE: Updating Minor Packages in Gatsby\nDESCRIPTION: This commit updates minor versions of various packages within the Gatsby project. These updates often include bug fixes and small feature enhancements.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-styletron/CHANGELOG.md#_snippet_12\n\nLANGUAGE: none\nCODE:\n```\nupdate minor updates in packages ([#18875](https://github.com/gatsbyjs/gatsby/issues/18875)) ([b692879](https://github.com/gatsbyjs/gatsby/commit/b692879))\n```\n\n----------------------------------------\n\nTITLE: Juggle reporter dont depend on cli\nDESCRIPTION: This commit modifies the gatsby-plugin-page-creator to handle the reporter independently of the command-line interface (CLI). This decoupling improves the plugin's modularity and reduces its dependence on specific CLI configurations.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-page-creator/CHANGELOG.md#_snippet_33\n\nLANGUAGE: TEXT\nCODE:\n```\n2cef73b\n```\n\n----------------------------------------\n\nTITLE: Configuring gatsby-plugin-sitemap in gatsby-config.js\nDESCRIPTION: This code snippet demonstrates how to configure the gatsby-plugin-sitemap plugin in your gatsby-config.js file. It includes setting the siteUrl and adding the plugin to the plugins array.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/adding-common-features/creating-a-sitemap.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  siteMetadata: {\n    siteUrl: `https://www.example.com`,\n  },\n  plugins: [`gatsby-plugin-sitemap`],\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Ordered List with Formatting\nDESCRIPTION: Demonstrates how to include inline code and bold text within an ordered list in Markdown. The first item uses inline code, while the second uses bold text. Demonstrates formatting options within a Markdown ordered list.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/starters/blog/content/blog/hello-world/index.md#_snippet_4\n\nLANGUAGE: Markdown\nCODE:\n```\n1. `code goes` here in this line\n1. **bold** goes here\n```\n\n----------------------------------------\n\nTITLE: Inline Scripts\nDESCRIPTION: Illustrates how to define inline scripts using the `<Script>` component, either with `dangerouslySetInnerHTML` or template literals. A unique `id` is required for inline scripts.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/built-in-components/gatsby-script.md#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Script id=\"first-unique-id\" dangerouslySetInnerHTML={{ __html: `alert('Hello world')` }} />\n<Script id=\"second-unique-id\">{`alert('Hello world')`}</Script>\n```\n\n----------------------------------------\n\nTITLE: Create New Git Branch - Shell\nDESCRIPTION: This shell command creates a new Git branch named `heading-variation` and switches the current working branch to it.  This allows for parallel development of the A/B test variation.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/testing/ab-testing-with-google-analytics-and-netlify.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ngit checkout -b heading-variation\n```\n\n----------------------------------------\n\nTITLE: Updating cross-env dependency in gatsby-source-wikipedia (JavaScript)\nDESCRIPTION: This code snippet shows the commit message for updating the `cross-env` dependency to version ^7.0.3. It updates the cross-env dependency.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-wikipedia/CHANGELOG.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nupdate dependency cross-env to ^7.0.3 [#28505](https://github.com/gatsbyjs/gatsby/issues/28505) ([a819b9b](https://github.com/gatsbyjs/gatsby/commit/a819b9bfb663139f7b06c3ed7d6d6069a2382b2c))\n```\n\n----------------------------------------\n\nTITLE: Adding missing dependencies\nDESCRIPTION: This snippet adds any missing dependencies to the gatsby-plugin-page-creator package, ensuring that all required modules are present for proper functionality.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-page-creator/CHANGELOG.md#_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\nadd missing dependencies [#36230](https://github.com/gatsbyjs/gatsby/issues/36230) ([5443479](https://github.com/gatsbyjs/gatsby/commit/5443479c98a05f60ba12efad3fe2f986c80ed296))\n```\n\n----------------------------------------\n\nTITLE: Fixing QueryAll Name in Gatsby Plugin\nDESCRIPTION: This commit fixes an issue in the gatsby-plugin-page-creator where the queryAll name was incorrect. Correcting this name ensures that all pages are properly queried and processed by the plugin.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-page-creator/CHANGELOG.md#_snippet_29\n\nLANGUAGE: TEXT\nCODE:\n```\na70a66e\n```\n\n----------------------------------------\n\nTITLE: Bumping Babel minor version again\nDESCRIPTION: This commit bumps the minor version of the Babel dependency.  It includes minor updates and bug fixes in the Babel transpiler.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-twitter/CHANGELOG.md#_snippet_14\n\nLANGUAGE: TEXT\nCODE:\n```\nbump babel minor [#31857](https://github.com/gatsbyjs/gatsby/issues/31857) [#31859](https://github.com/gatsbyjs/gatsby/issues/31859) ([8636025](https://github.com/gatsbyjs/gatsby/commit/863602567930a39142ed33d9d1f1813b7dec8686))\n```\n\n----------------------------------------\n\nTITLE: Running rename-bound-action-creators codemod\nDESCRIPTION: This command executes the `rename-bound-action-creators` codemod, renaming `boundActionCreators` to `actions`. This addresses the deprecation of `boundActionCreators` in Gatsby v2, updating the code to use the new `actions` API.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-codemods/README.md#_snippet_12\n\nLANGUAGE: Shell\nCODE:\n```\nnpx gatsby-codemods rename-bound-action-creators <filepath>\n```\n\n----------------------------------------\n\nTITLE: Typing Gatsby config with GatsbyConfig\nDESCRIPTION: This code shows how to type the `gatsby-config.ts` file using the `GatsbyConfig` type from Gatsby. This enables type checking and autocompletion for the config object.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/custom-configuration/typescript.md#_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport type { GatsbyConfig } from \"gatsby\"\n\nconst config: GatsbyConfig = {\n  siteMetadata: {\n    title: \"Your Title\",\n  },\n  plugins: [],\n}\n\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Set Path Resources on Route Update (JavaScript)\nDESCRIPTION: This bug fix sets path resources on route update to ensure that the initial page is properly cached. This resolves issues where the initial page might not be available offline.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-offline/CHANGELOG.md#_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nset path resources on route update to ensure initial page is cached\n```\n\n----------------------------------------\n\nTITLE: Handling fetch failures in gatsby-plugin-catch-links\nDESCRIPTION: This commit implements a fallback mechanism in gatsby-plugin-catch-links to use default browser link handling when resources fail to fetch.  This addresses issue #13904.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-catch-links/CHANGELOG.md#_snippet_15\n\nLANGUAGE: Text\nCODE:\n```\nFall back to default browser link handling when resources fail to fetch ([#13904](https://github.com/gatsbyjs/gatsby/issues/13904)) ([d4b60f2](https://github.com/gatsbyjs/gatsby/commit/d4b60f2))\n```\n\n----------------------------------------\n\nTITLE: Shimming reporter from Gatsby\nDESCRIPTION: This commit introduces a shim for the reporter from Gatsby. This allows the `gatsby-remark-code-repls` package to use the Gatsby reporter API even when it is not directly available, ensuring proper logging and error reporting within the Gatsby environment.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-code-repls/CHANGELOG.md#_snippet_15\n\n\n\n----------------------------------------\n\nTITLE: Webpack Error: window is not defined (Text)\nDESCRIPTION: This text snippet displays a common webpack error encountered in Gatsby when attempting to use browser globals like `window` during the build process. This is because Gatsby uses server-side rendering and these objects are unavailable at build time.  This error typically requires patching or using dynamic imports.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/adding-react-components.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nWebpackError: ReferenceError: window is not defined\n```\n\n----------------------------------------\n\nTITLE: Adding Missing Telemetry Dependency in Gatsby\nDESCRIPTION: This commit adds a missing telemetry dependency to the gatsby-plugin-page-creator package. This dependency is crucial for collecting data and monitoring the performance of the plugin, and its absence could lead to incomplete or inaccurate telemetry information.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-page-creator/CHANGELOG.md#_snippet_22\n\nLANGUAGE: TEXT\nCODE:\n```\na13827f\n```\n\n----------------------------------------\n\nTITLE: Import Command Line CSS\nDESCRIPTION: This code snippet shows how to import the PrismJS command-line CSS file in `gatsby-browser.js`. This is for styling shell prompts.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-prismjs/README.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// gatsby-browser.js\nrequire(\"prismjs/plugins/command-line/prism-command-line.css\")\n```\n\n----------------------------------------\n\nTITLE: Using React.lazy and Suspense for Client-Side Only Components (JSX)\nDESCRIPTION: This code demonstrates how to use `React.lazy` and `React.Suspense` to load a client-side only component while ensuring it only runs on the client. It checks if the code is being executed on the server (SSR) using `typeof window === \"undefined\"`. If it's not SSR, the lazy-loaded component is rendered within a `Suspense` boundary, providing a fallback UI while the component is loading.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/using-client-side-only-packages.md#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\"\n\nconst ClientSideOnlyLazy = React.lazy(() =>\n  import(\"../components/ClientSideOnly\")\n)\nconst MyPage = () => {\n  const isSSR = typeof window === \"undefined\"\n\n  return (\n    <>\n      {!isSSR && (\n        <React.Suspense fallback={<div />}>\n          <ClientSideOnlyLazy />\n        </React.Suspense>\n      )}\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Improve Error Logging for WordPress API Requests\nDESCRIPTION: This snippet highlights an improvement in the gatsby-source-wordpress plugin related to error logging for WordPress API requests. The change aims to provide more detailed and informative error messages, facilitating easier debugging and troubleshooting of issues related to data fetching from WordPress.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-wordpress/CHANGELOG.md#_snippet_26\n\nLANGUAGE: JavaScript\nCODE:\n```\n- **gatsby-source-wordpress:** improve error logging for WordPress API requests ([#8967](https://github.com/gatsbyjs/gatsby/issues/8967)) ([3bac0c4](https://github.com/gatsbyjs/gatsby/commit/3bac0c4)), closes [#8928](https://github.com/gatsbyjs/gatsby/issues/8928)\n```\n\n----------------------------------------\n\nTITLE: Breaking Change: MDX v2\nDESCRIPTION: This snippet represents a breaking change related to the update to MDX v2. It indicates that users need to update their MDX-related code to be compatible with version 2.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-page-creator/CHANGELOG.md#_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\nBREAKING CHANGE(gatsby-plugin-mdx): MDX v2 [#35650](https://github.com/gatsbyjs/gatsby/issues/35650) ([c92db36](https://github.com/gatsbyjs/gatsby/commit/c92db36642268d1ee50c11ea568f836c7e5b4a03))\n```\n\n----------------------------------------\n\nTITLE: Fixing ignore pattern wrapping - GatsbyJS\nDESCRIPTION: This bug fix ensures that the ignore pattern is correctly wrapped in quotes, preventing potential errors during file processing.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-custom-blocks/CHANGELOG.md#_snippet_11\n\nLANGUAGE: none\nCODE:\n```\nwrap ignore pattern in quotes ([#23176](https://github.com/gatsbyjs/gatsby/issues/23176)) ([7563db6](https://github.com/gatsbyjs/gatsby/commit/7563db6))\n```\n\n----------------------------------------\n\nTITLE: Chore: Update prismjs dependency\nDESCRIPTION: Updates the prismjs dependency to version ^1.29.0 for gatsby-remark-prismjs.  This ensures the plugin uses the latest syntax highlighting definitions and features from prismjs, addressing issue #37191.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-prismjs/CHANGELOG.md#_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\ndc3d741(https://github.com/gatsbyjs/gatsby/commit/dc3d741260e057540ed1294558df78aa63126a8b)\n```\n\n----------------------------------------\n\nTITLE: Fixing plugin options augmentation in gatsby-remark-images-contentful (JavaScript)\nDESCRIPTION: This commit addresses a bug where plugin options were being incorrectly augmented. The fix ensures that the plugin options remain as intended, preventing unexpected behavior during image processing. It directly modifies the plugin's behavior to avoid unwanted option modifications.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-images-contentful/CHANGELOG.md#_snippet_27\n\nLANGUAGE: JavaScript\nCODE:\n```\ndo not augment plugin-options ([#26006](https://github.com/gatsbyjs/gatsby/issues/26006)) ([222920b](https://github.com/gatsbyjs/gatsby/commit/222920b))\n```\n\n----------------------------------------\n\nTITLE: Setting Cache Control for Service Worker\nDESCRIPTION: This snippet shows the cache-control header for the `/sw.js` file (service worker) in a Gatsby site. It specifies that this file should be revalidated on each load to check for updates to the site's service worker. The header uses `public`, `max-age=0`, and `must-revalidate` to ensure the latest version of the service worker is always used.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/previews-deploys-hosting/caching.md#_snippet_5\n\nLANGUAGE: HTTP\nCODE:\n```\ncache-control: public, max-age=0, must-revalidate\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Node Manifest Utility Function (TypeScript)\nDESCRIPTION: This code snippet demonstrates the creation of a utility function `customCreateNodeManifest` that wraps the `unstable_createNodeManifest` action. It checks if the environment is a Gatsby Cloud preview and filters nodes based on a custom logic `customNodeFilteringFn`. The function conditionally calls `unstable_createNodeManifest` to create a node manifest.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/creating-a-source-plugin/part-7/index.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport function customCreateNodeManifest({\n  attributes, // Attributes for manifestId (e.g. your source data/CMS data)\n  gatsbyNode, // Gatsby node\n  unstable_createNodeManifest, // Passed through action\n}) {\n  // This ENV variable is provided automatically on Gatsby Cloud\n  const isPreview = process.env.GATSBY_IS_PREVIEW === `true`\n\n  const shouldCreateNodeManifest = isPreview && !!customNodeFilteringFn(gatsbyNode)\n\n  if (shouldCreateNodeManifest) {\n    // TODO: Call action\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Improving version output in gatsby-cli JavaScript\nDESCRIPTION: This snippet improves the version output in `gatsby-cli`. The updated version output likely provides more detailed or user-friendly information about the versions of gatsby-cli and its dependencies. This can be helpful for debugging and troubleshooting issues related to version compatibility.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-cli/CHANGELOG.md#_snippet_21\n\nLANGUAGE: JavaScript\nCODE:\n```\n6210ec3\n```\n\n----------------------------------------\n\nTITLE: Updating Chokidar Dependency to v3 in Gatsby (JavaScript)\nDESCRIPTION: This code snippet shows the commit hash associated with updating the chokidar dependency to v3. Updating chokidar likely improves file watching capabilities used by gatsby-page-utils.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-page-utils/CHANGELOG.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n816d475\n```\n\n----------------------------------------\n\nTITLE: Fixing Package Updates in Gatsby\nDESCRIPTION: This snippet addresses an issue where minor updates were not being correctly applied across various Gatsby packages (excluding react, babel, and eslint). It ensures that the package dependencies, except for the specified ones, are up-to-date with the latest minor releases.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-screenshot/CHANGELOG.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nupdate minor updates in packages except react, babel and eslint ([#17716](https://github.com/gatsbyjs/gatsby/issues/17716)) ([af39ae3](https://github.com/gatsbyjs/gatsby/commit/af39ae3))\n```\n\n----------------------------------------\n\nTITLE: Adding Plugin Without Options in Gatsby\nDESCRIPTION: This shows how to enable a plugin without any configuration options by simply adding the plugin's name as a string to the `plugins` array. The plugin must be installed via `npm` or `yarn`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/config-files/gatsby-config.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  plugins: [`gatsby-plugin-name`] \n}\n```\n\n----------------------------------------\n\nTITLE: Install dependencies using npm\nDESCRIPTION: This command installs the node modules required by the `package.json` file. This step is necessary to set up the Gatsby project with all its dependencies before running the build process or the benchmark.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/benchmarks/create-pages/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Rendering with htmlAst in React\nDESCRIPTION: This code snippet demonstrates how to render the Markdown content using `htmlAst` with the `renderAst` function. It replaces the standard `dangerouslySetInnerHTML` approach for rendering HTML.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/using-remark/src/pages/2018-01-27---custom-components/index.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  renderAst(post.htmlAst)\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and using the local adapter in gatsby-config.js (JavaScript)\nDESCRIPTION: This code shows how to import a Gatsby adapter file directly into your gatsby-config.js. This is a prototype step, before moving the adapter to its own module. It imports the adapter from the file and calls it within the adapter configuration.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/previews-deploys-hosting/creating-an-adapter.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst adapter = require(\"./gatsby-adapter-foo\")\n\nmodule.exports = {\n  adapter: adapter()\n}\n```\n\n----------------------------------------\n\nTITLE: Upgrading Yarn Packages Interactively\nDESCRIPTION: This snippet shows the command to upgrade yarn packages interactively. This will provide an overview of the packages that can be upgraded and allow you to select which ones to upgrade to the latest version.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v2-to-v3.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\nyarn upgrade-interactive --latest\n```\n\n----------------------------------------\n\nTITLE: Updating Axios Dependency for Gatsby Source WordPress\nDESCRIPTION: This snippet updates the axios dependency to version ^0.19.2 in the gatsby-source-wordpress plugin. Axios is used for making HTTP requests to the WordPress API.  Updating the dependency ensures compatibility and potentially resolves security vulnerabilities.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-wordpress/CHANGELOG.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nupdate dependency axios to ^0.19.2 ([#22317](https://github.com/gatsbyjs/gatsby/issues/22317)) ([91e780f](https://github.com/gatsbyjs/gatsby/commit/91e780f))\n```\n\n----------------------------------------\n\nTITLE: Updating peerDeps in gatsby-source-faker\nDESCRIPTION: This snippet updates the peer dependencies for the `gatsby-source-faker` package. It ensures that the plugin is compatible with the required versions of its peer dependencies, preventing potential conflicts and ensuring proper functionality.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-faker/CHANGELOG.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nUpdate peerDeps [#36965](https://github.com/gatsbyjs/gatsby/issues/36965) ([b624442](https://github.com/gatsbyjs/gatsby/commit/b6244424fe8b724cbc23b80b2b4f5424cc2055a4))\n```\n\n----------------------------------------\n\nTITLE: Chore: Apply patches for v4\nDESCRIPTION: Applies necessary patches for version 4 of the plugin. This ensures that the plugin functions correctly after the major version upgrade. The chore relates to issue #33170.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-google-tagmanager/CHANGELOG.md#_snippet_11\n\nLANGUAGE: None\nCODE:\n```\napply patches for v4 [#33170](https://github.com/gatsbyjs/gatsby/issues/33170) ([f8c5141](https://github.com/gatsbyjs/gatsby/commit/f8c5141bf72108a53338fd01514522ae7a1b37bf))\n```\n\n----------------------------------------\n\nTITLE: Initialize a New Gatsby Plugin\nDESCRIPTION: This command uses the Gatsby CLI to initialize a new plugin project using the gatsby-starter-plugin template.  It creates a new directory named 'my-plugin' with the necessary files for a Gatsby plugin.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/starters/gatsby-starter-plugin/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngatsby new my-plugin https://github.com/gatsbyjs/gatsby-starter-plugin\n```\n\n----------------------------------------\n\nTITLE: Fixing File Node Parent with createRemoteFileNode in Gatsby\nDESCRIPTION: This commit addresses a bug in gatsby-source-filesystem that prevented plugins from setting the parent node when creating File nodes using createRemoteFileNode. The fix ensures that the parent node is correctly set when creating remote file nodes.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-wordpress/CHANGELOG.md#_snippet_12\n\n\n\n----------------------------------------\n\nTITLE: Adding Skip File Downloads Config Option\nDESCRIPTION: This feature adds a configuration option to skip file downloads in the gatsby-source-drupal plugin, allowing users to optimize build times when file downloads are not necessary.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-drupal/CHANGELOG.md#_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Fixing Gatsby Source MongoDB Updates\nDESCRIPTION: This snippet updates minor and patch versions for the gatsby-source-mongodb package. Updating these versions resolves reported bugs and improves stability.  It specifically targets issues within the MongoDB data sourcing process.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-mongodb/CHANGELOG.md#_snippet_10\n\n\n\n----------------------------------------\n\nTITLE: Applying Patches for v4\nDESCRIPTION: This commit applies patches for version 4 of the gatsby-transformer-yaml package. These patches address issues and improvements required for the v4 release, ensuring stability and compatibility.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-yaml/CHANGELOG.md#_snippet_1\n\nLANGUAGE: \nCODE:\n```\napply patches for v4 [#33170](https://github.com/gatsbyjs/gatsby/issues/33170) ([f8c5141](https://github.com/gatsbyjs/gatsby/commit/f8c5141bf72108a53338fd01514522ae7a1b37bf))\n```\n\n----------------------------------------\n\nTITLE: Reading a file using the fs module in gatsby-ssr.js\nDESCRIPTION: This code snippet demonstrates how to read a file using the `fs` module in `gatsby-ssr.js`. Using `fs` module disables incremental builds. It's recommended to migrate away from `fs` reads for optimal incremental build performance.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/debugging-incremental-builds.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst fs = require(`fs`)\nconst someUntrackedInput = fs.readFileSync(`some-path.txt`)\n\n// Rest of gatsby-ssr.js file\n```\n\n----------------------------------------\n\nTITLE: Bumping Node Version in Gatsby - JavaScript\nDESCRIPTION: This feature bumps the minimum required Node.js version for Gatsby to 10.13.0. This ensures that Gatsby utilizes the latest features and security patches available in Node.js, enhancing the overall stability and performance of Gatsby projects. This update requires users to upgrade their Node.js installation to at least version 10.13.0.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-jss/CHANGELOG.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n**gatsby:** bump node min version to 10.13.0 ([#22400](https://github.com/gatsbyjs/gatsby/issues/22400)) ([83d681a](https://github.com/gatsbyjs/gatsby/commit/83d681a))\n```\n\n----------------------------------------\n\nTITLE: Using hasFeature in Gatsby Plugin Utils\nDESCRIPTION: Demonstrates how to use the `hasFeature` API from `gatsby-plugin-utils` to check if the current Gatsby version has a specific feature. This allows plugin authors to conditionally polyfill features for older Gatsby versions.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/v4.8/index.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { hasFeature } = require(`gatsby-plugin-utils`)\n\nif (!hasFeature(`image-service`)) {\n  // You can do things like polyfill image-service here so older versions have support as well\n}\n```\n\n----------------------------------------\n\nTITLE: Ensuring correct type for fastq concurrency parameter in gatsby-source-filesystem\nDESCRIPTION: This commit ensures the `fastq` concurrency parameter is of the correct type, addressing issue #34186 in the gatsby-source-filesystem package.  This fix prevents type-related errors during concurrent file processing.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-filesystem/CHANGELOG.md#_snippet_12\n\n\n\n----------------------------------------\n\nTITLE: Installing gatsby-plugin-mdx\nDESCRIPTION: This command installs the necessary packages for using gatsby-plugin-mdx, including the plugin itself, gatsby-source-filesystem for sourcing MDX files, and @mdx-js/react for rendering MDX components.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-mdx/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install gatsby-plugin-mdx gatsby-source-filesystem @mdx-js/react\n```\n\n----------------------------------------\n\nTITLE: Type Hinting in gatsby-config.js using JSDoc\nDESCRIPTION: This code shows how to use JSDoc to provide type hints in a `gatsby-config.js` file.  It imports the `GatsbyConfig` type and uses it to type the `gatsbyConfig` object.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/custom-configuration/typescript.md#_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\n// @ts-check\n\n/**\n * @type {import('gatsby').GatsbyConfig}\n */\nconst gatsbyConfig = {}\n\nmodule.exports = gatsbyConfig\n```\n\n----------------------------------------\n\nTITLE: Updating Markdown files to use JSX syntax\nDESCRIPTION: This example shows how to update HTML attributes in Markdown files to use JSX syntax. Specifically, it demonstrates how to change the `class` attribute to `className`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/routing/migrate-remark-to-mdx.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\n-<span class=\"highlight\">Hello World</span>\n+<span className=\"highlight\">Hello World</span>\n```\n\n----------------------------------------\n\nTITLE: Using Adapter in gatsby-config.js (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to include and use an adapter in the `gatsby-config.js` file. It requires the adapter module and then configures Gatsby to use the adapter with its default settings.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/previews-deploys-hosting/adapters.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst adapter = require(\"gatsby-adapter-foo\")\n\nmodule.exports = {\n  adapter: adapter()\n}\n```\n\n----------------------------------------\n\nTITLE: Updating @types/reach__router dependency\nDESCRIPTION: This commit updates the dependency [@types](https://github.com/types)/reach__router to version ^1.2.4. This ensures that gatsby-link is using the latest type definitions for @reach/router. Issue #16798 tracks this update.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-link/CHANGELOG.md#_snippet_11\n\n\n\n----------------------------------------\n\nTITLE: Defining Media Types\nDESCRIPTION: This GraphQL snippet shows how to specify the media types handled by a node type using the `@mimeTypes` extension. This can be used to determine child relations of the node.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/graphql-data-layer/schema-customization.md#_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\ntype Markdown implements Node\n  @mimeTypes(types: [\"text/markdown\", \"text/x-markdown\"]) {\n  id: ID!\n}\n```\n\n----------------------------------------\n\nTITLE: Importing global CSS in gatsby-browser.js\nDESCRIPTION: This JavaScript snippet imports a global CSS file (`./src/styles/global.css`) into the `gatsby-browser.js` file. This ensures that the styles are applied globally across the Gatsby site.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/styling/global-css.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"./src/styles/global.css\"\n\n// or:\n// require('./src/styles/global.css')\n```\n\n----------------------------------------\n\nTITLE: GraphQL aggregation query after codemod (GraphQL)\nDESCRIPTION: Example of a GraphQL query using the new syntax for aggregation, which uses nested input objects. This syntax is required for Gatsby 5.  Run the codemod to update.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v4-to-v5.md#_snippet_12\n\nLANGUAGE: GraphQL\nCODE:\n```\n{\n  allMarkdownRemark {\n    distinct(field: { frontmatter: { category: SELECT } })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Pushing changes to GitHub\nDESCRIPTION: These shell commands are used to add changes to git, commit the changes with a message, and push the local repository to the remote origin.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/e-commerce-with-datocms-and-snipcart/index.md#_snippet_13\n\nLANGUAGE: Shell\nCODE:\n```\ngit add .\ngit commit -m \"Make basic styling updates\"\ngit push -u origin master\n```\n\n----------------------------------------\n\nTITLE: Correct Alias Usage: Static Alias (JavaScript/JSX)\nDESCRIPTION: Shows examples of correct alias usage where the `alias` prop is a statically analyzable string, either inline or assigned to a variable or template literal.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/built-in-components/gatsby-slice.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// OK\n\nexport function MyComponent() {\n  const alias = \"my-image\"\n  return <Slice alias={alias} />\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// OK\n\nexport function MyComponent() {\n  const type = \"image\"\n  return <Slice alias={`my-${type}`} />\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// OK\n\nexport function MyComponent() {\n  return <Slice alias=\"my-image\" />\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Plugin to gatsby-config.js\nDESCRIPTION: This snippet shows how to include the `gatsby-transformer-xml` plugin in your `gatsby-config.js` file. By adding this plugin, Gatsby will automatically parse XML files during the build process.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-xml/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// In your gatsby-config.js\nplugins: [`gatsby-transformer-xml`]\n```\n\n----------------------------------------\n\nTITLE: Running JavaScript with Node.js\nDESCRIPTION: This snippet shows how to execute a JavaScript file using the Node.js runtime from the command line. It assumes that Node.js is already installed and that the user has a JavaScript file.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/glossary/node.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnode /Users/gatsbyfan/hello-world.js\n```\n\n----------------------------------------\n\nTITLE: Creating a New Gatsby Site from Starter\nDESCRIPTION: This command clones a Gatsby starter project directly from a GitHub repository. The first argument specifies the name of the new site, and the second argument is the URL of the starter repository.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-cli/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ngatsby new my-new-blog https://github.com/gatsbyjs/gatsby-starter-blog\n```\n\n----------------------------------------\n\nTITLE: Updating Babel Monorepo in Gatsby\nDESCRIPTION: This commit updates the Babel monorepo in the gatsby-plugin-nprogress package. Updating Babel ensures compatibility with the latest JavaScript features and improvements.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-nprogress/CHANGELOG.md#_snippet_5\n\nLANGUAGE: Markdown\nCODE:\n```\nupdate babel monorepo [#32564](https://github.com/gatsbyjs/gatsby/issues/32564) ([a554998](https://github.com/gatsbyjs/gatsby/commit/a554998b4f6765103b650813cf52dbfcc575fecf))\n```\n\n----------------------------------------\n\nTITLE: Fixing Warnings in pluginOptionsSchema\nDESCRIPTION: This commit fixes an issue where the plugin would throw an error on warnings in the `pluginOptionsSchema`. The fix ensures that warnings are handled gracefully without interrupting the plugin's functionality.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-flow/CHANGELOG.md#_snippet_6\n\n\n\n----------------------------------------\n\nTITLE: Display Mode Math Equation Markdown\nDESCRIPTION: This snippet demonstrates how to render a math equation in display mode using KaTeX within a Markdown file. The equation is surrounded by double dollar signs (`$$`) and newlines.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/using-remark/src/pages/2017-08-07---katex/index.md#_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n$$\na^2 + b^2 = c^2\n$$\n```\n\n----------------------------------------\n\nTITLE: Re-generating Changelogs\nDESCRIPTION: This commit re-generates the changelogs within the gatsby-transformer-yaml package. This ensures the changelogs are up-to-date and accurately reflect the changes made in the package.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-yaml/CHANGELOG.md#_snippet_4\n\nLANGUAGE: \nCODE:\n```\nre-generate changelogs [#32886](https://github.com/gatsbyjs/gatsby/issues/32886) ([417df15](https://github.com/gatsbyjs/gatsby/commit/417df15230be368a9db91f2ad1a9bc0442733177))\n```\n\n----------------------------------------\n\nTITLE: Defining a variable in JavaScript code fence\nDESCRIPTION: This JavaScript code snippet defines a boolean variable named `codefence` and assigns it the value `true`. It demonstrates how to embed JavaScript code within an MDX document using a code fence.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/e2e-tests/mdx/src/pages/index.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst codefence = true\n```\n\n----------------------------------------\n\nTITLE: Updating Bluebird Dependency to ^3.5.5 in Gatsby (JavaScript)\nDESCRIPTION: This code snippet shows the commit hash associated with updating the Bluebird dependency. This update likely includes performance improvements or bug fixes in promise handling.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-page-utils/CHANGELOG.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nec0be83\n```\n\n----------------------------------------\n\nTITLE: Including gatsby-plugin-stylus in gatsby-config.js\nDESCRIPTION: This snippet demonstrates the basic inclusion of the gatsby-plugin-stylus in the gatsby-config.js file. This enables Stylus support in your Gatsby project, allowing you to import and use `.styl` files.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-stylus/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nplugins: [`gatsby-plugin-stylus`]\n```\n\n----------------------------------------\n\nTITLE: Querying Gatsby Plugins with GraphQL\nDESCRIPTION: This GraphQL query retrieves a list of Gatsby plugins installed in the site, limiting the results to 10. It fetches the 'name' field for each plugin node.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/internal-data-bridge.md#_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  allSitePlugin(limit: 10) {\n    edges {\n      node {\n        name\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Install gatsby-plugin-no-sourcemaps (Shell)\nDESCRIPTION: Installs the gatsby-plugin-no-sourcemaps package as a dependency for your Gatsby project. This command uses npm, the Node Package Manager, to download and install the plugin from the npm registry.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-no-sourcemaps/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install gatsby-plugin-no-sourcemaps\n```\n\n----------------------------------------\n\nTITLE: Querying excerpt with HTML format (GraphQL)\nDESCRIPTION: A GraphQL query to retrieve the excerpt in HTML format.  This is useful for excerpts containing Markdown that should be rendered as HTML.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-remark/README.md#_snippet_10\n\nLANGUAGE: GraphQL\nCODE:\n```\n{\n  allMarkdownRemark {\n    edges {\n      node {\n        excerpt(format: HTML)\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Babel Monorepo in Gatsby\nDESCRIPTION: This commit updates the Babel monorepo in the gatsby-plugin-nprogress package. This update brings in the latest changes and improvements to Babel.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-nprogress/CHANGELOG.md#_snippet_9\n\nLANGUAGE: Markdown\nCODE:\n```\nupdate babel monorepo [#31143](https://github.com/gatsbyjs/gatsby/issues/31143) ([701ab2f](https://github.com/gatsbyjs/gatsby/commit/701ab2f6690c3f1bbaf60cf572513ea566cc9ec9))\n```\n\n----------------------------------------\n\nTITLE: Chore: Update Babel Monorepo\nDESCRIPTION: This chore updates the Babel monorepo to the latest version. This ensures the plugin is using the latest Babel features and fixes.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-google-tagmanager/CHANGELOG.md#_snippet_9\n\nLANGUAGE: None\nCODE:\n```\nupdate babel monorepo [#32996](https://github.com/gatsbyjs/gatsby/issues/32996) ([048c7a7](https://github.com/gatsbyjs/gatsby/commit/048c7a727bbc6a9ad8e27afba72ee20e946c4aaa))\n```\n\nLANGUAGE: None\nCODE:\n```\nupdate babel monorepo [#32564](https://github.com/gatsbyjs/gatsby/issues/32564) ([a554998](https://github.com/gatsbyjs/gatsby/commit/a554998b4f6765103b650813cf52dbfcc575fecf))\n```\n\nLANGUAGE: None\nCODE:\n```\nupdate babel monorepo [#32238](https://github.com/gatsbyjs/gatsby/issues/32238) ([466d4c0](https://github.com/gatsbyjs/gatsby/commit/466d4c087bbc96abb942a02c67243bcc9a4f2a0a))\n```\n\n----------------------------------------\n\nTITLE: Installing gatsby-plugin-mdx and removing gatsby-transformer-remark\nDESCRIPTION: This shell command installs the necessary MDX packages and removes the old Remark transformer. This ensures the project uses MDX for processing Markdown content.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/routing/migrate-remark-to-mdx.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install @mdx-js/react gatsby-plugin-mdx\nnpm remove gatsby-transformer-remark\n```\n\n----------------------------------------\n\nTITLE: Installing Typography.js Plugin\nDESCRIPTION: This command installs the necessary packages for using Typography.js with Gatsby, including the Gatsby plugin, React Typography, and Typography.js itself.  It should be executed in the project's root directory.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/using-typography-js.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install gatsby-plugin-typography react-typography typography\n```\n\n----------------------------------------\n\nTITLE: Starting Gatsby Development Server\nDESCRIPTION: This command navigates into the newly created project directory and starts the Gatsby development server. The server will watch for file changes and automatically rebuild the site.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/starters/blog/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncd my-blog-starter/\ngatsby develop\n```\n\n----------------------------------------\n\nTITLE: Update README instructions - Gatsby Telemetry\nDESCRIPTION: This commit updates the README file within the gatsby-telemetry package. The update focuses on providing better instructions for users interacting with the package, enhancing clarity and ease of use.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-telemetry/CHANGELOG.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Changing bash to shell in code language blocks\nDESCRIPTION: This commit changes the language designation from 'bash' to 'shell' in code language blocks within the Gatsby documentation. This ensures consistency and accuracy in specifying the shell language for code examples.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-prismjs/CHANGELOG.md#_snippet_11\n\n\n\n----------------------------------------\n\nTITLE: Bumping Minimum Node Version for Gatsby\nDESCRIPTION: This feature updates the minimum required Node.js version for Gatsby to 10.13.0. This change ensures compatibility with newer JavaScript features and improves the overall development experience.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-postcss/CHANGELOG.md#_snippet_18\n\n\n\n----------------------------------------\n\nTITLE: Installing webpack 5 Dependencies for Storybook\nDESCRIPTION: This command installs the necessary development dependencies to enable webpack 5 support within Storybook. This ensures compatibility between Storybook and Gatsby's webpack 5 configuration.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/testing/visual-testing-with-storybook.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm i @storybook/builder-webpack5 @storybook/manager-webpack5 --save-dev\n```\n\n----------------------------------------\n\nTITLE: Applying Patches for v5\nDESCRIPTION: This snippet applies patches specifically for version 5 of the package. Patches are used to fix issues without incrementing the version number.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-page-creator/CHANGELOG.md#_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\napply patches for v5 [#36796](https://github.com/gatsbyjs/gatsby/issues/36796) ([25f79b6](https://github.com/gatsbyjs/gatsby/commit/25f79b6c3719fdf09584ade620a05c66ba2a697c))\n```\n\n----------------------------------------\n\nTITLE: Replacing special filename characters in gatsby-source-filesystem\nDESCRIPTION: This commit replaces special filename characters to address issue #34249 in the gatsby-source-filesystem package.  This change helps prevent issues when creating files or directories with special characters in their names.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-filesystem/CHANGELOG.md#_snippet_11\n\n\n\n----------------------------------------\n\nTITLE: Updating cross-env dependency in Gatsby\nDESCRIPTION: Updates the cross-env dependency to version ^7.0.3. This chore aims to keep the project up-to-date with the latest dependency versions, potentially including bug fixes or performance improvements.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-catch-links/CHANGELOG.md#_snippet_6\n\n\n\n----------------------------------------\n\nTITLE: Using Alternative Sass Implementation\nDESCRIPTION: This snippet shows how to configure `gatsby-plugin-sass` to use the `node-sass` implementation instead of the default Dart implementation.  Requires the `node-sass` package to be installed.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-sass/README.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nplugins: [\n  {\n    resolve: `gatsby-plugin-sass`,\n    options: {\n      implementation: require(\"node-sass\"),\n    },\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Applying Patches for v5 JavaScript\nDESCRIPTION: This snippet applies patches for version 5 of the package. Applying patches fixes issues and introduces minor enhancements to the specified version.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-images-contentful/CHANGELOG.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\napply patches for v5 [#36796](https://github.com/gatsbyjs/gatsby/issues/36796) ([25f79b6](https://github.com/gatsbyjs/gatsby/commit/25f79b6c3719fdf09584ade620a05c66ba2a697c))\n```\n\n----------------------------------------\n\nTITLE: Embedding HTML Audio with Fallback\nDESCRIPTION: This HTML snippet demonstrates how to embed audio using the HTML5 audio tag, including a source element for specifying the audio file and a fallback paragraph for browsers that don't support the audio element. The audio element includes the controls attribute.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/using-remark-copy-linked-files/src/pages/2017-11-13-gatsby-remark-copy-linked-files/index.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<audio controls=\"controls\">\n  <source type=\"audio/mp3\" src=\"RAI-GramophoneGC-82979-01-1-001.mp3\"></source>\n  <p>Your browser does not support the audio element.</p>\n</audio>\n```\n\n----------------------------------------\n\nTITLE: Installing gatsby-transformer-react-docgen\nDESCRIPTION: This command installs the gatsby-transformer-react-docgen package from npm. This plugin allows Gatsby to parse component documentation using react-docgen.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-react-docgen/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install gatsby-transformer-react-docgen\n```\n\n----------------------------------------\n\nTITLE: Updating Peer Dependencies in Gatsby React Helmet\nDESCRIPTION: This code snippet refers to an update of the peer dependencies for the `gatsby-plugin-react-helmet` package. Issue #36965 documents this update.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-react-helmet/CHANGELOG.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nUpdate peerDeps [#36965](https://github.com/gatsbyjs/gatsby/issues/36965) ([b624442](https://github.com/gatsbyjs/gatsby/commit/b6244424fe8b724cbc23b80b2b4f5424cc2055a4))\n```\n\n----------------------------------------\n\nTITLE: MDX Frontmatter + Component Example\nDESCRIPTION: Shows an example of using frontmatter in an MDX file along with importing and rendering a React component. The description from the frontmatter is passed as a prop to the component.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/markdown-syntax.md#_snippet_8\n\nLANGUAGE: MDX\nCODE:\n```\n---\ndescription: A simple example of a description in frontmatter\n---\n\nimport { Chart } from \"../components/chart\"\n\n# Here‚Äôs a chart\n\nThe chart is rendered inside our MDX document.\n\n<Chart description={description} />\n```\n\n----------------------------------------\n\nTITLE: Installing gatsby-source-wordpress Plugin\nDESCRIPTION: This command installs the `gatsby-source-wordpress` plugin, which is essential for fetching data, including images, from a WordPress site into your Gatsby application.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/wordpress-image-tutorial.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install gatsby-source-wordpress\n```\n\n----------------------------------------\n\nTITLE: Handling .tsx files in build script - gatsby-cli JavaScript\nDESCRIPTION: This snippet updates the build script for the gatsby-cli to properly handle `.tsx` (TypeScript React) files. This ensures that TypeScript files are correctly compiled and included in the CLI's build process.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-cli/CHANGELOG.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nUpdate build script to properly handle .tsx files ([#22111](https://github.com/gatsbyjs/gatsby/issues/22111)) ([72750f3](https://github.com/gatsbyjs/gatsby/commit/72750f3))\n```\n\n----------------------------------------\n\nTITLE: Enable Partial Hydration Flag in Gatsby Config\nDESCRIPTION: Enables the `PARTIAL_HYDRATION` feature flag in the `gatsby-config.js` file.  This flag is necessary to activate Partial Hydration functionality in Gatsby builds.  The configuration is within the `module.exports` object.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/performance/partial-hydration.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  flags: {\n    PARTIAL_HYDRATION: true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating minor and patch dependencies\nDESCRIPTION: This commit updates minor and patch dependencies within the `gatsby-remark-code-repls` package.  This helps to maintain compatibility and stability by incorporating the latest bug fixes and minor enhancements from the package's dependencies.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-code-repls/CHANGELOG.md#_snippet_13\n\n\n\n----------------------------------------\n\nTITLE: Fixing plugin links\nDESCRIPTION: This code snippet fixes all `/packages` links to `/plugins`, addressing an issue related to incorrect links in the documentation or codebase. This ensures that all links pointing to plugin-related content are accurate and functional.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-excel/CHANGELOG.md#_snippet_26\n\nLANGUAGE: Text\nCODE:\n```\n- Fix all `/packages` links to `/plugins` Fix [#28816](https://github.com/gatsbyjs/gatsby/issues/28816) ([200e307](https://github.com/gatsbyjs/gatsby/commit/200e30748102a478267a67700238304a2a56068b))\n```\n\n----------------------------------------\n\nTITLE: Cloning the repository using SSH\nDESCRIPTION: This command clones the companion repository from GitHub using the SSH protocol. SSH is a more secure method and requires prior setup of SSH keys on your GitHub account.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/creating-a-source-plugin/part-1/index.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit clone git@github.com:gatsbyjs/creating-source-plugin-tutorial.git\n```\n\n----------------------------------------\n\nTITLE: Updating Bluebird Dependency (JavaScript)\nDESCRIPTION: This snippet showcases a dependency update for the Bluebird library.  Bluebird is a Promise library used internally by Gatsby and its plugins. Updating it ensures compatibility with the latest features and bug fixes in the Promise implementation.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-xml/CHANGELOG.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nupdate dependency bluebird to ^3.7.0 ([#18029](https://github.com/gatsbyjs/gatsby/issues/18029)) ([bd235a8](https://github.com/gatsbyjs/gatsby/commit/bd235a8))\n```\n\nLANGUAGE: javascript\nCODE:\n```\nupdate dependency bluebird to ^3.5.5 ([#16825](https://github.com/gatsbyjs/gatsby/issues/16825)) ([ec0be83](https://github.com/gatsbyjs/gatsby/commit/ec0be83))\n```\n\n----------------------------------------\n\nTITLE: Running Gatsby Development Server\nDESCRIPTION: These commands navigate into the newly created project directory and start the Gatsby development server.  `cd` changes the current directory, and `gatsby develop` starts the development server, which typically runs on port 8000.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/blog-netlify-cms-tutorial/index.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncd [your-project-name]\ngatsby develop\n```\n\n----------------------------------------\n\nTITLE: Querying the test field in WPGraphQL\nDESCRIPTION: This GraphQL query retrieves posts from WPGraphQL and includes the custom field `testGatsbyField`. It demonstrates how custom fields added to WPGraphQL can be queried.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-wordpress/docs/features/graphql-wordpress-and-gatsby.md#_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  posts {\n    nodes {\n      id\n      title\n      testGatsbyField\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Yarn\nDESCRIPTION: This command installs the project dependencies using Yarn. It's a prerequisite for local development and ensures that all required packages are available.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/peril/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Updating dependency 'got' to ^11.8.3\nDESCRIPTION: Updates the 'got' dependency to version ^11.8.3 for the gatsby-source-npm-package-search package to address potential issues and leverage the latest features and security patches.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-npm-package-search/CHANGELOG.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nupdate dependency got to ^11.8.3 for gatsby-source-npm-package-search [#34132](https://github.com/gatsbyjs/gatsby/issues/34132) ([a221d36](https://github.com/gatsbyjs/gatsby/commit/a221d366dcaeea4677cab6424925c5798965d8d7))\n```\n\n----------------------------------------\n\nTITLE: Removing obsolete `unstable_onPluginInit` codepaths\nDESCRIPTION: This snippet removes codepaths related to the obsolete `unstable_onPluginInit` API. Removing this outdated code improves the codebase's maintainability.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-page-creator/CHANGELOG.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nRemove obsolete `unstable_onPluginInit` codepaths [#37176](https://github.com/gatsbyjs/gatsby/issues/37176) ([bb42840](https://github.com/gatsbyjs/gatsby/commit/bb4284044e2025df483dd7c52df19dc20ecc7f8c))\n```\n\n----------------------------------------\n\nTITLE: Replacing deleteNodes with deleteNode\nDESCRIPTION: This snippet demonstrates how to replace the `deleteNodes` API with iterating over nodes and calling `deleteNode` for each node.  The `deleteNodes` API has been removed, requiring a manual iteration and deletion process.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v2-to-v3.md#_snippet_11\n\nLANGUAGE: JSX\nCODE:\n```\nconst nodes = [\"an-array-of-nodes\"]\n- deleteNodes(nodes)\n+ nodes.forEach(node => deleteNode(node))\n```\n\n----------------------------------------\n\nTITLE: Querying MDX frontmatter with GraphQL\nDESCRIPTION: GraphQL query to fetch frontmatter data (title, slug, date) from all MDX nodes. The `date` field is formatted using `formatString`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/routing/mdx.md#_snippet_3\n\nLANGUAGE: GraphQL\nCODE:\n```\nquery {\n  allMdx {\n    nodes {\n      frontmatter {\n        title\n        slug\n        date(formatString: \"MMMM DD, YYYY\")\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Request Headers and GET Request Params\nDESCRIPTION: This commit adds options for configuring Request Headers and GET Request Parameters.  These options enable more customized and flexible interactions with the Drupal API when fetching data. It requires providing configurations during plugin setup to specify headers and params.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-drupal/CHANGELOG.md#_snippet_25\n\n\n\n----------------------------------------\n\nTITLE: Updating fs-extra Dependency to v8 - JavaScript\nDESCRIPTION: This snippet updates the `fs-extra` dependency to version 8. `fs-extra` provides utility functions for file system operations, and updating it ensures that `gatsby-source-contentful` is using the latest version, potentially including performance enhancements and bug fixes related to file handling.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-contentful/CHANGELOG.md#_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nd891a19\n```\n\n----------------------------------------\n\nTITLE: Enabling Partial Hydration Feature Flag\nDESCRIPTION: This code snippet shows how to enable the `PARTIAL_HYDRATION` feature flag inside `gatsby-config.js`. Setting this flag to `true` enables the experimental Partial Hydration functionality in Gatsby 5.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/v5.0/index.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  flags: {\n    PARTIAL_HYDRATION: true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Gatsby Theme via npm\nDESCRIPTION: This shell command installs a Gatsby theme from npm into a Gatsby site. Replace `gatsby-theme-NAME` with the actual name of the published theme. This command adds the theme as a dependency to the Gatsby site's `package.json` file.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/plugins-and-themes/converting-a-starter.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install gatsby-theme-NAME\n```\n\n----------------------------------------\n\nTITLE: Re-generating Changelogs for Gatsby Plugin JSS (JavaScript)\nDESCRIPTION: This commit regenerates the changelogs for the gatsby-plugin-jss package. This process ensures that the changelogs accurately reflect the changes made in each version.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-jss/CHANGELOG.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nre-generate changelogs [#32886](https://github.com/gatsbyjs/gatsby/issues/32886) ([417df15](https://github.com/gatsbyjs/gatsby/commit/417df15230be368a9db91f2ad1a9bc0442733177))\n```\n\n----------------------------------------\n\nTITLE: Updating asciidoctor dependency\nDESCRIPTION: This snippet describes updating the asciidoctor dependency to version ^2.2.6 for the gatsby-transformer-asciidoc package. This update is intended to fix bugs or introduce new features in the asciidoctor library.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-asciidoc/CHANGELOG.md#_snippet_6\n\nLANGUAGE: Text\nCODE:\n```\nupdate dependency asciidoctor to ^2.2.6 for gatsby-transformer-asciidoc [#34642](https://github.com/gatsbyjs/gatsby/issues/34642) ([7302083](https://github.com/gatsbyjs/gatsby/commit/730208335e3ee78e27727dc6ad22cf7a0a6900d3))\n```\n\n----------------------------------------\n\nTITLE: Starting Gatsby Development Server\nDESCRIPTION: This command navigates into the newly created Gatsby site's directory ('my-hello-world-starter') and starts the Gatsby development server. The development server provides hot-reloading and other development-friendly features, allowing you to preview and test your site during development. It typically runs on http://localhost:8000.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/starters/hello-world/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ncd my-hello-world-starter/\ngatsby develop\n```\n\n----------------------------------------\n\nTITLE: Install Certutil on macOS\nDESCRIPTION: This command installs the `nss` package on macOS using Homebrew, which includes the `certutil` utility. Certutil is needed to update the trust store for various browsers.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/local-https.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nbrew install nss\n```\n\n----------------------------------------\n\nTITLE: Fixing WordPress Encoding Issue in gatsby-source-wordpress\nDESCRIPTION: This commit addresses an encoding issue in gatsby-source-wordpress where WordPress was not properly encoding certain characters. The fix ensures that data is properly encoded when retrieved from WordPress.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-wordpress/CHANGELOG.md#_snippet_11\n\nLANGUAGE: Commit Message\nCODE:\n```\nf4af142\n```\n\n----------------------------------------\n\nTITLE: Webpack Error Message Example\nDESCRIPTION: This snippet displays a typical webpack error message encountered during the build process when browser globals are improperly accessed in a Gatsby project.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/porting-from-create-react-app-to-gatsby.md#_snippet_12\n\nLANGUAGE: text\nCODE:\n```\nWebpackError: ReferenceError: window is not defined\n```\n\n----------------------------------------\n\nTITLE: Installing gatsby-source-wordpress via npm\nDESCRIPTION: Install the gatsby-source-wordpress plugin using npm to allow Gatsby to fetch data from a WordPress site with WPGraphQL enabled. This plugin acts as a bridge between Gatsby and the WordPress GraphQL API.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/glossary/wpgraphql.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install gatsby-source-wordpress\n```\n\n----------------------------------------\n\nTITLE: Feature: URL Resolution for Sass Modules\nDESCRIPTION: This commit enables url() resolution for modules within gatsby-plugin-sass. This feature allows Sass modules to correctly resolve relative URLs, improving the usability of imported assets within Sass files.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-sass/CHANGELOG.md#_snippet_9\n\n\n\n----------------------------------------\n\nTITLE: GraphQL aggregation query before codemod (GraphQL)\nDESCRIPTION: Example of a GraphQL query using the old syntax for aggregation, which uses an enum for the field. This syntax is deprecated in Gatsby 5.  Use the codemod to update.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v4-to-v5.md#_snippet_11\n\nLANGUAGE: GraphQL\nCODE:\n```\n{\n  allMarkdownRemark {\n    distinct(field: frontmatter___category)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Rich Text Content in Article\nDESCRIPTION: This JSX code snippet renders the Rich Text content within an `<article>` element, using the `renderRichText` function and the specified rendering options.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-contentful/README.md#_snippet_22\n\nLANGUAGE: jsx\nCODE:\n```\n<article>\n  {blogPost.mainContent && renderRichText(blogPost.mainContent, options)}\n</article>\n```\n\n----------------------------------------\n\nTITLE: Install Gatsby CLI globally\nDESCRIPTION: This command installs the Gatsby CLI globally, allowing you to use Gatsby commands from anywhere in your terminal. It's a prerequisite for using most Gatsby CLI commands.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/cheat-sheet.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g gatsby-cli\n```\n\n----------------------------------------\n\nTITLE: Updating Chokidar Dependency to v2.1.6 in Gatsby (JavaScript)\nDESCRIPTION: This code snippet shows the commit hash associated with updating the Chokidar dependency. This update likely includes improvements or fixes for file system watching.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-page-utils/CHANGELOG.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\ndbcf65f\n```\n\n----------------------------------------\n\nTITLE: Scripts with Sources\nDESCRIPTION: Shows how to load external scripts using the `src` property of the `<Script>` component. It also demonstrates how to load multiple scripts with the same source using unique `id` properties.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/built-in-components/gatsby-script.md#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Script src=\"https://my-example-script\" />\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<Script id=\"first-unique-id\" src=\"https://my-example-script\" />\n<Script id=\"second-unique-id\" src=\"https://my-example-script\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring PostCSS with postcss.config.js\nDESCRIPTION: Illustrates an alternative method of configuring PostCSS using a `postcss.config.js` file. This is helpful for more complex configurations or when sharing configurations across projects.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/styling/post-css.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst postcssPresetEnv = require(`postcss-preset-env`)\n\nmodule.exports = () => ({\n  plugins: [\n    postcssPresetEnv({\n      stage: 0,\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Feature: Adapters in gatsby-plugin-image\nDESCRIPTION: This snippet introduces adapters functionality to the gatsby-plugin-image.  It enhances the plugin with adapter capabilities for improved image handling.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-image/CHANGELOG.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nAdapters [#38232](https://github.com/gatsbyjs/gatsby/issues/38232) ([b2d4aef](https://github.com/gatsbyjs/gatsby/commit/b2d4aefa7716e3ef02a19b530a8a7e4678d086e1))\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query for Resized Image\nDESCRIPTION: This GraphQL code demonstrates how to query for a resized image with specified width, height, and grayscale options. This method returns a single image.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/built-in-components/gatsby-image.md#_snippet_6\n\nLANGUAGE: GraphQL\nCODE:\n```\nallImageSharp {\n  edges {\n    node {\n        resize(width: 150, height: 150, grayscale: true) {\n          src\n        }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Link from Gatsby (Diff)\nDESCRIPTION: Shows the necessary import change.  Import `Link` from the `gatsby` package instead of `gatsby-link`. Also removes the `gatsby-link` package.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v1-to-v2.md#_snippet_32\n\nLANGUAGE: diff\nCODE:\n```\nimport React from \"react\"\n- import Link from \"gatsby-link\"\n+ import { Link } from \"gatsby\"\n\nexport default function Page(props) {\n  return (\n    <Link to=\"/\">Home</Link>\n  );\n}\n```\n\nLANGUAGE: diff\nCODE:\n```\n\"dependencies\": {\n  \"gatsby\": \"latest\",\n  \"gatsby-image\": \"latest\",\n  \"gatsby-plugin-sharp\": \"latest\",\n- \"gatsby-link\": \"^1.6.39\"\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing ignore pattern in Gatsby plugin page creator\nDESCRIPTION: This commit fixes a bug where the ignore pattern in the gatsby-plugin-page-creator was not properly wrapped in quotes.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-page-creator/CHANGELOG.md#_snippet_35\n\nLANGUAGE: plaintext\nCODE:\n```\nwrap ignore pattern in quotes ([#23176](https://github.com/gatsbyjs/gatsby/issues/23176)) ([7563db6](https://github.com/gatsbyjs/gatsby/commit/7563db6))\n```\n\n----------------------------------------\n\nTITLE: Adjusting Dependencies\nDESCRIPTION: This commit adjusts the dependencies of the `gatsby-parcel-config` package, potentially updating or changing the versions of its dependent packages.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-parcel-config/CHANGELOG.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\nAdjust dependencies [#36583](https://github.com/gatsbyjs/gatsby/issues/36583) ([9e3f160](https://github.com/gatsbyjs/gatsby/commit/9e3f160cd0356114bc4f1b0dce62b415b5a52b64))\n```\n\n----------------------------------------\n\nTITLE: Markdown Emphasis Syntax\nDESCRIPTION: Illustrates the syntax for applying emphasis (italics), strong emphasis (bold), combined emphasis, and strikethrough formatting in Markdown.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/using-remark/src/pages/2016-04-15---hello-world-kitchen-sink/index.md#_snippet_1\n\nLANGUAGE: no-highlight\nCODE:\n```\nEmphasis, aka italics, with *asterisks* or _underscores_.\n\nStrong emphasis, aka bold, with **asterisks** or __underscores__.\n\nCombined emphasis with **asterisks and _underscores_**.\n\nStrikethrough uses two tildes. ~~Scratch this.~~\n```\n\n----------------------------------------\n\nTITLE: Fixing prop-types in babel-preset-gatsby\nDESCRIPTION: This commit removes prop-types in production environments for dependencies in the babel-preset-gatsby package. This ensures improved performance in production builds by excluding prop-type validation which is not necessary after development.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/babel-preset-gatsby/CHANGELOG.md#_snippet_7\n\n\n\n----------------------------------------\n\nTITLE: Example YAML data for dynamic typeName\nDESCRIPTION: Example YAML data containing `level` and `message` fields. Used to demonstrate dynamic `typeName` configuration based on the data within the YAML files.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-yaml/README.md#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n- level: info\n  message: hurray\n- level: info\n  message: it works\n- level: warning\n  message: look out\n```\n\n----------------------------------------\n\nTITLE: Replacing gatsbyjs.org with gatsbyjs.com in gatsby-source-filesystem\nDESCRIPTION: This commit replaces all instances of `gatsbyjs.org` with `gatsbyjs.com`, addressing issue #35101 in the gatsby-source-filesystem package. This is a maintenance chore to update the domain used in the package.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-filesystem/CHANGELOG.md#_snippet_7\n\n\n\n----------------------------------------\n\nTITLE: Fixing Package Changelog Links\nDESCRIPTION: This snippet fixes incorrect links within the package's changelog. The fix ensures that links to issues and commits are properly directed for easier navigation and debugging.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-pdf/CHANGELOG.md#_snippet_13\n\n\n\n----------------------------------------\n\nTITLE: Upgrading Storybook Version\nDESCRIPTION: This command updates the Storybook version within a Gatsby project. This is particularly relevant when upgrading from a previous Storybook version that relies on webpack 4, while Gatsby is currently supporting webpack 5.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/testing/visual-testing-with-storybook.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpx sb upgrade\n```\n\n----------------------------------------\n\nTITLE: Updating GraphQL query in page template to use mdx\nDESCRIPTION: This snippet updates the GraphQL query in the page template to use `mdx` instead of `markdownRemark`. This ensures the template fetches data from MDX nodes.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/routing/migrate-remark-to-mdx.md#_snippet_7\n\nLANGUAGE: GraphQL\nCODE:\n```\nmdx(id: { eq: $id }) {\n  id\n  excerpt(pruneLength: 160)\n  frontmatter {\n    # ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Build Gatsby site using npm\nDESCRIPTION: This command executes the build script defined in the `package.json` file, which typically runs the Gatsby build process. The build process generates the static files for the Gatsby site.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/benchmarks/create-pages/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Querying table of contents (GraphQL)\nDESCRIPTION: A GraphQL query to retrieve the table of contents from `MarkdownRemark` nodes. It shows how to access the `tableOfContents` field generated by the plugin.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-remark/README.md#_snippet_5\n\nLANGUAGE: GraphQL\nCODE:\n```\n{\n  allMarkdownRemark {\n    edges {\n      node {\n        html\n        tableOfContents\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Packages in Gatsby\nDESCRIPTION: This snippet shows a bug fix where minor updates were applied to various packages within the Gatsby project, excluding react, babel, and eslint. This ensures stability and compatibility across the project's dependencies.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-layout/CHANGELOG.md#_snippet_8\n\nLANGUAGE: diff\nCODE:\n```\n- update minor updates in packages except react, babel and eslint ([#17254](https://github.com/gatsbyjs/gatsby/issues/17254)) ([252d867](https://github.com/gatsbyjs/gatsby/commit/252d867))\n```\n\n----------------------------------------\n\nTITLE: Replacing gatsbyjs.org with gatsbyjs.com\nDESCRIPTION: This commit replaces all instances of gatsbyjs.org with gatsbyjs.com within the gatsby-plugin-layout package. This update is part of the effort to consolidate the Gatsby ecosystem under the gatsbyjs.com domain, addressing issue #35101.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-layout/CHANGELOG.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nreplace all uses of gatsbyjs.org with gatsbyjs.com [#35101](https://github.com/gatsbyjs/gatsby/issues/35101) ([16cff41](https://github.com/gatsbyjs/gatsby/commit/16cff413e154dc4e74fc5be631d52c76273e5cbc))\n```\n\n----------------------------------------\n\nTITLE: Bumping Node.js minimum version in Gatsby\nDESCRIPTION: This snippet bumps the minimum required Node.js version to 10.13.0.  This ensures that developers using the Gatsby project are using a supported version of Node.js.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-canonical-urls/CHANGELOG.md#_snippet_8\n\nLANGUAGE: none\nCODE:\n```\n**gatsby:** bump node min version to 10.13.0 ([#22400](https://github.com/gatsbyjs/gatsby/issues/22400)) ([83d681a](https://github.com/gatsbyjs/gatsby/commit/83d681a))\n```\n\n----------------------------------------\n\nTITLE: Updating Babel Monorepo in gatsby-plugin-sitemap\nDESCRIPTION: This commit updates the Babel monorepo to address potential bugs and ensure compatibility. The update is crucial for maintaining code transformation and compatibility with the latest JavaScript features.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-sitemap/CHANGELOG.md#_snippet_1\n\nLANGUAGE: TEXT\nCODE:\n```\nupdate babel monorepo [#37568](https://github.com/gatsbyjs/gatsby/issues/37568) ([13a0a9e](https://github.com/gatsbyjs/gatsby/commit/13a0a9e83dcb015b65dff6b73cdd5dea09c2988f))\n```\n\n----------------------------------------\n\nTITLE: Installing lmdb-store Shell Command\nDESCRIPTION: This command installs the `lmdb-store` package, which is a dependency required for enabling the experimental Parallel Query Running feature in Gatsby.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/v3.10/index.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install lmdb-store\n```\n\n----------------------------------------\n\nTITLE: Updating Babel Monorepo in gatsby-source-medium\nDESCRIPTION: This chore updates the babel monorepo dependency to the latest version within the gatsby-source-medium package. This ensures that the package utilizes the most recent features and security patches available in babel.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-medium/CHANGELOG.md#_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Bumping Node Minimum Version\nDESCRIPTION: This snippet bumps the minimum Node version to 10.13.0. The change ensures that the Gatsby plugin requires a more recent Node.js version. It addresses issue #22400 and improves compatibility with newer JavaScript features.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-cxs/CHANGELOG.md#_snippet_19\n\nLANGUAGE: Text\nCODE:\n```\n**gatsby:** bump node min version to 10.13.0 ([#22400](https://github.com/gatsbyjs/gatsby/issues/22400)) ([83d681a](https://github.com/gatsbyjs/gatsby/commit/83d681a))\n```\n\n----------------------------------------\n\nTITLE: Adding Sample Data (events.yml)\nDESCRIPTION: Adds sample event data to a YAML file. This data is sourced into the gatsby-theme-events theme.  It contains event names, locations, start/end dates and URLs.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/building-a-theme.md#_snippet_9\n\nLANGUAGE: YAML\nCODE:\n```\n- name: React Rally\n  location: Salt Lake City, UT\n  start_date: 2019-08-22\n  end_date: 2019-08-23\n  url: https://www.reactrally.com/\n\n- name: DinosaurJS\n  location: Denver, CO\n  start_date: 2019-06-20\n  end_date: 2019-06-21\n  url: https://dinosaurjs.org/\n\n- name: JSHeroes\n  location: Cluj-Napoca, Romania\n  start_date: 2020-04-23\n  end_date: 2020-04-24\n  url: https://jsheroes.io/\n\n- name: The Lead Developer\n  location: Austin, TX\n  start_date: 2019-11-08\n  end_date: 2019-11-08\n  url: https://austin2019.theleaddeveloper.com/\n```\n\n----------------------------------------\n\nTITLE: Updating Peer Dependencies\nDESCRIPTION: This commit updates the peer dependencies for the gatsby-plugin-cxs package, addressing issue #36965.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-cxs/CHANGELOG.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nUpdate peerDeps [#36965](https://github.com/gatsbyjs/gatsby/issues/36965) ([b624442](https://github.com/gatsbyjs/gatsby/commit/b6244424fe8b724cbc23b80b2b4f5424cc2055a4))\n```\n\n----------------------------------------\n\nTITLE: GraphQL Filter Example\nDESCRIPTION: This code snippet demonstrates a sample GraphQL filter and a set of nodes. The filter targets the `author.name` field within the `post` object and uses the `eq` comparator to match nodes where the author's name is 'Alex'.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/query-filters.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nfilter = { post: { author: { name: { eq: \"Alex\" } } } }\n\nnodes = [\n  { id: 1, post: { title: \"Hello, world!\", author: { name: \"Alex\" } } },\n  { id: 2, post: { title: \"Debugging Gatsby\", author: { name: \"Clarissa\" } } },\n  { id: 3, post: { title: \"Publishing on Gatsby\", author: { name: \"Ika\" } } },\n  { id: 4, post: { title: \"Fixed a bug\", author: { name: \"Alex\" } } },\n]\n```\n\n----------------------------------------\n\nTITLE: Gatsby Build Console Output\nDESCRIPTION: This code snippet shows the console output during the Gatsby build process, indicating the start and end of the bootstrap and build phases, along with their respective durations. It demonstrates the timing and completion of these key stages.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/conceptual/overview-of-the-gatsby-build-process.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ninfo bootstrap finished - 3.674 s\n...\ninfo Done building in 16.143999152 sec\n```\n\n----------------------------------------\n\nTITLE: Styling the Cart with CSS\nDESCRIPTION: This CSS snippet shows how to override the default Snipcart styles. Inspect the element in the browser's developer tools to find the correct Snipcart classes to override.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/adding-a-shopping-cart-with-snipcart.md#_snippet_7\n\nLANGUAGE: CSS\nCODE:\n```\n.snip-header {\n  background: #663399;\n}\n\n.snip-layout__main-container {\n  border: 2px solid black;\n  padding: 3px;\n}\n```\n\n----------------------------------------\n\nTITLE: Extend support for file system pages\nDESCRIPTION: This commit extends the functionality of the gatsby-plugin-page-creator to support client-only pages and collections of pages based on the file system. This enhancement allows developers to build more complex and dynamic websites with Gatsby.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-page-creator/CHANGELOG.md#_snippet_34\n\nLANGUAGE: TEXT\nCODE:\n```\n61d8849\n```\n\n----------------------------------------\n\nTITLE: Basic GraphQL Query Structure\nDESCRIPTION: This code snippet shows the basic structure of a GraphQL query. It includes the `query` keyword and empty curly braces where the query fields will be added. This is the starting point for building more complex queries within GraphiQL.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/querying-data/running-queries-with-graphiql.md#_snippet_0\n\nLANGUAGE: GraphQL\nCODE:\n```\nquery {\n\n}\n```\n\n----------------------------------------\n\nTITLE: Event Template Component (event.js)\nDESCRIPTION: This snippet defines a placeholder React component for the event template. It renders a paragraph indicating that the component needs to be built.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/building-a-theme.md#_snippet_24\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\"\n\nconst EventTemplate = () => <p>TODO: Build the event page template</p>\n\nexport default EventTemplate\n```\n\n----------------------------------------\n\nTITLE: Fix: Update GraphQL Tools Version\nDESCRIPTION: This snippet documents a bug fix in gatsby-source-graphql that updates the version of graphql-tools to the latest version. The update resolves an issue related to graphql-tools.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-graphql/CHANGELOG.md#_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\ngatsby-source-graphql: use the latest version of graphql-tools ([#26392](https://github.com/gatsbyjs/gatsby/issues/26392)) ([81a1c03](https://github.com/gatsbyjs/gatsby/commit/81a1c03))\n```\n\n----------------------------------------\n\nTITLE: Wrapping ignore pattern in quotes in Gatsby\nDESCRIPTION: Wraps an ignore pattern in quotes. This bug fix ensures that the ignore pattern is correctly interpreted, preventing potential issues with file or directory exclusion during build processes.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-catch-links/CHANGELOG.md#_snippet_9\n\n\n\n----------------------------------------\n\nTITLE: Setting Path Prefix in Gatsby\nDESCRIPTION: This snippet shows how to configure a path prefix for a Gatsby site hosted in a subdirectory. All paths on the site will be prefixed with the specified value.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/config-files/gatsby-config.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  pathPrefix: `/blog`,\n}\n```\n\n----------------------------------------\n\nTITLE: Navigate to site directory and start development server\nDESCRIPTION: This set of commands first navigates into the newly created site's directory and then starts the Gatsby development server to preview the site locally.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/cheat-sheet.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncd my-blog-starter/\n<br />\ngatsby develop\n```\n\n----------------------------------------\n\nTITLE: Adding exclude links ability to gatsby-plugin-catch-links\nDESCRIPTION: This commit introduces the ability to exclude specific links from being caught by the gatsby-plugin-catch-links plugin. This feature enhancement is associated with issue #15416 and closes issue #14835.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-catch-links/CHANGELOG.md#_snippet_12\n\nLANGUAGE: Text\nCODE:\n```\nAdd ability to exclude links ([#15416](https://github.com/gatsbyjs/gatsby/issues/15416)) ([46f514c](https://github.com/gatsbyjs/gatsby/commit/46f514c)), closes [#14835](https://github.com/gatsbyjs/gatsby/issues/14835)\n```\n\n----------------------------------------\n\nTITLE: Updating Babel Monorepo Dependency in Gatsby Plugin\nDESCRIPTION: This snippet updates the babel monorepo dependency for the gatsby-plugin-coffeescript package, addressing issue #32996.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-coffeescript/CHANGELOG.md#_snippet_6\n\nLANGUAGE: Other\nCODE:\n```\nupdate babel monorepo [#32996](https://github.com/gatsbyjs/gatsby/issues/32996) ([048c7a7](https://github.com/gatsbyjs/gatsby/commit/048c7a727bbc6a9ad8e27afba72ee20e946c4aaa))\n```\n\n----------------------------------------\n\nTITLE: Fixing Version Mismatch Check (JavaScript)\nDESCRIPTION: This code snippet shows the commit hash associated with fixing a version mismatch check in gatsby-page-utils. This improvement ensures accurate dependency version validation within the package.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-page-utils/CHANGELOG.md#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nd0fabd3\n```\n\n----------------------------------------\n\nTITLE: Communicating Site Title with GTM Services\nDESCRIPTION: This commit ensures that the site title is properly communicated with GTM services. This allows GTM to utilize the site title for better tracking and reporting, enhancing the overall analytics capabilities.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-google-tagmanager/CHANGELOG.md#_snippet_20\n\nLANGUAGE: text\nCODE:\n```\n**gatsby-plugin-google-tagmanager:** Properly communicate site title with GTM services ([#14384](https://github.com/gatsbyjs/gatsby/issues/14384)) ([f9bb78a](https://github.com/gatsbyjs/gatsby/commit/f9bb78a))\n```\n\n----------------------------------------\n\nTITLE: Update Gatsby CLI\nDESCRIPTION: This command updates the Gatsby CLI to the latest version using npm. It ensures that users have access to the most recent features and bug fixes.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-1/index.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install -g gatsby-cli\n```\n\n----------------------------------------\n\nTITLE: Installing Specific npm Package Latest Version\nDESCRIPTION: This snippet shows the command to install the latest version of a specific npm package. Replace `gatsby-plugin-sharp` with the actual package name you wish to update. This command will install the latest compatible version according to your package.json configurations.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v2-to-v3.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install gatsby-plugin-sharp@latest\n```\n\n----------------------------------------\n\nTITLE: Falling back to pruneLength in Gatsby Transformer Remark\nDESCRIPTION: This feature makes the package fall back to `pruneLength` if n is not provided. It was implemented in response to issue #19137.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-remark/CHANGELOG.md#_snippet_13\n\n\n\n----------------------------------------\n\nTITLE: Handling pathPrefix in plugin-catch-links\nDESCRIPTION: This commit ensures that gatsby-plugin-catch-links correctly handles the pathPrefix configuration. It addresses issue #9000.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-catch-links/CHANGELOG.md#_snippet_17\n\nLANGUAGE: Text\nCODE:\n```\nhandle pathPrefix ([#9000](https://github.com/gatsbyjs/gatsby/issues/9000)) ([6fed3e5](https://github.com/gatsbyjs/gatsby/commit/6fed3e5))\n```\n\n----------------------------------------\n\nTITLE: NetworkFirst Strategy for page-data\nDESCRIPTION: This commit updates the service worker configuration to use the NetworkFirst strategy for fetching page-data. This change prioritizes fetching page data from the network when available, falling back to the cache when offline, improving the user experience by ensuring the most up-to-date content is displayed when online.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-offline/CHANGELOG.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nd427663\n```\n\n----------------------------------------\n\nTITLE: Sample Response from Gentics Mesh GraphQL API\nDESCRIPTION: This JSON represents a sample response from the Gentics Mesh GraphQL API after executing the vehicle query. It contains an array of vehicle objects, each with UUID and fields like slug, weight, and the image path.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/sourcing-from-gentics-mesh.md#_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"data\": {\n    \"mesh\": {\n      \"nodes\": {\n        \"elements\": [\n          {\n            \"uuid\": \"a5d81285b4884df1981285b488adf1b5\",\n            \"fields\": {\n              \"slug\": \"embraer-legacy-600\",\n              \"weight\": 16000,\n              \"vehicleImage\": {\n                \"path\": \"/images/embraer-legacy-600.jpg\"\n              }\n            }\n          },\n          {\n            \"uuid\": \"adaf48da8c124049af48da8c12a0493e\",\n            \"fields\": {\n              \"slug\": \"delorean-dmc-12\",\n              \"weight\": 1230,\n              \"vehicleImage\": {\n                \"path\": \"/images/delorean-dmc-12.jpg\"\n              }\n            }\n          }\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating pdf2json Dependency in gatsby-transformer-pdf\nDESCRIPTION: This code snippet shows a bug fix that updates the pdf2json dependency to version ^1.3.1 within the gatsby-transformer-pdf package. This ensures compatibility and resolves potential issues related to the older version of the pdf2json library.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-pdf/CHANGELOG.md#_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\nupdate dependency pdf2json to ^1.3.1 for gatsby-transformer-pdf [#37862](https://github.com/gatsbyjs/gatsby/issues/37862) ([ba56cbb](https://github.com/gatsbyjs/gatsby/commit/ba56cbbe5a09156337b39b3020b6557cd8c1bf4f))\n```\n\n----------------------------------------\n\nTITLE: Removing boundActionCreators\nDESCRIPTION: This change removes boundActionCreators. boundActionCreators are functions that are pre-bound to a specific dispatch method, typically used within Redux or similar state management systems. Removing them might indicate a shift in state management approach or an optimization of the data flow within the plugin.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-npm-package-search/CHANGELOG.md#_snippet_11\n\nLANGUAGE: Text\nCODE:\n```\nRemove boundActionCreators [#29129](https://github.com/gatsbyjs/gatsby/issues/29129) ([b1f8663](https://github.com/gatsbyjs/gatsby/commit/b1f866394345117d9eec0cb47270a18a9d2bf485))\n```\n\n----------------------------------------\n\nTITLE: Registering Custom URL Generators in Gatsby Adapter Netlify (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to register custom URL generator modules for Image CDN and File CDN within the Gatsby Adapter Netlify. It involves importing the necessary modules and registering them within the adapter's initialization process.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/v5.13/index.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nhttps://github.com/gatsbyjs/gatsby/blob/4a780fbac717b1df337f156e2ac4b2da6478106b/packages/gatsby-adapter-netlify/src/index.ts#L159-L164\n```\n\n----------------------------------------\n\nTITLE: Set Log Level (Mac/Linux)\nDESCRIPTION: This command demonstrates how to set the `LOG_LEVEL` environment variable before running the `gatsby-preload-fonts` script on macOS or Linux. This allows you to control the amount of logging output from the script for debugging purposes.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-preload-fonts/README.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nLOG_LEVEL=info npm run preload-fonts\n```\n\n----------------------------------------\n\nTITLE: Properly slugify fields with periods\nDESCRIPTION: This commit fixes an issue where fields containing periods were not properly slugified. Ensures accurate and consistent URL generation.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-page-creator/CHANGELOG.md#_snippet_32\n\nLANGUAGE: TEXT\nCODE:\n```\nbf8ef84\n```\n\n----------------------------------------\n\nTITLE: Updating Node Version Requirement\nDESCRIPTION: This snippet updates the minimum required Node.js version to 10.13.0. It addresses issue #22400. This ensures that the plugin utilizes features and security updates available in newer Node.js versions. No direct dependencies, but the project requires Node.js.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-emotion/CHANGELOG.md#_snippet_9\n\nLANGUAGE: Other\nCODE:\n```\n**gatsby:** bump node min version to 10.13.0 ([#22400](https://github.com/gatsbyjs/gatsby/issues/22400)) ([83d681a](https://github.com/gatsbyjs/gatsby/commit/83d681a))\n```\n\n----------------------------------------\n\nTITLE: Running Gatsby in Development (Shell)\nDESCRIPTION: This command starts the Gatsby development server, allowing you to view and test the site locally.  It builds the site and watches for changes.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/sourcing-from-agilitycms.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\ngatsby develop\n```\n\n----------------------------------------\n\nTITLE: Updating Babel Monorepo in Javascript\nDESCRIPTION: This snippet updates the Babel monorepo within the gatsby-plugin-schema-snapshot. It addresses issue #37386 on the Gatsby repository.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-schema-snapshot/CHANGELOG.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nupdate babel monorepo [#37386](https://github.com/gatsbyjs/gatsby/issues/37386) ([b941876](https://github.com/gatsbyjs/gatsby/commit/b94187633d94d0f0071b38ffe93380dd802ec70f))\n```\n\n----------------------------------------\n\nTITLE: Switching to the start branch\nDESCRIPTION: This command switches the current branch to `start`, providing a clean boilerplate for the tutorial. This ensures a consistent starting point before making any changes.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/creating-a-source-plugin/part-1/index.mdx#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngit checkout start\n```\n\n----------------------------------------\n\nTITLE: Update Gatsby related packages using npm\nDESCRIPTION: This command updates specific Gatsby plugins to their latest versions using npm. Adjust package names to ones you are using.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v1-to-v2.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install gatsby-plugin-google-analytics@latest gatsby-plugin-netlify@latest gatsby-plugin-sass@latest\n```\n\n----------------------------------------\n\nTITLE: Fixing Vulnerable Packages in Gatsby\nDESCRIPTION: This commit updates vulnerable packages and includes React 17 in peerDependencies to ensure compatibility and security.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-styletron/CHANGELOG.md#_snippet_5\n\nLANGUAGE: none\nCODE:\n```\nupdate vulnerable packages, include React 17 in peerDeps [#28545](https://github.com/gatsbyjs/gatsby/issues/28545) ([18b5f30](https://github.com/gatsbyjs/gatsby/commit/18b5f30e367895aa5f3af46e4989b347912a0f35))\n```\n\n----------------------------------------\n\nTITLE: Importing Sass files in JavaScript\nDESCRIPTION: This snippet shows how to import Sass files (.scss and .sass) into a JavaScript file.  This allows Gatsby to process the Sass files and include the resulting CSS in the final output.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/styling/sass.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"./styles.scss\"\nimport \"./styles.sass\"\n```\n\n----------------------------------------\n\nTITLE: Install Gatsby Plugin via npm\nDESCRIPTION: This command installs the specified Gatsby plugin as a project dependency using npm.  It adds the plugin to the `package.json` file, allowing the Gatsby site to utilize the plugin's functionality.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/plugins-and-themes/using-a-plugin-in-your-site.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install gatsby-plugin-sitemap\n```\n\n----------------------------------------\n\nTITLE: Fixing Readme Example Sources\nDESCRIPTION: This snippet fixes an issue in the README file by adding example sources for gatsby-remark-embed-snippet. This helps users understand how to use the plugin by providing concrete examples.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-embed-snippet/CHANGELOG.md#_snippet_6\n\n\n\n----------------------------------------\n\nTITLE: Fixing Babel Monorepo in gatsby-plugin-react-css-modules\nDESCRIPTION: This commit updates the babel monorepo to fix an issue related to react-css-modules within the Gatsby plugin.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-react-css-modules/CHANGELOG.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nupdate babel monorepo [#37568](https://github.com/gatsbyjs/gatsby/issues/37568) ([13a0a9e](https://github.com/gatsbyjs/gatsby/commit/13a0a9e83dcb015b65dff6b73cdd5dea09c2988f))\n```\n\n----------------------------------------\n\nTITLE: Fixing Gatsby Source MongoDB Dependencies\nDESCRIPTION: This snippet updates minor and patch dependencies for the gatsby-source-mongodb package, fixing a reported issue. Updating dependencies ensures compatibility and resolves potential security vulnerabilities.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-mongodb/CHANGELOG.md#_snippet_11\n\n\n\n----------------------------------------\n\nTITLE: Create a new Gatsby project\nDESCRIPTION: Creates a new Gatsby project using the gatsby-cli and navigates into the newly created directory.  This is the starting point for the e-commerce tutorial.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/ecommerce-tutorial/index.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngatsby new e-commerce-gatsby-tutorial\ncd e-commerce-gatsby-tutorial\n```\n\n----------------------------------------\n\nTITLE: Move Layout Component\nDESCRIPTION: This shell command demonstrates how to move the layout component from `src/layouts/index.js` to `src/components/layout.js`.  This is not strictly required, but recommended as the layouts folder is no longer required.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v1-to-v2.md#_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\ngit mv src/layouts/index.js src/components/layout.js\n```\n\n----------------------------------------\n\nTITLE: Author JSON Data Example\nDESCRIPTION: This snippet shows an example of JSON data for authors, including `name`, `firstName`, and `email` fields.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/graphql-data-layer/schema-customization.md#_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"name\": \"Doe\",\n    \"firstName\": \"Jane\",\n    \"email\": \"jane@example.com\"\n  },\n  {\n    \"name\": \"Doe\",\n    \"firstName\": \"Zoe\",\n    \"email\": \"zoe@example.com\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Adding pluginOptionsSchema Validation\nDESCRIPTION: This commit adds validation for the `pluginOptionsSchema` within the gatsby-plugin-flow package. The validation ensures that the plugin options conform to the expected schema, preventing potential configuration errors.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-flow/CHANGELOG.md#_snippet_7\n\n\n\n----------------------------------------\n\nTITLE: Querying posts from WPGraphQL\nDESCRIPTION: This GraphQL query retrieves all posts from a WordPress site using WPGraphQL. It fetches the ID and title of each post within the nodes array.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-wordpress/docs/features/graphql-wordpress-and-gatsby.md#_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  posts {\n    nodes {\n      id\n      title\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Update Babel Monorepo in gatsby-remark-graphviz\nDESCRIPTION: This commit updates the Babel monorepo to the latest versions. It ensures compatibility with the latest Babel features and improvements, enhancing the performance and stability of the `gatsby-remark-graphviz` plugin.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-graphviz/CHANGELOG.md#_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Basic Site Metadata Query GraphQL\nDESCRIPTION: This query retrieves the title from the site's metadata. It targets the `site` object and accesses the `siteMetadata` field to obtain the `title` property.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/graphql-reference/content/queries.md#_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  site {\n    siteMetadata {\n      title\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing GSAP for AniLink\nDESCRIPTION: This command installs the GSAP (GreenSock Animation Platform) library, which is required for using the predefined transitions offered by the `AniLink` component.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/adding-common-features/adding-page-transitions-with-plugin-transition-link.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm install gsap\n```\n\n----------------------------------------\n\nTITLE: Bumping Babel Minor - JavaScript\nDESCRIPTION: This snippet bumps the babel minor version for the gatsby-plugin-benchmark-reporting package. It relates to issue #31857 on GitHub.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-benchmark-reporting/CHANGELOG.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nbump babel minor [#31857](https://github.com/gatsbyjs/gatsby/issues/31857) ([7d42e8d](https://github.com/gatsbyjs/gatsby/commit/7d42e8d866e46e9c39838d812d080d06433f7060))\n```\n\n----------------------------------------\n\nTITLE: Fixing Contentful sync limit (JavaScript)\nDESCRIPTION: This commit fixes an issue with the Contentful sync limit in gatsby-source-contentful. This ensures that the synchronization process can handle larger amounts of data.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-contentful/CHANGELOG.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\naf921bb\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query Variables\nDESCRIPTION: These are the query variables to use with GraphQL Playground when debugging Gatsby Source WordPress, to help troubleshoot missing data issues.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-wordpress/docs/debugging-and-troubleshooting.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"first\": 100,\n  \"after\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning the repository using HTTPS\nDESCRIPTION: This command clones the companion repository from GitHub using the HTTPS protocol. It's a common method for downloading the project to your local machine.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/creating-a-source-plugin/part-1/index.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/gatsbyjs/creating-source-plugin-tutorial.git\n```\n\n----------------------------------------\n\nTITLE: Installing gatsby-source-wordpress Plugin\nDESCRIPTION: This command-line instruction demonstrates how to install the gatsby-source-wordpress plugin using npm. This plugin enables Gatsby to fetch data from a WordPress site using the WPGraphQL API.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/sourcing-data/sourcing-from-wordpress.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install gatsby-source-wordpress\n```\n\n----------------------------------------\n\nTITLE: Query WooCommerce products with GraphQL\nDESCRIPTION: GraphQL query to retrieve the name and price of all WooCommerce products. This query can be used in a Gatsby component to display product information.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/sourcing-from-woocommerce.md#_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nallWcProducts {\n  edges {\n    node {\n      name\n      price\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enable Automatic JSX Runtime in Gatsby Config\nDESCRIPTION: This JavaScript snippet demonstrates how to enable the automatic JSX runtime in `gatsby-config.js`.  When enabled, you no longer need to import React to use JSX.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/config-files/gatsby-config.md#_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  jsxRuntime: \"automatic\",\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing pluginOptions in gatsby-plugin-catch-links\nDESCRIPTION: This commit fixes an issue related to plugin options in the gatsby-plugin-catch-links plugin. It addresses a bug identified by issue #17334.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-catch-links/CHANGELOG.md#_snippet_11\n\nLANGUAGE: Text\nCODE:\n```\nfix pluginOptions ([#17334](https://github.com/gatsbyjs/gatsby/issues/17334)) ([1d1df95](https://github.com/gatsbyjs/gatsby/commit/1d1df95))\n```\n\n----------------------------------------\n\nTITLE: Copying Environment File (Shell)\nDESCRIPTION: This command copies the `.env.development.example` file to `.env.development`, which will be used to store environment variables for development.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/sourcing-from-agilitycms.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ncp .env.development.example .env.development\n```\n\n----------------------------------------\n\nTITLE: Passing location to <Slice> component (JavaScript)\nDESCRIPTION: Illustrates passing the `location` object to the `<Slice>` component. The `location` object can be accessed in the Slice component for dynamic behavior.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/built-in-components/gatsby-slice.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexport function MyImage() {\n  const location = useLocation()\n\n  // highlight-next-line\n  return <Slice alias=\"my-image\" location={location} />\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Minor and Patch\nDESCRIPTION: Updates minor and patch versions for the gatsby-source-npm-package-search package, addressing bugs and introducing minor enhancements.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-npm-package-search/CHANGELOG.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nupdate minor and patch for gatsby-source-npm-package-search [#31704](https://github.com/gatsbyjs/gatsby/issues/31704) ([29b8d0a](https://github.com/gatsbyjs/gatsby/commit/29b8d0ab1116ebff68f23fa9a05b07baefafe476))\n```\n\n----------------------------------------\n\nTITLE: Import Message component from theme-ui\nDESCRIPTION: Imports the `Message` component from the `theme-ui` library. This component is used to display a simple message with a data-testid attribute for testing.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/e2e-tests/mdx/src/pages/html.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Message } from \"theme-ui\"\n```\n\n----------------------------------------\n\nTITLE: Updating Babel Monorepo in gatsby-plugin-google-analytics\nDESCRIPTION: Updates the Babel monorepo in the gatsby-plugin-google-analytics package. This chore ensures the plugin utilizes the newest Babel features and transformations, promoting enhanced performance and improved compatibility.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-google-analytics/CHANGELOG.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\na554998\n```\n\n----------------------------------------\n\nTITLE: Replacing Google Analytics domain\nDESCRIPTION: This snippet replaces the Google Analytics domain with Google Tag Manager in the gatsby-plugin-google-gtag plugin. This bug fix ensures that the plugin correctly uses Google Tag Manager for tracking.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-google-gtag/CHANGELOG.md#_snippet_16\n\n\n\n----------------------------------------\n\nTITLE: Start Gatsby Development Server with Host\nDESCRIPTION: This command starts the Gatsby development server and specifies the host IP address. This is useful for VM setups or listening on a local IP address.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-1/index.mdx#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ngatsby develop --host=0.0.0.0\n```\n\n----------------------------------------\n\nTITLE: Updating Parcel version in gatsby-parcel-config\nDESCRIPTION: This commit updates the Parcel dependency to version 2.8.1 within the gatsby-parcel-config package. This likely includes bug fixes or performance improvements within the Parcel bundler.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-parcel-config/CHANGELOG.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nUpdate parcel to v2.8.1 [#37217](https://github.com/gatsbyjs/gatsby/issues/37217) ([e2192c5](https://github.com/gatsbyjs/gatsby/commit/e2192c5297b291388ca1ae19d5aacbecce190ec3))\n```\n\n----------------------------------------\n\nTITLE: Commit and Push Changes to GitHub\nDESCRIPTION: This shell script commits the changes made to the Gatsby project and pushes them to a GitHub repository. It assumes that the user is in the top-level directory of the Gatsby site and has Git configured.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-6/index.mdx#_snippet_15\n\nLANGUAGE: Shell\nCODE:\n```\ngit add .\ngit commit -m \"Finished Gatsby Tutorial Part 6\"\ngit push\n```\n\n----------------------------------------\n\nTITLE: Upgrading non-breaking major versions in gatsby-plugin-emotion\nDESCRIPTION: This snippet illustrates a chore involving the upgrade of non-breaking major version dependencies within the `gatsby-plugin-emotion` package. This upgrade aims to leverage new features and improvements from newer versions of the dependencies without introducing breaking changes.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-emotion/CHANGELOG.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nUpgrade some non-breaking major versions [#37406](https://github.com/gatsbyjs/gatsby/issues/37406) ([2ea80c0](https://github.com/gatsbyjs/gatsby/commit/2ea80c02e464fe9306f6a1eccbb6c74983a76208))\n```\n\n----------------------------------------\n\nTITLE: Feature: Update hydration directive in gatsby-plugin-image\nDESCRIPTION: This snippet updates the partial hydration directive in the gatsby-plugin-image package.  This update enhances the plugin with partial hydration features for improved performance.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-image/CHANGELOG.md#_snippet_23\n\nLANGUAGE: JavaScript\nCODE:\n```\nUpdate partial hydration directive [#36868](https://github.com/gatsbyjs/gatsby/issues/36868) ([7f1b57c](https://github.com/gatsbyjs/gatsby/commit/7f1b57c5a5849b3bc997957b3370c3119e79d279))\n```\n\n----------------------------------------\n\nTITLE: Run gatsby-plugin-image Codemod\nDESCRIPTION: This command runs the gatsby-plugin-image codemod using jscodeshift. It transforms files in the current directory based on the specified codemod transformation script.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/image-migration-guide.md#_snippet_12\n\nLANGUAGE: Shell\nCODE:\n```\njscodeshift -t node_modules/gatsby-codemods/transforms/gatsby-plugin-image.js .\n```\n\n----------------------------------------\n\nTITLE: Updating Babel Monorepo in Gatsby Plugin JSS (JavaScript)\nDESCRIPTION: This commit updates the Babel monorepo dependency within the gatsby-plugin-jss package. Keeping Babel up-to-date ensures compatibility with the latest JavaScript features and improvements.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-jss/CHANGELOG.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nupdate babel monorepo [#32996](https://github.com/gatsbyjs/gatsby/issues/32996) ([048c7a7](https://github.com/gatsbyjs/gatsby/commit/048c7a727bbc6a9ad8e27afba72ee20e946c4aaa))\n```\n\n----------------------------------------\n\nTITLE: Fixing Typo in onPreInit Warning\nDESCRIPTION: This snippet addresses a typographical error in the `onPreInit` warning within the `gatsby-plugin-react-helmet` package. It resolves issue #36419 through a specific commit.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-react-helmet/CHANGELOG.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nTypo in `onPreInit` warning [#36419](https://github.com/gatsbyjs/gatsby/issues/36419) ([b7b3577](https://github.com/gatsbyjs/gatsby/commit/b7b3577c1f59fa261fb392d63cf9e2dd484a2e7e))\n```\n\n----------------------------------------\n\nTITLE: Benchmark gatsby-plugin-manifest with Gatsby-dev (Shell)\nDESCRIPTION: This command uses `gatsby-dev` to link the local `gatsby-plugin-manifest` package for development purposes. It compiles changes made to the plugin into the local `node_modules` for the benchmark.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/benchmarks/plugin-manifest/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n# In ./benchmarks/plugin-manifest\n# You'll need 'gatsby-dev' installed and configured globally.\ngatsby-dev --packages gatsby-plugin-manifest\n```\n\n----------------------------------------\n\nTITLE: Install Dependencies with --forceInstall\nDESCRIPTION: This feature adds functionality to install dependencies when no Gatsby dependencies are present, but the `--forceInstall` flag is used. The pull request is referenced by its GitHub issue number.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-dev-cli/CHANGELOG.md#_snippet_14\n\nLANGUAGE: Text\nCODE:\n```\n**gatsby-dev-cli:** install deps if there are no gatsby deps but --forceInstall was used ([#27055](https://github.com/gatsbyjs/gatsby/issues/27055)) ([b6cde3b](https://github.com/gatsbyjs/gatsby/commit/b6cde3bd5524c7a820a31a4d28fa6f34058ce1bf))\n```\n\n----------------------------------------\n\nTITLE: Deprecated `deleteNode` API: Pass the full node (gatsby-node.js)\nDESCRIPTION: In Gatsby v2, the `deleteNode` API accepted `node` as a named argument. This snippet demonstrates how to update your code to pass the complete `node` object directly to the `deleteNode` function.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v2-to-v3.md#_snippet_33\n\nLANGUAGE: diff\nCODE:\n```\nexports.onCreateNode = ({ actions, node }) => {\n  const { deleteNode } = actions\n\n- deleteNode({ node })\n+ deleteNode(node)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a new Gatsby site using the default starter\nDESCRIPTION: This command uses the Gatsby CLI to create a new Gatsby site named 'my-default-starter' based on the specified default starter repository. It initializes a basic Gatsby project structure.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/using-shopify/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngatsby new my-default-starter https://github.com/gatsbyjs/gatsby-starter-default\n```\n\n----------------------------------------\n\nTITLE: Updating Broken Link\nDESCRIPTION: This snippet updates a broken link within the gatsby-plugin-google-gtag package. This is a maintenance task to ensure that all links within the documentation and codebase are functional.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-google-gtag/CHANGELOG.md#_snippet_11\n\n\n\n----------------------------------------\n\nTITLE: Updating babel monorepo dependency\nDESCRIPTION: This commit updates the babel monorepo dependency within the `gatsby-remark-code-repls` package. This ensures the package uses the latest version of babel, benefiting from new features, bug fixes, and security patches related to javascript transpilation.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-code-repls/CHANGELOG.md#_snippet_12\n\n\n\n----------------------------------------\n\nTITLE: Updating Cross-Env Dependency\nDESCRIPTION: This commit updates the cross-env dependency to version ^7.0.3 in the gatsby-plugin-nprogress package. cross-env is used to set environment variables across platforms.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-nprogress/CHANGELOG.md#_snippet_10\n\nLANGUAGE: Markdown\nCODE:\n```\nupdate dependency cross-env to ^7.0.3 [#28505](https://github.com/gatsbyjs/gatsby/issues/28505) ([a819b9b](https://github.com/gatsbyjs/gatsby/commit/a819b9bfb663139f7b06c3ed7d6d6069a2382b2c))\n```\n\n----------------------------------------\n\nTITLE: Run Gatsby Query Timing (Master) - More Pages\nDESCRIPTION: This shell command executes the `runQueryTiming.sh` script to benchmark Gatsby query performance on the master branch, with a larger number of pages. It sets the number of page types (NUM_TYPES) and the number of pages (NUM_PAGES) as environment variables for the script.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/benchmarks/query/recording.md#_snippet_2\n\nLANGUAGE: Shell Script\nCODE:\n```\nquery $ NUM_TYPES=1 NUM_PAGES=20000 bin/runQueryTiming.sh\n67.812\n```\n\n----------------------------------------\n\nTITLE: Fix: Update fs-extra dependency in gatsby-plugin-image\nDESCRIPTION: This snippet updates the fs-extra dependency to version ^11.2.0 within the gatsby-plugin-image package. This change addresses a bug and ensures compatibility with the latest fs-extra features and fixes.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-image/CHANGELOG.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nupdate dependency fs-extra to ^11.2.0 [#38727](https://github.com/gatsbyjs/gatsby/issues/38727) ([cb33fe5](https://github.com/gatsbyjs/gatsby/commit/cb33fe5d02b3a42cf629baf948a7aae7a9e7dd0f))\n```\n\n----------------------------------------\n\nTITLE: Updating Babel Monorepo in gatsby-plugin-page-creator\nDESCRIPTION: This snippet updates the Babel monorepo to the latest version. This is to ensure that the plugin is using the most up-to-date tooling for transforming JavaScript code.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-page-creator/CHANGELOG.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nupdate babel monorepo [#37386](https://github.com/gatsbyjs/gatsby/issues/37386) ([b941876](https://github.com/gatsbyjs/gatsby/commit/b94187633d94d0f0071b38ffe93380dd802ec70f))\n```\n\n----------------------------------------\n\nTITLE: GraphQL import from gatsby (Diff)\nDESCRIPTION: Import GraphQL types from `gatsby/graphql` to prevent `Schema must contain unique named types but contains multiple types named \"<typename>\"` errors. `gatsby/graphql` exports all builtin GraphQL types as well as `graphQLJSON` type.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v1-to-v2.md#_snippet_40\n\nLANGUAGE: Diff\nCODE:\n```\n-const { GraphQLString } = require(`graphql`)\n+const { GraphQLString } = require(`gatsby/graphql`)\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query with Duotone Effect\nDESCRIPTION: This GraphQL code demonstrates how to query a fixed image and apply a duotone effect, specifying highlight and shadow colors.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/built-in-components/gatsby-image.md#_snippet_7\n\nLANGUAGE: GraphQL\nCODE:\n```\nfixed(\n  width: 800,\n  duotone: {\n    highlight: \"#f00e2e\",\n    shadow: \"#192550\"\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Embedding Snippets by name Markdown\nDESCRIPTION: An example that shows how to include named snippets from the embed by using the syntax `{snippet: \"snippet-name\"}`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-embed-snippet/README.md#_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\nThe function to use is:\n\n`embed:api.js{snippet: \"funcA\"}`\n\nAnd it is invoked via:\n\n`embed:api.js{snippet: \"invokeA\"}`\n```\n\n----------------------------------------\n\nTITLE: Update Gatsby Version in package.json\nDESCRIPTION: This snippet shows how to update the Gatsby version in the `package.json` file to version 2.0.0 or later. This ensures the project uses the updated Gatsby core libraries.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v1-to-v2.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n\"dependencies\": {\n  \"gatsby\": \"^2.0.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Basic Authentication Support in Gatsby Source Drupal\nDESCRIPTION: This feature adds support for basic authentication in the gatsby-source-drupal plugin. This allows Gatsby to authenticate with Drupal instances that require basic authentication for data access.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-drupal/CHANGELOG.md#_snippet_29\n\n\n\n----------------------------------------\n\nTITLE: Installing npm-check-updates globally\nDESCRIPTION: This command installs the `npm-check-updates` tool globally, allowing you to use it from any directory to check and update dependencies.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/plugins-and-themes/maintaining-a-plugin.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n npm install -g npm-check-updates\n```\n\n----------------------------------------\n\nTITLE: Updating Babel Monorepo - JavaScript\nDESCRIPTION: This snippet updates the Babel monorepo for the gatsby-plugin-benchmark-reporting package. It addresses issue #31143 on GitHub.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-benchmark-reporting/CHANGELOG.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nupdate babel monorepo [#31143](https://github.com/gatsbyjs/gatsby/issues/31143) ([701ab2f](https://github.com/gatsbyjs/gatsby/commit/701ab2f6690c3f1bbaf60cf572513ea566cc9ec9))\n```\n\n----------------------------------------\n\nTITLE: Writing PostCSS Styles\nDESCRIPTION: Illustrates how to write CSS using PostCSS features like custom media queries. The styles are written in a `.css` file.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/styling/post-css.md#_snippet_2\n\nLANGUAGE: CSS\nCODE:\n```\n@custom-media --med (width <= 50rem);\n\n@media (--med) {\n  a {\n    &:hover {\n      color: color-mod(black alpha(54%));\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Update Peer Dependencies in gatsby-remark-graphviz\nDESCRIPTION: This commit updates the peer dependencies for the `gatsby-remark-graphviz` package. Updating peer dependencies ensures compatibility with the latest versions of Gatsby and its related packages.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-graphviz/CHANGELOG.md#_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Changing relative URL to absolute URL\nDESCRIPTION: This commit changes a relative URL to an absolute URL for the gatsby-link readme. This improves the accessibility and clarity of the documentation. Issue #16197 relates to this change.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-link/CHANGELOG.md#_snippet_12\n\n\n\n----------------------------------------\n\nTITLE: Check Gatsby CLI Version\nDESCRIPTION: This command checks the currently installed version of the Gatsby CLI. It's used to ensure the CLI version is compatible with the tutorial's requirements.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-1/index.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngatsby --version\n```\n\n----------------------------------------\n\nTITLE: Creating a Note with MDX\nDESCRIPTION: This MDX code snippet demonstrates a simple note with a title and date in the frontmatter, followed by the content of the note.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/using-multiple-themes-together.md#_snippet_5\n\nLANGUAGE: MDX\nCODE:\n```\n---\ntitle: My first note\ndate: 2020-02-20\n---\n\nMultiple themes are awesome!\n```\n\n----------------------------------------\n\nTITLE: Markdown Ordered Lists\nDESCRIPTION: Illustrates how to create ordered lists in Markdown. Each list item starts with a number followed by a period.  Using '1.' for each item results in automatic numbering.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/markdown-syntax.md#_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n1. One\n1. Two\n1. Three\n```\n\n----------------------------------------\n\nTITLE: Checking Node.js Version\nDESCRIPTION: This snippet checks the installed Node.js version. This is a simple command to verify that Node.js has been installed correctly and that the expected version is being used.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/local-development/gatsby-on-linux.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnode -v\n```\n\n----------------------------------------\n\nTITLE: Installing Typography.js Theme\nDESCRIPTION: This command installs a pre-built theme called `typography-theme-funston` from npm. This provides a ready-made typography configuration that can be used in your project.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/using-typography-js.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm install typography-theme-funston\n```\n\n----------------------------------------\n\nTITLE: Installing Styletron Gatsby Plugin\nDESCRIPTION: Installs the gatsby-plugin-styletron, styletron-react, and styletron-engine-atomic npm packages. These packages are required to use Styletron with Gatsby.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-styletron/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install gatsby-plugin-styletron styletron-react styletron-engine-atomic\n```\n\n----------------------------------------\n\nTITLE: Configure Emotion plugin for global styles\nDESCRIPTION: Adds the gatsby-plugin-emotion to the plugins array in the gatsby-config.js file. This enables Emotion support for applying global styles in the Gatsby project.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/styling/emotion.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  plugins: [`gatsby-plugin-emotion`],\n}\n```\n\n----------------------------------------\n\nTITLE: Installing the Plugin\nDESCRIPTION: This command installs the gatsby-plugin-google-gtag package using npm. This is a necessary first step before configuring the plugin in your gatsby-config.js file.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-google-gtag/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install gatsby-plugin-google-gtag\n```\n\n----------------------------------------\n\nTITLE: Bumping node version\nDESCRIPTION: Bumps the minimum required Node.js version to 10.13.0 for the Gatsby project. This ensures compatibility with newer language features and dependencies.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-stylus/CHANGELOG.md#_snippet_10\n\n\n\n----------------------------------------\n\nTITLE: Correct links in package changelogs\nDESCRIPTION: This commit corrects the links in the package changelogs. This is to ensure that the links point to the correct resources.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-toml/CHANGELOG.md#_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\n### Bug Fixes\n\n- correct links in package changelogs ([#15630](https://github.com/gatsbyjs/gatsby/issues/15630)) ([d07b9dd](https://github.com/gatsbyjs/gatsby/commit/d07b9dd))\n```\n\n----------------------------------------\n\nTITLE: Updating Bluebird dependency in Gatsby\nDESCRIPTION: This commit updates the Bluebird dependency to version ^3.7.0.  Bluebird is a popular JavaScript Promises library.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-toml/CHANGELOG.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nupdate dependency bluebird to ^3.7.0 ([#18029](https://github.com/gatsbyjs/gatsby/issues/18029)) ([bd235a8](https://github.com/gatsbyjs/gatsby/commit/bd235a8))\n```\n\n----------------------------------------\n\nTITLE: Implementing Secrets and Delete Functionality in Gatsby Source Drupal\nDESCRIPTION: This code snippet adds secrets and delete functionality to the gatsby-source-drupal plugin, allowing users to manage sensitive information and delete nodes.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-drupal/CHANGELOG.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nsecrets and delete functionality\n```\n\n----------------------------------------\n\nTITLE: Querying excerpt with truncate option (GraphQL)\nDESCRIPTION: A GraphQL query to retrieve the excerpt with the `truncate` option enabled. This is useful for handling non-latin characters.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-remark/README.md#_snippet_12\n\nLANGUAGE: GraphQL\nCODE:\n```\n{\n  markdownRemark {\n    excerpt(truncate: true)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Patches for v5\nDESCRIPTION: This commit applies patches for version 5 of gatsby-plugin-react-css-modules, addressing compatibility and stability issues.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-react-css-modules/CHANGELOG.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\napply patches for v5 [#36796](https://github.com/gatsbyjs/gatsby/issues/36796) ([25f79b6](https://github.com/gatsbyjs/gatsby/commit/25f79b6c3719fdf09584ade620a05c66ba2a697c))\n```\n\n----------------------------------------\n\nTITLE: Fix typo in Gatsby plugin page creator README\nDESCRIPTION: This commit fixes a typo in the README.md file of the gatsby-plugin-page-creator.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-page-creator/CHANGELOG.md#_snippet_37\n\nLANGUAGE: plaintext\nCODE:\n```\n**gatsby-plugin-page-creator:** typo in README.md ([#20008](https://github.com/gatsbyjs/gatsby/issues/20008)) ([c77d820](https://github.com/gatsbyjs/gatsby/commit/c77d820))\n```\n\n----------------------------------------\n\nTITLE: Formatting Changelog Files\nDESCRIPTION: This commit formats the changelog files.  It ensures consistent formatting across all changelog files within the project for better readability and maintainability.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-react-helmet/CHANGELOG.md#_snippet_7\n\nLANGUAGE: Other\nCODE:\n```\n088f23b084b67f746a383e06e9216cef83270317\n```\n\n----------------------------------------\n\nTITLE: Setting Default WSL Distribution\nDESCRIPTION: This snippet sets the default Linux distribution to Ubuntu in Windows Subsystem for Linux (WSL). It uses the `wslconfig` command to configure the default distribution for WSL.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/local-development/gatsby-on-linux.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n# set default distribution to Ubuntu\nwslconfig /setdefault ubuntu\n```\n\n----------------------------------------\n\nTITLE: Install gatsby-plugin-typography\nDESCRIPTION: Installs the gatsby-plugin-typography, react-typography, and typography npm packages. These packages are required for using the plugin with Gatsby.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-typography/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install gatsby-plugin-typography react-typography typography\n```\n\n----------------------------------------\n\nTITLE: Adding PostCSS Plugin to Gatsby Config\nDESCRIPTION: Configures the gatsby-config.js file to include the `gatsby-plugin-postcss` plugin. This enables Gatsby to use PostCSS for processing CSS files.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/styling/post-css.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nplugins: [`gatsby-plugin-postcss`],\n```\n\n----------------------------------------\n\nTITLE: Bug Fix: Correct Links in Changelogs\nDESCRIPTION: This commit corrects the links within the package changelogs for gatsby-plugin-sass. Accurate links provide users with easy access to relevant information about each version of the package.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-sass/CHANGELOG.md#_snippet_11\n\n\n\n----------------------------------------\n\nTITLE: Materializing nodes in gatsbyPath\nDESCRIPTION: This snippet fixes an issue where nodes were not being correctly materialized in `gatsbyPath`. This ensures that the correct path information is available for page creation.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-page-creator/CHANGELOG.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nMaterialize nodes in gatsbyPath [#37111](https://github.com/gatsbyjs/gatsby/issues/37111) ([3095506](https://github.com/gatsbyjs/gatsby/commit/30955067549f72f923caa5465ae135b89e2052eb))\n```\n\n----------------------------------------\n\nTITLE: Throwing Error Instead of String in Gatsby\nDESCRIPTION: This commit fixes an issue where an error was thrown as a string instead of an actual error object. Changing it to an error object allows for correct error handling.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-wordpress/CHANGELOG.md#_snippet_22\n\n\n\n----------------------------------------\n\nTITLE: Fix: Correct script in gatsby-plugin-google-gtag\nDESCRIPTION: This code snippet addresses a bug by correcting the Google Tag Manager script to match Google's current standards within the gatsby-plugin-google-gtag package. It ensures the script is up-to-date and functions correctly with the latest Google Tag Manager implementation.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-google-gtag/CHANGELOG.md#_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n#### Bug Fixes\n\n- correct script to match google's current [#36993](https://github.com/gatsbyjs/gatsby/issues/36993) ([5cb5014](https://github.com/gatsbyjs/gatsby/commit/5cb50143057e42ca2e00e90b597bb681cdba7300))\n```\n\n----------------------------------------\n\nTITLE: Updating Babel Monorepo Dependency in Gatsby Plugin\nDESCRIPTION: This snippet updates the babel monorepo dependency for the gatsby-plugin-coffeescript package, addressing issue #31143.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-coffeescript/CHANGELOG.md#_snippet_12\n\nLANGUAGE: Other\nCODE:\n```\nupdate babel monorepo [#31143](https://github.com/gatsbyjs/gatsby/issues/31143) ([701ab2f](https://github.com/gatsbyjs/gatsby/commit/701ab2f6690c3f1bbaf60cf572513ea566cc9ec9))\n```\n\n----------------------------------------\n\nTITLE: Updating @types/reach__router dependency\nDESCRIPTION: This commit updates the dependency @types/reach__router to version ^1.2.6. This ensures that gatsby-link is using the latest type definitions for @reach/router. Issue #18405 tracks this update.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-link/CHANGELOG.md#_snippet_8\n\n\n\n----------------------------------------\n\nTITLE: Updating Peer Dependencies in gatsby-transformer-excel\nDESCRIPTION: This code snippet represents a chore update within the `gatsby-transformer-excel` package, updating the peer dependencies of the package. This ensures compatibility and proper functionality with other Gatsby plugins.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-excel/CHANGELOG.md#_snippet_2\n\nLANGUAGE: Patch\nCODE:\n```\nUpdate peerDeps [#36965](https://github.com/gatsbyjs/gatsby/issues/36965) ([b624442](https://github.com/gatsbyjs/gatsby/commit/b6244424fe8b724cbc23b80b2b4f5424cc2055a4))\n```\n\n----------------------------------------\n\nTITLE: Replace @nodeInterface with interface inheritance\nDESCRIPTION: Explains how to replace the `@nodeInterface` directive with interface inheritance in `gatsby-node.js` when defining queryable interfaces in Gatsby's GraphQL schema customization.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v3-to-v4.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nexports.createSchemaCustomization = ({ actions }) => {\n  const { createTypes } = actions\n  createTypes(`\n    interface Foo implements Node\n    {\n      id: ID!\n    }\n  `)\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Sharp Dependency (JavaScript)\nDESCRIPTION: This snippet updates the sharp dependency to version ^0.23.1.  This update likely incorporates performance enhancements, bug fixes, and new features within the sharp image processing library.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-sharp/CHANGELOG.md#_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nf19ad3c\n```\n\n----------------------------------------\n\nTITLE: Gatsby Error Output (Shell)\nDESCRIPTION: This code snippet shows the error output in the terminal when an invalid value is provided for the `endpoint` option in the `gatsby-config.ts` file.  This output confirms that the Joi validation schema is working correctly.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/creating-a-source-plugin/part-4/index.mdx#_snippet_30\n\nLANGUAGE: shell\nCODE:\n```\nERROR #11331  API.NODE.VALIDATION\n\nInvalid plugin options for \"plugin\":\n\n- \"endpoint\" must be a string\n```\n\n----------------------------------------\n\nTITLE: Example Custom Error Output in Shell\nDESCRIPTION: Shows an example of the custom error output in the shell, including the custom ID, plugin name, and additional context information. This demonstrates the enhanced error reporting provided by the custom error map.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/creating-a-source-plugin/part-4/index.mdx#_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nERROR #plugin_10000  PLUGIN\n\nSourcing from the GraphQL API failed: Cannot query field \"title2\" on type \"Post\". Did you mean \"title\"?\n\nfailed Sourcing from plugin API - 0.029s\n```\n\n----------------------------------------\n\nTITLE: Installing gatsby-plugin-sitemap\nDESCRIPTION: This command installs the gatsby-plugin-sitemap package as a dependency for your Gatsby project. This plugin is used to automatically generate an XML sitemap for your website.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/adding-common-features/creating-a-sitemap.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install gatsby-plugin-sitemap\n```\n\n----------------------------------------\n\nTITLE: Updating Manifest on Navigation in gatsby-plugin-manifest\nDESCRIPTION: This code snippet shows a feature addition for the gatsby-plugin-manifest. The feature implements updating the manifest on navigation. This enhancement ensures that the manifest file reflects the current state of the application after navigation events. The feature was implemented in commit f88a9e2.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-manifest/CHANGELOG.md#_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Bug Fix: React Compatibility (gatsby-plugin-google-tagmanager)\nDESCRIPTION: Addresses compatibility issues with react rc 2. This fix ensures the plugin functions correctly with the specified React version. The fix relates to issue #35108.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-google-tagmanager/CHANGELOG.md#_snippet_5\n\nLANGUAGE: None\nCODE:\n```\ncompatibility with react rc 2 [#35108](https://github.com/gatsbyjs/gatsby/issues/35108) ([0c61265](https://github.com/gatsbyjs/gatsby/commit/0c6126574d203c0e6fef173b76859cdcab2f13aa))\n```\n\n----------------------------------------\n\nTITLE: Applying patches for v4\nDESCRIPTION: This commit applies necessary patches for the v4 release of the package. It ensures that the package is compatible with v4 and addresses any known issues or bugs.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-twitter/CHANGELOG.md#_snippet_8\n\nLANGUAGE: TEXT\nCODE:\n```\napply patches for v4 [#33170](https://github.com/gatsbyjs/gatsby/issues/33170) ([f8c5141](https://github.com/gatsbyjs/gatsby/commit/f8c5141bf72108a53338fd01514522ae7a1b37bf))\n```\n\n----------------------------------------\n\nTITLE: Replacing boundActionCreators with actions\nDESCRIPTION: This snippet demonstrates how to replace instances of `boundActionCreators` with `actions` in your `gatsby-node.js` file.  The `boundActionCreators` API has been removed and replaced with `actions`. This is used inside `gatsby-node.js` when creating pages.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v2-to-v3.md#_snippet_10\n\nLANGUAGE: JSX\nCODE:\n```\nexports.createPages = (gatsbyArgs, pluginArgs) => {\n- const { boundActionCreators } = gatsbyArgs\n+ const { actions } = gatsbyArgs\n}\n```\n\n----------------------------------------\n\nTITLE: Theme UI Typography - JavaScript\nDESCRIPTION: This code extends the theme object by adding typographic values such as `fonts`, `fontWeights`, `lineHeights`, and `fontSizes`. These properties define the base typography styles for your site, making it easier to maintain consistency in your design.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/styling/theme-ui.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default {\n  colors: {\n    text: \"#333\",\n    background: \"#fff\",\n    primary: \"#639\",\n    secondary: \"#ff6347\",\n  },\n  fonts: {\n    body: \"system-ui, sans-serif\",\n    heading: \"system-ui, sans-serif\",\n    monospace: \"Menlo, monospace\",\n  },\n  fontWeights: {\n    body: 400,\n    heading: 700,\n    bold: 700,\n  },\n  lineHeights: {\n    body: 1.5,\n    heading: 1.125,\n  },\n  fontSizes: [12, 14, 16, 20, 24, 32, 48, 64, 72],\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Babel Monorepo\nDESCRIPTION: This commit updates the Babel monorepo to a newer version. Updating Babel ensures that the project uses the latest JavaScript syntax and features.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-javascript-frontmatter/CHANGELOG.md#_snippet_13\n\nLANGUAGE: Shell\nCODE:\n```\nupdate babel monorepo [#31143](https://github.com/gatsbyjs/gatsby/issues/31143) ([701ab2f](https://github.com/gatsbyjs/gatsby/commit/701ab2f6690c3f1bbaf60cf572513ea566cc9ec9))\n```\n\n----------------------------------------\n\nTITLE: Formatting Changelog Files\nDESCRIPTION: This commit formats the changelog files for the gatsby-plugin-layout package to improve readability and consistency.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-layout/CHANGELOG.md#_snippet_5\n\nLANGUAGE: Text\nCODE:\n```\nFormat changelog files ([088f23b](https://github.com/gatsbyjs/gatsby/commit/088f23b084b67f746a383e06e9216cef83270317))\n```\n\n----------------------------------------\n\nTITLE: Updating babel-plugin-dynamic-import-node dependency\nDESCRIPTION: This commit updates the babel-plugin-dynamic-import-node dependency to version 2. This update likely includes bug fixes, performance improvements, and potentially new features related to dynamic import handling in Node.js environments. Keeping dependencies up-to-date is important for stability and security.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/babel-preset-gatsby/CHANGELOG.md#_snippet_12\n\n\n\n----------------------------------------\n\nTITLE: Markdown Link Example\nDESCRIPTION: A sample markdown file demonstrating how to link to local files that will be copied to the `public` folder by the plugin.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-copy-linked-files/README.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: My awesome blog post\n---\n\nHey everyone, I just made a sweet PDF with lots of interesting stuff in it.\n\n[Download it now](my-awesome-pdf.pdf)\n```\n\n----------------------------------------\n\nTITLE: GraphQL Config in Subdirectory\nDESCRIPTION: This snippet illustrates how to configure the VSCode GraphQL plugin when your Gatsby project is located in a subdirectory, such as `site`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/local-development/graphql-typegen.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = require(\"./site/.cache/typegen/graphql.config.json\")\n```\n\n----------------------------------------\n\nTITLE: Image Generation Command\nDESCRIPTION: This command generates a pool of images with specified dimensions (100x100) and count (128000) using 8 worker threads. It requires an up-to-date Node.js version. The images are stored in generated_image_pools/jpg/wxh.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/benchmarks/gabe-fs-markdown-images/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nC=8 W=100 H=100 N=128000\n```\n\n----------------------------------------\n\nTITLE: JSON for GraphQL Query Variable\nDESCRIPTION: This JSON object defines a query variable named 'slug' with the value 'another-post'. It's used to dynamically pass the slug value to a GraphQL query in GraphiQL. The key is the variable name, and the value is the variable's value.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-6/index.mdx#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"slug\": \"another-post\"\n}\n```\n\n----------------------------------------\n\nTITLE: Bug fix for Preact HTML server rendering in Gatsby\nDESCRIPTION: This commit fixes an issue in the gatsby-plugin-preact package where Preact/compat did not render HTML correctly on the server side. The fix ensures that server-side rendering produces valid HTML output.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-preact/CHANGELOG.md#_snippet_1\n\nLANGUAGE: None\nCODE:\n```\n**gatsby-plugin-preact:** Make preact/compat server render HTML ([#15013](https://github.com/gatsbyjs/gatsby/issues/15013)) ([36ef955](https://github.com/gatsbyjs/gatsby/commit/36ef955))\n```\n\n----------------------------------------\n\nTITLE: Bug Fix: Update Bluebird Dependency\nDESCRIPTION: This snippet updates the Bluebird dependency to version ^3.7.0.  Bluebird is a Promise library, and this update likely addresses bug fixes or performance improvements within that library. No specific input or output parameters are described.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-json/CHANGELOG.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nbd235a8\n```\n\n----------------------------------------\n\nTITLE: Path Resolution in Gatsby Theme\nDESCRIPTION: This JavaScript code snippet demonstrates how to correctly resolve file paths within a Gatsby theme using `require.resolve`. It ensures that Gatsby finds the template files within the theme's directory, not the user's site directory. This is essential for themes to function correctly when installed as dependencies.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/plugins-and-themes/converting-a-starter.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst createPosts = (createPage, createRedirect, edges) => {\n  edges.forEach(({ node }, i) => {\n    // ...\n\n    createPage({\n      path: pagePath,\n      component: require.resolve(`./src/templates/post.js`), // highlight-line\n      context: {\n        id: node.id,\n        prev,\n        next,\n      },\n    })\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Promise Polyfill in Gatsby\nDESCRIPTION: This code shows how to disable the default Promise polyfill by setting the `polyfill` option to `false`.  This is useful if you want to provide your own polyfill.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/config-files/gatsby-config.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  polyfill: false,\n}\n```\n\n----------------------------------------\n\nTITLE: Navigating and Developing Gatsby Site (Shell)\nDESCRIPTION: Changes the current directory to the newly created Gatsby site and starts the development server using `npm run develop`. This command launches the Gatsby development environment.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/starters/gatsby-starter-minimal-ts/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ncd my-gatsby-site/\nnpm run develop\n```\n\n----------------------------------------\n\nTITLE: Serve the Gatsby production build\nDESCRIPTION: This command serves the production build of your Gatsby site for testing purposes. It allows you to preview the final version of your site before deployment.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/cheat-sheet.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngatsby serve\n```\n\n----------------------------------------\n\nTITLE: Adding an RSS Feed Documentation\nDESCRIPTION: This feature adds documentation for creating an RSS feed using Gatsby. It guides developers on how to set up and configure gatsby-plugin-feed to generate an RSS feed for their website. This was included in version 2.0.14.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-feed/CHANGELOG.md#_snippet_18\n\n\n\n----------------------------------------\n\nTITLE: Fix: Update semver dependency in gatsby-plugin-image\nDESCRIPTION: This snippet updates the semver dependency to version ^7.5.0 within the gatsby-plugin-image package. This resolves a bug and ensures the plugin is using a compatible version of semver.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-image/CHANGELOG.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nupdate dependency semver to ^7.5.0 [#38023](https://github.com/gatsbyjs/gatsby/issues/38023) ([2564f6b](https://github.com/gatsbyjs/gatsby/commit/2564f6b247b622b51522ff1f91fe2a9ef34fa571))\n```\n\n----------------------------------------\n\nTITLE: Bumping Babel Minor Version in Gatsby Plugin JSS (JavaScript)\nDESCRIPTION: This commit updates the Babel dependency in gatsby-plugin-jss to a newer minor version. The update is performed through issue #31857 and #31859, ensuring compatibility and incorporating new features.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-jss/CHANGELOG.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nbump babel minor [#31857](https://github.com/gatsbyjs/gatsby/issues/31857) [#31859](https://github.com/gatsbyjs/gatsby/issues/31859) ([8636025](https://github.com/gatsbyjs/gatsby/commit/863602567930a39142ed33d9d1f1813b7dec8686))\n```\n\n----------------------------------------\n\nTITLE: Markdown Ordered List\nDESCRIPTION: Demonstrates how to create an ordered list using numbers in Markdown. The list represents steps to bake something. Shows the basic syntax for creating an ordered list in Markdown.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/starters/blog/content/blog/hello-world/index.md#_snippet_3\n\nLANGUAGE: Markdown\nCODE:\n```\n1. Buy flour and salt\n1. Mix together with water\n1. Bake\n```\n\n----------------------------------------\n\nTITLE: Updating Bluebird Dependency\nDESCRIPTION: This snippet addresses a bug by updating the bluebird dependency to version ^3.5.5. Bluebird is a promise library that likely underlies the pdf transformation process.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-pdf/CHANGELOG.md#_snippet_12\n\n\n\n----------------------------------------\n\nTITLE: Adding Preview Feature\nDESCRIPTION: This commit introduces a preview feature to the gatsby-source-drupal plugin. This feature allows users to preview content from Drupal before it is published, enhancing the content creation workflow.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-drupal/CHANGELOG.md#_snippet_21\n\n\n\n----------------------------------------\n\nTITLE: Checking Gatsby CLI Version\nDESCRIPTION: This command checks the currently installed version of the Gatsby CLI. It ensures the user is running v3 or newer, as specified in the documentation.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-0/index.mdx#_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\ngatsby --version\n```\n\n----------------------------------------\n\nTITLE: Basic Button Component in Gatsby\nDESCRIPTION: This snippet shows the simplest way to use the Button component in Gatsby. It renders a button with the text 'Get Started' using the default styling.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/styleguide/src/components/Button/README.md#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<Button>Get Started</Button>\n```\n\n----------------------------------------\n\nTITLE: Installing Gatsby Source Plugin\nDESCRIPTION: This command installs the gatsby-source-buttercms plugin to your project.  It is a prerequirement to fetch contents from ButterCMS into your Gatsby site.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/sourcing-from-buttercms.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install gatsby-source-buttercms\n```\n\n----------------------------------------\n\nTITLE: Install Dependencies (Shell)\nDESCRIPTION: Installs the required dependencies for the Gatsby site using npm. This command must be run before starting the development server.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/using-multiple-local-plugins/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Creating data directory using onPreBootstrap\nDESCRIPTION: Creates a data directory within the gatsby-theme-events using the onPreBootstrap lifecycle API.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/building-a-theme.md#_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst fs = require(\"fs\")\n\n// Make sure the data directory exists\nexports.onPreBootstrap = ({ reporter }) => {\n  const contentPath = `${__dirname}/data/`\n\n  if (!fs.existsSync(contentPath)) {\n    reporter.info(`creating the ${contentPath} directory`)\n    fs.mkdirSync(contentPath)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Eslint Issues\nDESCRIPTION: This commit updates eslint to fix linting issues fix [#29988](https://github.com/gatsbyjs/gatsby/issues/29988)\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-dev-cli/CHANGELOG.md#_snippet_5\n\nLANGUAGE: Text\nCODE:\n```\nupdate eslint to fix linting issues fix [#29988](https://github.com/gatsbyjs/gatsby/issues/29988) ([5636389](https://github.com/gatsbyjs/gatsby/commit/5636389e8fa626c644e90abc14589e9961d98c68))\n```\n\n----------------------------------------\n\nTITLE: Markdown Unordered Lists\nDESCRIPTION: Shows how to create unordered lists in Markdown using '*', '-', or '+' as list item markers. Nested lists are created by indenting list items.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/markdown-syntax.md#_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n* Gatsby\n  * docs\n- Gatsby\n  - docs\n+ Gatsby\n  + docs\n```\n\n----------------------------------------\n\nTITLE: Add Paths to moduleNameMapper (jest.config.js)\nDESCRIPTION: Add tsconfig paths to Jest moduleNameMapper.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/testing/unit-testing.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n  moduleNameMapper: {\n    '.+\\\\.(css|styl|less|sass|scss)$': `identity-obj-proxy`,\n    '.+\\\\.(jpg|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)$': `<rootDir>/__mocks__/file-mock.js`,\n    ...paths,\n  },\n```\n\n----------------------------------------\n\nTITLE: Updating babel monorepo\nDESCRIPTION: This snippet describes updating the babel monorepo. This update is intended to update babel dependencies.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-asciidoc/CHANGELOG.md#_snippet_10\n\nLANGUAGE: Text\nCODE:\n```\nupdate babel monorepo [#32564](https://github.com/gatsbyjs/gatsby/issues/32564) ([a554998](https://github.com/gatsbyjs/gatsby/commit/a554998b4f6765103b650813cf52dbfcc575fecf))\n```\n\n----------------------------------------\n\nTITLE: Installing Styled Components Dependencies\nDESCRIPTION: This command installs the necessary npm packages for using Styled Components with Gatsby. It includes the core styled-components library, the Gatsby plugin for styled-components, and the babel plugin.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/styling/styled-components.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install gatsby-plugin-styled-components styled-components babel-plugin-styled-components\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query (Proposed Syntax)\nDESCRIPTION: This GraphQL query shows the proposed syntax for sorting data. It aims to simplify the sorting mechanism by directly specifying the field and order within the `sort` argument.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/v4.23/index.md#_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\n{\n  allMarkdownRemark(sort: { frontmatter: { date: DESC } }) {\n    nodes {\n      ...fields\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Babel Monorepo (Another Instance)\nDESCRIPTION: This commit updates the babel monorepo to the latest version. This keeps the babel dependencies up to date.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-cxs/CHANGELOG.md#_snippet_9\n\n\n\n----------------------------------------\n\nTITLE: Applying Patches for v4\nDESCRIPTION: This commit applies patches specifically for version 4 of the gatsby-source-graphql plugin. These patches address compatibility issues and ensure proper functionality within the v4 ecosystem.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-graphql/CHANGELOG.md#_snippet_22\n\nLANGUAGE: Text\nCODE:\n```\napply patches for v4 [#33170](https://github.com/gatsbyjs/gatsby/issues/33170) ([f8c5141](https://github.com/gatsbyjs/gatsby/commit/f8c5141bf72108a53338fd01514522ae7a1b37bf))\n```\n\n----------------------------------------\n\nTITLE: Update Peer Dependencies\nDESCRIPTION: This code snippet represents an update to the peer dependencies of the `gatsby-plugin-postcss` package. Updating peer dependencies ensures compatibility and correct functionality with other packages in the Gatsby ecosystem.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-postcss/CHANGELOG.md#_snippet_9\n\nLANGUAGE: none\nCODE:\n```\nUpdate peerDeps [#36965](https://github.com/gatsbyjs/gatsby/issues/36965) ([b624442](https://github.com/gatsbyjs/gatsby/commit/b6244424fe8b724cbc23b80b2b4f5424cc2055a4))\n```\n\n----------------------------------------\n\nTITLE: Running Gatsby Markdown Benchmark\nDESCRIPTION: This snippet shows the commands to install dependencies and run the Gatsby markdown benchmark using Yarn. It assumes the necessary dependencies are defined in the package.json file and Yarn is installed.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/benchmarks/markdown_id/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nyarn\nyarn bench\n```\n\n----------------------------------------\n\nTITLE: Resulting JSON from GraphQL Query (JSON)\nDESCRIPTION: This JSON represents the result of the GraphQL query when the `nodePerFile` option is enabled. It shows the data structure returned, with each node containing the `ingredients` array (the content of the CSV file) and the name of the parent file.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-csv/README.md#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"allFoodstuffs\": {\n      \"nodes\": [\n        {\n          \"parent\": {\n            \"name\": \"vegetables\"\n          },\n          \"ingredients\": [\n            {\n              \"ingredient\": \"potato\",\n              \"amount\": 32\n            },\n            {\n              \"ingredient\": \"lettuce\",\n              \"amount\": 12\n            }\n          ]\n        },\n        {\n          \"parent\": {\n            \"name\": \"grains\"\n          },\n          \"ingredients\": [\n            {\n              \"ingredient\": \"barley\",\n              \"amount\": 2\n            },\n            {\n              \"ingredient\": \"wheat\",\n              \"amount\": 42\n            }\n          ]\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Correcting Changelog Links in Gatsby\nDESCRIPTION: This commit corrects the links within the package changelogs in Gatsby. It ensures that the links point to the correct resources, making it easier for users to navigate and understand the changes introduced in each version.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-styled-jsx/CHANGELOG.md#_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\ncorrect links in package changelogs ([#15630](https://github.com/gatsbyjs/gatsby/issues/15630)) ([d07b9dd](https://github.com/gatsbyjs/gatsby/commit/d07b9dd))\n```\n\n----------------------------------------\n\nTITLE: Initializing a New Gatsby Project with npm\nDESCRIPTION: This command initializes a new Gatsby project using the `npm init gatsby` command. It prompts the user to provide a name for the project.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm init gatsby\n```\n\n----------------------------------------\n\nTITLE: Chore: Update peerDeps\nDESCRIPTION: This code snippet updates the peer dependencies of the `gatsby-remark-prismjs` package.  Updating peer dependencies ensures compatibility with other packages within the Gatsby ecosystem, addressing issue #36965.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-prismjs/CHANGELOG.md#_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\nb624442(https://github.com/gatsbyjs/gatsby/commit/b6244424fe8b724cbc23b80b2b4f5424cc2055a4)\n```\n\n----------------------------------------\n\nTITLE: Markdown Blockquote Syntax\nDESCRIPTION: Explains how to create blockquotes in Markdown using the '>' character. Multiple '>' characters create nested blockquotes. Markdown syntax can be used inside blockquotes.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/markdown-syntax.md#_snippet_6\n\nLANGUAGE: Markdown\nCODE:\n```\n> blockquote\n>\n> > nested blockquote\n>\n> > **I'm bold!**\n>\n> more quotes\n```\n\n----------------------------------------\n\nTITLE: Preventing Duplicate Copy of Files (JavaScript)\nDESCRIPTION: This snippet prevents the duplicate copying of the same file. This optimization avoids unnecessary file operations and reduces resource consumption, especially in projects with many images.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-sharp/CHANGELOG.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n93f0645\n```\n\n----------------------------------------\n\nTITLE: Update Cross-Env Dependency\nDESCRIPTION: This snippet updates the cross-env dependency to version ^7.0.3. Cross-env is a tool for setting environment variables across platforms.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-preload-fonts/CHANGELOG.md#_snippet_5\n\n\n\n----------------------------------------\n\nTITLE: Content Sync URL Example\nDESCRIPTION: Illustrates the structure of a Content Sync URL used to redirect users to the Gatsby Cloud waiting room for content previews. The URL includes the base Content Sync URL, source plugin name, manifest ID, and content ID.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/creating-a-source-plugin/part-7/index.mdx#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nhttps://gatsbyjs.com/content-sync/123-456/gatsby-source-contentful/123-2023-03-01/123456/\n```\n\n----------------------------------------\n\nTITLE: Updating xlsx Dependency in GatsbyJS\nDESCRIPTION: This snippet addresses updating the `xlsx` dependency in `gatsby-transformer-excel`. This change ensures compatibility and addresses potential issues related to the excel parsing library. The dependency is updated to ensure it aligns with the requirements of `gatsby-transformer-excel`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-excel/CHANGELOG.md#_snippet_10\n\nLANGUAGE: None\nCODE:\n```\nupdate dependency xlsx to ^0.17.1 for gatsby-transformer-excel [#32992](https://github.com/gatsbyjs/gatsby/issues/32992) ([67c82e2](https://github.com/gatsbyjs/gatsby/commit/67c82e2b862fe39ca6af6d4060ace43c55f7f20d))\n```\n\n----------------------------------------\n\nTITLE: Updating Bluebird Dependency in gatsby-source-wordpress\nDESCRIPTION: This commit updates the bluebird dependency to version ^3.7.0 in the gatsby-source-wordpress package. Updating dependencies ensures access to the latest features and security patches.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-wordpress/CHANGELOG.md#_snippet_6\n\nLANGUAGE: Commit Message\nCODE:\n```\nbd235a8\n```\n\n----------------------------------------\n\nTITLE: Install Dependencies (npm)\nDESCRIPTION: This command installs the project's dependencies using npm. The `--legacy-peer-deps` flag is included to handle potential peer dependency issues.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/using-graphql-typegen/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --legacy-peer-deps\n```\n\n----------------------------------------\n\nTITLE: Install gatsby-plugin-sharp\nDESCRIPTION: This command installs the gatsby-plugin-sharp package using npm. This plugin provides image processing capabilities using the Sharp library within a Gatsby project.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-sharp/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install gatsby-plugin-sharp\n```\n\n----------------------------------------\n\nTITLE: Run Benchmark using Yarn\nDESCRIPTION: Runs the benchmark process, likely including building the Gatsby site. This is an alternative to manually running the build command.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/benchmarks/markdown_table/README.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nyarn bench\n```\n\n----------------------------------------\n\nTITLE: Navigate to Desktop Directory\nDESCRIPTION: This command changes the current directory in the command line to the Desktop. This allows the user to create the Gatsby site on their desktop.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-1/index.mdx#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncd Desktop\n```\n\n----------------------------------------\n\nTITLE: Markdown Link Syntax\nDESCRIPTION: Explains the syntax for creating links in Markdown. The link text is enclosed in square brackets, followed by the URL in parentheses. URLs can be relative or remote.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/markdown-syntax.md#_snippet_3\n\nLANGUAGE: Markdown\nCODE:\n```\n[Text](url)\n```\n\n----------------------------------------\n\nTITLE: Install gatsby-transformer-documentationjs\nDESCRIPTION: This command installs the `gatsby-transformer-documentationjs` plugin from npm. It's a necessary step to use the plugin in your Gatsby project.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-documentationjs/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install gatsby-transformer-documentationjs\n```\n\n----------------------------------------\n\nTITLE: Installing the Kontent.ai Gatsby Source Plugin\nDESCRIPTION: This command installs the @kontent-ai/gatsby-source plugin, which allows Gatsby to fetch data from Kontent.ai.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/sourcing-data/sourcing-from-kontent-ai.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install @kontent-ai/gatsby-source\n```\n\n----------------------------------------\n\nTITLE: Install npm-check module\nDESCRIPTION: This command installs the npm-check module as a dev dependency. npm-check allows for interactive updating of dependencies.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/upgrade-gatsby-and-dependencies.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnpm install npm-check --save-dev\n```\n\n----------------------------------------\n\nTITLE: Create Gatsby site for global styles\nDESCRIPTION: Creates a new Gatsby site using the hello-world starter to demonstrate global styles with Emotion.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/styling/emotion.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\ngatsby new global-styles https://github.com/gatsbyjs/gatsby-starter-hello-world\ncd global-styles\nnpm install gatsby-plugin-emotion @emotion/react @emotion/styled\n```\n\n----------------------------------------\n\nTITLE: Update Gatsby Version using npm\nDESCRIPTION: This command updates the Gatsby package to the latest version using npm.  This ensures the project uses the updated Gatsby core libraries.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v1-to-v2.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install gatsby@latest\n```\n\n----------------------------------------\n\nTITLE: Updating Babel Monorepo in gatsby-plugin-google-analytics\nDESCRIPTION: Updates the Babel monorepo in the gatsby-plugin-google-analytics package. This chore ensures the project uses the most current Babel features and transformations.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-google-analytics/CHANGELOG.md#_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\n701ab2f\n```\n\n----------------------------------------\n\nTITLE: Install gatsby-source-contentful\nDESCRIPTION: Installs the gatsby-source-contentful plugin using npm. This plugin is necessary to fetch content from Contentful into your Gatsby project.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/sourcing-data/sourcing-from-contentful.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install gatsby-source-contentful\n```\n\n----------------------------------------\n\nTITLE: Cloning Gatsby Repository\nDESCRIPTION: This command clones the Gatsby repository from GitHub. It's the first step in setting up the example project locally.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/using-multiple-themes/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone git@github.com:gatsbyjs/gatsby.git\n```\n\n----------------------------------------\n\nTITLE: JavaScript snippet naming JavaScript\nDESCRIPTION: shows an example of snippet naming using comments\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-embed-snippet/README.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// start-snippet{funcA}\nfunction factorial(x) {\n    if (x <= 1) return 1\n    else return x * factorial(x - 1)\n}\n// end-snippet{funcA}\n\nfunction display() {\n    let x = 5\n    // start-snippet{invokeA}\n    let xfact = factorial(x)\n    // end-snippet{invokeA}\n    println!(`{} factorial is {}`, x, xfact)\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter Example\nDESCRIPTION: Illustrates the syntax for frontmatter in Markdown files. Frontmatter is metadata in YAML format placed at the top of the file between triple dashed lines.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/markdown-syntax.md#_snippet_7\n\nLANGUAGE: Markdown\nCODE:\n```\n---\ntitle: My Frontmatter Title\nexample_boolean: true\n---\n```\n\n----------------------------------------\n\nTITLE: Correcting package changelog links\nDESCRIPTION: Corrects the links in the package changelogs to ensure they point to the correct resources. Improves the accuracy and usability of the changelog documentation.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-stylus/CHANGELOG.md#_snippet_11\n\n\n\n----------------------------------------\n\nTITLE: Updating Babel Monorepo\nDESCRIPTION: This commit updates the Babel monorepo to a newer version. Updating Babel ensures that the project uses the latest JavaScript syntax and features.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-javascript-frontmatter/CHANGELOG.md#_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\nupdate babel monorepo [#32996](https://github.com/gatsbyjs/gatsby/issues/32996) ([048c7a7](https://github.com/gatsbyjs/gatsby/commit/048c7a727bbc6a9ad8e27afba72ee20e946c4aaa))\n```\n\n----------------------------------------\n\nTITLE: Running Gatsby Development Server\nDESCRIPTION: This shell command starts the Gatsby development server, allowing you to preview your site locally at `http://localhost:8000/home`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/sourcing-from-buttercms.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ngatsby develop\n```\n\n----------------------------------------\n\nTITLE: Fixing Babel Monorepo Issue in gatsby-plugin-styletron\nDESCRIPTION: This commit addresses a bug related to the Babel monorepo within the gatsby-plugin-styletron package. It updates the Babel dependencies to resolve the identified issue. This change was part of the 8.6.0 release.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-styletron/CHANGELOG.md#_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\nBug Fixes\n\n- update babel monorepo [#37568](https://github.com/gatsbyjs/gatsby/issues/37568) ([13a0a9e](https://github.com/gatsbyjs/gatsby/commit/13a0a9e83dcb015b65dff6b73cdd5dea09c2988f))\n```\n\n----------------------------------------\n\nTITLE: Updating cross-env Dependency - JavaScript\nDESCRIPTION: This commit updates the cross-env dependency to version ^7.0.3. cross-env provides a way to set environment variables across different platforms. The update is categorized as a chore, indicating maintenance or improvement rather than bug fixes or new features.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-responsive-iframe/CHANGELOG.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nupdate dependency cross-env to ^7.0.3 [#28505](https://github.com/gatsbyjs/gatsby/issues/28505) ([a819b9b](https://github.com/gatsbyjs/gatsby/commit/a819b9bfb663139f7b06c3ed7d6d6069a2382b2c))\n```\n\n----------------------------------------\n\nTITLE: Update @turist/fetch dependency - Gatsby Telemetry\nDESCRIPTION: This commit updates the @turist/fetch dependency for the gatsby-telemetry package to version ^7.2.0. This update likely addresses bug fixes, performance improvements, or new features within the @turist/fetch library that the gatsby-telemetry package relies on for data fetching.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-telemetry/CHANGELOG.md#_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Allowing Screenshot Placeholder in Gatsby Transformer Sharp\nDESCRIPTION: This commit enables the use of screenshot placeholders within gatsby-transformer-sharp. This feature allows for the generation of low-resolution placeholders while the full-resolution image is loading, improving the perceived performance and user experience of Gatsby sites, specifically for screenshot transformations.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-screenshot/CHANGELOG.md#_snippet_18\n\nLANGUAGE: Diff\nCODE:\n```\n([c82670c](https://github.com/gatsbyjs/gatsby/commit/c82670c))\n```\n\n----------------------------------------\n\nTITLE: Bumping Node Minimum Version in Gatsby\nDESCRIPTION: This commit updates the minimum required Node.js version to 10.13.0. This change may be necessary to leverage newer JavaScript features or to align with the dependencies of Gatsby and its plugins.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-styletron/CHANGELOG.md#_snippet_10\n\nLANGUAGE: none\nCODE:\n```\n**gatsby:** bump node min version to 10.13.0 ([#22400](https://github.com/gatsbyjs/gatsby/issues/22400)) ([83d681a](https://github.com/gatsbyjs/gatsby/commit/83d681a))\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel with .babelrc (JSON)\nDESCRIPTION: This JSON configuration file sets up Babel to use the babel-preset-gatsby-package.  It instructs Babel to apply the specified preset when transforming JavaScript code.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/babel-preset-gatsby-package/README.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"presets\": [\"babel-preset-gatsby-package\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Install jscodeshift Globally\nDESCRIPTION: This command installs jscodeshift globally, allowing it to be run from any directory. This is a prerequisite for running Gatsby codemods using jscodeshift.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/image-migration-guide.md#_snippet_10\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --global jscodeshift\n```\n\n----------------------------------------\n\nTITLE: GraphQL Aliasing\nDESCRIPTION: This example demonstrates aliasing in GraphQL.  Two queries are made to `allMarkdownRemark`, one skipping 3 and limiting to 3, and another limiting to 3. Each is given an alias (`someEntries`, `someMoreEntries`) so that the results can be distinguished.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/graphql-reference/content/queries.md#_snippet_11\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  someEntries: allMarkdownRemark(skip: 3, limit: 3) {\n    edges {\n      node {\n        frontmatter {\n          title\n        }\n      }\n    }\n  }\n  someMoreEntries: allMarkdownRemark(limit: 3) {\n    edges {\n      node {\n        frontmatter {\n          title\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example: Installing Gatsby Starter from Local Path (Shell)\nDESCRIPTION: This command demonstrates installing a Gatsby starter from a local path.  It assumes a starter exists at the path `./Code/my-local-starter` and creates a new Gatsby site in the `blog` directory using that starter.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/starters.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\ngatsby new blog ./Code/my-local-starter\n```\n\n----------------------------------------\n\nTITLE: Fix: Do not augment plugin options\nDESCRIPTION: This snippet addresses an issue where plugin options were being augmented, potentially leading to unexpected behavior. The fix ensures that plugin options are not modified during processing.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-images/CHANGELOG.md#_snippet_5\n\nLANGUAGE: N/A\nCODE:\n```\ndo not augment plugin-options ([#26006](https://github.com/gatsbyjs/gatsby/issues/26006)) ([222920b](https://github.com/gatsbyjs/gatsby/commit/222920b))\n```\n\n----------------------------------------\n\nTITLE: Fixing Ignore Pattern Wrapping in Gatsby Transformer Remark\nDESCRIPTION: This bug fix addresses an issue where the ignore pattern within gatsby-transformer-remark was not properly wrapped in quotes. This could lead to incorrect or failed ignore operations. The fix was implemented in response to issue #23176.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-remark/CHANGELOG.md#_snippet_9\n\n\n\n----------------------------------------\n\nTITLE: Applying patches for v5\nDESCRIPTION: This chore applies patches specifically for version 5 of the gatsby-plugin-twitter. Patches are used to address bugs or issues in a released version without bumping the minor or major version. Applying these patches ensures stability and reliability for users of version 5.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-twitter/CHANGELOG.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\napply patches for v5 [#36796](https://github.com/gatsbyjs/gatsby/issues/36796) ([25f79b6](https://github.com/gatsbyjs/gatsby/commit/25f79b6c3719fdf09584ade620a05c66ba2a697c))\n```\n\n----------------------------------------\n\nTITLE: Query Medium Users and Posts with GraphQL\nDESCRIPTION: This GraphQL query retrieves all Medium users and their associated posts. It fetches the user's name and the titles of their posts. The data is accessed through the `allMediumUser` node.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-medium/README.md#_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  allMediumUser {\n    edges {\n      node {\n        name\n        posts {\n          title\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Gatsby Query Benchmark\nDESCRIPTION: This shell command executes the Gatsby query benchmark. It uses environment variables to control the number of content types and pages generated. The default configuration creates a site with 5000 pages split evenly among 10 types.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/benchmarks/query/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nNUM_TYPES=5 NUM_PAGES=1000 yarn bench\n```\n\n----------------------------------------\n\nTITLE: Adjusting peerDep\nDESCRIPTION: This commit adjusts the peer dependencies of the `gatsby-parcel-config` package, which specifies the versions of packages that are expected to be installed alongside it. This may resolve compatibility issues.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-parcel-config/CHANGELOG.md#_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\nAdjust peerDep [#36185](https://github.com/gatsbyjs/gatsby/issues/36185) [#36191](https://github.com/gatsbyjs/gatsby/issues/36191) ([0cdad26](https://github.com/gatsbyjs/gatsby/commit/0cdad26d534eab0fb8b28c9b51b1dc76bd8ef131))\n```\n\n----------------------------------------\n\nTITLE: Preserving Drupal Parent\nDESCRIPTION: This commit ensures that the Drupal parent is preserved as drupal_parent when fetching data. This is essential for maintaining hierarchical relationships between content items in Drupal and representing them accurately in Gatsby.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-drupal/CHANGELOG.md#_snippet_17\n\n\n\n----------------------------------------\n\nTITLE: Sample Excerpt Data\nDESCRIPTION: This JSON excerpt demonstrates the `excerpt` field which gives a brief summary of each post.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-5/index.mdx#_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n\"excerpt\": \"Wow look at all this content. How do they do it?\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Gatsby plugin Sass\nDESCRIPTION: This configuration adds the gatsby-plugin-sass to the Gatsby configuration file (gatsby-config.js). This allows Gatsby to process SCSS files.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/styling/bulma.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nplugins: [`gatsby-plugin-sass`],\n```\n\n----------------------------------------\n\nTITLE: Fix: Enabling empty alt attribute for images\nDESCRIPTION: This snippet highlights a bug fix that enables the creation of img tags with an empty alt attribute in gatsby-remark-images. This allows for more flexible image handling and accessibility options when using the plugin.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-images/CHANGELOG.md#_snippet_1\n\nLANGUAGE: N/A\nCODE:\n```\n**gatsby-remark-images:** enable creating img tag with empty alt attribute ([#27218](https://github.com/gatsbyjs/gatsby/issues/27218)) ([9f0b545](https://github.com/gatsbyjs/gatsby/commit/9f0b545204b50f976094c9086374bb1f8021039e))\n```\n\n----------------------------------------\n\nTITLE: Installing gatsby-plugin-transition-link\nDESCRIPTION: This command installs the gatsby-plugin-transition-link package using npm. This is the first step to using the plugin in a Gatsby project.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/adding-common-features/adding-page-transitions-with-plugin-transition-link.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install gatsby-plugin-transition-link\n```\n\n----------------------------------------\n\nTITLE: Updating READMEs for Instructions in gatsby-plugin-sitemap\nDESCRIPTION: This commit updates the READMEs for better instructions related to `gatsby-plugin-sitemap`. It aims to improve clarity and ease of use for developers using the plugin.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-sitemap/CHANGELOG.md#_snippet_11\n\nLANGUAGE: TEXT\nCODE:\n```\nUpdate READMEs for better instructions ([0890a5c](https://github.com/gatsbyjs/gatsby/commit/0890a5cf2c881b49193113a1e1bd5fe13a2c328f))\n```\n\n----------------------------------------\n\nTITLE: Chore: Update typescript dependency in gatsby-plugin-image\nDESCRIPTION: This snippet updates the typescript dependency to ^4.9.3 within the gatsby-plugin-image package. This ensures compatibility with the latest TypeScript features and improvements.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-image/CHANGELOG.md#_snippet_19\n\nLANGUAGE: JavaScript\nCODE:\n```\nupdate dependency typescript to ^4.9.3 [#37192](https://github.com/gatsbyjs/gatsby/issues/37192) ([204ed0e](https://github.com/gatsbyjs/gatsby/commit/204ed0e220eb9c1c5cdec692e82bce8e3e82e915))\n```\n\n----------------------------------------\n\nTITLE: Creating spawnWithArgs Function for gatsby-cli JavaScript\nDESCRIPTION: This snippet introduces a `spawnWithArgs` function to `gatsby-cli`. This function is designed to allow calling `spawn` with commands that contain spaces. This addresses a potential issue where commands with spaces were not being executed correctly by `spawn`. This fix ensures that gatsby-cli can properly execute commands with spaces.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-cli/CHANGELOG.md#_snippet_27\n\nLANGUAGE: JavaScript\nCODE:\n```\n7b3efe7\n```\n\n----------------------------------------\n\nTITLE: Updating gatsby-dev-cli Dependencies\nDESCRIPTION: This commit updates minor and patch dependencies for `gatsby-dev-cli`. The pull request is referenced by its GitHub issue number.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-dev-cli/CHANGELOG.md#_snippet_12\n\nLANGUAGE: Text\nCODE:\n```\n**deps:** update minor and patch for gatsby-dev-cli ([#27117](https://github.com/gatsbyjs/gatsby/issues/27117)) ([22f69e8](https://github.com/gatsbyjs/gatsby/commit/22f69e864903ddbdba698014294555d426f472f1))\n```\n\n----------------------------------------\n\nTITLE: Fixing Package Updates in Gatsby\nDESCRIPTION: This commit updates minor packages in Gatsby, excluding react, babel, and eslint, to address potential issues and improve overall stability.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-google-gtag/CHANGELOG.md#_snippet_20\n\nLANGUAGE: Diff\nCODE:\n```\n252d867\n```\n\n----------------------------------------\n\nTITLE: Netlify Image CDN Configuration for Contentful\nDESCRIPTION: This TOML snippet demonstrates how to configure Netlify's image CDN for use with Contentful. It specifies a regular expression to allow images from the Contentful space, where `<your-contentful-space-id>` should be replaced with your actual Contentful space ID.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-adapter-netlify/README.md#_snippet_2\n\nLANGUAGE: TOML\nCODE:\n```\n[images]\nremote_images = [\n  # <your-contentful-space-id> is specified in the `spaceId` option for the\n  # gatsby-source-contentful plugin in your gatsby-config file.\n  \"https://images.ctfassets.net/<your-contentful-space-id>/.*\"\n]\n```\n\n----------------------------------------\n\nTITLE: Installing gatsby-transformer-remark (Shell)\nDESCRIPTION: Installs the gatsby-transformer-remark plugin using npm. This is a necessary first step to using the plugin in a Gatsby project.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-remark/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install gatsby-transformer-remark\n```\n\n----------------------------------------\n\nTITLE: Adding Missing Options in Gatsby Plugin Sass\nDESCRIPTION: This commit adds missing options to the gatsby-plugin-sass. It addresses the issue reported in the provided GitHub issue link.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-sass/CHANGELOG.md#_snippet_1\n\nLANGUAGE: none\nCODE:\n```\n- **gatsby-plugin-sass:** add missing options ([#27786](https://github.com/gatsbyjs/gatsby/issues/27786)) ([7c86973](https://github.com/gatsbyjs/gatsby/commit/7c86973cd3573a18a53b85e53f2d5916f8ce81e5))\n```\n\n----------------------------------------\n\nTITLE: Fixing Ignore Pattern Wrapping\nDESCRIPTION: This commit fixes an issue where the ignore pattern was not properly wrapped in quotes. It ensures that the ignore pattern is correctly interpreted, preventing unintended files from being included in the build.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-typography/CHANGELOG.md#_snippet_6\n\nLANGUAGE: None\nCODE:\n```\nwrap ignore pattern in quotes ([#23176](https://github.com/gatsbyjs/gatsby/issues/23176)) ([7563db6](https://github.com/gatsbyjs/gatsby/commit/7563db6))\n```\n\n----------------------------------------\n\nTITLE: Git Commands for Initial Commit and Push - Shell\nDESCRIPTION: These shell commands add the modified header file to the Git staging area, commit the changes with a descriptive message, add the remote repository URL, and push the commit to the master branch.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/testing/ab-testing-with-google-analytics-and-netlify.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ngit add src/components/header.js\ngit commit -m \"Change header background color\"\ngit remote add origin [your remote repo URL]\ngit push -u origin master\n```\n\n----------------------------------------\n\nTITLE: Removing README.md Not Displaying on Gatsby Plugin Library\nDESCRIPTION: This commit removes a README.md file that was not displaying correctly on the Gatsby plugin library. It addresses the issue reported in the provided GitHub issue link.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-sass/CHANGELOG.md#_snippet_4\n\nLANGUAGE: none\nCODE:\n```\n- **docs:** remove README.md not displaying on Gatsby plugin library ([#27040](https://github.com/gatsbyjs/gatsby/issues/27040)) ([6987edb](https://github.com/gatsbyjs/gatsby/commit/6987edb84d9cfa79c7f60a4656e1048d13d5f6d8))\n```\n\n----------------------------------------\n\nTITLE: Updating Minor/Patch JavaScript\nDESCRIPTION: This snippet updates a minor and patch version for the `gatsby-remark-copy-linked-files` plugin. This resolves issues as outlined in the linked GitHub issue. The change ensures stability and bug fixes within the plugin.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-copy-linked-files/CHANGELOG.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nupdate minor and patch for gatsby-remark-copy-linked-files [#31163](https://github.com/gatsbyjs/gatsby/issues/31163) ([2291fbd](https://github.com/gatsbyjs/gatsby/commit/2291fbd962e9813bf1b83851738b438f8d83040b))\n```\n\n----------------------------------------\n\nTITLE: Configuring CSS Loader Options in gatsby-config.js (JavaScript)\nDESCRIPTION: Shows how to configure CSS Loader options directly within the `gatsby-config.js` file when using preprocessors like Sass or Less. This configuration allows you to customize the `camelCase` option to restore the Gatsby v1 behavior.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v1-to-v2.md#_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\n// in gatsby-config.js\nplugins: [\n  {\n    resolve: `gatsby-plugin-sass`,\n    options: {\n      cssLoaderOptions: {\n        camelCase: false,\n      },\n    },\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Configure Emotion plugin in gatsby-config.js\nDESCRIPTION: Adds the gatsby-plugin-emotion to the plugins array in the gatsby-config.js file. This enables Emotion support in the Gatsby project.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/styling/emotion.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  plugins: [`gatsby-plugin-emotion`],\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Footnotes Syntax\nDESCRIPTION: Explains the syntax for creating footnotes in Markdown, a common extension feature, and how to reference them in the text.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/using-remark/src/pages/2016-04-15---hello-world-kitchen-sink/index.md#_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\nThis line has a footnote [^1]. Scroll down or click the link to see it.\n```\n\n----------------------------------------\n\nTITLE: Installing gatsby-mdx-embed Theme\nDESCRIPTION: This shell command installs the `@pauliescanlon/gatsby-mdx-embed` package as a dependency for the Gatsby project.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/using-multiple-themes-together.md#_snippet_9\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install @pauliescanlon/gatsby-mdx-embed\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies (Shell)\nDESCRIPTION: This command installs the necessary dependencies for the Gatsby project, as defined in the `package.json` file.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/sourcing-from-agilitycms.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Creating a new branch in Gatsby repository\nDESCRIPTION: This command creates a new branch for the user. Replace topics/new-feature-name with branch name.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-design-tokens/README.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n# create a new feature branch\ngit checkout -b topics/new-feature-name\n```\n\n----------------------------------------\n\nTITLE: Fixing ignore pattern in quotes\nDESCRIPTION: Wraps the ignore pattern in quotes. This addresses a bug related to file exclusion patterns in the gatsby-plugin-stylus configuration.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-stylus/CHANGELOG.md#_snippet_9\n\n\n\n----------------------------------------\n\nTITLE: Logging into Firebase\nDESCRIPTION: This command authenticates the Firebase CLI with your Google account, allowing you to interact with your Firebase projects.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/previews-deploys-hosting/deploying-to-firebase.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nfirebase login\n```\n\n----------------------------------------\n\nTITLE: Installing gatsby-plugin-utils for Testing\nDESCRIPTION: Shows the command to install the `gatsby-plugin-utils` package as a development dependency for unit testing plugin options schemas.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/plugins-and-themes/configuring-usage-with-plugin-options.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --dev gatsby-plugin-utils\n```\n\n----------------------------------------\n\nTITLE: Install gatsby-transformer-asciidoc (Shell)\nDESCRIPTION: Installs the gatsby-transformer-asciidoc plugin using npm. This plugin is required to parse AsciiDoc files in a Gatsby project.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-asciidoc/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install gatsby-transformer-asciidoc\n```\n\n----------------------------------------\n\nTITLE: Updating eslint\nDESCRIPTION: This snippet describes updating eslint to fix linting issues.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-asciidoc/CHANGELOG.md#_snippet_16\n\nLANGUAGE: Text\nCODE:\n```\nupdate eslint to fix linting issues fix [#29988](https://github.com/gatsbyjs/gatsby/issues/29988) ([5636389](https://github.com/gatsbyjs/gatsby/commit/5636389e8fa626c644e90abc14589e9961d98c68))\n```\n\n----------------------------------------\n\nTITLE: Adding Upstream Remote to Gatsby Fork\nDESCRIPTION: Adds the Gatsby repository as an upstream remote to your forked repository. This allows you to fetch the latest changes from the main Gatsby repository. Replace `git@github.com:gatsbyjs/gatsby.git` with `https://github.com/gatsbyjs/gatsby.git` if you prefer using HTTPS.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/contributing/how-to-open-a-pull-request.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ngit remote add upstream git@github.com:gatsbyjs/gatsby.git\n```\n\n----------------------------------------\n\nTITLE: Feature: Creating gatsby-core-utils package\nDESCRIPTION: This code snippet represents the initial creation of the `gatsby-core-utils` package. This new package centralizes core utility functions used throughout the Gatsby ecosystem, promoting code reuse and maintainability.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-core-utils/CHANGELOG.md#_snippet_7\n\n\n\n----------------------------------------\n\nTITLE: Omitting Google Font in Develop - JavaScript\nDESCRIPTION: This snippet shows a bug fix related to omitting Google Fonts in the 'develop' environment for the `gatsby-plugin-typography` plugin. This prevents unnecessary font loading during development. The commit addresses issue #11226.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-typography/CHANGELOG.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\n**gatsby-plugin-typography:** omitGoogleFont in \"develop\" ([#11226](https://github.com/gatsbyjs/gatsby/issues/11226)) ([7dc7c5f](https://github.com/gatsbyjs/gatsby/commit/7dc7c5f))\n```\n\n----------------------------------------\n\nTITLE: Installing Gatsby Themes\nDESCRIPTION: This shell command installs the 'gatsby-theme-blog' and 'gatsby-theme-notes' packages as dependencies for the Gatsby project.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/using-multiple-themes-together.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install gatsby-theme-blog gatsby-theme-notes\n```\n\n----------------------------------------\n\nTITLE: Checking Namespaces in WordPress Response in Gatsby Source WordPress\nDESCRIPTION: This commit fixes a bug in gatsby-source-wordpress where the code didn't properly check for namespaces in the response from WordPress. The fix adds a check for namespaces to prevent errors and ensure proper data handling.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-wordpress/CHANGELOG.md#_snippet_16\n\n\n\n----------------------------------------\n\nTITLE: Installing Gatsby CLI\nDESCRIPTION: This command installs the Gatsby CLI globally, allowing you to use Gatsby commands from any directory.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/e2e-tests/path-prefix/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --global gatsby-cli\n```\n\n----------------------------------------\n\nTITLE: Updating peerDeps in gatsby-transformer-pdf\nDESCRIPTION: This code snippet highlights a chore update that updates the peerDependencies of the `gatsby-transformer-pdf` package.  Updating peer dependencies ensures compatibility with other packages within the Gatsby ecosystem, resolving potential conflicts or versioning issues.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-pdf/CHANGELOG.md#_snippet_4\n\nLANGUAGE: Text\nCODE:\n```\nUpdate peerDeps [#36965](https://github.com/gatsbyjs/gatsby/issues/36965) ([b624442](https://github.com/gatsbyjs/gatsby/commit/b6244424fe8b724cbc23b80b2b4f5424cc2055a4))\n```\n\n----------------------------------------\n\nTITLE: Updating minor and patch dependencies in gatsby-source-filesystem\nDESCRIPTION: This commit updates minor and patch dependencies for gatsby-source-filesystem to address issue #33771. These dependency updates likely incorporate various bug fixes and performance improvements.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-filesystem/CHANGELOG.md#_snippet_14\n\n\n\n----------------------------------------\n\nTITLE: Fix: Correcting code fences in Readme\nDESCRIPTION: This snippet fixes formatting issues in the README file for `gatsby-remark-images` by placing code examples inside code fences. This improves the readability and presentation of code snippets in the plugin's documentation.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-images/CHANGELOG.md#_snippet_4\n\nLANGUAGE: N/A\nCODE:\n```\n**readme:** gatsby-remark-images -> put code in code fences ([#25854](https://github.com/gatsbyjs/gatsby/issues/25854)) ([96fdb6b](https://github.com/gatsbyjs/gatsby/commit/96fdb6b))\n```\n\n----------------------------------------\n\nTITLE: Store sync token for Contentful preview in Gatsby\nDESCRIPTION: This commit implements the storing of a sync token for Contentful previews within Gatsby. This feature enhances the preview functionality by ensuring accurate and up-to-date content during the preview process.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-contentful/CHANGELOG.md#_snippet_37\n\n\n\n----------------------------------------\n\nTITLE: Pushing Code to GitHub Repository\nDESCRIPTION: These commands initialize a Git repository, add all files to the staging area, commit the changes with a message, add a remote origin pointing to the GitHub repository, and push the code to the remote repository's master branch.  Replace `[your-username]/[your-repo-name]` with your GitHub username and repository name.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/blog-netlify-cms-tutorial/index.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngit init\ngit add .\ngit commit -m \"initial commit\"\ngit remote add origin https://github.com/[your-username]/[your-repo-name].git\ngit push -u origin master\n```\n\n----------------------------------------\n\nTITLE: Fix Graphql Tag Global Check (JavaScript)\nDESCRIPTION: Fixes a global check issue related to the GraphQL tag, preventing potential errors or conflicts. This enhances the stability and reliability of GraphQL queries within Gatsby projects.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/babel-plugin-remove-graphql-queries/CHANGELOG.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n39a2607\n```\n\n----------------------------------------\n\nTITLE: Updating got dependency in gatsby-source-filesystem\nDESCRIPTION: This commit updates the `got` dependency to address issue #36366 in the gatsby-source-filesystem package. The update is part of general chore/maintenance tasks.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-filesystem/CHANGELOG.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Checking Node.js Version\nDESCRIPTION: This command checks the installed version of Node.js.  It's used to verify that the developer has a compatible version (>= 18) before proceeding with the Gatsby development setup. This is crucial because Gatsby relies on specific Node.js features.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/contributing/code-contributions.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnode --version\n```\n\n----------------------------------------\n\nTITLE: Wrap Pages with Layout Component\nDESCRIPTION: This code snippet shows how to import and wrap a page component with a layout component in Gatsby v2. This is needed as Gatsby no longer provides a special layout component.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v1-to-v2.md#_snippet_8\n\nLANGUAGE: JSX\nCODE:\n```\nimport React from \"react\"\nimport Layout from \"../components/layout\"\n\nexport default function Home() {\n  return (\n    <Layout>\n      <div>Hello World</div>\n    </Layout>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing nested file search for knownCollections\nDESCRIPTION: This snippet fixes an issue where nested files were not correctly identified for knownCollections. This ensures that all relevant files within collections are properly processed.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-page-creator/CHANGELOG.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nFind nested files for knownCollections [#37762](https://github.com/gatsbyjs/gatsby/issues/37762) ([9916b3d](https://github.com/gatsbyjs/gatsby/commit/9916b3dfd52567d76b50d3f45e4126d2df321cbd))\n```\n\n----------------------------------------\n\nTITLE: Updating react-router API to reach-router\nDESCRIPTION: This commit updates the gatsby-plugin-catch-links plugin to use the new reach-router API, replacing the old react-router API. This change is related to issue #7408.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-catch-links/CHANGELOG.md#_snippet_19\n\nLANGUAGE: Text\nCODE:\n```\nupdate old react-router api to new reach-router ([#7408](https://github.com/gatsbyjs/gatsby/issues/7408)) ([bedc6f0](https://github.com/gatsbyjs/gatsby/commit/bedc6f0))\n```\n\n----------------------------------------\n\nTITLE: Installing gatsby-source-drupal\nDESCRIPTION: Command to install the gatsby-source-drupal plugin using npm. This plugin allows Gatsby to source data from Drupal sites.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-drupal/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install gatsby-source-drupal\n```\n\n----------------------------------------\n\nTITLE: YAML Highlighting Example YAML\nDESCRIPTION: Provides an example of highlighting lines in a YAML snippet using highlight-line and highlight-range comments.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-embed-snippet/README.md#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nfoo: \"highlighted\" # highlight-line\nbar: \"not highlighted\"\n# highlight-range{1-2}\nbaz: \"highlighted\"\nquz: \"highlighted\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Firebase project\nDESCRIPTION: This command initializes Firebase in your Gatsby project directory. It prompts you to select Firebase products and your project.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/previews-deploys-hosting/deploying-to-firebase.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nfirebase init\n```\n\n----------------------------------------\n\nTITLE: Installing Gatsby S3 Plugin\nDESCRIPTION: Installs the gatsby-plugin-s3 plugin, which is used to deploy the Gatsby site to an S3 bucket.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/previews-deploys-hosting/deploying-to-s3-cloudfront.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install gatsby-plugin-s3\n```\n\n----------------------------------------\n\nTITLE: Updating Got Dependency in Gatsby\nDESCRIPTION: This snippet updates the got dependency to version v8.3.2. This change addresses potential bugs and incorporates the latest features and improvements from the got library, ensuring robust HTTP requests for Gatsby sites.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-npm-package-search/CHANGELOG.md#_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nac583b1\n```\n\n----------------------------------------\n\nTITLE: Running Gatsby Development Server\nDESCRIPTION: This command starts the Gatsby development server, which builds the site and serves it locally. It enables hot reloading for development, automatically updating the browser when changes are made to the code.  The site becomes accessible at http://localhost:8000.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/using-multiple-themes/README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngatsby develop\n```\n\n----------------------------------------\n\nTITLE: Creating cache key\nDESCRIPTION: This code snippet defines how to create a cache key for the HTML node, using the node's content digest, a plugins cache string, and a path prefix cache string.  This cache key is used to uniquely identify the cached HTML content. It demonstrates how to create a consistent cache key that invalidates when the underlying content changes.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/plugins-and-themes/creating-a-transformer-plugin.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst htmlCacheKey = node =>\n  `transformer-remark-markdown-html-${node.internal.contentDigest}-${pluginsCacheStr}-${pathPrefixCacheStr}`\n```\n\n----------------------------------------\n\nTITLE: Apply Patches for v5\nDESCRIPTION: This commit applies necessary patches for version 5 of gatsby-plugin-stylus. These patches address specific issues and ensure the plugin functions correctly within the Gatsby v5 ecosystem. It targets issue #36796 on the Gatsby repository.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-stylus/CHANGELOG.md#_snippet_4\n\nLANGUAGE: none\nCODE:\n```\napply patches for v5 [#36796](https://github.com/gatsbyjs/gatsby/issues/36796) ([25f79b6](https://github.com/gatsbyjs/gatsby/commit/25f79b6c3719fdf09584ade620a05c66ba2a697c))\n```\n\n----------------------------------------\n\nTITLE: Creating a New Gatsby Site\nDESCRIPTION: These commands create a new Gatsby site using the Gatsby CLI and navigates into the created directory.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/sourcing-data/sourcing-from-kontent-ai.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngatsby new kontent-guide\ncd kontent-guide\n```\n\n----------------------------------------\n\nTITLE: Updating Packages in Gatsby\nDESCRIPTION: This snippet updates minor package dependencies, excluding react, babel, and eslint. This change aims to incorporate the latest improvements and bug fixes from various packages, ensuring the stability and performance of Gatsby projects.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-npm-package-search/CHANGELOG.md#_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n77dad68\n```\n\n----------------------------------------\n\nTITLE: Uninstall gatsby-plugin-offline and install gatsby-plugin-remove-serviceworker\nDESCRIPTION: Shell commands to uninstall `gatsby-plugin-offline` and install `gatsby-plugin-remove-serviceworker`. This ensures proper unregistration of the service worker.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-offline/README.md#_snippet_9\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install gatsby-plugin-remove-serviceworker\nnpm uninstall gatsby-plugin-offline\n```\n\n----------------------------------------\n\nTITLE: Using Typography.js Theme\nDESCRIPTION: This code snippet shows how to use the `typography-theme-funston` theme in the `typography.js` file.  It imports the theme and then passes it directly to the `Typography` constructor, replacing the manual configuration.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/using-typography-js.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport Typography from \"typography\";\n// highlight-start\n+ import funstonTheme from 'typography-theme-funston'\n// highlight-end\nconst typography = new Typography(\n- {\n-     baseFontSize: '18px',\n-     baseLineHeight: 1.666,\n-     headerFontFamily: ['Avenir Next', 'Helvetica Neue', 'Segoe UI', 'Helvetica', 'Arial', 'sans-serif'],\n-     bodyFontFamily: ['Georgia', 'serif'],\n- },\n// highlight-start\n+ funstonTheme\n// highlight-end\n);\n\nexport default typography;\n```\n\n----------------------------------------\n\nTITLE: Re-generating Changelogs\nDESCRIPTION: This commit re-generates the changelogs. This is typically done to ensure accuracy and consistency in the changelog information.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-react-helmet/CHANGELOG.md#_snippet_11\n\nLANGUAGE: Other\nCODE:\n```\n417df15230be368a9db91f2ad1a9bc0442733177\n```\n\n----------------------------------------\n\nTITLE: Updating Babel Monorepo (Again) in gatsby-plugin-feed\nDESCRIPTION: This code snippet represents another bug fix that updates the Babel monorepo. Similar to the previous Babel update, this ensures that the `gatsby-plugin-feed` plugin uses the latest and most compatible version of Babel for JavaScript transpilation. This is crucial for maintaining code correctness and compatibility with different JavaScript features.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-feed/CHANGELOG.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nupdate babel monorepo [#37386](https://github.com/gatsbyjs/gatsby/issues/37386) ([b941876](https://github.com/gatsbyjs/gatsby/commit/b94187633d94d0f0071b38ffe93380dd802ec70f))\n```\n\n----------------------------------------\n\nTITLE: Warning about source-graphql Performance\nDESCRIPTION: This commit adds a warning to inform users that gatsby-source-graphql can be slow for larger sites. This helps manage user expectations and encourages them to explore alternative solutions for large-scale projects where performance is critical.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-graphql/CHANGELOG.md#_snippet_15\n\nLANGUAGE: Text\nCODE:\n```\nwarn people that source-graphql is slow for larger sites [#33970](https://github.com/gatsbyjs/gatsby/issues/33970) ([e98e4e1](https://github.com/gatsbyjs/gatsby/commit/e98e4e1cc88f31fab8f0c7c19a4c933314fda6a5))\n```\n\n----------------------------------------\n\nTITLE: Embedding HTML Video with Fallback\nDESCRIPTION: This HTML snippet demonstrates how to embed a video using the HTML5 video tag, including a source element for specifying the video file and a fallback paragraph for browsers that don't support the video element. The video has controls, autoplay, and loop attributes enabled.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/using-remark-copy-linked-files/src/pages/2017-11-13-gatsby-remark-copy-linked-files/index.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<video controls=\"controls\" autoplay=\"true\" loop=\"true\">\n  <source type=\"video/mp4\" src=\"gatsbygram.mp4\"></source>\n  <p>Your browser does not support the video element.</p>\n</video>\n```\n\n----------------------------------------\n\nTITLE: Bumping node minimum version\nDESCRIPTION: This code snippet updates the minimum required Node.js version for the gatsby package to 10.13.0. This may be necessary to leverage newer JavaScript features or dependencies.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-excel/CHANGELOG.md#_snippet_29\n\nLANGUAGE: Text\nCODE:\n```\n- **gatsby:** bump node min version to 10.13.0 ([#22400](https://github.com/gatsbyjs/gatsby/issues/22400)) ([83d681a](https://github.com/gatsbyjs/gatsby/commit/83d681a))\n```\n\n----------------------------------------\n\nTITLE: Updating ESLint to Fix Linting Issues\nDESCRIPTION: This snippet describes a chore related to updating ESLint within GatsbyJS to address linting issues. This involves upgrading the ESLint package and potentially adjusting the ESLint configuration to enforce consistent coding standards and identify potential errors.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-excel/CHANGELOG.md#_snippet_21\n\nLANGUAGE: None\nCODE:\n```\nupdate eslint to fix linting issues fix [#29988](https://github.com/gatsbyjs/gatsby/issues/29988) ([5636389](https://github.com/gatsbyjs/gatsby/commit/5636389e8fa626c644e90abc14589e9961d98c68))\n```\n\n----------------------------------------\n\nTITLE: Chore: Upgrade Jest\nDESCRIPTION: This chore upgrades the Jest testing framework to the latest version. This ensures the plugin is using the latest Jest features and fixes. This chore relates to issue #33277.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-google-tagmanager/CHANGELOG.md#_snippet_10\n\nLANGUAGE: None\nCODE:\n```\nupgrade jest [#33277](https://github.com/gatsbyjs/gatsby/issues/33277) ([34cb202](https://github.com/gatsbyjs/gatsby/commit/34cb202d9c8c202f082edb03c4cc1815eb81abe1))\n```\n\n----------------------------------------\n\nTITLE: Create a new Gatsby site\nDESCRIPTION: Creates a new Gatsby site using the hello-world starter.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/styling/emotion.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngatsby new emotion-tutorial https://github.com/gatsbyjs/gatsby-starter-hello-world\n```\n\n----------------------------------------\n\nTITLE: Updating HJSON Dependency\nDESCRIPTION: This commit updates the dependency `hjson` to version ^3.2.0. This upgrade likely includes bug fixes, performance improvements, and potentially new features within the HJSON parsing library itself, which are then integrated into the `gatsby-transformer-hjson` plugin.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-hjson/CHANGELOG.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\ne18310b\n```\n\n----------------------------------------\n\nTITLE: Update joi dependency for gatsby-plugin-feed\nDESCRIPTION: This code snippet represents a chore that updates the dependency from `@hapi/joi` to `joi`.  This change aligns with the recommended package and addresses potential deprecation or maintenance concerns associated with `@hapi/joi`.  The update ensures that the `gatsby-plugin-feed` plugin leverages the actively maintained `joi` package for validation purposes.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-feed/CHANGELOG.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\ndepend on `joi` instead of `@hapi/joi` [#38205](https://github.com/gatsbyjs/gatsby/issues/38205) ([52a0023](https://github.com/gatsbyjs/gatsby/commit/52a00232fe2c832a32d192595d506bce91944e07))\n```\n\n----------------------------------------\n\nTITLE: Wrapping Ignore Pattern in Quotes\nDESCRIPTION: This snippet fixes a bug by wrapping an ignore pattern in quotes.  This addresses issue #23176.  It ensures the ignore pattern is correctly interpreted during build processes.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-cxs/CHANGELOG.md#_snippet_18\n\nLANGUAGE: Text\nCODE:\n```\nwrap ignore pattern in quotes ([#23176](https://github.com/gatsbyjs/gatsby/issues/23176)) ([7563db6](https://github.com/gatsbyjs/gatsby/commit/7563db6))\n```\n\n----------------------------------------\n\nTITLE: Verdaccio Support in Gatsby CLI (JavaScript)\nDESCRIPTION: Adds support for Verdaccio, a lightweight private npm proxy registry, to the Gatsby development CLI. This enables developers to use a local package registry for testing and development.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/babel-plugin-remove-graphql-queries/CHANGELOG.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\na4f7e77\n```\n\n----------------------------------------\n\nTITLE: Setting Cache Control for Page Data\nDESCRIPTION: This snippet shows the cache-control header for JSON files in the `public/page-data/` directory in a Gatsby site.  Similar to HTML files, these JSON files should not be cached to reflect the most recent data changes.  The header uses `public`, `max-age=0`, and `must-revalidate` to force browsers to revalidate the cache on every request.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/previews-deploys-hosting/caching.md#_snippet_1\n\nLANGUAGE: HTTP\nCODE:\n```\ncache-control: public, max-age=0, must-revalidate\n```\n\n----------------------------------------\n\nTITLE: Updating Peer Dependencies in gatsby-plugin-fullstory\nDESCRIPTION: This snippet showcases a chore update focusing on updating the peer dependencies for the gatsby-plugin-fullstory package. It references issue #36965 and provides a commit hash for detailed tracking.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-fullstory/CHANGELOG.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nUpdate peerDeps [#36965](https://github.com/gatsbyjs/gatsby/issues/36965) ([b624442](https://github.com/gatsbyjs/gatsby/commit/b6244424fe8b724cbc23b80b2b4f5424cc2055a4))\n```\n\n----------------------------------------\n\nTITLE: Correct Links in Package Changelogs\nDESCRIPTION: This snippet fixes incorrect or broken links within the package changelogs. Ensuring accurate links improves navigation and provides users with access to relevant information regarding changes and updates.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-javascript-static-exports/CHANGELOG.md#_snippet_19\n\nLANGUAGE: none\nCODE:\n```\n- correct links in package changelogs ([#15630](https://github.com/gatsbyjs/gatsby/issues/15630)) ([d07b9dd](https://github.com/gatsbyjs/gatsby/commit/d07b9dd))\n```\n\n----------------------------------------\n\nTITLE: Plugin Configuration in gatsby-config.js - JavaScript\nDESCRIPTION: This code snippet demonstrates how to configure the `gatsby-plugin-schema-snapshot` plugin within the `gatsby-config.js` file.  It sets the path for the schema file, excludes a specific plugin (`gatsby-source-npm-package-search`), and conditionally updates the schema based on an environment variable. It requires the `process` object to access environment variables.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-schema-snapshot/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-schema-snapshot`,\n      options: {\n        path: `schema.gql`,\n        exclude: {\n          plugins: [`gatsby-source-npm-package-search`],\n        },\n        update: process.env.GATSBY_UPDATE_SCHEMA_SNAPSHOT,\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Nesting Level for PostCSS Loader Options\nDESCRIPTION: This fix adds an additional level of nesting to the options passed to the postcss-loader. This adjustment ensures that the options are correctly interpreted by the loader, preventing configuration errors and ensuring proper processing of PostCSS files.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-postcss/CHANGELOG.md#_snippet_15\n\n\n\n----------------------------------------\n\nTITLE: Fix: Updating Packages in Gatsby\nDESCRIPTION: This commit updates minor packages within the Gatsby project, excluding React, Babel, and ESLint. This ensures that the project utilizes the latest bug fixes and performance improvements from these packages, while maintaining compatibility with core dependencies.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-preload-fonts/CHANGELOG.md#_snippet_10\n\nLANGUAGE: Text\nCODE:\n```\nupdate minor updates in packages except react, babel and eslint ([#17601](https://github.com/gatsbyjs/gatsby/issues/17601)) ([588cd8f](https://github.com/gatsbyjs/gatsby/commit/588cd8f))\n```\n\n----------------------------------------\n\nTITLE: Creating a New Gatsby Site\nDESCRIPTION: Creates a new Gatsby site using the default starter. This command initializes a new project directory with the necessary files and dependencies to start building a Gatsby website. Replace `gatsby-example-site` with your desired project name.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/e2e-tests/production-runtime/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ngatsby new gatsby-example-site\n```\n\n----------------------------------------\n\nTITLE: Explicitly closed HTML tag\nDESCRIPTION: Shows example of explicitly closing tag in HTML.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/using-remark/src/pages/2018-01-27---custom-components/index.md#_snippet_11\n\nLANGUAGE: HTML\nCODE:\n```\n<my-component></my-component>\n```\n\n----------------------------------------\n\nTITLE: Installing Gatsby Codemods\nDESCRIPTION: Installs the gatsby-codemods package locally in a project. This is required for using the codemods.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-codemods/README.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install gatsby-codemods\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with npm\nDESCRIPTION: This command installs the necessary dependencies for the Gatsby project, as defined in the `package.json` file. These dependencies are required for the project to function correctly and are essential for development and deployment.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/using-gatsby-head/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Updating Chalk Dependency\nDESCRIPTION: This snippet updates the chalk dependency to version ^4.1.2. Chalk is a Node.js module for styling terminal strings.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-preload-fonts/CHANGELOG.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Updating styletron-react Dependency in Gatsby\nDESCRIPTION: This commit updates the styletron-react dependency to version ^5.2.2, potentially to fix bugs, improve performance, or introduce new features related to Styletron's integration with React.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-styletron/CHANGELOG.md#_snippet_11\n\nLANGUAGE: none\nCODE:\n```\nupdate dependency styletron-react to ^5.2.2 ([#18098](https://github.com/gatsbyjs/gatsby/issues/18098)) ([f6d3a3f](https://github.com/gatsbyjs/gatsby/commit/f6d3a3f))\n```\n\n----------------------------------------\n\nTITLE: Updating dependencies - JavaScript\nDESCRIPTION: This snippet updates minor and patch versions for the gatsby-plugin-benchmark-reporting package. It addresses issue #27119 on GitHub.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-benchmark-reporting/CHANGELOG.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n**deps:** update minor and patch for gatsby-plugin-benchmark-reporting ([#27119](https://github.com/gatsbyjs/gatsby/issues/27119)) ([635ac4f](https://github.com/gatsbyjs/gatsby/commit/635ac4faf8a7306b479efe1bc619940560855c67))\n```\n\n----------------------------------------\n\nTITLE: Fixing ignore pattern in Gatsby Flow\nDESCRIPTION: This commit fixes an issue where the ignore pattern was not properly wrapped in quotes. Wrapping the ignore pattern in quotes ensures that it is correctly interpreted by the system, preventing unexpected behavior or errors.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-flow/CHANGELOG.md#_snippet_8\n\nLANGUAGE: diff\nCODE:\n```\n--- a/packages/gatsby-plugin-flow/package.json\n+++ b/packages/gatsby-plugin-flow/package.json\n@@ -23,6 +23,6 @@\n   \"bugs\": {\n     \"url\": \"https://github.com/gatsbyjs/gatsby/issues\"\n   },\n-  \"files\": [\n+  \"files\": [\"\n     \"!**/__tests__/**\"\n   ],\n   \"dependencies\":\n```\n\n----------------------------------------\n\nTITLE: Fix: Package Updates in Gatsby\nDESCRIPTION: This commit updates minor versions of various packages, excluding react, babel, and eslint.  It ensures that the plugin remains compatible with the latest versions of its dependencies while avoiding potential breaking changes in core packages. This fix is present in version 2.1.6 of the plugin.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-postcss/CHANGELOG.md#_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nupdate minor updates in packages except react, babel and eslint ([#17254](https://github.com/gatsbyjs/gatsby/issues/17254)) ([252d867](https://github.com/gatsbyjs/gatsby/commit/252d867))\n```\n\n----------------------------------------\n\nTITLE: Fix: Not augmenting plugin options - JavaScript\nDESCRIPTION: This commit fixes a bug where plugin options were not being properly augmented. This is essential for the plugin to configure itself correctly based on user settings.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-responsive-iframe/CHANGELOG.md#_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\ndo not augment plugin-options ([#26006](https://github.com/gatsbyjs/gatsby/issues/26006)) ([222920b](https://github.com/gatsbyjs/gatsby/commit/222920b))\n```\n\n----------------------------------------\n\nTITLE: Update Babel Parser Dependency\nDESCRIPTION: This snippet updates the @babel/parser dependency to version ^7.6.0. This update is important for ensuring compatibility with newer JavaScript syntax and features.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-javascript-static-exports/CHANGELOG.md#_snippet_17\n\nLANGUAGE: none\nCODE:\n```\n- update dependency @babel/parser to ^7.6.0 ([#17620](https://github.com/gatsbyjs/gatsby/issues/17620)) ([2d942ed](https://github.com/gatsbyjs/gatsby/commit/2d942ed))\n```\n\n----------------------------------------\n\nTITLE: Implementing 307 Redirect\nDESCRIPTION: This commit implements a 307 redirect from https://www.styled-components.com. This ensures users are properly redirected when accessing the old domain.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-styled-components/CHANGELOG.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n**blog:** 307 redirect from https://www.styled-components.com ([#20719](https://github.com/gatsbyjs/gatsby/issues/20719)) ([175a731](https://github.com/gatsbyjs/gatsby/commit/175a731))\n```\n\n----------------------------------------\n\nTITLE: Addressing empty logs printing undefined - gatsby-cli JavaScript\nDESCRIPTION: This snippet fixes a bug in gatsby-cli that caused empty logs to print the word \"undefined\" to the console. The fix ensures that empty logs are handled gracefully without producing unwanted output.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-cli/CHANGELOG.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nAddress an issue that caused empty logs to print undefined ([#23000](https://github.com/gatsbyjs/gatsby/issues/23000)) ([be85f2e](https://github.com/gatsbyjs/gatsby/commit/be85f2e))\n```\n\n----------------------------------------\n\nTITLE: Applying patches for v4 in gatsby-remark-images-contentful\nDESCRIPTION: This code snippet describes the process of applying patches for version 4. These patches likely contain bug fixes or minor improvements to ensure compatibility and stability within the Gatsby v4 environment.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-images-contentful/CHANGELOG.md#_snippet_18\n\nLANGUAGE: None\nCODE:\n```\napply patches for v4 [#33170](https://github.com/gatsbyjs/gatsby/issues/33170) ([f8c5141](https://github.com/gatsbyjs/gatsby/commit/f8c5141bf72108a53338fd01514522ae7a1b37bf))\n```\n\n----------------------------------------\n\nTITLE: Implementing shouldOnCreateNode in Gatsby plugins\nDESCRIPTION: This performance improvement implements the `shouldOnCreateNode` function for various Gatsby plugins and benchmarks. This function allows plugins to selectively process nodes, improving performance by avoiding unnecessary work.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-toml/CHANGELOG.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nimplement shouldOnCreateNode for all our plugins/benchmarks ([#27545](https://github.com/gatsbyjs/gatsby/issues/27545)) ([df914d9](https://github.com/gatsbyjs/gatsby/commit/df914d94a7c47c6082b6f165eb44dc6e15e12c7d))\n```\n\n----------------------------------------\n\nTITLE: Wrapping ignore pattern in quotes\nDESCRIPTION: This snippet addresses an issue by wrapping an ignore pattern in quotes. Wrapping the ignore pattern in quotes ensures it is correctly parsed and applied, preventing unexpected behavior during file processing.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-mongodb/CHANGELOG.md#_snippet_12\n\n\n\n----------------------------------------\n\nTITLE: Fixing Package Updates in Gatsby\nDESCRIPTION: This snippet addresses an issue where minor updates were not being correctly applied across various Gatsby packages (excluding react, babel, and eslint). It ensures that the package dependencies, except for the specified ones, are up-to-date with the latest minor releases.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-screenshot/CHANGELOG.md#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nupdate minor updates in packages except react, babel and eslint ([#17254](https://github.com/gatsbyjs/gatsby/issues/17254)) ([252d867](https://github.com/gatsbyjs/gatsby/commit/252d867))\n```\n\n----------------------------------------\n\nTITLE: Fix: Ensure cache hash is unique in gatsby-plugin-image\nDESCRIPTION: This snippet fixes an issue where the cache hash was not unique, potentially leading to incorrect caching behavior. This fix ensures that the cache hash is unique for the gatsby-plugin-image plugin.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-image/CHANGELOG.md#_snippet_18\n\nLANGUAGE: JavaScript\nCODE:\n```\nEnsure cache hash is unique [#37087](https://github.com/gatsbyjs/gatsby/issues/37087) ([c98d947](https://github.com/gatsbyjs/gatsby/commit/c98d9479c913df33b58618a512bf5119cb2c5d40))\n```\n\n----------------------------------------\n\nTITLE: Install Gatsby dependencies using npm\nDESCRIPTION: This command installs the necessary dependencies for the Gatsby project.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/using-plugin-options/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Updating cross-env dependency - GatsbyJS\nDESCRIPTION: This chore updates the cross-env dependency to version ^7.0.3. Cross-env allows setting environment variables across platforms.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-custom-blocks/CHANGELOG.md#_snippet_8\n\nLANGUAGE: none\nCODE:\n```\nupdate dependency cross-env to ^7.0.3 [#28505](https://github.com/gatsbyjs/gatsby/issues/28505) ([a819b9b](https://github.com/gatsbyjs/gatsby/commit/a819b9bfb663139f7b06c3ed7d6d6069a2382b2c))\n```\n\n----------------------------------------\n\nTITLE: Updating fs-extra Dependency to ^4.0.3 - JavaScript\nDESCRIPTION: This snippet updates the `fs-extra` dependency to version ^4.0.3. `fs-extra` provides utility functions for file system operations, and updating it ensures that `gatsby-source-contentful` is using the latest version, potentially including performance enhancements and bug fixes related to file handling.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-contentful/CHANGELOG.md#_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\n2cc762d\n```\n\n----------------------------------------\n\nTITLE: Defining main and files in package.json (JSON)\nDESCRIPTION: This snippet illustrates how to define the 'main' and 'files' fields in the package.json file. 'main' specifies the entry point of the plugin, while 'files' lists the files to include when the plugin is installed.  This ensures that only necessary files are included in the published package.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/creating-a-source-plugin/part-8/index.mdx#_snippet_6\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"main\": \"./dist/gatsby-node.js\",\n  \"files\": [\n    \"./dist/*\",\n    \"gatsby-node.js\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Patches for v5 in gatsby-remark-smartypants\nDESCRIPTION: This snippet represents the application of patches for version 5 of the gatsby-remark-smartypants package. Patches address specific issues or bugs in a particular version.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-smartypants/CHANGELOG.md#_snippet_3\n\nLANGUAGE: Text\nCODE:\n```\napply patches for v5 [#36796](https://github.com/gatsbyjs/gatsby/issues/36796) ([25f79b6](https://github.com/gatsbyjs/gatsby/commit/25f79b6c3719fdf09584ade620a05c66ba2a697c))\n```\n\n----------------------------------------\n\nTITLE: Updating Peer Dependencies\nDESCRIPTION: This snippet reflects an update to the peer dependencies of the gatsby-remark-code-repls package. Updating peer dependencies ensures compatibility with other packages within the Gatsby ecosystem. This change ensures that gatsby-remark-code-repls functions correctly with the specified versions of its peer dependencies.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-code-repls/CHANGELOG.md#_snippet_4\n\nLANGUAGE: none\nCODE:\n```\nUpdate peerDeps [#36965](https://github.com/gatsbyjs/gatsby/issues/36965) ([b624442](https://github.com/gatsbyjs/gatsby/commit/b6244424fe8b724cbc23b80b2b4f5424cc2055a4))\n```\n\n----------------------------------------\n\nTITLE: Correcting Changelog Links in Gatsby\nDESCRIPTION: This commit fixes incorrect links within the package changelogs. Specifically addresses issue #15630, ensuring that links to related issues and commits are properly formatted and resolve correctly.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-documentationjs/CHANGELOG.md#_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\ncorrect links in package changelogs ([#15630](https://github.com/gatsbyjs/gatsby/issues/15630)) ([d07b9dd](https://github.com/gatsbyjs/gatsby/commit/d07b9dd))\n```\n\n----------------------------------------\n\nTITLE: Example GraphQL Query Result\nDESCRIPTION: This JSON represents the expected output from the GraphQL query for MDX slugs. It shows the structure of the data returned, confirming that each MDX node has a frontmatter object containing a slug field.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-6/index.mdx#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"allMdx\": {\n      \"nodes\": [\n        {\n          \"frontmatter\": {\n            \"slug\": \"my-first-post\"\n          }\n        },\n        {\n          \"frontmatter\": {\n            \"slug\": \"yet-another-post\"\n          }\n        },\n        {\n          \"frontmatter\": {\n            \"slug\": \"another-post\"\n          }\n        }\n      ]\n    }\n  },\n  \"extensions\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Run Gatsby Query Timing (Master) - More Pages & Types\nDESCRIPTION: This shell command executes the `runQueryTiming.sh` script to benchmark Gatsby query performance on the master branch, with a larger number of pages and types. It sets the number of page types (NUM_TYPES) and the number of pages (NUM_PAGES) as environment variables for the script.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/benchmarks/query/recording.md#_snippet_3\n\nLANGUAGE: Shell Script\nCODE:\n```\nquery $ NUM_TYPES=100 NUM_PAGES=20000 bin/runQueryTiming.sh\n24.656\n```\n\n----------------------------------------\n\nTITLE: Fixing additionalProperties Error\nDESCRIPTION: Resolves an \"additionalProperties\" error related to the `gatsby-plugin-react-css-modules`. This fix ensures that the plugin's configuration options are correctly validated, preventing errors during Gatsby build process.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-react-css-modules/CHANGELOG.md#_snippet_10\n\n\n\n----------------------------------------\n\nTITLE: Good ES Modules Syntax (JavaScript)\nDESCRIPTION: This code snippet shows the correct way to use ES modules syntax, which is acceptable in Gatsby v2.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v1-to-v2.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n// GOOD: ES modules syntax works\nimport foo from \"foo\"\nexport default foo\n```\n\n----------------------------------------\n\nTITLE: Applying Patches for v4 - Chore\nDESCRIPTION: This chore applies necessary patches to ensure compatibility with version 4 of Gatsby. These patches address specific issues or adjustments required for the new version. The issue and commit linked to these patches are provided.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-documentationjs/CHANGELOG.md#_snippet_3\n\nLANGUAGE: N/A\nCODE:\n```\napply patches for v4 [#33170](https://github.com/gatsbyjs/gatsby/issues/33170) ([f8c5141](https://github.com/gatsbyjs/gatsby/commit/f8c5141bf72108a53338fd01514522ae7a1b37bf))\n```\n\n----------------------------------------\n\nTITLE: Fix: Adding configstore as a dependency in gatsby-core-utils\nDESCRIPTION: This code snippet adds `configstore` as a dependency for the `gatsby-core-utils` package. This fix addresses an issue where the package was missing a required dependency, which could lead to runtime errors or unexpected behavior.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-core-utils/CHANGELOG.md#_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Applying Patches for v5\nDESCRIPTION: This chore applies patches for version 5 of the gatsby-source-hacker-news package. These patches likely contain bug fixes and minor improvements for version 5 of the package.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-hacker-news/CHANGELOG.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\napply patches for v5 [#36796](https://github.com/gatsbyjs/gatsby/issues/36796) ([25f79b6](https://github.com/gatsbyjs/gatsby/commit/25f79b6c3719fdf09584ade620a05c66ba2a697c))\n```\n\n----------------------------------------\n\nTITLE: Bug Fix: TypeScript Parser for TS Files\nDESCRIPTION: This snippet describes a bug fix in gatsby-transformer-javascript-frontmatter where the TypeScript parser is used instead of the Flow parser for TypeScript files. This ensures correct parsing of TypeScript frontmatter.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-javascript-frontmatter/CHANGELOG.md#_snippet_14\n\n\n\n----------------------------------------\n\nTITLE: GraphQL Query with gatsby-source-contentful\nDESCRIPTION: This GraphQL query retrieves the SQIP data URI alongside fixed image data using gatsby-source-contentful.  The sqip field requests a SQIP version of the image with a specified number of primitives and blur. The fixed field requests image data with the 'GatsbyContentfulFixed_withWebp_noBase64' fragment.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-sqip/README.md#_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nimage {\n  sqip(numberOfPrimitives: 30, blur: 0) {\n    dataURI\n  },\n  fixed {\n    ...GatsbyContentfulFixed_withWebp_noBase64\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Babel Monorepo in gatsby-transformer-excel\nDESCRIPTION: This code snippet represents a chore update within the `gatsby-transformer-excel` package, specifically addressing an update related to the Babel monorepo. It ensures the Babel dependencies are up to date.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-excel/CHANGELOG.md#_snippet_1\n\nLANGUAGE: Patch\nCODE:\n```\nupdate babel monorepo [#37386](https://github.com/gatsbyjs/gatsby/issues/37386) ([b941876](https://github.com/gatsbyjs/gatsby/commit/b94187633d94d0f0071b38ffe93380dd802ec70f))\n```\n\n----------------------------------------\n\nTITLE: Updating Sharp dependency JavaScript\nDESCRIPTION: This snippet updates the Sharp dependency to version 0.32.1. Sharp is a high-speed Node.js module for image processing.  The update ensures the plugin uses the newest image processing features and bug fixes.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-images-contentful/CHANGELOG.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nupdate dependency sharp to ^0.32.1 [#38024](https://github.com/gatsbyjs/gatsby/issues/38024) ([d7cccfe](https://github.com/gatsbyjs/gatsby/commit/d7cccfeac7dbb0f130f87d809879284319d7830d))\n```\n\n----------------------------------------\n\nTITLE: Bumping node version requirement Gatsby\nDESCRIPTION: This commit updates the minimum required Node.js version for Gatsby to 10.13.0. This change ensures that developers are using a supported version of Node.js that meets the dependencies and functionalities required by Gatsby.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-styled-jsx/CHANGELOG.md#_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\n**gatsby:** bump node min version to 10.13.0 ([#22400](https://github.com/gatsbyjs/gatsby/issues/22400)) ([83d681a](https://github.com/gatsbyjs/gatsby/commit/83d681a))\n```\n\n----------------------------------------\n\nTITLE: Fixing diff-language styling in gatsby-remark-prismjs\nDESCRIPTION: This commit addresses an issue with diff-language styling within the gatsby-remark-prismjs plugin. It ensures that diff languages are properly styled when using Prism.js for syntax highlighting in code blocks.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-prismjs/CHANGELOG.md#_snippet_8\n\n\n\n----------------------------------------\n\nTITLE: Respecting Asset Prefix JavaScript\nDESCRIPTION: This snippet fixes a bug where the assetPrefix was not properly respected. assetPrefix allows the Gatsby site to be served from a subpath. This change ensures correct asset paths are generated.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-copy-linked-files/CHANGELOG.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\n**gatsby-remark-copy-linked-files:** respect assetPrefix ([#26976](https://github.com/gatsbyjs/gatsby/issues/26976)) ([6270c3d](https://github.com/gatsbyjs/gatsby/commit/6270c3d09ba5abfcd73197a3632bdbc737e96768))\n```\n\n----------------------------------------\n\nTITLE: Fixing Babel Monorepo issue in gatsby-source-faker\nDESCRIPTION: This snippet addresses an issue related to the Babel monorepo within the `gatsby-source-faker` package. It updates the Babel monorepo to resolve potential conflicts or incompatibilities. This bug fix ensures compatibility and stability for the plugin.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-faker/CHANGELOG.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nupdate babel monorepo [#37568](https://github.com/gatsbyjs/gatsby/issues/37568) ([13a0a9e](https://github.com/gatsbyjs/gatsby/commit/13a0a9e83dcb015b65dff6b73cdd5dea09c2988f))\n```\n\n----------------------------------------\n\nTITLE: Fixing SheetsRegistry for SSR in Gatsby - JavaScript\nDESCRIPTION: This bug fix addresses an issue where the SheetsRegistry was not properly isolated for each page during server-side rendering (SSR). It ensures that each page receives its own instance of the SheetsRegistry, preventing style conflicts and inconsistencies between pages. The solution involves creating a separate SheetsRegistry for each page during SSR.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-jss/CHANGELOG.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n**gatsby-plugin-jss:** use separate SheetsRegistry for each page ([#9401](https://github.com/gatsbyjs/gatsby/issues/9401)) ([15375c8](https://github.com/gatsbyjs/gatsby/commit/15375c8)), closes [#7716](https://github.com/gatsbyjs/gatsby/issues/7716)\n```\n\n----------------------------------------\n\nTITLE: Install Dependencies (Arch/Manjaro)\nDESCRIPTION: This command installs necessary dependencies for nvm (Node Version Manager) on Arch and Manjaro-based Linux distributions. The packages `grep`, `awk`, and `tar` are required for nvm to function correctly. The `-S` flag tells `pacman` to install the specified packages.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-0/index.mdx#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nsudo pacman -S grep awk tar\n```\n\n----------------------------------------\n\nTITLE: Updating Babel Monorepo in GatsbyJS\nDESCRIPTION: This snippet outlines the chore of updating the Babel monorepo within GatsbyJS. This involves upgrading the Babel packages to their latest versions, ensuring compatibility with the latest JavaScript features and improvements in the transpilation process.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-excel/CHANGELOG.md#_snippet_15\n\nLANGUAGE: None\nCODE:\n```\nupdate babel monorepo [#32564](https://github.com/gatsbyjs/gatsby/issues/32564) ([a554998](https://github.com/gatsbyjs/gatsby/commit/a554998b4f6765103b650813cf52dbfcc575fecf))\n```\n\n----------------------------------------\n\nTITLE: Updating minor package updates in Gatsby\nDESCRIPTION: This commit updates minor versions of various packages within the Gatsby project, with exceptions for react, babel, and eslint. This keeps dependencies up-to-date and incorporates bug fixes and improvements.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-toml/CHANGELOG.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nupdate minor updates in packages except react, babel and eslint ([#17254](https://github.com/gatsbyjs/gatsby/issues/17254)) ([252d867](https://github.com/gatsbyjs/gatsby/commit/252d867))\n```\n\n----------------------------------------\n\nTITLE: Remote Schema MD5 Diffing\nDESCRIPTION: This snippet describes the process of comparing MD5 hashes of the remote schema to determine if data needs to be refetched from WordPress. In production, a schema change triggers a full data refetch, while in development, only the schema is updated with a warning to run `gatsby clean` if data changes.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-wordpress/ARCHITECTURE.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Applying Patches for v4 in gatsby-plugin-google-analytics\nDESCRIPTION: Applies necessary patches for version 4 of the gatsby-plugin-google-analytics package. This chore ensures smooth transition and resolves any compatibility issues with the new version.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-google-analytics/CHANGELOG.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nf8c5141\n```\n\n----------------------------------------\n\nTITLE: Error Message Example in Gatsby\nDESCRIPTION: This error message shows a common error encountered during parallel query running in Gatsby.  The error indicates that a worker process exited before finishing its task.  Prior to the improvements in Gatsby v5.3, this error was difficult to debug due to the lack of a detailed stack trace.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/v5.3/index.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nERROR #85928\n\nAn error occurred during parallel query running.\n\nError: Worker exited before finishing task\n```\n\n----------------------------------------\n\nTITLE: Formatting changelog files chore\nDESCRIPTION: This commit focuses on formatting the changelog files within the `gatsby-remark-code-repls` package. The formatting ensures consistency and readability of the changelog, making it easier for developers to understand the changes made in each version.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-code-repls/CHANGELOG.md#_snippet_9\n\n\n\n----------------------------------------\n\nTITLE: Formatting Changelog Files\nDESCRIPTION: This commit formats changelog files to maintain consistency and readability. It improves the overall structure and appearance of the changelog.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-javascript-frontmatter/CHANGELOG.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\nFormat changelog files ([088f23b](https://github.com/gatsbyjs/gatsby/commit/088f23b084b67f746a383e06e9216cef83270317))\n```\n\n----------------------------------------\n\nTITLE: Updating Package Dependencies\nDESCRIPTION: This snippet updates minor updates in packages except react, babel and eslint. It addresses issue #17254. The goal is to keep the plugin up-to-date with the latest bug fixes and performance improvements in its dependencies, excluding core packages such as React, Babel and ESLint. This ensures stability and security within the plugin.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-emotion/CHANGELOG.md#_snippet_10\n\nLANGUAGE: Other\nCODE:\n```\nupdate minor updates in packages except react, babel and eslint ([#17254](https://github.com/gatsbyjs/gatsby/issues/17254)) ([252d867](https://github.com/gatsbyjs/gatsby/commit/252d867))\n```\n\n----------------------------------------\n\nTITLE: Migrating from replaceRouterComponent to wrapRootElement (Diff)\nDESCRIPTION: Demonstrates how to migrate from the deprecated `replaceRouterComponent` API to the `wrapRootElement` API in Gatsby.  The key change involves wrapping the root element with a provider (e.g., Redux Provider) directly within `wrapRootElement` instead of replacing the router component.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v1-to-v2.md#_snippet_23\n\nLANGUAGE: diff\nCODE:\n```\nimport * as React from 'react'\nimport { Provider } from 'react-redux'\n-import { Router } from 'react-router-dom'\n\n-export const replaceRouterComponent = ({ history }) => {\n+export const wrapRootElement = ({ element }) => {\n-  const ConnectedRouterWrapper = ({ children }) => (\n+  const ConnectedRootElement = (\n    <Provider store={store}>\n-      <Router history={history}>{children}</Router>\n+      {element}\n    </Provider>\n  )\n\n-  return ConnectedRouterWrapper\n+  return ConnectedRootElement\n}\n```\n\n----------------------------------------\n\nTITLE: Quoting ignore pattern Gatsby config\nDESCRIPTION: This commit fixes an issue where the ignore pattern in the Gatsby configuration was not properly wrapped in quotes. This ensures that the ignore pattern is correctly interpreted by the underlying tools and prevents potential errors during the build process.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-styled-jsx/CHANGELOG.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\nwrap ignore pattern in quotes ([#23176](https://github.com/gatsbyjs/gatsby/issues/23176)) ([7563db6](https://github.com/gatsbyjs/gatsby/commit/7563db6))\n```\n\n----------------------------------------\n\nTITLE: Chore: Update peerDeps\nDESCRIPTION: This code snippet updates the peerDependencies within the gatsby-plugin-google-gtag package. Updating peer dependencies ensures compatibility and proper functioning of the plugin within the Gatsby ecosystem.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-google-gtag/CHANGELOG.md#_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n#### Chores\n\n- Update peerDeps [#36965](https://github.com/gatsbyjs/gatsby/issues/36965) ([b624442](https://github.com/gatsbyjs/gatsby/commit/b6244424fe8b724cbc23b80b2b4f5424cc2055a4))\n```\n\n----------------------------------------\n\nTITLE: Applying Patches for Version 5\nDESCRIPTION: This commit applies patches for version 5 of gatsby-plugin-cxs, resolving issue #36796. This likely involves minor fixes or adjustments needed for the new major version.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-cxs/CHANGELOG.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\napply patches for v5 [#36796](https://github.com/gatsbyjs/gatsby/issues/36796) ([25f79b6](https://github.com/gatsbyjs/gatsby/commit/25f79b6c3719fdf09584ade620a05c66ba2a697c))\n```\n\n----------------------------------------\n\nTITLE: Updating minimatch dependency\nDESCRIPTION: This snippet updates the minimatch dependency to version ^3.1.2 for the gatsby-plugin-google-gtag package. This is a bug fix that ensures compatibility and addresses potential issues related to the minimatch dependency.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-google-gtag/CHANGELOG.md#_snippet_8\n\n\n\n----------------------------------------\n\nTITLE: Updating Semver dependency JavaScript\nDESCRIPTION: This snippet updates the semver dependency. Semver is a library for working with semantic versioning. Updating it ensures the package uses the latest version comparison and range features.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-images-contentful/CHANGELOG.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nupdate dependency semver to ^7.5.3 [#38296](https://github.com/gatsbyjs/gatsby/issues/38296) ([11e64e2](https://github.com/gatsbyjs/gatsby/commit/11e64e20898cc97289bdbda00eb4bcc309828b23))\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nupdate semver [#38171](https://github.com/gatsbyjs/gatsby/issues/38171) ([208cdef](https://github.com/gatsbyjs/gatsby/commit/208cdef13f6488251ba1810a57a1e28c38635631))\n```\n\n----------------------------------------\n\nTITLE: Fix Babelrc Configs Compilation JavaScript\nDESCRIPTION: This code snippet addresses an issue where babelrc configs were not properly used when compiling packages. This ensures that all packages are compiled with the correct babel configuration.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-canonical-urls/CHANGELOG.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nuse proper babelrc configs for compiling packages [#35948](https://github.com/gatsbyjs/gatsby/issues/35948) ([384e801](https://github.com/gatsbyjs/gatsby/commit/384e8019152ad9bfa221e3e8b6da54675c93f293))\n```\n\n----------------------------------------\n\nTITLE: Fixing ignore pattern in Gatsby\nDESCRIPTION: This commit fixes an issue related to the ignore pattern by wrapping it in quotes. The ignore pattern is used to specify files or directories that should be excluded from processing. Wrapping it in quotes ensures that the pattern is interpreted correctly, especially when it contains special characters. The related issue is [#23176](https://github.com/gatsbyjs/gatsby/issues/23176).\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-graphviz/CHANGELOG.md#_snippet_11\n\nLANGUAGE: Text\nCODE:\n```\nwrap ignore pattern in quotes ([#23176](https://github.com/gatsbyjs/gatsby/issues/23176)) ([7563db6](https://github.com/gatsbyjs/gatsby/commit/7563db6))\n```\n\n----------------------------------------\n\nTITLE: Fix: Updating Packages in Gatsby\nDESCRIPTION: This commit updates minor packages within the Gatsby project, excluding React, Babel, and ESLint. This ensures that the project utilizes the latest bug fixes and performance improvements from these packages, while maintaining compatibility with core dependencies.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-preload-fonts/CHANGELOG.md#_snippet_13\n\nLANGUAGE: Text\nCODE:\n```\nupdate minor updates in packages except react, babel and eslint ([#17254](https://github.com/gatsbyjs/gatsby/issues/17254)) ([252d867](https://github.com/gatsbyjs/gatsby/commit/252d867))\n```\n\n----------------------------------------\n\nTITLE: Frontmatter Date Example\nDESCRIPTION: This example shows how to format a date in the frontmatter using `formatString` argument in a GraphQL query. This is used for formatting the date in the blog post.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-5/index.mdx#_snippet_7\n\nLANGUAGE: mdx\nCODE:\n```\n---\ndate: \"2021-07-23\"\n---\n```\n\n----------------------------------------\n\nTITLE: JSON Imports: Follow JSON modules web spec (src/components/Navigation.js)\nDESCRIPTION: JSON modules now only allow importing the default export. This code demonstrates how to update your code to import the entire JSON object as the default export and access properties from it.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v2-to-v3.md#_snippet_35\n\nLANGUAGE: diff\nCODE:\n```\nimport React from \"react\"\n- import { items } from \"../data/navigation.json\"\n+ import navigationData from \"../data/navigation.json\"\n\nconst Navigation = () => (\n  <nav>\n    <ul>\n-      {items.map(item => {\n-        return <li><a href={item.to}>{item.text}</a></li>\n-      })}\n+      {navigationData.items.map(item => {\n+        return <li><a href={item.to}>{item.text}</a></li>\n+      })}\n    </ul>\n  </nav>\n)\n\nexport default Navigation\n```\n\n----------------------------------------\n\nTITLE: Fixing Ignore Pattern with Quotes\nDESCRIPTION: This snippet addresses a bug fix related to how ignore patterns are handled in the gatsby-transformer-pdf plugin. Specifically, it involves wrapping an ignore pattern in quotes. This is likely to ensure the pattern is correctly parsed and applied during the file processing, preventing unexpected behavior when certain filenames match a given regex.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-pdf/CHANGELOG.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n([#23176](https://github.com/gatsbyjs/gatsby/issues/23176)) ([7563db6](https://github.com/gatsbyjs/gatsby/commit/7563db6))\n```\n\n----------------------------------------\n\nTITLE: Install gatsby-transformer-json\nDESCRIPTION: Installation command for the gatsby-transformer-json plugin using npm.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-json/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install gatsby-transformer-json\n```\n\n----------------------------------------\n\nTITLE: Install ts-jest\nDESCRIPTION: Installs ts-jest to support tsconfig paths.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/testing/unit-testing.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev ts-jest\n```\n\n----------------------------------------\n\nTITLE: Remove unused argument\nDESCRIPTION: This code snippet removes an unused argument from a function in gatsby-source-contentful. This helps clean up the codebase and improve its maintainability by removing unnecessary parameters.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-contentful/CHANGELOG.md#_snippet_31\n\nLANGUAGE: diff\nCODE:\n```\n([#9866](https://github.com/gatsbyjs/gatsby/issues/9866)) ([88fffb5](https://github.com/gatsbyjs/gatsby/commit/88fffb5))\n```\n\n----------------------------------------\n\nTITLE: Install Plugin\nDESCRIPTION: Command to install the gatsby-transformer-screenshot plugin using npm. This command should be executed in the root directory of the Gatsby project.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-screenshot/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install gatsby-transformer-screenshot\n```\n\n----------------------------------------\n\nTITLE: Fixing Ignore Pattern in gatsby-source-lever\nDESCRIPTION: This commit fixes an issue where an ignore pattern was not properly wrapped in quotes, potentially causing incorrect file matching or exclusion. Wrapping the ignore pattern ensures that it is correctly interpreted by the file system or build tools.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-lever/CHANGELOG.md#_snippet_10\n\nLANGUAGE: Diff\nCODE:\n```\nwrap ignore pattern in quotes ([#23176](https://github.com/gatsbyjs/gatsby/issues/23176)) ([7563db6](https://github.com/gatsbyjs/gatsby/commit/7563db6))\n```\n\n----------------------------------------\n\nTITLE: Installing build-essential, git, libpng-dev on Debian\nDESCRIPTION: This command installs essential build tools, the git version control system, and the libpng-dev library for image manipulation, all in one line using apt on Debian.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/local-development/gatsby-on-linux.md#_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt install build-essential\nsudo apt install git\nsudo apt install libpng-dev\n```\n\n----------------------------------------\n\nTITLE: Correctly Catching 404s from NPM\nDESCRIPTION: This commit fixes an issue where the CLI was not correctly catching 404 errors from NPM when a package hadn't been published yet.  The pull request is referenced by its GitHub issue number.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-dev-cli/CHANGELOG.md#_snippet_9\n\nLANGUAGE: Text\nCODE:\n```\nCorrectly catch 404s from NPM when a package hasn't been published yet [#28297](https://github.com/gatsbyjs/gatsby/issues/28297) ([c993d52](https://github.com/gatsbyjs/gatsby/commit/c993d52bff1b2255ba8a2c0d04726bfdb71b070a))\n```\n\n----------------------------------------\n\nTITLE: Updating Minor Updates in Packages\nDESCRIPTION: This snippet updates minor updates in packages except react, babel, and eslint. This addresses issue #17254. This ensures the plugin uses the latest minor updates in its dependencies for stability and security.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-cxs/CHANGELOG.md#_snippet_21\n\nLANGUAGE: Text\nCODE:\n```\nupdate minor updates in packages except react, babel and eslint ([#17254](https://github.com/gatsbyjs/gatsby/issues/17254)) ([252d867](https://github.com/gatsbyjs/gatsby/commit/252d867))\n```\n\n----------------------------------------\n\nTITLE: Updating Peer Dependencies Chore JavaScript\nDESCRIPTION: This commit updates the peer dependencies for the gatsby-plugin-catch-links package, related to issue #36965. Updating peer dependencies ensures compatibility with other packages within the Gatsby ecosystem. This avoids potential conflicts or breaking changes that might arise from outdated dependencies.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-catch-links/CHANGELOG.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nUpdate peerDeps [#36965](https://github.com/gatsbyjs/gatsby/issues/36965) ([b624442](https://github.com/gatsbyjs/gatsby/commit/b6244424fe8b724cbc23b80b2b4f5424cc2055a4))\n```\n\n----------------------------------------\n\nTITLE: Updating Algoliasearch Dependency in Gatsby\nDESCRIPTION: This snippet updates the algoliasearch dependency to version ^3.35.0. This change addresses potential bugs and incorporates the latest features and improvements from the Algolia search library, ensuring seamless search functionality for Gatsby sites.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-npm-package-search/CHANGELOG.md#_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n436f11d\n```\n\n----------------------------------------\n\nTITLE: Removing Multiple H1s from Plugin Docs\nDESCRIPTION: This commit focuses on improving the documentation of the official plugin by removing multiple `<h1>` elements. This change contributes to better document structure and accessibility.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-styled-components/CHANGELOG.md#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nremove multiple h1s from official plugin docs [#29465](https://github.com/gatsbyjs/gatsby/issues/29465) ([9428145](https://github.com/gatsbyjs/gatsby/commit/9428145eb57c60df229bb0be866d08cf8de777d5))\n```\n\n----------------------------------------\n\nTITLE: Creating a New Gatsby Site\nDESCRIPTION: This command uses the Gatsby CLI to create a new Gatsby site based on the minimal starter template. It initializes a project named 'bug-repro' using the specified Git repository as a base.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/contributing/how-to-make-a-reproducible-test-case.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx gatsby new bug-repro https://github.com/gatsbyjs/gatsby-starter-minimal\n```\n\n----------------------------------------\n\nTITLE: Making Plugin Config Optional in Gatsby Google Gtag\nDESCRIPTION: This commit makes the plugin configuration optional in the gatsby-plugin-google-gtag plugin, providing more flexibility for users who don't require specific configuration settings.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-google-gtag/CHANGELOG.md#_snippet_26\n\nLANGUAGE: Diff\nCODE:\n```\nfa8b1b7\n```\n\n----------------------------------------\n\nTITLE: Bumping Node.js Minimum Version\nDESCRIPTION: This commit updates the minimum required Node.js version for Gatsby to 10.13.0. Bumping the minimum version allows Gatsby to leverage newer Node.js features and optimizations.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-lever/CHANGELOG.md#_snippet_11\n\nLANGUAGE: Shell\nCODE:\n```\n**gatsby:** bump node min version to 10.13.0 ([#22400](https://github.com/gatsbyjs/gatsby/issues/22400)) ([83d681a](https://github.com/gatsbyjs/gatsby/commit/83d681a))\n```\n\n----------------------------------------\n\nTITLE: Regenerating Changelogs in GatsbyJS\nDESCRIPTION: This snippet describes a chore to regenerate the changelogs within GatsbyJS. Regenerating changelogs ensures that the changelog files accurately reflect the changes made to the codebase. This process is likely automated and helps keep the documentation up-to-date.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-excel/CHANGELOG.md#_snippet_13\n\nLANGUAGE: None\nCODE:\n```\nre-generate changelogs [#32886](https://github.com/gatsbyjs/gatsby/issues/32886) ([417df15](https://github.com/gatsbyjs/gatsby/commit/417df15230be368a9db91f2ad1a9bc0442733177))\n```\n\n----------------------------------------\n\nTITLE: Updating Peer Dependencies in Gatsby\nDESCRIPTION: This chore updates the peer dependencies for the gatsby-source-hacker-news package. This ensures compatibility between the package and its peer dependencies within the Gatsby ecosystem.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-hacker-news/CHANGELOG.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nUpdate peerDeps [#36965](https://github.com/gatsbyjs/gatsby/issues/36965) ([b624442](https://github.com/gatsbyjs/gatsby/commit/b6244424fe8b724cbc23b80b2b4f5424cc2055a4))\n```\n\n----------------------------------------\n\nTITLE: Placeholder Style Plugin Option\nDESCRIPTION: Example configuration of the `placeholderStyleName` plugin option.  This option specifies the machine name of the Drupal image style to use for low-quality image placeholders when using Gatsby Image CDN.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-drupal/README.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  resolve: `gatsby-source-drupal`,\n  options: {\n    placeholderStyleName: `custom_placeholder` // default is `placeholder`\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: RFC Template\nDESCRIPTION: This is the RFC template that should be copied and filled out when proposing a new feature or change to Gatsby. It includes sections for summarizing the feature, providing examples, explaining the motivation, detailing the design, discussing drawbacks and alternatives, outlining the adoption strategy, and addressing unresolved questions. It is written in Markdown.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/contributing/rfc-process.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Summary\n\nBrief explanation of the feature.\n\n## Try it out\n\nSection with instructions on how to use the feature, e.g. with a canary.\n\n<!-- When defining a canary for installation, tell users to use `--save-exact` (npm) or `--exact` (yarn) flag. -->\n\n### CodeSandbox\n\nProvide an up-to-date CodeSandbox with an example project using the canary. Users can use this project to provide minimal reproductions.\n\n## Basic example\n\nIf the proposal involves a new or changed API, include a basic code example.\nOmit this section if it's not applicable.\n\n## Motivation\n\nWhy are we doing this? What use cases does it support? What is the expected\noutcome?\n\nPlease focus on explaining the motivation so that if this RFC is not accepted,\nthe motivation could be used to develop alternative solutions. In other words,\nenumerate the constraints you are trying to solve without coupling them too\nclosely to the solution you have in mind.\n\n## Detailed design\n\nThis is the bulk of the RFC. Explain the design in enough detail for somebody\nfamiliar with Gatsby to understand, and for somebody familiar with the\nimplementation to implement. This should get into specifics and corner-cases,\nand include examples of how the feature is used. Any new terminology should be\ndefined here.\n\n## Drawbacks\n\nWhy should we _not_ do this? Please consider:\n\n- implementation cost, both in term of code size and complexity\n- whether the proposed feature can be implemented in user space\n- the impact on teaching people Gatsby\n- integration of this feature with other existing and planned features\n- cost of migrating existing Gatsby applications (is it a breaking change?)\n\nThere are tradeoffs to choosing any path. Attempt to identify them here.\n\n## Alternatives\n\nWhat other designs have been considered? What is the impact of not doing this?\n\n## Adoption strategy\n\nIf we implement this proposal, how will existing Gatsby developers adopt it? Is\nthis a breaking change? Can we write a codemod? Should we coordinate with\nother projects or libraries?\n\n## How we teach this\n\nWhat names and terminology work best for these concepts and why? How is this\nidea best presented? As a continuation of existing Gatsby patterns?\n\nWould the acceptance of this proposal mean the Gatsby documentation must be\nre-organized or altered? Does it change how Gatsby is taught to new developers\nat any level?\n\nHow should this feature be taught to existing Gatsby developers?\n\n## Unresolved questions\n\nOptional, but suggested for first drafts. What parts of the design are still\nTBD?\n\n```\n\n----------------------------------------\n\nTITLE: Bumping Babel Minor Version in gatsby-plugin-google-analytics\nDESCRIPTION: Bumps the minor version of Babel in the gatsby-plugin-google-analytics package. This chore ensures that the plugin uses a more recent version of Babel, potentially including bug fixes and performance improvements.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-google-analytics/CHANGELOG.md#_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\n7d42e8d\n```\n\n----------------------------------------\n\nTITLE: Install latest React version (Shell)\nDESCRIPTION: Installs the latest versions of React and React DOM using npm. This ensures compatibility with Gatsby v5. The `--legacy-peer-deps` flag might be needed for npm 7 and higher.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v4-to-v5.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install react@latest react-dom@latest\n```\n\n----------------------------------------\n\nTITLE: Updating Cheerio Dependency in Gatsby\nDESCRIPTION: This code snippet updates the cheerio dependency to version ^1.0.0-rc.3 within the Gatsby project. Cheerio is a library used for parsing and manipulating HTML, similar to jQuery.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-images-contentful/CHANGELOG.md#_snippet_40\n\nLANGUAGE: none\nCODE:\n```\n- update dependency cheerio to ^1.0.0-rc.3 ([#16831](https://github.com/gatsbyjs/gatsby/issues/16831)) ([55bee35](https://github.com/gatsbyjs/gatsby/commit/55bee35))\n```\n\n----------------------------------------\n\nTITLE: Updating Parcel version in gatsby-parcel-config\nDESCRIPTION: This commit updates the Parcel dependency to version 2.8.2 within the gatsby-parcel-config package.  This is likely a bug fix or performance improvement to the underlying bundler.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-parcel-config/CHANGELOG.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nupdate parcel to v2.8.2 [#37383](https://github.com/gatsbyjs/gatsby/issues/37383) ([7fda6d1](https://github.com/gatsbyjs/gatsby/commit/7fda6d163eadb9a871b7954c51abfd450939b32d))\n```\n\n----------------------------------------\n\nTITLE: Removing Wrong Overriding in gatsby-plugin-feed\nDESCRIPTION: This bug fix removes an incorrect overriding issue present within the gatsby-plugin-feed plugin. It ensures that configurations and settings are correctly applied without unintended overwrites. This fix was implemented in version 2.3.19.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-feed/CHANGELOG.md#_snippet_11\n\n\n\n----------------------------------------\n\nTITLE: Schema Customization: Remove `many` argument from `childOf` directive (gatsby-node.js)\nDESCRIPTION: The `many` argument is no longer needed for the `childOf` directive. This snippet shows how to remove the `many` argument from the `childOf` directive.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v2-to-v3.md#_snippet_29\n\nLANGUAGE: diff\nCODE:\n```\nexports.createSchemaCustomization = ({ actions }) => {\n  const { createTypes } = actions\n  createTypes(`\n-   type Foo implements Node @childOf(types: [\"Bar\"], many: true)\n+   type Foo implements Node @childOf(types: [\"Bar\"])\n    {\n      id: ID!\n    }\n  `)\n}\n```\n\n----------------------------------------\n\nTITLE: Allowing React/ReactDOM Experimental\nDESCRIPTION: This chore allows the use of experimental versions of React and ReactDOM. This can enable users to test new features and improvements in React.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-google-tagmanager/CHANGELOG.md#_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Re-generating Changelogs\nDESCRIPTION: Re-generates the changelogs for the gatsby-source-npm-package-search package. This ensures the changelogs are up-to-date and reflect the latest changes.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-npm-package-search/CHANGELOG.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\nre-generate changelogs [#32886](https://github.com/gatsbyjs/gatsby/issues/32886) ([417df15](https://github.com/gatsbyjs/gatsby/commit/417df15230be368a9db91f2ad1a9bc0442733177))\n```\n\n----------------------------------------\n\nTITLE: Updating Cross-Env Dependency (JavaScript)\nDESCRIPTION: This commit updates the `cross-env` dependency to version ^7.0.3 in the gatsby-plugin-jss package. This dependency is used to set environment variables cross-platform.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-jss/CHANGELOG.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nupdate dependency cross-env to ^7.0.3 [#28505](https://github.com/gatsbyjs/gatsby/issues/28505) ([a819b9b](https://github.com/gatsbyjs/gatsby/commit/a819b9bfb663139f7b06c3ed7d6d6069a2382b2c))\n```\n\n----------------------------------------\n\nTITLE: Updating Babel Monorepo in gatsby-plugin-cxs\nDESCRIPTION: This commit updates the Babel monorepo within the gatsby-plugin-cxs package as part of a chore. It addresses issue #37386.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-cxs/CHANGELOG.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nupdate babel monorepo [#37386](https://github.com/gatsbyjs/gatsby/issues/37386) ([b941876](https://github.com/gatsbyjs/gatsby/commit/b94187633d94d0f0071b38ffe93380dd802ec70f))\n```\n\n----------------------------------------\n\nTITLE: Bumping Babel Minor Version\nDESCRIPTION: This snippet bumps the minor version of the Babel dependency. This is a chore to keep the plugin up-to-date with the latest Babel features and improvements.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-google-gtag/CHANGELOG.md#_snippet_17\n\n\n\n----------------------------------------\n\nTITLE: Bumping minimum Node version - GatsbyJS\nDESCRIPTION: This feature bumps the minimum required Node.js version to 10.13.0 for the Gatsby project.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-custom-blocks/CHANGELOG.md#_snippet_12\n\nLANGUAGE: none\nCODE:\n```\n**gatsby:** bump node min version to 10.13.0 ([#22400](https://github.com/gatsbyjs/gatsby/issues/22400)) ([83d681a](https://github.com/gatsbyjs/gatsby/commit/83d681a))\n```\n\n----------------------------------------\n\nTITLE: Fix: Pin Cheerio Version - gatsby-remark-prismjs\nDESCRIPTION: This code snippet addresses a bug by pinning the Cheerio dependency to a specific version. This ensures compatibility and prevents unexpected issues arising from newer Cheerio versions, resolving issue #39066.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-prismjs/CHANGELOG.md#_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\ne2c3a86(https://github.com/gatsbyjs/gatsby/commit/e2c3a866e438618275a5c2979cb20e47b84fe8dc)\n```\n\n----------------------------------------\n\nTITLE: Fixing Warnings in Plugin Options Schema\nDESCRIPTION: This commit addresses an issue where warnings in `pluginOptionsSchema` were causing the plugin to throw an error. The fix prevents the plugin from throwing errors when encountering warnings in the schema.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-cxs/CHANGELOG.md#_snippet_6\n\n\n\n----------------------------------------\n\nTITLE: Updating Babel monorepo again\nDESCRIPTION: This commit updates the Babel monorepo to the latest version. The update includes improvements in performance, stability, and new features for transpiling JavaScript code.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-twitter/CHANGELOG.md#_snippet_11\n\nLANGUAGE: TEXT\nCODE:\n```\nupdate babel monorepo [#32564](https://github.com/gatsbyjs/gatsby/issues/32564) ([a554998](https://github.com/gatsbyjs/gatsby/commit/a554998b4f6765103b650813cf52dbfcc575fecf))\n```\n\n----------------------------------------\n\nTITLE: Opening the Project in VS Code\nDESCRIPTION: This command opens the project directory in Visual Studio Code. It's a convenience command for developers using VS Code to quickly access the project files.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/peril/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ncode .\n```\n\n----------------------------------------\n\nTITLE: Fixing createPage Action Errors in Gatsby JavaScript\nDESCRIPTION: This snippet addresses an issue where createPage actions in Gatsby were not providing structured errors. By fixing it, developers can now get more detailed and useful error messages when creating pages. This enhances the debugging process and improves the overall development experience.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-cli/CHANGELOG.md#_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\n44654be\n```\n\n----------------------------------------\n\nTITLE: Fixing ignore pattern in gatsby-source-npm-package-search\nDESCRIPTION: This bug fix addresses an issue where the ignore pattern was not correctly wrapped in quotes.  Wrapping the ignore pattern in quotes ensures that the pattern is properly interpreted by the relevant tools or scripts, preventing unexpected behavior or errors related to file exclusion during the build process.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-npm-package-search/CHANGELOG.md#_snippet_9\n\nLANGUAGE: Text\nCODE:\n```\nwrap ignore pattern in quotes ([#23176](https://github.com/gatsbyjs/gatsby/issues/23176)) ([7563db6](https://github.com/gatsbyjs/gatsby/commit/7563db6))\n```\n\n----------------------------------------\n\nTITLE: Correcting Links in Package Changelogs (JavaScript)\nDESCRIPTION: This code snippet shows a commit that corrects links in the package changelogs. This improves the usability and maintainability of the changelogs themselves.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-page-utils/CHANGELOG.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nd07b9dd\n```\n\n----------------------------------------\n\nTITLE: Fix Exported Queries for StaticQuery (JavaScript)\nDESCRIPTION: Correctly replaces exported queries for the StaticQuery component within Gatsby. This ensures that static queries are properly processed and injected during the build process.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/babel-plugin-remove-graphql-queries/CHANGELOG.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n9c9607a\n```\n\n----------------------------------------\n\nTITLE: Bumping Minimum Node Version (JavaScript)\nDESCRIPTION: This snippet highlights a feature update where the minimum required Node.js version for Gatsby was increased to 10.13.0. This ensures compatibility with newer JavaScript features and performance improvements. It's a breaking change that requires users to update their Node.js installation.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-xml/CHANGELOG.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n**gatsby:** bump node min version to 10.13.0 ([#22400](https://github.com/gatsbyjs/gatsby/issues/22400)) ([83d681a](https://github.com/gatsbyjs/gatsby/commit/83d681a))\n```\n\n----------------------------------------\n\nTITLE: Fixing dependencies for gatsby-transformer-excel\nDESCRIPTION: This code snippet showcases a bug fix related to updating minor and patch dependencies for the gatsby-transformer-excel plugin. The update addresses potential issues or vulnerabilities in the plugin's dependencies.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-excel/CHANGELOG.md#_snippet_22\n\nLANGUAGE: Text\nCODE:\n```\n- **deps:** update minor and patch for gatsby-transformer-excel ([#27394](https://github.com/gatsbyjs/gatsby/issues/27394)) ([3a3c3e7](https://github.com/gatsbyjs/gatsby/commit/3a3c3e7f0942578b5ee113056d4883c7c277bdd3))\n```\n\n----------------------------------------\n\nTITLE: Updating urijs dependency in gatsby-remark-code-repls\nDESCRIPTION: This snippet describes the update of the urijs dependency to version ^1.19.11 in the gatsby-remark-code-repls package. It aims to resolve potential issues or improve functionality related to URI manipulation within the plugin by using a more current version of the urijs library.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-code-repls/CHANGELOG.md#_snippet_6\n\nLANGUAGE: none\nCODE:\n```\nupdate dependency urijs to ^1.19.11 for gatsby-remark-code-repls [#35544](https://github.com/gatsbyjs/gatsby/issues/35544) ([130d222](https://github.com/gatsbyjs/gatsby/commit/130d2221e50547ec22beeb5c63e05032c4a92c66))\n```\n\n----------------------------------------\n\nTITLE: Updating parse-numeric-range dependency\nDESCRIPTION: This code snippet shows the update of the parse-numeric-range dependency to version ^1.3.0 for the gatsby-remark-embed-snippet package. This resolves potential issues related to parsing numeric ranges within code snippets.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-embed-snippet/CHANGELOG.md#_snippet_1\n\nLANGUAGE: none\nCODE:\n```\nupdate dependency parse-numeric-range to ^1.3.0 for gatsby-remark-embed-snippet [#37860](https://github.com/gatsbyjs/gatsby/issues/37860) ([83db0b7](https://github.com/gatsbyjs/gatsby/commit/83db0b7729b58c386e1c6459966edec357612791))\n```\n\n----------------------------------------\n\nTITLE: Fixing Cheerio Snapshots JavaScript\nDESCRIPTION: This snippet fixes an issue related to Cheerio snapshots by updating them. The fix is related to issues #31298 and #31483 on GitHub. Cheerio is a fast, flexible, and lean implementation of core jQuery designed specifically for the server.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-copy-linked-files/CHANGELOG.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nupdate cheerio snapshots [#31298](https://github.com/gatsbyjs/gatsby/issues/31298) [#31483](https://github.com/gatsbyjs/gatsby/issues/31483) ([67a4fce](https://github.com/gatsbyjs/gatsby/commit/67a4fcef4651443cbe89923d4ac80e5600d94c41))\n```\n\n----------------------------------------\n\nTITLE: Unit Test Setup with Babel Register (JavaScript)\nDESCRIPTION: This JavaScript code demonstrates how to configure a worker pool for unit tests when using transpiled source files (e.g., TypeScript). It initializes the worker pool and sets the `NODE_OPTIONS` environment variable to require `@babel/register` in the worker process. This allows the worker process to load and execute untranspiled modules.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-worker/README.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst testWorkerPool = new WorkerPool<WorkerModuleType>(workerModule, {\n  numWorkers,\n  env: {\n    NODE_OPTIONS: `--require ${require.resolve(`./ts-register`)}`,\n  },\n}) \n```\n\n----------------------------------------\n\nTITLE: Updating XLSX dependency\nDESCRIPTION: This code snippet updates the `xlsx` dependency, likely to address bug fixes or introduce new features in Excel file processing. The change log notes that the dependency `xlsx` is updated to version `0.15.6`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-excel/CHANGELOG.md#_snippet_24\n\nLANGUAGE: Text\nCODE:\n```\n- update dependency xlsx to ^0.15.6 ([#22326](https://github.com/gatsbyjs/gatsby/issues/22326)) ([bdbc980](https://github.com/gatsbyjs/gatsby/commit/bdbc980))\n```\n\n----------------------------------------\n\nTITLE: Updating Babel Monorepo in GatsbyJS\nDESCRIPTION: This snippet outlines the chore of updating the Babel monorepo within GatsbyJS. This involves upgrading the Babel packages to their latest versions, ensuring compatibility with the latest JavaScript features and improvements in the transpilation process.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-excel/CHANGELOG.md#_snippet_14\n\nLANGUAGE: None\nCODE:\n```\nupdate babel monorepo [#32996](https://github.com/gatsbyjs/gatsby/issues/32996) ([048c7a7](https://github.com/gatsbyjs/gatsby/commit/048c7a727bbc6a9ad8e27afba72ee20e946c4aaa))\n```\n\n----------------------------------------\n\nTITLE: Normalizing Windows drive letter case - gatsby-cli JavaScript\nDESCRIPTION: This snippet normalizes the case of Windows drive letters within the gatsby-cli. This ensures consistent file path handling across different operating systems, preventing issues caused by case-sensitive path comparisons.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-cli/CHANGELOG.md#_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nnormalize case of windows drive letter ([#20437](https://github.com/gatsbyjs/gatsby/issues/20437)) ([3e9bf07](https://github.com/gatsbyjs/gatsby/commit/3e9bf07))\n```\n\n----------------------------------------\n\nTITLE: Updating Minor Package Updates\nDESCRIPTION: This snippet updates minor version bumps across various packages. These updates bring in enhancements, bug fixes, and performance improvements from the updated packages.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-mongodb/CHANGELOG.md#_snippet_15\n\n\n\n----------------------------------------\n\nTITLE: Adding Drupal JSON:API Includes Support in Gatsby Source Drupal\nDESCRIPTION: This code snippet integrates Drupal JSON:API includes support to enhance data fetching capabilities within the gatsby-source-drupal plugin.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-drupal/CHANGELOG.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nJSON:API\n```\n\n----------------------------------------\n\nTITLE: Adding More Styles to CSS Module\nDESCRIPTION: This CSS snippet demonstrates adding multiple styles to a CSS Module for the Layout component. It includes styles for the container, heading, navigation links, navigation link item, and navigation link text.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-2/index.mdx#_snippet_22\n\nLANGUAGE: CSS\nCODE:\n```\n.container {\n  margin: auto;\n  max-width: 500px;\n  font-family: sans-serif;\n}\n\n/* highlight-start */\n.heading {\n  color: rebeccapurple;\n}\n\n.nav-links {\n  display: flex;\n  list-style: none;\n  padding-left: 0;\n}\n\n.nav-link-item {\n  padding-right: 2rem;\n}\n\n.nav-link-text {\n  color: black;\n}\n/* highlight-end */\n```\n\n----------------------------------------\n\nTITLE: Updating Babel Monorepo\nDESCRIPTION: This bug fix updates the Babel monorepo in the gatsby-source-hacker-news package.  This ensures compatibility with the latest JavaScript features and fixes any known issues in the Babel transpilation process.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-hacker-news/CHANGELOG.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nupdate babel monorepo [#37568](https://github.com/gatsbyjs/gatsby/issues/37568) ([13a0a9e](https://github.com/gatsbyjs/gatsby/commit/13a0a9e83dcb015b65dff6b73cdd5dea09c2988f))\n```\n\n----------------------------------------\n\nTITLE: Run Gatsby Benchmark\nDESCRIPTION: This shell command runs the Gatsby benchmark. It uses environment variables `N` to specify the number of pages to generate (defaulting to 512 if not specified) and `M` to set the memory limit for Node.js in GB (defaulting to 1GB if not specified).\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/benchmarks/gabe-fs-markdown/README.md#_snippet_0\n\nLANGUAGE: Shell Script\nCODE:\n```\nN=1000 M=2 yarn bench\n```\n\n----------------------------------------\n\nTITLE: Hybrid Icon Generation Configuration\nDESCRIPTION: This code configures the plugin to generate icons in hybrid mode, using a source icon and a custom `icons` array.  The `icon` option specifies the source image, and the `icons` array specifies the desired icon sizes and paths, allowing for more control over the generated icons.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-manifest/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nicon: `src/images/icon.png`, // This path is relative to the root of the site.\n  icons: [\n    {\n      src: `/favicons/android-chrome-192x192.png`,\n      sizes: `192x192`,\n      type: `image/png`,\n    },\n    {\n      src: `/favicons/android-chrome-512x512.png`,\n      sizes: `512x512`,\n      type: `image/png`,\n    },\n  ], // Add or remove icon sizes as desired\n```\n\n----------------------------------------\n\nTITLE: Cloning Gatsby Repository\nDESCRIPTION: This command clones the Gatsby repository from GitHub. It's the first step to access the 'using-mdx' example.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/using-mdx/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngit clone git@github.com:gatsbyjs/gatsby.git\n```\n\n----------------------------------------\n\nTITLE: Reverting Package.json Changes\nDESCRIPTION: This command reverts any changes made to the `package.json` file and then forces Yarn to reinstall the dependencies. It's used to undo any modifications caused by development and testing.  This is useful for restoring the project to a clean state.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/contributing/code-contributions.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ngit checkout package.json; yarn --force\n```\n\n----------------------------------------\n\nTITLE: Fixing Package Updates in Gatsby\nDESCRIPTION: This snippet addresses an issue where minor updates were not being correctly applied across various Gatsby packages. It ensures that the package dependencies are up-to-date with the latest minor releases.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-screenshot/CHANGELOG.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nupdate minor updates in packages ([#18875](https://github.com/gatsbyjs/gatsby/issues/18875)) ([b692879](https://github.com/gatsbyjs/gatsby/commit/b692879))\n```\n\n----------------------------------------\n\nTITLE: Updating common-tags Dependency\nDESCRIPTION: This change updates the common-tags dependency to version ^1.8.2. This update addresses potential issues and ensures compatibility with the gatsby-remark-responsive-iframe package.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-responsive-iframe/CHANGELOG.md#_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\nupdate dependency common-tags to ^1.8.2 for gatsby-remark-responsive-iframe [#34125](https://github.com/gatsbyjs/gatsby/issues/34125) ([92fc106](https://github.com/gatsbyjs/gatsby/commit/92fc106b0fb85b111998bc998892105048340c87))\n```\n\n----------------------------------------\n\nTITLE: Regenerating Changelogs\nDESCRIPTION: This chore focuses on regenerating the changelogs for the gatsby-transformer-javascript-static-exports package. Regenerating changelogs ensures that the information is up-to-date and accurate.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-javascript-static-exports/CHANGELOG.md#_snippet_2\n\nLANGUAGE: Text\nCODE:\n```\nre-generate changelogs [#32886](https://github.com/gatsbyjs/gatsby/issues/32886) ([417df15](https://github.com/gatsbyjs/gatsby/commit/417df15230be368a9db91f2ad1a9bc0442733177))\n```\n\n----------------------------------------\n\nTITLE: Adding TypeScript types and improving README\nDESCRIPTION: This commit introduces TypeScript types to enhance the `gatsby-cypress` package and improves the README file for better documentation. This change improves the developer experience by providing type safety and clearer instructions.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-cypress/CHANGELOG.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Updating Minor Packages - Bug Fix\nDESCRIPTION: This snippet documents a bug fix related to updating minor packages within the Gatsby ecosystem. It excludes react, babel, and eslint from the update process.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-styled-components/CHANGELOG.md#_snippet_12\n\nLANGUAGE: Text\nCODE:\n```\nupdate minor updates in packages except react, babel and eslint ([#17254](https://github.com/gatsbyjs/gatsby/issues/17254)) ([252d867](https://github.com/gatsbyjs/gatsby/commit/252d867))\n```\n\n----------------------------------------\n\nTITLE: Example diff for global-graphql-calls codemod\nDESCRIPTION: This diff demonstrates the effect of the `global-graphql-calls` codemod. It adds the necessary import statement for the `graphql` tag function in files where it is used.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-codemods/README.md#_snippet_7\n\nLANGUAGE: Diff\nCODE:\n```\nimport React from \"react\"\n+ import { graphql } from \"gatsby\"\n\nexport default ({ data }) => (\n  <h1>{data.site.siteMetadata.title}</h1>\n)\n\nexport const query = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: Updating Axios Dependency\nDESCRIPTION: This commit updates the `axios` dependency to version ^0.19.2. Axios is a promise-based HTTP client for the browser and node.js. Updating axios ensures the project uses the latest bug fixes, security patches, and features.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-lever/CHANGELOG.md#_snippet_12\n\nLANGUAGE: Shell\nCODE:\n```\nupdate dependency axios to ^0.19.2 ([#22317](https://github.com/gatsbyjs/gatsby/issues/22317)) ([91e780f](https://github.com/gatsbyjs/gatsby/commit/91e780f))\n```\n\n----------------------------------------\n\nTITLE: Wrapping ignore pattern in quotes\nDESCRIPTION: This commit fixes an issue where an ignore pattern was not wrapped in quotes.  This ensures that the ignore pattern is correctly interpreted. Issue #23176 corresponds to this fix.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-link/CHANGELOG.md#_snippet_5\n\n\n\n----------------------------------------\n\nTITLE: Updating Babel Monorepo - JavaScript\nDESCRIPTION: This snippet updates the Babel monorepo for the gatsby-plugin-benchmark-reporting package. It addresses issue #32238 on GitHub.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-benchmark-reporting/CHANGELOG.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nupdate babel monorepo [#32238](https://github.com/gatsbyjs/gatsby/issues/32238) ([466d4c0](https://github.com/gatsbyjs/gatsby/commit/466d4c087bbc96abb942a02c67243bcc9a4f2a0a))\n```\n\n----------------------------------------\n\nTITLE: Updating Babel Monorepo\nDESCRIPTION: This commit updates the Babel monorepo to the latest versions. Updating Babel ensures compatibility and access to the latest features and bug fixes in the Babel ecosystem. It addresses issue #37568.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-cypress/CHANGELOG.md#_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Adding JWT Base Path Option in Gatsby Source WordPress\nDESCRIPTION: This commit introduces a new feature to gatsby-source-wordpress: the `jwt_base_path` option. This allows users to specify a base path for JWT (JSON Web Token) authentication, providing more flexibility in configuring authentication for WordPress data sources.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-wordpress/CHANGELOG.md#_snippet_14\n\n\n\n----------------------------------------\n\nTITLE: Adding Deprecation Notice to Gatsby React Helmet\nDESCRIPTION: This code snippet refers to the addition of a deprecation notice to the `gatsby-plugin-react-helmet` package, as indicated by issue #36166.  The linked commit provides the implementation details.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-react-helmet/CHANGELOG.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nAdd deprecation notice [#36166](https://github.com/gatsbyjs/gatsby/issues/36166) ([c6627e3](https://github.com/gatsbyjs/gatsby/commit/c6627e3353d0299bb6bc743512eb8dbe77d52dbc))\n```\n\n----------------------------------------\n\nTITLE: Updating Babel Monorepo in gatsby-plugin-layout\nDESCRIPTION: This commit updates the babel monorepo dependency. The update is made as part of chore work, addressing issue #37386 on the Gatsby repository.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-layout/CHANGELOG.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nupdate babel monorepo [#37386](https://github.com/gatsbyjs/gatsby/issues/37386) ([b941876](https://github.com/gatsbyjs/gatsby/commit/b94187633d94d0f0071b38ffe93380dd802ec70f))\n```\n\n----------------------------------------\n\nTITLE: Bumping Babel Minor version\nDESCRIPTION: Bumps the Babel minor version. This upgrades babel.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-npm-package-search/CHANGELOG.md#_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\nbump babel minor [#31857](https://github.com/gatsbyjs/gatsby/issues/31857) ([7d42e8d](https://github.com/gatsbyjs/gatsby/commit/7d42e8d866e46e9c39838d812d080d06433f7060))\n```\n\nLANGUAGE: Shell\nCODE:\n```\nbump babel minor [#31857](https://github.com/gatsbyjs/gatsby/issues/31857) [#31859](https://github.com/gatsbyjs/gatsby/issues/31859) ([8636025](https://github.com/gatsbyjs/gatsby/commit/863602567930a39142ed33d9d1f1813b7dec8686))\n```\n\n----------------------------------------\n\nTITLE: Updating posts constant in gatsby-node.js\nDESCRIPTION: This snippet updates the `posts` constant in `gatsby-node.js` to reference the `allMdx` query result instead of `allMarkdownRemark`.  This ensures the blog post creation logic iterates over MDX nodes.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/routing/migrate-remark-to-mdx.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n-const posts = result.data.allMarkdownRemark.nodes\n+const posts = result.data.allMdx.nodes\n```\n\n----------------------------------------\n\nTITLE: Wrapping Ignore Pattern in Quotes in Gatsby\nDESCRIPTION: This commit wraps an ignore pattern in quotes, likely to resolve an issue where the pattern was not being correctly interpreted, ensuring that files or directories are properly ignored.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-styletron/CHANGELOG.md#_snippet_9\n\nLANGUAGE: none\nCODE:\n```\nwrap ignore pattern in quotes ([#23176](https://github.com/gatsbyjs/gatsby/issues/23176)) ([7563db6](https://github.com/gatsbyjs/gatsby/commit/7563db6))\n```\n\n----------------------------------------\n\nTITLE: CSS Highlighting Example CSS\nDESCRIPTION: Shows an example of highlighting lines in a CSS snippet using the highlight-line and highlight-range comments.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-embed-snippet/README.md#_snippet_7\n\nLANGUAGE: css\nCODE:\n```\nhtml {\n  /* highlight-range{1-2} */\n  height: 100%;\n  width: 100%;\n}\n\n* {\n  box-sizing: border-box; /* highlight-line */\n}\n```\n\n----------------------------------------\n\nTITLE: Updating fast-glob dependency - JavaScript\nDESCRIPTION: This snippet updates the fast-glob dependency to version ^3.2.7 for the gatsby-plugin-benchmark-reporting package. It resolves issue #32584 on GitHub.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-benchmark-reporting/CHANGELOG.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nupdate dependency fast-glob to ^3.2.7 for gatsby-plugin-benchmark-reporting [#32584](https://github.com/gatsbyjs/gatsby/issues/32584) ([5f406a9](https://github.com/gatsbyjs/gatsby/commit/5f406a9848a1eb2f9e0462cd51d6f544e244bb03))\n```\n\n----------------------------------------\n\nTITLE: Updating sharp dependency in gatsby-remark-images-contentful\nDESCRIPTION: This code snippet represents a chore where the sharp dependency was updated. This update likely incorporates performance improvements or bug fixes from the sharp library.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-images-contentful/CHANGELOG.md#_snippet_16\n\nLANGUAGE: None\nCODE:\n```\nupdate sharp [#33379](https://github.com/gatsbyjs/gatsby/issues/33379) ([eb70b46](https://github.com/gatsbyjs/gatsby/commit/eb70b46e2e4384f5649160d3d2206ea3d96b8a71))\n```\n\n----------------------------------------\n\nTITLE: Making unstable_shouldOnCreateNode Stable in gatsby-transformer-asciidoc\nDESCRIPTION: This commit makes the `unstable_shouldOnCreateNode` API stable in the `gatsby-transformer-asciidoc` package. It addresses issue #36516 by applying a specific commit that promotes this API to stable.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-asciidoc/CHANGELOG.md#_snippet_2\n\nLANGUAGE: patch\nCODE:\n```\nmake unstable_shouldOnCreateNode stable [#36516](https://github.com/gatsbyjs/gatsby/issues/36516) ([90f9ab4](https://github.com/gatsbyjs/gatsby/commit/90f9ab47593ba7458fc5bc677c4b0282b30808c8))\n```\n\n----------------------------------------\n\nTITLE: Updating is-relative-url Dependency in Gatsby\nDESCRIPTION: This code snippet updates the is-relative-url dependency to version v3 within the Gatsby project. This dependency is likely used to determine if a URL is relative or absolute.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-images-contentful/CHANGELOG.md#_snippet_39\n\nLANGUAGE: none\nCODE:\n```\n- update dependency is-relative-url to v3 ([#17038](https://github.com/gatsbyjs/gatsby/issues/17038)) ([ff9ae84](https://github.com/gatsbyjs/gatsby/commit/ff9ae84))\n```\n\n----------------------------------------\n\nTITLE: Updating Babel Monorepo (Chores)\nDESCRIPTION: This code snippet shows the updating of the Babel monorepo, categorized as a chore, for the `gatsby-plugin-postcss` package. This update likely involves internal tooling, build process, or dependency upgrades related to Babel.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-postcss/CHANGELOG.md#_snippet_7\n\nLANGUAGE: none\nCODE:\n```\nupdate babel monorepo [#37386](https://github.com/gatsbyjs/gatsby/issues/37386) ([b941876](https://github.com/gatsbyjs/gatsby/commit/b94187633d94d0f0071b38ffe93380dd802ec70f))\n```\n\n----------------------------------------\n\nTITLE: Bug Fix: Core-js-compat Update in babel-preset-gatsby\nDESCRIPTION: This snippet describes the fix for updating the core-js-compat dependency to version v3.30.1 in the babel-preset-gatsby package. This update addresses an issue reported in issue #38018 on the gatsbyjs/gatsby repository.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/babel-preset-gatsby/CHANGELOG.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nupdate dependency core-js-compat to v3.30.1 [#38018](https://github.com/gatsbyjs/gatsby/issues/38018) ([014da98](https://github.com/gatsbyjs/gatsby/commit/014da98a7ba97d5bdf3bb1a0f034e9cad728da21))\n```\n\n----------------------------------------\n\nTITLE: Applying patches for v5\nDESCRIPTION: This commit applies necessary patches to ensure the gatsby-cypress package is compatible with version 5 of Gatsby. These patches address specific issues and adjustments required for v5 compatibility. It addresses issue #36796.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-cypress/CHANGELOG.md#_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Applying Patches for v5 in gatsby-plugin-styled-jsx\nDESCRIPTION: This commit applies patches for version 5 of gatsby-plugin-styled-jsx. These patches typically include bug fixes and minor enhancements to ensure the stable operation of the plugin within the Gatsby v5 ecosystem.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-styled-jsx/CHANGELOG.md#_snippet_3\n\nLANGUAGE: Other\nCODE:\n```\napply patches for v5 [#36796](https://github.com/gatsbyjs/gatsby/issues/36796) ([25f79b6](https://github.com/gatsbyjs/gatsby/commit/25f79b6c3719fdf09584ade620a05c66ba2a697c))\n```\n\n----------------------------------------\n\nTITLE: Chore: Update Peer Dependencies (gatsby-plugin-less)\nDESCRIPTION: This code snippet reflects a chore task to update peer dependencies for the gatsby-plugin-less package. This update, linked to issue #36965, is crucial for ensuring compatibility with other Gatsby packages and avoiding dependency conflicts. It is important for the stability and reliability of the plugin within the Gatsby ecosystem.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-less/CHANGELOG.md#_snippet_2\n\nLANGUAGE: Text\nCODE:\n```\nUpdate peerDeps [#36965](https://github.com/gatsbyjs/gatsby/issues/36965) ([b624442](https://github.com/gatsbyjs/gatsby/commit/b6244424fe8b724cbc23b80b2b4f5424cc2055a4))\n```\n\n----------------------------------------\n\nTITLE: Applying patches for v5 chore in gatsby-design-tokens\nDESCRIPTION: This code snippet represents a chore update in the gatsby-design-tokens package, specifically applying patches for v5. It addresses issue #36796 and was part of the 5.0.0 release.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-design-tokens/CHANGELOG.md#_snippet_3\n\nLANGUAGE: TEXT\nCODE:\n```\n- apply patches for v5 [#36796](https://github.com/gatsbyjs/gatsby/issues/36796) ([25f79b6](https://github.com/gatsbyjs/gatsby/commit/25f79b6c3719fdf09584ade620a05c66ba2a697c))\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies in gatsby-source-lever\nDESCRIPTION: This commit updates the minor and patch dependencies for the `gatsby-source-lever` package. Updating dependencies ensures that the package remains compatible with the latest versions of its dependencies, and also incorporates bug fixes and security patches.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-lever/CHANGELOG.md#_snippet_9\n\nLANGUAGE: Shell\nCODE:\n```\n**deps:** update minor and patch for gatsby-source-lever ([#27653](https://github.com/gatsbyjs/gatsby/issues/27653)) ([d6558b0](https://github.com/gatsbyjs/gatsby/commit/d6558b03a182c04cee9e0f0f850d88694c5de9f9))\n```\n\n----------------------------------------\n\nTITLE: Rendering Frontmatter Title (Gatsby/React)\nDESCRIPTION: This HTML snippet demonstrates how to render a title from a Gatsby page's frontmatter using React. It accesses the `title` property from `props.pageContext.frontmatter` and displays it within a `span` element. If the `title` property is not available (e.g., if the JavaScript in the frontmatter was not executed), it falls back to displaying \"disabled\".\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/e2e-tests/mdx/src/posts/frontmatter-engine/js-frontmatter.mdx#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<span data-cy=\"js-frontmatter\">\n  {props.pageContext.frontmatter?.title || `disabled`}\n</span>\n```\n\n----------------------------------------\n\nTITLE: Applying Patches for v5\nDESCRIPTION: This code snippet shows a chore related to applying patches specifically for version 5 of the gatsby-plugin-coffeescript. Applying patches addresses specific issues or improvements in version 5, ensuring stability and functionality.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-coffeescript/CHANGELOG.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\napply patches for v5 [#36796](https://github.com/gatsbyjs/gatsby/issues/36796) ([25f79b6](https://github.com/gatsbyjs/gatsby/commit/25f79b6c3719fdf09584ade620a05c66ba2a697c))\n```\n\n----------------------------------------\n\nTITLE: Fixing Ignore Pattern with Quotes (JavaScript)\nDESCRIPTION: This snippet illustrates a bug fix related to handling ignore patterns in Gatsby configurations. Specifically, it addresses an issue where ignore patterns needed to be wrapped in quotes to be correctly interpreted. This is essential for excluding specific files or directories during the build process.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-xml/CHANGELOG.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nwrap ignore pattern in quotes ([#23176](https://github.com/gatsbyjs/gatsby/issues/23176)) ([7563db6](https://github.com/gatsbyjs/gatsby/commit/7563db6))\n```\n\n----------------------------------------\n\nTITLE: Updating Babel Monorepo (third time)\nDESCRIPTION: This commit updates the Babel monorepo dependency.  This may be to pick up further changes or address compatibility issues within the Gatsby project.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-react-helmet/CHANGELOG.md#_snippet_13\n\nLANGUAGE: Other\nCODE:\n```\n466d4c087bbc96abb942a02c67243bcc9a4f2a0a\n```\n\n----------------------------------------\n\nTITLE: Allowing React/ReactDOM Experimental Versions\nDESCRIPTION: This commit allows the use of experimental versions of React and ReactDOM in the gatsby-plugin-cxs package, addressing issue #36533.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-cxs/CHANGELOG.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nallow react/react-dom@experimental [#36533](https://github.com/gatsbyjs/gatsby/issues/36533) ([7ef4a3f](https://github.com/gatsbyjs/gatsby/commit/7ef4a3fe080d45e9edaff9f1d4deebd12a00ddbd))\n```\n\n----------------------------------------\n\nTITLE: HTML Index Page\nDESCRIPTION: This is the HTML code for the index page of the example static website. It includes the basic HTML structure, links to CSS files, and content for the home page.\n\nDependencies: None.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/porting-an-html-site-to-gatsby.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<html lang=\"en\">\n  <head>\n    <title>Taylor's Tidy Trees</title>\n    <link href=\"/assets/favicon.ico\" rel=\"shortcut icon\" type=\"image/x-icon\" />\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"/assets/normalize.css\" />\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"/assets/style.css\" />\n  </head>\n  <body>\n    <header>\n      <a href=\"/\" class=\"brand-color logo-text\">Taylor's Tidy Trees</a>\n      <nav>\n        <ul>\n          <li><a href=\"/about.html\">About</a></li>\n          <li><a href=\"/services/index.html\">Services</a></li>\n          <li><a href=\"/who/index.html\">Who We Are</a></li>\n          <li><a href=\"/contact.html\">Contact</a></li>\n        </ul>\n      </nav>\n    </header>\n    <main>\n      <h1>Welcome To Taylor's Tidy Trees</h1>\n      <h2>We care about trees of all kinds!</h2>\n    </main>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Fix: Update babel monorepo\nDESCRIPTION: Updates the babel monorepo dependency for the gatsby-remark-prismjs plugin. This fix addresses issue #37568 and includes updates to babel packages.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-prismjs/CHANGELOG.md#_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n13a0a9e(https://github.com/gatsbyjs/gatsby/commit/13a0a9e83dcb015b65dff6b73cdd5dea09c2988f)\n```\n\n----------------------------------------\n\nTITLE: Node Interface Definition in Typescript\nDESCRIPTION: This Typescript interface defines the structure of a Gatsby node.  It includes properties for id, children, parent, fields, and an internal object containing metadata such as contentDigest, mediaType, type, owner, fieldOwners, content, and description.  The interface also allows for additional, node-specific fields via a string index signature.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/graphql-data-layer/node-interface.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Node {\n  id: string\n  children?: Array<string>\n  parent?: string\n  fields: object\n  internal: {\n    contentDigest: string\n    mediaType?: string\n    type: string\n    owner: string\n    fieldOwners: object\n    content?: string\n    description?: string\n  }\n  [key: string]: unknown // ...other fields specific to this type of node\n}\n```\n\n----------------------------------------\n\nTITLE: Search for Node.js Packages with Homebrew\nDESCRIPTION: This command uses Homebrew to search for available Node.js packages.  It lists various Node.js versions and related tools available for installation via Homebrew.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/upgrading-node-js.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nbrew search node\n```\n\n----------------------------------------\n\nTITLE: Updating Babel Monorepo in gatsby-plugin-flow\nDESCRIPTION: This snippet reflects a chore update involving the Babel monorepo in the gatsby-plugin-flow package. It addresses issue #37386 and includes a commit hash for reference.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-flow/CHANGELOG.md#_snippet_1\n\nLANGUAGE: Diff\nCODE:\n```\n+ update babel monorepo [#37386](https://github.com/gatsbyjs/gatsby/issues/37386) ([b941876](https://github.com/gatsbyjs/gatsby/commit/b94187633d94d0f0071b38ffe93380dd802ec70f))\n```\n\n----------------------------------------\n\nTITLE: Fix: Update minor and patch dependencies for gatsby-source-graphql\nDESCRIPTION: This snippet describes a bug fix in version 5.10.0 of the gatsby-source-graphql plugin. It involves updating minor and patch dependencies for the plugin.  This likely addresses bug fixes and feature improvements related to dependency management.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-graphql/CHANGELOG.md#_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: GraphQL Query for Date Formatting\nDESCRIPTION: This snippet showcases a GraphQL query that utilizes the `dateformat` extension to format the `joinedAt` field. The `fromNow: true` argument leverages the formatting options provided by the extension to display the date in a human-readable 'time ago' format.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/graphql-data-layer/schema-customization.md#_snippet_21\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  allAuthorJson {\n    joinedAt(fromNow: true)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Gatsby Development Server\nDESCRIPTION: Navigates to the newly created Gatsby site directory and starts the Gatsby development server. The development server provides hot reloading and other features for a smooth development experience. It listens for changes in the source files and automatically updates the browser.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/e2e-tests/production-runtime/README.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ncd gatsby-example-site\ngatsby develop\n```\n\n----------------------------------------\n\nTITLE: Fixing Ignore Pattern in Gatsby\nDESCRIPTION: This code snippet addresses an issue where ignore patterns were not properly wrapped in quotes. Properly quoting ignore patterns ensures that the correct files and directories are excluded from processing, preventing potential errors and improving build performance. This fix ensures the intended behavior of the ignore functionality.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-screenshot/CHANGELOG.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n7563db6\n```\n\n----------------------------------------\n\nTITLE: Fixing React RC2 compatibility\nDESCRIPTION: This snippet addresses compatibility issues with React Release Candidate 2 (rc2) within the gatsby-plugin-google-gtag plugin. This fix ensures the plugin functions correctly with the specified React version.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-google-gtag/CHANGELOG.md#_snippet_9\n\n\n\n----------------------------------------\n\nTITLE: Updating Babel monorepo another time\nDESCRIPTION: This commit updates the Babel monorepo to the latest version. The update includes improvements in performance, stability, and new features for transpiling JavaScript code.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-twitter/CHANGELOG.md#_snippet_12\n\nLANGUAGE: TEXT\nCODE:\n```\nupdate babel monorepo [#32238](https://github.com/gatsbyjs/gatsby/issues/32238) ([466d4c0](https://github.com/gatsbyjs/gatsby/commit/466d4c087bbc96abb942a02c67243bcc9a4f2a0a))\n```\n\n----------------------------------------\n\nTITLE: Updating Minor Package Dependencies (JavaScript)\nDESCRIPTION: This snippet reflects the periodic updates made to minor dependencies within the Gatsby ecosystem. These updates typically include bug fixes, performance improvements, and new features. The updates exclude core packages like React, Babel, and ESLint, which are managed separately.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-xml/CHANGELOG.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nupdate minor updates in packages ([#18875](https://github.com/gatsbyjs/gatsby/issues/18875)) ([b692879](https://github.com/gatsbyjs/gatsby/commit/b692879))\n```\n\nLANGUAGE: javascript\nCODE:\n```\nupdate minor updates in packages except react, babel and eslint ([#17254](https://github.com/gatsbyjs/gatsby/issues/17254)) ([252d867](https://github.com/gatsbyjs/gatsby/commit/252d867))\n```\n\n----------------------------------------\n\nTITLE: Fixing generateScopedName in Production\nDESCRIPTION: Addresses an issue where `generateScopedName` was not functioning correctly in the production environment. This fix ensures that CSS class names are properly scoped in production builds, preventing naming conflicts and ensuring correct styling.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-react-css-modules/CHANGELOG.md#_snippet_9\n\n\n\n----------------------------------------\n\nTITLE: Updating Babel Monorepo Dependency in Gatsby Plugin\nDESCRIPTION: This snippet updates the babel monorepo dependency for the gatsby-plugin-coffeescript package, addressing issue #32564.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-coffeescript/CHANGELOG.md#_snippet_8\n\nLANGUAGE: Other\nCODE:\n```\nupdate babel monorepo [#32564](https://github.com/gatsbyjs/gatsby/issues/32564) ([a554998](https://github.com/gatsbyjs/gatsby/commit/a554998b4f6765103b650813cf52dbfcc575fecf))\n```\n\n----------------------------------------\n\nTITLE: Updating Axios dependency (JavaScript)\nDESCRIPTION: This commit updates the axios dependency to version ^0.19.2 in gatsby-source-contentful. This updates the library to the latest version with bug fixes and performance improvements.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-contentful/CHANGELOG.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n91e780f\n```\n\n----------------------------------------\n\nTITLE: Fix: Update semver dependency in gatsby-plugin-image\nDESCRIPTION: This snippet updates the semver dependency to version ^7.5.3 within the gatsby-plugin-image package. This resolves a bug and ensures the plugin is using a compatible version of semver.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-image/CHANGELOG.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nupdate dependency semver to ^7.5.3 [#38296](https://github.com/gatsbyjs/gatsby/issues/38296) ([11e64e2](https://github.com/gatsbyjs/gatsby/commit/11e64e20898cc97289bdbda00eb4bcc309828b23))\n```\n\n----------------------------------------\n\nTITLE: Updating MongoDB dependency\nDESCRIPTION: This snippet updates the dependency `mongodb` to version `^3.7.4` for the `gatsby-source-mongodb` plugin. The update is a bug fix to ensure compatibility and stability with the MongoDB driver.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-mongodb/CHANGELOG.md#_snippet_0\n\nLANGUAGE: none\nCODE:\n```\nupdate dependency mongodb to ^3.7.4 for gatsby-source-mongodb [#38294](https://github.com/gatsbyjs/gatsby/issues/38294) ([2cbd1e2](https://github.com/gatsbyjs/gatsby/commit/2cbd1e2fbb4c9e82345177e99e1b899202905838))\n```\n\n----------------------------------------\n\nTITLE: Updating Packages in Gatsby Project\nDESCRIPTION: This code snippet represents an update of minor packages within a Gatsby project. Updating these packages brings in bug fixes, performance improvements, and new features. This keeps the project dependencies up-to-date and helps avoid compatibility issues.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-screenshot/CHANGELOG.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nbfb864b\n```\n\n----------------------------------------\n\nTITLE: Creating Gatsby Site using Minimal Starter\nDESCRIPTION: This command uses the Gatsby CLI to initialize a new Gatsby site using the minimal starter template. It downloads the necessary files and sets up the basic project structure.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/integration-tests/functions/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm init gatsby\n```\n\n----------------------------------------\n\nTITLE: Fixing ignore pattern in gatsby-plugin-lodash\nDESCRIPTION: Addresses an issue where the ignore pattern was not correctly wrapped in quotes within the gatsby-plugin-lodash package. This fix ensures that the ignore pattern is properly processed, resolving any related errors or unexpected behavior.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-lodash/CHANGELOG.md#_snippet_0\n\nLANGUAGE: Other\nCODE:\n```\nwrap ignore pattern in quotes ([#23176](https://github.com/gatsbyjs/gatsby/issues/23176)) ([7563db6](https://github.com/gatsbyjs/gatsby/commit/7563db6))\n```\n\n----------------------------------------\n\nTITLE: Applying Patches for v5 in gatsby-plugin-layout\nDESCRIPTION: This commit applies patches for version 5 of the gatsby-plugin-layout package. It addresses issue #36796 on the Gatsby repository.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-layout/CHANGELOG.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\napply patches for v5 [#36796](https://github.com/gatsbyjs/gatsby/issues/36796) ([25f79b6](https://github.com/gatsbyjs/gatsby/commit/25f79b6c3719fdf09584ade620a05c66ba2a697c))\n```\n\n----------------------------------------\n\nTITLE: Updating Peer Dependencies\nDESCRIPTION: This commit updates peer dependencies for the gatsby-plugin-react-css-modules package. This involves changes to package.json dependencies.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-react-css-modules/CHANGELOG.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nUpdate peerDeps [#36965](https://github.com/gatsbyjs/gatsby/issues/36965) ([b624442](https://github.com/gatsbyjs/gatsby/commit/b6244424fe8b724cbc23b80b2b4f5424cc2055a4))\n```\n\n----------------------------------------\n\nTITLE: Updating babel monorepo\nDESCRIPTION: This snippet describes updating the babel monorepo. This update is intended to update babel dependencies.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-asciidoc/CHANGELOG.md#_snippet_11\n\nLANGUAGE: Text\nCODE:\n```\nupdate babel monorepo [#32238](https://github.com/gatsbyjs/gatsby/issues/32238) ([466d4c0](https://github.com/gatsbyjs/gatsby/commit/466d4c087bbc96abb942a02c67243bcc9a4f2a0a))\n```\n\n----------------------------------------\n\nTITLE: Fixing Joi Validation for unhandledRejections in API runner JavaScript\nDESCRIPTION: This snippet addresses an issue where Joi validation was breaking for unhandledRejections and apirunner. This ensures that validation works correctly in these scenarios, allowing for more robust error handling and configuration validation during the execution of API runners. This improves stability and error reporting.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-cli/CHANGELOG.md#_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\n14ba538\n```\n\n----------------------------------------\n\nTITLE: Update Formatting & Linting\nDESCRIPTION: This snippet represents an update to the formatting and linting configurations of the project. This often involves changes to ESLint, Prettier, or other code quality tools.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-preload-fonts/CHANGELOG.md#_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Updating Bluebird Dependency\nDESCRIPTION: This commit updates the bluebird dependency to version ^3.5.5 to address potential compatibility issues or security vulnerabilities. Bluebird is a popular JavaScript Promise library, and keeping it up-to-date is crucial for the plugin's stability and performance.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-drupal/CHANGELOG.md#_snippet_16\n\n\n\n----------------------------------------\n\nTITLE: Replace gatsbyjs.org with gatsbyjs.com\nDESCRIPTION: Replaces all instances of the old domain `gatsbyjs.org` with the current domain `gatsbyjs.com`. This chore ensures consistency and directs users to the correct website.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-page-creator/CHANGELOG.md#_snippet_19\n\nLANGUAGE: none\nCODE:\n```\nreplace all uses of gatsbyjs.org with gatsbyjs.com [#35101](https://github.com/gatsbyjs/gatsby/issues/35101) ([16cff41](https://github.com/gatsbyjs/gatsby/commit/16cff413e154dc4e74fc5be631d52c76273e5cbc))\n```\n\n----------------------------------------\n\nTITLE: Fix: Use pathPrefix with WebP files\nDESCRIPTION: This snippet corrects an issue in `gatsby-remark-images` where the `pathPrefix` was not being applied to WebP files. This ensures that images are correctly served from the specified path when using WebP format.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-images/CHANGELOG.md#_snippet_3\n\nLANGUAGE: N/A\nCODE:\n```\n**gatsby-remark-images:** Use pathPrefix also with WebP files ([#26472](https://github.com/gatsbyjs/gatsby/issues/26472)) ([c8e8e32](https://github.com/gatsbyjs/gatsby/commit/c8e8e32))\n```\n\n----------------------------------------\n\nTITLE: Preventing TypeError in many-to-one relationships - JavaScript\nDESCRIPTION: This code prevents a TypeError that could occur in `gatsby-source-contentful` when dealing with many-to-one relationships. It provides a fix to handle these relationships correctly, ensuring that the plugin functions properly when content models involve such relationships.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-contentful/CHANGELOG.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nfde5de6\n```\n\n----------------------------------------\n\nTITLE: Showing useful error message for non-renderable image files\nDESCRIPTION: This code snippet represents a bug fix that displays a helpful error message when attempting to process files that cannot be rendered as images.  This enhancement improves the debugging experience by providing clear and informative error messages.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-images-contentful/CHANGELOG.md#_snippet_24\n\nLANGUAGE: None\nCODE:\n```\nshow useful error message for files that can not be rendered as image [#32530](https://github.com/gatsbyjs/gatsby/issues/32530) fixes [#32511](https://github.com/gatsbyjs/gatsby/issues/32511) ([77e9aab](https://github.com/gatsbyjs/gatsby/commit/77e9aabdff5156d4f037b1b36dbb351bfe043be4))\n```\n\n----------------------------------------\n\nTITLE: Updating packages in Gatsby\nDESCRIPTION: This snippet updates minor updates in packages except react, babel and eslint. Updating the packages ensures that the latest features and bug fixes are available in the project.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-canonical-urls/CHANGELOG.md#_snippet_9\n\nLANGUAGE: none\nCODE:\n```\nupdate minor updates in packages except react, babel and eslint ([#17254](https://github.com/gatsbyjs/gatsby/issues/17254)) ([252d867](https://github.com/gatsbyjs/gatsby/commit/252d867))\n```\n\n----------------------------------------\n\nTITLE: NPM Link Local Plugin (Shell)\nDESCRIPTION: This command creates a symbolic link to the `gatsby-plugin-console-log-c` plugin, allowing it to be used in the Gatsby site. This is necessary when the plugin is located outside the plugins folder and is not installed as a dependency.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/using-multiple-local-plugins/README.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpm link ../gatsby-plugin-console-log-c\n```\n\n----------------------------------------\n\nTITLE: Reload Apache service on Red Hat/CentOS (Shell)\nDESCRIPTION: This command reloads the Apache service, applying any changes made to the configuration files without requiring a full restart of the server. This is necessary to activate the modified alias configuration.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-manifest/README.md#_snippet_21\n\nLANGUAGE: Shell\nCODE:\n```\nservice httpd reload\n```\n\n----------------------------------------\n\nTITLE: Updating asciidoctor dependency\nDESCRIPTION: This snippet describes updating the asciidoctor dependency to version ^2.2.4 for the gatsby-transformer-asciidoc package. This update is intended to fix bugs or introduce new features in the asciidoctor library.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-asciidoc/CHANGELOG.md#_snippet_9\n\nLANGUAGE: Text\nCODE:\n```\nupdate dependency asciidoctor to ^2.2.4 for gatsby-transformer-asciidoc [#32575](https://github.com/gatsbyjs/gatsby/issues/32575) ([4dd4684](https://github.com/gatsbyjs/gatsby/commit/4dd4684018d8979655c3e3b53065be378fdf6f70))\n```\n\n----------------------------------------\n\nTITLE: Fixing Babel Monorepo in gatsby-transformer-toml\nDESCRIPTION: This commit updates the babel monorepo to address a bug fix within the gatsby-transformer-toml package. It involves updating dependencies related to Babel. The bug fix is referenced by issue #37568.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-toml/CHANGELOG.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nupdate babel monorepo [#37568](https://github.com/gatsbyjs/gatsby/issues/37568) ([13a0a9e](https://github.com/gatsbyjs/gatsby/commit/13a0a9e83dcb015b65dff6b73cdd5dea09c2988f))\n```\n\n----------------------------------------\n\nTITLE: Bumping node version in gatsby-source-wikipedia (JavaScript)\nDESCRIPTION: This code snippet represents a feature that bumps the minimum required Node.js version to 10.13.0 for the gatsby-source-wikipedia package.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-wikipedia/CHANGELOG.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n**gatsby:** bump node min version to 10.13.0 ([#22400](https://github.com/gatsbyjs/gatsby/issues/22400)) ([83d681a](https://github.com/gatsbyjs/gatsby/commit/83d681a))\n```\n\n----------------------------------------\n\nTITLE: Updating Babel Monorepo in Gatsby\nDESCRIPTION: This commit updates the Babel monorepo within the Gatsby project. Updating Babel ensures compatibility with the latest JavaScript features and improvements to the build process.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-react-helmet/CHANGELOG.md#_snippet_18\n\nLANGUAGE: Shell\nCODE:\n```\nupdate babel monorepo [#27528](https://github.com/gatsbyjs/gatsby/issues/27528) ([539dbb0](https://github.com/gatsbyjs/gatsby/commit/539dbb09166e346a6cee568973d2de3d936e8ef3))\n```\n\n----------------------------------------\n\nTITLE: Handling Free Floating JSDocs in Gatsby\nDESCRIPTION: This commit addresses an issue where the `gatsby-transformer-documentationjs` plugin wasn't handling free-floating JSDoc comments correctly. It ensures that these comments are properly processed and transformed into Gatsby nodes.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-documentationjs/CHANGELOG.md#_snippet_21\n\nLANGUAGE: JavaScript\nCODE:\n```\n**gatsby-transformer-documentationjs:** handle free floating jsdocs ([#13058](https://github.com/gatsbyjs/gatsby/issues/13058)) ([ca3a712](https://github.com/gatsbyjs/gatsby/commit/ca3a712))\n```\n\n----------------------------------------\n\nTITLE: Backward compatible error formatters - gatsby JavaScript\nDESCRIPTION: This snippet ensures backward compatibility for error formatters in Gatsby (specifically related to issues 11321 and 11330). Maintaining backward compatibility prevents breaking changes for existing Gatsby projects that rely on the older error formatting.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-cli/CHANGELOG.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nmake 11321 and 11330 error formatters backward compatible ([#22249](https://github.com/gatsbyjs/gatsby/issues/22249)) ([6b01efe](https://github.com/gatsbyjs/gatsby/commit/6b01efe))\n```\n\n----------------------------------------\n\nTITLE: Fixing Typos in Gatsby Remark Images Contentful Readme\nDESCRIPTION: This code snippet addresses typos in the gatsby-remark-images-contentful readme file, improving the clarity and accuracy of the documentation.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-images-contentful/CHANGELOG.md#_snippet_44\n\nLANGUAGE: none\nCODE:\n```\n- **docs:** typos in gatsby-remark-images-contentful readme ([#11523](https://github.com/gatsbyjs/gatsby/issues/11523)) ([da9ca8a](https://github.com/gatsbyjs/gatsby/commit/da9ca8a))\n```\n\n----------------------------------------\n\nTITLE: CSS Blink Animation Removal\nDESCRIPTION: This CSS snippet from `src/style/Product.scss` defines the `blink` animation. This code can be removed if the animation is no longer used. It uses keyframes to alternate the opacity of the element.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/e-commerce-with-datocms-and-snipcart/index.md#_snippet_7\n\nLANGUAGE: CSS\nCODE:\n```\n@keyframes blink {\n  $steps: 20;\n\n  @for $i from 0 through $steps {\n    #{percentage($i * (1 / $steps) + ((15 - random(30)) / 15) * (1 / $steps))} {\n      @if ($i % 3 == 0) {\n        opacity: 1;\n      } @else {\n        opacity: 0;\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Babel Monorepo\nDESCRIPTION: This change updates the Babel monorepo to ensure compatibility and access to the latest features and bug fixes. It's a common practice to keep Babel dependencies up-to-date for optimal JavaScript transpilation.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-responsive-iframe/CHANGELOG.md#_snippet_4\n\nLANGUAGE: Text\nCODE:\n```\nupdate babel monorepo [#32996](https://github.com/gatsbyjs/gatsby/issues/32996) ([048c7a7](https://github.com/gatsbyjs/gatsby/commit/048c7a727bbc6a9ad8e27afba72ee20e946c4aaa))\n```\n\n----------------------------------------\n\nTITLE: Configuring Gatsby CLI to use Yarn\nDESCRIPTION: This JSON configuration snippet sets Yarn as the default package manager for the Gatsby CLI. Adding these lines to `~/.config/gatsby/config.json` ensures that `gatsby new` will use Yarn for new projects.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/glossary/yarn.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n{\n  \"cli\": {\n    \"packageManager\": \"yarn\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing build-essential on Ubuntu (WSL)\nDESCRIPTION: This command installs the `build-essential` package on Ubuntu within WSL. This package contains tools required to compile and install native addons from npm, essential for certain Node.js packages.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/local-development/gatsby-on-linux.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt install -y build-essential\n```\n\n----------------------------------------\n\nTITLE: Fixing ignore pattern in gatsby-plugin-typescript\nDESCRIPTION: This commit fixes an issue where the ignore pattern used by gatsby-plugin-typescript was not properly wrapped in quotes. This ensures that the ignore pattern is correctly interpreted and applied, preventing unexpected behavior during the build process.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-typescript/CHANGELOG.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nwrap ignore pattern in quotes ([#23176](https://github.com/gatsbyjs/gatsby/issues/23176)) ([7563db6](https://github.com/gatsbyjs/gatsby/commit/7563db6))\n```\n\n----------------------------------------\n\nTITLE: Updating Testing Library in gatsby-plugin-google-analytics\nDESCRIPTION: Updates the testing library to a major version in the gatsby-plugin-google-analytics package. This chore ensures compatibility with the latest testing practices and features.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-google-analytics/CHANGELOG.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nab2902b\n```\n\n----------------------------------------\n\nTITLE: Initializing package.json for Site\nDESCRIPTION: Initializes the package.json file for the `site` project. Sets `private` to true to prevent accidental publishing. Defines scripts for building, developing, and cleaning the Gatsby site.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/building-a-theme.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"private\": true,\n  \"name\": \"site\",\n  \"version\": \"1.0.0\",\n  \"license\": \"MIT\",\n  \"scripts\": {\n    \"build\": \"gatsby build\",\n    \"develop\": \"gatsby develop\",\n    \"clean\": \"gatsby clean\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Gatsby Benchmark with 'gt' Filter - Large Number of Nodes\nDESCRIPTION: This command runs the Gatsby benchmark with the 'gt' filter and a large number of nodes (100000). It's the third step in determining the time complexity of the 'gt' filter.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/benchmarks/query-filters-sort/README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nNUM_NODES=100000 FILTER=gt yarn bench\n```\n\n----------------------------------------\n\nTITLE: Updating Minor Updates in Packages (JavaScript)\nDESCRIPTION: This snippet updates minor dependencies within the project. Keeping dependencies up-to-date typically includes bug fixes and incremental improvements. This contributes to the overall stability and security of the `gatsby-transformer-sharp` package.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-sharp/CHANGELOG.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\n294a48f\n```\n\n----------------------------------------\n\nTITLE: Installing gh-pages package with npm\nDESCRIPTION: This command installs the gh-pages package as a development dependency. Gh-pages is used to publish static files to a gh-pages branch on GitHub.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/previews-deploys-hosting/how-gatsby-works-with-github-pages.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install gh-pages --save-dev\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter Example\nDESCRIPTION: This snippet shows an example of a markdown frontmatter used for demonstrating the reviewer functionality.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/graphql-data-layer/schema-customization.md#_snippet_18\n\nLANGUAGE: markdown\nCODE:\n```\n---\nreviewers:\n  - jane@example.com\n  - doe@example.com\n---\n```\n\n----------------------------------------\n\nTITLE: Install and Develop Gatsby Functions\nDESCRIPTION: This shell command is used to navigate to the example directory, install the necessary npm packages, and start the Gatsby development server.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/functions-hello-world/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncd examples/functions-hello-world\nnpm install\nnpm run develop\n```\n\n----------------------------------------\n\nTITLE: Updating babel monorepo\nDESCRIPTION: This code snippet shows another instance of updating the Babel monorepo. This can be for different reasons and may include updates to different versions of Babel.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-embed-snippet/CHANGELOG.md#_snippet_3\n\nLANGUAGE: none\nCODE:\n```\nupdate babel monorepo [#37386](https://github.com/gatsbyjs/gatsby/issues/37386) ([b941876](https://github.com/gatsbyjs/gatsby/commit/b94187633d94d0f0071b38ffe93380dd802ec70f))\n```\n\n----------------------------------------\n\nTITLE: Set Placeholder Environment Variable\nDESCRIPTION: Command to set the `GATSBY_SCREENSHOT_PLACEHOLDER` environment variable to `true` when running `gatsby develop`. This enables the use of placeholder images instead of generating actual screenshots.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-screenshot/README.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\nGATSBY_SCREENSHOT_PLACEHOLDER=true gatsby develop\n```\n\n----------------------------------------\n\nTITLE: Updating Lodash Monorepo JavaScript\nDESCRIPTION: This snippet updates the lodash monorepo to version ^4.17.21. Lodash is a JavaScript utility library delivering modularity, performance & extras.  This update likely includes bug fixes and performance improvements.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-copy-linked-files/CHANGELOG.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nupdate lodash monorepo to ^4.17.21 [#29382](https://github.com/gatsbyjs/gatsby/issues/29382) ([9fd287b](https://github.com/gatsbyjs/gatsby/commit/9fd287ba89eacd55652d468b18f6e1526230e7c6))\n```\n\n----------------------------------------\n\nTITLE: Updating minor packages in Gatsby\nDESCRIPTION: This commit updates minor versions of packages, excluding react, babel, and eslint, within the Gatsby project. This ensures the project benefits from the latest improvements and bug fixes in the dependency tree.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-preact/CHANGELOG.md#_snippet_2\n\nLANGUAGE: None\nCODE:\n```\nupdate minor updates in packages except react, babel and eslint ([#17254](https://github.com/gatsbyjs/gatsby/issues/17254)) ([252d867](https://github.com/gatsbyjs/gatsby/commit/252d867))\n```\n\n----------------------------------------\n\nTITLE: Updating cross-env dependency (Chore)\nDESCRIPTION: This snippet updates the cross-env dependency to version ^7.0.3 within the gatsby-source-mongodb package. cross-env is used to set environment variables across different platforms. This is part of general maintenance and dependency updates.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-mongodb/CHANGELOG.md#_snippet_8\n\n\n\n----------------------------------------\n\nTITLE: Checking Response Existence Before Accessing Property in Gatsby Source WordPress\nDESCRIPTION: This commit fixes a bug in gatsby-source-wordpress where the code would attempt to access a property on a response object before checking if the response actually exists. The fix adds a check to ensure the response exists before attempting to access its properties, preventing potential errors.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-wordpress/CHANGELOG.md#_snippet_15\n\n\n\n----------------------------------------\n\nTITLE: Updating Babel Monorepo in GatsbyJS\nDESCRIPTION: This snippet outlines the chore of updating the Babel monorepo within GatsbyJS. This involves upgrading the Babel packages to their latest versions, ensuring compatibility with the latest JavaScript features and improvements in the transpilation process.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-excel/CHANGELOG.md#_snippet_16\n\nLANGUAGE: None\nCODE:\n```\nupdate babel monorepo [#32238](https://github.com/gatsbyjs/gatsby/issues/32238) ([466d4c0](https://github.com/gatsbyjs/gatsby/commit/466d4c087bbc96abb942a02c67243bcc9a4f2a0a))\n```\n\n----------------------------------------\n\nTITLE: Filtering Starters by V2 by Default in Gatsby\nDESCRIPTION: This commit filters v2 starters by default, improving the user experience when creating new Gatsby projects.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-google-gtag/CHANGELOG.md#_snippet_29\n\nLANGUAGE: Diff\nCODE:\n```\n4064e35\n```\n\n----------------------------------------\n\nTITLE: Defining Line Chart Data\nDESCRIPTION: This code defines the `lineData` array, which contains the data used to populate the Nivo line chart. Each object in the array represents a line, with an `id` and a `data` array containing x and y coordinates for each data point. The data is hardcoded in this example.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/using-mdx/src/pages/chart-info.mdx#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport const lineData = [\n  {\n    id: \"InApp\",\n    data: [\n      {\n        x: \"2014\",\n        y: 29,\n      },\n      {\n        x: \"2015\",\n        y: 30,\n      },\n      {\n        x: \"2016\",\n        y: 38,\n      },\n      {\n        x: \"2017\",\n        y: 36,\n      },\n      {\n        x: \"2018\",\n        y: 35,\n      },\n      {\n        x: \"2019\",\n        y: 32,\n      },\n      {\n        x: \"2020\",\n        y: 9,\n      },\n    ],\n  },\n  {\n    id: \"Advertising\",\n    data: [\n      {\n        x: \"2014\",\n        y: 17,\n      },\n      {\n        x: \"2015\",\n        y: 9,\n      },\n      {\n        x: \"2016\",\n        y: 10,\n      },\n      {\n        x: \"2017\",\n        y: 14,\n      },\n      {\n        x: \"2018\",\n        y: 12,\n      },\n      {\n        x: \"2019\",\n        y: 3,\n      },\n      {\n        x: \"2020\",\n        y: 4,\n      },\n    ],\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Fixing links in package changelogs\nDESCRIPTION: This commit corrects the links present within the package changelogs. It addresses an issue identified by issue #15630.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-catch-links/CHANGELOG.md#_snippet_13\n\nLANGUAGE: Text\nCODE:\n```\ncorrect links in package changelogs ([#15630](https://github.com/gatsbyjs/gatsby/issues/15630)) ([d07b9dd](https://github.com/gatsbyjs/gatsby/commit/d07b9dd))\n```\n\n----------------------------------------\n\nTITLE: Fixing package updates in Gatsby\nDESCRIPTION: This snippet describes a bug fix that involves updating minor package versions in the Gatsby project. The fix is included in version 3.0.16 of the gatsby-remark-code-repls package.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-code-repls/CHANGELOG.md#_snippet_20\n\n\n\n----------------------------------------\n\nTITLE: Updating PostCSS Loader Dependency to ^7.3.3\nDESCRIPTION: This code represents a bug fix updating the `postcss-loader` dependency to version `^7.3.3` for the `gatsby-plugin-postcss` package. This update likely addresses specific bugs or incorporates new features of the loader.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-postcss/CHANGELOG.md#_snippet_1\n\nLANGUAGE: none\nCODE:\n```\nupdate dependency postcss-loader to ^7.3.3 for gatsby-plugin-postcss [#38295](https://github.com/gatsbyjs/gatsby/issues/38295) ([5fe2257](https://github.com/gatsbyjs/gatsby/commit/5fe2257044425b62a3f22f2f082bb792aa54bdcc))\n```\n\n----------------------------------------\n\nTITLE: Fixing Babel Monorepo in gatsby-plugin-fullstory\nDESCRIPTION: This snippet refers to a bug fix that updates the Babel monorepo within the gatsby-plugin-fullstory package. The fix addresses issue #37568 and includes a specific commit hash for reference.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-fullstory/CHANGELOG.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nupdate babel monorepo [#37568](https://github.com/gatsbyjs/gatsby/issues/37568) ([13a0a9e](https://github.com/gatsbyjs/gatsby/commit/13a0a9e83dcb015b65dff6b73cdd5dea09c2988f))\n```\n\n----------------------------------------\n\nTITLE: Chore: Update typescript in gatsby-plugin-image\nDESCRIPTION: This snippet represents a chore update for the typescript dependency. It involves updating typescript in the gatsby-plugin-image package.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-image/CHANGELOG.md#_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nupdate typescript [#37596](https://github.com/gatsbyjs/gatsby/issues/37596) ([4f1d1f2](https://github.com/gatsbyjs/gatsby/commit/4f1d1f260472d7768b57960b1e274c8755ca5a67))\n```\n\n----------------------------------------\n\nTITLE: Setting trailingSlash default to \"always\"\nDESCRIPTION: This snippet sets the default value for `trailingSlash` to \"always\". This ensures consistency in the generated URLs.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-page-creator/CHANGELOG.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nSet trailingSlash default to \"always\" [#36798](https://github.com/gatsbyjs/gatsby/issues/36798) ([c10bf51](https://github.com/gatsbyjs/gatsby/commit/c10bf51125f6c601902d62f5336b32a1a4c05044))\n```\n\n----------------------------------------\n\nTITLE: Applying Patches for v5 JavaScript\nDESCRIPTION: This code snippet involves applying patches specifically for version 5 of the Gatsby project. It references issue #36796 in the Gatsby repository. The corresponding commit for this change is 25f79b6c3719fdf09584ade620a05c66ba2a697c.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-javascript-frontmatter/CHANGELOG.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\napply patches for v5 [#36796](https://github.com/gatsbyjs/gatsby/issues/36796) ([25f79b6](https://github.com/gatsbyjs/gatsby/commit/25f79b6c3719fdf09584ade620a05c66ba2a697c))\n```\n\n----------------------------------------\n\nTITLE: Updating Peer Dependencies\nDESCRIPTION: This chore updates the peer dependencies of the plugin. This ensures compatibility with newer versions of Gatsby and its dependencies.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-google-tagmanager/CHANGELOG.md#_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Fixing dependency updates\nDESCRIPTION: Updates minor and patch versions for the gatsby-plugin-stylus package. This fixes an issue related to dependency management within the plugin.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-stylus/CHANGELOG.md#_snippet_7\n\n\n\n----------------------------------------\n\nTITLE: Cloudinary Credentials in .env (Transformer)\nDESCRIPTION: This snippet displays the Cloudinary credentials stored in a .env file. These credentials are used by the transformer plugin. It requires the dotenv module.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/images-and-media/using-cloudinary-image-service.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nCLOUDINARY_API_KEY=xxxxxxxxxxxxxx\nCLOUDINARY_API_SECRET=xxxxxxxxxxxxxxxxxxxx\nCLOUDINARY_CLOUD_NAME=xxxxx\n```\n\n----------------------------------------\n\nTITLE: Moving away from old default uuid\nDESCRIPTION: This commit moves away from the old default uuid implementation within the gatsby-source-graphql plugin. This likely involves adopting a more modern or performant UUID generation strategy to improve data handling and compatibility.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-graphql/CHANGELOG.md#_snippet_20\n\nLANGUAGE: Text\nCODE:\n```\nmove away from old default uuid [#33275](https://github.com/gatsbyjs/gatsby/issues/33275) ([325fdf4](https://github.com/gatsbyjs/gatsby/commit/325fdf4a068acf755ed124cb522e133ea5c31157))\n```\n\n----------------------------------------\n\nTITLE: Updating Minor Package Dependencies\nDESCRIPTION: This commit updates minor version updates for packages except for react, babel, and eslint. This helps to keep the project up-to-date with the latest bug fixes and performance improvements from dependencies, while avoiding breaking changes from major updates.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-styled-jsx/CHANGELOG.md#_snippet_9\n\nLANGUAGE: Shell\nCODE:\n```\nupdate minor updates in packages except react, babel and eslint ([#17254](https://github.com/gatsbyjs/gatsby/issues/17254)) ([252d867](https://github.com/gatsbyjs/gatsby/commit/252d867))\n```\n\n----------------------------------------\n\nTITLE: Fix: Wrap ignore pattern in quotes - JavaScript\nDESCRIPTION: This commit fixes a bug where an ignore pattern was not wrapped in quotes. This could lead to the ignore pattern not being correctly parsed, resulting in files being incorrectly processed by the plugin.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-responsive-iframe/CHANGELOG.md#_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nwrap ignore pattern in quotes ([#23176](https://github.com/gatsbyjs/gatsby/issues/23176)) ([7563db6](https://github.com/gatsbyjs/gatsby/commit/7563db6))\n```\n\n----------------------------------------\n\nTITLE: Fixing headerComponents null value in Typography - JavaScript\nDESCRIPTION: This snippet describes a bug fix addressing the issue of `headerComponents` being tolerant to null values in the `gatsby-plugin-typography` plugin. The fix ensures that the plugin doesn't crash when `headerComponents` is null. This commit addresses issue #12549.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-typography/CHANGELOG.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nheaderComponents is now tolerant to null values ([#12551](https://github.com/gatsbyjs/gatsby/issues/12551)) ([a02ef30](https://github.com/gatsbyjs/gatsby/commit/a02ef30)), closes [#12549](https://github.com/gatsbyjs/gatsby/issues/12549)\n```\n\n----------------------------------------\n\nTITLE: Updating cross-env dependency in Gatsby\nDESCRIPTION: This snippet updates the cross-env dependency to version ^7.0.3. cross-env is a package that provides a way to set environment variables cross-platform.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-canonical-urls/CHANGELOG.md#_snippet_5\n\nLANGUAGE: none\nCODE:\n```\nupdate dependency cross-env to ^7.0.3 [#28505](https://github.com/gatsbyjs/gatsby/issues/28505) ([a819b9b](https://github.com/gatsbyjs/gatsby/commit/a819b9bfb663139f7b06c3ed7d6d6069a2382b2c))\n```\n\n----------------------------------------\n\nTITLE: Enable Partytown Debug Mode\nDESCRIPTION: This snippet enables debug mode for Partytown by setting the `debug` option to `true` in Partytown's vanilla config. This will output additional logs to the console, aiding in debugging issues with Partytown integration. Requires verbose log level to be enabled in dev tools to see the extra logs.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/built-in-components/gatsby-script.md#_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\"\n\nexport const onRenderBody = ({ setHeadComponents }) => {\n  setHeadComponents([\n    <script\n      key=\"partytown-vanilla-config\"\n      dangerouslySetInnerHTML={{\n        // highlight-next-line\n        __html: `partytown = { debug: true }`,\n      }}\n    />,\n  ])\n}\n```\n\n----------------------------------------\n\nTITLE: Upgrade Jest - Gatsby Telemetry\nDESCRIPTION: This commit upgrades the Jest testing framework used by the gatsby-telemetry package.  Upgrading Jest likely includes improvements to testing performance, new features for writing tests, and bug fixes in the testing framework itself.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-telemetry/CHANGELOG.md#_snippet_9\n\n\n\n----------------------------------------\n\nTITLE: Performance improvement for has check - GatsbyJS\nDESCRIPTION: This performance improvement removes a redundant nil check by leveraging the built-in nil check within the `_.has` function.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-custom-blocks/CHANGELOG.md#_snippet_13\n\nLANGUAGE: none\nCODE:\n```\n**gatsby-remark-custom-blocks:** `_.has` already do `_.isNil`, so remove redundant check ([#19254](https://github.com/gatsbyjs/gatsby/issues/19254)) ([0fd3148](https://github.com/gatsbyjs/gatsby/commit/0fd3148))\n```\n\n----------------------------------------\n\nTITLE: Formatting Changelog Files\nDESCRIPTION: This commit formats the changelog files within the gatsby-transformer-yaml package. It improves the readability and consistency of the changelog, making it easier to track changes and updates.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-yaml/CHANGELOG.md#_snippet_0\n\nLANGUAGE: \nCODE:\n```\nFormat changelog files ([088f23b](https://github.com/gatsbyjs/gatsby/commit/088f23b084b67f746a383e06e9216cef83270317))\n```\n\n----------------------------------------\n\nTITLE: Fixing Ignore Pattern in Gatsby Plugin\nDESCRIPTION: This code snippet addresses an issue with the ignore pattern in the gatsby-plugin-preload-fonts. It wraps the ignore pattern in quotes to ensure it is correctly interpreted. This fix was introduced in version 1.1.3.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-preload-fonts/CHANGELOG.md#_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\nwrap ignore pattern in quotes ([#23176](https://github.com/gatsbyjs/gatsby/issues/23176)) ([7563db6](https://github.com/gatsbyjs/gatsby/commit/7563db6))\n```\n\n----------------------------------------\n\nTITLE: Allow Specifying Disallowed Link Types in Gatsby Source Drupal\nDESCRIPTION: This code snippet implements a feature that allows users to specify disallowed link types when sourcing data from Drupal, providing greater control over data inclusion in Gatsby.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-drupal/CHANGELOG.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nallow specifying disallowed link types\n```\n\n----------------------------------------\n\nTITLE: Updating Babel Monorepo (fourth time)\nDESCRIPTION: This commit updates the Babel monorepo dependency.  Repeated Babel updates may indicate efforts to maintain compatibility or incorporate important fixes.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-react-helmet/CHANGELOG.md#_snippet_15\n\nLANGUAGE: Other\nCODE:\n```\n701ab2f6690c3f1bbaf60cf572513ea566cc9ec9\n```\n\n----------------------------------------\n\nTITLE: Formatting changelog files\nDESCRIPTION: This snippet formats the changelog files. This is a chore task to maintain consistency and readability of the changelog.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-google-gtag/CHANGELOG.md#_snippet_12\n\n\n\n----------------------------------------\n\nTITLE: Removing theme-color meta tag in gatsby-plugin-manifest using JavaScript\nDESCRIPTION: This code snippet shows how to prevent gatsby-plugin-manifest from adding the `theme-color` meta tag to the HTML output.  Setting `theme_color_in_head` to `false` in the plugin options disables this behavior, allowing for programmatic control of the tag.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-manifest/README.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// in gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-manifest`,\n      options: {\n        name: `GatsbyJS`,\n        short_name: `GatsbyJS`,\n        start_url: `/`,\n        background_color: `#f7f0eb`,\n        theme_color: `#a2466c`,\n        display: `standalone`,\n        icon: `src/images/icon.png`,\n        theme_color_in_head: false, // This will avoid adding theme-color meta tag.\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Styletron Peer Dependency in Gatsby\nDESCRIPTION: This commit ensures that Styletron is properly listed as a peer dependency for the gatsby-plugin-styletron package, which is crucial for correct dependency management.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-styletron/CHANGELOG.md#_snippet_8\n\nLANGUAGE: none\nCODE:\n```\n**gatsby-plugin-styletron:** Styletron to peerDependencies ([#22731](https://github.com/gatsbyjs/gatsby/issues/22731)) ([a4969d9](https://github.com/gatsbyjs/gatsby/commit/a4969d9))\n```\n\n----------------------------------------\n\nTITLE: Updating cross-env Dependency in Gatsby\nDESCRIPTION: This commit updates the cross-env dependency to version ^7.0.3, possibly to address bug fixes or security concerns.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-styletron/CHANGELOG.md#_snippet_6\n\nLANGUAGE: none\nCODE:\n```\nupdate dependency cross-env to ^7.0.3 [#28505](https://github.com/gatsbyjs/gatsby/issues/28505) ([a819b9b](https://github.com/gatsbyjs/gatsby/commit/a819b9bfb663139f7b06c3ed7d6d6069a2382b2c))\n```\n\n----------------------------------------\n\nTITLE: Rendering Frontmatter Data in Gatsby Component\nDESCRIPTION: This snippet shows how to access and render data from a page's frontmatter in a Gatsby component. It accesses the `title` property from `props.pageContext.frontmatter` and renders it within a span. A fallback value of 'disabled' is used if the title is not present in the frontmatter.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/e2e-tests/mdx/src/pages/frontmatter-json.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n<span data-cy=\"frontmatter\">{props.pageContext.frontmatter?.title || `disabled`}</span>\n```\n\n----------------------------------------\n\nTITLE: Updating Plugin Options Schema Tests\nDESCRIPTION: This commit updates the pluginOptionsSchema tests for the gatsby-plugin-cxs package. The change relates to issue #27904.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-cxs/CHANGELOG.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nUpdate pluginOptionsSchema tests [#27904](https://github.com/gatsbyjs/gatsby/issues/27904) ([2d967cb](https://github.com/gatsbyjs/gatsby/commit/2d967cbf3be81bb036f1f1cbc108a5e36c49785c))\n```\n\n----------------------------------------\n\nTITLE: Fixing a broken URL in Gatsby\nDESCRIPTION: This commit fixes a broken URL within the Gatsby project. The fix ensures that links and references within the codebase point to the correct locations, resolving any navigation or resource access issues.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-react-helmet/CHANGELOG.md#_snippet_17\n\nLANGUAGE: Shell\nCODE:\n```\nfix broken url fix [#28197](https://github.com/gatsbyjs/gatsby/issues/28197) ([c830bc2](https://github.com/gatsbyjs/gatsby/commit/c830bc23bea861f5f1349594f445b329747ad2e6))\n```\n\n----------------------------------------\n\nTITLE: Example Node.js Version Output\nDESCRIPTION: This is an example of the output you might see when running `node -v`. It shows that Node.js version 18.9.0 is installed.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/upgrading-node-js.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nv18.9.0\n```\n\n----------------------------------------\n\nTITLE: Fixing Script Injection in Gatsby Twitter Plugin\nDESCRIPTION: This snippet addresses an issue where semi-colons were missing from the injected script in the gatsby-plugin-twitter. Adding back the semi-colons ensures proper execution of the script. This was a bug fix to resolve issues related to missing semi-colons in the injected script.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-twitter/CHANGELOG.md#_snippet_22\n\nLANGUAGE: None\nCODE:\n```\ngatsby-plugin-twitter: add back semi-colons to injected script ([#12296](https://github.com/gatsbyjs/gatsby/issues/12296)) ([b939b8b](https://github.com/gatsbyjs/gatsby/commit/b939b8b)), closes [#12193](https://github.com/gatsbyjs/gatsby/issues/12193) [/github.com/gatsbyjs/gatsby/pull/12193#issuecomment-469418343](https://github.com/gatsbyjs/gatsby/issues/issuecomment-469418343)\n```\n\n----------------------------------------\n\nTITLE: Testing Lambda Endpoint Remotely with Node.js\nDESCRIPTION: This command executes a Node.js script to test the deployed Lambda function remotely. It sets environment variables for the screenshot endpoint URL and the target site URL, allowing verification of the deployed function's screenshot capabilities.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-screenshot/lambda/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nSCREENSHOT_ENDPOINT=<URL to Lambda endpoint> SITE_URL=https://en.wikipedia.org/wiki/Iron node __manual-tests__/remote-test.js\n```\n\n----------------------------------------\n\nTITLE: Updating Babel Monorepo\nDESCRIPTION: Updates the Babel monorepo dependency within the gatsby-react-router-scroll package. This chore aims to incorporate the latest improvements and bug fixes from the Babel project, ensuring compatibility and optimal performance.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-react-router-scroll/CHANGELOG.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nupdate babel monorepo [#37568](https://github.com/gatsbyjs/gatsby/issues/37568) ([13a0a9e](https://github.com/gatsbyjs/gatsby/commit/13a0a9e83dcb015b65dff6b73cdd5dea09c2988f))\n```\n\n----------------------------------------\n\nTITLE: Creating a New Gatsby Site with Hello World Starter\nDESCRIPTION: This shell command creates a new Gatsby site named 'multiple-themes' using the 'gatsby-starter-hello-world' starter template, then navigates into the newly created directory.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/using-multiple-themes-together.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngatsby new multiple-themes https://github.com/gatsbyjs/gatsby-starter-hello-world\ncd multiple-themes\n```\n\n----------------------------------------\n\nTITLE: File Tree structure\nDESCRIPTION: Illustrates the directory structure of the Gatsby theme project. It shows the root directory containing gatsby-theme-events, site, and a root-level package.json, with each of the former containing their respective package.json files.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/building-a-theme.md#_snippet_14\n\nLANGUAGE: Text\nCODE:\n```\n.\n‚îú‚îÄ‚îÄ gatsby-theme-events\n‚îÇ   ‚îî‚îÄ‚îÄ package.json\n‚îú‚îÄ‚îÄ site\n‚îÇ   ‚îî‚îÄ‚îÄ package.json\n‚îî‚îÄ‚îÄ package.json\n```\n\n----------------------------------------\n\nTITLE: Updating Babel Monorepo\nDESCRIPTION: This commit updates the Babel monorepo. This likely incorporates the latest features, performance improvements, and bug fixes from the Babel project.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-styled-components/CHANGELOG.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nupdate babel monorepo [#27528](https://github.com/gatsbyjs/gatsby/issues/27528) ([539dbb0](https://github.com/gatsbyjs/gatsby/commit/539dbb09166e346a6cee568973d2de3d936e8ef3))\n```\n\n----------------------------------------\n\nTITLE: Fixing URL in Warning Message in gatsby-plugin-feed\nDESCRIPTION: This bug fix corrects the URL present in a warning message within the gatsby-plugin-feed plugin. This ensures that users are directed to the correct resource for further information or troubleshooting. The fix was released in version 2.3.6.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-feed/CHANGELOG.md#_snippet_14\n\n\n\n----------------------------------------\n\nTITLE: Fixing Options Modification in Gatsby Remark Images Contentful\nDESCRIPTION: This code snippet addresses an issue where options passed by reference were being modified within the gatsby-remark-images-contentful plugin. The fix ensures that the original options object remains unchanged.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-images-contentful/CHANGELOG.md#_snippet_37\n\nLANGUAGE: none\nCODE:\n```\n- **gatsby-remark-images-contentful:** avoid modifying options when passed by reference ([#17880](https://github.com/gatsbyjs/gatsby/issues/17880)) ([23a2bcb](https://github.com/gatsbyjs/gatsby/commit/23a2bcb))\n```\n\n----------------------------------------\n\nTITLE: Updating Babel Monorepo (Chore)\nDESCRIPTION: This snippet updates the Babel monorepo.  It is a chore update to ensure compatibility and utilizes the latest features and fixes from Babel.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-mongodb/CHANGELOG.md#_snippet_3\n\nLANGUAGE: none\nCODE:\n```\nupdate babel monorepo [#37386](https://github.com/gatsbyjs/gatsby/issues/37386) ([b941876](https://github.com/gatsbyjs/gatsby/commit/b94187633d94d0f0071b38ffe93380dd802ec70f))\n```\n\n----------------------------------------\n\nTITLE: Gatsby Config with Markdown Plugins JavaScript\nDESCRIPTION: This JavaScript code configures gatsby-config.js to include plugins for handling markdown files.  It configures gatsby-source-filesystem to source pages and gatsby-transformer-remark with various remark plugins for image handling, responsive iframes, code highlighting, and more.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v0-to-v1.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  siteMetadata: {\n    title: `My Sweet Gatsby Site!`,\n  },\n  plugins: [\n    {\n      resolve: `gatsby-source-filesystem`,\n      options: {\n        name: `pages`,\n        path: `${__dirname}/src/pages/`,\n      },\n    },\n    {\n      resolve: `gatsby-transformer-remark`,\n      options: {\n        plugins: [\n          {\n            resolve: `gatsby-remark-images`,\n            options: {\n              maxWidth: 690,\n            },\n          },\n          {\n            resolve: `gatsby-remark-responsive-iframe`,\n          },\n          `gatsby-remark-prismjs`,\n          `gatsby-remark-copy-linked-files`,\n          `gatsby-remark-smartypants`,\n        ],\n      },\n    },\n    `gatsby-plugin-sharp`,\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Re-Adding JSON transformer\nDESCRIPTION: This commit re-adds the JSON transformer functionality to the gatsby-parcel-config package. This allows the package to handle JSON files during the build process.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-parcel-config/CHANGELOG.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\nRe-Add JSON transformer [#36748](https://github.com/gatsbyjs/gatsby/issues/36748) [#36752](https://github.com/gatsbyjs/gatsby/issues/36752) ([7f5aec0](https://github.com/gatsbyjs/gatsby/commit/7f5aec059ac3e15a41373e6225a88b3630aa0d24))\n```\n\n----------------------------------------\n\nTITLE: Bumping Babel Minor Version\nDESCRIPTION: This commit bumps the babel minor version to the latest version. This keeps the babel dependencies up to date.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-cxs/CHANGELOG.md#_snippet_11\n\n\n\n----------------------------------------\n\nTITLE: Fixing ignore pattern in Gatsby\nDESCRIPTION: This commit addresses a bug where the ignore pattern was not properly wrapped in quotes. This ensures that the ignore pattern is correctly interpreted and applied, preventing unintended files from being processed by Gatsby. The bug fix specifically targets issue #23176.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-hjson/CHANGELOG.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n7563db6\n```\n\n----------------------------------------\n\nTITLE: Fixing Node Creation in Gatsby\nDESCRIPTION: This code snippet addresses an issue where unique nodes were not being created. It's a bug fix committed to the gatsby-transformer-documentationjs package within the Gatsby framework.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-documentationjs/CHANGELOG.md#_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\ncreate unique Nodes ([#22774](https://github.com/gatsbyjs/gatsby/issues/22774)) ([1381a0b](https://github.com/gatsbyjs/gatsby/commit/1381a0b))\n```\n\n----------------------------------------\n\nTITLE: Enable Queries on Demand\nDESCRIPTION: This command enables the experimental Queries on Demand feature in Gatsby, which improves the `gatsby develop` bootup time by lazily loading data for pages as they are requested.  This allows for faster local development by avoiding unnecessary query execution upfront.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/v2.27/index.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nGATSBY_EXPERIMENTAL_QUERY_ON_DEMAND=1 gatsby develop\n```\n\n----------------------------------------\n\nTITLE: Running Gatsby Benchmark\nDESCRIPTION: This snippet shows the standard interface for running a Gatsby benchmark.  It involves navigating to the benchmark directory, setting the NUM_PAGES environment variable, installing dependencies, and then running the gatsby build command.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/benchmarks/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd {benchmark directory}\nexport NUM_PAGES={n}\nnpm install\nnpm run build / gatsby build\n```\n\n----------------------------------------\n\nTITLE: Wrap ignore pattern in quotes\nDESCRIPTION: This commit addresses an issue where an ignore pattern in the configuration was not properly wrapped in quotes. Wrapping the pattern in quotes ensures that it is correctly interpreted by the underlying tools, preventing unexpected behavior when filtering files or resources.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-offline/CHANGELOG.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n7563db6\n```\n\n----------------------------------------\n\nTITLE: Gatsby Config in CJS\nDESCRIPTION: This code shows a `gatsby-config.js` file using CommonJS syntax. It exports a configuration object with site metadata and plugins, using `require` to import dependencies.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/custom-configuration/es-modules.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { siteUrl } = require(`./defaults`)\n\nmodule.exports = {\n  siteMetadata: {\n    title: `Using CJS`,\n    siteUrl,\n  },\n  plugins: [\n    {\n      resolve: `gatsby-source-filesystem`,\n      options: {\n        name: `posts`,\n        path: `${__dirname}/content/posts/`,\n      },\n    },\n    {\n      resolve: require.resolve(\"./local-plugin-with-path\"),\n      options: {},\n    },\n    {\n      resolve: `gatsby-plugin-mdx`,\n      options: {\n        mdxOptions: {\n          remarkPlugins: [require(`remark-gfm`)],\n        },\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Bumping Babel Minor Version\nDESCRIPTION: This commit bumps the minor version of the Babel dependency. This likely introduces new features or improvements without breaking backward compatibility.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-react-helmet/CHANGELOG.md#_snippet_14\n\nLANGUAGE: Other\nCODE:\n```\n7d42e8d866e46e9c39838d812d080d06433f7060\n```\n\nLANGUAGE: Other\nCODE:\n```\n863602567930a39142ed33d9d1f1813b7dec8686\n```\n\n----------------------------------------\n\nTITLE: Updating Babel Monorepo Chore\nDESCRIPTION: This commit updates the babel monorepo as a chore within the gatsby-plugin-react-css-modules package.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-react-css-modules/CHANGELOG.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nupdate babel monorepo [#37386](https://github.com/gatsbyjs/gatsby/issues/37386) ([b941876](https://github.com/gatsbyjs/gatsby/commit/b94187633d94d0f0071b38ffe93380dd802ec70f))\n```\n\n----------------------------------------\n\nTITLE: Formatting Changelog Files\nDESCRIPTION: This commit formats the changelog files for consistency and readability. It ensures a standardized structure for better maintainability and clarity.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-responsive-iframe/CHANGELOG.md#_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\nFormat changelog files ([088f23b](https://github.com/gatsbyjs/gatsby/commit/088f23b084b67f746a383e06e9216cef83270317))\n```\n\n----------------------------------------\n\nTITLE: Markdown Code String for Localhost URL - Bad Example\nDESCRIPTION: This example demonstrates how *not* to represent localhost URLs in Gatsby documentation. It shows the improper way of creating links that are not functional and can cause confusion.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/contributing/gatsby-style-guide.md#_snippet_5\n\nLANGUAGE: Markdown\nCODE:\n```\nopen your site with [http://localhost:8000/](http://localhost:8000/)\n```\n\n----------------------------------------\n\nTITLE: Homebrew Search Node.js Output Example\nDESCRIPTION: This shows an example of the output of the `brew search node` command, listing available Node.js packages in Homebrew. It helps the user identify the correct package name for the desired Node.js version.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/upgrading-node-js.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nbrew search node\n==> Formulae\nheroku/brew/heroku-node ‚úî        llnode                           node@18                          nodebrew\nleafnode                         node ‚úî                           node@14                          nodeenv\nlibbitcoin-node                  node-build                       node_exporter                    nodenv\n```\n\n----------------------------------------\n\nTITLE: Adding Missing Telemetry Dependency in Gatsby\nDESCRIPTION: This commit adds a missing telemetry dependency to the gatsby-plugin-page-creator package. The addition of this dependency resolves issues related to data collection and monitoring within the plugin.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-page-creator/CHANGELOG.md#_snippet_23\n\nLANGUAGE: TEXT\nCODE:\n```\ne43675e\n```\n\n----------------------------------------\n\nTITLE: Updating README for better instructions\nDESCRIPTION: This commit updates the README file to provide better instructions for users of the `gatsby-transformer-asciidoc` package.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-asciidoc/CHANGELOG.md#_snippet_5\n\nLANGUAGE: patch\nCODE:\n```\nUpdate READMEs for better instructions ([0890a5c](https://github.com/gatsbyjs/gatsby/commit/0890a5cf2c881b49193113a1e1bd5fe13a2c328f))\n```\n\n----------------------------------------\n\nTITLE: Building the Docker container for testing\nDESCRIPTION: This command builds the Docker container used for running the Gatsby memory benchmark tests. The `JEMALLOC=1` environment variable can be set to configure `jemalloc` to run within the container, potentially improving memory allocation and performance.  The container includes a Debian instance with Node.js 14 installed.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/benchmarks/docker-runner/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ JEMALLOC=1 yarn docker:build\n```\n\n----------------------------------------\n\nTITLE: Adding Newline to Error Log Message in Gatsby Source WordPress\nDESCRIPTION: This commit improves the error logging in gatsby-source-wordpress by adding a newline character to error log messages. This makes the logs easier to read and improves the overall debugging experience.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-wordpress/CHANGELOG.md#_snippet_24\n\n\n\n----------------------------------------\n\nTITLE: Bumping Node version for Gatsby\nDESCRIPTION: This commit updates the minimum required Node.js version for Gatsby to 10.13.0.  This allows Gatsby to leverage newer Node.js features and improvements.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-coffeescript/CHANGELOG.md#_snippet_17\n\nLANGUAGE: Markdown\nCODE:\n```\n**gatsby:** bump node min version to 10.13.0 ([#22400](https://github.com/gatsbyjs/gatsby/issues/22400)) ([83d681a](https://github.com/gatsbyjs/gatsby/commit/83d681a))\n```\n\n----------------------------------------\n\nTITLE: Update Babel Monorepo JavaScript\nDESCRIPTION: This code snippet represents a chore update related to the Babel monorepo. It ensures the project is using the latest Babel packages for compilation and compatibility.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-canonical-urls/CHANGELOG.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nupdate babel monorepo [#37386](https://github.com/gatsbyjs/gatsby/issues/37386) ([b941876](https://github.com/gatsbyjs/gatsby/commit/b94187633d94d0f0071b38ffe93380dd802ec70f))\n```\n\n----------------------------------------\n\nTITLE: Bumping babel minor version\nDESCRIPTION: This snippet describes bumping the babel minor version. This update is intended to update babel dependencies.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-asciidoc/CHANGELOG.md#_snippet_12\n\nLANGUAGE: Text\nCODE:\n```\nbump babel minor [#31857](https://github.com/gatsbyjs/gatsby/issues/31857) ([7d42e8d](https://github.com/gatsbyjs/gatsby/commit/7d42e8d866e46e9c39838d812d080d06433f7060))\n```\n\n----------------------------------------\n\nTITLE: Formatting Changelog Files\nDESCRIPTION: This commit formats the changelog files to maintain consistency and readability. It ensures that the changelog adheres to a standard format, making it easier to track changes and releases.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-styled-jsx/CHANGELOG.md#_snippet_4\n\nLANGUAGE: Other\nCODE:\n```\nFormat changelog files ([088f23b](https://github.com/gatsbyjs/gatsby/commit/088f23b084b67f746a383e06e9216cef83270317))\n```\n\n----------------------------------------\n\nTITLE: Formatting Changelog Files in GatsbyJS\nDESCRIPTION: This snippet describes a chore to format the changelog files within GatsbyJS.  The formatting likely involves ensuring consistency and readability across the changelog entries. This contributes to maintainability and easier tracking of changes.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-excel/CHANGELOG.md#_snippet_11\n\nLANGUAGE: None\nCODE:\n```\nFormat changelog files ([088f23b](https://github.com/gatsbyjs/gatsby/commit/088f23b084b67f746a383e06e9216cef83270317))\n```\n\n----------------------------------------\n\nTITLE: Fixing Minor and Patch Updates\nDESCRIPTION: This commit addresses minor and patch updates for gatsby-transformer-yaml. It resolves issues and incorporates minor enhancements to improve the stability and functionality of the package.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-yaml/CHANGELOG.md#_snippet_7\n\nLANGUAGE: \nCODE:\n```\nupdate minor and patch for gatsby-transformer-yaml [#28602](https://github.com/gatsbyjs/gatsby/issues/28602) ([08aa940](https://github.com/gatsbyjs/gatsby/commit/08aa9402f0c112cc58e0ab7ba47b1c22ed134d6c))\n```\n\n----------------------------------------\n\nTITLE: Update fs-extra dependency - Gatsby Telemetry\nDESCRIPTION: This commit updates the fs-extra dependency for the gatsby-telemetry package to version ^10.1.0. Updating fs-extra likely provides access to new file system utilities, bug fixes, and performance enhancements related to file operations within the telemetry package.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-telemetry/CHANGELOG.md#_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Bump Node Minimum Version\nDESCRIPTION: This snippet describes a feature where the minimum required Node.js version for gatsby-transformer-pdf was increased to 10.13.0. This update ensures that the plugin leverages newer JavaScript features and APIs available in more recent Node.js versions, potentially improving performance or stability.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-pdf/CHANGELOG.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n([#22400](https://github.com/gatsbyjs/gatsby/issues/22400)) ([83d681a](https://github.com/gatsbyjs/gatsby/commit/83d681a))\n```\n\n----------------------------------------\n\nTITLE: Applying Patches for v5\nDESCRIPTION: This snippet refers to applying patches specifically for version 5 of the package. These patches likely address bugs or issues discovered after the initial v5 release.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-lever/CHANGELOG.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\napply patches for v5 [#36796](https://github.com/gatsbyjs/gatsby/issues/36796) ([25f79b6](https://github.com/gatsbyjs/gatsby/commit/25f79b6c3719fdf09584ade620a05c66ba2a697c))\n```\n\n----------------------------------------\n\nTITLE: Preventing RCE in Gatsby Frontmatter\nDESCRIPTION: This JavaScript snippet attempts to write a file to the Cypress fixtures directory. It is designed to test whether JavaScript execution is disabled in the frontmatter, as this code should not run during normal page rendering. The `console.trace()` call adds diagnostic information if the code executes unexpectedly.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/e2e-tests/mdx/src/pages/frontmatter-javascript.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n(() => {\nrequire(`fs`).writeFileSync(`${process.cwd()}/cypress/fixtures/file-to-attempt-rce-on.txt`, (new Error('Helpful stack trace if this does execute. It should not execute.')).stack)\nconsole.trace()\nreturn {\ntitle: `I should not be parsed`,\notherKey: `Some other key`\n}\n})()\n```\n\n----------------------------------------\n\nTITLE: Adds CENTER option to ImageCropFocusType\nDESCRIPTION: This code snippet adds a new `CENTER` option to the `ImageCropFocusType` in gatsby-source-contentful. This provides a new focus point for image cropping when transforming images from Contentful.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-contentful/CHANGELOG.md#_snippet_34\n\nLANGUAGE: diff\nCODE:\n```\n([#9473](https://github.com/gatsbyjs/gatsby/issues/9473)) ([cc8c60d](https://github.com/gatsbyjs/gatsby/commit/cc8c60d))\n```\n\n----------------------------------------\n\nTITLE: TypeScript Compiler Configuration (tsconfig.json)\nDESCRIPTION: This snippet showcases a tsconfig.json file used for configuring the TypeScript compiler. It specifies compiler options such as the target ECMAScript version, module system, output directory, and declaration file generation. The compiler options ensure that the generated JavaScript is compatible and usable.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/creating-a-source-plugin/part-8/index.mdx#_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"include\": [\"./src/**/*\"],\n  \"compilerOptions\": {\n    \"target\": \"ES6\",\n    \"lib\": [\"es2016\", \"dom\"],\n    \"esModuleInterop\": true,\n    \"moduleResolution\": \"node\",\n    \"module\": \"CommonJS\",\n    \"outDir\": \"./dist\",\n    \"declaration\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting changelog files using Prettier\nDESCRIPTION: Formats the changelog files using Prettier to maintain consistent code styling. This chore ensures better readability and maintainability of the changelog.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-npm-package-search/CHANGELOG.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nFormat changelog files ([088f23b](https://github.com/gatsbyjs/gatsby/commit/088f23b084b67f746a383e06e9216cef83270317))\n```\n\n----------------------------------------\n\nTITLE: Updating Babel Monorepo in gatsby-plugin-styletron\nDESCRIPTION: This commit updates the Babel monorepo dependencies within the gatsby-plugin-styletron package.  This is part of a chore update. The update addresses dependencies and was released in version 8.4.0.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-styletron/CHANGELOG.md#_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\nChores\n\n- update babel monorepo [#37386](https://github.com/gatsbyjs/gatsby/issues/37386) ([b941876](https://github.com/gatsbyjs/gatsby/commit/b94187633d94d0f0071b38ffe93380dd802ec70f))\n```\n\n----------------------------------------\n\nTITLE: Using grep -E instead of egrep in Gatsby Core Utils\nDESCRIPTION: This commit updates the command used for extended regular expression matching from `egrep` to `grep -E`. This change is necessary because `egrep` is deprecated in some systems, and `grep -E` provides equivalent functionality with broader compatibility.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-core-utils/CHANGELOG.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngrep -E\n```\n\n----------------------------------------\n\nTITLE: Watch changes with Yarn\nDESCRIPTION: Monorepo setup: Watch for changes within the create-gatsby package and rebuild automatically. This allows for rapid iteration during local development without manually rebuilding the package after each change.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/create-gatsby/README.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\nyarn watch --scope=create-gatsby\n```\n\n----------------------------------------\n\nTITLE: Setting Parent for File Nodes in Gatsby Filesystem\nDESCRIPTION: This bug fix ensures that plugins can properly set the parent node when creating File nodes using the createRemoteFileNode function. This resolves issues related to file node relationships and data integrity.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-drupal/CHANGELOG.md#_snippet_27\n\n\n\n----------------------------------------\n\nTITLE: Resulting DOM Structure after Rendering Frame Component - HTML\nDESCRIPTION: This snippet displays the HTML structure that is rendered in the browser after the Frame component and GalleryPage component are rendered. It illustrates how the 'children' prop is inserted into the DOM.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-2/index.mdx#_snippet_14\n\nLANGUAGE: HTML\nCODE:\n```\n<div>\n  <h1>This is the page title</h1>\n  <p>This will be passed in as children</p>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating an Empty index.js for Theme (gatsby-theme-events)\nDESCRIPTION: Creates an empty `index.js` file to satisfy the `main` entry point specified in the `gatsby-theme-events/package.json` file. This file is necessary for Node to properly resolve the package during installation.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/building-a-theme.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// boop\n```\n\n----------------------------------------\n\nTITLE: Filter with GraphQL - Equal Operator\nDESCRIPTION: This query filters MarkdownRemark nodes to find titles that exactly match \"Fantastic Beasts and Where to Find Them\" using the `eq` operator. It demonstrates precise string matching within GraphQL queries.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/graphql-reference.md#_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  # eq: I want all the titles that match \"Fantastic Beasts and Where to Find Them\"\n  example_eq: allMarkdownRemark(\n    filter: {\n      frontmatter: { title: { eq: \"Fantastic Beasts and Where to Find Them\" } }\n    }\n  ) {\n    edges {\n      node {\n        frontmatter {\n          title\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating babel monorepo in gatsby-design-tokens\nDESCRIPTION: This code snippet represents a bug fix update in the gatsby-design-tokens package, specifically updating the babel monorepo. It addresses issue #37568 and was included in the 5.6.0 release of the package.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-design-tokens/CHANGELOG.md#_snippet_1\n\nLANGUAGE: TEXT\nCODE:\n```\n- update babel monorepo [#37568](https://github.com/gatsbyjs/gatsby/issues/37568) ([13a0a9e](https://github.com/gatsbyjs/gatsby/commit/13a0a9e83dcb015b65dff6b73cdd5dea09c2988f))\n```\n\n----------------------------------------\n\nTITLE: Customizing Shell Prompt User and Host\nDESCRIPTION: This snippet demonstrates customizing the shell prompt's user and host. The `promptUser` and `promptHost` options are used to override the default values for the user and host in the shell prompt.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-prismjs/README.md#_snippet_15\n\nLANGUAGE: Shell\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Building Gatsby for MDX Benchmark\nDESCRIPTION: This code snippet demonstrates how to build a Gatsby project for benchmarking MDX pages. It involves setting the number of pages using the NUM_PAGES environment variable, installing dependencies with yarn or npm, and then running the Gatsby build command using yarn or npm.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/benchmarks/mdx/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ export NUM_PAGES=1024\n$ yarn install    # or npm install\n$ gatsby build    # or npm run build\n```\n\n----------------------------------------\n\nTITLE: Applying Patches for v5\nDESCRIPTION: This snippet applies patches for version 5. This is likely a set of fixes or adjustments made to the package in preparation for or after the release of version 5.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-mongodb/CHANGELOG.md#_snippet_5\n\nLANGUAGE: none\nCODE:\n```\napply patches for v5 [#36796](https://github.com/gatsbyjs/gatsby/issues/36796) ([25f79b6](https://github.com/gatsbyjs/gatsby/commit/25f79b6c3719fdf09584ade620a05c66ba2a697c))\n```\n\n----------------------------------------\n\nTITLE: Defining a JavaScript constant in MDX\nDESCRIPTION: This snippet defines a JavaScript constant named `codefence` and assigns it the boolean value `true`. It is embedded within an MDX file using a code fence, allowing the inclusion of executable JavaScript code within Markdown content.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/e2e-tests/mdx/src/pages/file with space.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst codefence = true\n```\n\n----------------------------------------\n\nTITLE: Updating Babel Monorepo\nDESCRIPTION: This is a bug fix that updates the babel monorepo. This update is aimed at resolving compatibility issues or improving the performance of babel transformations within the gatsby-plugin-google-tagmanager.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-google-tagmanager/CHANGELOG.md#_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Updating Babel Monorepo (again)\nDESCRIPTION: This commit updates the Babel monorepo dependency. This is likely a follow-up to a previous update, possibly to address issues or incorporate further changes.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-react-helmet/CHANGELOG.md#_snippet_12\n\nLANGUAGE: Other\nCODE:\n```\na554998b4f6765103b650813cf52dbfcc575fecf\n```\n\n----------------------------------------\n\nTITLE: Wrapping ignore pattern in quotes\nDESCRIPTION: This commit fixes an issue where an ignore pattern was not properly wrapped in quotes. This ensures that the ignore pattern is correctly interpreted by the relevant tooling, preventing unexpected behavior or errors during the build process. The fix ensures correct string formatting.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/babel-preset-gatsby/CHANGELOG.md#_snippet_9\n\n\n\n----------------------------------------\n\nTITLE: Fixing React RC Compatibility in gatsby-plugin-google-analytics\nDESCRIPTION: Addresses a bug to ensure compatibility with React Release Candidate 2 in the gatsby-plugin-google-analytics plugin. This fix resolves potential issues arising from changes in the React RC 2 version.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-google-analytics/CHANGELOG.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n0c61265\n```\n\n----------------------------------------\n\nTITLE: Cleaning up tests in gatsby-source-filesystem\nDESCRIPTION: This commit cleans up the tests in the gatsby-source-filesystem package, addressing issue #35200. This change likely involves refactoring or improving the test suite for better maintainability and reliability.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-filesystem/CHANGELOG.md#_snippet_6\n\n\n\n----------------------------------------\n\nTITLE: Fixing README Link\nDESCRIPTION: This snippet fixes a broken link in the README file for the gatsby-transformer-pdf package. This ensures users can access the correct documentation.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-pdf/CHANGELOG.md#_snippet_14\n\n\n\n----------------------------------------\n\nTITLE: Fixing Gatsby CLI Dependency\nDESCRIPTION: This snippet addresses an issue where the gatsby-cli dependency was not correctly defined in the source-filesystem and plugin-sharp packages. It ensures that these packages have the correct gatsby-cli dependency.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-screenshot/CHANGELOG.md#_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nfix gatsby-cli dep in source-filesystem & plugin-sharp ([#14881](https://github.com/gatsbyjs/gatsby/issues/14881)) ([2594623](https://github.com/gatsbyjs/gatsby/commit/2594623))\n```\n\n----------------------------------------\n\nTITLE: Run Gatsby Query Timing (Master) - Multiple Types\nDESCRIPTION: This shell command executes the `runQueryTiming.sh` script to benchmark Gatsby query performance on the master branch, with a large number of types. It sets the number of page types (NUM_TYPES) and the number of pages (NUM_PAGES) as environment variables for the script.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/benchmarks/query/recording.md#_snippet_1\n\nLANGUAGE: Shell Script\nCODE:\n```\nquery $ NUM_TYPES=100 NUM_PAGES=10000 bin/runQueryTiming.sh\n13.112\n```\n\n----------------------------------------\n\nTITLE: Render Message component with text\nDESCRIPTION: Renders the `Message` component with the text \"Just testing\" and sets the `data-testid` attribute to \"external\". This allows for easy identification and testing of the component in a testing environment.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/e2e-tests/mdx/src/pages/html.mdx#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<Message data-testid=\"external\">Just testing</Message>\n```\n\n----------------------------------------\n\nTITLE: Fixing ignore pattern wrapping in Gatsby\nDESCRIPTION: This commit fixes an issue where the ignore pattern was not properly wrapped in quotes within the Gatsby configuration. Wrapping the ignore pattern correctly ensures that files and directories are properly excluded from processing.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-react-helmet/CHANGELOG.md#_snippet_19\n\nLANGUAGE: Shell\nCODE:\n```\nwrap ignore pattern in quotes ([#23176](https://github.com/gatsbyjs/gatsby/issues/23176)) ([7563db6](https://github.com/gatsbyjs/gatsby/commit/7563db6))\n```\n\n----------------------------------------\n\nTITLE: Respecting Custom Options & Requiring Title in gatsby-plugin-feed Config\nDESCRIPTION: This bug fix ensures that custom options provided in the gatsby-plugin-feed configuration are respected. It also enforces the requirement of a title field in the configuration for proper feed generation. This fix was included in version 2.3.8.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-feed/CHANGELOG.md#_snippet_13\n\n\n\n----------------------------------------\n\nTITLE: Chore: Update dev dependencies in gatsby-plugin-image\nDESCRIPTION: This snippet updates minor and patch dependencies for gatsby-plugin-image in the development environment. This ensures that the plugin is using the latest versions of its development dependencies, which can improve performance and stability.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-image/CHANGELOG.md#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nupdate [dev] minor and patch dependencies for gatsby-plugin-image [#37584](https://github.com/gatsbyjs/gatsby/issues/37584) ([c997776](https://github.com/gatsbyjs/gatsby/commit/c997776da4b4ad897318c7474865835288990d1c))\n```\n\n----------------------------------------\n\nTITLE: Clarifying Filter Pages' Reliance in gatsby-plugin-sitemap\nDESCRIPTION: This chore commit clarifies how the `filterPages` function relies on the `excludes` array within `gatsby-plugin-sitemap`.  The clarification is to improve understanding of how pages are filtered from the sitemap.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-sitemap/CHANGELOG.md#_snippet_4\n\nLANGUAGE: TEXT\nCODE:\n```\nClarify filterPages' reliance on the excludes array [#37065](https://github.com/gatsbyjs/gatsby/issues/37065) ([fa5e90d](https://github.com/gatsbyjs/gatsby/commit/fa5e90dc67fb663afbb01574e009b346d48b4e1d))\n```\n\n----------------------------------------\n\nTITLE: Defining Types Explicitly in Gatsby Source Medium\nDESCRIPTION: This snippet shows a feature addition where types are explicitly defined using createSchemaCustomization. This allows for more control over the GraphQL schema generated by the plugin, improving type safety and discoverability.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-medium/CHANGELOG.md#_snippet_3\n\nLANGUAGE: Diff\nCODE:\n```\n- **gatsby-source-medium:** define types explicitly via createSchemaCustomization ([#22377](https://github.com/gatsbyjs/gatsby/issues/22377)) ([36048cf](https://github.com/gatsbyjs/gatsby/commit/36048cf))\n```\n\n----------------------------------------\n\nTITLE: GraphQL Response for Post with Image (JSON)\nDESCRIPTION: This JSON response shows the data returned from the GraphQL query, containing the post's title and the gatsbyImage data, including sources, fallback, layout, width, height, and backgroundColor.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/creating-a-source-plugin/part-6/index.mdx#_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"post\": {\n      \"title\": \"The first post\",\n      \"image\": {\n        \"gatsbyImage\": {\n          \"images\": {\n            \"sources\": [\n              {\n                \"srcSet\": \"/_gatsby/image/<long-string>\",\n                \"type\": \"image/avif\",\n                \"sizes\": \"(min-width: 600px) 600px, 100vw\"\n              },\n              {\n                \"srcSet\": \"/_gatsby/image/<long-string>\",\n                \"type\": \"image/webp\",\n                \"sizes\": \"(min-width: 600px) 600px, 100vw\"\n              }\n            ],\n            \"fallback\": {\n              \"src\": \"/_gatsby/image/<long-string>\",\n              \"srcSet\": \"/_gatsby/image/<long-string>\",\n              \"sizes\": \"(min-width: 600px) 600px, 100vw\"\n            }\n          },\n          \"layout\": \"constrained\",\n          \"width\": 600,\n          \"height\": 800,\n          \"backgroundColor\": \"rgb(184,168,152)\"\n        }\n      }\n    }\n  },\n  \"extensions\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Babel Monorepo - GatsbyJS\nDESCRIPTION: This chore updates the Babel monorepo, ensuring the project uses the latest version of Babel and its related packages for transpilation.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-custom-blocks/CHANGELOG.md#_snippet_9\n\nLANGUAGE: none\nCODE:\n```\nupdate babel monorepo [#27528](https://github.com/gatsbyjs/gatsby/issues/27528) ([539dbb0](https://github.com/gatsbyjs/gatsby/commit/539dbb09166e346a6cee568973d2de3d936e8ef3))\n```\n\n----------------------------------------\n\nTITLE: Updating Babel Monorepo - JavaScript\nDESCRIPTION: This snippet updates the Babel monorepo for the gatsby-plugin-benchmark-reporting package. It addresses issue #32564 on GitHub.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-benchmark-reporting/CHANGELOG.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nupdate babel monorepo [#32564](https://github.com/gatsbyjs/gatsby/issues/32564) ([a554998](https://github.com/gatsbyjs/gatsby/commit/a554998b4f6765103b650813cf52dbfcc575fecf))\n```\n\n----------------------------------------\n\nTITLE: Chore: Update typescript in gatsby-plugin-image\nDESCRIPTION: This snippet represents a chore update for the typescript dependency. It involves updating typescript in the gatsby-plugin-image package.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-image/CHANGELOG.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nupdate typescript [#37848](https://github.com/gatsbyjs/gatsby/issues/37848) ([9f92796](https://github.com/gatsbyjs/gatsby/commit/9f92796070b0e73fa92089af93de376c9be9021e))\n```\n\n----------------------------------------\n\nTITLE: Updating Babel Monorepo in Gatsby\nDESCRIPTION: This commit updates the Babel monorepo to the latest version. This ensures that the Gatsby project is using the most up-to-date Babel features and bug fixes, improving the overall performance and stability of the build process. The updated babel monorepo is related to issue #27528.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-hjson/CHANGELOG.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n539dbb09166e346a6cee568973d2de3d936e8ef3\n```\n\n----------------------------------------\n\nTITLE: Bumping minimum Node version in gatsby-source-hacker-news\nDESCRIPTION: This commit bumps the minimum required Node.js version to 10.13.0 for the gatsby-source-hacker-news package.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-hacker-news/CHANGELOG.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n**gatsby:** bump node min version to 10.13.0 ([#22400](https://github.com/gatsbyjs/gatsby/issues/22400)) ([83d681a](https://github.com/gatsbyjs/gatsby/commit/83d681a))\n```\n\n----------------------------------------\n\nTITLE: Updating Peer Dependencies\nDESCRIPTION: This snippet details a chore focusing on updating peer dependencies. This is vital for maintaining compatibility with other packages in the Gatsby ecosystem.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-lever/CHANGELOG.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nUpdate peerDeps [#36965](https://github.com/gatsbyjs/gatsby/issues/36965) ([b624442](https://github.com/gatsbyjs/gatsby/commit/b6244424fe8b724cbc23b80b2b4f5424cc2055a4))\n```\n\n----------------------------------------\n\nTITLE: Fixing Documentation\nDESCRIPTION: Removes the README.md file which was not displaying on the Gatsby plugin library. Improves documentation accessibility.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-stylus/CHANGELOG.md#_snippet_8\n\n\n\n----------------------------------------\n\nTITLE: Upgrading Got Package\nDESCRIPTION: Upgrades the 'got' package to a newer version in the gatsby-source-npm-package-search package. This brings performance improvements, bug fixes, and new features from the 'got' library.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-npm-package-search/CHANGELOG.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nupgrade got package [#32928](https://github.com/gatsbyjs/gatsby/issues/32928) ([2ac366e](https://github.com/gatsbyjs/gatsby/commit/2ac366e3745990d47c01f19875f185d0355c89b5))\n```\n\n----------------------------------------\n\nTITLE: Running Gatsby develop for the site\nDESCRIPTION: This command executes the `develop:site` script, initiating the Gatsby development server for the example site. This allows viewing and testing the plugin's functionality in a local Gatsby environment.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/creating-a-source-plugin/part-1/index.mdx#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nyarn develop:site\n```\n\n----------------------------------------\n\nTITLE: GraphQL Schema Example (Correct)\nDESCRIPTION: This GraphQL schema example shows the expected structure where the `image` field has a `childImageSharp` subfield. This requires proper configuration of plugins like `gatsby-plugin-sharp` and `gatsby-transformer-sharp` to process images and add the necessary subfields.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/local-development/troubleshooting-common-errors.md#_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nallMdx {\n  nodes {\n    id\n    title\n    image {\n      childImageSharp {\n        gatsbyImageData\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Update Typescript dependency - Gatsby Telemetry\nDESCRIPTION: This commit updates the typescript dependency for the gatsby-telemetry package to version ^4.6.4. Keeping TypeScript up to date ensures access to the latest language features, bug fixes, and improvements in type checking, contributing to a more robust codebase.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-telemetry/CHANGELOG.md#_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Feature: Plugin option validation for gatsby\nDESCRIPTION: This snippet refers to a feature addition to Gatsby that introduces plugin option validation. It ensures that the options provided to plugins are valid, improving the reliability and maintainability of Gatsby sites.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-images/CHANGELOG.md#_snippet_6\n\nLANGUAGE: N/A\nCODE:\n```\n**gatsby:** release plugin option validation ([#27437](https://github.com/gatsbyjs/gatsby/issues/27437)) ([41ae1c0](https://github.com/gatsbyjs/gatsby/commit/41ae1c07ad9919655782ef17feed8cf4f14f12d8))\n```\n\n----------------------------------------\n\nTITLE: Build Gatsby Site (Shell)\nDESCRIPTION: This command builds the Gatsby site, creating static assets that can be deployed.  It is executed using the gatsby cli.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/benchmarks/source-agilitycms/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngatsby build\n```\n\n----------------------------------------\n\nTITLE: Git Commands to Commit and Push Changes\nDESCRIPTION: These shell commands commit all changes, add a commit message, and push the changes to the remote repository.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-4/index.mdx#_snippet_21\n\nLANGUAGE: shell\nCODE:\n```\ngit add .\ngit commit -m \"Finished Gatsby Tutorial Part 4\"\ngit push\n```\n\n----------------------------------------\n\nTITLE: Updating Bluebird Dependency in Gatsby (JavaScript)\nDESCRIPTION: This code snippet shows the commit associated with updating the bluebird dependency to version ^3.7.0. The update aims to leverage the latest features and fixes provided by the newer version of the bluebird library, which is likely used for promise management within gatsby-page-utils.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-page-utils/CHANGELOG.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nbd235a8\n```\n\n----------------------------------------\n\nTITLE: Example Index Entries\nDESCRIPTION: Illustrates example entries in the index, showcasing how null values and the Symbol(\"undef\") are used to represent missing or null fields.  These entries reflect how the data is structured to handle queries involving these values.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby/src/datastore/lmdb/query/README.md#_snippet_8\n\nLANGUAGE: text\nCODE:\n```\n[\"A/a:1/b:1\", null, Symbol(\"undef\"), \"a3\"]: \"a3\"\n[\"A/a:1/b:1\", \"foo\", \"bar\", \"a1\"]: \"a1\"\n[\"A/a:1/b:1\", \"foo\", \"bar\", \"a2\"]: \"a2\"\n[\"A/a:1/b:1\", \"foo\", \"baz\", \"a1\"]: \"a1\"\n```\n\n----------------------------------------\n\nTITLE: Updating Babel Monorepo (2)\nDESCRIPTION: This commit updates the babel monorepo dependency. This update brings the latest features and bug fixes from Babel to the package, ensuring compatibility with the latest JavaScript syntax and features.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-graphql/CHANGELOG.md#_snippet_19\n\nLANGUAGE: Text\nCODE:\n```\nupdate babel monorepo [#32238](https://github.com/gatsbyjs/gatsby/issues/32238) ([466d4c0](https://github.com/gatsbyjs/gatsby/commit/466d4c087bbc96abb942a02c67243bcc9a4f2a0a))\n```\n\n----------------------------------------\n\nTITLE: Formatting Changelog Files in gatsby-plugin-google-analytics\nDESCRIPTION: Formats the changelog files for the gatsby-plugin-google-analytics package. This chore ensures consistency and readability within the project's documentation.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-google-analytics/CHANGELOG.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n088f23b\n```\n\n----------------------------------------\n\nTITLE: Setting Remote URL and Pushing to GitHub\nDESCRIPTION: These commands set the remote URL of the local Git repository to point to a new repository on GitHub and push the local changes to the remote repository.  `<your-github-repo-link>` should be replaced with the actual URL of the GitHub repository. `-u` sets up tracking for future pushes.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/sourcing-from-forestry.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ngit remote set-url origin <your-github-repo-link>\ngit push -u origin master\n```\n\n----------------------------------------\n\nTITLE: Upgrading Axios dependency JavaScript\nDESCRIPTION: This snippet updates the Axios dependency to the latest version. Axios is a promise-based HTTP client for the browser and Node.js, used for making HTTP requests. Upgrading ensures the plugin uses the most recent features and security patches of Axios.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-images-contentful/CHANGELOG.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nupgrade axios [#38698](https://github.com/gatsbyjs/gatsby/issues/38698) ([e2b3ea3](https://github.com/gatsbyjs/gatsby/commit/e2b3ea3fbfa70b226f6c5c677efedc83f5386cce))\n```\n\n----------------------------------------\n\nTITLE: Re-generating changelogs\nDESCRIPTION: This commit re-generates the changelogs for the package. It ensures that the changelogs are up-to-date and accurately reflect the changes made in each release.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-twitter/CHANGELOG.md#_snippet_10\n\nLANGUAGE: TEXT\nCODE:\n```\nre-generate changelogs [#32886](https://github.com/gatsbyjs/gatsby/issues/32886) ([417df15](https://github.com/gatsbyjs/gatsby/commit/417df15230be368a9db91f2ad1a9bc0442733177))\n```\n\n----------------------------------------\n\nTITLE: Updating React Compatibility\nDESCRIPTION: This commit fixes compatibility with React RC 2.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-cxs/CHANGELOG.md#_snippet_13\n\n\n\n----------------------------------------\n\nTITLE: Updating Bluebird Dependency\nDESCRIPTION: This commit updates the `bluebird` dependency to version ^3.7.0. This update likely brings performance enhancements, bug fixes, and potentially new features related to promise handling within the `gatsby-transformer-hjson` plugin.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-hjson/CHANGELOG.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nbd235a8\n```\n\n----------------------------------------\n\nTITLE: Reverting to current packages using git and npm\nDESCRIPTION: Reverts the project's package.json file to the original state using git and then reinstalls dependencies using npm with the --force flag to ensure all dependencies are updated. This is used to undo changes made by gatsby-dev.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-dev-cli/README.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\ngit checkout package.json; npm install --force\n```\n\n----------------------------------------\n\nTITLE: Updating Minor Package Updates (JavaScript)\nDESCRIPTION: This code snippet refers to a commit which updates minor versions of various packages within the project, excluding react, babel, and eslint. This kind of update ensures compatibility and access to bug fixes or minor improvements in the updated packages.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-page-utils/CHANGELOG.md#_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\n252d867\n```\n\n----------------------------------------\n\nTITLE: Embedding an image using Markdown\nDESCRIPTION: This snippet demonstrates how to embed an image using Markdown syntax. The image source is specified within the parentheses following the exclamation mark and brackets.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/using-remark/src/pages/2017-01-02---responsive-images-and-iframes/index.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n![](image.png)\n```\n\n----------------------------------------\n\nTITLE: Updating fs-extra dependency in gatsby-plugin-page-creator\nDESCRIPTION: This snippet updates the fs-extra dependency to version ^11.1.1. fs-extra is a module providing extra file system utility methods, and this update aims to incorporate the latest features and fixes.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-page-creator/CHANGELOG.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nupdate dependency fs-extra to ^11.1.1 [#37827](https://github.com/gatsbyjs/gatsby/issues/37827) ([3e9a590](https://github.com/gatsbyjs/gatsby/commit/3e9a590fdc0b4cdbc763b6a6e3ca3e983ac8231a))\n```\n\n----------------------------------------\n\nTITLE: Updating Babel Monorepo (Chore)\nDESCRIPTION: This snippet shows a chore related to updating the Babel monorepo, likely for keeping dependencies up-to-date. It does not specify a particular version, indicating a general update task.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-lever/CHANGELOG.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nupdate babel monorepo [#37386](https://github.com/gatsbyjs/gatsby/issues/37386) ([b941876](https://github.com/gatsbyjs/gatsby/commit/b94187633d94d0f0071b38ffe93380dd802ec70f))\n```\n\n----------------------------------------\n\nTITLE: Bumping Babel Minor Version in Gatsby\nDESCRIPTION: This commit bumps the minor version of Babel in the gatsby-plugin-nprogress package. This update likely includes improvements and bug fixes.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-nprogress/CHANGELOG.md#_snippet_8\n\nLANGUAGE: Markdown\nCODE:\n```\nbump babel minor [#31857](https://github.com/gatsbyjs/gatsby/issues/31857) [#31859](https://github.com/gatsbyjs/gatsby/issues/31859) ([8636025](https://github.com/gatsbyjs/gatsby/commit/863602567930a39142ed33d9d1f1813b7dec8686))\n```\n\n----------------------------------------\n\nTITLE: Formatting changelog files\nDESCRIPTION: This snippet refers to formatting changelog files within the gatsby-transformer-asciidoc package. This likely involves applying a consistent style and structure to the changelog to improve readability and maintainability.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-asciidoc/CHANGELOG.md#_snippet_17\n\nLANGUAGE: Text\nCODE:\n```\nFormat changelog files ([088f23b](https://github.com/gatsbyjs/gatsby/commit/088f23b084b67f746a383e06e9216cef83270317))\n```\n\n----------------------------------------\n\nTITLE: Re-Adding JSON transformer\nDESCRIPTION: This commit re-adds the JSON transformer functionality to the gatsby-parcel-config package. This allows the package to handle JSON files during the build process.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-parcel-config/CHANGELOG.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nRe-Add JSON transformer [#36748](https://github.com/gatsbyjs/gatsby/issues/36748) ([5e639b8](https://github.com/gatsbyjs/gatsby/commit/5e639b84f87c6de13fdf2e58a73b69b5ea1a182b))\n```\n\n----------------------------------------\n\nTITLE: Starting Gatsby development server\nDESCRIPTION: These commands navigate to the newly created Gatsby site directory and start the development server. The development server watches for file changes and automatically reloads the browser. Requires npm and Gatsby CLI to be installed.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/starters/gatsby-starter-minimal/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncd my-gatsby-site/\nnpm run develop\n```\n\n----------------------------------------\n\nTITLE: Pushing Changes to Fork\nDESCRIPTION: Pushes the changes from your local branch to your forked repository on GitHub. This uploads the merged changes and any conflict resolutions to your fork, making them available for a pull request.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/contributing/how-to-open-a-pull-request.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ngit push origin head\n```\n\n----------------------------------------\n\nTITLE: Configuring Buildpacks in app.json\nDESCRIPTION: This snippet shows how to configure the Heroku buildpacks within the `app.json` file. This is an alternative to using the CLI and allows you to define your app's requirements using the Heroku Platform API.  The `url` property specifies the buildpack's location.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/previews-deploys-hosting/deploying-to-heroku.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"buildpacks\": [\n    {\n      \"url\": \"heroku/nodejs\"\n    },\n    {\n      \"url\": \"https://github.com/heroku/heroku-buildpack-static\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Fix: Correct Links in gatsby-transformer-csv Changelogs\nDESCRIPTION: This commit corrects the links in the changelogs for the gatsby-transformer-csv package. It ensures that the links in the changelog are accurate and point to the correct resources, such as issue trackers or commit details.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-csv/CHANGELOG.md#_snippet_2\n\nLANGUAGE: Text\nCODE:\n```\ncorrect links in package changelogs ([#15630](https://github.com/gatsbyjs/gatsby/issues/15630)) ([d07b9dd](https://github.com/gatsbyjs/gatsby/commit/d07b9dd))\n```\n\n----------------------------------------\n\nTITLE: Updating Babel monorepo\nDESCRIPTION: This commit updates the Babel monorepo to the latest version. The update includes improvements in performance, stability, and new features for transpiling JavaScript code.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-twitter/CHANGELOG.md#_snippet_9\n\nLANGUAGE: TEXT\nCODE:\n```\nupdate babel monorepo [#32996](https://github.com/gatsbyjs/gatsby/issues/32996) ([048c7a7](https://github.com/gatsbyjs/gatsby/commit/048c7a727bbc6a9ad8e27afba72ee20e946c4aaa))\n```\n\n----------------------------------------\n\nTITLE: Preventing Plugin Option Augmentation JavaScript\nDESCRIPTION: This snippet fixes an issue where plugin options were being augmented. Plugin options should remain immutable. This change ensures the plugin options are not modified during the plugin execution.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-copy-linked-files/CHANGELOG.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\ndo not augment plugin-options ([#26006](https://github.com/gatsbyjs/gatsby/issues/26006)) ([222920b](https://github.com/gatsbyjs/gatsby/commit/222920b))\n```\n\n----------------------------------------\n\nTITLE: Trigger Gatsby Cloud Preview Webhook with curl\nDESCRIPTION: This code snippet shows how to trigger a Gatsby Cloud Preview Webhook using a `curl` command. It sends a `POST` request to the webhook URL. Replace `<site id>` with the actual site ID.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/cloud/build-and-preview-webhooks.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST https://webhook.gatsbyjs.com/hooks/data_source/<site id>\n```\n\n----------------------------------------\n\nTITLE: Updating cross-env dependency\nDESCRIPTION: This commit updates the cross-env dependency to version ^7.0.3, addressing issue #28505. cross-env provides a way to set environment variables cross-platform.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-twitter/CHANGELOG.md#_snippet_17\n\nLANGUAGE: Text\nCODE:\n```\n- update dependency cross-env to ^7.0.3 [#28505](https://github.com/gatsbyjs/gatsby/issues/28505) ([a819b9b](https://github.com/gatsbyjs/gatsby/commit/a819b9bfb663139f7b06c3ed7d6d6069a2382b2c))\n```\n\n----------------------------------------\n\nTITLE: Setting up Gatsby repository\nDESCRIPTION: This commands setup the gatsby repository, install dependencies for packages, and build them.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-design-tokens/README.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n# set up the repo, install dependencies for `packages`, and build the latter\nyarn run bootstrap\n```\n\n----------------------------------------\n\nTITLE: Updating Minor Packages\nDESCRIPTION: This snippet describes the action of updating minor version updates in several packages. This likely includes dependency updates to pull in bug fixes and enhancements without introducing breaking changes. This helps in maintaining the stability and security of the package.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-pdf/CHANGELOG.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n([#18875](https://github.com/gatsbyjs/gatsby/issues/18875)) ([b692879](https://github.com/gatsbyjs/gatsby/commit/b692879))\n```\n\n----------------------------------------\n\nTITLE: Updating minor updates\nDESCRIPTION: Updates minor version updates in packages except react, babel and eslint. \nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-stylus/CHANGELOG.md#_snippet_12\n\n\n\n----------------------------------------\n\nTITLE: Supporting Linking Typedefs in Gatsby\nDESCRIPTION: This commit introduces support for linking typedefs (type definitions) within the `gatsby-transformer-documentationjs` plugin.  This allows for creating links between different type definitions in the generated documentation.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-documentationjs/CHANGELOG.md#_snippet_22\n\nLANGUAGE: JavaScript\nCODE:\n```\n**gatsby-transformer-documentationjs:** support linking typedefs ([#11597](https://github.com/gatsbyjs/gatsby/issues/11597)) ([16b7d0d](https://github.com/gatsbyjs/gatsby/commit/16b7d0d))\n```\n\n----------------------------------------\n\nTITLE: Verifying Node Existence Before Looping\nDESCRIPTION: This bug fix ensures that nodes exist before attempting to loop through them, preventing potential errors or unexpected behavior when dealing with empty datasets.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-drupal/CHANGELOG.md#_snippet_6\n\n\n\n----------------------------------------\n\nTITLE: Dependency Update: Babel Parser\nDESCRIPTION: This snippet describes an update to the @babel/parser dependency within the gatsby-transformer-javascript-frontmatter package. It updates the @babel/parser dependency to a version greater than or equal to 7.6.0.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-javascript-frontmatter/CHANGELOG.md#_snippet_16\n\n\n\n----------------------------------------\n\nTITLE: Markdown Lists Syntax\nDESCRIPTION: Shows the syntax for creating ordered and unordered lists in Markdown, including nested lists and indented paragraphs within list items.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/using-remark/src/pages/2016-04-15---hello-world-kitchen-sink/index.md#_snippet_2\n\nLANGUAGE: no-highlight\nCODE:\n```\n1. First ordered list item\n2. Another item\n‚ãÖ‚ãÖ‚ãÖ‚ãÖ* Unordered sub-list.\n1. Actual numbers don't matter, just that it's a number\n‚ãÖ‚ãÖ‚ãÖ‚ãÖ1. Ordered sub-list\n4. And another item.\n\n‚ãÖ‚ãÖ‚ãÖYou can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we'll use three here to also align the raw Markdown).\n\n‚ãÖ‚ãÖ‚ãÖTo have a line break without a paragraph, you will need to use two trailing spaces.‚ãÖ‚ãÖ\n‚ãÖ‚ãÖ‚ãÖNote that this line is separate, but within the same paragraph.‚ãÖ‚ãÖ\n\n* Unordered list can use asterisks\n- Or minuses\n+ Or pluses\n```\n\n----------------------------------------\n\nTITLE: Node Example with Array\nDESCRIPTION: This Javascript code shows an example node object with an array `a`, which can lead to multiple entries in the index `{a: 1}`. This example is provided to highlight the challenges when counting the number of elements returned by some query when multiKey indexes are involved.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby/src/datastore/lmdb/query/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst node = { id: 1, a: [`foo`, `bar`] }\n```\n\n----------------------------------------\n\nTITLE: Bug Fix: Babel-plugin-macros Update in babel-preset-gatsby\nDESCRIPTION: This snippet describes the fix for updating the babel-plugin-macros dependency to v3 for babel-preset-gatsby package. This update addresses an issue reported in issue #33508 on the gatsbyjs/gatsby repository.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/babel-preset-gatsby/CHANGELOG.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nupdate dependency babel-plugin-macros to v3 for babel-preset-gatsby [#33508](https://github.com/gatsbyjs/gatsby/issues/33508) ([7445aa3](https://github.com/gatsbyjs/gatsby/commit/7445aa34e0138e676fb506b48bd120b245daee35))\n```\n\n----------------------------------------\n\nTITLE: Wrapping ignore pattern in quotes (JavaScript)\nDESCRIPTION: This commit addresses an issue where the ignore pattern in gatsby-source-contentful was not properly wrapped in quotes. This ensures the pattern is correctly interpreted.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-contentful/CHANGELOG.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n7563db6\n```\n\n----------------------------------------\n\nTITLE: Creating and running a Gatsby theme workspace\nDESCRIPTION: These commands create a new Gatsby theme workspace using the provided starter, navigate to the directory, and start the development server for the example site.  This allows you to develop and test your theme in a development environment.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/starters/gatsby-starter-theme-workspace/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngatsby new my-theme https://github.com/gatsbyjs/gatsby-starter-theme-workspace\ncd my-theme\nyarn workspace example develop\n```\n\n----------------------------------------\n\nTITLE: Update Typescript dependency - Gatsby Telemetry\nDESCRIPTION: This commit updates the typescript dependency for the gatsby-telemetry package to version ^4.4.4. Keeping TypeScript up to date allows the package to benefit from the latest language features and type checking improvements.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-telemetry/CHANGELOG.md#_snippet_12\n\n\n\n----------------------------------------\n\nTITLE: Updating READMEs in gatsby-plugin-flow\nDESCRIPTION: This snippet showcases a chore update focused on improving the README files for better instructions within the gatsby-plugin-flow package.  The change is associated with a specific commit hash.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-flow/CHANGELOG.md#_snippet_2\n\nLANGUAGE: Diff\nCODE:\n```\n+ Update READMEs for better instructions ([0890a5c](https://github.com/gatsbyjs/gatsby/commit/0890a5cf2c881b49193113a1e1bd5fe13a2c328f))\n```\n\n----------------------------------------\n\nTITLE: Applying patches for v5 in gatsby-transformer-toml\nDESCRIPTION: This commit applies necessary patches for version 5 of the gatsby-transformer-toml package. This involves applying fixes and adjustments to ensure compatibility and stability with the new version. The issue is related to #36796.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-toml/CHANGELOG.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\napply patches for v5 [#36796](https://github.com/gatsbyjs/gatsby/issues/36796) ([25f79b6](https://github.com/gatsbyjs/gatsby/commit/25f79b6c3719fdf09584ade620a05c66ba2a697c))\n```\n\n----------------------------------------\n\nTITLE: Dependency Update: Bluebird Library to ^3.5.5\nDESCRIPTION: This snippet describes an update to the Bluebird dependency within the gatsby-transformer-javascript-frontmatter package. It updates the bluebird dependency to version ^3.5.5 to resolve compatibility or security issues.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-javascript-frontmatter/CHANGELOG.md#_snippet_17\n\n\n\n----------------------------------------\n\nTITLE: CSRF Exploit Example\nDESCRIPTION: This example illustrates a CSRF attack scenario where a malicious website automatically submits a form to a vulnerable website. The `onload` event triggers the form submission when the page loads, injecting a malicious comment into the target website without the user's knowledge.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/conceptual/security-in-gatsby.md#_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n// highlight-next-line\n<body onload=\"document.csrf.submit()\">\n  <!-- ... -->\n  <form action=\"http://mywebsite.com/blog/addcomment\" method=\"POST\" name=\"csrf\">\n    // highlight-next-line\n    <input\n      type=\"hidden\"\n      name=\"comment\"\n      value=\"Hey visit http://maliciouswebsite.com, it's pretty nice\"\n    />\n    <input type=\"submit\" />\n  </form>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Quote ignore pattern\nDESCRIPTION: This fixes an issue where the ignore pattern was not wrapped in quotes.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-drupal/CHANGELOG.md#_snippet_5\n\n\n\n----------------------------------------\n\nTITLE: Install Gatsby WordPress plugin using npm\nDESCRIPTION: This command installs the `gatsby-source-wordpress` plugin, which allows Gatsby to source data from a WordPress CMS for a headless setup. It is a necessary step to connect a Gatsby frontend to a WordPress backend.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/glossary/headless-wordpress.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install gatsby-source-wordpress\n```\n\n----------------------------------------\n\nTITLE: Committing and Pushing Changes to GitHub\nDESCRIPTION: This snippet shows the commands required to commit local changes and push them to a remote GitHub repository. This allows for continuous integration and deployment with Gatsby Cloud.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-7/index.mdx#_snippet_16\n\nLANGUAGE: Shell\nCODE:\n```\ngit add .\ngit commit -m \"Finished Gatsby Tutorial Part 7\"\ngit push\n```\n\n----------------------------------------\n\nTITLE: Combined install of build-essential, git, libpng-dev on Debian\nDESCRIPTION: This command performs a combined update, upgrade, and install of build-essential, git, and libpng-dev packages on Debian, automating the process and confirming all installs with `-y` flag.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/local-development/gatsby-on-linux.md#_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt update && sudo apt -y upgrade && sudo apt install build-essential && sudo apt install git && sudo apt install libpng-dev\n```\n\n----------------------------------------\n\nTITLE: Updating Babel Monorepo\nDESCRIPTION: This snippet updates the babel monorepo. Babel is a JavaScript compiler that allows you to use next generation JavaScript today.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-preload-fonts/CHANGELOG.md#_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Updating Sharp dependency to 0.31.3 JavaScript\nDESCRIPTION: This snippet updates the dependency sharp to version 0.31.3. Sharp is an image processing library and updating to this version ensures access to latest features and fixes.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-images-contentful/CHANGELOG.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nupdate dependency sharp to ^0.31.3 [#37375](https://github.com/gatsbyjs/gatsby/issues/37375) ([9abf681](https://github.com/gatsbyjs/gatsby/commit/9abf681d6d3ba7cfa9bc357764f09c944afc21ef))\n```\n\n----------------------------------------\n\nTITLE: Updating minor dependencies in Gatsby\nDESCRIPTION: This commit updates minor dependencies in packages except react, babel and eslint. It aims to keep the dependencies up to date with the latest minor releases, addressing potential bug fixes and improvements.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-coffeescript/CHANGELOG.md#_snippet_19\n\nLANGUAGE: Markdown\nCODE:\n```\nupdate minor updates in packages except react, babel and eslint ([#17254](https://github.com/gatsbyjs/gatsby/issues/17254)) ([252d867](https://github.com/gatsbyjs/gatsby/commit/252d867))\n```\n\n----------------------------------------\n\nTITLE: Bumping Node minimum version to 10.13.0 in Gatsby\nDESCRIPTION: This commit bumps the minimum required Node.js version to 10.13.0 for the Gatsby project. This ensures compatibility with newer JavaScript features and improvements in the Node.js runtime environment.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-react-helmet/CHANGELOG.md#_snippet_21\n\nLANGUAGE: Shell\nCODE:\n```\n**gatsby:** bump node min version to 10.13.0 ([#22400](https://github.com/gatsbyjs/gatsby/issues/22400)) ([83d681a](https://github.com/gatsbyjs/gatsby/commit/83d681a))\n```\n\n----------------------------------------\n\nTITLE: Fixing Babel Monorepo Bug in gatsby-remark-smartypants\nDESCRIPTION: This snippet represents a bug fix for the babel monorepo within the gatsby-remark-smartypants package. It aims to address issues related to babel dependencies and their impact on the plugin's functionality.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-smartypants/CHANGELOG.md#_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\nupdate babel monorepo [#37568](https://github.com/gatsbyjs/gatsby/issues/37568) ([13a0a9e](https://github.com/gatsbyjs/gatsby/commit/13a0a9e83dcb015b65dff6b73cdd5dea09c2988f))\n```\n\n----------------------------------------\n\nTITLE: Importing HMR Components in Gatsby\nDESCRIPTION: This code snippet imports the `HMRImportEditComponent` and `HMRPropEditComponent` from their respective files. These components are likely designed for hot module replacement, allowing for live updates during development.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/e2e-tests/mdx/src/pages/hmr.mdx#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport HMRImportEditComponent from \"../components/hmr-component-edit\"\nimport HMRPropEditComponent from \"../components/hmr-prop-edit\"\n```\n\n----------------------------------------\n\nTITLE: Cloning and Installing Dependencies\nDESCRIPTION: These commands clone a Git repository, navigate into the project directory, and install the project's npm dependencies. This is required to run the Gatsby project locally.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/tutorial/e-commerce-with-datocms-and-snipcart/index.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ngit clone your-repo-link\ncd your-repo-name\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Importing Katex CSS in JavaScript\nDESCRIPTION: This snippet shows how to import the necessary KaTeX CSS file into a JavaScript template to ensure correct rendering of math formulas.  This is a crucial step to include KaTeX styles.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/using-remark/src/pages/2017-08-07---katex/index.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(`katex/dist/katex.min.css`)\n```\n\n----------------------------------------\n\nTITLE: Updating Parcel version in gatsby-parcel-config\nDESCRIPTION: This commit updates the Parcel dependency to version 2.6.2 within the gatsby-parcel-config package. This likely includes bug fixes or performance improvements in the Parcel bundler.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-parcel-config/CHANGELOG.md#_snippet_9\n\nLANGUAGE: Shell\nCODE:\n```\nupdate parcel to v2.6.2 [#36036](https://github.com/gatsbyjs/gatsby/issues/36036) ([99944e8](https://github.com/gatsbyjs/gatsby/commit/99944e8daee00daede7c77ec36f9d2a282b612a9))\n```\n\n----------------------------------------\n\nTITLE: Preventing crash in Gatsby Link unit tests\nDESCRIPTION: This commit addresses a crash issue in Gatsby Link's unit tests that occurred when global variables were undefined. The fix ensures that the tests run without crashing in such environments. Issue #25608 tracks this fix.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-link/CHANGELOG.md#_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Update Bluebird dependency in gatsby-transformer-toml\nDESCRIPTION: This commit updates the bluebird dependency to version ^3.5.5 in the gatsby-transformer-toml package. This is to address potential issues or security concerns associated with older versions of bluebird.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-toml/CHANGELOG.md#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\n### Bug Fixes\n\n- update dependency bluebird to ^3.5.5 ([#16825](https://github.com/gatsbyjs/gatsby/issues/16825)) ([ec0be83](https://github.com/gatsbyjs/gatsby/commit/ec0be83))\n```\n\n----------------------------------------\n\nTITLE: Regenerating Changelogs\nDESCRIPTION: This snippet refers to regenerating changelogs, likely to ensure accuracy and consistency after modifications or updates to the codebase.  It helps keep the change history current and informative.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-asciidoc/CHANGELOG.md#_snippet_19\n\nLANGUAGE: Text\nCODE:\n```\nre-generate changelogs [#32886](https://github.com/gatsbyjs/gatsby/issues/32886) ([417df15](https://github.com/gatsbyjs/gatsby/commit/417df15230be368a9db91f2ad1a9bc0442733177))\n```\n\n----------------------------------------\n\nTITLE: Fixing Babel Monorepo Bug in gatsby-plugin-layout\nDESCRIPTION: This commit updates the babel monorepo dependency to resolve a bug within the gatsby-plugin-layout package. It directly addresses issue #37568 on the Gatsby repository.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-layout/CHANGELOG.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nupdate babel monorepo [#37568](https://github.com/gatsbyjs/gatsby/issues/37568) ([13a0a9e](https://github.com/gatsbyjs/gatsby/commit/13a0a9e83dcb015b65dff6b73cdd5dea09c2988f))\n```\n\n----------------------------------------\n\nTITLE: Installing js-yaml and lodash via npm\nDESCRIPTION: This command installs the `js-yaml` and `lodash` packages using npm.  `js-yaml` is used to parse YAML content, and `lodash` provides utility functions for data manipulation. These dependencies are necessary for the YAML transformer plugin to function correctly.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/plugins-and-themes/creating-a-transformer-plugin.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm install js-yaml lodash\n```\n\n----------------------------------------\n\nTITLE: Correcting Links in Package Changelogs\nDESCRIPTION: This snippet fixes incorrect links within the package changelogs. This addresses issue #15630. It ensures the links in the changelog are correct and point to the relevant commit or issue.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-cxs/CHANGELOG.md#_snippet_20\n\nLANGUAGE: Text\nCODE:\n```\ncorrect links in package changelogs ([#15630](https://github.com/gatsbyjs/gatsby/issues/15630)) ([d07b9dd](https://github.com/gatsbyjs/gatsby/commit/d07b9dd))\n```\n\n----------------------------------------\n\nTITLE: Explicit query names no longer required (Diff)\nDESCRIPTION: This code snippet demonstrates that explicit query names are no longer required in Gatsby v2.  You can either omit the query name entirely or omit the `query` keyword if no query variables are used.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v1-to-v2.md#_snippet_35\n\nLANGUAGE: Diff\nCODE:\n```\nexport const query = graphql`\n-  query ThisIsExplicitQueryName($slug: String!) {\n+  query($slug: String!) {\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      html\n      frontmatter {\n        title\n      }\n    }\n  }\n`\n```\n\nLANGUAGE: Diff\nCODE:\n```\nexport const query = graphql`\n-  query ThisIsAnotherExplicitQueryName {\n+  {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: Invalid Endpoint Configuration in gatsby-config.ts (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to configure an invalid value for the `endpoint` option in the site's `gatsby-config.ts` file.  This will cause the Gatsby development server to crash and show an error, demonstrating the validation schema working correctly.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/creating-a-source-plugin/part-4/index.mdx#_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  resolve: `plugin`,\n  options: {\n    // highlight-next-line\n    endpoint: 12345,\n  } satisfies IPluginOptions,\n},\n```\n\n----------------------------------------\n\nTITLE: Updating Babel Monorepo in gatsby-plugin-feed\nDESCRIPTION: This code snippet represents a bug fix involving updating the Babel monorepo. This ensures compatibility and access to the latest features and fixes in the Babel toolchain used by the `gatsby-plugin-feed` plugin. This is essential for maintaining correct JavaScript transpilation and code execution within the Gatsby environment.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-feed/CHANGELOG.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nupdate babel monorepo [#37568](https://github.com/gatsbyjs/gatsby/issues/37568) ([13a0a9e](https://github.com/gatsbyjs/gatsby/commit/13a0a9e83dcb015b65dff6b73cdd5dea09c2988f))\n```\n\n----------------------------------------\n\nTITLE: Fixing Typo\nDESCRIPTION: This snippet fixes a typo within the codebase or documentation of the gatsby-plugin-google-gtag package. This is a chore to improve the overall quality and readability of the project.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-google-gtag/CHANGELOG.md#_snippet_18\n\n\n\n----------------------------------------\n\nTITLE: Embedding HTML in MDX\nDESCRIPTION: This snippet shows how to embed HTML directly into an MDX document. The div element includes a data attribute and a strong element, demonstrating the ability to combine HTML with MDX content.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/e2e-tests/mdx/src/pages/file+with+plus.mdx#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div data-something=\"important-information\">\n  <strong>This is a test</strong>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Basic Auth Implementation for GraphQL Endpoint\nDESCRIPTION: This snippet describes the implementation of Basic Auth for the GraphQL endpoint.  The option is intended for use with server-level authentication, not WP level authentication to lock down the `/graphql` WPGraphQL endpoint so it can only be requested with credentials.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-wordpress/ARCHITECTURE.md#_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Bug Fix: Update Gatsby Plugin Preload Fonts\nDESCRIPTION: This snippet represents bug fixes related to gatsby-plugin-preload-fonts, including minor and patch updates.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-preload-fonts/CHANGELOG.md#_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Updating Babel Monorepo in Gatsby\nDESCRIPTION: This commit updates the Babel monorepo in the gatsby-plugin-nprogress package. Updating Babel ensures compatibility with the latest JavaScript features and improvements.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-nprogress/CHANGELOG.md#_snippet_3\n\nLANGUAGE: Markdown\nCODE:\n```\nupdate babel monorepo [#32996](https://github.com/gatsbyjs/gatsby/issues/32996) ([048c7a7](https://github.com/gatsbyjs/gatsby/commit/048c7a727bbc6a9ad8e27afba72ee20e946c4aaa))\n```\n\n----------------------------------------\n\nTITLE: Updating minor updates - JavaScript\nDESCRIPTION: This snippet describes an update that applies minor updates to various packages, excluding react, babel, and eslint. This is part of the ongoing maintenance and improvement of the gatsby-source-faker package and related dependencies.  The associated issue number is 17254, and the commit hash is 252d867.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-faker/CHANGELOG.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nupdate minor updates in packages except react, babel and eslint ([#17254](https://github.com/gatsbyjs/gatsby/issues/17254)) ([252d867](https://github.com/gatsbyjs/gatsby/commit/252d867))\n```\n\n----------------------------------------\n\nTITLE: Re-generating changelogs in gatsby-remark-images-contentful\nDESCRIPTION: This code snippet signifies a chore involving the re-generation of changelogs.  This action ensures the accuracy and completeness of the changelog files, providing developers with up-to-date information about package changes.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-images-contentful/CHANGELOG.md#_snippet_23\n\nLANGUAGE: None\nCODE:\n```\nre-generate changelogs [#32886](https://github.com/gatsbyjs/gatsby/issues/32886) ([417df15](https://github.com/gatsbyjs/gatsby/commit/417df15230be368a9db91f2ad1a9bc0442733177))\n```\n\n----------------------------------------\n\nTITLE: Fixing Packages Updates in Gatsby\nDESCRIPTION: This code snippet updates minor updates within the Gatsby packages. Updating packages provides bug fixes, performance improvements and ensures that the gatsby project is up to date.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-screenshot/CHANGELOG.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n9935376\n```\n\n----------------------------------------\n\nTITLE: Embedding HTML in MDX\nDESCRIPTION: This snippet demonstrates how to embed raw HTML within an MDX file.  It includes a `div` element with a `data-something` attribute and a `strong` element. This allows for direct incorporation of HTML elements for styling or layout purposes.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/e2e-tests/mdx/src/pages/file with space.mdx#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div data-something=\"important-information\">\n  <strong>This is a test</strong>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Bug Fix: Babel Monorepo Update in babel-preset-gatsby\nDESCRIPTION: This snippet describes the fix for updating the babel monorepo in the babel-preset-gatsby package. This update addresses an issue reported in issue #37568 on the gatsbyjs/gatsby repository.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/babel-preset-gatsby/CHANGELOG.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nupdate babel monorepo [#37568](https://github.com/gatsbyjs/gatsby/issues/37568) ([13a0a9e](https://github.com/gatsbyjs/gatsby/commit/13a0a9e83dcb015b65dff6b73cdd5dea09c2988f))\n```\n\n----------------------------------------\n\nTITLE: Adding show invisibles plugin in gatsby-remark-prismjs\nDESCRIPTION: This commit introduces the 'show invisibles' plugin to gatsby-remark-prismjs. This plugin allows users to visualize whitespace characters like tabs and spaces within code blocks, improving code readability and debugging capabilities.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-prismjs/CHANGELOG.md#_snippet_15\n\n\n\n----------------------------------------\n\nTITLE: Updating Babel Monorepo in gatsby-plugin-react-helmet\nDESCRIPTION: This code snippet indicates an update to the Babel monorepo within the gatsby-plugin-react-helmet package. It addresses issue #37386 by applying a specific commit.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-react-helmet/CHANGELOG.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nupdate babel monorepo [#37386](https://github.com/gatsbyjs/gatsby/issues/37386) ([b941876](https://github.com/gatsbyjs/gatsby/commit/b94187633d94d0f0071b38ffe93380dd802ec70f))\n```\n\n----------------------------------------\n\nTITLE: Navigate to Site Directory\nDESCRIPTION: This command changes the current directory to the newly created Gatsby site directory.  This is necessary to run further commands specific to that project.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/tutorial/getting-started/part-1/index.mdx#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncd my-first-gatsby-site\n```\n\n----------------------------------------\n\nTITLE: Fixing dependency update in gatsby-source-wikipedia (JavaScript)\nDESCRIPTION: This code snippet addresses a bug by updating minor and patch dependencies for `gatsby-source-wikipedia`. It fixes issues related to outdated dependencies.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-wikipedia/CHANGELOG.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n**deps:** update minor and patch for gatsby-source-wikipedia ([#27144](https://github.com/gatsbyjs/gatsby/issues/27144)) ([01846ed](https://github.com/gatsbyjs/gatsby/commit/01846ed2ee30d7d56cf41689872eae96b5235bde))\n```\n\n----------------------------------------\n\nTITLE: Updating Cross-Env Dependency in Gatsby Plugin\nDESCRIPTION: This snippet updates the cross-env dependency to version ^7.0.3 for the gatsby-plugin-coffeescript package, addressing issue #28505.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-coffeescript/CHANGELOG.md#_snippet_13\n\nLANGUAGE: Other\nCODE:\n```\nupdate dependency cross-env to ^7.0.3 [#28505](https://github.com/gatsbyjs/gatsby/issues/28505) ([a819b9b](https://github.com/gatsbyjs/gatsby/commit/a819b9bfb663139f7b06c3ed7d6d6069a2382b2c))\n```\n\n----------------------------------------\n\nTITLE: Querying Contentstack Data with GraphQL\nDESCRIPTION: This GraphQL query fetches the title and body fields from the 'Home' content type in Contentstack. This query can be run in the GraphiQL IDE.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/sourcing-from-contentstack.md#_snippet_2\n\nLANGUAGE: GraphQL\nCODE:\n```\n{\n  contentstackHome {\n    title\n    body\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Lodash Dependency - JavaScript\nDESCRIPTION: This code snippet shows the commit that updates the lodash monorepo to version ^4.17.21. Lodash is a JavaScript library providing utility functions. This update likely fixes bugs or introduces new features.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-responsive-iframe/CHANGELOG.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nupdate lodash monorepo to ^4.17.21 [#29382](https://github.com/gatsbyjs/gatsby/issues/29382) ([9fd287b](https://github.com/gatsbyjs/gatsby/commit/9fd287ba89eacd55652d468b18f6e1526230e7c6))\n```\n\n----------------------------------------\n\nTITLE: Updating PropTypes Dependency\nDESCRIPTION: Updates the `prop-types` dependency to version ^15.8.1 for the `gatsby-react-router-scroll` package. This ensures that the package uses a compatible and up-to-date version of `prop-types` for validating component properties.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-react-router-scroll/CHANGELOG.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nupdate dependency prop-types to ^15.8.1 for gatsby-react-router-scroll [#35293](https://github.com/gatsbyjs/gatsby/issues/35293) ([564a1d9](https://github.com/gatsbyjs/gatsby/commit/564a1d961e93f4bc85791e4870727afa7867df07))\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query Filtering by Category in Gatsby\nDESCRIPTION: This code snippet demonstrates a GraphQL query in Gatsby's `createPages` function. The query retrieves WordPress posts, filtering them based on a specific category. This can lead to issues because category updates aren't previewable, meaning previewing a post with a newly assigned category won't reflect the changes.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-wordpress/docs/features/preview.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nexports.createPages = async ({ graphql }) => {\n  const graphqlResult = await graphql(/* GraphQL */ `\n    query {\n      allWpPost(\n        filter: {\n          categories: { nodes: { elemMatch: { name: { eq: \"Blog\" } } } }\n        }\n      ) {\n        edges {\n          node {\n            id\n            uri\n          }\n        }\n      }\n    }\n  `)\n}\n```\n\n----------------------------------------\n\nTITLE: Installing the Parcel namer plugin using npm\nDESCRIPTION: This command installs the `@gatsbyjs/parcel-namer-relative-to-cwd` package as a development dependency. It's required to use the plugin within a Parcel configuration.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-parcel-namer-relative-to-cwd/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev @gatsbyjs/parcel-namer-relative-to-cwd\n```\n\n----------------------------------------\n\nTITLE: Incorrect Prop Usage: Passing a Function (JavaScript/JSX)\nDESCRIPTION: Illustrates an example of incorrect prop usage, where a function is passed as a prop to the `<Slice>` placeholder.  Props passed to the `<Slice>` placeholder must be serializable.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/built-in-components/gatsby-slice.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// ‚ö†Ô∏è Doesn't work\n\nexport function MyImage() {\n  const fetchImage = () => {\n    return \"/static/images/img.jpg\"\n  }\n\n  // You can't use function props, as they are not serializable\n  // highlight-next-line\n  return <Slice alias=\"my-image\" fetchImage={fetchImage} />\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL query for slug field\nDESCRIPTION: GraphQL query to retrieve the `slug` field from the MDX node.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-mdx/README.md#_snippet_13\n\nLANGUAGE: GraphQL\nCODE:\n```\nquery {\n  mdx {\n    fields {\n      slug\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Puppeteer Locally with Node.js\nDESCRIPTION: This command executes a Node.js script to test the Puppeteer functionality of the screenshot Lambda function locally. It sets environment variables for using the local file system and the target site URL, saving screenshots to the `./screenshots` directory.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-screenshot/lambda/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nTEST_WITH_LOCAL_FS=true SITE_URL=https://en.wikipedia.org/wiki/Wool node __manual-tests__/local-test.js\n```\n\n----------------------------------------\n\nTITLE: Running Gatsby Development Server with Twilio Example\nDESCRIPTION: This shell script navigates to the functions-twilio-text example directory, installs dependencies using npm, and starts the Gatsby development server. This allows developers to test the Twilio integration locally before deploying.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/functions-twilio-text/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncd examples/functions-twilio-text\nnpm install\nnpm run develop\n```\n\n----------------------------------------\n\nTITLE: Bumping node version in Gatsby\nDESCRIPTION: This commit bumps the minimum required Node.js version for the Gatsby project to 10.13.0. This ensures that developers are using a supported and secure version of Node.js.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-preact/CHANGELOG.md#_snippet_3\n\nLANGUAGE: None\nCODE:\n```\n**gatsby:** bump node min version to 10.13.0 ([#22400](https://github.com/gatsbyjs/gatsby/issues/22400)) ([83d681a](https://github.com/gatsbyjs/gatsby/commit/83d681a))\n```\n\n----------------------------------------\n\nTITLE: Fix Babel Monorepo Update in gatsby-plugin-stylus\nDESCRIPTION: This commit updates the Babel monorepo to address an identified issue within the gatsby-plugin-stylus package. The update ensures compatibility and resolves potential bugs related to Babel dependencies within the plugin. It targets issue #37568 on the Gatsby repository.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-stylus/CHANGELOG.md#_snippet_0\n\nLANGUAGE: none\nCODE:\n```\nupdate babel monorepo [#37568](https://github.com/gatsbyjs/gatsby/issues/37568) ([13a0a9e](https://github.com/gatsbyjs/gatsby/commit/13a0a9e83dcb015b65dff6b73cdd5dea09c2988f))\n```\n\n----------------------------------------\n\nTITLE: Markdown Tutorial Template\nDESCRIPTION: This is a markdown template for creating a new Gatsby tutorial.  It includes sections for title, introduction, prerequisites, step-by-step instructions, summary, and additional resources.  The template encourages short paragraphs and code examples to enhance readability.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/contributing/docs-contributions/how-to-write-a-tutorial.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: How to Create a Decoupled Drupal Site with Gatsby\n---\n\n## What‚Äôs contained in this tutorial?\n\nBy the end of this tutorial, you‚Äôll have done the following:\n\n- learned how to **\\_\\_**\n- built a ***\\_\\_*\\***\n- used a **\\_\\_\\_** with Gatsby\n\n## Prerequisites (if any)\n\nIf applicable, list any prerequisites to reading and understanding your tutorial. Does the reader need to read another document first, install a particular plugin, or already know a certain skill? List those things here.\n\n## Step 1\n\nKeep paragraphs short (around 1-4 sentences). People are more likely to read\nseveral short paragraphs instead of a huge block of text.\n\nReaders will likely use doc articles as a quick reference to look up syntax.\nArticles should have a basic, real-world example that shows common use cases of its syntax.\n\n    code example\n\nSee this [Markdown Cheatsheet](https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet#code) on how to format code examples\n\n## Step 2\n\nRepeat the pattern found in step 1\n\n## Step 3\n\nRepeat the pattern found in other steps the other steps\n\n## Step _n_\n\nInclude as many steps as you need. If there are more than 5-10 steps, it might be worth considering a multi-page tutorial to make it easier for the people to finish chunks of the tutorial.\n\n## What did you just do?\n\nIn this tutorial, you did the following:\n\n- learned how to **\\_\\_**\n- built a ***\\_\\_*\\***\n- used a **\\_\\_\\_** with Gatsby\n\n## What‚Äôs next\n\nIf there are more parts to the tutorial, link to the next step here.\n\n## Other resources\n\nIf there are other resources you think readers would benefit from or next steps they might want to take after reading your article, add\nthem at the bottom in an \"Other Resources\" section. You can also mention here any resources that helped you write the article (blog posts, outside tutorials, etc.).\n\n- Link to a blog post\n- Link to a YouTube tutorial\n- Link to an example site\n- Link to source code for a live site\n- Links to relevant plugins\n- Links to starters\n\n```\n\n----------------------------------------\n\nTITLE: Passing Additional Props to <Slice> (JSX)\nDESCRIPTION: Illustrates how to pass additional props to the `<Slice>` placeholder component. These props will be passed down to the underlying Slice component.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/built-in-components/gatsby-slice.md#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Slice alias=\"unique-name\" additionalProp=\"hello world\" />\n```\n\n----------------------------------------\n\nTITLE: Correcting Package Changelog Links in gatsby-source-lever\nDESCRIPTION: This code snippet reflects a commit that fixes incorrect links within the package changelogs for gatsby-source-lever. The corrected links ensure accurate navigation and reference to related issues and commits.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-lever/CHANGELOG.md#_snippet_18\n\nLANGUAGE: Text\nCODE:\n```\ncorrect links in package changelogs ([#15630](https://github.com/gatsbyjs/gatsby/issues/15630)) ([d07b9dd](https://github.com/gatsbyjs/gatsby/commit/d07b9dd))\n```\n\n----------------------------------------\n\nTITLE: Fixing jscodeshift spawning process in Gatsby codemods\nDESCRIPTION: This commit resolves an issue related to spawning the jscodeshift process within the Gatsby codemods package. It addresses a bug that prevented the jscodeshift process from being properly initiated, ensuring that codemod transformations can be executed correctly.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-codemods/CHANGELOG.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfix spawning jscodeshift process fix [#36780](https://github.com/gatsbyjs/gatsby/issues/36780) ([04ac1d6](https://github.com/gatsbyjs/gatsby/commit/04ac1d6cb45df198ab01d119ce051d5f59b9ccb9))\n```\n\n----------------------------------------\n\nTITLE: Updating Babel Monorepo in gatsby-plugin-google-analytics\nDESCRIPTION: Updates the Babel monorepo in the gatsby-plugin-google-analytics package. This chore ensures the plugin uses the latest Babel transformations and features for optimal performance and compatibility.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-google-analytics/CHANGELOG.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n048c7a7\n```\n\n----------------------------------------\n\nTITLE: Shell command - resolve reach-router error\nDESCRIPTION: This command cleans Gatsby's cache to resolve reach-router errors during the upgrade process.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/migrating-from-v2-to-v3.md#_snippet_44\n\nLANGUAGE: Shell\nCODE:\n```\ngatsby clean\n```\n\n----------------------------------------\n\nTITLE: Fixing Babel Monorepo Bug in Javascript\nDESCRIPTION: This snippet fixes a bug related to the Babel monorepo in the gatsby-plugin-schema-snapshot. It addresses issue #37568 on the Gatsby repository.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-schema-snapshot/CHANGELOG.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nupdate babel monorepo [#37568](https://github.com/gatsbyjs/gatsby/issues/37568) ([13a0a9e](https://github.com/gatsbyjs/gatsby/commit/13a0a9e83dcb015b65dff6b73cdd5dea09c2988f))\n```\n\n----------------------------------------\n\nTITLE: Chore: Update semver in gatsby-plugin-image\nDESCRIPTION: This snippet represents a chore update for the semver dependency. It involves updating semver in the gatsby-plugin-image package.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-image/CHANGELOG.md#_snippet_20\n\nLANGUAGE: JavaScript\nCODE:\n```\nupdate semver [#37186](https://github.com/gatsbyjs/gatsby/issues/37186) ([34adbf1](https://github.com/gatsbyjs/gatsby/commit/34adbf1f6147f9c440dfc0900b8523010ca61d51))\n```\n\n----------------------------------------\n\nTITLE: Updating minor updates in packages\nDESCRIPTION: This commit updates minor versions of various packages, excluding react, babel, and eslint. This aims to incorporate the latest bug fixes and improvements from the updated packages while maintaining compatibility.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-graphviz/CHANGELOG.md#_snippet_17\n\nLANGUAGE: Other\nCODE:\n```\n- update minor updates in packages except react, babel and eslint ([#17254](https://github.com/gatsbyjs/gatsby/issues/17254)) ([252d867](https://github.com/gatsbyjs/gatsby/commit/252d867))\n```\n\n----------------------------------------\n\nTITLE: Updating cross-env dependency in gatsby-source-hacker-news\nDESCRIPTION: This commit updates the cross-env dependency to version ^7.0.3 within the gatsby-source-hacker-news package. The update is part of the chore tasks for the 2.8.0 release.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-hacker-news/CHANGELOG.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nupdate dependency cross-env to ^7.0.3 [#28505](https://github.com/gatsbyjs/gatsby/issues/28505) ([a819b9b](https://github.com/gatsbyjs/gatsby/commit/a819b9bfb663139f7b06c3ed7d6d6069a2382b2c))\n```\n\n----------------------------------------\n\nTITLE: Updating babel monorepo\nDESCRIPTION: This snippet describes updating the babel monorepo. This update is intended to update babel dependencies.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-asciidoc/CHANGELOG.md#_snippet_14\n\nLANGUAGE: Text\nCODE:\n```\nupdate babel monorepo [#31143](https://github.com/gatsbyjs/gatsby/issues/31143) ([701ab2f](https://github.com/gatsbyjs/gatsby/commit/701ab2f6690c3f1bbaf60cf572513ea566cc9ec9))\n```\n\n----------------------------------------\n\nTITLE: Fixing ignore pattern in gatsby-remark-katex\nDESCRIPTION: This commit fixes an issue by wrapping the ignore pattern in quotes. This change ensures that the ignore pattern is correctly interpreted, preventing potential issues related to file or directory exclusion.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-katex/CHANGELOG.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nwrap ignore pattern in quotes ([#23176](https://github.com/gatsbyjs/gatsby/issues/23176)) ([7563db6](https://github.com/gatsbyjs/gatsby/commit/7563db6))\n```\n\n----------------------------------------\n\nTITLE: Markdown Code String for Localhost URL - Good Example\nDESCRIPTION: This example demonstrates the correct way to represent localhost URLs in Gatsby documentation. Listing these URL references as code blocks prevents them from being treated as invalid hyperlinks.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/contributing/gatsby-style-guide.md#_snippet_4\n\nLANGUAGE: Markdown\nCODE:\n```\nopen your site with `http://localhost:8000/`\n```\n\n----------------------------------------\n\nTITLE: Regenerating Changelogs in Gatsby\nDESCRIPTION: This code snippet indicates the changelogs are regenerated in the Gatsby project. This is a maintenance task ensuring that the changelogs are up to date after modifications or merges to the project.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-custom-blocks/CHANGELOG.md#_snippet_3\n\nLANGUAGE: Text\nCODE:\n```\nre-generate changelogs [#32886](https://github.com/gatsbyjs/gatsby/issues/32886) ([417df15](https://github.com/gatsbyjs/gatsby/commit/417df15230be368a9db91f2ad1a9bc0442733177))\n```\n\n----------------------------------------\n\nTITLE: Markdown Hyperlink - Bad Example\nDESCRIPTION: This example demonstrates how *not* to create hyperlinks in Gatsby documentation.  It avoids using the title attribute on hyperlinks for accessibility reasons and uses vague text for the link.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/contributing/gatsby-style-guide.md#_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n[here](https://www.gatsbyjs.com/cloud/ \"Gatsby Cloud\")\n```\n\n----------------------------------------\n\nTITLE: Fixing documentation link in Gatsby plugin library\nDESCRIPTION: This commit fixes an issue where the README.md file was not displaying correctly on the Gatsby plugin library. It ensures that the documentation is properly linked and visible to users.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-coffeescript/CHANGELOG.md#_snippet_14\n\nLANGUAGE: Markdown\nCODE:\n```\nremove README.md not displaying on Gatsby plugin library ([#27040](https://github.com/gatsbyjs/gatsby/issues/27040)) ([6987edb](https://github.com/gatsbyjs/gatsby/commit/6987edb84d9cfa79c7f60a4656e1048d13d5f6d8))\n```\n\n----------------------------------------\n\nTITLE: Monorepo setup: Navigate to Monorepo\nDESCRIPTION: This command changes the current directory to the specified Gatsby monorepo path, allowing for local testing and development of packages within the monorepo.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/create-gatsby/README.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ncd <path-to-gatsby-monorepo>\n```\n\n----------------------------------------\n\nTITLE: Starting Gatsby Development Server (Shell)\nDESCRIPTION: This command navigates to the 'my-default-starter' directory and starts the Gatsby development server. This allows developers to view and interact with their Gatsby site in a local development environment. The server typically runs on port 8000.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/starters/default/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ncd my-default-starter/\ngatsby develop\n```\n\n----------------------------------------\n\nTITLE: Documenting Excludes Glob Matching in gatsby-plugin-sitemap\nDESCRIPTION: This commit provides documentation for glob matching within the `excludes` configuration option for the `gatsby-plugin-sitemap`. This improves the usability by explaining how to exclude specific pages or files from the sitemap generation.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-sitemap/CHANGELOG.md#_snippet_7\n\nLANGUAGE: TEXT\nCODE:\n```\nDocument `excludes` glob matching [#36690](https://github.com/gatsbyjs/gatsby/issues/36690) ([6396664](https://github.com/gatsbyjs/gatsby/commit/6396664ab72c5a4305a7d39269d003772109233d))\n```\n\n----------------------------------------\n\nTITLE: Adding Drupal JSON API 2.x File URI Support\nDESCRIPTION: This feature introduces support for the Drupal JSON API 2.x File URI format in the gatsby-source-drupal plugin.  This ensures compatibility with Drupal instances using the newer File URI format for their JSON API.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-drupal/CHANGELOG.md#_snippet_30\n\n\n\n----------------------------------------\n\nTITLE: Fixing Readme Code Language\nDESCRIPTION: This snippet corrects the code language in the README file for gatsby-remark-embed-snippet. This is important for syntax highlighting and clarity in the documentation.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-embed-snippet/CHANGELOG.md#_snippet_7\n\n\n\n----------------------------------------\n\nTITLE: Applying patches for v5\nDESCRIPTION: This code snippet indicates that patches are being applied for version 5 of the gatsby-remark-embed-snippet package. Patches are small fixes or modifications applied to the code without changing the underlying version number.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-embed-snippet/CHANGELOG.md#_snippet_5\n\nLANGUAGE: none\nCODE:\n```\napply patches for v5 [#36796](https://github.com/gatsbyjs/gatsby/issues/36796) ([25f79b6](https://github.com/gatsbyjs/gatsby/commit/25f79b6c3719fdf09584ade620a05c66ba2a697c))\n```\n\n----------------------------------------\n\nTITLE: Updating Bluebird Dependency in gatsby-transformer-json\nDESCRIPTION: This snippet updates the bluebird dependency to version ^3.5.5.  Bluebird is a promise library, and updating it ensures the gatsby-transformer-json package uses the latest features and bug fixes. This update resolves issue #16825.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-json/CHANGELOG.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Checking if entryItemFieldValue[0] exists\nDESCRIPTION: This code snippet implements a check to verify the existence of entryItemFieldValue[0] before accessing it. This prevents potential errors when dealing with contentful entries where the array might be empty.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-contentful/CHANGELOG.md#_snippet_27\n\nLANGUAGE: diff\nCODE:\n```\n([#11087](https://github.com/gatsbyjs/gatsby/issues/11087)) ([a11f79a](https://github.com/gatsbyjs/gatsby/commit/a11f79a))\n```\n\n----------------------------------------\n\nTITLE: Pin Broken `unist-util-find` Dependency in gatsby-remark-graphviz\nDESCRIPTION: This commit pins a specific version of the `unist-util-find` dependency. This is done to prevent issues arising from a broken or incompatible version of `unist-util-find`, ensuring that `gatsby-remark-graphviz` functions as expected.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-graphviz/CHANGELOG.md#_snippet_6\n\n\n\n----------------------------------------\n\nTITLE: Adding Gatsby-dev CLI Globally\nDESCRIPTION: This command adds Gatsby Dev CLI globally in the user's machine.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-design-tokens/README.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nyarn global add gatsby-dev-cli\n```\n\n----------------------------------------\n\nTITLE: JSON with mixed value types\nDESCRIPTION: Example JSON with inconsistent data types within arrays, which can cause GraphQL schema conflicts.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-json/README.md#_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"stuff\": [25, \"bob\"],\n  \"orEven\": [\n    [25, \"bob\"],\n    [23, \"joe\"]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: RCE Prevention Test: Write Malicious File JavaScript\nDESCRIPTION: This snippet attempts to write a file containing JavaScript code that should not be executed. It utilizes the `fs` module to write to a file named `file-to-attempt-rce-on.txt` within the `cypress/fixtures` directory. The content written is a stack trace from an Error object.  This test is designed to ensure that Gatsby's security measures prevent arbitrary code execution when processing frontmatter in JavaScript files.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/e2e-tests/mdx/src/pages/frontmatter-js.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n(() => {\nrequire(`fs`).writeFileSync(`${process.cwd()}/cypress/fixtures/file-to-attempt-rce-on.txt`, (new Error('Helpful stack trace if this does execute. It should not execute.')).stack)\nconsole.trace()\nreturn {\ntitle: `I should not be parsed`,\notherKey: `Some other key`\n}\n})()\n```\n\n----------------------------------------\n\nTITLE: Updating babel monorepo in gatsby-remark-images-contentful\nDESCRIPTION: This code snippet shows a chore of updating the babel monorepo. This update likely ensures compatibility with the latest JavaScript features and improvements in the build process.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-images-contentful/CHANGELOG.md#_snippet_20\n\nLANGUAGE: None\nCODE:\n```\nupdate babel monorepo [#32996](https://github.com/gatsbyjs/gatsby/issues/32996) ([048c7a7](https://github.com/gatsbyjs/gatsby/commit/048c7a727bbc6a9ad8e27afba72ee20e946c4aaa))\n```\n\n----------------------------------------\n\nTITLE: Fixing ignore pattern in Gatsby\nDESCRIPTION: This commit fixes an issue where ignore patterns were not being properly handled. Wrapping the ignore pattern in quotes resolves this issue, ensuring that the correct files are ignored during the build process.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-coffeescript/CHANGELOG.md#_snippet_16\n\nLANGUAGE: Markdown\nCODE:\n```\nwrap ignore pattern in quotes ([#23176](https://github.com/gatsbyjs/gatsby/issues/23176)) ([7563db6](https://github.com/gatsbyjs/gatsby/commit/7563db6))\n```\n\n----------------------------------------\n\nTITLE: Creating a New Gatsby Site\nDESCRIPTION: This command uses the Gatsby CLI to create a new Gatsby site based on the blog starter template. It specifies the project name and the Git repository URL of the starter.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/starters/blog/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngatsby new my-blog-starter https://github.com/gatsbyjs/gatsby-starter-blog\n```\n\n----------------------------------------\n\nTITLE: Replacing gatsbyjs.org with gatsbyjs.com chore\nDESCRIPTION: This code snippet represents a chore to replace all instances of gatsbyjs.org with gatsbyjs.com. It addresses issue #35101 and was part of the 4.11.0 release of the package.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-design-tokens/CHANGELOG.md#_snippet_7\n\nLANGUAGE: TEXT\nCODE:\n```\n- replace all uses of gatsbyjs.org with gatsbyjs.com [#35101](https://github.com/gatsbyjs/gatsby/issues/35101) ([16cff41](https://github.com/gatsbyjs/gatsby/commit/16cff413e154dc4e74fc5be631d52c76273e5cbc))\n```\n\n----------------------------------------\n\nTITLE: Chore: Update dev dependencies in gatsby-plugin-image\nDESCRIPTION: This snippet updates minor and patch dependencies for gatsby-plugin-image in the development environment. This ensures that the plugin is using the latest versions of its development dependencies, which can improve performance and stability.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-image/CHANGELOG.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nupdate [dev] minor and patch dependencies for gatsby-plugin-image [#37816](https://github.com/gatsbyjs/gatsby/issues/37816) ([67a4a88](https://github.com/gatsbyjs/gatsby/commit/67a4a888e23bbe53e954823d9d549d3bc3c66124))\n```\n\n----------------------------------------\n\nTITLE: Redirects Configuration File in JSON\nDESCRIPTION: This snippet shows a JSON file (`redirects.json`) used to manage redirects.  It defines an array of redirect objects, each with `fromPath` and `toPath` properties. This simplifies adding and managing redirects. It is used in conjunction with the following JavaScript example.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/cloud/working-with-redirects-and-rewrites.md#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"fromPath\": \"/blog/recipes/mouthwatering-lasagna\",\n    \"toPath\": \"/recipes/mouthwatering-lasagna\"\n  },\n  {\n    \"fromPath\": \"/blog/recipes/*\",\n    \"toPath\": \"/recipes/\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Upgrading Jest in gatsby-plugin-google-analytics\nDESCRIPTION: Upgrades the Jest testing framework to the latest version in the gatsby-plugin-google-analytics package.  This chore ensures the plugin uses the most current testing tools and benefits from any performance improvements or bug fixes.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-google-analytics/CHANGELOG.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n34cb202\n```\n\n----------------------------------------\n\nTITLE: Format Changelog Files in gatsby-plugin-stylus\nDESCRIPTION: This commit formats the changelog files to improve readability and consistency across the Gatsby project. The formatting changes ensure that the changelog is well-structured and easy to navigate. This is a chore and does not affect functionality.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-stylus/CHANGELOG.md#_snippet_2\n\nLANGUAGE: none\nCODE:\n```\nFormat changelog files ([088f23b](https://github.com/gatsbyjs/gatsby/commit/088f23b084b67f746a383e06e9216cef83270317))\n```\n\n----------------------------------------\n\nTITLE: Update Babel Monorepo Chores in gatsby-plugin-stylus\nDESCRIPTION: This commit updates the Babel monorepo as part of routine maintenance within the gatsby-plugin-stylus package. The update ensures compatibility with the latest Babel features and improvements.  It addresses issue #37386 on the Gatsby repository.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-stylus/CHANGELOG.md#_snippet_1\n\nLANGUAGE: none\nCODE:\n```\nupdate babel monorepo [#37386](https://github.com/gatsbyjs/gatsby/issues/37386) ([b941876](https://github.com/gatsbyjs/gatsby/commit/b94187633d94d0f0071b38ffe93380dd802ec70f))\n```\n\n----------------------------------------\n\nTITLE: Updating Babel Monorepo Dependency in Gatsby Plugin\nDESCRIPTION: This snippet updates the babel monorepo dependency for the gatsby-plugin-coffeescript package, addressing issue #32238.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-coffeescript/CHANGELOG.md#_snippet_9\n\nLANGUAGE: Other\nCODE:\n```\nupdate babel monorepo [#32238](https://github.com/gatsbyjs/gatsby/issues/32238) ([466d4c0](https://github.com/gatsbyjs/gatsby/commit/466d4c087bbc96abb942a02c67243bcc9a4f2a0a))\n```\n\n----------------------------------------\n\nTITLE: Updating Babel Monorepo\nDESCRIPTION: Updates the Babel monorepo in the gatsby-source-npm-package-search package. This ensures the package uses the latest Babel features and improvements.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-npm-package-search/CHANGELOG.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nupdate babel monorepo [#32996](https://github.com/gatsbyjs/gatsby/issues/32996) ([048c7a7](https://github.com/gatsbyjs/gatsby/commit/048c7a727bbc6a9ad8e27afba72ee20e946c4aaa))\n```\n\nLANGUAGE: Shell\nCODE:\n```\nupdate babel monorepo [#32564](https://github.com/gatsbyjs/gatsby/issues/32564) ([a554998](https://github.com/gatsbyjs/gatsby/commit/a554998b4f6765103b650813cf52dbfcc575fecf))\n```\n\nLANGUAGE: Shell\nCODE:\n```\nupdate babel monorepo [#32238](https://github.com/gatsbyjs/gatsby/issues/32238) ([466d4c0](https://github.com/gatsbyjs/gatsby/commit/466d4c087bbc96abb942a02c67243bcc9a4f2a0a))\n```\n\nLANGUAGE: Shell\nCODE:\n```\nupdate babel monorepo [#31143](https://github.com/gatsbyjs/gatsby/issues/31143) ([701ab2f](https://github.com/gatsbyjs/gatsby/commit/701ab2f6690c3f1bbaf60cf572513ea566cc9ec9))\n```\n\n----------------------------------------\n\nTITLE: Example XML File: books.xml\nDESCRIPTION: This is an example XML file (books.xml) used to demonstrate how the gatsby-transformer-xml plugin parses XML data. It contains a catalog of books, each with attributes like id, author, title, genre, price, publish_date, and description.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-xml/README.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\"?>\n<catalog>\n  <book id=\"bk101\">\n      <author>Gambardella, Matthew</author>\n      <title>XML Developer's Guide</title>\n      <genre>Computer</genre>\n      <price>44.95</price>\n      <publish_date>2000-10-01</publish_date>\n      <description>An in-depth look at creating applications\n      with XML.</description>\n   </book>\n   <book id=\"bk102\">\n      <author>Ralls, Kim</author>\n      <title>Midnight Rain</title>\n      <genre>Fantasy</genre>\n      <price>5.95</price>\n      <publish_date>2000-12-16</publish_date>\n      <description>A former architect battles corporate zombies,\n      an evil sorceress, and her own childhood to become queen\n      of the world.</description>\n   </book>\n</catalog>\n```\n\n----------------------------------------\n\nTITLE: Format changelog files - Gatsby Telemetry\nDESCRIPTION: This commit formats the changelog files within the gatsby-telemetry package.  Formatting improves readability and maintainability of the changelog, making it easier to track changes and understand the package's evolution.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-telemetry/CHANGELOG.md#_snippet_5\n\n\n\n----------------------------------------\n\nTITLE: Run Gatsby Query Timing (Loki No Index) - Multiple Types\nDESCRIPTION: This shell command executes the `runQueryTiming.sh` script to benchmark Gatsby query performance with Loki datastore and no indexes enabled, with multiple types. It sets the number of page types (NUM_TYPES) and the number of pages (NUM_PAGES) as environment variables for the script.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/benchmarks/query/recording.md#_snippet_5\n\nLANGUAGE: Shell Script\nCODE:\n```\nquery $ NUM_TYPES=100 NUM_PAGES=10000 bin/runQueryTiming.sh\n14.676\n```\n\n----------------------------------------\n\nTITLE: Updating Formatting and Linting - Chore\nDESCRIPTION: This chore focuses on updating the formatting and linting rules of the project. This is likely to ensure code style consistency and adhere to best practices. The issue and commit related to this update are included.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-documentationjs/CHANGELOG.md#_snippet_6\n\nLANGUAGE: N/A\nCODE:\n```\nupdate formatting & linting [#32626](https://github.com/gatsbyjs/gatsby/issues/32626) ([4a765b5](https://github.com/gatsbyjs/gatsby/commit/4a765b5c62208d58f0bd7fd59558160c0b9feed3))\n```\n\n----------------------------------------\n\nTITLE: Defining a boolean variable in Javascript\nDESCRIPTION: This snippet defines a boolean variable named 'codefence' and initializes it to 'true'. This is a simple example of variable declaration and assignment in JavaScript, demonstrating a basic MDX code fence.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/e2e-tests/mdx/src/pages/file+with+plus.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst codefence = true\n```\n\n----------------------------------------\n\nTITLE: Re-generating Changelogs in Gatsby\nDESCRIPTION: This commit re-generates changelogs in the gatsby-plugin-nprogress package. Re-generating changelogs ensures that the documentation accurately reflects the latest changes and updates.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-nprogress/CHANGELOG.md#_snippet_4\n\nLANGUAGE: Markdown\nCODE:\n```\nre-generate changelogs [#32886](https://github.com/gatsbyjs/gatsby/issues/32886) ([417df15](https://github.com/gatsbyjs/gatsby/commit/417df15230be368a9db91f2ad1a9bc0442733177))\n```\n\n----------------------------------------\n\nTITLE: Updating Babel Monorepo in Gatsby\nDESCRIPTION: This commit updates the Babel monorepo. This update ensures that Gatsby is using the latest version of Babel and its associated packages, benefiting from performance improvements, new features, and bug fixes.  The related issue is [#27528](https://github.com/gatsbyjs/gatsby/issues/27528).\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-graphviz/CHANGELOG.md#_snippet_10\n\nLANGUAGE: Text\nCODE:\n```\nupdate babel monorepo [#27528](https://github.com/gatsbyjs/gatsby/issues/27528) ([539dbb0](https://github.com/gatsbyjs/gatsby/commit/539dbb09166e346a6cee568973d2de3d936e8ef3))\n```\n\n----------------------------------------\n\nTITLE: Updating Route API tests and fixing slash replacement\nDESCRIPTION: This commit updates the Route API tests and fixes an issue related to slash replacement in the gatsby-plugin-page-creator. These changes improve the reliability and accuracy of the Route API, ensuring that routes are generated correctly.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-page-creator/CHANGELOG.md#_snippet_30\n\nLANGUAGE: TEXT\nCODE:\n```\n2f878d1\n```\n\n----------------------------------------\n\nTITLE: Updating is-online Dependency to v8 - JavaScript\nDESCRIPTION: This snippet updates the `is-online` dependency to version 8. `is-online` is a library that checks internet connectivity. This update likely brings improvements or fixes related to network status detection in the `gatsby-source-contentful` plugin.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-contentful/CHANGELOG.md#_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nfef7a8c\n```\n\n----------------------------------------\n\nTITLE: Updating recursive-readdir dependency in gatsby-remark-code-repls\nDESCRIPTION: This snippet illustrates the update of the recursive-readdir dependency to version ^2.2.3 in the gatsby-remark-code-repls package. This ensures that the plugin utilizes the latest version of the library, which may include bug fixes, performance improvements, or new features related to recursive directory traversal.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-code-repls/CHANGELOG.md#_snippet_2\n\nLANGUAGE: none\nCODE:\n```\nupdate dependency recursive-readdir to ^2.2.3 for gatsby-remark-code-repls [#37374](https://github.com/gatsbyjs/gatsby/issues/37374) ([aafe028](https://github.com/gatsbyjs/gatsby/commit/aafe028cb359763eef60bc7de77e63183601bf76))\n```\n\n----------------------------------------\n\nTITLE: Fixing Links in Package Changelogs\nDESCRIPTION: This snippet corrects the links present in the package changelogs to ensure they are accurate and lead to the correct resources. It improves the user experience by providing functional links.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-screenshot/CHANGELOG.md#_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\ncorrect links in package changelogs ([#15630](https://github.com/gatsbyjs/gatsby/issues/15630)) ([d07b9dd](https://github.com/gatsbyjs/gatsby/commit/d07b9dd))\n```\n\n----------------------------------------\n\nTITLE: Fixing Links in Gatsby Changelogs\nDESCRIPTION: This code snippet describes a fix to correct broken links within the package changelogs of Gatsby. It ensures that links point to the correct resources and improves the usability of the documentation.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-page-creator/CHANGELOG.md#_snippet_41\n\nLANGUAGE: Text\nCODE:\n```\ncorrect links in package changelogs ([#15630](https://github.com/gatsbyjs/gatsby/issues/15630)) ([d07b9dd](https://github.com/gatsbyjs/gatsby/commit/d07b9dd))\n```\n\n----------------------------------------\n\nTITLE: Updating Babel Monorepo - Chore\nDESCRIPTION: This snippet shows an update to the Babel monorepo within the gatsby-remark-code-repls package, categorized as a chore. This indicates that the update is related to maintenance and improvements, rather than a bug fix or feature addition.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-code-repls/CHANGELOG.md#_snippet_3\n\nLANGUAGE: none\nCODE:\n```\nupdate babel monorepo [#37386](https://github.com/gatsbyjs/gatsby/issues/37386) ([b941876](https://github.com/gatsbyjs/gatsby/commit/b94187633d94d0f0071b38ffe93380dd802ec70f))\n```\n\n----------------------------------------\n\nTITLE: Adding CI Option to Gatsby Plugin\nDESCRIPTION: This code snippet introduces an option to run gatsby-plugin-preload-fonts in CI (Continuous Integration) environments. This feature allows for better integration with automated build and testing pipelines. This feature was introduced in version 1.0.29.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-preload-fonts/CHANGELOG.md#_snippet_8\n\nLANGUAGE: diff\nCODE:\n```\n**gatsby-plugin-preload-fonts:** Add option to run in CI ([#21037](https://github.com/gatsbyjs/gatsby/issues/21037)) ([131f1e8](https://github.com/gatsbyjs/gatsby/commit/131f1e8))\n```\n\n----------------------------------------\n\nTITLE: Updating Babel Monorepo - JavaScript\nDESCRIPTION: This snippet updates the Babel monorepo for the gatsby-plugin-benchmark-reporting package. It addresses issue #27528 on GitHub.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-benchmark-reporting/CHANGELOG.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nupdate babel monorepo [#27528](https://github.com/gatsbyjs/gatsby/issues/27528) ([539dbb0](https://github.com/gatsbyjs/gatsby/commit/539dbb09166e346a6cee568973d2de3d936e8ef3))\n```\n\n----------------------------------------\n\nTITLE: Updating Bluebird Dependency to ^3.5.5 - JavaScript\nDESCRIPTION: This snippet updates the `bluebird` dependency to version ^3.5.5. Bluebird is a Promise library used by `gatsby-source-contentful`, and updating it ensures that the plugin benefits from the latest bug fixes and performance improvements in the library.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-contentful/CHANGELOG.md#_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nec0be83\n```\n\n----------------------------------------\n\nTITLE: Updating Babel Monorepo\nDESCRIPTION: This commit updates the Babel monorepo in the gatsby-plugin-page-creator. This update brings in the latest features and bug fixes from Babel, ensuring that the plugin can transpile modern JavaScript code effectively.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-page-creator/CHANGELOG.md#_snippet_27\n\nLANGUAGE: TEXT\nCODE:\n```\n539dbb0\n```\n\n----------------------------------------\n\nTITLE: Fixing Ignore Pattern with Quotes\nDESCRIPTION: This snippet shows a bug fix related to wrapping an ignore pattern in quotes. This likely pertains to a configuration issue where file paths or patterns were not being properly ignored by the plugin.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-medium/CHANGELOG.md#_snippet_2\n\nLANGUAGE: Diff\nCODE:\n```\n- wrap ignore pattern in quotes ([#23176](https://github.com/gatsbyjs/gatsby/issues/23176)) ([7563db6](https://github.com/gatsbyjs/gatsby/commit/7563db6))\n```\n\n----------------------------------------\n\nTITLE: Install ESLint Dependencies\nDESCRIPTION: This command installs the eslint-config-react-app package as a development dependency using npm. This package provides a set of ESLint rules commonly used in React applications. It's a prerequisite for customizing ESLint configuration in a Gatsby project.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/custom-configuration/eslint.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev eslint-config-react-app\n```\n\n----------------------------------------\n\nTITLE: Fixing Ignore Pattern in Gatsby Source WordPress\nDESCRIPTION: This code snippet addresses a bug where the ignore pattern in the gatsby-source-wordpress plugin was not properly wrapped in quotes. This fix ensures that the ignore pattern is correctly interpreted, preventing unexpected behavior during data fetching.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-wordpress/CHANGELOG.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nwrap ignore pattern in quotes ([#23176](https://github.com/gatsbyjs/gatsby/issues/23176)) ([7563db6](https://github.com/gatsbyjs/gatsby/commit/7563db6))\n```\n\n----------------------------------------\n\nTITLE: Updating ESLint Config JavaScript\nDESCRIPTION: This snippet updates ESLint configuration to fix linting issues. ESLint is a tool for identifying and reporting on patterns found in ECMAScript/JavaScript code. Updating ESLint helps maintain code quality and consistency.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-copy-linked-files/CHANGELOG.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nupdate eslint to fix linting issues fix [#29988](https://github.com/gatsbyjs/gatsby/issues/29988) ([5636389](https://github.com/gatsbyjs/gatsby/commit/5636389e8fa626c644e90abc14589e9961d98c68))\n```\n\n----------------------------------------\n\nTITLE: Applying Patches for v5 in gatsby-plugin-fullstory\nDESCRIPTION: This snippet details the application of patches specifically for version 5 of the gatsby-plugin-fullstory package. It links to issue #36796 and includes a relevant commit hash.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-fullstory/CHANGELOG.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\napply patches for v5 [#36796](https://github.com/gatsbyjs/gatsby/issues/36796) ([25f79b6](https://github.com/gatsbyjs/gatsby/commit/25f79b6c3719fdf09584ade620a05c66ba2a697c))\n```\n\n----------------------------------------\n\nTITLE: Adding Asset Prefix Support to Gatsby\nDESCRIPTION: This feature introduces `assetPrefix` to Gatsby, enabling the deployment of assets separately from HTML. This enhances deployment flexibility and allows for more efficient asset management. This change was implemented in version 2.2.0.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-feed/CHANGELOG.md#_snippet_16\n\n\n\n----------------------------------------\n\nTITLE: Fixing documentation code block language\nDESCRIPTION: This commit addresses an issue in the documentation where code language blocks were incorrectly labeled as 'bash' instead of 'shell'. The fix updates the language designation to 'shell' for improved clarity and accuracy.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-cypress/CHANGELOG.md#_snippet_6\n\n\n\n----------------------------------------\n\nTITLE: Update Babel Monorepo (Chore) in gatsby-remark-graphviz\nDESCRIPTION: This commit performs a chore update to the Babel monorepo. It keeps the Babel dependencies up-to-date, improving the long-term maintainability and compatibility of the `gatsby-remark-graphviz` plugin.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-graphviz/CHANGELOG.md#_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Updating Babel Monorepo (Chore)\nDESCRIPTION: This chore updates the Babel monorepo within the gatsby-source-hacker-news package. It helps maintain compatibility and leverages the latest features from Babel.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-hacker-news/CHANGELOG.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nupdate babel monorepo [#37386](https://github.com/gatsbyjs/gatsby/issues/37386) ([b941876](https://github.com/gatsbyjs/gatsby/commit/b94187633d94d0f0071b38ffe93380dd802ec70f))\n```\n\n----------------------------------------\n\nTITLE: Formatting Changelog Files\nDESCRIPTION: This chore focuses on formatting the changelog files within the gatsby-transformer-javascript-static-exports package. The goal is to maintain consistent and readable changelogs.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-javascript-static-exports/CHANGELOG.md#_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\nFormat changelog files ([088f23b](https://github.com/gatsbyjs/gatsby/commit/088f23b084b67f746a383e06e9216cef83270317))\n```\n\n----------------------------------------\n\nTITLE: Updating Babel Monorepo (Another Instance)\nDESCRIPTION: This commit updates the babel monorepo to the latest version. This keeps the babel dependencies up to date.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-cxs/CHANGELOG.md#_snippet_10\n\n\n\n----------------------------------------\n\nTITLE: Declare String Variable JavaScript\nDESCRIPTION: Declares a constant variable `saltyDuckEgg` and initializes it with the string value \"chinese preserved food product\". This is a simple JavaScript assignment.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/starters/blog/content/blog/hello-world/index.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst saltyDuckEgg = \"chinese preserved food product\"\n```\n\n----------------------------------------\n\nTITLE: Applying Patches for v5 in gatsby-plugin-no-sourcemaps\nDESCRIPTION: This commit applies necessary patches for version 5 of the `gatsby-plugin-no-sourcemaps` package. It fixes issues or introduces improvements required for the specified major version.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-no-sourcemaps/CHANGELOG.md#_snippet_3\n\nLANGUAGE: Markdown\nCODE:\n```\n#### Chores\n\n- apply patches for v5 [#36796](https://github.com/gatsbyjs/gatsby/issues/36796) ([25f79b6](https://github.com/gatsbyjs/gatsby/commit/25f79b6c3719fdf09584ade620a05c66ba2a697c))\n```\n\n----------------------------------------\n\nTITLE: Changelog Generator CLI Usage\nDESCRIPTION: This shows the usage information for the Gatsby changelog generator CLI tool. It lists available commands such as `regenerate`, `regenerate-all`, `update`, and `update-all`, along with their descriptions. It also shows available options like `--help` and `--version`.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/scripts/gatsby-changelog-generator/README.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ncli.js <command>\n\nCommands:\n  cli.js regenerate <pkg>  Regenerates changelog of a given package\n  cli.js regenerate-all    Regenerate changelogs of all packages in the monorepo\n                           (slow)\n  cli.js update <pkg>      Add new versions to the changelog of a given package\n  cli.js update-all        Update changelogs of all packages in the monorepo\n\nOptions:\n  --help     Show help                                                 [boolean]\n  --version  Show version number                                       [boolean]\n```\n\n----------------------------------------\n\nTITLE: Updating Babel Monorepo in gatsby-transformer-pdf\nDESCRIPTION: This code snippet shows a bug fix that updates the babel monorepo within the gatsby-transformer-pdf package. This ensures compatibility and resolves potential issues related to the older version of the babel library.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-pdf/CHANGELOG.md#_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\nupdate babel monorepo [#37568](https://github.com/gatsbyjs/gatsby/issues/37568) ([13a0a9e](https://github.com/gatsbyjs/gatsby/commit/13a0a9e83dcb015b65dff6b73cdd5dea09c2988f))\n```\n\n----------------------------------------\n\nTITLE: Define YAML Frontmatter\nDESCRIPTION: This YAML snippet defines the frontmatter for a Gatsby page. It includes a title and another key, both of which can be accessed within the page's React component using `props.pageContext.frontmatter`. The frontmatter provides a structured way to manage metadata for pages.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/e2e-tests/mdx/src/pages/frontmatter-yaml.mdx#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\ntitle: I am parsed\notherKey: Some other key\n```\n\n----------------------------------------\n\nTITLE: Checking for Empty File Nodes\nDESCRIPTION: This commit adds a check for empty file nodes to prevent errors when processing Drupal data. It handles cases where file nodes might be empty, ensuring the plugin doesn't crash or produce unexpected results.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-drupal/CHANGELOG.md#_snippet_19\n\n\n\n----------------------------------------\n\nTITLE: Updating Peer Dependencies\nDESCRIPTION: This code snippet shows a chore related to updating peer dependencies for gatsby-plugin-coffeescript. Updating peer dependencies helps ensure compatibility and avoid conflicts with other packages in the Gatsby ecosystem.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-coffeescript/CHANGELOG.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nUpdate peerDeps [#36965](https://github.com/gatsbyjs/gatsby/issues/36965) ([b624442](https://github.com/gatsbyjs/gatsby/commit/b6244424fe8b724cbc23b80b2b4f5424cc2055a4))\n```\n\n----------------------------------------\n\nTITLE: Fixing Gatsby CLI Dependency\nDESCRIPTION: This snippet addresses an issue where the gatsby-cli dependency was not correctly defined in the source-filesystem and plugin-sharp packages. It ensures that these packages have the correct gatsby-cli dependency.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-screenshot/CHANGELOG.md#_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nfix gatsby-cli dep in source-filesystem & plugin-sharp ([#14881](https://github.com/gatsbyjs/gatsby/issues/14881)) ([2594623](https://github.com/gatsbyjs/gatsby/commit/2594623))\n```\n\n----------------------------------------\n\nTITLE: Adding panic messaging to builds with no locales (JavaScript)\nDESCRIPTION: This commit adds a panic message to gatsby-source-contentful builds when no locales are configured. This makes it easier to identify and resolve configuration issues related to locales.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-contentful/CHANGELOG.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\n6979816\n```\n\n----------------------------------------\n\nTITLE: Updating Parcel version in gatsby-parcel-config\nDESCRIPTION: This commit updates the Parcel dependency to version 2.8.3 within the gatsby-parcel-config package.  This is likely a bug fix or performance improvement to the underlying bundler.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-parcel-config/CHANGELOG.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nupdate parcel to v2.8.3 [#37583](https://github.com/gatsbyjs/gatsby/issues/37583) ([c2192cc](https://github.com/gatsbyjs/gatsby/commit/c2192cc7c30c79bbef179de7e03898fce6c0f9af))\n```\n\n----------------------------------------\n\nTITLE: Checking Remote Plugin Versions for Compatibility\nDESCRIPTION: This snippet outlines the compatibility API, used to ensure that the Gatsby source plugin works with the correct versions of the WPGatsby and WPGraphQL plugins installed on the WordPress site. It involves sending version ranges for WPGraphQL and WPGatsby to a remote endpoint to check for compatibility, enhancing security by avoiding the direct exposure of plugin versions.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-wordpress/ARCHITECTURE.md#_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Markdown Horizontal Rule Syntax\nDESCRIPTION: Shows how to create horizontal rules (dividers) in Markdown using hyphens, asterisks, or underscores.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/using-remark/src/pages/2016-04-15---hello-world-kitchen-sink/index.md#_snippet_9\n\nLANGUAGE: no-highlight\nCODE:\n```\nThree or more...\n\n---\n\nHyphens\n\n***\n\nAsterisks\n\n___\n\nUnderscores\n```\n\n----------------------------------------\n\nTITLE: Adding support for relative links in Gatsby\nDESCRIPTION: This commit introduces support for relative links in Gatsby. This feature allows developers to use relative paths in their links, providing more flexibility in routing. Issue #24054 corresponds to this feature addition.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-link/CHANGELOG.md#_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Updating Underscore.string Dependency\nDESCRIPTION: This commit updates the `underscore.string` dependency for the `gatsby-transformer-remark` package. It resolves potential compatibility issues and ensures the package utilizes the latest bug fixes and improvements from the dependency.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-remark/CHANGELOG.md#_snippet_2\n\nLANGUAGE: None\nCODE:\n```\nupdate dependency underscore.string to ^3.3.6 for gatsby-transformer-remark [#34653](https://github.com/gatsbyjs/gatsby/issues/34653) ([1d2530e](https://github.com/gatsbyjs/gatsby/commit/1d2530eaf7c2016f1dac427942b7d1bb29cc4933))\n```\n\n----------------------------------------\n\nTITLE: Updating Babel Monorepo\nDESCRIPTION: This commit updates the Babel monorepo dependency. It brings in the latest changes and improvements from the Babel project, ensuring compatibility and access to new features.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-react-helmet/CHANGELOG.md#_snippet_10\n\nLANGUAGE: Other\nCODE:\n```\n048c7a727bbc6a9ad8e27afba72ee20e946c4aaa\n```\n\n----------------------------------------\n\nTITLE: Formatting Changelog Files\nDESCRIPTION: This code snippet represents a chore that involves formatting changelog files within the Gatsby project.  This is likely a maintenance task to ensure consistent formatting across all changelog files for readability and maintainability.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-custom-blocks/CHANGELOG.md#_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\nFormat changelog files ([088f23b](https://github.com/gatsbyjs/gatsby/commit/088f23b084b67f746a383e06e9216cef83270317))\n```\n\n----------------------------------------\n\nTITLE: Format changelog files\nDESCRIPTION: Formats the changelog files to maintain a consistent and readable structure. This chore improves the overall maintainability and readability of the changelog.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-page-creator/CHANGELOG.md#_snippet_20\n\nLANGUAGE: none\nCODE:\n```\nFormat changelog files ([088f23b](https://github.com/gatsbyjs/gatsby/commit/088f23b084b67f746a383e06e9216cef83270317))\n```\n\n----------------------------------------\n\nTITLE: Use proper babelrc configs\nDESCRIPTION: This commit ensures the usage of correct babelrc configurations for compiling packages. This is important for ensuring consistent and correct transpilation of code across different environments and packages within the Gatsby project.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-page-creator/CHANGELOG.md#_snippet_17\n\nLANGUAGE: none\nCODE:\n```\nuse proper babelrc configs for compiling packages [#35948](https://github.com/gatsbyjs/gatsby/issues/35948) ([384e801](https://github.com/gatsbyjs/gatsby/commit/384e8019152ad9bfa221e3e8b6da54675c93f293))\n```\n\n----------------------------------------\n\nTITLE: Tracking correct `knownPagePaths` in page creator\nDESCRIPTION: This snippet addresses an issue with the accurate tracking of `knownPagePaths`. Ensuring correct tracking is crucial for the plugin to manage and create pages effectively.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-page-creator/CHANGELOG.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nTrack correct `knownPagePaths` [#37745](https://github.com/gatsbyjs/gatsby/issues/37745) ([b121057](https://github.com/gatsbyjs/gatsby/commit/b1210574cfd59752b2f95e7146b8d83ea20a7110))\n```\n\n----------------------------------------\n\nTITLE: Bumping Reach Router Version\nDESCRIPTION: Bumps the `@gatsbyjs/reach-router` dependency to version v2.0.0. This updates the Reach Router library used by Gatsby, potentially introducing new features, performance enhancements, or bug fixes.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-react-router-scroll/CHANGELOG.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nBump @gatsbyjs/reach-router to v2.0.0 [#37121](https://github.com/gatsbyjs/gatsby/issues/37121) ([aa5808b](https://github.com/gatsbyjs/gatsby/commit/aa5808becb16c4d98953082a7e04b6b7d40cd9a5))\n```\n\n----------------------------------------\n\nTITLE: Fixing ignore pattern in gatsby-source-hacker-news\nDESCRIPTION: This commit fixes a bug by wrapping an ignore pattern in quotes within the gatsby-source-hacker-news package.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-hacker-news/CHANGELOG.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nwrap ignore pattern in quotes ([#23176](https://github.com/gatsbyjs/gatsby/issues/23176)) ([7563db6](https://github.com/gatsbyjs/gatsby/commit/7563db6))\n```\n\n----------------------------------------\n\nTITLE: Fixing Anchor Link Issues\nDESCRIPTION: Addresses and resolves issues related to anchor links within the `gatsby-react-router-scroll` package. The fix likely involves correcting the behavior of anchor links to ensure they correctly navigate to the intended sections of a page.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-react-router-scroll/CHANGELOG.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfix issues with anchor links fix [#37498](https://github.com/gatsbyjs/gatsby/issues/37498) ([e7e5cb4](https://github.com/gatsbyjs/gatsby/commit/e7e5cb4ec3864109c8252bd9f91f1cf3d092fbbc))\n```\n\n----------------------------------------\n\nTITLE: Markdown Inline Code and Bold Text\nDESCRIPTION: Illustrates how to include inline code and bold text within a list in Markdown. The first item uses inline code, while the second uses bold text. Demonstrates a combination of formatting options within a Markdown list.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/starters/blog/content/blog/hello-world/index.md#_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n- `code goes` here in this line\n- **bold** goes here\n```\n\n----------------------------------------\n\nTITLE: Update Typescript dependency - Gatsby Telemetry\nDESCRIPTION: This commit updates the typescript dependency for the gatsby-telemetry package to version ^4.5.5. Using the latest TypeScript version provides access to new language features, improved type checking, and performance optimizations.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-telemetry/CHANGELOG.md#_snippet_7\n\n\n\n----------------------------------------\n\nTITLE: Feature: Bump Node.js Minimum Version in Gatsby\nDESCRIPTION: This code changes the minimum required Node.js version to 10.13.0 for Gatsby projects.  It ensures that users are running a compatible version of Node.js to support the features and dependencies of Gatsby. No specific parameters are detailed.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-json/CHANGELOG.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n83d681a\n```\n\n----------------------------------------\n\nTITLE: Install Dependencies (Shell)\nDESCRIPTION: Installs project dependencies using either `yarn` or `npm`. This step is required to set up the Gatsby project and install any necessary plugins or libraries. During installation, mock data will be generated and remote images will be downloaded.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/benchmarks/md/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n$ yarn install    # or npm install\n```\n\n----------------------------------------\n\nTITLE: Updating Babel Monorepo Chore in gatsby-plugin-fullstory\nDESCRIPTION: This snippet represents a chore update for the Babel monorepo in the gatsby-plugin-fullstory package. It is associated with issue #37386 and provides a commit hash for tracking the change.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-fullstory/CHANGELOG.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nupdate babel monorepo [#37386](https://github.com/gatsbyjs/gatsby/issues/37386) ([b941876](https://github.com/gatsbyjs/gatsby/commit/b94187633d94d0f0071b38ffe93380dd802ec70f))\n```\n\n----------------------------------------\n\nTITLE: Updating cross-env Dependency in Gatsby\nDESCRIPTION: This snippet updates the cross-env dependency to version ^7.0.3. The update is part of a chore and addresses issue #28505 in the Gatsby repository. It ensures the plugin uses the latest version of cross-env for improved compatibility and security.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-cxs/CHANGELOG.md#_snippet_14\n\nLANGUAGE: Text\nCODE:\n```\nupdate dependency cross-env to ^7.0.3 [#28505](https://github.com/gatsbyjs/gatsby/issues/28505) ([a819b9b](https://github.com/gatsbyjs/gatsby/commit/a819b9bfb663139f7b06c3ed7d6d6069a2382b2c))\n```\n\n----------------------------------------\n\nTITLE: Update minor updates in packages\nDESCRIPTION: This commit updates minor version updates in various packages, excluding react, babel and eslint.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-page-creator/CHANGELOG.md#_snippet_38\n\nLANGUAGE: plaintext\nCODE:\n```\nupdate minor updates in packages except react, babel and eslint ([#17254](https://github.com/gatsbyjs/gatsby/issues/17254)) ([252d867](https://github.com/gatsbyjs/gatsby/commit/252d867))\n```\n\n----------------------------------------\n\nTITLE: Publishing packages as ESM & CJS in gatsby-design-tokens\nDESCRIPTION: This code snippet represents a feature addition to the gatsby-design-tokens package that publishes some packages as both ESM (ECMAScript Modules) and CJS (CommonJS). It addresses issue #36012 and was included in the 4.19.0 release.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-design-tokens/CHANGELOG.md#_snippet_4\n\nLANGUAGE: TEXT\nCODE:\n```\n- Publish some packages as ESM & CJS [#36012](https://github.com/gatsbyjs/gatsby/issues/36012) ([5bd3063](https://github.com/gatsbyjs/gatsby/commit/5bd3063a1e72c6f98447bfac2bf767cca781330b))\n```\n\n----------------------------------------\n\nTITLE: Fixing ignore pattern in Gatsby\nDESCRIPTION: This commit fixes a bug where the ignore pattern was not properly wrapped in quotes.  Wrapping the ignore pattern in quotes ensures that it is correctly interpreted by the relevant tooling.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-toml/CHANGELOG.md#_snippet_6\n\nLANGUAGE: Other\nCODE:\n```\nwrap ignore pattern in quotes ([#23176](https://github.com/gatsbyjs/gatsby/issues/23176)) ([7563db6](https://github.com/gatsbyjs/gatsby/commit/7563db6))\n```\n\n----------------------------------------\n\nTITLE: Applying Patches for v5 in gatsby-plugin-styletron\nDESCRIPTION: This commit applies necessary patches for version 5 of the gatsby-plugin-styletron package. This ensures compatibility and stability for users upgrading to v5. The patches were released in version 8.0.0.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-styletron/CHANGELOG.md#_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\nChores\n\n- apply patches for v5 [#36796](https://github.com/gatsbyjs/gatsby/issues/36796) ([25f79b6](https://github.com/gatsbyjs/gatsby/commit/25f79b6c3719fdf09584ade620a05c66ba2a697c))\n```\n\n----------------------------------------\n\nTITLE: Bumping minimum Node version for Gatsby\nDESCRIPTION: This commit bumps the minimum required Node.js version for Gatsby to 10.13.0.  This change ensures that Gatsby users are running a version of Node.js that is actively supported and compatible with Gatsby's features and dependencies. The related issue is [#22400](https://github.com/gatsbyjs/gatsby/issues/22400).\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-graphviz/CHANGELOG.md#_snippet_12\n\nLANGUAGE: Text\nCODE:\n```\n**gatsby:** bump node min version to 10.13.0 ([#22400](https://github.com/gatsbyjs/gatsby/issues/22400)) ([83d681a](https://github.com/gatsbyjs/gatsby/commit/83d681a))\n```\n\n----------------------------------------\n\nTITLE: Replacing gatsbyjs.org with gatsbyjs.com in Gatsby\nDESCRIPTION: This code snippet represents a chore that replaces all instances of `gatsbyjs.org` with `gatsbyjs.com` within the Gatsby project. This was likely done to standardize the domain name used within the codebase and documentation.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-custom-blocks/CHANGELOG.md#_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\nreplace all uses of gatsbyjs.org with gatsbyjs.com [#35101](https://github.com/gatsbyjs/gatsby/issues/35101) ([16cff41](https://github.com/gatsbyjs/gatsby/commit/16cff413e154dc4e74fc5be631d52c76273e5cbc))\n```\n\n----------------------------------------\n\nTITLE: Removing agadoo chore in gatsby-design-tokens\nDESCRIPTION: This code snippet represents a chore update in the gatsby-design-tokens package, specifically removing the 'agadoo' dependency or functionality. It was part of the 5.9.0 release of the package.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-design-tokens/CHANGELOG.md#_snippet_0\n\nLANGUAGE: TEXT\nCODE:\n```\n- remove agadoo [#37894](https://github.com/gatsbyjs/gatsby/issues/37894) ([55978cf](https://github.com/gatsbyjs/gatsby/commit/55978cf3edfa47c1b20bb9a5543457f1df442e43))\n```\n\n----------------------------------------\n\nTITLE: Format changelog files - JavaScript\nDESCRIPTION: This commit formats the changelog files for better readability and consistency.  It involves applying formatting rules to the changelog entries.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-subfont/CHANGELOG.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nFormat changelog files ([088f23b](https://github.com/gatsbyjs/gatsby/commit/088f23b084b67f746a383e06e9216cef83270317))\n```\n\n----------------------------------------\n\nTITLE: Hiding sessionStorage warnings in gatsby-react-router-scroll (JavaScript)\nDESCRIPTION: This commit hides sessionStorage warnings in production environments.  This suppresses warnings related to sessionStorage access that might appear in production, providing a cleaner console output for users and developers.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-react-router-scroll/CHANGELOG.md#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\n**gatsby-react-router-scroll:** hide sessionStorage warnings in production ([#12593](https://github.com/gatsbyjs/gatsby/issues/12593)) ([365be0a](https://github.com/gatsbyjs/gatsby/commit/365be0a)), closes [#12577](https://github.com/gatsbyjs/gatsby/issues/12577)\n```\n\n----------------------------------------\n\nTITLE: Updating Peer Dependencies in gatsby-plugin-layout\nDESCRIPTION: This commit updates the peer dependencies for the gatsby-plugin-layout package. It addresses issue #36965 on the Gatsby repository.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-layout/CHANGELOG.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nUpdate peerDeps [#36965](https://github.com/gatsbyjs/gatsby/issues/36965) ([b624442](https://github.com/gatsbyjs/gatsby/commit/b6244424fe8b724cbc23b80b2b4f5424cc2055a4))\n```\n\n----------------------------------------\n\nTITLE: Fixing Ignore Pattern in Gatsby Plugin Subfont\nDESCRIPTION: This code snippet addresses an issue in the gatsby-plugin-subfont where the ignore pattern wasn't properly wrapped in quotes. The fix ensures that the ignore pattern is correctly interpreted, preventing unexpected behavior during subfont processing. This patch was released in version 2.1.3.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-subfont/CHANGELOG.md#_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n--- a/packages/gatsby-plugin-subfont/src/index.js\n+++ b/packages/gatsby-plugin-subfont/src/index.js\n@@ -120,7 +120,7 @@\n         },\n         })\n       })\n-    ).then(() => subfont({\n+    ).then(() => subfont({ // removed tsc error\n       input: path.join(publicPath, `**/*.html`),\n       output: publicPath,\n       silent: true,\n```\n\n----------------------------------------\n\nTITLE: Fixing Regex for Path Validation in Gatsby\nDESCRIPTION: This code snippet corrects the regular expression used for path validation in gatsby-plugin-page-creator. It addresses potential issues with incorrect path validation and ensures that only valid paths are used for page creation.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-page-creator/CHANGELOG.md#_snippet_45\n\nLANGUAGE: Text\nCODE:\n```\n**gatsby-plugin-page-creator:** Fix regular expression for validate path ([#11862](https://github.com/gatsbyjs/gatsby/issues/11862)) ([898873d](https://github.com/gatsbyjs/gatsby/commit/898873d))\n```\n\n----------------------------------------\n\nTITLE: Bumping Babel Minor Version in Gatsby\nDESCRIPTION: This commit bumps the minor version of Babel in the gatsby-plugin-nprogress package. This update may include new features or bug fixes related to Babel's functionality.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-nprogress/CHANGELOG.md#_snippet_7\n\nLANGUAGE: Markdown\nCODE:\n```\nbump babel minor [#31857](https://github.com/gatsbyjs/gatsby/issues/31857) ([7d42e8d](https://github.com/gatsbyjs/gatsby/commit/7d42e8d866e46e9c39838d812d080d06433f7060))\n```\n\n----------------------------------------\n\nTITLE: Re-generating Changelogs - Chore\nDESCRIPTION: This chore involves re-generating the changelogs. This is likely done to ensure the changelogs are up-to-date and accurate, possibly after some changes in the tooling or process. The issue and commit associated with this regeneration are included.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-documentationjs/CHANGELOG.md#_snippet_5\n\nLANGUAGE: N/A\nCODE:\n```\nre-generate changelogs [#32886](https://github.com/gatsbyjs/gatsby/issues/32886) ([417df15](https://github.com/gatsbyjs/gatsby/commit/417df15230be368a9db91f2ad1a9bc0442733177))\n```\n\n----------------------------------------\n\nTITLE: Fixing Cheerio Snapshots JavaScript\nDESCRIPTION: This snippet addresses a bug related to Cheerio snapshots. It updates the snapshots to resolve issues identified in the specified GitHub issues. Cheerio is used for parsing and manipulating HTML.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-copy-linked-files/CHANGELOG.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nupdate cheerio snapshots [#31298](https://github.com/gatsbyjs/gatsby/issues/31298) ([e06599d](https://github.com/gatsbyjs/gatsby/commit/e06599d9acc53442f8830b04f8fa2c749a820cc5))\n```\n\n----------------------------------------\n\nTITLE: Adding Nodes DB Module to Gatsby\nDESCRIPTION: This commit adds a nodes database module to Gatsby. This new module improves data management and allows for more efficient querying of nodes in Gatsby. The changes enhance the overall performance and scalability of Gatsby sites.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-screenshot/CHANGELOG.md#_snippet_17\n\nLANGUAGE: Diff\nCODE:\n```\n([7d31fe7](https://github.com/gatsbyjs/gatsby/commit/7d31fe7))\n```\n\n----------------------------------------\n\nTITLE: Cloning the Gatsby repository\nDESCRIPTION: This command clones the Gatsby repository from GitHub. It is the first step in setting up a local development environment for Gatsby and contributing to the project.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-design-tokens/README.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n# clone the repo/your fork\ngit clone https://github.com/gatsbyjs/gatsby.git\ncd gatsby\n```\n\n----------------------------------------\n\nTITLE: Updating sharp dependency in gatsby-remark-images-contentful\nDESCRIPTION: This code snippet represents a bug fix where the sharp dependency was updated to version ^0.29.2. This resolves potential compatibility issues or bugs related to image processing.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-images-contentful/CHANGELOG.md#_snippet_15\n\nLANGUAGE: None\nCODE:\n```\nupdate dependency sharp to ^0.29.2 [#33766](https://github.com/gatsbyjs/gatsby/issues/33766) ([0dfbc48](https://github.com/gatsbyjs/gatsby/commit/0dfbc48735e2b40b4fbcf4eccef2db38c34ce526))\n```\n\n----------------------------------------\n\nTITLE: Apply Patches for v5\nDESCRIPTION: This code indicates patches being applied for version 5 of `gatsby-plugin-postcss`.  This suggests bug fixes or minor adjustments specific to the version 5 release of the plugin.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-postcss/CHANGELOG.md#_snippet_10\n\nLANGUAGE: none\nCODE:\n```\napply patches for v5 [#36796](https://github.com/gatsbyjs/gatsby/issues/36796) ([25f79b6](https://github.com/gatsbyjs/gatsby/commit/25f79b6c3719fdf09584ade620a05c66ba2a697c))\n```\n\n----------------------------------------\n\nTITLE: Updating Babel Monorepo\nDESCRIPTION: This commit updates the Babel monorepo within the gatsby-transformer-yaml package. Updating Babel ensures the package uses the latest features and improvements in JavaScript compilation.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-yaml/CHANGELOG.md#_snippet_3\n\nLANGUAGE: \nCODE:\n```\nupdate babel monorepo [#32996](https://github.com/gatsbyjs/gatsby/issues/32996) ([048c7a7](https://github.com/gatsbyjs/gatsby/commit/048c7a727bbc6a9ad8e27afba72ee20e946c4aaa))\n```\n\nLANGUAGE: \nCODE:\n```\nupdate babel monorepo [#32564](https://github.com/gatsbyjs/gatsby/issues/32564) ([a554998](https://github.com/gatsbyjs/gatsby/commit/a554998b4f6765103b650813cf52dbfcc575fecf))\n```\n\nLANGUAGE: \nCODE:\n```\nupdate babel monorepo [#32238](https://github.com/gatsbyjs/gatsby/issues/32238) ([466d4c0](https://github.com/gatsbyjs/gatsby/commit/466d4c087bbc96abb942a02c67243bcc9a4f2a0a))\n```\n\nLANGUAGE: \nCODE:\n```\nupdate babel monorepo [#31143](https://github.com/gatsbyjs/gatsby/issues/31143) ([701ab2f](https://github.com/gatsbyjs/gatsby/commit/701ab2f6690c3f1bbaf60cf572513ea566cc9ec9))\n```\n\n----------------------------------------\n\nTITLE: Updating axios dependency in gatsby-source-wikipedia (JavaScript)\nDESCRIPTION: This code snippet updates the axios dependency to version ^0.19.2. It addresses a bug by updating an outdated dependency.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-wikipedia/CHANGELOG.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nupdate dependency axios to ^0.19.2 ([#22317](https://github.com/gatsbyjs/gatsby/issues/22317)) ([91e780f](https://github.com/gatsbyjs/gatsby/commit/91e780f))\n```\n\n----------------------------------------\n\nTITLE: Changing Output Default to `/` in gatsby-plugin-sitemap\nDESCRIPTION: This change sets the default `output` path to `/` within the `gatsby-plugin-sitemap` plugin. This affects where the sitemap file is generated by default.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-sitemap/CHANGELOG.md#_snippet_8\n\nLANGUAGE: TEXT\nCODE:\n```\nChange `output` default to `/` [#36812](https://github.com/gatsbyjs/gatsby/issues/36812) ([b645fdf](https://github.com/gatsbyjs/gatsby/commit/b645fdfbe654572fead90de098bb41406d07c57d))\n```\n\n----------------------------------------\n\nTITLE: Example npm outdated output\nDESCRIPTION: Example output of the npm outdated command. Shows the package name, current version, wanted version, and latest version.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/reference/release-notes/upgrade-gatsby-and-dependencies.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nPackage                            Current   Wanted   Latest  Location\ngatsby                             5.0.0     5.0.0    5.1.0\n```\n\n----------------------------------------\n\nTITLE: Markdown Headers\nDESCRIPTION: Markdown headers that can be rendered as React components, when mapped appropriately using rehype-react.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/examples/using-remark/src/pages/2018-01-27---custom-components/index.md#_snippet_10\n\nLANGUAGE: Markdown\nCODE:\n```\n# This will be rendered as a PrimaryTitle component\n\n## This will be rendered as a SecondaryTitle component\n\n### This will be rendered as a TertiaryTitle component\n```\n\n----------------------------------------\n\nTITLE: Updating Babel Monorepo\nDESCRIPTION: This chore involves updating the Babel monorepo within the gatsby-transformer-javascript-static-exports package. Updating Babel ensures compatibility with the latest JavaScript features and improvements.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-javascript-static-exports/CHANGELOG.md#_snippet_4\n\nLANGUAGE: Text\nCODE:\n```\nupdate babel monorepo [#32238](https://github.com/gatsbyjs/gatsby/issues/32238) ([466d4c0](https://github.com/gatsbyjs/gatsby/commit/466d4c087bbc96abb942a02c67243bcc9a4f2a0a))\n```\n\n----------------------------------------\n\nTITLE: Fixing Icons Asset Preloading in gatsby-plugin-manifest\nDESCRIPTION: This code snippet shows a bug fix for the gatsby-plugin-manifest. The fix addresses an issue where icons were not properly getting asset preloaded. This commit ensures that the icons are correctly preloaded, improving the performance of the web application. The fix was implemented in commit 0e8ed07.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-manifest/CHANGELOG.md#_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Parsed YAML Content Example\nDESCRIPTION: This JSON object shows the result of parsing the YAML with Javascript.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/docs/docs/how-to/plugins-and-themes/creating-a-transformer-plugin.md#_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"id\": \"Jane Doe\",\n    \"bio\": \"Developer based in Somewhere, USA\"\n  },\n  {\n    \"id\": \"John Smith\",\n    \"bio\": \"Developer based in Maintown, USA\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Handling SVGAnimatedString href values\nDESCRIPTION: This commit ensures that gatsby-plugin-catch-links correctly handles SVGAnimatedString href values. This resolves issue #9816.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-catch-links/CHANGELOG.md#_snippet_16\n\nLANGUAGE: Text\nCODE:\n```\nhandle SVGAnimatedString href values ([#9829](https://github.com/gatsbyjs/gatsby/issues/9829)) ([4538ff3](https://github.com/gatsbyjs/gatsby/commit/4538ff3)), closes [#9816](https://github.com/gatsbyjs/gatsby/issues/9816)\n```\n\n----------------------------------------\n\nTITLE: Updating fs-extra dependency in gatsby-plugin-feed\nDESCRIPTION: This code snippet addresses a bug fix that updates the `fs-extra` dependency to version `^11.2.0`.  It ensures the plugin utilizes the latest features and resolves potential compatibility issues associated with older versions of `fs-extra` within the `gatsby-plugin-feed` plugin.  This fix is crucial for maintaining plugin stability and functionality.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-feed/CHANGELOG.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nupdate dependency fs-extra to ^11.2.0 [#38727](https://github.com/gatsbyjs/gatsby/issues/38727) ([cb33fe5](https://github.com/gatsbyjs/gatsby/commit/cb33fe5d02b3a42cf629baf948a7aae7a9e7dd0f))\n```\n\n----------------------------------------\n\nTITLE: Sorting Typography Style Tag - JavaScript\nDESCRIPTION: This commit addresses a bug where typography styles were being overwritten. By sorting the typography style tag to be first, it avoids these overwriting issues. This relates to issue #12295.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-typography/CHANGELOG.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\n**gatsby-plugin-typography:** sort typography style tag first to avoid overwriting issues ([#12295](https://github.com/gatsbyjs/gatsby/issues/12295)) ([5caf95e](https://github.com/gatsbyjs/gatsby/commit/5caf95e))\n```\n\n----------------------------------------\n\nTITLE: Formatting Changelog Files\nDESCRIPTION: This commit includes a chore to format the changelog files. The formatting ensures consistency and readability of the changelog.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-cxs/CHANGELOG.md#_snippet_7\n\n\n\n----------------------------------------\n\nTITLE: Updating Packages in Gatsby\nDESCRIPTION: This code snippet updates packages within the Gatsby ecosystem, providing bug fixes and improvements. It ensures the project dependencies are current and compatible.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-screenshot/CHANGELOG.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\ne65dd1e\n```\n\n----------------------------------------\n\nTITLE: Fixing resolve call in babel-preset-gatsby\nDESCRIPTION: This commit adds a missing `resolve` call in the babel-preset-gatsby package. The resolve call is likely used to correctly resolve module paths, ensuring that Babel can find and process necessary files. Missing resolve calls can lead to errors during the Babel transformation process.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/babel-preset-gatsby/CHANGELOG.md#_snippet_13\n\n\n\n----------------------------------------\n\nTITLE: Updating Package Versions\nDESCRIPTION: Several entries indicate updates to minor and patch versions of gatsby-source-npm-package-search. These updates likely include bug fixes, minor feature enhancements, or dependency updates. Package updates are a common maintenance task that ensures compatibility, stability, and security.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-npm-package-search/CHANGELOG.md#_snippet_12\n\nLANGUAGE: Text\nCODE:\n```\nupdate minor and patch for gatsby-source-npm-package-search [#29184](https://github.com/gatsbyjs/gatsby/issues/29184) ([f70af26](https://github.com/gatsbyjs/gatsby/commit/f70af26de3218f833a4cc8b8559f083f6d84b27d))\n```\n\n----------------------------------------\n\nTITLE: Correcting Links in Package Changelogs\nDESCRIPTION: This snippet represents a bug fix that corrects links in package changelogs. The referenced issue and commit provide further context.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-smartypants/CHANGELOG.md#_snippet_8\n\nLANGUAGE: None\nCODE:\n```\n- correct links in package changelogs ([#15630](https://github.com/gatsbyjs/gatsby/issues/15630)) ([d07b9dd](https://github.com/gatsbyjs/gatsby/commit/d07b9dd))\n```\n\n----------------------------------------\n\nTITLE: Updating History Dependency\nDESCRIPTION: Updates the `history` dependency to version ^5.3.0 for the `gatsby-react-router-scroll` package. This update likely incorporates bug fixes, performance improvements, or new features from the `history` library, which manages browser history.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-react-router-scroll/CHANGELOG.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nupdate dependency history to ^5.3.0 for gatsby-react-router-scroll [#37590](https://github.com/gatsbyjs/gatsby/issues/37590) ([7998baa](https://github.com/gatsbyjs/gatsby/commit/7998baa2f99cd9552e0e604d32411c53a9adc676))\n```\n\n----------------------------------------\n\nTITLE: Gatsby Schema Rebuilding Feature\nDESCRIPTION: This feature introduces schema rebuilding capabilities within Gatsby. This allows for dynamic updates to the GraphQL schema based on changes in data or plugins. This functionality was implemented in response to issue #19092.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-remark/CHANGELOG.md#_snippet_15\n\n\n\n----------------------------------------\n\nTITLE: Chore: Update babel monorepo\nDESCRIPTION: This snippet documents a chore in version 5.4.0 of the gatsby-source-graphql plugin. It updates the Babel monorepo, likely involving updates to build tools and dependencies related to JavaScript transpilation within the Gatsby environment.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-graphql/CHANGELOG.md#_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Adding cache for remote thumbnails (JavaScript)\nDESCRIPTION: This commit adds a cache for remote thumbnails in gatsby-source-contentful to improve performance. This cache stores thumbnails fetched from Contentful, reducing the need to repeatedly download them.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-contentful/CHANGELOG.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n7abf4d7\n```\n\n----------------------------------------\n\nTITLE: Updating Babel Monorepo in gatsby-plugin-page-creator\nDESCRIPTION: This snippet updates the Babel monorepo. Updating Babel ensures compatibility and access to the latest language features and optimizations.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-page-creator/CHANGELOG.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nupdate babel monorepo [#37568](https://github.com/gatsbyjs/gatsby/issues/37568) ([13a0a9e](https://github.com/gatsbyjs/gatsby/commit/13a0a9e83dcb015b65dff6b73cdd5dea09c2988f))\n```\n\n----------------------------------------\n\nTITLE: Bumping babel minor version\nDESCRIPTION: This snippet describes bumping the babel minor version. This update is intended to update babel dependencies.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-asciidoc/CHANGELOG.md#_snippet_13\n\nLANGUAGE: Text\nCODE:\n```\nbump babel minor [#31857](https://github.com/gatsbyjs/gatsby/issues/31857) [#31859](https://github.com/gatsbyjs/gatsby/issues/31859) ([8636025](https://github.com/gatsbyjs/gatsby/commit/863602567930a39142ed33d9d1f1813b7dec8686))\n```\n\n----------------------------------------\n\nTITLE: Registering a GraphQL field in WordPress with PHP\nDESCRIPTION: This PHP snippet registers a new field named testGatsbyField on the Post type in the WPGraphQL schema. The field returns a string value of 'gatsby test!'.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-wordpress/docs/features/graphql-wordpress-and-gatsby.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nadd_action('graphql_register_types', function() {\n  register_graphql_field( 'Post', 'testGatsbyField', [\n    'type' => 'String',\n    'description' => __( 'Test field for demonstration', 'your-textdomain' ),\n    'resolve' => function() {\n      return 'gatsby test!';\n    }\n  ]);\n});\n```\n\n----------------------------------------\n\nTITLE: Upgrading axios dependency in Gatsby\nDESCRIPTION: This chore upgrades the axios dependency within the gatsby-source-hacker-news package. It aims to improve the plugin's stability and security by using the latest version of axios.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-hacker-news/CHANGELOG.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nupgrade axios [#38698](https://github.com/gatsbyjs/gatsby/issues/38698) ([e2b3ea3](https://github.com/gatsbyjs/gatsby/commit/e2b3ea3fbfa70b226f6c5c677efedc83f5386cce))\n```\n\n----------------------------------------\n\nTITLE: Fixing typo in README Markdown\nDESCRIPTION: This commit fixes a typo in the README file for the gatsby-remark-autolink-headers plugin. The change was made as part of chore updates.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-autolink-headers/CHANGELOG.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\nFix typo in README Fix [#37812](https://github.com/gatsbyjs/gatsby/issues/37812) ([468b4f6](https://github.com/gatsbyjs/gatsby/commit/468b4f691c0cc9cfc4092258874c426bbcdd6093))\n```\n\n----------------------------------------\n\nTITLE: Bug Fix: Wrap Ignore Pattern in Quotes\nDESCRIPTION: This snippet addresses an issue where ignore patterns were not properly wrapped in quotes, potentially causing errors. This bug fix ensures that ignore patterns are correctly formatted, preventing parsing issues. No specific dependencies are mentioned.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-json/CHANGELOG.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n7563db6\n```\n\n----------------------------------------\n\nTITLE: Updating Bluebird Dependency in gatsby-source-wordpress to ^3.5.5\nDESCRIPTION: This commit updates the bluebird dependency to version ^3.5.5 in the gatsby-source-wordpress package. This update likely includes bug fixes and performance improvements.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-wordpress/CHANGELOG.md#_snippet_8\n\nLANGUAGE: Commit Message\nCODE:\n```\nec0be83\n```\n\n----------------------------------------\n\nTITLE: Find Alias in autoindex.conf on Red Hat/CentOS (Shell)\nDESCRIPTION: This command uses cat and grep to find and display the line in the autoindex.conf file that defines the alias for the /icons/ directory. This confirms the existence and content of the problematic alias.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-manifest/README.md#_snippet_20\n\nLANGUAGE: Shell\nCODE:\n```\ncat /etc/httpd/conf.d/autoindex.conf | grep \"Alias /icons/\"\n```\n\n----------------------------------------\n\nTITLE: Use Embedded Remote Schemas\nDESCRIPTION: This code snippet describes the use of embedded remote schemas within the gatsby-source-graphql plugin. This allows for more efficient retrieval and processing of remote GraphQL schemas.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-graphql/CHANGELOG.md#_snippet_31\n\nLANGUAGE: diff\nCODE:\n```\n**gatsby-source-graphql:** use embedded remote schemas ([#20042](https://github.com/gatsbyjs/gatsby/issues/20042)) ([5bc8b79](https://github.com/gatsbyjs/gatsby/commit/5bc8b79))\n```\n\n----------------------------------------\n\nTITLE: Example Node Structure\nDESCRIPTION: Demonstrates a node structure with fields 'id', 'a', 'b', and 'internal' used in Gatsby's indexing process.  This node serves as the basis for understanding how different fields are indexed and materialized.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby/src/datastore/lmdb/query/README.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst a1 = {\n  id: \"a1\",\n  a: \"foo\",\n  b: [\"bar\", \"baz\"],\n  internal: { type: \"A\" },\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Minor and Patch Dependencies\nDESCRIPTION: This commit updates minor and patch dependencies for the gatsby-transformer-remark package. This aims to improve security, stability, and performance by incorporating the latest updates from the package's dependencies.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-remark/CHANGELOG.md#_snippet_5\n\nLANGUAGE: None\nCODE:\n```\nupdate minor and patch dependencies for gatsby-transformer-remark [#32613](https://github.com/gatsbyjs/gatsby/issues/32613) ([a1b315f](https://github.com/gatsbyjs/gatsby/commit/a1b315f4976e1760c380fb8404f04cde4659927e))\n```\n\n----------------------------------------\n\nTITLE: CSS for Line Numbering Only\nDESCRIPTION: This CSS configures the style for when only line numbers are used without line highlighting.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-prismjs/README.md#_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n/**\n * If you only want to use line numbering\n */\n\n.gatsby-highlight {\n  background-color: #fdf6e3;\n  border-radius: 0.3em;\n  margin: 0.5em 0;\n  padding: 1em;\n  overflow: auto;\n}\n\n.gatsby-highlight pre[class*=\"language-\"].line-numbers {\n  padding: 0;\n  padding-left: 2.8em;\n  overflow: initial;\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Patches for v5 Chore JavaScript\nDESCRIPTION: This commit applies patches specifically for version 5 of the gatsby-plugin-catch-links package, addressing issue #36796. These patches likely contain fixes or adjustments needed for compatibility with Gatsby v5. This ensures that the plugin functions correctly and integrates smoothly with the latest Gatsby features.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-catch-links/CHANGELOG.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\napply patches for v5 [#36796](https://github.com/gatsbyjs/gatsby/issues/36796) ([25f79b6](https://github.com/gatsbyjs/gatsby/commit/25f79b6c3719fdf09584ade620a05c66ba2a697c))\n```\n\n----------------------------------------\n\nTITLE: Updating PostCSS Loader Dependency to ^7.3.0\nDESCRIPTION: This code snippet shows the update of the `postcss-loader` dependency to version `^7.3.0` for the `gatsby-plugin-postcss` package. This update likely incorporates bug fixes, performance improvements, or new features available in the updated `postcss-loader` version.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-postcss/CHANGELOG.md#_snippet_3\n\nLANGUAGE: none\nCODE:\n```\nupdate dependency postcss-loader to ^7.3.0 for gatsby-plugin-postcss [#38021](https://github.com/gatsbyjs/gatsby/issues/38021) ([fbf5ad1](https://github.com/gatsbyjs/gatsby/commit/fbf5ad1546ec74d1f2faae9eb8cde943edcd0d45))\n```\n\n----------------------------------------\n\nTITLE: Applying Patches for v4\nDESCRIPTION: This change applies patches specifically for version 4. These patches likely address bugs or improve compatibility for users upgrading to or using version 4 of the gatsby-remark-responsive-iframe package.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-responsive-iframe/CHANGELOG.md#_snippet_3\n\nLANGUAGE: Text\nCODE:\n```\napply patches for v4 [#33170](https://github.com/gatsbyjs/gatsby/issues/33170) ([f8c5141](https://github.com/gatsbyjs/gatsby/commit/f8c5141bf72108a53338fd01514522ae7a1b37bf))\n```\n\n----------------------------------------\n\nTITLE: Attempt RCE via JavaScript Frontmatter (Gatsby)\nDESCRIPTION: This JavaScript snippet is designed to be placed within the frontmatter of a Gatsby page. If executed, it would attempt to write a file to the Cypress fixtures directory and log a stack trace, demonstrating a remote code execution (RCE) vulnerability. The test aims to verify that Gatsby prevents execution of JavaScript within frontmatter by default.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/e2e-tests/mdx/src/posts/frontmatter-engine/js-frontmatter.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n(() => {\nrequire(`fs`).writeFileSync(`${process.cwd()}/cypress/fixtures/file-to-attempt-rce-on.txt`, (new Error('Helpful stack trace if this does execute. It should not execute.')).stack)\nconsole.trace()\nreturn {\ntitle: `I should not be parsed`\n}\n})()\n```\n\n----------------------------------------\n\nTITLE: Bump node min version in Gatsby\nDESCRIPTION: This commit bumps the minimum required Node.js version for Gatsby to 10.13.0.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-page-creator/CHANGELOG.md#_snippet_36\n\nLANGUAGE: plaintext\nCODE:\n```\n**gatsby:** bump node min version to 10.13.0 ([#22400](https://github.com/gatsbyjs/gatsby/issues/22400)) ([83d681a](https://github.com/gatsbyjs/gatsby/commit/83d681a))\n```\n\n----------------------------------------\n\nTITLE: Fixing Babel Monorepo in gatsby-plugin-no-sourcemaps\nDESCRIPTION: This commit addresses a bug by updating the Babel monorepo dependency for the gatsby-plugin-no-sourcemaps package. It ensures compatibility and stability by resolving potential issues related to the Babel dependency.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-no-sourcemaps/CHANGELOG.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n#### Bug Fixes\n\n- update babel monorepo [#37568](https://github.com/gatsbyjs/gatsby/issues/37568) ([13a0a9e](https://github.com/gatsbyjs/gatsby/commit/13a0a9e83dcb015b65dff6b73cdd5dea09c2988f))\n```\n\n----------------------------------------\n\nTITLE: Fix: Update babel monorepo in gatsby-plugin-image\nDESCRIPTION: This snippet updates the babel monorepo in the gatsby-plugin-image package. This fix addresses potential issues related to the babel versions being used.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-image/CHANGELOG.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nupdate babel monorepo [#37568](https://github.com/gatsbyjs/gatsby/issues/37568) ([13a0a9e](https://github.com/gatsbyjs/gatsby/commit/13a0a9e83dcb015b65dff6b73cdd5dea09c2988f))\n```\n\n----------------------------------------\n\nTITLE: Adding Missing Colon for Fallback SRC\nDESCRIPTION: This code snippet adds a missing colon for the fallback src in gatsby-remark-images-contentful. The colon is necessary for the fallback image source to be correctly rendered in case the primary image fails to load.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-images-contentful/CHANGELOG.md#_snippet_43\n\nLANGUAGE: none\nCODE:\n```\n- **gatsby-remark-images-contentful:** add in missing colon for the fallback src ([#10041](https://github.com/gatsbyjs/gatsby/issues/10041)) ([313190b](https://github.com/gatsbyjs/gatsby/commit/313190b))\n```\n\n----------------------------------------\n\nTITLE: Skipping jsonapi_schema Endpoint in Gatsby Source Drupal\nDESCRIPTION: This code snippet implements skipping the `jsonapi_schema` endpoint while sourcing data from Drupal in Gatsby, avoiding unnecessary processing and potential issues.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-drupal/CHANGELOG.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nskip jsonapi_schema endpoint\n```\n\n----------------------------------------\n\nTITLE: Adding pluginOptionsSchema Validation in Gatsby\nDESCRIPTION: This snippet adds pluginOptionsSchema validation. The addition is part of a chore and addresses issue #27600 in the Gatsby repository. It enhances plugin configuration validation for improved developer experience.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-cxs/CHANGELOG.md#_snippet_17\n\nLANGUAGE: Text\nCODE:\n```\nAdd pluginOptionsSchema validation [#27600](https://github.com/gatsbyjs/gatsby/issues/27600) ([66151eb](https://github.com/gatsbyjs/gatsby/commit/66151eb2dbc2dfe09df72ae18f5e87cf20740f61))\n```\n\n----------------------------------------\n\nTITLE: Fix createContentDigest Usage in gatsby-transformer-toml\nDESCRIPTION: This commit fixes an issue with the createContentDigest usage within the gatsby-transformer-toml plugin. The fix addresses issue #13112.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-toml/CHANGELOG.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\n/**\n* Bug Fixes\n*/\n- **gatsby-transformer-toml:** Fix createContentDigest usage ([#13118](https://github.com/gatsbyjs/gatsby/issues/13118)) ([506d7c3](https://github.com/gatsbyjs/gatsby/commit/506d7c3)), closes [#13112](https://github.com/gatsbyjs/gatsby/issues/13112)\n```\n\n----------------------------------------\n\nTITLE: Updating babel monorepo in gatsby-remark-katex\nDESCRIPTION: This commit updates the babel monorepo. This chore aims to bring in the latest fixes and improvements from the babel packages, ensuring compatibility and stability for the gatsby-remark-katex plugin.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-katex/CHANGELOG.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nupdate babel monorepo [#27528](https://github.com/gatsbyjs/gatsby/issues/27528) ([539dbb0](https://github.com/gatsbyjs/gatsby/commit/539dbb09166e346a6cee568973d2de3d936e8ef3))\n```\n\n----------------------------------------\n\nTITLE: Updating Peer Dependencies in Javascript\nDESCRIPTION: This snippet updates the peer dependencies for the gatsby-plugin-schema-snapshot. It addresses issue #36965 on the Gatsby repository.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-plugin-schema-snapshot/CHANGELOG.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nUpdate peerDeps [#36965](https://github.com/gatsbyjs/gatsby/issues/36965) ([b624442](https://github.com/gatsbyjs/gatsby/commit/b6244424fe8b724cbc23b80b2b4f5424cc2055a4))\n```\n\n----------------------------------------\n\nTITLE: Updating minor updates in gatsby-remark-katex\nDESCRIPTION: This commit updates minor dependencies within the package, excluding react, babel, and eslint. The update aims to integrate the latest bug fixes and enhancements from other dependencies.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-katex/CHANGELOG.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nupdate minor updates in packages except react, babel and eslint ([#17716](https://github.com/gatsbyjs/gatsby/issues/17716)) ([af39ae3](https://github.com/gatsbyjs/gatsby/commit/af39ae3))\n```\n\n----------------------------------------\n\nTITLE: Updating Babel Monorepo - Chore (2)\nDESCRIPTION: This chore updates the Babel monorepo to a newer version. Babel is a JavaScript compiler, and updating it ensures compatibility with the latest JavaScript features and improvements. The issue and commit associated with this update are included. This is a duplicate entry with a different commit.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-documentationjs/CHANGELOG.md#_snippet_8\n\nLANGUAGE: N/A\nCODE:\n```\nupdate babel monorepo [#32238](https://github.com/gatsbyjs/gatsby/issues/32238) ([466d4c0](https://github.com/gatsbyjs/gatsby/commit/466d4c087bbc96abb942a02c67243bcc9a4f2a0a))\n```\n\n----------------------------------------\n\nTITLE: GraphQL query with custom typeName\nDESCRIPTION: Example of a GraphQL query using the custom `typeName` configured in the previous snippet.  Shows how to query all YAML nodes using the specified type.\nSOURCE: https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-transformer-yaml/README.md#_snippet_8\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  allYaml {\n    edges {\n      node {\n        value\n      }\n    }\n  }\n}\n```"
  }
]