[
  {
    "owner": "flightcontrol-master",
    "repo": "moose",
    "content": "TITLE: Creating a Hello World Message with MOOSE in Lua\nDESCRIPTION: A simple one-line Lua script that uses the MOOSE framework's MESSAGE class to display a greeting to all players. This demonstrates the basic functionality of sending messages to all players in a DCS mission with a 35-second display duration.\nSOURCE: https://github.com/flightcontrol-master/moose/blob/master/docs/beginner/hello-world-build.md#2025-04-22_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nMESSAGE:New( \"Hello World! This messages is printed by MOOSE\", 35, \"INFO\" ):ToAll()\n```\n\n----------------------------------------\n\nTITLE: Simple MOOSE Message Script in Lua\nDESCRIPTION: A basic Lua script that uses MOOSE's MESSAGE class to display a 'Hello World' message to all players in DCS World. The message is configured to show for 35 seconds with an 'INFO' type.\nSOURCE: https://github.com/flightcontrol-master/moose/blob/master/docs/beginner/hello-world.md#2025-04-22_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n--\n-- Simple example mission to show the very basics of MOOSE\n--\nMESSAGE:New( \"Hello World! This messages is printed by MOOSE\", 35, \"INFO\" ):ToAll()\n```\n\n----------------------------------------\n\nTITLE: Dynamic Loading of Lua Scripts in DCS World\nDESCRIPTION: Demonstrates different methods for dynamically loading Lua script files in DCS World missions, including using dofile() and loadfile() functions with various path formats.\nSOURCE: https://github.com/flightcontrol-master/moose/blob/master/docs/advanced/concepts.md#2025-04-22_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\ndofile('C:/MyScripts/hello-world.lua')\ndofile('C:\\\\MyScripts\\\\hello-world.lua')\ndofile([[C:\\MyScripts\\hello-world.lua]])\n```\n\nLANGUAGE: lua\nCODE:\n```\ndofile(lfs.writedir() .. '/Missions/hello-world.lua')\n```\n\nLANGUAGE: lua\nCODE:\n```\nassert(loadfile('C:/MyScripts/hello-world.lua'))()\nassert(loadfile('C:\\\\MyScripts\\\\hello-world.lua'))()\nassert(loadfile([[C:\\MyScripts\\hello-world.lua]]))()\n```\n\n----------------------------------------\n\nTITLE: Executing Text-to-Speech Command with DCS-SR-ExternalAudio\nDESCRIPTION: This PowerShell command generates a text-to-speech message and sends it to a specific radio frequency. It demonstrates the basic usage of the DCS-SR-ExternalAudio tool for TTS in DCS.\nSOURCE: https://github.com/flightcontrol-master/moose/blob/master/docs/advanced/text-to-speech.md#2025-04-22_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n.\\DCS-SR-ExternalAudio.exe -t \"Hello Moosers\" -f 251 -m AM -c 2\n```\n\n----------------------------------------\n\nTITLE: Automatic Dynamic Loading of Mission Scripts in DCS World\nDESCRIPTION: Implements a system for automatically loading mission scripts from the hard drive if available, falling back to the embedded script in the mission file. Requires de-sanitizing MissionScripting.lua.\nSOURCE: https://github.com/flightcontrol-master/moose/blob/master/docs/advanced/concepts.md#2025-04-22_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n-- Use script file from hard disk instead of the one included in the .miz file\nif lfs and io then\n  MissionScript = lfs.writedir() .. '/Missions/hello-world-autodyn.lua'\n  -- Check if the running skript is from temp directory to avoid an endless loop\n  if string.find( debug.getinfo(1).source, lfs.tempdir() ) then\n    local f=io.open(MissionScript,\"r\")\n    if f~=nil then\n      io.close(f)\n\n      env.info( '*** LOAD MISSION SCRIPT FROM HARD DISK *** ' )\n      dofile(MissionScript)\n      do return end\n    end\n  end\nelse\n  env.error( '*** LOAD MISSION SCRIPT FROM HARD DISK FAILED (Desanitize lfs and io)*** ' )\nend\n\n--\n-- Simple example mission to show the very basics of MOOSE\n--\nMESSAGE:New( \"Hello World! This messages is printed by MOOSE!\", 35, \"INFO\" ):ToAll():ToLog()\n```\n\n----------------------------------------\n\nTITLE: Modified MissionScripting.lua with Sanitization Disabled\nDESCRIPTION: The modified version of MissionScripting.lua with sanitization disabled for os, io, and lfs modules. This configuration enables full MOOSE functionality including file operations and system commands, but comes with security risks.\nSOURCE: https://github.com/flightcontrol-master/moose/blob/master/docs/advanced/desanitize-dcs.md#2025-04-22_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\ndo\n\t--sanitizeModule('os')\n\t--sanitizeModule('io')\n\t--sanitizeModule('lfs')\n\t_G['require'] = nil\n\t_G['loadlib'] = nil\n\t_G['package'] = nil\nend\n```\n\n----------------------------------------\n\nTITLE: Using Google TTS with DCS-SR-ExternalAudio\nDESCRIPTION: This command demonstrates how to use Google Cloud Text-to-Speech API with DCS-SR-ExternalAudio. It requires a Google Cloud account and a JSON key file for authentication.\nSOURCE: https://github.com/flightcontrol-master/moose/blob/master/docs/advanced/text-to-speech.md#2025-04-22_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n.\\DCS-SR-ExternalAudio.exe -t \"Hello Moosers\" -f 251 -m AM -c 2 -z -G .\\yourgoogleaccount.json\n```\n\n----------------------------------------\n\nTITLE: Running Lua Script to Create Moose.lua\nDESCRIPTION: Executes a Lua script to generate the Moose.lua file, which is a core component of the MOOSE framework. This step is performed twice, once for a static version and once for a dynamic version used by developers.\nSOURCE: https://github.com/flightcontrol-master/moose/blob/master/docs/developer/buildsystem/build-includes.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./Moose Setup/Moose_Create.lua\n```\n\n----------------------------------------\n\nTITLE: Building MOOSE Documentation with Docker Compose\nDESCRIPTION: Instructions for using Docker Compose to generate a local preview of the MOOSE class documentation. This setup creates the necessary folder structure, installs dependencies, and runs the LuaDocumentor tool.\nSOURCE: https://github.com/flightcontrol-master/moose/blob/master/docs/developer/buildsystem/build-docs.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up\n```\n\n----------------------------------------\n\nTITLE: Running Local GitHub Actions Builds with Act\nDESCRIPTION: Commands to execute specific GitHub Actions workflows locally using Act. These commands trigger the build-includes and build-docs workflows for the MOOSE project.\nSOURCE: https://github.com/flightcontrol-master/moose/blob/master/docs/developer/buildsystem/local-test.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nact push -W .github/workflows/build-includes.yml\n```\n\nLANGUAGE: bash\nCODE:\n```\nact push -W .github/workflows/build-docs.yml\n```\n\n----------------------------------------\n\nTITLE: Compressing Lua Code with LuaSrcDiet\nDESCRIPTION: Uses LuaSrcDiet to compress the Lua code and create the Moose_.lua file. This step optimizes the code for distribution and usage.\nSOURCE: https://github.com/flightcontrol-master/moose/blob/master/docs/developer/buildsystem/build-includes.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nluasrcdiet Moose.lua -o Moose_.lua\n```\n\n----------------------------------------\n\nTITLE: Accessing Windows Saved Games Directory via Environment Variable\nDESCRIPTION: A command that uses the Windows environment variable %userprofile% to quickly access the Saved Games folder where DCS stores user-specific configuration data and mission files.\nSOURCE: https://github.com/flightcontrol-master/moose/blob/master/docs/beginner/tipps-and-tricks.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n%userprofile%\\Saved Games\n```\n\n----------------------------------------\n\nTITLE: Original DCS MissionScripting.lua File with Sanitization Enabled\nDESCRIPTION: The default DCS MissionScripting.lua file with security measures enabled that restrict access to os, io, and lfs modules for mission scripts. This configuration prevents potentially harmful operations but limits some MOOSE framework functionality.\nSOURCE: https://github.com/flightcontrol-master/moose/blob/master/docs/advanced/desanitize-dcs.md#2025-04-22_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n--Initialization script for the Mission lua Environment (SSE)\n\ndofile('Scripts/ScriptingSystem.lua')\n\n-- Sanitize Mission Scripting environment\n-- This makes unavailable some unsecure functions. \n-- Mission downloaded from server to client may contain potentialy harmful lua code\n-- that may use these functions.\n-- You can remove the code below and make availble these functions at your own risk.\n\nlocal function sanitizeModule(name)\n\t_G[name] = nil\n\tpackage.loaded[name] = nil\nend\n\ndo\n\tsanitizeModule('os')\n\tsanitizeModule('io')\n\tsanitizeModule('lfs')\n\t_G['require'] = nil\n\t_G['loadlib'] = nil\n\t_G['package'] = nil\nend\n```\n\n----------------------------------------\n\nTITLE: Running LuaCheck for Error Detection\nDESCRIPTION: Executes LuaCheck to perform static code analysis and linting on the Lua code. This step helps identify potential errors in the codebase, although warnings are ignored due to their volume and complexity.\nSOURCE: https://github.com/flightcontrol-master/moose/blob/master/docs/developer/buildsystem/build-includes.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nluacheck .\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Personal Access Token for Act\nDESCRIPTION: Instructions for storing a Personal Access Token in the .secrets file to authenticate GitHub API requests when running builds locally. This token is used by the build process and is kept out of version control via .gitignore.\nSOURCE: https://github.com/flightcontrol-master/moose/blob/master/docs/developer/buildsystem/local-test.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nBOT_TOKEN=<your PAT>\n```\n\n----------------------------------------\n\nTITLE: Navigating to SRS Install Directory in PowerShell\nDESCRIPTION: This command changes the current directory to the default installation folder of DCS Simple Radio Standalone. It's necessary for running the TTS commands.\nSOURCE: https://github.com/flightcontrol-master/moose/blob/master/docs/advanced/text-to-speech.md#2025-04-22_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\ncd 'C:\\Program Files\\DCS-SimpleRadio-Standalone\\'\n```\n\n----------------------------------------\n\nTITLE: Running GitHub Pages Preview with Docker Compose\nDESCRIPTION: Instructions for running a local preview of the documentation site using Docker Compose. Requires Docker installation and access to the docs subfolder.\nSOURCE: https://github.com/flightcontrol-master/moose/blob/master/docs/developer/buildsystem/gh-pages.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up\n```\n\n----------------------------------------\n\nTITLE: Running Linkinator Check with Docker Compose\nDESCRIPTION: Commands for running linkinator tool to check for broken links in the documentation using Docker Compose. Must be executed from the docker/gh-pages-check subfolder.\nSOURCE: https://github.com/flightcontrol-master/moose/blob/master/docs/developer/buildsystem/gh-pages.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up\n```\n\n----------------------------------------\n\nTITLE: Building Docker Container for Local Preview\nDESCRIPTION: Runs a Docker Compose command to create and start a container for building a local preview of the include files. This allows developers to test and verify the build process in a controlled environment.\nSOURCE: https://github.com/flightcontrol-master/moose/blob/master/docs/developer/buildsystem/build-includes.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration\nDESCRIPTION: Jekyll page configuration metadata defining the page layout, title, parent page relationship, and navigation order.\nSOURCE: https://github.com/flightcontrol-master/moose/blob/master/docs/developer/buildsystem/index.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: default\ntitle: Build system\nparent: Developer\nhas_children: true\nnav_order: 99\n---\n```\n\n----------------------------------------\n\nTITLE: Markdown Table of Contents Configuration\nDESCRIPTION: Configuration for generating table of contents in Jekyll-based markdown document using special annotations.\nSOURCE: https://github.com/flightcontrol-master/moose/blob/master/docs/beginner/demo-missions.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. Table of contents\n{:toc}\n```\n\n----------------------------------------\n\nTITLE: Markdown Note Block for Step-by-Step Approach\nDESCRIPTION: Additional note block emphasizing the importance of incremental changes when modifying scripts.\nSOURCE: https://github.com/flightcontrol-master/moose/blob/master/docs/beginner/demo-missions.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n{: .note }\n> But it is wise to do this in small steps. So it is easier to find errors.\n```\n\n----------------------------------------\n\nTITLE: Markdown Note Block Configuration\nDESCRIPTION: Custom note block formatting for documentation using Jekyll-style markup.\nSOURCE: https://github.com/flightcontrol-master/moose/blob/master/docs/beginner/demo-missions.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{: .note }\n> The documentation is quite long and might be confusing for beginners.\n> Start by looking at the description at the top of the documentation of a\n> class. It often contains examples and explanations. <br /><br />\n> Then search for the function names and look at the description of the\n> functions and its parameters.\n```"
  }
]