[
  {
    "owner": "magnitudedev",
    "repo": "magnitude",
    "content": "TITLE: Defining a Basic Test Case in Magnitude (TypeScript)\nDESCRIPTION: This snippet demonstrates how to define a basic test case in Magnitude, including adding steps with descriptions. It shows the basic structure of a Magnitude test case, starting with the `test` function and chaining `step` calls. Each step represents a specific action performed by the user in the application being tested.\nSOURCE: https://github.com/magnitudedev/magnitude/blob/main/docs/core-concepts/building-test-cases.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntest('can add and remove todos')\n    .step('Add a todo')\n    .step('Remove the todo')\n```\n\n----------------------------------------\n\nTITLE: Example Magnitude test case\nDESCRIPTION: This TypeScript code demonstrates a basic Magnitude test case. It imports the `test` function from the `magnitude-test` package and defines a test named 'can log in and create company'. The test includes steps for logging in and creating a new company, along with data inputs and natural language assertions.\nSOURCE: https://github.com/magnitudedev/magnitude/blob/main/docs/getting-started/quickstart.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { test } from 'magnitude-test';\n\ntest('can log in and create company')\n    .step('Log in to the app')\n        .data({ username: 'test-user@magnitude.run', password: 'test' }) // any key/values\n        .check('Can see dashboard') // natural language assertion\n    .step('Create a new company')\n        .data('Make up the first 2 values and use defaults for the rest')\n        .check('Company added successfully');\n```\n\n----------------------------------------\n\nTITLE: Defining Magnitude Test Case (Typescript)\nDESCRIPTION: This code snippet shows an example of how to define a Magnitude test case in TypeScript.  It showcases the use of `test`, `step`, `data`, and `check` methods to structure the test flow, input data, and assertions. The test case covers the scenario of logging in and creating a company.\nSOURCE: https://github.com/magnitudedev/magnitude/blob/main/README.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { test } from 'magnitude-test';\n\ntest('can log in and create company')\n    .step('Log in to the app')\n        .data({ username: 'test-user@magnitude.run', password: 'test' }) // any key/values\n        .check('Can see dashboard') // natural language assertion\n    .step('Create a new company')\n        .data('Make up the first 2 values and use defaults for the rest')\n        .check('Company added successfully');\n```\n\n----------------------------------------\n\nTITLE: Defining Test Steps with Checks and Data (Magnitude, Typescript)\nDESCRIPTION: This code snippet demonstrates how to define test steps with associated data and checks using the Magnitude testing framework in Typescript. It shows the chaining of `.step()`, `.data()`, `.secureData()`, and `.check()` methods.  Environment variables are used for sensitive data.\nSOURCE: https://github.com/magnitudedev/magnitude/blob/main/docs/reference/test-steps.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntest('can log in and out')\n    .step('Log in to the app')\n        .data({ email: \"foo@bar.com\" })\n        .secureData({ password: process.env.SUPER_SECRET_PASSWORD })\n        .check('Can see dashboard')\n    .step('Log out')\n        .check(\"User is logged out\");\n```\n\n----------------------------------------\n\nTITLE: Adding Checks to Test Steps in Magnitude (TypeScript)\nDESCRIPTION: This snippet demonstrates how to add a check to a step in a Magnitude test case. A check is a natural language visual assertion that validates the state of the application after the step is executed. It uses the `check` method chained to the `step` method to add an assertion.\nSOURCE: https://github.com/magnitudedev/magnitude/blob/main/docs/core-concepts/building-test-cases.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntest('example')\n    .step('Log in')\n        .check('Dashboard is visible')\n```\n\n----------------------------------------\n\nTITLE: Magnitude CLI Arguments & Options\nDESCRIPTION: This describes the available arguments and options for the Magnitude CLI. The `filter` argument allows specifying a glob pattern for test files. Options include `-w` for setting the number of workers, `-p` for plain output, and `-d` for debug logs. These options modify the test execution behavior.\nSOURCE: https://github.com/magnitudedev/magnitude/blob/main/docs/reference/cli.mdx#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nUsage: magnitude [options] [command] [filter]\n\nRun Magnitude test cases\n\nArguments:\n  filter                  glob pattern for test files (quote if contains spaces or wildcards)\n\nOptions:\n  -w, --workers <number>  number of parallel workers for test execution (default: \"1\")\n  -p, --plain             disable pretty output and print lines instead\n  -d, --debug             enable debug logs\n  -h, --help              display help for command\n\nCommands:\n  init                    Initialize Magnitude test directory structure\n```\n\n----------------------------------------\n\nTITLE: Configuring NPM Scripts for Playwright and Magnitude\nDESCRIPTION: This JSON snippet demonstrates how to configure npm scripts to run Playwright tests, Magnitude tests, or both test suites sequentially using the `npx` command-line tool.  It defines three scripts: `test:playwright` runs Playwright tests, `test:magnitude` runs Magnitude tests, and `test:all` runs both suites using `&&` to ensure Playwright completes before Magnitude.\nSOURCE: https://github.com/magnitudedev/magnitude/blob/main/docs/integrations/playwright.mdx#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"scripts\": [\n        \"test:playwright\": \"npx playwright test\",\n        \"test:magnitude\": \"npx magnitude\",\n        \"test:all\": \"npx playwright test && npx magnitude\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Magnitude Test Case Equivalent (TypeScript)\nDESCRIPTION: This snippet demonstrates the equivalent test case to the Playwright example, but implemented using Magnitude. It shows how to create and check todo items. It leverages the `step`, `data` and `check` methods to represent the same user flow as the Playwright example in a more concise and natural language-oriented manner. `TODO_ITEMS` is assumed to be defined elsewhere.\nSOURCE: https://github.com/magnitudedev/magnitude/blob/main/docs/core-concepts/building-test-cases.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ntest('should allow me to add todo items')\n    .step('Create todo')\n        .data(TODO_ITEMS[0])\n        .check('First todo appears in list')\n    .step('Create another todo')\n        .data(TODO_ITEMS[1])\n        .check('List has two todos')\n```\n\n----------------------------------------\n\nTITLE: Configuring Planner Model in magnitude.config.ts (Typescript)\nDESCRIPTION: This snippet demonstrates how to configure the planner model in `magnitude.config.ts` using the Anthropic provider. It shows the required `provider` and `options` properties, including the `model` and `apiKey`. The snippet imports `MagnitudeConfig` and provides an example of its usage.\nSOURCE: https://github.com/magnitudedev/magnitude/blob/main/docs/reference/llm-configuration.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type MagnitudeConfig } from 'magnitude-test';\n\nexport default {\n    url: \"http://localhost:5173\",\n    planner: {\n        provider: 'anthropic', // your provider of choice\n        options: {\n            // any required + optional configuration for that provider\n            model: 'claude-3-7-sonnet-latest',\n            apiKey: process.env.ANTHROPIC_API_KEY\n        }\n    }\n} satisfies MagnitudeConfig;\n```\n\n----------------------------------------\n\nTITLE: Providing Test Data to Steps in Magnitude (TypeScript)\nDESCRIPTION: This snippet illustrates how to provide test data to a specific step in a Magnitude test case. It demonstrates passing key/value pairs as data to a step using the `data` method. The data can be used to populate form fields, simulate user input, or provide context for the step execution. The `check` method is chained after the data is provided.\nSOURCE: https://github.com/magnitudedev/magnitude/blob/main/docs/core-concepts/building-test-cases.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntest('example')\n    .step('Log in')\n        .data({ email: \"foo@bar.com\", password: \"foo\" })\n        .check('Dashboard is visible')\n```\n\n----------------------------------------\n\nTITLE: Running Magnitude Tests with CLI\nDESCRIPTION: This snippet demonstrates how to execute Magnitude tests using the command-line interface.  It assumes that the Magnitude CLI is installed and configured in your environment. The command will initiate the test suite execution.\nSOURCE: https://github.com/magnitudedev/magnitude/blob/main/docs/core-concepts/running-tests.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx magnitude\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow Configuration for Magnitude Tests\nDESCRIPTION: This workflow configuration defines a job that runs on Ubuntu to execute Magnitude tests. It sets up the environment with API keys, checks out the code, installs Node.js and dependencies, starts a development server, and runs the tests using `npx magnitude -p`.\nSOURCE: https://github.com/magnitudedev/magnitude/blob/main/docs/integrations/github-actions.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: Run Magnitude Tests\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\njobs:\n  test:\n    runs-on: ubuntu-latest\n    env:\n      ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}\n      MOONDREAM_API_KEY: ${{ secrets.MOONDREAM_API_KEY }}\n    steps:\n      - uses: actions/checkout@v4\n      \n      - name: Setup Node.js\n        uses: actions/setup-node@v4\n        with:\n          node-version: '22'\n          cache: 'npm'\n          \n      - name: Install dependencies\n        run: npm ci\n      \n      - name: Install playwright\n        run: npx playwright install chromium\n        \n      - name: Start development server\n        run: npm run dev &\n        \n      - name: Wait for server to start\n        run: sleep 5\n        \n      - name: Run tests\n        run: npx magnitude -p\n```\n\n----------------------------------------\n\nTITLE: Running Magnitude Tests in Parallel\nDESCRIPTION: This snippet shows how to run Magnitude tests in parallel using the `--workers` or `-w` flag.  Specifying the number of workers allows for concurrent test execution, potentially reducing overall test time. A value of 4 indicates four parallel workers will be utilized.\nSOURCE: https://github.com/magnitudedev/magnitude/blob/main/docs/core-concepts/running-tests.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx magnitude -w 4\n```\n\n----------------------------------------\n\nTITLE: Playwright Test Case Example (TypeScript)\nDESCRIPTION: This snippet presents a sample test case using Playwright.  It shows how to add todo items in Playwright using `page.getByPlaceholder` and `page.getByTestId`. It populates the todo input field and validates the text content of the created todo items using `expect` and `toHaveText`.\nSOURCE: https://github.com/magnitudedev/magnitude/blob/main/docs/core-concepts/building-test-cases.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ntest('should allow me to add todo items', async ({ page }) => {\n    const newTodo = page.getByPlaceholder('What needs to be done?');\n\n    await newTodo.fill(TODO_ITEMS[0]);\n    await newTodo.press('Enter');\n\n    await expect(page.getByTestId('todo-title')).toHaveText([\n        TODO_ITEMS[0]\n    ]);\n\n    await newTodo.fill(TODO_ITEMS[1]);\n    await newTodo.press('Enter');\n\n    await expect(page.getByTestId('todo-title')).toHaveText([\n        TODO_ITEMS[0],\n        TODO_ITEMS[1]\n    ]);\n  });\n```\n\n----------------------------------------\n\nTITLE: Magnitude Test Case Example (Typescript)\nDESCRIPTION: This code snippet demonstrates a basic Magnitude test case written in TypeScript. It defines a test named 'can add and complete todos' that interacts with a website. The test includes steps to create todos, input data, and check for expected outcomes.\nSOURCE: https://github.com/magnitudedev/magnitude/blob/main/README.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntest('can add and complete todos', { url: 'https://magnitodo.com' })\n    .step('create 3 todos')\n        .data('Take out the trash, Buy groceries, Build more test cases with Magnitude')\n        .check('should see all 3 todos')\n    .step('mark each todo complete')\n        .check('says 0 items left')\n```\n\n----------------------------------------\n\nTITLE: Installing Magnitude MCP Globally\nDESCRIPTION: This command installs the magnitude-mcp package globally using npm, making the MCP server accessible from the command line. This is a prerequisite for manual installation and configuration with Cline.\nSOURCE: https://github.com/magnitudedev/magnitude/blob/main/docs/integrations/cline-mcp.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nnpm i -g magnitude-mcp\n```\n\n----------------------------------------\n\nTITLE: Running Magnitude Tests (Shell)\nDESCRIPTION: This command executes Magnitude tests in the project. It discovers test files matching the `*.mag.ts` pattern and runs them using the configured LLMs.  It will report any problems or bugs found during the test execution.\nSOURCE: https://github.com/magnitudedev/magnitude/blob/main/README.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nnpx magnitude\n```\n\n----------------------------------------\n\nTITLE: Run Magnitude tests\nDESCRIPTION: This command executes Magnitude tests within your project. It searches for files matching the `*.mag.ts` pattern in your project's test directory and runs the tests defined in those files.  The output will indicate if the agent finds any problems with the application.\nSOURCE: https://github.com/magnitudedev/magnitude/blob/main/docs/getting-started/quickstart.mdx#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpx magnitude\n```\n\n----------------------------------------\n\nTITLE: Initialize Magnitude project\nDESCRIPTION: This command initializes Magnitude in your project, creating a basic `tests/magnitude` directory.  This directory contains a Magnitude test configuration file (`magnitude.config.ts`) and an example test file (`example.mag.ts`) to help you get started with writing Magnitude tests.\nSOURCE: https://github.com/magnitudedev/magnitude/blob/main/docs/getting-started/quickstart.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpx magnitude init\n```\n\n----------------------------------------\n\nTITLE: Installing Magnitude Test Runner (Shell)\nDESCRIPTION: This command installs the Magnitude test runner as a development dependency in a Node.js project. This allows the user to write and execute Magnitude tests. It should be run in the project's root directory where `package.json` exists.\nSOURCE: https://github.com/magnitudedev/magnitude/blob/main/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --save-dev magnitude-test\n```\n\n----------------------------------------\n\nTITLE: OpenAI-compatible Client Interface (Typescript)\nDESCRIPTION: This code defines the TypeScript interface for configuring OpenAI-compatible providers (OpenRouter, Ollama, etc.). It specifies the `provider` as 'openai-generic' and outlines the available options, including `model`, `baseUrl`, `apiKey`, and `temperature`. `baseUrl` is necessary for specifying the custom endpoint of the OpenAI compatible provider.\nSOURCE: https://github.com/magnitudedev/magnitude/blob/main/docs/reference/llm-configuration.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface OpenAIGenericClient {\n    provider: 'openai-generic'\n    options: {\n        model: string,\n        baseUrl: string,\n        apiKey?: string,\n        temperature?: number,\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing MCP Server Globally\nDESCRIPTION: This command installs the `magnitude-mcp` package globally using npm, making it available for use in other projects. It is a prerequisite for integrating Magnitude tests with MCP. Requires Node.js and npm to be installed.\nSOURCE: https://github.com/magnitudedev/magnitude/blob/main/docs/integrations/windsurf-mcp.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nnpm i -g magnitude-mcp\n```\n\n----------------------------------------\n\nTITLE: Customizing Browser Options\nDESCRIPTION: This code snippet shows how to customize options passed to each Playwright browser context. It demonstrates customizing the `viewport` and `recordVideo` options. The viewport is set to 800x600 and video recording is enabled to save videos in the './videos/' directory with the same dimensions.\nSOURCE: https://github.com/magnitudedev/magnitude/blob/main/docs/core-concepts/configuration.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type MagnitudeConfig } from 'magnitude-test';\n\nexport default {\n    url: \"http://localhost:5173\",\n    browser: {\n        contextOptions: {\n            viewport: { width: 800, height: 600 },\n            recordVideo: {\n                dir: './videos/',\n                size: { width: 800, height: 600 }\n            }\n        }\n    }\n} satisfies MagnitudeConfig;\n```\n\n----------------------------------------\n\nTITLE: Configuring Moondream Executor Model (Typescript)\nDESCRIPTION: This snippet demonstrates how to configure the executor model (Moondream) in `magnitude.config.ts`. It shows the required `provider` and `options` properties, including the `baseUrl` (for self-hosted instances) and `apiKey` (for Moondream Cloud). It imports `MagnitudeConfig` and shows an example of its usage.\nSOURCE: https://github.com/magnitudedev/magnitude/blob/main/docs/reference/llm-configuration.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type MagnitudeConfig } from 'magnitude-test';\n\nexport default {\n    url: \"http://localhost:5173\",\n    executor: {\n        provider: 'moondream', // only moondream currently supported\n        options: {\n            baseUrl: 'your-self-hosted-moondream-endpoint',\n            apiKey: process.env.MOONDREAM_API_KEY // not necessary if self-hosted\n        }\n    }\n} satisfies MagnitudeConfig;\n```\n\n----------------------------------------\n\nTITLE: Configuring MCP Servers in Cline\nDESCRIPTION: This JSON snippet configures the Magnitude MCP server within Cline. It specifies the command to execute (npx) and the arguments to pass (magnitude-mcp) when Cline interacts with the server.  This configuration allows Cline to communicate with the Magnitude MCP server to manage projects and tests.\nSOURCE: https://github.com/magnitudedev/magnitude/blob/main/docs/integrations/cline-mcp.mdx#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"magnitude\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"magnitude-mcp\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Planner LLM\nDESCRIPTION: This code snippet demonstrates how to configure the planner LLM by passing a `provider` and `options` to the `planner` property in the configuration. It shows how to configure an LLM using the 'openai-generic' provider with a custom baseUrl, API key and model.\nSOURCE: https://github.com/magnitudedev/magnitude/blob/main/docs/core-concepts/configuration.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type MagnitudeConfig } from 'magnitude-test';\n\nexport default {\n    url: \"http://localhost:5173\",\n    planner: {\n        provider: 'openai-generic',\n        options: {\n            baseUrl: \"https://openrouter.ai/api/v1\",\n            apiKey: process.env.OPENROUTER_API_KEY,\n            model: \"google/gemini-2.5-pro-preview-03-25\"\n        }\n    }\n} satisfies MagnitudeConfig;\n```\n\n----------------------------------------\n\nTITLE: Basic Test Case Usage\nDESCRIPTION: Demonstrates a basic usage of the `test` function and the `.step` method to define a test case. This snippet shows how to create a test case with an ID and add a step with a descriptive string.\nSOURCE: https://github.com/magnitudedev/magnitude/blob/main/docs/reference/test-cases.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntest('can add todo')\n    .step('Add a todo item')\n```\n\n----------------------------------------\n\nTITLE: OpenAI Client Interface (Typescript)\nDESCRIPTION: This code defines the TypeScript interface for configuring the OpenAI provider. It specifies the `provider` as 'openai' and outlines the available options, including `model`, `apiKey`, and `temperature`.  This defines the structure for the OpenAI client configuration within the Magnitude framework.\nSOURCE: https://github.com/magnitudedev/magnitude/blob/main/docs/reference/llm-configuration.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface OpenAIClient {\n    provider: 'openai',\n    options: {\n        model: string,\n        apiKey?: string,\n        temperature?: number\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Case URL in Magnitude (TypeScript)\nDESCRIPTION: This snippet shows how to configure a test case in Magnitude with a specific starting URL, overriding the default project URL. It utilizes the second argument of the `test` function to pass in a configuration object containing the desired `url` property. This allows for testing different environments or specific pages within the application.\nSOURCE: https://github.com/magnitudedev/magnitude/blob/main/docs/core-concepts/building-test-cases.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntest('can add and remove todos', { url: \"https://mytodoapp.com\" })\n    .step('Add a todo')\n    .step('Remove the todo')\n```\n\n----------------------------------------\n\nTITLE: Setting Up Magnitude (Shell)\nDESCRIPTION: This command initializes Magnitude in a project by running the `magnitude init` command. This typically creates a `tests/magnitude` directory with a configuration file (`magnitude.config.ts`) and an example test file (`example.mag.ts`). Requires `npx` to be available.\nSOURCE: https://github.com/magnitudedev/magnitude/blob/main/README.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nnpx magnitude init\n```\n\n----------------------------------------\n\nTITLE: Executing Magnitude CLI\nDESCRIPTION: This snippet shows the basic command to execute the Magnitude CLI. It assumes that the `magnitude` package is installed and accessible in the current environment, typically via `npx`. No specific dependencies are required beyond a working Node.js environment.\nSOURCE: https://github.com/magnitudedev/magnitude/blob/main/docs/reference/cli.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx magnitude\n```\n\n----------------------------------------\n\nTITLE: Anthropic Client Interface (Typescript)\nDESCRIPTION: This code defines the TypeScript interface for configuring the Anthropic provider. It specifies the `provider` as 'anthropic' and outlines the available options, including `model`, `apiKey`, and `temperature`. The interface defines the structure for the Anthropic client configuration.\nSOURCE: https://github.com/magnitudedev/magnitude/blob/main/docs/reference/llm-configuration.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface AnthropicClient {\n    provider: 'anthropic',\n    options: {\n        model: string,\n        apiKey?: string,\n        temperature?: number\n    }   \n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Magnitude Config (Default)\nDESCRIPTION: This code snippet shows the default configuration generated when `npx magnitude init` is run. It defines the default URL that all test cases will use if not specified otherwise.\nSOURCE: https://github.com/magnitudedev/magnitude/blob/main/docs/core-concepts/configuration.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type MagnitudeConfig } from 'magnitude-test';\n\nexport default {\n    url: \"http://localhost:5173\"\n} satisfies MagnitudeConfig;\n```\n\n----------------------------------------\n\nTITLE: Opting Out of Telemetry\nDESCRIPTION: This code snippet shows how to opt out of Magnitude's default telemetry collection. Setting the `telemetry` property to `false` disables the collection of basic anonymized telemetry data.\nSOURCE: https://github.com/magnitudedev/magnitude/blob/main/docs/core-concepts/configuration.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type MagnitudeConfig } from 'magnitude-test';\n\nexport default {\n    url: \"http://localhost:5173\",\n    telemetry: false\n} satisfies MagnitudeConfig;\n```\n\n----------------------------------------\n\nTITLE: Providing Freeform Test Data to Steps in Magnitude (TypeScript)\nDESCRIPTION: This snippet demonstrates providing freeform text data to a step in a Magnitude test case. Instead of providing a key-value object, a simple string is passed to the `data` function. This allows for more flexible and descriptive test data to be associated with a specific step.\nSOURCE: https://github.com/magnitudedev/magnitude/blob/main/docs/core-concepts/building-test-cases.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntest('example')\n    .step('Add 3 todos')\n        .data('Use \"Take out trash\" for the first todo and make up the other 2')\n```\n\n----------------------------------------\n\nTITLE: AWS Bedrock Client Interface (Typescript)\nDESCRIPTION: This code defines the TypeScript interface for configuring the AWS Bedrock provider. It specifies the `provider` as 'aws-bedrock' and outlines the available options, including `model` and `temperature`. The interface defines the structure for the AWS Bedrock client configuration.\nSOURCE: https://github.com/magnitudedev/magnitude/blob/main/docs/reference/llm-configuration.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ninterface BedrockClient {\n    provider: 'aws-bedrock',\n    options: {\n        model: string,\n        // passed to inference_configuration\n        temperature?: number\n    }   \n}\n```\n\n----------------------------------------\n\nTITLE: Install Magnitude test runner\nDESCRIPTION: This command installs the Magnitude test runner as a development dependency in your Node.js project. It uses npm, the Node package manager, to download and install the `magnitude-test` package. This allows you to use Magnitude's testing features in your project.\nSOURCE: https://github.com/magnitudedev/magnitude/blob/main/docs/getting-started/quickstart.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev magnitude-test\n```\n\n----------------------------------------\n\nTITLE: TestOptions Interface Definition\nDESCRIPTION: Defines the `TestOptions` interface, which allows configuring options for a test case, such as specifying a URL. This interface is used as a parameter for the `test` function.\nSOURCE: https://github.com/magnitudedev/magnitude/blob/main/docs/reference/test-cases.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nTestOptions {\n    url?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TestOptions Interface\nDESCRIPTION: Defines the `TestOptions` interface, which allows setting configuration options for test groups. Currently, it includes the `url` property for specifying a base URL for tests within the group.\nSOURCE: https://github.com/magnitudedev/magnitude/blob/main/docs/reference/test-groups.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nTestOptions {\n    url?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Global MCP Server Configuration (JSON)\nDESCRIPTION: This JSON configuration defines a new global MCP server named \"magnitude\" in Cursor settings. It specifies the command to execute (npx) and the arguments to pass to the command (magnitude-mcp).\nSOURCE: https://github.com/magnitudedev/magnitude/blob/main/docs/integrations/cursor-mcp.mdx#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"magnitude\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"magnitude-mcp\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Run Mintlify in development mode\nDESCRIPTION: This command runs the Mintlify development server in the root directory of your documentation project (where docs.json is located).  It allows you to preview documentation changes locally before publishing.\nSOURCE: https://github.com/magnitudedev/magnitude/blob/main/docs/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmintlify dev\n```\n\n----------------------------------------\n\nTITLE: Install Mintlify CLI globally using npm\nDESCRIPTION: This command installs the Mintlify CLI globally using npm, allowing you to preview documentation changes locally. It requires Node.js and npm to be installed on your system.\nSOURCE: https://github.com/magnitudedev/magnitude/blob/main/docs/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -g mintlify\n```\n\n----------------------------------------\n\nTITLE: Configuring Windsurf model_config.json\nDESCRIPTION: This JSON snippet configures Windsurf to use MCP.  It defines an MCP server named \"magnitude\" with the command \"npx\" and arguments to execute the `magnitude-mcp` package. This configuration allows Windsurf to communicate with the MCP server for Magnitude tests. Requires a `./codeium/windsurf/model_config.json` file to exist.\nSOURCE: https://github.com/magnitudedev/magnitude/blob/main/docs/integrations/windsurf-mcp.mdx#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"magnitude\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"magnitude-mcp\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: AWS Bedrock Authentication (Shell)\nDESCRIPTION: This snippet demonstrates how to configure AWS Bedrock authentication using environment variables. It sets the `AWS_ACCESS_KEY_ID`, `AWS_SECRET_ACCESS_KEY`, and `AWS_REGION` environment variables, which are required for authenticating with Bedrock.\nSOURCE: https://github.com/magnitudedev/magnitude/blob/main/docs/reference/llm-configuration.mdx#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nexport AWS_ACCESS_KEY_ID=\"your_key\"\nexport AWS_SECRET_ACCESS_KEY=\"your_secret\"\nexport AWS_REGION=\"us-east-1\"\n```\n\n----------------------------------------\n\nTITLE: Magnitude MCP Configuration (JSON)\nDESCRIPTION: Defines the MCP server configuration for Magnitude. Specifies the command to execute and the arguments to pass to the command. The command is set to `npx` to execute the local `magnitude-mcp` package.\nSOURCE: https://github.com/magnitudedev/magnitude/blob/main/packages/magnitude-mcp/README.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"magnitude\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"magnitude-mcp\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Magnitude MCP Server\nDESCRIPTION: This command installs the Magnitude MCP server globally using npm. It allows the MCP server to be accessed from anywhere in the system.\nSOURCE: https://github.com/magnitudedev/magnitude/blob/main/docs/integrations/cursor-mcp.mdx#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm i -g magnitude-mcp\n```\n\n----------------------------------------\n\nTITLE: Installing Magnitude MCP globally via npm\nDESCRIPTION: Installs the Magnitude MCP server globally using npm. This command makes the `magnitude-mcp` executable available in the system's PATH.\nSOURCE: https://github.com/magnitudedev/magnitude/blob/main/packages/magnitude-mcp/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i -g magnitude-mcp\n```\n\n----------------------------------------\n\nTITLE: Google Vertex AI Client Interface (Typescript)\nDESCRIPTION: This code defines the TypeScript interface for configuring the Google Vertex AI provider. It specifies the `provider` as 'vertex-ai' and outlines the available options, including `model`, `location`, `baseUrl`, `projectId`, `credentials`, and `temperature`. The interface defines the structure for the Google Vertex AI client configuration.\nSOURCE: https://github.com/magnitudedev/magnitude/blob/main/docs/reference/llm-configuration.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ninterface GoogleVertexClient {\n    provider: 'vertex-ai',\n    options: {\n        model: string,\n        location: string,\n        baseUrl?: string,\n        projectId?: string,\n        credentials?: string | object,\n        temperature?: number,\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Cursor MCP Configuration (JSON)\nDESCRIPTION: Defines the MCP server configuration for Magnitude within the Cursor IDE. Specifies the command to execute and the arguments to pass to the command.  Uses `npx` to execute the local `magnitude-mcp` package.\nSOURCE: https://github.com/magnitudedev/magnitude/blob/main/packages/magnitude-mcp/README.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"magnitude\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"magnitude-mcp\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Windsurf MCP Configuration (JSON)\nDESCRIPTION: Defines the MCP server configuration for Magnitude within the Windsurf IDE.  Specifies the command to execute and the arguments to pass to the command. Uses `npx` to execute the local `magnitude-mcp` package.\nSOURCE: https://github.com/magnitudedev/magnitude/blob/main/packages/magnitude-mcp/README.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"magnitude\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"magnitude-mcp\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Test Group\nDESCRIPTION: Demonstrates how to create a test group using the `test.group` function in Magnitude. The example defines a group named \"Authentication Tests\", sets a base URL using `TestOptions`, and includes a test case with steps, data, secure data, and checks.\nSOURCE: https://github.com/magnitudedev/magnitude/blob/main/docs/reference/test-groups.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntest.group(\"Authentication Tests\", { url: \"localhost:3000/login\" }, () => {\n    test('can log in')\n        .step('Log in to the app')\n            .data({ email: \"foo@bar.com\" })\n            .secureData({ password: process.env.SUPER_SECRET_PASSWORD })\n            .check('Can see dashboard')\n\n    // more tests...\n});\n```"
  }
]