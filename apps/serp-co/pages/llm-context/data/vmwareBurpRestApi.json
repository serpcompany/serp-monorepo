[
  {
    "owner": "vmware",
    "repo": "burp-rest-api",
    "content": "TITLE: Run Burp REST API Launcher Script - Shell\nDESCRIPTION: Shows how to execute the platform-specific launcher scripts (.sh for Unix/macOS, .bat for Windows) to start the Burp REST API extension. This is the recommended method for newer Java versions (JRE > 9).\nSOURCE: https://github.com/vmware/burp-rest-api/blob/master/README.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n# On Unix (Linux, macOS)\n./burp-rest-api.sh\n# On Windows\n./burp-rest-api.bat\n```\n\n----------------------------------------\n\nTITLE: Change Burp REST API Port (Short Arg) - Shell\nDESCRIPTION: Runs the Burp REST API launcher script, overriding the default REST API port (8090) to 8081. This uses the short command-line argument --port, which is equivalent to --server.port.\nSOURCE: https://github.com/vmware/burp-rest-api/blob/master/README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n./burp-rest-api.sh --port=8081\n```\n\n----------------------------------------\n\nTITLE: Change Burp REST API Address (Short Arg) - Shell\nDESCRIPTION: Runs the Burp REST API launcher script, changing the network address the REST API endpoint binds to. This uses the short command-line argument --address, which is equivalent to --server.address, and defaults to localhost if not specified.\nSOURCE: https://github.com/vmware/burp-rest-api/blob/master/README.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n./burp-rest-api.sh --address=192.168.1.2\n```\n\n----------------------------------------\n\nTITLE: Run Burp REST API in UI Mode (Launcher) - Shell\nDESCRIPTION: Executes the Burp REST API using the launcher script with the --headless.mode=false argument. This forces Burp Suite to run with its graphical user interface instead of in the default headless mode.\nSOURCE: https://github.com/vmware/burp-rest-api/blob/master/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./burp-rest-api.sh --headless.mode=false\n```\n\n----------------------------------------\n\nTITLE: Change Burp REST API Port (Long Arg) - Shell\nDESCRIPTION: Runs the Burp REST API launcher script, overriding the default REST API port (8090) to 8081. This uses the long command-line argument --server.port.\nSOURCE: https://github.com/vmware/burp-rest-api/blob/master/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./burp-rest-api.sh --server.port=8081\n```\n\n----------------------------------------\n\nTITLE: Change Burp REST API Address (Long Arg) - Shell\nDESCRIPTION: Runs the Burp REST API launcher script, changing the network address the REST API endpoint binds to. This uses the long command-line argument --server.address and defaults to localhost (127.0.0.1) if not specified.\nSOURCE: https://github.com/vmware/burp-rest-api/blob/master/README.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n./burp-rest-api.sh --server.address=192.168.1.2\n```\n\n----------------------------------------\n\nTITLE: Creating & Pushing New Feature Branch (shell)\nDESCRIPTION: Demonstrates the initial steps for contributing: creating a new branch based on the upstream `vmware/master`, committing all tracked changes, and pushing the new branch to the user's fork (`$USER` variable typically represents the remote name for the fork).\nSOURCE: https://github.com/vmware/burp-rest-api/blob/master/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit checkout -b my-new-feature vmware/master\ngit commit -a\ngit push $USER my-new-feature\n```\n\n----------------------------------------\n\nTITLE: Syncing Feature Branch with Upstream (shell)\nDESCRIPTION: Shows how to update a local feature branch (`my-new-feature`) to incorporate the latest changes from the upstream `vmware/master`. It involves fetching all remote changes, rebasing the feature branch onto the updated master, and force-pushing the rebased branch to the user's fork.\nSOURCE: https://github.com/vmware/burp-rest-api/blob/master/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit checkout my-new-feature\ngit fetch -a\ngit rebase vmware/master\ngit push --force-with-lease $USER my-new-feature\n```\n\n----------------------------------------\n\nTITLE: Amending Latest Commit in PR (shell)\nDESCRIPTION: Explains how to add new changes (`git add .`) and combine them with the most recent commit using `git commit --amend`. The updated branch, often requiring `push --force-with-lease` for safety, is then pushed to the user's fork to update the associated pull request.\nSOURCE: https://github.com/vmware/burp-rest-api/blob/master/CONTRIBUTING.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngit add .\ngit commit --amend\ngit push --force-with-lease $USER my-new-feature\n```\n\n----------------------------------------\n\nTITLE: Squashing Changes into Earlier Commit (shell)\nDESCRIPTION: Details the process for incorporating new changes into an earlier commit within a branch using `git commit --fixup <commit>` followed by an interactive rebase (`git rebase -i --autosquash`) to automatically squash the fixup commit. Finally, the rebased branch is force-pushed to the user's fork.\nSOURCE: https://github.com/vmware/burp-rest-api/blob/master/CONTRIBUTING.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngit add .\ngit commit --fixup <commit>\ngit rebase -i --autosquash vmware/master\ngit push --force-with-lease $USER my-new-feature\n```\n\n----------------------------------------\n\nTITLE: Configuring Burp Proxy Listener in JSON\nDESCRIPTION: This JSON snippet demonstrates how to define a Burp Proxy listener within a custom project options file. It configures a listener to bind to the IP address `192.168.1.1` on port `8080`, specifying the certificate mode as 'per_host' and setting the listener to 'running'. This configuration is used to customize the network interface and port for the Burp Proxy.\nSOURCE: https://github.com/vmware/burp-rest-api/blob/master/FAQ.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n        \"request_listeners\":[\n            {\n                \"certificate_mode\":\"per_host\",\n                \"listen_mode\":\"192.168.1.1\",\n                \"listener_port\":8080,\n                \"running\":true\n            }\n\n```\n\n----------------------------------------\n\nTITLE: Run Burp REST API in UI Mode (Java <= 1.8) - Shell\nDESCRIPTION: Directly executes the Burp REST API JAR using java -jar. This method is for older Java versions (<= 1.8) and uses --headless.mode=false for UI mode and --burp.jar to specify the Burp Suite JAR path.\nSOURCE: https://github.com/vmware/burp-rest-api/blob/master/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\njava -jar burp-rest-api-2.2.0.jar --headless.mode=false --burp.jar=./lib/burpsuite_pro.jar\n```\n\n----------------------------------------\n\nTITLE: Build and Run Burp REST API (Java <= 1.8) - Shell\nDESCRIPTION: Provides commands to build the project JAR using Gradle (./gradlew clean build) and then run the built JAR directly using java -jar build/libs/burp-rest-api-2.2.0.jar. This run method is specific for Java <= 1.8 and requires specifying the Burp JAR path via --burp.jar.\nSOURCE: https://github.com/vmware/burp-rest-api/blob/master/README.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n# build the jar\n./gradlew clean build\n# and run it (Java <= 1.8 only!)\njava -jar build/libs/burp-rest-api-2.2.0.jar --burp.jar=./lib/burpsuite_pro.jar\n```"
  }
]