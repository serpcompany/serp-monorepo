[
  {
    "owner": "kubernetes-sigs",
    "repo": "kubebuilder",
    "content": "TITLE: Installing Kubebuilder CLI\nDESCRIPTION: Commands to download and install the Kubebuilder CLI tool locally. Uses curl to fetch the latest version and installs it to /usr/local/bin.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/quick-start.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# download kubebuilder and install locally.\ncurl -L -o kubebuilder \"https://go.kubebuilder.io/dl/latest/$(go env GOOS)/$(go env GOARCH)\"\nchmod +x kubebuilder && sudo mv kubebuilder /usr/local/bin/\n```\n\n----------------------------------------\n\nTITLE: Implementing Finalizers in Reconcile Method in Kubebuilder Controller\nDESCRIPTION: Demonstrates how to implement finalizer-based pre-delete logic within a controller's Reconcile method. The code shows checking for deletion timestamps, adding finalizers to new resources, and executing cleanup logic before removing the finalizer when the resource is deleted.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/reference/using-finalizers.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc (r *CronJobReconciler) Reconcile(ctx context.Context, req ctrl.Request) (ctrl.Result, error) {\n\tcronjob := &batch.CronJob{}\n\n\terr := r.Get(ctx, req.NamespacedName, cronjob)\n\tif err != nil {\n\t\treturn ctrl.Result{}, client.IgnoreNotFound(err)\n\t}\n\n\t// name of our custom finalizer\n\tmyFinalizerName := \"storage.finalizers.tutorial.kubebuilder.io\"\n\n\t// examine DeletionTimestamp to determine if object is under deletion\n\tif cronjob.ObjectMeta.DeletionTimestamp.IsZero() {\n\t\t// The object is not being deleted, so if it does not have our finalizer,\n\t\t// then lets add the finalizer and update the object. This is equivalent\n\t\t// registering our finalizer.\n\t\tif !containsString(cronjob.GetFinalizers(), myFinalizerName) {\n\t\t\tcronjob.SetFinalizers(append(cronjob.GetFinalizers(), myFinalizerName))\n\t\t\tif err := r.Update(ctx, cronjob); err != nil {\n\t\t\t\treturn ctrl.Result{}, err\n\t\t\t}\n\t\t}\n\t} else {\n\t\t// The object is being deleted\n\t\tif containsString(cronjob.GetFinalizers(), myFinalizerName) {\n\t\t\t// our finalizer is present, so lets handle any external dependency\n\t\t\tif err := r.deleteExternalResources(cronjob); err != nil {\n\t\t\t\t// if fail to delete the external dependency here, return with error\n\t\t\t\t// so that it can be retried\n\t\t\t\treturn ctrl.Result{}, err\n\t\t\t}\n\n\t\t\t// remove our finalizer from the list and update it.\n\t\t\tcronjob.SetFinalizers(removeString(cronjob.GetFinalizers(), myFinalizerName))\n\t\t\tif err := r.Update(ctx, cronjob); err != nil {\n\t\t\t\treturn ctrl.Result{}, err\n\t\t\t}\n\t\t}\n\n\t\t// Stop reconciliation as the item is being deleted\n\t\treturn ctrl.Result{}, nil\n\t}\n\n\t// Your logic here\n\n\treturn ctrl.Result{}, nil\n}\n\nfunc (r *CronJobReconciler) deleteExternalResources(cronjob *batch.CronJob) error {\n\t//\n\t// delete any external resources associated with the cronjob\n\t//\n\t// Ensure that delete implementation is idempotent and safe to invoke\n\t// multiple times for same object.\n\treturn nil\n}\n\n// Helper functions to check and remove string from a slice of strings.\nfunc containsString(slice []string, s string) bool {\n\tfor _, item := range slice {\n\t\tif item == s {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n\nfunc removeString(slice []string, s string) []string {\n\tvar result []string\n\tfor _, item := range slice {\n\t\tif item != s {\n\t\t\tresult = append(result, item)\n\t\t}\n\t}\n\treturn result\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Deployment for Busybox with Owner Reference\nDESCRIPTION: Function that creates a Deployment object for a Busybox custom resource and sets the controller reference to establish ownership. This ensures that when the Busybox resource is deleted, the Deployment will be automatically deleted as well.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/reference/watching-resources/secondary-owned-resources.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// deploymentForBusybox returns a Deployment object for Busybox\nfunc (r *BusyboxReconciler) deploymentForBusybox(busybox *examplecomv1alpha1.Busybox) *appsv1.Deployment {\n    replicas := busybox.Spec.Size\n\n    dep := &appsv1.Deployment{\n        ObjectMeta: metav1.ObjectMeta{\n            Name:      busybox.Name,\n            Namespace: busybox.Namespace,\n        },\n        Spec: appsv1.DeploymentSpec{\n            Replicas: &replicas,\n            Selector: &metav1.LabelSelector{\n                MatchLabels: map[string]string{\"app\": busybox.Name},\n            },\n            Template: metav1.PodTemplateSpec{\n                ObjectMeta: metav1.ObjectMeta{\n                    Labels: map[string]string{\"app\": busybox.Name},\n                },\n                Spec: corev1.PodSpec{\n                    Containers: []corev1.Container{\n                        {\n                            Name:  \"busybox\",\n                            Image: \"busybox:latest\",\n                        },\n                    },\n                },\n            },\n        },\n    }\n\n    // Set the ownerRef for the Deployment, ensuring that the Deployment\n    // will be deleted when the Busybox CR is deleted.\n    controllerutil.SetControllerReference(busybox, dep, r.Scheme)\n    return dep\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing CronJob Webhook Functions in Go\nDESCRIPTION: This code snippet shows the implementation of webhook functions for a CronJob resource. It includes methods for defaulting, validation, and conversion, as well as setup functions for the webhook server.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/cronjob-tutorial/webhook-implementation.md#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// TODO(user): change verbs to \"verbs=create;update;delete\" if you want to enable deletion validation.\n//+kubebuilder:webhook:path=/mutate-batch-tutorial-kubebuilder-io-v1-cronjob,mutating=true,failurePolicy=fail,sideEffects=None,groups=batch.tutorial.kubebuilder.io,resources=cronjobs,verbs=create;update,versions=v1,name=mcronjob.kb.io,admissionReviewVersions=v1\n\nvar _ webhook.Defaulter = &CronJob{}\n\n// Default implements webhook.Defaulter so a webhook will be registered for the type\nfunc (r *CronJob) Default() {\n\tcronjoblog.Info(\"default\", \"name\", r.Name)\n\n\tif r.Spec.ConcurrencyPolicy == \"\" {\n\t\tr.Spec.ConcurrencyPolicy = AllowConcurrent\n\t}\n\tif r.Spec.Suspend == nil {\n\t\tr.Spec.Suspend = new(bool)\n\t}\n\tif r.Spec.SuccessfulJobsHistoryLimit == nil {\n\t\tr.Spec.SuccessfulJobsHistoryLimit = new(int32)\n\t\t*r.Spec.SuccessfulJobsHistoryLimit = 3\n\t}\n\tif r.Spec.FailedJobsHistoryLimit == nil {\n\t\tr.Spec.FailedJobsHistoryLimit = new(int32)\n\t\t*r.Spec.FailedJobsHistoryLimit = 1\n\t}\n}\n\n// TODO(user): change verbs to \"verbs=create;update;delete\" if you want to enable deletion validation.\n//+kubebuilder:webhook:path=/validate-batch-tutorial-kubebuilder-io-v1-cronjob,mutating=false,failurePolicy=fail,sideEffects=None,groups=batch.tutorial.kubebuilder.io,resources=cronjobs,verbs=create;update,versions=v1,name=vcronjob.kb.io,admissionReviewVersions=v1\n\nvar _ webhook.Validator = &CronJob{}\n\n// ValidateCreate implements webhook.Validator so a webhook will be registered for the type\nfunc (r *CronJob) ValidateCreate() error {\n\tcronjoblog.Info(\"validate create\", \"name\", r.Name)\n\n\treturn r.validateCronJob()\n}\n\n// ValidateUpdate implements webhook.Validator so a webhook will be registered for the type\nfunc (r *CronJob) ValidateUpdate(old runtime.Object) error {\n\tcronjoblog.Info(\"validate update\", \"name\", r.Name)\n\n\treturn r.validateCronJob()\n}\n\n// ValidateDelete implements webhook.Validator so a webhook will be registered for the type\nfunc (r *CronJob) ValidateDelete() error {\n\tcronjoblog.Info(\"validate delete\", \"name\", r.Name)\n\n\t// TODO(user): fill in your validation logic upon object deletion.\n\treturn nil\n}\n\nfunc (r *CronJob) validateCronJob() error {\n\tvar allErrs field.ErrorList\n\tif err := r.validateCronJobName(); err != nil {\n\t\tallErrs = append(allErrs, err)\n\t}\n\tif err := r.validateCronJobSpec(); err != nil {\n\t\tallErrs = append(allErrs, err)\n\t}\n\tif len(allErrs) == 0 {\n\t\treturn nil\n\t}\n\n\treturn apierrors.NewInvalid(schema.GroupKind{Group:\"batch.tutorial.kubebuilder.io\", Kind: \"CronJob\"}, r.Name, allErrs)\n}\n\nfunc (r *CronJob) validateCronJobSpec() *field.Error {\n\t// The field helpers from the kubernetes API machinery help us return nicely\n\t// structured validation errors.\n\treturn validateScheduleFormat(\n\t\tr.Spec.Schedule,\n\t\tfield.NewPath(\"spec\").Child(\"schedule\"))\n}\n\nfunc validateScheduleFormat(schedule string, fldPath *field.Path) *field.Error {\n\tif _, err := cron.ParseStandard(schedule); err != nil {\n\t\treturn field.Invalid(fldPath, schedule, err.Error())\n\t}\n\treturn nil\n}\n\n// +kubebuilder:docs-gen:collapse=Defaulter & Validator\n\nfunc (r *CronJob) validateCronJobName() *field.Error {\n\tif len(r.ObjectMeta.Name) > validationutils.DNS1035LabelMaxLength-11 {\n\t\t// The job name length is 63 character like all Kubernetes objects\n\t\t// (which must fit in a DNS subdomain). The cronjob controller appends\n\t\t// a 11-character suffix to the cronjob (`-$TIMESTAMP`) when creating\n\t\t// a job. The job name length limit is 63 characters. Therefore cronjob\n\t\t// names must have length <= 63-11=52. If we don't validate this here,\n\t\t// then job creation will fail later.\n\t\treturn field.Invalid(field.NewPath(\"metadata\").Child(\"name\"), r.Name, \"must be no more than 52 characters\")\n\t}\n\treturn nil\n}\n\n// TODO(user): change verbs to \"verbs=create;update;delete\" if you want to enable deletion validation.\n//+kubebuilder:webhook:path=/mutate-batch-tutorial-kubebuilder-io-v1-cronjob,mutating=true,failurePolicy=fail,sideEffects=None,groups=batch.tutorial.kubebuilder.io,resources=cronjobs,verbs=create;update,versions=v1,name=mcronjob.kb.io,admissionReviewVersions=v1\n\nvar _ webhook.Defaulter = &CronJob{}\n\n// Default implements webhook.Defaulter so a webhook will be registered for the type\nfunc (r *CronJob) Default() {\n\tcronjoblog.Info(\"default\", \"name\", r.Name)\n\n\tif r.Spec.ConcurrencyPolicy == \"\" {\n\t\tr.Spec.ConcurrencyPolicy = AllowConcurrent\n\t}\n\tif r.Spec.Suspend == nil {\n\t\tr.Spec.Suspend = new(bool)\n\t}\n\tif r.Spec.SuccessfulJobsHistoryLimit == nil {\n\t\tr.Spec.SuccessfulJobsHistoryLimit = new(int32)\n\t\t*r.Spec.SuccessfulJobsHistoryLimit = 3\n\t}\n\tif r.Spec.FailedJobsHistoryLimit == nil {\n\t\tr.Spec.FailedJobsHistoryLimit = new(int32)\n\t\t*r.Spec.FailedJobsHistoryLimit = 1\n\t}\n}\n\n// TODO(user): change verbs to \"verbs=create;update;delete\" if you want to enable deletion validation.\n//+kubebuilder:webhook:path=/validate-batch-tutorial-kubebuilder-io-v1-cronjob,mutating=false,failurePolicy=fail,sideEffects=None,groups=batch.tutorial.kubebuilder.io,resources=cronjobs,verbs=create;update,versions=v1,name=vcronjob.kb.io,admissionReviewVersions=v1\n\nvar _ webhook.Validator = &CronJob{}\n\n// ValidateCreate implements webhook.Validator so a webhook will be registered for the type\nfunc (r *CronJob) ValidateCreate() error {\n\tcronjoblog.Info(\"validate create\", \"name\", r.Name)\n\n\treturn r.validateCronJob()\n}\n\n// ValidateUpdate implements webhook.Validator so a webhook will be registered for the type\nfunc (r *CronJob) ValidateUpdate(old runtime.Object) error {\n\tcronjoblog.Info(\"validate update\", \"name\", r.Name)\n\n\treturn r.validateCronJob()\n}\n\n// ValidateDelete implements webhook.Validator so a webhook will be registered for the type\nfunc (r *CronJob) ValidateDelete() error {\n\tcronjoblog.Info(\"validate delete\", \"name\", r.Name)\n\n\t// TODO(user): fill in your validation logic upon object deletion.\n\treturn nil\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating Memcached API in Kubebuilder\nDESCRIPTION: Shell command to create the Memcached API with group 'cache', version 'v1alpha1', and kind 'Memcached' using Kubebuilder's create api command.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/getting-started.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkubebuilder create api --group cache --version v1alpha1 --kind Memcached\n```\n\n----------------------------------------\n\nTITLE: Controller Manager Setup\nDESCRIPTION: Configuration for the controller manager to watch Memcached custom resources and owned deployments.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/getting-started.md#2025-04-21_snippet_10\n\nLANGUAGE: go\nCODE:\n```\n// SetupWithManager sets up the controller with the Manager.\n// The Deployment is also watched to ensure its\n// desired state in the cluster.\nfunc (r *MemcachedReconciler) SetupWithManager(mgr ctrl.Manager) error {\n    return ctrl.NewControllerManagedBy(mgr).\n\t\t// Watch the Memcached Custom Resource and trigger reconciliation whenever it\n\t\t//is created, updated, or deleted\n\t\tFor(&cachev1alpha1.Memcached{}).\n\t\t// Watch the Deployment managed by the Memcached controller. If any changes occur to the Deployment\n        // owned and managed by this controller, it will trigger reconciliation, ensuring that the cluster\n        // state aligns with the desired state.\n\t\tOwns(&appsv1.Deployment{}).\n\t\tComplete(r)\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining Guestbook Custom Resource in Go\nDESCRIPTION: Go code defining the Guestbook custom resource structure with spec and status fields, including validation rules and Kubernetes metadata.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/quick-start.md#2025-04-21_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// GuestbookSpec defines the desired state of Guestbook\ntype GuestbookSpec struct {\n\t// INSERT ADDITIONAL SPEC FIELDS - desired state of cluster\n\t// Important: Run \"make\" to regenerate code after modifying this file\n\n\t// Quantity of instances\n\t// +kubebuilder:validation:Minimum=1\n\t// +kubebuilder:validation:Maximum=10\n\tSize int32 `json:\"size\"`\n\n\t// Name of the ConfigMap for GuestbookSpec's configuration\n\t// +kubebuilder:validation:MaxLength=15\n\t// +kubebuilder:validation:MinLength=1\n\tConfigMapName string `json:\"configMapName\"`\n\n\t// +kubebuilder:validation:Enum=Phone;Address;Name\n\tType string `json:\"type,omitempty\"`\n}\n\n// GuestbookStatus defines the observed state of Guestbook\ntype GuestbookStatus struct {\n\t// INSERT ADDITIONAL STATUS FIELD - define observed state of cluster\n\t// Important: Run \"make\" to regenerate code after modifying this file\n\n\t// PodName of the active Guestbook node.\n\tActive string `json:\"active\"`\n\n\t// PodNames of the standby Guestbook nodes.\n\tStandby []string `json:\"standby\"`\n}\n\n// +kubebuilder:object:root=true\n// +kubebuilder:subresource:status\n// +kubebuilder:resource:scope=Cluster\n\n// Guestbook is the Schema for the guestbooks API\ntype Guestbook struct {\n\tmetav1.TypeMeta   `json:\",inline\"`\n\tmetav1.ObjectMeta `json:\"metadata,omitempty\"`\n\n\tSpec   GuestbookSpec   `json:\"spec,omitempty\"`\n\tStatus GuestbookStatus `json:\"status,omitempty\"`\n}\n```\n\n----------------------------------------\n\nTITLE: RBAC Permission Markers\nDESCRIPTION: RBAC markers for generating necessary Kubernetes role permissions for the controller.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/getting-started.md#2025-04-21_snippet_12\n\nLANGUAGE: go\nCODE:\n```\n// +kubebuilder:rbac:groups=cache.example.com,resources=memcacheds,verbs=get;list;watch;create;update;patch;delete\n// +kubebuilder:rbac:groups=cache.example.com,resources=memcacheds/status,verbs=get;update;patch\n// +kubebuilder:rbac:groups=cache.example.com,resources=memcacheds/finalizers,verbs=update\n// +kubebuilder:rbac:groups=core,resources=events,verbs=create;patch\n// +kubebuilder:rbac:groups=apps,resources=deployments,verbs=get;list;watch;create;update;patch;delete\n// +kubebuilder:rbac:groups=core,resources=pods,verbs=get;list;watch\n```\n\n----------------------------------------\n\nTITLE: Configuring Controller to Watch Labeled Non-Owned Busybox Resource in Go\nDESCRIPTION: This snippet shows how to configure a BackupBusyboxReconciler to watch changes in both the primary BackupBusybox resource and the secondary Busybox resource, filtering Busybox resources based on a specific label. It only triggers reconciliation for BackupBusybox when changes occur in Busybox instances with the 'backup-enable: \"true\"' label.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/reference/watching-resources/secondary-resources-not-owned.md#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// SetupWithManager sets up the controller with the Manager.\n// The controller will watch both the BackupBusybox primary resource and the Busybox resource, filtering by a label.\nfunc (r *BackupBusyboxReconciler) SetupWithManager(mgr ctrl.Manager) error {\n    return ctrl.NewControllerManagedBy(mgr).\n        For(&examplecomv1alpha1.BackupBusybox{}).  // Watch the primary resource (BackupBusybox)\n        Watches(\n            &source.Kind{Type: &examplecomv1alpha1.Busybox{}},  // Watch the Busybox CR\n            handler.EnqueueRequestsFromMapFunc(func(ctx context.Context, obj client.Object) []reconcile.Request {\n                // Check if the Busybox resource has the label 'backup-needed: \"true\"'\n                if val, ok := obj.GetLabels()[\"backup-enable\"]; ok && val == \"true\" {\n                    // If the label is present and set to \"true\", trigger reconciliation for BackupBusybox\n                    return []reconcile.Request{\n                        {\n                            NamespacedName: types.NamespacedName{\n                                Name:      \"backupbusybox\",  // Reconcile the associated BackupBusybox resource\n                                Namespace: obj.GetNamespace(),  // Use the namespace of the changed Busybox\n                            },\n                        },\n                    }\n                }\n                // If the label is not present or doesn't match, don't trigger reconciliation\n                return []reconcile.Request{}\n            }),\n        ).  // Trigger reconciliation when the labeled Busybox resource changes\n        Complete(r)\n}\n```\n\n----------------------------------------\n\nTITLE: Testing CronJob Controller Behavior in Go\nDESCRIPTION: This code snippet shows how to write integration tests for a CronJob controller. It demonstrates creating test objects, isolating changes to test specific controller behavior, and verifying the controller's actions.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/cronjob-tutorial/writing-tests.md#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n{{#literatego ../cronjob-tutorial/testdata/project/internal/controller/cronjob_controller_test.go}}\n```\n\n----------------------------------------\n\nTITLE: Deploying the Operator Manager to Kubernetes\nDESCRIPTION: Deploys the operator manager to the cluster using the previously built and pushed image.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/testdata/project-v4/README.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nmake deploy IMG=<some-registry>/project-v4:tag\n```\n\n----------------------------------------\n\nTITLE: Creating API with deploy-image plugin (full example)\nDESCRIPTION: Complete example command to scaffold a Memcached API with the deploy-image plugin, showing all available configuration options.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/plugins/available/deploy-image-plugin-v1-alpha.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nkubebuilder create api --group example.com --version v1alpha1 --kind Memcached --image=memcached:1.6.15-alpine --image-container-command=\"memcached,--memory-limit=64,modern,-v\" --image-container-port=\"11211\" --run-as-user=\"1001\" --plugins=\"deploy-image/v1-alpha\"\n```\n\n----------------------------------------\n\nTITLE: Defining CRD Validation in Go\nDESCRIPTION: This snippet demonstrates how to use validation markers to define constraints for CRD fields. It includes examples of string length validation, slice validation, and enum types.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/reference/generating-crd.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype ToySpec struct {\n\t// +kubebuilder:validation:MaxLength=15\n\t// +kubebuilder:validation:MinLength=1\n\tName string `json:\"name,omitempty\"`\n\n\t// +kubebuilder:validation:MaxItems=500\n\t// +kubebuilder:validation:MinItems=1\n\t// +kubebuilder:validation:UniqueItems=true\n\tKnights []string `json:\"knights,omitempty\"`\n\n\tAlias   Alias   `json:\"alias,omitempty\"`\n\tRank    Rank    `json:\"rank\"`\n}\n\n// +kubebuilder:validation:Enum=Lion;Wolf;Dragon\ntype Alias string\n\n// +kubebuilder:validation:Minimum=1\n// +kubebuilder:validation:Maximum=3\n// +kubebuilder:validation:ExclusiveMaximum=false\ntype Rank int32\n```\n\n----------------------------------------\n\nTITLE: Deploying Manager to Kubernetes Cluster\nDESCRIPTION: This command deploys the Manager to the Kubernetes cluster using the image specified by the IMG variable.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/testdata/project-v4-with-plugins/README.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nmake deploy IMG=<some-registry>/project-v4-with-plugins:tag\n```\n\n----------------------------------------\n\nTITLE: Reconciling Busybox and its Owned Deployment\nDESCRIPTION: Reconcile function that manages the lifecycle of a Busybox custom resource and its owned Deployment. It handles creation of the Deployment if it doesn't exist, ensures the replica count matches the desired state, and updates the Busybox status with the current state of the Deployment.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/reference/watching-resources/secondary-owned-resources.md#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// Reconcile handles the main reconciliation loop for Busybox and the Deployment\nfunc (r *BusyboxReconciler) Reconcile(ctx context.Context, req ctrl.Request) (ctrl.Result, error) {\n    log := logf.FromContext(ctx)\n\n    // Fetch the Busybox instance\n    busybox := &examplecomv1alpha1.Busybox{}\n    if err := r.Get(ctx, req.NamespacedName, busybox); err != nil {\n        if apierrors.IsNotFound(err) {\n            log.Info(\"Busybox resource not found. Ignoring since it must be deleted\")\n            return ctrl.Result{}, nil\n        }\n        log.Error(err, \"Failed to get Busybox\")\n        return ctrl.Result{}, err\n    }\n\n    // Check if the Deployment already exists, if not create a new one\n    found := &appsv1.Deployment{}\n    err := r.Get(ctx, types.NamespacedName{Name: busybox.Name, Namespace: busybox.Namespace}, found)\n    if err != nil && apierrors.IsNotFound(err) {\n        // Define a new Deployment\n        dep := r.deploymentForBusybox(busybox)\n        log.Info(\"Creating a new Deployment\", \"Deployment.Namespace\", dep.Namespace, \"Deployment.Name\", dep.Name)\n        if err := r.Create(ctx, dep); err != nil {\n            log.Error(err, \"Failed to create new Deployment\", \"Deployment.Namespace\", dep.Namespace, \"Deployment.Name\", dep.Name)\n            return ctrl.Result{}, err\n        }\n        // Requeue the request to ensure the Deployment is created\n        return ctrl.Result{RequeueAfter: time.Minute}, nil\n    } else if err != nil {\n        log.Error(err, \"Failed to get Deployment\")\n        return ctrl.Result{}, err\n    }\n\n    // Ensure the Deployment size matches the desired state\n    size := busybox.Spec.Size\n    if *found.Spec.Replicas != size {\n        found.Spec.Replicas = &size\n        if err := r.Update(ctx, found); err != nil {\n            log.Error(err, \"Failed to update Deployment size\", \"Deployment.Namespace\", found.Namespace, \"Deployment.Name\", found.Name)\n            return ctrl.Result{}, err\n        }\n        // Requeue the request to ensure the correct state is achieved\n        return ctrl.Result{Requeue: true}, nil\n    }\n\n    // Update Busybox status to reflect that the Deployment is available\n    busybox.Status.AvailableReplicas = found.Status.AvailableReplicas\n    if err := r.Status().Update(ctx, busybox); err != nil {\n        log.Error(err, \"Failed to update Busybox status\")\n        return ctrl.Result{}, err\n    }\n\n    return ctrl.Result{}, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Deployment Replicas\nDESCRIPTION: Code to verify and update the number of Memcached replicas to match the desired state specified in the Custom Resource.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/getting-started.md#2025-04-21_snippet_9\n\nLANGUAGE: go\nCODE:\n```\n\t...\n\tsize := memcached.Spec.Size\n\tif *found.Spec.Replicas != size {\n\t\tfound.Spec.Replicas = &size\n\t\tif err = r.Update(ctx, found); err != nil {\n\t\t\tlog.Error(err, \"Failed to update Deployment\",\n\t\t\t\t\"Deployment.Namespace\", found.Namespace, \"Deployment.Name\", found.Name)\n            return ctrl.Result{}, err\n        }\n    ...\n```\n\n----------------------------------------\n\nTITLE: Reconciling Custom Resources with Deployment Management in Go Kubebuilder\nDESCRIPTION: This template implements a reconciliation controller that manages deployments for custom resources. It includes RBAC markers, error handling, deployment creation/updates based on the custom resource's spec, and controller setup logic. The controller maintains deployment replicas according to the resource's size specification.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/designs/code-generate-image-plugin.md#2025-04-21_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n// +kubebuilder:rbac:groups=cache.example.com,resources={{ resource.plural }},verbs=get;list;watch;create;update;patch;delete\n// +kubebuilder:rbac:groups=cache.example.com,resources={{ resource.plural }}/status,verbs=get;update;patch\n// +kubebuilder:rbac:groups=cache.example.com,resources={{ resource.plural }}/finalizers,verbs=update\n// +kubebuilder:rbac:groups=apps,resources=deployments,verbs=get;list;watch;create;update;patch;delete\n\nfunc (r *{{ resource }}.Reconciler) Reconcile(req ctrl.Request) (ctrl.Result, error) {\n\tctx := context.Background()\n\tlog := r.Log.WithValues(\"{{ resource }}\", req.NamespacedName)\n\n\t// Fetch the {{ resource }} instance\n\t{{ resource }} := &{{ apiimportalias }}.{{ resource }}{}\n\terr := r.Get(ctx, req.NamespacedName, {{ resource }})\n\tif err != nil {\n\t\tif errors.IsNotFound(err) {\n\t\t\t// Request object not found, could have been deleted after reconcile request.\n\t\t\t// Owned objects are automatically garbage collected. For additional cleanup logic use finalizers.\n\t\t\t// Return and don't requeue\n\t\t\tlog.Info(\"{{ resource }} resource not found. Ignoring since object must be deleted\")\n\t\t\treturn ctrl.Result{}, nil\n\t\t}\n\t\t// Error reading the object - requeue the request.\n\t\tlog.Error(err, \"Failed to get {{ resource }}\")\n\t\treturn ctrl.Result{}, err\n\t}\n\n\t// Check if the deployment already exists, if not create a new one\n\tfound := &appsv1.Deployment{}\n\terr = r.Get(ctx, types.NamespacedName{Name: {{ resource }}.Name, Namespace: {{ resource }}.Namespace}, found)\n\tif err != nil && errors.IsNotFound(err) {\n\t\t// Define a new deployment\n\t\tdep := r.deploymentFor{{ resource }}({{ resource }})\n\t\tlog.Info(\"Creating a new Deployment\", \"Deployment.Namespace\", dep.Namespace, \"Deployment.Name\", dep.Name)\n\t\terr = r.Create(ctx, dep)\n\t\tif err != nil {\n\t\t\tlog.Error(err, \"Failed to create new Deployment\", \"Deployment.Namespace\", dep.Namespace, \"Deployment.Name\", dep.Name)\n\t\t\treturn ctrl.Result{}, err\n\t\t}\n\t\t// Deployment created successfully - return and requeue\n\t\treturn ctrl.Result{Requeue: true}, nil\n\t} else if err != nil {\n\t\tlog.Error(err, \"Failed to get Deployment\")\n\t\treturn ctrl.Result{}, err\n\t}\n\n\t// Ensure the deployment size is the same as the spec\n\tsize := {{ resource }}.Spec.Size\n\tif *found.Spec.Replicas != size {\n\t\tfound.Spec.Replicas = &size\n\t\terr = r.Update(ctx, found)\n\t\tif err != nil {\n\t\t\tlog.Error(err, \"Failed to update Deployment\", \"Deployment.Namespace\", found.Namespace, \"Deployment.Name\", found.Name)\n\t\t\treturn ctrl.Result{}, err\n\t\t}\n\t\t// Spec updated - return and requeue\n\t\treturn ctrl.Result{Requeue: true}, nil\n\t}\n\n    // TODO: add here code implementation to update/manage the status\n\n\treturn ctrl.Result{}, nil\n}\n\n// deploymentFor{{ resource }} returns a {{ resource }} Deployment object\nfunc (r *{{ resource }}Reconciler) deploymentFor{{ resource }}(m *{{ apiimportalias }}.{{ resource }}) *appsv1.Deployment {\n\tls := labelsFor{{ resource }}(m.Name)\n\treplicas := m.Spec.Size\n\n\tdep := &appsv1.Deployment{\n\t\tObjectMeta: metav1.ObjectMeta{\n\t\t\tName:      m.Name,\n\t\t\tNamespace: m.Namespace,\n\t\t},\n\t\tSpec: appsv1.DeploymentSpec{\n\t\t\tReplicas: &replicas,\n\t\t\tSelector: &metav1.LabelSelector{\n\t\t\t\tMatchLabels: ls,\n\t\t\t},\n\t\t\tTemplate: corev1.PodTemplateSpec{\n\t\t\t\tObjectMeta: metav1.ObjectMeta{\n\t\t\t\t\tLabels: ls,\n\t\t\t\t},\n\t\t\t\tSpec: corev1.PodSpec{\n\t\t\t\t\tContainers: []corev1.Container{{\n\t\t\t\t\t\tImage:   imageFor{{ resource }}(m.Name),\n\t\t\t\t\t\tName:    {{ resource }},\n                        ImagePullPolicy: {{ resource }}.Spec.ContainerImagePullPolicy,\n\t\t\t\t\t\tCommand: []string{\"{{ resource }}\"},\n\t\t\t\t\t\tPorts: []corev1.ContainerPort{{\n\t\t\t\t\t\t\tContainerPort: {{ resource }}.Spec.ContainerPort,\n\t\t\t\t\t\t\tName:          \"{{ resource }}\",\n\t\t\t\t\t\t}},\n\t\t\t\t\t}},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}\n\t// Set {{ resource }} instance as the owner and controller\n\tctrl.SetControllerReference(m, dep, r.Scheme)\n\treturn dep\n}\n\n// labelsFor{{ resource }} returns the labels for selecting the resources\n// belonging to the given {{ resource }} CR name.\nfunc labelsFor{{ resource }}(name string) map[string]string {\n\treturn map[string]string{\"type\": \"{{ resource }}\", \"{{ resource }}_cr\": name}\n}\n\n// imageFor{{ resource }} returns the image for the resources\n// belonging to the given {{ resource }} CR name.\nfunc imageFor{{ resource }}(name string) string {\n\t// TODO: this method will return the value of the envvar create to store the image:tag informed\n}\n\nfunc (r *{{ resource }}Reconciler) SetupWithManager(mgr ctrl.Manager) error {\n\treturn ctrl.NewControllerManagedBy(mgr).\n\t\tFor(&cachev1alpha1.{{ resource }}{}).\n\t\tOwns(&appsv1.Deployment{}).\n\t\tComplete(r)\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Deploy Image Plugin with Kubebuilder\nDESCRIPTION: Shell command showing how to use the Deploy Image plugin to scaffold an API and controller with specific container configuration. This example demonstrates passing container-specific parameters through the CLI.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/plugins/extending/extending_cli_features_and_plugins.md#2025-04-21_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\nkubebyilder create api --group example.com --version v1alpha1 --kind Memcached --image=memcached:memcached:1.6.26-alpine3.19 --image-container-command=\"memcached,--memory-limit=64,-o,modern,-v\" --image-container-port=\"11211\" --run-as-user=\"1001\" --plugins=\"deploy-image/v1-alpha\" --make=false\n```\n\n----------------------------------------\n\nTITLE: Documenting Object and DeepCopy Markers in Kubebuilder\nDESCRIPTION: This markdown snippet introduces the purpose of Object and DeepCopy markers in Kubebuilder. It explains that these markers control when DeepCopy and runtime.Object implementation methods are generated for custom resources.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/reference/markers/object.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Object/DeepCopy\n\nThese markers control when `DeepCopy` and `runtime.Object` implementation\nmethods are generated.\n\n{{#markerdocs object}}\n```\n\n----------------------------------------\n\nTITLE: Building and Pushing Docker Image for Kubernetes Controller\nDESCRIPTION: Command to build and push the controller image to a specified container registry. The image tag must be specified in the IMG variable.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/testdata/project-v4-multigroup/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmake docker-build docker-push IMG=<some-registry>/project-v4-multigroup:tag\n```\n\n----------------------------------------\n\nTITLE: Setting Up Controller to Watch Primary and Secondary Resources\nDESCRIPTION: Configuration for the controller to watch both the primary Busybox resource and its owned secondary Deployment resource. The Owns() method ensures that changes to the Deployment will trigger reconciliation of the owning Busybox resource.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/reference/watching-resources/secondary-owned-resources.md#2025-04-21_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// SetupWithManager sets up the controller with the Manager.\n// The controller will watch both the Busybox primary resource and the Deployment secondary resource.\nfunc (r *BusyboxReconciler) SetupWithManager(mgr ctrl.Manager) error {\n    return ctrl.NewControllerManagedBy(mgr).\n        For(&examplecomv1alpha1.Busybox{}).  // Watch the primary resource\n        Owns(&appsv1.Deployment{}).          // Watch the secondary resource (Deployment)\n        Complete(r)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Memcached Spec Structure in Go\nDESCRIPTION: Go code snippet defining the MemcachedSpec structure with a Size field of type int32 that will determine the number of Memcached instances to be deployed.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/getting-started.md#2025-04-21_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype MemcachedSpec struct {\n\t...\n\tSize int32 `json:\"size,omitempty\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Event Structure in Go\nDESCRIPTION: Shows the anatomy of an Event object in Go, including the parameters for object, event type, reason, and message.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/reference/raising-events.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nEvent(object runtime.Object, eventtype, reason, message string)\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Prometheus Metrics in Kubebuilder Controller\nDESCRIPTION: This snippet demonstrates how to define custom Prometheus metrics collectors and register them with the global registry from controller-runtime. It includes creating counters for tracking processed items and failures, then registering them in an init function so they're available throughout the application.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/reference/metrics.md#2025-04-21_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"github.com/prometheus/client_golang/prometheus\"\n    \"sigs.k8s.io/controller-runtime/pkg/metrics\"\n)\n\nvar (\n    goobers = prometheus.NewCounter(\n        prometheus.CounterOpts{\n            Name: \"goobers_total\",\n            Help: \"Number of goobers processed\",\n        },\n    )\n    gooberFailures = prometheus.NewCounter(\n        prometheus.CounterOpts{\n            Name: \"goober_failures_total\",\n            Help: \"Number of failed goobers\",\n        },\n    )\n)\n\nfunc init() {\n    // Register custom metrics with the global prometheus registry\n    metrics.Registry.MustRegister(goobers, gooberFailures)\n}\n```\n\n----------------------------------------\n\nTITLE: Running Controller Locally\nDESCRIPTION: Runs the controller locally against the cluster with webhooks disabled for testing purposes.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/cronjob-tutorial/running.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport ENABLE_WEBHOOKS=false\nmake run\n```\n\n----------------------------------------\n\nTITLE: Using Kubebuilder CLI with External Plugins\nDESCRIPTION: Examples of various Kubebuilder CLI commands that utilize external plugins for project initialization, API creation, webhook creation, and configuration editing. Demonstrates plugin chaining and custom flag usage.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/plugins/extending/external-plugins.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n# Initialize a new project with the external plugin named `sampleplugin`\nkubebuilder init --plugins sampleplugin/v1\n\n# Display help information of the `init` subcommand of the external plugin\nkubebuilder init --plugins sampleplugin/v1 --help\n\n# Create a new API with the above external plugin with a customized flag `number`\nkubebuilder create api --plugins sampleplugin/v1 --number 2\n\n# Create a webhook with the above external plugin with a customized flag `hooked`\nkubebuilder create webhook --plugins sampleplugin/v1 --hooked\n\n# Update the project configuration with the above external plugin\nkubebuilder edit --plugins sampleplugin/v1\n\n# Create new APIs with external plugins v1 and v2 by respecting the plugin chaining order\nkubebuilder create api --plugins sampleplugin/v1,sampleplugin/v2\n\n# Create new APIs with the go/v4 plugin and then pass those files to the external plugin by respecting the plugin chaining order\nkubebuilder create api --plugins go/v4,sampleplugin/v1\n```\n\n----------------------------------------\n\nTITLE: Defining Plugin Interface in Go\nDESCRIPTION: Defines the base Plugin interface that all plugins must implement. This interface includes methods for version, name, and supported project versions.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/designs/extensible-cli-and-scaffolding-plugins-phase-1.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype Plugin interface {\n    // Version returns the plugin's semantic version, ex. \"v1.2.3\".\n    //\n    // Note: this version is different from config version.\n    Version() string\n    // Name returns a DNS1123 label string defining the plugin type.\n    // For example, Kubebuilder's main plugin would return \"go\".\n    //\n    // Plugin names can be fully-qualified, and non-fully-qualified names are\n    // prepended to \".kubebuilder.io\" to prevent conflicts.\n    Name() string\n    // SupportedProjectVersions lists all project configuration versions this\n    // plugin supports, ex. []string{\"2\", \"3\"}. The returned slice cannot be empty.\n    SupportedProjectVersions() []string\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a new API with Kubebuilder CLI\nDESCRIPTION: This command creates a new API for a CronJob resource in the batch group, version v1. It generates both the resource and controller scaffolding.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/cronjob-tutorial/new-api.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubebuilder create api --group batch --version v1 --kind CronJob\n```\n\n----------------------------------------\n\nTITLE: Initializing Kubebuilder Project\nDESCRIPTION: Commands to create a new Kubebuilder project directory and initialize it with a domain and repository path.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/quick-start.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p ~/projects/guestbook\ncd ~/projects/guestbook\nkubebuilder init --domain my.domain --repo my.domain/guestbook\n```\n\n----------------------------------------\n\nTITLE: Defining Memcached Deployment Specification\nDESCRIPTION: Deployment specification for Memcached including container configuration, ports, and resource limits.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/getting-started.md#2025-04-21_snippet_8\n\nLANGUAGE: go\nCODE:\n```\n    dep := &appsv1.Deployment{\n\t\tSpec: appsv1.DeploymentSpec{\n\t\t\tReplicas: &replicas,\n\t\t\tTemplate: corev1.PodTemplateSpec{\n\t\t\t\tSpec: corev1.PodSpec{\n\t\t\t\t\tContainers: []corev1.Container{{\n\t\t\t\t\t\tImage:           \"memcached:1.6.26-alpine3.19\",\n\t\t\t\t\t\tName:            \"memcached\",\n\t\t\t\t\t\tImagePullPolicy: corev1.PullIfNotPresent,\n\t\t\t\t\t\tPorts: []corev1.ContainerPort{{\n\t\t\t\t\t\t\tContainerPort: 11211,\n\t\t\t\t\t\t\tName:          \"memcached\",\n\t\t\t\t\t\t}},\n\t\t\t\t\t\tCommand: []string{\"memcached\", \"--memory-limit=64\", \"-o\", \"modern\", \"-v\"},\n\t\t\t\t\t}},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}\n```\n\n----------------------------------------\n\nTITLE: Defining RBAC Permissions for Resource Management\nDESCRIPTION: RBAC marker annotations that specify the permissions needed by the controller to manage both the Busybox custom resource and the Deployment resource. These markers are processed by controller-gen to generate the necessary ClusterRole manifests.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/reference/watching-resources/secondary-owned-resources.md#2025-04-21_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// +kubebuilder:rbac:groups=example.com,resources=busyboxes,verbs=get;list;watch;create;update;patch;delete\n// +kubebuilder:rbac:groups=apps,resources=deployments,verbs=get;list;watch;create;update;patch;delete\n```\n\n----------------------------------------\n\nTITLE: Defining Kubebuilder PROJECT File Layout for Version 3\nDESCRIPTION: A complete example of a PROJECT file in YAML format for Kubebuilder version 3. This configuration includes plugin specifications, resource definitions, and project metadata that drive the scaffolding behavior of Kubebuilder CLI tools.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/reference/project-config.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndomain: testproject.org\ncliVersion: v4.6.0\nlayout:\n  - go.kubebuilder.io/v4\nplugins:\n  deploy-image.go.kubebuilder.io/v1-alpha:\n    resources:\n      - domain: testproject.org\n        group: example.com\n        kind: Memcached\n        options:\n          containerCommand: memcached,--memory-limit=64,-o,modern,-v\n          containerPort: \"11211\"\n          image: memcached:memcached:1.6.26-alpine3.19\n          runAsUser: \"1001\"\n        version: v1alpha1\n      - domain: testproject.org\n        group: example.com\n        kind: Busybox\n        options:\n          image: busybox:1.36.1\n        version: v1alpha1\nprojectName: project-v4-with-deploy-image\nrepo: sigs.k8s.io/kubebuilder/testdata/project-v4-with-deploy-image\nresources:\n  - api:\n      crdVersion: v1\n      namespaced: true\n    controller: true\n    domain: testproject.org\n    group: example.com\n    kind: Memcached\n    path: sigs.k8s.io/kubebuilder/testdata/project-v4-with-deploy-image/api/v1alpha1\n    version: v1alpha1\n    webhooks:\n      validation: true\n      webhookVersion: v1\n  - api:\n      crdVersion: v1\n      namespaced: true\n    controller: true\n    domain: testproject.org\n    group: example.com\n    kind: Busybox\n    path: sigs.k8s.io/kubebuilder/testdata/project-v4-with-deploy-image/api/v1alpha1\n    version: v1alpha1\nversion: \"3\"\n```\n\n----------------------------------------\n\nTITLE: Creating API and Controller for CronJob Resource\nDESCRIPTION: Command to scaffold an API and controller for a CronJob resource. This creates the basic structure for the CronJob API types and controller.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/migration/migration_guide_gov3_to_gov4.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkubebuilder create api --group batch --version v1 --kind CronJob\n```\n\n----------------------------------------\n\nTITLE: Scaffolding CronJob Webhooks with Kubebuilder\nDESCRIPTION: This command creates the webhook functions for a CronJob CRD with defaulting and programmatic validation. It scaffolds the necessary files and registers the webhook with the manager in main.go.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/cronjob-tutorial/webhook-implementation.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubebuilder create webhook --group batch --version v1 --kind CronJob --defaulting --programmatic-validation\n```\n\n----------------------------------------\n\nTITLE: Defining a Predicate for Filtering Update Events in Go\nDESCRIPTION: This snippet defines a predicate that allows reconciliation only when there's a meaningful update to the Busybox resource, specifically when the spec.size field changes. It also allows create, delete, and generic events.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/reference/watching-resources/predicates-with-watch.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"sigs.k8s.io/controller-runtime/pkg/predicate\"\n    \"sigs.k8s.io/controller-runtime/pkg/event\"\n)\n\n// Predicate to trigger reconciliation only on size changes in the Busybox spec\nupdatePred := predicate.Funcs{\n    // Only allow updates when the spec.size of the Busybox resource changes\n    UpdateFunc: func(e event.UpdateEvent) bool {\n        oldObj := e.ObjectOld.(*examplecomv1alpha1.Busybox)\n        newObj := e.ObjectNew.(*examplecomv1alpha1.Busybox)\n\n        // Trigger reconciliation only if the spec.size field has changed\n        return oldObj.Spec.Size != newObj.Spec.Size\n    },\n\n    // Allow create events\n    CreateFunc: func(e event.CreateEvent) bool {\n        return true\n    },\n\n    // Allow delete events\n    DeleteFunc: func(e event.DeleteEvent) bool {\n        return true\n    },\n\n    // Allow generic events (e.g., external triggers)\n    GenericFunc: func(e event.GenericEvent) bool {\n        return true\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Controller Reference\nDESCRIPTION: Code to set owner references for managing resource ownership and cascading deletions.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/getting-started.md#2025-04-21_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nif err := ctrl.SetControllerReference(memcached, dep, r.Scheme); err != nil {\n    return nil, err\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Controller to Watch Non-Owned Busybox Resource in Go\nDESCRIPTION: This snippet demonstrates how to set up a BackupBusyboxReconciler to watch changes in both the primary BackupBusybox resource and the secondary Busybox resource. It triggers reconciliation for BackupBusybox when changes occur in Busybox instances.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/reference/watching-resources/secondary-resources-not-owned.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// SetupWithManager sets up the controller with the Manager.\n// The controller will watch both the BackupBusybox primary resource and the Busybox resource.\nfunc (r *BackupBusyboxReconciler) SetupWithManager(mgr ctrl.Manager) error {\n    return ctrl.NewControllerManagedBy(mgr).\n        For(&examplecomv1alpha1.BackupBusybox{}).  // Watch the primary resource (BackupBusybox)\n        Watches(\n            &source.Kind{Type: &examplecomv1alpha1.Busybox{}},  // Watch the Busybox CR\n            handler.EnqueueRequestsFromMapFunc(func(ctx context.Context, obj client.Object) []reconcile.Request {\n                // Trigger reconciliation for the BackupBusybox in the same namespace\n                return []reconcile.Request{\n                    {\n                        NamespacedName: types.NamespacedName{\n                            Name:      \"backupbusybox\",  // Reconcile the associated BackupBusybox resource\n                            Namespace: obj.GetNamespace(),  // Use the namespace of the changed Busybox\n                        },\n                    },\n                }\n            }),\n        ).  // Trigger reconciliation when the Busybox resource changes\n        Complete(r)\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Memcached Custom Resource in YAML\nDESCRIPTION: YAML manifest demonstrating a sample Memcached custom resource with apiVersion, kind, metadata, and spec defining a size of 1 instance.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/getting-started.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: cache.example.com/v1alpha1\nkind: Memcached\nmetadata:\n  labels:\n    app.kubernetes.io/name: memcached\n    app.kubernetes.io/instance: memcached-sample\n    app.kubernetes.io/part-of: memcached-operator\n    app.kubernetes.io/managed-by: kustomize\n    app.kubernetes.io/created-by: memcached-operator\n  name: memcached-sample\nspec:\n  # TODO(user): Add fields here\n  size: 1\n```\n\n----------------------------------------\n\nTITLE: Enabling Status Subresource in CRD\nDESCRIPTION: This snippet demonstrates how to enable the /status subresource for a CRD using the +kubebuilder:subresource:status marker.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/reference/generating-crd.md#2025-04-21_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// +kubebuilder:subresource:status\ntype Toy struct {\n\tmetav1.TypeMeta   `json:\",inline\"`\n\tmetav1.ObjectMeta `json:\"metadata,omitempty\"`\n\n\tSpec   ToySpec   `json:\"spec,omitempty\"`\n\tStatus ToyStatus `json:\"status,omitempty\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Illustrating Reconciliation Process with Go Pseudocode\nDESCRIPTION: Go pseudocode example illustrating the reconciliation process in a Kubernetes operator, showing how to handle resource management and respond to different conditions with appropriate return values.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/getting-started.md#2025-04-21_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nreconcile App {\n\n  // Check if a Deployment for the app exists, if not, create one\n  // If there's an error, then restart from the beginning of the reconcile\n  if err != nil {\n    return reconcile.Result{}, err\n  }\n\n  // Check if a Service for the app exists, if not, create one\n  // If there's an error, then restart from the beginning of the reconcile\n  if err != nil {\n    return reconcile.Result{}, err\n  }\n\n  // Look for Database CR/CRD\n  // Check the Database Deployment's replicas size\n  // If deployment.replicas size doesn't match cr.size, then update it\n  // Then, restart from the beginning of the reconcile. For example, by returning `reconcile.Result{Requeue: true}, nil`.\n  if err != nil {\n    return reconcile.Result{Requeue: true}, nil\n  }\n  ...\n\n  // If at the end of the loop:\n  // Everything was executed successfully, and the reconcile can stop\n  return reconcile.Result{}, nil\n\n}\n```\n\n----------------------------------------\n\nTITLE: Creating CronJob Resource\nDESCRIPTION: Creates a CronJob resource in the cluster using the sample configuration.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/cronjob-tutorial/running.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create -f config/samples/batch_v1_cronjob.yaml\n```\n\n----------------------------------------\n\nTITLE: Initializing a Kubebuilder Project with Go/v4 Plugin\nDESCRIPTION: Command to create a new Kubebuilder project using the go/v4 plugin. This specifies a domain, repository path, and explicitly selects the go/v4 plugin.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/plugins/available/go-v4-plugin.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nkubebuilder init --domain tutorial.kubebuilder.io --repo tutorial.kubebuilder.io/project --plugins=go/v4\n```\n\n----------------------------------------\n\nTITLE: Implementing Convertible Interface for ExternalJob in Go\nDESCRIPTION: Demonstrates how to implement the Convertible interface for a spoke type (ExternalJob v1). It includes ConvertTo and ConvertFrom methods to handle conversions between the spoke version and the hub version.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/designs/crd_version_conversion.md#2025-04-21_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\npackage v1\n\nfunc (ej *ExternalJob) ConvertTo(dst conversion.Hub) error {\n    switch t := dst.(type) {\n    case *v3.ExternalJob:\n        jobv3 := dst.(*v3.ExternalJob)\n        jobv3.ObjectMeta = ej.ObjectMeta\n         // conversion implementation\n\t   //\n        return nil\n    default:\n        return fmt.Errorf(\"unsupported type %v\", t)\n    }\n}\n\nfunc (ej *ExternalJob) ConvertFrom(src conversion.Hub) error {\n    switch t := src.(type) {\n    case *v3.ExternalJob:\n        jobv3 := src.(*v3.ExternalJob)\n        ej.ObjectMeta = jobv3.ObjectMeta\n\t   // conversion implementation\n        return nil\n    default:\n        return fmt.Errorf(\"unsupported type %v\", t)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Sample Resources to Kubernetes Cluster\nDESCRIPTION: Command to apply sample Custom Resources from the config/samples directory to test the controller's functionality.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/testdata/project-v4-multigroup/README.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nkubectl apply -k config/samples/\n```\n\n----------------------------------------\n\nTITLE: Configuring Primary Resource Watch in Kubernetes Controller\nDESCRIPTION: Sets up a controller to watch for create, update, and delete events on the primary resource (e.g., MyApp). This is the default code scaffolded by Kubebuilder when creating a new API.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/reference/watching-resources.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// Watches the primary resource (e.g., MyApp) for create, update, delete events\nif err := ctrl.NewControllerManagedBy(mgr).\n   For(&<YourAPISpec>{}). <-- See there that the Controller is For this API\n   Complete(r); err != nil {\n   return err\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Dockerfile for New Project Structure\nDESCRIPTION: Modifies the Dockerfile to copy files from the new directory structure and update the build command.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/migration/manually_migration_guide_gov3_to_gov4.md#2025-04-21_snippet_2\n\nLANGUAGE: dockerfile\nCODE:\n```\nCOPY cmd/main.go cmd/main.go\nCOPY api/ api/\nCOPY internal/controller/ internal/controller/\n\nRUN CGO_ENABLED=0 GOOS=${TARGETOS:-linux} GOARCH=${TARGETARCH} go build -a -o manager cmd/main.go\n```\n\n----------------------------------------\n\nTITLE: Initializing a Kubebuilder Project for Memcached Operator\nDESCRIPTION: Shell commands to create a new directory for the Memcached operator project and initialize it with Kubebuilder specifying the domain as example.com.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/getting-started.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmkdir $GOPATH/memcached-operator\ncd $GOPATH/memcached-operator\nkubebuilder init --domain=example.com\n```\n\n----------------------------------------\n\nTITLE: Writing Integration Tests with envtest in Go\nDESCRIPTION: Basic structure for writing integration tests using envtest in Go. It shows how to set up the test environment, start and stop the test API server, and write test logic.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/reference/envtest.md#2025-04-21_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nimport sigs.k8s.io/controller-runtime/pkg/envtest\n\n//specify testEnv configuration\ntestEnv = &envtest.Environment{\n\tCRDDirectoryPaths: []string{filepath.Join(\"..\", \"config\", \"crd\", \"bases\")},\n}\n\n//start testEnv\ncfg, err = testEnv.Start()\n\n//write test logic\n\n//stop testEnv\nerr = testEnv.Stop()\n```\n\n----------------------------------------\n\nTITLE: Creating a Conversion Webhook in Kubebuilder for CronJob API Versions\nDESCRIPTION: Command to generate a conversion webhook between CronJob API versions v1 (Hub) and v2 (Spoke) using Kubebuilder. This creates the required scaffolding for implementing version conversion.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/multiversion-tutorial/conversion.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nkubebuilder create webhook --group batch --version v1 --kind CronJob --conversion --spoke v2\n```\n\n----------------------------------------\n\nTITLE: Implementing Prometheus and Cert-Manager Installation Utilities\nDESCRIPTION: This snippet provides utility functions for installing and uninstalling Prometheus Operator and cert-manager in test environments. It includes functions to load Docker images to a Kind cluster and handle installation via kubectl commands.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/reference/envtest.md#2025-04-21_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nconst (\n\tprometheusOperatorVersion = \"0.51\"\n\tprometheusOperatorURL     = \"https://raw.githubusercontent.com/prometheus-operator/\" + \"prometheus-operator/release-%s/bundle.yaml\"\n\tcertmanagerVersion = \"v1.5.3\"\n\tcertmanagerURLTmpl = \"https://github.com/cert-manager/cert-manager/releases/download/%s/cert-manager.yaml\"\n)\n\nfunc warnError(err error) {\n\t_, _ = fmt.Fprintf(GinkgoWriter, \"warning: %v\\n\", err)\n}\n\n// InstallPrometheusOperator installs the prometheus Operator to be used to export the enabled metrics.\nfunc InstallPrometheusOperator() error {\n\turl := fmt.Sprintf(prometheusOperatorURL, prometheusOperatorVersion)\n\tcmd := exec.Command(\"kubectl\", \"apply\", \"-f\", url)\n\t_, err := Run(cmd)\n\treturn err\n}\n\n// UninstallPrometheusOperator uninstalls the prometheus\nfunc UninstallPrometheusOperator() {\n\turl := fmt.Sprintf(prometheusOperatorURL, prometheusOperatorVersion)\n\tcmd := exec.Command(\"kubectl\", \"delete\", \"-f\", url)\n\tif _, err := Run(cmd); err != nil {\n\t\twarnError(err)\n\t}\n}\n\n// UninstallCertManager uninstalls the cert manager\nfunc UninstallCertManager() {\n\turl := fmt.Sprintf(certmanagerURLTmpl, certmanagerVersion)\n\tcmd := exec.Command(\"kubectl\", \"delete\", \"-f\", url)\n\tif _, err := Run(cmd); err != nil {\n\t\twarnError(err)\n\t}\n}\n\n// InstallCertManager installs the cert manager bundle.\nfunc InstallCertManager() error {\n\turl := fmt.Sprintf(certmanagerURLTmpl, certmanagerVersion)\n\tcmd := exec.Command(\"kubectl\", \"apply\", \"-f\", url)\n\tif _, err := Run(cmd); err != nil {\n\t\treturn err\n\t}\n\t// Wait for cert-manager-webhook to be ready, which can take time if cert-manager\n\t//was re-installed after uninstalling on a cluster.\n\tcmd = exec.Command(\"kubectl\", \"wait\", \"deployment.apps/cert-manager-webhook\",\n\t\t\"--for\", \"condition=Available\",\n\t\t\"--namespace\", \"cert-manager\",\n\t\t\"--timeout\", \"5m\",\n\t\t)\n\n\t_, err := Run(cmd)\n\treturn err\n}\n\n// LoadImageToKindClusterWithName loads a local docker image to the kind cluster\nfunc LoadImageToKindClusterWithName(name string) error {\n\tcluster := \"kind\"\n\tif v, ok := os.LookupEnv(\"KIND_CLUSTER\"); ok {\n\t\tcluster = v\n\t}\n\n\tkindOptions := []string{\"load\", \"docker-image\", name, \"--name\", cluster}\n\tcmd := exec.Command(\"kind\", kindOptions...)\n\t_, err := Run(cmd)\n\treturn err\n}\n```\n\n----------------------------------------\n\nTITLE: Using Basic Markers in Go Code with Kubebuilder\nDESCRIPTION: Examples of kubebuilder markers in Go code, showing the basic syntax for adding validation rules and custom print columns. These markers are used by controller-gen to generate appropriate Kubernetes configurations.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/reference/markers.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// +kubebuilder:validation:Optional\n// +kubebuilder:validation:MaxItems=2\n// +kubebuilder:printcolumn:JSONPath=\".status.replicas\",name=Replicas,type=string\n```\n\n----------------------------------------\n\nTITLE: Using RBAC Annotations in Kubebuilder\nDESCRIPTION: Examples of RBAC annotations in Kubebuilder for defining role-based access control policies. These annotations specify the API groups, resources, and verbs to generate RBAC manifests with appropriate permissions.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/kubebuilder_annotation.md#2025-04-21_snippet_1\n\nLANGUAGE: golang\nCODE:\n```\n// +kubebuilder:rbac:groups=apps,resources=deployments,verbs=get;list;watch;delete\n\n// +rbac:groups=apps,resources=deployments,verbs=get;list;watch;delete\n```\n\n----------------------------------------\n\nTITLE: Annotating Webhook Configurations with cert-manager in Kustomize\nDESCRIPTION: This YAML snippet shows a Kustomize patch for annotating MutatingWebhookConfiguration and ValidatingWebhookConfiguration objects with cert-manager annotations. The annotation 'cert-manager.io/inject-ca-from' is used to point to an existing certificate request instance.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/cronjob-tutorial/cert-manager.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: admissionregistration.k8s.io/v1\nkind: MutatingWebhookConfiguration\nmetadata:\n  name: mutating-webhook-configuration\n  annotations:\n    cert-manager.io/inject-ca-from: $(CERTIFICATE_NAMESPACE)/$(CERTIFICATE_NAME)\n---\napiVersion: admissionregistration.k8s.io/v1\nkind: ValidatingWebhookConfiguration\nmetadata:\n  name: validating-webhook-configuration\n  annotations:\n    cert-manager.io/inject-ca-from: $(CERTIFICATE_NAMESPACE)/$(CERTIFICATE_NAME)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Test Environment for Kubernetes Controllers in Go\nDESCRIPTION: This code snippet demonstrates how to set up a test environment for Kubernetes controllers using envtest and Ginkgo. It initializes a test Kubernetes API server, creates a controller manager, and sets up the test suite.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/cronjob-tutorial/writing-tests.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n{{#literatego ../cronjob-tutorial/testdata/project/internal/controller/suite_test.go}}\n```\n\n----------------------------------------\n\nTITLE: Generating CRDs with Make\nDESCRIPTION: This Makefile snippet shows the command used to generate CRDs using controller-gen. It specifies the output directory and the types of resources to generate.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/reference/generating-crd.md#2025-04-21_snippet_4\n\nLANGUAGE: makefile\nCODE:\n```\n# Generate manifests for CRDs\nmanifests: controller-gen\n\t$(CONTROLLER_GEN) rbac:roleName=manager-role crd webhook paths=\"./...\" output:crd:artifacts:config=config/crd/bases\n```\n\n----------------------------------------\n\nTITLE: Initializing a Kubebuilder Project for CronJob Controller\nDESCRIPTION: Commands to create a new directory for the project and initialize it with Kubebuilder. The project uses 'tutorial.kubebuilder.io' as the domain and repository path.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/cronjob-tutorial/cronjob-tutorial.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# create a project directory, and then run the init command.\nmkdir project\ncd project\n# we'll use a domain of tutorial.kubebuilder.io,\n# so all API groups will be <group>.tutorial.kubebuilder.io.\nkubebuilder init --domain tutorial.kubebuilder.io --repo tutorial.kubebuilder.io/project\n```\n\n----------------------------------------\n\nTITLE: KubeBuilder PROJECT Configuration Example\nDESCRIPTION: Example PROJECT configuration file showing the structure for a project with two APIs (Memcached and Busybox) using the Deploy Image Plugin. Demonstrates configuration for domain, CLI version, layout, plugins, and resources.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/reference/project-config.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Code generated by tool. DO NOT EDIT.\n# This file is used to track the info used to scaffold your project\n# and allow the plugins properly work.\n# More info: https://book.kubebuilder.io/reference/project-config.html\ndomain: testproject.org\ncliVersion: v4.6.0\nlayout:\n  - go.kubebuilder.io/v4\nplugins:\n  deploy-image.go.kubebuilder.io/v1-alpha:\n    resources:\n      - domain: testproject.org\n        group: example.com\n        kind: Memcached\n        options:\n          containerCommand: memcached,--memory-limit=64,-o,modern,-v\n          containerPort: \"11211\"\n          image: memcached:1.4.36-alpine\n          runAsUser: \"1001\"\n        version: v1alpha1\n      - domain: testproject.org\n        group: example.com\n        kind: Busybox\n        options:\n          image: busybox:1.28\n        version: v1alpha1\nprojectName: project-v4-with-deploy-image\nrepo: sigs.k8s.io/kubebuilder/testdata/project-v4-with-deploy-image\nresources:\n  - api:\n      crdVersion: v1\n      namespaced: true\n    controller: true\n    domain: testproject.org\n    group: example.com\n    kind: Memcached\n    path: sigs.k8s.io/kubebuilder/testdata/project-v4-with-deploy-image/api/v1alpha1\n    version: v1alpha1\n    webhooks:\n      validation: true\n      webhookVersion: v1\n  - api:\n      crdVersion: v1\n      namespaced: true\n    controller: true\n    domain: testproject.org\n    group: example.com\n    kind: Busybox\n    path: sigs.k8s.io/kubebuilder/testdata/project-v4-with-deploy-image/api/v1alpha1\n    version: v1alpha1\nversion: \"3\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Cluster-Scoped CRD using Go Markers\nDESCRIPTION: This Go code snippet shows how to use Kubebuilder markers to configure a CRD as cluster-scoped. It adds the +kubebuilder:resource:scope=Cluster marker above the API type definition.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/reference/scopes.md#2025-04-21_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n//+kubebuilder:object:root=true\n//+kubebuilder:subresource:status\n//+kubebuilder:resource:scope=Cluster,shortName=mc\n\n...\n```\n\n----------------------------------------\n\nTITLE: Setting Up Prometheus and Cert-Manager for Tests\nDESCRIPTION: This example demonstrates how to add setup and teardown steps for Prometheus Operator and cert-manager in test suites. It shows Ginkgo BeforeEach and AfterEach blocks for installing and uninstalling these components.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/reference/envtest.md#2025-04-21_snippet_8\n\nLANGUAGE: go\nCODE:\n```\n    // Add the operations to install the Prometheus operator and the cert-manager\n    // before the tests.\n    BeforeEach(func() {\n        By(\"installing prometheus operator\")\n        Expect(utils.InstallPrometheusOperator()).To(Succeed())\n\n        By(\"installing the cert-manager\")\n        Expect(utils.InstallCertManager()).To(Succeed())\n    })\n\n    // You can also remove them after the tests::\n    AfterEach(func() {\n        By(\"uninstalling the Prometheus manager bundle\")\n        utils.UninstallPrometheusOperManager()\n\n        By(\"uninstalling the cert-manager bundle\")\n        utils.UninstallCertManager()\n    })\n```\n\n----------------------------------------\n\nTITLE: Generating Helm Chart for Project\nDESCRIPTION: Creates a Helm chart for the project using the Kubebuilder Helm plugin.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/testdata/project-v4/README.md#2025-04-21_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nkubebuilder edit --plugins=helm/v1-alpha\n```\n\n----------------------------------------\n\nTITLE: Defining Specific Subcommand Interfaces in Go for Kubebuilder Plugins\nDESCRIPTION: This snippet defines specific interfaces for different types of subcommands that plugins can provide, including init, edit, create API, and create webhook subcommands. These interfaces extend the basic Scaffolder interface with additional requirements.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/designs/extensible-cli-and-scaffolding-plugins-phase-1-5.md#2025-04-21_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// InitSubcommand is the specific interface for subcommands returned by init plugins.\ntype InitSubcommand interface {\n\tScaffolder\n}\n\n// EditSubcommand is the specific interface for subcommands returned by edit plugins.\ntype EditSubcommand interface {\n\tScaffolder\n}\n\n// CreateAPISubcommand is the specific interface for subcommands returned by create API plugins.\ntype CreateAPISubcommand interface {\n\tRequiresResource\n\tScaffolder\n}\n\n// CreateWebhookSubcommand is the specific interface for subcommands returned by create webhook plugins.\ntype CreateWebhookSubcommand interface {\n\tRequiresResource\n\tScaffolder\n}\n```\n\n----------------------------------------\n\nTITLE: Using Webhook Annotations in Kubebuilder\nDESCRIPTION: Examples of webhook annotations in Kubebuilder for defining admission webhooks and server options. The annotation structure includes header, module, and submodule tokens, with various key-value pairs defining webhook behavior and configuration.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/kubebuilder_annotation.md#2025-04-21_snippet_0\n\nLANGUAGE: golang\nCODE:\n```\n// +kubebuilder:webhook:admission:groups=apps,resources=deployments,verbs=CREATE;UPDATE,name=bar-webhook,path=/bar,type=mutating,failure-policy=Fail\n\n// +kubebuilder:webhook:serveroption:port=7890,cert-dir=/tmp/test-cert,service=test-system|webhook-service,selector=app|webhook-server,secret=test-system|webhook-secret,mutating-webhook-config-name=test-mutating-webhook-cfg,validating-webhook-config-name=test-validating-webhook-cfg\n```\n\n----------------------------------------\n\nTITLE: Configuring EventRecorder in Kubernetes Controller\nDESCRIPTION: Shows how to set up an EventRecorder in a Kubernetes controller by modifying the main.go file.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/reference/raising-events.md#2025-04-21_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nif err := (&controller.MyKindReconciler{\n\t\tClient:   mgr.GetClient(),\n\t\tScheme:   mgr.GetScheme(),\n\t\t// Note that we added the following line:\n\t\tRecorder: mgr.GetEventRecorderFor(\"mykind-controller\"),\n\t}).SetupWithManager(mgr); err != nil {\n\t\tsetupLog.Error(err, \"unable to create controller\", \"controller\", \"MyKind\")\n\t\tos.Exit(1)\n\t}\n```\n\n----------------------------------------\n\nTITLE: Updating PROJECT File Layout Version in YAML\nDESCRIPTION: Replace the old layout version with the new go/v4 version in the PROJECT file.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/migration/manually_migration_guide_gov3_to_gov4.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nlayout:\n- go.kubebuilder.io/v4\n```\n\n----------------------------------------\n\nTITLE: Adding EventRecorder to Kubernetes Controller Struct\nDESCRIPTION: Illustrates how to update the controller struct to include the EventRecorder for raising events.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/reference/raising-events.md#2025-04-21_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t...\n\t\"k8s.io/client-go/tools/record\"\n\t...\n)\n// MyKindReconciler reconciles a MyKind object\ntype MyKindReconciler struct {\n\tclient.Client\n\tScheme   *runtime.Scheme\n\t// See that we added the following code to allow us to pass the record.EventRecorder\n\tRecorder record.EventRecorder\n}\n```\n\n----------------------------------------\n\nTITLE: Running Controller-Gen with CRD and RBAC Generation\nDESCRIPTION: This command generates CRDs and RBAC configurations. It stores the generated CRD YAML in the 'config/crd/bases' directory and uses default output rules for RBAC. It considers all packages in the current directory tree.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/reference/controller-gen.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncontroller-gen paths=./... crd:trivialVersions=true rbac:roleName=controller-perms output:crd:artifacts:config=config/crd/bases\n```\n\n----------------------------------------\n\nTITLE: Implementing Object Conversion Logic in Go\nDESCRIPTION: Defines the convertObject method of the conversionHandler, which handles the actual conversion between different versions of an object using the Hub and Convertible interfaces.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/designs/crd_version_conversion.md#2025-04-21_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\nfunc (ch *conversionHandler) convertObject(src, dst runtime.Object) error {\n    // check if src and dst are of same type, then may be return with error because API server will never invoke this handler for same version.\n    srcIsHub, dstIsHub := isHub(src), isHub(dst)\n    srcIsConvertible, dstIsConvertible := isConvertible(src), isConvertable(dst)\n    if srcIsHub {\n        if dstIsConvertible {\n            return dst.(conversion.Convertable).ConvertFrom(src.(conversion.Hub))\n        } else {\n            // this is error case, this can be flagged at setup time ?\n            return fmt.Errorf(\"%T is not convertible to\", src)\n        }\n    }\n\n    if dstIsHub {\n        if srcIsConvertible {\n            return src.(conversion.Convertable).ConvertTo(dst.(conversion.Hub))\n        } else {\n            // this is error case.\n            return fmt.Errorf(\"%T is not convertible\", src)\n        }\n    }\n\n    // neither src or dst are Hub, means both of them are spoke, so lets get the hub\n    // version type.\n\n    hub, err := getHub(scheme, src)\n    if err != nil {\n        return err\n    }\n\n    // shall we get Hub for dst type as well and ensure hubs are same ?\n    // src and dst needs to be convertible for it to work\n    if !srcIsConvertable || !dstIsConvertable {\n        return fmt.Errorf(\"%T and %T needs to be both convertible\", src, dst)\n    }\n\n    err = src.(conversion.Convertible).ConvertTo(hub)\n    if err != nil {\n        return fmt.Errorf(\"%T failed to convert to hub version %T : %w\", src, hub, err)\n    }\n\n    err = dst.(conversion.Convertible).ConvertFrom(hub)\n    if err != nil {\n        return fmt.Errorf(\"%T failed to convert from hub version %T : %w\", dst, hub, err)\n    }\n    return nil\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Manager to Watch Multiple Namespaces in Go\nDESCRIPTION: This snippet demonstrates how to set up a manager to watch multiple specified namespaces. It uses the Cache option with DefaultNamespaces to list the target namespaces.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/reference/scopes.md#2025-04-21_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmgr, err := ctrl.NewManager(ctrl.GetConfigOrDie(), ctrl.Options{\n...\nCache: cache.Options{\n    DefaultNamespaces: map[string]cache.Config{\n        \"operator-namespace1\": cache.Config{},\n        \"operator-namespace2\": cache.Config{},\n        },\n    },\n})\n```\n\n----------------------------------------\n\nTITLE: Adding fsGroup to Deployment for Token File Permissions\nDESCRIPTION: YAML snippet showing how to add fsGroup to the manager deployment's security context to solve permission denied error on service account token files when deploying to older Kubernetes versions.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/faq.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nsecurityContext:\n        runAsNonRoot: true\n        fsGroup: 65532 # add this fsGroup to make the token file readable\n```\n\n----------------------------------------\n\nTITLE: Defining Plugin Interfaces in Go for Kubebuilder\nDESCRIPTION: This snippet defines various interfaces that plugins can implement to hook into different parts of the Kubebuilder scaffolding process. These interfaces include methods for injecting metadata, updating subcommand metadata, binding flags, and scaffolding.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/designs/extensible-cli-and-scaffolding-plugins-phase-1-5.md#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype RequiresCLIMetadata interface {\n\tInjectCLIMetadata(CLIMetadata)\n}\n\ntype UpdatesSubcommandMetadata interface {\n\tUpdateSubcommandMetadata(*SubcommandMetadata)\n}\n\ntype HasFlags interface {\n\tBindFlags(*pflag.FlagSet)\n}\n\ntype RequiresConfig interface {\n\tInjectConfig(config.Config) error\n}\n\ntype RequiresResource interface {\n\tInjectResource(*resource.Resource) error\n}\n\ntype HasPreScaffold interface {\n\tPreScaffold(machinery.Filesystem) error\n}\n\ntype Scaffolder interface {\n\tScaffold(machinery.Filesystem) error\n}\n\ntype HasPostScaffold interface {\n\tPostScaffold() error\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CronJob Conversion Webhook in Go\nDESCRIPTION: This code snippet sets up a conversion webhook for the CronJob custom resource. It defines methods for converting between different versions of the CronJob object and registers the webhook with the API server.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/multiversion-tutorial/webhooks.md#2025-04-21_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage v1\n\nimport (\n\t\"sigs.k8s.io/controller-runtime/pkg/conversion\"\n\n\tbatchv1 \"tutorial.kubebuilder.io/project/api/v1\"\n\tbatchv2 \"tutorial.kubebuilder.io/project/api/v2\"\n)\n\n// ConvertTo converts this CronJob to the Hub version (v2).\nfunc (src *CronJob) ConvertTo(dstRaw conversion.Hub) error {\n\tdst := dstRaw.(*batchv2.CronJob)\n\n\t// ObjectMeta\n\tdst.ObjectMeta = src.ObjectMeta\n\n\t// Spec\n\tdst.Spec.Schedule = src.Spec.Schedule\n\tdst.Spec.StartingDeadlineSeconds = src.Spec.StartingDeadlineSeconds\n\tdst.Spec.ConcurrencyPolicy = batchv2.ConcurrencyPolicy(src.Spec.ConcurrencyPolicy)\n\tdst.Spec.Suspend = src.Spec.Suspend\n\tdst.Spec.JobTemplate = src.Spec.JobTemplate\n\tdst.Spec.SuccessfulJobsHistoryLimit = src.Spec.SuccessfulJobsHistoryLimit\n\tdst.Spec.FailedJobsHistoryLimit = src.Spec.FailedJobsHistoryLimit\n\n\tif src.Spec.TimeZone != nil {\n\t\tdst.Spec.TimeZone = src.Spec.TimeZone\n\t}\n\n\t// Status\n\tdst.Status.LastScheduleTime = src.Status.LastScheduleTime\n\tdst.Status.LastSuccessfulTime = src.Status.LastSuccessfulTime\n\tfor _, srcActive := range src.Status.Active {\n\t\tdst.Status.Active = append(dst.Status.Active, srcActive)\n\t}\n\n\treturn nil\n}\n\n// ConvertFrom converts from the Hub version (v2) to this version.\nfunc (dst *CronJob) ConvertFrom(srcRaw conversion.Hub) error {\n\tsrc := srcRaw.(*batchv2.CronJob)\n\n\t// ObjectMeta\n\tdst.ObjectMeta = src.ObjectMeta\n\n\t// Spec\n\tdst.Spec.Schedule = src.Spec.Schedule\n\tdst.Spec.StartingDeadlineSeconds = src.Spec.StartingDeadlineSeconds\n\tdst.Spec.ConcurrencyPolicy = batchv1.ConcurrencyPolicy(src.Spec.ConcurrencyPolicy)\n\tdst.Spec.Suspend = src.Spec.Suspend\n\tdst.Spec.JobTemplate = src.Spec.JobTemplate\n\tdst.Spec.SuccessfulJobsHistoryLimit = src.Spec.SuccessfulJobsHistoryLimit\n\tdst.Spec.FailedJobsHistoryLimit = src.Spec.FailedJobsHistoryLimit\n\n\tif src.Spec.TimeZone != nil {\n\t\tdst.Spec.TimeZone = src.Spec.TimeZone\n\t}\n\n\t// Status\n\tdst.Status.LastScheduleTime = src.Status.LastScheduleTime\n\tdst.Status.LastSuccessfulTime = src.Status.LastSuccessfulTime\n\tfor _, srcActive := range src.Status.Active {\n\t\tdst.Status.Active = append(dst.Status.Active, srcActive)\n\t}\n\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Raising an Event in a Kubernetes Controller\nDESCRIPTION: Demonstrates how to raise an event in a Kubernetes controller using the EventRecorder.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/reference/raising-events.md#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nr.Recorder.Eventf(cr, \"Warning\", \"Deleting\",\n\t\t\"Custom Resource %s is being deleted from the namespace %s\",\n\t\tcr.Name, cr.Namespace)\n```\n\n----------------------------------------\n\nTITLE: Integration Test Setup for Parent-Child Controller in Go\nDESCRIPTION: This code snippet demonstrates how to set up an integration test for a Kubebuilder controller managing Parent and Child objects. It includes test object creation, manager setup, and verification of controller actions.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/testing/integration.md#2025-04-21_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage parent\n\nimport (\n\t_ \"k8s.io/client-go/plugin/pkg/client/auth/gcp\"\n\tchildapis \"k8s.io/child/pkg/apis\"\n\tchildv1alpha1 \"k8s.io/childrepo/pkg/apis/child/v1alpha1\"\n\tparentapis \"k8s.io/parent/pkg/apis\"\n\tparentv1alpha1 \"k8s.io/parentrepo/pkg/apis/parent/v1alpha1\"\n\n\t...<other import items>...\n)\n\nconst timeout = time.Second * 5\n\nvar c client.Client\nvar expectedRequest = reconcile.Request{NamespacedName: types.NamespacedName{Name: \"parent\", Namespace: \"default\"}}\nvar childKey = types.NamespacedName{Name: \"child\", Namespace: \"default\"}\n\nfunc TestReconcile(t *testing.T) {\n\tg := gomega.NewGomegaWithT(t)\n\n\t// Parent instance to be created.\n\tparent := &parentv1alpha1.Parent{\n\t\tObjectMeta: metav1.ObjectMeta{\n\t\t\tName:      \"parent\",\n\t\t\tNamespace: \"default\",\n\t\t},\n\t\tSpec: metav1.ParentSpec{\n\t\t\tSomeSpecField:    \"SomeSpecValue\",\n\t\t\tAnotherSpecField: \"AnotherSpecValue\",\n\t\t},\n\t}\n\n\t// Setup the Manager and Controller. Wrap the Controller Reconcile function\n\t// so it writes each request to a channel when it is finished.\n\tmgr, err := manager.New(cfg, manager.Options{})\n\n\t// Setup Scheme for all resources.\n\tif err = parentapis.AddToScheme(mgr.GetScheme()); err != nil {\n\t\tt.Logf(\"failed to add Parent scheme: %v\", err)\n\t}\n\tif err = childapis.AddToScheme(mgr.GetScheme()); err != nil {\n\t\tt.Logf(\"failed to add Child scheme: %v\", err)\n\t}\n\n\t// Set up and start test manager.\n\treconciler, err := newReconciler(mgr)\n\tg.Expect(err).NotTo(gomega.HaveOccurred())\n\trecFn, requests := SetupTestReconcile(reconciler)\n\tg.Expect(add(mgr, recFn)).NotTo(gomega.HaveOccurred())\n\tdefer close(StartTestManager(mgr, g))\n\n\t// Create the Parent object and expect the Reconcile and Child to be created.\n\tc = mgr.GetClient()\n\terr = c.Create(context.TODO(), parent)\n\tg.Expect(err).NotTo(gomega.HaveOccurred())\n\tdefer c.Delete(context.TODO(), parent)\n\tg.Eventually(requests, timeout).Should(gomega.Receive(gomega.Equal(expectedRequest)))\n\n\t// Verify Child is created.\n\tchild := &childv1alpha1.Child{}\n\tg.Eventually(func() error { return c.Get(context.TODO(), childKey, child) }, timeout).\n\t\tShould(gomega.Succeed())\n\n\t// Manually delete Child since GC isn't enabled in the test control plane.\n\tg.Expect(c.Delete(context.TODO(), child)).To(gomega.Succeed())\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Empty Reconciler Structure in Go for Kubernetes Controller\nDESCRIPTION: This code snippet demonstrates the basic structure of a reconciler in Go using the controller-runtime package. It includes a Reconciler struct and a Reconcile method that takes a context and a reconcile.Request as input and returns a reconcile.Result and an error.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/cronjob-tutorial/controller-overview.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\tctrl \"sigs.k8s.io/controller-runtime\"\n\t\"sigs.k8s.io/controller-runtime/pkg/client\"\n\t\"sigs.k8s.io/controller-runtime/pkg/log\"\n)\n\ntype Reconciler struct {\n\tclient.Client\n\tScheme *runtime.Scheme\n}\n\nfunc (r *Reconciler) Reconcile(ctx context.Context, req ctrl.Request) (ctrl.Result, error) {\n\t_ = log.FromContext(ctx)\n\n\t// your logic here\n\n\treturn ctrl.Result{}, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing CronJob Controller in Go using Kubebuilder\nDESCRIPTION: Complete implementation of a CronJob controller for Kubernetes using the Kubebuilder framework. The controller manages CronJob resources by scheduling and cleaning up jobs according to the defined reconciliation logic.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/cronjob-tutorial/controller-implementation.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n/*\nCopyright 2023 The Kubernetes authors.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\npackage controller\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"sort\"\n\t\"time\"\n\n\t\"github.com/robfig/cron\"\n\tkbatch \"k8s.io/api/batch/v1\"\n\tcorev1 \"k8s.io/api/core/v1\"\n\tmetav1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"\n\t\"k8s.io/apimachinery/pkg/runtime\"\n\t\"k8s.io/client-go/tools/reference\"\n\tctrl \"sigs.k8s.io/controller-runtime\"\n\t\"sigs.k8s.io/controller-runtime/pkg/client\"\n\t\"sigs.k8s.io/controller-runtime/pkg/log\"\n\n\tbatch \"tutorial.kubebuilder.io/project/api/v1\"\n)\n\n// CronJobReconciler reconciles a CronJob object\ntype CronJobReconciler struct {\n\tclient.Client\n\tScheme *runtime.Scheme\n}\n\n//+kubebuilder:rbac:groups=batch.tutorial.kubebuilder.io,resources=cronjobs,verbs=get;list;watch;create;update;patch;delete\n//+kubebuilder:rbac:groups=batch.tutorial.kubebuilder.io,resources=cronjobs/status,verbs=get;update;patch\n//+kubebuilder:rbac:groups=batch.tutorial.kubebuilder.io,resources=cronjobs/finalizers,verbs=update\n//+kubebuilder:rbac:groups=batch,resources=jobs,verbs=get;list;watch;create;update;patch;delete\n//+kubebuilder:rbac:groups=batch,resources=jobs/status,verbs=get\n\nvar (\n\tscheduledTimeAnnotation = \"batch.tutorial.kubebuilder.io/scheduled-at\"\n)\n\n// Reconcile is part of the main kubernetes reconciliation loop which aims to\n// move the current state of the cluster closer to the desired state.\n// TODO(user): Modify the Reconcile function to compare the state specified by\n// the CronJob object against the actual cluster state, and then\n// perform operations to make the cluster state reflect the state specified by\n// the user.\n//\n// For more details, check Reconcile and its Result here:\n// - https://pkg.go.dev/sigs.k8s.io/controller-runtime@v0.16.0/pkg/reconcile\nfunc (r *CronJobReconciler) Reconcile(ctx context.Context, req ctrl.Request) (ctrl.Result, error) {\n\tlog := log.FromContext(ctx)\n\n\t// 1. Load the CronJob by name\n\tvar cronJob batch.CronJob\n\tif err := r.Get(ctx, req.NamespacedName, &cronJob); err != nil {\n\t\tlog.Error(err, \"unable to fetch CronJob\")\n\t\t// we'll ignore not-found errors, since they can't be fixed by an immediate\n\t\t// requeue (we'll need to wait for a new notification), and we can get them\n\t\t// on deleted requests.\n\t\treturn ctrl.Result{}, client.IgnoreNotFound(err)\n\t}\n\n\t// 2. List all active jobs, and update the status\n\tvar childJobs kbatch.JobList\n\tif err := r.List(ctx, &childJobs, client.InNamespace(req.Namespace), client.MatchingFields{jobOwnerKey: req.Name}); err != nil {\n\t\tlog.Error(err, \"unable to list child Jobs\")\n\t\treturn ctrl.Result{}, err\n\t}\n\n\t// find the active list of jobs\n\tvar activeJobs []*kbatch.Job\n\tvar successfulJobs []*kbatch.Job\n\tvar failedJobs []*kbatch.Job\n\tvar mostRecentTime *time.Time // find the last run so we can update the status\n\n\tisJobFinished := func(job *kbatch.Job) (bool, kbatch.JobConditionType) {\n\t\tfor _, c := range job.Status.Conditions {\n\t\t\tif (c.Type == kbatch.JobComplete || c.Type == kbatch.JobFailed) && c.Status == corev1.ConditionTrue {\n\t\t\t\treturn true, c.Type\n\t\t\t}\n\t\t}\n\n\t\treturn false, \"\"\n\t}\n\tgetScheduledTimeForJob := func(job *kbatch.Job) (*time.Time, error) {\n\t\ttimeRaw := job.Annotations[scheduledTimeAnnotation]\n\t\tif len(timeRaw) == 0 {\n\t\t\treturn nil, nil\n\t\t}\n\n\t\ttimeParsed, err := time.Parse(time.RFC3339, timeRaw)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\treturn &timeParsed, nil\n\t}\n\n\tfor i, job := range childJobs.Items {\n\t\t_, finishedType := isJobFinished(&job)\n\t\tswitch finishedType {\n\t\tcase \"\":\n\t\t\tactiveJobs = append(activeJobs, &childJobs.Items[i])\n\t\tcase kbatch.JobFailed:\n\t\t\tfailedJobs = append(failedJobs, &childJobs.Items[i])\n\t\tcase kbatch.JobComplete:\n\t\t\tsuccessfulJobs = append(successfulJobs, &childJobs.Items[i])\n\t\t}\n\n\t\t// We'll store the launch time in an annotation, so we'll reconstitute that from\n\t\t// the active jobs themselves.\n\t\tscheduledTimeForJob, err := getScheduledTimeForJob(&job)\n\t\tif err != nil {\n\t\t\tlog.Error(err, \"unable to parse schedule time for child job\", \"job\", &job)\n\t\t\tcontinue\n\t\t}\n\t\tif scheduledTimeForJob != nil {\n\t\t\tif mostRecentTime == nil {\n\t\t\t\tmostRecentTime = scheduledTimeForJob\n\t\t\t} else if mostRecentTime.Before(*scheduledTimeForJob) {\n\t\t\t\tmostRecentTime = scheduledTimeForJob\n\t\t\t}\n\t\t}\n\t}\n\n\tif mostRecentTime != nil {\n\t\tcronJob.Status.LastScheduleTime = &metav1.Time{Time: *mostRecentTime}\n\t} else {\n\t\tcronJob.Status.LastScheduleTime = nil\n\t}\n\tcronJob.Status.Active = nil\n\tfor _, activeJob := range activeJobs {\n\t\tjobRef, err := reference.GetReference(r.Scheme, activeJob)\n\t\tif err != nil {\n\t\t\tlog.Error(err, \"unable to make reference to active job\", \"job\", activeJob)\n\t\t\tcontinue\n\t\t}\n\t\tcronJob.Status.Active = append(cronJob.Status.Active, *jobRef)\n\t}\n\n\tlog.V(1).Info(\"job count\", \"active jobs\", len(activeJobs), \"successful jobs\", len(successfulJobs), \"failed jobs\", len(failedJobs))\n\n\tif err := r.Status().Update(ctx, &cronJob); err != nil {\n\t\tlog.Error(err, \"unable to update CronJob status\")\n\t\treturn ctrl.Result{}, err\n\t}\n\n\t// 3. Clean up old jobs according to the history limit\n\t// NB: deleting these are \"best effort\" -- if we fail on a particular one,\n\t// we won't requeue just to finish the deleting.\n\tif cronJob.Spec.FailedJobsHistoryLimit != nil {\n\t\tsort.Slice(failedJobs, func(i, j int) bool {\n\t\t\tif failedJobs[i].Status.StartTime == nil {\n\t\t\t\treturn failedJobs[j].Status.StartTime != nil\n\t\t\t}\n\t\t\tif failedJobs[j].Status.StartTime == nil {\n\t\t\t\treturn true\n\t\t\t}\n\t\t\treturn failedJobs[i].Status.StartTime.Before(failedJobs[j].Status.StartTime)\n\t\t})\n\t\tfor i, job := range failedJobs {\n\t\t\tif int32(i) >= int32(len(failedJobs))-*cronJob.Spec.FailedJobsHistoryLimit {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tif err := r.Delete(ctx, job, client.PropagationPolicy(metav1.DeletePropagationBackground)); client.IgnoreNotFound(err) != nil {\n\t\t\t\tlog.Error(err, \"unable to delete old failed job\", \"job\", job)\n\t\t\t}\n\t\t}\n\t}\n\n\tif cronJob.Spec.SuccessfulJobsHistoryLimit != nil {\n\t\tsort.Slice(successfulJobs, func(i, j int) bool {\n\t\t\tif successfulJobs[i].Status.StartTime == nil {\n\t\t\t\treturn successfulJobs[j].Status.StartTime != nil\n\t\t\t}\n\t\t\tif successfulJobs[j].Status.StartTime == nil {\n\t\t\t\treturn true\n\t\t\t}\n\t\t\treturn successfulJobs[i].Status.StartTime.Before(successfulJobs[j].Status.StartTime)\n\t\t})\n\t\tfor i, job := range successfulJobs {\n\t\t\tif int32(i) >= int32(len(successfulJobs))-*cronJob.Spec.SuccessfulJobsHistoryLimit {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tif err := r.Delete(ctx, job, client.PropagationPolicy(metav1.DeletePropagationBackground)); (err) != nil {\n\t\t\t\tlog.Error(err, \"unable to delete old successful job\", \"job\", job)\n\t\t\t}\n\t\t}\n\t}\n\n\t// 4. Check if we're suspended\n\tif cronJob.Spec.Suspend != nil && *cronJob.Spec.Suspend {\n\t\tlog.V(1).Info(\"cronjob suspended, skipping\")\n\t\treturn ctrl.Result{}, nil\n\t}\n\n\t// 5. Get the next scheduled run\n\tgetNextSchedule := func(cronJob *batch.CronJob, now time.Time) (lastMissed time.Time, next time.Time, err error) {\n\t\tsched, err := cron.ParseStandard(cronJob.Spec.Schedule)\n\t\tif err != nil {\n\t\t\treturn time.Time{}, time.Time{}, fmt.Errorf(\"Unparseable schedule %q: %v\", cronJob.Spec.Schedule, err)\n\t\t}\n\n\t\t// for optimization purposes, cheat a bit and start from our last observed run time\n\t\t// we could reconstitute this here, but there's not much point, since we've\n\t\t// just updated it.\n\t\tvar earliestTime time.Time\n\t\tif cronJob.Status.LastScheduleTime != nil {\n\t\t\tearliestTime = cronJob.Status.LastScheduleTime.Time\n\t\t} else {\n\t\t\tearliestTime = cronJob.ObjectMeta.CreationTimestamp.Time\n\t\t}\n\t\tif cronJob.Spec.StartingDeadlineSeconds != nil {\n\t\t\t// controller is not going to schedule anything below this point\n\t\t\tschedulingDeadline := now.Add(-time.Second * time.Duration(*cronJob.Spec.StartingDeadlineSeconds))\n\n\t\t\tif schedulingDeadline.After(earliestTime) {\n\t\t\t\tearliestTime = schedulingDeadline\n\t\t\t}\n\t\t}\n\t\tif earliestTime.After(now) {\n\t\t\treturn time.Time{}, sched.Next(now), nil\n\t\t}\n\n\t\tstart := earliestTime\n\t\tnext = sched.Next(start)\n\t\tfor next.Before(now) || next.Equal(now) {\n\t\t\tlastMissed = next\n\t\t\tnext = sched.Next(next)\n\t\t}\n\t\treturn lastMissed, next, nil\n\t}\n\n\t// figure out the next times that we need to create\n\t// jobs at (or anything we missed).\n\tmissed, next, err := getNextSchedule(&cronJob, time.Now())\n\tif err != nil {\n\t\tlog.Error(err, \"unable to figure out CronJob schedule\")\n\t\t// we don't really care about requeuing until we get an update that\n\t\t// fixes the schedule, so don't return an error\n\t\treturn ctrl.Result{}, nil\n\t}\n\n\tscheduleResult := ctrl.Result{RequeueAfter: next.Sub(time.Now())} // save this so we can re-use it elsewhere\n\tlog = log.WithValues(\"now\", time.Now(), \"next run\", next)\n\n\t// 6. Run a new job if it's on schedule, not past the deadline, and not blocked by our concurrency policy\n\tif missed.IsZero() {\n\t\tlog.V(1).Info(\"no upcoming scheduled times, sleeping until next\")\n\t\treturn scheduleResult, nil\n\t}\n\n\t// make sure we're not too late to start the run\n\ttooLate := false\n\tif cronJob.Spec.StartingDeadlineSeconds != nil {\n\t\ttooLate = missed.Add(time.Duration(*cronJob.Spec.StartingDeadlineSeconds) * time.Second).Before(time.Now())\n\t}\n\tif tooLate {\n\t\tlog.V(1).Info(\"missed starting deadline for last run, sleeping till next\")\n\t\t// TODO(directxman12): events\n\t\treturn scheduleResult, nil\n\t}\n\n\t// figure out how to run this job -- concurrency policy might forbid us from running\n\t// multiple at the same time...\n\tif cronJob.Spec.ConcurrencyPolicy == batch.ForbidConcurrent && len(activeJobs) > 0 {\n\t\tlog.V(1).Info(\"concurrency policy blocks concurrent runs, skipping\", \"num active\", len(activeJobs))\n\t\treturn scheduleResult, nil\n\t}\n\n\t// ...or instruct us to replace existing ones...\n\tif cronJob.Spec.ConcurrencyPolicy == batch.ReplaceConcurrent {\n\t\tfor _, activeJob := range activeJobs {\n\t\t\t// we don't care if the job was already deleted\n\t\t\tif err := r.Delete(ctx, activeJob, client.PropagationPolicy(metav1.DeletePropagationBackground)); client.IgnoreNotFound(err) != nil {\n\t\t\t\tlog.Error(err, \"unable to delete active job\", \"job\", activeJob)\n\t\t\t\treturn ctrl.Result{}, err\n\t\t\t}\n\t\t}\n\t}\n\n\tconstructJobForCronJob := func(cronJob *batch.CronJob, scheduledTime time.Time) (*kbatch.Job, error) {\n\t\t// We want job names for a given nominal start time to have a deterministic name to avoid the same job being created twice\n\t\tname := fmt.Sprintf(\"%s-%d\", cronJob.Name, scheduledTime.Unix())\n\n\t\tjob := &kbatch.Job{\n\t\t\tObjectMeta: metav1.ObjectMeta{\n\t\t\t\tLabels:      make(map[string]string),\n\t\t\t\tAnnotations: make(map[string]string),\n\t\t\t\tName:        name,\n\t\t\t\tNamespace:   cronJob.Namespace,\n\t\t\t},\n\t\t\tSpec: *cronJob.Spec.JobTemplate.Spec.DeepCopy(),\n\t\t}\n\t\tfor k, v := range cronJob.Spec.JobTemplate.Annotations {\n\t\t\tjob.Annotations[k] = v\n\t\t}\n\t\tjob.Annotations[scheduledTimeAnnotation] = scheduledTime.Format(time.RFC3339)\n\t\tfor k, v := range cronJob.Spec.JobTemplate.Labels {\n\t\t\tjob.Labels[k] = v\n\t\t}\n\t\tif err := ctrl.SetControllerReference(cronJob, job, r.Scheme); err != nil {\n\t\t\treturn nil, err\n\t\t}\n\n\t\treturn job, nil\n\t}\n\t// actually make the job...\n\tjob, err := constructJobForCronJob(&cronJob, missed)\n\tif err != nil {\n\t\tlog.Error(err, \"unable to construct job from template\")\n\t\t// don't bother requeuing until we get a change to the spec\n\t\treturn scheduleResult, nil\n\t}\n\n\t// ...and create it on the cluster\n\tif err := r.Create(ctx, job); err != nil {\n\t\tlog.Error(err, \"unable to create Job for CronJob\", \"job\", job)\n\t\treturn ctrl.Result{}, err\n\t}\n\n\tlog.V(1).Info(\"created Job for CronJob run\", \"job\", job)\n\n\t// 7. Requeue when we either see a running job or it's time for the next scheduled run\n\treturn scheduleResult, nil\n}\n\nvar (\n\tjobOwnerKey = \".metadata.controller\"\n\tsetupLog    = ctrl.Log.WithName(\"setup\")\n)\n\n// SetupWithManager sets up the controller with the Manager.\nfunc (r *CronJobReconciler) SetupWithManager(mgr ctrl.Manager) error {\n\t// set up a real clock, since we're not in a test\n\tif err := mgr.GetFieldIndexer().IndexField(context.Background(), &kbatch.Job{}, jobOwnerKey, func(rawObj client.Object) []string {\n\t\t// grab the job object, extract the owner...\n\t\tjob := rawObj.(*kbatch.Job)\n\t\towner := metav1.GetControllerOf(job)\n\t\tif owner == nil {\n\t\t\treturn nil\n\t\t}\n\t\t// ...make sure it's a CronJob...\n\t\tif owner.APIVersion != batch.GroupVersion.String() || owner.Kind != \"CronJob\" {\n\t\t\treturn nil\n\t\t}\n\n\t\t// ...and if so, return it\n\t\treturn []string{owner.Name}\n\t}); err != nil {\n\t\treturn err\n\t}\n\n\treturn ctrl.NewControllerManagedBy(mgr).\n\t\tFor(&batch.CronJob{}).\n\t\tOwns(&kbatch.Job{}).\n\t\tComplete(r)\n}\n\n```\n\n----------------------------------------\n\nTITLE: Enabling Authentication and Authorization for Metrics in Go\nDESCRIPTION: This Go code snippet demonstrates how to enable authentication and authorization for the metrics endpoint using the FilterProvider in the main.go file.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/reference/metrics.md#2025-04-21_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nif secureMetrics {\n  ...\n  metricsServerOptions.FilterProvider = filters.WithAuthenticationAndAuthorization\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CronJob Types in Go (v2)\nDESCRIPTION: Go code defining the CronJob types for the new v2 API, including the structured schedule field.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/multiversion-tutorial/api-changes.md#2025-04-21_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// CronJob is the Schema for the cronjobs API\ntype CronJob struct {\n\tmetav1.TypeMeta   `json:\",inline\"`\n\tmetav1.ObjectMeta `json:\"metadata,omitempty\"`\n\n\tSpec   CronJobSpec   `json:\"spec,omitempty\"`\n\tStatus CronJobStatus `json:\"status,omitempty\"`\n}\n\n// CronJobSpec defines the desired state of CronJob\ntype CronJobSpec struct {\n\t// The schedule in Cron format, see https://en.wikipedia.org/wiki/Cron.\n\tSchedule CronSchedule `json:\"schedule\"`\n\n\t// Optional deadline in seconds for starting the job if it misses scheduled\n\t// time for any reason.  Missed jobs executions will be counted as failed ones.\n\t// +optional\n\tStartingDeadlineSeconds *int64 `json:\"startingDeadlineSeconds,omitempty\"`\n\n\t// Specifies how to treat concurrent executions of a Job.\n\t// Valid values are:\n\t// - \"Allow\" (default): allows CronJobs to run concurrently;\n\t// - \"Forbid\": forbids concurrent runs, skipping next run if previous run hasn't finished yet;\n\t// - \"Replace\": cancels currently running job and replaces it with a new one\n\t// +optional\n\tConcurrencyPolicy ConcurrencyPolicy `json:\"concurrencyPolicy,omitempty\"`\n\n\t// This flag tells the controller to suspend subsequent executions, it does\n\t// not apply to already started executions.  Defaults to false.\n\t// +optional\n\tSuspend *bool `json:\"suspend,omitempty\"`\n\n\t// Specifies the job that will be created when executing a CronJob.\n\tJobTemplate batchv1beta1.JobTemplateSpec `json:\"jobTemplate\"`\n\n\t// The number of successful finished jobs to retain.\n\t// This is a pointer to distinguish between explicit zero and not specified.\n\t// +optional\n\tSuccessfulJobsHistoryLimit *int32 `json:\"successfulJobsHistoryLimit,omitempty\"`\n\n\t// The number of failed finished jobs to retain.\n\t// This is a pointer to distinguish between explicit zero and not specified.\n\t// +optional\n\tFailedJobsHistoryLimit *int32 `json:\"failedJobsHistoryLimit,omitempty\"`\n}\n\n// CronSchedule is a more structured representation of a cron schedule\ntype CronSchedule struct {\n\tMinute string `json:\"minute,omitempty\"`\n\tHour string `json:\"hour,omitempty\"`\n\tDayOfMonth string `json:\"dayOfMonth,omitempty\"`\n\tMonth string `json:\"month,omitempty\"`\n\tDayOfWeek string `json:\"dayOfWeek,omitempty\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Namespace Limitations in Reconcilers\nDESCRIPTION: This code shows how to modify a reconciler to handle the namespace deletion limitation in EnvTest. It implements a filter that allows the reconciler to ignore requests from namespaces other than the one currently being tested.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/reference/envtest.md#2025-04-21_snippet_7\n\nLANGUAGE: go\nCODE:\n```\ntype MyCoolReconciler struct {\n\tclient.Client\n\t...\n\tNamespace     string  // restrict namespaces to reconcile\n}\nfunc (r *MyCoolReconciler) Reconcile(ctx context.Context, req ctrl.Request) (ctrl.Result, error) {\n\t_ = r.Log.WithValues(\"myreconciler\", req.NamespacedName)\n\t// Ignore requests for other namespaces, if specified\n\tif r.Namespace != \"\" && req.Namespace != r.Namespace {\n\t\treturn ctrl.Result{}, nil\n\t}\n```\n\n----------------------------------------\n\nTITLE: Controller Setup with Builder Pattern\nDESCRIPTION: A Go code snippet showing how the controller would be set up using the builder pattern in the mykind_controller.go file, demonstrating a more concise and readable approach.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/designs/simplified-scaffolding.md#2025-04-21_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nfunc (r *MyReconciler) SetupWithManager(mgr ctrl.Manager) error {\n\treturn ctrl.NewControllerManagedBy(mgr).\n\t\tFor(&api.MyAppType{}).\n\t\tOwns(&corev1.Pod{}).\n\t\tComplete(r)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Main Function in Kubebuilder Project\nDESCRIPTION: Shows the main.go file for a Kubebuilder project. It demonstrates how to set up the manager, register API schemes, and create controllers. This code initializes the Kubernetes client, sets up logging, and starts the manager to run the controllers.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/designs/simplified-scaffolding.md#2025-04-21_snippet_8\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"os\"\n\n    ctrl \"sigs.k8s.io/controller-runtime\"\n    \"sigs.k8s.io/controller-runtime/pkg/log/zap\"\n    \"k8s.io/apimachinery/pkg/runtime\"\n\n    \"my.repo/api/v1beta1\"\n    \"my.repo/api/v1\"\n    \"my.repo/controllers\"\n)\n\nvar (\n    scheme = runtime.NewScheme()\n    setupLog = ctrl.Log.WithName(\"setup\")\n)\n\nfunc init() {\n    v1beta1.AddToScheme(scheme)\n    v1.AddToScheme(scheme)\n    // +kubebuilder:scaffold:scheme\n}\n\nfunc main() {\n\tctrl.SetLogger(zap.New(zap.UseDevMode(true)))\n\n\tmgr, err := ctrl.NewManager(ctrl.GetConfigOrDie(), ctrl.Options{Scheme: scheme})\n\tif err != nil {\n\t\tsetupLog.Error(err, \"unable to start manager\")\n\t\tos.Exit(1)\n\t}\n\n\terr = (&controllers.MyKindReconciler{\n\t\tClient: mgr.GetClient(),\n        log: ctrl.Log.WithName(\"mykind-controller\"),\n\t}).SetupWithManager(mgr)\n\tif err != nil {\n\t\tsetupLog.Error(err, \"unable to create controller\", \"controller\", \"mykind\")\n\t\tos.Exit(1)\n\t}\n\n    // +kubebuilder:scaffold:builder\n\n\tsetupLog.Info(\"starting manager\")\n\tif err := mgr.Start(ctrl.SetupSignalHandler()); err != nil {\n\t\tsetupLog.Error(err, \"problem running manager\")\n\t\tos.Exit(1)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Conversion Webhook Handler in Go\nDESCRIPTION: Outlines the implementation of a default conversion handler in controller-runtime that can handle conversion requests for any API type. It includes the structure definition and the main Handle function.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/designs/crd_version_conversion.md#2025-04-21_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\ntype conversionHandler struct {\n\t// scheme which has Go types for the APIs are registered. This will be injected by controller manager.\n\tScheme runtime.Scheme\n\t// decoder which will be injected by the webhook server\n\t// decoder knows how to decode a conversion request and API objects.\n\tDecoder decoder.Decoder\n}\n\n// This is the default handler which will be mounted on the webhook server.\nfunc (ch *conversionHandler) Handle(r *http.Request, w http.Response) {\n\t// decode the request to converReview request object\n\tconvertReq := ch.Decode(r.Body)\n\tfor _, obj := range convertReq.Objects {\n\t// decode the incoming object\n\tsrc, gvk, _ := ch.Decoder.Decode(obj.raw)\n\n\t// get target object instance for convertReq.DesiredAPIVersion and gvk.Kind\n\tdst, _ := getTargetObject(convertReq.DesiredAPIVersion, gvk.Kind)\n\n\t// this is where conversion between objects happens\n\n\tch.ConvertObject(src, dst)\n\n\t// append dst to converted object list\n}\n\n\t// create a conversion response with converted objects\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Scale Subresource in CRD\nDESCRIPTION: This example shows how to enable the /scale subresource for a CRD using the +kubebuilder:subresource:scale marker. It includes specifying paths for replicas and selector.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/reference/generating-crd.md#2025-04-21_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ntype CustomSetSpec struct {\n\tReplicas *int32 `json:\"replicas\"`\n}\n\ntype CustomSetStatus struct {\n\tReplicas int32 `json:\"replicas\"`\n    Selector string `json:\"selector\"` // this must be the string form of the selector\n}\n\n\n// +kubebuilder:subresource:status\n// +kubebuilder:subresource:scale:specpath=.spec.replicas,statuspath=.status.replicas,selectorpath=.status.selector\ntype CustomSet struct {\n\tmetav1.TypeMeta   `json:\",inline\"`\n\tmetav1.ObjectMeta `json:\"metadata,omitempty\"`\n\n\tSpec   CustomSetSpec   `json:\"spec,omitempty\"`\n\tStatus CustomSetStatus `json:\"status,omitempty\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Node Affinity in Go for Kubernetes Deployment\nDESCRIPTION: This Go code snippet shows how to programmatically set up node affinity for a Kubernetes deployment, specifying supported architectures and operating systems.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/reference/platform.md#2025-04-21_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nTemplate: corev1.PodTemplateSpec{\n    ...\n    Spec: corev1.PodSpec{\n        Affinity: &corev1.Affinity{\n            NodeAffinity: &corev1.NodeAffinity{\n                RequiredDuringSchedulingIgnoredDuringExecution: &corev1.NodeSelector{\n                    NodeSelectorTerms: []corev1.NodeSelectorTerm{\n                        {\n                            MatchExpressions: []corev1.NodeSelectorRequirement{\n                                {\n                                    Key:      \"kubernetes.io/arch\",\n                                    Operator: \"In\",\n                                    Values:   []string{\"amd64\"},\n                                },\n                                {\n                                    Key:      \"kubernetes.io/os\",\n                                    Operator: \"In\",\n                                    Values:   []string{\"linux\"},\n                                },\n                            },\n                        },\n                    },\n                },\n            },\n        },\n        SecurityContext: &corev1.PodSecurityContext{\n            ...\n        },\n        Containers: []corev1.Container{{\n            ...\n        }},\n    },\n```\n\n----------------------------------------\n\nTITLE: Defining MutatingWebhookConfiguration in Go\nDESCRIPTION: Demonstrates the structure of a MutatingWebhookConfiguration in Go, highlighting that direct modification of status is not recommended.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/reference/admission-webhook.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// MutatingWebhookConfiguration allows for modification of objects.\n// However, direct modification of the status might result in unexpected behavior.\ntype MutatingWebhookConfiguration struct {\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating API Definition in Kubebuilder Project\nDESCRIPTION: This code snippet shows how to create an API definition in a Kubebuilder project using TestContext. It specifies the API group, version, and kind, and sets up resource and controller scaffolding.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/plugins/extending/testing-plugins.md#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nBy(\"creating API definition\")\nerr = kbc.CreateAPI(\n\t\"--group\", kbc.Group,\n\t\"--version\", kbc.Version,\n\t\"--kind\", kbc.Kind,\n\t\"--namespaced\",\n\t\"--resource\",\n\t\"--controller\",\n\t\"--make=false\",\n)\nExpect(err).NotTo(HaveOccurred(), \"Failed to create an API\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Kubebuilder Project with Helm Chart Support\nDESCRIPTION: Command to initialize a new Kubebuilder project with the Helm plugin, which scaffolds a Helm chart under the dist directory.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/plugins/available/helm-v1-alpha.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nkubebuilder init --plugins=helm/v1-alpha\n```\n\n----------------------------------------\n\nTITLE: Configuring Main Application for Webhook Support in Go\nDESCRIPTION: This snippet shows the main.go file configuration for a Kubernetes controller with webhook support. It sets up the manager, registers the CronJob scheme, and enables webhook server if certificates are available.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/multiversion-tutorial/webhooks.md#2025-04-21_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n\t\"flag\"\n\t\"os\"\n\n\t// Import all Kubernetes client auth plugins (e.g. Azure, GCP, OIDC, etc.)\n\t// to ensure that exec-entrypoint and run can make use of them.\n\t_ \"k8s.io/client-go/plugin/pkg/client/auth\"\n\n\t\"k8s.io/apimachinery/pkg/runtime\"\n\tutilruntime \"k8s.io/apimachinery/pkg/util/runtime\"\n\tclientgoscheme \"k8s.io/client-go/kubernetes/scheme\"\n\tctrl \"sigs.k8s.io/controller-runtime\"\n\t\"sigs.k8s.io/controller-runtime/pkg/healthz\"\n\t\"sigs.k8s.io/controller-runtime/pkg/log/zap\"\n\n\tbatchv1 \"tutorial.kubebuilder.io/project/api/v1\"\n\tbatchv2 \"tutorial.kubebuilder.io/project/api/v2\"\n\t\"tutorial.kubebuilder.io/project/internal/controller\"\n\t//+kubebuilder:scaffold:imports\n)\n\nvar (\n\tscheme   = runtime.NewScheme()\n\tsetupLog = ctrl.Log.WithName(\"setup\")\n)\n\nfunc init() {\n\tutilruntime.Must(clientgoscheme.AddToScheme(scheme))\n\n\tutilruntime.Must(batchv1.AddToScheme(scheme))\n\tutilruntime.Must(batchv2.AddToScheme(scheme))\n\t//+kubebuilder:scaffold:scheme\n}\n\nfunc main() {\n\tvar metricsAddr string\n\tvar enableLeaderElection bool\n\tvar probeAddr string\n\tflag.StringVar(&metricsAddr, \"metrics-bind-address\", \":8080\", \"The address the metric endpoint binds to.\")\n\tflag.StringVar(&probeAddr, \"health-probe-bind-address\", \":8081\", \"The address the probe endpoint binds to.\")\n\tflag.BoolVar(&enableLeaderElection, \"leader-elect\", false,\n\t\t\"Enable leader election for controller manager. \"+\n\t\t\t\"Enabling this will ensure there is only one active controller manager.\")\n\topts := zap.Options{\n\t\tDevelopment: true,\n\t}\n\topts.BindFlags(flag.CommandLine)\n\tflag.Parse()\n\n\tctrl.SetLogger(zap.New(zap.UseFlagOptions(&opts)))\n\n\tmgr, err := ctrl.NewManager(ctrl.GetConfigOrDie(), ctrl.Options{\n\t\tScheme:                 scheme,\n\t\tMetricsBindAddress:     metricsAddr,\n\t\tPort:                   9443,\n\t\tHealthProbeBindAddress: probeAddr,\n\t\tLeaderElection:         enableLeaderElection,\n\t\tLeaderElectionID:       \"80807133.tutorial.kubebuilder.io\",\n\t})\n\tif err != nil {\n\t\tsetupLog.Error(err, \"unable to start manager\")\n\t\tos.Exit(1)\n\t}\n\n\tif err = (&controller.CronJobReconciler{\n\t\tClient: mgr.GetClient(),\n\t\tScheme: mgr.GetScheme(),\n\t}).SetupWithManager(mgr); err != nil {\n\t\tsetupLog.Error(err, \"unable to create controller\", \"controller\", \"CronJob\")\n\t\tos.Exit(1)\n\t}\n\tif os.Getenv(\"ENABLE_WEBHOOKS\") != \"false\" {\n\t\tif err = (&batchv1.CronJob{}).SetupWebhookWithManager(mgr); err != nil {\n\t\t\tsetupLog.Error(err, \"unable to create webhook\", \"webhook\", \"CronJob\")\n\t\t\tos.Exit(1)\n\t\t}\n\t}\n\t//+kubebuilder:scaffold:builder\n\n\tif err := mgr.AddHealthzCheck(\"healthz\", healthz.Ping); err != nil {\n\t\tsetupLog.Error(err, \"unable to set up health check\")\n\t\tos.Exit(1)\n\t}\n\tif err := mgr.AddReadyzCheck(\"readyz\", healthz.Ping); err != nil {\n\t\tsetupLog.Error(err, \"unable to set up ready check\")\n\t\tos.Exit(1)\n\t}\n\n\tsetupLog.Info(\"starting manager\")\n\tif err := mgr.Start(ctrl.SetupSignalHandler()); err != nil {\n\t\tsetupLog.Error(err, \"problem running manager\")\n\t\tos.Exit(1)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring RBAC for Metrics Protection in Kustomization YAML\nDESCRIPTION: This YAML snippet shows the RBAC configurations used to protect the metrics endpoint with authentication and authorization in the kustomization.yaml file.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/reference/metrics.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# The following RBAC configurations are used to protect\n# the metrics endpoint with authn/authz. These configurations\n# ensure that only authorized users and service accounts\n# can access the metrics endpoint.\n- metrics_auth_role.yaml\n- metrics_auth_role_binding.yaml\n- metrics_reader_role.yaml\n```\n\n----------------------------------------\n\nTITLE: Installing CRDs in Kubernetes Cluster\nDESCRIPTION: Installs Custom Resource Definitions into the cluster and updates YAML manifests using controller-tools if needed.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/cronjob-tutorial/running.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake install\n```\n\n----------------------------------------\n\nTITLE: Uninstalling CRDs from Kubernetes Cluster\nDESCRIPTION: This command uninstalls the Custom Resource Definitions (CRDs) from the Kubernetes cluster.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/testdata/project-v4-with-plugins/README.md#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nmake uninstall\n```\n\n----------------------------------------\n\nTITLE: Basic Structure of Generated API Types in Go\nDESCRIPTION: This code snippet shows the basic structure of the generated API types file (cronjob_types.go). It includes the CronJob struct, CronJobSpec struct, CronJobStatus struct, and the necessary kubebuilder markers for code generation.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/cronjob-tutorial/new-api.md#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage v1\n\nimport (\n\tmetav1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"\n)\n\n// EDIT THIS FILE!  THIS IS SCAFFOLDING FOR YOU TO OWN!\n// NOTE: json tags are required.  Any new fields you add must have json tags for the fields to be serialized.\n\n// CronJobSpec defines the desired state of CronJob\ntype CronJobSpec struct {\n\t// INSERT ADDITIONAL SPEC FIELDS - desired state of cluster\n\t// Important: Run \"make\" to regenerate code after modifying this file\n}\n\n// CronJobStatus defines the observed state of CronJob\ntype CronJobStatus struct {\n\t// INSERT ADDITIONAL STATUS FIELD - define observed state of cluster\n\t// Important: Run \"make\" to regenerate code after modifying this file\n}\n\n//+kubebuilder:object:root=true\n//+kubebuilder:subresource:status\n\n// CronJob is the Schema for the cronjobs API\ntype CronJob struct {\n\tmetav1.TypeMeta   `json:\",inline\"`\n\tmetav1.ObjectMeta `json:\"metadata,omitempty\"`\n\n\tSpec   CronJobSpec   `json:\"spec,omitempty\"`\n\tStatus CronJobStatus `json:\"status,omitempty\"`\n}\n\n//+kubebuilder:object:root=true\n\n// CronJobList contains a list of CronJob\ntype CronJobList struct {\n\tmetav1.TypeMeta `json:\",inline\"`\n\tmetav1.ListMeta `json:\"metadata,omitempty\"`\n\tItems           []CronJob `json:\"items\"`\n}\n\nfunc init() {\n\tSchemeBuilder.Register(&CronJob{}, &CronJobList{})\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Node Affinity in Kubernetes Manifest\nDESCRIPTION: This YAML snippet demonstrates how to set up node affinity in a Kubernetes manifest to ensure pods are scheduled on nodes with specific architectures and operating systems.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/reference/platform.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\naffinity:\n  nodeAffinity:\n    requiredDuringSchedulingIgnoredDuringExecution:\n      nodeSelectorTerms:\n      - matchExpressions:\n        - key: kubernetes.io/arch\n          operator: In\n          values:\n          - amd64\n          - arm64\n          - ppc64le\n          - s390x\n        - key: kubernetes.io/os\n            operator: In\n            values:\n              - linux\n```\n\n----------------------------------------\n\nTITLE: Implementing Controller in Kubebuilder Project\nDESCRIPTION: Demonstrates the implementation of a controller in a Kubebuilder project. It shows the structure of a reconciler, including the Reconcile method and SetupWithManager function. This code defines how the controller should handle MyKind resources.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/designs/simplified-scaffolding.md#2025-04-21_snippet_9\n\nLANGUAGE: go\nCODE:\n```\npackage controllers\n\nimport (\n\t\"context\"\n\n\tctrl \"sigs.k8s.io/controller-runtime\"\n\t\"sigs.k8s.io/controller-runtime/pkg/client\"\n\t\"github.com/go-logr/logr\"\n\n\t\"my.repo/api/v1\"\n)\n\ntype MyKindReconciler struct {\n\tclient.Client\n\tlog logr.Logger\n}\n\nfunc (r *MyKindReconciler) Reconcile(req ctrl.Request) (ctrl.Result, error) {\n\tctx := context.Background()\n\tlog := r.log.WithValues(\"mykind\", req.NamespacedName)\n\n\t// your logic here\n\n\treturn req.Result{}, nil\n}\n\nfunc (r *MyKindReconciler) SetupWithManager(mgr ctrl.Manager) error {\n\treturn ctrl.NewControllerManagedBy(mgr).\n\t\tFor(v1.MyKind{}).\n\t\tComplete(r)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Leader Election Namespace in Kubebuilder Manager\nDESCRIPTION: Code snippet showing how to set the leader election namespace when initializing a controller-runtime manager to solve the \"unable to find leader election namespace\" error.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/faq.md#2025-04-21_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmgr, err := ctrl.NewManager(ctrl.GetConfigOrDie(), ctrl.Options{\n\t\tScheme:                  scheme,\n\t\tMetricsBindAddress:      metricsAddr,\n\t\tPort:                    9443,\n\t\tHealthProbeBindAddress:  probeAddr,\n\t\tLeaderElection:          enableLeaderElection,\n\t\tLeaderElectionID:        \"14be1926.testproject.org\",\n\t\tLeaderElectionNamespace: \"<project-name>-system\",\n```\n\n----------------------------------------\n\nTITLE: Installing the Project Using the YAML Bundle\nDESCRIPTION: Example command for users to install the project using the generated YAML bundle from a GitHub repository or other hosting location.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/getting-started/testdata/project/README.md#2025-04-21_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nkubectl apply -f https://raw.githubusercontent.com/<org>/project/<tag or branch>/dist/install.yaml\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Resource Type Specification in Go Kubebuilder\nDESCRIPTION: This template defines the spec structure for a custom resource type. It includes fields for specifying the number of instances, image pull policy, and container port with validation markers. The template is designed to be used in the <kind>_types.go file of a Kubebuilder project.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/designs/code-generate-image-plugin.md#2025-04-21_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n// {{ resource }}Spec defines the desired state of {{ resource }}\ntype {{ resource }}Spec struct {\n\t// INSERT ADDITIONAL SPEC FIELDS - desired state of cluster\n\t// Important: Run \"make\" to regenerate code after modifying this file\n\n    // +kubebuilder:validation:Minimum=1\n\t// Size defines the number of {{ resource }} instances\n\tSize int32 `json:\"size,omitempty\"`\n\n    // ImagePullPolicy defines the policy to pull the container images\n\tImagePullPolicy string `json:\"image-pull-policy,omitempty\"`\n\n    // ContainerPort specifies the port which will be used by the image container\n\tContainerPort int `json:\"container-port,omitempty\"`\n\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Deployment Existence in Go\nDESCRIPTION: Code to check if a Memcached deployment exists in the cluster and create it if not found. Uses the controller-runtime client to interact with the Kubernetes API.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/getting-started.md#2025-04-21_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n\t// Check if the deployment already exists, if not create a new one\n\tfound := &appsv1.Deployment{}\n\terr = r.Get(ctx, types.NamespacedName{Name: memcached.Name, Namespace: memcached.Namespace}, found)\n\tif err != nil && apierrors.IsNotFound(err) {\n\t\t// Define a new deployment\n\t\tdep := r.deploymentForMemcached()\n\t\t// Create the Deployment on the cluster\n\t\tif err = r.Create(ctx, dep); err != nil {\n            log.Error(err, \"Failed to create new Deployment\",\n            \"Deployment.Namespace\", dep.Namespace, \"Deployment.Name\", dep.Name)\n            return ctrl.Result{}, err\n        }\n\t\t...\n```\n\n----------------------------------------\n\nTITLE: Creating a Memcached API with deploy-image plugin\nDESCRIPTION: Command to scaffold a Memcached API controller using the deploy-image plugin with specific image, container command, port, and security context configuration.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/plugins/available/deploy-image-plugin-v1-alpha.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nkubebuilder create api \\\n  --group example.com \\\n  --version v1alpha1 \\\n  --kind Memcached \\\n  --image=memcached:memcached:1.6.26-alpine3.19 \\\n  --image-container-command=\"memcached,--memory-limit=64,-o,modern,-v\" \\\n  --image-container-port=\"11211\" \\\n  --run-as-user=\"1001\" \\\n  --plugins=\"deploy-image/v1-alpha\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Manager to Watch a Single Namespace in Go\nDESCRIPTION: This code shows how to configure a manager to watch resources within a specific namespace. It uses the Cache option with DefaultNamespaces to specify the target namespace.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/reference/scopes.md#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmgr, err := ctrl.NewManager(ctrl.GetConfigOrDie(), ctrl.Options{\n...\n   Cache: cache.Options{\n      DefaultNamespaces: map[string]cache.Config{\"operator-namespace\": cache.Config{}},\n   },\n})\n```\n\n----------------------------------------\n\nTITLE: Setting up End-to-end Test Environment for Kubebuilder v1 Controllers in Go\nDESCRIPTION: This code snippet demonstrates how to set up an end-to-end test environment for Kubebuilder v1 controllers. It includes importing necessary packages, configuring the client, setting up test environment, and defining test specifications.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/testing/e2e.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"k8s.io/client-go/tools/clientcmd\"\n    clientset \"k8s.io/redis-operator/pkg/client/clientset/versioned/typed/<some-group>/<some-version>\"\n    ......\n)\n\n// Specify kubeconfig file\nfunc getClientConfig() (*rest.Config, error) {\n    return clientcmd.BuildConfigFromFlags(\"\", path.Join(os.Getenv(\"HOME\"), \"<file-path>\"))\n}\n\n// Set up test environment\nvar _ = Describe(\"<some-controller-name> should work\", func() {\n    config, err := getClientConfig()\n    if err != nil {\n        ......\n    }\n\n    // Construct kubernetes client\n    k8sClient, err := kubernetes.NewForConfig(config)\n    if err != nil {\n        ......\n    }\n\n    // Construct controller client\n    client, err := clientset.NewForConfig(config)\n    if err != nil {\n        ......\n    }\n\n    BeforeEach(func() {\n        // Create environment-specific resources such as controller image StatefulSet,\n        // CRDs etc. Note: refer \"install.yaml\" created via \"kubebuilder create config\"\n        // command to have an idea of what resources to be created.\n        ......\n    })\n\n    AfterEach(func() {\n        // Delete all test-specific resources\n        ......\n\n        // Delete all environment-specific resources\n        ......\n    })\n\n    // Declare a list of testing specifications with corresponding test functions\n    // Note: test-specific resources are normally created within the test functions\n    It(\"should do something\", func() {\n        testDoSomething(k8sClient, roClient)\n    })\n\n    ......\n```\n\n----------------------------------------\n\nTITLE: Initializing Kubebuilder Project with go/v4 Plugin\nDESCRIPTION: Command to initialize a Kubebuilder project using the go/v4 plugin with a specified domain. This creates the basic scaffold for a go/v4 project.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/migration/migration_guide_gov3_to_gov4.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubebuilder init --domain tutorial.kubebuilder.io --plugins=go/v4\n```\n\n----------------------------------------\n\nTITLE: Configuring Controller Options for Secure Metrics in Kubebuilder\nDESCRIPTION: Example of how to configure controller options in main.go to use Controller-Runtime's authentication and authorization filters for secure metrics serving.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/designs/discontinue_usage_of_kube_rbac_proxy.md#2025-04-21_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nctrlOptions := ctrl.Options{\n    MetricsFilterProvider: filters.WithAuthenticationAndAuthorization,\n    MetricsSecureServing:  true,\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Kustomization for Webhook and Cert Manager in Kubernetes\nDESCRIPTION: YAML configuration for kustomization to enable webhook and cert manager in Kubernetes. This configuration is typically placed in the 'config/default/kustomization.yaml' file.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/cronjob-tutorial/running-webhook.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n{{#include ./testdata/project/config/default/kustomization.yaml}}\n```\n\n----------------------------------------\n\nTITLE: Defining Hub and Convertible Interfaces in Go\nDESCRIPTION: Introduces two interfaces in controller-runtime to express the hub-and-spoke relationship between API versions. The Hub interface indicates if a type is a hub version, while the Convertible interface defines methods for converting between hub and spoke versions.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/designs/crd_version_conversion.md#2025-04-21_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\ntype Hub interface {\n    runtime.Object\n    Hub()\n}\n\ntype Convertible interface {\n    runtime.Object\n    ConvertTo(dst Hub) error\n    ConvertFrom(src Hub) error\n}\n```\n\n----------------------------------------\n\nTITLE: Kubebuilder Main Function in Go\nDESCRIPTION: Demonstrates how to use the new CLI package in Kubebuilder's main function. It initializes the CLI with Go plugins for different versions.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/designs/extensible-cli-and-scaffolding-plugins-phase-1.md#2025-04-21_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n\tc, err := cli.New(\n\t\tcli.WithPlugins(\n\t\t\t&golangv1.Plugin{},\n\t\t\t&golangv2.Plugin{},\n\t\t),\n\t)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tif err := c.Run(); err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Makefile for envtest Setup in Kubebuilder\nDESCRIPTION: This Makefile snippet shows how to set up envtest binaries for Kubebuilder projects. It defines variables for tool versions and paths, and includes targets for downloading and setting up envtest.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/reference/envtest.md#2025-04-21_snippet_0\n\nLANGUAGE: makefile\nCODE:\n```\n## Tool Binaries\n...\nENVTEST ?= $(LOCALBIN)/setup-envtest\n...\n\n## Tool Versions\n...\n#ENVTEST_VERSION is the version of controller-runtime release branch to fetch the envtest setup script (i.e. release-0.20)\nENVTEST_VERSION ?= $(shell go list -m -f \"{{ .Version }}\" sigs.k8s.io/controller-runtime | awk -F'[v.]' '{printf \"release-%d.%d\", $$2, $$3}')\n#ENVTEST_K8S_VERSION is the version of Kubernetes to use for setting up ENVTEST binaries (i.e. 1.31)\nENVTEST_K8S_VERSION ?= $(shell go list -m -f \"{{ .Version }}\" k8s.io/api | awk -F'[v.]' '{printf \"1.%d\", $$3}')\n...\n.PHONY: setup-envtest\nsetup-envtest: envtest ## Download the binaries required for ENVTEST in the local bin directory.\n\t@echo \"Setting up envtest binaries for Kubernetes version $(ENVTEST_K8S_VERSION)...\"\n\t@$(ENVTEST) use $(ENVTEST_K8S_VERSION) --bin-dir $(LOCALBIN) -p path || { \\\n\t\techo \"Error: Failed to set up envtest binaries for version $(ENVTEST_K8S_VERSION).\"; \\\n\t\texit 1; \\\n\t}\n\n.PHONY: envtest\nenvtest: $(ENVTEST) ## Download setup-envtest locally if necessary.\n$(ENVTEST): $(LOCALBIN)\n\t$(call go-install-tool,$(ENVTEST),sigs.k8s.io/controller-runtime/tools/setup-envtest,$(ENVTEST_VERSION))\n```\n\n----------------------------------------\n\nTITLE: Initializing Kubebuilder Project with Multiple Plugins\nDESCRIPTION: Command to initialize a Kubebuilder project with multiple global plugins specified through the --plugins flag.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/plugins/plugins.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nkubebuilder init --plugins=pluginA,pluginB,pluginC\n```\n\n----------------------------------------\n\nTITLE: Configuring Manager to Watch All Namespaces in Go\nDESCRIPTION: This snippet demonstrates the default configuration for a manager to watch all namespaces in a Kubernetes cluster. It uses the ctrl.NewManager function without specifying a namespace option.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/reference/scopes.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmgr, err := ctrl.NewManager(ctrl.GetConfigOrDie(), ctrl.Options{\n...\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Metrics Server Options in Go\nDESCRIPTION: This Go code snippet shows how the metrics server is configured in the main.go file, using the metricsserver.Options struct.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/reference/metrics.md#2025-04-21_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// Metrics endpoint is enabled in 'config/default/kustomization.yaml'. The Metrics options configure the server.\n// For more info: https://pkg.go.dev/sigs.k8s.io/controller-runtime/pkg/metrics/server\nMetrics: metricsserver.Options{\n   ...\n},\n```\n\n----------------------------------------\n\nTITLE: Upgrading a Kubebuilder Project with Specific Plugin Version\nDESCRIPTION: Command to upgrade a Kubebuilder project scaffold using a specific plugin version. This allows users to migrate their operator projects to use updated plugin versions.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/reference/rescaffold.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nkubebuilder alpha generate --plugins=\"pluginkey/version\"\n```\n\n----------------------------------------\n\nTITLE: Defining CronJob Types in Go (v1)\nDESCRIPTION: Go code defining the CronJob types for the v1 API, maintaining compatibility with the original string-based schedule field.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/multiversion-tutorial/api-changes.md#2025-04-21_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n// CronJob is the Schema for the cronjobs API\ntype CronJob struct {\n\tmetav1.TypeMeta   `json:\",inline\"`\n\tmetav1.ObjectMeta `json:\"metadata,omitempty\"`\n\n\tSpec   CronJobSpec   `json:\"spec,omitempty\"`\n\tStatus CronJobStatus `json:\"status,omitempty\"`\n}\n\n// CronJobSpec defines the desired state of CronJob\ntype CronJobSpec struct {\n\t// The schedule in Cron format, see https://en.wikipedia.org/wiki/Cron.\n\tSchedule string `json:\"schedule\"`\n\n\t// Optional deadline in seconds for starting the job if it misses scheduled\n\t// time for any reason.  Missed jobs executions will be counted as failed ones.\n\t// +optional\n\tStartingDeadlineSeconds *int64 `json:\"startingDeadlineSeconds,omitempty\"`\n\n\t// Specifies how to treat concurrent executions of a Job.\n\t// Valid values are:\n\t// - \"Allow\" (default): allows CronJobs to run concurrently;\n\t// - \"Forbid\": forbids concurrent runs, skipping next run if previous run hasn't finished yet;\n\t// - \"Replace\": cancels currently running job and replaces it with a new one\n\t// +optional\n\tConcurrencyPolicy ConcurrencyPolicy `json:\"concurrencyPolicy,omitempty\"`\n\n\t// This flag tells the controller to suspend subsequent executions, it does\n\t// not apply to already started executions.  Defaults to false.\n\t// +optional\n\tSuspend *bool `json:\"suspend,omitempty\"`\n\n\t// Specifies the job that will be created when executing a CronJob.\n\tJobTemplate batchv1beta1.JobTemplateSpec `json:\"jobTemplate\"`\n\n\t// The number of successful finished jobs to retain.\n\t// This is a pointer to distinguish between explicit zero and not specified.\n\t// +optional\n\tSuccessfulJobsHistoryLimit *int32 `json:\"successfulJobsHistoryLimit,omitempty\"`\n\n\t// The number of failed finished jobs to retain.\n\t// This is a pointer to distinguish between explicit zero and not specified.\n\t// +optional\n\tFailedJobsHistoryLimit *int32 `json:\"failedJobsHistoryLimit,omitempty\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Reconciliation Return Options in Go\nDESCRIPTION: Go code snippets showing different return options in a reconciliation function to handle errors, requeue requests, or schedule future reconciliations based on different conditions.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/getting-started.md#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nreturn ctrl.Result{}, err\n```\n\nLANGUAGE: go\nCODE:\n```\nreturn ctrl.Result{Requeue: true}, nil\n```\n\nLANGUAGE: go\nCODE:\n```\nreturn ctrl.Result{}, nil\n```\n\nLANGUAGE: go\nCODE:\n```\nreturn ctrl.Result{RequeueAfter: nextRun.Sub(r.Now())}, nil\n```\n\n----------------------------------------\n\nTITLE: Example PROJECT Configuration in YAML\nDESCRIPTION: Shows an example PROJECT file configuration using the new 'layout' key to specify the plugin that generated the project. It includes project metadata and resource definitions.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/designs/extensible-cli-and-scaffolding-plugins-phase-1.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"3-alpha\"\nlayout: go/v1.0.0\ndomain: testproject.org\nrepo: github.com/test-inc/testproject\nresources:\n- group: crew\n  kind: Captain\n  version: v1\n```\n\n----------------------------------------\n\nTITLE: Installing CRDs to Kubernetes Cluster\nDESCRIPTION: Installs the Custom Resource Definitions (CRDs) into the target Kubernetes cluster.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/testdata/project-v4/README.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nmake install\n```\n\n----------------------------------------\n\nTITLE: Customizing API Server Flags in EnvTest\nDESCRIPTION: This snippet demonstrates how to modify the flags used to start the API server in EnvTest integration tests. It shows how to add custom flags to the default ones provided by envtest.DefaultKubeAPIServerFlags.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/reference/envtest.md#2025-04-21_snippet_5\n\nLANGUAGE: go\nCODE:\n```\ncustomApiServerFlags := []string{\n\t\"--secure-port=6884\",\n\t\"--admission-control=MutatingAdmissionWebhook\",\n}\n\napiServerFlags := append([]string(nil), envtest.DefaultKubeAPIServerFlags...)\napiServerFlags = append(apiServerFlags, customApiServerFlags...)\n\ntestEnv = &envtest.Environment{\n\tCRDDirectoryPaths: []string{filepath.Join(\"..\", \"config\", \"crd\", \"bases\")},\n\tKubeAPIServerFlags: apiServerFlags,\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Environment in Go\nDESCRIPTION: Example of configuring the test environment in Go using environment variables. It demonstrates how to set up and tear down the test environment, including setting and unsetting environment variables for test assets.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/reference/envtest.md#2025-04-21_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nvar _ = BeforeSuite(func(done Done) {\n\tExpect(os.Setenv(\"TEST_ASSET_KUBE_APISERVER\", \"../bin/k8s/1.25.0-darwin-amd64/kube-apiserver\")).To(Succeed())\n\tExpect(os.Setenv(\"TEST_ASSET_ETCD\", \"../bin/k8s/1.25.0-darwin-amd64/etcd\")).To(Succeed())\n\tExpect(os.Setenv(\"TEST_ASSET_KUBECTL\", \"../bin/k8s/1.25.0-darwin-amd64/kubectl\")).To(Succeed())\n\t// OR\n\tExpect(os.Setenv(\"KUBEBUILDER_ASSETS\", \"../bin/k8s/1.25.0-darwin-amd64\")).To(Succeed())\n\n\tlogf.SetLogger(zap.New(zap.WriteTo(GinkgoWriter), zap.UseDevMode(true)))\n\ttestenv = &envtest.Environment{}\n\n\t_, err := testenv.Start()\n\tExpect(err).NotTo(HaveOccurred())\n\n\tclose(done)\n}, 60)\n\nvar _ = AfterSuite(func() {\n\tExpect(testenv.Stop()).To(Succeed())\n\n\tExpect(os.Unsetenv(\"TEST_ASSET_KUBE_APISERVER\")).To(Succeed())\n\tExpect(os.Unsetenv(\"TEST_ASSET_ETCD\")).To(Succeed())\n\tExpect(os.Unsetenv(\"TEST_ASSET_KUBECTL\")).To(Succeed())\n\n})\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Scaffolding with Specific Plugins in Kubebuilder\nDESCRIPTION: Commands to create APIs, webhooks, or edit a Kubebuilder project using specific plugins defined with the --plugins flag.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/plugins/plugins.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nkubebuilder create api --plugins=pluginA,pluginB,pluginC\nOR\nkubebuilder create webhook --plugins=pluginA,pluginB,pluginC\nOR\nkubebuilder edit --plugins=pluginA,pluginB,pluginC\n```\n\n----------------------------------------\n\nTITLE: Example Pod Configuration for Accessing Protected Metrics in YAML\nDESCRIPTION: This YAML snippet provides an example of how to configure a Pod to access the protected metrics endpoint using a ServiceAccount token.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/reference/metrics.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: metrics-consumer\n  namespace: system\nspec:\n  # Use the scaffolded service account name to allow authn/authz\n  serviceAccountName: controller-manager\n  containers:\n  - name: metrics-consumer\n    image: curlimages/curl:latest\n    command: [\"/bin/sh\"]\n    args:\n      - \"-c\"\n      - >\n        while true;\n        do\n          # Note here that we are passing the token obtained from the ServiceAccount to curl the metrics endpoint\n          curl -s -k -H \"Authorization: Bearer $(cat /var/run/secrets/kubernetes.io/serviceaccount/token)\"\n          https://controller-manager-metrics-service.system.svc.cluster.local:8443/metrics;\n          sleep 60;\n        done\n```\n\n----------------------------------------\n\nTITLE: Testing Resource Ownership in EnvTest\nDESCRIPTION: This example shows how to test object ownership relationships in EnvTest instead of checking for deletion. Since EnvTest doesn't run built-in controllers by default, garbage collection doesn't work as expected, so testing the ownership references is recommended.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/reference/envtest.md#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nexpectedOwnerReference := v1.OwnerReference{\n\tKind:       \"MyCoolCustomResource\",\n\tAPIVersion: \"my.api.example.com/v1beta1\",\n\tUID:        \"d9607e19-f88f-11e6-a518-42010a800195\",\n\tName:       \"userSpecifiedResourceName\",\n}\nExpect(deployment.ObjectMeta.OwnerReferences).To(ContainElement(expectedOwnerReference))\n```\n\n----------------------------------------\n\nTITLE: Defining InitPlugin Interface in Go\nDESCRIPTION: Defines the InitPlugin interface, which extends the base Plugin interface for plugins that support project initialization. It includes methods for getting the InitPlugin and defines a generic subcommand interface.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/designs/extensible-cli-and-scaffolding-plugins-phase-1.md#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype InitPluginGetter interface {\n    Plugin\n    // GetInitPlugin returns the underlying InitPlugin interface.\n    GetInitPlugin() InitPlugin\n}\n\ntype InitPlugin interface {\n    GenericSubcommand\n}\n```\n\n----------------------------------------\n\nTITLE: Installing envtest in Air-Gapped Environments\nDESCRIPTION: Commands for downloading and using envtest binaries in disconnected environments. It includes steps to download the setup-envtest binary and use it to install Kubernetes API binaries locally.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/reference/envtest.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake envtest\n./bin/setup-envtest use 1.31.0\n```\n\n----------------------------------------\n\nTITLE: Updated Kustomize Dependency in Makefile for v4\nDESCRIPTION: Makefile target for downloading Kustomize locally. This updated version uses 'go install' instead of a bash script and includes version checking and cleanup logic.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/migration/migration_guide_gov3_to_gov4.md#2025-04-21_snippet_8\n\nLANGUAGE: makefile\nCODE:\n```\n.PHONY: kustomize\nkustomize: $(KUSTOMIZE) ## Download kustomize locally if necessary. If wrong version is installed, it will be removed before downloading.\n$(KUSTOMIZE): $(LOCALBIN)\n\t@if test -x $(LOCALBIN)/kustomize && ! $(LOCALBIN)/kustomize version | grep -q $(KUSTOMIZE_VERSION); then \\\n\t\techo \"$(LOCALBIN)/kustomize version is not expected $(KUSTOMIZE_VERSION). Removing it before installing.\"; \\\n\t\trm -rf $(LOCALBIN)/kustomize; \\\n\tfi\n\ttest -s $(LOCALBIN)/kustomize || GOBIN=$(LOCALBIN) GO111MODULE=on go install sigs.k8s.io/kustomize/kustomize/v5@$(KUSTOMIZE_VERSION)\n```\n\n----------------------------------------\n\nTITLE: Example PROJECT Configuration File with External Plugin in YAML\nDESCRIPTION: Sample PROJECT configuration file demonstrating how external plugins are defined in the layout field and configured in the plugins section. This shows how an external plugin (myexternalplugin/v2) can be integrated alongside built-in plugins.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/designs/extensible-cli-and-scaffolding-plugins-phase-2.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"3\"\ndomain: testproject.org\nlayout:\n- go.kubebuilder.io/v3\n- myexternalplugin/v2\nplugins:\n  myexternalplugin/v2:\n    resources:\n    - domain: testproject.org\n      group: crew\n      kind: Captain\n      version: v2\n  declarative.go.kubebuilder.io/v1:\n    resources:\n    - domain: testproject.org\n      group: crew\n      kind: FirstMate\n      version: v1\nrepo: github.com/test-inc/testproject\nresources:\n- group: crew\n  kind: Captain\n  version: v1\n```\n\n----------------------------------------\n\nTITLE: Using Predefined metav1.Time Type in Kubebuilder CRD\nDESCRIPTION: Go code example showing how to use the predefined metav1.Time type instead of a string with validation annotation. This approach provides both validation and automatic parsing.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/faq.md#2025-04-21_snippet_7\n\nLANGUAGE: go\nCODE:\n```\ntype StructName struct {\n\tTimeField metav1.Time `json:\"timeField,omitempty\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Kubebuilder Project Distribution Command\nDESCRIPTION: Command to deploy Kubebuilder projects directly to Kubernetes clusters using kubectl apply from a remote repository location. This allows for straightforward deployment of solutions after scaffolding with the build-installer makefile target.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/roadmap/roadmap_2024.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nkubectl apply -f https://raw.githubusercontent.com/<org>/my-project/<tag or branch>/dist/install.yaml\n```\n\n----------------------------------------\n\nTITLE: Creating a Kind Cluster with Custom Configuration in Bash\nDESCRIPTION: Command to create a Kind cluster with a specific Kubernetes version (v1.17.2) and a custom configuration file. This creates a cluster with 1 control-plane node and 3 worker nodes.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/reference/kind.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkind create cluster --config hack/kind-config.yaml --image=kindest/node:v1.17.2\n```\n\n----------------------------------------\n\nTITLE: Enabling Pprof in Kubebuilder Manager Options\nDESCRIPTION: This code snippet shows how to enable Pprof in the Kubebuilder manager options by setting the PprofBindAddress field. It specifies the TCP address that the controller should bind to for serving pprof.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/reference/pprof-tutorial.md#2025-04-21_snippet_0\n\nLANGUAGE: golang\nCODE:\n```\nmgr, err := ctrl.NewManager(ctrl.GetConfigOrDie(), ctrl.Options{\n  ...\n  // PprofBindAddress is the TCP address that the controller should bind to\n  // for serving pprof. Specify the manager address and the port that should be bind.\n  PprofBindAddress:       \":8082\",\n  ...\n})\n```\n\n----------------------------------------\n\nTITLE: Using String with OpenAPI Validation in Kubebuilder CRD\nDESCRIPTION: Go code example showing how to use OpenAPI v3 schema validation annotations with a string field that requires date-time format. This approach validates input but requires manual parsing.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/faq.md#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\ntype StructName struct {\n\t// +kubebuilder:validation:Format=date-time\n\tTimeField string `json:\"timeField,omitempty\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing Zap Logger with Klog in Kubebuilder\nDESCRIPTION: Code comparison showing how to replace the default Zap logger with Klog in a Kubebuilder project's main.go file.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/faq.md#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n    opts := zap.Options{\n    Development: true,\n    }\n    opts.BindFlags(flag.CommandLine)\n    flag.Parse()\n\n    ctrl.SetLogger(zap.New(zap.UseFlagOptions(&opts)))\n```\n\nLANGUAGE: go\nCODE:\n```\n    flag.Parse()\n\tctrl.SetLogger(klog.NewKlogr())\n```\n\n----------------------------------------\n\nTITLE: Using Kubebuilder Init Command with Custom Plugin\nDESCRIPTION: Shell command example showing how to initialize a Kubebuilder project using a custom plugin. The command specifies the custom plugin with its fully qualified name and version.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/plugins/extending/extending_cli_features_and_plugins.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nkubebuilder init --plugins=mylanguage.kubebuilder.io/v1\n```\n\n----------------------------------------\n\nTITLE: Custom Metrics Configuration Template in YAML\nDESCRIPTION: YAML template for configuring custom metrics in the Grafana plugin. Shows the structure for defining metric name, type, expression, and unit of measurement.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/plugins/available/grafana-v1-alpha.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\ncustomMetrics:\n#  - metric: # Raw custom metric (required)\n#    type:   # Metric type: counter/gauge/histogram (required)\n#    expr:   # Prom_ql for the metric (optional)\n#    unit:   # Unit of measurement, examples: s,none,bytes,percent,etc. (optional)\n```\n\n----------------------------------------\n\nTITLE: Setting File Overwrite Behavior in Kubebuilder Plugin\nDESCRIPTION: Code snippet showing how to configure a template to overwrite an existing file when scaffolding. This is useful when modifying default files like Makefile to add custom build steps.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/plugins/extending/extending_cli_features_and_plugins.md#2025-04-21_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nf.IfExistsAction = machinery.OverwriteFile\n```\n\n----------------------------------------\n\nTITLE: Conditionally Setting Leader Election Namespace Based on Environment Variable\nDESCRIPTION: Code example showing how to conditionally set the leader election namespace for development purposes using an environment variable.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/faq.md#2025-04-21_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n    leaderElectionNS := \"\"\n\tif os.Getenv(\"ENABLE_LEADER_ELECTION_NAMESPACE\") != \"false\" {\n\t\tleaderElectionNS = \"<project-name>-system\"\n\t}\n\n\tmgr, err := ctrl.NewManager(ctrl.GetConfigOrDie(), ctrl.Options{\n\t\tScheme:                  scheme,\n\t\tMetricsBindAddress:      metricsAddr,\n\t\tPort:                    9443,\n\t\tHealthProbeBindAddress:  probeAddr,\n\t\tLeaderElection:          enableLeaderElection,\n\t\tLeaderElectionNamespace: leaderElectionNS,\n\t\tLeaderElectionID:        \"14be1926.testproject.org\",\n\t\t...\n```\n\n----------------------------------------\n\nTITLE: Project Configuration with PROJECT File in Kubebuilder\nDESCRIPTION: A YAML configuration file containing Kubebuilder metadata used for scaffolding new components. This file stores project version, domain, and repository information needed by Kubebuilder's code generation tools.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/cronjob-tutorial/basic-project.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n{{#include ./testdata/project/PROJECT}}\n```\n\n----------------------------------------\n\nTITLE: Building and Deploying Controller to Cluster\nDESCRIPTION: Builds Docker image, pushes to registry, and deploys the controller to the cluster.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/cronjob-tutorial/running.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmake docker-build docker-push IMG=<some-registry>/<project-name>:tag\nmake deploy IMG=<some-registry>/<project-name>:tag\n```\n\n----------------------------------------\n\nTITLE: Configuring Status Subresource in CustomResourceDefinition\nDESCRIPTION: Illustrates how to enable the /status subresource in a CustomResourceDefinition YAML, which separates the status and spec API endpoints.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/reference/admission-webhook.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.k8s.io/v1\nkind: CustomResourceDefinition\nmetadata:\n  name: myresources.mygroup.mydomain\nspec:\n  ...\n  subresources:\n    status: {} # Enables the /status subresource\n```\n\n----------------------------------------\n\nTITLE: Updating Client Function Calls in Kubebuilder v1\nDESCRIPTION: Examples of updating client function calls from Kubebuilder v0 to v1 syntax, including Get, Create, Update, and List operations.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/migration_guide.md#2025-04-21_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// Get operation\n// v0 project\nmc, err := bc.memcachedLister.Memcacheds(k.Namespace).Get(k.Name)\n// v1 project\nmc := &myappsv1alpha1.Memcached{}\nerr := r.Client.Get(context.TODO(), request.NamespacedName, mc)\n\n// Create operation\n// v0 project\ndp, err := bc.KubernetesClientSet.AppsV1().Deployments(mc.Namespace).Create(dep)\n// v1 project\nerr := r.Client.Create(context.TODO(), dep)\n\n// Update operation\n// v0 project\ndp, err = bc.KubernetesClientSet.AppsV1().Deployments(mc.Namespace).Update(deploymentForMemcached(mc))\n// v1 project\nerr := r.Client.Update(context.TODO(), dep)\n\n// List operation\n// v0 project\npods, err := bc.KubernetesInformers.Core().V1().Pods().Lister().Pods(mc.Namespace).List(labelSelector)\n// v1 project\npods := &v1.PodList{}\nerr = r.Client.List(context.TODO(), &client.ListOptions{LabelSelector: labelSelector}, pods)\n```\n\n----------------------------------------\n\nTITLE: Creating Deployment Controller\nDESCRIPTION: Command to create a controller for Kubernetes Deployments\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/reference/using_an_external_resource.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncreate api --group apps --version v1 --kind Deployment --controller=true --resource=false\n```\n\n----------------------------------------\n\nTITLE: Enabling Certificate Metrics Manager Patch in Kustomization (YAML)\nDESCRIPTION: Configuration to enable the patch for mounting serving-cert secret in the Manager Deployment. This allows the metrics server to use certificates managed by CertManager.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/reference/metrics.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n# Uncomment the patches line if you enable Metrics and CertManager\n# [METRICS-WITH-CERTS] To enable metrics protected with certManager, uncomment the following line.\n# This patch will protect the metrics with certManager self-signed certs.\n- path: cert_metrics_manager_patch.yaml\n  target:\n    kind: Deployment\n```\n\n----------------------------------------\n\nTITLE: Example JSON Structure for CronJob CRD\nDESCRIPTION: This snippet demonstrates the JSON structure that would be used by the Kubernetes API server to represent a CronJob kind in the batch.tutorial.kubebuilder.io/v1 API group. This format shows how the 'kind' and 'apiVersion' fields specify the GVK for the API server.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/cronjob-tutorial/gvks.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"kind\": \"CronJob\",\n    \"apiVersion\": \"batch.tutorial.kubebuilder.io/v1\",\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using InsertCode Utility for Customizing Scaffolds\nDESCRIPTION: Example of using the InsertCode function from plugin utilities to add custom content to a scaffolded file. This allows for extending and modifying generated files.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/plugins/extending/extending_cli_features_and_plugins.md#2025-04-21_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npluginutil.InsertCode(filename, target, code)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Controller Manager with Deployment Ownership in Go\nDESCRIPTION: Configures the controller manager to watch both the custom resource and owned Deployment resources\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/designs/code-generate-image-plugin.md#2025-04-21_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc (r *{{ resource }}Reconciler) SetupWithManager(mgr ctrl.Manager) error {\n\treturn ctrl.NewControllerManagedBy(mgr).\n\t\tFor(&cachev1alpha1.{{ resource }}{}).\n\t\tOwns(&appsv1.Deployment{}).\n\t\tComplete(r)\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Makefile Test Target for Air-Gapped Environments\nDESCRIPTION: Modification to the Makefile test target to use locally installed binaries for envtest in air-gapped environments. It sets the KUBEBUILDER_ASSETS environment variable to use local binaries.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/reference/envtest.md#2025-04-21_snippet_2\n\nLANGUAGE: makefile\nCODE:\n```\ntest: manifests generate fmt vet\n    KUBEBUILDER_ASSETS=\"$(shell $(ENVTEST) use $(ENVTEST_K8S_VERSION) -i --bin-dir $(LOCALBIN) -p path)\" go test ./... -coverprofile cover.out\n```\n\n----------------------------------------\n\nTITLE: Creating a Complex Plugin Bundle in Kubebuilder\nDESCRIPTION: Example of creating a plugin bundle that composes multiple plugins to be executed in sequence. This demonstrates how to combine several plugins under a single name and version.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/plugins/extending/extending_cli_features_and_plugins.md#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nmyPluginBundle, _ := plugin.NewBundle(\n    plugin.WithName(\"myplugin.example.com\"),\n    plugin.WithVersion(plugin.Version{Number: 1}),\n    plugin.WithPlugins(pluginA.Plugin{}, pluginB.Plugin{}, pluginC.Plugin{}),\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Node Affinity in Kubernetes Manager Deployment\nDESCRIPTION: This YAML snippet shows how to configure node affinity in the manager.yaml file for a Kubebuilder project, ensuring the manager runs on supported platforms.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/reference/platform.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# TODO(user): Uncomment the following code to configure the nodeAffinity expression\n# according to the platforms which are supported by your solution.\n# It is considered best practice to support multiple architectures. You can\n# build your manager image using the makefile target docker-buildx.\n# affinity:\n#   nodeAffinity:\n#     requiredDuringSchedulingIgnoredDuringExecution:\n#       nodeSelectorTerms:\n#         - matchExpressions:\n#           - key: kubernetes.io/arch\n#             operator: In\n#             values:\n#               - amd64\n#               - arm64\n#               - ppc64le\n#               - s390x\n#           - key: kubernetes.io/os\n#             operator: In\n#             values:\n#               - linux\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Kustomize Plugin in a Go Bundle\nDESCRIPTION: Code snippet demonstrating how to import and use the Kustomize plugin in a bundle with a Golang plugin. This shows how to create a bundle that combines the Kustomize plugin with language-specific plugins to scaffold both config files and language-specific code.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/plugins/available/kustomize-v2.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n   ...\n   kustomizecommonv2 \"sigs.k8s.io/kubebuilder/v4/pkg/plugins/common/kustomize/v2\"\n   golangv4 \"sigs.k8s.io/kubebuilder/v4/pkg/plugins/golang/v4\"\n   ...\n)\n\n// Bundle plugin for Golang projects scaffolded by Kubebuilder go/v4\ngov4Bundle, _ := plugin.NewBundle(plugin.WithName(golang.DefaultNameQualifier),\n    plugin.WithVersion(plugin.Version{Number: 4}),\n    plugin.WithPlugins(kustomizecommonv2.Plugin{}, golangv4.Plugin{}), // Scaffold the config/ directory and all kustomize files\n)\n```\n\n----------------------------------------\n\nTITLE: Formatting PluginResponse JSON for Kubebuilder External Plugins\nDESCRIPTION: Example of a PluginResponse JSON structure that external plugins return to Kubebuilder via stdout. It contains metadata about the command, changes to the project universe, and error handling fields.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/plugins/extending/external-plugins.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"apiVersion\": \"v1alpha1\",\n  \"command\": \"init\",\n  \"metadata\": {\n    \"description\": \"The `init` subcommand initializes a project via Kubebuilder. It scaffolds a single file: `initFile`.\",\n    \"examples\": \"kubebuilder init --plugins sampleexternalplugin/v1 --domain my.domain\"\n  },\n  \"universe\": {\n    \"initFile\": \"A file created with the `init` subcommand.\"\n  },\n  \"error\": false,\n  \"errorMsgs\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Building Multi-Platform Docker Image with Buildx\nDESCRIPTION: This shell command demonstrates how to use docker buildx to create a multi-platform image for a Kubebuilder project, allowing for cross-compilation to support multiple architectures.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/reference/platform.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ make docker-buildx IMG=myregistry/myoperator:v0.0.1\n```\n\n----------------------------------------\n\nTITLE: Installing Kubernetes Project Using kubectl\nDESCRIPTION: Command to install a Kubernetes project by applying the generated bundle directly with kubectl, as an alternative to using Helm.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/plugins/available/helm-v1-alpha.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f https://raw.githubusercontent.com/<org>/project-v4/<tag or branch>/dist/install.yaml\n```\n\n----------------------------------------\n\nTITLE: Implementing Scaffold Function in Kubebuilder Plugin\nDESCRIPTION: Example of implementing the Scaffold method that executes the scaffolding process. This code initializes a machinery.Scaffold object and executes templates including the GoMod template to generate files.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/plugins/extending/extending_cli_features_and_plugins.md#2025-04-21_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// Scaffold implements cmdutil.Scaffolder\nfunc (s *initScaffolder) Scaffold() error {\n\tlog.Println(\"Writing scaffold for you to edit...\")\n\n\t// Initialize the machinery.Scaffold that will write the boilerplate file to disk\n\t// The boilerplate file needs to be scaffolded as a separate step as it is going to\n\t// be used by the rest of the files, even those scaffolded in this command call.\n\tscaffold := machinery.NewScaffold(s.fs,\n\t\tmachinery.WithConfig(s.config),\n\t)\n\n\t...\n\n\treturn scaffold.Execute(\n\t\t...\n\t\t&templates.GoMod{\n\t\t\tControllerRuntimeVersion: ControllerRuntimeVersion,\n\t\t},\n\t\t...\n\t)\n}\n```\n\n----------------------------------------\n\nTITLE: Loading a Docker Image into Kind Cluster in Bash\nDESCRIPTION: Command to load a locally built Docker image directly into the Kind cluster without pushing to a registry. This is useful for testing local changes quickly.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/reference/kind.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkind load docker-image your-image-name:your-tag\n```\n\n----------------------------------------\n\nTITLE: Enabling Metrics Endpoint with HTTPS in Kustomization YAML\nDESCRIPTION: This YAML snippet demonstrates how to enable the metrics endpoint using HTTPS on port 8443 through a patch in the kustomization.yaml file.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/reference/metrics.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\npatches:\n   # [METRICS] The following patch will enable the metrics endpoint using HTTPS and the port :8443.\n   # More info: https://book.kubebuilder.io/reference/metrics\n   - path: manager_metrics_patch.yaml\n     target:\n        kind: Deployment\n```\n\n----------------------------------------\n\nTITLE: Running the Re-scaffolding Alpha Command in Shell\nDESCRIPTION: Example of running the proposed kubebuilder alpha command to re-scaffold a project from scratch based on the current PROJECT configuration.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/designs/helper_to_upgrade_projects_by_rescaffolding.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nkubebuilder alpha generate [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Build and Deployment Automation with Makefile in Kubebuilder\nDESCRIPTION: A Makefile containing targets for building, testing, and deploying a Kubernetes controller developed with Kubebuilder. It includes operations for image building, manifests generation, and cluster deployment.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/cronjob-tutorial/basic-project.md#2025-04-21_snippet_1\n\nLANGUAGE: makefile\nCODE:\n```\n{{#include ./testdata/project/Makefile}}\n```\n\n----------------------------------------\n\nTITLE: Adding Printer Columns to CRD in Go\nDESCRIPTION: This example shows how to add additional printer columns to a CRD using the +kubebuilder:printcolumn marker. It includes columns for alias, rank, a conditional column, and age.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/reference/generating-crd.md#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// +kubebuilder:printcolumn:name=\"Alias\",type=string,JSONPath=`.spec.alias`\n// +kubebuilder:printcolumn:name=\"Rank\",type=integer,JSONPath=`.spec.rank`\n// +kubebuilder:printcolumn:name=\"Bravely Run Away\",type=boolean,JSONPath=`.spec.knights[?(@ == \"Sir Robin\")]`,description=\"when danger rears its ugly head, he bravely turned his tail and fled\",priority=10\n// +kubebuilder:printcolumn:name=\"Age\",type=\"date\",JSONPath=\".metadata.creationTimestamp\"\ntype Toy struct {\n\tmetav1.TypeMeta   `json:\",inline\"`\n\tmetav1.ObjectMeta `json:\"metadata,omitempty\"`\n\n\tSpec   ToySpec   `json:\"spec,omitempty\"`\n\tStatus ToyStatus `json:\"status,omitempty\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Dependency Management with Go Modules in Kubebuilder\nDESCRIPTION: A go.mod file defining the Go module for a Kubebuilder project with its basic dependencies. This file manages the project's Go dependencies and module identity.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/cronjob-tutorial/basic-project.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n{{#include ./testdata/project/go.mod}}\n```\n\n----------------------------------------\n\nTITLE: Helm Values Configuration Example\nDESCRIPTION: Comprehensive example of values.yaml configuration for the Helm chart including CRDs, RBAC, webhooks, and other Kubernetes resources\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/designs/helm-chart-autogenerate-plugin.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n# Install CRDs under the template\ncrd:\n  enable: false\n  keep: true\n\n# Webhook configuration sourced from the `config/webhook`\nwebhook:\n  enabled: true\n  conversion:\n    enabled: true\n\n## RBAC configuration under the `config/rbac` directory\nrbac:\n  create: true\n  serviceAccountName: \"controller-manager\"\n\n# Cert-manager configuration\ncertmanager:\n  enabled: false\n  issuerName: \"letsencrypt-prod\"\n  commonName: \"example.com\"\n  dnsName: \"example.com\"\n\n# Network policy configuration sourced from the `config/network_policy`\nnetworkPolicy:\n  enabled: false\n\n# Prometheus configuration\nprometheus:\n  enabled: false\n\n# Manager configuration sourced from the `config/manager`\nmanager:\n  replicas: 1\n  image:\n    repository: \"controller\"\n    tag: \"latest\"\n  resources:\n    limits:\n      cpu: 100m\n      memory: 128Mi\n    requests:\n      cpu: 100m\n      memory: 64Mi\n```\n\n----------------------------------------\n\nTITLE: Granting RBAC Permissions for Event Creation\nDESCRIPTION: Shows how to add RBAC markers to grant permissions for creating events in a Kubernetes controller.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/reference/raising-events.md#2025-04-21_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n...\n// +kubebuilder:rbac:groups=core,resources=events,verbs=create;patch\n...\nfunc (r *MyKindReconciler) Reconcile(ctx context.Context, req ctrl.Request) (ctrl.Result, error) {\n```\n\n----------------------------------------\n\nTITLE: Exposing Metrics Service in Kustomization YAML\nDESCRIPTION: This YAML snippet shows how the metrics service is exposed by default in the kustomization.yaml file.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/reference/metrics.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# [METRICS] Expose the controller manager metrics service.\n- metrics_service.yaml\n```\n\n----------------------------------------\n\nTITLE: Defining PluginRequest and PluginResponse Structs in Go\nDESCRIPTION: These structs define the structure for communication between Kubebuilder and external plugins. PluginRequest contains information sent from Kubebuilder to the plugin, while PluginResponse contains the plugin's response back to Kubebuilder.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/designs/extensible-cli-and-scaffolding-plugins-phase-2.md#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// PluginRequest contains all information kubebuilder received from the CLI\n// and plugins executed before it.\ntype PluginRequest struct {\n  // Command contains the command to be executed by the plugin such as init, create api, etc.\n  Command       string              `json:\"command\"`\n\n  // APIVersion defines the versioned schema of the PluginRequest that is encoded and sent from Kubebuilder to plugin.\n  // Initially, this will be marked as alpha (v1alpha1).\n  APIVersion    string              `json:\"apiVersion\"`\n\n  // Args holds the plugin specific arguments that are received from the CLI which are to be passed down to the plugin.\n  Args          []string            `json:\"args\"`\n\n  // Universe represents the modified file contents that gets updated over a series of plugin runs\n  // across the plugin chain. Initially, it starts out as empty.\n  Universe      map[string]string   `json:\"universe\"`\n}\n\n// PluginResponse is returned to kubebuilder by the plugin and contains all files\n// written by the plugin following a certain command.\ntype PluginResponse struct {\n  // Command holds the command that gets executed by the plugin such as init, create api, etc.\n  Command       string                   `json:\"command\"`\n\n  // Metadata contains the plugin specific help text that the plugin returns to Kubebuilder when it receives\n  // `--help` flag from Kubebuilder.\n  Metadata plugin.SubcommandMetadata `json:\"metadata\"`\n\n  // APIVersion defines the versioned schema of the PluginResponse that will be written back to kubebuilder.\n  // Initially, this will be marked as alpha (v1alpha1).\n  APIVersion    string                   `json:\"apiVersion\"`\n\n  // Universe in the PluginResponse represents the updated file contents that was written by the plugin.\n  Universe      map[string]string        `json:\"universe\"`\n\n  // Error is a boolean type that indicates whether there were any errors due to plugin failures.\n  Error         bool                     `json:\"error,omitempty\"`\n\n  // ErrorMsg holds the specific error message of plugin failures.\n  ErrorMsg      string                   `json:\"error_msg,omitempty\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing a Kubebuilder Project with go/v4 Plugin\nDESCRIPTION: This snippet demonstrates how to initialize a Kubebuilder project using the go/v4 plugin with TestContext. It sets up project parameters like plugins, version, and domain.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/plugins/extending/testing-plugins.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nBy(\"initializing a project\")\nerr = kbc.Init(\n\t\"--plugins\", \"go/v4\",\n\t\"--project-version\", \"3\",\n\t\"--domain\", kbc.Domain,\n\t\"--fetch-deps=false\",\n)\nExpect(err).NotTo(HaveOccurred(), \"Failed to initialize a project\")\n```\n\n----------------------------------------\n\nTITLE: Installing Custom Resource Definitions (CRDs) in Kubernetes\nDESCRIPTION: Command to install the project's Custom Resource Definitions into a Kubernetes cluster.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/cronjob-tutorial/testdata/project/README.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nmake install\n```\n\n----------------------------------------\n\nTITLE: Creating Controller for External Types in Kubebuilder\nDESCRIPTION: Generic command structure for creating a controller for external types. Uses flags to specify external API path and domain.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/reference/using_an_external_resource.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nkubebuilder create api --group <theirgroup> --version <theirversion> --kind <theirKind> --controller --resource=false --external-api-path=<their Golang path import> --external-api-domain=<theirdomain>\n```\n\n----------------------------------------\n\nTITLE: Sample Kubebuilder PROJECT Configuration File\nDESCRIPTION: Example of a Kubebuilder PROJECT configuration file that needs to be updated with the correct paths after migrating to a multi-group structure.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/migration/multi-group.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# Code generated by tool. DO NOT EDIT.\n# This file is used to track the info used to scaffold your project\n# and allow the plugins properly work.\n# More info: https://book.kubebuilder.io/reference/project-config.html\ndomain: tutorial.kubebuilder.io\nlayout:\n- go.kubebuilder.io/v4\nmultigroup: true\nprojectName: test\nrepo: tutorial.kubebuilder.io/project\nresources:\n- api:\n    crdVersion: v1\n    namespaced: true\n  controller: true\n  domain: tutorial.kubebuilder.io\n  group: batch\n  kind: CronJob\n  path: tutorial.kubebuilder.io/project/api/v1beta1\n  version: v1beta1\nversion: \"3\"\n```\n\n----------------------------------------\n\nTITLE: Moving Controllers to Group Directory in Kubebuilder go/v4\nDESCRIPTION: Bash commands for creating a group-specific directory for controllers in the go/v4 project layout and moving controller files to the new location.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/migration/multi-group.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmkdir internal/controller/batch\nmv internal/controller/* internal/controller/batch/\n```\n\n----------------------------------------\n\nTITLE: Releasing API and Controller Modules in Kubebuilder\nDESCRIPTION: A shell script demonstrating the release process for a Kubebuilder operator with an extracted API module. The process includes committing changes, tagging versions for both main and API modules, updating dependencies, and pushing changes to the repository.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/reference/submodule-layouts.md#2025-04-21_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ngit commit\ngit tag v1.0.0 # this is your main module release\ngit tag api/v1.0.0 # this is your api release\ngo mod edit -require YOUR_GO_PATH/test-operator/api@v1.0.0 # now we depend on the api module in the main module\ngo mod edit -dropreplace YOUR_GO_PATH/test-operator/api/v1alpha1 # this will drop the replace directive for local development in case you use go modules, meaning the sources from the VCS will be used instead of the ones in your monorepo checked out locally.\ngit push origin main v1.0.0 api/v1.0.0\n```\n\n----------------------------------------\n\nTITLE: Sample v2 CronJob Resource Definition\nDESCRIPTION: YAML definition for a v2 version of the CronJob custom resource, referenced from config/samples directory. This shows the structure of the newer API version.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/multiversion-tutorial/deployment.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n{{#include ./testdata/project/config/samples/batch_v2_cronjob.yaml}}\n```\n\n----------------------------------------\n\nTITLE: Defining GenericSubcommand Interface in Go\nDESCRIPTION: Defines the GenericSubcommand interface used by specific plugin types. It includes methods for updating context, binding flags, running the subcommand, and injecting configuration.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/designs/extensible-cli-and-scaffolding-plugins-phase-1.md#2025-04-21_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype GenericSubcommand interface {\n    // UpdateContext updates a PluginContext with command-specific help text, like description and examples.\n    // Can be a no-op if default help text is desired.\n    UpdateContext(*PluginContext)\n    // BindFlags binds the plugin's flags to the CLI. This allows each plugin to define its own\n    // command line flags for the kubebuilder subcommand.\n    BindFlags(*pflag.FlagSet)\n    // Run runs the subcommand.\n    Run() error\n    // InjectConfig passes a config to a plugin. The plugin may modify the\n    // config. Initializing, loading, and saving the config is managed by the\n    // cli package.\n    InjectConfig(*config.Config)\n}\n```\n\n----------------------------------------\n\nTITLE: Controller Setup with Scaffold Marker in Go\nDESCRIPTION: Example of how controllers are registered using the +kubebuilder:scaffold:builder marker\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/reference/markers/scaffold.md#2025-04-21_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nif err = (&crewv1.AdmiralReconciler{\n    Client: mgr.GetClient(),\n    Scheme: mgr.GetScheme(),\n}).SetupWithManager(mgr); err != nil {\n    setupLog.Error(err, \"unable to create controller\", \"controller\", \"Admiral\")\n    os.Exit(1)\n}\n// +kubebuilder:scaffold:builder\n```\n\n----------------------------------------\n\nTITLE: Configuring Bash Profile for Kubebuilder Autocompletion\nDESCRIPTION: This code snippet shows the configuration that should be added to the ~/.bash_profile or ~/.bashrc file to enable Kubebuilder autocompletion in Bash shell. It sources the bash_completion file if available and then adds Kubebuilder completion.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/reference/completion.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# kubebuilder autocompletion\nif [ -f /usr/local/share/bash-completion/bash_completion ]; then\n. /usr/local/share/bash-completion/bash_completion\nfi\n. <(kubebuilder completion bash)\n```\n\n----------------------------------------\n\nTITLE: Building and Pushing Docker Image for Kubernetes Admission Webhook\nDESCRIPTION: Command to build and push a Docker image for the admission webhook project. It uses the 'make' command to execute the docker-build and docker-push tasks, specifying the image name and tag.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/cronjob-tutorial/running-webhook.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake docker-build docker-push IMG=<some-registry>/<project-name>:tag\n```\n\n----------------------------------------\n\nTITLE: Creating a Cluster-Scoped CRD using Kubebuilder CLI\nDESCRIPTION: This shell command creates a new API with a cluster-scoped CustomResourceDefinition using the Kubebuilder CLI. It sets the --namespaced flag to false to make the CRD cluster-wide.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/reference/scopes.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nkubebuilder create api --group cache --version v1alpha1 --kind Memcached --resource=true --controller=true --namespaced=false\n```\n\n----------------------------------------\n\nTITLE: Displaying API Directory Structure in Kubebuilder\nDESCRIPTION: Shows the desired directory structure for multiple API groups in a Kubebuilder project. It demonstrates how different API groups and versions should be organized in separate directories.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/designs/simplified-scaffolding.md#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ tree ./test/project/api\n./test/project/api\n├── groupa\n│   └── v1\n│       └── types.go\n└── groupb\n    └── v1\n        └── types.go\n```\n\n----------------------------------------\n\nTITLE: Importing External API Module in Kubebuilder Project\nDESCRIPTION: A shell command for importing a previously released API module into another Kubebuilder project. This allows reusing API definitions across different controllers or operators without duplicating code.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/reference/submodule-layouts.md#2025-04-21_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ngo get YOUR_GO_PATH/test-operator/api@v1.0.0\n```\n\n----------------------------------------\n\nTITLE: Defining Metadata and Error Structures in Go for Kubebuilder CLI\nDESCRIPTION: This snippet defines structures for CLI metadata, subcommand metadata, and an exit error. These are used as input/output values for various plugin hooks in the Kubebuilder system.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/designs/extensible-cli-and-scaffolding-plugins-phase-1-5.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// CLIMetadata is the runtime meta-data of the CLI\ntype CLIMetadata struct {\n\t// CommandName is the root command name.\n\tCommandName string\n}\n\n// SubcommandMetadata is the runtime meta-data for a subcommand\ntype SubcommandMetadata struct {\n\t// Description is a description of what this subcommand does. It is used to display help.\n\tDescription string\n\t// Examples are one or more examples of the command-line usage of this subcommand. It is used to display help.\n\tExamples string\n}\n\ntype ExitError struct {\n\tPlugin string\n\tReason string\n}\n\nfunc (e ExitError) Error() string {\n\treturn fmt.Sprintf(\"plugin %s exit early: %s\", e.Plugin, e.Reason)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating New API with Kubebuilder CLI\nDESCRIPTION: Example command to create a new Admiral API with controller and resource in the crew group\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/reference/markers/scaffold.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nkubebuilder create api --group crew --version v1 --kind Admiral --controller=true --resource=true\n```\n\n----------------------------------------\n\nTITLE: Implementing Reconcile Function in Custom Controller\nDESCRIPTION: Shows an example of a custom controller's reconcile function, demonstrating how to set an initial status for a newly discovered resource instance.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/reference/admission-webhook.md#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// Custom controller's reconcile function might look something like this:\nfunc (r *ReconcileMyResource) Reconcile(request reconcile.Request) (reconcile.Result, error) {\n    // ...\n    // Upon discovering a new instance, set the initial status\n    instance.Status = SomeInitialStatus\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Executing External Plugin and Handling Communication in Go\nDESCRIPTION: This function handles the execution of an external plugin, constructing the PluginRequest, sending it to the plugin via stdin, and processing the PluginResponse received via stdout. It also handles JSON marshaling and unmarshaling for communication.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/designs/extensible-cli-and-scaffolding-plugins-phase-2.md#2025-04-21_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc (p *ExternalPlugin) runExternalProgram(req PluginRequest) (res PluginResponse, err error) {\n  pluginReq, err := json.Marshal(req)\n  if err != nil {\n    return res, err\n  }\n\n  cmd := exec.Command(p.Path)\n  cmd.Dir = p.DirContext\n  cmd.Stdin = bytes.NewBuffer(pluginReq)\n  cmd.Stderr = os.Stderr\n\n  out, err := cmd.Output()\n  if err != nil {\n    fmt.Fprint(os.Stdout, string(out))\n    return res, err\n  }\n\n  if json.Unmarshal(out, &res); err != nil {\n    return res, err\n  }\n  return res, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Using Kustomize Plugin via CLI Command\nDESCRIPTION: Shell command demonstrating how to initialize a project with just the Kustomize v2 plugin using the kubebuilder CLI. This command scaffolds only the Kustomize manifests without any language-specific code.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/plugins/available/kustomize-v2.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nkubebuilder init --plugins=kustomize/v2\n$ ls -la\ntotal 24\ndrwxr-xr-x   6 camilamacedo86  staff  192 31 Mar 09:56 .\ndrwxr-xr-x  11 camilamacedo86  staff  352 29 Mar 21:23 ..\n-rw-------   1 camilamacedo86  staff  129 26 Mar 12:01 .dockerignore\n-rw-------   1 camilamacedo86  staff  367 26 Mar 12:01 .gitignore\n-rw-------   1 camilamacedo86  staff   94 31 Mar 09:56 PROJECT\ndrwx------   6 camilamacedo86  staff  192 31 Mar 09:56 config\n```\n\n----------------------------------------\n\nTITLE: Deploying Kubernetes Admission Webhook\nDESCRIPTION: Command to deploy the admission webhook to a Kubernetes cluster. It uses the 'make' command with the 'deploy' target and specifies the image to be used.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/cronjob-tutorial/running-webhook.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmake deploy IMG=<some-registry>/<project-name>:tag\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes API and Controller\nDESCRIPTION: Command to create a new API (group/version) and Kind (CRD) using Kubebuilder scaffolding.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/quick-start.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubebuilder create api --group webapp --version v1 --kind Guestbook\n```\n\n----------------------------------------\n\nTITLE: Initializing Standalone Kustomize Plugin\nDESCRIPTION: Shell command to initialize a project with only the Kustomize v2 plugin, which creates basic project structure and Kustomize configuration files.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/plugins/kustomize-v2.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkubebuilder init --plugins=kustomize/v2\n$ ls -la\ntotal 24\ndrwxr-xr-x   6 camilamacedo86  staff  192 31 Mar 09:56 .\ndrwxr-xr-x  11 camilamacedo86  staff  352 29 Mar 21:23 ..\n-rw-------   1 camilamacedo86  staff  129 26 Mar 12:01 .dockerignore\n-rw-------   1 camilamacedo86  staff  367 26 Mar 12:01 .gitignore\n-rw-------   1 camilamacedo86  staff   94 31 Mar 09:56 PROJECT\ndrwx------   6 camilamacedo86  staff  192 31 Mar 09:56 config\n```\n\n----------------------------------------\n\nTITLE: Updating API Path in PROJECT File YAML\nDESCRIPTION: Updates the path of an API in the PROJECT file to reflect the new api directory structure.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/migration/manually_migration_guide_gov3_to_gov4.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n  group: crew\n  kind: Captain\n  path: sigs.k8s.io/kubebuilder/testdata/project-v4/api/crew/v1\n```\n\n----------------------------------------\n\nTITLE: Initializing Combined Kustomize and Go Base Plugin\nDESCRIPTION: Shell command demonstrating how to initialize a project using both Kustomize v2 and the Go base plugin v4, including domain and repository configuration.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/plugins/kustomize-v2.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nkubebuilder init --plugins=kustomize/v2,base.go.kubebuilder.io/v4 --domain example.org --repo example.org/guestbook-operator\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Kubebuilder CLI with Default Plugin\nDESCRIPTION: Shell commands demonstrating how to use a custom Kubebuilder-based CLI with the default plugin. This example shows the initialization of a project and creation of APIs and webhooks using the default plugin specified in the CLI configuration.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/plugins/extending/extending_cli_features_and_plugins.md#2025-04-21_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\n# Initialize a project with the default Init plugin, \"go.example.com/v1\".\n# This key is automatically written to a PROJECT config file.\n$ my-bin-builder init\n# Create an API and webhook with \"go.example.com/v1\" CreateAPI and\n# CreateWebhook plugin methods. This key was read from the config file.\n$ my-bin-builder create api [flags]\n$ my-bin-builder create webhook [flags]\n```\n\n----------------------------------------\n\nTITLE: Implementing Deployment Size Reconciliation in Go\nDESCRIPTION: Go code that ensures the deployment replicas match the size specified in the Custom Resource\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/designs/code-generate-image-plugin.md#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n\tsize := {{ resource }}.Spec.Size\n\tif *found.Spec.Replicas != size {\n\t\tfound.Spec.Replicas = &size\n\t\terr = r.Update(ctx, found)\n\t\tif err != nil {\n\t\t\tlog.Error(err, \"Failed to update Deployment\", \"Deployment.Namespace\", found.Namespace, \"Deployment.Name\", found.Name)\n\t\t\treturn ctrl.Result{}, err\n\t\t}\n\t\t// Spec updated - return and requeue\n\t\treturn ctrl.Result{Requeue: true}, nil\n\t}\n```\n\n----------------------------------------\n\nTITLE: Handling PluginRequest JSON Structure in Kubebuilder External Plugins\nDESCRIPTION: Example of a PluginRequest JSON structure that Kubebuilder sends to external plugins via stdin. This includes the API version, command arguments, the command being run, and an empty universe object.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/plugins/extending/external-plugins.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"apiVersion\": \"v1alpha1\",\n  \"args\": [\"--domain\", \"my.domain\"],\n  \"command\": \"init\",\n  \"universe\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Identifying API Group in Kubebuilder Project\nDESCRIPTION: Shows how to identify the API group from the groupversion_info.go file, which contains the +groupName annotation that defines the API group for the package.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/migration/multi-group.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// +groupName=batch.tutorial.kubebuilder.io\npackage v1\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation of Kubernetes Operator Best Practices\nDESCRIPTION: Documentation covering reconciliation, idempotency, API conventions, and controller design patterns in Kubernetes Operators. Includes detailed explanations of why certain practices should be followed and their benefits.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/reference/good-practices.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Good Practices\n\n## What is \"Reconciliation\" in Operators?\n\nWhen you create a project using Kubebuilder, see the scaffolded code generated under `cmd/main.go`. This code initializes a [Manager][controller-runtime-manager], and the project relies on the [controller-runtime][controller-runtime] framework. The Manager manages [Controllers][controllers], which offer a reconcile function that synchronizes resources until the desired state is achieved within the cluster.\n\nReconciliation is an ongoing loop that executes necessary operations to maintain the desired state, adhering to Kubernetes principles, such as the [control loop][k8s-control-loop]. For further information, check out the [Operator patterns][k8s-operator-pattern] documentation from Kubernetes to better understand those concepts.\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom CLI with Kubebuilder Plugins in Go\nDESCRIPTION: This example demonstrates how to create a custom CLI implementation using Kubebuilder's plugin architecture. It shows how to register plugins, set default configurations, and add custom commands to build your own Kubebuilder-based scaffolding tool.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/plugins/extending/extending_cli_features_and_plugins.md#2025-04-21_snippet_8\n\nLANGUAGE: go\nCODE:\n```\npackage cli\n\nimport (\n\tlog \"github.com/sirupsen/logrus\"\n\t\"github.com/spf13/cobra\"\n\n\t\"sigs.k8s.io/kubebuilder/v4/pkg/cli\"\n\tcfgv3 \"sigs.k8s.io/kubebuilder/v4/pkg/config/v3\"\n\t\"sigs.k8s.io/kubebuilder/v4/pkg/plugin\"\n\tkustomizecommonv2 \"sigs.k8s.io/kubebuilder/v4/pkg/plugins/common/kustomize/v2\"\n\t\"sigs.k8s.io/kubebuilder/v4/pkg/plugins/golang\"\n\tdeployimage \"sigs.k8s.io/kubebuilder/v4/pkg/plugins/golang/deploy-image/v1alpha1\"\n    golangv4 \"sigs.k8s.io/kubebuilder/v4/pkg/plugins/golang/v4\"\n\n)\n\nvar (\n\t// The following is an example of the commands\n\t// that you might have in your own binary\n\tcommands = []*cobra.Command{\n\t\tmyExampleCommand.NewCmd(),\n\t}\n\talphaCommands = []*cobra.Command{\n\t\tmyExampleAlphaCommand.NewCmd(),\n\t}\n)\n\n// GetPluginsCLI returns the plugins based CLI configured to be used in your CLI binary\nfunc GetPluginsCLI() (*cli.CLI) {\n\t// Bundle plugin which built the golang projects scaffold by Kubebuilder go/v4\n\tgov3Bundle, _ := plugin.NewBundleWithOptions(plugin.WithName(golang.DefaultNameQualifier),\n\t\tplugin.WithVersion(plugin.Version{Number: 3}),\n\t\tplugin.WithPlugins(kustomizecommonv2.Plugin{}, golangv4.Plugin{}),\n\t)\n\n\n\tc, err := cli.New(\n\t\t// Add the name of your CLI binary\n\t\tcli.WithCommandName(\"example-cli\"),\n\n\t\t// Add the version of your CLI binary\n\t\tcli.WithVersion(versionString()),\n\n\t\t// Register the plugins options which can be used to do the scaffolds via your CLI tool. See that we are using as example here the plugins which are implemented and provided by Kubebuilder\n\t\tcli.WithPlugins(\n\t\t\tgov3Bundle,\n\t\t\t&deployimage.Plugin{},\n\t\t),\n\n\t\t// Defines what will be the default plugin used by your binary. It means that will be the plugin used if no info be provided such as when the user runs `kubebuilder init`\n\t\tcli.WithDefaultPlugins(cfgv3.Version, gov3Bundle),\n\n\t\t// Define the default project configuration version which will be used by the CLI when none is informed by --project-version flag.\n\t\tcli.WithDefaultProjectVersion(cfgv3.Version),\n\n\t\t// Adds your own commands to the CLI\n\t\tcli.WithExtraCommands(commands...),\n\n\t\t// Add your own alpha commands to the CLI\n\t\tcli.WithExtraAlphaCommands(alphaCommands...),\n\n\t\t// Adds the completion option for your CLI\n\t\tcli.WithCompletion(),\n\t)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\treturn c\n}\n\n// versionString returns the CLI version\nfunc versionString() string {\n\t// return your binary project version\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Webhooks for CronJob Resource\nDESCRIPTION: Command to scaffold webhooks for the CronJob custom resource with defaulting and validation capabilities. This creates webhook handlers for the CronJob resource.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/migration/migration_guide_gov3_to_gov4.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nkubebuilder create webhook --group batch --version v1 --kind CronJob --defaulting --programmatic-validation\n```\n\n----------------------------------------\n\nTITLE: Building and Pushing Docker Image for Kubebuilder Project\nDESCRIPTION: Builds and pushes the operator container image to a specified registry. The IMG parameter defines the target image repository and tag.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/testdata/project-v4/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmake docker-build docker-push IMG=<some-registry>/project-v4:tag\n```\n\n----------------------------------------\n\nTITLE: Building and Pushing Docker Images for Kubebuilder Project\nDESCRIPTION: Commands to build and push the project's Docker image to a specified registry with a tag. This is required before deployment to a Kubernetes cluster.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/getting-started/testdata/project/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmake docker-build docker-push IMG=<some-registry>/project:tag\n```\n\n----------------------------------------\n\nTITLE: Running MdBook Server for Local Development\nDESCRIPTION: Commands for setting up and running the mdBook server locally to preview Kubebuilder documentation changes. Requires mdBook and controller-gen to be installed.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd docs/book\nmdbook serve\n```\n\n----------------------------------------\n\nTITLE: Moving API Files to Group Directory in Kubebuilder\nDESCRIPTION: Bash commands for creating a new directory structure for APIs organized by group name, and moving existing API files into the appropriate group directory.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/migration/multi-group.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmkdir api/batch\nmv api/* api/batch\n```\n\n----------------------------------------\n\nTITLE: Creating New API Version with Kubebuilder\nDESCRIPTION: Shell command to create a new API version (v2) for the CronJob resource using Kubebuilder.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/multiversion-tutorial/api-changes.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nkubebuilder create api --group batch --version v2 --kind CronJob\n```\n\n----------------------------------------\n\nTITLE: Running the Proposed Alpha Command for Helm Chart Generation in Kubebuilder\nDESCRIPTION: Example command syntax for an alternative implementation that would generate a Helm chart from a specific kustomize directory, outputting it to a specified path. This approach differs from the plugin-based implementation discussed elsewhere in the document.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/designs/helm-chart-autogenerate-plugin.md#2025-04-21_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nkubebuilder alpha generate-helm-chart --from=<path> --output=<path>\n```\n\n----------------------------------------\n\nTITLE: Generating Kubebuilder Project Structure\nDESCRIPTION: Demonstrates the process of initializing a Kubebuilder project, creating APIs for different versions, and displaying the resulting directory structure. It shows how to use Kubebuilder commands to scaffold a project with multiple API versions.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/designs/simplified-scaffolding.md#2025-04-21_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ kubebuilder init --domain test.k8s.io\n$ kubebuilder create api --group mygroup --version v1beta1 --kind MyKind\n$ kubebuilder create api --group mygroup --version v2beta1 --kind MyKind\n$ tree .\n.\n├── main.go\n├── controller\n│   ├── mykind_controller.go\n│   ├── controller_test.go\n│   └── controllers_suite_test.go\n├── api\n│   ├── v1beta1\n│   │   ├── mykind_types.go\n│   │   └── groupversion_info.go\n│   └── v1\n│       ├── mykind_types.go\n│       └── groupversion_info.go\n└── vendor\n```\n\n----------------------------------------\n\nTITLE: Exporting Pprof Data using curl\nDESCRIPTION: This bash command demonstrates how to export profiling statistics to a file using curl. It sends a GET request to the Pprof endpoint and saves the response to a file named cpu-profile.out.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/reference/pprof-tutorial.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Note that we are using the bind host and port configured via the\n# Manager Options in the cmd/main.go\ncurl -s \"http://127.0.0.1:8082/debug/pprof/profile\" > ./cpu-profile.out\n```\n\n----------------------------------------\n\nTITLE: Enabling Network Policy in Kustomization Configuration (YAML)\nDESCRIPTION: Configuration snippet showing how to enable Network Policy for basic pod-level firewall protection. This helps secure the metrics endpoint and Webhook Server.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/reference/metrics.md#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n# [NETWORK POLICY] Protect the /metrics endpoint and Webhook Server with NetworkPolicy.\n# Only Pod(s) running a namespace labeled with 'metrics: enabled' will be able to gather the metrics.\n# Only CR(s) which uses webhooks and applied on namespaces labeled 'webhooks: enabled' will be able to work properly.\n#- ../network-policy\n```\n\n----------------------------------------\n\nTITLE: Enabling Helm Chart Generation for Existing Project\nDESCRIPTION: Command to enable Helm chart generation for an existing Kubebuilder project.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/designs/helm-chart-autogenerate-plugin.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkubebuilder edit --plugins=helm/v1-alpha\n```\n\n----------------------------------------\n\nTITLE: Retrieving v2 CronJob Resource with kubectl\nDESCRIPTION: Shell command to get the CronJob resource using the v2 API version explicitly with the fully-qualified group-version-resource syntax.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/multiversion-tutorial/deployment.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get cronjobs.v2.batch.tutorial.kubebuilder.io -o yaml\n```\n\n----------------------------------------\n\nTITLE: Referencing CRD Validation Documentation in Markdown\nDESCRIPTION: This snippet links to the documentation for CRD validation markers, which are used in conjunction with the CRD generation process.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/reference/markers/crd.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[validation markers](./crd-validation.md)\n```\n\n----------------------------------------\n\nTITLE: Initializing Kubebuilder Project with Custom Domain\nDESCRIPTION: Example commands for initializing a Kubebuilder project with a custom domain (example.com) and creating an API. The domain value is used as a suffix for resource groups.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/faq.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nkubebuilder init --domain example.com --repo xxx --plugins=go/v4\nkubebuilder create api --group mygroup --version v1beta1 --kind Mykind\n```\n\n----------------------------------------\n\nTITLE: Simplified String Type Marker in Kubebuilder\nDESCRIPTION: Example of a simplified marker syntax for string values, where quotes can be omitted for simple single-word strings.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/reference/markers.md#2025-04-21_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// +kubebuilder:validation:Type=string\n```\n\n----------------------------------------\n\nTITLE: Referencing Additional Printer Columns in Kubernetes CRD\nDESCRIPTION: This code snippet provides a link to documentation on adding additional printer columns to a Kubernetes Custom Resource Definition (CRD) for enhanced output when using 'kubectl get' commands.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/cronjob-tutorial/epilogue.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[printer-columns]: /reference/generating-crd.md#additional-printer-columns\n```\n\n----------------------------------------\n\nTITLE: Using Existing Cluster for EnvTest\nDESCRIPTION: This code demonstrates how to configure EnvTest to use an existing Kubernetes cluster instead of starting a new one. This is useful when you want to run tests against a cluster with specific configurations already in place.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/reference/envtest.md#2025-04-21_snippet_10\n\nLANGUAGE: go\nCODE:\n```\ntestEnv = &envtest.Environment{\n\tUseExistingCluster: true,\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing Pprof Results with go tool\nDESCRIPTION: This bash command shows how to use the go tool to visualize Pprof results in a browser. It opens a session on port 8080 and displays the profiling data from the cpu-profile.out file.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/reference/pprof-tutorial.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Go tool will open a session on port 8080.\n# You can change this as per your own need.\ngo tool pprof -http=:8080 ./cpu-profile.out\n```\n\n----------------------------------------\n\nTITLE: Creating a CronJob in Kubernetes to Test Admission Webhook\nDESCRIPTION: Command to create a CronJob in Kubernetes using a sample configuration file. This is used to test the deployed admission webhook.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/cronjob-tutorial/running-webhook.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create -f config/samples/batch_v1_cronjob.yaml\n```\n\n----------------------------------------\n\nTITLE: Retrieving v1 CronJob Resource with kubectl\nDESCRIPTION: Shell command to get the same CronJob resource using the v1 API version, demonstrating the conversion between versions.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/multiversion-tutorial/deployment.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get cronjobs.v1.batch.tutorial.kubebuilder.io -o yaml\n```\n\n----------------------------------------\n\nTITLE: Creating a v2 CronJob Resource with kubectl\nDESCRIPTION: Shell command to apply the v2 CronJob sample to the Kubernetes cluster, which will create the resource using the v2 API version.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/multiversion-tutorial/deployment.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nkubectl apply -f config/samples/batch_v2_cronjob.yaml\n```\n\n----------------------------------------\n\nTITLE: Defining Kubernetes Resource List in Go\nDESCRIPTION: Example of defining a Kubernetes resource list type with deepcopy and client generation annotations.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/migration_guide.md#2025-04-21_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object\n// +genclient:nonNamespaced\n\n// HelloList contains a list of Hello\ntype HelloList struct {\n\tmetav1.TypeMeta `json:\",inline\"`\n\tmetav1.ListMeta `json:\"metadata,omitempty\"`\n\tItems           []Hello `json:\"items\"`\n}\n\nfunc init() {\n\tSchemeBuilder.Register(&Hello{}, &HelloList{})\n}\n```\n\n----------------------------------------\n\nTITLE: Creating API in Kubebuilder v1\nDESCRIPTION: Command to create a new API in a Kubebuilder v1 project with specified group, version, and kind.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/migration_guide.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubebuilder create api --group <group> --version <version> --kind <kind>\n```\n\n----------------------------------------\n\nTITLE: Configuring CRD Retention in Helm Chart\nDESCRIPTION: YAML configuration in values.yaml to prevent CRD deletion when the Helm chart is uninstalled.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/designs/helm-chart-autogenerate-plugin.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n  # START annotations {{- if .Values.crds.keep }}\n  annotations:\n    helm.sh/resource-policy: keep\n  # END annotations {{- end }}\n```\n\n----------------------------------------\n\nTITLE: Displaying Project Directory Structure with tree\nDESCRIPTION: A shell command showing the directory structure of a test project, demonstrating the complex organization of files and folders in the current Kubebuilder implementation.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/designs/simplified-scaffolding.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ tree -d ./test/project\n./test/project\n├── cmd\n│   └── manager\n├── pkg\n│   ├── apis\n│   │   ├── creatures\n│   │   │   └── v2alpha1\n│   │   ├── crew\n│   │   │   └── v1\n│   │   ├── policy\n│   │   │   └── v1beta1\n│   │   └── ship\n│   │       └── v1beta1\n│   ├── controller\n│   │   ├── firstmate\n│   │   ├── frigate\n│   │   ├── healthcheckpolicy\n│   │   ├── kraken\n│   │   └── namespace\n│   └── webhook\n│       └── default_server\n│           ├── firstmate\n│           │   └── mutating\n│           ├── frigate\n│           │   └── validating\n│           ├── kraken\n│           │   └── validating\n│           └── namespace\n│               └── mutating\n└── vendor\n```\n\n----------------------------------------\n\nTITLE: Defining GroupVersion Info in Kubebuilder API\nDESCRIPTION: Shows the groupversion_info.go file for a Kubebuilder API. This code defines the GroupVersion for the API and provides functions to add the types to the scheme. It's crucial for registering the API types with the Kubernetes API server.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/designs/simplified-scaffolding.md#2025-04-21_snippet_10\n\nLANGUAGE: go\nCODE:\n```\npackage v1\n\nimport (\n\t\"sigs.k8s.io/controller-runtime/pkg/scheme\"\n\t\"k8s.io/apimachinery/pkg/runtime/schema\"\n)\n\nvar (\n\tGroupVersion = schema.GroupVersion{Group: \"mygroup.test.k8s.io\", Version: \"v1\"}\n\n\t// SchemeBuilder is used to add go types to the GroupVersionKind scheme\n\tSchemeBuilder = &scheme.Builder{GroupVersion: GroupVersion}\n\n\t// AddToScheme adds the types in this group-version to the given scheme.\n\tAddToScheme = SchemeBuilder.AddToScheme\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Busybox API with deploy-image plugin\nDESCRIPTION: Command to scaffold a Busybox API controller using the deploy-image plugin with a simple image configuration.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/plugins/available/deploy-image-plugin-v1-alpha.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkubebuilder create api \\\n  --group example.com \\\n  --version v1alpha1 \\\n  --kind Busybox \\\n  --image=busybox:1.36.1 \\\n  --plugins=\"deploy-image/v1-alpha\"\n```\n\n----------------------------------------\n\nTITLE: Directory Structure of Kubernetes Test Binaries\nDESCRIPTION: Example directory structure showing the organization of test binaries for Kubernetes version 1.25.0 on macOS (darwin-amd64). These binaries include etcd, kube-apiserver, and kubectl, which are required for testing controllers.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/reference/artifacts.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./bin/k8s/\n└── 1.25.0-darwin-amd64\n    ├── etcd\n    ├── kube-apiserver\n    └── kubectl\n```\n\n----------------------------------------\n\nTITLE: Updating Helm Chart with Latest Project Changes\nDESCRIPTION: Command to synchronize the Helm chart with the latest changes in the Kubebuilder project.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/designs/helm-chart-autogenerate-plugin.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nkubebuilder edit --plugins=helm/v1-alpha\n```\n\n----------------------------------------\n\nTITLE: Defining Memcached Status in Go\nDESCRIPTION: Go code defining the MemcachedStatus structure with Conditions field, following Kubernetes API conventions for reporting status information about resources.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/getting-started.md#2025-04-21_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// MemcachedStatus defines the observed state of Memcached\ntype MemcachedStatus struct {\n\tConditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Controller Structure with tree\nDESCRIPTION: A shell command showing the complex structure of controller files in the current Kubebuilder implementation, highlighting the numerous files required for controller setup.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/designs/simplified-scaffolding.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ tree ./test/project/pkg/controller\n./test/project/pkg/controller\n├── add_firstmate.go\n├── controller.go\n├── firstmate\n│   ├── firstmate_controller.go\n│   ├── firstmate_controller_suite_test.go\n│   └── firstmate_controller_test.go\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring Kustomize Patch for HTTPS ServiceMonitor in Kubebuilder\nDESCRIPTION: Example of how to configure a Kustomize patch in the config/default/kustomization.yaml file to enable HTTPS for the ServiceMonitor using cert-manager.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/designs/discontinue_usage_of_kube_rbac_proxy.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# [METRICS WITH HTTPS] To enable the ServiceMonitor using HTTPS, uncomment the following line\n# Note that for this to work, you also need to ensure that cert-manager is enabled in your project\n- path: metrics_https_patch.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring CertManager Certificate Replacements in Kustomization (YAML)\nDESCRIPTION: Configuration snippet showing how to set up replacements to properly configure DNS names for certificates managed by CertManager. This is needed to properly secure the metrics server.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/reference/metrics.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n# [CERTMANAGER] To enable cert-manager, uncomment all sections with 'CERTMANAGER' prefix.\n# Uncomment the following replacements to add the cert-manager CA injection annotations\n#replacements:\n# - source: # Uncomment the following block to enable certificates for metrics\n#     kind: Service\n#     version: v1\n#     name: controller-manager-metrics-service\n#     fieldPath: metadata.name\n#   targets:\n#     - select:\n#         kind: Certificate\n#         group: cert-manager.io\n#         version: v1\n#         name: metrics-certs\n#       fieldPaths:\n#         - spec.dnsNames.0\n#         - spec.dnsNames.1\n#       options:\n#         delimiter: '.'\n#         index: 0\n#         create: true\n#\n# - source:\n#     kind: Service\n#     version: v1\n#     name: controller-manager-metrics-service\n#     fieldPath: metadata.namespace\n#   targets:\n#     - select:\n#         kind: Certificate\n#         group: cert-manager.io\n#         version: v1\n#         name: metrics-certs\n#       fieldPaths:\n#         - spec.dnsNames.0\n#         - spec.dnsNames.1\n#       options:\n#         delimiter: '.'\n#         index: 1\n#         create: true\n#\n```\n\n----------------------------------------\n\nTITLE: Documenting Kubebuilder Project Migrations in Markdown\nDESCRIPTION: This markdown snippet introduces the concept of migrations in Kubebuilder projects. It explains that migrating between project structures often requires manual work and indicates that the document will provide details on migration processes for different Kubebuilder versions and project layouts.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/migrations.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Migrations\n\nMigrating between project structures in Kubebuilder generally involves\na bit of manual work.\n\nThis section details what's required to migrate, between different\nversions of Kubebuilder scaffolding, as well as to more complex project\nlayout structures.\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Plugin Path for Kubebuilder External Plugins\nDESCRIPTION: Shell command to set a custom path for external plugin binaries using the EXTERNAL_PLUGINS_PATH environment variable. This overrides the default OS-specific plugin search locations.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/plugins/extending/external-plugins.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nexport EXTERNAL_PLUGINS_PATH=<custom-path>\n```\n\n----------------------------------------\n\nTITLE: Updating Helm Chart in Existing Kubebuilder Project\nDESCRIPTION: Commands to generate manifests and then update an existing Helm chart in a Kubebuilder project to reflect the latest changes.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/plugins/available/helm-v1-alpha.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nmake manifests\nkubebuilder edit --plugins=helm/v1-alpha\n```\n\n----------------------------------------\n\nTITLE: Deploying Controller Manager to Kubernetes Cluster\nDESCRIPTION: Command to deploy the controller manager to the Kubernetes cluster using the specified container image.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/testdata/project-v4-multigroup/README.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nmake deploy IMG=<some-registry>/project-v4-multigroup:tag\n```\n\n----------------------------------------\n\nTITLE: Defining Deprecated Interface in Go\nDESCRIPTION: Defines the Deprecated interface for plugins that are deprecated. It includes a method for returning a deprecation warning message.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/designs/extensible-cli-and-scaffolding-plugins-phase-1.md#2025-04-21_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// Deprecated is an interface that, if implemented, informs the CLI\n// that the plugin is deprecated.  The CLI uses this to print deprecation\n// warnings when the plugin is in use.\ntype Deprecated interface {\n    // DeprecationWarning returns a deprecation message that callers\n    // can use to warn users of deprecations\n    DeprecationWarning() string\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Cert Manager Certificate Controller\nDESCRIPTION: Example of creating a controller for Cert Manager's Certificate type\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/reference/using_an_external_resource.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkubebuilder create api --group certmanager --version v1 --kind Certificate --controller=true --resource=false --external-api-path=github.com/cert-manager/cert-manager/pkg/apis/certmanager/v1 --external-api-domain=io\n```\n\n----------------------------------------\n\nTITLE: Initializing Empty Main Function in Go for Kubebuilder\nDESCRIPTION: Basic empty main function template that serves as the entry point for a Kubebuilder project. This is the minimal required structure to begin building a Kubernetes operator.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/cronjob-tutorial/empty-main.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nfunc main() {\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ServiceMonitor with Cert-Manager for HTTPS in Kubebuilder\nDESCRIPTION: Example of a ServiceMonitor configuration that works with cert-manager to enable HTTPS communication for metrics in a Kubebuilder project.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/designs/discontinue_usage_of_kube_rbac_proxy.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Prometheus Monitor Service (Metrics) with cert-manager\napiVersion: monitoring.coreos.com/v1\nkind: ServiceMonitor\nmetadata:\n  labels:\n    control-plane: controller-manager\n    app.kubernetes.io/name: project-v4\n    app.kubernetes.io/managed-by: kustomize\n  name: controller-manager-metrics-monitor\n  namespace: system\n  annotations:\n    cert-manager.io/inject-ca-from: $(NAMESPACE)/controller-manager-certificate\nspec:\n  endpoints:\n    - path: /metrics\n      port: https\n      scheme: https\n      bearerTokenFile: /var/run/secrets/kubernetes.io/serviceaccount/token\n      tlsConfig:\n        # We should recommend ensure that TLS verification is not skipped in production\n        insecureSkipVerify: false\n        caFile: /etc/prometheus/secrets/ca.crt # CA certificate injected by cert-manager\n        certFile: /etc/prometheus/secrets/tls.crt # TLS certificate injected by cert-manager\n        keyFile: /etc/prometheus/secrets/tls.key # TLS private key injected by cert-manager\n  selector:\n    matchLabels:\n      control-plane: controller-manager\n```\n\n----------------------------------------\n\nTITLE: Updating Controller Watch Functions in Kubebuilder v1\nDESCRIPTION: Example of updating controller watch functions from Kubebuilder v0 to v1 syntax.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/migration_guide.md#2025-04-21_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n// v0 project\ngc := &controller.GenericController{...}\ngc.Watch(&myappsv1alpha1.Memcached{})\ngc.WatchControllerOf(&v1.Pod{}, eventhandlers.Path{bc.LookupRS, bc.LookupDeployment, bc.LookupMemcached})\n\n// v1 project\nc, err := controller.New{...}\nc.Watch(&source.Kind{Type: &myappsv1alpha1.Memcached{}}, &handler.EnqueueRequestForObject{})\nc.Watch(&source.Kind{Type: &appsv1.Deployment{}}, &handler.EnqueueRequestForOwner{\n\t\tIsController: true,\n\t\tOwnerType:    &myappsv1alpha1.Memcached{},\n\t})\n```\n\n----------------------------------------\n\nTITLE: Loading Docker Image to Kind Cluster\nDESCRIPTION: Loads a local Docker image directly into a Kind cluster for development purposes.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/cronjob-tutorial/running.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nkind load docker-image <your-image-name>:tag --name <your-kind-cluster-name>\n```\n\n----------------------------------------\n\nTITLE: Scaffolding Webhook Configurations in Kubebuilder Project\nDESCRIPTION: This snippet illustrates how to scaffold mutating and validating webhooks for a Kubebuilder project using TestContext. It sets up webhook configurations for the specified API group, version, and kind.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/plugins/extending/testing-plugins.md#2025-04-21_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nBy(\"scaffolding mutating and validating webhooks\")\nerr = kbc.CreateWebhook(\n\t\"--group\", kbc.Group,\n\t\"--version\", kbc.Version,\n\t\"--kind\", kbc.Kind,\n\t\"--defaulting\",\n\t\"--programmatic-validation\",\n)\nExpect(err).NotTo(HaveOccurred(), \"Failed to create an webhook\")\n```\n\n----------------------------------------\n\nTITLE: Map Values in Kubebuilder Markers\nDESCRIPTION: Example of defining map values in kubebuilder markers using curly braces, with key-value pairs separated by colons and commas between pairs.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/reference/markers.md#2025-04-21_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n// +kubebuilder:default={magic: {numero: 42, stringified: forty-two}}\n```\n\n----------------------------------------\n\nTITLE: Generating a Helm Chart for Kubernetes Deployment\nDESCRIPTION: Command to generate a Helm chart for the project using Kubebuilder's Helm plugin.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/cronjob-tutorial/testdata/project/README.md#2025-04-21_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nkubebuilder edit --plugins=helm/v1-alpha\n```\n\n----------------------------------------\n\nTITLE: RBAC Markers for Deployment Controller\nDESCRIPTION: Generated RBAC markers for Deployment controller permissions\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/reference/using_an_external_resource.md#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n// +kubebuilder:rbac:groups=apps,resources=deployments,verbs=get;list;watch;create;update;patch;delete\n// +kubebuilder:rbac:groups=apps,resources=deployments/status,verbs=get;update;patch\n// +kubebuilder:rbac:groups=apps,resources=deployments/finalizers,verbs=update\n```\n\n----------------------------------------\n\nTITLE: Generating Kubernetes Manifests with Make\nDESCRIPTION: Generates manifests like Custom Resources (CRs) and Custom Resource Definitions (CRDs) after making API definition changes.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/cronjob-tutorial/running.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake manifests\n```\n\n----------------------------------------\n\nTITLE: Initializing Kubebuilder v1 Project\nDESCRIPTION: Command to initialize a new Kubebuilder v1 project with a specified domain.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/migration_guide.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubebuilder init --project-version v1 --domain <domain>\n```\n\n----------------------------------------\n\nTITLE: Enabling Prometheus Integration in Kustomization Configuration (YAML)\nDESCRIPTION: Configuration snippet to enable Prometheus monitoring by uncommenting the prometheus resources in the kustomization.yaml file. This creates the ServiceMonitor resource needed for exporting metrics.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/reference/metrics.md#2025-04-21_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n# [PROMETHEUS] To enable prometheus monitor, uncomment all sections with 'PROMETHEUS'.\n- ../prometheus\n```\n\n----------------------------------------\n\nTITLE: Running a Bundled Plugin with Kubebuilder\nDESCRIPTION: Shell command example showing how to run a bundled plugin with Kubebuilder's init command. This command will execute all plugins in the bundle in the specified order.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/plugins/extending/extending_cli_features_and_plugins.md#2025-04-21_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nkubebuilder init --plugins=myplugin.example.com/v1\n```\n\n----------------------------------------\n\nTITLE: CA Injection Configuration in Kustomization\nDESCRIPTION: Example YAML configuration for CA injection in config/default/kustomization.yaml\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/reference/markers/scaffold.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# - source: # Uncomment the following block if you have a ConversionWebhook (--conversion)\n#     kind: Certificate\n#     group: cert-manager.io\n#     version: v1\n#     name: serving-cert # This name should match the one in certificate.yaml\n#     fieldPath: .metadata.namespace # Namespace of the certificate CR\n#   targets: # Do not remove or uncomment the following scaffold marker; required to generate code for target CRD.\n# +kubebuilder:scaffold:crdkustomizecainjectionns\n# - source:\n#     kind: Certificate\n#     group: cert-manager.io\n#     version: v1\n#     name: serving-cert # This name should match the one in certificate.yaml\n#     fieldPath: .metadata.name\n#   targets: # Do not remove or uncomment the following scaffold marker; required to generate code for target CRD.\n# +kubebuilder:scaffold:crdkustomizecainjectioname\n```\n\n----------------------------------------\n\nTITLE: Building an Installer YAML Bundle for Distribution\nDESCRIPTION: Command to build an installer YAML bundle with all necessary resources for deploying the project. This generates an install.yaml file in the dist directory.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/getting-started/testdata/project/README.md#2025-04-21_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nmake build-installer IMG=<some-registry>/project:tag\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Kubebuilder CLI with Specified Plugin\nDESCRIPTION: Shell commands demonstrating how to use a custom Kubebuilder-based CLI with a specific plugin selected via the --plugins flag. This shows how to override the default plugin when initializing a project.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/plugins/extending/extending_cli_features_and_plugins.md#2025-04-21_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\n# Initialize a project with the \"ansible.example.com/v1\" Init plugin.\n# Like above, this key is written to a config file.\n$ my-bin-builder init --plugins ansible\n# Create an API and webhook with \"ansible.example.com/v1\" CreateAPI\n# and CreateWebhook plugin methods. This key was read from the config file.\n$ my-bin-builder create api [flags]\n$ my-bin-builder create webhook [flags]\n```\n\n----------------------------------------\n\nTITLE: Setting CRD_OPTIONS for Multi-version Support in Makefile\nDESCRIPTION: Configures the CRD_OPTIONS variable in the Makefile to generate proper validation for each version by removing the trivialVersions option.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/multiversion-tutorial/deployment.md#2025-04-21_snippet_0\n\nLANGUAGE: makefile\nCODE:\n```\nCRD_OPTIONS ?= \"crd\"\n```\n\n----------------------------------------\n\nTITLE: Applying Sample Custom Resources to the Cluster\nDESCRIPTION: Command to apply sample custom resources from the config/samples directory to test the controller functionality. Ensures that the controller is working as expected.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/getting-started/testdata/project/README.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nkubectl apply -k config/samples/\n```\n\n----------------------------------------\n\nTITLE: Building and Pushing Docker Images for Kubernetes Deployment\nDESCRIPTION: Commands to build and push a Docker image to a registry for deployment in a Kubernetes cluster.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/cronjob-tutorial/testdata/project/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmake docker-build docker-push IMG=<some-registry>/project:tag\n```\n\n----------------------------------------\n\nTITLE: Enabling CertManager Resources in Kustomization Configuration (YAML)\nDESCRIPTION: Configuration snippet to enable CertManager in Kubebuilder projects by uncommenting the certmanager resource in the default kustomization.yaml file.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/reference/metrics.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n- ../certmanager\n```\n\n----------------------------------------\n\nTITLE: Loading Docker Image into Kind Cluster\nDESCRIPTION: Command to load a locally built Docker image into a Kind cluster. This is useful for local development and CI workflows, eliminating the need to push to a remote registry.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/cronjob-tutorial/running-webhook.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkind load docker-image <your-image-name>:tag --name <your-kind-cluster-name>\n```\n\n----------------------------------------\n\nTITLE: Building Installer YAML Bundle\nDESCRIPTION: Generates an installation YAML file that bundles all resources needed to deploy the operator.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/testdata/project-v4/README.md#2025-04-21_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nmake build-installer IMG=<some-registry>/project-v4:tag\n```\n\n----------------------------------------\n\nTITLE: Operator SDK Main Function in Go\nDESCRIPTION: Shows an example of how the Operator SDK could use the new CLI package in its main function. It includes custom settings and additional plugins for Helm and Ansible.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/designs/extensible-cli-and-scaffolding-plugins-phase-1.md#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n\tc, err := cli.New(\n\t\tcli.WithCommandName(\"operator-sdk\"),\n\t\tcli.WithDefaultProjectVersion(\"2\"),\n\t\tcli.WithExtraCommands(newCustomCobraCmd()),\n\t\tcli.WithPlugins(\n\t\t\t&golangv1.Plugin{},\n\t\t\t&golangv2.Plugin{},\n\t\t\t&helmv1.Plugin{},\n\t\t\t&ansiblev1.Plugin{},\n\t\t),\n\t)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tif err := c.Run(); err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Installing CRDs in Kubernetes Cluster\nDESCRIPTION: This command installs the Custom Resource Definitions (CRDs) for the project into the Kubernetes cluster.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/testdata/project-v4-with-plugins/README.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nmake install\n```\n\n----------------------------------------\n\nTITLE: Updating envtest CRD Path in Test Suite\nDESCRIPTION: Code showing how to update the relative path to CRDs in controller test suites after migrating to a multi-group structure, adding additional levels to the path.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/migration/multi-group.md#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n    By(\"bootstrapping test environment\")\n    testEnv = &envtest.Environment{\n        CRDDirectoryPaths: []string{filepath.Join(\"..\", \"..\", \"config\", \"crd\", \"bases\")},\n    }\n```\n\n----------------------------------------\n\nTITLE: Deploying the Controller Manager to Kubernetes\nDESCRIPTION: Command to deploy the manager component to a Kubernetes cluster with a specified container image.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/cronjob-tutorial/testdata/project/README.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nmake deploy IMG=<some-registry>/project:tag\n```\n\n----------------------------------------\n\nTITLE: Enabling ServiceMonitor TLS Patch for Secure Prometheus Integration (YAML)\nDESCRIPTION: Configuration snippet to enable the ServiceMonitor patch that configures secure reference to certificates created by CertManager for Prometheus monitoring integration.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/reference/metrics.md#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n# [PROMETHEUS-WITH-CERTS] The following patch configures the ServiceMonitor in ../prometheus\n# to securely reference certificates created and managed by cert-manager.\n# Additionally, ensure that you uncomment the [METRICS WITH CERTMANAGER] patch under config/default/kustomization.yaml\n# to mount the \"metrics-server-cert\" secret in the Manager Deployment.\npatches:\n  - path: monitor_tls_patch.yaml\n    target:\n      kind: ServiceMonitor\n```\n\n----------------------------------------\n\nTITLE: Custom Metrics Configuration Example in YAML\nDESCRIPTION: Example YAML configuration showing how to define multiple custom metrics with their types and units for the Grafana plugin.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/plugins/available/grafana-v1-alpha.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n---\ncustomMetrics:\n  - metric: memcached_operator_reconcile_total # Raw custom metric (required)\n    type: counter # Metric type: counter/gauge/histogram (required)\n    unit: none\n  - metric: memcached_operator_reconcile_time_seconds_bucket\n    type: histogram\n```\n\n----------------------------------------\n\nTITLE: Template for Kubebuilder Roadmap Items in Markdown\nDESCRIPTION: This snippet provides a standardized template for documenting roadmap items in Kubebuilder. It includes sections for status, objective, context, motivations, proposed solutions, and references.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/roadmap/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### [Goal Title]\n\n**Status:** [Status Emoji] [Short Status Update]\n\n**Objective:** [Brief description of the objective]\n\n**Context:** [Optional - Any relevant background or broader context]\n\n**Motivations:** [Optional - If applicable]\n- [Key motivation 1]\n- [Key motivation 2]\n\n**Proposed Solutions:** [Optional - If applicable]\n- [Solution 1]\n- [Solution 2]\n- [More as needed]\n\n**References:** [Optional - Links to discussions, PRs, issues, etc.]\n- [Reference 1 with URL]\n- [Reference 2 with URL]\n- [More as needed]\n```\n\n----------------------------------------\n\nTITLE: Applying Sample Configurations\nDESCRIPTION: This command applies the sample configurations provided in the config/samples directory to create instances of the solution.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/testdata/project-v4-with-plugins/README.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nkubectl apply -k config/samples/\n```\n\n----------------------------------------\n\nTITLE: Creating a Bundle Plugin in Go for Kubebuilder\nDESCRIPTION: Example of creating a custom plugin bundle that combines the Golang and Kustomize plugins. The bundle is created using the plugin.NewBundle function with specific configuration options.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/plugins/extending/extending_cli_features_and_plugins.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    kustomizecommonv2 \"sigs.k8s.io/kubebuilder/v4/pkg/plugins/common/kustomize/v2\"\n    golangv4 \"sigs.k8s.io/kubebuilder/v4/pkg/plugins/golang/v4\"\n)\n\nmylanguagev1Bundle, _ := plugin.NewBundle(\n    plugin.WithName(\"mylanguage.kubebuilder.io\"),\n    plugin.WithVersion(plugin.Version{Number: 1}),\n    plugin.WithPlugins(kustomizecommonv2.Plugin{}, mylanguagev1.Plugin{}),\n)\n```\n\n----------------------------------------\n\nTITLE: Extended Shell Command with All Options for Project Re-scaffolding\nDESCRIPTION: Complete example showing all available options for the alpha generate command, including input/output directory configuration, backup options, and plugin selection.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/designs/helper_to_upgrade_projects_by_rescaffolding.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkubebuilder alpha generate \\\n    --input-dir=<path where the PROJECT file can be found>\n    --output-dir=<path where the project should be re-scaffold>\n    --no-backup\n    --backup-path=<path-where the current version of the project should be copied as backup>\n    --plugins=<chain of plugins key that can be used to create the layout with init sub-command>\n```\n\n----------------------------------------\n\nTITLE: Creating Pod Controller\nDESCRIPTION: Command to create a controller for core Kubernetes Pods\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/reference/using_an_external_resource.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nkubebuilder create api --group core --version v1 --kind Pod --controller=true --resource=false\n```\n\n----------------------------------------\n\nTITLE: Helm Chart Project Structure\nDESCRIPTION: Example of the complete Helm chart project structure including templates and resource organization\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/designs/helm-chart-autogenerate-plugin.md#2025-04-21_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nexample-project/\n  dist/\n  chart/\n    example-project-crd/\n      ├── Chart.yaml\n      ├── templates/\n      │   ├── _helpers.tpl\n      │   ├── crds/\n      │   │   └── <CRDs YAML files generated under config/crds/>\n      └── values.yaml\n    example-project/\n      ├── Chart.yaml\n      ├── templates/\n      │   ├── _helpers.tpl\n      │   ├── crds/\n      │   └── <CRDs YAML files generated under config/crds/>\n      │   ├── certmanager/\n      │   │   └── certificate.yaml\n      │   ├── manager/\n      │   │   └── manager.yaml\n      │   ├── network-policy/\n      │   │   ├── allow-metrics-traffic.yaml\n      │   │   └── allow-webhook-traffic.yaml\n      │   ├── prometheus/\n      │   │   └── monitor.yaml\n      │   ├── rbac/\n      │   │   ├── kind_editor_role.yaml\n      │   │   ├── kind_viewer_role.yaml\n      │   │   ├── leader_election_role.yaml\n      │   │   ├── leader_election_role_binding.yaml\n      │   │   ├── metrics_auth_role.yaml\n      │   │   ├── metrics_auth_role_binding.yaml\n      │   │   ├── metrics_reader_role.yaml\n      │   │   ├── role.yaml\n      │   │   ├── role_binding.yaml\n      │   │   └── service_account.yaml\n      │   ├── samples/\n      │   │   └── kind_version_admiral.yaml\n      │   ├── webhook/\n      │   │   ├── manifests.yaml\n      │   │   └── service.yaml\n      └── values.yaml\n```\n\n----------------------------------------\n\nTITLE: Moving Controllers in Deprecated go/v3 Layout\nDESCRIPTION: For the deprecated go/v3 layout, this command creates a group-specific directory for controllers and moves existing controller files.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/migration/multi-group.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmkdir controller/batch\nmv controller/* controller/batch/\n```\n\n----------------------------------------\n\nTITLE: Creating API Submodule in Go\nDESCRIPTION: Example of a go.mod file for the API submodule, showing required dependencies.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/reference/submodule-layouts.md#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule YOUR_GO_PATH/test-operator/api/v1alpha1\n\ngo 1.21.0\n\nrequire (\n        k8s.io/apimachinery v0.28.4\n        sigs.k8s.io/controller-runtime v0.16.3\n)\n\nrequire (\n        github.com/go-logr/logr v1.2.4 // indirect\n        github.com/gogo/protobuf v1.3.2 // indirect\n        github.com/google/gofuzz v1.2.0 // indirect\n        github.com/json-iterator/go v1.1.12 // indirect\n        github.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd // indirect\n        github.com/modern-go/reflect2 v1.0.2 // indirect\n        golang.org/x/net v0.17.0 // indirect\n        golang.org/x/text v0.13.0 // indirect\n        gopkg.in/inf.v0 v0.9.1 // indirect\n        gopkg.in/yaml.v2 v2.4.0 // indirect\n        k8s.io/klog/v2 v2.100.1 // indirect\n        k8s.io/utils v0.0.0-20230406110748-d93618cff8a2 // indirect\n        sigs.k8s.io/json v0.0.0-20221116044647-bc3834ca7abd // indirect\n        sigs.k8s.io/structured-merge-diff/v4 v4.2.3 // indirect\n)\n```\n\n----------------------------------------\n\nTITLE: Installing CRDs in Kubernetes Cluster\nDESCRIPTION: Command to install the Custom Resource Definitions (CRDs) for the project into the Kubernetes cluster.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/testdata/project-v4-multigroup/README.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nmake install\n```\n\n----------------------------------------\n\nTITLE: Displaying Structured CronJob Schedule in YAML (v2)\nDESCRIPTION: Demonstrates the new v2 format of the CronJob schedule field with a more structured representation.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/multiversion-tutorial/api-changes.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nschedule:\n  minute: */1\n```\n\n----------------------------------------\n\nTITLE: Sample v1 CronJob Resource Output\nDESCRIPTION: Expected YAML output when retrieving the CronJob with the v1 API version, showing how the resource is converted to the v1 schema.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/multiversion-tutorial/deployment.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n{{#include ./testdata/project/config/samples/batch_v1_cronjob.yaml}}\n```\n\n----------------------------------------\n\nTITLE: RBAC Markers for Certificate Controller\nDESCRIPTION: Generated RBAC markers for Certificate controller permissions\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/reference/using_an_external_resource.md#2025-04-21_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// +kubebuilder:rbac:groups=cert-manager.io,resources=certificates,verbs=get;list;watch;create;update;patch;delete\n// +kubebuilder:rbac:groups=cert-manager.io,resources=certificates/status,verbs=get;update;patch\n// +kubebuilder:rbac:groups=cert-manager.io,resources=certificates/finalizers,verbs=update\n```\n\n----------------------------------------\n\nTITLE: Installing Custom Resource Definitions (CRDs) in Kubernetes Cluster\nDESCRIPTION: This command installs the Custom Resource Definitions (CRDs) for the project into the Kubernetes cluster.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/multiversion-tutorial/testdata/project/README.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nmake install\n```\n\n----------------------------------------\n\nTITLE: Kubebuilder Makefile Configuration for ENVTEST\nDESCRIPTION: Sample Makefile configuration that demonstrates how to set up ENVTEST binaries using controller-runtime. It shows how to automatically use the correct Kubernetes version and location for test artifacts, with support for the new artifact location structure.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/reference/artifacts.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n## Tool Binaries\n..\nENVTEST ?= $(LOCALBIN)/setup-envtest\n...\n\n## Tool Versions\n...\n#ENVTEST_VERSION is the version of controller-runtime release branch to fetch the envtest setup script (i.e. release-0.20)\nENVTEST_VERSION ?= $(shell go list -m -f \"{{ .Version }}\" sigs.k8s.io/controller-runtime | awk -F'[v.]' '{printf \"release-%d.%d\", $$2, $$3}')\n#ENVTEST_K8S_VERSION is the version of Kubernetes to use for setting up ENVTEST binaries (i.e. 1.31)\nENVTEST_K8S_VERSION ?= $(shell go list -m -f \"{{ .Version }}\" k8s.io/api | awk -F'[v.]' '{printf \"1.%d\", $$3}')\n...\n.PHONY: setup-envtest\nsetup-envtest: envtest ## Download the binaries required for ENVTEST in the local bin directory.\n\t@echo \"Setting up envtest binaries for Kubernetes version $(ENVTEST_K8S_VERSION)...\"\n\t@$(ENVTEST) use $(ENVTEST_K8S_VERSION) --bin-dir $(LOCALBIN) -p path || { \\\n\t\techo \"Error: Failed to set up envtest binaries for version $(ENVTEST_K8S_VERSION).\"; \\\n\t\texit 1; \\\n\t}\n\n.PHONY: envtest\nenvtest: $(ENVTEST) ## Download setup-envtest locally if necessary.\n$(ENVTEST): $(LOCALBIN)\n\t$(call go-install-tool,$(ENVTEST),sigs.k8s.io/controller-runtime/tools/setup-envtest,$(ENVTEST_VERSION))\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Kind Cluster in Bash\nDESCRIPTION: Command to create a basic Kind cluster with default configuration. This is the simplest way to start a local Kubernetes cluster for development purposes.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/reference/kind.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkind create cluster\n```\n\n----------------------------------------\n\nTITLE: Deleting Sample Custom Resources from the Cluster\nDESCRIPTION: Command to delete the sample custom resources from the Kubernetes cluster as part of the uninstallation process.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/getting-started/testdata/project/README.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nkubectl delete -k config/samples/\n```\n\n----------------------------------------\n\nTITLE: Installing a Project using a YAML Bundle\nDESCRIPTION: Command to install the project using a YAML bundle from a GitHub repository.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/cronjob-tutorial/testdata/project/README.md#2025-04-21_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nkubectl apply -f https://raw.githubusercontent.com/<org>/project/<tag or branch>/dist/install.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring a Kind Cluster with YAML\nDESCRIPTION: Sample YAML configuration for a customized Kind cluster. This configuration is referenced but the actual content is included from an external file kind-config.yaml.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/reference/kind.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n{{#include ./kind-config.yaml}}\n```\n\n----------------------------------------\n\nTITLE: Creating External Type Webhook\nDESCRIPTION: Example of creating a webhook for Cert Manager's Issuer type\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/reference/using_an_external_resource.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nkubebuilder create webhook --group certmanager --version v1 --kind Issuer --defaulting --programmatic-validation --external-api-path=github.com/cert-manager/cert-manager/pkg/apis/certmanager/v1 --external-api-domain=cert-manager.io\n```\n\n----------------------------------------\n\nTITLE: Building and Pushing Docker Image for Kubernetes Project\nDESCRIPTION: This command builds a Docker image for the project and pushes it to a specified registry. The IMG variable should be set to the desired image name and tag.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/testdata/project-v4-with-plugins/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmake docker-build docker-push IMG=<some-registry>/project-v4-with-plugins:tag\n```\n\n----------------------------------------\n\nTITLE: Deploying the Controller Manager to Kubernetes Cluster\nDESCRIPTION: Command to deploy the controller manager to the Kubernetes cluster using the previously built image. This enables the controller to reconcile custom resources.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/getting-started/testdata/project/README.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nmake deploy IMG=<some-registry>/project:tag\n```\n\n----------------------------------------\n\nTITLE: Installing Custom Resource Definitions (CRDs) for Kubebuilder Project\nDESCRIPTION: Command to install the Custom Resource Definitions into the Kubernetes cluster. This must be done before deploying the controller manager.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/getting-started/testdata/project/README.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nmake install\n```\n\n----------------------------------------\n\nTITLE: Deleting Sample Resources from Kubernetes Cluster\nDESCRIPTION: Command to delete the sample Custom Resources that were previously applied to the cluster.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/testdata/project-v4-multigroup/README.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nkubectl delete -k config/samples/\n```\n\n----------------------------------------\n\nTITLE: Deploying Kubebuilder Project Manager to Kubernetes Cluster\nDESCRIPTION: This command deploys the project manager to the Kubernetes cluster using the specified image.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/multiversion-tutorial/testdata/project/README.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nmake deploy IMG=<some-registry>/project:tag\n```\n\n----------------------------------------\n\nTITLE: Setting Boolean, String, and Numeric Marker Values in Kubebuilder\nDESCRIPTION: Examples of kubebuilder markers with different value types including booleans, strings, and integers. These markers configure validation rules for custom resources.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/reference/markers.md#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// +kubebuilder:validation:ExclusiveMaximum=false\n// +kubebuilder:validation:Format=\"date-time\"\n// +kubebuilder:validation:Maximum=42\n```\n\n----------------------------------------\n\nTITLE: Creating Core Type Webhook\nDESCRIPTION: Example of creating a webhook for core Kubernetes Pod type\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/reference/using_an_external_resource.md#2025-04-21_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nkubebuilder create webhook --group core --version v1 --kind Pod --programmatic-validation\n```\n\n----------------------------------------\n\nTITLE: Applying Sample Configurations in Kubernetes\nDESCRIPTION: Command to apply sample configurations from the config/samples directory using kubectl with kustomize.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/cronjob-tutorial/testdata/project/README.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nkubectl apply -k config/samples/\n```\n\n----------------------------------------\n\nTITLE: Installing Project from YAML Bundle\nDESCRIPTION: Example command for users to install the project using the generated YAML bundle from a remote repository.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/testdata/project-v4-multigroup/README.md#2025-04-21_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nkubectl apply -f https://raw.githubusercontent.com/<org>/project-v4-multigroup/<tag or branch>/dist/install.yaml\n```\n\n----------------------------------------\n\nTITLE: Setting Up Local Kind Cluster for E2E Testing\nDESCRIPTION: Commands to create a Kind cluster and configure Calico CNI for NetworkPolicy support in local e2e testing.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/CONTRIBUTING.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# To generate an Kubebuilder local binary with your changes\nmake install\n# To create the cluster and configure a CNI which supports NetworkPolicy\nkind create cluster --config ./test/e2e/kind-config.yaml\nkubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml\n```\n\n----------------------------------------\n\nTITLE: Uninstalling CRDs from Cluster\nDESCRIPTION: Removes the Custom Resource Definitions from the Kubernetes cluster.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/testdata/project-v4/README.md#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nmake uninstall\n```\n\n----------------------------------------\n\nTITLE: Applying Sample Configurations for Kubebuilder Project\nDESCRIPTION: This command applies the sample configurations provided in the config/samples directory to create instances of the project's custom resources.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/multiversion-tutorial/testdata/project/README.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nkubectl apply -k config/samples/\n```\n\n----------------------------------------\n\nTITLE: Reconciler Construction in main.go\nDESCRIPTION: A Go code snippet showing how the reconciler would be constructed in the main.go file of the proposed structure, demonstrating how dependencies can be passed directly to the reconciler.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/designs/simplified-scaffolding.md#2025-04-21_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n// ...\nfunc main() {\n\t// ...\n\terr := (&controllers.MyReconciler{\n\t\tMySuperSpecialAppClient: doSomeThingsWithFlags(),\n\t}).SetupWithManager(mgr)\n\t// ...\n}\n```\n\n----------------------------------------\n\nTITLE: Slice Values in Markers with Curly Brace Syntax\nDESCRIPTION: Example of defining slice values in kubebuilder markers using curly braces and comma separation, suitable for complex string values.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/reference/markers.md#2025-04-21_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// +kubebuilder:webhooks:Enum={\"crackers, Gromit, we forgot the crackers!\",\"not even wensleydale?\"}\n```\n\n----------------------------------------\n\nTITLE: Applying Sample Resources\nDESCRIPTION: Creates instances of the custom resources using the sample configurations provided in the project.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/testdata/project-v4/README.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nkubectl apply -k config/samples/\n```\n\n----------------------------------------\n\nTITLE: Installing Kubebuilder Project Using YAML Bundle\nDESCRIPTION: This command demonstrates how users can install the project using the generated YAML bundle from a GitHub repository.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/multiversion-tutorial/testdata/project/README.md#2025-04-21_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nkubectl apply -f https://raw.githubusercontent.com/<org>/project/<tag or branch>/dist/install.yaml\n```\n\n----------------------------------------\n\nTITLE: Uninstalling CRDs from the Kubernetes Cluster\nDESCRIPTION: Command to remove the Custom Resource Definitions from the Kubernetes cluster as part of the uninstallation process.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/getting-started/testdata/project/README.md#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nmake uninstall\n```\n\n----------------------------------------\n\nTITLE: Undeploying the Controller from Kubernetes\nDESCRIPTION: Command to undeploy the controller from the Kubernetes cluster.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/cronjob-tutorial/testdata/project/README.md#2025-04-21_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nmake undeploy\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Custom Resource Definitions from Kubernetes\nDESCRIPTION: Command to uninstall the Custom Resource Definitions from the Kubernetes cluster.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/cronjob-tutorial/testdata/project/README.md#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nmake uninstall\n```\n\n----------------------------------------\n\nTITLE: Configuring CRD Kustomization for Kubernetes Admission Webhook\nDESCRIPTION: YAML configuration for CRD (Custom Resource Definition) kustomization in Kubernetes. This configuration is typically placed in the 'config/crd/kustomization.yaml' file.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/cronjob-tutorial/running-webhook.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n{{#include ./testdata/project/config/crd/kustomization.yaml}}\n```\n\n----------------------------------------\n\nTITLE: Initializing Kubebuilder Project\nDESCRIPTION: Commands to initialize a Kubebuilder project and create an API with a controller.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/reference/submodule-layouts.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nkubebuilder init\n```\n\nLANGUAGE: shell\nCODE:\n```\nkubebuilder create api --group operator --version v1alpha1 --kind Sample --resource --controller --make\n```\n\n----------------------------------------\n\nTITLE: Deleting Sample Instances of Kubebuilder Project\nDESCRIPTION: This command deletes the instances of custom resources created from the sample configurations.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/multiversion-tutorial/testdata/project/README.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nkubectl delete -k config/samples/\n```\n\n----------------------------------------\n\nTITLE: Building and Pushing Docker Image for Kubebuilder Project\nDESCRIPTION: This command builds a Docker image for the project and pushes it to a specified registry. The IMG variable should be set to the desired image name and tag.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/multiversion-tutorial/testdata/project/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmake docker-build docker-push IMG=<some-registry>/project:tag\n```\n\n----------------------------------------\n\nTITLE: Modifying Makefile to Disable CRD Description in Controller-Gen\nDESCRIPTION: Shell script showing how to update the Makefile to use controller-gen with maxDescLen=0 option to reduce the size of generated CRDs, which can prevent the \"Too long\" error when applying large CRDs.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/faq.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n .PHONY: manifests\n manifests: controller-gen ## Generate WebhookConfiguration, ClusterRole and CustomResourceDefinition objects.\n     # Note that the option maxDescLen=0 was added in the default scaffold in order to sort out the issue\n     # Too long: must have at most 262144 bytes. By using kubectl apply to create / update resources an annotation\n     # is created by K8s API to store the latest version of the resource ( kubectl.kubernetes.io/last-applied-configuration).\n     # However, it has a size limit and if the CRD is too big with so many long descriptions as this one it will cause the failure.\n \t$(CONTROLLER_GEN) rbac:roleName=manager-role crd:maxDescLen=0 webhook paths=\"./...\" output:crd:artifacts:config=config/crd/bases\n```\n\n----------------------------------------\n\nTITLE: Undeploying Controller from Kubernetes Cluster\nDESCRIPTION: Command to remove the controller manager deployment from the Kubernetes cluster.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/testdata/project-v4-multigroup/README.md#2025-04-21_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nmake undeploy\n```\n\n----------------------------------------\n\nTITLE: Initializing Bundle Plugin with Kustomize Support in Go\nDESCRIPTION: Example of creating a bundle plugin that combines Kustomize v2 with the Golang v4 plugin for Kubebuilder. Shows how to compose multiple plugins together for project scaffolding.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/plugins/kustomize-v2.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n...  \n   kustomizecommonv2 \"sigs.k8s.io/kubebuilder/v4/pkg/plugins/common/kustomize/v2\"\n   golangv4 \"sigs.k8s.io/kubebuilder/v4/pkg/plugins/golang/v4\"\n...\n)\n\n\t// Bundle plugin which built the golang projects scaffold by Kubebuilder go/v4\n\t// The follow code is creating a new plugin with its name and version via composition\n\t// You can define that one plugin is composite by 1 or Many others plugins\n\tgov3Bundle, _ := plugin.NewBundle(plugin.WithName(golang.DefaultNameQualifier),\n\t\tplugin.WithVersion(plugin.Version{Number: 3}),\n        plugin.WithPlugins(kustomizecommonv2.Plugin{}, golangv4.Plugin{}), // scaffold the config/ directory and all kustomize files\n\t\t// Scaffold the Golang files and all that specific for the language e.g. go.mod, apis, controllers\n\t)\n```\n\n----------------------------------------\n\nTITLE: Configuring Go Modules for Local Development\nDESCRIPTION: Shell commands to configure go modules for local development using replace directives.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/reference/submodule-layouts.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngo mod edit -require YOUR_GO_PATH/test-operator/api/v1alpha1@v0.0.0 # Only if you didn't already resolve the module\ngo mod edit -replace YOUR_GO_PATH/test-operator/api/v1alpha1@v0.0.0=./api/v1alpha1\ngo mod tidy\n```\n\n----------------------------------------\n\nTITLE: Undeploying the Controller from the Kubernetes Cluster\nDESCRIPTION: Command to remove the controller manager deployment from the Kubernetes cluster, completing the uninstallation process.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/getting-started/testdata/project/README.md#2025-04-21_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nmake undeploy\n```\n\n----------------------------------------\n\nTITLE: Displaying CronJob Schedule in YAML (v1)\nDESCRIPTION: Shows the original v1 format of the CronJob schedule field as an unstructured string.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/multiversion-tutorial/api-changes.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nschedule: \"*/1 * * * *\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Multi-group Support in Kubebuilder\nDESCRIPTION: Command to enable multi-group support in a Kubebuilder project. This is necessary if your project uses multiple API groups.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/migration/migration_guide_gov3_to_gov4.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nkubebuilder edit --multigroup=true\n```\n\n----------------------------------------\n\nTITLE: Uninstalling CRDs from Kubernetes Cluster\nDESCRIPTION: Command to remove the Custom Resource Definitions (CRDs) from the Kubernetes cluster.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/testdata/project-v4-multigroup/README.md#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nmake uninstall\n```\n\n----------------------------------------\n\nTITLE: Deleting a Kind Cluster in Bash\nDESCRIPTION: Command to delete a Kind cluster. This completely removes the Kubernetes cluster from your local environment.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/reference/kind.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkind delete cluster\n```\n\n----------------------------------------\n\nTITLE: Updating Dockerfile for Multi-Module Build\nDESCRIPTION: Modified Dockerfile to support building a project with multiple Go modules.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/reference/submodule-layouts.md#2025-04-21_snippet_5\n\nLANGUAGE: dockerfile\nCODE:\n```\n# Build the manager binary\nFROM docker.io/golang:1.20 as builder\nARG TARGETOS\nARG TARGETARCH\n\nWORKDIR /workspace\n# Copy the Go Modules manifests\nCOPY go.mod go.mod\nCOPY go.sum go.sum\n# Copy the Go Sub-Module manifests\nCOPY api/v1alpha1/go.mod api/go.mod\nCOPY api/v1alpha1/go.sum api/go.sum\n# cache deps before building and copying source so that we don't need to re-download as much\n# and so that source changes don't invalidate our downloaded layer\nRUN go mod download\n\n# Copy the go source\nCOPY cmd/main.go cmd/main.go\nCOPY api/ api/\nCOPY internal/controller/ internal/controller/\n\n# Build\n# the GOARCH has not a default value to allow the binary be built according to the host where the command\n# was called. For example, if we call make docker-build in a local env which has the Apple Silicon M1 SO\n# the docker BUILDPLATFORM arg will be linux/arm64 when for Apple x86 it will be linux/amd64. Therefore,\n# by leaving it empty we can ensure that the container and binary shipped on it will have the same platform.\nRUN CGO_ENABLED=0 GOOS=${TARGETOS:-linux} GOARCH=${TARGETARCH} go build -a -o manager cmd/main.go\n\n# Use distroless as minimal base image to package the manager binary\n# Refer to https://github.com/GoogleContainerTools/distroless for more details\nFROM gcr.io/distroless/static:nonroot\nWORKDIR /\nCOPY --from=builder /workspace/manager .\nUSER 65532:65532\n\nENTRYPOINT [\"/manager\"]\n```\n\n----------------------------------------\n\nTITLE: Building Installer for Kubebuilder Project\nDESCRIPTION: This command builds an installer YAML file for the project, which includes all necessary resources for installation.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/multiversion-tutorial/testdata/project/README.md#2025-04-21_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nmake build-installer IMG=<some-registry>/project:tag\n```\n\n----------------------------------------\n\nTITLE: Cloning Kubebuilder Repository\nDESCRIPTION: Command to clone the Kubebuilder repository into the correct GOPATH directory structure for local development.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ git clone git@github.com:<user>/kubebuilder.git $GOPATH/src/sigs.k8s.io/kubebuilder\n```\n\n----------------------------------------\n\nTITLE: Enabling Fish Shell Autocompletion for Kubebuilder\nDESCRIPTION: Command for Fish shell that sources the Kubebuilder completion script directly into the current shell session, enabling autocompletion for Kubebuilder commands.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/reference/completion.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nsource (kubebuilder completion fish | psub)\n```\n\n----------------------------------------\n\nTITLE: Installing Helm Chart with CRDs Enabled\nDESCRIPTION: Helm command to install or upgrade a release with CRDs enabled using a value from values.yaml.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/designs/helm-chart-autogenerate-plugin.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nhelm install|upgrade \\\n  myrelease \\\n  --namespace my-namespace \\\n  --set crds.enabled=true\n```\n\n----------------------------------------\n\nTITLE: Initializing Kubebuilder Project with Kube-RBAC-Proxy Plugin\nDESCRIPTION: Example command to initialize or edit a Kubebuilder project with the kube-rbac-proxy plugin, assuming it becomes available under the Kubernetes umbrella.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/designs/discontinue_usage_of_kube_rbac_proxy.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nkubebuilder init|edit --plugins=\"kube-rbac-proxy/v1\"\n```\n\n----------------------------------------\n\nTITLE: Executing KubeBuilder Commands Programmatically in Go\nDESCRIPTION: Sample Go code showing how to execute KubeBuilder binary commands programmatically, which would be used in the implementation of the re-scaffolding feature.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/designs/helper_to_upgrade_projects_by_rescaffolding.md#2025-04-21_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ncmd := exec.Command(t.BinaryName, Options)\n_, err := t.Run(cmd)\n```\n\n----------------------------------------\n\nTITLE: Upgrading a Kubebuilder Project with Custom Input and Output Directories\nDESCRIPTION: Command to upgrade a Kubebuilder project scaffold with specified input and output directories. The input-dir parameter points to the existing project, while output-dir specifies where the new project should be generated.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/reference/rescaffold.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nkubebuilder alpha generate --input-dir=/path/to/existing/project --output-dir=/path/to/new/project\n```\n\n----------------------------------------\n\nTITLE: Building an Installer Bundle for Kubernetes Deployment\nDESCRIPTION: Command to build an installer bundle with all necessary YAML files for deployment.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/cronjob-tutorial/testdata/project/README.md#2025-04-21_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nmake build-installer IMG=<some-registry>/project:tag\n```\n\n----------------------------------------\n\nTITLE: Initializing Grafana Plugin Commands in Shell\nDESCRIPTION: Shell commands to initialize a new project with the Grafana plugin or enable it in an existing project. Creates dashboard JSON files under the grafana directory.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/plugins/available/grafana-v1-alpha.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# Initialize a new project with grafana plugin\nkubebuilder init --plugins grafana.kubebuilder.io/v1-alpha\n\n# Enable grafana plugin to an existing project\nkubebuilder edit --plugins grafana.kubebuilder.io/v1-alpha\n```\n\n----------------------------------------\n\nTITLE: Go Module Example in go.mod File\nDESCRIPTION: Example of the module declaration in a go.mod file. This shows what the module definition looks like after initialization.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/migration/migration_guide_gov3_to_gov4.md#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nmodule tutorial.kubebuilder.io/migration-project\n```\n\n----------------------------------------\n\nTITLE: Reference Path for Manager Auth Proxy Configuration in Kubebuilder\nDESCRIPTION: Configuration file path that needs to be updated when changing the image registry location for kube-rbac-proxy in Kubebuilder projects.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/designs/discontinue_usage_of_kube_rbac_proxy.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nconfig/default/manager_auth_proxy_patch.yaml\n```\n\n----------------------------------------\n\nTITLE: Project Configuration File Example for Deploy Image Plugin\nDESCRIPTION: YAML example showing how the PROJECT file tracks configuration information after using the Deploy Image plugin. This demonstrates how plugin-specific data is stored in a structured format for future reference and project management.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/plugins/extending/extending_cli_features_and_plugins.md#2025-04-21_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n...\nplugins:\n  deploy-image.go.kubebuilder.io/v1-alpha:\n    resources:\n    - domain: testproject.org\n      group: example.com\n      kind: Memcached\n      options:\n        containerCommand: memcached,--memory-limit=64,-o,modern,-v\n        containerPort: \"11211\"\n        image: memcached:memcached:1.6.26-alpine3.19\n        runAsUser: \"1001\"\n      version: v1alpha1\n    - domain: testproject.org\n      group: example.com\n      kind: Busybox\n      options:\n        image: busybox:1.36.1\n      version: v1alpha1\n...\n```\n\n----------------------------------------\n\nTITLE: Inspecting Image Manifest for Supported Platforms using Docker\nDESCRIPTION: This shell command uses docker manifest inspect to view the supported platforms for a given image. It shows the manifest list with details for each supported architecture and operating system.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/reference/platform.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ docker manifest inspect myregistry/example/myimage:v0.0.1\n```\n\n----------------------------------------\n\nTITLE: Building Installer for Project Distribution\nDESCRIPTION: This command builds an installer for the project, generating an install.yaml file in the dist directory containing all necessary resources.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/testdata/project-v4-with-plugins/README.md#2025-04-21_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nmake build-installer IMG=<some-registry>/project-v4-with-plugins:tag\n```\n\n----------------------------------------\n\nTITLE: Deleting Custom Resource Instances\nDESCRIPTION: Removes the custom resource instances that were created using the sample configurations.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/testdata/project-v4/README.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nkubectl delete -k config/samples/\n```\n\n----------------------------------------\n\nTITLE: Creating Project Directory for Migration\nDESCRIPTION: Commands to create a new directory for the migration project and navigate to it. This is the first step in creating a new go/v4 project.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/migration/migration_guide_gov3_to_gov4.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ mkdir migration-project-name\n$ cd migration-project-name\n```\n\n----------------------------------------\n\nTITLE: Initializing Kubebuilder with External Plugin (Shell)\nDESCRIPTION: Example command to initialize Kubebuilder with an external plugin. This command specifies the plugin name and domain for project initialization.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/designs/extensible-cli-and-scaffolding-plugins-phase-2.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nkubebuilder init --plugins=myexternalplugin/v1 --domain example.com\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Custom Resource Definitions (CRDs) from Kubernetes Cluster\nDESCRIPTION: This command removes the Custom Resource Definitions (CRDs) for the project from the Kubernetes cluster.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/multiversion-tutorial/testdata/project/README.md#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nmake uninstall\n```\n\n----------------------------------------\n\nTITLE: Checking CronJob Status\nDESCRIPTION: Retrieves the status of the created CronJob and related jobs.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/cronjob-tutorial/running.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get cronjob.batch.tutorial.kubebuilder.io -o yaml\nkubectl get job\n```\n\n----------------------------------------\n\nTITLE: Go Template Example for Kubebuilder Scaffolding\nDESCRIPTION: The embedded Go template code for scaffolding Go module files in Kubebuilder. This shows how templates are defined and used in the Go/v4 plugin for generating project files.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/plugins/extending/extending_cli_features_and_plugins.md#2025-04-21_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n{{#include ./../../../../../pkg/plugins/golang/v4/scaffolds/internal/templates/gomod.go}}\n```\n\n----------------------------------------\n\nTITLE: Building Installer Bundle for Project Distribution\nDESCRIPTION: Command to build an installer YAML bundle that contains all resources needed to install the project. The bundle will be generated in the dist directory.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/testdata/project-v4-multigroup/README.md#2025-04-21_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nmake build-installer IMG=<some-registry>/project-v4-multigroup:tag\n```\n\n----------------------------------------\n\nTITLE: Deleting Instances from Kubernetes Cluster\nDESCRIPTION: This command deletes the instances (Custom Resources) of the solution from the Kubernetes cluster.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/testdata/project-v4-with-plugins/README.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nkubectl delete -k config/samples/\n```\n\n----------------------------------------\n\nTITLE: Announcing Release Message in Slack\nDESCRIPTION: Template for announcing new Kubebuilder releases in the Slack channel with version and release information.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/RELEASE.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n:announce: Kubebuilder v3.5.0 has been released!\nThis release includes a Kubernetes dependency bump to v1.24.\nFor more info, see the release page: https://github.com/kubernetes-sigs/kubebuilder/releases/tag/v3.5.0\n :tada:  Thanks to all our contributors!\n```\n\n----------------------------------------\n\nTITLE: Sample v2 CronJob Resource Output\nDESCRIPTION: Expected YAML output when retrieving the CronJob with the v2 API version, showing the resource as it appears in the v2 schema.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/multiversion-tutorial/deployment.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n{{#include ./testdata/project/config/samples/batch_v2_cronjob.yaml}}\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions PR Verification Workflow\nDESCRIPTION: YAML configuration for GitHub Actions workflow that verifies PR contents using kubebuilder-release-tools.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/RELEASE.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nverify:\n  name: Verify PR contents\n  runs-on: ubuntu-latest\n  steps:\n  - name: Verifier action\n    id: verifier\n    uses: kubernetes-sigs/kubebuilder-release-tools@v0.1.1\n    with:\n      github_token: ${{ secrets.GITHUB_TOKEN }}\n```\n\n----------------------------------------\n\nTITLE: Displaying API Files Structure with tree\nDESCRIPTION: A shell command showing the structure of the API files in the current Kubebuilder implementation, highlighting the proliferation of files for even simple API definitions.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/designs/simplified-scaffolding.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ ./test/project/pkg/apis\n├── addtoscheme_creatures_v2alpha1.go\n├── apis.go\n├── creatures\n│   ├── group.go\n│   └── v2alpha1\n│       ├── doc.go\n│       ├── kraken_types.go\n│       ├── kraken_types_test.go\n│       ├── register.go\n│       ├── v2alpha1_suite_test.go\n│       └── zz_generated.deepcopy.go\n...\n```\n\n----------------------------------------\n\nTITLE: Including Markdown Files in Kubebuilder Plugin Documentation\nDESCRIPTION: This snippet demonstrates the use of markdown include directives to incorporate content from separate files into the main documentation. It references files for scaffolding projects, adding optional features, and extending the project.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/plugins/available-plugins.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{{#include to-scaffold-project.md }}\n{{#include to-add-optional-features.md }}\n{{#include to-be-extended.md }}\n```\n\n----------------------------------------\n\nTITLE: Installing Project Using YAML Bundle\nDESCRIPTION: This command demonstrates how users can install the project using the generated YAML bundle from a remote repository.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/testdata/project-v4-with-plugins/README.md#2025-04-21_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nkubectl apply -f https://raw.githubusercontent.com/<org>/project-v4-with-plugins/<tag or branch>/dist/install.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring Go Workspace for Multi-Module Project\nDESCRIPTION: Commands to set up a Go workspace for a multi-module project.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/reference/submodule-layouts.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngo work init\ngo work use . # This includes the main module with the controller\ngo work use api/v1alpha1 # This is the API submodule\ngo work sync\n```\n\n----------------------------------------\n\nTITLE: Building Installer Bundle for Kubernetes Project\nDESCRIPTION: Command to generate a bundle with all manifests for a Kubernetes project. This creates an installer that can be used without Helm.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/plugins/available/helm-v1-alpha.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake build-installer IMG=<some-registry>/<project-name:tag>\n```\n\n----------------------------------------\n\nTITLE: Plugin Directory Structure\nDESCRIPTION: Shows the expected directory structure for implementing the HelmChart plugin\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/designs/helm-chart-autogenerate-plugin.md#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n.\n├── helm-chart\n│   └── v1alpha1\n│       ├── init.go\n│       ├── edit.go\n│       ├── plugin.go\n│       └── scaffolds\n│           ├── init.go\n│           ├── edit.go\n│           └── internal\n│               └── templates\n```\n\n----------------------------------------\n\nTITLE: Defining Bundle Interface in Go for Kubebuilder Plugin System\nDESCRIPTION: This snippet defines the Bundle interface, which extends the Plugin interface and provides a method to return a list of wrapped plugins. This interface is crucial for implementing the plugin bundle concept in Kubebuilder.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/designs/extensible-cli-and-scaffolding-plugins-phase-1-5.md#2025-04-21_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ntype Bundle interface {\n\tPlugin\n\tPlugins() []Plugin\n}\n```\n\n----------------------------------------\n\nTITLE: Simplified Slice Values in Markers with Semicolon Syntax\nDESCRIPTION: Example of defining simple slice values in kubebuilder markers using semicolon separation, suitable for single-word strings.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/reference/markers.md#2025-04-21_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n// +kubebuilder:validation:Enum=Wallace;Gromit;Chicken\n```\n\n----------------------------------------\n\nTITLE: Changing Default Shell to Installed Bash\nDESCRIPTION: Command to change the current user's default shell to the newly installed Bash located at /usr/local/bin/bash.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/reference/completion.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nchsh -s /usr/local/bin/bash\n```\n\n----------------------------------------\n\nTITLE: Applying Installer YAML Bundle\nDESCRIPTION: Installs the operator using the generated YAML bundle from a remote source.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/testdata/project-v4/README.md#2025-04-21_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nkubectl apply -f https://raw.githubusercontent.com/<org>/project-v4/<tag or branch>/dist/install.yaml\n```\n\n----------------------------------------\n\nTITLE: Undeploying Controller from Kubernetes Cluster\nDESCRIPTION: This command undeploys the controller from the Kubernetes cluster.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/testdata/project-v4-with-plugins/README.md#2025-04-21_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nmake undeploy\n```\n\n----------------------------------------\n\nTITLE: Force Flag Implementation in Go\nDESCRIPTION: Implementation example for handling the --force flag in template generation\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/designs/helm-chart-autogenerate-plugin.md#2025-04-21_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nif f.Force {\n    f.IfExistsAction = machinery.OverwriteFile\n} else {\n    f.IfExistsAction = machinery.Error\n}\n```\n\n----------------------------------------\n\nTITLE: Plugin Response JSON Structure (JSON)\nDESCRIPTION: JSON structure for the PluginResponse sent from the external plugin back to Kubebuilder. It includes the command and a universe object containing file contents.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/designs/extensible-cli-and-scaffolding-plugins-phase-2.md#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"command\": \"init\",\n  \"universe\": {\n    \"LICENSE\": \"Apache 2.0 License\\n\",\n    \"main.py\": \"...\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Manager Environment Variables in YAML\nDESCRIPTION: Adds environment variable configuration to the manager manifest to store the container image reference\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/designs/code-generate-image-plugin.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n    spec:\n      containers:\n        - name: manager\n          env:\n            - name: {{ resource}}-IMAGE\n              value: {{image:tag}}\n          image: controller:latest\n```\n\n----------------------------------------\n\nTITLE: Linking to CRD Generation Examples in Markdown\nDESCRIPTION: This snippet provides a link to examples of generating CRDs in Kubebuilder, offering practical guidance for implementation.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/reference/markers/crd.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[Generating CRDs](../generating-crd.md)\n```\n\n----------------------------------------\n\nTITLE: Generating Helm Chart for Project\nDESCRIPTION: This command generates a Helm chart for the project using the optional helm plugin in Kubebuilder.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/testdata/project-v4-with-plugins/README.md#2025-04-21_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nkubebuilder edit --plugins=helm/v1-alpha\n```\n\n----------------------------------------\n\nTITLE: Adding Bash Path to Shells Configuration\nDESCRIPTION: Command to add the Bash path to the /etc/shells file, which is necessary for using the installed Bash as a login shell.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/reference/completion.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\necho \"/usr/local/bin/bash\" > /etc/shells\n```\n\n----------------------------------------\n\nTITLE: Annotating Plugin-Scoped PRs in Kubebuilder\nDESCRIPTION: Example showing the proper format for annotating plugin-scoped PRs in Kubebuilder. PRs should include an emoji indicating the type of change and optionally the plugin scope in parentheses.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/CONTRIBUTING.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n🐛 (kustomize/v2-alpha): Fix typo issue in the labels added to the manifests\n```\n\n----------------------------------------\n\nTITLE: Combining Kustomize with Base Go Plugin via CLI\nDESCRIPTION: Shell command showing how to initialize a Kubebuilder project with both the Kustomize v2 plugin and the base Go v4 plugin. This provides the same scaffold as the go/v4 plugin but with explicit composition control.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/plugins/available/kustomize-v2.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n# Provides the same scaffold of go/v4 plugin which is composition but with kustomize/v2\nkubebuilder init --plugins=kustomize/v2,base.go.kubebuilder.io/v4 --domain example.org --repo example.org/guestbook-operator\n```\n\n----------------------------------------\n\nTITLE: Project File Plugin Configuration in YAML\nDESCRIPTION: Example of how the HelmChart plugin should be tracked in the PROJECT file with optional flags and values.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/designs/helm-chart-autogenerate-plugin.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n...\nplugins:\n  helm.go.kubebuilder.io/v1-alpha:\n    options: ## (If ANY)\n      <flag/key>: <value>\n```\n\n----------------------------------------\n\nTITLE: Webhook Configuration Marker Documentation Header\nDESCRIPTION: Markdown header introducing webhook marker documentation for Kubebuilder projects. Links to webhook overview documentation and explains the purpose of keeping webhook descriptions close to implementation code.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/reference/markers/webhook.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Webhook\\n\\nThese markers describe how [webhook configuration](../webhook-overview.md) is generated.\\nUse these to keep the description of your webhooks close to the code that\\nimplements them.\\n\\n{{#markerdocs Webhook}}\n```\n\n----------------------------------------\n\nTITLE: Generating a Helm Chart for Project Distribution\nDESCRIPTION: Command to generate a Helm chart for the project using the Kubebuilder Helm plugin. This creates a chart under the dist/chart directory for distribution.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/getting-started/testdata/project/README.md#2025-04-21_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nkubebuilder edit --plugins=helm/v1-alpha\n```\n\n----------------------------------------\n\nTITLE: Initializing Go Module for New Project\nDESCRIPTION: Command to initialize a new Go module for the migration project. This is recommended even if working inside GOPATH.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/migration/migration_guide_gov3_to_gov4.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngo mod init tutorial.kubebuilder.io/migration-project\n```\n\n----------------------------------------\n\nTITLE: Initializing Kubebuilder Project with Helm Chart Plugin\nDESCRIPTION: Command to initialize a Kubebuilder project with the proposed Helm chart plugin enabled.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/designs/helm-chart-autogenerate-plugin.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nkubebuilder init --plugins=go/v4,helm/v1-alpha\n```\n\n----------------------------------------\n\nTITLE: Proposed Simplified Project Structure with tree\nDESCRIPTION: A shell command displaying the proposed simplified project structure, which reduces the complexity and file count while maintaining necessary organization.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/designs/simplified-scaffolding.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ tree ./test/project\n./test/project\n├── main.go\n├── controller\n│   ├── mykind_controller.go\n│   ├── mykind_controller_test.go\n│   └── controllers_suite_test.go\n├── api\n│   └── v1\n│       └── mykind_types.go\n│       └── groupversion_info.go\n└── vendor\n```\n\n----------------------------------------\n\nTITLE: Project Domain Configuration in PROJECT File\nDESCRIPTION: Example of the domain configuration in the PROJECT file. This shows how to identify the domain of your Kubebuilder project.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/migration/migration_guide_gov3_to_gov4.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n...\ndomain: tutorial.kubebuilder.io\n...\n```\n\n----------------------------------------\n\nTITLE: Moving Webhooks to Group Directory in Kubebuilder\nDESCRIPTION: Bash commands for creating a group-specific directory for webhooks and moving existing webhook files to the new location.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/migration/multi-group.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmkdir internal/webhook/batch\nmv internal/webhook/* internal/webhook/batch/\n```\n\n----------------------------------------\n\nTITLE: Generating Helm Chart for Project Distribution\nDESCRIPTION: Command to generate a Helm chart for the project using the Kubebuilder Helm plugin. The chart will be generated in the dist/chart directory.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/testdata/project-v4-multigroup/README.md#2025-04-21_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nkubebuilder edit --plugins=helm/v1-alpha\n```\n\n----------------------------------------\n\nTITLE: Displaying New Project Directory Structure in Shell\nDESCRIPTION: Shows the new directory structure after migrating to go/v4, including the cmd, internal, and api directories.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/migration/manually_migration_guide_gov3_to_gov4.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n...\n├── cmd\n│ └── main.go\n├── internal\n│ └── controller\n└── api\n```\n\n----------------------------------------\n\nTITLE: Defining RBAC Permissions with Kubebuilder Markers\nDESCRIPTION: RBAC permission marker for managing Deployment resources in the cluster\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/designs/code-generate-image-plugin.md#2025-04-21_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// +kubebuilder:rbac:groups=apps,resources=deployments,verbs=get;list;watch;create;update;patch;delete\n```\n\n----------------------------------------\n\nTITLE: Executing Kubebuilder v0 Workflow in Bash\nDESCRIPTION: This snippet demonstrates the command sequence for initializing a project, creating resources, building, and deploying using Kubebuilder v0. It includes steps for generating code, building Docker images, and applying Kubernetes configurations.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/kubebuilder_v0_v1_difference.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubebuilder init --domain example.com\nkubebuilder create resource --group <group> --version <version> --kind <Kind>\nGOBIN=${PWD}/bin go install ${PWD#$GOPATH/src/}/cmd/controller-manager\nbin/controller-manager --kubeconfig ~/.kube/config\n\nkubectl apply -f hack/sample/<resource>.yaml\ndocker build -f Dockerfile.controller . -t <image:tag>\ndocker push <image:tag>\nkubebuilder create config --controller-image <image:tag> --name <project-name>\nkubectl apply -f hack/install.yaml\n```\n\n----------------------------------------\n\nTITLE: Updating CRD Directory Path in Go Test Suite\nDESCRIPTION: Updates the CRDDirectoryPaths in the controller test suite to reflect the new directory structure.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/migration/manually_migration_guide_gov3_to_gov4.md#2025-04-21_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nCRDDirectoryPaths:     []string{filepath.Join(\"..\", \"..\", \"config\", \"crd\", \"bases\")},\n```\n\n----------------------------------------\n\nTITLE: Including SVG Architecture Diagram in Markdown\nDESCRIPTION: Uses an HTML comment and template syntax to include an SVG diagram inline. The include directive references 'kb_concept_diagram.svg' file and allows for styling and variable matching within the document.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/architecture.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- include these inline so we can style an match variables -->\n{{#include ./kb_concept_diagram.svg}}\n```\n\n----------------------------------------\n\nTITLE: Generating Helm Chart for Kubebuilder Project\nDESCRIPTION: This command generates a Helm chart for the project using the Helm plugin for Kubebuilder.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/multiversion-tutorial/testdata/project/README.md#2025-04-21_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nkubebuilder edit --plugins=helm/v1-alpha\n```\n\n----------------------------------------\n\nTITLE: Running Kubebuilder Demo Automatically\nDESCRIPTION: Instructions for quickly setting up and running the Kubebuilder demo in automatic mode. It creates a temporary directory, navigates to it, and executes the demo script with auto-run enabled.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/scripts/demo/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmkdir /tmp/kb-demo\ncd /tmp/kb-demo\nDEMO_AUTO_RUN=1 ./run.sh\n\n```\n\n----------------------------------------\n\nTITLE: Removing Replace Directive for Release\nDESCRIPTION: Commands to remove the replace directive before releasing the controller module.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/reference/submodule-layouts.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngo mod edit -dropreplace YOUR_GO_PATH/test-operator/api/v1alpha1\ngo mod tidy\n```\n\n----------------------------------------\n\nTITLE: Executing Kubebuilder v1 Workflow in Bash\nDESCRIPTION: This snippet shows the simplified command sequence for initializing a project, creating APIs, and running the controller using Kubebuilder v1. It demonstrates the streamlined workflow and reduced need for manual code generation.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/kubebuilder_v0_v1_difference.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubebuilder init --domain example.com --license apache2 --owner \"The Kubernetes authors\"\nkubebuilder create api --group ship --version v1beta1 --kind Frigate\nmake install\nmake run\n```\n\n----------------------------------------\n\nTITLE: Undeploying the Operator Controller\nDESCRIPTION: Removes the operator controller deployment from the Kubernetes cluster.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/testdata/project-v4/README.md#2025-04-21_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nmake undeploy\n```\n\n----------------------------------------\n\nTITLE: Setting environment variable for local development\nDESCRIPTION: Command to set the required environment variable when running the controller locally with 'make run'. This ensures the controller can access the image information.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/plugins/available/deploy-image-plugin-v1-alpha.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nexport MEMCACHED_IMAGE=\"memcached:1.4.36-alpine\"\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Header for Kubebuilder Project\nDESCRIPTION: Standard copyright and license notice for Kubebuilder project files. It specifies that the code is licensed under Apache License 2.0, allowing users to use the code under certain conditions while maintaining copyright attribution.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/testdata/project-v4-multigroup/hack/boilerplate.go.txt#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n/*\nCopyright 2025 The Kubernetes authors.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n```\n\n----------------------------------------\n\nTITLE: Plugin Request JSON Structure (JSON)\nDESCRIPTION: JSON structure for the PluginRequest sent from Kubebuilder to the external plugin. It includes the command, arguments, and an empty universe object.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/designs/extensible-cli-and-scaffolding-plugins-phase-2.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"command\":\"init\",\n  \"args\":[\"--domain\",\"example.com\"],\n  \"universe\":{}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Hub Interface for ExternalJob in Go\nDESCRIPTION: Shows how to implement the Hub interface for the storage version (ExternalJob v3) by adding an empty Hub method.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/designs/crd_version_conversion.md#2025-04-21_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\npackage v3\nfunc (ej *ExternalJob) Hub() {}\n```\n\n----------------------------------------\n\nTITLE: Apache 2.0 License Header Implementation for Kubernetes\nDESCRIPTION: Standard copyright notice and Apache 2.0 license header block used in Kubernetes source files. Includes copyright year 2025 and reference to Kubernetes authors.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/testdata/project-v4-with-plugins/hack/boilerplate.go.txt#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n/*\nCopyright 2025 The Kubernetes authors.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n```\n\n----------------------------------------\n\nTITLE: Image Registry Path Migration Examples\nDESCRIPTION: Example image registry paths showing the transition from GCR to registry.k8s.io for kube-rbac-proxy images.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/designs/discontinue_usage_of_kube_rbac_proxy.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ngcr.io/k8s-staging-kubebuilder/kube-rbac-proxy\nregistry.k8s.io/kubebuilder/kube-rbac-proxy\n```\n\n----------------------------------------\n\nTITLE: Apache 2.0 License Header for Kubernetes\nDESCRIPTION: Standard copyright and Apache License 2.0 header used in Kubernetes projects. Includes copyright notice for Kubernetes authors and reference to the full license terms.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/getting-started/testdata/project/hack/boilerplate.go.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n/*\nCopyright 2025 The Kubernetes authors.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n```\n\n----------------------------------------\n\nTITLE: Adding Out-of-Date Notice to Design Documents in Markdown\nDESCRIPTION: Example of how to mark a design document as out-of-date by adding an explanatory notice with a reference to relevant issues. This demonstrates the proper format for indicating obsolete design documentation.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/designs/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Out of Date\n\nThis change is out of date.  It turns out curly braces are frustrating to\ntype, so we had to abandon functions entirely, and have users specify\ncustom functionality using strings of Common LISP instead.  See #000 for\nmore information.\n```\n\n----------------------------------------\n\nTITLE: Applying Predicates in Watches Method of a Kubebuilder Controller in Go\nDESCRIPTION: This snippet demonstrates how to apply the defined predicate in the Watches() method of the BackupBusyboxReconciler. It sets up the controller to watch both the BackupBusybox primary resource and the Busybox resource, using the predicate to filter events.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/reference/watching-resources/predicates-with-watch.md#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// SetupWithManager sets up the controller with the Manager.\n// The controller will watch both the BackupBusybox primary resource and the Busybox resource, using predicates.\nfunc (r *BackupBusyboxReconciler) SetupWithManager(mgr ctrl.Manager) error {\n    return ctrl.NewControllerManagedBy(mgr).\n        For(&examplecomv1alpha1.BackupBusybox{}).  // Watch the primary resource (BackupBusybox)\n        Watches(\n            &source.Kind{Type: &examplecomv1alpha1.Busybox{}},  // Watch the Busybox CR\n            handler.EnqueueRequestsFromMapFunc(func(ctx context.Context, obj client.Object) []reconcile.Request {\n                return []reconcile.Request{\n                    {\n                        NamespacedName: types.NamespacedName{\n                            Name:      \"backupbusybox\",  // Reconcile the associated BackupBusybox resource\n                            Namespace: obj.GetNamespace(),  // Use the namespace of the changed Busybox\n                        },\n                    },\n                }\n            }),\n            builder.WithPredicates(updatePred),  // Apply the predicate\n        ).  // Trigger reconciliation when the Busybox resource changes (if it meets predicate conditions)\n        Complete(r)\n}\n```\n\n----------------------------------------\n\nTITLE: Recording Kubebuilder Demo as Terminal Animation\nDESCRIPTION: Comprehensive steps for creating a recorded demo of Kubebuilder, using asciinema to capture the terminal session and svg-term to convert it to an SVG animation. Includes setup, recording control, and post-processing instructions.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/scripts/demo/README.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n# Create temporary directory\nmkdir /tmp/kb-demo\ncd /tmp/kb-demo\n\nasciinema rec\n<path-to-KB-repo>/scripts/demo/run.sh\n\n# After each step, press <Enter> to proceed to the next step\n\n<CTRL-C> to terminate the script\n<CTRL-D> to terminate the asciinema recording\n<CTRL-C> to save the recording locally\n\n# Edit the recorded file by editing the controller-gen path\n# Once you are happy with the recording, use svg-term program to generate the svg\n\nsvg-term --in=<cast-file-path> --out demo.svg --window\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Header for Kubernetes Kubebuilder\nDESCRIPTION: The standard copyright and license notice that appears at the top of source files in the Kubebuilder project. It indicates that the code is copyright of The Kubernetes authors and is licensed under Apache License 2.0.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/multiversion-tutorial/testdata/project/hack/boilerplate.go.txt#2025-04-21_snippet_0\n\nLANGUAGE: plain\nCODE:\n```\n/*\nCopyright 2025 The Kubernetes authors.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n```\n\n----------------------------------------\n\nTITLE: RBAC Markers Reference for Kubebuilder\nDESCRIPTION: Placeholder for the RBAC marker documentation that will be generated by the {{#markerdocs RBAC}} template directive. This section will be replaced with detailed information about available RBAC markers and their usage.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/reference/markers/rbac.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{{#markerdocs RBAC}}\n```\n\n----------------------------------------\n\nTITLE: Import Section with Scaffold Marker in Go\nDESCRIPTION: Example of how imports are managed using the +kubebuilder:scaffold:imports marker in main.go\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/reference/markers/scaffold.md#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"crypto/tls\"\n    \"flag\"\n    \"os\"\n\n    // Import all Kubernetes client auth plugins (e.g. Azure, GCP, OIDC, etc.)\n    // to ensure that exec-entrypoint and run can make use of them.\n    _ \"k8s.io/client-go/plugin/pkg/client/auth\"\n    ...\n    crewv1 \"sigs.k8s.io/kubebuilder/testdata/project-v4/api/v1\"\n    // +kubebuilder:scaffold:imports\n)\n```\n\n----------------------------------------\n\nTITLE: Updating Makefile Build and Run Targets\nDESCRIPTION: Modifies the Makefile to use the new cmd/main.go location for building and running the manager.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/migration/manually_migration_guide_gov3_to_gov4.md#2025-04-21_snippet_3\n\nLANGUAGE: makefile\nCODE:\n```\n.PHONY: build\nbuild: manifests generate fmt vet ## Build manager binary.\n\tgo build -o bin/manager cmd/main.go\n\n.PHONY: run\nrun: manifests generate fmt vet ## Run a controller from your host.\n\tgo run ./cmd/main.go\n```\n\n----------------------------------------\n\nTITLE: Defining Group-Version Metadata in Kubebuilder Go API\nDESCRIPTION: Contains common metadata for a Kubernetes API group-version, including the package definition, group name, version, and SchemeBuilder configuration for the API resources.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/cronjob-tutorial/other-api-files.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n./testdata/project/api/v1/groupversion_info.go\n```\n\n----------------------------------------\n\nTITLE: Including CRD Marker Documentation in Markdown\nDESCRIPTION: This snippet uses a custom syntax to include documentation for CRD markers, likely processed by a documentation generation tool specific to the Kubebuilder project.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/reference/markers/crd.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n{{#markerdocs CRD}}\n```\n\n----------------------------------------\n\nTITLE: Scheme Registration with Scaffold Marker in Go\nDESCRIPTION: Example of how new API schemes are registered using the +kubebuilder:scaffold:scheme marker\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/reference/markers/scaffold.md#2025-04-21_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc init() {\n    ...\n    utilruntime.Must(crewv1.AddToScheme(scheme))\n    // +kubebuilder:scaffold:scheme\n}\n```\n\n----------------------------------------\n\nTITLE: Undeploying Kubebuilder Project Controller from Kubernetes Cluster\nDESCRIPTION: This command removes the project controller deployment from the Kubernetes cluster.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/multiversion-tutorial/testdata/project/README.md#2025-04-21_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nmake undeploy\n```\n\n----------------------------------------\n\nTITLE: Deleting Sample Configurations from Kubernetes\nDESCRIPTION: Command to delete the sample configurations previously applied to the Kubernetes cluster.\nSOURCE: https://github.com/kubernetes-sigs/kubebuilder/blob/master/docs/book/src/cronjob-tutorial/testdata/project/README.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nkubectl delete -k config/samples/\n```"
  }
]