[
  {
    "owner": "node-formidable",
    "repo": "formidable",
    "content": "TITLE: Parsing File Uploads with Node.js HTTP Module\nDESCRIPTION: Example demonstrating how to parse incoming file uploads using formidable with Node.js's built-in HTTP module. The code creates a server that handles POST requests to '/api/upload', parses form data including file uploads, and returns the parsed fields and files as JSON.\nSOURCE: https://github.com/node-formidable/formidable/blob/master/README.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport http from 'node:http';\nimport formidable, {errors as formidableErrors} from 'formidable';\n\nconst server = http.createServer(async (req, res) => {\n  if (req.url === '/api/upload' && req.method.toLowerCase() === 'post') {\n    // parse a file upload\n    const form = formidable({});\n    let fields;\n    let files;\n    try {\n        [fields, files] = await form.parse(req);\n    } catch (err) {\n        // example to check for a very specific error\n        if (err.code === formidableErrors.maxFieldsExceeded) {\n\n        }\n        console.error(err);\n        res.writeHead(err.httpCode || 400, { 'Content-Type': 'text/plain' });\n        res.end(String(err));\n        return;\n    }\n    res.writeHead(200, { 'Content-Type': 'application/json' });\n    res.end(JSON.stringify({ fields, files }, null, 2));\n    return;\n  }\n\n  // show a file upload form\n  res.writeHead(200, { 'Content-Type': 'text/html' });\n  res.end(`\n    <h2>With Node.js <code>\"http\"</code> module</h2>\n    <form action=\"/api/upload\" enctype=\"multipart/form-data\" method=\"post\">\n      <div>Text field title: <input type=\"text\" name=\"title\" /></div>\n      <div>File: <input type=\"file\" name=\"multipleFiles\" multiple=\"multiple\" /></div>\n      <input type=\"submit\" value=\"Upload\" />\n    </form>\n  `);\n});\n\nserver.listen(8080, () => {\n  console.log('Server listening on http://localhost:8080/ ...');\n});\n```\n\n----------------------------------------\n\nTITLE: Using Formidable with Express.js\nDESCRIPTION: Example showing how to integrate formidable with Express.js to handle file uploads. It creates routes for displaying a form and processing uploads without requiring additional Express middleware.\nSOURCE: https://github.com/node-formidable/formidable/blob/master/README.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport express from 'express';\nimport formidable from 'formidable';\n\nconst app = express();\n\napp.get('/', (req, res) => {\n  res.send(`\n    <h2>With <code>\"express\"</code> npm package</h2>\n    <form action=\"/api/upload\" enctype=\"multipart/form-data\" method=\"post\">\n      <div>Text field title: <input type=\"text\" name=\"title\" /></div>\n      <div>File: <input type=\"file\" name=\"someExpressFiles\" multiple=\"multiple\" /></div>\n      <input type=\"submit\" value=\"Upload\" />\n    </form>\n  `);\n});\n\napp.post('/api/upload', (req, res, next) => {\n  const form = formidable({});\n\n  form.parse(req, (err, fields, files) => {\n    if (err) {\n      next(err);\n      return;\n    }\n    res.json({ fields, files });\n  });\n});\n\napp.listen(3000, () => {\n  console.log('Server listening on http://localhost:3000 ...');\n});\n```\n\n----------------------------------------\n\nTITLE: Parsing File Uploads with Node.js HTTP Module\nDESCRIPTION: Example showing how to parse file uploads using Formidable with the built-in Node.js HTTP module. This demonstrates basic setup with error handling and form display.\nSOURCE: https://github.com/node-formidable/formidable/blob/master/README_pt_BR.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport http from 'node:http';\nimport formidable, {errors as formidableErrors} from 'formidable';\n\nconst server = http.createServer((req, res) => {\n  if (req.url === '/api/upload' && req.method.toLowerCase() === 'post') {\n    // analisar um upload de arquivo\n    const form = formidable({});\n\n    form.parse(req, (err, fields, files) => {\n      if (err) {\n        // exemplo para verificar um erro muito específico\n        if (err.code === formidableErrors.maxFieldsExceeded) {\n\n        }\n        res.writeHead(err.httpCode || 400, { 'Content-Type': 'text/plain' });\n        res.end(String(err));\n        return;\n      }\n      res.writeHead(200, { 'Content-Type': 'application/json' });\n      res.end(JSON.stringify({ fields, files }, null, 2));\n    });\n\n    return;\n  }\n\n  // mostrar um formulário de upload de arquivo\n  res.writeHead(200, { 'Content-Type': 'text/html' });\n  res.end(`\n    <h2>With Node.js <code>\"http\"</code> module</h2>\n    <form action=\"/api/upload\" enctype=\"multipart/form-data\" method=\"post\">\n      <div>Text field title: <input type=\"text\" name=\"title\" /></div>\n      <div>File: <input type=\"file\" name=\"multipleFiles\" multiple=\"multiple\" /></div>\n      <input type=\"submit\" value=\"Upload\" />\n    </form>\n  `);\n});\n\nserver.listen(8080, () => {\n  console.log('Server listening on http://localhost:8080/ ...');\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Formidable Instance\nDESCRIPTION: Shows how to import and initialize a formidable instance with options. This is the basic setup required before parsing form data.\nSOURCE: https://github.com/node-formidable/formidable/blob/master/README.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport formidable from 'formidable';\nconst form = formidable(options);\n```\n\n----------------------------------------\n\nTITLE: Form Parsing Examples\nDESCRIPTION: Examples of parsing form data using both callback and Promise-based approaches\nSOURCE: https://github.com/node-formidable/formidable/blob/master/README.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst form = formidable({ uploadDir: __dirname });\n\nform.parse(req, (err, fields, files) => {\n  console.log('fields:', fields);\n  console.log('files:', files);\n});\n\n// with Promise\nconst [fields, files] = await form.parse(req);\n```\n\n----------------------------------------\n\nTITLE: Handling File Uploads with Express.js and Formidable\nDESCRIPTION: Example of using Formidable with Express.js to handle file uploads without additional middleware. This shows a basic setup for a form submission and handling the multipart form data.\nSOURCE: https://github.com/node-formidable/formidable/blob/master/README_pt_BR.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport express from 'express';\nimport formidable from 'formidable';\n\nconst app = express();\n\napp.get('/', (req, res) => {\n  res.send(`\n    <h2>With <code>\"express\"</code> npm package</h2>\n    <form action=\"/api/upload\" enctype=\"multipart/form-data\" method=\"post\">\n      <div>Text field title: <input type=\"text\" name=\"title\" /></div>\n      <div>File: <input type=\"file\" name=\"someExpressFiles\" multiple=\"multiple\" /></div>\n      <input type=\"submit\" value=\"Upload\" />\n    </form>\n  `);\n});\n\napp.post('/api/upload', (req, res, next) => {\n  const form = formidable({});\n\n  form.parse(req, (err, fields, files) => {\n    if (err) {\n      next(err);\n      return;\n    }\n    res.json({ fields, files });\n  });\n});\n\napp.listen(3000, () => {\n  console.log('Server listening on http://localhost:3000 ...');\n});\n```\n\n----------------------------------------\n\nTITLE: Integrating Formidable with Koa\nDESCRIPTION: Example demonstrating how to use formidable with Koa framework. It shows how to parse multipart form data directly from the Koa context's request object (ctx.req) and handle file uploads.\nSOURCE: https://github.com/node-formidable/formidable/blob/master/README.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport Koa from 'Koa';\nimport formidable from 'formidable';\n\nconst app = new Koa();\n\napp.on('error', (err) => {\n  console.error('server error', err);\n});\n\napp.use(async (ctx, next) => {\n  if (ctx.url === '/api/upload' && ctx.method.toLowerCase() === 'post') {\n    const form = formidable({});\n\n    // not very elegant, but that's for now if you don't want to use `koa-better-body`\n    // or other middlewares.\n    await new Promise((resolve, reject) => {\n      form.parse(ctx.req, (err, fields, files) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n\n        ctx.set('Content-Type', 'application/json');\n        ctx.status = 200;\n        ctx.state = { fields, files };\n        ctx.body = JSON.stringify(ctx.state, null, 2);\n        resolve();\n      });\n    });\n    await next();\n    return;\n  }\n\n  // show a file upload form\n  ctx.set('Content-Type', 'text/html');\n  ctx.status = 200;\n  ctx.body = `\n    <h2>With <code>\"koa\"</code> npm package</h2>\n    <form action=\"/api/upload\" enctype=\"multipart/form-data\" method=\"post\">\n    <div>Text field title: <input type=\"text\" name=\"title\" /></div>\n    <div>File: <input type=\"file\" name=\"koaFiles\" multiple=\"multiple\" /></div>\n    <input type=\"submit\" value=\"Upload\" />\n    </form>\n  `;\n});\n\napp.use((ctx) => {\n  console.log('The next middleware is called');\n  console.log('Results:', ctx.state);\n});\n\napp.listen(3000, () => {\n  console.log('Server listening on http://localhost:3000 ...');\n});\n```\n\n----------------------------------------\n\nTITLE: Error Handling in File Filter\nDESCRIPTION: Implementation showing how to handle errors and cancel uploads using the filter option\nSOURCE: https://github.com/node-formidable/formidable/blob/master/README.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nlet cancelUploads = false;// create variable at the same scope as form\nconst options = {\n  filter: function ({name, originalFilename, mimetype}) {\n    // keep only images\n    const valid = mimetype && mimetype.includes(\"image\");\n    if (!valid) {\n      form.emit('error', new formidableErrors.default('invalid type', 0, 400)); // optional make form.parse error\n      cancelUploads = true; //variable to make filter return false after the first problem\n    }\n    return valid && !cancelUploads;\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Integrating Formidable with Koa for File Uploads\nDESCRIPTION: Example of using Formidable with Koa framework to handle file uploads. This demonstrates how to properly integrate Formidable with Koa's async middleware pattern using promises.\nSOURCE: https://github.com/node-formidable/formidable/blob/master/README_pt_BR.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport Koa from 'Koa';\nimport formidable from 'formidable';\n\nconst app = new Koa();\n\napp.on('error', (err) => {\n  console.error('server error', err);\n});\n\napp.use(async (ctx, next) => {\n  if (ctx.url === '/api/upload' && ctx.method.toLowerCase() === 'post') {\n    const form = formidable({});\n    \n     // não muito elegante, mas é por enquanto se você não quiser usar `koa-better-body`\n     // ou outros middlewares.\n    await new Promise((resolve, reject) => {\n      form.parse(ctx.req, (err, fields, files) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n\n        ctx.set('Content-Type', 'application/json');\n        ctx.status = 200;\n        ctx.state = { fields, files };\n        ctx.body = JSON.stringify(ctx.state, null, 2);\n        resolve();\n      });\n    });\n    await next();\n    return;\n  }\n\n  // mostrar um formulário de upload de arquivo\n  ctx.set('Content-Type', 'text/html');\n  ctx.status = 200;\n  ctx.body = `\n    <h2>With <code>\"koa\"</code> npm package</h2>\n    <form action=\"/api/upload\" enctype=\"multipart/form-data\" method=\"post\">\n    <div>Text field title: <input type=\"text\" name=\"title\" /></div>\n    <div>File: <input type=\"file\" name=\"koaFiles\" multiple=\"multiple\" /></div>\n    <input type=\"submit\" value=\"Upload\" />\n    </form>\n  `;\n});\n\napp.use((ctx) => {\n  console.log('The next middleware is called');\n  console.log('Results:', ctx.state);\n});\n\napp.listen(3000, () => {\n  console.log('Server listening on http://localhost:3000 ...');\n});\n```\n\n----------------------------------------\n\nTITLE: Parsing Form Request with Callback\nDESCRIPTION: Demonstrates how to parse an incoming form request and handle the fields and files in a callback function.\nSOURCE: https://github.com/node-formidable/formidable/blob/master/README_pt_BR.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst form = formidable({ uploadDir: __dirname });\n\nform.parse(req, (err, fields, files) => {\n  console.log('fields:', fields);\n  console.log('files:', files);\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Error Events in Formidable\nDESCRIPTION: Shows how to handle error events during form parsing. The error object may contain httpCode and code properties for more specific error handling.\nSOURCE: https://github.com/node-formidable/formidable/blob/master/README.md#2025-04-18_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nform.on('error', (err) => {});\n```\n\n----------------------------------------\n\nTITLE: Handling 'error' Event in Formidable\nDESCRIPTION: Demonstrates error handling in Formidable. The 'error' event is emitted when there's an error processing the incoming form.\nSOURCE: https://github.com/node-formidable/formidable/blob/master/README_pt_BR.md#2025-04-18_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nform.on('error', (err) => {});\n```\n\n----------------------------------------\n\nTITLE: Initializing Formidable in JavaScript\nDESCRIPTION: Creates a new instance of Formidable with options. This is the recommended way to initialize the library.\nSOURCE: https://github.com/node-formidable/formidable/blob/master/README_pt_BR.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport formidable from 'formidable';\nconst form = formidable(options);\n```\n\n----------------------------------------\n\nTITLE: Event Handling Implementation\nDESCRIPTION: Comprehensive example of handling various form events including file uploads and field processing\nSOURCE: https://github.com/node-formidable/formidable/blob/master/README.md#2025-04-18_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nform.once('error', console.error);\n\nform.on('fileBegin', (formname, file) => {\n  form.emit('data', { name: 'fileBegin', formname, value: file });\n});\n\nform.on('file', (formname, file) => {\n  form.emit('data', { name: 'file', formname, value: file });\n});\n\nform.on('field', (fieldName, fieldValue) => {\n  form.emit('data', { name: 'field', key: fieldName, value: fieldValue });\n});\n\nform.once('end', () => {\n  console.log('Done!');\n});\n\n// If you want to customize whatever you want...\nform.on('data', ({ name, key, value, buffer, start, end, formname, ...more }) => {\n  if (name === 'partBegin') {\n  }\n  if (name === 'partData') {\n  }\n  if (name === 'headerField') {\n  }\n  if (name === 'headerValue') {\n  }\n  if (name === 'headerEnd') {\n  }\n  if (name === 'headersEnd') {\n  }\n  if (name === 'field') {\n    console.log('field name:', key);\n    console.log('field value:', value);\n  }\n  if (name === 'file') {\n    console.log('file:', formname, value);\n  }\n  if (name === 'fileBegin') {\n    console.log('fileBegin:', formname, value);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: File Filter Implementation\nDESCRIPTION: Example of implementing a filter function to only allow image files and handle upload cancellation\nSOURCE: https://github.com/node-formidable/formidable/blob/master/README.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst options = {\n  filter: function ({name, originalFilename, mimetype}) {\n    // keep only images\n    return mimetype && mimetype.includes(\"image\");\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing File Filter Function\nDESCRIPTION: Example of a filter function that only allows image files to be uploaded.\nSOURCE: https://github.com/node-formidable/formidable/blob/master/README_pt_BR.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst options = {\n  filter: function ({name, originalFilename, mimetype}) {\n    // manter apenas imagens\n    return mimetype && mimetype.includes(\"image\");\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Handling File Begin Events in Formidable\nDESCRIPTION: Shows how to use the fileBegin event which occurs when a new file is detected. This event allows modifying the file path before it's written and accessing file metadata early in the upload process.\nSOURCE: https://github.com/node-formidable/formidable/blob/master/README.md#2025-04-18_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nform.on('fileBegin', (formName, file) => {\n    // accessible here \n    // formName the name in the form (<input name=\"thisname\" type=\"file\">) or http filename for octetstream\n    // file.originalFilename http filename or null if there was a parsing error\n    // file.newFilename generated hexoid or what options.filename returned\n    // file.filepath default pathname as per options.uploadDir and options.filename\n    // file.filepath = CUSTOM_PATH // to change the final path\n});\n```\n\n----------------------------------------\n\nTITLE: Handling 'fileBegin' Event in Formidable\nDESCRIPTION: Demonstrates how to use the 'fileBegin' event, which is emitted when a new file is detected in the upload stream. This event allows for custom file handling or path modification.\nSOURCE: https://github.com/node-formidable/formidable/blob/master/README_pt_BR.md#2025-04-18_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nform.on('fileBegin', (formName, file) => {\n     // accessible here\n     // formName the name in the form (<input name=\"thisname\" type=\"file\">) or http filename for octetstream\n     // file.originalFilename http filename or null if there is a parsing error\n     // file.newFilename generated hexoid or what options.filename returned\n     // file.filepath default path name according to options.uploadDir and options.filename\n     // file.filepath = CUSTOM_PATH // to change the final path\n});\n```\n\n----------------------------------------\n\nTITLE: Handling File Completion Events in Formidable\nDESCRIPTION: Demonstrates how to use the file event which is emitted when a file has been fully received and processed. This provides access to the complete file object including hash values if enabled.\nSOURCE: https://github.com/node-formidable/formidable/blob/master/README.md#2025-04-18_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nform.on('file', (formname, file) => {\n    // same as fileBegin, except\n    // it is too late to change file.filepath\n    // file.hash is available if options.hash was used\n});\n```\n\n----------------------------------------\n\nTITLE: Handling 'file' Event in Formidable\nDESCRIPTION: Shows how to handle the 'file' event, which is emitted when a field/file pair is received. The file object contains information about the uploaded file.\nSOURCE: https://github.com/node-formidable/formidable/blob/master/README_pt_BR.md#2025-04-18_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nform.on('file', (formname, file) => {\n     // same as fileBegin, except\n     // it's too late to change file.filepath\n     // file.hash is available if options.hash was used\n});\n```\n\n----------------------------------------\n\nTITLE: Upload Directory Configuration\nDESCRIPTION: Example showing how to set up and ensure existence of upload directories\nSOURCE: https://github.com/node-formidable/formidable/blob/master/README.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport {createNecessaryDirectoriesSync} from \"filesac\";\n\n\nconst uploadPath = `${__dirname}/../uploads`;\ncreateDirsFromUploadsSync(`${uploadPath}/x`);\n```\n\n----------------------------------------\n\nTITLE: Creating Directory for Uploads\nDESCRIPTION: Ensures that the upload directory exists before saving files.\nSOURCE: https://github.com/node-formidable/formidable/blob/master/README_pt_BR.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport {createNecessaryDirectoriesSync} from \"filesac\";\n\n\nconst uploadPath = `${__dirname}/../uploads`;\ncreateNecessaryDirectoriesSync(`${uploadPath}/x`);\n```\n\n----------------------------------------\n\nTITLE: Handling Field Events in Formidable\nDESCRIPTION: Demonstrates how to listen for field events, which are emitted whenever a field/value pair is received in the form data. This allows processing form fields as they arrive.\nSOURCE: https://github.com/node-formidable/formidable/blob/master/README.md#2025-04-18_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nform.on('field', (name, value) => {});\n```\n\n----------------------------------------\n\nTITLE: Handling 'field' Event in Formidable\nDESCRIPTION: Shows how to listen for the 'field' event, which is emitted whenever a field/value pair is received in the form data.\nSOURCE: https://github.com/node-formidable/formidable/blob/master/README_pt_BR.md#2025-04-18_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nform.on('field', (name, value) => {});\n```\n\n----------------------------------------\n\nTITLE: Handling End Events in Formidable\nDESCRIPTION: Shows how to use the end event which is fired when the entire request has been received and all files have been processed. This is the ideal place to send responses.\nSOURCE: https://github.com/node-formidable/formidable/blob/master/README.md#2025-04-18_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nform.on('end', () => {});\n```\n\n----------------------------------------\n\nTITLE: Handling 'end' Event in Formidable\nDESCRIPTION: Demonstrates how to use the 'end' event, which is emitted when the entire request has been received and all contained files have been processed.\nSOURCE: https://github.com/node-formidable/formidable/blob/master/README_pt_BR.md#2025-04-18_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nform.on('end', () => {});\n```\n\n----------------------------------------\n\nTITLE: Handling Aborted Requests in Formidable\nDESCRIPTION: Demonstrates how to detect when a form upload has been aborted by the user, which can occur due to timeout or socket close events. An error event will follow this event.\nSOURCE: https://github.com/node-formidable/formidable/blob/master/README.md#2025-04-18_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nform.on('aborted', () => {});\n```\n\n----------------------------------------\n\nTITLE: Handling 'aborted' Event in Formidable\nDESCRIPTION: Shows how to handle the 'aborted' event, which is emitted when the request is aborted by the user, typically due to a 'timeout' or 'close' event on the socket.\nSOURCE: https://github.com/node-formidable/formidable/blob/master/README_pt_BR.md#2025-04-18_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nform.on('aborted', () => {});\n```\n\n----------------------------------------\n\nTITLE: Handling Progress Events in Formidable\nDESCRIPTION: Shows how to listen for progress events during form parsing, which can be used to create server-side progress indicators. The event provides information about bytes received and expected.\nSOURCE: https://github.com/node-formidable/formidable/blob/master/README.md#2025-04-18_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nform.on('progress', (bytesReceived, bytesExpected) => {});\n```\n\n----------------------------------------\n\nTITLE: Accessing Form Data Properties\nDESCRIPTION: Shows how to access the bytes received and expected for a form submission.\nSOURCE: https://github.com/node-formidable/formidable/blob/master/README_pt_BR.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// A quantidade de bytes recebidos para este formulário até agora.\nform.bytesReceived;\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// O número esperado de bytes neste formulário.\nform.bytesExpected;\n```\n\n----------------------------------------\n\nTITLE: Handling 'progress' Event in Formidable\nDESCRIPTION: Demonstrates how to listen for the 'progress' event, which is emitted after each block of input data is parsed. Useful for implementing server-side progress bars.\nSOURCE: https://github.com/node-formidable/formidable/blob/master/README_pt_BR.md#2025-04-18_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nform.on('progress', (bytesReceived, bytesExpected) => {});\n```\n\n----------------------------------------\n\nTITLE: Accessing Part Properties in Filename Option\nDESCRIPTION: Example showing how to access part properties like originalFilename and mimetype when using the filename option\nSOURCE: https://github.com/node-formidable/formidable/blob/master/README.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst { originalFilename, mimetype} = part;\n```\n\n----------------------------------------\n\nTITLE: Customizing Form Data Handling with form.onPart in JavaScript\nDESCRIPTION: Demonstrates how to use the onPart method to handle specific parts of form data manually. This allows for custom processing of form parts with access to the raw data stream.\nSOURCE: https://github.com/node-formidable/formidable/blob/master/README.md#2025-04-18_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst form = formidable();\n\nform.onPart = (part) => {\n  part.on('data', (buffer) => {\n    // do whatever you want here\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing Part Handling\nDESCRIPTION: Example of overriding the onPart method to handle form parts manually, such as for custom data processing or validation.\nSOURCE: https://github.com/node-formidable/formidable/blob/master/README_pt_BR.md#2025-04-18_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst form = formidable();\n\nform.onPart = (part) => {\n  part.on('data', (buffer) => {\n    // faça o que quiser aqui\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Formidable to Handle Only Non-File Parts\nDESCRIPTION: Shows how to customize form.onPart to make formidable ignore file uploads and process only HTML form fields. This is useful when you want to handle file parts differently.\nSOURCE: https://github.com/node-formidable/formidable/blob/master/README.md#2025-04-18_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst form = formidable();\n\nform.onPart = function (part) {\n  // let formidable handle only non-file parts\n  if (part.originalFilename === '' || !part.mimetype) {\n    // used internally, please do not override!\n    form._handlePart(part);\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Handling Only Non-File Parts\nDESCRIPTION: Demonstrates how to make Formidable only process non-file parts of the form, such as regular HTML fields.\nSOURCE: https://github.com/node-formidable/formidable/blob/master/README_pt_BR.md#2025-04-18_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst form = formidable();\n\nform.onPart = function (part) {\n  // deixe formidável lidar apenas com partes não arquivadas\n  if (part.originalFilename === '' || !part.mimetype) {\n    // usado internamente, por favor, não substitua!\n    form._handlePart(part);\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Plugin Implementation Example\nDESCRIPTION: Example showing how to implement and use a custom plugin with Formidable\nSOURCE: https://github.com/node-formidable/formidable/blob/master/README.md#2025-04-18_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst form = formidable({ keepExtensions: true });\n\nform.use((self, options) => {\n  // self === this === form\n  console.log('woohoo, custom plugin');\n  // do your stuff; check `src/plugins` for inspiration\n});\n\nform.parse(req, (error, fields, files) => {\n  console.log('done!');\n});\n```\n\n----------------------------------------\n\nTITLE: Using Custom Plugins with Formidable\nDESCRIPTION: Demonstrates how to extend Formidable with custom plugins that can modify the form processing behavior.\nSOURCE: https://github.com/node-formidable/formidable/blob/master/README_pt_BR.md#2025-04-18_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst form = formidable({ keepExtensions: true });\n\nform.use((self, options) => {\n  // self === this === form\n  console.log('woohoo, custom plugin');\n  // faça suas coisas; verifique `src/plugins` para inspiração\n});\n\nform.parse(req, (error, fields, files) => {\n  console.log('done!');\n});\n```\n\n----------------------------------------\n\nTITLE: Plugin Configuration\nDESCRIPTION: Example of configuring enabled plugins and customizing parser functionality\nSOURCE: https://github.com/node-formidable/formidable/blob/master/README.md#2025-04-18_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport formidable, {octetstream, querystring, json} from \"formidable\";\nconst form = formidable({\n  hashAlgorithm: 'sha1',\n  enabledPlugins: [octetstream, querystring, json],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Enabled Plugins\nDESCRIPTION: Shows how to selectively enable only specific plugins for form processing.\nSOURCE: https://github.com/node-formidable/formidable/blob/master/README_pt_BR.md#2025-04-18_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport formidable, {octetstream, querystring, json} from \"formidable\";\nconst form = formidable({\n  hashAlgorithm: 'sha1',\n  enabledPlugins: [octetstream, querystring, json],\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Up Form Event Listeners\nDESCRIPTION: Example of listening to various form events and redirecting them to a custom data listener for processing.\nSOURCE: https://github.com/node-formidable/formidable/blob/master/README_pt_BR.md#2025-04-18_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nform.once('error', console.error);\n\nform.on('fileBegin', (formname, file) => {\n  form.emit('data', { name: 'fileBegin', formname, value: file });\n});\n\nform.on('file', (formname, file) => {\n  form.emit('data', { name: 'file', formname, value: file });\n});\n\nform.on('field', (fieldName, fieldValue) => {\n  form.emit('data', { name: 'field', key: fieldName, value: fieldValue });\n});\n\nform.once('end', () => {\n  console.log('Done!');\n});\n\n// Se você quiser personalizar o que quiser...\nform.on('data', ({ name, key, value, buffer, start, end, formname, ...more }) => {\n  if (name === 'partBegin') {\n  }\n  if (name === 'partData') {\n  }\n  if (name === 'headerField') {\n  }\n  if (name === 'headerValue') {\n  }\n  if (name === 'headerEnd') {\n  }\n  if (name === 'headersEnd') {\n  }\n  if (name === 'field') {\n    console.log('field name:', key);\n    console.log('field value:', value);\n  }\n  if (name === 'file') {\n    console.log('file:', formname, value);\n  }\n  if (name === 'fileBegin') {\n    console.log('fileBegin:', formname, value);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: File Interface Definition in TypeScript\nDESCRIPTION: TypeScript interface defining the File object structure returned by formidable. It includes properties for file metadata such as size, path, name, mimetype, and calculated hash values.\nSOURCE: https://github.com/node-formidable/formidable/blob/master/README.md#2025-04-18_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface File {\n  // The size of the uploaded file in bytes.\n  // If the file is still being uploaded (see `'fileBegin'` event),\n  // this property says how many bytes of the file have been written to disk yet.\n  file.size: number;\n\n  // The path this file is being written to. You can modify this in the `'fileBegin'` event in\n  // case you are unhappy with the way formidable generates a temporary path for your files.\n  file.filepath: string;\n\n  // The name this file had according to the uploading client.\n  file.originalFilename: string | null;\n  \n  // calculated based on options provided\n  file.newFilename: string | null;\n\n  // The mime type of this file, according to the uploading client.\n  file.mimetype: string | null;\n\n  // A Date object (or `null`) containing the time this file was last written to.\n  // Mostly here for compatibility with the [W3C File API Draft](http://dev.w3.org/2006/webapi/FileAPI/).\n  file.mtime: Date | null;\n\n  file.hashAlgorithm: false | |'sha1' | 'md5' | 'sha256'\n  // If `options.hashAlgorithm` calculation was set, you can read the hex digest out of this var (at the end it will be a string)\n  file.hash: string | object | null;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining File Interface in TypeScript for Formidable\nDESCRIPTION: Defines the File interface used in Formidable, including properties for file size, path, name, MIME type, and hash information.\nSOURCE: https://github.com/node-formidable/formidable/blob/master/README_pt_BR.md#2025-04-18_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface File {\n   file.size: number;\n   file.filepath: string;\n   file.originalFilename: string | null;\n   file.newFilename: string | null;\n   file.mimetype: string | null;\n   file.mtime: Date | null;\n   file.hashAlgorithm: false | |'sha1' | 'md5' | 'sha256'\n   file.hash: string | object | null;\n}\n```\n\n----------------------------------------\n\nTITLE: Using firstValues Helper for Field Processing\nDESCRIPTION: Demonstrates how to use the firstValues helper to simplify handling of form fields by getting only the first value of each field, with optional exceptions for fields that should remain as arrays.\nSOURCE: https://github.com/node-formidable/formidable/blob/master/README.md#2025-04-18_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nimport { firstValues } from 'formidable/src/helpers/firstValues.js';\n\n// ...\nform.parse(request, async (error, fieldsMultiple, files) => {\n    if (error) {\n        //...\n    }\n    const exceptions = ['thisshouldbeanarray'];\n    const fieldsSingle = firstValues(form, fieldsMultiple, exceptions);\n    // ...\n```\n\n----------------------------------------\n\nTITLE: Using firstValues Helper Function in Formidable\nDESCRIPTION: Shows how to use the firstValues helper function to get the first values of fields, with an option to specify exceptions for multi-select fields.\nSOURCE: https://github.com/node-formidable/formidable/blob/master/README_pt_BR.md#2025-04-18_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nimport { firstValues } from 'formidable/src/helpers/firstValues.js';\n\n// ...\nform.parse(request, async (error, fieldsMultiple, files) => {\n    if (error) {\n        //...\n    }\n    const exceptions = ['thisshouldbeanarray'];\n    const fieldsSingle = firstValues(form, fieldsMultiple, exceptions);\n    // ...\n```\n\n----------------------------------------\n\nTITLE: Using readBooleans Helper for Checkbox Processing\nDESCRIPTION: Shows how to use the readBooleans helper to convert checkbox form inputs (which send 'on' when checked) to boolean values. This helper processes fields that are expected to be checkboxes.\nSOURCE: https://github.com/node-formidable/formidable/blob/master/README.md#2025-04-18_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nimport { firstValues } from 'formidable/src/helpers/firstValues.js';\nimport { readBooleans } from 'formidable/src/helpers/readBooleans.js';\n\n// ...\nform.parse(request, async (error, fieldsMultiple, files) => {\n    if (error) {\n        //...\n    }\n    const fieldsSingle = firstValues(form, fieldsMultiple);\n    \n    const expectedBooleans = ['checkbox1', 'wantsNewsLetter', 'hasACar'];\n    const fieldsWithBooleans = readBooleans(fieldsSingle, expectedBooleans);\n    // ...\n```\n\n----------------------------------------\n\nTITLE: Using readBooleans Helper Function in Formidable\nDESCRIPTION: Demonstrates the use of the readBooleans helper function to convert checkbox inputs to boolean values.\nSOURCE: https://github.com/node-formidable/formidable/blob/master/README_pt_BR.md#2025-04-18_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nimport { firstValues } from 'formidable/src/helpers/firstValues.js';\nimport { readBooleans } from 'formidable/src/helpers/readBooleans.js';\n\n// ...\nform.parse(request, async (error, fieldsMultiple, files) => {\n    if (error) {\n        //...\n    }\n    const fieldsSingle = firstValues(form, fieldsMultiple);\n    \n    const expectedBooleans = ['checkbox1', 'wantsNewsLetter', 'hasACar'];\n    const fieldsWithBooleans = readBooleans(fieldsSingle, expectedBooleans);\n    // ...\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Directory Path\nDESCRIPTION: Shows how to configure the upload directory path relative to the current file.\nSOURCE: https://github.com/node-formidable/formidable/blob/master/README_pt_BR.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n `${__dirname}/../uploads`\n```\n\n----------------------------------------\n\nTITLE: Installing Formidable Package Commands\nDESCRIPTION: NPM installation commands for different versions of Formidable package. Shows how to install specific versions using different dist tags.\nSOURCE: https://github.com/node-formidable/formidable/blob/master/VERSION_NOTES.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nformidable@v1\nformidable@v2\nformidable@v2-latest\nformidable@latest\n```\n\n----------------------------------------\n\nTITLE: Running File Upload Benchmark with Node.js and Bombardier\nDESCRIPTION: These commands set up and execute a file upload benchmark test. First, a Node.js server is started using the benchmark script, then bombardier is used to load test the server by uploading the README.md file repeatedly via POST requests with 100 concurrent connections for 10 seconds.\nSOURCE: https://github.com/node-formidable/formidable/blob/master/benchmark/e2e.txt#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnode ./benchmark/server.js\nbombardier --body-file=\"./README.md\" --method=POST --duration=10s --connections=100 http://localhost:3000/api/upload\n```\n\n----------------------------------------\n\nTITLE: HTTP Upload Benchmarking with Bombardier\nDESCRIPTION: Terminal output showing HTTP upload performance benchmarking using bombardier tool. The test was run against a local server endpoint for 10 seconds with 100 concurrent connections, achieving 2824.09 requests per second and 102.08MB/s throughput.\nSOURCE: https://github.com/node-formidable/formidable/blob/master/benchmark/2022-11-30-i5-9600k.txt#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nC:\\files\\formidable> bombardier --body-file=\"./README.md\" --method=POST \n--duration=10s --connections=100 http://localhost:3000/api/upload \nBombarding http://localhost:3000/api/upload for 10s using 100 connection(s)[====================================================================] 10s \nDone!\nStatistics        Avg      Stdev        Max\n  Reqs/sec      2824.09    1512.74    6881.85\n  Latency       35.51ms    37.38ms      0.98s\n  HTTP codes:\n    1xx - 0, 2xx - 28163, 3xx - 0, 4xx - 0, 5xx - 0\n    others - 0\n  Throughput:   102.08MB/s\n```\n\n----------------------------------------\n\nTITLE: Running Formidable Benchmarks on Node.js v18\nDESCRIPTION: Terminal output showing the results of running Formidable's built-in benchmark on Node.js v18.0.0, achieving 4132.23 mb/sec throughput.\nSOURCE: https://github.com/node-formidable/formidable/blob/master/benchmark/2022-11-30-i5-9600k.txt#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run bench\n\n> formidable@3.2.5 bench\n> node benchmark\n\n4132.23 mb/sec\nPS C:\\files\\formidable> node -v      \nv18.0.0\n```\n\n----------------------------------------\n\nTITLE: Running Formidable Benchmarks on Node.js v19\nDESCRIPTION: Terminal output showing the results of running Formidable's built-in benchmark on Node.js v19.2.0, achieving 3952.57 mb/sec throughput.\nSOURCE: https://github.com/node-formidable/formidable/blob/master/benchmark/2022-11-30-i5-9600k.txt#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run bench\n\n> formidable@3.2.5 bench\n> node benchmark\n\n3952.57 mb/sec\n\nPS C:\\files\\formidable> node -v      \nv19.2.0\n```"
  }
]