[
  {
    "owner": "chrisguidry",
    "repo": "pytest-opentelemetry",
    "content": "TITLE: Running pytest with OpenTelemetry Trace Export Enabled Using Bash\nDESCRIPTION: This snippet shows how to execute pytest with the `--export-traces` flag, which enables exporting of trace spans generated during test execution. Without this flag, spans are only kept in memory. The default export endpoint used is `http://localhost:4317` over OTLP gRPC protocol. This requires a running OpenTelemetry Collector or compatible backend to receive the exported traces.\nSOURCE: https://github.com/chrisguidry/pytest-opentelemetry/blob/main/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npytest --export-traces\n```\n\n----------------------------------------\n\nTITLE: Installing pytest-opentelemetry Plugin Using Bash\nDESCRIPTION: This snippet demonstrates how to install the pytest-opentelemetry Python package using pip. Installing this package will automatically register the plugin with pytest due to the pytest-related entry point it exposes. No additional configuration is required for basic installation.\nSOURCE: https://github.com/chrisguidry/pytest-opentelemetry/blob/main/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install pytest-opentelemetry\n```\n\n----------------------------------------\n\nTITLE: Configuring pytest Environment Variables via pyproject.toml in TOML\nDESCRIPTION: This TOML snippet configures `pytest-env` to set persistent environment variables for all pytest runs in a project. It sets `OTEL_RESOURCE_ATTRIBUTES` to specify the OpenTelemetry service name, allowing customized service identity for exported traces. This approach is preferred for permanent environment configurations within pytest projects.\nSOURCE: https://github.com/chrisguidry/pytest-opentelemetry/blob/main/README.md#_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[tool.pytest.ini_options]\nenv = [\n    \"OTEL_RESOURCE_ATTRIBUTES=service.name=my-project\",\n]\n```\n\n----------------------------------------\n\nTITLE: Setting OTLP Exporter Endpoint Environment Variable in Bash\nDESCRIPTION: This snippet configures the OpenTelemetry export endpoint by setting the environment variable `OTEL_EXPORTER_OTLP_ENDPOINT` to a custom collector URL. After exporting the variable, pytest is run with trace exporting enabled. This allows directing trace data to alternative collectors according to deployment needs. This snippet requires a shell environment supporting `export` commands.\nSOURCE: https://github.com/chrisguidry/pytest-opentelemetry/blob/main/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport OTEL_EXPORTER_OTLP_ENDPOINT=http://another.collector:4317\npytest --export-traces\n```\n\n----------------------------------------\n\nTITLE: OpenTelemetry Collector Configuration for Jaeger Export Using YAML\nDESCRIPTION: This YAML configuration sets up an OpenTelemetry Collector pipeline that receives OTLP (gRPC) traces, batches them, and exports to Jaeger. It configures the OTLP receiver with gRPC protocol, uses a batch processor, and sets the Jaeger exporter endpoint with insecure TLS. This collector config file is intended to be mounted into the collector container to support trace visualization via Jaeger from pytest-opentelemetry exports.\nSOURCE: https://github.com/chrisguidry/pytest-opentelemetry/blob/main/README.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nreceivers:\n  otlp:\n    protocols:\n      grpc:\n\nprocessors:\n  batch:\n\nexporters:\n  jaeger:\n    endpoint: jaeger:14250\n    tls:\n      insecure: true\n\nservice:\n  pipelines:\n    traces:\n      receivers: [otlp]\n      processors: [batch]\n      exporters: [jaeger]\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Setup for OpenTelemetry Collector and Jaeger Visualization Using YAML\nDESCRIPTION: This Docker Compose YAML snippet configures services to run the Jaeger all-in-one image and the OpenTelemetry Collector with Jaeger exporter. It exposes necessary ports for the Jaeger UI and OTLP gRPC ingestion, and mounts a configuration file for the collector. This setup enables local visualization of test traces exported by pytest-opentelemetry for easier analysis of test runtimes.\nSOURCE: https://github.com/chrisguidry/pytest-opentelemetry/blob/main/README.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"3.8\"\nservices:\n  jaeger:\n    image: jaegertracing/all-in-one:1.33\n    ports:\n    - 16686:16686    # frontend\n    - 14250:14250    # model.proto\n  collector:\n    image: otel/opentelemetry-collector-contrib:0.49.0\n    depends_on:\n    - jaeger\n    ports:\n    - 4317:4317      # OTLP (gRPC)\n    volumes:\n    - ./otelcol-config.yaml:/etc/otelcol-contrib/config.yaml:ro\n```"
  }
]