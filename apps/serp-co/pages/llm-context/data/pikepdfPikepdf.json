[
  {
    "owner": "pikepdf",
    "repo": "pikepdf",
    "content": "TITLE: Attaching File to PDF using pikepdf\nDESCRIPTION: Demonstrates how to attach a file to a PDF document using pikepdf's AttachedFileSpec class. Opens a PDF, creates a file specification from a filepath, and adds it to the PDF's attachments.\nSOURCE: https://github.com/pikepdf/pikepdf/blob/main/docs/topics/attachments.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pikepdf import Pdf, AttachedFileSpec, Name, Dictionary, Array\n\nfrom pathlib import Path\n\npdf = Pdf.open('../tests/resources/fourpages.pdf')\n\nfilespec = AttachedFileSpec.from_filepath(pdf, Path('../README.md'))\n\npdf.attachments['README.md'] = filespec\n\npdf.attachments\n```\n\n----------------------------------------\n\nTITLE: Encrypting PDFs with Permissions\nDESCRIPTION: Shows how to save a PDF with encryption and custom permissions using pikepdf's Encryption and Permissions classes.\nSOURCE: https://github.com/pikepdf/pikepdf/blob/main/docs/tutorial.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nno_extracting = pikepdf.Permissions(extract=False)\n\npdf.save('encrypted.pdf', encryption=pikepdf.Encryption(\n     user=\"user password\", owner=\"owner password\", allow=no_extracting\n))\n```\n\n----------------------------------------\n\nTITLE: Replacing PDF Images with Grayscale Version\nDESCRIPTION: Demonstrates how to replace an existing PDF image with a modified grayscale version. Includes resizing the image and updating the image properties.\nSOURCE: https://github.com/pikepdf/pikepdf/blob/main/docs/topics/images.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> import zlib\n\n>>> rawimage = pdfimage.obj\n\n>>> pillowimage = pdfimage.as_pil_image()\n\n>>> grayscale = pillowimage.convert('L')\n\n>>> grayscale = grayscale.resize((32, 32))\n\n>>> rawimage.write(zlib.compress(grayscale.tobytes()), filter=Name(\"/FlateDecode\"))\n\n>>> rawimage.ColorSpace = Name(\"/DeviceGray\")\n\n>>> rawimage.Width, rawimage.Height = 32, 32\n```\n\n----------------------------------------\n\nTITLE: Basic PDF Merge Operation\nDESCRIPTION: Simple implementation to merge multiple PDF files into a single document by combining all pages in order.\nSOURCE: https://github.com/pikepdf/pikepdf/blob/main/docs/topics/pages.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom glob import glob\n\npdf = Pdf.new()\n\nfor file in glob('*.pdf'):\n    src = Pdf.open(file)\n    pdf.pages.extend(src.pages)\n\npdf.save('merged.pdf')\n```\n\n----------------------------------------\n\nTITLE: Basic PDF Manipulation with Pikepdf\nDESCRIPTION: Demonstrates the basic usage of pikepdf to open a PDF file, get the number of pages, delete the last page, and save the modified file. Shows the elegant, Pythonic API of the library.\nSOURCE: https://github.com/pikepdf/pikepdf/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Elegant, Pythonic API\nwith pikepdf.open('input.pdf') as pdf:\n    num_pages = len(pdf.pages)\n    del pdf.pages[-1]\n    pdf.save('output.pdf')\n```\n\n----------------------------------------\n\nTITLE: Creating Basic PDF Outlines with pikepdf\nDESCRIPTION: Demonstrates how to add basic outline entries to a PDF document that reference specific pages. Uses the OutlineItem class to create bookmarks pointing to the 1st, 3rd and 9th pages of the document.\nSOURCE: https://github.com/pikepdf/pikepdf/blob/main/docs/topics/outlines.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from pikepdf import Pdf, OutlineItem\n\n>>> pdf = Pdf.open('document.pdf')\n\n>>> with pdf.open_outline() as outline:\n...     outline.root.extend([\n...         # Page counts are zero-based\n...         OutlineItem('Section One', 0),\n...         OutlineItem('Section Two', 2),\n...         OutlineItem('Section Three', 8)\n...     ])\n\n>>> pdf.save('document_with_outline.pdf')\n```\n\n----------------------------------------\n\nTITLE: Accessing PDF Attachment Content\nDESCRIPTION: Shows how to access and read the contents of an attached file in a PDF document using pikepdf's attachment API.\nSOURCE: https://github.com/pikepdf/pikepdf/blob/main/docs/topics/attachments.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npdf.attachments['README.md']\nfile = pdf.attachments['README.md'].get_file()\n```\n\n----------------------------------------\n\nTITLE: Rotating PDF Pages with pikepdf in Python\nDESCRIPTION: This snippet demonstrates how to use pikepdf to open a PDF file, rotate all pages by 180 degrees, and save the modified PDF. It showcases the basic usage of pikepdf for page manipulation.\nSOURCE: https://github.com/pikepdf/pikepdf/blob/main/docs/index.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Rotate all pages in a file by 180 degrees\nimport pikepdf\n\nwith pikepdf.Pdf.open('test.pdf') as my_pdf:\n    for page in my_pdf.pages:\n        page.rotate(180, relative=True)\n    my_pdf.save('test-rotated.pdf')\n```\n\n----------------------------------------\n\nTITLE: Adding Page Thumbnail Overlay in Python using pikepdf\nDESCRIPTION: This code snippet demonstrates how to use pikepdf to add a thumbnail of the second page as an overlay on the first page of a PDF. It uses the Page.add_overlay method and specifies the position using a Rectangle object.\nSOURCE: https://github.com/pikepdf/pikepdf/blob/main/docs/topics/overlays.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from pikepdf import Pdf, Page, Rectangle\n\n>>> pdf = Pdf.open(...)\n\n>>> destination_page = Page(pdf.pages[0])\n\n>>> thumbnail = Page(pdf.pages[1])\n\n>>> destination_page.add_overlay(thumbnail, Rectangle(0, 0, 300, 300))\n\n>>> pdf.save(\"page1_with_page2_thumbnail.pdf\")\n```\n\n----------------------------------------\n\nTITLE: Accessing PDF Name Trees with pikepdf\nDESCRIPTION: Demonstrates how to open a PDF file, access its name tree structure for destinations, and retrieve keys and values. Shows how to work with the NameTree class to access destination objects and their properties.\nSOURCE: https://github.com/pikepdf/pikepdf/blob/main/docs/topics/nametrees.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from pikepdf import Pdf, Page, NameTree\n\n>>> pdf = Pdf.open('../tests/resources/outlines.pdf')\n\n>>> nt = NameTree(pdf.Root.Names.Dests)\n\n>>> print([k for k in nt.keys()])\n['0', '1', '2', '3', '4', '5', '6', '7', '8']\n\n>>> nt['2'][0].objgen, nt['2'][1], nt['2'][2]\n((3, 0), pikepdf.Name(\"/XYZ\"), Decimal('89.29'))\n```\n\n----------------------------------------\n\nTITLE: Opening and Saving PDFs with pikepdf\nDESCRIPTION: Demonstrates basic PDF file opening and saving operations using pikepdf's Pdf class. Uses context manager for safe file handling.\nSOURCE: https://github.com/pikepdf/pikepdf/blob/main/docs/tutorial.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pikepdf import Pdf\n\nwith Pdf.open('sample.pdf') as pdf:\n    pdf.save('output.pdf')\n```\n\n----------------------------------------\n\nTITLE: Pretty-printing PDF Content Stream\nDESCRIPTION: Demonstrates how to parse and unparse a PDF content stream to pretty-print its contents in ASCII format.\nSOURCE: https://github.com/pikepdf/pikepdf/blob/main/docs/topics/content_streams.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nwith pikepdf.open(\"../tests/resources/congress.pdf\") as pdf:\n    page = pdf.pages[0]\n    instructions = pikepdf.parse_content_stream(page)\n    data = pikepdf.unparse_content_stream(instructions)\n    print(data.decode('ascii'))\n```\n\n----------------------------------------\n\nTITLE: Accessing PDF Dictionaries\nDESCRIPTION: Demonstrates how to access and inspect PDF document root dictionary structure.\nSOURCE: https://github.com/pikepdf/pikepdf/blob/main/docs/tutorial.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom pikepdf import Pdf\n\nexample = Pdf.open('../tests/resources/congress.pdf')\n\nexample.Root  # Show the document's root dictionary\n```\n\n----------------------------------------\n\nTITLE: Split PDF into Single Pages using pikepdf\nDESCRIPTION: Demonstrates how to split a PDF into individual single-page PDFs. Creates new PDF files named with sequential numbers for each page in the source document.\nSOURCE: https://github.com/pikepdf/pikepdf/blob/main/docs/topics/pages.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npdf = Pdf.open('../tests/resources/fourpages.pdf')\n\nfor n, page in enumerate(pdf.pages):\n    dst = Pdf.new()\n    dst.pages.append(page)\n    dst.save(f'{n:02d}.pdf')\n```\n\n----------------------------------------\n\nTITLE: Deleting PDF Pages\nDESCRIPTION: Shows how to remove specific pages from a PDF using slice notation.\nSOURCE: https://github.com/pikepdf/pikepdf/blob/main/docs/_notebooks/pages.ipynb#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndel pdf.pages[1:3]  # Remove pages 2-3 labeled \"second page\" and \"third page\"\n```\n\n----------------------------------------\n\nTITLE: Editing PDF Content Stream Matrix\nDESCRIPTION: Demonstrates how to modify a content stream by updating the transformation matrix to center and resize an image.\nSOURCE: https://github.com/pikepdf/pikepdf/blob/main/docs/topics/content_streams.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ncommands[1][0] = pikepdf.Array(new_matrix)\nnew_content_stream = pikepdf.unparse_content_stream(commands)\nnew_content_stream\npage.Contents = pdf.make_stream(new_content_stream)\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple PDFs\nDESCRIPTION: Demonstrates how to append and insert pages from other PDF files into the current document.\nSOURCE: https://github.com/pikepdf/pikepdf/blob/main/docs/_notebooks/pages.ipynb#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nappendix = Pdf.open('../../tests/resources/sandwich.pdf')\npdf.pages.extend(appendix.pages)\ngraph = Pdf.open('../../tests/resources/graph.pdf')\npdf.pages.insert(1, graph.pages[0])\npdf\n```\n\n----------------------------------------\n\nTITLE: Setting PDF Page Layout and Mode with pikepdf in Python\nDESCRIPTION: This code snippet demonstrates how to open a PDF, set its PageLayout to SinglePage and PageMode to FullScreen, and save the modified PDF. It uses the pikepdf library to manipulate the PDF's Root object.\nSOURCE: https://github.com/pikepdf/pikepdf/blob/main/docs/topics/pagelayout.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pikepdf import Pdf, Dictionary, Name\nwith Pdf.open('input.pdf') as pdf:\n    pdf.Root.PageLayout = Name.SinglePage\n    pdf.Root.PageMode = Name.FullScreen\n    pdf.save('output.pdf')\n```\n\n----------------------------------------\n\nTITLE: Creating Nested PDF Outline Structure\nDESCRIPTION: Shows how to create hierarchical outline structures by adding child items to parent outline entries using the children list property.\nSOURCE: https://github.com/pikepdf/pikepdf/blob/main/docs/topics/outlines.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> with pdf.open_outline() as outline:\n...     main_item = OutlineItem('Main', 0)\n...     outline.root.append(main_item)\n...     main_item.children.append(OutlineItem('A', 1))\n```\n\n----------------------------------------\n\nTITLE: Extracting Images from PDF\nDESCRIPTION: Shows how to extract images from a PDF to a file using PdfImage.extract_to() method. The file extension is automatically determined based on the image format.\nSOURCE: https://github.com/pikepdf/pikepdf/blob/main/docs/topics/images.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> pdfimage.extract_to(fileprefix='image')\n'image.jpg'\n```\n\n----------------------------------------\n\nTITLE: PDFDocEncoding Example in Python\nDESCRIPTION: Demonstrates how to use the pdfdoc codec that pikepdf automatically registers with Python's standard library for encoding strings to PDFDocEncoding format.\nSOURCE: https://github.com/pikepdf/pikepdf/blob/main/docs/topics/encoding.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\"•\".encode('pdfdoc') == b'\\x81'\n```\n\n----------------------------------------\n\nTITLE: Converting PDF Stream to Python File-like Object\nDESCRIPTION: Demonstrates how to convert a PDF page's Contents stream into a Python file-like object using BytesIO. This technique allows efficient access to stream contents using familiar file operations.\nSOURCE: https://github.com/pikepdf/pikepdf/blob/main/docs/topics/streams.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npdf.pages[0].Contents.page_contents_coalesce()\nfilelike_object = BytesIO(pdf.pages[0].Contents.get_stream_buffer())\n```\n\n----------------------------------------\n\nTITLE: Accessing Metadata with PikePDF in Python\nDESCRIPTION: This snippet demonstrates how to open and read XMP metadata from a PDF file using the PikePDF library in Python. The example opens a PDF and prints the 'xmp:CreatorTool' field from its metadata. Ensure PikePDF is installed and the file path is accessible.\nSOURCE: https://github.com/pikepdf/pikepdf/blob/main/docs/topics/metadata.rst#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n>>> pdf = pikepdf.open('../tests/resources/sandwich.pdf')\n\n>>> meta = pdf.open_metadata()\n\n>>> meta['xmp:CreatorTool']\n'ocrmypdf 5.3.3 / Tesseract OCR-PDF 3.05.01'\n```\n\n----------------------------------------\n\nTITLE: Opening a PDF File with pikepdf\nDESCRIPTION: Demonstrates how to open an existing PDF file using pikepdf's Pdf.open() method.\nSOURCE: https://github.com/pikepdf/pikepdf/blob/main/docs/_notebooks/pages.ipynb#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pikepdf import Pdf\n\npdf = Pdf.open('../../tests/resources/fourpages.pdf')\n```\n\n----------------------------------------\n\nTITLE: Removing Images from PDF\nDESCRIPTION: Shows how to effectively remove an image by replacing it with a 1x1 pixel transparent image mask. Updates the image resources in the PDF page.\nSOURCE: https://github.com/pikepdf/pikepdf/blob/main/docs/topics/images.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> pdf = pikepdf.open('../tests/resources/sandwich.pdf')\n\n>>> page = pdf.pages[0]\n\n>>> image_name, image = next(iter(page.images.items()))\n\n>>> new_image = pdf.make_stream(b'\\xff')\n\n>>> new_image.Width, new_image.Height = 1, 1\n\n>>> new_image.BitsPerComponent = 1\n\n>>> new_image.ImageMask = True\n\n>>> new_image.Decode = [0, 1]\n\n>>> page.Resources.XObject[image_name] = new_image\n```\n\n----------------------------------------\n\nTITLE: Editing Metadata in a With Block in Python\nDESCRIPTION: This code snippet shows how to use a 'with' block to edit metadata entries, such as changing the document title, in PikePDF. Changes are committed on block exit unless an exception occurs. Ensure the PDF is saved afterward.\nSOURCE: https://github.com/pikepdf/pikepdf/blob/main/docs/topics/metadata.rst#2025-04-22_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n>>> with pdf.open_metadata() as meta:\n...     meta['dc:title'] = \"Let's change the title\"\n...\n```\n\n----------------------------------------\n\nTITLE: Creating Detailed PDF Outline Destinations\nDESCRIPTION: Demonstrates how to create outline entries with specific page positioning and fit options. Shows both direct creation and use of make_page_destination function.\nSOURCE: https://github.com/pikepdf/pikepdf/blob/main/docs/topics/outlines.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> oi = OutlineItem('First', 0, 'FitB', top=1000)\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> oi.destination = make_page_destination(pdf, 0, 'FitB', top=1000)\n```\n\n----------------------------------------\n\nTITLE: Reversing PDF Pages\nDESCRIPTION: Demonstrates how to reverse the order of pages in a PDF document in-place.\nSOURCE: https://github.com/pikepdf/pikepdf/blob/main/docs/_notebooks/pages.ipynb#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\npdf.pages.reverse()\n```\n\n----------------------------------------\n\nTITLE: Creating New Blank PDFs\nDESCRIPTION: Shows how to create a new PDF document from scratch and add a blank page using pikepdf.\nSOURCE: https://github.com/pikepdf/pikepdf/blob/main/docs/tutorial.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom pikepdf import Pdf\n\npdf = Pdf.new()\npdf.add_blank_page()\npdf.save('blank_page.pdf')\n```\n\n----------------------------------------\n\nTITLE: Reading Attachment Binary Content\nDESCRIPTION: Example of reading the binary content of an attached file from a PDF document.\nSOURCE: https://github.com/pikepdf/pikepdf/blob/main/docs/topics/attachments.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfile.read_bytes()[...]\nb'**pikepdf** is a Python library for reading and writing PDF files.'\n```\n\n----------------------------------------\n\nTITLE: Accessing PDF Images with pikepdf\nDESCRIPTION: Demonstrates how to open a PDF file and access image objects using pikepdf. Shows how to retrieve image keys and create a PdfImage object for manipulation.\nSOURCE: https://github.com/pikepdf/pikepdf/blob/main/docs/topics/images.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from pikepdf import Pdf, PdfImage, Name\n\n>>> example = Pdf.open('../tests/resources/congress.pdf')\n\n>>> page1 = example.pages[0]\n\n>>> list(page1.images.keys())\n['/Im0']\n\n>>> rawimage = page1.images['/Im0']  # The raw object/dictionary\n\n>>> pdfimage = PdfImage(rawimage)\n\n>>> type(pdfimage)\n<class 'pikepdf.models.image.PdfImage'>\n```\n\n----------------------------------------\n\nTITLE: Using Updated Page API\nDESCRIPTION: Example of using the improved page API in v3.0.0 where Pdf.pages returns Page objects directly instead of requiring manual wrapping.\nSOURCE: https://github.com/pikepdf/pikepdf/blob/main/docs/releasenotes/version3.rst#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n# Old style\npage = Page(pdf.pages[0])\n\n# New style\npage = pdf.pages[0]\n```\n\n----------------------------------------\n\nTITLE: Using Page Counting Numbers\nDESCRIPTION: Demonstrates how to access pages using counting numbers (starting from 1) with the .p() accessor.\nSOURCE: https://github.com/pikepdf/pikepdf/blob/main/docs/_notebooks/pages.ipynb#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\npdf.pages.p(1)        # The first page in the document\npdf.pages[0]          # Also the first page in the document\n;\n```\n\n----------------------------------------\n\nTITLE: Merging PDFs with Automatic Outline Generation\nDESCRIPTION: Shows how to merge multiple PDF files while automatically creating outline entries for each source file. Tracks page count to maintain correct page references in the outline structure.\nSOURCE: https://github.com/pikepdf/pikepdf/blob/main/docs/topics/outlines.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> from glob import glob\n\n>>> pdf = Pdf.new()\n\n>>> page_count = 0\n\n>>> with pdf.open_outline() as outline:\n...     for file in glob('*.pdf'):\n...         src = Pdf.open(file)\n...         oi = OutlineItem(file, page_count)\n...         outline.root.append(oi)\n...         page_count += len(src.pages)\n...         pdf.pages.extend(src.pages)\n\n>>> pdf.save('merged.pdf')\n```\n\n----------------------------------------\n\nTITLE: Accessing PDF Pages with pikepdf\nDESCRIPTION: Demonstrates how to open a PDF file with pikepdf and access its first page. The example shows the structure of a Page object, which contains content streams, media box dimensions, resources, and other properties.\nSOURCE: https://github.com/pikepdf/pikepdf/blob/main/docs/topics/page.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from pikepdf import Pdf, Page\n\n>>> example = Pdf.open('../tests/resources/congress.pdf')\n\n>>> page1 = example.pages[0]\n\n>>> page1\n<pikepdf.Page({\n  \"/Contents\": pikepdf.Stream(owner=<...>, data=b'q\\n200.0000 0 0 304.0'..., {\n    \"/Length\": 50\n  }),\n  \"/MediaBox\": [ 0, 0, 200, 304 ],\n  \"/Parent\": <reference to /Pages>,\n  \"/Resources\": {\n    \"/XObject\": {\n      \"/Im0\": pikepdf.Stream(owner=<...>, data=<...>, {\n        \"/BitsPerComponent\": 8,\n        \"/ColorSpace\": \"/DeviceRGB\",\n        \"/Filter\": [ \"/DCTDecode\" ],\n        \"/Height\": 1520,\n        \"/Length\": 192956,\n        \"/Subtype\": \"/Image\",\n        \"/Type\": \"/XObject\",\n        \"/Width\": 1000\n      })\n    }\n  },\n  \"/Type\": \"/Page\"\n})>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Object Lifetime Issue in Python\nDESCRIPTION: This code snippet illustrates a breaking change in pikepdf 7.0.0 where dependent objects no longer keep their parent alive. The function creates a PDF object and returns it, but attempting to read from the object after the function returns will now raise a DeletedObjectError.\nSOURCE: https://github.com/pikepdf/pikepdf/blob/main/docs/releasenotes/version7.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef make_obj_and_return():\n    pdf = pikepdf.new()\n    obj = pdf.make_stream(b'some data')\n    return obj\n\n...\nobj = make_obj_and_return()\nobj.read_bytes()\n```\n\n----------------------------------------\n\nTITLE: Creating PDF Attachment Annotation\nDESCRIPTION: Shows how to create an interactive attachment annotation with a pushpin icon that allows users to view the attached document when clicked.\nSOURCE: https://github.com/pikepdf/pikepdf/blob/main/docs/topics/attachments.rst#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\npdf = Pdf.open('../tests/resources/fourpages.pdf')\n\nfilespec = AttachedFileSpec.from_filepath(pdf, Path('../README.md'))\n\npushpin = Dictionary(\n    Type=Name.Annot,\n    Subtype=Name.FileAttachment,\n    Name=Name.GraphPushPin,\n    FS=filespec.obj,\n    Rect=[2*72, 9*72, 3*72, 10*72],\n)\n\npdf.pages[0].Annots = pdf.make_indirect(Array([\n    pushpin\n]))\n```\n\n----------------------------------------\n\nTITLE: Running QPDF Jobs\nDESCRIPTION: Demonstrates how to execute QPDF commands through pikepdf's Job interface.\nSOURCE: https://github.com/pikepdf/pikepdf/blob/main/docs/tutorial.rst#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom pikepdf import Job\n\nJob(['pikepdf', '--check', '../tests/resources/fourpages.pdf'])\n```\n\n----------------------------------------\n\nTITLE: Creating In-Memory PDF Attachment\nDESCRIPTION: Demonstrates how to create and attach an in-memory file to a PDF document with a specified MIME type.\nSOURCE: https://github.com/pikepdf/pikepdf/blob/main/docs/topics/attachments.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nmemfilespec = AttachedFileSpec(pdf, b'Some text', mime_type='text/plain')\n\npdf.attachments['plain.txt'] = memfilespec\n```\n\n----------------------------------------\n\nTITLE: Installing PikePDF with Pip\nDESCRIPTION: This snippet provides the command to install the pikepdf package using pip. It's suitable for users on Linux, macOS, or Windows with x64 systems. To install the package for the current user, use the \"--user\" flag. No specific prerequisites are required apart from having pip installed.\nSOURCE: https://github.com/pikepdf/pikepdf/blob/main/docs/installation.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install pikepdf\n```\n\n----------------------------------------\n\nTITLE: Using New Attachment API\nDESCRIPTION: Example of using the new attachment API introduced in v3.0.0 for managing PDF attachments.\nSOURCE: https://github.com/pikepdf/pikepdf/blob/main/docs/releasenotes/version3.rst#2025-04-22_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n# New attachment API usage\npdf.open(\"document.pdf\")\n# Add/remove attachments using new API\npdf.save()\n```\n\n----------------------------------------\n\nTITLE: Opening PDF with Allow Overwriting in Python\nDESCRIPTION: Demonstrates how to open a PDF file with pikepdf while allowing overwriting of the input file. This loads the entire PDF into memory for safety.\nSOURCE: https://github.com/pikepdf/pikepdf/blob/main/docs/releasenotes/version1.rst#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\npikepdf.open(...allow_overwriting_input=True)\n```\n\n----------------------------------------\n\nTITLE: Checking PDF for Problems in Python\nDESCRIPTION: Shows how to use the pikepdf.Pdf.check() method to check for problems in a PDF and get a text description of any issues found.\nSOURCE: https://github.com/pikepdf/pikepdf/blob/main/docs/releasenotes/version1.rst#2025-04-22_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nproblems = pdf.check()\n```\n\n----------------------------------------\n\nTITLE: Appending and Extending pikepdf Arrays in Python\nDESCRIPTION: Demonstrates the use of .append() and .extend() methods on pikepdf.Array objects, which now behave similarly to Python lists.\nSOURCE: https://github.com/pikepdf/pikepdf/blob/main/docs/releasenotes/version1.rst#2025-04-22_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\npikepdf_array.append(new_item)\npikepdf_array.extend(new_items)\n```\n\n----------------------------------------\n\nTITLE: Advanced PDF Merge with Version Handling\nDESCRIPTION: Enhanced PDF merge implementation that handles PDF versions and removes unreferenced resources for better optimization.\nSOURCE: https://github.com/pikepdf/pikepdf/blob/main/docs/topics/pages.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom glob import glob\n\npdf = Pdf.new()\n\nversion = pdf.pdf_version\n\nfor file in glob('*.pdf'):\n    src = Pdf.open(file)\n    version = max(version, src.pdf_version)\n    pdf.pages.extend(src.pages)\n\npdf.remove_unreferenced_resources()\n\npdf.save('merged.pdf', min_version=version)\n```\n\n----------------------------------------\n\nTITLE: Installing Pikepdf via pip\nDESCRIPTION: Shows how to install the pikepdf library using pip package manager from PyPI.\nSOURCE: https://github.com/pikepdf/pikepdf/blob/main/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install pikepdf\n```\n\n----------------------------------------\n\nTITLE: Parsing PDF Content Stream Commands\nDESCRIPTION: Shows how to parse a PDF content stream and extract its operators and operands, including matrix transformation information.\nSOURCE: https://github.com/pikepdf/pikepdf/blob/main/docs/topics/content_streams.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nwith pikepdf.open(\"../tests/resources/congress.pdf\") as pdf:\n    page = pdf.pages[0]\n    commands = []\n    for operands, operator in pikepdf.parse_content_stream(page):\n        print(f\"Operands {operands}, operator {operator}\")\n        if operator == pikepdf.Operator('cm'):\n            matrix = pikepdf.Matrix(operands)\n        commands.append([operands, operator])\n```\n\n----------------------------------------\n\nTITLE: Saving Modified PDF\nDESCRIPTION: Shows the commented code for saving the modified PDF to a new file.\nSOURCE: https://github.com/pikepdf/pikepdf/blob/main/docs/_notebooks/pages.ipynb#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# pdf.save('output.pdf')\n```\n\n----------------------------------------\n\nTITLE: Iterating All Objects in a PDF with Python\nDESCRIPTION: Demonstrates how to iterate over all objects in a PDF using the new pikepdf.Pdf.objects property.\nSOURCE: https://github.com/pikepdf/pikepdf/blob/main/docs/releasenotes/version1.rst#2025-04-22_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nfor obj in pdf.objects:\n    # Process each object\n```\n\n----------------------------------------\n\nTITLE: Accessing Page Box Properties in pikepdf\nDESCRIPTION: Shows how to access the trimbox property of a PDF page. This example demonstrates that the Page object will resolve implicit information, returning appropriate values even if the page does not explicitly define them.\nSOURCE: https://github.com/pikepdf/pikepdf/blob/main/docs/topics/page.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> page1.trimbox\npikepdf.Array([ 0, 0, 200, 304 ])\n```\n\n----------------------------------------\n\nTITLE: Using Content Stream API\nDESCRIPTION: Demonstration of the updated content stream API that returns ContentStreamInstruction or ContentStreamInlineImage objects.\nSOURCE: https://github.com/pikepdf/pikepdf/blob/main/docs/releasenotes/version3.rst#2025-04-22_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n# Parse content stream returns list of instructions\ninstructions = parse_content_stream(content)\n\n# Can still use unparse_content_stream with same inputs\nunparse_content_stream(instructions)\n```\n\n----------------------------------------\n\nTITLE: Manual Installation on FreeBSD\nDESCRIPTION: The snippet provides commands for a manual installation process of pikepdf on FreeBSD. Necessary dependencies include python3, py311-lxml, py311-pip, py311-pybind11, and qpdf. The process is confirmed to work on FreeBSD 13.4 and 14.1.\nSOURCE: https://github.com/pikepdf/pikepdf/blob/main/docs/installation.rst#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npkg install python3 py311-lxml py311-pip py311-pybind11 qpdf\npip install --user pikepdf\n```\n\n----------------------------------------\n\nTITLE: Opening PDF with Memory-Mapped Access in Python\nDESCRIPTION: Shows how to open a PDF file using memory-mapped file access for improved performance. This is an opt-in feature that may affect exception handling.\nSOURCE: https://github.com/pikepdf/pikepdf/blob/main/docs/releasenotes/version1.rst#2025-04-22_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\npikepdf.open(...access_mode=pikepdf.AccessMode.mmap)\n```\n\n----------------------------------------\n\nTITLE: DNF-based Installation of PikePDF\nDESCRIPTION: This snippet shows the command to install pikepdf on Fedora systems using the dnf package manager. Dependencies include having dnf configured and updated on your Fedora system.\nSOURCE: https://github.com/pikepdf/pikepdf/blob/main/docs/installation.rst#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndnf install python-pikepdf\n```\n\n----------------------------------------\n\nTITLE: Check PDF/A Conformance Status in Python\nDESCRIPTION: This snippet checks whether a PDF file claims conformance to PDF/A specifications using PikePDF. The property 'pdfa_status' is accessed from the metadata, and external tools are recommended for thorough verification.\nSOURCE: https://github.com/pikepdf/pikepdf/blob/main/docs/topics/metadata.rst#2025-04-22_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n>>> pdf = pikepdf.open('../tests/resources/veraPDF test suite 6-2-10-t02-pass-a.pdf')\n\n>>> meta = pdf.open_metadata()\n\n>>> meta.pdfa_status\n'1B'\n```\n\n----------------------------------------\n\nTITLE: Demonstrating pikepdf.Name Object in Python\nDESCRIPTION: This snippet shows how to create and inspect a pikepdf.Name object, which is used for keys in PDF Dictionary objects. It demonstrates that pikepdf.Name is both an instance of pikepdf.Name and pikepdf.Object.\nSOURCE: https://github.com/pikepdf/pikepdf/blob/main/docs/topics/objects.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> catalog_name = pdf.Root.Type\npikepdf.Name(\"/Catalog\")\n>>> isinstance(catalog_name, pikepdf.Name)\nTrue\n>>> isinstance(catalog_name, pikepdf.Object)\nTrue\n```\n\n----------------------------------------\n\nTITLE: Getting PDF Page Count\nDESCRIPTION: Shows how to get the total number of pages in a PDF document using len() on pdf.pages.\nSOURCE: https://github.com/pikepdf/pikepdf/blob/main/docs/_notebooks/pages.ipynb#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nlen(pdf.pages)\n```\n\n----------------------------------------\n\nTITLE: PikePDF Data Structures Documentation\nDESCRIPTION: Documentation for PikePDF's common data structures including Matrix and Rectangle classes with their special methods.\nSOURCE: https://github.com/pikepdf/pikepdf/blob/main/docs/api/main.rst#2025-04-22_snippet_3\n\nLANGUAGE: rst\nCODE:\n```\n.. autoapiclass:: pikepdf.Matrix\n    :members:\n    :special-members: __init__, __matmul__, __array__\n\n.. autoapiclass:: pikepdf.Rectangle\n    :members:\n    :special-members: __init__, __and__\n```\n\n----------------------------------------\n\nTITLE: Accessing Stream Object Properties in Python\nDESCRIPTION: Shows how to use .keys() and .items() methods on pikepdf.Stream objects, allowing easier access to stream properties.\nSOURCE: https://github.com/pikepdf/pikepdf/blob/main/docs/releasenotes/version1.rst#2025-04-22_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nstream_keys = pikepdf_stream.keys()\nstream_items = pikepdf_stream.items()\n```\n\n----------------------------------------\n\nTITLE: Access Document Info Dictionary Directly in Python\nDESCRIPTION: This code block demonstrates accessing a PDF's Document Info dictionary, an older metadata form, using PikePDF. It involves opening the PDF and printing the dictionary content. PikePDF must be installed, and the PDF should be available.\nSOURCE: https://github.com/pikepdf/pikepdf/blob/main/docs/topics/metadata.rst#2025-04-22_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\n>>> pdf = pikepdf.open('../tests/resources/sandwich.pdf')\n\n>>> pdf.docinfo\npikepdf.Dictionary({\n  \"/CreationDate\": \"D:20170911132748-07'00'\",\n  \"/Creator\": \"ocrmypdf 5.3.3 / Tesseract OCR-PDF 3.05.01\",\n  \"/ModDate\": \"D:20170911132748-07'00'\",\n  \"/Producer\": \"GPL Ghostscript 9.21\"\n})\n```\n\n----------------------------------------\n\nTITLE: Using PDF Min Version Save Method\nDESCRIPTION: Example of saving a PDF with an invalid minimum version specification. The behavior changed in newer versions of libqpdf to ignore invalid versions rather than raise exceptions.\nSOURCE: https://github.com/pikepdf/pikepdf/blob/main/docs/releasenotes/version1.rst#2025-04-22_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nPdf.save(..., min_version='invalid')\n```\n\n----------------------------------------\n\nTITLE: Accessing Page Properties\nDESCRIPTION: Shows how to access specific page properties like MediaBox using array indexing.\nSOURCE: https://github.com/pikepdf/pikepdf/blob/main/docs/_notebooks/pages.ipynb#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\npdf.pages[-1].MediaBox\n```\n\n----------------------------------------\n\nTITLE: Installing pikepdf Against User Libraries with Custom Compiler Flags - Bash\nDESCRIPTION: Illustrates how to install the pikepdf Python package while specifying custom include and library paths, such as when linking against a locally built copy of qpdf instead of system libraries. This requires that qpdf and its development headers are installed in non-system locations. The key environment variables 'CXXFLAGS' and 'LDFLAGS' are set to direct the build process, and the command assumes usage of a Unix shell with 'pip' available in the Python environment.\nSOURCE: https://github.com/pikepdf/pikepdf/blob/main/docs/source_build.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nenv CXXFLAGS=-I/usr/local/include/libqpdf LDFLAGS=-L/usr/local/lib  \\\n    pip install .\n```\n\n----------------------------------------\n\nTITLE: Read Raw XMP Metadata Bytes in Python\nDESCRIPTION: This example illustrates how to read raw XMP metadata directly from a PDF using PikePDF. It shows reading and displaying the metadata bytes as a string. Dependencies include PikePDF and the file must be accessible.\nSOURCE: https://github.com/pikepdf/pikepdf/blob/main/docs/topics/metadata.rst#2025-04-22_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n>>> xmp = pdf.Root.Metadata.read_bytes()\n\n>>> type(xmp)\n<class 'bytes'>\n\n>>> print(xmp.decode()[:len(\"<?xpacket\")] + \"...\")\n<?xpacket...\n```\n\n----------------------------------------\n\nTITLE: APK-based Installation of PikePDF\nDESCRIPTION: This snippet provides the command to install the pikepdf library on Alpine Linux using the apk package manager. Make sure the Alpine Edge repository is enabled and the package manager is properly configured.\nSOURCE: https://github.com/pikepdf/pikepdf/blob/main/docs/installation.rst#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\napk add py3-pikepdf\n```\n\n----------------------------------------\n\nTITLE: PikePDF Internal Objects Documentation\nDESCRIPTION: Documentation for internal PikePDF objects including PageList, _ObjectList, and ObjectType classes.\nSOURCE: https://github.com/pikepdf/pikepdf/blob/main/docs/api/main.rst#2025-04-22_snippet_5\n\nLANGUAGE: rst\nCODE:\n```\n.. autoapiclass:: pikepdf._core.PageList\n    :members:\n\n.. autoapiclass:: pikepdf._core._ObjectList\n    :members:\n\n.. autoapiclass:: pikepdf.ObjectType\n    :members:\n```\n\n----------------------------------------\n\nTITLE: APT-based Installation of PikePDF\nDESCRIPTION: This snippet provides the command to install pikepdf using the apt package manager, catering to Debian, Ubuntu, and other APT-based distributions. Ensure the package manager is updated to its latest version for optimal compatibility.\nSOURCE: https://github.com/pikepdf/pikepdf/blob/main/docs/installation.rst#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\napt install pikepdf\n```\n\n----------------------------------------\n\nTITLE: Installing PikePDF on FreeBSD\nDESCRIPTION: The snippet shows how to install pikepdf on FreeBSD 13.4 and 14.1 using the pkg package manager. This involves installing dependencies like python3 and specific versions of py-pikepdf and pip.\nSOURCE: https://github.com/pikepdf/pikepdf/blob/main/docs/installation.rst#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npkg install py311-pikepdf\n```\n\n----------------------------------------\n\nTITLE: PikePDF Main Function Aliases\nDESCRIPTION: Documentation for pikepdf.open and pikepdf.new functions that are aliases for corresponding Pdf class methods.\nSOURCE: https://github.com/pikepdf/pikepdf/blob/main/docs/api/main.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. function:: pikepdf.open\n\n    Alias for :meth:`pikepdf.Pdf.open`.\n\n.. function:: pikepdf.new\n\n    Alias for :meth:`pikepdf.Pdf.new`.\n```\n\n----------------------------------------\n\nTITLE: Accessing PDF Object\nDESCRIPTION: Demonstrates accessing the PDF object for inspection in IPython environment.\nSOURCE: https://github.com/pikepdf/pikepdf/blob/main/docs/_notebooks/pages.ipynb#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\npdf\n```\n\n----------------------------------------\n\nTITLE: Building pikepdf and qpdf from Source with Virtual Environment Setup - Bash\nDESCRIPTION: Demonstrates a full build workflow on Unix-like systems to compile qpdf from source and build pikepdf against it, using a dedicated Python virtual environment for isolation. The snippet involves building qpdf with CMake, capturing its library build path, and then activating a Python environment before running an editable install of pikepdf using paths to the freshly built qpdf. Users must have Python 3, CMake, and typical build tools installed.\nSOURCE: https://github.com/pikepdf/pikepdf/blob/main/docs/source_build.rst#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Build libqpdf from source\ncd $QPDF_SOURCE_TREE\ncmake -S . -B build -DCMAKE_BUILD_TYPE=RelWithDebInfo -DBUILD_SHARED_LIBS=ON\ncmake --build build --parallel --target libqpdf\nQPDF_BUILD_LIBDIR=$PWD/build/libqpdf\n\n# Create a fresh virtual environment\ncd $PIKEPDF_SOURCE_TREE\npython3 -m venv .venv\nsource .venv/bin/activate\n\n# Build pikepdf from source\nenv QPDF_SOURCE_TREE=$QPDF_SOURCE_TREE QPDF_BUILD_LIBDIR=$QPDF_BUILD_LIBDIR \\\n    pip install -e .\n```\n\n----------------------------------------\n\nTITLE: Profiling pikepdf with py-spy and speedscope\nDESCRIPTION: Commands to install py-spy and speedscope, then use them to profile pikepdf performance. This approach can profile both Python and C++ code execution times with symbol name demangling.\nSOURCE: https://github.com/pikepdf/pikepdf/blob/main/docs/references/debugging.rst#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# From a virtual environment with pikepdf installed...\n\n# Install\npip install py-spy\nnpm install -g speedscope  # may need sudo to install this\n\n# Run profile on a script that executes some pikepdf code we want to profile\npy-spy record --native --format speedscope -o profile.speedscope -- python some_script.py\n\n# View results (this will open a browser window)\nspeedscope profile.speedscope\n```\n\n----------------------------------------\n\nTITLE: PikePDF Object Construction Documentation\nDESCRIPTION: Documentation structure for PikePDF's object construction classes including Object, Name, String, Array, Dictionary, Stream, and Operator.\nSOURCE: https://github.com/pikepdf/pikepdf/blob/main/docs/api/main.rst#2025-04-22_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n.. autoapiclass:: pikepdf.Object\n    :members:\n    :special-members:\n\n.. autoapiclass:: pikepdf.Name\n    :members: random\n    :special-members: __new__\n\n.. autoapiclass:: pikepdf.String\n    :members: __new__\n\n.. autoapiclass:: pikepdf.Array\n    :members: __new__\n\n.. autoapiclass:: pikepdf.Dictionary\n    :members: __new__\n\n.. autoapiclass:: pikepdf.Stream\n    :members: __new__\n\n.. autoapiclass:: pikepdf.Operator\n    :members: __new__\n```\n\n----------------------------------------\n\nTITLE: PikePDF Content Stream Elements Documentation\nDESCRIPTION: Documentation structure for content stream related classes including ContentStreamInstruction and ContentStreamInlineImage.\nSOURCE: https://github.com/pikepdf/pikepdf/blob/main/docs/api/main.rst#2025-04-22_snippet_4\n\nLANGUAGE: rst\nCODE:\n```\n.. autoapiclass:: pikepdf.ContentStreamInstruction\n    :members:\n\n.. autoapiclass:: pikepdf.ContentStreamInlineImage\n    :members:\n```\n\n----------------------------------------\n\nTITLE: C++ Python Module Import Example\nDESCRIPTION: Shows the convention for importing Python modules in C++ code while maintaining Python naming conventions.\nSOURCE: https://github.com/pikepdf/pikepdf/blob/main/docs/references/contributing.rst#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nauto Decimal = py::module_::import(\"decimal\").attr(\"Decimal\")\n```\n\n----------------------------------------\n\nTITLE: Referencing pikepdf Security Classes\nDESCRIPTION: Code references showing the key pikepdf classes and attributes used for implementing PDF security, including Permissions class and password matching properties.\nSOURCE: https://github.com/pikepdf/pikepdf/blob/main/docs/topics/security.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npikepdf.Permissions\npikepdf.Pdf.user_password_matched\npikepdf.Pdf.owner_password_matched\npikepdf.Pdf.save()\n```\n\n----------------------------------------\n\nTITLE: Defining Pikepdf Exception Classes in RST\nDESCRIPTION: RST documentation blocks that define the exception classes for the pikepdf library. These exceptions handle various error conditions like password errors, parsing issues, and image processing problems.\nSOURCE: https://github.com/pikepdf/pikepdf/blob/main/docs/api/exceptions.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoapiexception:: pikepdf.exceptions.PdfError\n\n.. autoapiexception:: pikepdf.exceptions.PasswordError\n\n.. autoapiexception:: pikepdf.exceptions.ForeignObjectError\n\n.. autoapiexception:: pikepdf.exceptions.OutlineStructureError\n\n.. autoapiexception:: pikepdf.exceptions.UnsupportedImageTypeError\n\n.. autoapiexception:: pikepdf.exceptions.HifiPrintImageNotTranscodableError\n\n.. autoapiexception:: pikepdf.exceptions.InvalidPdfImageError\n\n.. autoapiexception:: pikepdf.exceptions.DataDecodingError\n\n.. autoapiexception:: pikepdf.exceptions.DeletedObjectError\n\n.. autoapiexception:: pikepdf.exceptions.DependencyError\n\n.. autoapiexception:: pikepdf.exceptions.PdfParsingError\n\n.. autoapiexception:: pikepdf.exceptions.JobUsageError\n\n.. autoapiexception:: pikepdf.exceptions.ImageDecompressionError\n```\n\n----------------------------------------\n\nTITLE: Building qpdf and Setting Up pikepdf Environment on Windows - PowerShell\nDESCRIPTION: Shows a multi-step process for building qpdf with CMake and preparing the pikepdf environment in Windows. Highlights setting environment variables for include and library directories, copying the freshly built DLL for Python's dynamic loader, creating a virtual environment, and installing pikepdf in editable mode. Requires administrative permissions, Visual Studio C++, and CMake installed in the environment.\nSOURCE: https://github.com/pikepdf/pikepdf/blob/main/docs/source_build.rst#2025-04-22_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\ncd $qpdf\ncmake -S . -B build\ncmake --build build --config Release\n\ncd $pikepdf\n$env:INCLUDE = \"$qpdf\\include\"\n$env:LIB = \"$qpdf\\build\\libqpdf\\Release\\\"\ncp $LIB\\libqpdfXX.dll src\\pikepdf  # Help Python loader find libqpdf.dll\npython -m venv .venv\n.venv\\scripts\\activate\npip install -e .\n```\n\n----------------------------------------\n\nTITLE: Python String Style Example\nDESCRIPTION: Demonstrates the project's string quotation convention where user-facing strings use double quotes and internal strings use single quotes.\nSOURCE: https://github.com/pikepdf/pikepdf/blob/main/docs/references/contributing.rst#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n\"user facing string\"  # For strings shown to users\n'internal_string'    # For internal usage\n```\n\n----------------------------------------\n\nTITLE: Changing QPDF Library Path in pikepdf Binary Extension on macOS\nDESCRIPTION: Command to permanently modify the pikepdf extension module to use a custom QPDF library on macOS using install_name_tool, eliminating the need to set DYLD_LIBRARY_PATH.\nSOURCE: https://github.com/pikepdf/pikepdf/blob/main/docs/references/debugging.rst#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ninstall_name_tool -change /usr/local/lib/libqpdf*.dylib \\\n    $QPDF_BUILD_LIBDIR/libqpdf*.dylib \\\n    src/pikepdf/_core.cpython*.so\n```\n\n----------------------------------------\n\nTITLE: Downloading and Extracting qpdf External Libraries - PowerShell\nDESCRIPTION: Automates the process of downloading precompiled external binary dependencies required by qpdf and preparing them for use on Windows. The script uses PowerShell commands to fetch a ZIP archive for a given release version and expands its contents to the current directory. Requires PowerShell and network access to download binaries from GitHub.\nSOURCE: https://github.com/pikepdf/pikepdf/blob/main/docs/source_build.rst#2025-04-22_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nwget https://github.com/qpdf/external-libs/releases/download/release-$version/qpdf-external-libs-bin.zip -Outfile libs.zip\nexpand-archive -path libs.zip -destinationpath .\n```\n\n----------------------------------------\n\nTITLE: Building Sphinx Documentation for pikepdf - Bash\nDESCRIPTION: Describes the steps to build the HTML documentation for pikepdf using Sphinx. The user must first install documentation requirements via pip with the 'docs' extra, change into the documentation directory, and then invoke the 'make html' command. Assumes the user has a functioning Python environment and make utility.\nSOURCE: https://github.com/pikepdf/pikepdf/blob/main/docs/source_build.rst#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npip install pikepdf[docs]\ncd docs\nmake html\n```\n\n----------------------------------------\n\nTITLE: Configuring Visual Studio Environment for pikepdf Compilation - Batch\nDESCRIPTION: Prepares a Windows command prompt environment for building pikepdf with Visual Studio 2015, ensuring the correct compiler version is used. The script sets up environment variables required by distutils and initiates the compiler environment via vcvarsall.bat. This step is necessary for compatibility with precompiled qpdf binaries and proper Python extension building on Windows.\nSOURCE: https://github.com/pikepdf/pikepdf/blob/main/docs/source_build.rst#2025-04-22_snippet_1\n\nLANGUAGE: bat\nCODE:\n```\n%VS140COMNTOOLS%\\..\\..\\VC\\vcvarsall.bat\" x64\nset DISTUTILS_USE_SDK=1\nset MSSdk=1\n```\n\n----------------------------------------\n\nTITLE: Setting Linux LD_LIBRARY_PATH for Custom QPDF Library\nDESCRIPTION: Command for Linux systems to use a custom-built QPDF library by setting the LD_LIBRARY_PATH environment variable to point to the directory containing the custom libqpdf.so.\nSOURCE: https://github.com/pikepdf/pikepdf/blob/main/docs/references/debugging.rst#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Linux\nenv LD_LIBRARY_PATH=<directory containing libqpdf.so> python ...\n```\n\n----------------------------------------\n\nTITLE: Building pikepdf against Custom QPDF Source\nDESCRIPTION: Command to build pikepdf's C++ extension against a custom QPDF build using environment variables to specify the QPDF source tree and library location.\nSOURCE: https://github.com/pikepdf/pikepdf/blob/main/docs/references/debugging.rst#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nenv QPDF_SOURCE_TREE=<location of qpdf> \\\n  QPDF_BUILD_LIBDIR=<directory containing libqpdf.so> \\\n  python setup.py build_ext --inplace\n```\n\n----------------------------------------\n\nTITLE: Enabling QPDF Tracing with Environment Variables\nDESCRIPTION: Command to enable debug logging in the QPDF library by setting TC_SCOPE and TC_FILENAME environment variables. This requires QPDF to be built with ENABLE_QTC=ON.\nSOURCE: https://github.com/pikepdf/pikepdf/blob/main/docs/references/debugging.rst#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nenv TC_SCOPE=qpdf TC_FILENAME=libqpdf_log.txt python my_pikepdf_script.py\n```\n\n----------------------------------------\n\nTITLE: Setting macOS DYLD_LIBRARY_PATH for Custom QPDF Library\nDESCRIPTION: Command for macOS systems to use a custom-built QPDF library by setting the DYLD_LIBRARY_PATH environment variable, which may require disabling System Integrity Protection.\nSOURCE: https://github.com/pikepdf/pikepdf/blob/main/docs/references/debugging.rst#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# macOS - may require disabling System Integrity Protection\nenv DYLD_LIBRARY_PATH=<directory containing libqpdf.so> python ...\n```\n\n----------------------------------------\n\nTITLE: PikePDF Class Documentation Structure\nDESCRIPTION: ReStructuredText directives for documenting various PikePDF classes including access modes, object types, and data structures.\nSOURCE: https://github.com/pikepdf/pikepdf/blob/main/docs/api/main.rst#2025-04-22_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. autoapiclass:: pikepdf.ObjectStreamMode\n    :members:\n\n.. autoapiclass:: pikepdf.StreamDecodeLevel\n    :members:\n\n.. autoapiclass:: pikepdf.Encryption\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Declaring Sphinx Documentation Dependencies in requirements File - Plain Text\nDESCRIPTION: This snippet lists required dependencies for building documentation with Sphinx in a requirements-style plain text file. It includes Sphinx, several Sphinx extensions for auto API documentation, issue linking, and design integration, a Read the Docs theme, and tomli for Python versions below 3.11. The file is designed to be used by dependency managers like pip to install all necessary documentation-related packages, especially on platforms like Read the Docs that may not process metadata in pyproject.toml files.\nSOURCE: https://github.com/pikepdf/pikepdf/blob/main/docs/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: plain text\nCODE:\n```\n# This is provided for the benefit of readthedocs.org, which cannot\\n# yet read pyproject.toml to obtain what\\n# pip install pikepdf[docs] would install.\\n\\nSphinx >= 3\\nsphinx-autoapi >= 3\\nsphinx-issues\\nsphinx-design\\nsphinx-rtd-theme\\ntomli; python_version < '3.11'\n```\n\n----------------------------------------\n\nTITLE: Source Code Form License Notice\nDESCRIPTION: Standard MPL 2.0 license notice text that must be included in source code files\nSOURCE: https://github.com/pikepdf/pikepdf/blob/main/LICENSES/MPL-2.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nThis Source Code Form is subject to the terms of the Mozilla Public\\nLicense, v. 2.0. If a copy of the MPL was not distributed with this\\nfile, You can obtain one at https://mozilla.org/MPL/2.0/.\n```\n\n----------------------------------------\n\nTITLE: PDF File Structure Reference\nDESCRIPTION: Reference to struct FILE type that caused build issues on Alpine Linux due to musl-libc defining it as an incomplete type, affecting pybind11 metaprogramming.\nSOURCE: https://github.com/pikepdf/pikepdf/blob/main/docs/releasenotes/version1.rst#2025-04-22_snippet_7\n\nLANGUAGE: C++\nCODE:\n```\nstruct FILE\n```\n\n----------------------------------------\n\nTITLE: Defining Git Attribute Variables for Version Information in pikepdf\nDESCRIPTION: These Git attribute variables are used to track version information in the pikepdf project. When substituted by Git, they provide commit hash, commit date, descriptive tag information, and reference names.\nSOURCE: https://github.com/pikepdf/pikepdf/blob/main/.git_archival.txt#2025-04-22_snippet_0\n\nLANGUAGE: git\nCODE:\n```\nnode: $Format:%H$\nnode-date: $Format:%cI$\ndescribe-name: $Format:%(describe:tags=true)$\nref-names: $Format:%D$\n```\n\n----------------------------------------\n\nTITLE: RST Table of Contents Configuration\nDESCRIPTION: Sphinx/RST configuration for displaying version-related documentation files. Uses glob pattern to include all version* files in reverse chronological order.\nSOURCE: https://github.com/pikepdf/pikepdf/blob/main/docs/releasenotes/index.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n  :maxdepth: 1\n  :glob:\n  :reversed:\n\n  version*\n```\n\n----------------------------------------\n\nTITLE: Compiling a Debug Build of QPDF with CMake\nDESCRIPTION: Commands to build QPDF from source with debugging symbols enabled using CMake. The ENABLE_QTC option enables additional debugging features, and CMAKE_BUILD_TYPE=Debug ensures debug symbols are included.\nSOURCE: https://github.com/pikepdf/pikepdf/blob/main/docs/references/debugging.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# in qpdf source tree\ncd $QPDF_SOURCE_TREE\ncmake -S . -B build -DENABLE_QTC=ON -DCMAKE_BUILD_TYPE=Debug\ncmake --build build -j\n```\n\n----------------------------------------\n\nTITLE: Defining sphlib 3.0 License Terms\nDESCRIPTION: This code snippet outlines the license terms for the sha2 code from sphlib 3.0, which is used in the project. It grants permission to use, modify, and distribute the software under certain conditions.\nSOURCE: https://github.com/pikepdf/pikepdf/blob/main/licenses-for-wheels.txt#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nCopyright (c) 2007-2011  Projet RNRT SAPHIR\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be included\nin all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n```\n\n----------------------------------------\n\nTITLE: MPL Source Code License Notice Template\nDESCRIPTION: Standard notice text to be included in source code files to indicate they are licensed under MPL 2.0.\nSOURCE: https://github.com/pikepdf/pikepdf/blob/main/licenses-for-wheels.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nThis Source Code Form is subject to the terms of the Mozilla Public\\nLicense, v. 2.0. If a copy of the MPL was not distributed with this\\nfile, You can obtain one at http://mozilla.org/MPL/2.0/.\n```\n\n----------------------------------------\n\nTITLE: Incompatible With Secondary Licenses Notice\nDESCRIPTION: Notice text for marking source code as incompatible with secondary licenses under MPL 2.0\nSOURCE: https://github.com/pikepdf/pikepdf/blob/main/LICENSES/MPL-2.0.txt#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nThis Source Code Form is \"Incompatible With Secondary Licenses\", as\\ndefined by the Mozilla Public License, v. 2.0.\n```\n\n----------------------------------------\n\nTITLE: RST Figure Directive\nDESCRIPTION: RST figure directive configuration for displaying a pike fish release image with alignment and width settings.\nSOURCE: https://github.com/pikepdf/pikepdf/blob/main/docs/releasenotes/index.rst#2025-04-22_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. figure:: /images/pike-release.jpg\n    :figwidth: 30%\n    :alt: pike fish being released to water\n    :align: right\n\n    Releasing a pike.\n```\n\n----------------------------------------\n\nTITLE: Source Code Form License Notice Template\nDESCRIPTION: Standard notice text to be included in source code files to indicate MPL 2.0 licensing.\nSOURCE: https://github.com/pikepdf/pikepdf/blob/main/LICENSE.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nThis Source Code Form is subject to the terms of the Mozilla Public\nLicense, v. 2.0. If a copy of the MPL was not distributed with this\nfile, You can obtain one at http://mozilla.org/MPL/2.0/.\n```\n\n----------------------------------------\n\nTITLE: MPL Secondary License Incompatibility Notice\nDESCRIPTION: Notice text indicating that the source code is incompatible with secondary licenses under MPL 2.0.\nSOURCE: https://github.com/pikepdf/pikepdf/blob/main/licenses-for-wheels.txt#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nThis Source Code Form is \"Incompatible With Secondary Licenses\", as\\ndefined by the Mozilla Public License, v. 2.0.\n```\n\n----------------------------------------\n\nTITLE: GNU FDL Copyright Notice Template\nDESCRIPTION: Standard copyright notice template for applying the GNU Free Documentation License to a document, specifying permissions for copying, distribution and modification.\nSOURCE: https://github.com/pikepdf/pikepdf/blob/main/LICENSES/GFDL-1.2-or-later.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nCopyright (c) YEAR YOUR NAME. Permission is granted to copy, distribute and/or modify this document under the terms of the GNU Free Documentation License, Version 1.2 or any later version published by the Free Software Foundation; with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts. A copy of the license is included in the section entitled \"GNU Free Documentation License\".\n```\n\n----------------------------------------\n\nTITLE: Incompatible With Secondary Licenses Notice\nDESCRIPTION: Notice text indicating that the source code is incompatible with secondary licenses under MPL 2.0.\nSOURCE: https://github.com/pikepdf/pikepdf/blob/main/LICENSE.txt#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nThis Source Code Form is \"Incompatible With Secondary Licenses\", as\ndefined by the Mozilla Public License, v. 2.0.\n```"
  }
]