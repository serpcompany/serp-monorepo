[
  {
    "owner": "react-native-async-storage",
    "repo": "async-storage",
    "content": "TITLE: Storing Data with setItem in React Native AsyncStorage\nDESCRIPTION: Shows how to store string values in AsyncStorage using the setItem method. For storing objects, they must first be serialized using JSON.stringify(). Returns a Promise that resolves when the operation completes.\nSOURCE: https://github.com/react-native-async-storage/async-storage/blob/main/packages/website/docs/API.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nstatic setItem(key: string, value: string, [callback]: ?(error: ?Error) => void): Promise\n```\n\nLANGUAGE: javascript\nCODE:\n```\nsetStringValue = async (value) => {\n  try {\n    await AsyncStorage.setItem('key', value)\n  } catch(e) {\n    // save error\n  }\n\n  console.log('Done.')\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nsetObjectValue = async (value) => {\n  try {\n    const jsonValue = JSON.stringify(value)\n    await AsyncStorage.setItem('key', jsonValue)\n  } catch(e) {\n    // save error\n  }\n\n  console.log('Done.')\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Data with getItem in React Native AsyncStorage\nDESCRIPTION: Demonstrates how to retrieve string values from AsyncStorage using the getItem method. The method returns a Promise that resolves to the stored value for a given key, or null if the key doesn't exist.\nSOURCE: https://github.com/react-native-async-storage/async-storage/blob/main/packages/website/docs/API.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nstatic getItem(key: string, [callback]: ?(error: ?Error, result: ?string) => void): Promise\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngetMyStringValue = async () => {\n  try {\n    return await AsyncStorage.getItem('@key')\n  } catch(e) {\n    // read error\n  }\n\n  console.log('Done.')\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngetMyObject = async () => {\n  try {\n    const jsonValue = await AsyncStorage.getItem('@key')\n    return jsonValue != null ? JSON.parse(jsonValue) : null\n  } catch(e) {\n    // read error\n  }\n\n  console.log('Done.')\n}\n```\n\n----------------------------------------\n\nTITLE: Storing String Data in AsyncStorage\nDESCRIPTION: Demonstrates how to store a simple string value in AsyncStorage using setItem() with error handling.\nSOURCE: https://github.com/react-native-async-storage/async-storage/blob/main/packages/website/docs/Usage.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst storeData = async (value) => {\n  try {\n    await AsyncStorage.setItem('my-key', value);\n  } catch (e) {\n    // saving error\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Importing AsyncStorage in React Native\nDESCRIPTION: Shows how to import the AsyncStorage library from the React Native community package.\nSOURCE: https://github.com/react-native-async-storage/async-storage/blob/main/packages/website/docs/Usage.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n```\n\n----------------------------------------\n\nTITLE: Storing Object Data in AsyncStorage with JSON Serialization\nDESCRIPTION: Shows how to store an object in AsyncStorage by first converting it to a JSON string. The example includes error handling and uses async/await syntax.\nSOURCE: https://github.com/react-native-async-storage/async-storage/blob/main/packages/website/docs/Usage.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst storeData = async (value) => {\n  try {\n    const jsonValue = JSON.stringify(value);\n    await AsyncStorage.setItem('my-key', jsonValue);\n  } catch (e) {\n    // saving error\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Reading String Data from AsyncStorage\nDESCRIPTION: Demonstrates how to retrieve a string value from AsyncStorage using getItem(). It includes null checking and error handling.\nSOURCE: https://github.com/react-native-async-storage/async-storage/blob/main/packages/website/docs/Usage.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst getData = async () => {\n  try {\n    const value = await AsyncStorage.getItem('my-key');\n    if (value !== null) {\n      // value previously stored\n    }\n  } catch (e) {\n    // error reading value\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing useAsyncStorage in a React Native Component\nDESCRIPTION: This example demonstrates how to use the useAsyncStorage hook in a React Native component. It shows reading from and writing to AsyncStorage, as well as updating the component state based on the stored value.\nSOURCE: https://github.com/react-native-async-storage/async-storage/blob/main/packages/website/docs/API.md#2025-04-22_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState, useEffect } from 'react';\nimport { View, Text, TouchableOpacity } from 'react-native';\nimport { useAsyncStorage } from '@react-native-async-storage/async-storage';\n\nexport default function App() {\n  const [value, setValue] = useState('value');\n  const { getItem, setItem } = useAsyncStorage('@storage_key');\n\n  const readItemFromStorage = async () => {\n    const item = await getItem();\n    setValue(item);\n  };\n\n  const writeItemToStorage = async newValue => {\n    await setItem(newValue);\n    setValue(newValue);\n  };\n\n  useEffect(() => {\n    readItemFromStorage();\n  }, []);\n\n  return (\n    <View style={{ margin: 40 }}>\n      <Text>Current value: {value}</Text>\n      <TouchableOpacity\n        onPress={() =>\n          writeItemToStorage(\n            Math.random()\n              .toString(36)\n              .substr(2, 5)\n          )\n        }\n      >\n        <Text>Update value</Text>\n      </TouchableOpacity>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining useAsyncStorage Hook Signature in JavaScript\nDESCRIPTION: This snippet shows the TypeScript-like signature of the useAsyncStorage hook. It returns an object with methods for interacting with stored values, including getItem, setItem, mergeItem, and removeItem.\nSOURCE: https://github.com/react-native-async-storage/async-storage/blob/main/packages/website/docs/API.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nstatic useAsyncStorage(key: string): {\n  getItem: (\n    callback?: ?(error: ?Error, result: string | null) => void,\n  ) => Promise<string | null>,\n  setItem: (\n    value: string,\n    callback?: ?(error: ?Error) => void,\n  ) => Promise<null>,\n  mergeItem: (\n    value: string,\n    callback?: ?(error: ?Error) => void,\n  ) => Promise<null>,\n  removeItem: (callback?: ?(error: ?Error) => void) => Promise<null>,\n}\n```\n\n----------------------------------------\n\nTITLE: Clearing All Data with clear in React Native AsyncStorage\nDESCRIPTION: Demonstrates how to remove all data from AsyncStorage using the clear method. This operation removes all key-value pairs for all clients and applications, not just for the calling application.\nSOURCE: https://github.com/react-native-async-storage/async-storage/blob/main/packages/website/docs/API.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nstatic clear([callback]: ?(error: ?Error) => void): Promise\n```\n\nLANGUAGE: javascript\nCODE:\n```\nclearAll = async () => {\n  try {\n    await AsyncStorage.clear()\n  } catch(e) {\n    // clear error\n  }\n\n  console.log('Done.')\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Keys with getAllKeys in React Native AsyncStorage\nDESCRIPTION: Shows how to get all keys stored in AsyncStorage using the getAllKeys method. Returns a Promise that resolves to an array of all keys known to the application.\nSOURCE: https://github.com/react-native-async-storage/async-storage/blob/main/packages/website/docs/API.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nstatic getAllKeys([callback]: ?(error: ?Error, keys: ?Array<string>) => void): Promise\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngetAllKeys = async () => {\n  let keys = []\n  try {\n    keys = await AsyncStorage.getAllKeys()\n  } catch(e) {\n    // read key error\n  }\n\n  console.log(keys)\n  // example console.log result:\n  // ['@MyApp_user', '@MyApp_key']\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Data with removeItem in React Native AsyncStorage\nDESCRIPTION: Shows how to remove a single item from AsyncStorage using the removeItem method. This operation deletes the value associated with a specific key and returns a Promise that resolves when completed.\nSOURCE: https://github.com/react-native-async-storage/async-storage/blob/main/packages/website/docs/API.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nstatic removeItem(key: string, [callback]: ?(error: ?Error) => void): Promise\n```\n\nLANGUAGE: javascript\nCODE:\n```\nremoveValue = async () => {\n  try {\n    await AsyncStorage.removeItem('@MyApp_key')\n  } catch(e) {\n    // remove error\n  }\n\n  console.log('Done.')\n}\n```\n\n----------------------------------------\n\nTITLE: Merging Data with mergeItem in React Native AsyncStorage\nDESCRIPTION: Demonstrates how to merge an existing JSON value with a new one using the mergeItem method. This operation performs a shallow merge of objects, combining their properties while preserving nested structure.\nSOURCE: https://github.com/react-native-async-storage/async-storage/blob/main/packages/website/docs/API.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nstatic mergeItem(key: string, value: string, [callback]: ?(error: ?Error) => void): Promise\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst USER_1 = {\n  name: 'Tom',\n  age: 20,\n  traits: {\n    hair: 'black',\n    eyes: 'blue'\n  }\n}\n\nconst USER_2 = {\n  name: 'Sarah',\n  age: 21,\n  hobby: 'cars',\n  traits: {\n    eyes: 'green',\n  }\n}\n\n\nmergeUsers = async () => {\n  try {\n    //save first user\n    await AsyncStorage.setItem('@MyApp_user', JSON.stringify(USER_1))\n\n    // merge USER_2 into saved USER_1\n    await AsyncStorage.mergeItem('@MyApp_user', JSON.stringify(USER_2))\n\n    // read merged item\n    const currentUser = await AsyncStorage.getItem('@MyApp_user')\n\n    console.log(currentUser)\n\n    // console.log result:\n    // {\n    //   name: 'Sarah',\n    //   age: 21,\n    //   hobby: 'cars',\n    //   traits: {\n    //     eyes: 'green',\n    //     hair: 'black'\n    //   }\n    // }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Batch Storage with multiSet in React Native AsyncStorage\nDESCRIPTION: Shows how to store multiple key-value pairs in a single operation using the multiSet method. Accepts an array of [key, value] pairs and returns a Promise that resolves when the operation completes.\nSOURCE: https://github.com/react-native-async-storage/async-storage/blob/main/packages/website/docs/API.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nstatic multiSet(keyValuePairs: Array<Array<string>>, [callback]: ?(errors: ?Array<Error>) => void): Promise\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmultiSet = async () => {\n  const firstPair = [\"@MyApp_user\", \"value_1\"]\n  const secondPair = [\"@MyApp_key\", \"value_2\"]\n  try {\n    await AsyncStorage.multiSet([firstPair, secondPair])\n  } catch(e) {\n    //save error\n  }\n\n  console.log(\"Done.\")\n}\n```\n\n----------------------------------------\n\nTITLE: Batch Merging with multiMerge in React Native AsyncStorage\nDESCRIPTION: Demonstrates how to merge multiple key-value pairs in a single operation using multiMerge. This method performs JSON-based merging for multiple keys simultaneously, preserving object structure.\nSOURCE: https://github.com/react-native-async-storage/async-storage/blob/main/packages/website/docs/API.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nstatic multiMerge(keyValuePairs: Array<Array<string>>, [callback]: ?(errors: ?Array<Error>) => void): Promise\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst USER_1 = {\n  name: 'Tom',\n  age: 30,\n  traits: {hair: 'brown'},\n};\n\nconst USER_1_DELTA = {\n  age: 31,\n  traits: {eyes: 'blue'},\n};\n\nconst USER_2 = {\n  name: 'Sarah',\n  age: 25,\n  traits: {hair: 'black'},\n};\n\nconst USER_2_DELTA = {\n  age: 26,\n  traits: {hair: 'green'},\n};\n\n\nconst multiSet = [\n  [\"@MyApp_USER_1\", JSON.stringify(USER_1)],\n  [\"@MyApp_USER_2\", JSON.stringify(USER_2)]\n]\n\nconst multiMerge = [\n  [\"@MyApp_USER_1\", JSON.stringify(USER_1_DELTA)],\n  [\"@MyApp_USER_2\", JSON.stringify(USER_2_DELTA)]\n]\n\n\nmergeMultiple = async () => {\n  let parsedCurrentlyMerged\n\n  try {\n    await AsyncStorage.multiSet(multiSet)\n    await AsyncStorage.multiMerge(multiMerge)\n    const currentlyMerged = await AsyncStorage.multiGet(['@MyApp_USER_1', '@MyApp_USER_2'])\n    parsedCurrentlyMerged = currentlyMerged.map(([key, value]) => [\n      key,\n      JSON.parse(value),\n    ]);\n  } catch(e) {\n    // error\n  }\n\n  console.log(\n    'parsedCurrentlyMerged',\n    JSON.stringify(parsedCurrentlyMerged, null, 2),\n  );\n  // console.log output:\n  /* \n  [\n    [\n      \"@MyApp_USER_1\",\n      {\n        \"name\": \"Tom\",\n        \"age\": 31,\n        \"traits\": {\n          \"hair\": \"brown\",\n          \"eyes\": \"blue\"\n        }\n      }\n    ],\n    [\n      \"@MyApp_USER_2\",\n      {\n        \"name\": \"Sarah\",\n        \"age\": 26,\n        \"traits\": {\n          \"hair\": \"green\"\n        }\n      }\n    ]\n  ]\n  */\n}\n```\n\n----------------------------------------\n\nTITLE: Batch Removal with multiRemove in React Native AsyncStorage\nDESCRIPTION: Shows how to remove multiple items from AsyncStorage in a single operation using multiRemove. Accepts an array of keys to remove and returns a Promise that resolves when the operation completes.\nSOURCE: https://github.com/react-native-async-storage/async-storage/blob/main/packages/website/docs/API.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nstatic multiRemove(keys: Array<string>, [callback]: ?(errors: ?Array<Error>) => void)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nremoveFew = async () => {\n  const keys = ['@MyApp_USER_1', '@MyApp_USER_2']\n  try {\n    await AsyncStorage.multiRemove(keys)\n  } catch(e) {\n    // remove error\n  }\n\n  console.log('Done')\n}\n```\n\n----------------------------------------\n\nTITLE: Batch Retrieval with multiGet in React Native AsyncStorage\nDESCRIPTION: Demonstrates how to fetch multiple key-value pairs in a single operation using the multiGet method. Returns a Promise that resolves to an array of [key, value] pairs for the requested keys.\nSOURCE: https://github.com/react-native-async-storage/async-storage/blob/main/packages/website/docs/API.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nstatic multiGet(keys: Array<string>, [callback]: ?(errors: ?Array<Error>, result: ?Array<Array<string>>) => void): Promise\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngetMultiple = async () => {\n\n  let values\n  try {\n    values = await AsyncStorage.multiGet(['@MyApp_user', '@MyApp_key'])\n  } catch(e) {\n    // read error\n  }\n  console.log(values)\n\n  // example console.log output:\n  // [ ['@MyApp_user', 'myUserValue'], ['@MyApp_key', 'myKeyValue'] ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing React Native Async Storage with npm\nDESCRIPTION: Command to install the @react-native-async-storage/async-storage package using npm package manager.\nSOURCE: https://github.com/react-native-async-storage/async-storage/blob/main/packages/website/docs/Installation.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @react-native-async-storage/async-storage\n```\n\n----------------------------------------\n\nTITLE: Installing React Native Async Storage with Expo CLI\nDESCRIPTION: Command to install the @react-native-async-storage/async-storage package in an Expo-managed project.\nSOURCE: https://github.com/react-native-async-storage/async-storage/blob/main/packages/website/docs/Installation.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install @react-native-async-storage/async-storage\n```\n\n----------------------------------------\n\nTITLE: Installing CocoaPods for iOS React Native Async Storage\nDESCRIPTION: Command to install the native RNAsyncStorage module via CocoaPods for iOS projects after autolinking.\nSOURCE: https://github.com/react-native-async-storage/async-storage/blob/main/packages/website/docs/Installation.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx pod-install\n```\n\n----------------------------------------\n\nTITLE: Exporting Async Storage Mock Using mocks Directory in JavaScript\nDESCRIPTION: Creates a mock implementation of Async Storage by exporting from the provided mock file. This is used with the __mocks__ directory approach for Jest testing.\nSOURCE: https://github.com/react-native-async-storage/async-storage/blob/main/packages/website/docs/advanced/Jest-integration.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport * from '@react-native-async-storage/async-storage/jest/async-storage-mock';\n```\n\n----------------------------------------\n\nTITLE: Mocking Async Storage in Jest Setup File\nDESCRIPTION: JavaScript code that mocks Async Storage in a Jest setup file. This approach uses jest.mock() to replace the actual implementation with a mock for testing.\nSOURCE: https://github.com/react-native-async-storage/async-storage/blob/main/packages/website/docs/advanced/Jest-integration.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\njest.mock('@react-native-async-storage/async-storage', () =>\n  require('@react-native-async-storage/async-storage/jest/async-storage-mock')\n);\n```\n\n----------------------------------------\n\nTITLE: Testing Async Storage Method Calls with Jest\nDESCRIPTION: Example Jest test that verifies if Async Storage's getItem method was called with a specific key. Demonstrates how to test async operations that use Async Storage.\nSOURCE: https://github.com/react-native-async-storage/async-storage/blob/main/packages/website/docs/advanced/Jest-integration.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nit('checks if Async Storage is used', async () => {\n  await asyncOperationOnAsyncStorage();\n\n  expect(AsyncStorage.getItem).toBeCalledWith('myKey');\n});\n```\n\n----------------------------------------\n\nTITLE: Overriding Async Storage Mock Implementation\nDESCRIPTION: Example showing how to customize the Async Storage mock by overriding specific methods like multiGet. This allows for custom behavior when testing specific functionality.\nSOURCE: https://github.com/react-native-async-storage/async-storage/blob/main/packages/website/docs/advanced/Jest-integration.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// somewhere in your configuration files\nimport AsyncStorageMock from '@react-native-async-storage/async-storage/jest/async-storage-mock';\n\nAsyncStorageMock.multiGet = jest.fn(([keys], callback) => {\n  // do something here to retrieve data\n  callback([]);\n});\n\nexport default AsyncStorageMock;\n```\n\n----------------------------------------\n\nTITLE: Installing React Native Async Storage with Yarn\nDESCRIPTION: Command to install the @react-native-async-storage/async-storage package using Yarn package manager.\nSOURCE: https://github.com/react-native-async-storage/async-storage/blob/main/packages/website/docs/Installation.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @react-native-async-storage/async-storage\n```\n\n----------------------------------------\n\nTITLE: Setting AsyncStorage Delegate in iOS/Objective-C\nDESCRIPTION: Code to set up a delegate for AsyncStorage in an iOS application, allowing the native app to control AsyncStorage operations.\nSOURCE: https://github.com/react-native-async-storage/async-storage/blob/main/packages/website/docs/advanced/BrownfieldIntegration.md#2025-04-22_snippet_0\n\nLANGUAGE: objc\nCODE:\n```\nRNCAsyncStorage *asyncStorage = [bridge moduleForClass:[RNCAsyncStorage class]];\nasyncStorage.delegate = self;\n```\n\n----------------------------------------\n\nTITLE: Reading AsyncStorage Values in Kotlin\nDESCRIPTION: Kotlin code to read values from AsyncStorage using coroutines in a native Android application.\nSOURCE: https://github.com/react-native-async-storage/async-storage/blob/main/packages/website/docs/advanced/BrownfieldIntegration.md#2025-04-22_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nsuspend fun readValue(ctx: Context, keys: List<String>) {\n    // get instance of the Storage by providing context object\n    val asyncStorage = StorageModule.getStorageInstance(ctx)\n\n    val entries: List<Entry> = asyncStorage.getValues(keys)\n    doSomethingWithValues(entries)\n}\n```\n\n----------------------------------------\n\nTITLE: Saving AsyncStorage Values in Kotlin\nDESCRIPTION: Kotlin code to save values to AsyncStorage using coroutines in a native Android application.\nSOURCE: https://github.com/react-native-async-storage/async-storage/blob/main/packages/website/docs/advanced/BrownfieldIntegration.md#2025-04-22_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nsuspend fun saveValue(ctx: Context) {\n    val asyncStorage = StorageModule.getStorageInstance(ctx)\n\n    val entries = listOf(\n        Entry(\"myKey\", \"myValue\")\n    )\n    asyncStorage.setValues(entries)\n}\n```\n\n----------------------------------------\n\nTITLE: Reading AsyncStorage Values in Java\nDESCRIPTION: Java code to read values from AsyncStorage in a native Android application using Kotlin coroutines interop.\nSOURCE: https://github.com/react-native-async-storage/async-storage/blob/main/packages/website/docs/advanced/BrownfieldIntegration.md#2025-04-22_snippet_11\n\nLANGUAGE: java\nCODE:\n```\nvoid readStorageValue(Context ctx, String key) {\n    AsyncStorageAccess asyncStorage = StorageModule.getStorageInstance(ctx);\n\n    BuildersKt.launch(GlobalScope.INSTANCE,\n                Dispatchers.getIO(),\n                CoroutineStart.DEFAULT,\n                (scope, continuation) -> {\n                    List<String> keys = new ArrayList<>();\n                    keys.add(key);\n\n                    Continuation<? super List<? extends Entry>> cont = new Continuation() {\n                        @NotNull\n                        @Override\n                        public CoroutineContext getContext() {\n                            return scope.getCoroutineContext();\n                        }\n\n                        @Override\n                        public void resumeWith(@NotNull Object o) {\n                            List<Entry> entries = (List<Entry>) o;\n                            doSomethingWithEntries(entries);\n                        }\n                    };\n\n                    asyncStorage.getValues(keys, cont);\n                    return Unit.INSTANCE;\n                });\n\n}\n```\n\n----------------------------------------\n\nTITLE: Saving AsyncStorage Values in Java\nDESCRIPTION: Java code to save values to AsyncStorage in a native Android application using Kotlin coroutines interop.\nSOURCE: https://github.com/react-native-async-storage/async-storage/blob/main/packages/website/docs/advanced/BrownfieldIntegration.md#2025-04-22_snippet_12\n\nLANGUAGE: java\nCODE:\n```\nvoid saveStorageValue(Context ctx, String key, String value) {\n  AsyncStorageAccess asyncStorage = StorageModule.getStorageInstance(ctx);\n\n  BuildersKt.launch(GlobalScope.INSTANCE,\n                Dispatchers.getIO(),\n                CoroutineStart.DEFAULT,\n                (scope, continuation) -> {\n                    Continuation cont = new Continuation() {\n                        @NotNull\n                        @Override\n                        public CoroutineContext getContext() {\n                            return scope.getCoroutineContext();\n                        }\n\n                        @Override\n                        public void resumeWith(@NotNull Object o) {}\n                    };\n\n                    List<Entry> entries = new ArrayList<>();\n                    Entry entry = new Entry(key, value);\n                    entries.add(entry);\n                    asyncStorage.setValues(entries, cont);\n                    return Unit.INSTANCE;\n                });\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AsyncStorage Database Size for Android in React Native\nDESCRIPTION: Add the AsyncStorage_db_size_in_MB property to android/gradle.properties to increase the default 6MB storage limit. This example sets the new limit to 10MB.\nSOURCE: https://github.com/react-native-async-storage/async-storage/blob/main/packages/website/docs/advanced/IncreaseDbSize.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nAsyncStorage_db_size_in_MB=10\n```\n\n----------------------------------------\n\nTITLE: Enabling Dedicated Thread Executor in Gradle Properties\nDESCRIPTION: This configuration enables AsyncStorage to use a separate thread pool for its tasks execution in Android. It should be added to the android/gradle.properties file of your React Native project.\nSOURCE: https://github.com/react-native-async-storage/async-storage/blob/main/packages/website/docs/advanced/DedicatedExecutor.md#2025-04-22_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nAsyncStorage_dedicatedExecutor=true\n```\n\n----------------------------------------\n\nTITLE: Enabling iCloud Backup for AsyncStorage in React Native iOS/MacOS\nDESCRIPTION: This snippet shows how to modify the info.plist file to enable iCloud backups for AsyncStorage data. It adds a boolean entry 'RCTAsyncStorageExcludeFromBackup' and sets its value to false, allowing the data to be included in iCloud backups.\nSOURCE: https://github.com/react-native-async-storage/async-storage/blob/main/packages/website/docs/advanced/Backup.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<key>RCTAsyncStorageExcludeFromBackup</key>\n<false/>\n```\n\n----------------------------------------\n\nTITLE: Implementing allKeys Protocol Method in iOS/Objective-C\nDESCRIPTION: Implementation of the allKeys method from RNCAsyncStorageDelegate protocol. Returns all keys currently stored in AsyncStorage.\nSOURCE: https://github.com/react-native-async-storage/async-storage/blob/main/packages/website/docs/advanced/BrownfieldIntegration.md#2025-04-22_snippet_1\n\nLANGUAGE: objc\nCODE:\n```\n- (void)allKeys:(RNCAsyncStorageResultCallback)block;\n```\n\n----------------------------------------\n\nTITLE: Implementing mergeValues Protocol Method in iOS/Objective-C\nDESCRIPTION: Implementation of the mergeValues method from RNCAsyncStorageDelegate protocol. Merges values with the corresponding values stored at specified keys.\nSOURCE: https://github.com/react-native-async-storage/async-storage/blob/main/packages/website/docs/advanced/BrownfieldIntegration.md#2025-04-22_snippet_2\n\nLANGUAGE: objc\nCODE:\n```\n- (void)mergeValues:(NSArray<NSString *> *)values\n            forKeys:(NSArray<NSString *> *)keys\n         completion:(RNCAsyncStorageResultCallback)block;\n```\n\n----------------------------------------\n\nTITLE: Implementing removeAllValues Protocol Method in iOS/Objective-C\nDESCRIPTION: Implementation of the removeAllValues method from RNCAsyncStorageDelegate protocol. Removes all values from the store.\nSOURCE: https://github.com/react-native-async-storage/async-storage/blob/main/packages/website/docs/advanced/BrownfieldIntegration.md#2025-04-22_snippet_3\n\nLANGUAGE: objc\nCODE:\n```\n- (void)removeAllValues:(RNCAsyncStorageCompletion)block;\n```\n\n----------------------------------------\n\nTITLE: Implementing removeValuesForKeys Protocol Method in iOS/Objective-C\nDESCRIPTION: Implementation of the removeValuesForKeys method from RNCAsyncStorageDelegate protocol. Removes values associated with specified keys.\nSOURCE: https://github.com/react-native-async-storage/async-storage/blob/main/packages/website/docs/advanced/BrownfieldIntegration.md#2025-04-22_snippet_4\n\nLANGUAGE: objc\nCODE:\n```\n- (void)removeValuesForKeys:(NSArray<NSString *> *)keys\n                 completion:(RNCAsyncStorageResultCallback)block;\n```\n\n----------------------------------------\n\nTITLE: Implementing setValues Protocol Method in iOS/Objective-C\nDESCRIPTION: Implementation of the setValues method from RNCAsyncStorageDelegate protocol. Sets specified key-value pairs.\nSOURCE: https://github.com/react-native-async-storage/async-storage/blob/main/packages/website/docs/advanced/BrownfieldIntegration.md#2025-04-22_snippet_5\n\nLANGUAGE: objc\nCODE:\n```\n- (void)setValues:(NSArray<NSString *> *)values\n          forKeys:(NSArray<NSString *> *)keys\n       completion:(RNCAsyncStorageResultCallback)block;\n```\n\n----------------------------------------\n\nTITLE: Implementing valuesForKeys Protocol Method in iOS/Objective-C\nDESCRIPTION: Implementation of the valuesForKeys method from RNCAsyncStorageDelegate protocol. Returns values associated with specified keys.\nSOURCE: https://github.com/react-native-async-storage/async-storage/blob/main/packages/website/docs/advanced/BrownfieldIntegration.md#2025-04-22_snippet_6\n\nLANGUAGE: objc\nCODE:\n```\n- (void)valuesForKeys:(NSArray<NSString *> *)keys\n           completion:(RNCAsyncStorageResultCallback)block;\n```\n\n----------------------------------------\n\nTITLE: Implementing passthrough Property in iOS/Objective-C\nDESCRIPTION: Optional property from RNCAsyncStorageDelegate protocol that determines whether the delegate should be treated as a passthrough.\nSOURCE: https://github.com/react-native-async-storage/async-storage/blob/main/packages/website/docs/advanced/BrownfieldIntegration.md#2025-04-22_snippet_7\n\nLANGUAGE: objc\nCODE:\n```\n@optional\n@property (nonatomic, readonly, getter=isPassthrough) BOOL passthrough;\n```\n\n----------------------------------------\n\nTITLE: Enabling Next Storage in gradle.properties\nDESCRIPTION: Configuration setting to enable the next storage implementation in AsyncStorage by adding a flag to the gradle.properties file.\nSOURCE: https://github.com/react-native-async-storage/async-storage/blob/main/packages/website/docs/advanced/Next.md#2025-04-22_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nAsyncStorage_useNextStorage=true\n```\n\n----------------------------------------\n\nTITLE: Adding Kotlin Plugin for React Native <0.73\nDESCRIPTION: Modification to the root build.gradle file to add Kotlin plugin support for projects using React Native versions below 0.73.\nSOURCE: https://github.com/react-native-async-storage/async-storage/blob/main/packages/website/docs/advanced/Next.md#2025-04-22_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n buildscript {\n     ext {\n         // other extensions\n+        kotlinVersion = '1.9.24'\n     }\n    \n     dependencies {\n         // other dependencies\n+        classpath \"org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion\"\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Specifying Kotlin Version with rootProject Extension\nDESCRIPTION: Configuration to set a specific Kotlin version using the rootProject.ext approach.\nSOURCE: https://github.com/react-native-async-storage/async-storage/blob/main/packages/website/docs/advanced/Next.md#2025-04-22_snippet_2\n\nLANGUAGE: groovy\nCODE:\n```\nrootProject.ext.kotlinVersion = '1.9.24'\n```\n\n----------------------------------------\n\nTITLE: Specifying Kotlin Version in gradle.properties\nDESCRIPTION: Configuration to set a specific Kotlin version using a property in gradle.properties.\nSOURCE: https://github.com/react-native-async-storage/async-storage/blob/main/packages/website/docs/advanced/Next.md#2025-04-22_snippet_3\n\nLANGUAGE: groovy\nCODE:\n```\nAsyncStorage_kotlinVersion=1.9.24\n```\n\n----------------------------------------\n\nTITLE: Specifying Room Library Version\nDESCRIPTION: Configuration setting to specify the Room persistence library version in gradle.properties.\nSOURCE: https://github.com/react-native-async-storage/async-storage/blob/main/packages/website/docs/advanced/Next.md#2025-04-22_snippet_4\n\nLANGUAGE: groovy\nCODE:\n```\nAsyncStorage_next_roomVersion=2.6.1\n```\n\n----------------------------------------\n\nTITLE: Configuring Metro Bundler with inlineRequires for AsyncStorage\nDESCRIPTION: Example metro.config.js configuration with inlineRequires enabled, which may cause circular dependency issues with AsyncStorage.\nSOURCE: https://github.com/react-native-async-storage/async-storage/blob/main/packages/website/docs/help/Troubleshooting.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  transformer: {\n    getTransformOptions: async () => ({\n      transform: {\n        experimentalImportSupport: false,\n        inlineRequires: true,\n      },\n    }),\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Excluding AsyncStorage from inlineRequires in Metro Configuration\nDESCRIPTION: Modified metro.config.js that excludes AsyncStorage and React packages from being inlined, which can help resolve circular dependency issues.\nSOURCE: https://github.com/react-native-async-storage/async-storage/blob/main/packages/website/docs/help/Troubleshooting.md#2025-04-22_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n module.exports = {\n   transformer: {\n     getTransformOptions: async () => ({\n       transform: {\n         experimentalImportSupport: false,\n         inlineRequires: true,\n+        nonInlinedRequires: [\n+          \"@react-native-async-storage/async-storage\",\n+          'React',\n+          'react',\n+          'react-native',\n+        ],\n       },\n     }),\n   },\n };\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest Setup Files in package.json\nDESCRIPTION: JSON configuration for Jest in package.json that specifies the setup files location. This is required when using the Jest setup file approach for mocking.\nSOURCE: https://github.com/react-native-async-storage/async-storage/blob/main/packages/website/docs/advanced/Jest-integration.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"jest\": {\n  \"setupFiles\": [\"./path/to/jestSetupFile.js\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Running E2E Tests for Android in React Native Async Storage\nDESCRIPTION: This snippet outlines the commands to build the app and run E2E tests for Android. It requires an Android Emulator with Play services and API level 29 to be running.\nSOURCE: https://github.com/react-native-async-storage/async-storage/blob/main/packages/default-storage/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn bundle:android\nyarn build:e2e:android\nyarn test:e2e:android\n```\n\n----------------------------------------\n\nTITLE: Running E2E Tests for iOS in React Native Async Storage\nDESCRIPTION: This snippet provides the commands to build the app and run E2E tests for iOS. It requires an iPhone 14 simulator with iOS version 16.4 to be running. The process includes bundling, installing pods, building, and running tests.\nSOURCE: https://github.com/react-native-async-storage/async-storage/blob/main/packages/default-storage/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn bundle:ios\npod install --project-directory=example/ios\nyarn build:e2e:ios\nyarn test:e2e:ios\n```\n\n----------------------------------------\n\nTITLE: Adding coroutines-android Dependency for Android Integration\nDESCRIPTION: Gradle configuration to add the required Kotlin coroutines dependency for Android AsyncStorage integration.\nSOURCE: https://github.com/react-native-async-storage/async-storage/blob/main/packages/website/docs/advanced/BrownfieldIntegration.md#2025-04-22_snippet_8\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n  // other dependencies\n\n\n  // will work with coroutines 1.3.0 and up\n  implementation \"org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.9\"\n\n}\n```\n\n----------------------------------------\n\nTITLE: Running Android E2E Tests for React Native Async Storage\nDESCRIPTION: Commands to bundle, build, and run end-to-end tests for React Native Async Storage on Android. Requires an Android Emulator with Play services and API level 29.\nSOURCE: https://github.com/react-native-async-storage/async-storage/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn bundle:android\nyarn build:e2e:android\nyarn test:e2e:android\n```\n\n----------------------------------------\n\nTITLE: Running iOS E2E Tests for React Native Async Storage\nDESCRIPTION: Commands to bundle, build, and run end-to-end tests for React Native Async Storage on iOS. Requires an iPhone 14 simulator with iOS version 16.4.\nSOURCE: https://github.com/react-native-async-storage/async-storage/blob/main/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn bundle:ios\nyarn build:e2e:ios\nyarn test:e2e:ios\n```\n\n----------------------------------------\n\nTITLE: Reading and Parsing Object Data from AsyncStorage\nDESCRIPTION: Shows how to retrieve and parse JSON data from AsyncStorage. The example handles null values, parses the JSON string back to an object, and includes error handling.\nSOURCE: https://github.com/react-native-async-storage/async-storage/blob/main/packages/website/docs/Usage.md#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nconst getData = async () => {\n  try {\n    const jsonValue = await AsyncStorage.getItem('my-key');\n    return jsonValue != null ? JSON.parse(jsonValue) : null;\n  } catch (e) {\n    // error reading value\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for React Native Async Storage Documentation\nDESCRIPTION: This command installs the necessary dependencies for the Async Storage documentation website using Yarn package manager.\nSOURCE: https://github.com/react-native-async-storage/async-storage/blob/main/packages/website/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn install\n```\n\n----------------------------------------\n\nTITLE: Specifying KSP Version\nDESCRIPTION: Configuration setting to specify the Kotlin Symbol Processing (KSP) version in gradle.properties.\nSOURCE: https://github.com/react-native-async-storage/async-storage/blob/main/packages/website/docs/advanced/Next.md#2025-04-22_snippet_5\n\nLANGUAGE: groovy\nCODE:\n```\nAsyncStorage_next_kspVersion=1.9.24-1.0.20\n```\n\n----------------------------------------\n\nTITLE: Running Local Development Server for React Native Async Storage Documentation\nDESCRIPTION: This command starts a local development server for the Async Storage documentation website. It opens a browser window and reflects most changes live without requiring server restart.\nSOURCE: https://github.com/react-native-async-storage/async-storage/blob/main/packages/website/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn start\n```"
  }
]