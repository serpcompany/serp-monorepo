[
  {
    "owner": "giphy",
    "repo": "giphy-js",
    "content": "TITLE: Implementing GIPHY Search Experience with React Components\nDESCRIPTION: This code snippet shows how to create a complete search experience using GIPHY React components. It includes SearchContextManager, SearchBar, SuggestionBar, and Grid components to enable searching, displaying suggestions, and rendering search results.\nSOURCE: https://github.com/giphy/giphy-js/blob/master/packages/react-components/README.md#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n    Grid, // our UI Component to display the results\n    SearchBar, // the search bar the user will type into\n    SearchContext, // the context that wraps and connects our components\n    SearchContextManager, // the context manager, includes the Context.Provider\n    SuggestionBar, // an optional UI component that displays trending searches and channel / username results\n} from '@giphy/react-components'\n\n// the search experience consists of the manager and its child components that use SearchContext\nconst SearchExperience = () => (\n    <SearchContextManager apiKey={webSDKKey}>\n        <Components />\n    </SearchContextManager>\n)\n\n// define the components in a separate function so we can\n// use the context hook. You could also use the render props pattern\nconst Components = () => {\n    const { fetchGifs, searchKey } = useContext(SearchContext)\n    return (\n        <>\n            <SearchBar />\n            <SuggestionBar />\n            {/**\n                key will recreate the component,\n                this is important for when you change fetchGifs\n                e.g. changing from search term dogs to cats or type gifs to stickers\n                you want to restart the gifs from the beginning and changing a component's key does that\n            **/}\n            <Grid key={searchKey} columns={3} width={800} fetchGifs={fetchGifs} />\n        </>\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Responsive GIPHY Grid with Pagination\nDESCRIPTION: A comprehensive example showing how to implement a responsive GIPHY grid that adjusts columns based on screen width. This implementation includes window resize handling, pagination for infinite scrolling, and proper cleanup.\nSOURCE: https://github.com/giphy/giphy-js/blob/master/packages/components/README.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { throttle } from 'throttle-debounce'\nimport { renderGrid } from '@giphy/js-components'\nimport { GiphyFetch } from '@giphy/js-fetch-api'\n\n// create a GiphyFetch with your api key\n// apply for a new Web SDK key. Use a separate key for every platform (Android, iOS, Web)\nconst gf = new GiphyFetch('your Web SDK key')\n// create a fetch gifs function that takes an offset\n// this will allow the grid to paginate as the user scrolls\nconst fetchGifs = (offset: number) => {\n    // use whatever end point you want,\n    // but be sure to pass offset to paginate correctly\n    return gf.trending({ offset, limit: 25 })\n}\n\n// Creating a grid with window resizing and remove-ability\nconst makeGrid = (targetEl: HTMLElement) => {\n    const render = () => {\n        // here is the @giphy/js-components import\n        return renderGrid(\n            {\n                width: innerWidth,\n                fetchGifs,\n                columns: width < 500 ? 2 : 3,\n                gutter: 6,\n            },\n            targetEl\n        )\n    }\n    const resizeRender = throttle(500, render)\n    window.addEventListener('resize', resizeRender, false)\n    const remove = render()\n    return {\n        remove: () => {\n            remove()\n            window.removeEventListener('resize', resizeRender, false)\n        },\n    }\n}\n\n// Instantiate\nconst grid = makeGrid(document.querySelector('.grid'))\n\n// To remove\ngrid.remove()\n```\n\n----------------------------------------\n\nTITLE: Implementing GIPHY Grid Component with React\nDESCRIPTION: Example of how to use the Grid component from @giphy/react-components to display GIFs in a responsive grid layout. It demonstrates setting up the GiphyFetch client with an API key and implementing a search function to fetch GIFs.\nSOURCE: https://github.com/giphy/giphy-js/blob/master/packages/react-components/README.md#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Grid } from '@giphy/react-components'\nimport { GiphyFetch } from '@giphy/js-fetch-api'\n// use @giphy/js-fetch-api to fetch gifs\n// apply for a new Web SDK key. Use a separate key for every platform (Android, iOS, Web)\nconst gf = new GiphyFetch('your Web SDK key')\n\nconst searchTerm = 'dogs'\n// fetch 10 gifs at a time as the user scrolls (offset is handled by the grid)\n// if this function changes, change the Grid key to recreate the grid and start over\n// see the codesandbox for a runnable example\nconst fetchGifs = (offset: number) => gf.search(searchTerm, { offset, limit: 10 })\n// React Component\nReactDOM.render(<Grid width={800} columns={3} gutter={6} fetchGifs={fetchGifs} key={searchTerm} />, target)\n```\n\n----------------------------------------\n\nTITLE: Rendering Video Component in React with GIPHY Fetch API\nDESCRIPTION: This snippet demonstrates how to use the Video component from @giphy/react-components along with the GiphyFetch API to display a GIF as a video. It fetches a specific GIF and renders it as a video with controls.\nSOURCE: https://github.com/giphy/giphy-js/blob/master/packages/react-components/README.md#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Video } from '@giphy/react-components'\nimport { GiphyFetch } from '@giphy/js-fetch-api'\n\n// use @giphy/js-fetch-api to fetch gifs\n// apply for a new Web SDK key. Use a separate key for every platform (Android, iOS, Web)\nconst gf = new GiphyFetch('your Web SDK key')\n\nconst { data } = await gf.gif('D068R9Ziv1iCjezKzG')\n// React Component\nReactDOM.render(<Video gif={data} width={300} controls />, target)\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic GIPHY Grid with TypeScript\nDESCRIPTION: A basic example of implementing a GIPHY trending grid. This snippet demonstrates how to fetch trending GIFs using the GiphyFetch API and render them in a grid layout with minimal configuration.\nSOURCE: https://github.com/giphy/giphy-js/blob/master/packages/components/README.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// use @giphy/js-fetch-api to fetch gifs\n// apply for a new Web SDK key. Use a separate key for every platform (Android, iOS, Web)\nconst gf = new GiphyFetch('your Web SDK key')\n// fetch 10 gifs at a time as the user scrolls (offset is handled by the grid)\nconst fetchGifs = (offset: number) => gf.trending({ offset, limit: 10 })\n// render a grid\nrenderGrid({ width: 800, fetchGifs }, targetEl)\n```\n\n----------------------------------------\n\nTITLE: Searching GIFs with Options in TypeScript\nDESCRIPTION: Example showing how to search for GIFs with specific options like sort, language, limit, and type. This demonstrates the search method signature and usage.\nSOURCE: https://github.com/giphy/giphy-js/blob/master/packages/fetch-api/README.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nsearch(term: string, options?: SearchOptions): Promise<GifsResult>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst { data: gifs } = await gf.search('dogs', { sort: 'relevant', lang: 'es', limit: 10, type: 'stickers' })\n```\n\n----------------------------------------\n\nTITLE: Implementing GIPHY Carousel Component with React\nDESCRIPTION: Example of how to use the Carousel component from @giphy/react-components to display GIFs in a horizontal scrollable view. It shows how to set up the GiphyFetch client and implement a search function to fetch GIFs.\nSOURCE: https://github.com/giphy/giphy-js/blob/master/packages/react-components/README.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Carousel } from '@giphy/react-components'\nimport { GiphyFetch } from '@giphy/js-fetch-api'\n\n// use @giphy/js-fetch-api to fetch gifs\nconst gf = new GiphyFetch('your api key')\nconst searchTerm = 'dogs'\n// fetch 10 gifs at a time as the user scrolls (offset is handled by the grid)\n// if this function changes, change the Grid key to recreate the grid and start over\n// see the codesandbox for a runnable example\nconst fetchGifs = (offset: number) => gf.search(searchTerm, { offset, limit: 10 })\n// React Component\nReactDOM.render(<Carousel gifHeight={200} gutter={6} fetchGifs={fetchGifs} key={searchTerm} />, target)\n```\n\n----------------------------------------\n\nTITLE: Rendering a Video with Controls using Giphy-JS in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the renderVideo function from @giphy/js-components to display a GIF with video data. It shows how to create a GiphyFetch instance with your API key, fetch a specific GIF, and render it as a video with controls.\nSOURCE: https://github.com/giphy/giphy-js/blob/master/packages/components/README.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { renderVideo } from '@giphy/js-components'\nimport { GiphyFetch } from '@giphy/js-fetch-api'\n\n// create a GiphyFetch with your api key\n// apply for a new Web SDK key. Use a separate key for every platform (Android, iOS, Web)\nconst gf = new GiphyFetch('your Web SDK key')\n\nconst vanillaJSVideo = async (mountNode: HTMLElement) => {\n    // render a video\n    const { data: gif1 } = await gf.gif('D068R9Ziv1iCjezKzG')\n    renderVideo({ gif: gif1, width: 300, controls: true }, mountNode)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a GIPHY Carousel Component\nDESCRIPTION: Example of implementing a GIPHY carousel that displays trending GIFs with custom click behavior. This snippet shows how to create a horizontal scrolling carousel with fixed GIF height and custom click handler.\nSOURCE: https://github.com/giphy/giphy-js/blob/master/packages/components/README.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { renderCarousel } from '@giphy/js-components'\nimport { GiphyFetch } from '@giphy/js-fetch-api'\n\n// create a GiphyFetch with your api key\n// apply for a new Web SDK key. Use a separate key for every platform (Android, iOS, Web)\nconst gf = new GiphyFetch('your Web SDK key')\n\n// Creating a grid with window resizing and remove-ability\nconst vanillaJSCarousel = (mountNode: HTMLElement) => {\n    renderCarousel(\n        {\n            gifHeight: 200,\n            fetchGifs: (offset: number) => gf.trending({ offset }),\n            gutter: 6,\n            onGifClick: (gif: IGif) => window.open(gif.url),\n        },\n        mountNode\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Random GIFs in TypeScript\nDESCRIPTION: Example showing how to fetch a random GIF using the random method with options for tag and type. This demonstrates the method signature and implementation.\nSOURCE: https://github.com/giphy/giphy-js/blob/master/packages/fetch-api/README.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nrandom(options?: RandomOptions): Promise<GifResult>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst { data: gif } = await gf.random({ tag: 'beer', type: 'stickers' })\n```\n\n----------------------------------------\n\nTITLE: Initializing GiphyFetch and Fetching Trending GIFs in TypeScript\nDESCRIPTION: Basic example of initializing the GiphyFetch client with an API key and fetching trending GIFs with a limit of 10 results.\nSOURCE: https://github.com/giphy/giphy-js/blob/master/packages/fetch-api/README.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GiphyFetch } from '@giphy/js-fetch-api'\n\nconst gf = new GiphyFetch('your api key')\n\n// fetch 10 gifs\nconst { data: gifs } = await gf.trending({ limit: 10 })\n```\n\n----------------------------------------\n\nTITLE: Rendering a Single GIF using GIPHY React Component\nDESCRIPTION: This snippet demonstrates how to fetch and display a single GIF using the GIPHY React component and the GiphyFetch API. It includes setting up the API client and rendering the Gif component with fetched data.\nSOURCE: https://github.com/giphy/giphy-js/blob/master/packages/react-components/README.md#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Gif } from '@giphy/react-components'\nimport { GiphyFetch } from '@giphy/js-fetch-api'\n\n// use @giphy/js-fetch-api to fetch gifs\n// apply for a new Web SDK key. Use a separate key for every platform (Android, iOS, Web)\nconst gf = new GiphyFetch('your Web SDK key')\n// fetch single gif\nconst { data } = await gf.gif('fpXxIjftmkk9y')\n// React Component\nReactDOM.render(<Gif gif={data} width={300} />, target)\n```\n\n----------------------------------------\n\nTITLE: Rendering a Single GIPHY Gif Component\nDESCRIPTION: Example of rendering a single GIF using the GIPHY JavaScript Components. This snippet demonstrates how to fetch a specific GIF by ID and render it with a fixed width.\nSOURCE: https://github.com/giphy/giphy-js/blob/master/packages/components/README.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { renderGif } from '@giphy/js-components'\nimport { GiphyFetch } from '@giphy/js-fetch-api'\n\n// create a GiphyFetch with your api key\n// apply for a new Web SDK key. Use a separate key for every platform (Android, iOS, Web)\nconst gf = new GiphyFetch('your Web SDK key')\n\nconst vanillaJSGif = async (mountNode: HTMLElement) => {\n    // render a single gif\n    const { data: gif1 } = await gf.gif('fpXxIjftmkk9y')\n    renderGif({ gif: gif1, width: 300 }, mountNode)\n}\n```\n\n----------------------------------------\n\nTITLE: Refreshable Grid Component with Search Functionality\nDESCRIPTION: Advanced implementation of the Grid component that refreshes based on search terms, including input binding and dynamic content loading.\nSOURCE: https://github.com/giphy/giphy-js/blob/master/packages/svelte-components/README.md#2025-04-23_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n    import { Grid } from '@giphy/svelte-components'\n    import { GiphyFetch } from '@giphy/js-fetch-api'\n    import type { PageData } from './$types.js'\n    const gf = new GiphyFetch('sXpGFDGZs0Dv1mmNFvYaGUvYwKX0PWIh')\n    export let data: PageData\n    let term = data.term // the initial term on page load\n    let initialGifs = data.gifs // the initial gifs for ssr\n</script>\n\n<p>\n    Search for gifs:\n    <input bind:value={term} />\n</p>\n<!-- use the term as a key to reset the Grid-->\n{#key term}\n    <Grid\n        initialGifs={data.term === term ? initialGifs : []}\n        on:click={(e) => {\n            console.log(`on:click gif:`, e.detail.gif)\n        }}\n        width={600}\n        fetchGifs={(offset) => gf.search(term, { offset, limit: 10 })}\n        gifProps={{ borderRadius: 0 }}\n    />\n{/key}\n```\n\n----------------------------------------\n\nTITLE: Grid and Carousel Components Implementation\nDESCRIPTION: Example showing how to implement both Grid and Carousel components with click handlers, width configuration, and fetching additional GIFs.\nSOURCE: https://github.com/giphy/giphy-js/blob/master/packages/svelte-components/README.md#2025-04-23_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<Grid\n    initialGifs={gifs}\n    on:click={(e) => {\n        // do something with the gif\n        console.log(`on:click gif:`, e.detail.gif)\n    }}\n    width={600}\n    fetchGifs={(offset) => gf.trending({ offset })}\n    gifProps={{ borderRadius: 0 }}\n/>\n\n<Carousel initialGifs={gifs} gifHeight={100} fetchGifs={(offset) => gf.trending({ offset })} />\n```\n\n----------------------------------------\n\nTITLE: Fetching Categories in TypeScript\nDESCRIPTION: Example showing how to fetch GIF categories using the categories method. This demonstrates the method signature and implementation with handling the returned categories.\nSOURCE: https://github.com/giphy/giphy-js/blob/master/packages/fetch-api/README.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ncategories(options?: CategoriesOptions): Promise<CategoriesResult>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst { data: categories } = await gf.categories()\ncategories.forEach((category) => {\n    console.log(category) // ICategory\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Single GIF by ID in TypeScript\nDESCRIPTION: Example showing how to fetch a single GIF by its ID using the gif method. This demonstrates the method signature and implementation.\nSOURCE: https://github.com/giphy/giphy-js/blob/master/packages/fetch-api/README.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ngif(id: string): Promise<GifResult>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst { data: gif } = await gf.gif('3oEjHGr1Fhz0kyv8Ig')\n```\n\n----------------------------------------\n\nTITLE: Fetching Multiple GIFs by IDs or Category in TypeScript\nDESCRIPTION: Example showing how to fetch multiple GIFs either by an array of IDs or by category and subcategory. This demonstrates both method signatures and implementations.\nSOURCE: https://github.com/giphy/giphy-js/blob/master/packages/fetch-api/README.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// by id\ngifs(ids: string[]): Promise<GifsResult>\n// by category and subcategory\ngifs(category: string, subcategory: string): Promise<GifsResult>\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// by id\nconst { data: gifs } = await gf.gifs(['3oEjHGr1Fhz0kyv8Ig'])\n// by category and subcategory\nconst { data: gifs } = await gf.gifs('tv', 'arrested-development')\n```\n\n----------------------------------------\n\nTITLE: Fetching Trending GIFs with Options in TypeScript\nDESCRIPTION: Example of using the trending method to fetch trending GIFs with pagination and rating options. This shows the method signature and implementation.\nSOURCE: https://github.com/giphy/giphy-js/blob/master/packages/fetch-api/README.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntrending(options?: TrendingOptions): Promise<GifsResult>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst { data: gifs } = await gf.trending({ limit: 10, offset: 25, rating: 'g' })\n```\n\n----------------------------------------\n\nTITLE: Initializing and Loading GIPHY Video in TypeScript\nDESCRIPTION: Creates a new GiphyVideo instance with a clip URL and loads it into a specified DOM element. This is the basic setup required to embed a GIPHY Clip on a webpage.\nSOURCE: https://github.com/giphy/giphy-js/blob/master/packages/embed-sdk/README.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst clipUrl = 'https://giphy.com/clips/studiosoriginals-love-reaction-emotion-h48wFAB9JpSTSiXwHw'\nconst video = new GiphyEmbed.GiphyVideo({\n    url: clipUrl,\n})\n\nconst elementId = 'giphy-iframe'\nvideo.loadPlayer(elementId)\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom GIF Overlay in React\nDESCRIPTION: TypeScript React example showing how to create a custom overlay component for GIFs and apply it to a Carousel component. The overlay displays the GIF's ID when hovered and leverages the GifOverlayProps interface.\nSOURCE: https://github.com/giphy/giphy-js/blob/master/packages/react-components/README.md#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n// Overlay component gets GifOverlayProps\nconst Overlay = ({ gif, isHovered }: GifOverlayProps) => {\n    return <div className=\"overlay\">{isHovered ? gif.id : ''}</div>\n}\n\n// React component\nReactDOM.render(<Carousel gifHeight={200} fetchGifs={fetchGifs} overlay={Overlay} />, target)\n```\n\n----------------------------------------\n\nTITLE: Implementing EmojiVariationsList with Grid in React\nDESCRIPTION: This example shows how to use the EmojiVariationsList and Grid components from @giphy/react-components. It fetches emoji variations and default emojis, allowing users to click on an emoji to display its variations.\nSOURCE: https://github.com/giphy/giphy-js/blob/master/packages/react-components/README.md#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useState } from 'react'\nimport ReactDOM from 'react-dom'\nimport { GiphyFetch } from '@giphy/js-fetch-api'\nimport { EmojiVariationsList, Grid } from '@giphy/react-components'\nimport type { GifID, IGif } from '@giphy/js-types'\n\n// use @giphy/js-fetch-api to fetch gifs\n// apply for a new Web SDK key. Use a separate key for every platform (Android, iOS, Web)\nconst gf = new GiphyFetch('your Web SDK key')\n\nconst fetchDefaultVariations = (offset: number) => gf.emojiDefaultVariations({ offset })\nconst fetchVariations = (id: GifID) => gf.emojiVariations(id)\n\nexport function Example() {\n    const [gif, setGif] = useState<IGif | null>(null)\n    return (\n        <>\n            {gif ? <EmojiVariationsList fetchVariations={fetchVariations} gif={gif} gifHeight={100} /> : null}\n            <Grid\n                columns={3}\n                fetchGifs={fetchDefaultVariations}\n                hideAttribution={true}\n                noLink={true}\n                onGifClick={setGif}\n                width={400}\n            />\n        </>\n    )\n}\n\nReactDOM.render(<Example />, target)\n```\n\n----------------------------------------\n\nTITLE: Gif Component with Custom Overlay Implementation\nDESCRIPTION: Implementation of the Gif component with a custom overlay that conditionally displays the gif title when hovered.\nSOURCE: https://github.com/giphy/giphy-js/blob/master/packages/svelte-components/README.md#2025-04-23_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<Gif {gif} width={300}>\n    <div slot=\"overlay\" class=\"overlay\" let:gif let:hovered>\n        {#if hovered}\n            <div>{gif.title}</div>\n        {/if}\n    </div>\n</Gif>\n```\n\n----------------------------------------\n\nTITLE: Basic Gif Component Usage in Svelte\nDESCRIPTION: Example of the basic implementation of the Gif component which takes an IGif object and a width property to display a GIF.\nSOURCE: https://github.com/giphy/giphy-js/blob/master/packages/svelte-components/README.md#2025-04-23_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<Gif {gif} width={300} />\n```\n\n----------------------------------------\n\nTITLE: Fetching GIPHY oEmbed Information\nDESCRIPTION: This snippet demonstrates how to fetch embed information for a GIPHY clip using the oEmbed API. It constructs a URL with the clip's URL as a parameter and sends a fetch request.\nSOURCE: https://github.com/giphy/giphy-js/blob/master/packages/embed-sdk/OEMBED.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst clipUrl = 'https://giphy.com/clips/studiosoriginals-love-reaction-emotion-h48wFAB9JpSTSiXwHw'\nconst response = await fetch(`https://giphy.com/services/oembed?url=${clipUrl}`)\n```\n\n----------------------------------------\n\nTITLE: Fetching Related GIFs in TypeScript\nDESCRIPTION: Example showing how to fetch related GIFs based on a GIF ID using the related method. This demonstrates the method signature and implementation with options.\nSOURCE: https://github.com/giphy/giphy-js/blob/master/packages/fetch-api/README.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nrelated(id: string, options?: RelatedOptions): Promise<GifsResult>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst { data: gifs } = await gf.related('3oEjHGr1Fhz0kyv8Ig', { limit: 10 })\n```\n\n----------------------------------------\n\nTITLE: Playing a GIPHY Clip\nDESCRIPTION: Triggers playback of the embedded GIPHY Clip. Note that clips automatically mute after 3 loops.\nSOURCE: https://github.com/giphy/giphy-js/blob/master/packages/embed-sdk/README.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nvideo.play() // Play the clip\n```\n\n----------------------------------------\n\nTITLE: Creating Animated Text GIFs in TypeScript\nDESCRIPTION: Example showing how to create animated text GIFs using the animate method. This requires a special SDK key and demonstrates the method signature and implementation.\nSOURCE: https://github.com/giphy/giphy-js/blob/master/packages/fetch-api/README.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nanimate(text: string, options?: PaginationOptions): Promise<GifsResult>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst { data: gifs } = await gf.animate('some text to animate!', { limit: 5 })\n```\n\n----------------------------------------\n\nTITLE: Playing Embedded GIPHY Video Content\nDESCRIPTION: This snippet shows how to send a post message to play embedded video content. It uses the iframe's contentWindow to post a message with the 'play' action.\nSOURCE: https://github.com/giphy/giphy-js/blob/master/packages/embed-sdk/OEMBED.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\niframe.contentWindow.postMessage(\n    {\n        action: 'play',\n    },\n    '*'\n)\n```\n\n----------------------------------------\n\nTITLE: Pausing a GIPHY Clip\nDESCRIPTION: Pauses the currently playing GIPHY Clip.\nSOURCE: https://github.com/giphy/giphy-js/blob/master/packages/embed-sdk/README.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nvideo.pause() // Pause the clip\n```\n\n----------------------------------------\n\nTITLE: Pausing Embedded GIPHY Video Content\nDESCRIPTION: This snippet demonstrates how to pause embedded video content by sending a post message with the 'pause' action to the iframe's contentWindow.\nSOURCE: https://github.com/giphy/giphy-js/blob/master/packages/embed-sdk/OEMBED.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\niframe.contentWindow.postMessage(\n    {\n        action: 'pause',\n    },\n    '*'\n)\n```\n\n----------------------------------------\n\nTITLE: Stopping a GIPHY Clip\nDESCRIPTION: Stops the GIPHY Clip playback completely.\nSOURCE: https://github.com/giphy/giphy-js/blob/master/packages/embed-sdk/README.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nvideo.stop() // Stop the clip\n```\n\n----------------------------------------\n\nTITLE: Stopping Embedded GIPHY Video Content\nDESCRIPTION: This code shows how to stop embedded video content by sending a post message with the 'stop' action to the iframe's contentWindow.\nSOURCE: https://github.com/giphy/giphy-js/blob/master/packages/embed-sdk/OEMBED.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\niframe.contentWindow.postMessage(\n    {\n        action: 'stop',\n    },\n    '*'\n)\n```\n\n----------------------------------------\n\nTITLE: Muting a GIPHY Clip\nDESCRIPTION: Mutes the audio of the GIPHY Clip.\nSOURCE: https://github.com/giphy/giphy-js/blob/master/packages/embed-sdk/README.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nvideo.mute() // Mute the clip\n```\n\n----------------------------------------\n\nTITLE: Muting Embedded GIPHY Video Content\nDESCRIPTION: This snippet illustrates how to mute embedded video content by sending a post message with the 'mute' action to the iframe's contentWindow.\nSOURCE: https://github.com/giphy/giphy-js/blob/master/packages/embed-sdk/OEMBED.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\niframe.contentWindow.postMessage(\n    {\n        action: 'mute',\n    },\n    '*'\n)\n```\n\n----------------------------------------\n\nTITLE: Unmuting Embedded GIPHY Video Content\nDESCRIPTION: This code demonstrates how to unmute embedded video content. Note that it uses the 'mute' action, which appears to be an error in the original documentation.\nSOURCE: https://github.com/giphy/giphy-js/blob/master/packages/embed-sdk/OEMBED.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\niframe.contentWindow.postMessage(\n    {\n        action: 'mute',\n    },\n    '*'\n)\n```\n\n----------------------------------------\n\nTITLE: Seeking to Specific Time in Embedded GIPHY Video\nDESCRIPTION: This snippet shows how to seek to a specific time in embedded video content. It sends a post message with the 'seekTo' action and a 'value' property specifying the desired time in seconds.\nSOURCE: https://github.com/giphy/giphy-js/blob/master/packages/embed-sdk/OEMBED.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\niframe.contentWindow.postMessage(\n    {\n        action: 'seekTo',\n        value: 10, // Time you want to go on the clip\n    },\n    '*'\n)\n```\n\n----------------------------------------\n\nTITLE: Fetching Emoji GIFs in TypeScript\nDESCRIPTION: Example showing how to fetch emoji GIFs using the emoji method. This demonstrates the method signature and implementation with pagination options.\nSOURCE: https://github.com/giphy/giphy-js/blob/master/packages/fetch-api/README.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nemoji(options?: PaginationOptions): Promise<GifsResult>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst { data: gifs } = await gf.emoji()\n```\n\n----------------------------------------\n\nTITLE: Styling GIF Overlay with CSS\nDESCRIPTION: CSS styling for creating an overlay that covers a GIF completely. The overlay has a semi-transparent green background and centers its content both horizontally and vertically.\nSOURCE: https://github.com/giphy/giphy-js/blob/master/packages/react-components/README.md#2025-04-23_snippet_6\n\nLANGUAGE: css\nCODE:\n```\n/* css for overlay */\n.overlay {\n    position: absolute;\n    left: 0;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    background: rgba(0, 255, 0, 0.3);\n    display: flex;\n    color: white;\n    justify-content: center;\n    align-items: center;\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Default Emoji Variations in TypeScript\nDESCRIPTION: Example showing how to fetch default emoji variations using the emojiDefaultVariations method. This demonstrates the method signature and implementation.\nSOURCE: https://github.com/giphy/giphy-js/blob/master/packages/fetch-api/README.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nemojiDefaultVariations(options?: PaginationOptions): Promise<GifsResult>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst { data: gifs } = await gf.emojiDefaultVariations()\n```\n\n----------------------------------------\n\nTITLE: Fetching Emoji Variations by ID in TypeScript\nDESCRIPTION: Example showing how to fetch variations for a specific emoji using the emojiVariations method. This demonstrates the method signature and implementation.\nSOURCE: https://github.com/giphy/giphy-js/blob/master/packages/fetch-api/README.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nemojiVariations(id: GifID): Promise<NonPaginatedGifsResult>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst { data: gifs } = await gf.emojiVariations('iigp4VDyf5dCLRlGkm')\n```\n\n----------------------------------------\n\nTITLE: Fetching Subcategories in TypeScript\nDESCRIPTION: Example showing how to fetch subcategories for a specific category using the subcategories method. This demonstrates the method signature and implementation with options.\nSOURCE: https://github.com/giphy/giphy-js/blob/master/packages/fetch-api/README.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nsubcategories(category: string, options?: SubcategoriesOptions): Promise<CategoriesResult>\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// Example:\nconst { data: categories } = await gf.subcategories('tv', { limit: 10, offset: 25, rating: 'g' })\ncategories.forEach((category) => {\n    console.log(category) // ICategory\n})\n```\n\n----------------------------------------\n\nTITLE: Responsive Grid TypeScript Update\nDESCRIPTION: Major update to the Grid component adding responsive support through percentageWidth prop and removing useTransform property. Also adds lazyLoad prop to Gif component.\nSOURCE: https://github.com/giphy/giphy-js/blob/master/packages/react-components/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface GridProps {\n  percentageWidth?: string; // e.g. '100%'\n  width: number; // determines rendition selection\n}\n\ninterface GifProps {\n  lazyLoad?: boolean; // default true, controls on-screen loading logic\n}\n```\n\n----------------------------------------\n\nTITLE: Styled Components Migration\nDESCRIPTION: Major change switching from emotion to styled-components library. Includes renaming of theme properties for search bar component.\nSOURCE: https://github.com/giphy/giphy-js/blob/master/packages/react-components/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface SearchBarTheme {\n  mobileSearchbarHeight: string; // formerly smallSearchbarHeight\n  mobileMediaQuery: string; // formerly condensedMediaQuery\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @giphy/js-components v5.4.1\nDESCRIPTION: Specifies the version and release date for @giphy/js-components package.\nSOURCE: https://github.com/giphy/giphy-js/blob/master/packages/components/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## @giphy/js-components@5.4.1 (2022-03-02)\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies for @giphy/js-components\nDESCRIPTION: Lists updated dependencies for the @giphy/js-components package.\nSOURCE: https://github.com/giphy/giphy-js/blob/master/packages/components/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n-   Updated dependencies [9418497]\n    -   @giphy/js-analytics@4.3.1\n    -   @giphy/js-fetch-api@4.9.1\n    -   @giphy/js-brand@2.3.1\n    -   @giphy/js-util@4.4.1\n```\n\n----------------------------------------\n\nTITLE: Adding Keypress to GIF Events\nDESCRIPTION: Mentions pull requests that add keypress functionality to GIF events in components and react-components.\nSOURCE: https://github.com/giphy/giphy-js/blob/master/packages/components/CHANGELOG.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n-   `components`, `react-components`\n    -   [#280](https://github.com/Giphy/giphy-js/pull/280) feat(gif) Add keypress to GIF Events ([@pshoniuk](https://github.com/pshoniuk))\n    -   [#279](https://github.com/Giphy/giphy-js/pull/279) feat(gif) Add keypress to GIF Events ([@robertpin](https://github.com/robertpin))\n```\n\n----------------------------------------\n\nTITLE: Displaying Version History in Markdown\nDESCRIPTION: This snippet shows the changelog for version 5.0.0 of the @giphy/js-analytics package. It includes major changes, such as the transition to type: module, and potential breaking changes in the output format.\nSOURCE: https://github.com/giphy/giphy-js/blob/master/packages/analytics/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 5.0.0\n\n### Major Changes\n\n-   9914802: util, analytics, fetch-api and brand are all type: module now. See [here](https://github.com/Giphy/giphy-js/pull/391#issue-1770394467) for more info\n\n    ## Possible breaking change\n\n    The output format has changed. If you are accessing files in dist, your build will fail.\n\n### Patch Changes\n\n-   Updated dependencies [9914802]\n    -   @giphy/js-util@5.0.0\n```\n\n----------------------------------------\n\nTITLE: Documenting Patch Changes in Markdown\nDESCRIPTION: This snippet details the patch changes for versions 4.3.2 and 4.3.1 of the @giphy/js-analytics package. It includes updates to package.json exports and dependency upgrades.\nSOURCE: https://github.com/giphy/giphy-js/blob/master/packages/analytics/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 4.3.2\n\n### Patch Changes\n\n-   8c8e8d6: Add types to package.json export field\n-   Updated dependencies [8c8e8d6]\n    -   @giphy/js-util@4.4.2\n\n## 4.3.1\n\n### Patch Changes\n\n-   9418497: dependency upgrades\n-   Updated dependencies [9418497]\n    -   @giphy/js-util@4.4.1\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Version 4.4.2\nDESCRIPTION: Empty release entry documenting version 4.4.2\nSOURCE: https://github.com/giphy/giphy-js/blob/master/packages/util/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 4.4.2\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Version 5.1.0\nDESCRIPTION: Updates including moat tracking in React components, dependency cleanup, and bottle data changes\nSOURCE: https://github.com/giphy/giphy-js/blob/master/packages/util/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## 5.1.0\n\n### Minor Changes\n\n-   94158d9: - moat tracking in react components\n    -   remove unused deps in util\n    -   append bottle data in fetch-api\n    -   update types for gif to include bottle_data\n\n### Patch Changes\n\n-   Updated dependencies [94158d9]\n    -   @giphy/js-types@5.1.0\n```\n\n----------------------------------------\n\nTITLE: Defining GIPHY JavaScript Types Package\nDESCRIPTION: Markdown header and description for the @giphy/js-types package, which provides shared TypeScript type definitions for GIPHY JavaScript packages.\nSOURCE: https://github.com/giphy/giphy-js/blob/master/packages/types/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @giphy/js-types\n\nTypes package shared across all giphy js packages.\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variable to Disable Font Loading in GIPHY SDK\nDESCRIPTION: Example of setting an environment variable to prevent fonts from loading in the GIPHY SDK. This is not recommended as it may cause UI inconsistencies in components.\nSOURCE: https://github.com/giphy/giphy-js/blob/master/packages/brand/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nGIPHY_SDK_NO_FONTS=true\n```\n\n----------------------------------------\n\nTITLE: Installing GIPHY-JS Dependencies\nDESCRIPTION: Command to install project dependencies using Yarn package manager.\nSOURCE: https://github.com/giphy/giphy-js/blob/master/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ yarn\n```\n\n----------------------------------------\n\nTITLE: Running Development Environment for GIPHY-JS Components\nDESCRIPTION: Commands to navigate to the components package directory and start the development environment.\nSOURCE: https://github.com/giphy/giphy-js/blob/master/README.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ cd packages/components\n$ yarn run dev\n```\n\n----------------------------------------\n\nTITLE: Linting GIPHY-JS Project\nDESCRIPTION: Command to run linting on the entire GIPHY-JS project from the root directory.\nSOURCE: https://github.com/giphy/giphy-js/blob/master/README.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ yarn run lint\n```\n\n----------------------------------------\n\nTITLE: Creating Changeset for GIPHY-JS Updates\nDESCRIPTION: Command to create a changeset using the Changeset CLI, which is used for versioning and describing changes before publishing.\nSOURCE: https://github.com/giphy/giphy-js/blob/master/README.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n$ yarn changeset\n```\n\n----------------------------------------\n\nTITLE: Unmuting a GIPHY Clip\nDESCRIPTION: Unmutes the audio of the GIPHY Clip.\nSOURCE: https://github.com/giphy/giphy-js/blob/master/packages/embed-sdk/README.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nvideo.unmute() // Unmute the clip\n```\n\n----------------------------------------\n\nTITLE: Seeking to a Specific Time in a GIPHY Clip\nDESCRIPTION: Jumps to a specific timestamp (in seconds) within the GIPHY Clip.\nSOURCE: https://github.com/giphy/giphy-js/blob/master/packages/embed-sdk/README.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nvideo.seekTo(10) // Goes to a direct time on the clip\n```\n\n----------------------------------------\n\nTITLE: Fixing WebP Loading Bug in Components\nDESCRIPTION: References a pull request that fixes a WebP loading bug in the components.\nSOURCE: https://github.com/giphy/giphy-js/blob/master/packages/components/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n-   `components`, `react-components`\n    -   [#281](https://github.com/Giphy/giphy-js/pull/281) Fix - WebP Loading Bug ([@giannif](https://github.com/giannif))\n```\n\n----------------------------------------\n\nTITLE: Adding Fixed Width Option for Carousel Items\nDESCRIPTION: Describes a new feature that adds a gifWidth option for fixed width carousel items.\nSOURCE: https://github.com/giphy/giphy-js/blob/master/packages/components/CHANGELOG.md#2025-04-23_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n-   `components`, `react-components`\n    -   [#276](https://github.com/Giphy/giphy-js/pull/276) feat(carousel): add a gifWidth option for fixed width carousel items ([@giannif](https://github.com/giannif))\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Version 5.2.0\nDESCRIPTION: Minor changes including bottle data injection fixes and magic tags replacement\nSOURCE: https://github.com/giphy/giphy-js/blob/master/packages/util/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 5.2.0\n\n### Minor Changes\n\n-   1125e6e: fix bottle data injection and replace magic tags\n```"
  }
]