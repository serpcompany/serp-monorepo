[
  {
    "owner": "adafruit",
    "repo": "circuitpython",
    "content": "TITLE: Using Context Manager for Hardware Cleanup in CircuitPython\nDESCRIPTION: Example of using a context manager ('with' statement) to ensure hardware (LED) is properly deinitialized in CircuitPython, even if exceptions occur. This is the recommended approach for resource management.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/docs/design_guide.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport digitalio\nimport board\nimport time\n\nwith digitalio.DigitalInOut(board.LED) as led:\n    led.direction = digitalio.Direction.OUTPUT\n\n    for i in range(10):\n        led.value = True\n        time.sleep(0.5)\n\n        led.value = False\n        time.sleep(0.5)\n```\n\n----------------------------------------\n\nTITLE: Installing Required Python Packages for CircuitPython Build\nDESCRIPTION: Command to install necessary Python packages for building CircuitPython. These packages are listed in the requirements-dev.txt file.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/BUILDING.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npip3 install -r requirements-dev.txt\n```\n\n----------------------------------------\n\nTITLE: Implementing I2C Device Driver Example\nDESCRIPTION: Example code showing how to implement a basic I2C device driver class with read/write functionality using the adafruit_bus_device library.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/docs/design_guide.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom adafruit_bus_device import i2c_device\n\nDEVICE_DEFAULT_I2C_ADDR = 0x42\n\nclass Widget:\n    \"\"\"A generic widget.\"\"\"\n\n    def __init__(self, i2c, address=DEVICE_DEFAULT_I2C_ADDR):\n        self.i2c_device = i2c_device.I2CDevice(i2c, address)\n        self.buf = bytearray(1)\n\n    @property\n    def register(self):\n        \"\"\"Widget's one register.\"\"\"\n        with self.i2c_device as i2c:\n            i2c.writeto(b'0x00')\n            i2c.readfrom_into(self.buf)\n        return self.buf[0]\n```\n\n----------------------------------------\n\nTITLE: Using dump() to serialize Python objects to JSON streams in CircuitPython\nDESCRIPTION: The dump() function serializes a Python object to a JSON string and writes it to the provided stream. It accepts optional separators parameter to control formatting, defaulting to (', ', ': '). To create compact JSON, use (',', ':') as separators.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/docs/library/json.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndump(obj, stream, separators=None)\n```\n\n----------------------------------------\n\nTITLE: Fetching Submodules for CircuitPython Build\nDESCRIPTION: Commands to update git submodules for the CircuitPython project. This is necessary to ensure all required dependencies are present before building.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/BUILDING.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake fetch-all-submodules\n```\n\nLANGUAGE: shell\nCODE:\n```\nmake fetch-port-submodules\n```\n\n----------------------------------------\n\nTITLE: Using loads() to deserialize JSON strings to Python objects in CircuitPython\nDESCRIPTION: The loads() function parses a string containing JSON data and returns the corresponding Python object. It raises ValueError if the JSON string is not correctly formed.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/docs/library/json.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nloads(str)\n```\n\n----------------------------------------\n\nTITLE: Building and Flashing CircuitPython to Espressif Boards\nDESCRIPTION: Command to build and flash CircuitPython to a specific Espressif board, specifying the board ID and serial port.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/ports/espressif/README.rst#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmake BOARD=board_id PORT=/dev/tty.usbserial-1421120 flash\n```\n\n----------------------------------------\n\nTITLE: Creating StringIO and BytesIO In-Memory File Objects\nDESCRIPTION: Creates in-memory file-like objects for text or binary I/O operations. These objects support all standard file methods and can be initialized with content.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/docs/library/io.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nStringIO([string])\nBytesIO([string])\n```\n\n----------------------------------------\n\nTITLE: Creating and Using a Named Tuple in Python\nDESCRIPTION: This snippet demonstrates how to create and use a named tuple using the namedtuple function from the collections module. It creates a MyTuple type with 'id' and 'name' fields, then instantiates and accesses the tuple's values.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/docs/library/collections.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom collections import namedtuple\n\nMyTuple = namedtuple(\"MyTuple\", (\"id\", \"name\"))\nt1 = MyTuple(1, \"foo\")\nt2 = MyTuple(2, \"bar\")\nprint(t1.name)\nassert t2.name == t2[1]\n```\n\n----------------------------------------\n\nTITLE: Reading Pin Definitions in REPL\nDESCRIPTION: Python REPL commands to view available pin definitions on a CircuitPython board.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/ports/silabs/boards/explorerkit_xg24_brd2703a/README.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport board\ndir(board)\n```\n\n----------------------------------------\n\nTITLE: Pushing an Item onto a Heap in Python\nDESCRIPTION: This function pushes an item onto a heap. It maintains the heap invariant, ensuring the first item remains the smallest.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/docs/library/heapq.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nheappush(heap, item)\n```\n\n----------------------------------------\n\nTITLE: Using load() to deserialize JSON streams to Python objects in CircuitPython\nDESCRIPTION: The load() function parses a stream containing JSON data and deserializes it to a Python object. It continues parsing until end-of-file is encountered and raises ValueError if the JSON is not correctly formed.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/docs/library/json.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nload(stream)\n```\n\n----------------------------------------\n\nTITLE: Debugging CircuitPython with JLink and GDB\nDESCRIPTION: Example commands for debugging CircuitPython on hardware using JLinkGDBServer and arm-none-eabi-gdb. This setup allows for debugging the SAMD21 microcontroller.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/BUILDING.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nJLinkGDBServer -if SWD -device ATSAMD51J19\n```\n\nLANGUAGE: shell\nCODE:\n```\narm-none-eabi-gdb build-metro_m4_express/firmware.elf -iex \"target extended-remote :2331\"\n```\n\n----------------------------------------\n\nTITLE: Creating an Array in CircuitPython\nDESCRIPTION: Creates an array with elements of a given type. The initial contents can be provided by an iterable. If no iterable is provided, an empty array is created.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/docs/library/array.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\narray(typecode, [iterable])\n```\n\n----------------------------------------\n\nTITLE: Base64 Encoding and Decoding in Python using binascii\nDESCRIPTION: Provides functions for encoding binary data to base64 format and decoding base64-encoded data. The b2a_base64 function can optionally omit the newline character at the end.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/docs/library/binascii.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\na2b_base64(data)\n```\n\nLANGUAGE: python\nCODE:\n```\nb2a_base64(data, *, newline=True)\n```\n\n----------------------------------------\n\nTITLE: Using dumps() to serialize Python objects to JSON strings in CircuitPython\nDESCRIPTION: The dumps() function returns a Python object represented as a JSON string. Like dump(), it accepts an optional separators parameter to control formatting.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/docs/library/json.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndumps(obj, separators=None)\n```\n\n----------------------------------------\n\nTITLE: Exporting ARM Toolchain Path for CircuitPython Build\nDESCRIPTION: Commands to set up the ARM GNU Toolchain in the PATH variable to prepare for building CircuitPython for MAX32 devices. This needs to be done each time a new command environment is opened.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/ports/analog/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ export ARM_GNU_PATH=C:/x-tools/arm-win/arm-none-eabi-w64-i686-13.3rel1/bin\n$ export PATH=$ARM_GNU_PATH:$PATH\n```\n\n----------------------------------------\n\nTITLE: Creating and Iterating Over an OrderedDict in Python\nDESCRIPTION: This example shows how to create an OrderedDict, which preserves the order of keys added. It initializes the OrderedDict with a sequence of key-value pairs, adds more items, and then iterates over the dictionary to print its contents in order.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/docs/library/collections.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom collections import OrderedDict\n\n# To make benefit of ordered keys, OrderedDict should be initialized\n# from sequence of (key, value) pairs.\nd = OrderedDict([(\"z\", 1), (\"a\", 2)])\n# More items can be added as usual\nd[\"w\"] = 5\nd[\"b\"] = 3\nfor k, v in d.items():\n    print(k, v)\n```\n\n----------------------------------------\n\nTITLE: Erasing CircuitPython Filesystem via REPL\nDESCRIPTION: Commands to erase and reset the CIRCUITPY filesystem using the REPL. This method requires REPL access and will completely erase the filesystem, creating a fresh empty CIRCUITPY drive after restart.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/docs/troubleshooting.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport storage\nstorage.erase_filesystem()\n```\n\n----------------------------------------\n\nTITLE: Flashing CircuitPython to AD-APARD32690-SL Using MAX32625PICO\nDESCRIPTION: Command to flash CircuitPython to the APARD board when using the MAX32625PICO programmer. This uses the MSDK flashing method.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/ports/analog/boards/apard32690/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake BOARD=APARD flash-msdk\n```\n\n----------------------------------------\n\nTITLE: Implementing SPI Device Driver Example\nDESCRIPTION: Example code showing how to implement a basic SPI device driver class with custom baudrate using the adafruit_bus_device library.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/docs/design_guide.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom adafruit_bus_device import spi_device\n\nclass SPIWidget:\n    \"\"\"A generic widget with a weird baudrate.\"\"\"\n\n    def __init__(self, spi, chip_select):\n        # chip_select is a pin reference such as board.D10.\n        self.spi_device = spi_device.SPIDevice(spi, chip_select, baudrate=12345)\n        self.buf = bytearray(1)\n\n    @property\n    def register(self):\n        \"\"\"Widget's one register.\"\"\"\n        with self.spi_device as spi:\n            spi.write(b'0x00')\n            spi.readinto(self.buf)\n        return self.buf[0]\n```\n\n----------------------------------------\n\nTITLE: Converting a List into a Heap in Python\nDESCRIPTION: This function converts a list into a heap. It's an in-place operation, meaning it modifies the original list to satisfy the heap invariant.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/docs/library/heapq.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nheapify(x)\n```\n\n----------------------------------------\n\nTITLE: Detecting Bitness of a Platform Using sys.maxsize in Python\nDESCRIPTION: This code snippet demonstrates how to detect the \"bitness\" of a platform (32-bit vs 64-bit) by counting the number of bits in sys.maxsize. It iteratively shifts the value right and counts bits to determine platform characteristics.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/docs/library/sys.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nbits = 0\nv = sys.maxsize\nwhile v:\n    bits += 1\n    v >>= 1\nif bits > 32:\n    # 64-bit (or more) platform\n    ...\nelse:\n    # 32-bit (or less) platform\n    # Note that on 32-bit platform, value of bits may be less than 32\n    # (e.g. 31) due to peculiarities described above, so use \"> 16\",\n    # \"> 32\", \"> 64\" style of comparisons.\n```\n\n----------------------------------------\n\nTITLE: Flashing Firmware for PCA10056 Board\nDESCRIPTION: This command demonstrates how to flash firmware onto the PCA10056 board using the make command.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/ports/nordic/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake BOARD=pca10056 flash\n```\n\n----------------------------------------\n\nTITLE: Hexadecimal Conversion in Python using binascii\nDESCRIPTION: Converts binary data to hexadecimal representation and vice versa. The hexlify function can optionally use a separator between hexadecimal values.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/docs/library/binascii.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nhexlify(data, [sep])\n```\n\nLANGUAGE: python\nCODE:\n```\nunhexlify(data)\n```\n\n----------------------------------------\n\nTITLE: I2C Device Implementation Example in Python\nDESCRIPTION: Example showing how to implement an I2C device using Register and BusDevice libraries with proper documentation.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/docs/design_guide.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom adafruit_register import i2c_bit\nfrom adafruit_bus_device import i2c_device\n\nclass HelloWorldDevice:\n    \"\"\"Device with two bits to control when the words 'hello' and 'world' are lit.\"\"\"\n\n    hello = i2c_bit.RWBit(0x0, 0x0)\n    \"\"\"Bit to indicate if hello is lit.\"\"\"\n\n    world = i2c_bit.RWBit(0x1, 0x0)\n    \"\"\"Bit to indicate if world is lit.\"\"\"\n\n    def __init__(self, i2c, device_address=0x0):\n        self.i2c_device = i2c_device.I2CDevice(i2c, device_address)\n```\n\n----------------------------------------\n\nTITLE: CRC-32 Checksum Calculation in Python using binascii\nDESCRIPTION: Computes the 32-bit CRC checksum of the input data. The function allows specifying an initial CRC value, defaulting to 0. The algorithm is consistent with ZIP file checksums.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/docs/library/binascii.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ncrc32(data, value=0, /)\n```\n\n----------------------------------------\n\nTITLE: Using CircuitPython Help Function\nDESCRIPTION: Built-in help function that prints documentation about a given object. When called without arguments (object=None), it displays general information about the CircuitPython port.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/shared-bindings/help.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nhelp(object=None)\n```\n\n----------------------------------------\n\nTITLE: Generating LittleFS v2.3.0 Prefixed Files for CircuitPython\nDESCRIPTION: Commands to checkout LittleFS v2.3.0, generate files with lfs2 prefix using the prefix script, copy them to the CircuitPython directory, and reset the repository.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/lib/littlefs/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit checkout v2.3.0\npython2 ./scripts/prefix.py lfs2\ncp lfs2*.[ch] $MPY_DIR/lib/littlefs\ngit reset --hard HEAD\n```\n\n----------------------------------------\n\nTITLE: Using MicroPython const() Example\nDESCRIPTION: Example showing proper usage of MicroPython const() for memory optimization in CircuitPython device drivers.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/docs/design_guide.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom adafruit_bus_device import i2c_device\nfrom micropython import const\n\n_DEFAULT_I2C_ADDR = const(0x42)\n\nclass Widget:\n    \"\"\"A generic widget.\"\"\"\n\n    def __init__(self, i2c, address=_DEFAULT_I2C_ADDR):\n        self.i2c_device = i2c_device.I2CDevice(i2c, address)\n```\n\n----------------------------------------\n\nTITLE: Creating Poll Instance - CircuitPython Select Module\nDESCRIPTION: Creates an instance of the Poll class for monitoring stream events. This is the recommended way to implement event monitoring in CircuitPython.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/docs/library/select.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npoll()\n```\n\n----------------------------------------\n\nTITLE: Using re.compile with split method in CircuitPython\nDESCRIPTION: Example demonstrating how to compile a regular expression that matches line break characters and use it to split a multi-line string. Shows the result of splitting a string with different line endings.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/docs/library/re.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport re\n\n# As re doesn't support escapes itself, use of r\"\" strings is not\n# recommended.\nregex = re.compile(\"[\\r\\n]\")\n\nregex.split(\"line1\\rline2\\nline3\\r\\n\")\n\n# Result:\n# ['line1', 'line2', 'line3', '', '']\n```\n\n----------------------------------------\n\nTITLE: Running Pin Generation Script\nDESCRIPTION: Shell command to execute the make_pins.py script for generating pin configuration files. Takes CSV input files and produces C source and header files.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/ports/silabs/boards/explorerkit_xg24_brd2703a/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ cd boards/brd2601b/\n$ python make_pins.py -s pins.c -e pin_functions.h pins.csv pin_functions.csv\n```\n\n----------------------------------------\n\nTITLE: Defining Environment Variables in TOML for CircuitPython\nDESCRIPTION: Example of a settings.toml file demonstrating various supported data types and structures in CircuitPython's TOML subset. Includes strings, integers, Unicode, and escape codes.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/docs/environment.rst#2025-04-21_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\nstr_key=\"Hello world\" # with trailing comment\nint_key = 7\nunicode_key=\"œuvre\"\nunicode_key2=\"\\u0153uvre\" # same as above\nunicode_key3=\"\\U00000153uvre\" # same as above\nescape_codes=\"supported, including \\r\\n\\\"\\\\\"\n# comment\n[subtable]\nsubvalue=\"cannot retrieve this using getenv\"\n```\n\n----------------------------------------\n\nTITLE: Exporting ESP-IDF Environment Variables\nDESCRIPTION: Command to add ESP-IDF tools to your path. This must be done in each new shell environment before building or flashing.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/ports/espressif/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsource ./esp-idf/export.sh\n```\n\n----------------------------------------\n\nTITLE: Creating Pre-allocated StringIO and BytesIO Objects\nDESCRIPTION: MicroPython extension constructors that create empty StringIO/BytesIO objects with pre-allocated memory to avoid memory fragmentation or out-of-memory situations.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/docs/library/io.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nStringIO(alloc_size)\nBytesIO(alloc_size)\n```\n\n----------------------------------------\n\nTITLE: Configuring CircuitPython Web Workflow in settings.toml\nDESCRIPTION: Example settings.toml file configuration for enabling auto-connection to Wi-Fi and the web workflow in CircuitPython. It includes settings for Wi-Fi credentials, web API password, port configuration, and instance naming.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/docs/workflows.md#2025-04-21_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n# To auto-connect to Wi-Fi\nCIRCUITPY_WIFI_SSID=\"scottswifi\"\nCIRCUITPY_WIFI_PASSWORD=\"secretpassword\"\n\n# To enable the web workflow. Change this too!\n# Leave the User field blank in the browser.\nCIRCUITPY_WEB_API_PASSWORD=\"passw0rd\"\n\nCIRCUITPY_WEB_API_PORT=80\nCIRCUITPY_WEB_INSTANCE_NAME=\"\"\n```\n\n----------------------------------------\n\nTITLE: Extending an Array in CircuitPython\nDESCRIPTION: Appends new elements from an iterable to the end of the array, growing its size.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/docs/library/array.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nextend(iterable)\n```\n\n----------------------------------------\n\nTITLE: Connecting to the REPL on Linux in Bash\nDESCRIPTION: Command to connect to the CircuitPython REPL (Read-Eval-Print Loop) console using the screen utility on Linux.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/ports/silabs/README.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nscreen /dev/'com-port-name'\n```\n\n----------------------------------------\n\nTITLE: Poll Event Monitoring Method - CircuitPython\nDESCRIPTION: Waits for registered objects to become ready or have exceptional conditions. Returns list of tuples containing object and event information.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/docs/library/select.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\npoll.poll(timeout=-1, /)\n```\n\n----------------------------------------\n\nTITLE: Indexed Writing to an Array in CircuitPython\nDESCRIPTION: Performs indexed writing to the array. Accepts a single value for integer indices and an array for slices. Negative indices count from the end.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/docs/library/array.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n__setitem__(index, value)\n```\n\n----------------------------------------\n\nTITLE: Installing Adafruit nRF Utility\nDESCRIPTION: This command installs the adafruit-nrfutil package from PyPi, which is required for DFU operations.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/ports/nordic/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npip3 install --user adafruit-nrfutil\n```\n\n----------------------------------------\n\nTITLE: Appending an Element to an Array in CircuitPython\nDESCRIPTION: Appends a new element to the end of the array, growing its size.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/docs/library/array.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nappend(val)\n```\n\n----------------------------------------\n\nTITLE: Declaring Constants with const() in MicroPython\nDESCRIPTION: Demonstrates how to use the const() function to declare constants in MicroPython. This allows the compiler to optimize expressions and can be used to create both global and hidden constants.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/docs/library/micropython.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom micropython import const\n\nCONST_X = const(123)\nCONST_Y = const(2 * CONST_X + 1)\n```\n\n----------------------------------------\n\nTITLE: Querying CircuitPython File System via HTTP OPTIONS\nDESCRIPTION: Example curl command showing how to query a CircuitPython device's file system using the HTTP OPTIONS method. This demonstrates checking allowed methods via CORS headers.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/docs/workflows.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncurl -v -u :passw0rd -X OPTIONS -L --location-trusted http://circuitpython.local/fs/\n```\n\n----------------------------------------\n\nTITLE: Poll Registration Method - CircuitPython\nDESCRIPTION: Registers a stream object for polling with optional event mask. Event mask can be POLLIN for reading or POLLOUT for writing, defaulting to both flags.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/docs/library/select.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\npoll.register(obj[, eventmask])\n```\n\n----------------------------------------\n\nTITLE: Building MicroPython Cross-Compiler\nDESCRIPTION: Command to build the MicroPython cross-compiler, which is a prerequisite for building CircuitPython.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/ports/cxd56/README.md#2025-04-21_snippet_2\n\nLANGUAGE: Makefile\nCODE:\n```\n$ make -C mpy-cross\n```\n\n----------------------------------------\n\nTITLE: Concatenating Arrays in CircuitPython\nDESCRIPTION: Returns a new array that is the concatenation of the array with another array.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/docs/library/array.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n__add__(other)\n```\n\n----------------------------------------\n\nTITLE: Using errno to Check for Existing Directory in CircuitPython\nDESCRIPTION: This example demonstrates how to handle an OSError exception when creating a directory that already exists. It checks the errno property of the exception to determine if the error is specifically EEXIST (directory already exists).\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/docs/library/errno.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ntry:\n    os.mkdir(\"my_dir\")\nexcept OSError as exc:\n    if exc.errno == errno.EEXIST:\n        print(\"Directory already exists\")\n```\n\n----------------------------------------\n\nTITLE: Converting Integer to Bytes in Python\nDESCRIPTION: Method of the int class that converts an integer to a bytes object. The byteorder parameter must be provided positionally in CircuitPython.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/docs/library/builtins.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nint.to_bytes(size, byteorder)\n```\n\n----------------------------------------\n\nTITLE: Poll Modification Method - CircuitPython\nDESCRIPTION: Updates the event mask for a registered object. Raises OSError if object is not registered.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/docs/library/select.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\npoll.modify(obj, eventmask)\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Display Resolution and Color Depth in CircuitPython\nDESCRIPTION: Example of configuring display resolution and color depth for RP2350 boards with DVI or HSTX connector using environment variables.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/docs/environment.rst#2025-04-21_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\nCIRCUITPY_DISPLAY_WIDTH=640\nCIRCUITPY_DISPLAY_COLOR_DEPTH=1\n```\n\n----------------------------------------\n\nTITLE: Disable Garbage Collection - Python\nDESCRIPTION: Disables automatic garbage collection while still allowing heap memory allocation. Manual collection remains possible using gc.collect().\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/docs/library/gc.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ngc.disable()\n```\n\n----------------------------------------\n\nTITLE: In-place Array Concatenation in CircuitPython\nDESCRIPTION: Concatenates the array with another array in-place. Equivalent to extend(other).\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/docs/library/array.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n__iadd__(other)\n```\n\n----------------------------------------\n\nTITLE: Manual Garbage Collection - Python\nDESCRIPTION: Manually triggers a garbage collection cycle.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/docs/library/gc.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ngc.collect()\n```\n\n----------------------------------------\n\nTITLE: Running OpenOCD for ESP32-S2 Debugging\nDESCRIPTION: Command to start OpenOCD with the JLink interface and a custom ESP32-S2 target configuration file for JTAG debugging.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/ports/espressif/README.rst#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nopenocd -f interface/jlink.cfg -f SOMEPATH/copied-esp32s2-saola-1.cfg\n```\n\n----------------------------------------\n\nTITLE: Accessing Symbolic Error Code Names from Error Numbers in CircuitPython\nDESCRIPTION: This example shows how to use the errorcode dictionary to convert a numeric error code to its symbolic string representation. It demonstrates looking up the string name 'EEXIST' from the numeric errno.EEXIST value.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/docs/library/errno.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> print(errno.errorcode[errno.EEXIST])\nEEXIST\n```\n\n----------------------------------------\n\nTITLE: Enable Garbage Collection - Python\nDESCRIPTION: Enables automatic garbage collection in the system.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/docs/library/gc.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngc.enable()\n```\n\n----------------------------------------\n\nTITLE: Popping the Smallest Item from a Heap in Python\nDESCRIPTION: This function pops and returns the smallest item from the heap. It raises an IndexError if the heap is empty. The heap invariant is maintained after the operation.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/docs/library/heapq.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nheappop(heap)\n```\n\n----------------------------------------\n\nTITLE: Installing Cookiecutter for CircuitPython Libraries in Python\nDESCRIPTION: Commands to install cookiecutter and use it to bootstrap a new CircuitPython library repository. This sets up the initial project structure with configs for CI, documentation, and other standard files.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/docs/design_guide.rst#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# The first time\npip install cookiecutter\n\ncookiecutter gh:adafruit/cookiecutter-adafruit-circuitpython\n```\n\n----------------------------------------\n\nTITLE: Testing PWM Duty Cycle Variations in CircuitPython\nDESCRIPTION: CircuitPython script (code_ramps.py) that tests PWM functionality by cycling through various frequencies (100 Hz to 10 MHz) and randomly varying duty cycles. Used to verify PWM implementation quality and timing accuracy.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/tests/circuitpython-manual/pwmio/README.md#2025-04-21_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Deinitializing Hardware with Manual Cleanup in CircuitPython\nDESCRIPTION: Example of manually deinitializing hardware (LED) after use in CircuitPython. This approach requires explicit cleanup but may be prone to errors if exceptions occur.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/docs/design_guide.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport digitalio\nimport board\nimport time\n\nled = digitalio.DigitalInOut(board.LED)\nled.direction = digitalio.Direction.OUTPUT\n\nfor i in range(10):\n    led.value = True\n    time.sleep(0.5)\n\n    led.value = False\n    time.sleep(0.5)\nled.deinit()\n```\n\n----------------------------------------\n\nTITLE: Memory Allocation Query - Python\nDESCRIPTION: Returns the number of bytes of heap RAM currently allocated by Python code. MicroPython extension not available in CPython.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/docs/library/gc.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ngc.mem_alloc()\n```\n\n----------------------------------------\n\nTITLE: Retrieving Platform Information in CircuitPython\nDESCRIPTION: The platform() function returns a string identifying the underlying platform, including system name, MicroPython version, architecture, platform version, and libc information.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/docs/library/platform.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nplatform()\n```\n\n----------------------------------------\n\nTITLE: Building CircuitPython for Specific Boards\nDESCRIPTION: Examples of commands to build CircuitPython for different boards. These commands change to the appropriate ports directory and initiate the build process.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/BUILDING.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncd ports/atmel-samd\nmake BOARD=circuitplayground_express\n```\n\nLANGUAGE: shell\nCODE:\n```\ncd ports/nordic\nmake BOARD=circuitplayground_bluefruit\n```\n\n----------------------------------------\n\nTITLE: Installing Modules with MicroPython Package Manager\nDESCRIPTION: Examples of using the built-in 'mip' package manager to install additional modules, both from the command line and from within the MicroPython interpreter.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/ports/unix/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ ./build-standard/micropython -m mip install hmac\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> import mip\n>>> mip.install(\"hmac\")\n```\n\n----------------------------------------\n\nTITLE: Setting Display Resolution for Specific CircuitPython Boards\nDESCRIPTION: Example of setting the CIRCUITPY_DISPLAY_WIDTH environment variable to select the correct screen resolution for certain board variants like Sunton and MaTouch.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/docs/environment.rst#2025-04-21_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\nCIRCUITPY_DISPLAY_WIDTH=1024\n```\n\n----------------------------------------\n\nTITLE: Registering a module in CircuitPython\nDESCRIPTION: Example of registering the 'board' module using the MP_REGISTER_MODULE macro from py/obj.h. This macro connects the Python module name with its C implementation.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/docs/common_hal.md#2025-04-21_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nMP_REGISTER_MODULE(MP_QSTR_board, board_module);\n```\n\n----------------------------------------\n\nTITLE: Building and Running CircuitPython Test Suite\nDESCRIPTION: Commands to build the Unix port of CircuitPython and run the test suite. This is useful for testing changes to the core language.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/BUILDING.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncd ports/unix\nmake axtls\nmake micropython\n\ncd ../../tests\n./run-tests.py\n```\n\n----------------------------------------\n\nTITLE: Client Output Example\nDESCRIPTION: Expected output from the Circuitpython client showing the connection, sending, and receiving process.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/tests/circuitpython-manual/socketpool/client/readme.md#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nConnecting to wifi\nCreating Socket\nConnecting\nSending\nReceiving\nbytearray(b'Hello, world')\n```\n\n----------------------------------------\n\nTITLE: Configuring PicoDVI Display in CircuitPython\nDESCRIPTION: Example of setting the CIRCUITPY_PICODVI_ENABLE environment variable to control display configuration at board initialization time for boards like Adafruit Feather RP2350.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/docs/environment.rst#2025-04-21_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\nCIRCUITPY_PICODVI_ENABLE=\"detect\" # when EDID EEPROM is detected (default)\nCIRCUITPY_PICODVI_ENABLE=\"always\"\nCIRCUITPY_PICODVI_ENABLE=\"never\"\n```\n\n----------------------------------------\n\nTITLE: GC Threshold Configuration - Python\nDESCRIPTION: Sets or queries the additional garbage collection allocation threshold. Collection triggers when specified amount of bytes are allocated. Returns current threshold when called without arguments.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/docs/library/gc.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ngc.threshold([amount])\n```\n\n----------------------------------------\n\nTITLE: Modifying the build in Makefile for SAMD port\nDESCRIPTION: An example Makefile snippet that shows how to hook the shared-bindings into the build process for an Atmel SAMD port. It defines the modules to build and adds sources to include both shared-bindings and port-specific common-hal implementations.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/docs/common_hal.md#2025-04-21_snippet_0\n\nLANGUAGE: makefile\nCODE:\n```\nSRC_BINDINGS = \\\n\tboard/__init__.c \\\n\tmicrocontroller/__init__.c \\\n\tmicrocontroller/Pin.c \\\n\tanalogpio/__init__.c \\\n\tanalogpio/AnalogIn.c \\\n\tanalogpio/AnalogOut.c \\\n\tdigitalio/__init__.c \\\n\tdigitalio/DigitalInOut.c \\\n\tpulseio/__init__.c \\\n\tpulseio/PulseIn.c \\\n\tpulseio/PulseOut.c \\\n\tpulseio/PWMOut.c \\\n\tbusio/__init__.c \\\n\tbusio/I2C.c \\\n\tbusio/SPI.c \\\n\tbusio/UART.c \\\n\tneopixel_write/__init__.c \\\n\ttime/__init__.c \\\n\tusb_hid/__init__.c \\\n\tusb_hid/Device.c\n\nSRC_BINDINGS_EXPANDED = $(addprefix shared-bindings/, $(SRC_BINDINGS)) \\\n                        $(addprefix common-hal/, $(SRC_BINDINGS))\n\n# Add the resulting objects to the full list\nOBJ += $(addprefix $(BUILD)/, $(SRC_BINDINGS_EXPANDED:.c=.o))\n# Add the sources for QSTR generation\nSRC_QSTR += $(SRC_C) $(SRC_BINDINGS_EXPANDED) $(STM_SRC_C)\n```\n\n----------------------------------------\n\nTITLE: NTP Time Request Output Example\nDESCRIPTION: Sample output showing the successful NTP time request response, including the server address and parsed time structure. Demonstrates the expected format when the code successfully retrieves time from pool.ntp.org.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/tests/circuitpython-manual/socketpool/datagram/readme.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nSending packet\nReceived packet\nAddress: ('82.197.188.130', 31488)\nTime: struct_time(tm_year=2021, tm_mon=2, tm_mday=11, tm_hour=22, tm_min=22, tm_sec=40, tm_wday=3, tm_yday=42, tm_isdst=-1)\n```\n\n----------------------------------------\n\nTITLE: Enabling WebUSB Serial Support in CircuitPython\nDESCRIPTION: Modified USB interface configuration settings to enable WebUSB (vendor) support while disabling HID and MIDI interfaces due to ESP32-S2 endpoint limitations.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/WEBUSB_README.md#2025-04-21_snippet_1\n\nLANGUAGE: makefile\nCODE:\n```\nCIRCUITPY_USB_HID = 0\nCIRCUITPY_USB_MIDI = 0\nCIRCUITPY_USB_VENDOR = 1\n```\n\n----------------------------------------\n\nTITLE: Available Memory Query - Python\nDESCRIPTION: Returns the number of bytes of heap RAM available for Python code allocation, or -1 if unknown. MicroPython extension not available in CPython.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/docs/library/gc.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ngc.mem_free()\n```\n\n----------------------------------------\n\nTITLE: Configuring CircuitPython Modules for Initial Port in Makefile\nDESCRIPTION: This makefile snippet shows how to disable CircuitPython modules in mpconfigboard.mk during early stages of porting to a new platform. It serves as a natural TODO list that can be pruned as module support is implemented.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/docs/porting.rst#2025-04-21_snippet_0\n\nLANGUAGE: makefile\nCODE:\n```\n# These modules are implemented in ports/<port>/common-hal:\n\n# Typically the first module to create\nCIRCUITPY_MICROCONTROLLER = 0\n# Typically the second module to create\nCIRCUITPY_DIGITALIO = 0\n# Other modules:\nCIRCUITPY_ANALOGIO = 0\nCIRCUITPY_BUSIO = 0\nCIRCUITPY_COUNTIO = 0\nCIRCUITPY_NEOPIXEL_WRITE = 0\nCIRCUITPY_PULSEIO = 0\nCIRCUITPY_OS = 0\nCIRCUITPY_NVM = 0\nCIRCUITPY_AUDIOBUSIO = 0\nCIRCUITPY_AUDIOIO = 0\nCIRCUITPY_ROTARYIO = 0\nCIRCUITPY_RTC = 0\nCIRCUITPY_SDCARDIO = 0\nCIRCUITPY_FRAMEBUFFERIO = 0\nCIRCUITPY_FREQUENCYIO = 0\nCIRCUITPY_I2CTARGET = 0\nCIRCUITPY_SPITARGET = 0\n# Requires SPI, PulseIO (stub ok):\nCIRCUITPY_DISPLAYIO = 0\n\n# These modules are implemented in shared-module/ - they can be included in\n# any port once their prerequisites in common-hal are complete.\n# Requires DigitalIO:\nCIRCUITPY_BITBANGIO = 0\n# Requires neopixel_write or SPI (dotstar)\nCIRCUITPY_PIXELBUF = 0\n# Requires OS\nCIRCUITPY_RANDOM = 0\n# Requires OS, filesystem\nCIRCUITPY_STORAGE = 0\n# Requires Microcontroller\nCIRCUITPY_TOUCHIO = 0\n# Requires USB\nCIRCUITPY_USB_HID = 0\nCIRCUITPY_USB_MIDI = 0\n# Does nothing without I2C\nCIRCUITPY_REQUIRE_I2C_PULLUPS = 0\n# No requirements, but takes extra flash\nCIRCUITPY_ULAB = 0\n```\n\n----------------------------------------\n\nTITLE: Indexed Reading from an Array in CircuitPython\nDESCRIPTION: Performs indexed reading from the array. Returns a single value for integer indices and an array for slices. Negative indices count from the end.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/docs/library/array.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n__getitem__(index)\n```\n\n----------------------------------------\n\nTITLE: Documenting Class Definition in Python\nDESCRIPTION: Example of documenting a class with initialization parameters using standard CircuitPython format.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/docs/design_guide.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass DS3231:\n    \"\"\"DS3231 real-time clock.\n\n       :param ~busio.I2C i2c_bus: The I2C bus the DS3231 is connected to.\n       :param int address: The I2C address of the device. Defaults to :const:`0x40`\n    \"\"\"\n\n    def __init__(self, i2c_bus, address=0x40):\n        self._i2c = i2c_bus\n```\n\n----------------------------------------\n\nTITLE: Installing ESP-IDF Tools for CircuitPython\nDESCRIPTION: Command to install the ESP-IDF tools required for building CircuitPython for Espressif boards. This must be run from the espressif port directory.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/ports/espressif/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./esp-idf/install.sh\n```\n\n----------------------------------------\n\nTITLE: Select Function Implementation - CircuitPython\nDESCRIPTION: Legacy function to wait for activity on stream objects. Takes read list, write list, and exception list as parameters, with optional timeout. Not recommended for efficiency reasons.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/docs/library/select.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nselect(rlist, wlist, xlist[, timeout])\n```\n\n----------------------------------------\n\nTITLE: Listing Python Package Dependencies for CircuitPython\nDESCRIPTION: This snippet enumerates the Python packages required for different components and processes in the CircuitPython project. It includes packages for NVM configuration, translation checking, pre-commit hooks, building and testing, web workflow, and specific port requirements.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/requirements-dev.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# For nvm.toml\ncascadetoml\njinja2\ntyper\n\nsh\nclick\ncpp-coveralls\n\nrequests\nrequests-cache\n\n# For translate check\npolib\n\n# For pre-commit\nruff==0.9.4 # ruff version must exactly match pre-commit-config.yaml\npyyaml\npre-commit\nmicropython-uncrustify\n\n# for combining the Nordic SoftDevice with CircuitPython\nintelhex\n\n# for building & testing natmods\npyelftools\n\ncryptography\n\n# for web workflow minify\nminify_html\njsmin\n\n# for Silicon Labs Configurator (SLC)\nwebsockets\ncolorama\n\n# for silabs builds\nsetuptools\n\n# For zephyr port\ntomlkit\n```\n\n----------------------------------------\n\nTITLE: Iterator-based Poll Method - CircuitPython\nDESCRIPTION: Efficient, allocation-free way to poll streams using an iterator. Supports one-shot behavior with flags parameter.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/docs/library/select.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\npoll.ipoll(timeout=-1, flags=0, /)\n```\n\n----------------------------------------\n\nTITLE: Accessing CircuitPython REPL on Spresense\nDESCRIPTION: Command to access the CircuitPython REPL (Read-Eval-Print Loop) via USB using the screen utility.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/ports/cxd56/README.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ screen /dev/ttyACM0 115200\n```\n\n----------------------------------------\n\nTITLE: Opening Files with the io.open() Function\nDESCRIPTION: The open() function is used to open files in CircuitPython. It supports the mode parameter across all ports, but support for other arguments varies by port.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/docs/library/io.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nopen(name, mode='r', **kwargs)\n```\n\n----------------------------------------\n\nTITLE: Documentation and Development Dependencies Requirements\nDESCRIPTION: Requirements file listing Python packages needed for CircuitPython development, including documentation generation with Sphinx, code formatting tools like black and isort, build utilities, and type checking support.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/requirements-doc.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# For docs\nmypy\nblack\nisort\ntwine\nbuild\nwheel\nastroid\nsetuptools>=45\nsetuptools_scm\n\n# For sphinx\nsphinx!=5.2.0.post0,<8.1.0\nsphinx-autoapi\nsphinx-rtd-theme\nsphinxcontrib-svg2pdfconverter\nsphinxcontrib-jquery\nreadthedocs-sphinx-search\nmyst-parser\n\n# For stubs and annotations\nadafruit-circuitpython-typing\n```\n\n----------------------------------------\n\nTITLE: Building CircuitPython for STM32 Boards\nDESCRIPTION: Commands for building CircuitPython for specific STM32 boards, including options for debug mode and UF2 bootloader support.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/ports/stm/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ cd ports/stm\n$ make BOARD=feather_stm32f405_express\n$ make BOARD=feather_stm32f405_express DEBUG=1 UF2_BOOTLOADER=1\n```\n\n----------------------------------------\n\nTITLE: Building CircuitPython Image for Spresense\nDESCRIPTION: Command to build the CircuitPython image specifically for the Spresense board using the make system.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/ports/cxd56/README.md#2025-04-21_snippet_4\n\nLANGUAGE: Makefile\nCODE:\n```\n$ make BOARD=spresense\n```\n\n----------------------------------------\n\nTITLE: Building MicroPython Unix Port\nDESCRIPTION: Commands to navigate to the Unix port directory, initialize submodules, and build the MicroPython interpreter for Unix-like systems.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/ports/unix/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cd ports/unix\n$ make submodules\n$ make\n```\n\n----------------------------------------\n\nTITLE: Flashing CircuitPython to STM32 Boards Using DFU-Util\nDESCRIPTION: Commands for flashing CircuitPython firmware to STM32 boards using DFU-Util, including both make-based and manual methods.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/ports/stm/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ make BOARD=feather_stm32F405_express flash\n\n# Alternatively:\ndfu-util -a 0 --dfuse-address 0x08000000 -D firmware.bin\n```\n\n----------------------------------------\n\nTITLE: Basic CircuitPython REPL Example\nDESCRIPTION: A simple example of using the CircuitPython REPL to print \"Hello world!\" after successfully connecting to the board.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/ports/silabs/README.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> print(\"Hello world!\")\nHello world!\n```\n\n----------------------------------------\n\nTITLE: Using MicroPython Cross Compiler\nDESCRIPTION: Example command to use the mpy-cross compiler. This compiles a Python file 'foo.py' into 'foo.mpy', which can be imported on a MicroPython runtime.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/mpy-cross/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ ./mpy-cross foo.py\n```\n\n----------------------------------------\n\nTITLE: Converting Bytes to Integer in Python\nDESCRIPTION: Class method for the int class that converts a bytes object to an integer. The byteorder parameter must be provided positionally in CircuitPython.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/docs/library/builtins.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nint.from_bytes(bytes, byteorder)\n```\n\n----------------------------------------\n\nTITLE: Downloading File with cURL\nDESCRIPTION: Downloads a file using GET request with authentication\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/docs/workflows.md#2025-04-21_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\ncurl -v -u :passw0rd -L --location-trusted http://circuitpython.local/fs/lib/hello/world.txt\n```\n\n----------------------------------------\n\nTITLE: Building MicroPython Cross Compiler\nDESCRIPTION: Command to build the MicroPython cross compiler. This should be run in the compiler's directory on a Unix-like system.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/mpy-cross/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ make\n```\n\n----------------------------------------\n\nTITLE: Poll Unregistration Method - CircuitPython\nDESCRIPTION: Removes a stream object from the polling registration.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/docs/library/select.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\npoll.unregister(obj)\n```\n\n----------------------------------------\n\nTITLE: Generating LittleFS v1.7.2 Prefixed Files for CircuitPython\nDESCRIPTION: Commands to checkout LittleFS v1.7.2, generate files with lfs1 prefix using the prefix script, copy them to the CircuitPython directory, and reset the repository.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/lib/littlefs/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit checkout v1.7.2\npython2 ./scripts/prefix.py lfs1\ncp lfs1*.[ch] $MPY_DIR/lib/littlefs\ngit reset --hard HEAD\n```\n\n----------------------------------------\n\nTITLE: Moving File with cURL\nDESCRIPTION: Moves/renames a file using MOVE request with X-Destination header\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/docs/workflows.md#2025-04-21_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\ncurl -v -u :passw0rd -X MOVE -H \"X-Destination: /fs/lib/hello/world2.txt\" -L --location-trusted http://circuitpython.local/fs/lib/hello/world.txt\n```\n\n----------------------------------------\n\nTITLE: Compiling mpy-cross for CircuitPython Build\nDESCRIPTION: Command to compile mpy-cross, which is needed to compile .py files into .mpy files during the CircuitPython build process.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/BUILDING.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmake -C mpy-cross\n```\n\n----------------------------------------\n\nTITLE: Accessing CircuitPython Directory Information via REST API\nDESCRIPTION: Example curl command for retrieving directory information from a CircuitPython device using the Web REST API. This command gets JSON-formatted data about files in a specific directory.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/docs/workflows.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncurl -v -u :passw0rd -H \"Accept: application/json\" -L --location-trusted http://circuitpython.local/fs/lib/hello/\n```\n\n----------------------------------------\n\nTITLE: Building CircuitPython for EFR32 Boards in Bash\nDESCRIPTION: Commands for building CircuitPython for Silicon Labs EFR32 boards, including options for specific boards, debugging, and cleaning the build.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/ports/silabs/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake BOARD=explorerkit_xg24_brd2703a\n\n# With debug flag\nmake BOARD=explorerkit_xg24_brd2703a DEBUG=1\n\n# Clean the project\nmake BOARD=explorerkit_xg24_brd2703a clean\n```\n\n----------------------------------------\n\nTITLE: Installing and Running pre-commit for Code Quality Checks\nDESCRIPTION: Commands to install pre-commit globally and activate it for the CircuitPython repository. Pre-commit is used to run code quality checks before each commit.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/BUILDING.md#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\npython3 -mpip install pre-commit\n```\n\nLANGUAGE: shell\nCODE:\n```\npre-commit install\n```\n\n----------------------------------------\n\nTITLE: Deleting File with cURL\nDESCRIPTION: Deletes a file using DELETE request with authentication\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/docs/workflows.md#2025-04-21_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\ncurl -v -u :passw0rd -X DELETE -L --location-trusted http://circuitpython.local/fs/lib/hello/world2.txt\n```\n\n----------------------------------------\n\nTITLE: Installing Documentation Dependencies for CircuitPython\nDESCRIPTION: Installs required Python packages for building the CircuitPython documentation using pip. This command should be run in the main circuitpython directory, preferably within a Python virtual environment.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/docs/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install -r requirements-doc.txt\n```\n\n----------------------------------------\n\nTITLE: Uploading File with cURL\nDESCRIPTION: Uploads a file using PUT request with authentication\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/docs/workflows.md#2025-04-21_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\necho \"Hello world\" >> test.txt\ncurl -v -u :passw0rd -T test.txt -L --location-trusted http://circuitpython.local/fs/lib/hello/world.txt\n```\n\n----------------------------------------\n\nTITLE: Installing CircuitPython on Fomu using dfu-util\nDESCRIPTION: Command to install CircuitPython on a Fomu device using dfu-util. This assumes the foboot bootloader is already updated and the device is in DFU mode. After installation, CIRCUITPY should appear as a drive.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/ports/litex/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndfu-util -D adafruit-circuitpython-fomu-en_US-<version>.dfu\n```\n\n----------------------------------------\n\nTITLE: Class Documentation Template Example\nDESCRIPTION: Template example showing how to properly document CircuitPython device driver classes with quickstart guides and code examples.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/docs/design_guide.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"\n\n**Quickstart: Importing and using the AHT10/AHT20 temperature sensor**\n\n    Here is an example of using the :class:`AHTx0` class.\n    First you will need to import the libraries to use the sensor\n\n    .. code-block:: python\n\n        import board\n        import adafruit_ahtx0\n\n    Once this is done you can define your `board.I2C` object and define your sensor object\n\n    .. code-block:: python\n\n        i2c = board.I2C()  # uses board.SCL and board.SDA\n        aht = adafruit_ahtx0.AHTx0(i2c)\n\n    Now you have access to the temperature and humidity using\n    the :attr:`temperature` and :attr:`relative_humidity` attributes\n\n    .. code-block:: python\n\n        temperature = aht.temperature\n        relative_humidity = aht.relative_humidity\n\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Getting Devices Info with cURL\nDESCRIPTION: Retrieves information about discovered devices on the network\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/docs/workflows.md#2025-04-21_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\ncurl -v -L http://circuitpython.local/cp/devices.json\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"total\": 1,\n\t\"devices\": [\n\t\t{\n\t\t\t\"hostname\": \"cpy-951032\",\n\t\t\t\"instance_name\": \"Adafruit Feather ESP32-S2 TFT\",\n\t\t\t\"port\": 80,\n\t\t\t\"ip\": \"192.168.1.235\"\n\t\t}\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: Using delattr() Function in Python\nDESCRIPTION: Deletes a named attribute from an object. The argument name should be a string that identifies the attribute to be removed from the object.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/docs/library/builtins.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndelattr(obj, name)\n```\n\n----------------------------------------\n\nTITLE: Building CircuitPython for AD-APARD32690-SL Board\nDESCRIPTION: Command to build CircuitPython for the APARD32690 board. This should be run from the ports/analog directory, and can be sped up by using the -jN flag to specify multiple cores for compilation.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/ports/analog/boards/apard32690/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake BOARD=apard32690\n```\n\n----------------------------------------\n\nTITLE: Parameter Documentation Format in Shell\nDESCRIPTION: Shows the standard format for documenting parameters in CircuitPython libraries.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/docs/design_guide.rst#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n:param param_type param_name: Parameter_description\n```\n\n----------------------------------------\n\nTITLE: RST Glossary Definition Block\nDESCRIPTION: A reStructuredText glossary block containing definitions for MicroPython and CircuitPython related terms\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/docs/reference/glossary.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. glossary::\n\n    baremetal\n        A system without a (full-fledged) operating system, for example an\n        :term:`MCU`-based system. When running on a baremetal system,\n        MicroPython effectively functions like a small operating system,\n        running user programs and providing a command interpreter\n        (:term:`REPL`).\n```\n\n----------------------------------------\n\nTITLE: Moving Directory with cURL\nDESCRIPTION: Moves/renames a directory using MOVE request with X-Destination header\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/docs/workflows.md#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ncurl -v -u :passw0rd -X MOVE -H \"X-Destination: /fs/lib/hello2/\" -L --location-trusted http://circuitpython.local/fs/lib/hello/\n```\n\n----------------------------------------\n\nTITLE: Flashing CircuitPython to AD-APARD32690-SL Using Segger JLink\nDESCRIPTION: Command to flash CircuitPython to the APARD board when using a Segger JLink programmer instead of the MAX32625PICO.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/ports/analog/boards/apard32690/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake BOARD=APARD flash-jlink\n```\n\n----------------------------------------\n\nTITLE: Server Output Example\nDESCRIPTION: Expected output from the Circuitpython server showing the WiFi connection, IP address assignment, socket creation, and message handling process.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/tests/circuitpython-manual/socketpool/server/readme.md#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nConnecting to Wifi\nFinding IP address\n192.168.10.128\nCreating socket\nAccepting connections\nConnected by ('192.168.10.179', 33274)\nReceiving\nbytearray(b'Hello, world')\nSending\n```\n\n----------------------------------------\n\nTITLE: Creating Directory with cURL\nDESCRIPTION: Creates a directory at the specified path using PUT request with authentication\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/docs/workflows.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncurl -v -u :passw0rd -X PUT -L --location-trusted http://circuitpython.local/fs/lib/hello/world/\n```\n\n----------------------------------------\n\nTITLE: Cloning CircuitPython Repository and Fetching Port Submodules in Bash\nDESCRIPTION: Commands to clone the CircuitPython repository from GitHub, navigate to the Silicon Labs port directory, and fetch the required submodules.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/ports/silabs/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$  git clone https://github.com/SiliconLabs/circuitpython.git\n$  cd circuitpython/ports/silabs\n$  make fetch-port-submodules\n```\n\n----------------------------------------\n\nTITLE: Flashing Bootloader to Spresense Board\nDESCRIPTION: Command to flash the bootloader to the Spresense board, which is required for first-time setup.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/ports/cxd56/README.md#2025-04-21_snippet_5\n\nLANGUAGE: Makefile\nCODE:\n```\n$ make BOARD=spresense flash-bootloader\n```\n\n----------------------------------------\n\nTITLE: Generating Table of Contents for CircuitPython Ports in reStructuredText\nDESCRIPTION: This snippet creates a table of contents using reStructuredText syntax, listing README files for various CircuitPython ports. It sets the maximum depth to 2 and includes relative paths to each port's documentation.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/docs/supported_ports.rst#2025-04-21_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n    :maxdepth: 2\n\n    ../ports/analog/README\n    ../ports/atmel-samd/README\n    ../ports/broadcom/README\n    ../ports/cxd56/README\n    ../ports/espressif/README\n    ../ports/litex/README\n    ../ports/mimxrt10xx/README\n    ../ports/nordic/README\n    ../ports/raspberrypi/README\n    ../ports/renode/README\n    ../ports/silabs/README\n    ../ports/stm/README\n    ../ports/unix/README\n    ../ports/zephyr-cp/README\n```\n\n----------------------------------------\n\nTITLE: Deleting Directory with cURL\nDESCRIPTION: Deletes a directory and its contents using DELETE request\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/docs/workflows.md#2025-04-21_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ncurl -v -u :passw0rd -X DELETE -L --location-trusted http://circuitpython.local/fs/lib/hello2/world/\n```\n\n----------------------------------------\n\nTITLE: Connecting GDB to ESP32-S2 for Debugging\nDESCRIPTION: Command to start GDB and load the firmware ELF file for debugging the ESP32-S2.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/ports/espressif/README.rst#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nxtensa-esp32s2-elf-gdb build-espressif_saola_1_wrover/firmware.elf\n```\n\n----------------------------------------\n\nTITLE: Building CircuitPython HTML Documentation\nDESCRIPTION: Generates the HTML documentation for CircuitPython using the make command. This should be executed in the main circuitpython directory after installing dependencies.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/docs/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake html\n```\n\n----------------------------------------\n\nTITLE: Flashing CircuitPython to MAX32 Devices\nDESCRIPTION: Command to flash a built CircuitPython firmware to a MAX32 device using the make tool with the flash-msdk target. This requires a MAX32625PICO connected via USB and to the target board via SWD.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/ports/analog/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ make BOARD=<target board> flash-msdk\n```\n\n----------------------------------------\n\nTITLE: Running make_pins.py Script for Pin Generation\nDESCRIPTION: Command to execute the make_pins.py script to generate pin definitions. This command generates pins.c and pin_functions.h files based on the input CSV files, which contain pin names, port numbers, pin numbers, and peripheral support.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/ports/silabs/boards/sparkfun_thingplus_matter_mgm240p_brd2704a/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cd boards/brd2601b/\n$ python make_pins.py -s pins.c -e pin_functions.h pins.csv pin_functions.csv\n```\n\n----------------------------------------\n\nTITLE: Retrieving libc Version in CircuitPython\nDESCRIPTION: The libc_ver() function returns a tuple containing the name of the libc that MicroPython is linked to and its corresponding version.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/docs/library/platform.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nlibc_ver()\n```\n\n----------------------------------------\n\nTITLE: OpenOCD Configuration for ESP32-S2 Debugging\nDESCRIPTION: Configuration line to add to esp32s2.cfg file to fix JLink debugging speed for boards like the Saola 1. This sets the adapter speed to 1000 kHz.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/ports/espressif/README.rst#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nadapter_khz 1000\n```\n\n----------------------------------------\n\nTITLE: GDB Commands for ESP32-S2 Debugging\nDESCRIPTION: Set of GDB commands to connect to the OpenOCD server, configure hardware watchpoints, reset the target, and set a breakpoint at app_main.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/ports/espressif/README.rst#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ntarget remote :3333\nset remote hardware-watchpoint-limit 2\nmon reset halt\nflushregs\nthb app_main\nc\n```\n\n----------------------------------------\n\nTITLE: Building CircuitPython for Nordic nRF7002 Development Kit\nDESCRIPTION: Command to build CircuitPython for the Nordic nRF7002 development kit using make with Zephyr's cmake system.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/ports/zephyr-cp/README.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nmake BOARD=nordic_nrf7002dk\n```\n\n----------------------------------------\n\nTITLE: Configuring Raspberry Pi Settings\nDESCRIPTION: This configuration file sets various parameters for a Raspberry Pi device. It includes settings for GPIO pins, JTAG, memory allocation, and kernel address. Some settings for audio, USB, and HDMI are commented out.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/ports/broadcom/config.txt#2025-04-21_snippet_0\n\nLANGUAGE: config\nCODE:\n```\n# dtparam=audio=on\n# dtoverlay=dwc2\n# core_freq_min=500\ngpio=22-27=np\nenable_jtag_gpio=1\n# hdmi_group=1\n# hdmi_mode=16\ngpu_mem=16\nkernel_address=0x100000\n```\n\n----------------------------------------\n\nTITLE: Running Internal Benchmarks\nDESCRIPTION: Command to run specific internal benchmarks for bytebuf operations using the run-internalbench.py script.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/tests/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./run-internalbench.py internal_bench/bytebuf-*.py\n```\n\n----------------------------------------\n\nTITLE: Omitted String Functions in CircuitPython\nDESCRIPTION: List of string operations that are not enabled on small builds due to flash memory limitations in CircuitPython.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/docs/library/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nstring.center()\nstring.partition()\nstring.splitlines()\nstring.reversed()\n```\n\n----------------------------------------\n\nTITLE: Running CircuitPython Synthio Test on Unix Port\nDESCRIPTION: This command builds the Unix port of CircuitPython and runs a test script for the synthio module. It generates a 'tune.wav' file as output, which can be played using any standard audio player.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/tests/circuitpython-manual/synthio/note/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n....../ports/unix/micropython-coverage code.py\n```\n\n----------------------------------------\n\nTITLE: Getting Disk Info with cURL\nDESCRIPTION: Retrieves information about attached disks\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/docs/workflows.md#2025-04-21_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\ncurl -v -L http://circuitpython.local/cp/diskinfo.json\n```\n\nLANGUAGE: json\nCODE:\n```\n[{\n\t\"root\": \"/\",\n\t\"free\": 2964992,\n\t\"block_size\": 512,\n\t\"writable\": true,\n\t\"total\": 2967552\n}]\n```\n\n----------------------------------------\n\nTITLE: Comparing Performance Benchmark Results\nDESCRIPTION: Command to compare scores from two different performance benchmark runs using the run-perfbench.py script.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/tests/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./run-perfbench.py -s pyb-run1.txt pyb-run2.txt\n```\n\n----------------------------------------\n\nTITLE: Installing Zephyr Development Environment\nDESCRIPTION: Commands for setting up the Zephyr development environment including west tool installation, project initialization, and SDK setup.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/ports/zephyr-cp/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npip install west\nwest init -l zephyr-config\nwest update\nwest zephyr-export\npip install -r lib/zephyr/scripts/requirements.txt\nwest sdk install\n```\n\n----------------------------------------\n\nTITLE: Running MicroPython Test Suite\nDESCRIPTION: Command to execute the complete test suite for the MicroPython Unix port to verify functionality.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/ports/unix/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ make test\n```\n\n----------------------------------------\n\nTITLE: Array String Representation in CircuitPython\nDESCRIPTION: Returns the string representation of the array in the format 'array(<type>, [<elements>])'.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/docs/library/array.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n__repr__()\n```\n\n----------------------------------------\n\nTITLE: Running Performance Benchmarks on Host\nDESCRIPTION: Command to run performance benchmarks on the host build (unix/Windows). It specifies the CPU frequency and heap size.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/tests/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./run-perfbench.py 2000 10000\n```\n\n----------------------------------------\n\nTITLE: Accessing STM32 Board REPL via Serial Connection\nDESCRIPTION: Command for accessing the CircuitPython REPL on an STM32 board via a serial connection on macOS.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/ports/stm/README.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nscreen /dev/tty.usbmodem14111201 115200\n```\n\n----------------------------------------\n\nTITLE: Configuring GDB Settings for CircuitPython Debugging\nDESCRIPTION: This snippet sets up initial GDB configurations, including display settings, logging, and hardware breakpoint limits. It prepares the environment for CircuitPython debugging.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/tools/output_gc_until_repl.txt#2025-04-21_snippet_0\n\nLANGUAGE: GDB\nCODE:\n```\ntar ext :2331\nmonitor reset\nset width 0\nset height 0\nset verbose off\nset logging file mylog.txt\nset logging overwrite on\nset logging redirect on\nset logging on\nset remote hardware-breakpoint-limit 4\n```\n\n----------------------------------------\n\nTITLE: Setting GC Breakpoint and Custom Commands in GDB for CircuitPython\nDESCRIPTION: This snippet sets a breakpoint in the garbage collection code and defines custom commands to execute when the breakpoint is hit. It prints memory block information and navigates the call stack.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/tools/output_gc_until_repl.txt#2025-04-21_snippet_1\n\nLANGUAGE: GDB\nCODE:\n```\n# gc log\nbreak gc.c:106\ncommands\np/x start_block\np/x length\np/x ticks_ms\n# backtrace output redirect is currently broken in gdb so we use up instead.\n# https://sourceware.org/bugzilla/show_bug.cgi?id=23439\n# backtrace\nup\nup\nup\nup\n# append binary memory ram.bin &_srelocate &_estack\ncontinue\nend\n```\n\n----------------------------------------\n\nTITLE: Running Performance Benchmarks on Firmware Target\nDESCRIPTION: Command to run performance benchmarks on a firmware target using pyboard.py. It specifies the port, CPU frequency, and heap size.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/tests/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./run-perfbench.py -p -d /dev/ttyACM0 168 100\n```\n\n----------------------------------------\n\nTITLE: Extracting Zephyr Build Flags for External Project\nDESCRIPTION: Retrieves and formats Zephyr build flags (include directories, system includes, compile definitions, and options) to be passed to the external CircuitPython build system. These flags ensure compatibility between Zephyr and CircuitPython builds.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/ports/zephyr-cp/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# From: https://github.com/zephyrproject-rtos/zephyr/blob/main/samples/application_development/external_lib/CMakeLists.txt\n# The external static library that we are linking with does not know\n# how to build for this platform so we export all the flags used in\n# this zephyr build to the external build system.\n#\n# Other external build systems may be self-contained enough that they\n# do not need any build information from zephyr. Or they may be\n# incompatible with certain zephyr options and need them to be\n# filtered out.\nzephyr_get_include_directories_for_lang_as_string(       C includes)\nzephyr_get_system_include_directories_for_lang_as_string(C system_includes)\nzephyr_get_compile_definitions_for_lang_as_string(       C definitions)\nzephyr_get_compile_options_for_lang_as_string(           C options)\n\nif(DEFINED CMAKE_C_COMPILER_TARGET)\n  set(target_flag \"--target=${CMAKE_C_COMPILER_TARGET}\")\nendif()\n\nset(external_project_cflags\n  \"${target_flag} ${includes} ${definitions} ${options} ${system_includes}\"\n  )\n\nzephyr_get(TRANSLATION SYSBUILD GLOBAL)\nzephyr_get(CONFIG_LTO SYSBUILD GLOBAL)\nzephyr_get(BOARD_ALIAS SYSBUILD GLOBAL)\n```\n\n----------------------------------------\n\nTITLE: Installing Required CircuitPython Build Dependencies in Bash\nDESCRIPTION: Command to install the necessary packages for building CircuitPython for Silicon Labs EFR32, including Java runtime, GCC ARM toolchain, and other required tools.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/ports/silabs/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install default-jre gcc-arm-none-eabi wget python3 python3-pip git git-lfs gettext uncrustify\nsudo python -m pip install --upgrade pip\n```\n\n----------------------------------------\n\nTITLE: Building Debug Versions of MicroPython Unix Port\nDESCRIPTION: Commands to build debuggable versions of MicroPython, either with full debug symbols and reduced optimization or with just symbols preserved.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/ports/unix/README.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ make [other arguments] DEBUG=1\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ make [other arguments] STRIP=\n```\n\n----------------------------------------\n\nTITLE: Accessing Pin Definitions in CircuitPython REPL\nDESCRIPTION: This Python code demonstrates how to view available pin definitions in the CircuitPython REPL environment. It imports the board module and uses the dir() function to list all attributes, including pin definitions.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/ports/silabs/boards/devkit_xg24_brd2601b/README.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport board\ndir(board)\n```\n\n----------------------------------------\n\nTITLE: Setting Main Breakpoint and Finalizing GDB Session for CircuitPython\nDESCRIPTION: This snippet sets a breakpoint in the main.c file, continues execution, and then cleans up by deleting breakpoints, disconnecting, and quitting GDB. It's used to finalize the debugging session.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/tools/output_gc_until_repl.txt#2025-04-21_snippet_2\n\nLANGUAGE: GDB\nCODE:\n```\nbreak main.c:251\n\ncontinue\n\ndelete\n\ndisconnect\nquit\n```\n\n----------------------------------------\n\nTITLE: Building CircuitPython for MAX32 Devices\nDESCRIPTION: Commands to build CircuitPython for a specific MAX32 board. The build process requires navigating to the analog port directory and specifying the target board.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/ports/analog/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ cd ports/analog\n$ make BOARD=<board from boards/ directory>\n```\n\n----------------------------------------\n\nTITLE: Reading Pin Definitions in CircuitPython REPL\nDESCRIPTION: Python code to view the available pins in the CircuitPython REPL. This imports the board module and uses dir() to list all available pin definitions.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/ports/silabs/boards/sparkfun_thingplus_matter_mgm240p_brd2704a/README.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport board\ndir(board)\n```\n\n----------------------------------------\n\nTITLE: Running GDB for Heap Analysis in CircuitPython\nDESCRIPTION: This command runs GDB with a custom script to analyze heap activity in CircuitPython firmware. It outputs the analysis to a log file for further processing.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/tools/gc_activity.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\narm-none-eabi-gdb -x ../../tools/output_gc_until_repl.txt build-metro_m0_express/firmware.elf\n```\n\n----------------------------------------\n\nTITLE: Configuring Original ESP32-S2 USB Settings in CircuitPython\nDESCRIPTION: Default USB interface configuration settings for espressif_kaluga_1 board in mpconfigboard.mk file. Shows the original configuration with HID enabled.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/WEBUSB_README.md#2025-04-21_snippet_0\n\nLANGUAGE: makefile\nCODE:\n```\nCIRCUITPY_USB_HID = 1\nCIRCUITPY_USB_MIDI = 0\nCIRCUITPY_USB_VENDOR = 0\n```\n\n----------------------------------------\n\nTITLE: Analyzing GC Log with Python Script\nDESCRIPTION: This Python command processes the GC log file generated by GDB, creating a JSON file with allocation history and outputting a tree of current block allocations.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/tools/gc_activity.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npython3 ../tools/gc_activity.py mylog.txt\n```\n\n----------------------------------------\n\nTITLE: Installing dfu-util on Linux using apt-get\nDESCRIPTION: Command to install the dfu-util tool on Linux systems using the apt-get package manager. This utility is required for flashing firmware to the Espruino Pico board.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/ports/stm/boards/espruino_pico/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install dfu-util\n```\n\n----------------------------------------\n\nTITLE: Getting Array Length in CircuitPython\nDESCRIPTION: Returns the number of items in the array.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/docs/library/array.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n__len__()\n```\n\n----------------------------------------\n\nTITLE: Adding User to Dialout Group in Linux\nDESCRIPTION: Command to add a user to the 'dialout' group in Linux, which is necessary for USB serial access.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/ports/cxd56/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo usermod -a -G dialout <user-name>\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Profiling Command in GDB for CircuitPython\nDESCRIPTION: Creates a custom GDB command called 'poor_profile' that takes an iteration count argument, runs the program for the specified number of times, and logs the program counter and backtrace at each stop point.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/ports/litex/boards/fomu/profiling.gdb.txt#2025-04-21_snippet_1\n\nLANGUAGE: gdb\nCODE:\n```\nserver define poor_profile\nset $total = $arg0\nset $i = 0\n   set logging on\n   while($i<$total)\n     set $i = $i + 1\n     cont\n     p $pc\n     bt\n   end\n   set logging off\nend\n```\n\n----------------------------------------\n\nTITLE: Flashing CircuitPython Image to Spresense Board\nDESCRIPTION: Command to flash the built CircuitPython firmware image to the Spresense board.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/ports/cxd56/README.md#2025-04-21_snippet_6\n\nLANGUAGE: Makefile\nCODE:\n```\n$ make BOARD=spresense flash\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Font for CircuitPython Terminal\nDESCRIPTION: Example of setting a custom font file path for the terminalio console using the CIRCUITPY_TERMINAL_FONT environment variable.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/docs/environment.rst#2025-04-21_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\nCIRCUITPY_TERMINAL_FONT=\"/fonts/myfont.lvfontbin\"\n```\n\n----------------------------------------\n\nTITLE: Updating Git Submodules\nDESCRIPTION: Command to pull all submodules into the cloned repository, which is required before building.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/ports/cxd56/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ git submodule update --init --recursive\n```\n\n----------------------------------------\n\nTITLE: BastBLE Hardware Description\nDESCRIPTION: Markdown documentation describing the core hardware components of the BastBLE board, including its Nordic nRF 52840 microcontroller and QSPI flash memory.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/ports/nordic/boards/bastble/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Electronic Cats BastBLE\n\nThe [BastBLE](https://electroniccats.com/store/bast-ble/) based on Nordic nRF 52840 and containing\na powerful Cortex M4F. This board include a external memory QSPI flash.\n```\n\n----------------------------------------\n\nTITLE: Customizing CircuitPython Documentation Build Options\nDESCRIPTION: Various command examples for customizing the documentation build process with different options. These commands demonstrate how to disable forced rebuilds, adjust verbosity levels, and pass additional options to Sphinx.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/docs/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# will turn OFF the force rebuild\nmake html FORCE=\n```\n\nLANGUAGE: bash\nCODE:\n```\n# will turn OFF the verbosity\nmake html VERBOSE=\n```\n\nLANGUAGE: bash\nCODE:\n```\n# will turn OFF the force rebuild and make it doubly verbose when running\nmake html FORCE= VERBOSE=\"-v -v\"\n```\n\nLANGUAGE: bash\nCODE:\n```\nmake html SPHINXOPTS=\"-T\"\n```\n\n----------------------------------------\n\nTITLE: Changing Directory to CXD56 Port\nDESCRIPTION: Command to navigate to the CXD56 port directory in the CircuitPython project structure.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/ports/cxd56/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ cd ports/cxd56\n```\n\n----------------------------------------\n\nTITLE: Running Synthio Audio Test Command\nDESCRIPTION: Shell command to execute the midi2wav.py script using the Unix port of CircuitPython, which generates a tune.wav audio file for testing audio synthesis capabilities.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/tests/circuitpython-manual/synthio/wave/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n....../ports/unix/micropython-coverage midi2wav.py\n```\n\n----------------------------------------\n\nTITLE: Integrating MEMZIP in Makefile for CircuitPython Projects\nDESCRIPTION: This Makefile snippet demonstrates how to incorporate MEMZIP into a CircuitPython project build process. It adds necessary source files, defines the output object file, and creates a rule to generate the memzip-files.c file from a directory of input files.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/shared/memzip/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nSRC_C += \\\n    shared/memzip/import.c \\\n    shared/memzip/lexermemzip.c \\\n    shared/memzip/memzip.c \\\n\nOBJ += $(BUILD)/memzip-files.o\n\nMAKE_MEMZIP = ../shared/memzip/make-memzip.py\n\n$(BUILD)/memzip-files.c: $(shell find ${MEMZIP_DIR} -type f)\n    @$(ECHO) \"Creating $@\"\n    $(Q)$(PYTHON) $(MAKE_MEMZIP) --zip-file $(BUILD)/memzip-files.zip --c-file $@ $(MEMZIP_DIR)\n```\n\n----------------------------------------\n\nTITLE: Documenting Module Structure in Python\nDESCRIPTION: Standard module documentation template including author info, hardware requirements, and software dependencies.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/docs/design_guide.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"\n`<module name>`\n=================================================\n\n<Longer description>\n\n* Author(s):\n\nImplementation Notes\n--------------------\n\n\n**Hardware:**\n\n* `Adafruit Device Description\n  <hyperlink>`_ (Product ID: <Product Number>)\n\n**Software and Dependencies:**\n\n* Adafruit CircuitPython firmware for the supported boards:\n  https://circuitpython.org/downloads\n\n* Adafruit's Bus Device library:\n  https://github.com/adafruit/Adafruit_CircuitPython_BusDevice\n\n* Adafruit's Register library:\n  https://github.com/adafruit/Adafruit_CircuitPython_Register\n\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Finding Serial Port on Linux in Bash\nDESCRIPTION: Command to list available serial ports on Linux to identify the correct port for connecting to the EFR32 board.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/ports/silabs/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nls /dev/ttyACM*\n```\n\n----------------------------------------\n\nTITLE: Converting RSA Key/Cert to DER Format\nDESCRIPTION: OpenSSL commands to convert RSA key and certificate from PEM to DER format for use in MicroPython tests.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/tests/README.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nopenssl pkey -in rsa_key.pem -out rsa_key.der -outform DER\nopenssl x509 -in rsa_cert.pem -out rsa_cert.der -outform DER\n```\n\n----------------------------------------\n\nTITLE: Flashing CircuitPython Using Simplicity Commander in Bash\nDESCRIPTION: Command to flash the built CircuitPython firmware to a Silicon Labs EFR32 board using Simplicity Commander.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/ports/silabs/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmake BOARD=explorerkit_xg24_brd2703a flash\n```\n\n----------------------------------------\n\nTITLE: Registering SDMMC Component in ESP-IDF for CircuitPython\nDESCRIPTION: This CMake command registers the SDMMC component for the ESP-IDF framework. It specifies source files, include directories, and dependencies required for the SDMMC functionality in CircuitPython.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/lib/sdmmc/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nidf_component_register(SRCS \"sdmmc_cmd.c\"\n                            \"sdmmc_common.c\"\n                            \"sdmmc_init.c\"\n                            \"sdmmc_io.c\"\n                            \"sdmmc_mmc.c\"\n                            \"sdmmc_sd.c\"\n                    INCLUDE_DIRS include\n                    REQUIRES driver\n                    PRIV_REQUIRES soc)\n```\n\n----------------------------------------\n\nTITLE: Generating ESP32-specific MBEDTLS Errors in Shell\nDESCRIPTION: Shell script to produce esp32_mbedtls_errors.c. This is used when an ESP32-specific version of the error strings is needed, which may differ from the standard MicroPython version.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/lib/mbedtls_errors/README.md#2025-04-21_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ndo-esp32.sh\n```\n\n----------------------------------------\n\nTITLE: Generating Module Support Matrix Table in RST\nDESCRIPTION: This code snippet uses Jinja templating to generate an RST table listing CircuitPython boards and their available modules. It includes HTML for a filter input and LaTeX commands for landscape orientation.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/shared-bindings/support_matrix.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. jinja\n\n.. raw:: html\n\n    <p id=\"support-matrix-filter-block\"><input placeholder=\"Filter the boards by available modules\" id=\"support-matrix-filter\" type=\"text\"/><span id=\"support-matrix-filter-num\">(all)</span></p>\n\n.. raw:: latex\n\n    \\begin{landscape}\n\n.. rst-class:: support-matrix-table\n.. list-table::\n   :header-rows: 1\n   :widths: 7, 50\n\n   * - Board\n     - Modules Available\n\n   {% for key, value in support_matrix|dictsort %}\n   * - {{ key }}\n\n       {{ '.. _' ~ key|replace(\" \", \"-\") ~ ':' }}\n\n     - {{ ':py:mod:`' ~ value.modules|join(\"`, :py:mod:`\") ~ '`' }}\n\n       {% for module in value.frozen_libraries %}\\\n       {% if loop.index == 1 %}**Frozen Modules:** {% endif %}\\\n       {% if loop.index > 1 %}, {% endif %}\\\n       {% if module[1] %}{{ '`' ~ module[0] ~ ' <' ~ module[1] ~ '>`__' }}\\\n       {% else %}{{ '`' ~ module[0] ~ ' <#>`__' }}\\\n       {% endif %}\\\n       {% endfor %}\n\n   {% endfor %}\n\n.. raw:: latex\n\n    \\end{landscape}\n```\n\n----------------------------------------\n\nTITLE: Defining Python Package Dependencies for CircuitPython\nDESCRIPTION: Lists required Python packages with minimum version constraints. Includes pyserial 2.7 or higher for serial communication and xmodem 0.3.2 or higher for file transfers.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/ports/cxd56/tools/requirements.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npyserial>=2.7\nxmodem>=0.3.2\n```\n\n----------------------------------------\n\nTITLE: Registering ESP-IDF Component with Dependencies\nDESCRIPTION: Registers an ESP-IDF component with source and include directories, and specifies private dependencies on cmock and sdmmc components. Uses the idf_component_register CMake command to configure the component build settings.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/lib/sdmmc/test/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nidf_component_register(SRC_DIRS \".\"\n                       PRIV_INCLUDE_DIRS \".\"\n                       PRIV_REQUIRES cmock sdmmc\n                      )\n```\n\n----------------------------------------\n\nTITLE: Displaying MicroPython Cross Compiler Options\nDESCRIPTION: Command to view all available options for the mpy-cross compiler. This is useful for understanding different compilation settings and target-specific options.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/mpy-cross/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ ./mpy-cross -h\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for CircuitPython ESP-IDF Project\nDESCRIPTION: This CMake configuration sets up the build environment for a CircuitPython project using the ESP-IDF framework. It specifies the minimum CMake version, sets the IDF_PATH, defines the list of components to be included, and configures project-specific settings. The configuration is tailored for ESP32 microcontrollers and includes various drivers and components necessary for the CircuitPython firmware.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/ports/espressif/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# The following five lines of boilerplate have to be in your project's\n# CMakeLists in this exact order for cmake to work correctly\ncmake_minimum_required(VERSION 3.16)\n\nset(ENV{IDF_PATH} ${CMAKE_SOURCE_DIR}/esp-idf)\n\n# The component list here determines what options we get in menuconfig and what the ninja file can build.\nset(COMPONENTS bt driver esp_driver_dac esp_driver_gpio esp_driver_gptimer esp_driver_i2c esp_driver_i2s esp_driver_ledc esp_driver_pcnt esp_driver_rmt esp_driver_spi esp_driver_tsens esp_driver_uart esp-tls esp_adc_cal esp_event esp_netif esp_psram esp_wifi esptool_py freertos log lwip main mbedtls mdns soc ulp usb wpa_supplicant esp-camera esp_lcd vfs esp_vfs_console sdmmc)\nset(EXTRA_COMPONENT_DIRS \"esp-protocols/components/mdns\" \"esp-camera\")\n\ninclude($ENV{IDF_PATH}/tools/cmake/project.cmake)\nproject(circuitpython)\n\nidf_build_set_property(__OUTPUT_SDKCONFIG 0)\n```\n\n----------------------------------------\n\nTITLE: Testing PWM Extreme Values in CircuitPython\nDESCRIPTION: CircuitPython script (code_extremes.py) that tests edge cases of PWM duty cycles (0%, 100%) across different frequencies. Verifies proper handling of extreme duty cycle values.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/tests/circuitpython-manual/pwmio/README.md#2025-04-21_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Defining Port-Specific Modules in ReStructuredText\nDESCRIPTION: This snippet defines a table of contents for port-specific modules in the RP2040 CircuitPython port. It includes links to documentation for cyw43, picodvi, and rp2pio modules.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/ports/raspberrypi/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n    ../../shared-bindings/cyw43/index\n    ../../shared-bindings/picodvi/index\n    ../../shared-bindings/rp2pio/index\n```\n\n----------------------------------------\n\nTITLE: Running MicroPython Unix Port Interpreter\nDESCRIPTION: Example of running the MicroPython interpreter and executing a Python list comprehension that demonstrates its functionality.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/ports/unix/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ ./build-standard/micropython\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> list(5 * x + y for x in range(10) for y in [4, 2, 1])\n```\n\n----------------------------------------\n\nTITLE: Setting up Zephyr Project for CircuitPython\nDESCRIPTION: Initializes the CMake project for CircuitPython integration with Zephyr RTOS. It sets the minimum required CMake version, finds the Zephyr package, and defines the project name and main source file.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/ports/zephyr-cp/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20.0)\n\nfind_package(Zephyr REQUIRED HINTS lib/zephyr)\nproject(circuitpython)\n\ntarget_sources(app PRIVATE zephyr_main.c)\n```\n\n----------------------------------------\n\nTITLE: Code Serving Instructions - Node HTTP Server\nDESCRIPTION: Instructions for setting up a local HTTP server to view the garbage collection activity visualization.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/tools/gc_activity.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g http-server\nhttp-server\n```\n\n----------------------------------------\n\nTITLE: Configuring RST Table of Contents for CircuitPython API Docs\nDESCRIPTION: RST directive configuration for organizing the documentation structure into multiple sections including API usage, design reference, and project information using toctree directives.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/docs/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 3\n   :caption: API and Usage\n\n   ../shared-bindings/index.rst\n   library/index.rst\n   supported_ports.rst\n   troubleshooting.rst\n   libraries.rst\n   workflows\n   environment.rst\n\n.. toctree::\n   :maxdepth: 1\n   :caption: Design and porting reference\n\n   design_guide\n   porting\n   common_hal\n   reference/glossary.rst\n\n.. toctree::\n   :maxdepth: 2\n   :caption: Python stand\n\n.. toctree::\n   :maxdepth: 1\n   :caption: About the project\n\n   ../README\n   ../CONTRIBUTING\n   ../BUILDING\n   ../CODE_OF_CONDUCT\n   ../docs/LICENSE\n   ../WEBUSB_README\n```\n\n----------------------------------------\n\nTITLE: Getting Version Info with cURL\nDESCRIPTION: Retrieves version and device information\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/docs/workflows.md#2025-04-21_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\ncurl -v -L http://circuitpython.local/cp/version.json\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"web_api_version\": 1,\n\t\"version\": \"8.0.0-alpha.1-20-ge1d4518a9-dirty\",\n\t\"build_date\": \"2022-06-24\",\n\t\"board_name\": \"ESP32-S3-USB-OTG-N8\",\n\t\"mcu_name\": \"ESP32S3\",\n\t\"board_id\": \"espressif_esp32s3_usb_otg_n8\",\n\t\"creator_id\": 12346,\n\t\"creation_id\": 28683,\n\t\"hostname\": \"cpy-f57ce8\",\n\t\"port\": 80,\n\t\"ip\": \"192.168.1.94\"\n}\n```\n\n----------------------------------------\n\nTITLE: Building External Dependencies for MicroPython Unix Port\nDESCRIPTION: Commands to fetch and build external dependencies required by MicroPython, which may be needed to enable extra features or capabilities.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/ports/unix/README.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ make submodules\n$ make deplibs\n```\n\n----------------------------------------\n\nTITLE: Configuring CircuitPython as an External Project\nDESCRIPTION: Adds CircuitPython as an external project in the CMake build system using ExternalProject_Add. This configuration specifies how to build the CircuitPython library, passing necessary build flags, board information, and other parameters to the Python build script.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/ports/zephyr-cp/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nExternalProject_Add(circuitpython\n    DOWNLOAD_COMMAND \"\"\n    CONFIGURE_COMMAND \"\"\n    BUILD_COMMAND python ${CMAKE_CURRENT_SOURCE_DIR}/cptools/build_circuitpython.py\n    CC=${CMAKE_C_COMPILER}\n    AR=${CMAKE_AR}\n    CFLAGS=${external_project_cflags}\n    BOARD=${BOARD}\n    BOARD_ALIAS=${BOARD_ALIAS}\n    BOARD_REVISION=${BOARD_REVISION}\n    BOARD_QUALIFIERS=${BOARD_QUALIFIERS}\n    SOC_DIRECTORIES=${SOC_DIRECTORIES}\n    OUTPUT_FILE=${CMAKE_CURRENT_BINARY_DIR}/libcircuitpython.a\n    PORT_SRC_DIR=${CMAKE_CURRENT_SOURCE_DIR}\n    TRANSLATION=${TRANSLATION}\n    LTO=${CONFIG_LTO}\n    BUILD_BYPRODUCTS ${CMAKE_CURRENT_BINARY_DIR}/libcircuitpython.a\n    BUILD_JOB_SERVER_AWARE TRUE\n    BUILD_ALWAYS TRUE\n    DEPENDS zephyr\n    INSTALL_COMMAND \"\"\n    )\n```\n\n----------------------------------------\n\nTITLE: Analyzing PWM Data with Python\nDESCRIPTION: Python script (duty.py) that processes logic analyzer data to analyze PWM signal characteristics and generate visualization plots. Calculates cycle durations and duty cycles from captured waveforms.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/tests/circuitpython-manual/pwmio/README.md#2025-04-21_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Defining Additional Documentation Links in reStructuredText\nDESCRIPTION: This code snippet defines additional documentation links for the CircuitPython documentation using reStructuredText. It includes links to glossary, code of conduct, and license information.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/docs/pdf.rst#2025-04-21_snippet_3\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 1\n\n   reference/glossary.rst\n   ../CODE_OF_CONDUCT\n   ../docs/LICENSE\n```\n\n----------------------------------------\n\nTITLE: Directory Information JSON Response Format\nDESCRIPTION: Sample JSON response from CircuitPython's Web REST API when querying directory information. Shows disk usage statistics and file metadata including names, types, modification times, and sizes.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/docs/workflows.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"free\": 451623,\n\t\"total\": 973344,\n\t\"block_size\": 32768,\n\t\"writable\": true,\n\t\"files\": [\n\t\t{\n\t\t\t\"name\": \"world.txt\",\n\t\t\t\"directory\": false,\n\t\t\t\"modified_ns\": 946934328000000000,\n\t\t\t\"file_size\": 12\n\t\t}\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Linking CircuitPython Library\nDESCRIPTION: Sets up the CircuitPython library as an imported static library and links it with the Zephyr application. This creates a wrapper around the CircuitPython library, establishes dependencies, and configures proper integration with the kernel and application.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/ports/zephyr-cp/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(circuitpython_wrapper STATIC IMPORTED GLOBAL)\nadd_dependencies(\n  circuitpython_wrapper\n  circuitpython\n  )\nset_target_properties(circuitpython_wrapper PROPERTIES IMPORTED_LOCATION             ${CMAKE_CURRENT_BINARY_DIR}/libcircuitpython.a)\ntarget_link_libraries(circuitpython_wrapper INTERFACE kernel)\ntarget_link_libraries(app PRIVATE circuitpython_wrapper)\n```\n\n----------------------------------------\n\nTITLE: Building Dynamic Native Module Example\nDESCRIPTION: Commands to compile and deploy a Dynamic Native Module example using make with ARCH specification and mpremote for file transfer. The commands show building for ARM v7m architecture.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/examples/natmod/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cd features0\n$ make ARCH=armv7m\n$ mpremote cp features0.mpy :\n```\n\n----------------------------------------\n\nTITLE: Generating CircuitPython Module Documentation with Jinja2\nDESCRIPTION: This Jinja2 template generates documentation for CircuitPython modules. It includes conditional rendering for orphan pages, module description, board compatibility, subpackages, submodules, classes, and functions. The template uses autoapi-nested-parse for docstring rendering and creates a table of contents for subpackages and submodules.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/docs/autoapi/templates/python/module.rst#2025-04-21_snippet_0\n\nLANGUAGE: jinja2\nCODE:\n```\n{% if not obj.display %}\n:orphan:\n\n{% endif %}\n:mod:`{{ obj.name }}`\n======={{ \"=\" * obj.name|length }}\n\n.. py:module:: {{ obj.name }}\n\n{% if obj.docstring %}\n.. autoapi-nested-parse::\n\n   {{ obj.docstring|prepare_docstring|indent(3) }}\n\n{% endif %}\n\n{% if support_matrix_reverse[obj.name] is defined %}\n.. raw:: html\n\n    <p>\n    <details>\n    <summary>Available on these boards</summary>\n    <ul>\n    {% for board in support_matrix_reverse[obj.name] %}\n    <li> {{ board }}\n    {% endfor %}\n    </ul>\n    </details>\n    </p>\n\n{% endif %}\n\n{% block subpackages %}\n{% set visible_subpackages = obj.subpackages|selectattr(\"display\")|list %}\n{% if visible_subpackages %}\n.. toctree::\n   :maxdepth: 2\n\n{% for subpackage in visible_subpackages %}\n   {{ subpackage.short_name }}/index.rst\n{% endfor %}\n\n\n{% endif %}\n{% endblock %}\n{% block submodules %}\n{% set visible_submodules = obj.submodules|selectattr(\"display\")|list %}\n{% if visible_submodules %}\n\n.. toctree::\n   :titlesonly:\n   :maxdepth: 1\n\n{% for submodule in visible_submodules %}\n   {{ submodule.short_name }}/index.rst\n{% endfor %}\n\n\n{% endif %}\n{% endblock %}\n{% block content %}\n{% if obj.all is not none %}\n{% set visible_children = obj.children|selectattr(\"short_name\", \"in\", obj.all)|list %}\n{% elif obj.type is equalto(\"package\") %}\n{% set visible_children = obj.children|selectattr(\"display\")|list %}\n{% else %}\n{% set visible_children = obj.children|selectattr(\"display\")|rejectattr(\"imported\")|list %}\n{% endif %}\n{% if visible_children %}\n\n{% set visible_classes = visible_children|selectattr(\"type\", \"equalto\", \"class\")|list %}\n{% set visible_functions = visible_children|selectattr(\"type\", \"equalto\", \"function\")|list %}\n{% if \"show-module-summary\" in autoapi_options and (visible_classes or visible_functions) %}\n{% block classes %}\n{% if visible_classes %}\nClasses\n~~~~~~~\n\n.. autoapisummary::\n\n{% for klass in visible_classes %}\n   {{ klass.id }}\n{% endfor %}\n\n\n{% endif %}\n{% endblock %}\n\n{% block functions %}\n{% if visible_functions %}\nFunctions\n~~~~~~~~~\n\n.. autoapisummary::\n\n{% for function in visible_functions %}\n   {{ function.id }}\n{% endfor %}\n\n\n{% endif %}\n{% endblock %}\n{% endif %}\n{% for obj_item in visible_children %}\n{{ obj_item.rendered|indent(0) }}\n{% endfor %}\n{% endif %}\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Note Block\nDESCRIPTION: RST markup for a note block listing modules that are documented in a separate library index, including built-in modules and standard library components.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/shared-bindings/index.rst#2025-04-21_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. note:: Some modules are documented in :doc:`/docs/library/index`, not here:\n    `builtins`, `heapq`, `array`, `binascii`, `collections`, `errno`, `gc`,\n    `io`, `json`, `re`, `sys`, `select`.\n\n     The documentation for :func:`help` is at the end of this page.\n```\n\n----------------------------------------\n\nTITLE: Server Output Example\nDESCRIPTION: Expected output from the host server showing the connection establishment and data exchange with the client.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/tests/circuitpython-manual/socketpool/client/readme.md#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nCreate Socket\nAccepting connections\nConnected by ('192.168.10.128', 64509)\ngot: b'Hello, world'\nsent: b'Hello, world'\n```\n\n----------------------------------------\n\nTITLE: Configuring GDB Initial Settings for CircuitPython Debugging\nDESCRIPTION: Sets up initial GDB configuration by disabling pagination and configuring logging to profile.txt file with overwrite mode enabled.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/ports/litex/boards/fomu/profiling.gdb.txt#2025-04-21_snippet_0\n\nLANGUAGE: gdb\nCODE:\n```\nset pagination 0\nset logging file profile.txt\nset logging overwrite\n```\n\n----------------------------------------\n\nTITLE: Viewing MicroPython Command-line Options\nDESCRIPTION: Command to display available command-line options for the MicroPython interpreter, including options to increase heap size for larger applications.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/ports/unix/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ ./build-standard/micropython -h\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for PIO Assembly in CircuitPython\nDESCRIPTION: This CMake script sets up the project for PIO assembly in CircuitPython. It specifies the minimum CMake version, defines the project name, sets paths for TinyUSB and Pico SDK, initializes the Pico SDK, and finds the required pioasm package.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/ports/raspberrypi/pioasm/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.12)\nproject(pioasm)\nset(PICO_TINYUSB_PATH ${CMAKE_CURRENT_SOURCE_DIR}/../../../lib/tinyusb)\ninclude(../sdk/pico_sdk_init.cmake)\npico_sdk_init()\n\nset(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${PICO_SDK_PATH}/tools)\nfind_package(pioasm REQUIRED)\n```\n\n----------------------------------------\n\nTITLE: Building CircuitPython for nRF52840 Development Kit\nDESCRIPTION: Command to build CircuitPython for the nRF52840 development kit using west build system. This board is already supported in ports/nordic as pca10056.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/ports/zephyr-cp/README.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nwest build -b nrf52840dk/nrf52840\n```\n\n----------------------------------------\n\nTITLE: Getting Python Compiler Information in CircuitPython\nDESCRIPTION: The python_compiler() function returns a string identifying the compiler used for compiling MicroPython.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/docs/library/platform.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npython_compiler()\n```\n\n----------------------------------------\n\nTITLE: LGPL Library Header Template\nDESCRIPTION: Template for the license header to be included at the start of source files covered by LGPL, including copyright notice and warranty disclaimer\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/LICENSES/lgpl-2.1.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n    <one line to give the library's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This library is free software; you can redistribute it and/or\n    modify it under the terms of the GNU Lesser General Public\n    License as published by the Free Software Foundation; either\n    version 2.1 of the License, or (at your option) any later version.\n\n    This library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n    Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public\n    License along with this library; if not, write to the Free Software\n    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n```\n\n----------------------------------------\n\nTITLE: Client Output Example\nDESCRIPTION: Expected output from the host client showing the connection, sending, and receiving process of the 'Hello, world' message.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/tests/circuitpython-manual/socketpool/server/readme.md#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nConnecting\nSending\nReceiving\nReceived b'Hello, world'\n```\n\n----------------------------------------\n\nTITLE: Referencing Board Pins in CircuitPython for Arduino Nano 33 BLE\nDESCRIPTION: This snippet demonstrates how to reference the various board pins in CircuitPython when working with Arduino Nano 33 BLE boards. It includes references to I2C pins, power control pins, sensor interrupt pins, and LEDs that are available on these boards.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/ports/nordic/boards/arduino_nano_33_ble/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nI2C pins `board.SCL1` and `board.SDA1` are not exposed and are used for onboard peripherals.\nPin `board.R_PULLUP` must be set to high to enable the `SCL1` and `SDA1` pullups for proper operation.\n\nPin `board.VDD_ENV` applies power to the LSM9DS1, the LPS22HB, and the HTS221, and must be high for them to be operational.\n\nPins `board.MIC_PWR`, `board.PDMDIN`, and `board.PDMCLK` are for the Nano 33 BLE Sense onboard microphone.\n\nPin `board.INT_APDS` is the interrupt pin from the APDS-9960.\n\nPins `board.RGB_LED_R`, `board.RGB_LED_G`, and `board.RGB_LED_B`\nare the red, green and blue LEDS in the onboard RGB LED.\n\nPins `board.LED_G` and `board.LED_Y` are onboard green and red LEDs. `board.LED_Y` is also `board.SCK`.\n```\n\n----------------------------------------\n\nTITLE: Defining API Reference Table of Contents in reStructuredText\nDESCRIPTION: This code snippet defines the table of contents for the API reference section of the CircuitPython documentation using reStructuredText. It includes links to library index, shared bindings, and help documentation.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/docs/pdf.rst#2025-04-21_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :glob:\n   :maxdepth: 3\n\n   library/index.rst\n   ../shared-bindings/*/index\n   ../shared-bindings/help\n```\n\n----------------------------------------\n\nTITLE: Running Host Server Script\nDESCRIPTION: Command to start the Python server on the host machine that will accept incoming connections.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/tests/circuitpython-manual/socketpool/client/readme.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython host-server.py\n```\n\n----------------------------------------\n\nTITLE: Executing Pin Generation Script for CircuitPython in Python\nDESCRIPTION: This command runs the make_pins.py script to generate pin configuration files for the BRD2601B board. It takes input CSV files and produces C and header files for pin definitions and functions.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/ports/silabs/boards/devkit_xg24_brd2601b/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ cd boards/brd2601b/\n$ python make_pins.py -s pins.c -e pin_functions.h pins.csv pin_functions.csv\n```\n\n----------------------------------------\n\nTITLE: Generating MicroPython MBEDTLS Errors in Shell\nDESCRIPTION: Shell script to produce mp_mbedtls_errors.c file for MicroPython. This script likely processes MBEDTLS header files to generate a more space-efficient error lookup table.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/lib/mbedtls_errors/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ndo-mp.sh\n```\n\n----------------------------------------\n\nTITLE: Testing MBEDTLS Errors Generation and Compilation in Shell\nDESCRIPTION: Shell script to produce mp_mbedtls_errors.c and compile a tester application. This is used to verify the correctness of the generated error strings and their handling.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/lib/mbedtls_errors/README.md#2025-04-21_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ndo-test.sh\n```\n\n----------------------------------------\n\nTITLE: Accessing Monotonic Time in CircuitPython\nDESCRIPTION: Shows how to access the monotonic tick count in CircuitPython using the time module. This provides a reliable way to measure time intervals.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\ntime.monotonic()\n```\n\n----------------------------------------\n\nTITLE: Board Pin Definitions for Arduino Nano 33 BLE Rev2/Sense Rev2\nDESCRIPTION: Listing of board-specific pin definitions and their functions, including I2C pins, sensor control pins, LED controls, and interrupt pins for various onboard sensors.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/ports/nordic/boards/arduino_nano_33_ble_rev2/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nboard.SCL1 and board.SDA1 - I2C pins for onboard peripherals\\nboard.R_PULLUP - Pullup enable for SCL1 and SDA1\\nboard.VDD_ENV - Power control for BMI270, BMM150, LPS22HB and HS3003\\nboard.MIC_PWR, board.PDMDIN, board.PDMCLK - Microphone control pins\\nboard.INT_APDS - APDS-9960 interrupt pin\\nboard.INT_BMI_1, board.INT_BMI_2 - BMI270 interrupt pins\\nboard.INT_LPS - LPS22 interrupt pin\\nboard.RGB_LED_R, board.RGB_LED_G, board.RGB_LED_B - RGB LED control pins\\nboard.LED_G, board.LED_Y - Onboard green and red LEDs\n```\n\n----------------------------------------\n\nTITLE: Generating Self-Signed RSA Key/Cert Pair\nDESCRIPTION: OpenSSL command to generate a self-signed RSA key/cert pair for testing SSL/TLS functionality.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/tests/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nopenssl req -x509 -newkey rsa:2048 -keyout rsa_key.pem -out rsa_cert.pem -days 365 -nodes -subj '/CN=micropython.local/O=MicroPython/C=AU'\n```\n\n----------------------------------------\n\nTITLE: Generating Elliptic Curve Key/Cert Pair\nDESCRIPTION: OpenSSL commands to generate an elliptic curve key and self-signed certificate for testing SSL/TLS functionality.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/tests/README.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nopenssl ecparam -name prime256v1 -genkey -noout -out ec_key.der -outform DER\nopenssl req -new -x509 -key ec_key.der -out ec_cert.der -outform DER -days 365 -nodes -subj '/CN=micropython.local/O=MicroPython/C=AU'\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Structure with Toctree\nDESCRIPTION: RST markup defining the documentation structure using toctree directives for organizing module documentation and support matrix.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/shared-bindings/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n    :hidden:\n\n    support_matrix\n```\n\n----------------------------------------\n\nTITLE: RST Shared Bindings Toctree\nDESCRIPTION: RST markup defining the documentation structure for shared bindings using toctree with glob pattern and maximum depth settings.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/shared-bindings/index.rst#2025-04-21_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n    :glob:\n    :maxdepth: 2\n\n    ../shared-bindings/*/index\n    help\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents in reStructuredText for CircuitPython Documentation\nDESCRIPTION: This code snippet defines the table of contents for the CircuitPython documentation using reStructuredText. It includes links to various sections such as README, libraries, workflows, and environment setup.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/docs/pdf.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 3\n\n   ../README.rst\n   libraries.rst\n   workflows\n   environment.rst\n   troubleshooting.rst\n   ../CONTRIBUTING\n   ../BUILDING\n   ../WEBUSB_README\n   supported_ports.rst\n```\n\n----------------------------------------\n\nTITLE: Defining Design and Porting Reference Table of Contents in reStructuredText\nDESCRIPTION: This code snippet defines the table of contents for the design and porting reference section of the CircuitPython documentation using reStructuredText.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/docs/pdf.rst#2025-04-21_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 1\n\n   design_guide\n   porting\n   common_hal\n```\n\n----------------------------------------\n\nTITLE: Running Python Client Script\nDESCRIPTION: Command to execute the host client Python script that connects to the Circuitpython server.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/tests/circuitpython-manual/socketpool/server/readme.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython host-client.py\n```\n\n----------------------------------------\n\nTITLE: Flashing CircuitPython firmware to Espruino Pico using dfu-util\nDESCRIPTION: Command to flash CircuitPython firmware to the Espruino Pico board using dfu-util. It specifies address 0x08000000 as the starting point for writing the firmware binary file.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/ports/stm/boards/espruino_pico/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo dfu-util -a 0 -s 0x08000000 -D firmware.bin\n```\n\n----------------------------------------\n\nTITLE: Installing dfu-util on Mac using Homebrew\nDESCRIPTION: Command to install the dfu-util tool on macOS systems using the Homebrew package manager. This utility is required for flashing firmware to the Espruino Pico board.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/ports/stm/boards/espruino_pico/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbrew install dfu-util\n```\n\n----------------------------------------\n\nTITLE: Copyright Disclaimer Template\nDESCRIPTION: Sample template for copyright disclaimer to be signed by employer or institution\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/LICENSES/lgpl-2.1.txt#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n  Yoyodyne, Inc., hereby disclaims all copyright interest in the\n  library `Frob' (a library for tweaking knobs) written by James Random Hacker.\n\n  <signature of Ty Coon>, 1 April 1990\n  Ty Coon, President of Vice\n```\n\n----------------------------------------\n\nTITLE: Listing AWS CLI Dependency in Requirements File\nDESCRIPTION: Specifies awscli as a dependency with a comment indicating its purpose for uploading artifacts. This is typically used in a requirements.txt file for Python package management.\nSOURCE: https://github.com/adafruit/circuitpython/blob/main/requirements-ci.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# For uploading artifacts\n# awscli\n```"
  }
]