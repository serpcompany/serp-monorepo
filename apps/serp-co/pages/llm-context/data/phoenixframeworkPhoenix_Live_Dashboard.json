[
  {
    "owner": "phoenixframework",
    "repo": "phoenix_live_dashboard",
    "content": "TITLE: Implementing Authentication for Production LiveDashboard Access in Elixir\nDESCRIPTION: Demonstrates how to secure LiveDashboard in production using authentication generated with mix phx.gen.auth, requiring admin authentication.\nSOURCE: https://github.com/phoenixframework/phoenix_live_dashboard/blob/main/README.md#2025-04-23_snippet_4\n\nLANGUAGE: elixir\nCODE:\n```\n# lib/my_app_web/router.ex\nuse MyAppWeb, :router\nimport Phoenix.LiveDashboard.Router\n\n...\n\npipeline :admins_only do\n  plug :fetch_current_admin\n  plug :require_authenticated_admin\nend\n\nscope \"/\" do\n  pipe_through [:browser, :admins_only]\n  live_dashboard \"/dashboard\"\nend\n```\n\n----------------------------------------\n\nTITLE: Defining a Telemetry Module for Phoenix LiveDashboard\nDESCRIPTION: A complete telemetry module that sets up a supervision tree for metrics collection. It defines metrics for Phoenix, Ecto, and VM events and configures a telemetry poller for periodic measurements.\nSOURCE: https://github.com/phoenixframework/phoenix_live_dashboard/blob/main/guides/metrics.md#2025-04-23_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule MyAppWeb.Telemetry do\n  use Supervisor\n  import Telemetry.Metrics\n\n  def start_link(arg) do\n    Supervisor.start_link(__MODULE__, arg, name: __MODULE__)\n  end\n\n  @impl true\n  def init(_arg) do\n    children = [\n      # Telemetry poller will execute the given period measurements\n      # every 10_000ms. Learn more here: https://hexdocs.pm/telemetry_metrics\n      {:telemetry_poller, measurements: periodic_measurements(), period: 10_000}\n      # Add reporters as children of your supervision tree.\n      # {Telemetry.Metrics.ConsoleReporter, metrics: metrics()}\n    ]\n\n    Supervisor.init(children, strategy: :one_for_one)\n  end\n\n  def metrics do\n    [\n      # Phoenix Metrics\n      summary(\"phoenix.endpoint.stop.duration\",\n        unit: {:native, :millisecond}\n      ),\n      summary(\"phoenix.router_dispatch.stop.duration\",\n        tags: [:route],\n        unit: {:native, :millisecond}\n      ),\n\n      # Database Time Metrics\n      summary(\"my_app.repo.query.total_time\", unit: {:native, :millisecond}),\n      summary(\"my_app.repo.query.decode_time\", unit: {:native, :millisecond}),\n      summary(\"my_app.repo.query.query_time\", unit: {:native, :millisecond}),\n      summary(\"my_app.repo.query.queue_time\", unit: {:native, :millisecond}),\n      summary(\"my_app.repo.query.idle_time\", unit: {:native, :millisecond}),\n\n      # VM Metrics\n      summary(\"vm.memory.total\", unit: {:byte, :kilobyte}),\n      summary(\"vm.total_run_queue_lengths.total\"),\n      summary(\"vm.total_run_queue_lengths.cpu\"),\n      summary(\"vm.total_run_queue_lengths.io\")\n    ]\n  end\n\n  defp periodic_measurements do\n    []\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic HTTP Authentication for LiveDashboard in Elixir\nDESCRIPTION: Shows how to implement a simple HTTP Basic Authentication for protecting LiveDashboard, using environment variables for credentials.\nSOURCE: https://github.com/phoenixframework/phoenix_live_dashboard/blob/main/README.md#2025-04-23_snippet_5\n\nLANGUAGE: elixir\nCODE:\n```\n# lib/my_app_web/router.ex\nuse MyAppWeb, :router\nimport Phoenix.LiveDashboard.Router\n\n...\n\npipeline :admins_only do\n  plug :admin_basic_auth\nend\n\nscope \"/\" do\n  pipe_through [:browser, :admins_only]\n  live_dashboard \"/dashboard\"\nend\n\ndefp admin_basic_auth(conn, _opts) do\n  username = System.fetch_env!(\"AUTH_USERNAME\")\n  password = System.fetch_env!(\"AUTH_PASSWORD\")\n  Plug.BasicAuth.basic_auth(conn, username: username, password: password)\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Telemetry Dependencies in mix.exs for Phoenix LiveDashboard\nDESCRIPTION: Dependencies required for enabling metrics functionality in Phoenix LiveDashboard. These packages provide the telemetry functionality needed for collecting and reporting metrics.\nSOURCE: https://github.com/phoenixframework/phoenix_live_dashboard/blob/main/guides/metrics.md#2025-04-23_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\n  {:telemetry_poller, \"~> 0.4\"},\n  {:telemetry_metrics, \"~> 0.4\"},\n```\n\n----------------------------------------\n\nTITLE: Adding Phoenix LiveDashboard Dependency in Elixir\nDESCRIPTION: Adds the phoenix_live_dashboard package as a dependency in the mix.exs file with version specification.\nSOURCE: https://github.com/phoenixframework/phoenix_live_dashboard/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\ndef deps do\n  [\n    {:phoenix_live_dashboard, \"~> 0.7\"}\n  ]\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring LiveDashboard with Metrics in Router.ex\nDESCRIPTION: Code to configure the LiveDashboard in your router with the metrics option. This connects your telemetry module to the dashboard, enabling metrics visualization.\nSOURCE: https://github.com/phoenixframework/phoenix_live_dashboard/blob/main/guides/metrics.md#2025-04-23_snippet_3\n\nLANGUAGE: elixir\nCODE:\n```\nlive_dashboard \"/dashboard\", metrics: MyAppWeb.Telemetry\n```\n\n----------------------------------------\n\nTITLE: Adding Telemetry to Application Supervision Tree in Application.ex\nDESCRIPTION: Code snippet showing how to add the Telemetry module to the main application's supervision tree. This ensures the telemetry supervisor starts with your application.\nSOURCE: https://github.com/phoenixframework/phoenix_live_dashboard/blob/main/guides/metrics.md#2025-04-23_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\nchildren = [\n  MyApp.Repo,\n  MyAppWeb.Telemetry,\n  MyAppWeb.Endpoint,\n  ...\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing Metrics Storage with GenServer\nDESCRIPTION: Complete implementation of a metrics storage system using GenServer and circular buffer to capture and provide metrics history to the dashboard.\nSOURCE: https://github.com/phoenixframework/phoenix_live_dashboard/blob/main/guides/metrics_history.md#2025-04-23_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\n  defmodule MyAppWeb.MetricsStorage do\n    use GenServer\n\n    @history_buffer_size 50\n\n    def metrics_history(metric) do\n      GenServer.call(__MODULE__, {:data, metric})\n    end\n\n    def start_link(args) do\n      GenServer.start_link(__MODULE__, args, name: __MODULE__)\n    end\n\n    @impl true\n    def init(metrics) do\n      Process.flag(:trap_exit, true)\n\n      metric_histories_map =\n        metrics\n        |> Enum.map(fn metric ->\n          attach_handler(metric)\n          {metric, CircularBuffer.new(@history_buffer_size)}\n        end)\n        |> Map.new()\n\n      {:ok, metric_histories_map}\n    end\n\n    @impl true\n    def terminate(_, metrics) do\n      for metric <- metrics do\n        :telemetry.detach({__MODULE__, metric, self()})\n      end\n\n      :ok\n    end\n\n    defp attach_handler(%{event_name: name_list} = metric) do\n      :telemetry.attach(\n        {__MODULE__, metric, self()},\n        name_list,\n        &__MODULE__.handle_event/4,\n        metric\n      )\n    end\n\n    def handle_event(_event_name, data, metadata, metric) do\n      if data = Phoenix.LiveDashboard.extract_datapoint_for_metric(metric, data, metadata) do\n        GenServer.cast(__MODULE__, {:telemetry_metric, data, metric})\n      end\n    end\n\n    @impl true\n    def handle_cast({:telemetry_metric, data, metric}, state) do\n      {:noreply, update_in(state[metric], &CircularBuffer.insert(&1, data))}\n    end\n\n    @impl true\n    def handle_call({:data, metric}, _from, state) do\n      if history = state[metric] do\n        {:reply, CircularBuffer.to_list(history), state}\n      else\n        {:reply, [], state}\n      end\n    end\n  end\n```\n\n----------------------------------------\n\nTITLE: Configuring LiveDashboard with Metrics History\nDESCRIPTION: Configuration for adding metrics history to Phoenix LiveDashboard by modifying the dashboard config in the router file.\nSOURCE: https://github.com/phoenixframework/phoenix_live_dashboard/blob/main/guides/metrics_history.md#2025-04-23_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\nlive_dashboard \"/dashboard\",\n  metrics: MyAppWeb.Telemetry,\n  metrics_history: {MyAppWeb.MetricsStorage, :metrics_history, []}\n```\n\n----------------------------------------\n\nTITLE: Installing RequestLogger Plug in Phoenix Endpoint\nDESCRIPTION: Demonstrates how to add the Phoenix.LiveDashboard.RequestLogger plug to a Phoenix application's endpoint configuration. The plug accepts param_key and cookie_key options for request logging control. The cookie_key is optional for API-only applications.\nSOURCE: https://github.com/phoenixframework/phoenix_live_dashboard/blob/main/guides/request_logger.md#2025-04-23_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\nplug Phoenix.LiveDashboard.RequestLogger,\n  param_key: \"request_logger\",\n  cookie_key: \"request_logger\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Ecto Repositories in Phoenix LiveDashboard Router\nDESCRIPTION: Configure the live_dashboard in the router to specify which Ecto repositories to display in the dashboard. This example shows how to list a single repository.\nSOURCE: https://github.com/phoenixframework/phoenix_live_dashboard/blob/main/guides/ecto_stats.md#2025-04-23_snippet_3\n\nLANGUAGE: elixir\nCODE:\n```\nlive_dashboard \"/dashboard\", ecto_repos: [MyApp.Repo]\n```\n\n----------------------------------------\n\nTITLE: Configuring OS Monitor in Mix Application\nDESCRIPTION: Demonstrates how to enable the os_mon application by adding it to the extra_applications list in the Mix application configuration. This allows the LiveDashboard to collect operating system metrics.\nSOURCE: https://github.com/phoenixframework/phoenix_live_dashboard/blob/main/guides/os_mon.md#2025-04-23_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\n  def application do\n    [\n      ...,\n      extra_applications: [:logger, :runtime_tools, :os_mon]\n    ]\n  end\n```\n\n----------------------------------------\n\nTITLE: Adding Metrics Storage to Application Supervision Tree\nDESCRIPTION: Code to add the metrics storage GenServer to the application's supervision tree, initializing it with metrics from the Telemetry module.\nSOURCE: https://github.com/phoenixframework/phoenix_live_dashboard/blob/main/guides/metrics_history.md#2025-04-23_snippet_3\n\nLANGUAGE: elixir\nCODE:\n```\n  # Start genserver to store transient metrics\n  {MyAppWeb.MetricsStorage, MyAppWeb.Telemetry.metrics()},\n```\n\n----------------------------------------\n\nTITLE: Configuring Development-Only Router Access for LiveDashboard in Elixir\nDESCRIPTION: Updates the router configuration to enable access to LiveDashboard only in development environment, routing /dashboard requests to the dashboard.\nSOURCE: https://github.com/phoenixframework/phoenix_live_dashboard/blob/main/README.md#2025-04-23_snippet_3\n\nLANGUAGE: elixir\nCODE:\n```\n# lib/my_app_web/router.ex\nuse MyAppWeb, :router\nimport Phoenix.LiveDashboard.Router\n\n...\n\nif Mix.env() == :dev do\n  scope \"/\" do\n    pipe_through :browser\n    live_dashboard \"/dashboard\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Reporter Options for Metrics in Phoenix LiveDashboard\nDESCRIPTION: Example of how to specify reporter options for a counter metric. This demonstrates how to customize the display and behavior of metrics in the dashboard.\nSOURCE: https://github.com/phoenixframework/phoenix_live_dashboard/blob/main/guides/metrics.md#2025-04-23_snippet_4\n\nLANGUAGE: elixir\nCODE:\n```\ncounter(\"my_app.counter\", reporter_options: [...])\n```\n\n----------------------------------------\n\nTITLE: Adding ecto_psql_extras Dependency for PostgreSQL in Elixir\nDESCRIPTION: Add the ecto_psql_extras dependency to the mix.exs file for PostgreSQL support in Phoenix LiveDashboard. This allows access to PostgreSQL-specific statistics and queries.\nSOURCE: https://github.com/phoenixframework/phoenix_live_dashboard/blob/main/guides/ecto_stats.md#2025-04-23_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\n  {:ecto_psql_extras, \"~> 0.6\"},\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Long-Running Queries Threshold in Phoenix LiveDashboard\nDESCRIPTION: Set a custom threshold for long-running queries in PostgreSQL using the ecto_psql_extras_options parameter in the live_dashboard configuration.\nSOURCE: https://github.com/phoenixframework/phoenix_live_dashboard/blob/main/guides/ecto_stats.md#2025-04-23_snippet_4\n\nLANGUAGE: elixir\nCODE:\n```\nlive_dashboard \"/dashboard\",\n  ecto_repos: [MyApp.Repo],\n  ecto_psql_extras_options: [long_running_queries: [threshold: \"200 milliseconds\"]]\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL/MariaDB Long-Running Queries Threshold in Phoenix LiveDashboard\nDESCRIPTION: Set a custom threshold for long-running queries in MySQL/MariaDB using the ecto_mysql_extras_options parameter in the live_dashboard configuration.\nSOURCE: https://github.com/phoenixframework/phoenix_live_dashboard/blob/main/guides/ecto_stats.md#2025-04-23_snippet_5\n\nLANGUAGE: elixir\nCODE:\n```\nlive_dashboard \"/dashboard\",\n  ecto_repos: [MyApp.Repo],\n  ecto_mysql_extras_options: [long_running_queries: [threshold: 200]]\n```\n\n----------------------------------------\n\nTITLE: Adding LiveView Socket Declaration to Endpoint in Elixir\nDESCRIPTION: Adds the Phoenix.LiveView.Socket declaration to the endpoint, enabling WebSocket connections for LiveView functionality.\nSOURCE: https://github.com/phoenixframework/phoenix_live_dashboard/blob/main/README.md#2025-04-23_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\nsocket \"/live\", Phoenix.LiveView.Socket\n```\n\n----------------------------------------\n\nTITLE: Configuring LiveView Signing Salt in Elixir\nDESCRIPTION: Updates the endpoint configuration to include a signing salt for LiveView, which is required for Phoenix LiveDashboard.\nSOURCE: https://github.com/phoenixframework/phoenix_live_dashboard/blob/main/README.md#2025-04-23_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\n# config/config.exs\nconfig :my_app, MyAppWeb.Endpoint,\n  live_view: [signing_salt: \"SECRET_SALT\"]\n```\n\n----------------------------------------\n\nTITLE: Adding ecto_mysql_extras Dependency for MySQL/MariaDB in Elixir\nDESCRIPTION: Add the ecto_mysql_extras dependency to the mix.exs file for MySQL/MariaDB support in Phoenix LiveDashboard. This enables MySQL/MariaDB-specific statistics and queries.\nSOURCE: https://github.com/phoenixframework/phoenix_live_dashboard/blob/main/guides/ecto_stats.md#2025-04-23_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\n  {:ecto_mysql_extras, \"~> 0.3\"},\n```\n\n----------------------------------------\n\nTITLE: Adding Circular Buffer Dependency\nDESCRIPTION: Required dependency addition to mix.exs for implementing a circular buffer to store metrics history.\nSOURCE: https://github.com/phoenixframework/phoenix_live_dashboard/blob/main/guides/metrics_history.md#2025-04-23_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\n  {:circular_buffer, \"~> 0.4.0\"},\n```\n\n----------------------------------------\n\nTITLE: Adding ecto_sqlite3_extras Dependency for SQLite in Elixir\nDESCRIPTION: Add the ecto_sqlite3_extras dependency to the mix.exs file for SQLite support in Phoenix LiveDashboard. This enables SQLite-specific statistics and queries.\nSOURCE: https://github.com/phoenixframework/phoenix_live_dashboard/blob/main/guides/ecto_stats.md#2025-04-23_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\n  {:ecto_sqlite3_extras, \"~> 1.2.0\"},\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLite Options in Phoenix LiveDashboard\nDESCRIPTION: Configure SQLite-specific options in the Phoenix LiveDashboard using the ecto_sqlite3_extras_options parameter. This example shows an empty options list.\nSOURCE: https://github.com/phoenixframework/phoenix_live_dashboard/blob/main/guides/ecto_stats.md#2025-04-23_snippet_6\n\nLANGUAGE: elixir\nCODE:\n```\nlive_dashboard \"/dashboard\",\n  ecto_repos: [MyApp.Repo],\n  ecto_sqlite3_extras_options: []\n```"
  }
]