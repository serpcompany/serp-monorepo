[
  {
    "owner": "linebender",
    "repo": "vello",
    "content": "TITLE: Basic Vello Renderer Implementation\nDESCRIPTION: Core implementation example showing how to initialize and use Vello with wgpu for rendering. Demonstrates scene creation, drawing operations, and texture rendering.\nSOURCE: https://github.com/linebender/vello/blob/main/vello/README.md#2025-04-16_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nlet (width, height) = ...;\nlet device: wgpu::Device = ...;\nlet queue: wgpu::Queue = ...;\nlet mut renderer = Renderer::new(\n   &device,\n   RendererOptions {\n      use_cpu: false,\n      antialiasing_support: vello::AaSupport::all(),\n      num_init_threads: NonZeroUsize::new(1),\n   },\n).expect(\"Failed to create renderer\");\n// Create scene and draw stuff\nlet mut scene = vello::Scene::new();\nscene.fill(\n   vello::peniko::Fill::NonZero,\n   vello::Affine::IDENTITY,\n   vello::Color::rgb8(242, 140, 168),\n   None,\n   &vello::Circle::new((420.0, 200.0), 120.0),\n);\n// Draw more stuff\nscene.push_layer(...);\nscene.fill(...);\nscene.stroke(...);\nscene.pop_layer(...);\nlet texture = device.create_texture(&...);\n// Render to a wgpu Texture\nrenderer\n   .render_to_texture(\n      &device,\n      &queue,\n      &scene,\n      &texture,\n      &vello::RenderParams {\n         base_color: palette::css::BLACK, // Background color\n         width,\n         height,\n         antialiasing_method: AaConfig::Msaa16,\n      },\n   )\n   .expect(\"Failed to render to texture\");\n```\n\n----------------------------------------\n\nTITLE: Basic Vello Rendering Example\nDESCRIPTION: A Rust code snippet demonstrating how to set up Vello's renderer, create a scene, draw shapes, and render to a texture. Shows the basic workflow for using Vello as a renderer in applications.\nSOURCE: https://github.com/linebender/vello/blob/main/README.md#2025-04-16_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse vello::\n    kurbo::{Affine, Circle},\n    peniko::{Color, Fill},\n    *,\n};\n\n// Initialize wgpu and get handles\nlet (width, height) = ...;\nlet device: wgpu::Device = ...;\nlet queue: wgpu::Queue = ...;\nlet mut renderer = Renderer::new(\n   &device,\n   RendererOptions {\n      use_cpu: false,\n      antialiasing_support: vello::AaSupport::all(),\n      num_init_threads: NonZeroUsize::new(1),\n   },\n).expect(\"Failed to create renderer\");\n// Create scene and draw stuff in it\nlet mut scene = vello::Scene::new();\nscene.fill(\n   vello::peniko::Fill::NonZero,\n   vello::Affine::IDENTITY,\n   vello::Color::from_rgb8(242, 140, 168),\n   None,\n   &vello::Circle::new((420.0, 200.0), 120.0),\n);\n// Draw more stuff\nscene.push_layer(...);\nscene.fill(...);\nscene.stroke(...);\nscene.pop_layer(...);\nlet texture = device.create_texture(&...);\n\n// Render to a wgpu Texture\nrenderer\n   .render_to_texture(\n      &device,\n      &queue,\n      &scene,\n      &texture,\n      &vello::RenderParams {\n         base_color: palette::css::BLACK, // Background color\n         width,\n         height,\n         antialiasing_method: AaConfig::Msaa16,\n      },\n   )\n   .expect(\"Failed to render to a texture\");\n// Do things with `texture`, such as blitting it to the Surface using\n// wgpu::util::TextureBlitter\n```\n\n----------------------------------------\n\nTITLE: Computing Path Segment Word Count in GLSL\nDESCRIPTION: This GLSL code snippet demonstrates how to efficiently calculate the number of u32 words needed for path segments based on tag bytes. It uses bitwise operations to handle multiple tag bytes packed in a u32 word, accounting for different segment types (line, quadratic, cubic) and encoding formats (16-bit or 32-bit).\nSOURCE: https://github.com/linebender/vello/blob/main/doc/pathseg.md#2025-04-16_snippet_0\n\nLANGUAGE: glsl\nCODE:\n```\n    uint point_count = (tag & 0x3030303) + ((tag >> 2) & 0x1010101);\n    uint word_count = point_count + (point_count & (((tag >> 3) & 0x1010101) * 15));\n    word_count += word_count >> 8;\n    word_count += word_count >> 16;\n    word_count &= 0xff;\n```\n\n----------------------------------------\n\nTITLE: WGSL Shader Preprocessor Directives Example\nDESCRIPTION: Demonstrates the supported preprocessor directives in Vello's WGSL shaders, including import statements and conditional compilation directives. These must be placed at the start of lines and support limited metaprogramming capabilities.\nSOURCE: https://github.com/linebender/vello/blob/main/doc/ARCHITECTURE.md#2025-04-16_snippet_0\n\nLANGUAGE: WGSL\nCODE:\n```\n#import\n#ifdef\n#ifndef\n#else\n#endif\n```\n\n----------------------------------------\n\nTITLE: Running Vello Winit Example with Web Assembly\nDESCRIPTION: Shell commands to add the wasm32 target to Rust toolchain and run the Winit example on the web using cargo-run-wasm.\nSOURCE: https://github.com/linebender/vello/blob/main/README.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n# Make sure the Rust toolchain supports the wasm32 target\nrustup target add wasm32-unknown-unknown\n\n# The binary name must also be explicitly provided as it differs from the package name\ncargo run_wasm -p with_winit --bin with_winit_bin\n```\n\n----------------------------------------\n\nTITLE: Running Vello Viewer with Custom SVG Files in Bash\nDESCRIPTION: Command to run the Vello viewer application with user-specified SVG files using Cargo. Accepts file paths as arguments after the double dash.\nSOURCE: https://github.com/linebender/vello/blob/main/examples/with_winit/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ cargo run -p with_winit --release -- [SVG FILES]\n```\n\n----------------------------------------\n\nTITLE: Running Vello on Android with cargo-apk\nDESCRIPTION: Shell command to build and run the Vello Winit example on Android using cargo-apk.\nSOURCE: https://github.com/linebender/vello/blob/main/README.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncargo apk run -p with_winit --lib\n```\n\n----------------------------------------\n\nTITLE: Running Vello's Winit Example\nDESCRIPTION: Shell command to run the winit example program that demonstrates Vello's rendering capabilities.\nSOURCE: https://github.com/linebender/vello/blob/main/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo run -p with_winit\n```\n\n----------------------------------------\n\nTITLE: Running Vello WebGL Demo with Cargo\nDESCRIPTION: Command to run the WebGL demo using Cargo. This command executes the WebGL demo in a WebAssembly environment.\nSOURCE: https://github.com/linebender/vello/blob/main/sparse_strips/vello_hybrid/examples/webgl/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo run_wasm -p webgl\n```\n\n----------------------------------------\n\nTITLE: Running Vello Example with Winit\nDESCRIPTION: Basic shell command to run the Vello example program using the winit windowing library.\nSOURCE: https://github.com/linebender/vello/blob/main/vello/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo run -p with_winit\n```\n\n----------------------------------------\n\nTITLE: Android Release Configuration for cargo-apk\nDESCRIPTION: TOML configuration for Android release signing that must be added to the with_winit Cargo.toml file to enable running in release mode.\nSOURCE: https://github.com/linebender/vello/blob/main/README.md#2025-04-16_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[package.metadata.android.signing.release]\npath = \"$HOME/.android/debug.keystore\"\nkeystore_password = \"android\"\n```\n\n----------------------------------------\n\nTITLE: Running Vello Hybrid Winit Basic Example\nDESCRIPTION: Basic command to run the Vello Hybrid Winit example in release mode.\nSOURCE: https://github.com/linebender/vello/blob/main/sparse_strips/vello_hybrid/examples/winit/README.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -p vello_hybrid_winit --release\n```\n\n----------------------------------------\n\nTITLE: Running Vello Viewer with Default SVG Set in Bash\nDESCRIPTION: Command to run the Vello viewer application with its built-in set of public-domain SVG images using Cargo.\nSOURCE: https://github.com/linebender/vello/blob/main/examples/with_winit/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cargo run -p with_winit --release\n```\n\n----------------------------------------\n\nTITLE: Running Vello Hybrid Winit with Scene Index\nDESCRIPTION: Command to run the example with a specific scene index from the built-in scene set.\nSOURCE: https://github.com/linebender/vello/blob/main/sparse_strips/vello_hybrid/examples/winit/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncargo run -p vello_hybrid_winit --release -- [SCENE INDEX]\n```\n\n----------------------------------------\n\nTITLE: Testing Vello WebGL Demo with wasm-pack\nDESCRIPTION: Command to run interactive test sessions for the WebGL demo using wasm-pack. This launches tests in a Chrome browser environment.\nSOURCE: https://github.com/linebender/vello/blob/main/sparse_strips/vello_hybrid/examples/webgl/README.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nwasm-pack test --chrome\n```\n\n----------------------------------------\n\nTITLE: Android Release Configuration for Vello\nDESCRIPTION: TOML configuration for enabling release mode builds on Android using cargo-apk.\nSOURCE: https://github.com/linebender/vello/blob/main/vello/README.md#2025-04-16_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[package.metadata.android.signing.release]\npath = \"$HOME/.android/debug.keystore\"\nkeystore_password = \"android\"\n```\n\n----------------------------------------\n\nTITLE: Running Vello on Android with Environment Variables\nDESCRIPTION: Shell command demonstrating how to set environment variables at compile time for the Android build to configure log levels and provide command line arguments.\nSOURCE: https://github.com/linebender/vello/blob/main/README.md#2025-04-16_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nVELLO_STATIC_LOG=\"vello=trace\" VELLO_STATIC_ARGS=\"--test-scenes\" cargo apk run -p with_winit --lib\n```\n\n----------------------------------------\n\nTITLE: Running Specific Benchmarks in Vello (Command Line)\nDESCRIPTION: This command demonstrates how to run specific benchmarks in the Vello project using cargo. It filters the benchmarks to run only those matching the 'fine/fill' pattern.\nSOURCE: https://github.com/linebender/vello/blob/main/sparse_strips/vello_bench/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo bench -- fine/fill\n```\n\n----------------------------------------\n\nTITLE: Referencing SPIRV to ISPC Translator for CPU Shader Fallback\nDESCRIPTION: Mentions the potential use of a SPIRV to ISPC translator for converting GPU compute shaders to CPU-runnable code. This approach could maintain a single codebase while ensuring compatibility across different hardware.\nSOURCE: https://github.com/linebender/vello/blob/main/doc/vision.md#2025-04-16_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\nspirv to ispc translator\n```\n\n----------------------------------------\n\nTITLE: Referencing GLSL to C++ Translator for WebRender\nDESCRIPTION: Mentions the use of a GLSL to C++ translator in WebRender for converting shaders to CPU-compatible code. This is presented as an example of compile-time translation of shaders to CPU code in production use.\nSOURCE: https://github.com/linebender/vello/blob/main/doc/vision.md#2025-04-16_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\nglsl-to-cxx\n```\n\n----------------------------------------\n\nTITLE: Updating a Specific Cargo Dependency to a Precise Version\nDESCRIPTION: This command updates a specific package in a Cargo project to a precise version. It uses the cargo update command with the -p flag to target a specific package and the --precise flag to specify the exact version.\nSOURCE: https://github.com/linebender/vello/blob/main/README.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncargo update -p package_name --precise 0.1.1\n```\n\n----------------------------------------\n\nTITLE: Downgrading Dependency in Cargo for Rust Compatibility\nDESCRIPTION: This snippet shows how to use Cargo to downgrade a specific dependency to a precise version. This can be useful if a dependency update has increased the minimum Rust version requirement beyond what the user wants to use.\nSOURCE: https://github.com/linebender/vello/blob/main/sparse_strips/vello_common/README.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# Use the problematic dependency's name and version\ncargo update -p package_name --precise 0.1.1\n```\n\n----------------------------------------\n\nTITLE: Downgrading Dependencies with Cargo\nDESCRIPTION: Shell command to downgrade a problematic dependency to a specific version when encountering compilation issues due to Rust version requirements.\nSOURCE: https://github.com/linebender/vello/blob/main/vello_encoding/README.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# Use the problematic dependency's name and version\ncargo update -p package_name --precise 0.1.1\n```\n\n----------------------------------------\n\nTITLE: Downgrading Dependency Command in Shell\nDESCRIPTION: Command for downgrading a problematic dependency to a specific version when encountering compilation issues due to Rust version requirements. This allows users to maintain compatibility with older Rust toolchains.\nSOURCE: https://github.com/linebender/vello/blob/main/sparse_strips/vello_hybrid/README.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# Use the problematic dependency's name and version\ncargo update -p package_name --precise 0.1.1\n```\n\n----------------------------------------\n\nTITLE: Downgrading Dependencies in Cargo\nDESCRIPTION: Shell command for downgrading a specific dependency version in Cargo to resolve compilation issues related to Rust version requirements.\nSOURCE: https://github.com/linebender/vello/blob/main/sparse_strips/vello_cpu/README.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# Use the problematic dependency's name and version\ncargo update -p package_name --precise 0.1.1\n```\n\n----------------------------------------\n\nTITLE: Downgrading Dependency Command for MSRV Compatibility in Vello API\nDESCRIPTION: A shell command that demonstrates how to downgrade a problematic dependency to a specific version when encountering compilation issues related to Rust version requirements.\nSOURCE: https://github.com/linebender/vello/blob/main/sparse_strips/vello_api/README.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# Use the problematic dependency's name and version\ncargo update -p package_name --precise 0.1.1\n```\n\n----------------------------------------\n\nTITLE: Running Vello Hybrid Winit with SVG Files\nDESCRIPTION: Command to run the example with specific SVG files as input for rendering.\nSOURCE: https://github.com/linebender/vello/blob/main/sparse_strips/vello_hybrid/examples/winit/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncargo run -p vello_hybrid_winit --release -- [SVG FILES]\n```\n\n----------------------------------------\n\nTITLE: Emoji Unicode Mappings in Markdown\nDESCRIPTION: Lists four specific emoji with their Unicode codes and shortcode representations, including check mark, eyes, party popper, and cowboy hat face emoji.\nSOURCE: https://github.com/linebender/vello/blob/main/examples/assets/noto_color_emoji/README.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- ✅ Check Mark - \\u{2705}/:white_check_mark:\n- 👀 Eyes - \\u{1f440}/:eyes:\n- 🎉 Party Popper - \\u{1f389}/:party_popper:\n- 🤠 Face with Cowboy Hat - \\u{1f920}/cowboy_hat_face\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Boilerplate Notice Template\nDESCRIPTION: A template notice that developers should include in their files when applying the Apache License 2.0. It contains placeholders for copyright year and owner name, along with standard license terms and reference to the license text.\nSOURCE: https://github.com/linebender/vello/blob/main/examples/assets/roboto/LICENSE.txt#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```"
  }
]