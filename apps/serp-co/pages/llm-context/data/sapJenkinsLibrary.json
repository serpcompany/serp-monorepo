[
  {
    "owner": "sap",
    "repo": "jenkins-library",
    "content": "TITLE: Configuring Splunk Integration for Piper\nDESCRIPTION: Example configuration for enabling Splunk integration in a Piper pipeline. This setup allows sending telemetry data and logs to a Splunk HTTP Event Collector endpoint.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/configuration.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ngeneral:\n  gitSshKeyCredentialsId: GitHub_Test_SSH\n\nsteps:\n  cloudFoundryDeploy:\n    deployTool: 'cf_native'\n    cloudFoundry:\n      org: 'testOrg'\n      space: 'testSpace'\n      credentialsId: 'MY_CF_CREDENTIALSID_IN_JENKINS'\nhooks:\n  splunk:\n    dsn: 'YOUR SPLUNK HEC ENDPOINT'\n    token: 'YOURTOKEN'\n    index: 'SPLUNK INDEX'\n    sendLogs: true\n```\n\n----------------------------------------\n\nTITLE: Initializing Jenkinsfile for ABAP Environment Pipeline\nDESCRIPTION: Creates a Jenkinsfile that imports the Piper library and calls the abapEnvironmentPipeline function. Optionally specifies a specific library version to avoid breaking changes.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/pipelines/abapEnvironment/configuration.md#2025-04-16_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\n@Library('piper-lib-os') _\n\nabapEnvironmentPipeline script: this\n```\n\nLANGUAGE: groovy\nCODE:\n```\n@Library('piper-lib-os@v1.53.0') _\n```\n\n----------------------------------------\n\nTITLE: Displaying ABAP Environment Pipeline Stages and Steps Table in Markdown\nDESCRIPTION: This code snippet shows a markdown table listing the stages and steps of the ABAP Environment Pipeline. It includes links to stage documentation and step details.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/pipelines/abapEnvironment/introduction.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Stage                    | Steps |\n|--------------------------|-------|\n| Init                     | -     |\n| [Initial Checks](stages/initialChecks.md)           | [abapAddonAssemblyKitCheckPV](https://sap.github.io/jenkins-library/steps/abapAddonAssemblyKitCheckPV/), [abapAddonAssemblyKitCheckCVs](https://sap.github.io/jenkins-library/steps/abapAddonAssemblyKitCheckCVs/)|\n| [Prepare System](stages/prepareSystem.md)           | [abapEnvironmentCreateSystem](https://sap.github.io/jenkins-library/steps/abapEnvironmentCreateSystem/) |\n| [Clone Repositories](stages/cloneRepositories.md)       | [cloudFoundryCreateServiceKey](https://sap.github.io/jenkins-library/steps/cloudFoundryCreateServiceKey/), [abapEnvironmentPullGitRepo](https://sap.github.io/jenkins-library/steps/abapEnvironmentPullGitRepo/)|\n| [Test](stages/test.md)                      | [cloudFoundryCreateServiceKey](https://sap.github.io/jenkins-library/steps/cloudFoundryCreateServiceKey/), [abapEnvironmentRunATCCheck](https://sap.github.io/jenkins-library/steps/abapEnvironmentRunATCCheck/), [abapEnvironmentRunAUnitTest](https://sap.github.io/jenkins-library/steps/abapEnvironmentRunAUnitTest/) |\n| [Build](stages/build.md)                    | [cloudFoundryCreateServiceKey](https://sap.github.io/jenkins-library/steps/cloudFoundryCreateServiceKey/), [abapAddonAssemblyKitReserveNextPackages](https://sap.github.io/jenkins-library/steps/abapAddonAssemblyKitReserveNextPackages/), [abapEnvironmentAssemblePackages](https://sap.github.io/jenkins-library/steps/abapEnvironmentAssemblePackages/), [abapAddonAssemblyKitRegisterPackages](https://sap.github.io/jenkins-library/steps/abapAddonAssemblyKitRegisterPackages/), [abapEnvironmentAssembleConfirm](https://sap.github.io/jenkins-library/steps/abapEnvironmentAssembleConfirm/), [abapAddonAssemblyKitReleasePackages](https://sap.github.io/jenkins-library/steps/abapAddonAssemblyKitReleasePackages/), [abapAddonAssemblyKitCreateTargetVector](https://sap.github.io/jenkins-library/steps/abapAddonAssemblyKitCreateTargetVector/), [abapAddonAssemblyKitPublishTargetVector](https://sap.github.io/jenkins-library/steps/abapAddonAssemblyKitPublishTargetVector/)|\n| [Integration Tests](stages/integrationTest.md)        | [cloudFoundryCreateService](https://sap.github.io/jenkins-library/steps/cloudFoundryCreateService/)|\n| [Confirm](stages/confirm.md)                  | -     |\n| [Publish](stages/publish.md)                  | [abapAddonAssemblyKitPublishTargetVector](https://sap.github.io/jenkins-library/steps/abapAddonAssemblyKitPublishTargetVector/)|\n| [Post](stages/post.md)                     | [cloudFoundryDeleteService](https://sap.github.io/jenkins-library/steps/cloudFoundryDeleteService/)|\n```\n\n----------------------------------------\n\nTITLE: Configuring abapEnvironmentCreateSystem in config.yml (YAML)\nDESCRIPTION: This YAML configuration specifies the parameters for creating an ABAP Environment system on SAP BTP Cloud Foundry. It includes Cloud Foundry credentials, endpoints, organization, space, and ABAP system details.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/abapEnvironmentCreateSystem.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  abapEnvironmentCreateSystem:\n    cfCredentialsId: 'cfCredentialsId'\n    cfApiEndpoint: 'https://test.server.com'\n    cfOrg: 'cfOrg'\n    cfSpace: 'cfSpace'\n    cfServiceInstance: 'H02_Q_system'\n    cfService: 'abap'\n    cfServicePlan: 'standard'\n    abapSystemAdminEmail: 'user@example.com'\n    abapSystemDescription: 'ABAP Environment Q System'\n    abapSystemIsDevelopmentAllowed: true\n    abapSystemID: 'H02'\n    abapSystemSizeOfPersistence: 4\n    abapSystemSizeOfRuntime: 1\n```\n\n----------------------------------------\n\nTITLE: Adding Cloud Foundry Deploy Stage to Jenkins Pipeline in Groovy\nDESCRIPTION: This snippet adds a 'deploy' stage to the Jenkins pipeline that uses the cloudFoundryDeploy step to deploy the built MTA to SAP BTP Cloud Foundry environment.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/guidedtour.md#2025-04-16_snippet_4\n\nLANGUAGE: groovy\nCODE:\n```\nstage('deploy') {\n    cloudFoundryDeploy script: this\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SAP BTP ABAP Environment System Creation in YAML\nDESCRIPTION: This YAML configuration defines general settings for connecting to SAP BTP Cloud Foundry, and specific parameters for creating an ABAP environment system. It includes API endpoints, organization and space details, credentials, and ABAP system specifications.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/pipelines/abapEnvironment/stages/prepareSystem.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ngeneral:\n  cfApiEndpoint: 'https://api.cf.sap.hana.ondemand.com'\n  cfOrg: 'myOrg'\n  cfSpace: 'mySpace'\n  cfCredentialsId: 'cfAuthentification'\n  cfServiceInstance: 'abap_system'\nstages:\n  Prepare System:\n    cfService: 'abap'\n    cfServicePlan: 'standard'\n    abapSystemAdminEmail: 'user@example.com'\n    abapSystemDescription: 'ABAP Environment Q System'\n    abapSystemIsDevelopmentAllowed: false\n    abapSystemID: 'H02'\n    abapSystemSizeOfPersistence: 4\n    abapSystemSizeOfRuntime: 1\n```\n\n----------------------------------------\n\nTITLE: Executing Health Check with Error Handling in Jenkins Pipeline (Groovy)\nDESCRIPTION: This snippet demonstrates how to use the handlePipelineStepErrors function to execute a health check with error handling. It retrieves a mandatory URL parameter, performs a curl request, and checks the status code.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/handlePipelineStepErrors.md#2025-04-16_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nhandlePipelineStepErrors (stepName: 'executeHealthCheck', stepParameters: parameters) {\n  // The code you want to get controlled by the error handler goes right here into the closure\n  def url = new Utils().getMandatoryParameter(parameters, 'url', null)\n  def statusCode = curl(url)\n  if (statusCode != '200')\n    error \"Health Check failed: ${statusCode}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Single Cloud Foundry Service with JSON File\nDESCRIPTION: Creates a Cloud Foundry service using configuration from an external JSON file. References the JSON file path in the configuration.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/cloudFoundryCreateService.md#2025-04-16_snippet_2\n\nLANGUAGE: groovy\nCODE:\n```\ncloudFoundryCreateService(\n    cfApiEndpoint : 'https://test.server.com',\n    cfOrg : 'cfOrg',\n    cfSpace: 'cfSpace',\n    cfCredentialsId: 'cfCredentialsId',\n    cfService:  'myService',\n    cfServiceInstanceName: 'myServiceInstanceName',\n    cfServicePlan: 'myPlan',\n    cfCreateServiceConfig: 'createServiceConfig.json',\n    cfServiceTags: 'list, of, tags',\n    script: this,\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Jenkins Pipeline with Piper Library in Groovy\nDESCRIPTION: This snippet initializes a Jenkins pipeline using the Piper library and sets up the common pipeline environment. It includes a 'prepare' stage that checks out the source code.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/guidedtour.md#2025-04-16_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\n@Library('piper-lib-os') _\nnode() {\n    stage('prepare') {\n        checkout scm\n        setupCommonPipelineEnvironment script:this\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Jenkins Pipeline for gCTS ABAP Development and Testing\nDESCRIPTION: A complete Jenkinsfile example that configures a pipeline to deploy ABAP objects to a test system, execute quality checks, display results, and rollback in case of failures. The pipeline uses the Piper library steps gctsDeploy, gctsExecuteABAPQualityChecks, and gctsRollback.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/scenarios/gCTS_Scenario.md#2025-04-16_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\n@Library(['piper-lib-os']) _\npipeline {\n  agent any\n  options {\n    disableConcurrentBuilds()\n  }\n\n  environment {\n    DEMOCREDS = 'ABAPUserPasswordCredentialsId'\n    HOST = 'https://<host of the ABAP system>:<port>'\n    CLIENT = '000'\n    REPO = '<repository name>'\n    REPO_URL = \"<URL of the remote Git Repository>\"\n  }\n\n  stages {\n    stage('gCTS Deploy') {\n      when {\n        anyOf {\n          branch 'main'\n        }\n      }\n      steps {\n        gctsDeploy(\n          script: this,\n          host: HOST,\n          client: CLIENT,\n          abapCredentialsId: DEMOCREDS,\n          repository: REPO,\n          remoteRepositoryURL: REPO_URL,\n          role: 'SOURCE',\n          vSID: '<vSID>')\n\n      }\n    }\n\n    stage('gctsExecuteABAPQualityChecks') {\n      when {\n        anyOf {\n          branch 'main'\n        }\n      }\n      steps {\n        script {\n          try {\n          gctsExecuteABAPQualityChecks(\n          script: this,\n          host: HOST,\n          client: CLIENT,\n          abapCredentialsId: DEMOCREDS,\n          repository: REPO,\n          scope: 'localChangedObjects',\n          commit: \"${env.GIT_COMMIT}\",\n          workspace: \"${WORKSPACE}\")\n        } catch (Exception ex) {\n          currentBuild.result = 'FAILURE'\n          unstable(message: \"${STAGE_NAME} is unstable\")\n        }\n\n      }\n    }\n  }\n\nstage('Results in Checkstyle') {\n  when {\n      anyOf {\n        branch 'main'\n      }\n    }\n  steps{\n\n     recordIssues(\n          enabledForFailure: true, aggregatingResults: true,\n          tools: [checkStyle(pattern: 'ATCResults.xml', reportEncoding: 'UTF8'),checkStyle(pattern: 'AUnitResults.xml', reportEncoding: 'UTF8')]\n       )\n\n      }\n    }\nstage('Rollback') {\n            when {\n              expression {\n                currentBuild.result == 'FAILURE'\n              }\n            }\n            steps {\n              gctsRollback(\n                script: this,\n                host: HOST,\n                client: CLIENT,\n                abapCredentialsId: DEMOCREDS,\n                repository: REPO\n          )\n\n      }\n    }\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Jenkins Pipeline for CAP Project Deployment\nDESCRIPTION: This Jenkinsfile defines a pipeline for building and deploying a CAP project. It includes stages for preparation, building the MTA archive, and deploying to Cloud Foundry.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/scenarios/CAP_Scenario.md#2025-04-16_snippet_2\n\nLANGUAGE: groovy\nCODE:\n```\n@Library('piper-lib-os') _\n\nnode(){\n  stage('Prepare')   {\n      deleteDir()\n      checkout scm\n      setupCommonPipelineEnvironment script:this\n  }\n\n  stage('Build')   {\n      mtaBuild script:this\n  }\n\n  stage('Deploy')   {\n      cloudFoundryDeploy script:this, deployTool:'mtaDeployPlugin'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Add-on Descriptor File in YAML for SAP Jenkins Library\nDESCRIPTION: This YAML snippet demonstrates the structure of an addon.yml file used to control the build process for an SAP add-on product. It specifies the add-on product version and details about the software component versions to be included in the build.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/scenarios/abapEnvironmentAddons.md#2025-04-16_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n---\naddonProduct: \"/NAMESPC/PRODUCTX\"\naddonVersion: \"1.2.0\"\nrepositories:\n  - name: \"/NAMESPC/COMPONENTA\"\n    branch: \"v1.2.0\"\n    version: \"1.2.0\"\n    commitID: \"7d4516e9\"\n    languages:\n      - DE\n      - EN\n  - name: \"/NAMESPC/COMPONENTB\"\n    branch: \"v2.0.0\"\n    version: \"2.0.0\"\n    commitID: \"9f102ffb\"\n    languages:\n      - DE\n      - EN\n      - FR\n```\n\n----------------------------------------\n\nTITLE: Executing MTA Build in Jenkins Pipeline (Groovy)\nDESCRIPTION: This snippet demonstrates how to use the mtaBuild step in a Jenkins pipeline script. It builds an MTA project located in a specific directory and targets the NEO platform. The resulting MTAR file path is then retrieved from the commonPipelineEnvironment.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/mtaBuild.md#2025-04-16_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\ndir('/path/to/FioriApp'){\n  mtaBuild script:this, buildTarget: 'NEO'\n}\ndef mtarFilePath = commonPipelineEnvironment.getMtarFilePath()\n```\n\n----------------------------------------\n\nTITLE: Executing AUnit Test via Cloud Foundry Service Key in Jenkins Pipeline\nDESCRIPTION: This code snippet shows how to run ABAP Unit tests by first retrieving connection details from a Cloud Foundry Service Key. It requires Cloud Foundry credentials stored in Jenkins and an AUnit configuration file.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/abapEnvironmentRunAUnitTest.md#2025-04-16_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\nabapEnvironmentRunAUnitTest(\n    cfApiEndpoint: 'https://test.server.com',\n    cfOrg: 'cfOrg',\n    cfSpace: 'cfSpace',\n    cfServiceInstance: 'myServiceInstance',\n    cfServiceKeyName: 'myServiceKey',\n    abapCredentialsId: 'cfCredentialsId',\n    aUnitConfig: 'aUnitConfig.yml',\n    script: this,\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Cloud Foundry CLI Access for SAP BTP\nDESCRIPTION: This code snippet shows the path to enable Cloud Foundry in the SAP BTP cockpit at the subaccount level. It's required for automated system creation and deletion in the pipeline.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/scenarios/abapEnvironmentTest.md#2025-04-16_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nSubaccount Overview page → Enable Cloud Foundry\n```\n\n----------------------------------------\n\nTITLE: Initializing Jenkins Pipeline with Piper Library\nDESCRIPTION: Basic Jenkinsfile configuration that imports the Piper library and initializes the pipeline. This is the minimal required setup for running the pipeline.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/stages/introduction.md#2025-04-16_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\n@Library('piper-lib-os') _\n\npiperPipeline script: this\n```\n\n----------------------------------------\n\nTITLE: Gathering Transport Request IDs at Runtime using Jenkins Input Step in Groovy\nDESCRIPTION: This code snippet shows how to use the Jenkins pipeline 'input' step to gather change document and transport request IDs at runtime. It then passes these IDs to the transportRequestUploadSOLMAN step.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/transportRequestUploadSOLMAN.md#2025-04-16_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\ndef ids = input( message: \"Upload?\",\n    parameters: [\n        string(name: 'CHANGE_DOCUMENT_ID',description: 'Change Document ID'),\n        string(name: 'TRANSPORT_REQUEST_ID',description: 'Transport Request ID')\n    ]\n)\n\ntransportRequestUploadSOLMAN(\n    script:this,\n    changeDocumentId: ids['CHANGE_DOCUMENT_ID'],\n    transportRequestId: ids['TRANSPORT_REQUEST_ID'],\n    ...\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring abapEnvironmentAssembleConfirm with Direct Host Authentication (YAML)\nDESCRIPTION: Example configuration in config.yml for the abapEnvironmentAssembleConfirm step using direct host and credentials authentication method for the ABAP environment.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/abapEnvironmentAssembleConfirm.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  abapEnvironmentAssembleConfirm:\n    abapCredentialsId: 'abapCredentialsId',\n    host: 'https://myABAPendpoint.com',\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Stage for ABAP Add-on in YAML\nDESCRIPTION: This YAML configuration sets up the general parameters and the Build stage for the ABAP add-on assembly process. It includes API endpoints, credentials, and service instance details for Cloud Foundry and AAKaaS.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/pipelines/abapEnvironment/stages/build.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ngeneral:\n  abapAddonAssemblyKitCredentialsId: 'TechUserAAKaaS'\n  addonDescriptorFileName: 'addon.yml'\n  cfApiEndpoint: 'https://api.cf.sap.hana.ondemand.com'\n  cfOrg: 'myOrgBld'\n  cfSpace: 'mySpaceBld'\n  cfCredentialsId: 'cfAuthentification'\n  cfServiceInstance: 'bld_system'\n  cfServiceKeyName: 'JENKINS_SAP_COM_0948'\nstages:\n  Build:\n    cfServiceKeyName: 'JENKINS_SAP_COM_0582'\n    cfServiceKeyConfig: 'sap_com_0582.json'\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Jenkins Pipeline with Piper Library\nDESCRIPTION: Minimal Jenkinsfile configuration required to use the SAP Piper library in a Jenkins pipeline. This imports the piper-lib and initializes the pipeline using the current script context.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/stages/examples.md#2025-04-16_snippet_0\n\nLANGUAGE: Groovy\nCODE:\n```\n@Library('piper-lib') _\n\npiperPipeline script: this\n```\n\n----------------------------------------\n\nTITLE: Advanced Multi-Container Pod Configuration\nDESCRIPTION: Complex example showing container port mappings, workspaces, and dedicated container execution with Selenium integration.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/dockerExecuteOnKubernetes.md#2025-04-16_snippet_3\n\nLANGUAGE: groovy\nCODE:\n```\ndockerExecuteOnKubernetes(\n  script: script,\n  containerCommands: ['selenium/standalone-chrome': ''],\n  containerMap: ['maven:3.5-jdk-8-alpine': 'maven', 'selenium/standalone-chrome': 'selenium'],\n  containerName: 'maven',\n  containerPortMappings: ['selenium/standalone-chrome': [[containerPort: 4444, hostPort: 4444]]],\n  containerWorkspaces: ['selenium/standalone-chrome': '']\n){\n  echo \"Executing inside a Kubernetes Pod inside 'maven' container to run Selenium tests\"\n  sh \"mvn clean install\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Piper Pipeline with YAML\nDESCRIPTION: Example configuration for a pipeline showing CloudFoundry deployment and Newman test execution settings. This demonstrates the basic structure of the .pipeline/config.yml file.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/configuration.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ngeneral:\n  gitSshKeyCredentialsId: GitHub_Test_SSH\n\nsteps:\n  cloudFoundryDeploy:\n    deployTool: 'cf_native'\n    cloudFoundry:\n      org: 'testOrg'\n      space: 'testSpace'\n      credentialsId: 'MY_CF_CREDENTIALSID_IN_JENKINS'\n  newmanExecute:\n    newmanCollection: 'myNewmanCollection.file'\n    newmanEnvironment: 'myNewmanEnvironment'\n    newmanGlobals: 'myNewmanGlobals'\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Pipeline Build Tool in YAML\nDESCRIPTION: Initial pipeline configuration file that specifies the build tool to be used. This is placed in .pipeline/config.yml and supports tools like docker, kaniko, maven, mta, and npm.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/stages/introduction.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ngeneral:\n  buildTool: 'npm'\n```\n\n----------------------------------------\n\nTITLE: Configuring Pipeline for CAP Project Deployment\nDESCRIPTION: This YAML configuration file specifies the build target for the MTA build step and provides Cloud Foundry deployment details including credentials, API endpoint, organization, and space.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/scenarios/CAP_Scenario.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  mtaBuild:\n    buildTarget: 'CF'\n  cloudFoundryDeploy:\n    cloudFoundry:\n      credentialsId: 'CF'\n      apiEndpoint: '<CF Endpoint>'\n      org: '<CF Organization>'\n      space: '<CF Space>'\n```\n\n----------------------------------------\n\nTITLE: Configuring SAPUI5/Fiori Pipeline for Cloud Foundry Deployment\nDESCRIPTION: This YAML configuration specifies settings for the mtaBuild and cloudFoundryDeploy steps. It defines the target platform as Cloud Foundry and includes necessary Cloud Foundry connection details.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/scenarios/ui5-sap-cp/Readme.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  mtaBuild:\n    platform: 'CF'\n  cloudFoundryDeploy:\n    cloudFoundry:\n      apiEndpoint: 'your-cf-endpoint' # default: 'https://api.cf.eu10.hana.ondemand.com'\n      org: 'your-org-id'\n      space: 'your-space-id'\n      credentialsId: 'CF-jenkins-credentials-id'\n```\n\n----------------------------------------\n\nTITLE: Executing ABAP Quality Checks in Jenkinsfile\nDESCRIPTION: This snippet demonstrates how to configure and execute ABAP quality checks using the gctsExecuteABAPQualityChecks step in a Jenkinsfile. It includes parameters for specifying the ABAP system, credentials, repository, and scope of the checks.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/gctsExecuteABAPQualityChecks.md#2025-04-16_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\ngctsExecuteABAPQualityChecks(\n  script: this,\n  host: 'https://abap.server.com:port',\n  client: '000',\n  abapCredentialsId: 'ABAPUserPasswordCredentialsId',\n  repository: 'myrepo',\n  scope: 'remoteChangedObjects',\n  commit: \"${env.GIT_COMMIT}\",\n  workspace: \"${WORKSPACE}\",\n  queryparameters: [saml2: 'disabled']\n\n  )\n```\n\n----------------------------------------\n\nTITLE: Defining Jenkins Pipeline for SAPUI5/Fiori on SAP BTP\nDESCRIPTION: This Jenkinsfile defines a pipeline using the fioriOnCloudPlatformPipeline scenario step from the piper library. It's used to build and deploy SAPUI5/Fiori applications to SAP BTP.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/scenarios/ui5-sap-cp/Readme.md#2025-04-16_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\n@Library('piper-lib-os') _\n\nfioriOnCloudPlatformPipeline script:this\n```\n\n----------------------------------------\n\nTITLE: Advanced Helm 3 Deployment in Groovy\nDESCRIPTION: An example of deploying a Helm chart using Helm 3 with the kubernetesDeploy step. This snippet shows how to specify additional parameters such as the deployment tool, chart path, deployment name, image, and container registry URL.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/kubernetesDeploy.md#2025-04-16_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\n// Deploy a helm chart called \"myChart\" using Helm 3\nkubernetesDeploy script: this, deployTool: 'helm3', chartPath: 'myChart', deploymentName: 'myRelease', image: 'nginx', containerRegistryUrl: 'https://docker.io'\n```\n\n----------------------------------------\n\nTITLE: Complete Configuration Example for ABAP Environment Build\nDESCRIPTION: Comprehensive YAML configuration for the abapEnvironmentBuild step including all available parameters. This example shows how to configure multiple aspects including phase values, file handling, and execution parameters.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/abapEnvironmentBuild.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nstages:\n  MyPhase:\n    abapCredentialsId: 'abapCredentialsId'\n    host: 'https://myABAPendpoint.com'\n    certificateNames: ['myCert.cer']\n    phase: 'MyPhase'\n    values: '[{\"value_id\":\"ID1\",\"value\":\"Value1\"},{\"value_id\":\"ID2\",\"value\":\"Value2\"}]'\n    downloadResultFilenames: ['File1','File2']\n    publishResultFilenames: ['File2']\n    subDirectoryForDownload: 'MyDir'\n    filenamePrefixForDownload: 'MyPrefix'\n    treatWarningsAsError: true\n    maxRuntimeInMinutes: 360\n    pollingIntervallInSeconds: 15\n```\n\n----------------------------------------\n\nTITLE: Implementing Jenkins Pipeline with Custom Defaults\nDESCRIPTION: Extended Jenkinsfile configuration that imports both the open-source Piper library and a custom library. It initializes the pipeline with custom defaults from a specified YAML file.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/stages/examples.md#2025-04-16_snippet_2\n\nLANGUAGE: Groovy\nCODE:\n```\n@Library(['piper-lib-os', 'myCustomLibrary']) _\n\npiperPipeline script: this, customDefaults: ['myCustomDefaults.yml']\n```\n\n----------------------------------------\n\nTITLE: Jenkins Pipeline Implementation for SAP Solution Manager Deployment\nDESCRIPTION: Jenkinsfile defining the complete pipeline workflow including preparation, MTA build and transport request handling stages. Uses the piper-lib-os library for SAP-specific deployment steps.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/scenarios/changeManagement.md#2025-04-16_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\n@Library('piper-lib-os') _\n\nnode() {\n\n  stage('prepare') {\n    checkout scm\n    setupCommonPipelineEnvironment script:this\n    transportRequestDocIDFromGit( script: this )\n    checkChangeInDevelopment script: this\n  }\n\n  stage('buildMta') {\n    mtaBuild script: this\n  }\n\n  stage('uploadToTransportRequest') {\n    transportRequestCreate script: this\n    transportRequestUploadSOLMAN script:this\n    transportRequestRelease script: this\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Mail Notification in Jenkins Pipeline using Groovy\nDESCRIPTION: This code snippet demonstrates how to use the mailSendNotification step in a Jenkins pipeline script. It passes the current script context to the step.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/mailSendNotification.md#2025-04-16_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nmailSendNotification script: this\n```\n\n----------------------------------------\n\nTITLE: Initializing CAP Project with Java, MTA, Samples, and HANA Support\nDESCRIPTION: This command initializes a new CAP project named 'bookshop' with Java, MTA, samples, and HANA support using the SAP Cloud Application Programming Model command line tool.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/scenarios/CAP_Scenario.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncds init bookshop --add java,mta,samples,hana\n```\n\n----------------------------------------\n\nTITLE: Calling abapEnvironmentCreateSystem Step with Parameters in Jenkinsfile (Groovy)\nDESCRIPTION: This Groovy snippet demonstrates how to call the abapEnvironmentCreateSystem step directly in a Jenkinsfile with explicit parameters. It uses a separate manifest file for service configuration.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/abapEnvironmentCreateSystem.md#2025-04-16_snippet_2\n\nLANGUAGE: groovy\nCODE:\n```\nabapEnvironmentCreateSystem (\n  script: this,\n  cfCredentialsId: 'cfCredentialsId',\n  cfApiEndpoint: 'https://test.server.com',\n  cfOrg: 'cfOrg',\n  cfSpace: 'cfSpace',\n  cfServiceManifest: 'manifest.yml'\n)\n```\n\n----------------------------------------\n\nTITLE: Defining MTA Application Structure in YAML\nDESCRIPTION: This YAML snippet defines the structure of a multitarget application (MTA) for a Node.js Hello World application. It specifies the application ID, version, and module information.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/guidedtour.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n_schema-version: 2.1.0\nID: com.sap.piper.node.hello.world\nversion: 1.0.0\ndescription: A Hello World sample application\nprovider: SAP Sample generator\nmodules:\n  - name: piper.node.hello.world\n    type: nodejs\n    path: .\n```\n\n----------------------------------------\n\nTITLE: Configuring Jenkins Pipeline for SAP Fiori App Build and Deploy\nDESCRIPTION: A Jenkinsfile that defines a complete pipeline for building and deploying SAP Fiori applications to SAP HANA XS advanced. The pipeline includes preparation, build, and deployment stages using the SAP Piper library.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/scenarios/xsa-deploy/Readme.md#2025-04-16_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\n@Library('piper-lib-os') _\n\npipeline {\n\n    agent any\n\n    stages {\n        stage(\"prepare\") {\n            steps {\n                deleteDir()\n                checkout scm\n                setupCommonPipelineEnvironment script: this\n            }\n        }\n        stage('build') {\n            steps {\n                mtaBuild script: this\n            }\n        }\n        stage('deploy') {\n            steps {\n                xsDeploy script: this\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing ABAP Environment Build Step in Jenkins Pipeline\nDESCRIPTION: Basic Groovy implementation for calling the abapEnvironmentBuild step in a Jenkins pipeline stage. This minimal example uses configuration from the config.yml file.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/abapEnvironmentBuild.md#2025-04-16_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nstage('MyPhase') {\n            steps {\n                abapEnvironmentBuild script: this\n            }\n        }\n```\n\n----------------------------------------\n\nTITLE: Jenkins Pipeline for RFC-based Upload\nDESCRIPTION: Jenkinsfile implementation for building and uploading artifacts via RFC. Includes stages for preparation, building, publishing to blob store/artifacts, and attaching to transport request.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/scenarios/upload-to-transportrequest/Readme.md#2025-04-16_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\n@Library('piper-lib-os') _\n\npipeline {\n    agent any\n    stages {\n        stage(\"prepare\") {\n            steps {\n                deleteDir()\n                checkout scm\n                setupCommonPipelineEnvironment script: this\n            }\n        }\n        stage('build') {\n            steps {\n                mtaBuild script: this\n            }\n        }\n        stage('publish') {\n            steps {\n                sh \"curl --upload-file <deployable> <BLOB_STORE/path/to/application>\"\n                archiveArtifacts artifacts: <deployable>\n            }\n        }\n        stage('attach') {\n            steps {\n                transportRequestUploadRFC script: this,\n                                           transportRequestId: '<TRANSPORT_REQUEST_ID>',\n                                           applicationUrl: '<THE_URL_TO_THE_DEPLOYABLE_ACCORDING_TO_PUBLISH_STAGE>'\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring neoDeploy Step in YAML\nDESCRIPTION: Example configuration for the neoDeploy step in a YAML file, specifying deployment mode, account, and host.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/neoDeploy.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  <...>\n  neoDeploy:\n    deployMode: mta\n    neo:\n      account: <myDeployAccount>\n      host: hana.example.org\n```\n\n----------------------------------------\n\nTITLE: Extending AUnit Stage with JUnit Plugin Integration in Groovy\nDESCRIPTION: This code shows how to extend the AUnit stage to display AUnit test results using the JUnit Plugin. It executes the original stage, then processes and displays the test results using the junit command with configuration for empty results and GitHub checks.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/pipelines/abapEnvironment/extensibility.md#2025-04-16_snippet_3\n\nLANGUAGE: groovy\nCODE:\n```\nvoid call(Map params) {\n  //access stage name\n  echo \"Start - Extension for stage: ${params.stageName}\"\n\n  //access config\n  echo \"Current stage config: ${params.config}\"\n\n  //execute original stage as defined in the template\n  params.originalStage()\n\n  junit skipPublishingChecks: true, allowEmptyResults: true, testResults: '**/AUnitResults.xml'\n\n  echo \"End - Extension for stage: ${params.stageName}\"\n}\nreturn this\n```\n\n----------------------------------------\n\nTITLE: Defining Jenkins Pipeline for SAP Cloud Transport Management Integration\nDESCRIPTION: This Jenkinsfile snippet defines a pipeline using the piper-lib-os library for integrating SAP Cloud Transport Management. It follows the convention for pipeline definitions and should be placed in the root directory of the development sources.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/scenarios/TMS_Extension.md#2025-04-16_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\n@Library('piper-lib-os') _\n\npiperPipeline script:this\n```\n\n----------------------------------------\n\nTITLE: Configuring Technical Pipeline Settings in YAML\nDESCRIPTION: Creates a .pipeline/config.yml file to store the configuration for the pipeline, including API endpoints, credential IDs, and stage-specific settings for system preparation, repository cloning, and post-execution tasks.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/pipelines/abapEnvironment/configuration.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ngeneral:\n  cfApiEndpoint: 'https://api.cf.eu10.hana.ondemand.com'\n  cfOrg: 'your-cf-org'\n  cfSpace: 'yourSpace'\n  cfCredentialsId: 'cfAuthentification'\n  cfServiceInstance: 'abapEnvironmentPipeline'\nstages:\n  Prepare System:\n    cfService: 'abap'\n    cfServicePlan: 'standard'\n    abapSystemAdminEmail: 'user@example.com'\n    abapSystemDescription: 'ABAP Environment Q System'\n    abapSystemIsDevelopmentAllowed: false\n    abapSystemID: 'H02'\n    abapSystemSizeOfPersistence: 4\n    abapSystemSizeOfRuntime: 1\n  Clone Repositories:\n    strategy: 'Clone'\n    repositories: 'repositories.yml'\n  ATC:\n    execute: stage\n  AUnit:\n    execute: stage\n  Post:\n    cfDeleteServiceKeys: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Defaults for Transport Request Creation in Groovy\nDESCRIPTION: This snippet demonstrates how to configure custom defaults for the transport request creation step using a shared library and a YAML configuration file.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/transportRequestCreate.md#2025-04-16_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\n@Library('piper-lib-os@master') _\n\n// the shared lib containing the additional configuration\n// needs to be configured in Jenkins\n@Library('foo@master') __\n\n// inside the shared lib denoted by 'foo' the additional configuration file\n// needs to be located under 'resources' ('resoures/myConfig.yml')\nprepareDefaultValues script: this, customDefaults: 'myConfig.yml'\n```\n\n----------------------------------------\n\nTITLE: Configuring Repository Cloning in YAML\nDESCRIPTION: Creates a repositories.yml file to specify which repositories and branches should be cloned during the 'Clone Repositories' stage of the pipeline.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/pipelines/abapEnvironment/configuration.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nrepositories:\n- name: '/DMO/GIT_REPOSITORY'\n  branch: 'master'\n- name: '/DMO/GIT_REPO'\n  branch: 'master'\n```\n\n----------------------------------------\n\nTITLE: Simple CNB Build in Jenkins Pipeline (Groovy)\nDESCRIPTION: This example demonstrates basic usage of the cnbBuild step to build and push a container image to a registry. It specifies the Docker registry credentials, image name, tag, and registry URL.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/cnbBuild.md#2025-04-16_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\ncnbBuild(\n    script: this,\n    dockerConfigJsonCredentialsId: 'DOCKER_REGISTRY_CREDS',\n    containerImageName: 'images/example',\n    containerImageTag: 'v0.0.1',\n    containerRegistryUrl: 'gcr.io'\n)\n```\n\n----------------------------------------\n\nTITLE: Executing prepareDefaultValues Step in Groovy\nDESCRIPTION: This snippet demonstrates how to call the prepareDefaultValues() function in a Jenkins pipeline. The function is likely responsible for setting up default configuration values for the build process.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/prepareDefaultValues.md#2025-04-16_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nprepareDefaultValues()\n```\n\n----------------------------------------\n\nTITLE: Extending ATC Stage to Send Results via Email in Groovy\nDESCRIPTION: This code demonstrates how to extend the ATC stage to send ABAP Test Cockpit results via email using the Email Extension Plugin. It executes the original stage, then sends an email with the ATC results attached and included in the body.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/pipelines/abapEnvironment/extensibility.md#2025-04-16_snippet_2\n\nLANGUAGE: groovy\nCODE:\n```\nvoid call(Map params) {\n  //access stage name\n  echo \"Start - Extension for stage: ${params.stageName}\"\n\n  //access config\n  echo \"Current stage config: ${params.config}\"\n\n  //execute original stage as defined in the template\n  params.originalStage()\n\n  emailext (\n    attachmentsPattern: 'ATCResults.html', //This will attach the ATC results to the E-Mail\n    to: 'user@example.com, admin@example.com',\n    subject: \"ATC results Mail from latest Run in System H01\",\n    body: 'Dear User, here are the results from the latest ATC run ${env.BUILD_ID}.' + readFile('ATCResults.html') //This will parse the ATC results and send it as the E-Mail body\n )\n\n  echo \"End - Extension for stage: ${params.stageName}\"\n}\nreturn this\n```\n\n----------------------------------------\n\nTITLE: Setting Up Common Pipeline Environment in Groovy\nDESCRIPTION: This snippet demonstrates how to call the setupCommonPipelineEnvironment step in a Jenkins pipeline script. It initializes the common pipeline environment with the current script context.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/setupCommonPipelineEnvironment.md#2025-04-16_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nsetupCommonPipelineEnvironment script: this\n```\n\n----------------------------------------\n\nTITLE: Calling abapEnvironmentPullGitRepo with Cloud Foundry parameters in Jenkinsfile (Groovy)\nDESCRIPTION: Example of calling the step in Jenkinsfile using Cloud Foundry service key parameters for authentication and connection.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/abapEnvironmentPullGitRepo.md#2025-04-16_snippet_6\n\nLANGUAGE: Groovy\nCODE:\n```\nabapEnvironmentPullGitRepo (\n  script: this,\n  repositoryName: '/DMO/GIT_REPOSITORY',\n  abapCredentialsId: 'cfCredentialsId',\n  cfApiEndpoint: 'https://test.server.com',\n  cfOrg: 'cfOrg',\n  cfSpace: 'cfSpace',\n  cfServiceInstance: 'cfServiceInstance',\n  cfServiceKeyName: 'cfServiceKeyName'\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring config.yml for ABAP Add-on Publishing Stage\nDESCRIPTION: Example configuration for the config.yml file that specifies the general parameters and Publish stage settings for the ABAP add-on deployment pipeline. It includes the AAK credentials ID, addon descriptor filename, and target vector scope.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/pipelines/abapEnvironment/stages/publish.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ngeneral:\n  abapAddonAssemblyKitCredentialsId: 'TechUserAAKaaS'\n  addonDescriptorFileName: 'addon.yml'\nstages:\n  Publish:\n    targetVectorScope: 'P'\n```\n\n----------------------------------------\n\nTITLE: Configuring ABAP Quality Checks in YAML\nDESCRIPTION: This snippet shows how to configure ABAP quality checks in a YAML config file (e.g., .pipeline/config.yaml). It includes settings for the ABAP system, credentials, repository, and scope of the checks.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/gctsExecuteABAPQualityChecks.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  <...>\n  gctsExecuteABAPQualityChecks:\n    host: 'https://abap.server.com:port'\n    client: '000'\n    abapCredentialsId: 'ABAPUserPasswordCredentialsId'\n    repository: 'myrepo'\n    scope: 'remoteChangedObjects'\n    commit: '38abb4814ae46b98e8e6c3e718cf1782afa9ca90'\n    workspace: '/var/jenkins_home/workspace/myFirstPipeline'\n    queryparameters:\n        saml2: \"disabled\"\n```\n\n----------------------------------------\n\nTITLE: Configuring MTA Build Step for Cloud Foundry in YAML\nDESCRIPTION: This YAML snippet configures the mtaBuild step to target the Cloud Foundry environment. It's part of the pipeline configuration file.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/guidedtour.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ngeneral:\nsteps:\n  mtaBuild:\n    buildTarget: 'CF'\n```\n\n----------------------------------------\n\nTITLE: Configuring ABAP Unit Tests Only in YAML\nDESCRIPTION: This snippet shows how to configure ABAP quality checks to execute only ABAP Unit tests by setting atcCheck to false in a YAML file.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/gctsExecuteABAPQualityChecks.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  <...>\n  gctsExecuteABAPQualityChecks:\n    host: 'https://abap.server.com:port'\n    client: '000'\n    abapCredentialsId: 'ABAPUserPasswordCredentialsId'\n    repository: 'myrepo'\n    atcCheck: false\n    scope: 'packages'\n    workspace: '/var/jenkins_home/workspace/myFirstPipeline'\n```\n\n----------------------------------------\n\nTITLE: Extending ATC Stage with Warnings Next Generation Plugin in Groovy\nDESCRIPTION: This code snippet demonstrates how to extend the ATC stage to display ABAP Test Cockpit results using the Checkstyle/Warnings Next Generation Plugin. It executes the original stage, then records issues using the checkStyle tool and adds quality gates to set the build to UNSTABLE if ATC findings are found.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/pipelines/abapEnvironment/extensibility.md#2025-04-16_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nvoid call(Map params) {\n  //access stage name\n  echo \"Start - Extension for stage: ${params.stageName}\"\n\n  //access config\n  echo \"Current stage config: ${params.config}\"\n\n  //execute original stage as defined in the template\n  params.originalStage()\n\n  recordIssues tools: [checkStyle(pattern: '**/ATCResults.xml')], qualityGates: [[threshold: 1, type: 'TOTAL', unstable: true]]\n\n  echo \"End - Extension for stage: ${params.stageName}\"\n}\nreturn this\n```\n\n----------------------------------------\n\nTITLE: Configuring Pull-Request Voting Pipeline in YAML\nDESCRIPTION: YAML configuration for a simple pull-request voting pipeline. This example specifies npm as the build tool to be used in the pipeline.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/stages/examples.md#2025-04-16_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\ngeneral:\n  buildTool: 'npm'\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Cloud Foundry Services with Manifest\nDESCRIPTION: Creates multiple Cloud Foundry services using a YAML manifest file. Uses the Cloud Foundry Create-Service-Push Plugin.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/cloudFoundryCreateService.md#2025-04-16_snippet_4\n\nLANGUAGE: groovy\nCODE:\n```\ncloudFoundryCreateService(\n    cfApiEndpoint : 'https://test.server.com',\n    cfOrg : 'cfOrg',\n    cfSpace: 'cfSpace',\n    cfCredentialsId: 'cfCredentialsId',\n    serviceManifest: 'manifest.yml',\n    script: this,\n)\n```\n\n----------------------------------------\n\nTITLE: Repository Configuration YAML\nDESCRIPTION: YAML configuration file for multiple repositories with commit ID and tag options\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/abapEnvironmentCloneGitRepo.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nrepositories:\n  - name: '/DMO/REPO'\n    branch: 'main'\n  - name: '/DMO/REPO_COMMIT'\n    branch: 'feature'\n    commitID: 'cd87a3cac2bc946b7629580e58598c3db56a26f8'\n  - name: '/DMO/REPO_TAG'\n    branch: 'release'\n    tag: 'myTag'\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Defaults in YAML for Piper Projects\nDESCRIPTION: This YAML snippet shows how to configure custom default configurations for Piper projects. It demonstrates setting up a custom defaults URL and general configuration options.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/configuration.md#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ncustomDefaults: ['https://my.github.local/raw/someorg/custom-defaults/master/backend-service.yml']\ngeneral:\n  ...\n```\n\n----------------------------------------\n\nTITLE: Adding Pipeline Support to Existing CAP Project\nDESCRIPTION: This command adds continuous delivery pipeline support to an existing CAP project by generating a Jenkinsfile and .pipeline/config.yml file.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/scenarios/CAP_Scenario.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncd bookshop\ncds add pipeline\n```\n\n----------------------------------------\n\nTITLE: Defining addon.yml for ABAP Add-on Components\nDESCRIPTION: Example addon.yml configuration that defines the add-on product details and its component repositories. It specifies the addon product namespace, version, and the repositories with their respective branches, versions, and commit IDs.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/pipelines/abapEnvironment/stages/publish.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\naddonProduct: /NAMESPC/PRODUCTX\naddonVersion: 1.2.0\nrepositories:\n  - name: /NAMESPC/COMPONENTA\n    branch: v1.2.0\n    version: 1.2.0\n    commitID: 7d4516e9\n  - name: /NAMESPC/COMPONENTB\n    branch: v2.0.0\n    version: 2.0.0\n    commitID: 9f102ffb\n```\n\n----------------------------------------\n\nTITLE: Configuring Pipeline Stage Parameters in YAML\nDESCRIPTION: Example configuration for the Clone Repositories stage in config.yml. Defines CF endpoints, credentials, and clone strategy parameters.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/pipelines/abapEnvironment/stages/cloneRepositories.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ngeneral:\n  cfApiEndpoint: 'https://api.cf.sap.hana.ondemand.com'\n  cfOrg: 'myOrg'\n  cfSpace: 'mySpace'\n  cfCredentialsId: 'cfAuthentification'\n  cfServiceInstance: 'abap_system'\nstages:\n  Clone Repositories:\n    repositories: 'repositories.yml'\n    strategy: 'Clone'\n```\n\n----------------------------------------\n\nTITLE: Recording ABAP Quality Check Results in Jenkins\nDESCRIPTION: This Jenkinsfile snippet demonstrates how to execute ABAP quality checks and record the results using the Warnings-Next-Generation Plugin in Jenkins. It includes error handling and result aggregation.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/gctsExecuteABAPQualityChecks.md#2025-04-16_snippet_4\n\nLANGUAGE: groovy\nCODE:\n```\nstage('ABAP Unit Tests') {\n  steps{\n\n   script{\n\n     try{\n           gctsExecuteABAPQualityChecks(\n              script: this,\n              commit: \"${env.GIT_COMMIT}\",\n              workspace: \"${WORKSPACE}\")\n        }\n          catch (Exception ex) {\n            currentBuild.result = 'FAILURE'\n            unstable(message: \"${STAGE_NAME} is unstable\")\n             }\n\n        }\n      }\n    }\nstage('Results in Checkstyle') {\n  steps{\n\n     recordIssues(\n          enabledForFailure: true, aggregatingResults: true,\n          tools: [checkStyle(pattern: 'ATCResults.xml', reportEncoding: 'UTF8'),checkStyle(pattern: 'AUnitResults.xml', reportEncoding: 'UTF8')]\n       )\n\n      }\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Parallel Test Execution in Go\nDESCRIPTION: Demonstrates how to implement parallel test execution using t.Parallel() for both test methods and subtests. Includes example of proper variable handling in parallel tests.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/DEVELOPMENT.md#2025-04-16_snippet_11\n\nLANGUAGE: golang\nCODE:\n```\nfunc TestMethod(t *testing.T) {\n    t.Parallel()\n    testCases := []struct {\n        Name string\n    }{\n        {\n            Name: \"Name1\"\n        },\n        {\n            Name: \"Name2\"\n        },\n    }\n\n    for _, testCase := range testCases {\n        testCase := testCase\n        t.Run(testCase.Name, func(t *testing.T) {\n            t.Parallel()\n            // execute test\n        })\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running ATC via Cloud Foundry Service Key in Jenkinsfile (Groovy)\nDESCRIPTION: Example of triggering an ATC run by reading the Service Key of an ABAP instance in Cloud Foundry.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/abapEnvironmentRunATCCheck.md#2025-04-16_snippet_2\n\nLANGUAGE: Groovy\nCODE:\n```\nabapEnvironmentRunATCCheck(\n    cfApiEndpoint : 'https://test.server.com',\n    cfOrg : 'cfOrg',\n    cfSpace: 'cfSpace',\n    cfServiceInstance: 'myServiceInstance',\n    cfServiceKeyName: 'myServiceKey',\n    abapCredentialsId: 'cfCredentialsId',\n    atcConfig: 'atcconfig.yml',\n    script: this,\n)\n```\n\n----------------------------------------\n\nTITLE: Single Container Kubernetes Execution\nDESCRIPTION: Executes a Maven build command in a single container pod using maven:3.5-jdk-7 Docker image.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/dockerExecuteOnKubernetes.md#2025-04-16_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\ndockerExecuteOnKubernetes(script: script, dockerImage: 'maven:3.5-jdk-7'){\n    sh \"mvn clean install\"\n}\n```\n\n----------------------------------------\n\nTITLE: Jenkins Pipeline with Error Handling\nDESCRIPTION: Complete Jenkins pipeline example with error handling and results recording using recordIssues step.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/gctsExecuteABAPUnitTests.md#2025-04-16_snippet_4\n\nLANGUAGE: groovy\nCODE:\n```\nstage('ABAP Unit Tests') {\n  steps{\n\n   script{\n\n     try{\n           gctsExecuteABAPUnitTests(\n              script: this,\n              commit: \"${env.GIT_COMMIT}\",\n              workspace: \"${WORKSPACE}\")\n        }\n          catch (Exception ex) {\n            currentBuild.result = 'FAILURE'\n            unstable(message: \"${STAGE_NAME} is unstable\")\n             }\n\n        }\n      }\n    }\nstage('Results in Checkstyle') {\n  steps{\n\n     recordIssues(\n          enabledForFailure: true, aggregatingResults: true,\n          tools: [checkStyle(pattern: 'ATCResults.xml', reportEncoding: 'UTF8'),checkStyle(pattern: 'AUnitResults.xml', reportEncoding: 'UTF8')]\n       )\n\n      }\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Checkstyle in Build Stage Extension for Jenkins Pipeline\nDESCRIPTION: A practical example of a Build stage extension that adds Checkstyle linting to the pipeline. This extension runs the original build stage, executes Checkstyle via Maven, and records the issues in Jenkins. It should be saved as .pipeline/extensions/Build.groovy.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/extensibility.md#2025-04-16_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\ndef call(Map parameters) {\n\n    parameters.originalStage() // Runs the build stage with built-in linters\n\n    mavenExecute(\n        script: parameters.script,\n        flags: ['--batch-mode'],\n        pomPath: 'application/pom.xml',\n        m2Path: s4SdkGlobals.m2Directory,\n        goals: ['checkstyle:checkstyle'],\n    )\n\n    recordIssues skipBlames: true,\n        enabledForFailure: true,\n        aggregatingResults: false,\n        tool: checkStyle()\n}\n\nreturn this\n```\n\n----------------------------------------\n\nTITLE: WebDriverIO Kubernetes Configuration\nDESCRIPTION: Configuration setup for WebDriverIO when running tests in a Kubernetes environment. Uses localhost as Selenium host with Chrome browser.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/seleniumExecuteTests.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar webdriverio = require('webdriverio');\nvar options = {\n    host: 'localhost',\n    port: 4444,\n    desiredCapabilities: {\n        browserName: 'chrome'\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration for Integration Artifact Transport\nDESCRIPTION: Detailed YAML configuration example showing required parameters including API service key credentials, package ID, resource ID, name, and version for integration artifact transport.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/integrationArtifactTransport.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  <...>\n  integrationArtifactTransport:\n    casApiServiceKeyCredentialsId: 'MY_API_SERVICE_KEY'\n    integrationPackageId: MY_INTEGRATION_PACKAGE_ID\n    resourceID: MY_INTEGRATION_RESOURCE_ID\n    name: MY_INTEGRATION_PACKAGE_NAME\n    version: MY_INTEGRATION_PACKAGE_VERSION\n```\n\n----------------------------------------\n\nTITLE: Executing AUnit Test via Direct ABAP Endpoint Configuration in Jenkins Pipeline\nDESCRIPTION: This code snippet demonstrates how to configure the abapEnvironmentRunAUnitTest step to run directly against an ABAP endpoint. It requires credentials stored in Jenkins and an AUnit configuration file.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/abapEnvironmentRunAUnitTest.md#2025-04-16_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nabapEnvironmentRunAUnitTest(\n    abapCredentialsId: 'abapCredentialsId',\n    host: 'https://myABAPendpoint.com',\n    aUnitConfig: 'aUnitConfig.yml',\n    script: this,\n)\n```\n\n----------------------------------------\n\nTITLE: Basic usage of abapAddonAssemblyKitCheckPV in Jenkins pipeline\nDESCRIPTION: Shows the minimal configuration required to call the abapAddonAssemblyKitCheckPV step in a Jenkinsfile when using the recommended config.yml approach.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/abapAddonAssemblyKitCheckCVs.md#2025-04-16_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nabapAddonAssemblyKitCheckPV script: this\n```\n\n----------------------------------------\n\nTITLE: Cloning Git Repository to ABAP Server using gctsCloneRepository in Groovy\nDESCRIPTION: This snippet demonstrates how to use the gctsCloneRepository step in a Jenkinsfile. It specifies the ABAP server details, client, credentials, and repository name.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/gctsCloneRepository.md#2025-04-16_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\ngctsCloneRepository(\n  script: this,\n  host: 'https://abap.server.com:port',\n  client: '000',\n  abapCredentialsId: 'ABAPUserPasswordCredentialsId',\n  repository: 'myrepo'\n)\n```\n\n----------------------------------------\n\nTITLE: Defining ABAP Add-on Product and Components in YAML\nDESCRIPTION: This YAML configuration defines the ABAP add-on product details, including product name, version, and the repositories of its components. It specifies the name, branch, version, and commit ID for each component.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/pipelines/abapEnvironment/stages/build.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\naddonProduct: /NAMESPC/PRODUCTX\naddonVersion: 1.2.0\nrepositories:\n  - name: /NAMESPC/COMPONENTA\n    branch: v1.2.0\n    version: 1.2.0\n    commitID: 7d4516e9\n  - name: /NAMESPC/COMPONENTB\n    branch: v2.0.0\n    version: 2.0.0\n    commitID: 9f102ffb\n```\n\n----------------------------------------\n\nTITLE: Transport Request Upload Configuration\nDESCRIPTION: Complete configuration example showing transportRequestUploadCTS setup in YAML and Groovy\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/transportRequestUploadCTS.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# config.yaml\nsteps:\n  transportRequestUploadCTS:\n    changeManagement:\n      credentialsId: 'CTS_CREDENTIALS_ID'\n      endpoint: 'https://example.org'\n      client: '001'\n    abapPackage: 'PACK'\n    applicationName: 'APP'\n```\n\nLANGUAGE: groovy\nCODE:\n```\n// pipeline script\n   stage('Init') {\n      transportRequestReqIDFromGit( script: this )\n   }\n   stage('Build') {\n      npmExecuteScripts( script: this, runScripts: ['build'])\n   }\n   stage('Upload') {\n      transportRequestUploadCTS( script: this)\n   }\n```\n\n----------------------------------------\n\nTITLE: Executing Multicloud Deployment in Jenkins Pipeline using Groovy\nDESCRIPTION: This snippet demonstrates how to use the multicloudDeploy step in a Jenkins pipeline to deploy to both Cloud Foundry and SAP Neo platforms. It specifies targets for each platform and enables zero-downtime deployment.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/multicloudDeploy.md#2025-04-16_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nmulticloudDeploy(\n    script: script,\n    cfTargets: [[apiEndpoint: 'https://test.server.com', appName:'cfAppName', credentialsId: 'cfCredentialsId', manifest: 'cfManifest', org: 'cfOrg', space: 'cfSpace']],\n    neoTargets: [[credentialsId: 'my-credentials-id', host: hana.example.org, account: 'trialuser1']],\n    enableZeroDowntimeDeployment: 'true'\n)\n```\n\n----------------------------------------\n\nTITLE: Running Jenkins Docker Container with Host Docker Socket\nDESCRIPTION: This Docker command demonstrates how to run a Jenkins container with access to the host's Docker socket. This is necessary if Jenkins is running in a container but needs to spawn other containers on the host.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/infrastructure/customjenkins.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run ...  -v /var/run/docker.sock:/var/run/docker.sock ...\n```\n\n----------------------------------------\n\nTITLE: Executing Snyk Security Scan in Jenkins Pipeline (Groovy)\nDESCRIPTION: This snippet demonstrates how to use the snykExecute step in a Jenkins pipeline to run a Snyk security scan. It requires a Snyk credentials ID to be provided for authentication.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/snykExecute.md#2025-04-16_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nsnykExecute script: this, snykCredentialsId: 'mySnykToken'\n```\n\n----------------------------------------\n\nTITLE: Configuring UIVeri5 Tests with Selenium in YAML\nDESCRIPTION: Advanced configuration for running UIVeri5 tests using npmExecuteTests, including custom install and run commands, Selenium options, and environment variables.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/npmExecuteTests.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nstages:\n  - name: Test\n    steps:\n      - name: npmExecuteTests\n        type: npmExecuteTests\n        params:\n          runCommand: \"/home/node/.npm-global/bin/uiveri5\"\n          installCommand: \"npm install @ui5/uiveri5 --global --quiet\"\n          runOptions: [\"--seleniumAddress=http://localhost:4444/wd/hub\"]\n          usernameEnvVar: \"PIPER_SELENIUM_HUB_USER\"\n          passwordEnvVar: \"PIPER_SELENIUM_HUB_PASSWORD\"\n          envs:\n            - \"NPM_CONFIG_PREFIX=~/.npm-global\"\n          paths:\n            - \"~/.npm-global/bin\"\n```\n\n----------------------------------------\n\nTITLE: Configuring detectExecuteScan Step in Jenkins Pipeline YAML\nDESCRIPTION: This YAML snippet shows how to configure the detectExecuteScan step in the .pipeline/config.yml file. It specifies the Black Duck server URL, credentials, project details, and optional GitHub API settings for pull request integration.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/detectExecuteScan.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  detectExecuteScan:\n    serverUrl: 'https://sap-staging.app.blackduck.com/'\n    detectTokenCredentialsId: 'JenkinsCredentialsIdForBlackDuckToken'\n    projectName: 'projectNameInBlackDuckUI'\n    version: 'v1.0'\n    githubApiUrl: 'https://github.wdf.sap.corp/api/v3'\n    githubToken: 'JenkinsCredentialsIdForGithub'\n```\n\n----------------------------------------\n\nTITLE: Basic Kubernetes Deployment in Groovy\nDESCRIPTION: A simple example of using the kubernetesDeploy step in a Jenkins pipeline script. This snippet demonstrates the minimal required configuration.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/kubernetesDeploy.md#2025-04-16_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nkubernetesDeploy script: this\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration for SAP Change Management in Transport Request Creation\nDESCRIPTION: This YAML snippet shows the configuration options for SAP Change Management, including credentials, endpoints, and Git-related settings. It can be used to set default values for the transport request creation step.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/transportRequestCreate.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ngeneral:\n  changeManagement:\n    changeDocumentLabel: 'ChangeDocument\\s?:'\n    cmClientOpts: '-Djavax.net.ssl.trustStore=<path to truststore>'\n    credentialsId: 'CM'\n    type: 'SOLMAN'\n    endpoint: 'https://example.org/cm'\n    git:\n      from: 'HEAD~1'\n      to: 'HEAD'\n      format: '%b'\n```\n\n----------------------------------------\n\nTITLE: Configuring gCTS Rollback in Jenkinsfile\nDESCRIPTION: Example configuration showing how to implement gCTS rollback in a Jenkins pipeline using Groovy syntax. Demonstrates setting up connection parameters including host, client, credentials, and repository name.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/gctsRollback.md#2025-04-16_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\ngctsRollback(\n  script: this,\n  host: \"https://abap.server.com:port\",\n  client: \"000\",\n  abapCredentialsId: 'ABAPUserPasswordCredentialsId',\n  repository: \"myrepo\"\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring Integration Artifact Status Check in Jenkinsfile\nDESCRIPTION: Example showing how to configure the integrationArtifactGetMplStatus step in a Jenkinsfile using Groovy syntax. Uses the 'this' context to reference the pipeline script.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/integrationArtifactGetMplStatus.md#2025-04-16_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nintegrationArtifactGetMplStatus script: this\n```\n\n----------------------------------------\n\nTITLE: Configuring gCTS Deployment in Jenkinsfile\nDESCRIPTION: Example of configuring gCTS deployment parameters in a Groovy-based Jenkinsfile. Shows how to specify connection details, repository information, and deployment options like branch, commit, and rollback settings.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/gctsDeploy.md#2025-04-16_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\ngctsDeploy(\n  script: this,\n  host: 'https://abap.server.com:port',\n  client: '000',\n  abapCredentialsId: 'ABAPUserPasswordCredentialsId',\n  repository: 'myrepo',\n  remoteRepositoryURL: \"https://remote.repository.url.com\",\n  role: 'SOURCE',\n  vSID: 'ABC',\n  branch: 'feature1',\n  commit: '95952ec',\n  scope: 'LASTACTION',\n  rollback: true,\n  configuration: [VCS_AUTOMATIC_PULL: 'FALSE',VCS_AUTOMATIC_PUSH: 'FALSE',CLIENT_VCS_LOGLVL: 'debug'],\n  queryparameters: [saml2: 'disabled']\n)\n```\n\n----------------------------------------\n\nTITLE: MTA Blue-Green Strategy Parameter Example\nDESCRIPTION: Command parameters for enabling blue-green deployment strategy with MTA plugin\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/cloudFoundryDeploy.md#2025-04-16_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nmtaDeployParameters: --strategy blue-green --skip-testing-phase\n```\n\n----------------------------------------\n\nTITLE: Configuring Cloud Foundry Deploy Step in YAML\nDESCRIPTION: This YAML snippet configures the cloudFoundryDeploy step, specifying the deployment tool, type, organization, space, and credentials ID for Cloud Foundry deployment.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/guidedtour.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ncloudFoundryDeploy:\n  deployTool: 'mtaDeployPlugin'\n  deployType: 'standard'\n  cloudFoundry:\n    org: '<your-organisation>'\n    space: '<your-space>'\n    credentialsId: 'CF_CREDENTIALSID'\n```\n\n----------------------------------------\n\nTITLE: Publishing JUnit and Cobertura Test Results in Jenkins Pipeline\nDESCRIPTION: Example showing how to publish JUnit test results with custom pattern and archiving, along with Cobertura coverage reports using specific pattern.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/testsPublishResults.md#2025-04-16_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\ntestsPublishResults(\n  junit: [pattern: '**/target/TEST*.xml', archive: true],\n  cobertura: [pattern: '**/target/coverage/cobertura-coverage.xml']\n)\n```\n\n----------------------------------------\n\nTITLE: Jenkins Pipeline for OData-based Upload\nDESCRIPTION: Jenkinsfile implementation for building and uploading artifacts via OData. Includes stages for preparation, building SAPUI5 application, retrieving transport request ID, and attaching to transport request.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/scenarios/upload-to-transportrequest/Readme.md#2025-04-16_snippet_3\n\nLANGUAGE: groovy\nCODE:\n```\n@Library('piper-lib-os') _\n\npipeline {\n    agent any\n    stages {\n        stage(\"prepare\") {\n            steps {\n                deleteDir()\n                checkout scm\n                setupCommonPipelineEnvironment script: this\n            }\n        }\n        stage('build') {\n            steps {\n                npmExecuteScripts(script: this, runScripts: ['build'])\n            }\n        }\n        stage('request') {\n            steps {\n                transportRequestReqIDFromGit( script: this )\n            }\n        }\n        stage('attach') {\n            steps {\n                transportRequestUploadCTS script: this)\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating gCTS Repository using YAML Configuration\nDESCRIPTION: YAML configuration for creating a Git repository on an ABAP server within a pipeline config file. Defines server connection parameters, repository details, and system settings.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/gctsCreateRepository.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  <...>\n  gctsCreateRepository:\n    host: 'https://abap.server.com:port'\n    client: '000'\n    abapCredentialsId: 'ABAPUserPasswordCredentialsId'\n    repository: 'myrepo'\n    remoteRepositoryURL: 'https://github.com/user/myrepo'\n    role: 'SOURCE'\n    vSID: 'ABC'\n```\n\n----------------------------------------\n\nTITLE: Deploying XS Application with xsDeploy in Jenkins Pipeline (Groovy)\nDESCRIPTION: This snippet demonstrates how to use the xsDeploy step in a Jenkins pipeline script. It specifies the MTA archive path, credentials, API URL, space, and organization for deployment.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/xsDeploy.md#2025-04-16_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nxsDeploy\n    script: this,\n    mtaPath: 'path/to/archiveFile.mtar',\n    credentialsId: 'my-credentials-id',\n    apiUrl: 'https://example.org/xs',\n    space: 'mySpace',\n    org: 'myOrg'\n```\n\n----------------------------------------\n\nTITLE: Simple Pipeline Configuration for ABAP Addon Assembly Kit Check\nDESCRIPTION: Basic implementation of the abapAddonAssemblyKitCheck step in a Jenkins pipeline script.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/abapAddonAssemblyKitCheck.md#2025-04-16_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nabapAddonAssemblyKitCheck script: this\n```\n\n----------------------------------------\n\nTITLE: Configuring gCTS Rollback in YAML\nDESCRIPTION: YAML configuration example for gCTS rollback implementation in a pipeline configuration file. Shows the required parameters for connecting to the ABAP system and specifying the target repository.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/gctsRollback.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  <...>\n  gctsRollback:\n    host: \"https://abap.server.com:port\"\n    client: \"000\"\n    abapCredentialsId: 'ABAPUserPasswordCredentialsId'\n    repository: \"myrepo\"\n```\n\n----------------------------------------\n\nTITLE: Creating gCTS Repository using Jenkinsfile Groovy Script\nDESCRIPTION: Groovy script configuration for creating a Git repository on an ABAP server using gctsCreateRepository step. Specifies server connection details, credentials, repository information, and system parameters.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/gctsCreateRepository.md#2025-04-16_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\ngctsCreateRepository(\n  script: this,\n  host: 'https://abap.server.com:port',\n  client: '000',\n  abapCredentialsId: 'ABAPUserPasswordCredentialsId',\n  repository: 'myrepo',\n  remoteRepositoryURL: 'https://github.com/user/myrepo',\n  role: 'SOURCE',\n  vSID: 'ABC'\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring Integration Artifact Update in YAML\nDESCRIPTION: This example shows how to configure the integrationArtifactUpdateConfiguration step in a YAML file (e.g., .pipeline/config.yaml). It includes various parameters such as API service key credentials, integration flow ID, version, and configuration parameters.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/integrationArtifactUpdateConfiguration.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  <...>\n  integrationArtifactUpdateConfiguration:\n    cpiApiServiceKeyCredentialsId: 'MY_API_SERVICE_KEY'\n    integrationFlowId: 'MY_INTEGRATION_FLOW_NAME'\n    integrationFlowVersion: 'MY_INTEGRATION_FLOW_VERSION'\n    parameterKey: 'MY_INTEGRATION_FLOW_CONFIG_PARAMETER_NAME'\n    parameterValue: 'MY_INTEGRATION_FLOW_CONFIG_PARAMETER_VALUE'\n```\n\n----------------------------------------\n\nTITLE: Publishing Java Static Analysis Results\nDESCRIPTION: Example showing how to publish results from multiple Java static analysis tools including PMD, CPD, FindBugs, and CheckStyle.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/checksPublishResults.md#2025-04-16_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\nchecksPublishResults archive: true, pmd: true, cpd: true, findbugs: true, checkstyle: true\n```\n\n----------------------------------------\n\nTITLE: Multi-Container Pod Execution\nDESCRIPTION: Demonstrates execution across multiple containers in a pod using Maven and CF CLI images with container switching.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/dockerExecuteOnKubernetes.md#2025-04-16_snippet_2\n\nLANGUAGE: groovy\nCODE:\n```\ndockerExecuteOnKubernetes(script: script, containerMap: ['maven:3.5-jdk-8-alpine': 'maven', 'ppiper/cf-cli:6': 'cfcli']){\n    container('maven'){\n        sh \"mvn clean install\"\n    }\n    container('cfcli'){\n        sh \"cf plugins\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Kaniko Build in Jenkins Pipeline\nDESCRIPTION: Basic example showing how to invoke the Kaniko build step within a Jenkins pipeline. The step uses the current script context for execution.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/kanikoExecute.md#2025-04-16_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nkanikoExecute script:this\n```\n\n----------------------------------------\n\nTITLE: Configuring abapEnvironmentCreateTag in config.yml (YAML)\nDESCRIPTION: Shows how to configure the abapEnvironmentCreateTag step in the config.yml file, providing host and credentials directly.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/abapEnvironmentCreateTag.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  abapEnvironmentCreateTag:\n    repositoryName: '/DMO/GIT_REPOSITORY'\n    commitID: 'cd87a3c'\n    tagName: 'myTag'\n    tagDescription: 'Created via Jenkins'\n    abapCredentialsId: 'abapCredentialsId'\n    host: '1234-abcd-5678-efgh-ijk.abap.eu10.hana.ondemand.com'\n```\n\n----------------------------------------\n\nTITLE: Executing Jenkins Pipeline from External Repository\nDESCRIPTION: Example showing how to execute a Jenkins pipeline from an external Git repository. Demonstrates specifying the repository URL, branch, Jenkinsfile path, and credentials.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/pipelineExecute.md#2025-04-16_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\npipelineExecute repoUrl: \"https://github.com/MyOrg/MyPipelineRepo.git\", branch: 'feature1', path: 'path/to/Jenkinsfile', credentialsId: 'MY_REPO_CREDENTIALS'\n```\n\n----------------------------------------\n\nTITLE: Configuring Integration Artifact Download in YAML\nDESCRIPTION: YAML configuration example showing how to specify API credentials, integration flow details, and download path for artifact downloads in a pipeline configuration file.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/integrationArtifactDownload.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  <...>\n  integrationArtifactDownload:\n    cpiApiServiceKeyCredentialsId: 'MY_API_SERVICE_KEY'\n    integrationFlowId: 'MY_INTEGRATION_FLOW_NAME'\n    integrationFlowVersion: 'MY_INTEGRATION_FLOW_VERSION'\n    downloadPath: MY_INTEGRATION_FLOW_DOWNLOAD_PATH\n```\n\n----------------------------------------\n\nTITLE: Configuring abapLandscapePortalUpdateAddOnProduct in config.yml\nDESCRIPTION: YAML configuration for the abapLandscapePortalUpdateAddOnProduct step, defining the credentials ID, ABAP system number, and add-on descriptor information.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/abapLandscapePortalUpdateAddOnProduct.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  abapLandscapePortalUpdateAddOnProduct:\n    landscapePortalAPICredentialsId: 'landscapePortalAPICredentialsId'\n    abapSystemNumber: 'abapSystemNumber'\n    addonDescriptorFileName: 'addon.yml'\n    addonDescriptor: 'addonDescriptor'\n```\n\n----------------------------------------\n\nTITLE: Pipeline Configuration for SAP Solution Manager Integration\nDESCRIPTION: YAML configuration file specifying endpoints, credentials and system parameters required for the pipeline to interact with SAP Solution Manager and perform MTA builds.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/scenarios/changeManagement.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n#Steps Specific Configuration\ngeneral:\n  changeManagement:\n    endpoint: 'https://<backend-system>/sap/opu/odata/sap/AI_CRM_GW_CM_CI_SRV'\n    credentialsId: 'CM'\n    type: 'SOLMAN'\nsteps:\n  mtaBuild:\n    buildTarget: 'NEO'\n  transportRequestCreate:\n    developmentSystemId: '<value for developmentSystemId>'\n  transportRequestUploadSOLMAN:\n    applicationId: 'HCP'\n```\n\n----------------------------------------\n\nTITLE: Configuring abapEnvironmentAssembleConfirm with Cloud Foundry Authentication (YAML)\nDESCRIPTION: Example configuration in config.yml for the abapEnvironmentAssembleConfirm step using Cloud Foundry authentication to access the ABAP environment through a service key.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/abapEnvironmentAssembleConfirm.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  abapEnvironmentAssembleConfirm:\n    abapCredentialsId: 'cfCredentialsId',\n    cfApiEndpoint : 'https://test.server.com',\n    cfOrg : 'cfOrg',\n    cfSpace: 'cfSpace',\n    cfServiceInstance: 'myServiceInstance',\n    cfServiceKeyName: 'myServiceKey',\n```\n\n----------------------------------------\n\nTITLE: Executing WhiteSource Scan in Jenkins Pipeline (Groovy)\nDESCRIPTION: This snippet demonstrates how to execute a WhiteSource scan in a Jenkins pipeline using the whitesourceExecuteScan step. It specifies the build tool, product name, and necessary credentials for authentication.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/whitesourceExecuteScan.md#2025-04-16_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nwhitesourceExecuteScan script: this, buildTool: 'pip', productName: 'My Whitesource Product', userTokenCredentialsId: 'companyAdminToken', orgAdminUserTokenCredentialsId: 'orgAdminToken', orgToken: 'myWhitesourceOrganizationToken'\n```\n\n----------------------------------------\n\nTITLE: Jenkins Pipeline Configuration for Selenium Tests\nDESCRIPTION: Jenkins pipeline configuration using seleniumExecuteTests step to run WebDriverIO tests. Includes git checkout and npm installation steps.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/seleniumExecuteTests.md#2025-04-16_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nseleniumExecuteTests (script: this) {\n    git url: 'https://github.com/xxxxx/WebDriverIOTest.git'\n    sh '''npm install\n        node index.js'''\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Gauge Tests in Jenkins Pipeline\nDESCRIPTION: Example shows how to execute Gauge tests within a Jenkins pipeline by calling the gaugeExecuteTests step with required parameters.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/gaugeExecuteTests.md#2025-04-16_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\ngaugeExecuteTests script: this, testServerUrl: 'http://test.url'\n```\n\n----------------------------------------\n\nTITLE: Configuring Post Stage for SAP BTP ABAP Environment System Deletion in YAML\nDESCRIPTION: YAML configuration example for the Post stage that defines CloudFoundry connection parameters and deletion settings. It specifies API endpoint, organization, space, credentials, service instance name, and enables manual confirmation before system deletion.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/pipelines/abapEnvironment/stages/post.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ngeneral:\n  cfApiEndpoint: 'https://api.cf.sap.hana.ondemand.com'\n  cfOrg: 'myOrg'\n  cfSpace: 'mySpace'\n  cfCredentialsId: 'cfAuthentification'\n  cfServiceInstance: 'abap_system'\nstages:\n  Post:\n    confirmDeletion: true\n    cfDeleteServiceKeys: true\n```\n\n----------------------------------------\n\nTITLE: Implementing Slack Notifications in Jenkins Pipeline (Groovy)\nDESCRIPTION: This code snippet demonstrates how to use the slackSendNotification step in a Jenkins pipeline. It shows the basic structure of a pipeline with a build stage and a post-build action that sends a Slack notification.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/slackSendNotification.md#2025-04-16_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\npipeline {\n  agent any\n  stages {\n    stage('Build') {\n      steps {\n        echo \"do something\"\n      }\n    }\n  }\n  post {\n    always {\n      slackSendNotification script: this\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing GitHub Release with Jenkins Pipeline\nDESCRIPTION: Example showing how to use the githubPublishRelease pipeline step to create a GitHub release with a custom header message in the release body.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/githubPublishRelease.md#2025-04-16_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\ngithubPublishRelease script: this, releaseBodyHeader: \"**This is the latest success!**<br />\"\n```\n\n----------------------------------------\n\nTITLE: Configuring ATC System Parameters in JSON\nDESCRIPTION: JSON configuration for ATC system settings, defining check variant, finding handling rules, and other parameters for the ATC run.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/pipelines/abapEnvironment/stages/test.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"conf_name\": \"myATCSystemConfigurationName\",\n  \"checkvariant\": \"SAP_CLOUD_PLATFORM_ATC_DEFAULT\",\n  \"block_findings\": \"0\",\n  \"inform_findings\": \"1\",\n  \"is_default\": false,\n  \"is_proxy_variant\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Executing apiProxyUpload in Jenkinsfile (Groovy)\nDESCRIPTION: This snippet demonstrates how to use the apiProxyUpload step within a Jenkinsfile. It uses the 'script' parameter to reference the current context.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/apiProxyUpload.md#2025-04-16_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\napiProxyUpload script: this\n```\n\n----------------------------------------\n\nTITLE: Custom Exception Handling for Change Status Check\nDESCRIPTION: Implementation of isChangeInDevelopment with custom exception handling by setting failIfStatusIsNotInDevelopment parameter to false.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/isChangeInDevelopment.md#2025-04-16_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\n// pipeline script\n  isChangeInDevelopment( script: this, failIfStatusIsNotInDevelopment: false )\n\n  if(commonPipelineEnvironment.getValue( 'isChangeInDevelopment' ) {\n    ...\n  }\n```\n\n----------------------------------------\n\nTITLE: Direct Authentication Configuration for ABAP Environment Build\nDESCRIPTION: YAML configuration for the abapEnvironmentBuild step using direct authentication with host and credentials. This approach is suitable for both SAP BTP, ABAP environment and On-Premise systems.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/abapEnvironmentBuild.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nstages:\n  MyPhase:\n    abapCredentialsId: 'abapCredentialsId',\n    host: 'https://myABAPendpoint.com',\n```\n\n----------------------------------------\n\nTITLE: Deleting Cloud Foundry Service using Jenkins Pipeline in Groovy\nDESCRIPTION: This snippet demonstrates how to use the cloudFoundryDeleteService step in a Jenkins pipeline to delete a Cloud Foundry service. It specifies the API endpoint, organization, space, service instance, credentials, and an option to delete associated service keys.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/cloudFoundryDeleteService.md#2025-04-16_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\ncloudFoundryDeleteService(\n    cfApiEndpoint: 'https://test.server.com',\n    cfOrg: 'cforg',\n    cfSpace: 'cfspace',\n    cfServiceInstance: 'cfserviceInstance',\n    cfCredentialsId: 'cfcredentialsId',\n    cfDeleteServiceKeys: true,\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Registry URL in Pipeline Config\nDESCRIPTION: This snippet shows how to configure an internal Docker registry URL in the .pipeline/config.yml file to avoid Docker Hub rate limits. It sets a custom registry URL for the dockerExecute step.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/infrastructure/docker-rate-limit.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  dockerExecute:\n    dockerRegistryUrl: 'https://my.internal.registry:1234'\n```\n\n----------------------------------------\n\nTITLE: Executing Karma Tests in Jenkins Pipeline using karmaExecuteTests\nDESCRIPTION: This snippet demonstrates how to use the karmaExecuteTests step in a Jenkins pipeline to run Karma tests for multiple modules. It specifies the script context and an array of module paths to be tested.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/karmaExecuteTests.md#2025-04-16_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nkarmaExecuteTests script: this, modules: ['./shoppinglist', './catalog']\n```\n\n----------------------------------------\n\nTITLE: CNB Build with Custom Buildpacks in Jenkins Pipeline (Groovy)\nDESCRIPTION: This example demonstrates how to use the cnbBuild step with user-provided buildpacks. It specifies a list of custom buildpacks to be used in the build process.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/cnbBuild.md#2025-04-16_snippet_2\n\nLANGUAGE: groovy\nCODE:\n```\ncnbBuild(\n    script: this,\n    dockerConfigJsonCredentialsId: 'DOCKER_REGISTRY_CREDS',\n    containerImageName: 'images/example',\n    containerImageTag: 'v0.0.1',\n    containerRegistryUrl: 'gcr.io',\n    buildpacks: ['gcr.io/paketo-buildpacks/nodejs', 'paketo-community/build-plan']\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring ATC Check for Packages and Software Components (YAML)\nDESCRIPTION: Example atcconfig.yml file specifying both packages and software components to be checked in an ATC run.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/abapEnvironmentRunATCCheck.md#2025-04-16_snippet_4\n\nLANGUAGE: YAML\nCODE:\n```\nobjectset:\n  softwarecomponents:\n    - name: TestComponent\n    - name: TestComponent2  \n  packages:\n    - name: TestPackage\n  packagetrees:\n    - name: TestPackageWithSubpackages\n```\n\n----------------------------------------\n\nTITLE: Implementing pipelineRestartSteps in Jenkins Pipeline (Groovy)\nDESCRIPTION: This snippet demonstrates how to use the pipelineRestartSteps function in a Jenkins pipeline. It wraps pipeline steps within a node block, allowing for step restart functionality. The script parameter is set to 'this' to reference the current pipeline script.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/pipelineRestartSteps.md#2025-04-16_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\npipelineRestartSteps (script: this) {\n  node {\n    //your steps ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Pipeline Data Writing in Groovy\nDESCRIPTION: Example of writing data to InfluxDB from a Jenkins pipeline using the influxWriteData step.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/influxWriteData.md#2025-04-16_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\ninfluxWriteData script: this\n```\n\n----------------------------------------\n\nTITLE: Manifest Variable Substitution with Direct Variable Values\nDESCRIPTION: Example demonstrating how to specify variables directly in the step configuration, similar to cf push --var command.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/cfManifestSubstituteVariables.md#2025-04-16_snippet_2\n\nLANGUAGE: groovy\nCODE:\n```\ncfManifestSubstituteVariables (\n  script: this,\n  manifestFile: \"manifest.yml\",\n  manifestVariablesFiles: [\"manifest-variables.yml\"],\n  manifestVariables: [[key1 : value1], [key2 : value2]]\n)\n```\n\n----------------------------------------\n\nTITLE: Cloud Foundry Service Manifest for ABAP Environment (YAML)\nDESCRIPTION: This YAML manifest file defines the configuration for creating an ABAP Environment service instance on SAP BTP Cloud Foundry. It specifies the service name, broker, plan, and various ABAP system parameters.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/abapEnvironmentCreateSystem.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n---\ncreate-services:\n- name:   \"H02_Q_system\"\n  broker: \"abap\"\n  plan:   \"standard\"\n  parameters: \"{ \\\"admin_email\\\" : \\\"user@example.com\\\", \\\"description\\\" : \\\"ABAP Environment Q System\\\", \\\"is_development_allowed\\\" : true, \\\"sapsystemname\\\" : \\\"H02\\\", \\\"size_of_persistence\\\" : 4, \\\"size_of_runtime\\\" : 1 }\"\n```\n\n----------------------------------------\n\nTITLE: Configuring gCTS Deployment in YAML\nDESCRIPTION: Example of configuring gCTS deployment parameters in a YAML configuration file. Demonstrates the same deployment options as the Jenkinsfile but in YAML format, typically used in .pipeline/config.yaml.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/gctsDeploy.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  <...>\n  gctsDeploy:\n    host: 'https://abap.server.com:port'\n    client: '000'\n    abapCredentialsId: 'ABAPUserPasswordCredentialsId'\n    repository: 'myrepo'\n    remoteRepositoryURL: \"https://remote.repository.url.com\"\n    role: 'SOURCE'\n    vSID: 'ABC'\n    branch: 'feature2'\n    commit: '0c9d330'\n    scope: 'CRNTCOMMIT'\n    rollback: false\n    configuration:\n        VCS_AUTOMATIC_PULL: \"FALSE\"\n        VCS_AUTOMATIC_PUSH: \"FALSE\"\n        CLIENT_VCS_LOGLVL: \"debug\"\n    queryparameters:\n        saml2: \"disabled\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Method in Jenkins Library Script (Groovy)\nDESCRIPTION: A placeholder for showcasing how to implement and use a method in a Jenkins library script. The example would illustrate the correct syntax and usage of the method, including any parameters and return values.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/template/script.md#2025-04-16_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\n```groovy\n\n```\n```\n\n----------------------------------------\n\nTITLE: Executing Gatling Tests in Jenkins Pipeline\nDESCRIPTION: Example showing how to execute Gatling performance tests using the gatlingExecuteTests step in a Jenkins pipeline. The step requires specifying the script context and the path to the pom.xml file containing the Gatling test configuration.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/gatlingExecuteTests.md#2025-04-16_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\ngatlingExecuteTests script: this, pomPath: 'performance-tests/pom.xml'\n```\n\n----------------------------------------\n\nTITLE: Sidecar Container Setup with Selenium in Jenkins Pipeline\nDESCRIPTION: Complex example showing how to configure dockerExecute with a sidecar container for Selenium testing, including port mappings and workspace configuration.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/dockerExecute.md#2025-04-16_snippet_3\n\nLANGUAGE: groovy\nCODE:\n```\ndockerExecute(\n        script: script,\n        containerPortMappings: [containerPortMappings:'selenium/standalone-chrome':[containerPort: 4444, hostPort: 4444]],\n        dockerImage: 'node:8-stretch',\n        dockerName: 'node',\n        dockerWorkspace: '/home/node',\n        sidecarImage: 'selenium/standalone-chrome',\n        sidecarName: 'selenium',\n) {\n    git url: 'https://github.com/XXXXX/WebDriverIOTest.git'\n    sh '''npm install\n          node index.js\n    '''\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Docker Image for npmExecute Step\nDESCRIPTION: This YAML configuration snippet demonstrates how to specify a custom Docker image for the npmExecute step in a Piper pipeline. This can be used to resolve user permission issues with the default Node.js image.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/infrastructure/customjenkins.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n  npmExecute:\n    dockerImage: 'my-node:8-stretch'\n```\n\n----------------------------------------\n\nTITLE: Advanced Maven Execution with Evaluation in Jenkins Pipeline\nDESCRIPTION: This example shows the correct usage of 'goals', 'defines', and 'flags' parameters in mavenExecute step for version v1.24.0 and newer. It demonstrates how to use the Maven Help Plugin to evaluate an expression.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/mavenExecute.md#2025-04-16_snippet_2\n\nLANGUAGE: groovy\nCODE:\n```\nmavenExecute(\n    script: script,\n    goals: ['org.apache.maven.plugins:maven-help-plugin:3.1.0:evaluate'],\n    defines: [\"-Dexpression=$pomPathExpression\", \"-DforceStdout\", \"-q\"],\n    returnStdout: true\n)\n```\n\n----------------------------------------\n\nTITLE: Basic Bats Test Execution in Jenkins Pipeline\nDESCRIPTION: Example showing how to execute Bats tests and publish the results using JUnit format. The tests are executed using the script context and results are archived with a specific pattern match.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/batsExecuteTests.md#2025-04-16_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nbatsExecuteTests script:this\ntestsPublishResults junit: [pattern: '**/Test-*.xml', archive: true]\n```\n\n----------------------------------------\n\nTITLE: Defining repositories in repositories.yml (YAML)\nDESCRIPTION: Example of repositories.yml file content, specifying multiple repositories with branches, commit IDs, and tags.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/abapEnvironmentPullGitRepo.md#2025-04-16_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\nrepositories:\n- name: '/DMO/GIT_REPOSITORY'\n  branch: 'main'\n- name: '/DMO/GIT_REPO_COMMIT'\n  branch: 'feature'\n  commitID: 'cd87a3cac2bc946b7629580e58598c3db56a26f8'\n- name: '/DMO/GIT_REPO_TAG'\n  branch: 'realease'\n  tag: 'myTag'\n```\n\n----------------------------------------\n\nTITLE: Custom Pipeline Implementation for Multiple Projects in Jenkinsfile\nDESCRIPTION: Example of a Jenkinsfile that imports both the Piper library and a custom pipeline library. This approach is used when sharing a modified pipeline among multiple projects through a separate shared library.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/extensibility.md#2025-04-16_snippet_3\n\nLANGUAGE: groovy\nCODE:\n```\n@Library(['piper-lib-os','my-own-pipeline']) _\n\nmyCustomPipeline script: this\n```\n\n----------------------------------------\n\nTITLE: Calling abapAddonAssemblyKitRegisterPackages in Jenkinsfile\nDESCRIPTION: The simplest way to call the step in a Jenkinsfile when using configuration from config.yml. This requires proper configuration in the config.yml file.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/abapAddonAssemblyKitRegisterPackages.md#2025-04-16_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nabapAddonAssemblyKitRegisterPackages script: this\n```\n\n----------------------------------------\n\nTITLE: Basic Variable Substitution in Cloud Foundry Manifest\nDESCRIPTION: Basic usage of cfManifestSubstituteVariables step showing all available parameters including manifest file path, variables files, and direct variable declarations.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/cfManifestSubstituteVariables.md#2025-04-16_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\ncfManifestSubstituteVariables (\n  script: this,\n  manifestFile: \"path/to/manifest.yml\",                      //optional, default: manifest.yml\n  manifestVariablesFiles: [\"path/to/manifest-variables.yml\"] //optional, default: ['manifest-variables.yml']\n  manifestVariables: [[key : value], [key : value]]          //optional, default: []\n)\n```\n\n----------------------------------------\n\nTITLE: Comprehensive YAML Configuration for AUnit Test with Options\nDESCRIPTION: An extended AUnit configuration example that includes test options like risk level, duration, and scope settings along with the software component to test.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/abapEnvironmentRunAUnitTest.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: My AUnit run\ncontext: My unit tests\noptions:\n  measurements: none\n  scope:\n    ownTests: true\n    foreignTests: true\n  riskLevel:\n    harmless: true\n    dangerous: true\n    critical: true\n  duration:\n    short: true\n    medium: true\n    long: true\nobjectset:\n  softwarecomponents:\n    - name: Z_TESTSC\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Defaults for Jenkins Pipeline in Groovy\nDESCRIPTION: This snippet demonstrates how to use a custom configuration file from a shared library in a Jenkins pipeline. It includes loading the piper library and a custom library, then preparing default values using a custom configuration file.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/transportRequestRelease.md#2025-04-16_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\n@Library('piper-lib-os@master') _\n\n// the shared lib containing the additional configuration\n// needs to be configured in Jenkins\n@Library('foo@master') __\n\n// inside the shared lib denoted by 'foo' the additional configuration file\n// needs to be located under 'resources' ('resoures/myConfig.yml')\nprepareDefaultValues script: this,\n                             customDefaults: 'myConfig.yml'\n```\n\n----------------------------------------\n\nTITLE: Publishing JUnit and JaCoCo Test Results in Jenkins Pipeline\nDESCRIPTION: Example showing how to publish JUnit test results with result updates and archiving, along with JaCoCo coverage reports archiving.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/testsPublishResults.md#2025-04-16_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\ntestsPublishResults(\n  junit: [updateResults: true, archive: true],\n  jacoco: [archive: true]\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring gctsCloneRepository Step in YAML\nDESCRIPTION: This snippet shows how to configure the gctsCloneRepository step in a YAML configuration file. It includes the same parameters as the Groovy example, specifying the ABAP server details, client, credentials, and repository name.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/gctsCloneRepository.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  <...>\n  gctsCloneRepository:\n    host: 'https://abap.server.com:port'\n    client: '000'\n    abapCredentialsId: 'ABAPUserPasswordCredentialsId'\n    repository: 'myrepo'\n```\n\n----------------------------------------\n\nTITLE: Executing Container Structure Tests in Jenkins Pipeline\nDESCRIPTION: This code snippet demonstrates how to use the containerExecuteStructureTests step in a Jenkins pipeline script. It specifies the script context, test configuration file, and the Docker image to be tested.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/containerExecuteStructureTests.md#2025-04-16_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\ncontainerExecuteStructureTests(\n  script: this,\n  testConfiguration: 'config.yml',\n  testImage: 'node:latest'\n)\n```\n\n----------------------------------------\n\nTITLE: Minimal YAML Configuration for AUnit Test on Package\nDESCRIPTION: A minimal AUnit configuration file example that specifies an ABAP package to be tested. This approach is useful when you want to focus testing on specific packages rather than entire software components.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/abapEnvironmentRunAUnitTest.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: My AUnit run\ncontext: My unit tests\nobjectset:\n  packages:\n    - name: Z_TEST_PACKAGE\n```\n\n----------------------------------------\n\nTITLE: Configuring SAPUI5/Fiori Pipeline for Neo Environment Deployment\nDESCRIPTION: This optional YAML configuration demonstrates how to set up the pipeline for deploying to the SAP BTP Neo environment. It specifies the mtaBuild platform as NEO and includes neoDeploy step configuration.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/scenarios/ui5-sap-cp/Readme.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  mtaBuild:\n    platform: 'NEO'\n  neoDeploy:\n    neo:\n      credentialsId: 'NEO-jenkins-credentials-id'\n      account: 'your-account-id'\n      host: 'hana.ondemand.com'\n```\n\n----------------------------------------\n\nTITLE: Newman Execution with Test Results Publishing\nDESCRIPTION: Complete example showing Newman execution combined with test results publishing.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/newmanExecute.md#2025-04-16_snippet_4\n\nLANGUAGE: groovy\nCODE:\n```\nnewmanExecute script: this, failOnError: false\ntestsPublishResults script: this, junit: [pattern: '**/newman/TEST-*.xml']\n```\n\n----------------------------------------\n\nTITLE: Configuring Vault Skip Settings\nDESCRIPTION: YAML configuration demonstrating how to skip Vault secret lookup for specific steps.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/infrastructure/vault.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n...\nsteps:\n  executeBuild:\n    skipVault: true   # Skip Vault Secret Lookup for this step\n```\n\n----------------------------------------\n\nTITLE: Simple Manifest Variable Substitution with Relative Paths\nDESCRIPTION: Example showing how to use relative paths for manifest and variables files, similar to cf push --vars-file command.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/cfManifestSubstituteVariables.md#2025-04-16_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\ncfManifestSubstituteVariables (\n  script: this,\n  manifestFile: \"manifest.yml\",\n  manifestVariablesFiles: [\"manifest-variables.yml\"]\n)\n```\n\n----------------------------------------\n\nTITLE: Executing abapEnvironmentPushATCSystemConfig via Cloud Foundry Service Key\nDESCRIPTION: Demonstrates how to trigger the abapEnvironmentPushATCSystemConfig step using a Cloud Foundry Service Key to access the ABAP system. This example includes Cloud Foundry configuration parameters.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/abapEnvironmentPushATCSystemConfig.md#2025-04-16_snippet_2\n\nLANGUAGE: Groovy\nCODE:\n```\nabapEnvironmentPushATCSystemConfig(\n    cfApiEndpoint : 'https://test.server.com',\n    cfOrg : 'cfOrg',\n    cfSpace: 'cfSpace',\n    cfServiceInstance: 'myServiceInstance',\n    cfServiceKeyName: 'myServiceKey',\n    abapCredentialsId: 'cfCredentialsId',\n    atcSystemConfigFilePath: 'atcSystemConfig.json',\n    script: this,\n)\n```\n\n----------------------------------------\n\nTITLE: CNB Build with Environment Variables in Jenkins Pipeline (Groovy)\nDESCRIPTION: This example shows how to use the cnbBuild step with custom build environment variables. It demonstrates setting a key-value pair as an environment variable for the build process.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/cnbBuild.md#2025-04-16_snippet_3\n\nLANGUAGE: groovy\nCODE:\n```\ncnbBuild(\n    script: this,\n    dockerConfigJsonCredentialsId: 'DOCKER_REGISTRY_CREDS',\n    containerImageName: 'images/example',\n    containerImageTag: 'v0.0.1',\n    containerRegistryUrl: 'gcr.io',\n    buildEnvVars: [\n        \"FOO\": \"BAR\"\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Accessing Configuration in Custom Groovy Scripts\nDESCRIPTION: This snippet demonstrates how to access configuration values in custom Groovy scripts using the commonPipelineEnvironment object. It shows how to retrieve the gitSshKeyCredentialsId from the general section of the configuration.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/configuration.md#2025-04-16_snippet_5\n\nLANGUAGE: groovy\nCODE:\n```\ncommonPipelineEnvironment.configuration.general.gitSshKeyCredentialsId\n```\n\n----------------------------------------\n\nTITLE: Complete Example of Transport Request Upload to SAP Solution Manager in Groovy\nDESCRIPTION: This code snippet provides a complete example of using the transportRequestUploadSOLMAN step. It includes all necessary parameters such as endpoint, applicationId, credentials, change document ID, transport request ID, file path, and additional client options.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/transportRequestUploadSOLMAN.md#2025-04-16_snippet_3\n\nLANGUAGE: groovy\nCODE:\n```\ntransportRequestUploadSOLMAN(\n  script: this,\n  endpoint: 'https://example.org/cm/solman/endpoint'\n  applicationId: 'ABC',\n  uploadCredentialsId: \"SOLMAN_CRED_ID\"\n  changeDocumentId: '1000001234',\n  transportRequestId: 'ABCD10005E',\n  filePath: '/path/file.ext',\n  cmClientOpts: '-Dkey=value'\n)\n```\n\n----------------------------------------\n\nTITLE: Sending Alert Notification Event in Jenkinsfile (Groovy)\nDESCRIPTION: This snippet demonstrates how to configure and use the ansSendEvent step in a Jenkinsfile to send a notification event. It includes various parameters such as event type, severity, category, and custom tags.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/ansSendEvent.md#2025-04-16_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nansSendEvent(\n  script: this,\n  ansServiceKeyCredentialsId: \"myANSCredential\",\n  eventType: \"errorEvent\",\n  severity: \"ERROR\",\n  category: \"EXCEPTION\",\n  subject: \"Something went wrong\",\n  body: \"The details of what went wrong\",\n  priority: 3,\n  tags: [\n    myTag: \"myValue\",\n    yourTag: \"yourValue\"\n  ],\n  resourceName: \"Test Pipeline\",\n  resourceType: \"My Pipeline\",\n  resourceInstance: \"myPipeline\",\n  resourceTags: [\n    myResourceTag: \"a value\"\n  ]\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring integrationArtifactUpload in YAML\nDESCRIPTION: This YAML configuration example shows how to set up the integrationArtifactUpload step in a pipeline configuration file. It includes various parameters such as credentials, IDs, names, and file paths necessary for the integration artifact upload process.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/integrationArtifactUpload.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  <...>\n  integrationArtifactUpload:\n    cpiApiServiceKeyCredentialsId: 'MY_API_SERVICE_KEY'\n    integrationFlowId: 'MY_INTEGRATION_FLOW_ID'\n    integrationFlowName: 'MY_INTEGRATION_FLOW_Name'\n    packageId: 'MY_INTEGRATION_Package_ID'\n    filePath: 'MY_INTEGRATION_FLOW_Artifact_Relative_Path'\n    downloadPath: /MY_INTEGRATION_FLOW_DOWNLOAD_PATH\n```\n\n----------------------------------------\n\nTITLE: CNB Build with Custom Builder in Jenkins Pipeline (Groovy)\nDESCRIPTION: This example shows how to use the cnbBuild step with a user-provided builder image. It specifies a custom Docker image for the builder in addition to the standard parameters.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/cnbBuild.md#2025-04-16_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\ncnbBuild(\n    script: this,\n    dockerConfigJsonCredentialsId: 'DOCKER_REGISTRY_CREDS',\n    dockerImage: 'paketobuildpacks/builder:base',\n    containerImageName: 'images/example',\n    containerImageTag: 'v0.0.1',\n    containerRegistryUrl: 'gcr.io'\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring integrationArtifactGetServiceEndpoint in YAML\nDESCRIPTION: This snippet shows how to configure the integrationArtifactGetServiceEndpoint step in a YAML configuration file. It includes setting the API service key credentials ID and the integration flow ID.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/integrationArtifactGetServiceEndpoint.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  <...>\n  integrationArtifactGetServiceEndpoint:\n    cpiApiServiceKeyCredentialsId: 'MY_API_SERVICE_KEY'\n    integrationFlowId: 'MY_INTEGRATION_FLOW_ID'\n```\n\n----------------------------------------\n\nTITLE: Calling abapAddonAssemblyKitCreateTargetVector in Jenkinsfile\nDESCRIPTION: Minimal implementation of the step in a Jenkinsfile when configuration is provided via config.yml. This passes the current script context to the step.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/abapAddonAssemblyKitCreateTargetVector.md#2025-04-16_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nabapAddonAssemblyKitCreateTargetVector script: this\n```\n\n----------------------------------------\n\nTITLE: Cloud Foundry Multiple Services Manifest\nDESCRIPTION: YAML manifest file defining multiple MongoDB services for creation in Cloud Foundry.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/cloudFoundryCreateService.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n---\ncreate-services:\n- name:   \"testDatabase1\"\n  broker: \"mongodb\"\n  plan:   \"v4.0-dev\"\n\n- name:   \"testDatabase2\"\n  broker: \"mongodb\"\n  plan:   \"v4.0-dev\"\n\n- name:   \"testDatabase3\"\n  broker: \"mongodb\"\n  plan:   \"v4.0-dev\"\n```\n\n----------------------------------------\n\nTITLE: Using Common Pipeline Environment in Groovy\nDESCRIPTION: This Groovy snippet demonstrates how to use the transportRequestReqIDFromGit step to obtain the transport request ID from Git commit messages and pass it to the transportRequestUploadRFC step via the commonPipelineEnvironment.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/transportRequestUploadRFC.md#2025-04-16_snippet_3\n\nLANGUAGE: groovy\nCODE:\n```\ntransportRequestReqIDFromGit( script: this )\ntransportRequestUploadRFC( script: this, ... )\n```\n\n----------------------------------------\n\nTITLE: Jenkins Pipeline Credential Handling for UIVeri5\nDESCRIPTION: Groovy pipeline script showing how to handle credentials securely when executing UIVeri5 tests in Jenkins.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/uiVeri5ExecuteTests.md#2025-04-16_snippet_2\n\nLANGUAGE: groovy\nCODE:\n```\nwithCredentials([usernamePassword(\n    credentialsId: 'MY_ACCEPTANCE_CREDENTIALS',\n    passwordVariable: 'password',\n    usernameVariable: 'username'\n)]) {\n    uiVeri5ExecuteTests script: this, runOptions: [\"--baseURL=NEW_BASE_URL\", \"--params.user=${username}\", \"--params.pass=${password}\", \"--seleniumAddress=http://localhost:4444/wd/hub\", \"./uiveri5/conf.js\"]\n}\n```\n\nLANGUAGE: groovy\nCODE:\n```\nwithCredentials([usernamePassword(\n    credentialsId: 'MY_ACCEPTANCE_CREDENTIALS',\n    passwordVariable: 'TEST_PASS',\n    usernameVariable: 'TEST_USER'\n)]) {\n    uiVeri5ExecuteTests script: this, runOptions: [\"--seleniumAddress=http://localhost:4444/wd/hub\", \"./uiveri5/conf.js\"]\n}\n```\n\nLANGUAGE: groovy\nCODE:\n```\nvoid call(Map params) {\n    // read username and password from the credential store\n    withCredentials([usernamePassword(\n        credentialsId: params.config.acceptanceCredentialsId,\n        passwordVariable: 'password',\n        usernameVariable: 'username'\n    )]) {\n        // store the result in the environment variables for executeUIVeri5Test\n        withEnv([\"TEST_USER=${username}\", \"TEST_PASS=${password}\"]) {\n            //execute original stage as defined in the template\n            params.originalStage()\n        }\n    }\n}\nreturn this\n```\n\n----------------------------------------\n\nTITLE: WebDriverIO Test Implementation\nDESCRIPTION: Sample test code that navigates to Google.com and retrieves the page title. Demonstrates basic WebDriverIO commands and error handling.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/seleniumExecuteTests.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// ToDo: add configuration from above\n\nwebdriverio\n    .remote(options)\n    .init()\n    .url('http://www.google.com')\n    .getTitle().then(function(title) {\n        console.log('Title was: ' + title);\n    })\n    .end()\n    .catch(function(err) {\n        console.log(err);\n    });\n```\n\n----------------------------------------\n\nTITLE: Configuring Pipeline with Git SSH Credentials\nDESCRIPTION: Extended pipeline configuration that includes both build tool specification and Git SSH credentials for authentication. Required for operations like pushing version information to GitHub.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/stages/introduction.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ngeneral:\n  buildTool: 'npm'\n  gitSshKeyCredentialsId: 'credentials-id-in-jenkins'\n```\n\n----------------------------------------\n\nTITLE: Creating Single Cloud Foundry Service with JSON Config\nDESCRIPTION: Creates a single Cloud Foundry service using inline JSON configuration and service tags. Uses credentials stored in Jenkins for authentication.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/cloudFoundryCreateService.md#2025-04-16_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\ncloudFoundryCreateService(\n    cfApiEndpoint : 'https://test.server.com',\n    cfOrg : 'cfOrg',\n    cfSpace: 'cfSpace',\n    cfCredentialsId: 'cfCredentialsId',\n    cfService:  'myService',\n    cfServiceInstanceName: 'myServiceInstanceName',\n    cfServicePlan: 'myPlan',\n    cfCreateServiceConfig: '{\\\"example\\\":\\\"value\\\",\\\"example\\\":\\\"value\\\"}',\n    cfServiceTags: 'list, of, tags',\n    script: this,\n)\n```\n\n----------------------------------------\n\nTITLE: Executing Integration Artifact Download in Jenkinsfile (Groovy)\nDESCRIPTION: Simple Groovy implementation for downloading integration artifacts using the script context in a Jenkinsfile.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/integrationArtifactDownload.md#2025-04-16_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nintegrationArtifactDownload script: this\n```\n\n----------------------------------------\n\nTITLE: Creating Transport Request for CTS in Groovy\nDESCRIPTION: This Groovy snippet shows how to create a transport request for SAP Change and Transport System (CTS) using the transportRequestCreate step. It specifies transport type, target system, description, and change management details.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/transportRequestCreate.md#2025-04-16_snippet_3\n\nLANGUAGE: groovy\nCODE:\n```\ndef transportRequestId = transportRequestCreate script:this,\n                                                transportType: 'W',\n                                                targetSystem: 'XYZ',\n                                                description: 'the description',\n                                                changeManagement: [\n                                                  type: 'CTS'\n                                                  endpoint: 'https://example.org/cm'\n                                                ]\n```\n\n----------------------------------------\n\nTITLE: Configuring apiProxyUpload in YAML\nDESCRIPTION: This example shows how to configure the apiProxyUpload step in a YAML configuration file (e.g., .pipeline/config.yaml). It specifies the API service key credentials ID and the file path for the API proxy ZIP file.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/apiProxyUpload.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  <...>\n  apiProxyUpload:\n    apimApiServiceKeyCredentialsId: 'MY_API_SERVICE_KEY'\n    filePath: MY_API_PROXY_ZIP_FILE_PATH\n```\n\n----------------------------------------\n\nTITLE: Configuring SAP Alert Notification Service with Piper\nDESCRIPTION: Configuration example showing how to set up the SAP Alert Notification service hook through custom defaults. This configuration is used to send pipeline logs to the Alert Notification service.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/configuration.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nhooks:\n  ans:\n    serviceKeyCredentialsId: 'my_ANS_Service_Key'\n```\n\n----------------------------------------\n\nTITLE: Creating Service Key with Inline JSON in Jenkinsfile\nDESCRIPTION: Example showing service key creation with an inline JSON string configuration. Note the escaped quotes in the JSON string when used directly in Jenkinsfile.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/cloudFoundryCreateServiceKey.md#2025-04-16_snippet_2\n\nLANGUAGE: groovy\nCODE:\n```\ncloudFoundryCreateServiceKey(\n  cfApiEndpoint: 'https://test.server.com',\n  cfCredentialsId: 'cfCredentialsId',\n  cfOrg: 'cfOrg',\n  cfSpace: 'cfSpace',\n  cfServiceInstance: 'myServiceInstance',\n  cfServiceKeyName: 'myServiceKey',\n  cfServiceKeyConfig: '{\\\"example\\\":\\\"value\\\",\\\"example\\\":\\\"value\\\"}',\n  script: this,\n)\n```\n\n----------------------------------------\n\nTITLE: Pushing Local Docker Image to Registry in Jenkins Pipeline\nDESCRIPTION: Example demonstrating how to push a locally built Docker image to a target registry. Requires Docker daemon on Jenkins node and configured registry credentials.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/containerPushToRegistry.md#2025-04-16_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\ncontainerPushToRegistry script: this,\n                        dockerCredentialsId: 'myTargetRegistryCredentials',\n                        dockerImage: 'path/to/myImageWith:tag',\n                        dockerRegistryUrl: 'https://my.target.docker.registry:50000'\n```\n\n----------------------------------------\n\nTITLE: Repository Scope Configuration in YAML\nDESCRIPTION: Example YAML configuration for repository-wide scope without commit specification.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/gctsExecuteABAPUnitTests.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  <...>\n  gctsExecuteABAPUnitTests:\n    host: 'https://abap.server.com:port'\n    client: '000'\n    abapCredentialsId: 'ABAPUserPasswordCredentialsId'\n    repository: 'myrepo'\n    scope: 'repository'\n    workspace: '/var/jenkins_home/workspace/myFirstPipeline'\n```\n\n----------------------------------------\n\nTITLE: Configuring Vault Pipeline Settings in YAML\nDESCRIPTION: Basic configuration for connecting a pipeline to Vault, including server URL, namespace, and path settings.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/infrastructure/vault.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ngeneral:\n  ...\n  vaultServerUrl: '<YOUR_VAULT_SERVER_URL>'\n  vaultNamespace: '<YOUR_NAMESPACE_NAME>' # if you are not using vault's namespace feature you can remove this line\n  vaultPath: 'kv/my-pipeline' # the path under which your jenkins secrets are stored\n  ...\n```\n\n----------------------------------------\n\nTITLE: Executing Transport Request Release for SOLMAN and CTS in Groovy\nDESCRIPTION: This Groovy snippet shows examples of how to use the transportRequestRelease step for both SOLMAN and CTS change management systems. It includes specifying change document IDs, transport request IDs, and change management configurations.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/transportRequestRelease.md#2025-04-16_snippet_3\n\nLANGUAGE: groovy\nCODE:\n```\n// SOLMAN\ntransportRequestRelease script:this,\n                        changeDocumentId: '001',\n                        transportRequestId: '001',\n                        changeManagement: [\n                          type: 'SOLMAN'\n                          endpoint: 'https://example.org/cm'\n                        ]\n// CTS\ntransportRequestRelease script:this,\n                        transportRequestId: '001',\n                        changeManagement: [\n                          type: 'CTS'\n                          endpoint: 'https://example.org/cm'\n                        ]\n```\n\n----------------------------------------\n\nTITLE: Executing integrationArtifactUpload in Jenkinsfile (Groovy)\nDESCRIPTION: This snippet demonstrates how to use the integrationArtifactUpload step in a Jenkinsfile. It uses the 'this' keyword to reference the current script context.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/integrationArtifactUpload.md#2025-04-16_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nintegrationArtifactUpload script: this\n```\n\n----------------------------------------\n\nTITLE: Creating Cloud Foundry Space using Jenkins Pipeline\nDESCRIPTION: Example shows how to create a custom space in Cloud Foundry using Jenkins pipeline step. The script authenticates using stored credentials and creates a new space in the specified organization.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/cloudFoundryCreateSpace.md#2025-04-16_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\ncloudFoundryCreateSpace(\n    cfApiEndpoint : 'https://test.server.com',\n    cfOrg : 'cfOrg',\n    cfSpace: 'cfSpace', //Name of the cf space to be created\n    cfCredentialsId: 'cfCredentialsId',\n    script: this,\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Integration Artifact Undeploy in YAML\nDESCRIPTION: Example YAML configuration for integrationArtifactUnDeploy step showing required parameters like API service key credentials and integration flow ID.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/integrationArtifactUnDeploy.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  <...>\n  integrationArtifactUnDeploy:\n    cpiApiServiceKeyCredentialsId: 'MY_API_SERVICE_KEY'\n    integrationFlowId: 'MY_INTEGRATION_FLOW_ID'\n```\n\n----------------------------------------\n\nTITLE: Pushing Docker Image Between Registries in Jenkins Pipeline\nDESCRIPTION: Example showing how to pull a Docker image from a source registry and push it to a target registry. Requires configured credentials and registry URLs.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/containerPushToRegistry.md#2025-04-16_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\ncontainerPushToRegistry script: this,\n                        dockerCredentialsId: 'myTargetRegistryCredentials',\n                        sourceRegistryUrl: 'https://mysourceRegistry.url',\n                        sourceImage: 'path/to/mySourceImageWith:tag',\n                        dockerRegistryUrl: 'https://my.target.docker.registry:50000'\n```\n\n----------------------------------------\n\nTITLE: Running ATC via Direct ABAP Endpoint in Jenkinsfile (Groovy)\nDESCRIPTION: Example of triggering an ATC run directly on the ABAP endpoint using credentials stored in Jenkins.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/abapEnvironmentRunATCCheck.md#2025-04-16_snippet_3\n\nLANGUAGE: Groovy\nCODE:\n```\nabapEnvironmentRunATCCheck(\n    abapCredentialsId: 'abapCredentialsId',\n    host: 'https://myABAPendpoint.com',\n    atcConfig: 'atcconfig.yml',\n    script: this,\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring abapAddonAssemblyKitRegisterPackages in config.yml\nDESCRIPTION: Example configuration in the config.yml file for the abapAddonAssemblyKitRegisterPackages step. This defines the credentials ID needed to access the AAKaaS service.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/abapAddonAssemblyKitRegisterPackages.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  abapAddonAssemblyKitRegisterPackages:\n    abapAddonAssemblyKitCredentialsId: 'abapAddonAssemblyKitCredentialsId'\n```\n\n----------------------------------------\n\nTITLE: Configuring SAP Cloud Transport Management Upload in YAML\nDESCRIPTION: This YAML configuration example for .pipeline/config.yml defines the steps and stages for uploading to SAP Cloud Transport Management. It includes credentials, node name, MTA path, custom description, and optional MTA extension descriptor mapping.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/scenarios/TMS_Extension.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  tmsUpload:\n    credentialsId: tms-secret-key\n    nodeName: PRE-PROD\n    mtaPath: com.piper.example.tms.mtar\n    customDescription: Custom-Transport-Description\n\n# uploading MTA extension descriptors, optional step\n    mtaVersion: 1.0.0\n    nodeExtDescriptorMapping:\n      PRE-PROD: 'scv_x_preprod.mtaext'\n      PROD: 'scv_x_prod.mtaext'\n\nstages:\n  Release:\n    tmsUpload: true\n```\n\n----------------------------------------\n\nTITLE: Basic Docker Container Execution in Jenkins Pipeline\nDESCRIPTION: Example showing how to execute Maven commands inside a Docker container using the dockerExecute step with a Maven JDK image.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/dockerExecute.md#2025-04-16_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\ndockerExecute(dockerImage: 'maven:3.5-jdk-7'){\n    sh \"mvn clean install\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring integrationArtifactDeploy in YAML\nDESCRIPTION: This snippet shows the YAML configuration for the integrationArtifactDeploy step. It specifies the credentials ID for the CPI API service key and the integration flow ID.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/integrationArtifactDeploy.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  <...>\n  integrationArtifactDeploy:\n    cpiApiServiceKeyCredentialsId: 'MY_API_SERVICE_KEY'\n    integrationFlowId: 'MY_INTEGRATION_FLOW_NAME'\n```\n\n----------------------------------------\n\nTITLE: Uploading Integration Artifact using Groovy in Jenkinsfile\nDESCRIPTION: Simple example showing how to use the integration artifact upload functionality in a Jenkinsfile using Groovy syntax.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/integrationArtifactResource.md#2025-04-16_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nintegrationArtifactUpload script: this\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Pod Container Execution in Jenkins Pipeline\nDESCRIPTION: Example demonstrating how to run Maven commands in a container within a Kubernetes pod using dockerExecute with script context.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/dockerExecute.md#2025-04-16_snippet_2\n\nLANGUAGE: groovy\nCODE:\n```\ndockerExecute(script: this, dockerImage: 'maven:3.5-jdk-7'){\n    sh \"mvn clean install\"\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Cloud Foundry Space using Jenkins Pipeline Step\nDESCRIPTION: This code snippet demonstrates how to use the cloudFoundryDeleteSpace step in a Jenkins pipeline to delete an existing space in Cloud Foundry. It specifies the API endpoint, organization, space name, and credentials ID for authentication.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/cloudFoundryDeleteSpace.md#2025-04-16_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\ncloudFoundryDeleteSpace(\n    cfApiEndpoint : 'https://test.server.com',\n    cfOrg : 'cfOrg',\n    cfSpace: 'cfSpace', //Name of the cf space to be deleted\n    cfCredentialsId: 'cfCredentialsId',\n    script: this,\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Service Key with Config File in Jenkinsfile\nDESCRIPTION: Example of creating a Cloud Foundry service key using a separate JSON configuration file. The step requires Cloud Foundry endpoint, credentials, organization, space, service instance and key name parameters.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/cloudFoundryCreateServiceKey.md#2025-04-16_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\ncloudFoundryCreateServiceKey(\n  cfApiEndpoint: 'https://test.server.com',\n  cfCredentialsId: 'cfCredentialsId',\n  cfOrg: 'cfOrg',\n  cfSpace: 'cfSpace',\n  cfServiceInstance: 'myServiceInstance',\n  cfServiceKeyName: 'myServiceKey',\n  cfServiceKeyConfig: 'serviceKeyConfig.json',\n  script: this,\n)\n```\n\n----------------------------------------\n\nTITLE: Executing ABAP Unit Tests in Jenkinsfile\nDESCRIPTION: Example configuration for executing ABAP Unit Tests in a Jenkinsfile using the gctsExecuteABAPUnitTests step with remote changed objects scope.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/gctsExecuteABAPUnitTests.md#2025-04-16_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\ngctsExecuteABAPUnitTests(\n  script: this,\n  host: 'https://abap.server.com:port',\n  client: '000',\n  abapCredentialsId: 'ABAPUserPasswordCredentialsId',\n  repository: 'myrepo',\n  scope: 'remoteChangedObjects',\n  commit: \"${env.GIT_COMMIT}\",\n  workspace: \"${WORKSPACE}\",\n  queryparameters: [saml2: 'disabled']\n\n  )\n```\n\n----------------------------------------\n\nTITLE: OData Upload Configuration\nDESCRIPTION: YAML configuration for OData-based transport request upload, specifying endpoints, credentials, and application details.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/scenarios/upload-to-transportrequest/Readme.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  transportRequestUploadCTS:\n    changeManagement:\n      endpoint: 'http://your.odata.endpoint/'\n      credentialsId: 'CTS'\n      clientOpts: ''\n      client: '001'\n    abapPackage: 'YOURPACK'\n    applicationName: 'YOURAPP'\n    applicationDescription: 'Your description'\n```\n\n----------------------------------------\n\nTITLE: Repository List Configuration\nDESCRIPTION: Example of repositories.yml file containing multiple repository and branch specifications\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/abapEnvironmentCheckoutBranch.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nrepositories:\n- name: '/DMO/GIT_REPOSITORY'\n  branch: 'master'\n- name: '/DMO/GIT_REPO'\n  branch: 'master'\n```\n\n----------------------------------------\n\nTITLE: RFC Upload Configuration\nDESCRIPTION: YAML configuration for RFC-based transport request upload, specifying endpoints, credentials, and application details.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/scenarios/upload-to-transportrequest/Readme.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  transportRequestUploadRFC:\n    changeManagement:\n      endpoint: 'https://your.rfc.endpoint.com/'\n      credentialsId: 'RFC'\n      instance: '01'\n      client: '001'\n    abapPackage: 'YOURPACK'\n    applicationName: 'YOURAPP'\n    applicationDescription: 'Your application description'\n    dockerImage: 'my/rfc-client'\n```\n\n----------------------------------------\n\nTITLE: Advanced YAML Configuration with Multi Property Set for AUnit Test\nDESCRIPTION: A comprehensive AUnit configuration using Multi Property Set with all available properties. This advanced configuration allows fine-grained control over which objects are included in the test run based on multiple criteria.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/abapEnvironmentRunAUnitTest.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: My AUnit run\ncontext: My unit tests\noptions:\n  measurements: none\n  scope:\n    ownTests: true\n    foreignTests: true\n  riskLevel:\n    harmless: true\n    dangerous: true\n    critical: true\n  duration:\n    short: true\n    medium: true\n    long: true\nobjectset:\n  type: multiPropertySet\n  multipropertyset:\n    owners:\n      - name: demoOwner\n    softwarecomponents:\n      - name: demoSoftwareComponent\n    versions:\n      - value: ACTIVE\n    packages:\n      - name: demoPackage\n    objectnamepatterns:\n      - value: 'ZCL_*'\n    languages:\n      - value: EN\n    sourcesystems:\n      - name: H01\n    objecttypes:\n      - name: CLAS\n    objecttypegroups:\n      - name: CLAS\n    releasestates:\n      - value: RELEASED\n    applicationcomponents:\n      - name: demoApplicationComponent\n    transportlayers:\n      - name: H01\n```\n\n----------------------------------------\n\nTITLE: Calling abapEnvironmentCreateSystem Step in Jenkinsfile (Groovy)\nDESCRIPTION: This snippet demonstrates how to call the abapEnvironmentCreateSystem step in a Jenkinsfile when the configuration is provided in the config.yml file. It requires minimal parameters in the Jenkinsfile itself.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/abapEnvironmentCreateSystem.md#2025-04-16_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nabapEnvironmentCreateSystem script: this\n```\n\n----------------------------------------\n\nTITLE: Creating Transport Request for SOLMAN in Groovy\nDESCRIPTION: This Groovy snippet demonstrates how to create a transport request for SAP Solution Manager (SOLMAN) using the transportRequestCreate step. It specifies the change document ID and the change management type and endpoint.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/transportRequestCreate.md#2025-04-16_snippet_2\n\nLANGUAGE: groovy\nCODE:\n```\ndef transportRequestId = transportRequestCreate script:this,\n                                                changeDocumentId: '001,'\n                                                changeManagement: [\n                                                  type: 'SOLMAN'\n                                                  endpoint: 'https://example.org/cm'\n                                                ]\n```\n\n----------------------------------------\n\nTITLE: Calling abapEnvironmentPullGitRepo with direct parameters in Jenkinsfile (Groovy)\nDESCRIPTION: Example of calling the step directly in Jenkinsfile with all parameters specified, including host and credentials.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/abapEnvironmentPullGitRepo.md#2025-04-16_snippet_5\n\nLANGUAGE: Groovy\nCODE:\n```\nabapEnvironmentPullGitRepo (\n  script: this,\n  repositoryName: '/DMO/GIT_REPOSITORY',\n  CommitID: 'abcd1234'\n  abapCredentialsId: 'abapCredentialsId',\n  host: '1234-abcd-5678-efgh-ijk.abap.eu10.hana.ondemand.com'\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Integration Tests Stage in config.yml\nDESCRIPTION: This YAML configuration specifies the settings for the Integration Tests stage, including Cloud Foundry parameters, ABAP system properties, and confirmation requirements. It defines essential parameters such as organization, space, service instance details, and ABAP system characteristics needed for creating a test environment.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/pipelines/abapEnvironment/stages/integrationTest.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ngeneral:\n  addonDescriptorFileName: 'addon.yml'\n  cfApiEndpoint: 'https://api.cf.sap.hana.ondemand.com'\n  cfCredentialsId: 'cfAuthentification'\nstages:\n  Integration Tests:\n    cfOrg: 'myOrgAti'\n    cfSpace: 'mySpaceAti'\n    cfServiceInstance: 'ati_system'\n    cfService: 'abap'\n    cfServicePlan: 'saas_oem'\n    abapSystemAdminEmail: 'user@example.com'\n    abapSystemDescription: 'Add-on Installation Test System'\n    abapSystemIsDevelopmentAllowed: false\n    abapSystemID: 'ATI'\n    abapSystemSizeOfPersistence: 4\n    abapSystemSizeOfRuntime: 1\n    includeAddon: true\n    confirmDeletion: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Pipeline Parameters for SAP Fiori App Build and Deploy\nDESCRIPTION: YAML configuration for the pipeline that specifies the build target for the MTA build and the necessary parameters for XS deployment, including API URL, organization name, and space.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/scenarios/xsa-deploy/Readme.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  mtaBuild:\n    buildTarget: 'XSA'\n  xsDeploy:\n    apiUrl: '<API_URL>' # e.g. 'https://example.org:30030'\n    # credentialsId: 'XS' omitted, 'XS' is the default\n    docker:\n      dockerImage: '<ID_OF_THE_DOCKER_IMAGE' # for legal reasons no docker image is provided.\n      # dockerPullImage: true # default: 'false'. Needs to be set to 'true' in case the image is served from a docker registry\n    loginOpts: '' # during setup for non-productive builds we might set here. '--skip-ssl-validation'\n    org: '<ORG_NAME>'\n    space: '<SPACE>'\n```\n\n----------------------------------------\n\nTITLE: Service Key Configuration JSON Structure\nDESCRIPTION: Example JSON configuration file structure for Cloud Foundry service key creation. Shows the basic format for defining service key properties.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/cloudFoundryCreateServiceKey.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"example\":\"value\",\n  \"example\":\"value\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Cloud Foundry-based ABAP Access in config.yml\nDESCRIPTION: YAML configuration for accessing the ABAP environment through Cloud Foundry, using service instance and service key parameters with appropriate credentials.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/abapEnvironmentAssemblePackages.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  abapEnvironmentAssemblePackages:\n    abapCredentialsId: 'cfCredentialsId',\n    cfApiEndpoint : 'https://test.server.com',\n    cfOrg : 'cfOrg',\n    cfSpace: 'cfSpace',\n    cfServiceInstance: 'myServiceInstance',\n    cfServiceKeyName: 'myServiceKey',\n```\n\n----------------------------------------\n\nTITLE: Configuring abapAddonAssemblyKitCreateTargetVector in config.yml\nDESCRIPTION: YAML configuration example for the abapAddonAssemblyKitCreateTargetVector step, specifying the credentials ID for accessing the ABAP Addon Assembly Kit as a Service.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/abapAddonAssemblyKitCreateTargetVector.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  abapAddonAssemblyKitCreateTargetVector:\n    abapAddonAssemblyKitCredentialsId: 'abapAddonAssemblyKitCredentialsId'\n```\n\n----------------------------------------\n\nTITLE: Configuring API Provider Upload in YAML Configuration File\nDESCRIPTION: YAML configuration example for the apiProviderUpload step. This configuration specifies credentials ID for the API service key and the file path to the API provider JSON file.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/apiProviderUpload.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  <...>\n  apiKeyValueMapUpload:\n    apimApiServiceKeyCredentialsId: 'MY_API_SERVICE_KEY'\n    filePath: MY_API_PROVIDER_JSON_FILE_PATH\n```\n\n----------------------------------------\n\nTITLE: Configuring abapEnvironmentRunATCCheck in config.yml (YAML)\nDESCRIPTION: Example configuration in config.yml for directly providing host and credentials for the Communication Arrangement.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/abapEnvironmentRunATCCheck.md#2025-04-16_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nsteps:\n  abapEnvironmentRunATCCheck:\n    abapCredentialsId: 'abapCredentialsId',\n    host: 'https://myABAPendpoint.com',\n    atcConfig: 'atcconfig.yml',\n```\n\n----------------------------------------\n\nTITLE: Defining Jenkins Pipeline Step Documentation Structure in Markdown\nDESCRIPTION: This snippet outlines the structure for documenting a Jenkins pipeline step. It uses placeholders that will be replaced with actual content during documentation generation.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/npmExecuteLint.md#2025-04-16_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# ${docGenStepName}\\n\\n## ${docGenDescription}\\n\\n## ${docGenParameters}\\n\\n## ${docGenConfiguration}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Stage Extension in Groovy for Jenkins Pipeline\nDESCRIPTION: A template for extending individual stages of the Jenkins pipeline. This extension accesses stage name, configuration, executes the original stage, and accesses pipeline script objects. It should be placed in a .pipeline/extensions/<StageName>.groovy file.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/extensibility.md#2025-04-16_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nvoid call(Map params) {\n  //access stage name\n  echo \"Start - Extension for stage: ${params.stageName}\"\n\n  //access config\n  echo \"Current stage config: ${params.config}\"\n\n  //execute original stage as defined in the template\n  params.originalStage()\n\n  //access overall pipeline script object\n  echo \"Branch: ${params.script.commonPipelineEnvironment.gitBranch}\"\n\n  echo \"End - Extension for stage: ${params.stageName}\"\n}\nreturn this\n```\n\n----------------------------------------\n\nTITLE: Configuring Newman Run Options with Golang Template\nDESCRIPTION: New recommended way to configure Newman run options using Golang template syntax.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/newmanExecute.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nrunOptions: [\"run\", \"{{.NewmanCollection}}\", \"--environment\", \"{{.Config.NewmanEnvironment}}\", \"--globals\", \"{{.Config.NewmanGlobals}}\", \"--reporters\", \"junit,html\", \"--reporter-junit-export\", \"target/newman/TEST-{{.CollectionDisplayName}}.xml\", \"--reporter-html-export\", \"target/newman/TEST-{{.CollectionDisplayName}}.html\"]\n```\n\n----------------------------------------\n\nTITLE: Executing Health Check in Jenkins Pipeline using SAP Library\nDESCRIPTION: This code snippet demonstrates how to use the healthExecuteCheck step in a Jenkins pipeline. It performs a health check on a specified test server URL.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/healthExecuteCheck.md#2025-04-16_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nhealthExecuteCheck testServerUrl: 'https://testserver.com'\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Registry Authentication Configuration\nDESCRIPTION: Shell script to generate a Docker config.json file containing registry authentication credentials. The script creates base64 encoded authentication credentials for accessing protected Docker registries.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/protecodeExecuteScan.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n#!/bin/bash\nauth=$(echo -n \"$USER:$PASSWORD\" | base64 -w0)\ncat <<EOF > config.json\n{\n    \"auths\": {\n        \"$REGISTRY\": {\n            \"auth\": \"$auth\"\n        }\n    }\n}\nEOF\n```\n\n----------------------------------------\n\nTITLE: Configuring xsDeploy Step in Jenkins Pipeline (YAML)\nDESCRIPTION: This YAML configuration example shows how to set up the xsDeploy step in a Jenkins pipeline configuration file. It includes the MTA path, credentials ID, API URL, space, and organization.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/xsDeploy.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  <...>\n  xsDeploy:\n    mtaPath: path/to/archiveFile.mtar\n    credentialsId: my-credentials-id\n    apiUrl: https://example.org/xs\n    space: mySpace\n    org: myOrg\n```\n\n----------------------------------------\n\nTITLE: Executing AWS S3 Upload in Jenkins Pipeline\nDESCRIPTION: Groovy code snippet demonstrating how to use the awsS3Upload step in a Jenkins pipeline. This example uploads a single file 'test.txt' using the specified AWS credentials.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/awsS3Upload.md#2025-04-16_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\nawsS3Upload(\n    script: this,\n    awsCredentialsId: \"AWS_Credentials\",\n    filePath: \"test.txt\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring AUnit Stage in YAML\nDESCRIPTION: YAML configuration for the AUnit test stage, defining Cloud Foundry connection parameters and referencing an AUnit configuration file.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/pipelines/abapEnvironment/stages/test.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ngeneral:\n  cfApiEndpoint: 'https://api.cf.sap.hana.ondemand.com'\n  cfOrg: 'myOrg'\n  cfSpace: 'mySpace'\n  cfCredentialsId: 'cfAuthentification'\n  cfServiceInstance: 'abap_system'\nstages:\n  AUnit:\n    aUnitConfig: 'aUnitConfig.yml'\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Vault Credential Paths\nDESCRIPTION: YAML configuration for fetching credentials from multiple Vault paths.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/infrastructure/vault.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ngeneral:\n  < your Vault configuration > # see above\n...\nsteps:\n  < piper go step >:\n    vaultCredentialPath: ['myStepCredentials1', 'myStepCredentials2']\n    vaultCredentialKeys: [['myAppId1', 'myAppSecret1'], ['myAppId2', 'myAppSecret2']]\n```\n\n----------------------------------------\n\nTITLE: Configuring ApiProviderList in YAML Pipeline Configuration\nDESCRIPTION: Detailed YAML configuration example for the ApiProviderList step. This shows how to set the API service key credential ID and various query parameters like Top, Skip, Filter, Orderby, Count, Search, Select, and Expand.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/apiProviderList.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  <...>\n  apiProviderList:\n    apimApiServiceKeyCredentialsId: 'MY_API_SERVICE_KEY'\n    Top: MY_API_PROVIDER_GET_N_ENTITIES\n    Skip: MY_API_PROVIDER_SKIP_N_ENTITIES\n    Filter: MY_API_PROVIDER_FILTER_BY_ENTITY_FIELD\n    Orderby: MY_API_PROVIDER_ORDER_BY_ENTITY_FIELD\n    Count: MY_API_PROVIDER_ORDER_ENTITY_COUNT\n    Search: MY_API_PROVIDER_SEARCH_BY_ENTITY_FIELD\n    Select: MY_API_PROVIDER_SELECT_BY_ENTITY_FIELD\n    Expand: MY_API_PROVIDER_EXPAND_BY_ENTITY_FIELD\n```\n\n----------------------------------------\n\nTITLE: Cloud Foundry Authentication Configuration for ABAP Environment Build\nDESCRIPTION: YAML configuration for the abapEnvironmentBuild step using Cloud Foundry authentication. This approach connects to the ABAP environment by authenticating against Cloud Foundry and reading service key details.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/abapEnvironmentBuild.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nstages:\n  MyPhase:\n    abapCredentialsId: 'cfCredentialsId',\n    cfApiEndpoint : 'https://test.server.com',\n    cfOrg : 'cfOrg',\n    cfSpace: 'cfSpace',\n    cfServiceInstance: 'myServiceInstance',\n    cfServiceKeyName: 'myServiceKey',\n```\n\n----------------------------------------\n\nTITLE: Configuring abapAddonAssemblyKitCheckPV in config.yml\nDESCRIPTION: This YAML configuration example shows how to set up the abapAddonAssemblyKitCheckPV step with credentials ID and addon descriptor file name in the config.yml file.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/abapAddonAssemblyKitCheckPV.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  abapAddonAssemblyKitCheckCVs:\n    abapAddonAssemblyKitCredentialsId: 'abapAddonAssemblyKitCredentialsId',\n    addonDescriptorFileName: 'addon.yml'\n```\n\n----------------------------------------\n\nTITLE: Publishing ESLint Results\nDESCRIPTION: Example demonstrating how to publish JavaScript static analysis results from ESLint with a custom result file pattern.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/checksPublishResults.md#2025-04-16_snippet_2\n\nLANGUAGE: groovy\nCODE:\n```\nchecksPublishResults archive: true, eslint: [pattern: '**/result-file-with-fancy-name.xml']\n```\n\n----------------------------------------\n\nTITLE: WebDriverIO Docker Configuration\nDESCRIPTION: Configuration setup for WebDriverIO when running tests in a local Docker environment. Specifies Selenium host and Chrome browser capabilities.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/seleniumExecuteTests.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar webdriverio = require('webdriverio');\nvar options = {\n    host: 'selenium',\n    port: 4444,\n    desiredCapabilities: {\n        browserName: 'chrome'\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring ATC Stage with System Configuration in YAML\nDESCRIPTION: YAML configuration for the ATC stage that includes both the ATC config file and a custom system configuration file path. This allows for customized ATC check settings.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/pipelines/abapEnvironment/stages/test.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ngeneral:\n  cfApiEndpoint: 'https://api.cf.sap.hana.ondemand.com'\n  cfOrg: 'myOrg'\n  cfSpace: 'mySpace'\n  cfCredentialsId: 'cfAuthentification'\n  cfServiceInstance: 'abap_system'\nstages:\n  ATC:\n    atcConfig: 'atcConfig.yml'\n    atcSystemConfigFilePath: 'atcSystemConfig.json'\n```\n\n----------------------------------------\n\nTITLE: Configuring Jenkins Credentials for Git Repository Access\nDESCRIPTION: This snippet describes how to store Git repository credentials in the Jenkins Credentials Store. It's necessary for accessing password-protected repositories used in the pipeline configuration.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/scenarios/abapEnvironmentTest.md#2025-04-16_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nManage Jenkins → Manage Credentials\n```\n\n----------------------------------------\n\nTITLE: Executing neoDeploy Step in Groovy Pipeline\nDESCRIPTION: Example of using the neoDeploy step in a Jenkins pipeline script to deploy an MTAR file to SAP BTP Neo environment.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/neoDeploy.md#2025-04-16_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nneoDeploy script: this, source: 'path/to/archiveFile.mtar', neo: [credentialsId: 'my-credentials-id', host: hana.example.org]\n```\n\n----------------------------------------\n\nTITLE: Azure Storage Credentials Configuration JSON\nDESCRIPTION: JSON structure for configuring Azure Storage credentials in Jenkins. Contains the account name, container name, and SAS token required for authentication.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/azureBlobUpload.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"account_name\": \"asdfg12345jhgfdwertz4et5\",\n  \"container_name\": \"abcde-lkjhg-qwertzui-fghj-9876-1234-7594rbnsmncx-xyz\",\n  \"sas_token\": \"sig=1234567890wertzuiopaYXCVBNMASDsdfghjkloi1234567890qwedf%1993-12-15opphehttpsqtgcshje1234-aqwe-1234-5678-t57894u875LH2%nv23\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using abapEnvironmentAssemblePackages in Jenkinsfile\nDESCRIPTION: Basic invocation of the abapEnvironmentAssemblePackages step in a Jenkins pipeline script, passing the current script context.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/abapEnvironmentAssemblePackages.md#2025-04-16_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nabapEnvironmentAssemblePackages script: this\n```\n\n----------------------------------------\n\nTITLE: Configuring apiProviderDownload in YAML\nDESCRIPTION: Example configuration for the apiProviderDownload step in a YAML configuration file. This example specifies the API service key credentials ID, provider name, and download path for the API Provider JSON file.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/apiProviderDownload.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  <...>\n  apiProviderDownload:\n    apimApiServiceKeyCredentialsId: 'MY_API_SERVICE_KEY'\n    apiProviderName: 'MY_API_PROVIDER_NAME'\n    downloadPath: MY_API_PROVIDER_JSON_FILE_DOWNLOAD_PATH\n```\n\n----------------------------------------\n\nTITLE: Configuring abapEnvironmentPullGitRepo with Cloud Foundry service key (YAML)\nDESCRIPTION: Configuration in config.yml file using Cloud Foundry service key for authentication and connection details.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/abapEnvironmentPullGitRepo.md#2025-04-16_snippet_4\n\nLANGUAGE: YAML\nCODE:\n```\nsteps:\n  abapEnvironmentPullGitRepo:\n    repositoryName: '/DMO/GIT_REPOSITORY'\n    cfCredentialsId: 'cfCredentialsId'\n    cfApiEndpoint: 'https://test.server.com'\n    cfOrg: 'cfOrg'\n    cfSpace: 'cfSpace'\n    cfServiceInstance: 'cfServiceInstance'\n    cfServiceKeyName: 'cfServiceKeyName'\n```\n\n----------------------------------------\n\nTITLE: Configuration in config.yml for abapAddonAssemblyKitReserveNextPackages\nDESCRIPTION: Example YAML configuration for the abapAddonAssemblyKitReserveNextPackages step, showing how to specify the credentials ID for accessing the ABAP Addon Assembly Kit as a Service.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/abapAddonAssemblyKitReserveNextPackages.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  abapAddonAssemblyKitReserveNextPackages:\n    abapAddonAssemblyKitCredentialsId: 'abapAddonAssemblyKitCredentialsId'\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration for Integration Artifact Status Check\nDESCRIPTION: Example configuration in YAML format for .pipeline/config.yaml file. Includes credentials ID for API service key, integration flow ID, and platform specification.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/integrationArtifactGetMplStatus.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  <...>\n  integrationArtifactGetMplStatus:\n    cpiApiServiceKeyCredentialsId: 'MY_API_SERVICE_KEY'\n    integrationFlowId: 'INTEGRATION_FLOW_ID'\n    platform: cf\n```\n\n----------------------------------------\n\nTITLE: ABAP Unit Test Only Configuration\nDESCRIPTION: Example YAML configuration for executing only ABAP Unit Tests without ATC checks.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/gctsExecuteABAPUnitTests.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  <...>\n  gctsExecuteABAPUnitTests:\n    host: 'https://abap.server.com:port'\n    client: '000'\n    abapCredentialsId: 'ABAPUserPasswordCredentialsId'\n    repository: 'myrepo'\n    atcCheck: false\n    scope: 'packages'\n    workspace: '/var/jenkins_home/workspace/myFirstPipeline'\n```\n\n----------------------------------------\n\nTITLE: Configuring ATC Checks in YAML\nDESCRIPTION: Creates an atcConfig.yml file to specify which software components should be checked during the ATC (ABAP Test Cockpit) run.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/pipelines/abapEnvironment/configuration.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nobjectSet:\n  softwarecomponent:\n    - name: \"/DMO/REPO\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Alert Notification Event in YAML\nDESCRIPTION: This snippet shows how to configure the ansSendEvent step in a YAML configuration file (e.g., .pipeline/config.yaml) for use in a Jenkins pipeline. It includes the same parameters as the Groovy example but in YAML format.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/ansSendEvent.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  <...>\n  ansSendEvent:\n    ansServiceKeyCredentialsId: \"myANSCredential\",\n    eventType: \"errorEvent\",\n    severity: \"ERROR\",\n    category: \"EXCEPTION\",\n    subject: \"Something went wrong\",\n    body: \"The details of what went wrong\",\n    priority: 3,\n    tags:\n      myTag: \"myValue\"\n      yourTag: \"yourValue\"\n    resourceName: \"Test Pipeline\",\n    resourceType: \"My Pipeline\",\n    resourceInstance: \"myPipeline\",\n    resourceTags:\n      myResourceTag: \"a value\"\n```\n\n----------------------------------------\n\nTITLE: Configuring API Proxy Download in YAML Pipeline Config\nDESCRIPTION: YAML configuration example showing API Proxy Download setup with credentials, proxy name, and download path parameters in a pipeline config file.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/apiProxyDownload.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  <...>\n  apiProxyDownload:\n    apimApiServiceKeyCredentialsId: 'MY_API_SERVICE_KEY'\n    apiProxyName: 'MY_API_PROXY_NAME'\n    downloadPath: MY_API_PROXY_DOWNLOAD_PATH\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Credentials JSON for Jenkins\nDESCRIPTION: Example JSON structure for storing AWS credentials as a Jenkins Secret Text. This includes the access key ID, secret access key, bucket name, and region.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/awsS3Upload.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"access_key_id\": \"FJNAKNCLAVLRNBLAVVBK\",\n  \"bucket\": \"vro-artloarj-ltnl-nnbv-ibnh-lbnlsnblltbn\",\n  \"secret_access_key\": \"123467895896646438486316436kmdlcvreanvjk\",\n  \"region\": \"eu-central-1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Jenkins Pipeline Library Reference\nDESCRIPTION: Example of how to reference a custom fork of the Piper library in a Jenkinsfile for testing pipeline or stage definition changes.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/DEVELOPMENT.md#2025-04-16_snippet_12\n\nLANGUAGE: groovy\nCODE:\n```\n@Library('my-piper-lib-os-fork@MyTest') _\n\nabapEnvironmentPipeline script: this\n```\n\n----------------------------------------\n\nTITLE: Configuring apiKeyValueMapDownload in YAML Configuration File\nDESCRIPTION: Example for configuring the apiKeyValueMapDownload step in a YAML pipeline configuration file. This example shows how to specify the API service key credentials, API proxy name, and download path for the key-value map.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/apiKeyValueMapDownload.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  <...>\n  apiKeyValueMapDownload:\n    apimApiServiceKeyCredentialsId: 'MY_API_SERVICE_KEY'\n    apiProxyName: 'MY_API_KEY_VALUE_MAP_NAME'\n    downloadPath: MY_API_KEY_VALUE_MAP_CSV_FILE_DOWNLOAD_PATH\n```\n\n----------------------------------------\n\nTITLE: Extending ATC Stage with Results Processing in Groovy\nDESCRIPTION: Groovy extension script for the ATC stage that adds post-processing of ATC results using the Warnings Next Generation Plugin to display issues in Jenkins.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/pipelines/abapEnvironment/stages/test.md#2025-04-16_snippet_4\n\nLANGUAGE: groovy\nCODE:\n```\nvoid call(Map params) {\n  //access stage name\n  echo \"Start - Extension for stage: ${params.stageName}\"\n\n  //access config\n  echo \"Current stage config: ${params.config}\"\n\n  //execute original stage as defined in the template\n  params.originalStage()\n\n  recordIssues tools: [checkStyle(pattern: '**/ATCResults.xml')], qualityGates: [[threshold: 1, type: 'TOTAL', unstable: true]]\n\n  echo \"End - Extension for stage: ${params.stageName}\"\n}\nreturn this\n```\n\n----------------------------------------\n\nTITLE: Inserting Step Description in Markdown\nDESCRIPTION: Placeholder for inserting the step description in the documentation using a variable.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/fortifyExecuteScan.md#2025-04-16_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n## ${docGenDescription}\n```\n\n----------------------------------------\n\nTITLE: Configuration in config.yml for abapAddonAssemblyKitReleasePackages\nDESCRIPTION: Example YAML configuration for the abapAddonAssemblyKitReleasePackages step showing how to provide the required credentials ID.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/abapAddonAssemblyKitReleasePackages.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  abapAddonAssemblyKitReleasePackages:\n    abapAddonAssemblyKitCredentialsId: 'abapAddonAssemblyKitCredentialsId'\n```\n\n----------------------------------------\n\nTITLE: Go Test Structure Pattern\nDESCRIPTION: Demonstrates recommended structure for writing Go tests using subtests with t.Run(). Shows how to organize test cases with initialization, test execution, and assertion phases.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/DEVELOPMENT.md#2025-04-16_snippet_8\n\nLANGUAGE: golang\nCODE:\n```\nfunc TestNameOfFunctionUnderTest(t *testing.T) {\n    t.Run(\"A description of the test case\", func(t *testing.T) {\n        // init\n        // test\n        // assert\n    })\n    t.Run(\"Another test case\", func(t *testing.T) {\n        // init\n        // test\n        // assert\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Malware Scan in Jenkins Pipeline (Groovy)\nDESCRIPTION: This snippet demonstrates how to call the malwareExecuteScan step in a Jenkins pipeline script. It uses the 'this' context to pass the current script instance.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/malwareExecuteScan.md#2025-04-16_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nmalwareExecuteScan script: this\n```\n\n----------------------------------------\n\nTITLE: Configuring AUnit Tests in YAML\nDESCRIPTION: Creates an aunitConfig.yml file to specify which software components should be tested during the AUnit (ABAP Unit) run.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/pipelines/abapEnvironment/configuration.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: My AUnit run\nobjectSet:\n  softwarecomponents:\n  - name: Z_TEST_SC\n  - name: Z_TEST_SC2\n```\n\n----------------------------------------\n\nTITLE: Configuring API Provider Upload in Jenkinsfile (Groovy)\nDESCRIPTION: Basic configuration example for the apiProviderUpload step in a Jenkinsfile. This snippet uses a simple one-line configuration that references the current script context.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/apiProviderUpload.md#2025-04-16_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\napiProviderUpload script: this\n```\n\n----------------------------------------\n\nTITLE: Configuring Change Management in YAML\nDESCRIPTION: This YAML snippet shows the structure for configuring change management settings. It includes general settings for change document labels, client options, credentials, and Git-related parameters.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/transportRequestRelease.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ngeneral:\n  changeManagement:\n    changeDocumentLabel: 'ChangeDocument\\s?:'\n    cmClientOpts: '-Djavax.net.ssl.trustStore=<path to truststore>'\n    credentialsId: 'CM'\n    type: 'SOLMAN'\n    endpoint: 'https://example.org/cm'\n    git:\n      from: 'HEAD~1'\n      to: 'HEAD'\n      format: '%b'\n```\n\n----------------------------------------\n\nTITLE: Service Key Configuration in Pipeline Config YAML\nDESCRIPTION: Example of service key creation configuration in .pipeline/config.yml file. Demonstrates parameter definition including unescaped JSON string configuration.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/cloudFoundryCreateServiceKey.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n    cloudFoundryCreateServiceKey:\n        cfApiEndpoint: 'https://test.server.com'\n        cfOrg: 'testOrg'\n        cfSpace: 'testSpace'\n        cfServiceInstance: 'testInstance'\n        cfServiceKeyName: 'myServiceKey'\n        cfServiceKeyConfig: '{\"example\":\"value\",\"example\":\"value\"}'\n        cfCredentialsId: 'cfCredentialsId'\n```\n\n----------------------------------------\n\nTITLE: UIVeri5 Test Configuration with Environment Variables\nDESCRIPTION: JavaScript configuration for UIVeri5 tests that reads credentials from environment variables and sets up authentication for CF XSUAA.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/uiVeri5ExecuteTests.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Read environment variables\nconst defaultParams = {\n    url: process.env.TARGET_SERVER_URL,\n    user: process.env.TEST_USER,\n    pass: process.env.TEST_PASS\n};\n\n// Resolve path to specs relative to the working directory\nconst path = require('path');\nconst specs = path.relative(process.cwd(), path.join(__dirname, '*.spec.js'));\n\n// export UIVeri5 config\nexports.config = {\n    profile: 'integration',\n    baseUrl: '${params.url}',\n    specs: specs,\n    params: defaultParams, // can be overridden via cli `--params.<key>=<value>`\n    auth: {\n        // set up authorization for CF XSUAA\n        'sapcloud-form': {\n            user: '${params.user}',\n            pass: '${params.pass}',\n            userFieldSelector: 'input[id=\"j_username\"]',\n            passFieldSelector: 'input[id=\"j_password\"]',\n            logonButtonSelector: 'button[type=\"submit\"]',\n            redirectUrl: /cp.portal\\/site/\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing integrationArtifactDeploy in Jenkinsfile (Groovy)\nDESCRIPTION: This snippet demonstrates how to use the integrationArtifactDeploy step in a Jenkinsfile. It calls the step with the current script context.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/integrationArtifactDeploy.md#2025-04-16_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nintegrationArtifactDeploy script: this\n```\n\n----------------------------------------\n\nTITLE: Uploading Transport Request with Parameterized IDs in Groovy\nDESCRIPTION: This snippet demonstrates how to use the transportRequestUploadSOLMAN step with parameterized change document and transport request IDs. It allows specifying the IDs at build time rather than hardcoding them in the pipeline.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/transportRequestUploadSOLMAN.md#2025-04-16_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\ntransportRequestUploadSOLMAN(\n    script: this,\n    changeDocumentId: ${CHANGE_DOCUMENT_ID},\n    transportRequestId: ${TRANSPORT_REQUEST_ID},\n    ...\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring RFC Client Docker Image in YAML\nDESCRIPTION: This YAML snippet shows how to configure a custom Docker image for the RFC client in the config.yml file. It specifies the Docker image to be used for the transportRequestUploadRFC step.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/transportRequestUploadRFC.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  transportRequestUploadRFC:\n    dockerImage: 'my/rfc-client'\n```\n\n----------------------------------------\n\nTITLE: Configuring abapEnvironmentCreateTag with Cloud Foundry Service Key (YAML)\nDESCRIPTION: Demonstrates how to configure the abapEnvironmentCreateTag step using a Cloud Foundry service key and a separate repositories configuration file.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/abapEnvironmentCreateTag.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  abapEnvironmentCreateTag:\n    repositories: 'repositories.yml'\n    generateTagForAddonProductVersion: true\n    generateTagForAddonComponentVersion: true\n    cfCredentialsId: 'cfCredentialsId'\n    cfApiEndpoint: 'https://test.server.com'\n    cfOrg: 'cfOrg'\n    cfSpace: 'cfSpace'\n    cfServiceInstance: 'cfServiceInstance'\n    cfServiceKeyName: 'cfServiceKeyName'\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Parameter Changes for Maven Execution in Jenkins Pipeline\nDESCRIPTION: This snippet shows the breaking changes in the 'goals', 'defines', and 'flags' parameters for the mavenExecute step. It illustrates the transition from string parameters to lists of strings.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/mavenExecute.md#2025-04-16_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n-goals: 'org.apache.maven.plugins:maven-help-plugin:3.1.0:evaluate',\n-defines: \"-Dexpression=$pomPathExpression -DforceStdout -q\",\n+goals: ['org.apache.maven.plugins:maven-help-plugin:3.1.0:evaluate'],\n+defines: [\"-Dexpression=$pomPathExpression\", \"-DforceStdout\", \"-q\"],\n```\n\n----------------------------------------\n\nTITLE: Configuring ApiKeyValueMapUpload in Jenkinsfile (Groovy)\nDESCRIPTION: Example of how to configure the ApiKeyValueMapUpload step in a Jenkins pipeline Groovy file. This simple configuration calls the step with minimal parameters, referencing the current script context.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/apiKeyValueMapUpload.md#2025-04-16_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\napiKeyValueMapUpload script: this\n```\n\n----------------------------------------\n\nTITLE: Configuring UIVeri5 Selenium Address in YAML\nDESCRIPTION: Example of setting Selenium address in UIVeri5 runOptions parameter using YAML configuration.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/uiVeri5ExecuteTests.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nrunOptions: [\"--seleniumAddress=http://localhost:4444/wd/hub\", ..... ]\n```\n\n----------------------------------------\n\nTITLE: InfluxDB Server Configuration\nDESCRIPTION: Pipeline configuration for specifying the InfluxDB server connection.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/influxWriteData.md#2025-04-16_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\ninfluxDBServer=jenkins\n```\n\n----------------------------------------\n\nTITLE: Creating Services with Variable File Substitution\nDESCRIPTION: Creates Cloud Foundry services using manifest with variable substitution from a YAML file.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/cloudFoundryCreateService.md#2025-04-16_snippet_7\n\nLANGUAGE: groovy\nCODE:\n```\ncloudFoundryCreateService(\n    cfApiEndpoint : 'https://test.server.com',\n    cfOrg : 'cfOrg',\n    cfSpace: 'cfSpace',\n    cfCredentialsId: 'cfCredentialsId',\n    serviceManifest: 'manifest.yml',\n    manifestVariablesFiles: 'vars.yml',\n    script: this,\n)\n```\n\n----------------------------------------\n\nTITLE: Triggering Integration Test in Jenkinsfile\nDESCRIPTION: Example showing how to trigger an integration test using Groovy script in Jenkinsfile. Uses the integrationArtifactTriggerIntegrationTest command with the current script context.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/integrationArtifactTriggerIntegrationTest.md#2025-04-16_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nintegrationArtifactTriggerIntegrationTest script: this\n```\n\n----------------------------------------\n\nTITLE: Jenkins Pipeline Azure Blob Upload Example\nDESCRIPTION: Groovy pipeline script demonstrating how to use the azureBlobUpload step to upload a file to Azure Blob Storage using Jenkins credentials.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/azureBlobUpload.md#2025-04-16_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\nazureBlobUpload(\n    script: this,\n    azureCredentialsId: \"Azure_Credentials\",\n    filePath: \"test.txt\"\n)\n```\n\n----------------------------------------\n\nTITLE: Executing abapEnvironmentPushATCSystemConfig with Direct ABAP Endpoint\nDESCRIPTION: Shows how to configure the abapEnvironmentPushATCSystemConfig step to directly interact with an ABAP endpoint, specifying credentials and host information.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/abapEnvironmentPushATCSystemConfig.md#2025-04-16_snippet_3\n\nLANGUAGE: Groovy\nCODE:\n```\nabapEnvironmentPushATCSystemConfig(\n    abapCredentialsId: 'abapCredentialsId',\n    host: 'https://myABAPendpoint.com',\n    atcSystemConfigFilePath: 'atcSystemConfig.json',\n    script: this,\n)\n```\n\n----------------------------------------\n\nTITLE: Executing WDI5 Tests with Base URL in YAML\nDESCRIPTION: A simple example of using the npmExecuteTests step to run WDI5 tests with a specified base URL.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/npmExecuteTests.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nstages:\n  - name: Test\n    steps:\n      - name: npmExecuteTests\n        type: npmExecuteTests\n        params:\n          baseUrl: \"http://example.com/index.html\"\n```\n\n----------------------------------------\n\nTITLE: Obtaining Transport Request IDs from Git Commits in Groovy\nDESCRIPTION: This example illustrates how to use OS Piper steps to obtain change document and transport request IDs from Git commit messages. The IDs are stored in the commonPipelineEnvironment and then used by the transportRequestUploadSOLMAN step.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/transportRequestUploadSOLMAN.md#2025-04-16_snippet_2\n\nLANGUAGE: groovy\nCODE:\n```\ntransportRequestDocIDFromGit( script: this )\ntransportRequestReqIDFromGit( script: this )\ntransportRequestUploadSOLMAN( script: this, ... )\n```\n\n----------------------------------------\n\nTITLE: Custom InfluxDB Data Addition\nDESCRIPTION: Example of adding custom data to InfluxDB measurements during pipeline execution.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/influxWriteData.md#2025-04-16_snippet_2\n\nLANGUAGE: groovy\nCODE:\n```\ncommonPipelineEnvironment.setInfluxCustomDataProperty('myProperty', 2018)\n```\n\n----------------------------------------\n\nTITLE: Configuring API Proxy Download in Jenkinsfile\nDESCRIPTION: Simple Groovy script implementation for API Proxy Download in a Jenkinsfile. Demonstrates basic usage with script context.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/apiProxyDownload.md#2025-04-16_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\napiProxyDownload script: this\n```\n\n----------------------------------------\n\nTITLE: Example Pipeline Script in Groovy\nDESCRIPTION: This Groovy snippet shows an example pipeline script that uses the transportRequestReqIDFromGit and transportRequestUploadRFC steps. It demonstrates how to chain these steps in a Jenkins pipeline.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/transportRequestUploadRFC.md#2025-04-16_snippet_5\n\nLANGUAGE: groovy\nCODE:\n```\n// pipeline script\ntransportRequestReqIDFromGit( script: this )\ntransportRequestUploadRFC( script: this, applicationUrl: 'https://example.org/appl/url/archive.zip')\n```\n\n----------------------------------------\n\nTITLE: Extending AUnit Stage to Send Results via Email in Groovy\nDESCRIPTION: This code snippet extends the AUnit stage to send AUnit results via email using the Email Extension Plugin. It demonstrates how to attach the AUnit results HTML file and include it in the email body. The extension also shows how to customize the email subject and recipients.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/pipelines/abapEnvironment/extensibility.md#2025-04-16_snippet_4\n\nLANGUAGE: groovy\nCODE:\n```\nvoid call(Map params) {\n  //access stage name\n  echo \"Start - Extension for stage: ${params.stageName}\"\n\n  //access config\n  echo \"Current stage config: ${params.config}\"\n\n  //execute original stage as defined in the template\n  params.originalStage()\n\n  emailext (\n    attachmentsPattern: 'AUnitResults.html', //This will attach the AUnit results to the E-Mail\n    to: 'user@example.com, admin@example.com',\n    subject: \"AUnit results Mail from latest Run in System H01\",\n    body: 'Dear User, here are the results from the latest AUnit test run ${env.BUILD_ID}.' + readFile('AUnitResults.html') //This will parse the AUnit results and send it as the E-Mail body\n )\n\n  echo \"End - Extension for stage: ${params.stageName}\"\n}\nreturn this\n```\n\n----------------------------------------\n\nTITLE: Creating Services with Inline Variable Substitution\nDESCRIPTION: Creates Cloud Foundry services using manifest with variable substitution from inline string list.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/cloudFoundryCreateService.md#2025-04-16_snippet_8\n\nLANGUAGE: groovy\nCODE:\n```\ncloudFoundryCreateService(\n    cfApiEndpoint : 'https://test.server.com',\n    cfOrg : 'cfOrg',\n    cfSpace: 'cfSpace',\n    cfCredentialsId: 'cfCredentialsId',\n    serviceManifest: 'manifest.yml',\n    manifestVariables: [\"name1=test1\",\"name2=test2\", \"name3=test3\"],\n    script: this,\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring TMS MTA Extension Upload in JSON\nDESCRIPTION: This JSON object configures the upload of an MTA extension to SAP Transport Management System (TMS). It includes an ID, description, MTA identifier, MTA extension identifier, and MTA version. This configuration is likely used in a Jenkins pipeline or similar automation process for SAP Cloud Platform deployments.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/test/resources/TransportManagementService/responseExtDescriptorUpload.txt#2025-04-16_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"id\": 123,\n    \"description\": \"tms mtaext upload\",\n    \"mtaId\": \"com.sap.piper.tms.test\",\n    \"mtaExtId\": \"com.sap.piper.tms.test.extension\",\n    \"mtaVersion\": \"1.0.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Maven Execution in Jenkins Pipeline\nDESCRIPTION: This example demonstrates a simple Maven execution in a Jenkins pipeline, using the mavenExecute step with 'clean' and 'install' goals.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/mavenExecute.md#2025-04-16_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\nmavenExecute script: this, goals: ['clean', 'install']\n```\n\n----------------------------------------\n\nTITLE: Cloud Foundry Service Manifest with Variables\nDESCRIPTION: YAML manifest template with variable placeholders for dynamic service creation.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/cloudFoundryCreateService.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n---\ncreate-services:\n- name:   ((name1))\n  broker: \"mongodb\"\n  plan:   \"v4.0-dev\"\n\n- name:   ((name2))\n  broker: \"mongodb\"\n  plan:   \"v4.0-dev\"\n\n- name:   ((name3))\n  broker: \"mongodb\"\n  plan:   \"v4.0-dev\"\n```\n\n----------------------------------------\n\nTITLE: Including Step Parameters in Markdown\nDESCRIPTION: Placeholder for inserting the generated step parameters in the documentation.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/gcpPublishEvent.md#2025-04-16_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n## ${docGenParameters}\n```\n\n----------------------------------------\n\nTITLE: Adding MTA Build Stage to Jenkins Pipeline in Groovy\nDESCRIPTION: This snippet adds a 'build' stage to the Jenkins pipeline that uses the mtaBuild step to build a multitarget application (MTA).\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/guidedtour.md#2025-04-16_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\nstage('build') {\n    mtaBuild script: this\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Commit Range with Start and End Points\nDESCRIPTION: This YAML snippet shows how to configure both gitFrom and gitTo parameters for the transportRequestReqIDFromGit step. It specifies the start and end points of the Git commit range to be searched for transport request IDs, useful when multiple IDs may have been merged in parallel.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/transportRequestReqIDFromGit.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  transportRequestReqIDFromGit:\n    gitFrom: '4378bb4'\n    gitTo: 'd99fbf7'\n```\n\n----------------------------------------\n\nTITLE: Configuring Step-Specific Change Management in YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure change management settings specifically for the transportRequestRelease step. It overrides the general settings for this particular step.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/transportRequestRelease.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n  [...]\n  steps:\n    transportRequestRelease:\n      changeManagement:\n        type: 'SOLMAN'\n        endpoint: 'https://example.org/cm'\n        [...]\n```\n\n----------------------------------------\n\nTITLE: Configuring ApiProxyList in YAML Pipeline Config\nDESCRIPTION: Detailed YAML configuration example showing all available parameters for the ApiProxyList step including credentials, filtering, ordering, and selection options.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/apiProxyList.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  <...>\n  apiProxyList:\n    apimApiServiceKeyCredentialsId: 'MY_API_SERVICE_KEY'\n    Top: MY_API_PROXY_GET_N_ENTITIES\n    Skip: MY_API_PROXY_SKIP_N_ENTITIES\n    Filter: MY_API_PROXY_FILTER_BY_ENTITY_FIELD\n    Orderby: MY_API_PROXY_ORDER_BY_ENTITY_FIELD\n    Count: MY_API_PROXY_ORDER_ENTITY_COUNT\n    Search: MY_API_PROXY_SEARCH_BY_ENTITY_FIELD\n    Select: MY_API_PROXY_SELECT_BY_ENTITY_FIELD\n    Expand: MY_API_PROXY_EXPAND_BY_ENTITY_FIELD\n```\n\n----------------------------------------\n\nTITLE: Change Management Configuration Example\nDESCRIPTION: Example YAML configuration for change management settings including credentials and git-related parameters.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/transportRequestUploadFile.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ngeneral:\n  changeManagement:\n    changeDocumentLabel: 'ChangeDocument\\s?:'\n    cmClientOpts: '-Djavax.net.ssl.trustStore=<path to truststore>'\n    credentialsId: 'CM'\n    type: 'SOLMAN'\n    endpoint: 'https://example.org/cm'\n    git:\n      from: 'HEAD~1'\n      to: 'HEAD'\n      format: '%b'\n```\n\n----------------------------------------\n\nTITLE: Jenkins Pipeline Integration Artifact Transport Configuration in Groovy\nDESCRIPTION: Simple Groovy configuration example for integrationArtifactTransport in a Jenkinsfile that specifies the script context.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/integrationArtifactTransport.md#2025-04-16_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nintegrationArtifactTransport script: this\n```\n\n----------------------------------------\n\nTITLE: Cloud Foundry Service Configuration JSON\nDESCRIPTION: Example JSON configuration file for Cloud Foundry service creation containing service parameters.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/cloudFoundryCreateService.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"example\":\"value\",\n  \"example\":\"value\"\n}\n```\n\n----------------------------------------\n\nTITLE: Calling abapAddonAssemblyKitPublishTargetVector in Jenkinsfile (Groovy)\nDESCRIPTION: This snippet demonstrates how to call the abapAddonAssemblyKitPublishTargetVector step in a Jenkinsfile when the step is configured in the config.yml file. It specifies the target vector scope and passes the script context.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/abapAddonAssemblyKitPublishTargetVector.md#2025-04-16_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nabapAddonAssemblyKitPublishTargetVector(\n                    targetVectorScope: 'T',\n                    script: this,\n                    )\n```\n\n----------------------------------------\n\nTITLE: Executing Maven Build in Jenkins Pipeline\nDESCRIPTION: This code snippet demonstrates how to use the 'buildExecute' step in a Jenkins pipeline to perform a Maven build. It sets the build tool to 'maven' and passes the current script context.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/buildExecute.md#2025-04-16_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nbuildExecute script:this, buildTool: 'maven'\n```\n\n----------------------------------------\n\nTITLE: Configuring abapEnvironmentPushATCSystemConfig Step in Jenkinsfile\nDESCRIPTION: Demonstrates how to call the abapEnvironmentPushATCSystemConfig step in a Jenkinsfile using minimal configuration. This approach relies on the config.yml file for detailed settings.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/abapEnvironmentPushATCSystemConfig.md#2025-04-16_snippet_0\n\nLANGUAGE: Groovy\nCODE:\n```\nabapEnvironmentPushATCSystemConfig script: this\n```\n\n----------------------------------------\n\nTITLE: Direct Host Configuration in YAML\nDESCRIPTION: YAML configuration example specifying direct host access and credentials for a single repository checkout\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/abapEnvironmentCheckoutBranch.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  abapEnvironmentCheckoutBranch:\n    repositoryName: '/DMO/GIT_REPOSITORY'\n    branchName: 'my-demo-branch'\n    abapCredentialsId: 'abapCredentialsId'\n    host: '1234-abcd-5678-efgh-ijk.abap.eu10.hana.ondemand.com'\n```\n\n----------------------------------------\n\nTITLE: Configuring abapEnvironmentPullGitRepo with external repository file (YAML)\nDESCRIPTION: Configuration in config.yml file, referencing an external repositories.yml file for repository details.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/abapEnvironmentPullGitRepo.md#2025-04-16_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\nsteps:\n  abapEnvironmentPullGitRepo:\n    repositories: 'repositories.yml'\n    abapCredentialsId: 'abapCredentialsId'\n    host: '1234-abcd-5678-efgh-ijk.abap.eu10.hana.ondemand.com'\n```\n\n----------------------------------------\n\nTITLE: Configuring Vault General Purpose Credentials\nDESCRIPTION: YAML configuration for fetching general purpose credentials from Vault with single path.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/infrastructure/vault.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ngeneral:\n  < your Vault configuration > # see above\n...\nsteps:\n  < piper go step >:\n    vaultCredentialPath: 'myStepCredentials'\n    vaultCredentialKeys: ['myAppId', 'myAppSecret']\n```\n\n----------------------------------------\n\nTITLE: Executing ApiProviderList in Jenkins Pipeline (Groovy)\nDESCRIPTION: Simple example of how to call the ApiProviderList step in a Jenkinsfile. This minimal configuration invokes the step to retrieve API providers from the API portal.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/apiProviderList.md#2025-04-16_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\napiProviderList script: this\n```\n\n----------------------------------------\n\nTITLE: Docker Image Configuration in YAML\nDESCRIPTION: YAML configuration for specifying custom Docker image in pipeline config\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/transportRequestUploadCTS.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  transportRequestUploadCTS:\n    dockerImage: 'my/fiori-node'\n    deployToolDependencies: []\n```\n\n----------------------------------------\n\nTITLE: Materializing Jenkins Log Files using Groovy Pipeline\nDESCRIPTION: Example showing how to use the jenkinsMaterializeLog step to access and print log file names in a Jenkins pipeline. The step takes a script reference and a closure that receives the log file name as a parameter.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/jenkinsMaterializeLog.md#2025-04-16_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\njenkinsMaterializeLog script:this, { name -> println \"log file: \" + name }\n```\n\n----------------------------------------\n\nTITLE: Multi-Repository YAML Configuration\nDESCRIPTION: YAML configuration for checking out multiple repositories using an external repositories.yml file\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/abapEnvironmentCheckoutBranch.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  abapEnvironmentCheckoutBranch:\n    repositories: 'repositories.yml'\n    abapCredentialsId: 'abapCredentialsId'\n    host: '1234-abcd-5678-efgh-ijk.abap.eu10.hana.ondemand.com'\n```\n\n----------------------------------------\n\nTITLE: Parameterized Pipeline Configuration in Jenkins\nDESCRIPTION: Implementation of a parameterized pipeline that allows toggling custom container creation and other test parameters using boolean and string parameters.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/DEVELOPMENT.md#2025-04-16_snippet_14\n\nLANGUAGE: groovy\nCODE:\n```\n@Library('my-piper-lib-os-fork@MyTest') _\n\nproperties([\n    parameters([\n        booleanParam(name: 'toggleSomething', defaultValue: false, description: 'dito'),\n        booleanParam(name: 'testPiperFork', defaultValue: false, description: 'dito'),\n        string(name: 'repoUnderTest', defaultValue: '<MyUser>/jenkins-library', description: 'dito'),\n        string(name: 'tag', defaultValue: 'MyTest', description: 'dito')\n    ])\n])\n\nif (params.testPiperFork == true) {\n    env.REPOSITORY_UNDER_TEST       = params.repoUnderTest\n    env.LIBRARY_VERSION_UNDER_TEST  = params.tag\n}\n\nabapEnvironmentPipeline script: this\n```\n\n----------------------------------------\n\nTITLE: Executing DUB Build Command in Docker Container\nDESCRIPTION: Example showing how to execute a DUB build command within a Docker container using the dlang2/dmd-ubuntu image. The script uses pipeline context and specifies the build command as the DUB operation.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/dubExecute.md#2025-04-16_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\ndubExecute script: this, dockerImage: 'dlang2/dmd-ubuntu:latest', dubCommand: 'build'\n```\n\n----------------------------------------\n\nTITLE: Configuring Integration Artifact Upload in YAML\nDESCRIPTION: YAML configuration example for integration artifact upload showing required parameters including API service key, flow ID, operation type, and resource path specifications.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/integrationArtifactResource.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  <...>\n  integrationArtifactResource:\n    cpiApiServiceKeyCredentialsId: 'MY_API_SERVICE_KEY'\n    integrationFlowId: 'MY_INTEGRATION_FLOW_ID'\n    operation: 'Create_OR_Modify_Delete_INTEGRATION_FLOW_Artifact_Resource'\n    resourcePath: 'MY_INTEGRATION_FLOW_Artifact_Resource_Relative_Path'\n```\n\n----------------------------------------\n\nTITLE: Calling abapEnvironmentPullGitRepo in Jenkinsfile (Groovy)\nDESCRIPTION: Simplest way to call the step in a Jenkinsfile when configuration is provided in config.yml.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/abapEnvironmentPullGitRepo.md#2025-04-16_snippet_0\n\nLANGUAGE: Groovy\nCODE:\n```\nabapEnvironmentPullGitRepo script: this\n```\n\n----------------------------------------\n\nTITLE: Defining Jenkins Pipeline Step Documentation Structure in Markdown\nDESCRIPTION: This snippet outlines the structure for documenting a Jenkins pipeline step. It uses placeholders for the step name, description, parameters, and configuration, which are likely to be filled in dynamically.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/golangBuild.md#2025-04-16_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# ${docGenStepName}\\n\\n## ${docGenDescription}\\n\\n## ${docGenParameters}\\n\\n## ${docGenConfiguration}\n```\n\n----------------------------------------\n\nTITLE: Executing integrationArtifactGetServiceEndpoint in Jenkinsfile (Groovy)\nDESCRIPTION: This snippet demonstrates how to use the integrationArtifactGetServiceEndpoint step within a Jenkinsfile. It shows the basic syntax for calling the step with the current script context.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/integrationArtifactGetServiceEndpoint.md#2025-04-16_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nintegrationArtifactGetServiceEndpoint script: this\n```\n\n----------------------------------------\n\nTITLE: Configuring Repository Scope in YAML\nDESCRIPTION: This snippet demonstrates how to configure ABAP quality checks with the 'repository' scope in a YAML file. It doesn't require specifying a commit and can also be used with the 'packages' scope.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/gctsExecuteABAPQualityChecks.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  <...>\n  gctsExecuteABAPQualityChecks:\n    host: 'https://abap.server.com:port'\n    client: '000'\n    abapCredentialsId: 'ABAPUserPasswordCredentialsId'\n    repository: 'myrepo'\n    scope: 'repository'\n    workspace: '/var/jenkins_home/workspace/myFirstPipeline'\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration - Git Range Specification\nDESCRIPTION: YAML configuration example showing how to specify the Git commit range for searching change document IDs by setting the gitFrom parameter.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/transportRequestDocIDFromGit.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  transportRequestDocIDFromGit:\n    gitFrom: '4378bb4'\n```\n\n----------------------------------------\n\nTITLE: Configuring transportRequestReqIDFromGit in General Purpose Pipeline Init Stage\nDESCRIPTION: This YAML snippet shows how to configure the transportRequestReqIDFromGit step in the Init stage of a General Purpose Pipeline using the config.yml file. It initializes the step to retrieve the transportRequestId from the git commit history.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/transportRequestReqIDFromGit.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nstages:\n  Init:\n    transportRequestReqIDFromGit: true\n```\n\n----------------------------------------\n\nTITLE: Configuring abapAddonAssemblyKitPublishTargetVector in config.yml (YAML)\nDESCRIPTION: This YAML configuration snippet shows how to set up the abapAddonAssemblyKitPublishTargetVector step in the config.yml file. It specifies the credentials ID for accessing the AAKaaS (Technical Communication User).\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/abapAddonAssemblyKitPublishTargetVector.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  abapAddonAssemblyKitPublishTargetVector:\n    abapAddonAssemblyKitCredentialsId: 'abapAddonAssemblyKitCredentialsId'\n```\n\n----------------------------------------\n\nTITLE: Loading Versioned Jenkins Shared Library\nDESCRIPTION: Example of how to load a specific version of a Jenkins shared library to avoid breaking changes and ensure build repeatability.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/extensibility.md#2025-04-16_snippet_4\n\nLANGUAGE: groovy\nCODE:\n```\n@Library('my-shared-library@v1.0') _\n```\n\n----------------------------------------\n\nTITLE: Executing hadolintExecute in Jenkins Pipeline (Groovy)\nDESCRIPTION: This snippet demonstrates how to use the hadolintExecute step in a Jenkins pipeline script. It shows the basic syntax for calling the step with the current script context.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/hadolintExecute.md#2025-04-16_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nhadolintExecute script: this\n```\n\n----------------------------------------\n\nTITLE: Configuring transportRequestUploadRFC Step in YAML\nDESCRIPTION: This YAML snippet provides an example configuration for the transportRequestUploadRFC step in the config.yaml file. It includes settings for change management, ABAP package, application details, and Docker image.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/transportRequestUploadRFC.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# config.yaml\nsteps:\n  transportRequestUploadRFC:\n    changeManagement:\n      credentialsId: 'RFC_CREDENTIALS_ID'\n      endpoint: 'https://example.org/cm/rfc/endpoint'\n      instance: '00'\n      client: '001'\n    abapPackage: 'PACK'\n    applicationDescription: 'Lorem ipsum'\n    applicationName: 'APP'\n    dockerImage: 'my/rfc-client'\n```\n\n----------------------------------------\n\nTITLE: Pipeline Stage Extension Implementation\nDESCRIPTION: Example of implementing pipeline stage extensions with conditional execution based on parameters and custom step handling.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/DEVELOPMENT.md#2025-04-16_snippet_15\n\nLANGUAGE: groovy\nCODE:\n```\nvoid call(Map piperParams) {\n  echo \"Start - Extension for stage: ${piperParams.stageName}\"\n\n  if (params.toggleSomething == true) {\n    // do something\n    echo \"now execute original stage as defined in the template\"\n    piperParams.originalStage()\n  } else {\n    // do something else\n    // e.g. only this singele step of the stage\n    somePiperStep( script: piperParams.script, someConfigParameter: '<...>' )\n  }\n  \n  echo \"End - Extension for stage: ${piperParams.stageName}\"\n}\nreturn this\n```\n\n----------------------------------------\n\nTITLE: Markdown Template with Variable Substitution\nDESCRIPTION: A markdown template structure that uses ${docGen} variables to generate documentation for Jenkins pipeline steps. The template includes sections for step name, description, parameters and configuration.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/codeqlExecuteScan.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# ${docGenStepName}\n\n## ${docGenDescription}\n\n## ${docGenParameters}\n\n## ${docGenConfiguration}\n```\n\n----------------------------------------\n\nTITLE: Configuration for abapAddonAssemblyKitCheckPV in config.yml\nDESCRIPTION: Example YAML configuration for the abapAddonAssemblyKitCheckPV step, specifying credentials ID and the addon descriptor file name for individual step configuration.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/abapAddonAssemblyKitCheckCVs.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  abapAddonAssemblyKitCheckCVs:\n    abapAddonAssemblyKitCredentialsId: 'abapAddonAssemblyKitCredentialsId',\n    addonDescriptorFileName: 'addon.yml'\n```\n\n----------------------------------------\n\nTITLE: Recording ABAP Unit Test Results Only\nDESCRIPTION: This snippet shows how to record only ABAP Unit test results when ATC checks are disabled, using the Warnings-Next-Generation Plugin in Jenkins.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/gctsExecuteABAPQualityChecks.md#2025-04-16_snippet_5\n\nLANGUAGE: groovy\nCODE:\n```\nrecordIssues(\n  enabledForFailure: true, aggregatingResults: true,\n  tools: [checkStyle(pattern: 'AUnitResults.xml', reportEncoding: 'UTF8')]\n\n)\n```\n\n----------------------------------------\n\nTITLE: Publishing Scala Static Analysis Results\nDESCRIPTION: Example showing how to publish Scala static analysis results from scalastyle using the checkstyle format.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/checksPublishResults.md#2025-04-16_snippet_3\n\nLANGUAGE: groovy\nCODE:\n```\nchecksPublishResults archive: true, checkstyle: [pattern: '**/target/scalastyle-result.xml']\n```\n\n----------------------------------------\n\nTITLE: Measuring Build Duration in Jenkins Pipeline\nDESCRIPTION: Example showing how to wrap pipeline code in a duration measurement block. Uses the durationMeasure step to track execution time of the enclosed build steps, with measurement name 'build_duration'.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/durationMeasure.md#2025-04-16_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\ndurationMeasure (script: this, measurementName: 'build_duration') {\n    //execute your build\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ATC Check for Packages Only (YAML)\nDESCRIPTION: Example atcconfig.yml file specifying only packages and packagetrees to be checked in an ATC run.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/abapEnvironmentRunATCCheck.md#2025-04-16_snippet_5\n\nLANGUAGE: YAML\nCODE:\n```\nobjectset:\n  packages:\n    - name: TestPackage\n  packagetrees:\n    - name: TestPackageWithSubpackages\n```\n\n----------------------------------------\n\nTITLE: Standard YAML Configuration\nDESCRIPTION: Basic YAML configuration for cloning a single repository with direct credentials\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/abapEnvironmentCloneGitRepo.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  abapEnvironmentCloneGitRepo:\n    repositoryName: '/DMO/GIT_REPOSITORY'\n    branchName: 'my-demo-branch'\n    abapCredentialsId: 'abapCredentialsId'\n    host: '1234-abcd-5678-efgh-ijk.abap.eu10.hana.ondemand.com'\n```\n\n----------------------------------------\n\nTITLE: Configuring WDI5 Authentication in Jenkins Pipeline\nDESCRIPTION: This snippet demonstrates how to set up authentication for WDI5 tests in a Jenkins pipeline. It explains that when the 'wdi5' parameter is set to true, the provided basic auth credentials are mapped to environment variables for automatic login.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/npmExecuteEndToEndTests.md#2025-04-16_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n### Passing credentials\n\nWhen running acceptance tests in a real environment, authentication will be enabled in most cases. WDI5 includes [features to automatically perform the login](https://ui5-community.github.io/wdi5/#/authentication). For this, if the step parameter `wdi5` is set to `true`, the provided basic auth credential (`credentialsId`) are mapped to the environment variables `wdi5_username` and `wdi5_password`.\n```\n\n----------------------------------------\n\nTITLE: Parameterizing Transport Request ID in Groovy\nDESCRIPTION: This Groovy snippet demonstrates how to parameterize the transport request ID in the pipeline script. It allows specifying the ID as a parameter when launching the build.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/transportRequestUploadRFC.md#2025-04-16_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\ntransportRequestUploadRFC(\n    script: this,\n    transportRequestId: ${TRANSPORT_REQUEST_ID},\n    ...\n)\n```\n\n----------------------------------------\n\nTITLE: Setting ANS Event Template with Environment Variable\nDESCRIPTION: Example command showing how to set an event template for the SAP Alert Notification service using environment variables. This allows customizing the event structure sent to ANS.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/configuration.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport PIPER_ansEventTemplate='{\"priority\": 999}'\n```\n\n----------------------------------------\n\nTITLE: Direct Host Configuration in Jenkinsfile\nDESCRIPTION: Groovy pipeline configuration with direct host access and credentials specification\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/abapEnvironmentCheckoutBranch.md#2025-04-16_snippet_5\n\nLANGUAGE: groovy\nCODE:\n```\nabapEnvironmentCheckoutBranach (\n  script: this,\n  repositoryName: '/DMO/GIT_REPOSITORY',\n  branchName: 'my-demo-branch',\n  abapCredentialsId: 'abapCredentialsId',\n  host: '1234-abcd-5678-efgh-ijk.abap.eu10.hana.ondemand.com'\n)\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration for ABAP Addon Assembly Kit Check\nDESCRIPTION: Example configuration in config.yml file showing how to set up credentials and addon descriptor file name for the ABAP Addon Assembly Kit Check step.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/abapAddonAssemblyKitCheck.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  abapAddonAssemblyKitCheck:\n    abapAddonAssemblyKitCredentialsId: 'abapAddonAssemblyKitCredentialsId',\n    addonDescriptorFileName: 'addon.yml'\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration for ABAP Unit Tests\nDESCRIPTION: Example configuration for executing ABAP Unit Tests using YAML configuration file with specific commit.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/gctsExecuteABAPUnitTests.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  <...>\n  gctsExecuteABAPUnitTests:\n    host: 'https://abap.server.com:port'\n    client: '000'\n    abapCredentialsId: 'ABAPUserPasswordCredentialsId'\n    repository: 'myrepo'\n    scope: 'remoteChangedObjects'\n    commit: '38abb4814ae46b98e8e6c3e718cf1782afa9ca90'\n    workspace: '/var/jenkins_home/workspace/myFirstPipeline'\n```\n\n----------------------------------------\n\nTITLE: Add-On Product descriptor YAML\nDESCRIPTION: Example of an addon.yml file that defines the add-on product information including the product name and version to be updated via the Landscape Portal API.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/abapLandscapePortalUpdateAddOnProduct.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\naddonProduct: some-addon-product\naddonVersion: some-addon-version\n```\n\n----------------------------------------\n\nTITLE: Multiple Manifest Files Variable Substitution\nDESCRIPTION: Example showing how to handle variable substitution for multiple manifest files (manifest.yml and services-manifest.yml) using the same variables file.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/cfManifestSubstituteVariables.md#2025-04-16_snippet_3\n\nLANGUAGE: groovy\nCODE:\n```\n// resolve variables in manifest.yml\ncfManifestSubstituteVariables (\n  script: this,\n  manifestFile: \"manifest.yml\",\n  manifestVariablesFiles: [\"manifest-variables.yml\"]\n)\n\n// resolve variables in services-manifest.yml from same file.\ncfManifestSubstituteVariables (\n  script: this,\n  manifestFile: \"services-manifest.yml\",\n  manifestVariablesFiles: [\"manifest-variables.yml\"]\n)\n```\n\n----------------------------------------\n\nTITLE: Defining ATC Check Object Set in YAML\nDESCRIPTION: YAML configuration specifying which software components should be checked by ATC. This example targets the \"/DMO/SWC\" component for analysis.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/pipelines/abapEnvironment/stages/test.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nobjectSet:\n  softwarecomponents:\n    - name: \"/DMO/SWC\"\n```\n\n----------------------------------------\n\nTITLE: Cloud Foundry Service Configuration\nDESCRIPTION: YAML configuration using Cloud Foundry service instance details for authentication\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/abapEnvironmentCheckoutBranch.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  abapEnvironmentCheckoutBranch:\n    repositoryName: '/DMO/GIT_REPOSITORY'\n    branchName: 'my-demo-branch'\n    cfCredentialsId: 'cfCredentialsId'\n    cfApiEndpoint: 'https://test.server.com'\n    cfOrg: 'cfOrg'\n    cfSpace: 'cfSpace'\n    cfServiceInstance: 'cfServiceInstance'\n    cfServiceKeyName: 'cfServiceKeyName'\n```\n\n----------------------------------------\n\nTITLE: Advanced NPM Test Execution with Vault Credentials in YAML\nDESCRIPTION: An advanced example of using npmExecuteTests with custom install and run commands, environment variables for credentials, and a base URL configuration.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/npmExecuteTests.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nstages:\n  - name: Test\n    steps:\n      - name: npmExecuteTests\n        type: npmExecuteTests\n        params:\n          installCommand: \"npm install\"\n          runCommand: \"npm run custom-e2e-test\"\n          usernameEnvVar: \"e2e_username\"\n          passwordEnvVar: \"e2e_password\"\n          baseUrl: \"http://example.com/index.html\"\n          urlOptionPrefix: \"--base-url=\"\n```\n\n----------------------------------------\n\nTITLE: Using apiProviderDownload in a Jenkinsfile (Groovy)\nDESCRIPTION: Example configuration for using the apiProviderDownload step within a Jenkins pipeline script. This simple example invokes the step with the current script context.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/apiProviderDownload.md#2025-04-16_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\napiProviderDownload script: this\n```\n\n----------------------------------------\n\nTITLE: Recording Issues Without ATC Check\nDESCRIPTION: Example of recordIssues configuration when ATC checks are disabled.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/gctsExecuteABAPUnitTests.md#2025-04-16_snippet_5\n\nLANGUAGE: groovy\nCODE:\n```\nrecordIssues(\n  enabledForFailure: true, aggregatingResults: true,\n  tools: [checkStyle(pattern: 'AUnitResults.xml', reportEncoding: 'UTF8')]\n\n)\n```\n\n----------------------------------------\n\nTITLE: Basic Groovy Pipeline Call\nDESCRIPTION: Simple pipeline call for cloning a Git repository using script context\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/abapEnvironmentCloneGitRepo.md#2025-04-16_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nabapEnvironmentCheckoutBranch script: this\n```\n\n----------------------------------------\n\nTITLE: Configuring Integration Artifact Update in Jenkinsfile (Groovy)\nDESCRIPTION: This snippet demonstrates how to use the integrationArtifactUpdateConfiguration step in a Jenkinsfile. It shows the basic syntax for calling the step with the current script context.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/integrationArtifactUpdateConfiguration.md#2025-04-16_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nintegrationArtifactUpdateConfiguration script: this\n```\n\n----------------------------------------\n\nTITLE: Executing Integration Artifact Undeploy in Jenkinsfile\nDESCRIPTION: Shows how to call the integrationArtifactUnDeploy step within a Jenkins pipeline script.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/integrationArtifactUnDeploy.md#2025-04-16_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nintegrationArtifactUnDeploy script: this\n```\n\n----------------------------------------\n\nTITLE: Calling abapLandscapePortalUpdateAddOnProduct in Jenkinsfile\nDESCRIPTION: Minimal example of calling the abapLandscapePortalUpdateAddOnProduct step in a Jenkinsfile. This approach relies on configuration defined in the config.yml file.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/abapLandscapePortalUpdateAddOnProduct.md#2025-04-16_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nabapLandscapePortalUpdateAddOnProduct script: this\n```\n\n----------------------------------------\n\nTITLE: Executing abapEnvironmentRunATCCheck in Jenkinsfile (Groovy)\nDESCRIPTION: Minimal configuration for running the abapEnvironmentRunATCCheck step using a config.yml file.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/abapEnvironmentRunATCCheck.md#2025-04-16_snippet_0\n\nLANGUAGE: Groovy\nCODE:\n```\nabapEnvironmentRunATCCheck script: this\n```\n\n----------------------------------------\n\nTITLE: Configuring Update Behavior in config.yml\nDESCRIPTION: Demonstrates how to configure the update behavior of the abapEnvironmentPushATCSystemConfig step in the config.yml file, specifically to prevent updates of existing configurations.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/abapEnvironmentPushATCSystemConfig.md#2025-04-16_snippet_4\n\nLANGUAGE: YAML\nCODE:\n```\nsteps:\n  abapEnvironmentPushATCSystemConfig:\n    atcSystemConfigFilePath: atcSystemConfig.json,\n    patchIfExisting: false,\n```\n\n----------------------------------------\n\nTITLE: Enabling detectExecuteScan in Jenkins Pipeline Script\nDESCRIPTION: This Groovy script demonstrates how to enable the detectExecuteScan step in a Jenkins pipeline. It sets up the pipeline environment and includes the detectExecuteScan step within a stage.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/detectExecuteScan.md#2025-04-16_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\n@Library('piper-lib') _\n@Library('piper-lib-os') __\n\nnode {\n  stage('Init') {\n    checkout scm\n    setupPipelineEnvironment script: this\n  }\n  stage('detectExecuteScan') {\n     detectExecuteScan script: this\n  }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Running NPM Tests with Custom Base URL in Shell\nDESCRIPTION: Example of how the npmExecuteTests step executes the custom test script with a specific base URL.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/npmExecuteTests.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm run custom-e2e-test --base-url=http://one.example.com/index.html\n```\n\n----------------------------------------\n\nTITLE: Executing npm command with Docker in Jenkins pipeline\nDESCRIPTION: This snippet demonstrates how to use the npmExecute step in a Jenkins pipeline. It runs an npm command inside a Docker container using Node.js 8 on Debian Stretch.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/npmExecute.md#2025-04-16_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nnpmExecute script: this, dockerImage: 'node:8-stretch', npmCommand: 'run build'\n```\n\n----------------------------------------\n\nTITLE: Outlining Contribution Steps in Markdown\nDESCRIPTION: This code snippet provides a step-by-step guide for contributing to the SAP open source project. It covers the process from creating a branch to celebrating the merged contribution, including important steps like creating a pull request and accepting the CLA.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/CONTRIBUTING.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n1. Make sure the change is welcome (see [General Remarks](#general-remarks)).\n2. Create a branch by forking the repository and apply your change.\n3. Commit and push your change on that branch.\n4. Create a pull request in the repository using this branch.\n5. Follow the link posted by the CLA assistant to your pull request and accept it, as described above.\n6. Wait for our code review and approval, possibly enhancing your change on request.\n    - Note that the maintainers have many duties. So, depending on the required effort for reviewing, testing, and clarification, this may take a while.\n7. Once the change has been approved and merged, we will inform you in a comment.\n8. Celebrate!\n```\n\n----------------------------------------\n\nTITLE: Publishing Pylint Results\nDESCRIPTION: Example demonstrating how to publish Python static analysis results from Pylint with a specific log file pattern.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/checksPublishResults.md#2025-04-16_snippet_4\n\nLANGUAGE: groovy\nCODE:\n```\nchecksPublishResults archive: true, pylint: [pattern: '**/target/pylint.log']\n```\n\n----------------------------------------\n\nTITLE: Calling abapAddonAssemblyKitReserveNextPackages in Jenkinsfile\nDESCRIPTION: Basic usage example showing how to call the abapAddonAssemblyKitReserveNextPackages step in a Jenkinsfile when using the recommended configuration via config.yml.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/abapAddonAssemblyKitReserveNextPackages.md#2025-04-16_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nabapAddonAssemblyKitReserveNextPackages script: this\n```\n\n----------------------------------------\n\nTITLE: Complete Pipeline Upload Stage Implementation\nDESCRIPTION: Full implementation of an upload stage in a Jenkins pipeline including transport request handling and change status verification.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/isChangeInDevelopment.md#2025-04-16_snippet_3\n\nLANGUAGE: groovy\nCODE:\n```\n// pipeline script\n   ...\n   stage('Upload') {\n      transportRequestDocIDFromGit( script: this )\n\n      isChangeInDevelopment( script: this )\n\n      transportRequestReqIDFromGit( script: this )\n      transportRequestUploadSOLMAN( script: this )\n   }\n```\n\n----------------------------------------\n\nTITLE: Configuring abapEnvironmentPushATCSystemConfig in config.yml\nDESCRIPTION: Shows how to configure the abapEnvironmentPushATCSystemConfig step in the config.yml file, specifying ABAP credentials, host, and the path to the ATC system configuration file.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/abapEnvironmentPushATCSystemConfig.md#2025-04-16_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nsteps:\n  abapEnvironmentPushATCSystemConfig:\n    abapCredentialsId: 'abapCredentialsId',\n    host: 'https://myABAPendpoint.com',\n    atcSystemConfigFilePath: 'atcSystemConfig.json',\n```\n\n----------------------------------------\n\nTITLE: Extending ATC Stage with Error Handling for Build Failure in Groovy\nDESCRIPTION: This snippet shows how to abort pipeline execution if ATC findings cause the build to fail. It checks the current build result and throws an error to stop the pipeline if the result is 'FAILURE'.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/pipelines/abapEnvironment/extensibility.md#2025-04-16_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\nif (currentBuild.result == 'FAILURE') {\n  error('Stopping build due to ATC Check quality gate')\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ApiProxyList in Jenkins Pipeline (Groovy)\nDESCRIPTION: Simple Groovy configuration example for the ApiProxyList step in a Jenkinsfile to retrieve API proxies.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/apiProxyList.md#2025-04-16_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\napiProxyList script: this\n```\n\n----------------------------------------\n\nTITLE: Testing Pipeline Changes with Custom Container in Jenkins\nDESCRIPTION: Example of triggering creation of a custom container for testing pipeline changes by setting environment variables REPOSITORY_UNDER_TEST and LIBRARY_VERSION_UNDER_TEST.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/DEVELOPMENT.md#2025-04-16_snippet_13\n\nLANGUAGE: groovy\nCODE:\n```\n@Library('piper-lib-os') _\n\nenv.REPOSITORY_UNDER_TEST       = 'myfork' // e.g. 'myUser/jenkins-library'\nenv.LIBRARY_VERSION_UNDER_TEST  = 'MyTag'\n\nabapEnvironmentPipeline script: this\n```\n\n----------------------------------------\n\nTITLE: Bats Test Execution with Environment Variables\nDESCRIPTION: Advanced example demonstrating how to pass environment variables to Bats tests, including both fixed values and dynamic templates using commonPipelineEnvironment. Shows integration with Docker container execution.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/batsExecuteTests.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nbatsExecuteTests script: this, envVars = [\n  FIX_VALUE: 'my fixed value',\n  CONTAINER_NAME: '${commonPipelineEnvironment.configuration.steps.executeBatsTests.dockerContainerName}',\n  IMAGE_NAME: '${return commonPipelineEnvironment.getDockerImageNameAndTag()}'\n]\n```\n\n----------------------------------------\n\nTITLE: Groovy Pipeline Step Implementation\nDESCRIPTION: Example showing how to call the transportRequestDocIDFromGit step in a Jenkins pipeline script.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/transportRequestDocIDFromGit.md#2025-04-16_snippet_3\n\nLANGUAGE: groovy\nCODE:\n```\ntransportRequestDocIDFromGit( script: this )\n```\n\n----------------------------------------\n\nTITLE: Console Output for Pipeline Error Handling (Log)\nDESCRIPTION: This snippet shows the console output format when echoDetails is set to true. It includes step beginning and end messages, as well as detailed error information in case of a failure.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/handlePipelineStepErrors.md#2025-04-16_snippet_1\n\nLANGUAGE: log\nCODE:\n```\n----------------------------------------------------------\n--- An error occurred in the library step: ${stepName}\n----------------------------------------------------------\nThe following parameters were available to the step:\n***\n${stepParameters}\n***\nThe error was:\n***\n${err}\n***\nFurther information:\n* Documentation of step ${stepName}: .../${stepName}/\n* Pipeline documentation: https://...\n* GitHub repository for pipeline steps: https://...\n----------------------------------------------------------\n```\n\n----------------------------------------\n\nTITLE: CF Rolling Deployment Parameter Example\nDESCRIPTION: Command parameter example for configuring rolling deployment strategy in Cloud Foundry\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/cloudFoundryDeploy.md#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncfNativeDeployParameters:'--strategy rolling'\n```\n\n----------------------------------------\n\nTITLE: Calling abapAddonAssemblyKitCheckPV in Jenkinsfile\nDESCRIPTION: This snippet demonstrates how to call the abapAddonAssemblyKitCheckPV step in a Jenkinsfile using the recommended approach with configuration stored in config.yml.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/abapAddonAssemblyKitCheckPV.md#2025-04-16_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nabapAddonAssemblyKitCheckPV script: this\n```\n\n----------------------------------------\n\nTITLE: Configuring Newman Run Options with Deprecated Groovy Template\nDESCRIPTION: Example of deprecated Groovy template syntax for Newman run command configuration.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/newmanExecute.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nnewmanRunCommand: \"run '${config.newmanCollection}' --environment '${config.newmanEnvironment}' --globals '${config.newmanGlobals}' --reporters junit,html --reporter-junit-export 'target/newman/TEST-${collectionDisplayName}.xml' --reporter-html-export 'target/newman/TEST-${collectionDisplayName}.html'\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Repositories for abapEnvironmentCreateTag (YAML)\nDESCRIPTION: Shows the structure of the repositories.yml or addon.yml file used to specify multiple repositories and addon information for the abapEnvironmentCreateTag step.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/abapEnvironmentCreateTag.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\naddonVersion: \"1.2.3\"\naddonProduct: \"/DMO/PRODUCT\"\nrepositories:\n  - name: '/DMO/REPO'\n    branch: 'feature'\n    commitID: 'cd87a3cac2bc946b7629580e58598c3db56a26f8'\n    version: '1.0.0'\n```\n\n----------------------------------------\n\nTITLE: Minimal Service Key Creation Call\nDESCRIPTION: Simplified pipeline step call when using external configuration file. All parameters are defined in the config.yml file.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/cloudFoundryCreateServiceKey.md#2025-04-16_snippet_3\n\nLANGUAGE: groovy\nCODE:\n```\ncloudFoundryCreateServiceKey(\n  script: this,\n)\n```\n\n----------------------------------------\n\nTITLE: Using apiKeyValueMapDownload in a Jenkinsfile (Groovy)\nDESCRIPTION: Example configuration for calling the apiKeyValueMapDownload step within a Jenkins pipeline script. This basic example passes the current script context to the step.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/apiKeyValueMapDownload.md#2025-04-16_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\napiKeyValueMapDownload script: this\n```\n\n----------------------------------------\n\nTITLE: Adding Piper Library to Jenkins Pipeline\nDESCRIPTION: This Groovy snippet shows how to include the Piper shared library in a Jenkins pipeline. It should be added at the beginning of the Jenkinsfile to make Piper functions available to the pipeline.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/infrastructure/customjenkins.md#2025-04-16_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\n@Library('piper-lib-os') _\n```\n\n----------------------------------------\n\nTITLE: Using pipelineStashFiles in Jenkins Pipeline (Groovy)\nDESCRIPTION: This snippet demonstrates how to use the pipelineStashFiles step in a Jenkins pipeline. It wraps around another step (mavenExecute in this example) to stash files before and after the build process.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/pipelineStashFiles.md#2025-04-16_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\npipelineStashFiles script: this {\n  mavenExecute script: this, ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Malware Scan Step in Jenkins Pipeline (YAML)\nDESCRIPTION: This YAML configuration block specifies the parameters for the malwareExecuteScan step. It defines the file to scan, the host URL for the malware scanner, and the credentials ID for authentication.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/malwareExecuteScan.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n    malwareExecuteScan:\n        file: myFile.zip\n        host: https://malwarescanner.example.sap.com\n        malwareScanCredentialsId: MALWARESCAN\n```\n\n----------------------------------------\n\nTITLE: Docker Pull Error Example\nDESCRIPTION: This snippet demonstrates the error message that appears when a Docker Hub pull rate limit is reached. It shows the exact format of the rate limit error from the Docker daemon.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/infrastructure/docker-rate-limit.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull <some image>\nUsing default tag: latest\nError response from daemon: toomanyrequests: You have reached your pull rate limit. You may increase the limit by authenticating and upgrading: https://www.docker.com/increase-rate-limit\n```\n\n----------------------------------------\n\nTITLE: Executing transportRequestReqIDFromGit in Jenkins Pipeline\nDESCRIPTION: This Groovy snippet demonstrates how to execute the transportRequestReqIDFromGit step in a Jenkins pipeline script. It calls the step with the current script context.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/transportRequestReqIDFromGit.md#2025-04-16_snippet_3\n\nLANGUAGE: groovy\nCODE:\n```\ntransportRequestReqIDFromGit( script: this )\n```\n\n----------------------------------------\n\nTITLE: Modified Pipeline Structure for Single Project in Jenkinsfile\nDESCRIPTION: Basic structure for creating a modified pipeline in a single project's Jenkinsfile. This approach allows for more extensive modifications than stage extensions by copying and customizing the entire pipeline code.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/extensibility.md#2025-04-16_snippet_2\n\nLANGUAGE: groovy\nCODE:\n```\n@Library(/* Shared library definition, see below */) _\n\ncall script: this\n\nvoid call(parameters) {\n  // Your pipeline code based on our ready-made pipelines\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vault Metadata for NPM Tests in JSON\nDESCRIPTION: JSON configuration for Vault metadata used in the npmExecuteTests step, including multiple URLs with corresponding usernames and passwords.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/npmExecuteTests.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"URLs\": [\n    {\n      \"url\": \"http://one.example.com/index.html\",\n      \"username\": \"some-username1\",\n      \"password\": \"some-password1\"\n    },\n    {\n      \"url\": \"http://two.example.com/index.html\",\n      \"username\": \"some-username2\",\n      \"password\": \"some-password2\"\n    }\n  ],\n  \"username\": \"base-url-username\",\n  \"password\": \"base-url-password\"\n}\n```\n\n----------------------------------------\n\nTITLE: Calling abapEnvironmentCreateTag Step in Jenkinsfile (Groovy)\nDESCRIPTION: Demonstrates how to call the abapEnvironmentCreateTag step in a Jenkinsfile when using config.yml for configuration.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/abapEnvironmentCreateTag.md#2025-04-16_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nabapEnvironmentCreateTag script: this\n```\n\n----------------------------------------\n\nTITLE: Setting Kubernetes Environment Variable\nDESCRIPTION: Sets the required environment variable ON_K8S to enable Kubernetes execution mode in Jenkins.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/dockerExecuteOnKubernetes.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# set environment variable\nexport ON_K8S=true\"\n```\n\n----------------------------------------\n\nTITLE: Detailed configuration in Jenkinsfile\nDESCRIPTION: Complete example of directly configuring all parameters for the abapLandscapePortalUpdateAddOnProduct step in a Jenkinsfile without relying on the config.yml file.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/abapLandscapePortalUpdateAddOnProduct.md#2025-04-16_snippet_2\n\nLANGUAGE: groovy\nCODE:\n```\nabapLandscapePortalUpdateAddOnProduct (\n  script: this,\n  landscapePortalAPICredentialsId: 'landscapePortalAPICredentialsId'\n  abapSystemNumber: 'abapSystemNumber'\n  addonDescriptorFileName: 'addon.yml'\n  addonDescriptor: 'addonDescriptor'\n)\n```\n\n----------------------------------------\n\nTITLE: Cloning the Jenkins Library Repository in Shell\nDESCRIPTION: Commands for creating a local clone of the Jenkins Library repository, including setting up remote references.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/DEVELOPMENT.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmkdir -p ${HOME}/projects/jenkins-library\ncd ${HOME}/projects\ngit clone git@github.com:${YOUR_GITHUB_USERNAME}/jenkins-library.git\ncd jenkins-library\ngit remote add upstream git@github.com:sap/jenkins-library.git\ngit remote set-url --push upstream no_push\n```\n\n----------------------------------------\n\nTITLE: Configuring Quality Gates in Jenkins Pipeline\nDESCRIPTION: Example showing how to configure quality gates for static analysis tools to set build status based on finding thresholds. Demonstrates setting different thresholds for high, normal, and low severity issues.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/checksPublishResults.md#2025-04-16_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nqualityGates: [\n  [threshold: 1, type: 'TOTAL_HIGH', unstable: false],\n  [threshold: 10, type: 'TOTAL_NORMAL', unstable: false],\n  [threshold: 100, type: 'TOTAL_LOW', unstable: false],\n  [threshold: 1000, type: 'TOTAL', unstable: false],\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring ApiKeyValueMapUpload in YAML Configuration\nDESCRIPTION: Example of how to configure the ApiKeyValueMapUpload step in a YAML configuration file. This configuration specifies the API service key credentials ID, the key and value to upload, and the name of the key-value map.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/apiKeyValueMapUpload.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  <...>\n  apiKeyValueMapUpload:\n    apimApiServiceKeyCredentialsId: 'MY_API_SERVICE_KEY'\n    key: API_KEY_NAME\n    value: API_KEY_VALUE\n    keyValueMapName: API_KEY_VALUE_MAP_NAME\n```\n\n----------------------------------------\n\nTITLE: Groovy Template Variables and Conditions for Quality Checks\nDESCRIPTION: A series of Groovy template expressions that render information about quality checks, version control, security scans, and other pipeline metrics. Uses conditional statements and list processing to format output.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/resources/com.sap.piper/templates/pipeline_report.txt#2025-04-16_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\n<% print qualityChecks.collect({each -> \"  - ${each}\"}).join(\"\\n\") %>\n```\n\nLANGUAGE: groovy\nCODE:\n```\n<% print deploymentExecuted? \"Afterwards the pipeline deployed the project.\" : \"The pipeline did not execute a productive deployment.\" %>\n```\n\nLANGUAGE: groovy\nCODE:\n```\n<% print versionControlTool ? \"This project uses ${versionControlTool} as version control system.\" : \"No version control system could be identified.\" %>\n```\n\nLANGUAGE: groovy\nCODE:\n```\n<% print securityScans.collect({each -> \"  - ${each}\"}).join(\"\\n\") %>\n```\n\nLANGUAGE: groovy\nCODE:\n```\n<% print npmAuditedAdvisories ?\"The following advisories for npm were found but audited:\\n\" :\"\" \n   print npmAuditedAdvisories.collect({each -> \"  - https://www.npmjs.com/advisories/${each}\"}).join(\"\\n\") %>\n```\n\nLANGUAGE: groovy\nCODE:\n```\n<% print resilienceChecked? \"The pipeline checked during the test execution that all calls to 3rd party systems were wrapped with Hystrix.\" : \"There were no checks for resilience.\" %>\n```\n\nLANGUAGE: groovy\nCODE:\n```\n<% print performanceTestsExecutions ?\"The following performance tests were executed:\" :\"No performance tests were executed in the pipeline.\" %>\n<% print performanceTestsExecutions.collect({each -> \"  - ${each}\"}).join(\"\\n\") %>\n```\n\nLANGUAGE: groovy\nCODE:\n```\n<%\nif(deploymentToNexusExecuted){\n    print \"The pipeline deployed artifacts to nexus.\\n\"\n    print automaticVersioning ?\"The pipeline generates a new version identifier for each deployment.\" :\"The pipeline does not generate a new version identifier for each deployment.\"\n}\nelse {\n    print \"There is no deployment to nexus configured in the pipeline.\"\n}\n%>\n```\n\nLANGUAGE: groovy\nCODE:\n```\n<% print testsExecutions.collect({each -> \"  - ${each}\"}).join(\"\\n\") %>\n```\n\nLANGUAGE: groovy\nCODE:\n```\n<%\nif(minimumCodeCoverage) {\n    print \"The pipeline checked that the line code coverage for backend unit/integration tests is above ${minimumCodeCoverage}%.\\n\"\n    print \"The actual line code coverage is ${lineCoverage}%\\n\"\n    print \"The actual branch code coverage is ${branchCoverage}%\\n\"\n}\nelse {\n    print \"There was no assertion of the code coverage.\"\n}\n%>\n```\n\nLANGUAGE: groovy\nCODE:\n```\n<% print jacocoExcludes?\"The following excludes regarding code coverage were defined:\\n\" :\"\"\n   print jacocoExcludes.collect({each -> \"  - ${each}\"}).join(\"\\n\")\n%>\n```\n\nLANGUAGE: groovy\nCODE:\n```\n<% print onlyPublicAPIsChecked ?\"The pipeline checked that only public SAP S/4HANA APIs were called.\" :\"There were no checks executed whether only public APIs are used.\" %>\n```\n\nLANGUAGE: groovy\nCODE:\n```\n<%\n    print apiCheckExceptions.customODataServices ?\"The following exceptions from that were declared:\\n\" :\"\"\n    print apiCheckExceptions.customODataServices.collect({each -> \"  - ${each}\"}).join(\"\\n\")\n    print apiCheckExceptions.nonErpDestinations ?\"The following Destinations not representing an ERP were declared:\\n\" :\"\"\n    print apiCheckExceptions.nonErpDestinations.collect({each -> \"  - ${each}\"}).join(\"\\n\")\n%>\n```\n\nLANGUAGE: groovy\nCODE:\n```\n<% print deploymentExecuted? \"The pipeline used a zero-downtime approach to deploy productively.\" : \"The pipeline did not execute a deployment.\" %>\n```\n\n----------------------------------------\n\nTITLE: Cloud Foundry Configuration in Jenkinsfile\nDESCRIPTION: Groovy pipeline configuration using Cloud Foundry service instance for authentication\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/abapEnvironmentCheckoutBranch.md#2025-04-16_snippet_6\n\nLANGUAGE: groovy\nCODE:\n```\nabapEnvironmentCheckoutBranch (\n  script: this,\n  repositoryName: '/DMO/GIT_REPOSITORY',\n  branchName: 'my-demo-branch'\n  abapCredentialsId: 'cfCredentialsId',\n  cfApiEndpoint: 'https://test.server.com',\n  cfOrg: 'cfOrg',\n  cfSpace: 'cfSpace',\n  cfServiceInstance: 'cfServiceInstance',\n  cfServiceKeyName: 'cfServiceKeyName'\n)\n```\n\n----------------------------------------\n\nTITLE: Pipeline Build Stage Configuration\nDESCRIPTION: Groovy pipeline configuration for executing build scripts\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/transportRequestUploadCTS.md#2025-04-16_snippet_4\n\nLANGUAGE: groovy\nCODE:\n```\nstage('Build') {\n   npmExecuteScripts(script: this, runScripts: ['build'])\n}\n```\n\n----------------------------------------\n\nTITLE: BYOG Repository YAML Configuration\nDESCRIPTION: YAML configuration for Bring Your Own Git repository cloning\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/abapEnvironmentCloneGitRepo.md#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  abapEnvironmentCloneGitRepo:\n    repositories: 'repos.yaml'\n    byogCredentialsId: 'byogCredentialsId'\n    abapCredentialsId: 'abapCredentialsId'\n    host: '1234-abcd-5678-efgh-ijk.abap.eu10.hana.ondemand.com'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Influx Custom Data in Groovy\nDESCRIPTION: Example showing how to retrieve Influx custom data collected during pipeline execution using the getInfluxCustomData() method.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/commonPipelineEnvironment.md#2025-04-16_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\ndef myInfluxData = commonPipelineEnvironment.getInfluxCustomData()\n```\n\n----------------------------------------\n\nTITLE: Implementing Mockable Interface in Go\nDESCRIPTION: Shows how to create a mockable interface for external functionality and implement it with real functions. Includes utility methods for file operations.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/DEVELOPMENT.md#2025-04-16_snippet_9\n\nLANGUAGE: golang\nCODE:\n```\nimport (\n    \"github.com/SAP/jenkins-library/pkg/piperutils\"\n)\n\ntype myStepUtils interface {\n    fileExists(path string) (bool, error)\n    fileRead(path string) ([]byte, error)\n}\n\ntype myUtilsData struct {\n    fileUtils piperutils.Files\n}\n\nfunc (u *myUtilsData) fileExists(path string) (bool, error) {\n    return u.fileUtils.FileExists(path)\n}\n\nfunc (u *myUtilsData) fileRead(path string) ([]byte, error) {\n    return u.fileUtils.FileRead(path)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Jenkins Pipeline Step Documentation Structure in Markdown\nDESCRIPTION: This snippet outlines the structure for documenting a Jenkins pipeline step. It uses placeholders that will be replaced with actual content during documentation generation.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/gradleExecuteBuild.md#2025-04-16_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# ${docGenStepName}\\n\\n## ${docGenDescription}\\n\\n## ${docGenParameters}\\n\\n## ${docGenConfiguration}\n```\n\n----------------------------------------\n\nTITLE: Setting Artifact Version with Maven in Jenkins Pipeline\nDESCRIPTION: Example of using the artifactSetVersion step in a Jenkins pipeline with Maven as the build tool. The script parameter refers to the current script context.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/artifactSetVersion.md#2025-04-16_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nartifactSetVersion script: this, buildTool: 'maven'\n```\n\n----------------------------------------\n\nTITLE: Basic Change Document Status Check in Groovy\nDESCRIPTION: Simple implementation of isChangeInDevelopment check that throws an AbortException if the change is not in development status.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/isChangeInDevelopment.md#2025-04-16_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\n// pipeline script\n  isChangeInDevelopment( script: this )\n  ...\n```\n\n----------------------------------------\n\nTITLE: Using Document Generation Variables in Markdown Template\nDESCRIPTION: This snippet shows the template structure using document generation variables that will be populated with content during the build process. The variables like docGenStageName, docGenDescription, etc. are placeholders that will be replaced with actual stage documentation.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/stages/release.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# ${docGenStageName}\n\n${docGenDescription}\n\n## ${docGenStageContent}\n\n## ${docGenStageActivation}\n\n## ${docGenStepActivation}\n\n## ${docGenStageParameters}\n\n## ${docGenStageConfiguration}\n```\n\n----------------------------------------\n\nTITLE: Direct Groovy Pipeline Configuration\nDESCRIPTION: Full Groovy pipeline configuration with direct credential specification\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/abapEnvironmentCloneGitRepo.md#2025-04-16_snippet_4\n\nLANGUAGE: groovy\nCODE:\n```\nabapEnvironmentCloneGitRepo (\n  script: this,\n  repositoryName: '/DMO/GIT_REPOSITORY',\n  branchName: 'my-demo-branch',\n  abapCredentialsId: 'abapCredentialsId',\n  host: '1234-abcd-5678-efgh-ijk.abap.eu10.hana.ondemand.com'\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring SAP_COM_0582 Scenario in JSON\nDESCRIPTION: This JSON configuration sets up the SAP_COM_0582 scenario for the ABAP add-on build process. It specifies the scenario ID and type, which are required for the AAKaaS service.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/pipelines/abapEnvironment/stages/build.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scenario_id\": \"SAP_COM_0582\",\n  \"type\": \"basic\"\n}\n```\n\n----------------------------------------\n\nTITLE: Cloud Foundry Groovy Pipeline Configuration\nDESCRIPTION: Groovy pipeline configuration using Cloud Foundry service key\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/abapEnvironmentCloneGitRepo.md#2025-04-16_snippet_5\n\nLANGUAGE: groovy\nCODE:\n```\nabapEnvironmentCloneGitRepo (\n  script: this,\n  repositoryName: '/DMO/GIT_REPOSITORY',\n  branchName: 'my-demo-branch'\n  abapCredentialsId: 'cfCredentialsId',\n  cfApiEndpoint: 'https://test.server.com',\n  cfOrg: 'cfOrg',\n  cfSpace: 'cfSpace',\n  cfServiceInstance: 'cfServiceInstance',\n  cfServiceKeyName: 'cfServiceKeyName'\n)\n```\n\n----------------------------------------\n\nTITLE: Git Commit Message Example for Change Document\nDESCRIPTION: Example showing the required format for Git commit messages to reference SAP Solution Manager change documents, with mandatory blank line between header and description.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/scenarios/changeManagement.md#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nFix terminology in documentation\n\nTerminology must be consistent with official channels.\nChangeDocument: <Your Change Document ID>\n```\n\n----------------------------------------\n\nTITLE: Initializing Version Object in Groovy\nDESCRIPTION: Demonstrates the correct way to initialize a Version object in Groovy, avoiding the use of named parameters which are not supported by Jenkins.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/DEVELOPMENT.md#2025-04-16_snippet_17\n\nLANGUAGE: Groovy\nCODE:\n```\nVersion javaVersion = new Version(1, 8)\n```\n\n----------------------------------------\n\nTITLE: SOLMAN and CTS Upload Implementation Examples\nDESCRIPTION: Basic examples showing how to implement transport request uploads for both SOLMAN and CTS systems.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/transportRequestUploadFile.md#2025-04-16_snippet_5\n\nLANGUAGE: groovy\nCODE:\n```\n// SOLMAN\ntransportRequestUploadFile(\n  script: this,\n  changeDocumentId: '001',   // typically provided via git commit history\n  transportRequestId: '001', // typically provided via git commit history\n  applicationId: '001',\n  filePath: '/path',\n  changeManagement: [\n    type: 'SOLMAN'\n    endpoint: 'https://example.org/cm'\n  ]\n)\n// CTS\n\ntransportRequestUploadFile(\n  script: this,\n  transportRequestId: '001', // typically provided via git commit history\n  changeManagement: [\n    type: 'CTS'\n    endpoint: 'https://example.org/cm',\n    client: '099',\n  ],\n  applicationName: 'myApp',\n  abapPackage: 'MYPACKAGE',\n)\n```\n\n----------------------------------------\n\nTITLE: Getting Pipeline Measurement Value in Groovy\nDESCRIPTION: Example showing how to retrieve a specific pipeline measurement value collected using the durationMeasure step.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/commonPipelineEnvironment.md#2025-04-16_snippet_2\n\nLANGUAGE: groovy\nCODE:\n```\ndef myMeasurementValue = commonPipelineEnvironment.getPipelineMeasurement('build_stage_duration')\n```\n\n----------------------------------------\n\nTITLE: Using Jenkins Input Step for Runtime ID Specification in Groovy\nDESCRIPTION: This Groovy snippet shows how to use the Jenkins pipeline 'input' step to specify the transport request ID at runtime. It prompts the user for input during pipeline execution.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/transportRequestUploadRFC.md#2025-04-16_snippet_2\n\nLANGUAGE: groovy\nCODE:\n```\ndef ids = input( message: \"Upload?\",\n    parameters: [\n        string(name: 'TRANSPORT_REQUEST_ID',description: 'Transport Request ID')\n    ]\n)\n\ntransportRequestUploadRFC(\n    script:this,\n    transportRequestId: ids['TRANSPORT_REQUEST_ID'],\n    ...\n)\n```\n\n----------------------------------------\n\nTITLE: Jenkins Stage Documentation Template Structure\nDESCRIPTION: Markdown template structure with placeholders for generating stage documentation in Jenkins pipelines. Uses variables prefixed with ${docGen} that will be populated during documentation generation.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/stages/promote.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# ${docGenStageName}\\n\\n${docGenDescription}\\n\\n## ${docGenStageContent}\\n\\n## ${docGenStageActivation}\\n\\n## ${docGenStepActivation}\\n\\n## ${docGenStageParameters}\\n\\n## ${docGenStageConfiguration}\n```\n\n----------------------------------------\n\nTITLE: Setting Kubernetes Environment Variable\nDESCRIPTION: Shell command to enable Kubernetes support by setting the ON_K8S environment variable.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/dockerExecute.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# set environment variable\nexport ON_K8S=true\"\n```\n\n----------------------------------------\n\nTITLE: Defining Repository Configuration in YAML\nDESCRIPTION: Repository configuration file (repositories.yml) that specifies software components to be cloned, including name, branch, optional commit ID and tag.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/pipelines/abapEnvironment/stages/cloneRepositories.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nrepositories:\n  - name: '/DMO/SWC'\n    branch: 'main'\n    commitID: 'cd87a3cac2bc946b7629580e58598c3db56a26f8' #optional\n    tag: 'myTag' #optional\n```\n\n----------------------------------------\n\nTITLE: Defining AUnit Test Configuration in YAML\nDESCRIPTION: YAML configuration for AUnit tests that specifies test scope, risk levels, duration settings, and the software components to be tested.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/pipelines/abapEnvironment/stages/test.md#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: My AUnit run\ncontext: AUnit test run\noptions:\n  measurements: none\n  scope:\n    ownTests: true\n    foreignTests: true\n  riskLevel:\n    harmless: true\n    dangerous: true\n    critical: true\n  duration:\n    short: true\n    medium: true\n    long: true\nobjectSet:\n  softwarecomponents:\n  - name: Z_TEST_SC\n  - name: Z_TEST_SC2\n```\n\n----------------------------------------\n\nTITLE: Defining OAuth Access Token in JSON\nDESCRIPTION: This JSON snippet defines an object with a single property 'access_token' set to a placeholder value 'myOAuthToken'. This structure is commonly used to store and transmit OAuth tokens for authentication purposes in web applications or API integrations.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/test/resources/TransportManagementService/responseAuth.txt#2025-04-16_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"access_token\": \"myOAuthToken\"\n}\n```\n\n----------------------------------------\n\nTITLE: VS Code Debugging Configuration\nDESCRIPTION: Launch configuration for debugging Piper executables in VS Code, including program path and argument specifications.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/DEVELOPMENT.md#2025-04-16_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    // Use IntelliSense to learn about possible attributes.\n    // Hover to view descriptions of existing attributes.\n    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"name\": \"Launch\",\n            \"type\": \"go\",\n            \"request\": \"launch\",\n            \"mode\": \"exec\",\n            \"program\": \"C:/CF@HCP/git/jenkins-library-public/piper.exe\",\n            \"env\": {},\n            \"args\": [\"checkmarxExecuteScan\", \"--password\", \"abcd\", \"--username\", \"1234\", \"--projectName\", \"testProject4711\", \"--serverUrl\", \"https://cx.server.com/\"]\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Logging in Go with Logrus\nDESCRIPTION: Example of using the Logrus logging framework in Go for info and error logging.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/DEVELOPMENT.md#2025-04-16_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"github.com/SAP/jenkins-library/pkg/log\"\n)\n\nfunc myStep {\n    log.Entry().Info(\"This is my info.\")\n    if err != nil {\n        log.Entry().\n            WithError(err).\n            Fatal(\"failed to execute step ...\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Invoking checkChangeInDevelopment Step in Groovy\nDESCRIPTION: Examples of how to invoke the checkChangeInDevelopment step in a Groovy script. It shows both a simple case with default parameters and a more complex case with explicit parameter overrides.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/checkChangeInDevelopment.md#2025-04-16_snippet_3\n\nLANGUAGE: groovy\nCODE:\n```\n// simple case. All mandatory parameters provided via\n// configuration, changeDocumentId provided via commit\n// history\ncheckChangeInDevelopment script:this\n\n// explicit endpoint provided, we search for changeDocumentId\n// starting at the previous commit (HEAD~1) rather than on\n// 'origin/master' (the default).\ncheckChangeInDevelopment(\n  script: this\n  changeManagement: [\n    endpoint: 'https:example.org/cm'\n    git: [\n      from: 'HEAD~1'\n    ]\n  ]\n)\n```\n\n----------------------------------------\n\nTITLE: SAP Solution Manager Configuration in YAML\nDESCRIPTION: Configuration example for SAP Solution Manager credentials, endpoints, and docker image settings in YAML format.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/isChangeInDevelopment.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# config.yaml\ngeneral:\n  changeManagement:\n    credentialsId: 'SOLMAN_CRED_ID'\n    endpoint: 'https://example.org/cm/solman/endpoint'\n\nsteps:\n  isChangeInDevelopment:\n    dockerImage: 'ppiper/cm-client:3.0.0.0'\n\n  transportRequestUploadSOLMAN:\n    dockerImage: 'ppiper/cm-client:3.0.0.0'\n    applicationId: 'APPID',\n    filePath: '/path/file.ext',\n```\n\n----------------------------------------\n\nTITLE: Basic Piper CLI Commands\nDESCRIPTION: Essential commands for verifying Piper version and accessing help documentation\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/cli/index.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npiper version\n```\n\nLANGUAGE: bash\nCODE:\n```\npiper help\n```\n\n----------------------------------------\n\nTITLE: Configuring Direct ABAP System Access in config.yml\nDESCRIPTION: YAML configuration for accessing the ABAP environment directly using host and credentials, which requires a properly configured Communication Arrangement.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/abapEnvironmentAssemblePackages.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  abapEnvironmentAssemblePackages:\n    abapCredentialsId: 'abapCredentialsId',\n    host: 'https://myABAPendpoint.com',\n```\n\n----------------------------------------\n\nTITLE: InfluxDB Query Examples\nDESCRIPTION: Sample InfluxDB queries for retrieving build data in Grafana dashboards.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/influxWriteData.md#2025-04-16_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nselect top(build_number,10), build_result from jenkins_data WHERE build_result = 'SUCCESS'\n```\n\nLANGUAGE: sql\nCODE:\n```\nselect top(build_number,10), build_result, build_step from jenkins_custom_data WHERE build_result = 'FAILURE'\n```\n\nLANGUAGE: sql\nCODE:\n```\nselect build_duration / 1000 from \"pipeline_data\" WHERE project_name='PiperTestOrg_piper_test_master'\n```\n\nLANGUAGE: sql\nCODE:\n```\nselect top(build_number,10) AS \"Build\", build_url, build_quality, fortify, gauge, vulas, opa from step_data WHERE project_name='PiperTestOrg_piper_test_master'\n```\n\n----------------------------------------\n\nTITLE: ATC System Configuration JSON with Priority Change\nDESCRIPTION: Example of an ATC System Configuration JSON file (atcSystemConfig.json) that creates or updates a configuration with a specific name and includes a priority change for a test.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/abapEnvironmentPushATCSystemConfig.md#2025-04-16_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"conf_name\": \"myATCSystemConfigurationName\",\n  \"checkvariant\": \"SAP_CLOUD_PLATFORM_ATC_DEFAULT\",\n  \"block_findings\": \"0\",\n  \"inform_findings\": \"1\",\n  \"_priorities\": [\n    {\n      \"test\": \"CL_CI_TEST_AMDP_HDB_MIGRATION\",\n      \"message_id\": \"FAIL_ABAP\",\n      \"priority\": 2\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ATC Stage without System Configuration in YAML\nDESCRIPTION: YAML configuration for the ATC (ABAP Test Cockpit) stage without custom system configuration. Defines Cloud Foundry connection parameters and references an ATC configuration file.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/pipelines/abapEnvironment/stages/test.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ngeneral:\n  cfApiEndpoint: 'https://api.cf.sap.hana.ondemand.com'\n  cfOrg: 'myOrg'\n  cfSpace: 'mySpace'\n  cfCredentialsId: 'cfAuthentification'\n  cfServiceInstance: 'abap_system'\nstages:\n  ATC:\n    atcConfig: 'atcConfig.yml'\n```\n\n----------------------------------------\n\nTITLE: Conditional Printing of MTA and NPM Modules in Groovy\nDESCRIPTION: This set of snippets conditionally prints MTA and NPM module information if shareConfidentialInformation is true.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/resources/com.sap.piper/templates/debug_report.txt#2025-04-16_snippet_4\n\nLANGUAGE: groovy\nCODE:\n```\n<% print modulesMap && shareConfidentialInformation ? \"#### MTA Modules\" : \"\" %>\n\n<% print modulesMap && shareConfidentialInformation ? \"Type | Path\" : \"\" %>\n<% print modulesMap && shareConfidentialInformation ? \"-----|-----\" : \"\" %>\n<% print modulesMap && shareConfidentialInformation ? modulesMap.collect({each -> \"${each.key} | ${each.value}\"}).join(\"\\n\") : \"\" %>\n\n<% print npmModules && shareConfidentialInformation ? \"#### NPM Modules\" : \"\" %>\n\n<% print npmModules && shareConfidentialInformation ? \"Path | Scripts\" : \"\" %>\n<% print npmModules && shareConfidentialInformation ? \"-----|--------\" : \"\" %>\n<% print npmModules && shareConfidentialInformation ? npmModules.collect({each -> \"${each.basePath} | ${each.npmScripts}\"}).join(\"\\n\") : \"\" %>\n```\n\n----------------------------------------\n\nTITLE: Configuring Vault Secret Resource Reference in YAML\nDESCRIPTION: YAML configuration example showing how to define a parameter that references a secret stored in Vault. The configuration specifies a token parameter for Sonar authentication with multiple vault lookup paths using variable interpolation.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/developer_hints/VaultResourceReference.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- name: token\n        type: string\n        description: \"Token used to authenticate with the Sonar Server.\"\n        scope:\n          - PARAMETERS\n        secret: true\n        resourceRef:\n          - type: vaultSecret\n            paths:\n            - $(vaultBasePath)/$(vaultPipelineName)/sonar\n            - $(vaultBasePath)/__group/sonar\n```\n\n----------------------------------------\n\nTITLE: SAPUI5 Build Configuration in package.json\nDESCRIPTION: NPM package configuration for SAPUI5 application build setup\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/transportRequestUploadCTS.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"scripts\": {\n      \"start\": \"ui5 serve\",\n      \"test\": \"npm run lint\",\n      \"build\": \"ui5 build --clean-dest\"\n   },\n   \"dependencies\": {},\n   \"devDependencies\": {\n      \"@ui5/cli\": \"^2.11.2\"\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Image for SAP Fiori Tools\nDESCRIPTION: Dockerfile configuration to create a Node.js based Docker image with SAP Fiori tools installed\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/transportRequestUploadCTS.md#2025-04-16_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM node\nUSER root\nRUN npm install -global @ui5/cli @sap/ux-ui5-tooling @ui5/logger @ui5/fs\nUSER node\n```\n\n----------------------------------------\n\nTITLE: Minimal YAML Configuration for AUnit Test on Software Component\nDESCRIPTION: A minimal AUnit configuration file example that specifies a software component to be tested. This is the recommended approach for testing complete software components.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/abapEnvironmentRunAUnitTest.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: My AUnit run\ncontext: My unit tests\nobjectset:\n  softwarecomponents:\n    - name: /DMO/SWC\n```\n\n----------------------------------------\n\nTITLE: Piper Shell Completion Help\nDESCRIPTION: Command to access information about setting up shell completion for Piper CLI\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/cli/index.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npiper completion --help\n```\n\n----------------------------------------\n\nTITLE: Passing Credentials via Environment Variables\nDESCRIPTION: Example showing how to pass credentials through environment variables using templating in runOptions.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/newmanExecute.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nrunOptions: [\n    \"run\", \"{{.NewmanCollection}}\",\n    \"--environment\", \"{{.Config.NewmanEnvironment}}\",\n    \"--env-var\", \"username={{getenv \\\"PIPER_TESTCREDENTIAL_USERNAME\\\"}}\",\n    \"--env-var\", \"password={{getenv \\\"PIPER_TESTCREDENTIAL_PASSWORD\\\"}}\"\n]\n```\n\n----------------------------------------\n\nTITLE: Simple ATC System Configuration JSON\nDESCRIPTION: Basic example of an ATC System Configuration JSON file (atcSystemConfig.json) that creates or updates a configuration with a specific name and default settings.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/abapEnvironmentPushATCSystemConfig.md#2025-04-16_snippet_6\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"conf_name\": \"myATCSystemConfigurationName\",\n  \"checkvariant\": \"SAP_CLOUD_PLATFORM_ATC_DEFAULT\",\n  \"block_findings\": \"0\",\n  \"inform_findings\": \"1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Add-on Product Configuration in addon.yml\nDESCRIPTION: This YAML file defines the add-on product and its components that will be installed during the Integration Tests stage. It specifies the product identifier, version, and repositories with their respective component names, branches, versions, and commit IDs.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/pipelines/abapEnvironment/stages/integrationTest.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\naddonProduct: /NAMESPC/PRODUCTX\naddonVersion: 1.2.0\nrepositories:\n  - name: /NAMESPC/COMPONENTA\n    branch: v1.2.0\n    version: 1.2.0\n    commitID: 7d4516e9\n  - name: /NAMESPC/COMPONENTB\n    branch: v2.0.0\n    version: 2.0.0\n    commitID: 9f102ffb\n```\n\n----------------------------------------\n\nTITLE: Conditional Printing of Git Repository Information in Groovy\nDESCRIPTION: This snippet conditionally prints Git repository information if shareConfidentialInformation is true.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/resources/com.sap.piper/templates/debug_report.txt#2025-04-16_snippet_6\n\nLANGUAGE: groovy\nCODE:\n```\n<% print shareConfidentialInformation ? \"## Git Repository\" : \"\" %>\n\n<% print shareConfidentialInformation ? gitRepo ? \"\" : \"Git isn't used for version control\" : \"\" %>\n\n<% print gitRepo && shareConfidentialInformation ? \"Repository | Branch\" : \"\" %>\n<% print gitRepo && shareConfidentialInformation ? \"-----------|-------\" : \"\" %>\n<% print gitRepo && shareConfidentialInformation ? \"${gitRepo.get(\"URI\")} | ${gitRepo.get(\"branch\")}\" : \"\" %>\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Commit Range for transportRequestReqIDFromGit\nDESCRIPTION: This YAML snippet demonstrates how to configure the gitFrom parameter for the transportRequestReqIDFromGit step. It specifies a commit hash to set the starting point of the Git commit range to be searched for transport request IDs.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/transportRequestReqIDFromGit.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  transportRequestReqIDFromGit:\n    gitFrom: '4378bb4'\n```\n\n----------------------------------------\n\nTITLE: Defining Jenkins Pipeline Step Documentation Structure in Markdown\nDESCRIPTION: This snippet outlines the structure for documenting a Jenkins pipeline step. It uses placeholders that will be replaced with actual content during documentation generation.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/imagePushToRegistry.md#2025-04-16_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# ${docGenStepName}\\n\\n## ${docGenDescription}\\n\\n## ${docGenParameters}\\n\\n## ${docGenConfiguration}\n```\n\n----------------------------------------\n\nTITLE: Docker Build and Push Commands\nDESCRIPTION: Shell commands for building and pushing the Fiori tools Docker image to Docker Hub\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/transportRequestUploadCTS.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t my/fiori-node .\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker push my/fiori-node\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Environment Variables for NPM Tests in YAML\nDESCRIPTION: Configuration for adding custom environment variables and paths to the npmExecuteTests step.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/npmExecuteTests.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nstages:\n  - name: Test\n    steps:\n      - name: npmExecuteTests\n        type: npmExecuteTests\n        params:\n          envs:\n            - \"MY_ENV_VAR=value\"\n          paths:\n            - \"/path/to/add\"\n```\n\n----------------------------------------\n\nTITLE: Printing Environment Details in Groovy\nDESCRIPTION: This snippet prints environment details including the environment name, build details, and Docker image.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/resources/com.sap.piper/templates/debug_report.txt#2025-04-16_snippet_3\n\nLANGUAGE: groovy\nCODE:\n```\n`${environment.get(\"environment\")}`\n\n#### Environment Variables\nEnvironment Variable | Value\n---------------------|------\n<% print environment.get(\"build_details\").collect({each -> \"${each}\"}).join(\"\\n\") %>\n\n#### Docker Image\n`${environment.get(\"docker_image\")}`\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration for Integration Test\nDESCRIPTION: YAML configuration example showing how to set up integration test parameters including service key credentials, flow ID, content type, and message body path in the pipeline config file.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/integrationArtifactTriggerIntegrationTest.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  <...>\n  integrationArtifactTriggerIntegrationTest:\n    integrationFlowServiceKeyCredentialsId: 'MY_INTEGRATION_FLOW_SERVICE_KEY'\n    integrationFlowId: 'INTEGRATION_FLOW_ID'\n    contentType: 'text/plain'\n    messageBodyPath: 'myIntegrationsTest/testBody'\n```\n\n----------------------------------------\n\nTITLE: CommonPipelineEnvironment JSON Structure for Package Information\nDESCRIPTION: JSON structure required in the CommonPipelineEnvironment that defines the package information including repositories, versions, patch levels, and other metadata needed for assembly.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/abapEnvironmentAssemblePackages.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\"addonProduct\":\"\",\n\"addonVersion\":\"\",\n\"addonVersionAAK\":\"\",\n\"addonUniqueID\":\"\",\n\"customerID\":\"\",\n\"AddonSpsLevel\":\"\",\n\"AddonPatchLevel\":\"\",\n\"TargetVectorID\":\"\",\n\"repositories\":[\n  {\n    \"name\":\"/DMO/REPO_A\",\n    \"tag\":\"\",\n    \"branch\":\"\",\n    \"version\":\"\",\n    \"versionAAK\":\"0001\",\n    \"PackageName\":\"SAPK001001REPOA\",\n    \"PackageType\":\"CPK\",\n    \"SpLevel\":\"0000\",\n    \"PatchLevel\":\"0001\",\n    \"PredecessorCommitID\":\"cbb834e9e03cde177d2f109a6676901972983fbc\",\n    \"Status\":\"P\",\n    \"Namespace\":\"/DMO/\",\n    \"SarXMLFilePath\":\"\"\n  },\n  {\n    \"name\":\"/DMO/REPO_B\",\n    \"tag\":\"\",\n    \"branch\":\"\",\n    \"version\":\"\",\n    \"versionAAK\":\"0002\",\n    \"PackageName\":\"SAPK002001REPOB\",\n    \"PackageType\":\"CPK\",\n    \"SpLevel\":\"0001\",\n    \"PatchLevel\":\"0001\",\n    \"PredecessorCommitID\":\"2f7d43923c041a07a76c8adc859c737ad772ef26\",\n    \"Status\":\"P\",\n    \"Namespace\":\"/DMO/\",\n    \"SarXMLFilePath\":\"\"\n  }\n]}\n```\n\n----------------------------------------\n\nTITLE: Configuring ATC Check for Software Components Only (YAML)\nDESCRIPTION: Example atcconfig.yml file specifying only software components to be checked in an ATC run.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/abapEnvironmentRunATCCheck.md#2025-04-16_snippet_6\n\nLANGUAGE: YAML\nCODE:\n```\nobjectset:\n  softwarecomponents:\n    - name: TestComponent\n    - name: TestComponent2\n```\n\n----------------------------------------\n\nTITLE: Configuring TMS MTA Extension Update Parameters in JSON\nDESCRIPTION: JSON configuration object that defines the parameters for updating an MTA extension in SAP TMS. Includes fields for operation ID, description, MTA ID, MTA extension ID, and version number.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/test/resources/TransportManagementService/responseExtDescriptorUpdate.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 456,\n    \"description\": \"tms mtaext update\",\n    \"mtaId\": \"com.sap.piper.tms.test\",\n    \"mtaExtId\": \"com.sap.piper.tms.test.another.extension\",\n    \"mtaVersion\": \"1.0.1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Confidentiality Status in Groovy\nDESCRIPTION: This snippet dynamically prints 'Confidential' or 'Redacted' based on the shareConfidentialInformation variable.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/resources/com.sap.piper/templates/debug_report.txt#2025-04-16_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\n<% print shareConfidentialInformation ? \"Confidential\" : \"Redacted\" %>\n```\n\n----------------------------------------\n\nTITLE: Configuring Vault Test Credentials (Deprecated)\nDESCRIPTION: Legacy YAML configuration for fetching test credentials from Vault.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/infrastructure/vault.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ngeneral:\n  < your Vault configuration > # see above\n...\nsteps:\n  < piper go step >:\n    vaultTestCredentialPath: 'myTestStepCrecetials'\n    vaultTestCredentialKeys: ['myAppId', 'myAppSecret']\n```\n\n----------------------------------------\n\nTITLE: Downloading Latest Piper CLI Release\nDESCRIPTION: Command to download the latest version of the Piper CLI tool using wget\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/cli/index.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwget https://github.com/SAP/jenkins-library/releases/latest/download/piper\n```\n\n----------------------------------------\n\nTITLE: Configuring VSCode YAML Schema Settings\nDESCRIPTION: VSCode settings configuration to enable schema validation for YAML metadata files using the project's metadata.json schema. This configuration maps the schema file to all YAML files in the resources/metadata directory.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/resources/schemas/README.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"yaml.schemas\": {\n        \"./resources/schemas/metadata.json\": \"resources/metadata/*.yaml\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring abapEnvironmentPullGitRepo in config.yml (YAML)\nDESCRIPTION: Example configuration in config.yml file, specifying repository name, credentials, and host directly.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/abapEnvironmentPullGitRepo.md#2025-04-16_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nsteps:\n  abapEnvironmentPullGitRepo:\n    repositoryName: '/DMO/GIT_REPOSITORY'\n    abapCredentialsId: 'abapCredentialsId'\n    host: '1234-abcd-5678-efgh-ijk.abap.eu10.hana.ondemand.com'\n```\n\n----------------------------------------\n\nTITLE: Printing UTC Timestamp in Groovy\nDESCRIPTION: This code snippet prints the UTC timestamp of when the log was generated.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/resources/com.sap.piper/templates/debug_report.txt#2025-04-16_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\n`$utcTimestamp UTC`\n```\n\n----------------------------------------\n\nTITLE: Structuring Telemetry Data in JSON for Piper\nDESCRIPTION: This snippet shows the structure of telemetry data sent by Piper in case of a failure. It includes messages and telemetry information such as pipeline details, build information, and git repository data.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/configuration.md#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"messages\": [\n    {\n      \"time\": \"2021-04-28T17:59:19.9376454Z\",\n      \"message\": \"Project example pipeline exists...\",\n      \"data\": {\n        \"library\": \"\",\n        \"stepName\": \"checkmarxExecuteScan\"\n      }\n    }\n  ],\n  \"telemetry\": {\n    \"PipelineUrlHash\": \"73ece565feca07fa34330c2430af2b9f01ba5903\",\n    \"BuildUrlHash\": \"ec0aada9cc310547ca2938d450f4a4c789dea886\",\n    \"StageName\": \"\",\n    \"StepName\": \"checkmarxExecuteScan\",\n    \"ExitCode\": \"1\",\n    \"Duration\": \"52118\",\n    \"ErrorCode\": \"1\",\n    \"ErrorCategory\": \"undefined\",\n    \"CorrelationID\": \"https://example-jaasinstance.corp/job/myApp/job/microservice1/job/master/10/\",\n    \"CommitHash\": \"961ed5cd98fb1e37415a91b46a5b9bdcef81b002\",\n    \"Branch\": \"master\",\n    \"GitOwner\": \"piper\",\n    \"GitRepository\": \"piper-splunk\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Common Pipeline Environment Input Structure for abapEnvironmentAssembleConfirm (JSON)\nDESCRIPTION: Example JSON structure in the CommonPipelineEnvironment containing information about ABAP packages to be assembled, including repository details, versions, and package information required by the step.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/abapEnvironmentAssembleConfirm.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\"addonProduct\":\"\",\n\"addonVersion\":\"\",\n\"addonVersionAAK\":\"\",\n\"addonUniqueID\":\"\",\n\"customerID\":\"\",\n\"AddonSpsLevel\":\"\",\n\"AddonPatchLevel\":\"\",\n\"TargetVectorID\":\"\",\n\"repositories\":[\n  {\n    \"name\":\"/DMO/REPO_A\",\n    \"tag\":\"\",\n    \"branch\":\"\",\n    \"version\":\"\",\n    \"versionAAK\":\"0001\",\n    \"PackageName\":\"SAPK001001REPOA\",\n    \"PackageType\":\"CPK\",\n    \"SpLevel\":\"0000\",\n    \"PatchLevel\":\"0001\",\n    \"PredecessorCommitID\":\"cbb834e9e03cde177d2f109a6676901972983fbc\",\n    \"Status\":\"P\",\n    \"Namespace\":\"/DMO/\",\n    \"SarXMLFilePath\":\"\"\n  },\n  {\n    \"name\":\"/DMO/REPO_B\",\n    \"tag\":\"\",\n    \"branch\":\"\",\n    \"version\":\"\",\n    \"versionAAK\":\"0002\",\n    \"PackageName\":\"SAPK002001REPOB\",\n    \"PackageType\":\"CPK\",\n    \"SpLevel\":\"0001\",\n    \"PatchLevel\":\"0001\",\n    \"PredecessorCommitID\":\"2f7d43923c041a07a76c8adc859c737ad772ef26\",\n    \"Status\":\"P\",\n    \"Namespace\":\"/DMO/\",\n    \"SarXMLFilePath\":\"\"\n  }\n]}\n```\n\n----------------------------------------\n\nTITLE: Configuring ATC Check with Variant and Configuration (YAML)\nDESCRIPTION: Example atcconfig.yml file specifying check variant, configuration, and software components for an ATC run.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/abapEnvironmentRunATCCheck.md#2025-04-16_snippet_7\n\nLANGUAGE: YAML\nCODE:\n```\ncheckvariant: \"TestCheckVariant\"\nconfiguration: \"TestConfiguration\"\nobjectset:\n  softwarecomponents:\n    - name: TestComponent\n    - name: TestComponent2\n```\n\n----------------------------------------\n\nTITLE: Defining Constructor in Jenkins Library Script (Groovy)\nDESCRIPTION: A placeholder for demonstrating how to define and use a constructor in a Jenkins library script. The example would show the proper syntax and usage of the constructor with its parameters.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/template/script.md#2025-04-16_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\n```groovy\n\n```\n```\n\n----------------------------------------\n\nTITLE: Adding Step Configuration in Markdown\nDESCRIPTION: Placeholder for inserting the step configuration details in the documentation using a variable.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/fortifyExecuteScan.md#2025-04-16_snippet_3\n\nLANGUAGE: Markdown\nCODE:\n```\n## ${docGenConfiguration}\n```\n\n----------------------------------------\n\nTITLE: Cloud Foundry YAML Configuration\nDESCRIPTION: YAML configuration using Cloud Foundry service key for authentication\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/abapEnvironmentCloneGitRepo.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  abapEnvironmentCloneGitRepo:\n    repositories: 'repositories.yml'\n    cfCredentialsId: 'cfCredentialsId'\n    cfApiEndpoint: 'https://test.server.com'\n    cfOrg: 'cfOrg'\n    cfSpace: 'cfSpace'\n    cfServiceInstance: 'cfServiceInstance'\n    cfServiceKeyName: 'cfServiceKeyName'\n```\n\n----------------------------------------\n\nTITLE: String Interpolation in Groovy\nDESCRIPTION: Demonstrates the preferred way to use string interpolation in Groovy, avoiding unnecessary curly braces for simple variable or property access.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/DEVELOPMENT.md#2025-04-16_snippet_19\n\nLANGUAGE: Groovy\nCODE:\n```\necho \"[INFO] $name version $version.version is installed.\"\n```\n\n----------------------------------------\n\nTITLE: Defining File ID in JSON for SAP Jenkins Library\nDESCRIPTION: This JSON snippet defines a file identifier, likely used for internal file tracking or organization within the SAP Jenkins Library project. It associates a numeric ID with the file.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/test/resources/TransportManagementService/responseFileUpload.txt#2025-04-16_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"fileId\": 1234\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring neoDeploy Step with Cache Invalidation in YAML\nDESCRIPTION: Extended configuration for the neoDeploy step in a YAML file, including settings for cache invalidation of SAP Fiori launchpad sites.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/neoDeploy.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  <...>\n  neoDeploy:\n    neo:\n      account: <myDeployAccount>\n      host: hana.example.org\n      credentialsId: 'my-credentials-id'\n      invalidateCache: true\n      portalLandscape: \"cloudnwcportal\"\n      oauthCredentialId: <OAUTH_CREDENTIAL_ID>\n      siteId: <PORTAL_SITE_ID> # not required, if the default site is already set in the portal service (SAP BTP)\n```\n\n----------------------------------------\n\nTITLE: Inserting Step Description in Markdown\nDESCRIPTION: Placeholder for the step description. This section will contain a detailed explanation of what the step does and its purpose in the pipeline.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/pipelineCreateScanSummary.md#2025-04-16_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n## ${docGenDescription}\n```\n\n----------------------------------------\n\nTITLE: Calling abapAddonAssemblyKitReleasePackages Step in Jenkinsfile\nDESCRIPTION: A minimal example showing how to call the abapAddonAssemblyKitReleasePackages step in a Jenkinsfile when the configuration is provided via config.yml.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/abapAddonAssemblyKitReleasePackages.md#2025-04-16_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nabapAddonAssemblyKitReleasePackages script: this\n```\n\n----------------------------------------\n\nTITLE: Invoking abapEnvironmentAssembleConfirm Step in Jenkinsfile (Groovy)\nDESCRIPTION: Simple example of calling the abapEnvironmentAssembleConfirm step in a Jenkinsfile, assuming configuration is provided in the config.yml file.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/abapEnvironmentAssembleConfirm.md#2025-04-16_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nabapEnvironmentAssembleConfirm script: this\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced ATC Check with Multi Property Set (YAML)\nDESCRIPTION: Example atcconfig.yml file demonstrating all possible properties of the Multi Property Set for advanced ATC run configurations.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/abapEnvironmentRunATCCheck.md#2025-04-16_snippet_8\n\nLANGUAGE: YAML\nCODE:\n```\ncheckvariant: \"TestCheckVariant\"\nconfiguration: \"TestConfiguration\"\nobjectset:\n  type: multiPropertySet\n  multipropertyset:\n    owners:\n      - name: demoOwner\n    softwarecomponents:\n      - name: demoSoftwareComponent\n    versions:\n      - value: ACTIVE\n    packages:\n      - name: demoPackage\n    packagetrees:\n      - name: TestPackageWithSubpackages\n    objectnamepatterns:\n      - value: 'ZCL_*'\n    languages:\n      - value: EN\n    sourcesystems:\n      - name: H01\n    objecttypes:\n      - name: CLAS\n    objecttypegroups:\n      - name: CLAS\n    releasestates:\n      - value: RELEASED\n    applicationcomponents:\n      - name: demoApplicationComponent\n    transportlayers:\n      - name: H01\n```\n\n----------------------------------------\n\nTITLE: Documentation Template with Placeholder Variables for Jenkins Pipeline Stages\nDESCRIPTION: A markdown template that defines the structure for Jenkins pipeline stage documentation. Contains placeholder variables (prefixed with ${docGen}) that will be replaced during documentation generation with actual stage details.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/stages/performance.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# ${docGenStageName}\n\n${docGenDescription}\n\n## ${docGenStageContent}\n\n## ${docGenStageActivation}\n\n## ${docGenStepActivation}\n\n## ${docGenStageParameters}\n\n## ${docGenStageConfiguration}\n```\n\n----------------------------------------\n\nTITLE: Documentation Template Structure in Markdown\nDESCRIPTION: Basic structure of a step documentation template with placeholders for step name, description, parameters and configuration. The placeholders are replaced during documentation generation.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/checkmarxExecuteScan.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# ${docGenStepName}\\n\\n## ${docGenDescription}\\n\\n## ${docGenParameters}\\n\\n## ${docGenConfiguration}\n```\n\n----------------------------------------\n\nTITLE: Listing Considered Options in Markdown\nDESCRIPTION: This snippet demonstrates how to list the options considered for the architectural decision. It uses markdown bullet points to enumerate different ADR formats and templates.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/adr/20221004-use-markdown-architectural-decision-records.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## Considered Options\n\n- [MADR](https://adr.github.io/madr/) 2.1.2 with Log4brains patch\n- [MADR](https://adr.github.io/madr/) 2.1.2 – The original Markdown Architectural Decision Records\n- [Michael Nygard's template](http://thinkrelevance.com/blog/2011/11/15/documenting-architecture-decisions) – The first incarnation of the term \"ADR\"\n- [Sustainable Architectural Decisions](https://www.infoq.com/articles/sustainable-architectural-design-decisions) – The Y-Statements\n- Other templates listed at <https://github.com/joelparkerhenderson/architecture_decision_record>\n- Formless – No conventions for file format and structure\n```\n\n----------------------------------------\n\nTITLE: Printing Plugin Information in Groovy\nDESCRIPTION: This snippet prints a list of plugins used in the build, including their shortname, version, and displayname.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/resources/com.sap.piper/templates/debug_report.txt#2025-04-16_snippet_5\n\nLANGUAGE: groovy\nCODE:\n```\n<% print plugins ? \"\" : \"No plugins were used for this build.\" %>\n\n<details><summary>Full list of plugins</summary>\n<p>\n\n<% print plugins ? \"Shortname | Version | Displayname\" : \"\" %>\n<% print plugins ? \"----------|---------|------------\" : \"\" %>\n<% print plugins.collect({each -> \"${each}\"}).join(\"\\n\") %>\n\n</p>\n</details>\n```\n\n----------------------------------------\n\nTITLE: Defining Jenkins Pipeline Step Documentation Structure in Markdown\nDESCRIPTION: This snippet outlines the structure for documenting a Jenkins pipeline step. It includes sections for the step name, prerequisites, parameters, configuration, and plugin dependencies. The placeholders are likely filled in dynamically during documentation generation.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/pipelineStashFilesAfterBuild.md#2025-04-16_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# ${docGenStepName}\\n\\n## Prerequisites\\n\\nnone\\n\\n## ${docGenParameters}\\n\\n## ${docGenConfiguration}\\n\\n## ${docJenkinsPluginDependencies}\n```\n\n----------------------------------------\n\nTITLE: Basic Newman Execution in Pipeline\nDESCRIPTION: Simple example of executing Newman tests in a Jenkins pipeline.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/newmanExecute.md#2025-04-16_snippet_3\n\nLANGUAGE: groovy\nCODE:\n```\nnewmanExecute script: this\n```\n\n----------------------------------------\n\nTITLE: Generating Step Name in Markdown\nDESCRIPTION: Placeholder for the step name in the documentation. This will be replaced with the actual step name during documentation generation.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/pipelineCreateScanSummary.md#2025-04-16_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# ${docGenStepName}\n```\n\n----------------------------------------\n\nTITLE: Minimal Groovy Pipeline Step Call\nDESCRIPTION: Basic call of the abapEnvironmentCheckoutBranch step in a Jenkinsfile that relies on configuration from config.yml\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/abapEnvironmentCheckoutBranch.md#2025-04-16_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nabapEnvironmentCheckoutBranch script: this\n```\n\n----------------------------------------\n\nTITLE: Markdown Template for Jenkins Library Step Documentation\nDESCRIPTION: A markdown template with placeholders for generating documentation for a step in SAP's jenkins-library. The template includes sections for step name, description, prerequisites, parameters, configuration, plugin dependencies, exceptions, and examples.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/ascAppUpload.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# ${docGenStepName}\n\n## ${docGenDescription}\n\n## Prerequisites\n\n* **ASC Instance** - have an ASC instance set up\n* **ASC App** - have an app in ASC\n\n## ${docGenParameters}\n\n## ${docGenConfiguration}\n\n## ${docJenkinsPluginDependencies}\n\n## Exceptions\n\nnone\n\n## Examples\n```\n\n----------------------------------------\n\nTITLE: Defining Jenkins Pipeline Stage Documentation Structure in Markdown\nDESCRIPTION: This snippet outlines the structure for documenting a Jenkins pipeline stage. It includes placeholders for the stage name, description, content, activation, step activation, parameters, and configuration.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/stages/init.md#2025-04-16_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# ${docGenStageName}\\n\\n${docGenDescription}\\n\\n## ${docGenStageContent}\\n\\n## ${docGenStageActivation}\\n\\n## ${docGenStepActivation}\\n\\n## ${docGenStageParameters}\\n\\n## ${docGenStageConfiguration}\n```\n\n----------------------------------------\n\nTITLE: Defining Jenkins Library Step Documentation Structure in Markdown\nDESCRIPTION: This snippet outlines the structure for documenting a Jenkins library step. It includes placeholders for the step name, description, parameters, and configuration details.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/writeTemporaryCredentials.md#2025-04-16_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# ${docGenStepName}\\n\\n## ${docGenDescription}\\n\\n## ${docGenParameters}\\n\\n## ${docGenConfiguration}\n```\n\n----------------------------------------\n\nTITLE: Adding Related Links in Markdown\nDESCRIPTION: This snippet demonstrates how to include related links in the ADR document. It uses markdown link syntax to reference another ADR file.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/adr/20221004-use-markdown-architectural-decision-records.md#2025-04-16_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n## Links\n\n- Relates to [Use Log4brains to manage the ADRs](20221004-use-log4brains-to-manage-the-adrs.md)\n```\n\n----------------------------------------\n\nTITLE: Version String Specification\nDESCRIPTION: Semantic version number in X.Y.Z format indicating major, minor and patch versions.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/test/resources/versioning/PipArtifactVersioning/version.txt#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n1.2.3\n```\n\n----------------------------------------\n\nTITLE: Defining Jenkins Pipeline Step Documentation Structure in Markdown\nDESCRIPTION: This snippet outlines the structure for documenting a Jenkins pipeline step. It uses placeholders that will be replaced with actual content during documentation generation.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/piperPublishWarnings.md#2025-04-16_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# ${docGenStepName}\\n\\n## ${docGenDescription}\\n\\n## ${docGenParameters}\\n\\n## ${docGenConfiguration}\\n\\n## ${docJenkinsPluginDependencies}\n```\n\n----------------------------------------\n\nTITLE: Support Components Reference Table in Markdown\nDESCRIPTION: A markdown table that maps pipeline stages to their corresponding steps and support components. Includes links to documentation for each stage and step, organized by pipeline phase from initial checks through post-processing.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/scenarios/abapEnvironmentAddons.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Stage                                                                                                  | Steps                                                                                                                                                                                                                                                                                                                                                                                    | Support Component |\n|--------------------------------------------------------------------------------------------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-------------------|\n| [Initial Checks](https://www.project-piper.io/pipelines/abapEnvironment/stages/initialChecks/)         | [abapAddonAssemblyKitCheckPV](https://sap.github.io/jenkins-library/steps/abapAddonAssemblyKitCheckPV/), [abapAddonAssemblyKitCheckCVs](https://sap.github.io/jenkins-library/steps/abapAddonAssemblyKitCheckCVs/)                                                                                                                                                                       | BC-UPG-OCS        |\n| [Prepare System](https://www.project-piper.io/pipelines/abapEnvironment/stages/prepareSystem/)         | [abapEnvironmentCreateSystem](https://sap.github.io/jenkins-library/steps/abapEnvironmentCreateSystem/), [cloudFoundryCreateServiceKey](https://sap.github.io/jenkins-library/steps/cloudFoundryCreateServiceKey/)                                                                                                                                                                       | BC-CP-ABA         |\n```\n\n----------------------------------------\n\nTITLE: Markdown Homepage Content for ADR Documentation\nDESCRIPTION: Markdown content for the homepage of a Log4brains knowledge base, explaining ADR concepts, workflow and purpose for the Piper library project.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/adr/index.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- This file is the homepage of your Log4brains knowledge base. You are free to edit it as you want -->\n\n# Architecture knowledge base\n\nWelcome 👋 to the architecture knowledge base of Piper library.\nYou will find here all the Architecture Decision Records (ADR) of the project.\n\n## Definition and purpose\n\n> An Architectural Decision (AD) is a software design choice that addresses a functional or non-functional requirement that is architecturally significant.\n> An Architectural Decision Record (ADR) captures a single AD, such as often done when writing personal notes or meeting minutes; the collection of ADRs created and maintained in a project constitutes its decision log.\n\nAn ADR is immutable: only its status can change (i.e., become deprecated or superseded). That way, you can become familiar with the whole project history just by reading its decision log in chronological order.\nMoreover, maintaining this documentation aims at:\n\n- 🚀 Improving and speeding up the onboarding of a new team member\n- 🔭 Avoiding blind acceptance/reversal of a past decision (cf [Michael Nygard's famous article on ADRs](https://cognitect.com/blog/2011/11/15/documenting-architecture-decisions.html))\n- 🤝 Formalizing the decision process of the team\n\n## Usage\n\nThis website is automatically updated after a change on the `master` branch of the project's Git repository.\nIn fact, the developers manage this documentation directly with markdown files located next to their code, so it is more convenient for them to keep it up-to-date.\nYou can browse the ADRs by using the left menu or the search bar.\n\nThe typical workflow of an ADR is the following:\n\n![ADR workflow](/l4b-static/adr-workflow.png)\n\nThe decision process is entirely collaborative and backed by pull requests.\n\n## More information\n\n- [Log4brains documentation](https://github.com/thomvaill/log4brains/tree/master#readme)\n- [What is an ADR and why should you use them](https://github.com/thomvaill/log4brains/tree/master#-what-is-an-adr-and-why-should-you-use-them)\n- [ADR GitHub organization](https://adr.github.io/)\n```\n\n----------------------------------------\n\nTITLE: Implementing Jenkins Pipeline Step in Groovy\nDESCRIPTION: This code block is intended to contain an example of how to use the documented Jenkins pipeline step in a Groovy script. The example is currently empty but would typically demonstrate the step's usage with sample parameters and context.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/template/step.md#2025-04-16_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\n```groovy\n\n```\n```\n\n----------------------------------------\n\nTITLE: BYOG Repository List Configuration\nDESCRIPTION: YAML configuration file for BYOG repository specification\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/abapEnvironmentCloneGitRepo.md#2025-04-16_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nrepositories:\n  - name: '/DMO/REPO_BYOG'\n    branch: 'main'\n```\n\n----------------------------------------\n\nTITLE: Using Named Parameters in Jenkins Pipeline Steps\nDESCRIPTION: Shows how to use named parameters for Jenkins Pipeline steps, which is the correct syntax for Pipeline configurations.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/DEVELOPMENT.md#2025-04-16_snippet_18\n\nLANGUAGE: Groovy\nCODE:\n```\nsh returnStdout: true, script: command\n```\n\n----------------------------------------\n\nTITLE: Configuring Jenkins Pipeline with Shared Libraries in Groovy\nDESCRIPTION: Demonstrates how to set up a Jenkins pipeline using the Piper library and a custom shared library for additional configuration. It shows the use of the @Library annotation and the prepareDefaultValues step.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/checkChangeInDevelopment.md#2025-04-16_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\n@Library('piper-lib-os@master') _\n\n// the shared lib containing the additional configuration\n// needs to be configured in Jenkins\n@Library('foo@master') __\n\n// inside the shared lib denoted by 'foo' the additional configuration file\n// needs to be located under 'resources' ('resoures/myConfig.yml')\nprepareDefaultValues script: this, customDefaults: 'myConfig.yml'\n```\n\n----------------------------------------\n\nTITLE: Defining Jenkins Pipeline Stage Documentation Structure in Markdown\nDESCRIPTION: This snippet outlines the structure for documenting a Jenkins pipeline stage. It uses placeholders for various sections such as stage name, description, content, activation, step activation, parameters, and configuration.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/stages/confirm.md#2025-04-16_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# ${docGenStageName}\\n\\n${docGenDescription}\\n\\n## ${docGenStageContent}\\n\\n## ${docGenStageActivation}\\n\\n## ${docGenStepActivation}\\n\\n## ${docGenStageParameters}\\n\\n## ${docGenStageConfiguration}\n```\n\n----------------------------------------\n\nTITLE: Defining Documentation Structure for Jenkins Library Steps in Markdown\nDESCRIPTION: This snippet outlines the structure for generating documentation for Jenkins library steps. It uses placeholders that will be replaced with actual content during the documentation generation process.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/artifactPrepareVersion.md#2025-04-16_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# ${docGenStepName}\\n\\n## ${docGenDescription}\\n\\n## ${docGenParameters}\\n\\n## ${docGenConfiguration}\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation Template for Jenkins Steps\nDESCRIPTION: Template structure for documenting Jenkins pipeline steps with placeholders for dynamic content including description, prerequisites, parameters, configuration, plugin dependencies and examples.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/vaultRotateSecretId.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# ${docGenStepName}\\n\\n## ${docGenDescription}\\n\\n## Prerequisites\\n\\n## ${docGenParameters}\\n\\n## ${docGenConfiguration}\\n\\n## ${docJenkinsPluginDependencies}\\n\\n## Exceptions\\n\\nnone\\n\\n## Examples\n```\n\n----------------------------------------\n\nTITLE: Snapshot Version Declaration\nDESCRIPTION: Declares the project version as 1.0.0-SNAPSHOT, indicating a development version.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/test/resources/DescriptorUtils/pip/version.txt#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n1.0.0-SNAPSHOT\n```\n\n----------------------------------------\n\nTITLE: Jenkins Pipeline Documentation Template in Markdown\nDESCRIPTION: A template structure using variables that get populated during documentation generation for Jenkins pipeline steps. Contains sections for step name, description, parameters, configuration, and plugin dependencies.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/tmsUpload.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# ${docGenStepName}\\n\\n## ${docGenDescription}\\n\\n## ${docGenParameters}\\n\\n## ${docGenConfiguration}\\n\\n## ${docJenkinsPluginDependencies}\n```\n\n----------------------------------------\n\nTITLE: Configuring Periodic Build Trigger in Jenkins Pipeline (Groovy)\nDESCRIPTION: This snippet demonstrates how to configure a periodic build trigger for a Jenkins pipeline. It sets up a schedule to run the pipeline every night between 3am and 4am.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/pipelines/abapEnvironment/configuration.md#2025-04-16_snippet_5\n\nLANGUAGE: groovy\nCODE:\n```\nH H(3-4) * * *\n```\n\n----------------------------------------\n\nTITLE: Retrieving Influx Custom Data Map in Groovy\nDESCRIPTION: Example demonstrating how to get the Influx custom data map used by influxWriteData step. Returns a map of maps representing different measurements in InfluxDB.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/commonPipelineEnvironment.md#2025-04-16_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\ndef myInfluxDataMap = commonPipelineEnvironment.getInfluxCustomDataMap()\n```\n\n----------------------------------------\n\nTITLE: Configuring Change Management in YAML\nDESCRIPTION: Example of a YAML configuration file for change management settings. It includes general settings shared across change management steps and step-specific configurations.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/checkChangeInDevelopment.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ngeneral:\n  changeManagement:\n    changeDocumentLabel: 'ChangeDocument\\s?:'\n    cmClientOpts: '-Djavax.net.ssl.trustStore=<path to truststore>'\n    credentialsId: 'CM'\n    endpoint: 'https://example.org/cm'\n    git:\n      from: 'HEAD~1'\n      to: 'HEAD'\n      format: '%b'\n  [...]\n  steps:\n    checkChangeInDevelopment:\n      changeManagement:\n        endpoint: 'https://example.org/cm'\n        [...]\n      failIfStatusIsNotInDevelopment: true\n```\n\n----------------------------------------\n\nTITLE: Inserting Step Description in Markdown\nDESCRIPTION: This snippet uses a placeholder to insert the step description as a second-level heading in the generated documentation.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/mavenBuild.md#2025-04-16_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n## ${docGenDescription}\n```\n\n----------------------------------------\n\nTITLE: Defining Jenkins Pipeline Stage Documentation Structure in Markdown\nDESCRIPTION: This snippet outlines the structure for documenting a Jenkins pipeline stage. It uses placeholders that will be replaced with actual content when generating the documentation.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/stages/integration.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# ${docGenStageName}\\n\\n${docGenDescription}\\n\\n## ${docGenStageContent}\\n\\n## ${docGenStageActivation}\\n\\n## ${docGenStepActivation}\\n\\n## ${docGenStageParameters}\\n\\n## ${docGenStageConfiguration}\n```\n\n----------------------------------------\n\nTITLE: Documentation Template Structure in Markdown\nDESCRIPTION: Basic structure for Jenkins pipeline step documentation using placeholder variables that get populated during generation. The template includes sections for step name, description, parameters, configuration, and plugin dependencies.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/piperLoadGlobalExtensions.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# ${docGenStepName}\\n\\n## ${docGenDescription}\\n\\n## ${docGenParameters}\\n\\n## ${docGenConfiguration}\\n\\n## ${docJenkinsPluginDependencies}\n```\n\n----------------------------------------\n\nTITLE: Conditional Printing of Shared Libraries in Groovy\nDESCRIPTION: This snippet conditionally prints information about shared libraries if shareConfidentialInformation is true.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/resources/com.sap.piper/templates/debug_report.txt#2025-04-16_snippet_8\n\nLANGUAGE: groovy\nCODE:\n```\n<% print shareConfidentialInformation ? \"## Shared Libraries\" : \"\" %>\n\n<% print shareConfidentialInformation ? additionalSharedLibraries ? \"\" : \"No additional shared libraries where loaded.\" : \"\" %>\n\n<% print additionalSharedLibraries && shareConfidentialInformation ? \"name | branch | loadedByExtension\" : \"\" %>\n<% print additionalSharedLibraries && shareConfidentialInformation ? \"-----|--------|-------\" : \"\" %>\n<% print shareConfidentialInformation ? additionalSharedLibraries.collect({each -> \"${each}\"}).join(\"\\n\") : \"\" %>\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation Template with Variables\nDESCRIPTION: A markdown template that uses placeholder variables for generating documentation. The variables include docGenStepName for the step name, docGenDescription for step details, docGenParameters for parameter documentation, and docGenConfiguration for configuration options.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/contrastExecuteScan.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# ${docGenStepName}\\n\\n## ${docGenDescription}\\n\\n## ${docGenParameters}\\n\\n## ${docGenConfiguration}\n```\n\n----------------------------------------\n\nTITLE: Printing Local and Global Extension Information in Groovy\nDESCRIPTION: This set of snippets prints information about local and global extensions used in the build.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/resources/com.sap.piper/templates/debug_report.txt#2025-04-16_snippet_7\n\nLANGUAGE: groovy\nCODE:\n```\n<% print localExtensions ? \"\" : \"No local extensions were used\" %>\n\n<% print localExtensions ? \"Local Extension | relationToOriginalStage\" : \"\" %>\n<% print localExtensions ? \"----------------|-------\" : \"\" %>\n<% print localExtensions.collect({each -> \"${each.key} | ${each.value}\"}).join(\"\\n\") %>\n\n## Global Extension Repository\n\n<% print shareConfidentialInformation ? globalExtensionRepository ? \"${globalExtensionRepository}\" : \"No global extension repository was loaded.\" : \"\" %>\n<% print globalExtensions ? \"The repository included the following extensions:\" : \"No extension of the global extension repository was used.\" %>\n\n<% print globalExtensions ? \"Global Extension | relationToOriginalStage\" : \"\" %>\n<% print globalExtensions ? \"-----------------|-------\" : \"\" %>\n<% print globalExtensions.collect({each -> \"${each.key} | ${each.value}\"}).join(\"\\n\") %>\n\nConfiguration file for global extensions: <% print globalExtensionConfigurationFilePath ?: \"Global extensions don't have a configuration file\" %>\n\nShared project configuration: <% print shareConfidentialInformation ? sharedConfigFilePath ?: \"No shared configuration\" : sharedConfigFilePath != null %>\n```\n\n----------------------------------------\n\nTITLE: Configuring Vault Parameter Overwrite Settings\nDESCRIPTION: YAML configuration showing how to control Vault parameter overwriting behavior at different levels.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/infrastructure/vault.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ngeneral:\n  ...\n  vaultDisableOverwrite: true\n  ...\nsteps:\n  executeBuild:\n    vaultDisableOverwrite: false\n    ...\n```\n\n----------------------------------------\n\nTITLE: Building Piper Docker Image in Shell\nDESCRIPTION: Commands for building a Docker image of the Piper tool and extracting the binary to the local filesystem.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/DEVELOPMENT.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndocker build -t piper:latest .\n\ndocker create --name piper piper:latest\ndocker cp piper:/build/piper .\ndocker rm piper\n```\n\n----------------------------------------\n\nTITLE: Cloud Foundry Variables Configuration\nDESCRIPTION: YAML configuration file containing variable values for manifest substitution.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/cloudFoundryCreateService.md#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nname1: test1\nname2: test2\nname3: test3\n```\n\n----------------------------------------\n\nTITLE: Generating Step Documentation with Placeholders in Markdown\nDESCRIPTION: This snippet shows the structure of the documentation template using placeholders that will be replaced with actual content during documentation generation. It includes sections for the step name, description, parameters, and configuration.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/containerSaveImage.md#2025-04-16_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# ${docGenStepName}\\n\\n## ${docGenDescription}\\n\\n## ${docGenParameters}\\n\\n## ${docGenConfiguration}\n```\n\n----------------------------------------\n\nTITLE: Defining Jenkins Pipeline Step Documentation Structure in Markdown\nDESCRIPTION: This snippet outlines the structure for documenting a Jenkins pipeline step. It uses placeholders that will be replaced with actual content during documentation generation.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/mavenExecuteStaticCodeChecks.md#2025-04-16_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# ${docGenStepName}\\n\\n## ${docGenDescription}\\n\\n## ${docGenParameters}\\n\\n## ${docGenConfiguration}\n```\n\n----------------------------------------\n\nTITLE: Documentation Template Structure in Markdown\nDESCRIPTION: Basic markdown structure with placeholders that get replaced during documentation generation for Jenkins pipeline steps. Uses template variables for step name, description, parameters and configuration sections.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/helmExecute.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# ${docGenStepName}\\n\\n## ${docGenDescription}\\n\\n## ${docGenParameters}\\n\\n## ${docGenConfiguration}\n```\n\n----------------------------------------\n\nTITLE: Inserting Step Description in Markdown\nDESCRIPTION: Placeholder for inserting the generated step description in the documentation.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/gcpPublishEvent.md#2025-04-16_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n## ${docGenDescription}\n```\n\n----------------------------------------\n\nTITLE: Documentation Template Structure in Markdown\nDESCRIPTION: Basic structure template for documenting Jenkins pipeline steps with placeholders for step name, description, parameters and configuration sections.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/checkmarxOneExecuteScan.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# ${docGenStepName}\\n\\n## ${docGenDescription}\\n\\n## ${docGenParameters}\\n\\n## ${docGenConfiguration}\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration - Git Range with From and To\nDESCRIPTION: YAML configuration example demonstrating how to specify both the start and end points of the Git commit range for change document ID search.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/transportRequestDocIDFromGit.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  transportRequestDocIDFromGit:\n    gitFrom: '4378bb4'\n    gitTo: 'd99fbf7'\n```\n\n----------------------------------------\n\nTITLE: Error Handling in Go with github.com/pkg/errors\nDESCRIPTION: Example of wrapping errors using the github.com/pkg/errors package in Go.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/DEVELOPMENT.md#2025-04-16_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nf, err := os.Open(path)\nif err != nil {\n    return errors.Wrapf(err, \"open failed for %v\", path)\n}\ndefer f.Close()\n```\n\n----------------------------------------\n\nTITLE: Documentation Template Variables in Markdown\nDESCRIPTION: Template structure with variables that get replaced during documentation generation process. Contains placeholders for step name, description, parameters and configuration sections.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/debugReportArchive.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# ${docGenStepName}\\n\\n## ${docGenDescription}\\n\\n## ${docGenParameters}\\n\\n## ${docGenConfiguration}\n```\n\n----------------------------------------\n\nTITLE: Setting Pipeline Measurement Value in Groovy\nDESCRIPTION: Internal function example showing how to set a pipeline measurement value. Note this is for internal use - pipelines should use the durationMeasure step instead.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/commonPipelineEnvironment.md#2025-04-16_snippet_3\n\nLANGUAGE: groovy\nCODE:\n```\ncommonPipelineEnvironment.setPipelineMeasurement('build_stage_duration', 2345)\n```\n\n----------------------------------------\n\nTITLE: Generating Step Name in Markdown\nDESCRIPTION: This snippet uses a placeholder to insert the step name as a top-level heading in the generated documentation.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/mavenBuild.md#2025-04-16_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# ${docGenStepName}\n```\n\n----------------------------------------\n\nTITLE: Defining Documentation Structure for Jenkins Pipeline Stages in Markdown\nDESCRIPTION: This snippet outlines the structure for documenting Jenkins pipeline stages. It uses Markdown syntax with placeholders for different sections of the documentation.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/stages/build.md#2025-04-16_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# ${docGenStageName}\\n\\n${docGenDescription}\\n\\n## ${docGenStageContent}\\n\\n## ${docGenStageActivation}\\n\\n## ${docGenStepActivation}\\n\\n## ${docGenStageParameters}\\n\\n## ${docGenStageConfiguration}\n```\n\n----------------------------------------\n\nTITLE: Git Commit Message Example - Change Document ID Definition\nDESCRIPTION: Example showing how to specify a change document ID in a Git commit message using the default label format.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/transportRequestDocIDFromGit.md#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nUpload - define the change document ID\n\n    ChangeDocument: 1000001234\n```\n\n----------------------------------------\n\nTITLE: Setting Error Categories in Go\nDESCRIPTION: Example of setting pre-defined error categories in Go using a convenience function.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/DEVELOPMENT.md#2025-04-16_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nlog.SetErrorCategory(log.ErrorCompliance)\n\nlog.Entry().WithError(err).Fatal(\"the error message\")\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Client Retries in Go\nDESCRIPTION: Example showing how to configure automatic retry behavior for HTTP clients using ClientOptions. Demonstrates disabling retries by setting MaxRetries to -1.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/DEVELOPMENT.md#2025-04-16_snippet_7\n\nLANGUAGE: golang\nCODE:\n```\nclientOptions := piperhttp.ClientOptions{}\nclientOptions.MaxRetries = -1\nhttpClient.SetOptions(clientOptions)\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation Template with Variables\nDESCRIPTION: A template structure for Jenkins pipeline step documentation using variables that will be populated during documentation generation. The template includes sections for step name, description, parameters, and configuration.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/mavenExecuteIntegration.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# ${docGenStepName}\n\n## ${docGenDescription}\n\n## ${docGenParameters}\n\n## ${docGenConfiguration}\n```\n\n----------------------------------------\n\nTITLE: Configuring isChangeInDevelopment Step in YAML\nDESCRIPTION: Example of how to configure the new isChangeInDevelopment step in a YAML configuration file. It specifies the Docker image to be used for the step.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/checkChangeInDevelopment.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ngeneral:\n\n# new naming convention\nsteps:\n  isChangeInDevelopment:\n    dockerImage: 'ppiper/cm-client:3.0.0.0'\n```\n\n----------------------------------------\n\nTITLE: Including Step Parameters in Markdown\nDESCRIPTION: This snippet uses a placeholder to insert the step parameters as a second-level heading in the generated documentation.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/mavenBuild.md#2025-04-16_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n## ${docGenParameters}\n```\n\n----------------------------------------\n\nTITLE: Markdown Template for Jenkins Stage Documentation\nDESCRIPTION: Template structure with placeholder variables for generating complete documentation for a Jenkins pipeline stage. Uses variables prefixed with docGen to be populated during documentation generation.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/stages/acceptance.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# ${docGenStageName}\\n\\n${docGenDescription}\\n\\n## ${docGenStageContent}\\n\\n## ${docGenStageActivation}\\n\\n## ${docGenStepActivation}\\n\\n## ${docGenStageParameters}\\n\\n## ${docGenStageConfiguration}\n```\n\n----------------------------------------\n\nTITLE: CTS Upload with Preconfigured Image Example\nDESCRIPTION: Example of transport request upload configuration using a preconfigured Docker image for CTS.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/transportRequestUploadFile.md#2025-04-16_snippet_3\n\nLANGUAGE: groovy\nCODE:\n```\ntransportRequestUploadFile script: this,\n            changeManagement: [\n                credentialsId: 'CRED_ID', // credentials needs to be defined inside Jenkins\n                type: 'CTS',\n                endpoint: 'https://example.org:8000',\n                client: '001',\n                cts: [\n                    nodeDocker: [\n                        image: 'docker-image-name',\n                        pullImage: true,  // needs to be set to false in case the image is\n                                          // only available in the local docker cache (not recommended)\n                    ],\n                    npmInstallOpts: [],\n                deployToolDependencies: [], // empty since we use an already preconfigured image\n                ],\n            ],\n            applicationName: 'APP',\n            abapPackage: 'ABABPACKAGE',\n            transportRequestId: 'XXXK123456', // can be omitted when resolved via commit history\n            applicationDescription: 'An optional description' // only used in case a new application is deployed\n                                                              // description is not updated for re-deployments\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing Step Functions in Go\nDESCRIPTION: Basic structure for implementing step functions in Go, including error handling and logging.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/DEVELOPMENT.md#2025-04-16_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc step(options stepOptions, telemetryData *telemetry.CustomData) {\n    err := runStep(&options, telemetryData)\n    if err != nil {\n        log.Entry().WithError(err).Fatal(\"step execution failed\")\n    }\n}\n\nfunc runStep(options *stepOptions, telemetryData *telemetry.CustomData) error {\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation Template with Variables\nDESCRIPTION: A markdown template structure that uses placeholders (${docGenStepName}, ${docGenDescription}, ${docGenParameters}, ${docGenConfiguration}) to be replaced with actual documentation content during generation\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/npmExecuteScripts.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# ${docGenStepName}\\n\\n## ${docGenDescription}\\n\\n## ${docGenParameters}\\n\\n## ${docGenConfiguration}\n```\n\n----------------------------------------\n\nTITLE: Git Commit Message Format for Transport Request\nDESCRIPTION: Example showing the required format for including a transport request ID in a Git commit message. The message must include a headline, optional body, and the TransportRequest tag.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/scenarios/upload-to-transportrequest/Readme.md#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nThe headline\n\nThe body. The blank line above is mandatory (Git standard).\nTransportRequest: <YOUR TRANSPORT REQUEST ID>\n```\n\n----------------------------------------\n\nTITLE: Displaying Dynamic Content in Markdown\nDESCRIPTION: This snippet demonstrates the use of placeholder variables in a Markdown document. These placeholders are likely replaced with actual content during document generation.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/githubCreateIssue.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# ${docGenStepName}\n\n## Prerequisites\n\nYou need to create a personal access token within GitHub and add this to the Jenkins credentials store.\n\nPlease see [GitHub documentation for details about creating the personal access token](https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line/).\n\n## ${docGenParameters}\n\n## ${docGenConfiguration}\n\n## ${docGenDescription}\n```\n\n----------------------------------------\n\nTITLE: CTS Upload with Standard Node Image Example\nDESCRIPTION: Example of transport request upload configuration using a standard Node.js Docker image.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/transportRequestUploadFile.md#2025-04-16_snippet_4\n\nLANGUAGE: groovy\nCODE:\n```\ntransportRequestUploadFile script: this,\n            changeManagement: [\n                credentialsId: 'CRED_ID', // credentials needs to be defined inside Jenkins\n                type: 'CTS',\n                endpoint: 'https://example.org:8000',\n                client: '001',\n                cts: [\n                    npmInstallOpts: [\n                        '--verbose', // might be benefical for troubleshooting\n                        '--registry', 'https://your.npmregistry.org/', // an own registry can be specified here\n                    ],\n                ],\n            ],\n            applicationName: 'APP',\n            abapPackage: 'ABABPACKAGE',\n            transportRequestId: 'XXXK123456', // can be omitted when resolved via commit history\n            applicationDescription: 'An optional description' // only used in case a new application is deployed\n                                                              // description is not updated for re-deployments\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuration Migration Example - RFC Transport Request Upload\nDESCRIPTION: Shows how to migrate from old configuration format to new format for RFC transport request uploads.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/transportRequestUploadFile.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ngeneral:\n  changeManagement:\n    type: 'RFC'\n# old\n    rfc:\n      docker:\n        image: 'my/rfc-client'\n\n#new\nsteps:\n  transportRequestUploadRFC:\n    dockerImage: 'my/rfc-client'\n```\n\n----------------------------------------\n\nTITLE: Mock Implementation for Testing\nDESCRIPTION: Example of implementing a mock version of the utilities interface for testing purposes. Shows how to create and use mock data structures in tests.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/DEVELOPMENT.md#2025-04-16_snippet_10\n\nLANGUAGE: golang\nCODE:\n```\ntype mockUtilsBundle struct {\n    files map[string][]byte\n}\n\nfunc newMockUtilsBundle() mockUtilsBundle {\n    utils := mockUtilsBundle{}\n    utils.files = map[string][]byte{}\n    return utils\n}\n\nfunc (m *mockUtilsBundle) fileExists(path string) (bool, error) {\n    content := m.files[path]\n    return content != nil, nil\n}\n\nfunc (m *mockUtilsBundle) fileRead(path string) ([]byte, error) {\n    content := m.files[path]\n    if content == nil {\n        return nil, fmt.Errorf(\"could not read '%s': %w\", path, os.ErrNotExist)\n    }\n    return content, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting Step Parameters in Markdown\nDESCRIPTION: Placeholder for the step parameters. This section will list and describe all the parameters that can be used with this step.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/pipelineCreateScanSummary.md#2025-04-16_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n## ${docGenParameters}\n```\n\n----------------------------------------\n\nTITLE: Custom Library Configuration Setup\nDESCRIPTION: Demonstrates how to set up custom configuration using a shared library resource in Jenkins pipeline.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/transportRequestUploadFile.md#2025-04-16_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\n@Library('piper-lib-os@master') _\n\n// the shared lib containing the additional configuration\n// needs to be configured in Jenkins\n@Library('foo@master') __\n\n// inside the shared lib denoted by 'foo' the additional configuration file\n// needs to be located under 'resources' ('resoures/myConfig.yml')\nprepareDefaultValues script: this,\n                             customDefaults: 'myConfig.yml'\n```\n\n----------------------------------------\n\nTITLE: Generating Step Name in Markdown\nDESCRIPTION: Placeholder for inserting the step name in the documentation using a variable.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/fortifyExecuteScan.md#2025-04-16_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# ${docGenStepName}\n```\n\n----------------------------------------\n\nTITLE: Documentation Template Structure\nDESCRIPTION: Basic markdown structure for Jenkins step documentation with placeholder variables that get populated during documentation generation. Includes sections for step name, description, parameters and configuration.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/nexusUpload.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# ${docGenStepName}\n\n## ${docGenDescription}\n\n## ${docGenParameters}\n\n## ${docGenConfiguration}\n```\n\n----------------------------------------\n\nTITLE: Listing Contribution Requirements in Markdown\nDESCRIPTION: This code snippet enumerates the key requirements for contributing to the SAP open source project. It highlights the need to comply with the project license, accept the Developer Certificate of Origin, adhere to the Code of Conduct, and follow guidelines for using generative AI.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/CONTRIBUTING.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. You must **comply to the license of this project**, **accept the Developer Certificate of Origin** (see below) before being able to contribute. The acknowledgement to the DCO will usually be requested from you as part of your first pull request to this project.\n2. Please **adhere to our [Code of Conduct](documentation/CODE_OF_CONDUCT.md)**.\n3. If you plan to use **generative AI for your contribution**, please see our guideline below.\n4. **Not all proposed contributions can be accepted**. Some features may fit another project better or doesn't fit the general direction of this project. Of course, this doesn't apply to most bug fixes, but a major feature implementation for instance needs to be discussed with one of the maintainers first. Possibly, one who touched the related code or module recently. The more effort you invest, the better you should clarify in advance whether the contribution will match the project's direction. The best way would be to just open an issue to discuss the feature you plan to implement (make it clear that you intend to contribute). We will then forward the proposal to the respective code owner. This avoids disappointment.\n```\n\n----------------------------------------\n\nTITLE: Documenting Decision Outcome in Markdown\nDESCRIPTION: This snippet shows how to document the chosen option and provide a rationale for the decision. It uses markdown formatting to structure the explanation and highlight key points.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/adr/20221004-use-markdown-architectural-decision-records.md#2025-04-16_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## Decision Outcome\n\nChosen option: \"MADR 2.1.2 with Log4brains patch\", because\n\n- Implicit assumptions should be made explicit.\n  Design documentation is important to enable people understanding the decisions later on.\n  See also [A rational design process: How and why to fake it](https://doi.org/10.1109/TSE.1986.6312940).\n- The MADR format is lean and fits our development style.\n- The MADR structure is comprehensible and facilitates usage & maintenance.\n- The MADR project is vivid.\n- Version 2.1.2 is the latest one available when starting to document ADRs.\n- The Log4brains patch adds more features, like tags.\n\nThe \"Log4brains patch\" performs the following modifications to the original template:\n\n- Change the ADR filenames format (`NNN-adr-name` becomes `YYYYMMDD-adr-name`), to avoid conflicts during Git merges.\n- Add a `draft` status, to enable collaborative writing.\n- Add a `Tags` field.\n```\n\n----------------------------------------\n\nTITLE: Documentation Template Structure in Markdown\nDESCRIPTION: A markdown template with placeholder variables for generating consistent step documentation in the SAP Jenkins library. Variables include step name, description, parameters and configuration sections.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/shellExecute.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# ${docGenStepName}\\n\\n## ${docGenDescription}\\n\\n## ${docGenParameters}\\n\\n## ${docGenConfiguration}\n```\n\n----------------------------------------\n\nTITLE: Documentation Template with Variables\nDESCRIPTION: Markdown template using variable placeholders that will be replaced with actual step documentation content. Includes sections for step name, description, parameters and configuration.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/credentialdiggerScan.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# ${docGenStepName}\\n\\n## ${docGenDescription}\\n\\n## ${docGenParameters}\\n\\n## ${docGenConfiguration}\n```\n\n----------------------------------------\n\nTITLE: Creating New ADR Entry\nDESCRIPTION: Command to initiate an interactive process for creating a new Architecture Decision Record.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/adr/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nlog4brains adr new\n```\n\n----------------------------------------\n\nTITLE: Generating Step Framework in Go\nDESCRIPTION: Command for generating the step framework based on YAML files in the resources/metadata/ directory.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/DEVELOPMENT.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngo generate\n```\n\n----------------------------------------\n\nTITLE: Jenkins Documentation Template Structure in Markdown\nDESCRIPTION: A markdown template with placeholders for generating Jenkins pipeline step documentation. Uses variables like docGenStepName, docGenDescription, docGenParameters, docGenConfiguration, and docJenkinsPluginDependencies that get replaced during documentation generation.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/spinnakerTriggerPipeline.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# ${docGenStepName}\\n\\n## ${docGenDescription}\\n\\n## ${docGenParameters}\\n\\n## ${docGenConfiguration}\\n\\n## ${docJenkinsPluginDependencies}\n```\n\n----------------------------------------\n\nTITLE: Including Step Parameters in Markdown\nDESCRIPTION: Placeholder for inserting the step parameters in the documentation using a variable.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/fortifyExecuteScan.md#2025-04-16_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n## ${docGenParameters}\n```\n\n----------------------------------------\n\nTITLE: Tool Record JSON Structure\nDESCRIPTION: Defines the JSON structure for tool record files that capture tool execution details. The file name follows the pattern 'tr_toolname_YYYYMMDDHHMMSS.json' and contains information about the tool, its instance, display information, and hierarchical keys for backend access.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/pkg/toolrecord/REAMDE_toolrecord.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"RecordVersion\":1,\n    \"ToolName\":\"dummyTool\",\n    \"ToolInstance\":\"dummyInstance\",   // Tool backend URL\n\n    // Tool-agnostic DisplayName and DisplayUrl for simple reportings\n    // ( this is deried from the keys details )\n    \"DisplayName\":\"dummyOrgName - dummyProjName - dummyScanName\",\n    \"DisplayURL\":\"dummyScanUrl\",\n\n    // tool-dependend identifiers; order is taken of tool's data model e.g. 'team owns project has scan'\n    \"Keys\":[\n        {\n            \"Name\":\"Organization\",         // the technical name from the tool's data model\n            \"Value\":\"dummyOrgId\",          // the key value needed to access the tool's backend via api\n            \"DisplayName\":\"dummyOrgName\",  // User-friendly identifiert - optional can be empty\n            \"URL\":\"dummyOrgUrl\"            // Url to access this data in the tool's ui - optional can be empty\n        },\n        {\"Name\":\"Project\",\"Value\":\"dummyProjectId\",\"DisplayName\":\"dummyProjName\",\"Url\":\"dummyProjUrl\"},\n        {\"Name\":\"ScanId\",\"Value\":\"dummyScanId\",\"DisplayName\":\"dummyScanName\",\"Url\":\"dummyScanUrl\"}\n        ],\n\n    \"Context\":{}                            // additional context data - optional tool dependend\n}\n```\n\n----------------------------------------\n\nTITLE: Documentation Template Structure in Markdown\nDESCRIPTION: A template structure using variable placeholders that will be replaced with actual documentation content during generation. Contains sections for step name, description, parameters, configuration, and Jenkins plugin dependencies.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/tmsExport.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# ${docGenStepName}\\n\\n## ${docGenDescription}\\n\\n## ${docGenParameters}\\n\\n## ${docGenConfiguration}\\n\\n## ${docJenkinsPluginDependencies}\n```\n\n----------------------------------------\n\nTITLE: Documentation Template Structure for Jenkins Pipeline Stages\nDESCRIPTION: A markdown template with placeholders that will be populated with actual documentation content during the documentation generation process. The placeholders include stage name, description, content, activation methods, step activation, parameters, and configuration details.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/stages/compliance.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# ${docGenStageName}\n\n${docGenDescription}\n\n## ${docGenStageContent}\n\n## ${docGenStageActivation}\n\n## ${docGenStepActivation}\n\n## ${docGenStageParameters}\n\n## ${docGenStageConfiguration}\n```\n\n----------------------------------------\n\nTITLE: Conditional Printing of Failed Build Information in Groovy\nDESCRIPTION: This set of snippets conditionally prints information about a failed build, including the failed step, error message, and stack trace.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/resources/com.sap.piper/templates/debug_report.txt#2025-04-16_snippet_2\n\nLANGUAGE: groovy\nCODE:\n```\n<% print failedBuild ? \"## Unsuccessful Build\" : \"\" %>\n\n<% print failedBuild ? \"#### Failed Step\" : \"\" %>\n<% print failedBuild.get(\"step\") ? \"`${failedBuild.get(\"step\")}`\" : \"\" %>\n\n<% print failedBuild.get(\"reason\") ? \"#### Error Message\" : \"\" %>\n<% print failedBuild.get(\"reason\") ? \"```\\n${failedBuild.get(\"reason\")}\\n```\" : \"\" %>\n<% print failedBuild.get(\"stack_trace\") ? \"#### Stacktrace\" : \"\" %>\n<% print failedBuild.get(\"stack_trace\") ? \"```\" : \"\" %>\n<% print failedBuild.get(\"stack_trace\").collect({each -> \"${each}\"}).join(\"\\n\") %>\n<% print failedBuild.get(\"stack_trace\") ? \"```\" : \"\" %>\n<% print failedBuild.get(\"fatal\") ? \"#### Failure was fatal.\" : \"#### Failure was non-fatal.\" %>\n```\n\n----------------------------------------\n\nTITLE: JSON Upload Status Response\nDESCRIPTION: Simple JSON object representing an upload success response. Contains a single key 'upload' with value 'success' to indicate the operation completed successfully.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/test/resources/TransportManagementService/responseNodeUpload.txt#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"upload\": \"success\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ADR Metadata in Markdown\nDESCRIPTION: This snippet shows the metadata section of the ADR, including status, date, and tags. It demonstrates how to structure the header of a MADR document.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/adr/20221004-use-markdown-architectural-decision-records.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Use Markdown Architectural Decision Records\n\n- Status: accepted\n- Date: 2022-10-03\n- Tags: doc\n```\n\n----------------------------------------\n\nTITLE: Previewing Log4brains Knowledge Base\nDESCRIPTION: Command to start a local preview server for the ADR knowledge base with hot reload functionality enabled.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/adr/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nlog4brains preview\n```\n\n----------------------------------------\n\nTITLE: Defining Jenkins Pipeline Step Documentation Structure in Markdown\nDESCRIPTION: This snippet outlines the structure for documenting a Jenkins pipeline step. It uses placeholders for the step name, description, parameters, and configuration, which are likely filled in dynamically during the documentation generation process.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/terraformExecute.md#2025-04-16_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# ${docGenStepName}\\n\\n## ${docGenDescription}\\n\\n## ${docGenParameters}\\n\\n## ${docGenConfiguration}\n```\n\n----------------------------------------\n\nTITLE: Markdown Template for Jenkins Step Documentation\nDESCRIPTION: Template structure for generating documentation for Jenkins pipeline steps. Uses placeholders that will be replaced with actual step name, description, parameters, and configuration details during build time.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/gitopsUpdateDeployment.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# ${docGenStepName}\\n\\n## ${docGenDescription}\\n\\n## ${docGenParameters}\\n\\n## ${docGenConfiguration}\n```\n\n----------------------------------------\n\nTITLE: Documentation Template Structure in Markdown\nDESCRIPTION: Basic structure of a Jenkins pipeline documentation template using markdown placeholders that will be replaced during documentation generation. Contains sections for step name, description, parameters, and configuration.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/pythonBuild.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# ${docGenStepName}\\n\\n## ${docGenDescription}\\n\\n## ${docGenParameters}\\n\\n## ${docGenConfiguration}\n```\n\n----------------------------------------\n\nTITLE: Defining Jenkins Step Documentation Structure in Markdown\nDESCRIPTION: This snippet outlines the structure for documenting a Jenkins pipeline step. It uses placeholders for dynamic content generation, including the step name, description, parameters, and configuration details.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/jsonApplyPatch.md#2025-04-16_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# ${docGenStepName}\\n\\n## ${docGenDescription}\\n\\n## ${docGenParameters}\\n\\n## ${docGenConfiguration}\n```\n\n----------------------------------------\n\nTITLE: Defining Jenkins Pipeline Stage Documentation Structure in Markdown\nDESCRIPTION: This snippet outlines the structure for documenting a Jenkins pipeline stage. It uses placeholders that will be replaced with actual content during documentation generation.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/stages/prvoting.md#2025-04-16_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# ${docGenStageName}\\n\\n${docGenDescription}\\n\\n## ${docGenStageContent}\\n\\n## ${docGenStageActivation}\\n\\n## ${docGenStepActivation}\\n\\n## ${docGenStageParameters}\\n\\n## ${docGenStageConfiguration}\n```\n\n----------------------------------------\n\nTITLE: Adding Step Configuration in Markdown\nDESCRIPTION: This snippet uses a placeholder to insert the step configuration details as a second-level heading in the generated documentation.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/mavenBuild.md#2025-04-16_snippet_3\n\nLANGUAGE: Markdown\nCODE:\n```\n## ${docGenConfiguration}\n```\n\n----------------------------------------\n\nTITLE: Detailing Step Configuration in Markdown\nDESCRIPTION: Placeholder for the step configuration details. This section will explain how to configure the step, including any required settings or options.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/pipelineCreateScanSummary.md#2025-04-16_snippet_3\n\nLANGUAGE: Markdown\nCODE:\n```\n## ${docGenConfiguration}\n```\n\n----------------------------------------\n\nTITLE: Adding Step Configuration in Markdown\nDESCRIPTION: Placeholder for inserting the generated step configuration in the documentation.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/gcpPublishEvent.md#2025-04-16_snippet_3\n\nLANGUAGE: Markdown\nCODE:\n```\n## ${docGenConfiguration}\n```\n\n----------------------------------------\n\nTITLE: Installing Log4brains CLI Tool\nDESCRIPTION: Command to globally install the Log4brains npm package for managing Architecture Decision Records.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/adr/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g log4brains\n```\n\n----------------------------------------\n\nTITLE: Defining Jenkins Pipeline Step Documentation Structure in Markdown\nDESCRIPTION: This snippet outlines the structure for documenting a Jenkins pipeline step. It uses placeholders for various sections that will be filled in with specific information for each step.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/pipelineStashFilesBeforeBuild.md#2025-04-16_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# ${docGenStepName}\\n\\n## ${docGenDescription}\\n\\n## Prerequisites\\n\\nnone\\n\\n## ${docGenParameters}\\n\\n## ${docGenConfiguration}\\n\\n## ${docJenkinsPluginDependencies}\n```\n\n----------------------------------------\n\nTITLE: Generating Step Name in Markdown\nDESCRIPTION: Placeholder for inserting the generated step name in the documentation.\nSOURCE: https://github.com/SAP/jenkins-library/blob/master/documentation/docs/steps/gcpPublishEvent.md#2025-04-16_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# ${docGenStepName}\n```"
  }
]