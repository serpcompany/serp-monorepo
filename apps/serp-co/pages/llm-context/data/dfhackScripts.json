[
  {
    "owner": "dfhack",
    "repo": "scripts",
    "content": "TITLE: Using the GM Editor with Lua Expressions\nDESCRIPTION: Examples of how to invoke the GM Editor with different Lua expressions to target specific game data structures. Shows options from basic usage to advanced targeting of specific game elements.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/gui/gm-editor.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngui/gm-editor [<options>] [<lua expression>]\ngui/gm-editor [<options>] dialog\n```\n\n----------------------------------------\n\nTITLE: Examples of devel/query Command Usage\nDESCRIPTION: Various examples of using the devel/query command for different purposes, such as printing a unit's ID, searching for attributes, exploring tile data, listing table fields, and finding specific enum values.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/devel/query.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndevel/query --unit --getfield id\ndevel/query --unit --search STRENGTH --maxdepth 3\ndevel/query --unit --search physical_attrs --maxdepth 3\ndevel/query --tile --search designation\ndevel/query --tile --search \"occup.*carv\"\ndevel/query --table df --maxdepth 0\ndevel/query --table df.profession --findvalue FISH\n```\n\n----------------------------------------\n\nTITLE: Executing Workorder Command via DFHack Script\nDESCRIPTION: This command enqueues a workorder using the DFHack interface, allowing for automated management of Dwarf Fortress jobs through scripts. This requires DFHack to be installed in a supported version of Dwarf Fortress.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/workorder.rst#2025-04-21_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\n\"workorder MakeCharcoal 100\"\n```\n\nLANGUAGE: Lua\nCODE:\n```\n\"workorder MakeTable 10\"\n```\n\n----------------------------------------\n\nTITLE: GM Editor Command Examples\nDESCRIPTION: A collection of example commands showing how to use the GM Editor to access different parts of the game data, including selected objects, item lists, specific units, and for debugging GUI tools.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/gui/gm-editor.rst#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngui/gm-editor\ngui/gm-editor world.items.all\ngui/gm-editor df.unit.find(12345)\ngui/gm-editor reqscript('gui/quickfort').view\ngui/gm-editor --freeze scr\ngui/gm-editor dialog\n```\n\n----------------------------------------\n\nTITLE: Repeating Workorders Automatically in DFHack Script\nDESCRIPTION: Automatically repeat workorders such as shearing or milking creatures at specified intervals using DFHack's repeat command. This automates recurring tasks in Dwarf Fortress, requiring initial setup of workorder.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/workorder.rst#2025-04-21_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\n\"repeat --name autoShearCreature --time 14 --timeUnits days --command [ workorder ShearCreature ]\"\n```\n\nLANGUAGE: Lua\nCODE:\n```\n\"repeat --name autoMilkCreature --time 14 --timeUnits days --command [ workorder \\\"{\\\"job\\\":\\\"MilkCreature\\\",\\\"item_conditions\\\":[{\\\"condition\\\":\\\"AtLeast\\\",\\\"value\\\":5,\\\"flags\\\":[\\\"empty\\\"],\\\"item_type\\\":\\\"BUCKET\\\"}] }\\\" ]\"\n```\n\n----------------------------------------\n\nTITLE: Using modtools/create-unit Command Syntax\nDESCRIPTION: Complete syntax reference for the modtools/create-unit script that allows creation of custom units in Dwarf Fortress. Shows all available command-line options including race specification, civilization assignment, equipment, skills, and location parameters.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/modtools/create-unit.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-race raceName\n    (obligatory)\n    Specify the race of the unit to be created.\n    examples:\n        DWARF\n        HUMAN\n\n-caste casteName\n    Specify the caste of the unit to be created.\n    If omitted, the caste is randomly selected.\n    examples:\n        MALE\n        FEMALE\n        DEFAULT\n\n-domesticate\n    Tames the unit if it lacks the CAN_LEARN and CAN_SPEAK tokens.\n\n-civId id\n    Make the created unit a member of the specified civilisation\n    (or none if id = -1).  If id is \\LOCAL, make it a member of the\n    civ associated with the fort; otherwise id must be an integer\n\n-groupId id\n    Make the created unit a member of the specified group\n    (or none if id = -1).  If id is \\LOCAL, make it a member of the\n    group associated with the fort; otherwise id must be an integer\n\n-setUnitToFort\n    Sets the groupId and civId to those of the player in Fortress mode.\n    Equivalent to -civId \\LOCAL and -groupId \\LOCAL.\n\n-name entityRawName\n    Set the unit's name to be a random name appropriate for the\n    given entity. \\LOCAL can be specified instead to automatically\n    use the fort group entity in fortress mode only. Can be passed\n    empty to generate a wild name (random language, any words), i.e.\n    the type of name that animal people historical figures have.\n    examples:\n        MOUNTAIN\n        EVIL\n\n-nick nickname\n    This can be included to nickname the unit.\n    Replace \"nickname\" with the desired name.\n\n-age howOld\n    This can be included to specify the unit's age.\n    Replace \"howOld\" with a (non-negative) number.\n    The unit's age is set randomly if this is omitted.\n\n-equip [ ITEM:MATERIAL:QUANTITY ... ]\n    This can be included to create items and equip them onto\n        the created unit.\n    This is carried out via the same logic used in arena mode,\n        so equipment will always be sized correctly and placed\n        on what the game deems to be appropriate bodyparts.\n        Clothing is also layered in the appropriate order.\n    Note that this currently comes with some limitations,\n        such as an inability to specify item quality\n        and objects not being placed in containers\n        (for example, arrows are not placed in quivers).\n    Item quantity defaults to 1 if omitted.\n    When spaces are included in the item or material name,\n        the entire item description should be enclosed in\n        quotation marks. This can also be done to increase\n        legibility when specifying multiple items.\n    examples:\n        -equip [ RING:CREATURE:DWARF:BONE:3 ]\n            3 dwarf bone rings\n        -equip [ ITEM_WEAPON_PICK:INORGANIC:IRON ]\n            1 iron pick\n        -equip [ \"ITEM_SHIELD_BUCKLER:PLANT:OAK:WOOD\" \"AMULET:AMBER\" ]\n            1 oaken buckler and 1 amber amulet\n\n-skills [ SKILL:LEVEL ... ]\n    This can be included to add skills to the created unit.\n    Specify a skill token followed by a skill level value.\n    Look up \"Skill Token\" and \"Skill\" on the DF Wiki for a list\n        of valid tokens and levels respectively.\n    Note that the skill level provided must be a number greater than 0.\n    If the unit possesses a matching natural skill, this is added to it.\n    Quotation marks can be added for legibility as explained above.\n    example:\n        -skill [ SNEAK:1 EXTRACT_STRAND:15 ]\n            novice ambusher, legendary strand extractor\n\n-profession token\n    This can be included to set the unit's profession.\n    Replace \"token\" with a Unit Type Token (check the DF Wiki for a list).\n    For skill-based professions, it is recommended to give the unit\n        the appropriate skill set via -skills.\n    This can also be used to make animals trained for war/hunting.\n    Note that this will be overridden if the unit has been given the age\n        of a baby or child, as these have a special \"profession\" set.\n    Using this for setting baby/child status is not recommended;\n        this should be done via -age instead.\n    examples:\n        STRAND_EXTRACTOR\n        MASTER_SWORDSMAN\n        TRAINED_WAR\n\n-customProfession name\n    This can be included to give the unit a custom profession name.\n    Enclose the name in quotation marks if it includes spaces.\n    example:\n        -customProfession \"Destroyer of Worlds\"\n\n-duration ticks\n    If this is included, the unit will vanish in a puff of smoke\n        once the specified number of ticks has elapsed.\n    Replace \"ticks\" with an integer greater than 0.\n    Note that the unit's equipment will not vanish.\n\n-quantity howMany\n    This can be included to create multiple creatures simultaneously.\n    Replace \"howMany\" with the desired number of creatures.\n    Quantity defaults to 1 if this is omitted.\n\n-location [ x y z ]\n    (obligatory)\n    Specify the coordinates where you want the unit to appear.\n\n-locationRange [ x_offset y_offset z_offset ]\n    If included, the unit will be spawned at a random location\n        within the specified range relative to the target -location.\n    z_offset defaults to 0 if omitted.\n    When creating multiple units, the location is randomised each time.\n    example:\n        -locationRange [ 4 3 1 ]\n            attempts to place the unit anywhere within\n            -4 to +4 tiles on the x-axis\n            -3 to +3 tiles on the y-axis\n            -1 to +1 tiles on the z-axis\n            from the specified -location coordinates\n\n-locationType type\n    May be used with -locationRange\n        to specify what counts as a valid tile for unit spawning.\n    Unit creation will not occur if no valid tiles are available.\n    Replace \"type\" with one of the following:\n        Walkable\n            units will only be placed on walkable ground tiles\n            this is the default used if -locationType is omitted\n        Open\n            open spaces are also valid spawn points\n            this is intended for flying units\n        Any\n            all tiles, including solid walls, are valid\n            this is only recommended for ghosts not carrying items\n\n-flagSet [ flag1 flag2 ... ]\n    This can be used to set the specified unit flags to true.\n    Flags may be selected from:\n        df.unit_flags1\n        df.unit_flags2\n        df.unit_flags3\n        df.unit_flags4\n    example:\n        flagSet [ announce_titan ]\n            causes an announcement describing the unit to appear\n            when it is discovered (\"[Unit] has come! ...\")\n\n-flagClear [ flag1 flag2 ... ]\n    As above, but sets the specified unit flags to false.\n```\n\n----------------------------------------\n\nTITLE: Quickfort Usage Examples\nDESCRIPTION: Shows example commands for running the gui/quickfort script, including opening with default settings, with a custom filter, and with a pre-loaded blueprint.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/gui/quickfort.rst#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\ngui/quickfort\n    Open the quickfort interface with saved settings.\ngui/quickfort dreamfort\n    Open with a custom filter that shows only blueprints that match the string\n    ``dreamfort``.\ngui/quickfort myblueprint.csv\n    Open with the ``myblueprint.csv`` blueprint pre-loaded.\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of gui/workflow Script in DFHack\nDESCRIPTION: The script can be used in two ways: viewing/managing constraints for a selected workshop job, or viewing/managing all workflow constraints across the fortress.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/gui/workflow.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngui/workflow\n```\n\nLANGUAGE: shell\nCODE:\n```\ngui/workflow status\n```\n\n----------------------------------------\n\nTITLE: Applying Blueprint in Quickfort (Lua)\nDESCRIPTION: This code snippet demonstrates how to apply a blueprint using the Quickfort Lua script. It uses the `quickfort.apply_blueprint` function, requiring parameters that dictate the blueprint mode, data, and position. This function also allows for adjustments to blueprint settings like command execution, marker options, and more.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/quickfort.rst#2025-04-21_snippet_13\n\nLANGUAGE: lua\nCODE:\n```\nlocal quickfort = reqscript('quickfort')\n\n    -- dig a 10x10 block at the mouse cursor position\n    quickfort.apply_blueprint{mode='dig', data='d(10x10)',\n                              pos=dfhack.gui.getMousePos()}\n\n    -- dig a 10x10 block starting at coordinate x=30, y=40, z=50\n    quickfort.apply_blueprint{mode='dig', data={[50]={[40]={[30]='d(10x10)'}}}}\n```\n\n----------------------------------------\n\nTITLE: Using Quickfort Blueprint Application Command (by filename)\nDESCRIPTION: Applies blueprints from a specified file with optional name selection and parameters.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/quickfort.rst#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\nquickfort <command>[,<command>...] <filename> [-n|--name <name>[,<name>...]] [<options>]\n```\n\n----------------------------------------\n\nTITLE: Quickfort Run Example with Complex Parameters\nDESCRIPTION: Applies a dig blueprint with repetition and transformation options.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/quickfort.rst#2025-04-21_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\nquickfort run library/pump_stack.csv -n /dig --repeat up,80 --transform ccw,flipv\n```\n\n----------------------------------------\n\nTITLE: Example of Warning for Starving Dwarves Periodically - DFHack\nDESCRIPTION: A command to periodically check for starving dwarves and pets every 10 in-game days, enhancing fort management by ensuring no one starves.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/repeat.rst#2025-04-21_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nrepeat --time 10 --timeUnits days --command [ warn-starving ]\n```\n\n----------------------------------------\n\nTITLE: Using the Manipulator Script in DFHack\nDESCRIPTION: Command for launching the multi-function unit management interface that provides a spreadsheet-like UI for managing units, their skills, properties, and assignments.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/gui/manipulator.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ngui/manipulator\n```\n\n----------------------------------------\n\nTITLE: Running DFHack Sitemap Command\nDESCRIPTION: Basic command to launch the sitemap GUI interface from the DFHack console. This opens the searchable interface for people, locations and artifacts.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/gui/sitemap.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngui/sitemap\n```\n\n----------------------------------------\n\nTITLE: Basic Quickfort CLI Usage Syntax\nDESCRIPTION: Shows the basic command line syntax for running the gui/quickfort script with optional search terms.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/gui/quickfort.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ngui/quickfort [<search terms>]\n```\n\n----------------------------------------\n\nTITLE: Examples of on-new-fortress in onMapLoad.init Configuration\nDESCRIPTION: Examples of using on-new-fortress in a dfhack-config/init/onMapLoad.init file to perform automated setup tasks when a fortress is first created, including banning certain items from being cooked, running 3dveins, and setting up autobutcher.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/on-new-fortress.rst#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\non-new-fortress ban-cooking tallow; ban-cooking honey; ban-cooking oil\non-new-fortress 3dveins\non-new-fortress enable autobutcher; autobutcher autowatch\n```\n\n----------------------------------------\n\nTITLE: Build-Now Command Examples\nDESCRIPTION: Example usage of the build-now command showing how to complete all construction jobs on the map or build a specific building under the cursor.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/build-now.rst#2025-04-21_snippet_1\n\nLANGUAGE: dfhack\nCODE:\n```\nbuild-now\nbuild-now here\n```\n\n----------------------------------------\n\nTITLE: Using Quickfort List Command\nDESCRIPTION: Lists available blueprints with optional filtering by mode, source, or visibility.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/quickfort.rst#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nquickfort list [-m|--mode <mode>] [-u|--useronly] [-h|--hidden] [<search string>]\n```\n\n----------------------------------------\n\nTITLE: Quickfort List Example with Search Terms\nDESCRIPTION: Lists blueprints filtered by multiple keywords.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/quickfort.rst#2025-04-21_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\nquickfort list dreamfort help\n```\n\n----------------------------------------\n\nTITLE: Running DFHack Unit Editor Command\nDESCRIPTION: Command syntax for invoking the gm-unit graphical editor tool. Requires either a pre-selected unit in-game or a specific unit ID passed as an argument.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/gui/gm-unit.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ngui/gm-unit [unit id]\n```\n\n----------------------------------------\n\nTITLE: Using the SuspendManager GUI Script in DFHack\nDESCRIPTION: Command to invoke the graphical interface for the suspendmanager automation tool. This tool helps players intelligently manage job suspension in Dwarf Fortress.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/gui/suspendmanager.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ngui/suspendmanager\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Building Materials with modtools/create-item\nDESCRIPTION: Example showing how to create multiple instances of a valuable building material. This demonstrates the count parameter to create 5 raw adamantine boulders.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/modtools/create-item.rst#2025-04-21_snippet_3\n\nLANGUAGE: dfhack-script\nCODE:\n```\nmodtools/create-item -i BOULDER:NONE -m INORGANIC:RAW_ADAMANTINE -c 5\n```\n\n----------------------------------------\n\nTITLE: Running DFHack Autofish GUI\nDESCRIPTION: Command to launch the autofish configuration interface which allows users to manage fishing labor automation and fish stock settings.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/gui/autofish.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ngui/autofish\n```\n\n----------------------------------------\n\nTITLE: Running GUI Create Item Examples\nDESCRIPTION: Examples of how to use the gui/create-item script, including basic usage and creating unrestricted materials.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/gui/create-item.rst#2025-04-21_snippet_1\n\nLANGUAGE: dfhack\nCODE:\n```\ngui/create-item\ngui/create-item --unrestricted --count 1\n```\n\n----------------------------------------\n\nTITLE: Using the Stockpiles Script in DFHack\nDESCRIPTION: Command to invoke the graphical interface for stockpile settings management. This script must be run with a stockpile selected in 'q' mode to allow importing from or exporting to the 'stocksettings' folder.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/gui/stockpiles.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ngui/stockpiles\n```\n\n----------------------------------------\n\nTITLE: Using the DFHack Sandbox Tool in Bash\nDESCRIPTION: Command to invoke the DFHack sandbox tool for spawning units, trees, or items in Dwarf Fortress. This simple command launches the interface without any parameters.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/gui/sandbox.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngui/sandbox\n```\n\n----------------------------------------\n\nTITLE: Using the gui/spectate DFHack Script\nDESCRIPTION: Command to launch the in-game configuration interface for the spectate functionality, which allows customizing how the camera automatically follows interesting units.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/gui/spectate.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ngui/spectate\n```\n\n----------------------------------------\n\nTITLE: Checking Autofish status in DFHack\nDESCRIPTION: Command to display the current status of the autofish script, including configured values and whether fishing is currently enabled.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/autofish.rst#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nautofish status\n```\n\n----------------------------------------\n\nTITLE: Executing Workshop Job Script - DFHack Command\nDESCRIPTION: Command to launch the workshop job material configuration interface. Must be used while in workshop query mode (q) with a job selected.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/gui/workshop-job.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ngui/workshop-job\n```\n\n----------------------------------------\n\nTITLE: Example of Sorting Orders Periodically - DFHack\nDESCRIPTION: An example command that registers a periodic execution of sorting work orders every 600 ticks, ensuring efficient management of orders.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/repeat.rst#2025-04-21_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nrepeat --name orders-sort --time 600 --command [ orders sort ]\n```\n\n----------------------------------------\n\nTITLE: Using the gui/rename Command\nDESCRIPTION: Shows the basic syntax for the gui/rename command and its various usage examples, including how to rename specific targets by their IDs and how to use the tool without a target selector.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/gui/rename.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ngui/rename [<options>]\n```\n\n----------------------------------------\n\nTITLE: Executing DFHack Script for Cloning Military Uniforms\nDESCRIPTION: This command runs the DFHack script 'gui/clone-uniform' to duplicate the currently selected uniform template in the military screen of Dwarf Fortress. It should be used in the Uniforms page with the cursor in the leftmost list.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/gui/clone-uniform.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ngui/clone-uniform\n```\n\n----------------------------------------\n\nTITLE: Disabling Autofish script in DFHack\nDESCRIPTION: Command to disable the autofish script in DFHack. This stops the automatic management of fishing labors.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/autofish.rst#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ndisable autofish\n```\n\n----------------------------------------\n\nTITLE: Inspecting Properties of Selected Item - DFHack Tool\nDESCRIPTION: This tool provides functionality to inspect properties of the selected item in Dwarf Fortress, helping to diagnose issues with item interactions. It is particularly useful when dwarves refuse to use certain items, providing insights into the underlying causes.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/troubleshoot-item.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n.. dfhack-tool::\n    :summary: Inspect properties of the selected item.\n    :tags: fort inspection items\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nUsage\n-----\n::\n\n    troubleshoot-item\n```\n\n----------------------------------------\n\nTITLE: Animal Control Example Commands\nDESCRIPTION: Collection of example commands demonstrating various use cases including viewing all animals, showing specific animal stats, marking for gelding, and managing slaughter marks.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/animal-control.rst#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nanimal-control --all\nanimal-control --race DOG --showstats\nanimal-control --markfor gelding --id 1988\nanimal-control --gelded --markfor slaughter\nanimal-control --gelded --markedfor slaughter --unmarkfor slaughter\n```\n\n----------------------------------------\n\nTITLE: Using set-personality script in DFHack\nDESCRIPTION: Example usage of the set-personality script showing the basic command structure for displaying available personality traits and modifying traits for units.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/modtools/set-personality.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmodtools/set-personality --list\nmodtools/set-personality [<target option>] <trait option> <modifier option> [<other options>]\n```\n\n----------------------------------------\n\nTITLE: Enabling Equal Treatment for Happy Dwarves in Idle Crafting\nDESCRIPTION: Example command that configures the script to treat happy and ecstatic dwarves the same as other dwarves when determining crafting needs.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/idle-crafting.rst#2025-04-21_snippet_5\n\nLANGUAGE: dfhack\nCODE:\n```\nidle-crafting happy yes\n```\n\n----------------------------------------\n\nTITLE: Executing Civil War Fix Command - DFHack\nDESCRIPTION: Command to execute the civil war fix script in DFHack. Running this command removes negative relations with the player's own government and can help restore normal caravan and migrant behavior.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/fix/civil-war.rst#2025-04-21_snippet_0\n\nLANGUAGE: dfhack\nCODE:\n```\nfix/civil-war\n```\n\n----------------------------------------\n\nTITLE: Commands for Using Settings Manager in DFHack\nDESCRIPTION: A list of command-line syntax for using the settings-manager script. These commands allow saving and loading different types of DF settings such as difficulty levels, standing orders, and work details configurations.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/gui/settings-manager.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ngui/settings-manager save-difficulty\ngui/settings-manager load-difficulty\ngui/settings-manager save-standing-orders\ngui/settings-manager load-standing-orders\ngui/settings-manager save-work-details\ngui/settings-manager load-work-details\n```\n\n----------------------------------------\n\nTITLE: Installing DFHack Scripts and JSON Files in CMake\nDESCRIPTION: This CMake snippet installs Lua scripts and JSON files from the current source directory to the DFHack data destination. It excludes the 'docs' and 'test' subdirectories from the installation.\nSOURCE: https://github.com/dfhack/scripts/blob/master/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}\n        DESTINATION ${DFHACK_DATA_DESTINATION}\n        FILES_MATCHING PATTERN \"*.lua\"\n                       PATTERN \"*.json\"\n                       PATTERN \"scripts/docs\" EXCLUDE\n                       PATTERN \"scripts/test\" EXCLUDE\n)\n```\n\n----------------------------------------\n\nTITLE: Registering a Command to Repeat Periodically - DFHack\nDESCRIPTION: This command allows you to register a DFHack command to execute periodically after a specified delay. It requires the command to be enclosed in square brackets and supports various time units.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/repeat.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nrepeat [--name <name>] --time <delay> [--timeUnits <units>] --command [ <command> ]\n```\n\n----------------------------------------\n\nTITLE: Basic Multicmd Usage Syntax\nDESCRIPTION: Demonstrates the basic syntax for using the multicmd command to chain multiple DFHack commands together using semicolons as separators.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/multicmd.rst#2025-04-21_snippet_0\n\nLANGUAGE: dfhack\nCODE:\n```\nmulticmd <command>; <command>[; <command> ...]\n```\n\n----------------------------------------\n\nTITLE: Example Commands for fix/wildlife Script\nDESCRIPTION: Practical examples of fix/wildlife commands for different scenarios, including immediate removal of stuck wildlife, removing wildlife stuck for at least a week, and selectively ignoring specific wildlife units.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/fix/wildlife.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfix/wildlife\nfix/wildlife --week\nfix/wildlife ignore\n```\n\n----------------------------------------\n\nTITLE: Using the autochop script in DFHack\nDESCRIPTION: Command to launch the autochop interface that allows configuration of automatic tree harvesting based on stockpiled logs, target quantities, and burrow selection.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/gui/autochop.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ngui/autochop\n```\n\n----------------------------------------\n\nTITLE: Basic Caravan Commands Usage\nDESCRIPTION: Shows the basic command syntax for caravan management including listing, extending stay duration, making merchants happy, and forcing departure.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/caravan.rst#2025-04-21_snippet_0\n\nLANGUAGE: dfhack\nCODE:\n```\ncaravan [list]\ncaravan extend [<days> [<ids>]]\ncaravan happy [<ids>]\ncaravan leave [<ids>]\ncaravan unload\n```\n\n----------------------------------------\n\nTITLE: Configuring Projectile Trigger Commands in DFHack\nDESCRIPTION: Command syntax for the projectile-trigger script. Allows clearing triggers, specifying material types for projectiles, and defining commands with special parameters like location, projectile ID, and firer ID.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/modtools/projectile-trigger.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-clear\n    unregister all triggers\n-material\n    specify a material for projectiles that will trigger the command\n    examples:\n        INORGANIC:IRON\n        CREATURE_MAT:DWARF:BRAIN\n        PLANT_MAT:MUSHROOM_HELMET_PLUMP:DRINK\n-command [ commandList ]\n    \\\\LOCATION\n    \\\\PROJECTILE_ID\n    \\\\FIRER_ID\n    \\\\anything -> \\anything\n    anything -> anything\n```\n\n----------------------------------------\n\nTITLE: pop-control Command Examples\nDESCRIPTION: Practical examples of using the pop-control commands in DFHack, including enabling the tool, displaying current settings, limiting wave size to 5 migrants, and resetting to default values.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/pop-control.rst#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nenable pop-control\npop-control\npop-control set wave-size 5\npop-control reset\n```\n\n----------------------------------------\n\nTITLE: Running Makeown Command in DFHack\nDESCRIPTION: Simple command to convert a selected unit into a fortress citizen. The unit must be selected in the UI before running the command. Useful for converting foreign units and fixing bugged merchant workers.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/makeown.rst#2025-04-21_snippet_0\n\nLANGUAGE: dfhack\nCODE:\n```\nmakeown\n```\n\n----------------------------------------\n\nTITLE: Creating a Weapon with modtools/create-item\nDESCRIPTION: Example showing how to create a high-quality iron pick for a specific unit. It demonstrates setting unit ID, item type, material, and quality parameters.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/modtools/create-item.rst#2025-04-21_snippet_1\n\nLANGUAGE: dfhack-script\nCODE:\n```\nmodtools/create-item -u 23145 -i WEAPON:ITEM_WEAPON_PICK -m INORGANIC:IRON -q4\n```\n\n----------------------------------------\n\nTITLE: Using Quickfort GUI Command\nDESCRIPTION: Launches the interactive quickfort UI for blueprint selection and preview.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/quickfort.rst#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nquickfort gui [<filename or search terms>]\n```\n\n----------------------------------------\n\nTITLE: Running reveal-hidden-sites with DFHack\nDESCRIPTION: The 'reveal-hidden-sites' script is used to make all sites visible in the Dwarf Fortress game world. It can be run in fortress mode, adventure mode, or on the embark map. The script does not require additional parameters and outputs all hidden locations, such as camps, lairs, and shrines, on the map. Note that this script only reveals sites, and for exposing hidden world map tiles, 'reveal-adv-map' should be used.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/reveal-hidden-sites.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nreveal-hidden-sites\n```\n\n----------------------------------------\n\nTITLE: Quickfort GUI Example for Aquifer Tap Blueprint\nDESCRIPTION: Shows an interactive preview for a specific blueprint from the library.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/quickfort.rst#2025-04-21_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\nquickfort gui library/aquifer_tap.csv -n /dig\n```\n\n----------------------------------------\n\nTITLE: Example Usage of fix/occupancy Script\nDESCRIPTION: Demonstrates three practical examples of using the fix/occupancy script: fixing all map issues, fixing issues at the cursor position, and running in dry-run mode to only report issues.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/fix/occupancy.rst#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nfix/occupancy\nfix/occupancy here\nfix-unit-occupancy -n\n```\n\n----------------------------------------\n\nTITLE: Running the Adventure Fortress Script in DFHack\nDESCRIPTION: This command launches the Adventure Fortress GUI for interactive job selection in Dwarf Fortress adventure mode. It allows specifying a job type and options.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/gui/advfort.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ngui/advfort [<job type>] [<options>]\n```\n\n----------------------------------------\n\nTITLE: Feature Command Usage Examples\nDESCRIPTION: Lists the available commands for the feature script, including listing map features, enabling magma furnaces, and showing/hiding specific features by index.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/feature.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nfeature list\nfeature magma\nfeature show <index>\nfeature hide <index>\n```\n\n----------------------------------------\n\nTITLE: Invoking the fix/ownership Script in Dwarf Fortress DFHack\nDESCRIPTION: Command to run the ownership fix script in DFHack. When executed, it validates and fixes broken ownership links for items and rooms in Dwarf Fortress. The script can also be configured to run automatically once per game day via the control panel.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/fix/ownership.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nfix/ownership\n```\n\n----------------------------------------\n\nTITLE: DFHack Forbid Command Usage Examples\nDESCRIPTION: Shows the three main usage patterns for the forbid command: listing forbidden items, forbidding all items, and forbidding unreachable items. Each command serves a different purpose in managing item accessibility.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/forbid.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nforbid\nforbid all\nforbid unreachable\n```\n\n----------------------------------------\n\nTITLE: Basic Blueprint GUI Command\nDESCRIPTION: Basic command syntax for launching the blueprint GUI interface with optional parameters for name, phases, and other configuration options.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/gui/blueprint.rst#2025-04-21_snippet_0\n\nLANGUAGE: dfhack\nCODE:\n```\ngui/blueprint [<name> [<phases>]] [<options>]\n```\n\n----------------------------------------\n\nTITLE: Using DFHack Deathcause Command\nDESCRIPTION: Simple command usage to display the cause of death for a selected corpse or body part in Dwarf Fortress. Must be used with a corpse or body part selected on the ground.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/deathcause.rst#2025-04-21_snippet_0\n\nLANGUAGE: plain\nCODE:\n```\ndeathcause\n```\n\n----------------------------------------\n\nTITLE: Basic Diplomacy Script Usage Commands\nDESCRIPTION: Shows the basic command syntax for using the diplomacy script. Includes commands for viewing current relationships, modifying relationships with specific civilizations, and changing relationships with all civilizations.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/diplomacy.rst#2025-04-21_snippet_0\n\nLANGUAGE: dfhack-script\nCODE:\n```\ndiplomacy\ndiplomacy all <RELATIONSHIP>\ndiplomacy <CIV_ID> <RELATIONSHIP>\n```\n\n----------------------------------------\n\nTITLE: Using the DFHack Unit Path Inspection Script\nDESCRIPTION: This code snippet demonstrates how to use the 'devel/unit-path' script in DFHack. When executed, it highlights the path of a selected unit on the map and allows jumping between the unit and its destination.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/devel/unit-path.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndevel/unit-path\n```\n\n----------------------------------------\n\nTITLE: Using the gui/launcher Command Syntax\nDESCRIPTION: Shows the basic syntax for running the gui/launcher command, including the minimal mode option and ability to pre-populate with an initial command.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/gui/launcher.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngui/launcher [initial commandline]\ngui/launcher -m|--minimal [initial commandline]\n```\n\n----------------------------------------\n\nTITLE: Example of spawning water with the spawn-liquid script\nDESCRIPTION: Practical example showing how to spawn water at maximum level (7/7) at specific map coordinates using the spawn-liquid script.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/modtools/spawn-liquid.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nmodtools/spawn-liquid --type Water --level 7 --position 60,60,143\n```\n\n----------------------------------------\n\nTITLE: Breaking Stuck Dance Command - DFHack\nDESCRIPTION: Simple DFHack command that fixes bugged tavern dances where units are stuck in an endless dance state due to missing dance partners.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/break-dance.rst#2025-04-21_snippet_0\n\nLANGUAGE: dfhack\nCODE:\n```\nbreak-dance\n```\n\n----------------------------------------\n\nTITLE: Caravan Command Examples\nDESCRIPTION: Practical examples of caravan command usage including listing caravans, extending their stay, managing merchant happiness, and fixing unloading issues.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/caravan.rst#2025-04-21_snippet_1\n\nLANGUAGE: dfhack\nCODE:\n```\ncaravan\ncaravan extend\ncaravan extend 30 0 1\ncaravan happy\ncaravan leave\ncaravan unload\n```\n\n----------------------------------------\n\nTITLE: Examples of ban-cooking script usage in DFHack\nDESCRIPTION: These examples demonstrate how to use the ban-cooking script to ban specific item types (oil and tallow) or all useful types of food from being cooked in Dwarf Fortress.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/ban-cooking.rst#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nban-cooking oil tallow\nban-cooking all\n```\n\n----------------------------------------\n\nTITLE: Using Quickfort Blueprint Application Command (by ID)\nDESCRIPTION: Applies blueprints identified by their list ID with optional commands and parameters.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/quickfort.rst#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nquickfort <command>[,<command>...] <list_id>[,<list_id>...] [<options>]\n```\n\n----------------------------------------\n\nTITLE: Using assign-attributes Basic Command Syntax in Shell\nDESCRIPTION: Basic command syntax for the assign-attributes script, which allows modification of unit attributes in Dwarf Fortress. It supports specifying a target unit or uses the currently selected unit by default.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/assign-attributes.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nassign-attributes [--unit <id>] <options>\n```\n\n----------------------------------------\n\nTITLE: Querying Autostart Status in Lua for DFHack Control Panel\nDESCRIPTION: This code snippet demonstrates how to use the control-panel script API to query whether a command is set for autostart in DFHack. It requires the control-panel script and returns the enabled status and default value for a given command.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/control-panel.rst#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal control_panel = reqscript('control-panel')\nlocal enabled, default = control_panel.get_autostart(command)\n```\n\n----------------------------------------\n\nTITLE: Geld Script Usage Examples\nDESCRIPTION: Example commands showing how to geld a selected animal, toggle gelding status, or ungeld a specific unit by ID.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/geld.rst#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\ngeld\ngeld --toggle\ngeld --ungeld --unit 24242\n```\n\n----------------------------------------\n\nTITLE: Running Luacov Coverage Report Command\nDESCRIPTION: Command syntax for running the luacov coverage report generator. Supports optional patterns for filtering files and directories, and includes a --clear flag to remove accumulated metrics after report generation.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/devel/luacov.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nluacov [options] [pattern...]\n```\n\nLANGUAGE: bash\nCODE:\n```\ndevel/luacov -c quickfort\n```\n\nLANGUAGE: bash\nCODE:\n```\ndevel/luacov quickfort hack/lua\n```\n\n----------------------------------------\n\nTITLE: Boosting Populations of Multiple Races\nDESCRIPTION: This command applies the boost function to all races that match a given pattern, modifying their populations by the specified factor.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/region-pops.rst#2025-04-21_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n``region-pops boost-all <pattern> <factor>``\n```\n\n----------------------------------------\n\nTITLE: Running the fix/population-cap DFHack Script\nDESCRIPTION: Command to execute the fix/population-cap script in DFHack. This updates the game's internal population count to match the current fortress population, ensuring the population cap is respected when determining future migrant waves.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/fix/population-cap.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfix/population-cap\n```\n\n----------------------------------------\n\nTITLE: Full-heal Script Examples in DFHack\nDESCRIPTION: This snippet provides specific examples of using the full-heal script in DFHack. It shows how to heal a selected unit and how to resurrect a specific unit while keeping its corpse.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/full-heal.rst#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nfull-heal\nfull-heal -r --keep_corpse --unit 23273\n```\n\n----------------------------------------\n\nTITLE: Teleporting Units with DFHack Script\nDESCRIPTION: This script facilitates teleporting units, utilizing DFHack's capabilities to move any chosen unit, whether friendly or hostile, to a specified location on the map. It requires DFHack to be installed and provides command-line options to define a unit ID or X, Y, and Z coordinates. The tool uses the current cursor position if no parameters are provided, making either the unit ID or coordinates necessary for effective use. Utilities such as `cprobe` and `position` are used to obtain unit IDs or map coordinates.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/teleport.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nteleport [--unit <id>] [-x <x> -y <y> -z <z>]\n```\n\nLANGUAGE: bash\nCODE:\n```\ncprobe\nteleport --unit 2342\n```\n\nLANGUAGE: bash\nCODE:\n```\nposition\nteleport -x 34 -y 20 -z 163\n```\n\nLANGUAGE: bash\nCODE:\n```\nteleport -unit 1234 -x 56 -y 115 -z 26\n```\n\n----------------------------------------\n\nTITLE: Deep Embark Script Examples in Lua\nDESCRIPTION: Example commands demonstrating how to use the deep-embark script. The first example shows how to embark in the second cavern layer, while the second example shows how to embark in the underworld with demon blocking enabled.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/deep-embark.rst#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\ndeep-embark --depth CAVERN_2\n```\n\nLANGUAGE: lua\nCODE:\n```\ndeep-embark --depth UNDERWORLD --blockDemons\n```\n\n----------------------------------------\n\nTITLE: Using the gui/biomes command in DFHack\nDESCRIPTION: Command syntax for running the biomes visualization tool in DFHack. This command launches an interface that shows biome boundaries on the map and provides detailed information when hovering over biome entries in the list.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/gui/biomes.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ngui/biomes\n```\n\n----------------------------------------\n\nTITLE: Changing Weather State in DFHack\nDESCRIPTION: Allows direct manipulation of weather conditions by specifying clear, rain, or snow states. Useful for immediate weather control in the game environment.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/weather.rst#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nweather clear\nweather rain\nweather snow\n```\n\n----------------------------------------\n\nTITLE: DFHack Structure Scanner Commands\nDESCRIPTION: Command syntax for running the structure scanner script with different scan targets. Can scan the world object, all globals, or a specific expression.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/devel/sc.rst#2025-04-21_snippet_0\n\nLANGUAGE: dfhack\nCODE:\n```\ndevel/sc\n```\n\nLANGUAGE: dfhack\nCODE:\n```\ndevel/sc -all\n```\n\nLANGUAGE: dfhack\nCODE:\n```\ndevel/sc <expr>\n```\n\n----------------------------------------\n\nTITLE: Listing Known Race Populations\nDESCRIPTION: This command shows the race populations of the region that your civilization knows about, allowing for optional pattern filtering.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/region-pops.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n``region-pops list [<pattern>]``\n```\n\n----------------------------------------\n\nTITLE: Unforbidding Items - DFHack Command\nDESCRIPTION: This code provides the command for the unforbid tool, describing its functionality and usage details. The tool is designed to be utilized in Dwarf Fortress to easily remove bans from items, which is particularly helpful after sieges. It supports various options that modify its behavior, enhancing its utility for players.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/unforbid.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nunforbid all [<options>]\n```\n\n----------------------------------------\n\nTITLE: Maximizing Skills for Dwarves in Dwarf Fortress Embark\nDESCRIPTION: This command sets all skills of the selected dwarf or all dwarves to 'Proficient' level. It's used to quickly boost the overall skill level of embarking dwarves.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/embark-skills.rst#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nembark-skills max [all]\n```\n\n----------------------------------------\n\nTITLE: Providing Examples of Exterminate Script Usage in DFHack\nDESCRIPTION: Illustrates specific examples of how to use the exterminate script, including listing targets, killing selected units, and killing specific races or castes with various options.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/exterminate.rst#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nexterminate\nexterminate this\nexterminate BIRD_RAVEN:MALE\nexterminate goblin --method magma --only-visible\nexterminate all\nexterminate all:MALE\n```\n\n----------------------------------------\n\nTITLE: Running the DFHack Control Panel Script\nDESCRIPTION: The command to execute the DFHack control panel interface from the DFHack console. This launches the GUI that allows users to configure DFHack and manage active tools.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/gui/control-panel.rst#2025-04-21_snippet_0\n\nLANGUAGE: dfhack\nCODE:\n```\ngui/control-panel\n```\n\n----------------------------------------\n\nTITLE: Setting Animal Training Level in DFHack\nDESCRIPTION: This command is used to set the training level of a selected animal. The level can be between 0 (semi-wild) and 7 (tame), with specific commands to tame or revert an animal to a wild state.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/tame.rst#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\ntame --set <level>\n```\n\nLANGUAGE: plaintext\nCODE:\n```\ntame --set 7\n```\n\nLANGUAGE: plaintext\nCODE:\n```\ntame --set 8\n```\n\n----------------------------------------\n\nTITLE: Running DFHack Quickstart Guide Command\nDESCRIPTION: Console command to launch the in-game quickstart guide viewer for DFHack. This command opens a window where players can browse through sections of the official DFHack documentation.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/quickstart-guide.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nquickstart-guide\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of modtools/create-item DFHack Script\nDESCRIPTION: The basic command syntax for using the create-item script. This command requires various options to specify the properties of the item to be created.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/modtools/create-item.rst#2025-04-21_snippet_0\n\nLANGUAGE: dfhack-script\nCODE:\n```\nmodtools/create-item <options>\n```\n\n----------------------------------------\n\nTITLE: Using the Room List Command in DFHack\nDESCRIPTION: Command syntax for invoking the room-list tool in DFHack. This command must be run in 'q' mode with the cursor over an owned room to properly function.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/gui/room-list.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ngui/room-list\n```\n\n----------------------------------------\n\nTITLE: Using fix/dead-units DFHack Script for Removing Dead Units\nDESCRIPTION: Command syntax for the fix/dead-units script showing available options for dealing with dead units. The script can clean the active unit list (default) or burrow assignments, with an optional quiet mode to reduce console output.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/fix/dead-units.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nfix/dead-units [--active] [-q]\nfix/dead-units --burrow [-q]\n```\n\n----------------------------------------\n\nTITLE: Enabling the Kitchen Info GUI Overlay in DFHack\nDESCRIPTION: Command to enable the gui/kitchen-info script which adds information about alternate uses of food items to the Kitchen screen interface. This overlay helps players understand potential uses for items before deciding whether to mark them for cooking.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/gui/kitchen-info.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nenable gui/kitchen-info\n```\n\n----------------------------------------\n\nTITLE: Using modtools/skill-change command in DFHack\nDESCRIPTION: Command syntax for the skill-change script showing how to modify a unit's skill. The command requires unit ID, skill name, modification mode, granularity level, and value parameters, with an optional loud flag for console output.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/modtools/skill-change.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmodtools/skill-change --unit <id> --skill <skill> --mode <mode> --granularity <granularity> --value <amount> [--loud]\n```\n\n----------------------------------------\n\nTITLE: Using Build-Now Command in DFHack\nDESCRIPTION: Command syntax for the build-now script showing usage with optional position parameters and flags. Allows for instant completion of building construction either globally or within specified coordinates.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/build-now.rst#2025-04-21_snippet_0\n\nLANGUAGE: dfhack\nCODE:\n```\nbuild-now [<pos> [<pos>]] [<options>]\n```\n\n----------------------------------------\n\nTITLE: Example of Growing Plump Helmets in DFHack\nDESCRIPTION: A practical example showing how to grow specifically plump helmet spawn seeds. This demonstrates the substring matching functionality where 'plump' is sufficient to identify plump helmet spawn.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/growcrops.rst#2025-04-21_snippet_3\n\nLANGUAGE: plain\nCODE:\n```\ngrowcrops plump\n```\n\n----------------------------------------\n\nTITLE: Example Usage of assign-goals with Goal Setting in DFHack\nDESCRIPTION: Demonstrates how to reset a unit's goals and set a new one. This example clears all goals and adds the 'master a skill' goal, resulting in the unit dreaming of mastering a skill.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/assign-goals.rst#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nassign-goals --reset --goals [ MASTER_A_SKILL false ]\n```\n\n----------------------------------------\n\nTITLE: Querying Races and Castes in DFHack\nDESCRIPTION: This command snippet queries the available races and castes within the game using DFHack's query tool. Important dependencies include the 'devel/query' module of DFHack. It has no parameters and outputs a list of available creature IDs and caste IDs within the game's world.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/spawnunit.rst#2025-04-21_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ndevel/query --table df.global.world.raws.creatures.all --search [ creature_id caste_id ] --maxdepth 3 --maxlength 5000\n```\n\n----------------------------------------\n\nTITLE: Using the Extinguish Command in DFHack\nDESCRIPTION: Shows the basic usage commands for the extinguish script. Players can either put out fire on a selected target or use the --all flag to extinguish all fires on the map.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/extinguish.rst#2025-04-21_snippet_0\n\nLANGUAGE: plain\nCODE:\n```\nextinguish\n    Put out the fire affecting the selected unit/item/map tile.\nextinguish --all\n    Put out all fires on the map.\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Position Command in DFHack\nDESCRIPTION: Examples showing how to use the position command to print information or copy cursor coordinates to the clipboard.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/position.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nposition\nposition -c\n```\n\n----------------------------------------\n\nTITLE: Examples of Empty Wheelbarrows Script Usage\nDESCRIPTION: Demonstrates three different ways to run the script: standard operation that lists all affected wheelbarrows, dry run mode that only shows what would happen, and quiet mode that suppresses console output.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/fix/empty-wheelbarrows.rst#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nfix/empty-wheelbarrows\nfix/empty-wheelbarrows --dry-run\nfix/empty-wheelbarrows --quiet\n```\n\n----------------------------------------\n\nTITLE: Running Unit Info Viewer in DFHack\nDESCRIPTION: Command to launch the unit information viewer interface. The tool remains active and updates dynamically when different units are selected.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/gui/unit-info-viewer.rst#2025-04-21_snippet_0\n\nLANGUAGE: dfhack-script\nCODE:\n```\ngui/unit-info-viewer\n```\n\n----------------------------------------\n\nTITLE: Using the Liquids Management Tool in DFHack\nDESCRIPTION: The command to launch the interactive liquids painting tool in DFHack. Once launched, it allows the user to click and paint liquids onto the map.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/gui/liquids.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ngui/liquids\n```\n\n----------------------------------------\n\nTITLE: Using full-heal Script in DFHack\nDESCRIPTION: This snippet demonstrates various usage examples of the full-heal script in DFHack. It includes options for healing single units, resurrecting units, and healing multiple units based on different criteria.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/full-heal.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nfull-heal\nfull-heal --unit <unitId>\nfull-heal -r [--keep_corpse]\nfull-heal --all [-r] [--keep_corpse]\nfull-heal --all_citizens [-r] [--keep_corpse]\nfull-heal --all_civ [-r] [--keep_corpse]\n```\n\n----------------------------------------\n\nTITLE: Running gui/launcher Examples\nDESCRIPTION: Demonstrates three different ways to invoke the gui/launcher script: with no parameters, in minimal mode, and with a pre-populated prospect command that includes arguments.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/gui/launcher.rst#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngui/launcher\ngui/launcher --minimal\ngui/launcher prospect --show ores,veins\n```\n\n----------------------------------------\n\nTITLE: Using the Position Command in DFHack\nDESCRIPTION: The position command reports information about game time, cursor position, window size, mouse location, and world coordinates. The optional --copy flag allows copying the cursor position to the clipboard.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/position.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nposition [--copy]\n```\n\n----------------------------------------\n\nTITLE: Query DFHack Tables\nDESCRIPTION: Commands to view built-in professions, skills, and attributes in DFHack.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/dwarf-op.rst#2025-04-21_snippet_1\n\nLANGUAGE: dfhack-script\nCODE:\n```\ndevel/query --table df.profession\ndevel/query --table df.job_skill\ndevel/query --table df.physical_attribute_type\ndevel/query --table df.mental_attribute_type\n```\n\n----------------------------------------\n\nTITLE: Prioritize Command Examples for Dwarf Fortress\nDESCRIPTION: Lists various usage examples of the prioritize command, showing how to check current priorities, enable default prioritization, prioritize specific jobs, and disable the tool.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/prioritize.rst#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nprioritize\nenable prioritize, prioritize -a defaults\nprioritize -j\nprioritize ConstructBuilding DestroyBuilding\nprioritize -a --haul-labor=Food,Body StoreItemInStockpile\ndisable prioritize\n```\n\n----------------------------------------\n\nTITLE: Examples of elevate-physical Usage in DFHack\nDESCRIPTION: Example commands for the elevate-physical script, showing how to maximize a dwarf's physical attributes or set them to a specific lower value for special purposes like creating an ineffective hammerer.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/elevate-physical.rst#2025-04-21_snippet_1\n\nLANGUAGE: dfhack\nCODE:\n```\nelevate-physical\nelevate-physical 100\n```\n\n----------------------------------------\n\nTITLE: Using the Markdown Export Script\nDESCRIPTION: Basic usage examples for the DFHack markdown script, showing how to export descriptions to default and custom files.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/markdown.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmarkdown [<name>] [<options>]\n```\n\n----------------------------------------\n\nTITLE: Removing Wear from Items with Dfhack Script in Lua\nDESCRIPTION: The provided snippet instructs the usage of a Dfhack script to manage item wear in a Dwarf Fortress fort. By using the `remove-wear` command, players can either remove wear from all items or target specific items using their ID numbers. The key input is the item ID, which can be found using a Lua command within the Dwarf Fortress interface. This script requires the Dfhack tool to be installed and operational within the Dwarf Fortress game environment.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/remove-wear.rst#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n:lua !item.id\n\n```\n\n----------------------------------------\n\nTITLE: Running DFHack Teleport Script\nDESCRIPTION: Command to launch the interactive teleport interface. Once launched, allows drawing selection boxes around units and double clicking destination tiles to teleport them.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/gui/teleport.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ngui/teleport\n```\n\n----------------------------------------\n\nTITLE: Combat-Harden Usage Examples\nDESCRIPTION: Examples demonstrating how to apply combat hardening to the selected unit and to all fort citizens. Shows the basic syntax and parameter usage of the script.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/combat-harden.rst#2025-04-21_snippet_1\n\nLANGUAGE: plain\nCODE:\n```\ncombat-harden\ncombat-harden --citizens --tier 2\n```\n\n----------------------------------------\n\nTITLE: Running DFStatus GUI Script\nDESCRIPTION: Command to launch the DFHack status overview interface from the DFHack console. The script provides a quick overview of critical stock quantities that can be customized via dfhack-config/dfstatus.lua.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/gui/dfstatus.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngui/dfstatus\n```\n\n----------------------------------------\n\nTITLE: Making All Starting Dwarves Legendary in Dwarf Fortress Embark\nDESCRIPTION: This example shows how to set all skills of all starting dwarves to 'Legendary' level. It creates an extremely powerful starting group for a new fortress.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/embark-skills.rst#2025-04-21_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nembark-skills legendary all\n```\n\n----------------------------------------\n\nTITLE: DFHack Reaction Trigger Command Arguments\nDESCRIPTION: Lists the command-line arguments and options available for the reaction-trigger script. Includes options for reaction names, syndrome application, target selection, range settings, and command execution.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/modtools/reaction-trigger.rst#2025-04-21_snippet_0\n\nLANGUAGE: dfhack\nCODE:\n```\n-clear\n    unregister all reaction hooks\n-reactionName name\n    specify the name of the reaction\n-syndrome name\n    specify the name of the syndrome to be applied to valid targets\n-allowNonworkerTargets\n    allow other units to be targeted if the worker is invalid or ignored\n-allowMultipleTargets\n    allow all valid targets within range to be affected\n    if absent:\n        if running a script, only one target will be used\n        if applying a syndrome, then only one target will be infected\n-ignoreWorker\n    ignores the worker when selecting the targets\n-dontSkipInactive\n    when selecting targets in range, include creatures that are inactive\n    dead creatures count as inactive\n-range [ x y z ]\n    controls how far eligible targets can be from the workshop\n    defaults to [ 0 0 0 ] (on a workshop tile)\n    negative numbers can be used to ignore outer squares of the workshop\n    line of sight is not respected, and the worker is always within range\n-resetPolicy policy\n    the policy in the case that the syndrome is already present\n    policy\n        NewInstance (default)\n        DoNothing\n        ResetDuration\n        AddDuration\n-command [ commandStrs ]\n    specify the command to be run on the target(s)\n    special args\n        \\\\WORKER_ID\n        \\\\TARGET_ID\n        \\\\BUILDING_ID\n        \\\\LOCATION\n        \\\\REACTION_NAME\n        \\\\anything -> \\anything\n        anything -> anything\n    when used with -syndrome, the target must be valid for the syndrome\n    otherwise, the command will not be run for that target\n```\n\n----------------------------------------\n\nTITLE: Loading Default Color Scheme in Lua\nDESCRIPTION: This command loads the previously set default color scheme. It's useful for automatically applying a preferred scheme on startup.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/color-schemes.rst#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\ncolor-schemes default load\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of assign-goals Script in DFHack\nDESCRIPTION: Shows the basic command syntax for the assign-goals script. This command allows players to modify a unit's goals with optional unit ID specification.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/assign-goals.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nassign-goals [--unit <id>] <options>\n```\n\n----------------------------------------\n\nTITLE: Using modtools/add-syndrome Script in DFHack\nDESCRIPTION: Command syntax examples for the modtools/add-syndrome script. The first line shows the basic usage pattern, and the second shows how to erase syndromes by class.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/modtools/add-syndrome.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmodtools/add-syndrome --target <id> --syndrome <name>|<id> [<options>]\nmodtools/add-syndrome --target <id> --eraseClass <class>\n```\n\n----------------------------------------\n\nTITLE: Justice Command Examples\nDESCRIPTION: Practical examples of using the justice commands to list convicts and pardon selected prisoners.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/justice.rst#2025-04-21_snippet_1\n\nLANGUAGE: dfhack\nCODE:\n```\njustice\njustice pardon\n```\n\n----------------------------------------\n\nTITLE: Running the Tiletypes GUI Command in DFHack\nDESCRIPTION: Shows the basic syntax for running the tiletypes GUI tool in DFHack, with an optional flag for unrestricted stone types.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/gui/tiletypes.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ngui/tiletypes [<options>]\n```\n\n----------------------------------------\n\nTITLE: Running SeedWatch GUI Interface in DFHack\nDESCRIPTION: Command to launch the SeedWatch configuration interface that manages seed stock levels and cooking permissions. When seed counts fall below target levels, cooking is prevented to preserve stock. Cooking is re-enabled when stock exceeds target plus 20.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/gui/seedwatch.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ngui/seedwatch\n```\n\n----------------------------------------\n\nTITLE: Full Reveal Command with Hell Option\nDESCRIPTION: Example of using the reveal command with the 'hell' parameter to fully reveal all map features including adamantine spires, gemstone pillars, and the underworld.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/gui/reveal.rst#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngui/reveal hell\n```\n\n----------------------------------------\n\nTITLE: Executing DFHack Autobutcher GUI Script\nDESCRIPTION: This command launches the in-game interface for the autobutcher script, allowing users to set thresholds for livestock population control. The interface enables users to specify how many animals to keep, with excess automatically marked for butchering.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/gui/autobutcher.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ngui/autobutcher\n```\n\n----------------------------------------\n\nTITLE: Listing Currently Registered Commands - DFHack\nDESCRIPTION: This command lists all currently registered periodic commands and their identifiers, making it easy to manage running commands.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/repeat.rst#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nrepeat --list\n```\n\n----------------------------------------\n\nTITLE: Using GUI Create Item Script in DFHack\nDESCRIPTION: Basic usage syntax for the gui/create-item script showing how to run it with optional parameters.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/gui/create-item.rst#2025-04-21_snippet_0\n\nLANGUAGE: dfhack\nCODE:\n```\ngui/create-item [<options>]\n```\n\n----------------------------------------\n\nTITLE: Setting Available Embark Points in Dwarf Fortress using DFHack\nDESCRIPTION: This command allows players to set the available points at the embark screen to any specified number. It must be run while selecting embark items and skills. Positive values grant more resources while setting to zero creates a challenge scenario.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/points.rst#2025-04-21_snippet_0\n\nLANGUAGE: dfhack-script\nCODE:\n```\npoints <num>\n```\n\n----------------------------------------\n\nTITLE: Gaydar Usage Examples\nDESCRIPTION: Examples demonstrating basic unit selection and filtering for asexual citizens.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/gaydar.rst#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ngaydar\ngaydar --citizens --asexual\n```\n\n----------------------------------------\n\nTITLE: Dwarf Pregnancy Example\nDESCRIPTION: Example demonstrating how to cause pregnancies in dwarf females to increase fortress population.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/catsplosion.rst#2025-04-21_snippet_4\n\nLANGUAGE: text\nCODE:\n```\ncatsplosion DWARF\n```\n\n----------------------------------------\n\nTITLE: Creating Specific Workorder with JSON in DFHack Script\nDESCRIPTION: Leverage JSON to create detailed and specific workorders in Dwarf Fortress via a DFHack script. This approach allows setting multiple criteria such as item category and amount for precise order management.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/workorder.rst#2025-04-21_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\n\"workorder \\\"{\\\"job\\\":\\\"EncrustWithGems\\\",\\\"item_category\\\":[\\\"finished_goods\\\"],\\\"amount_total\\\":5}\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Using add-recipe Command Syntax\nDESCRIPTION: Demonstrates the syntax for using the add-recipe command. Shows the basic command structure for adding recipes to civilizations in Dwarf Fortress.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/add-recipe.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nadd-recipe (all|native)\nadd-recipe single <item token>\n```\n\n----------------------------------------\n\nTITLE: Creating Food Items with modtools/create-item\nDESCRIPTION: Example demonstrating how to create prepared food from creature parts. This shows how to specify a unit to create a prepared brain from a dwarf.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/modtools/create-item.rst#2025-04-21_snippet_2\n\nLANGUAGE: dfhack-script\nCODE:\n```\nmodtools/create-item -u 323 -i MEAT:NONE -m CREATURE:DWARF:BRAIN\n```\n\n----------------------------------------\n\nTITLE: Executing DFHack Script for Listing Building Input Filters\nDESCRIPTION: This command runs the 'list-filters' script in the devel directory of DFHack. It displays the input items available for the currently selected building type in build mode. The filters shown are sourced from the 'buildings.lua' file in the DFHack lua directory.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/devel/list-filters.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndevel/list-filters\n```\n\n----------------------------------------\n\nTITLE: Using the pop-control Command in DFHack\nDESCRIPTION: This code block demonstrates the various command formats for the pop-control tool. It includes commands to enable the tool, check status, configure wave size and maximum population limits, and reset to default values.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/pop-control.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nenable pop-control\npop-control [status]\npop-control set wave-size <wave_size>\npop-control set max-pop <max_pop>\npop-control reset\n```\n\n----------------------------------------\n\nTITLE: Running DFHack Input Monitor\nDESCRIPTION: Command to launch the input monitoring interface from DFHack's development tools\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/devel/input-monitor.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ndevel/input-monitor\n```\n\n----------------------------------------\n\nTITLE: Diplomacy Script Example Commands\nDESCRIPTION: Practical examples of using the diplomacy script, including viewing relationships, setting peace with a specific civilization, and declaring war on all civilizations.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/diplomacy.rst#2025-04-21_snippet_1\n\nLANGUAGE: dfhack-script\nCODE:\n```\ndiplomacy\ndiplomacy 224 peace\ndiplomacy all war\n```\n\n----------------------------------------\n\nTITLE: Enabling Autofish script in DFHack\nDESCRIPTION: Command to enable the autofish script in DFHack. This activates the automatic management of fishing labors.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/autofish.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nenable autofish\n```\n\n----------------------------------------\n\nTITLE: Incrementing Race Population\nDESCRIPTION: This command adds a specified amount to the population of a given race, with the option to decrease the population using a negative amount.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/region-pops.rst#2025-04-21_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n``region-pops incr <race> <amount>``\n```\n\n----------------------------------------\n\nTITLE: Multiple Species Pregnancy Example\nDESCRIPTION: Example showing how to cause pregnancies in multiple species simultaneously, targeting livestock animals.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/catsplosion.rst#2025-04-21_snippet_3\n\nLANGUAGE: text\nCODE:\n```\ncatsplosion PIG SHEEP ALPACA\n```\n\n----------------------------------------\n\nTITLE: Using the transform-unit Command in DFHack\nDESCRIPTION: Example command syntax for using the transform-unit script. Demonstrates the three main command patterns: transforming a unit with various options, untransforming a previously transformed unit, and clearing transformation records.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/modtools/transform-unit.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmodtools/transform-unit --unit <id> --race <race> --caste <caste> [--duration <ticks>] [--keepInventory] [--setPrevRace]\nmodtools/transform-unit --unit <id> --untransform\nmodtools/transform-unit --clear\n```\n\n----------------------------------------\n\nTITLE: Combine Command Examples\nDESCRIPTION: Demonstrates several common usage examples of the combine script, including showing help, previewing changes with dry-run, combining all items, filtering by type, and combining items in the selected stockpile.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/combine.rst#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\ncombine\ncombine all --dry-run\ncombine all\ncombine all --types=meat,plant\ncombine here\n```\n\n----------------------------------------\n\nTITLE: Creating Drinks with modtools/create-item\nDESCRIPTION: Example showing how to create alcoholic beverages from plant materials. This demonstrates creating a barrel of dwarven ale from plump helmets.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/modtools/create-item.rst#2025-04-21_snippet_4\n\nLANGUAGE: dfhack-script\nCODE:\n```\nmodtools/create-item -i DRINK:NONE -m PLANT:MUSHROOM_HELMET_PLUMP:DRINK\n```\n\n----------------------------------------\n\nTITLE: Configuring Autofish settings in DFHack\nDESCRIPTION: Command structure for changing autofish settings. It allows setting maximum and minimum fish levels, and options like whether to count raw fish.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/autofish.rst#2025-04-21_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nautofish <max> [min] [<options>]\n```\n\n----------------------------------------\n\nTITLE: Granting Superspeed to All Citizens - DFHack Tool\nDESCRIPTION: This command applies superspeed to every citizen in the fortress, making them all capable of instant task completion and never needing rest.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/superdwarf.rst#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n\"\"\"superdwarf all\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Running Autocheese Script in DFHack for Dwarf Fortress\nDESCRIPTION: This command runs the autocheese script in DFHack. It can be used with options to customize the behavior, such as setting the minimum amount of milk required to trigger a cheese making job.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/autocheese.rst#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nautocheese [<options>]\n```\n\n----------------------------------------\n\nTITLE: Practical example of syndrome-trigger with vampire curse in DFHack\nDESCRIPTION: This example demonstrates triggering a dragonfire flow at the location of any unit that acquires a vampire curse syndrome. It uses the \\LOCATION token to insert the coordinates of the infected unit.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/modtools/syndrome-trigger.rst#2025-04-21_snippet_3\n\nLANGUAGE: dfhack\nCODE:\n```\nmodtools/syndrome-trigger --synclass VAMPCURSE --command [ modtools/spawn-flow -flowType Dragonfire -location [ \\LOCATION ] ]\n```\n\n----------------------------------------\n\nTITLE: Using the hfs-pit Script in DFHack\nDESCRIPTION: Command syntax for using the hfs-pit script with optional parameters for pit size, walls, and stairs. The script creates a pit from the cursor position straight down to the underworld.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/hfs-pit.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nhfs-pit [<size> [<walls> [<stairs>]]]\n```\n\n----------------------------------------\n\nTITLE: Viewing Dwarf Preferences\nDESCRIPTION: Command to display the current preferences of all dwarves in the fortress.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/prefchange.rst#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nprefchange show\n```\n\n----------------------------------------\n\nTITLE: Example Commands for Siren Tool\nDESCRIPTION: Examples show how to invoke the Siren tool to wake all dwarves or those within specific burrow limits, highlighting the tool's flexibility in application.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/siren.rst#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n``siren``\n    Wake up the whole fort!\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n``siren barracks tavern``\n    Just affect dwarves that are within the bounds of the ``barracks`` and\n    ``tavern`` burrows (note that the dwarves do not need to be *assigned* to\n    those burrows).\n```\n\n----------------------------------------\n\nTITLE: Justice Command Usage Examples\nDESCRIPTION: Basic command syntax for using the justice script, showing the main commands for listing convicts and pardoning prisoners.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/justice.rst#2025-04-21_snippet_0\n\nLANGUAGE: dfhack\nCODE:\n```\njustice [list]\njustice pardon [--unit <id>]\n```\n\n----------------------------------------\n\nTITLE: Running DFHack Companion Order Script\nDESCRIPTION: Command syntax for launching the companion order interface. The optional -c flag enables additional 'cheating' commands like healing and riding vehicles.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/gui/companion-order.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ngui/companion-order [-c]\n```\n\n----------------------------------------\n\nTITLE: Example Facet Assignment Command\nDESCRIPTION: Demonstrates how to reset all facets and set specific personality traits. This example modifies hate and cheer propensity levels.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/assign-facets.rst#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nassign-facets --reset --facets [ HATE_PROPENSITY -2 CHEER_PROPENSITY -1 ]\n```\n\n----------------------------------------\n\nTITLE: Using the open-legends script in DFHack\nDESCRIPTION: Basic usage command for the open-legends script. This allows players to access legends mode from fortress or adventure mode.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/open-legends.rst#2025-04-21_snippet_0\n\nLANGUAGE: dfhack\nCODE:\n```\nopen-legends\nopen-legends --no-autoquit\n```\n\n----------------------------------------\n\nTITLE: Using devel/query Command with Basic Syntax Example\nDESCRIPTION: The basic syntax for the devel/query command, showing that it requires a source option, query options, and can take additional options.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/devel/query.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndevel/query <source option> <query options> [<additional options>]\n```\n\n----------------------------------------\n\nTITLE: Examples of empty-bin DFHack script usage\nDESCRIPTION: Demonstrates three different usage examples of the empty-bin script with various options, including handling liquids and recursive emptying of nested containers.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/empty-bin.rst#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nempty-bin\nempty-bin --liquids\nempty-bin --recursive --liquids\n```\n\n----------------------------------------\n\nTITLE: Enabling Extra Gamelog Output in DFHack\nDESCRIPTION: Command to enable additional information logging to the Dwarf Fortress gamelog file, which can be used by tools like Soundsense for enhanced functionality.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/modtools/extra-gamelog.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmodtools/extra-gamelog enable\n```\n\n----------------------------------------\n\nTITLE: Using add-thought with GUI Interface\nDESCRIPTION: Command example for adding a thought to the currently selected unit using the graphical interface.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/add-thought.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nadd-thought --gui\n```\n\n----------------------------------------\n\nTITLE: Using the Adaptation Script in DFHack\nDESCRIPTION: Basic usage syntax for the adaptation script. The script can be used to show adaptation levels for selected units or all citizens, and to set specific adaptation values between 0 and 800,000.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/adaptation.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nadaptation [show] [--all]\nadaptation set [--all] <value>\n```\n\n----------------------------------------\n\nTITLE: Running the Design Designation Tool in DFHack\nDESCRIPTION: The command to launch the gui/design tool in DFHack. This tool provides a point and click interface for creating shape-based designations for digging and construction.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/gui/design.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ngui/design\n```\n\n----------------------------------------\n\nTITLE: Modifying Ranged Weapon Fire Rates with DFHack\nDESCRIPTION: Documentation for the modtools/fire-rate script that allows customization of ranged weapon fire rates. The script can target specific items or throwing actions, with options to set base rates, skill impact factors, and maximum speed caps for both fortress and adventure modes.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/modtools/fire-rate.rst#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nmodtools/fire-rate\n==================\n\n.. dfhack-tool::\n    :summary: Alter the fire rate of ranged weapons.\n    :tags: unavailable\n\nAllows altering the fire rates of ranged weapons. Each are defined on a per-item\nbasis. As this is done in an on-world basis, commands for this should be placed\nin an ``onLoad*.init``. This also technically serves as a patch to any of the\nweapons targeted in adventure mode, reducing the times down to their intended\nspeeds (the game applies an additional hardcoded recovery time to any ranged\nattack you make in adventure mode).\n\nOnce run, all ranged attacks will use this script's systems for calculating\nrecovery speeds, even for items that haven't directly been modified using this\nscript's commands. One minor side effect is that it can't account for\ninteractions with the ``FREE_ACTION`` token; interactions with that tag which\nlaunch projectiles will be subject to recovery times (though there aren't any\ninteraction in vanilla where this would happen, as far as I know).\n\nRequires a Target and any number of Modifiers.\n\nTargets:\n\n:-item <item token>:\n  The full token of the item to modify.\n  Example: ``WEAPON:ITEM_WEAPON_BOW``\n:-throw:\n  Modify the fire rate for throwing.\n  This is specifically for thrown attacks without a weapon - if you have a\n  weapon that uses ``THROW`` as its skill, you need to use the ``-item``\n  argument for it.\n\nModifiers:\n\n:-material <material token>:\n  Apply only to items made of the given material token. With the ``-item``\n  argument, this will apply to the material that the weapon is made of, whereas\n  with the ``-throw`` argument this will apply to the material being thrown (or\n  fired, in the case of interactions). This is optional.\n  Format examples: \"CREATURE:COW:MILK\", \"PLANT:MUSHROOM_HELMET_PLUMP:DRINK\",\n  \"INORGANIC:GOLD\", \"VOMIT\"\n:-fortBase <integer> -advBase <integer>:\n  Set the base fire rate for the weapon in ticks to use in the respective mode\n  (fortress/adventure). Means one shot per x ticks. Defaults to the game default\n  of 80.\n:-fortSkillFactor <float> -advSkillFactor <float>:\n  Multiplier that modifies how effective a user's skill is at improving the fire\n  rate in the respective modes. In basic mode, recovery time is reduced by this\n  value * user's skill ticks. Defaults to 2.7. With that value and default\n  settings, it will make a Legendary shooter fire at the speed cap.\n:-fortCap <integer> -advCap <integer>:\n  Sets a cap on the fastest fire rate that can be achieved in their respective\n  mode. Due to game limitations, the cap can't be less than 10 in adventure\n  mode. Defaults to half of the base fire rate defined by the ``-fort`` or\n  ``-adv`` arguments.\n\nOther:\n\n:-mode <\"basic\" | \"vanilla\">:\n  Sets what method is used to determine how skill affects fire rates. This is\n  applied globally, rather than on a per-item basis. Basic uses a simplified\n  method for working out fire rates - each point in a skill reduces the fire\n  cooldown by a consistent, fixed amount. This method is the default.\n  Vanilla mode attempts to replicate behaviour for fire rates - skill rolls\n  determine which of 6 fixed increments of speeds is used, with a unit's skill\n  affecting the range and averages. **NOT YET IMPLEMENTED!**\n```\n\n----------------------------------------\n\nTITLE: Using fix/wildlife Script in Dwarf Fortress\nDESCRIPTION: Basic syntax examples for using the fix/wildlife script to manage stuck wildlife in Dwarf Fortress. Shows command usage patterns with various options for immediate removal, timed removal, or selective ignoring of creatures.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/fix/wildlife.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfix/wildlife [<options>]\nfix/wildlife ignore [unit ID]\n```\n\n----------------------------------------\n\nTITLE: Using Quickfort Delete Command\nDESCRIPTION: Deletes specified blueprint files from the player's personal blueprint directory.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/quickfort.rst#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nquickfort delete <filename> [<filename> ...]\n```\n\n----------------------------------------\n\nTITLE: Reveal or Hide World Map Adventure Mode DFHack Script\nDESCRIPTION: The script provides functionality to reveal or hide the world map tiles in adventure mode of DFHack. This script does not reveal hidden lairs or camps, and is used by executing the command `reveal-adv-map` to reveal and `reveal-adv-map --hide` to hide the world tiles. This requires DFHack installation.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/reveal-adv-map.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"reveal-adv-map\\nReveal all world tiles.\\nreveal-adv-map --hide\\nHide all world tiles.\"\n```\n\n----------------------------------------\n\nTITLE: Using the Ghostly Command in DFHack (Lua)\nDESCRIPTION: This snippet demonstrates the usage of the 'ghostly' command in DFHack. When executed, it toggles the ghost status of the player's adventurer character. The command takes no arguments and is executed directly in the DFHack console.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/ghostly.rst#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nghostly\n```\n\n----------------------------------------\n\nTITLE: Using Quickfort Set Command\nDESCRIPTION: Views or modifies global quickfort configuration settings.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/quickfort.rst#2025-04-21_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\nquickfort set [<key> <value>]\n```\n\n----------------------------------------\n\nTITLE: Running the fix/stuck-worship DFHack Script\nDESCRIPTION: Basic usage syntax for the fix/stuck-worship script, which reshuffles prayer needs for units in the fortress to prevent them from getting stuck in a Worship! state.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/fix/stuck-worship.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nfix/stuck-worship [<options>]\n```\n\n----------------------------------------\n\nTITLE: Complex Multicmd Example\nDESCRIPTION: Shows a practical example of using multicmd to chain multiple commands including Lua code execution, ore location, and digging commands.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/multicmd.rst#2025-04-21_snippet_1\n\nLANGUAGE: dfhack\nCODE:\n```\nmulticmd :lua require('gui.dwarfmode').enterSidebarMode(df.ui_sidebar_mode.DesignateMine); locate-ore IRON; digv; digcircle 16\n```\n\n----------------------------------------\n\nTITLE: Using GrowCrops Command for DFHack\nDESCRIPTION: Shows how to use the growcrops command to list planted seeds in farming plots. This basic usage requires no parameters and outputs a list of all seed types currently planted.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/growcrops.rst#2025-04-21_snippet_0\n\nLANGUAGE: plain\nCODE:\n```\ngrowcrops\n```\n\n----------------------------------------\n\nTITLE: Examples for Using gui/rename Script\nDESCRIPTION: Demonstrates different ways to invoke the gui/rename script, including basic usage without parameters, renaming a specific unit with ID, and renaming a location at a specific site.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/gui/rename.rst#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\ngui/rename\n    Load the selected artifact, location, or unit for renaming. If nothing is\n    selected, you can select a target from a list.\ngui/rename -u 123 --no-target-selector\n    Load the unit with id ``123`` for renaming and remove the widget that\n    allows selecting a different target.\ngui/rename --location 2 --site 456\n    Load the location with \"abstract building\" ID ``2`` attached to the site\n    with id ``456`` for renaming.\n```\n\n----------------------------------------\n\nTITLE: DFHack Instruments Script Example Commands\nDESCRIPTION: Demonstrates practical usage examples including listing instruments, ordering multiple instruments with components, and handling special characters in instrument names.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/instruments.rst#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\ninstruments\ninstruments order givel 10\ninstruments order ilul\n```\n\n----------------------------------------\n\nTITLE: Growing All Planted Seeds in DFHack\nDESCRIPTION: Shows the command to instantly grow all planted seeds across all farming plots, regardless of crop type. This affects all seeds currently planted in the fortress's farm plots.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/growcrops.rst#2025-04-21_snippet_2\n\nLANGUAGE: plain\nCODE:\n```\ngrowcrops all\n```\n\n----------------------------------------\n\nTITLE: Displaying Default Ideal Preference Set in Dwarf Fortress\nDESCRIPTION: Shows the default 'ideal' preferences text that will be applied to dwarves. This set includes preferences for common metals, weapons, and foods that are generally easy to satisfy in Dwarf Fortress.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/pref-adjust.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n... likes iron, steel, weapons, armor, shields/bucklers and plump helmets\nfor their rounded tops.  When possible, she prefers to consume dwarven\nwine, plump helmets, and prepared meals (quarry bush). She absolutely\ndetests trolls, buzzards, vultures and crundles.\n```\n\n----------------------------------------\n\nTITLE: Usage Example: setfps command\nDESCRIPTION: This snippet demonstrates the usage of the 'setfps' command. It takes a single numerical argument representing the desired FPS cap.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/setfps.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nsetfps <number>\n```\n\n----------------------------------------\n\nTITLE: Basic hfs-pit Usage Examples\nDESCRIPTION: Examples of using the hfs-pit script with different parameter combinations to create pits with various configurations. These examples demonstrate how to customize pit width, wall construction, and stair placement.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/hfs-pit.rst#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nhfs-pit\nhfs-pit 4 1 0\nhfs-pit 2 0 1\n```\n\n----------------------------------------\n\nTITLE: Using the clear-webs Script in DFHack\nDESCRIPTION: Command syntax for the clear-webs script which removes webs from the map and frees trapped creatures. The script can be run with optional flags to only free units or only remove webs.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/clear-webs.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nclear-webs [--unitsOnly|--websOnly]\n```\n\n----------------------------------------\n\nTITLE: Automated Repeat Command\nDESCRIPTION: Command to automatically run the fix every 100 ticks in the background, useful for preventing crashes during military operations\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/fix/corrupt-equipment.rst#2025-04-21_snippet_1\n\nLANGUAGE: dfhack\nCODE:\n```\nrepeat --time 100 --timeUnits ticks --command [ fix/corrupt-equipment ]\n```\n\n----------------------------------------\n\nTITLE: Comparing Tiletype Materials Usage\nDESCRIPTION: Command syntax for comparing one or two tiletype materials, where material1 is required and material2 is optional.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/devel/cmptiles.rst#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ndevel/cmptiles material1 [material2]\n```\n\n----------------------------------------\n\nTITLE: Running Deep Embark Script in Lua\nDESCRIPTION: Commands to run the deep-embark script, specifying the depth and optional parameters. These commands are used to start monitoring the game for the embark welcome message and move units to the specified underground layer.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/deep-embark.rst#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\ndeep-embark --depth <layer> [<options>]\n```\n\nLANGUAGE: lua\nCODE:\n```\ndeep-embark --clear\n```\n\n----------------------------------------\n\nTITLE: Executing Spawnunit Command in DFHack\nDESCRIPTION: This snippet describes how to use the 'spawnunit' command within DFHack to create a game unit. Dependencies include DFHack and familiarity with the 'modtools/create-unit' module. Required parameters are race and caste, with name and position being optional. It outputs a new game unit or a command if '-command' is specified.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/spawnunit.rst#2025-04-21_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nspawnunit [-command] <race> <caste> [<name> [<x> <y> <z>]] [...]\n```\n\n----------------------------------------\n\nTITLE: Listing Levers in Dwarf Fortress with DFHack\nDESCRIPTION: Command for displaying a list of all levers in the fortress, showing their IDs, names, activation states, and linked mechanisms.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/lever.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nlever list\n```\n\n----------------------------------------\n\nTITLE: Using the spawn-liquid script in DFHack\nDESCRIPTION: Command syntax for using the spawn-liquid script to create liquids at specified coordinates. The script requires parameters for liquid type, level (1-7), and position (x,y,z).\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/modtools/spawn-liquid.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nmodtools/spawn-liquid --type <type> --level <level> --position <x>,<y>,<z>\n```\n\n----------------------------------------\n\nTITLE: Using the DFHack Confirm Script in Dwarf Fortress\nDESCRIPTION: This code snippet demonstrates the usage syntax for the 'confirm' script in DFHack. It shows how to list available confirmation dialogs, enable or disable all dialogs, and set individual dialogs by their IDs.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/confirm.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nconfirm [list]\nconfirm enable|disable all\nconfirm enable|disable <id> [<id> ...]\n```\n\n----------------------------------------\n\nTITLE: Viewing Unit Combat Reports in DFHack\nDESCRIPTION: Script for retrieving and displaying combat-related information for a selected unit in Dwarf Fortress. Supports multiple selection methods including cursor mode, unit list, and blood spatter contexts.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/view-unit-reports.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nview-unit-reports\n```\n\n----------------------------------------\n\nTITLE: DFHack Script Usage: Setting Timeskip Duration with Date Components\nDESCRIPTION: This example sets the timeskip duration using `--years`, `--months`, `--days`, and `--hours` arguments to specify the desired end date. It demonstrates setting the timeskip to end 2 years, 1 month, 9 days, and 8 hours from the current date, along with a specific number of ticks. The parameters are positive integers (or 0).\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/set-timeskip-duration.rst#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n\"set-timeskip-duration --years 2 --months 1 --days 9 --hours 8 --ticks 49\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Happy Dwarf Behavior in Idle Crafting\nDESCRIPTION: Command to determine whether 'happy' and 'ecstatic' dwarves will use the same need thresholds as others or only craft at the highest threshold.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/idle-crafting.rst#2025-04-21_snippet_2\n\nLANGUAGE: dfhack\nCODE:\n```\nidle-crafting happy [yes|no]\n```\n\n----------------------------------------\n\nTITLE: Running the Empty Wheelbarrows Fix Script\nDESCRIPTION: Shows different ways to invoke the script including basic usage, dry run mode, and quiet mode.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/fix/empty-wheelbarrows.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nfix/empty-wheelbarrows [<options>]\n```\n\n----------------------------------------\n\nTITLE: Using the Prioritize Command in Dwarf Fortress\nDESCRIPTION: Shows the basic syntax for the prioritize command, used to boost priority of specific job types in Dwarf Fortress.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/prioritize.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nenable prioritize\nprioritize [<options>] [defaults|<job_type> ...]\n```\n\n----------------------------------------\n\nTITLE: Setting Default Color Scheme in Lua\nDESCRIPTION: This command sets a specific color scheme as the default. The setting is persistent across game sessions.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/color-schemes.rst#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\ncolor-schemes default set mydefault\n```\n\n----------------------------------------\n\nTITLE: Running the Autonick Script Manually\nDESCRIPTION: Basic command syntax for running the autonick script on all dwarves in a fortress. The script assigns random unique nicknames to dwarves who don't already have one.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/autonick.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nautonick all [<options>]\n```\n\n----------------------------------------\n\nTITLE: Basic Usage Command Structure\nDESCRIPTION: Shows the basic command syntax for using the assign-skills script with options.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/assign-skills.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nassign-skills [--unit <id>] <options>\n```\n\n----------------------------------------\n\nTITLE: Basic Reveal Command Example\nDESCRIPTION: Example of using the basic reveal command without additional parameters. This reveals all normal terrain while keeping late-game surprises hidden.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/gui/reveal.rst#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngui/reveal\n```\n\n----------------------------------------\n\nTITLE: Using fix/occupancy Script in DFHack\nDESCRIPTION: Shows the basic syntax for using the fix/occupancy script. The script can target specific map coordinates or the current cursor position, with an optional dry-run flag.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/fix/occupancy.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nfix/occupancy [<pos>] [<options>]\n```\n\n----------------------------------------\n\nTITLE: Running the Aquifer Management GUI in DFHack\nDESCRIPTION: This command launches the interactive GUI for managing aquifers in Dwarf Fortress. It allows users to view, add, remove, or modify aquifer tiles through a graphical interface.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/gui/aquifer.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngui/aquifer\n```\n\n----------------------------------------\n\nTITLE: Using the Hermit Script in DFHack\nDESCRIPTION: Commands to enable the hermit challenge script and check its status. This blocks most external entities from entering your fortress for the hermit challenge playstyle.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/hermit.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nenable hermit\nhermit [status]\n```\n\n----------------------------------------\n\nTITLE: Using ban-cooking script in DFHack for Dwarf Fortress\nDESCRIPTION: This code snippet demonstrates the usage syntax for the ban-cooking script in DFHack. It shows how to ban specific item types or all types from being cooked, and includes options for unbanning and verbose output.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/ban-cooking.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nban-cooking <type|all> [<type> ...] [<options>]\n```\n\n----------------------------------------\n\nTITLE: Toggling Water Level Display in DFHack Interface\nDESCRIPTION: A script that enables or disables the numeric representation of liquid depth on the game map, providing quick visual information about water levels.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/twaterlvl.rst#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\ntwaterlvl\n```\n\n----------------------------------------\n\nTITLE: Using the Guide Path Visualization Tool\nDESCRIPTION: The basic command to run the guide-path visualization tool. This should be executed after selecting a Guide order in the Hauling menu with the cursor.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/gui/guide-path.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ngui/guide-path\n```\n\n----------------------------------------\n\nTITLE: Revealing Hidden Units in DFHack Script\nDESCRIPTION: A script that exposes all units currently sneaking or waiting in ambush, making them visible to the player across different game modes\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/reveal-hidden-units.rst#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nreveal-hidden-units\n```\n\n----------------------------------------\n\nTITLE: Basic Usage Example of the clear-webs Script\nDESCRIPTION: Basic example showing how to use the clear-webs script without any options, which removes all webs and frees all webbed units.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/clear-webs.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nclear-webs\n```\n\n----------------------------------------\n\nTITLE: Running the fix/stuckdoors DFHack script\nDESCRIPTION: Command to execute the script that fixes doors stuck in an open position. The script repairs incorrect map occupancy flags that prevent doors from closing properly.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/fix/stuckdoors.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nfix/stuckdoors\n```\n\n----------------------------------------\n\nTITLE: Running DFHack Stamper Tool\nDESCRIPTION: Command to launch the Stamper tool interface in DFHack for manipulating dig designations.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/gui/stamper.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngui/stamper\n```\n\n----------------------------------------\n\nTITLE: Querying Valid Attribute Names in Shell\nDESCRIPTION: Command to list all valid attribute tokens that can be used with the assign-attributes script. This queries the Dwarf Fortress data tables to find physical and mental attribute types.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/assign-attributes.rst#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndevel/query --table df --maxdepth 1 --search [ physical_attribute_type mental_attribute_type ]\n```\n\n----------------------------------------\n\nTITLE: Blueprint GUI Usage Examples\nDESCRIPTION: Example commands demonstrating how to launch the blueprint GUI with different configurations, including default values and specific phase selections with formatting options.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/gui/blueprint.rst#2025-04-21_snippet_1\n\nLANGUAGE: dfhack\nCODE:\n```\ngui/blueprint\ngui/blueprint tavern dig build --format pretty\n```\n\n----------------------------------------\n\nTITLE: Adding Drink Preference Example in DFHack\nDESCRIPTION: Example command showing how to add a preference for drinking dwarf blood to a unit using the pref-edit script. Uses item type filter with material specification.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/modtools/pref-edit.rst#2025-04-21_snippet_0\n\nLANGUAGE: dfhack\nCODE:\n```\nmodtools/pref-edit -add -item -id DRINK -material DWARF:BLOOD -type LikeFood\n```\n\n----------------------------------------\n\nTITLE: Adding Notes Command - DFHack\nDESCRIPTION: Command syntax for adding a new note at the current keyboard cursor position in Dwarf Fortress using DFHack. Creates a new note with a title and comment that will be displayed as a green pin on the map.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/notes.rst#2025-04-21_snippet_0\n\nLANGUAGE: dfhack\nCODE:\n```\nnotes add\n```\n\n----------------------------------------\n\nTITLE: Example: Setting Item Preferences\nDESCRIPTION: Example command for making a unit like specific items (logs and battle axes).\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/assign-preferences.rst#2025-04-21_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nassign-preferences --reset --likeitem [ WOOD ITEM_WEAPON:ITEM_WEAPON_AXE_BATTLE ]\n```\n\n----------------------------------------\n\nTITLE: Executing the Civilian Alert Script in DFHack\nDESCRIPTION: This command launches the gui/civ-alert script in DFHack, which provides an interface for setting up and activating civilian alerts in Dwarf Fortress.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/gui/civ-alert.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ngui/civ-alert\n```\n\n----------------------------------------\n\nTITLE: Listing Cage Contents with DFHack\nDESCRIPTION: This DFHack command lists the contents of all cages in the game. It is useful for inspecting what items are currently inside the cages before attempting to strip them.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/stripcaged.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n\"stripcaged list\"\n```\n\n----------------------------------------\n\nTITLE: Using Flashstep Command in DFHack\nDESCRIPTION: This command teleports the player's adventurer to the mouse cursor position. It reveals a small area around the target tile and updates the vision cone when the player moves.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/flashstep.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nflashstep\n```\n\n----------------------------------------\n\nTITLE: Using the Fix/Sleepers Script\nDESCRIPTION: Shows the command to run the script in DFHack. When executed, the script will fix all nearby sleeping units that are stuck due to bug #6798.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/fix/sleepers.rst#2025-04-21_snippet_0\n\nLANGUAGE: plain text\nCODE:\n```\nfix/sleepers\n```\n\n----------------------------------------\n\nTITLE: Running the Quick Command Tool in DFHack\nDESCRIPTION: Command to launch the gui/quickcmd tool in DFHack. This tool provides a user interface for managing and executing saved commands quickly without the need to type them repeatedly or assign keybindings.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/gui/quickcmd.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ngui/quickcmd\n```\n\n----------------------------------------\n\nTITLE: Converting Colonies Commands\nDESCRIPTION: Commands for converting all existing colonies to a specified type. Defaults to honey bees if no type specified.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/colonies.rst#2025-04-21_snippet_2\n\nLANGUAGE: dfhack\nCODE:\n```\ncolonies convert\n```\n\nLANGUAGE: dfhack\nCODE:\n```\ncolonies convert TERMITE\n```\n\n----------------------------------------\n\nTITLE: Inspecting Weather in DFHack\nDESCRIPTION: Prints a map of local weather conditions in the current Dwarf Fortress region. Provides visual representation of weather patterns.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/weather.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nweather\n```\n\n----------------------------------------\n\nTITLE: Practical Example of Raw Object Injection\nDESCRIPTION: Demonstrates injecting multiple objects including a trap component, workshops, and a reaction into Dwarf Fortress. Shows how to chain multiple object types and tokens in a single command.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/devel/inject-raws.rst#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ndevel/inject-raws trapcomp ITEM_TRAPCOMP_STEAM_PISTON workshop STEAM_ENGINE MAGMA_STEAM_ENGINE reaction STOKE_BOILER\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum Milk for Cheese Making in Autocheese Script\nDESCRIPTION: This example demonstrates how to use the autocheese script with a custom minimum milk threshold. It sets the script to only create cheese making jobs when a barrel contains at least 100 units of milk.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/autocheese.rst#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nautocheese -m 100\n```\n\n----------------------------------------\n\nTITLE: Using prefchange Command Syntax\nDESCRIPTION: Basic syntax for using the prefchange script to modify dwarf preferences for strange moods.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/prefchange.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nprefchange <command>\n```\n\n----------------------------------------\n\nTITLE: Invoking Siren Tool Usage Instructions\nDESCRIPTION: The usage of the Siren tool is demonstrated, allowing users to wake sleeping dwarves either broadly across the fort or selectively within specified burrows.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/siren.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nsiren [<burrow> ...]\n```\n\n----------------------------------------\n\nTITLE: Dumping Armor in Selected Cage with DFHack\nDESCRIPTION: This DFHack command dumps armor equipped by the caged creature in the currently selected cage. The `--skip-forbidden` option ensures that only unforbidden armor is dumped, leaving forbidden items untouched.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/stripcaged.rst#2025-04-21_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n\"stripcaged armor here --skip-forbidden\"\n```\n\n----------------------------------------\n\nTITLE: Example Command for Synchronizing Windmills\nDESCRIPTION: This example demonstrates how to synchronize the movement of all active windmills without additional options. It serves as a straightforward command for users wishing to align windmill operations.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/sync-windmills.rst#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n``sync-windmills``\n```\n\n----------------------------------------\n\nTITLE: Using do-job-now Script in DFHack\nDESCRIPTION: Simple command to mark the job related to the currently selected entity as high priority. There is typically no visual indicator of success except for checking the DFHack console output.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/do-job-now.rst#2025-04-21_snippet_0\n\nLANGUAGE: dfhack\nCODE:\n```\ndo-job-now\n```\n\n----------------------------------------\n\nTITLE: Running the Color Schemes Script in DFHack\nDESCRIPTION: This command launches the in-game interface for modifying color schemes in Dwarf Fortress. It must be executed from either the title screen or the fortress main map screen.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/gui/color-schemes.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ngui/color-schemes\n```\n\n----------------------------------------\n\nTITLE: Boosting Race Population\nDESCRIPTION: This command multiplies all populations of the specified race by a given factor, allowing for increases or decreases depending on the factor's value.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/region-pops.rst#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n``region-pops boost <race> <factor>``\n```\n\n----------------------------------------\n\nTITLE: Using agitation-rebalance Commands\nDESCRIPTION: Shows the basic command syntax for the agitation-rebalance script. These commands allow viewing status, loading presets, and enabling/disabling specific features.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/agitation-rebalance.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nenable agitation-rebalance\nagitation-rebalance [status]\nagitation-rebalance preset <name>\nagitation-rebalance enable|disable <feature>\n```\n\n----------------------------------------\n\nTITLE: Resetting Dwarf Age with DFHack Script\nDESCRIPTION: This snippet describes the usage of the 'rejuvenate' command in the DFHack script. It allows users to set the age of a selected dwarf to 18 (or a specified age) and can rejuvenate all citizens and residents based on specified options. Dependencies include the DFHack framework.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/rejuvenate.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nrejuvenate [<options>]\n```\n\nLANGUAGE: shell\nCODE:\n```\nrejuvenate\n```\n\nLANGUAGE: shell\nCODE:\n```\nrejuvenate --all\n```\n\nLANGUAGE: shell\nCODE:\n```\nrejuvenate --all --force\n```\n\nLANGUAGE: shell\nCODE:\n```\nrejuvenate --age 149 --force\n```\n\nLANGUAGE: shell\nCODE:\n```\n--all\n```\n\nLANGUAGE: shell\nCODE:\n```\n--age <num>\n```\n\nLANGUAGE: shell\nCODE:\n```\n--force\n```\n\nLANGUAGE: shell\nCODE:\n```\n--dry-run\n```\n\n----------------------------------------\n\nTITLE: Dumping Loose Items from All Cages with DFHack\nDESCRIPTION: This DFHack command dumps only the loose items from all cages. This is useful for removing items such as seeds that might be left over from animal training or other activities within the cages.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/stripcaged.rst#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n\"stripcaged items\"\n```\n\n----------------------------------------\n\nTITLE: Using the Necronomicon Script in Dwarf Fortress\nDESCRIPTION: Basic usage syntax for the necronomicon script that allows players to find books containing secrets of life and death in Dwarf Fortress.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/necronomicon.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nnecronomicon [<options>]\n```\n\n----------------------------------------\n\nTITLE: Handling Military Uniform Conflicts in Dwarf Fortress\nDESCRIPTION: The 'uniform-unstick' tool allows players to prompt military units to reassess their uniforms, helping to remove and drop conflicting worn items. It ensures that items are only removed when necessary and allows for strategic handling of multiple items per body part. The script provides options to forcibly drop conflicting items and manage uniform assignments when conflicts arise, with options for interactive use through the overlay in the Dwarf Fortress game interface.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/uniform-unstick.rst#2025-04-21_snippet_0\n\nLANGUAGE: Dwarf Fortress Utility\nCODE:\n```\n``uniform-unstick [--all]``\n    List problems with the uniform for the currently selected unit (or all\n    units).\n``uniform-unstick [--all] <strategy options>``\n    Fix the problems with the unit's uniform (or all units' uniforms) using the\n    specified strategies.\n```\n\nLANGUAGE: Dwarf Fortress Utility\nCODE:\n```\n``uniform-unstick --all --drop --free``\n    Fix all issues with uniforms that have only one item per body part (like all\n    default uniforms).\n```\n\n----------------------------------------\n\nTITLE: Running deteriorate with usable body parts preservation\nDESCRIPTION: This command starts the deterioration process for corpses while preserving usable parts like hair, wool, etc.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/deteriorate.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndeteriorate start --types corpses --keep-usable\n```\n\n----------------------------------------\n\nTITLE: Using the Geld Script in DFHack\nDESCRIPTION: Basic syntax for using the geld script to geld and ungeld animals in Dwarf Fortress. The script supports selecting units by ID and can toggle gelding status.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/geld.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ngeld [--ungeld|--toggle] [--unit <id>]\n```\n\n----------------------------------------\n\nTITLE: Setting different deterioration rates for different item types\nDESCRIPTION: These commands demonstrate how to set different deterioration rates for different item categories - corpses deteriorate quickly while clothes deteriorate slowly.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/deteriorate.rst#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndeteriorate start -tcorpses -f0.1\ndeteriorate start -tclothes -f3,months\n```\n\n----------------------------------------\n\nTITLE: Executing the Work Order Details script in DFHack\nDESCRIPTION: Command to invoke the workorder-details tool from DFHack. This should be executed while viewing a work order's detail screen (accessed via j-m, selecting a work order, then pressing d).\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/gui/workorder-details.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ngui/workorder-details\n```\n\n----------------------------------------\n\nTITLE: DFHack Entity Command Example with Elven Fort Detection\nDESCRIPTION: Practical example demonstrating how to detect an elven fortress and print a message. Uses the FOREST entity ID to identify elven civilizations.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/modtools/if-entity.rst#2025-04-21_snippet_1\n\nLANGUAGE: dfhack\nCODE:\n```\nmodtools/if-entity --id FOREST --cmd [ lua \"print('Dirty hippies.')\" ]\n```\n\n----------------------------------------\n\nTITLE: Clearing Superspeed from All Creatures - DFHack Tool\nDESCRIPTION: This command clears the superspeed effect from all creatures currently within the game, useful for resetting the speed settings for all dwarves at once.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/superdwarf.rst#2025-04-21_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\n\"\"\"superdwarf clear\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Adventure Fortress Script\nDESCRIPTION: This example shows how to run the Adventure Fortress script without any arguments, which brings up the GUI for interactive job selection using items that dwarves can use.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/gui/advfort.rst#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\ngui/advfort\n```\n\n----------------------------------------\n\nTITLE: Setting Specific Mood Preferences\nDESCRIPTION: Example of clearing a dwarf's preferences and setting them to like hammers, mail shirts, and steel.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/prefchange.rst#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nprefchange c\nprefchange has\n```\n\n----------------------------------------\n\nTITLE: DFHack Entity Conditional Command Usage\nDESCRIPTION: Example command structure showing how to execute commands based on fortress entity ID matching. The script takes an entity ID parameter and a command to execute when the ID matches.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/modtools/if-entity.rst#2025-04-21_snippet_0\n\nLANGUAGE: dfhack\nCODE:\n```\nmodtools/if-entity --id <entity id> --cmd [ <command> ]\n```\n\n----------------------------------------\n\nTITLE: Report Stranded Citizens - DFHack Tool\nDESCRIPTION: This snippet provides a command line interface for monitoring and managing stranded citizens within Dwarf Fortress. It includes options to check the status of stranded citizens, clear ignores, and manage individual or group ignores.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/warn-stranded.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nwarn-stranded\nwarn-stranded status\nwarn-stranded clear\nwarn-stranded (ignore|unignore) <unit id>\nwarn-stranded (ignoregroup|unignoregroup) <group id>\n```\n\n----------------------------------------\n\nTITLE: Unregistering a Periodic Command - DFHack\nDESCRIPTION: This command unregisters a previously registered command from the periodic execution schedule, allowing for better management of commands.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/repeat.rst#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nrepeat --cancel <name>\n```\n\n----------------------------------------\n\nTITLE: Adding Superspeed by Unit ID - DFHack Tool\nDESCRIPTION: This command grants superspeed to a specified creature using its unit ID. This is useful for targeting specific dwarves rather than the currently selected one.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/superdwarf.rst#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n\"\"\"superdwarf add <ID>\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Setting Need Focus for All Citizens\nDESCRIPTION: Example command that sets the focus level to 400 (fully satisfied) for all needs of all citizens in the fortress.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/modtools/set-need.rst#2025-04-21_snippet_0\n\nLANGUAGE: dfhack-script\nCODE:\n```\nmodtools/set-need -edit -all -focus 400 -citizens\n```\n\n----------------------------------------\n\nTITLE: Executing Mass Pit Designation Script in DFHack\nDESCRIPTION: Command to run the mass pit designation tool in DFHack interface. The script launches a visual interface for selecting stockpiles and pit destinations.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/gui/masspit.rst#2025-04-21_snippet_0\n\nLANGUAGE: dfhack\nCODE:\n```\ngui/masspit\n```\n\n----------------------------------------\n\nTITLE: Executing DFHack Script for Exporting Dwarf Therapist Configuration\nDESCRIPTION: This command runs the 'export-dt-ini' script located in the 'devel' directory of DFHack. It generates an ini file containing memory addresses required for Dwarf Therapist configuration.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/devel/export-dt-ini.rst#2025-04-21_snippet_0\n\nLANGUAGE: dfhack\nCODE:\n```\ndevel/export-dt-ini\n```\n\n----------------------------------------\n\nTITLE: Adding Superspeed to Selected Creature - DFHack Tool\nDESCRIPTION: This command enables superspeed for the currently selected creature in the game. It modifies action timers, allowing for immediate task execution without delay.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/superdwarf.rst#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n\"\"\"superdwarf add\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Spawning Trees with Parameters - DFHack - Plaintext\nDESCRIPTION: This snippet details the command usage for spawning trees with various parameters in DFHack. It allows users to define the type of tree, its age, and location coordinates for where to spawn the tree. The examples showcase how to utilize the command effectively.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/modtools/create-tree.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-- Usage of the command to spawn a tree\n\n    -tree treeName\n        specify the tree to be created\n        examples:\n            OAK\n            NETHER_CAP\n\n    -age howOld\n        set the age of the tree in years (integers only)\n        defaults to 1 if omitted\n\n    -location [ x y z ]\n        create the tree at the specified coordinates\n\n    example:\n        modtools/create-tree -tree OAK -age 100 -location [ 33 145 137 ]\n\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of empty-bin DFHack script\nDESCRIPTION: Shows the basic command syntax for the empty-bin script in DFHack, allowing users to specify optional arguments when emptying containers.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/empty-bin.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nempty-bin [<options>]\n```\n\n----------------------------------------\n\nTITLE: Listing Colonies Command\nDESCRIPTION: Basic command to list all vermin colonies present on the current map.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/colonies.rst#2025-04-21_snippet_0\n\nLANGUAGE: dfhack\nCODE:\n```\ncolonies\n```\n\n----------------------------------------\n\nTITLE: Example Commands for fix/stuck-worship DFHack Script\nDESCRIPTION: Examples of how to run the fix/stuck-worship script, including the default mode and verbose mode which prints affected unit names.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/fix/stuck-worship.rst#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nfix/stuck-worship\nfix/stuck-worship -v\n```\n\n----------------------------------------\n\nTITLE: Canceling a Periodic Warning Command - DFHack\nDESCRIPTION: This command unregisters a periodic warning command for starving dwarves by using the specified name, allowing for adjustments in fort management strategies.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/repeat.rst#2025-04-21_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nrepeat --cancel warn-starving\n```\n\n----------------------------------------\n\nTITLE: Using elevate-physical Script in DFHack\nDESCRIPTION: Basic usage syntax for the elevate-physical script in DFHack. The script accepts an optional value parameter to specify the attribute level (between 0-5000), defaulting to maximum if not provided.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/elevate-physical.rst#2025-04-21_snippet_0\n\nLANGUAGE: dfhack\nCODE:\n```\nelevate-physical [value]\n```\n\n----------------------------------------\n\nTITLE: Using Idle-Crafting Status Command in DFHack\nDESCRIPTION: Command to display statistics about the tool's status and the satisfaction of 'craft item' needs in the fortress.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/idle-crafting.rst#2025-04-21_snippet_0\n\nLANGUAGE: dfhack\nCODE:\n```\nidle-crafting [status]\n```\n\n----------------------------------------\n\nTITLE: Running the Journal Script in DFHack\nDESCRIPTION: Command to launch the gui/journal script in DFHack, which opens the multi-line text editor interface for note-taking in Dwarf Fortress.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/gui/journal.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ngui/journal\n```\n\n----------------------------------------\n\nTITLE: Running blood-del Fix Script in DFHack\nDESCRIPTION: Command to execute the blood-del script in DFHack. This removes unusable liquids (blood, ichor, and goo) from caravan manifests to prevent caravans from bringing these items in the future.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/fix/blood-del.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nfix/blood-del\n```\n\n----------------------------------------\n\nTITLE: Using Quickfort Reset Command\nDESCRIPTION: Resets all quickfort configuration options to their default values.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/quickfort.rst#2025-04-21_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\nquickfort reset\n```\n\n----------------------------------------\n\nTITLE: Executing Catsplosion Command\nDESCRIPTION: Command syntax for the catsplosion script showing basic usage and parameter options. The command can take creature IDs as arguments or be used with the 'list' parameter to show available creatures.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/catsplosion.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ncatsplosion [<id> ...]\n```\n\n----------------------------------------\n\nTITLE: Running Unit Retrieval Script in DFHack\nDESCRIPTION: Command to execute the unit retrieval script in DFHack. This command searches for and forces entry of units that are pending entry to the active map.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/fix/retrieve-units.rst#2025-04-21_snippet_0\n\nLANGUAGE: dfhack-script\nCODE:\n```\nfix/retrieve-units\n```\n\n----------------------------------------\n\nTITLE: Export-map Usage Examples\nDESCRIPTION: Demonstrates practical examples of using the export-map command with different option combinations. These examples show how to export all map data, include specific data types, or exclude certain data types.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/devel/export-map.rst#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ndevel/export-map\ndevel/export-map include -m -s -v\ndevel/export-map exclude --variant --hidden --light\n```\n\n----------------------------------------\n\nTITLE: Managing Undead Entities with dfhack\nDESCRIPTION: The script 'starvingdead' is used to manage undead entities in Dwarf Fortress to prevent performance issues. It decays their attributes over several months and removes them to prevent an excess of undead. It requires dfhack to be installed and configured for Dwarf Fortress. Users can set the rate of decay and the duration before removal using the provided options. The default settings gradually weaken and eventually remove undead from the game map, enhancing gameplay in high undead environments, such as reanimating biomes.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/starvingdead.rst#2025-04-21_snippet_0\n\nLANGUAGE: dfhack\nCODE:\n```\nenable starvingdead\n```\n\nLANGUAGE: dfhack\nCODE:\n```\nstarvingdead [<options>]\n```\n\n----------------------------------------\n\nTITLE: Enabling DFHack Announcement Monitor\nDESCRIPTION: Basic command to enable the announcement monitoring functionality in DFHack.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/devel/annc-monitor.rst#2025-04-21_snippet_0\n\nLANGUAGE: dfhack\nCODE:\n```\nenable devel/annc-monitor\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Brainwash Script for Ideal Personality\nDESCRIPTION: This example shows how to use the brainwash script to set a dwarf's personality to the 'ideal' type, which creates a stable and reliable personality.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/brainwash.rst#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nbrainwash ideal\n```\n\n----------------------------------------\n\nTITLE: Running Choose Weapons DFHack Script\nDESCRIPTION: Command to execute the choose-weapons script from the military equipment screen. Must be run while in the Equip->View/Customize page of the military interface.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/gui/choose-weapons.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ngui/choose-weapons\n```\n\n----------------------------------------\n\nTITLE: Using the allneeds DFHack Script\nDESCRIPTION: This snippet shows the basic usage of the allneeds script. It can be run without arguments to show needs for the selected unit or the entire fort.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/allneeds.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nallneeds [<options>]\n```\n\n----------------------------------------\n\nTITLE: JSON Map Data Structure\nDESCRIPTION: Shows the structure of the JSON output generated by the export-map command. The JSON contains map data organized by z, y, and x coordinates, with each tile containing data according to the selected options.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/devel/export-map.rst#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ARGUMENT_OPTION_ORDER\": {\"material\": 1, \"shape\": 2, \"hidden\": 3},\n  \"MAP_SIZE\": {\"width\": 190, \"height\": 190, \"depth\": 60},\n  \"KEYS\": {\n    \"SHAPE\": {\"-1\": \"NONE\", \"0\": \"EMPTY\", \"1\": \"FLOOR\", \"2\": \"BOULDERS\"},\n    \"PLANT\": {\"0\": \"SINGLE-GRAIN_WHEAT\", \"1\": \"TWO-GRAIN_WHEAT\"},\n    \"AQUIFER\": {\"0\": \"NONE\", \"1\": \"LIGHT\", \"2\": \"HEAVY\"}\n  },\n  \"map\": [\n    [\n      [{\"tile_data\"}]\n    ]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: DFHack Tool: ungeld\nDESCRIPTION: This DFHack tool restores an animal's ability to reproduce after it has been gelded. It uses the 'ungeld' command with an optional unit ID.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/ungeld.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nungeld\n======\n\n.. dfhack-tool::\n    :summary: Undo gelding for an animal.\n    :tags: fort armok animals\n\nThis tool will restore an animal's ability to reproduce after it has been\ngelded. Also see `geld` if you'd like to re-geld the animal.\n\nUsage\n-----\n\n::\n\n    ungeld [--unit <id>]\n\nOptions\n-------\n\n``--unit <id>``\n    Ungelds the unit with the specified ID. If this option is not specified, the\n    default is to use the currently selected unit.\n```\n\n----------------------------------------\n\nTITLE: Using Block Borders Script in DFHack\nDESCRIPTION: Command to run the block-borders script which outlines map blocks on the Dwarf Fortress map screen. This helps visualize the block structure of the map for development purposes.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/devel/block-borders.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndevel/block-borders\n```\n\n----------------------------------------\n\nTITLE: DFHack Script Usage: Setting Timeskip Duration by Ticks\nDESCRIPTION: This example shows how to set the timeskip duration using the `--ticks` argument. The example sets the timeskip to end 2 years, 1 month, 9 days, 8 hours, 58 minutes, and 48 seconds from the current date using a specific number of ticks.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/set-timeskip-duration.rst#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n\"set-timeskip-duration --ticks 851249\"\n```\n\n----------------------------------------\n\nTITLE: Basic usage syntax for item-trigger script in DFHack\nDESCRIPTION: Shows the basic command syntax for the modtools/item-trigger script. This command requires at least the --command option and one of the item filtering options (--itemType, --material, or --contaminant) to register a trigger.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/modtools/item-trigger.rst#2025-04-21_snippet_0\n\nLANGUAGE: dfhack\nCODE:\n```\nmodtools/item-trigger [<options>] --command [ <command> ]\n```\n\n----------------------------------------\n\nTITLE: Deteriorating multiple item types with custom frequency\nDESCRIPTION: This command configures the script to deteriorate both corpses and food at twice the default rate.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/deteriorate.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndeteriorate start --types corpses,food --freq 0.5,days\n```\n\n----------------------------------------\n\nTITLE: Removing Superspeed from Selected Creature - DFHack Tool\nDESCRIPTION: This command removes the superspeed effect from the currently selected creature. It is essential for reverting speed changes.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/superdwarf.rst#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n\"\"\"superdwarf del\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Using Linger Command in DFHack\nDESCRIPTION: Basic command usage for the linger script. Execute this command after receiving the \"You are deceased\" message to take control of your killer. The script attempts to identify the killer through historical events or recent combat data.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/linger.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nlinger\n```\n\n----------------------------------------\n\nTITLE: DFHack Command-Line Usage Options\nDESCRIPTION: Defines the command-line interface options for the reaction-product-trigger script, including options to clear hooks, specify reaction names, and define commands with special argument placeholders.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/modtools/reaction-product-trigger.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n-clear\n    unregister all reaction hooks\n-reactionName name\n    specify the name of the reaction\n-command [ commandStrs ]\n    specify the command to be run on the target(s)\n    special args\n        \\\\WORKER_ID\n        \\\\REACTION\n        \\\\BUILDING_ID\n        \\\\LOCATION\n        \\\\INPUT_ITEMS\n        \\\\OUTPUT_ITEMS\n        \\\\anything -> \\anything\n        anything -> anything\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Assign Beliefs Script in DFHack\nDESCRIPTION: Shows an example of using the assign-beliefs script to reset and set specific beliefs for a unit. It demonstrates setting values for tradition, craftsmanship, power, and cunning.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/assign-beliefs.rst#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nassign-beliefs --reset --beliefs [ TRADITION 2 CRAFTSMANSHIP 3 POWER 0 CUNNING -1 ]\n```\n\n----------------------------------------\n\nTITLE: Using the gui/family-affairs script in Dwarf Fortress\nDESCRIPTION: Basic usage examples for running the gui/family-affairs script in Dwarf Fortress. Shows both the standard invocation and the option to start directly on the Pregnancies tab.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/gui/family-affairs.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ngui/family-affairs\ngui/family-affairs --pregnancy\n```\n\n----------------------------------------\n\nTITLE: Placing Colony Commands\nDESCRIPTION: Commands for placing new colonies under the cursor. Can specify colony type or default to honey bees.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/colonies.rst#2025-04-21_snippet_1\n\nLANGUAGE: dfhack\nCODE:\n```\ncolonies place\n```\n\nLANGUAGE: dfhack\nCODE:\n```\ncolonies place ANT\n```\n\n----------------------------------------\n\nTITLE: Loading Save File via DFHack Script\nDESCRIPTION: Basic command for loading a specific save directory in Dwarf Fortress using the load-save script.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/load-save.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nload-save <save directory name>\n```\n\n----------------------------------------\n\nTITLE: Command Options for putontable Script\nDESCRIPTION: Available command line options for the putontable script, including the all-items flag.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/putontable.rst#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n-a, --all\n```\n\n----------------------------------------\n\nTITLE: Setting maximum fish and enabling raw fish counting in Autofish\nDESCRIPTION: Example command to set the maximum fish to 150 and enable counting of raw fish in the autofish script.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/autofish.rst#2025-04-21_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nautofish 150 -r true\n```\n\n----------------------------------------\n\nTITLE: Loading Agitation-Rebalance Preset Configuration\nDESCRIPTION: Example command for loading the 'lenient' preset, which configures the script to allow more tree cutting and activity between attacks. This preset is loaded automatically with default difficulty settings.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/agitation-rebalance.rst#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nagitation-rebalance preset lenient\n```\n\n----------------------------------------\n\nTITLE: Using the stuck-squad script in DFHack\nDESCRIPTION: The simple command to execute the stuck-squad script in DFHack. This allows squads and messengers to rescue lost squads that are stuck on the world map.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/fix/stuck-squad.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nfix/stuck-squad\n```\n\n----------------------------------------\n\nTITLE: Setting up syndrome triggers by syndrome name in DFHack\nDESCRIPTION: This command registers a trigger for a specific syndrome identified by its name. When a unit acquires the named syndrome, the specified command will be executed.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/modtools/syndrome-trigger.rst#2025-04-21_snippet_1\n\nLANGUAGE: dfhack\nCODE:\n```\nmodtools/syndrome-trigger --syndrome <name> --command [ <command> ]\n```\n\n----------------------------------------\n\nTITLE: DFHack Script Command Arguments\nDESCRIPTION: Command-line arguments for configuring the invader item destroyer script. Includes options for clearing data, targeting specific entities/civilizations, and selecting item types for destruction.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/modtools/invader-item-destroyer.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n-clear\n    reset all registered data\n-allEntities [true/false]\n    set whether it should delete items from invaders from any civ\n-allItems [true/false]\n    set whether it should delete all invader items regardless of\n    type when an appropriate invader dies\n-item itemdef\n    set a particular itemdef to be destroyed when an invader\n    from an appropriate civ dies.  examples:\n        ITEM_WEAPON_PICK\n-entity entityName\n    set a particular entity up so that its invaders destroy their\n    items shortly after death.  examples:\n        MOUNTAIN\n        EVIL\n```\n\n----------------------------------------\n\nTITLE: Example Skill Assignment Command\nDESCRIPTION: Demonstrates how to reset all skills and assign woodcutting and axe skills to specific levels.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/assign-skills.rst#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nassign-skills --reset --skills [ WOODCUTTING 3 AXE 2 ]\n```\n\n----------------------------------------\n\nTITLE: Enabling the Agitation Monitor Overlay\nDESCRIPTION: Command to enable the monitoring overlay that displays the current chances of being attacked on the surface or in caverns. This feature can be used independently of the main script.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/agitation-rebalance.rst#2025-04-21_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nagitation-rebalance enable monitor\n```\n\n----------------------------------------\n\nTITLE: Example Commands for putontable Script\nDESCRIPTION: Example usage of the putontable command showing both single item and multi-item placement options.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/putontable.rst#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nputontable\nputontable --all\n```\n\n----------------------------------------\n\nTITLE: Executing the Make-Monarch Command in DFHack\nDESCRIPTION: This command makes the currently selected dwarf the king or queen of your civilization. It requires a unit to be selected before execution and has no additional parameters.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/make-monarch.rst#2025-04-21_snippet_0\n\nLANGUAGE: plain\nCODE:\n```\nmake-monarch\n```\n\n----------------------------------------\n\nTITLE: Basic Usage Command for exportlegends Script\nDESCRIPTION: The basic command to run the exportlegends script manually while in legends mode. This will generate only the extended data export without using the vanilla export functionality.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/exportlegends.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nexportlegends\n```\n\n----------------------------------------\n\nTITLE: Basic Usage Command\nDESCRIPTION: Simple command to run the corrupt equipment fix once\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/fix/corrupt-equipment.rst#2025-04-21_snippet_0\n\nLANGUAGE: dfhack\nCODE:\n```\nfix/corrupt-equipment\n```\n\n----------------------------------------\n\nTITLE: Running Fix NOEXERT Exhaustion Script in DFHack\nDESCRIPTION: This command runs the script to zero the exhaustion counter of NOEXERT units. It should be executed in DFHack to prevent units like vampires, necromancers, and intelligent undead from becoming tired during activities that don't respect the NOEXERT tag.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/fix/noexert-exhaustion.rst#2025-04-21_snippet_0\n\nLANGUAGE: dfhack\nCODE:\n```\nfix/noexert-exhaustion\n```\n\n----------------------------------------\n\nTITLE: Basic Usage Command Format\nDESCRIPTION: Shows the basic command syntax for using the visualize-structure script with a Lua expression parameter.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/devel/visualize-structure.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndevel/visualize-structure <lua expression>\n```\n\n----------------------------------------\n\nTITLE: DFHack Command Syntax for Interaction Triggers\nDESCRIPTION: Shows the command syntax for configuring interaction triggers in DFHack. Includes options for clearing triggers, setting attack/defend verbs, suppressing announcements, and specifying commands with variable substitution.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/modtools/interaction-trigger.rst#2025-04-21_snippet_0\n\nLANGUAGE: dfhack\nCODE:\n```\n-clear\n    unregisters all triggers\n-onAttackStr str\n    trigger the command when the attack verb is \"str\". both onAttackStr and onDefendStr MUST be specified\n-onDefendStr str\n    trigger the command when the defend verb is \"str\". both onAttackStr and onDefendStr MUST be specified\n-suppressAttack\n    delete the attack announcement from the combat logs\n-suppressDefend\n    delete the defend announcement from the combat logs\n-command [ commandStrs ]\n    specify the command to be executed\n    commandStrs\n        \\\\ATTACK_VERB\n        \\\\DEFEND_VERB\n        \\\\ATTACKER_ID\n        \\\\DEFENDER_ID\n        \\\\ATTACK_REPORT\n        \\\\DEFEND_REPORT\n        \\\\anything -> \\anything\n        anything -> anything\n```\n\n----------------------------------------\n\nTITLE: Using forget-dead-body Command in DFHack\nDESCRIPTION: Shows the command syntax for the forget-dead-body script. It can be run either on a selected unit or with the --all flag to affect all units in the fortress.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/forget-dead-body.rst#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n``forget-dead-body``\n    Make the selected unit forget seeing dead bodies.\n``forget-dead-body --all``\n    Make all units forget seeing dead bodies.\n```\n\n----------------------------------------\n\nTITLE: Example: Setting Food Preferences\nDESCRIPTION: Example command for setting food preferences, making a unit prefer to consume dwarven wine, olives, and yak meat.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/assign-preferences.rst#2025-04-21_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nassign-preferences --reset --likefood [ PLANT:MUSHROOM_HELMET_PLUMP:DRINK PLANT:OLIVE:FRUIT CREATURE_MAT:YAK:MUSCLE ]\n```\n\n----------------------------------------\n\nTITLE: Using Combat-Harden Script in DFHack\nDESCRIPTION: Basic usage pattern for the combat-harden script. The script accepts unit options to specify which units to affect and hardness options to determine the level of combat hardening to apply.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/combat-harden.rst#2025-04-21_snippet_0\n\nLANGUAGE: plain\nCODE:\n```\ncombat-harden [<unit option>] [<hardness option>]\n```\n\n----------------------------------------\n\nTITLE: Basic Usage Command for putontable Script\nDESCRIPTION: The basic command syntax for the putontable script, which allows placing items on tables.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/putontable.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nputontable [<options>]\n```\n\n----------------------------------------\n\nTITLE: Running the locate-ore Command with Specific Ore Type\nDESCRIPTION: Examples of how to use the locate-ore command to find specific ores like hematite or metals like iron and silver. The --all flag enables searching for undiscovered ore veins.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/locate-ore.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nlocate-ore hematite\nlocate-ore iron\nlocate-ore silver --all\n```\n\n----------------------------------------\n\nTITLE: Basic Burial Command Usage\nDESCRIPTION: The basic command syntax for the burial script. Creates tomb zones for all unzoned coffins on the map.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/burial.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nburial\n```\n\n----------------------------------------\n\nTITLE: Example Usage with Cursor Position\nDESCRIPTION: Demonstrates using the script to visualize the memory structure of the global cursor position variable.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/devel/visualize-structure.rst#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\ndevel/visualize-structure df.global.cursor\n```\n\n----------------------------------------\n\nTITLE: Executing Minecart Assignment in DFHack\nDESCRIPTION: Command example showing how to assign minecarts to all available hauling routes using the DFHack script. This command automatically finds and assigns free minecarts to all hauling routes that don't already have minecarts assigned.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/assign-minecarts.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nassign-minecarts all\n```\n\n----------------------------------------\n\nTITLE: Using the Reveal Script in DFHack\nDESCRIPTION: Shows the basic syntax for using the gui/reveal script in DFHack. The script can be used with or without the 'hell' keyword to control whether late-game features are revealed.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/gui/reveal.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngui/reveal [hell] [<options>]\n```\n\n----------------------------------------\n\nTITLE: Manual Assignment Burial Command\nDESCRIPTION: Creates tomb zones with automatic burial disabled for both citizens and pets, requiring manual assignment of deceased units.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/burial.rst#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nburial -cp\n```\n\n----------------------------------------\n\nTITLE: Adding a Specific Thought to a Unit\nDESCRIPTION: Command example for adding a gratitude emotion with a specific strength to a unit identified by ID.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/add-thought.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nadd-thought --unit 23142 --emotion GRATITUDE --thought GoodMeal --strength 1\n```\n\n----------------------------------------\n\nTITLE: Running Stuck Instruments Fix Command\nDESCRIPTION: Command usage examples for fixing stuck instruments. The base command fixes all affected instruments, while the dry-run option shows how many items would be affected without making changes.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/fix/stuck-instruments.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nfix/stuck-instruments\n```\n\nLANGUAGE: shell\nCODE:\n```\nfix/stuck-instruments -n\n```\n\nLANGUAGE: shell\nCODE:\n```\nfix/stuck-instruments --dry-run\n```\n\n----------------------------------------\n\nTITLE: Disabling Idle Crafting Globally in DFHack\nDESCRIPTION: Command to disable idle crafting functionality at all workshops in the fortress. It can be re-enabled at individual workshops later.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/idle-crafting.rst#2025-04-21_snippet_3\n\nLANGUAGE: dfhack\nCODE:\n```\ndisable idle-crafting\n```\n\n----------------------------------------\n\nTITLE: Using the Fix Engravings DFHack Script\nDESCRIPTION: Command usage for the fix/engravings script with an optional quiet mode flag that suppresses output unless a fix was applied.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/fix/engravings.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nfix/engravings [<options>]\n```\n\n----------------------------------------\n\nTITLE: Registering Color Scheme Directory in Lua\nDESCRIPTION: This command registers a directory containing color scheme files. It can be used with options for forcing registration of incomplete schemes and suppressing output.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/color-schemes.rst#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\ncolor-schemes register colorschemes\n```\n\n----------------------------------------\n\nTITLE: Basic Usage Command Format\nDESCRIPTION: Shows the basic command syntax for using the assign-facets script. The command accepts a unit ID and additional options.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/assign-facets.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nassign-facets [--unit <id>] <options>\n```\n\n----------------------------------------\n\nTITLE: Example of Setting Zero Embark Points in Dwarf Fortress\nDESCRIPTION: This example shows how to set embark points to zero, creating a challenging scenario where the player can only embark with items already selected and cannot add more.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/points.rst#2025-04-21_snippet_2\n\nLANGUAGE: dfhack-script\nCODE:\n```\npoints 0\n```\n\n----------------------------------------\n\nTITLE: Dumping Items Including Pets/Vermin in Selected Cage with DFHack\nDESCRIPTION: This DFHack command dumps loose items in the selected cage, including any tamed pets or untamed vermin.  The `--include-pets` and `--include-vermin` options are needed to include these entities, as they are normally excluded to prevent accidental deaths.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/stripcaged.rst#2025-04-21_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n\"stripcaged items here --include-pets --include-vermin\"\n```\n\n----------------------------------------\n\nTITLE: Example: Setting Creature Hatred\nDESCRIPTION: Example command for making a unit detest a specific creature (jumping spiders).\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/assign-preferences.rst#2025-04-21_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nassign-preferences --reset --hatecreature SPIDER_JUMPING\n```\n\n----------------------------------------\n\nTITLE: List-Waves Example Commands\nDESCRIPTION: Example commands showing different ways to use the list-waves script, including displaying all waves, hiding names, and showing specific founding waves.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/list-waves.rst#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nlist-waves\nlist-waves --no-names\nlist-waves 0\n```\n\n----------------------------------------\n\nTITLE: Setting Default Thresholds for Idle Crafting in DFHack\nDESCRIPTION: Example command that resets the need thresholds to their default values of 500, 1000, and 10000.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/idle-crafting.rst#2025-04-21_snippet_4\n\nLANGUAGE: dfhack\nCODE:\n```\nidle-crafting thresholds 500,1000,10000\n```\n\n----------------------------------------\n\nTITLE: Running Fix/Dry-Buckets Script in Dwarf Fortress\nDESCRIPTION: Command syntax for running the fix/dry-buckets script in Dwarf Fortress. The script can be run with or without the quiet flag to control console output.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/fix/dry-buckets.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nfix/dry-buckets\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nfix/dry-buckets -q\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nfix/dry-buckets --quiet\n```\n\n----------------------------------------\n\nTITLE: Using find-primitive Command in DFHack\nDESCRIPTION: Command syntax for the find-primitive tool that searches for primitive variables in memory. Takes a data type parameter followed by one or more test values to track memory changes. The data type must be a valid primitive type like int32_t or uint8_t.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/devel/find-primitive.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndevel/find-primitive <data type> val1 val2 [val3...]\n```\n\n----------------------------------------\n\nTITLE: Dumping All Items from All Cages with DFHack\nDESCRIPTION: This DFHack command dumps all items from every cage in the game, regardless of whether the items are equipped by creatures or are loose within the cage. This includes weapons, armor, and loose items like seeds.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/stripcaged.rst#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n\"stripcaged all\"\n```\n\n----------------------------------------\n\nTITLE: Executing DFHack Script: All-Bob Name Changer\nDESCRIPTION: This code snippet demonstrates the usage of the 'all-bob' script. When executed, it changes the first name of all units in the game to 'Bob'. This is particularly useful for testing 'modtools/interaction-trigger' events.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/devel/all-bob.rst#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\ndevel/all-bob\n```\n\n----------------------------------------\n\nTITLE: Setting Skill Points for Dwarves in Dwarf Fortress Embark\nDESCRIPTION: This command sets the remaining skill points for the selected dwarf or all dwarves to a specified value N. It can be used to give extra points for skill assignment during embark.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/embark-skills.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nembark-skills points <N> [all]\n```\n\n----------------------------------------\n\nTITLE: Listing Civilization IDs in Lua\nDESCRIPTION: A Lua command that prints all civilization IDs present in the current game by iterating through world entities and extracting their raw codes.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/force.rst#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nids={} for _,en in ipairs(world.entities.all) do ids[en.entity_raw.code] = true end for id in pairs(ids) do print(id) end\n```\n\n----------------------------------------\n\nTITLE: Executing Tile Browser Script in DFHack\nDESCRIPTION: This command launches the tile browser script in DFHack, allowing users to interactively browse and view graphical tile textures by their texpos values.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/devel/tile-browser.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndevel/tile-browser\n```\n\n----------------------------------------\n\nTITLE: DFHack Event Client Command Usage\nDESCRIPTION: Command syntax examples showing how to use the eventful-client script for testing event callbacks. Includes commands for adding handlers, listing active handlers, and clearing all handlers.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/devel/eventful-client.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndevel/eventful-client help\ndevel/eventful-client add <event type> <frequency>\ndevel/eventful-client add all <frequency>\ndevel/eventful-client list\ndevel/eventful-client clear\n```\n\n----------------------------------------\n\nTITLE: Incrementing Populations of Multiple Races\nDESCRIPTION: Similar to the increment command, this applies to all races matching a given pattern, allowing for the addition or subtraction of a specified amount.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/region-pops.rst#2025-04-21_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\n``region-pops incr-all <pattern> <amount>``\n```\n\n----------------------------------------\n\nTITLE: Pulling Levers in Dwarf Fortress with DFHack\nDESCRIPTION: Command for queuing a job for a dwarf to pull a lever. Supports additional options for priority and instant activation.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/lever.rst#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nlever pull [<options>]\n```\n\n----------------------------------------\n\nTITLE: Using fix-ster Command in DFHack\nDESCRIPTION: Command syntax for the fix-ster script that toggles fertility status. It requires specifying whether to make units fertile or sterile, with optional targeting parameters for specific groups of creatures.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/fix-ster.rst#2025-04-21_snippet_0\n\nLANGUAGE: dfhack\nCODE:\n```\nfix-ster fert|ster [all|animals|only:<race>]\n```\n\n----------------------------------------\n\nTITLE: Reading Animal Training Level in DFHack\nDESCRIPTION: This command displays the training level of the selected animal in the DFHack environment. It is useful for users to assess the current status of their animals before making modifications.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/tame.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ntame --read\n```\n\n----------------------------------------\n\nTITLE: Command Examples - DFHack Tool\nDESCRIPTION: This snippet lists example usages of the command line interface for the warn-stranded tool. Each example demonstrates a specific functionality such as checking for stranded citizens or ignoring specific units.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/warn-stranded.rst#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n``warn-stranded``\n    Standard command that checks citizens and pops up a warning if any are\n    stranded. Does nothing when there are no unignored stranded citizens.\n\n``warn-stranded status``\n    List all groups of stranded citizens and all ignored citizens. Also shows\n    individual unit ids.\n\n``warn-stranded clear``\n    Clear (unignore) all ignored citizens.\n\n``warn-stranded ignore 15343``\n    Ignore citizen with unit id 15343.\n\n``warn-stranded ignoregroup 2``\n    Ignore stranded citizen group 2.\n```\n\n----------------------------------------\n\nTITLE: Running the Tooltip ID Dumping Script in DFHack\nDESCRIPTION: Command to execute the devel/dump-tooltip-ids script in DFHack. This will generate the main_hover_instruction enum XML structures and cross-check them with currently-built enum attributes to identify any positioning changes.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/devel/dump-tooltip-ids.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndevel/dump-tooltip-ids\n```\n\n----------------------------------------\n\nTITLE: Using fix/drop-webs Command in DFHack\nDESCRIPTION: Command line usage examples for the fix/drop-webs script. The standard command drops only floating webs, while the --all flag makes any web above ground level fall.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/fix/drop-webs.rst#2025-04-21_snippet_0\n\nLANGUAGE: plain\nCODE:\n```\nfix/drop-webs\n```\n\nLANGUAGE: plain\nCODE:\n```\nfix/drop-webs --all\n```\n\n----------------------------------------\n\nTITLE: Example: Setting Shape Preferences\nDESCRIPTION: Example command for making a unit like a specific shape (stars).\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/assign-preferences.rst#2025-04-21_snippet_9\n\nLANGUAGE: text\nCODE:\n```\nassign-preferences --reset --likeshape STAR\n```\n\n----------------------------------------\n\nTITLE: Removing Carpenter's Workshop Example in Lua\nDESCRIPTION: Demonstrates how to remove a carpenter's workshop from the build menu using the module interface\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/modtools/change-build-menu.rst#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nbuildmenu.ChangeBuilding(\"CARPENTERS\", \"WORKSHOPS\", false)\n```\n\n----------------------------------------\n\nTITLE: Using once-per-save Command in DFHack\nDESCRIPTION: Syntax for running commands only once per saved world. This allows specifying multiple commands separated by semicolons that will execute only if they haven't been run before in the current savegame.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/once-per-save.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nonce-per-save [--rerun] <command>[; <command> ...]\n```\n\n----------------------------------------\n\nTITLE: Setting Legendary Skills for Dwarves in Dwarf Fortress Embark\nDESCRIPTION: This command sets all skills of the selected dwarf or all dwarves to 'Legendary' level. It's used to create extremely skilled starting dwarves for a new fortress.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/embark-skills.rst#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nembark-skills legendary [all]\n```\n\n----------------------------------------\n\nTITLE: Displaying Selected Lever Information in DFHack\nDESCRIPTION: Command for showing information about the currently selected lever in the fortress.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/lever.rst#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nlever show\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Usage of Exterminate Script in DFHack\nDESCRIPTION: Shows various command formats for using the exterminate script, including listing targets, killing specific units, and killing all units of a certain race or caste.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/exterminate.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nexterminate [list]\nexterminate this [<options>]\nexterminate undead [<options>]\nexterminate all[:<caste>] [<options>]\nexterminate <race>[:<caste>] [<options>]\n```\n\n----------------------------------------\n\nTITLE: Using the devel/send-key Command in DFHack\nDESCRIPTION: Demonstrates the usage syntax for the devel/send-key command. It accepts a key parameter (interface_key name) and an optional depth parameter to specify which screen in the hierarchy should receive the input.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/devel/send-key.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndevel/send-key <key> [<depth>]\n```\n\n----------------------------------------\n\nTITLE: Dumping Weapons from Caged Creatures with DFHack\nDESCRIPTION: This DFHack command specifically targets weapons equipped by caged creatures and marks them for dumping. It allows for the removal of weapons from prisoners or animals within cages.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/stripcaged.rst#2025-04-21_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n\"stripcaged weapons\"\n```\n\n----------------------------------------\n\nTITLE: Complete Bodyswap Command Syntax\nDESCRIPTION: Full command syntax showing the optional unit ID parameter specification.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/bodyswap.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nbodyswap [--unit <id>]\n```\n\n----------------------------------------\n\nTITLE: Using the Questport Command in DFHack\nDESCRIPTION: Shows the basic usage of the questport command. Running this command will teleport the player character to the location currently selected by the cursor in the quest log map.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/questport.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nquestport\n```\n\n----------------------------------------\n\nTITLE: Running the Scan-vtables Script in DFHack\nDESCRIPTION: The command to run the scan-vtables script in DFHack. This command initiates a scan for likely vtable addresses in memory pages mapped to the Dwarf Fortress executable and prints them in a format compatible with symbols.xml.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/devel/scan-vtables.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndevel/scan-vtables\n```\n\n----------------------------------------\n\nTITLE: Running the DF overlay widget positioning tool\nDESCRIPTION: Command to run the gui/overlay tool that lets users reposition DFHack overlay widgets on their screen. This simple command opens the interface for repositioning widgets.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/gui/overlay.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ngui/overlay\n```\n\n----------------------------------------\n\nTITLE: Using the Combine Command with Basic Syntax\nDESCRIPTION: Shows the basic command syntax for the combine script, which requires specifying a scope ('all' or 'here') followed by optional parameters.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/combine.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncombine (all|here) [<options>]\n```\n\n----------------------------------------\n\nTITLE: Usage Command for Assign Beliefs Script in DFHack\nDESCRIPTION: Demonstrates the basic usage command for the assign-beliefs script. It allows specifying a unit ID and other options.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/assign-beliefs.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nassign-beliefs [--unit <id>] <options>\n```\n\n----------------------------------------\n\nTITLE: Displaying Lever Information by ID in DFHack\nDESCRIPTION: Command for centering the display on a specific lever identified by ID and showing its information.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/lever.rst#2025-04-21_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nlever show --id <id>\n```\n\n----------------------------------------\n\nTITLE: Disabling Wall Construction Example in Lua\nDESCRIPTION: Shows how to prevent wall construction by modifying the build menu using advanced building modification\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/modtools/change-build-menu.rst#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal typ, styp = df.building_type.Construction, df.construction_type.Wall\nbuildmenu.ChangeBuildingAdv(typ, styp, -1, \"CONSTRUCTIONS\", false)\n```\n\n----------------------------------------\n\nTITLE: Invoking Notify GUI Script\nDESCRIPTION: Command to launch the notification configuration interface.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/gui/notify.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ngui/notify\n```\n\n----------------------------------------\n\nTITLE: Dumping All Items from Specific Cages with DFHack\nDESCRIPTION: This DFHack command allows specifying cage IDs to target for item dumping.  It dumps all items from the cages with the specified IDs (e.g., 25321 and 34228).\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/stripcaged.rst#2025-04-21_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n\"stripcaged all 25321 34228\"\n```\n\n----------------------------------------\n\nTITLE: Invoking the Mod Manager GUI Script in DFHack\nDESCRIPTION: Command to launch the mod manager overlay interface from DFHack. When executed, this adds an overlay to the mod list screen that allows saving and loading mod list presets.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/gui/mod-manager.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ngui/mod-manager\n```\n\n----------------------------------------\n\nTITLE: Using adv-max-skills Command in DFHack\nDESCRIPTION: Command syntax for the adv-max-skills script which maximizes all changeable skills and attributes when creating an adventurer character in Dwarf Fortress. The command takes no parameters and is executed directly from the DFHack console.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/adv-max-skills.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nadv-max-skills\n```\n\n----------------------------------------\n\nTITLE: Running Adventure Fortress with Adventurer's Civilization Items\nDESCRIPTION: This command launches the Adventure Fortress GUI with items available to the adventurer's civilization, expanding the selection beyond dwarf-specific items.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/gui/advfort.rst#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\ngui/advfort -e\n```\n\n----------------------------------------\n\nTITLE: Running the Siege Engine Script in Dwarf Fortress\nDESCRIPTION: Command syntax for running the siege engine management interface script in Dwarf Fortress. This command should be executed after selecting a siege engine in query (q) mode.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/gui/siege-engine.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ngui/siege-engine\n```\n\n----------------------------------------\n\nTITLE: Using the elevate-mental DFHack script\nDESCRIPTION: Command syntax for the elevate-mental script which sets all mental attributes of a selected dwarf to a specified value. Without parameters, it sets attributes to maximum; with a value parameter, it sets them to that specific value (between 0-5000).\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/elevate-mental.rst#2025-04-21_snippet_0\n\nLANGUAGE: dfhack\nCODE:\n```\nelevate-mental [value]\n```\n\n----------------------------------------\n\nTITLE: Using Item Script API in Lua\nDESCRIPTION: Example showing how to use the item script API to reveal all boulders and then hide those not in stockpiles using programmatic filters.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/item.rst#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal itemtools = reqscript('item')\nlocal cond = {}\n\nitemtools.condition_type(cond, \"BOULDER\")\nitemtools.execute('unhide', cond, {}) -- reveal all boulders\n\nitemtools.condition_stockpiled(cond, { negate = true })\nitemtools.execute('hide', cond, {})   -- hide all boulders not in stockpiles\n```\n\n----------------------------------------\n\nTITLE: Module Import for Build Menu Modification in Lua\nDESCRIPTION: Shows how to import the build menu modification script as a module in a Lua script\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/modtools/change-build-menu.rst#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal buildmenu = reqscript \"change-build-menu\"\n```\n\n----------------------------------------\n\nTITLE: Using the Moddable-Gods Script Command-Line Arguments\nDESCRIPTION: This snippet outlines the command-line arguments available for the modtools/moddable-gods script. It includes options for setting the deity's name, spheres of influence, gender, description, and enabling verbose output.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/modtools/moddable-gods.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n-name godName\n    sets the name of the god to godName\n    if there's already a god of that name, the script halts\n-spheres [ sphereList ]\n    define a space-separated list of spheres of influence of the god\n-gender male|female|neuter\n    sets the gender of the god\n-depictedAs str\n    often depicted as a str\n-verbose\n    if specified, prints details about the created god\n```\n\n----------------------------------------\n\nTITLE: Using the gui/autogems Command in DFHack\nDESCRIPTION: The basic command to launch the gui/autogems interface in DFHack. This command opens a graphical interface that allows users to configure which types of gems should be automatically cut.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/gui/autogems.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ngui/autogems\n```\n\n----------------------------------------\n\nTITLE: Changing Number of Starting Dwarves in DFHack\nDESCRIPTION: Command-line script that modifies the number of dwarves embarking, which persists until Dwarf Fortress is restarted. Supports values from 1 to 32,767, with practical limits based on game performance.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/startdwarf.rst#2025-04-21_snippet_0\n\nLANGUAGE: dfhack\nCODE:\n```\nstartdwarf <number>\n```\n\nLANGUAGE: example\nCODE:\n```\nstartdwarf 10\nstartdwarf 1\nstartdwarf 500\n```\n\n----------------------------------------\n\nTITLE: Loading Color Palette in Lua\nDESCRIPTION: Lua function to load a custom color palette from a specified file path. The function checks the file format and handles potential loading errors by reverting changes if the palette is invalid.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/season-palette.rst#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nLoadPalette(path)\n```\n\n----------------------------------------\n\nTITLE: Undump Buildings Functionality - DFHack Tool\nDESCRIPTION: This DFHack tool undoes the designation of construction materials for buildings marked for dumping, helping to manage game resource utilization efficiently. The tool operates in dump mode to identify and unmark construction materials that shouldn't be marked for dumping.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/undump-buildings.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n.. dfhack-tool::\n    :summary: Undesignate building base materials for dumping.\n    :tags: fort productivity buildings\n\nIf you designate a bunch of tiles in dump mode, all the items on those tiles\nwill be marked for dumping. Unfortunately, if there are buildings on any of\nthose tiles, the items that were used to *build* those buildings will also be\nuselessly and confusingly marked for dumping.\n\nThis tool will scan for buildings that have their construction materials marked\nfor dumping and will unmark them.\n\nUsage\n-----\n\n::\n\n    undump-buildings\n```\n\n----------------------------------------\n\nTITLE: Using the loyalty cascade fix script in DFHack\nDESCRIPTION: The command to run the loyalty cascade fix script in DFHack. This script stops dwarves from fighting other dwarves in their own civilization by fixing units that consider their own civilization to be the enemy.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/fix/loyaltycascade.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nfix/loyaltycascade\n```\n\n----------------------------------------\n\nTITLE: Configuring Combat Report Monitoring\nDESCRIPTION: Command to enable or disable the monitoring of combat reports. Combat report monitoring is disabled by default.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/devel/annc-monitor.rst#2025-04-21_snippet_1\n\nLANGUAGE: dfhack\nCODE:\n```\ndevel/annc-monitor report enable|disable\n```\n\n----------------------------------------\n\nTITLE: Pets-Only Burial Command\nDESCRIPTION: Creates tomb zones that only allow automatic burial of pets.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/burial.rst#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nburial -p\n```\n\n----------------------------------------\n\nTITLE: Timing-Only Option for Windmill Synchronization\nDESCRIPTION: This option allows for randomizing windmill polarity while synchronizing their timers. It provides a balance between maintaining consistent timing while introducing some randomness to the windmill appearance.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/sync-windmills.rst#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n``-t``, ``--timing-only``\n```\n\n----------------------------------------\n\nTITLE: DFHack Instruments Script Usage Commands\nDESCRIPTION: Shows the basic command syntax for listing instruments and creating work orders. The order command accepts an instrument name and optional quantity parameter.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/instruments.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ninstruments [list]\ninstruments order <instrument_name> [<quantity>] [<options>]\n```\n\n----------------------------------------\n\nTITLE: Setting Need Thresholds for Idle Crafting in DFHack\nDESCRIPTION: Command to set the thresholds at which the tool generates crafting jobs for dwarves based on their 'craft item' need levels. Higher thresholds indicate higher priority.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/idle-crafting.rst#2025-04-21_snippet_1\n\nLANGUAGE: dfhack\nCODE:\n```\nidle-crafting thresholds <number list>\n```\n\n----------------------------------------\n\nTITLE: Enabling the Load Screen GUI Script in DF Hack\nDESCRIPTION: Command to enable the enhanced load screen GUI that replaces DF's continue game screen with a searchable list interface.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/gui/load-screen.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nenable gui/load-screen\n```\n\n----------------------------------------\n\nTITLE: Using Emigration Script in Dwarf Fortress\nDESCRIPTION: This code snippet demonstrates the usage of the emigration script in Dwarf Fortress. It shows how to enable emigration for stressed dwarves and how to use the 'nobles' command to manage noble emigration.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/emigration.rst#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nenable emigration\nemigration nobles [--list]\nemigration nobles [<target>]\n```\n\n----------------------------------------\n\nTITLE: Examples of Using modtools/add-syndrome in DFHack\nDESCRIPTION: Practical examples of the modtools/add-syndrome script. The first example removes all instances of a named syndrome, and the second adds a syndrome by ID with a specific reset policy.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/modtools/add-syndrome.rst#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmodtools/add-syndrome --target 2391 --syndrome \"gila monster bite\" --eraseAll\nmodtools/add-syndrome --target 1231 --syndrome 14 --resetPolicy DoNothing\n```\n\n----------------------------------------\n\nTITLE: Example: Setting Creature Preferences\nDESCRIPTION: Example command for making a unit like a specific creature (sparrows).\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/assign-preferences.rst#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nassign-preferences --reset --likecreature SPARROW\n```\n\n----------------------------------------\n\nTITLE: Displaying Goth Preference Set in Dwarf Fortress\nDESCRIPTION: Shows the alternative 'goth' preference set that can be applied to dwarves. This darker set includes preferences for macabre items like corpses, skin, and remains, as well as a general dislike for other civilized races.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/pref-adjust.rst#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n... likes dwarf skin, corpses, body parts, remains, coffins, the color\nblack, crosses, glumprongs for their living shadows and snow demons for\ntheir horrifying features.  When possible, she prefers to consume sewer\nbrew, gutter cruor and bloated tubers.  She absolutely detests elves,\nhumans and dwarves.\n```\n\n----------------------------------------\n\nTITLE: Using the Brainwash Script in DFHack\nDESCRIPTION: This code snippet demonstrates the usage syntax for the brainwash script in DFHack. It shows how to call the script with a specific personality type parameter.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/brainwash.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nbrainwash <type>\n```\n\n----------------------------------------\n\nTITLE: Using the Power Meter Script in DFHack\nDESCRIPTION: Command to run the power meter script in DFHack. When executed after selecting a pressure plate in the build menu, it will create a power meter building instead that can measure power supplied to adjacent gear boxes.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/gui/power-meter.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ngui/power-meter\n```\n\n----------------------------------------\n\nTITLE: Basic DwarfOp Commands\nDESCRIPTION: Core command syntax for listing tables, resetting optimization data, and selecting dwarves for modification.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/dwarf-op.rst#2025-04-21_snippet_0\n\nLANGUAGE: dfhack-script\nCODE:\n```\ndwarf-op --list <table>\ndwarf-op --reset|--resetall\ndwarf-op [--select <criteria>] <commands>\n```\n\n----------------------------------------\n\nTITLE: Executing the Names Tool in DFHack\nDESCRIPTION: Shows how to invoke the names script from the DFHack console. Running this command activates the native Dwarf Fortress name generation interface for the currently selected unit or item.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/names.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnames\n```\n\n----------------------------------------\n\nTITLE: Instantly Pulling a Lever with Admin Power in DFHack\nDESCRIPTION: Example command for instantly pulling lever 42 without requiring a dwarf to do the job, using the 'hand of Armok' functionality.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/lever.rst#2025-04-21_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nlever pull --id 42 --instant\n```\n\n----------------------------------------\n\nTITLE: Executing the Stable Temperature Fix Command in DFHack\nDESCRIPTION: Command for running the stable-temp script in DFHack. This command instantly sets all free-lying items to the same temperature as their environment, stopping FPS-draining temperature updates until there are changes to the environment.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/fix/stable-temp.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nfix/stable-temp\n```\n\n----------------------------------------\n\nTITLE: Examples of Emigration Noble Commands in Dwarf Fortress\nDESCRIPTION: This code snippet provides examples of using the 'emigration nobles' command in Dwarf Fortress. It shows how to emigrate selected nobles, list eligible nobles, emigrate all nobles, and emigrate a specific noble by unit ID.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/emigration.rst#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nemigration nobles\nemigration nobles --list\nemigration nobles --all\nemigration nobles --unit 34534\n```\n\n----------------------------------------\n\nTITLE: Running the Autodump Script in DFHack\nDESCRIPTION: This command launches the gui/autodump script in DFHack, providing a graphical interface for teleporting or destroying items in Dwarf Fortress. The script allows for selective item manipulation based on various criteria.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/gui/autodump.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ngui/autodump\n```\n\n----------------------------------------\n\nTITLE: Example: Setting Tree Preferences\nDESCRIPTION: Example command for making a unit like a specific type of tree (oaks).\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/assign-preferences.rst#2025-04-21_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nassign-preferences --reset --liketree OAK\n```\n\n----------------------------------------\n\nTITLE: Example of Granting Abundant Embark Points in Dwarf Fortress\nDESCRIPTION: This example demonstrates setting embark points to an extremely high value, allowing players to select all available items and skills without restrictions.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/points.rst#2025-04-21_snippet_1\n\nLANGUAGE: dfhack-script\nCODE:\n```\npoints 1000000\n```\n\n----------------------------------------\n\nTITLE: Quickfort List Example\nDESCRIPTION: Lists all available blueprints.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/quickfort.rst#2025-04-21_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\nquickfort list\n```\n\n----------------------------------------\n\nTITLE: Flow Type Options in DFHack\nDESCRIPTION: List of available flow types that can be specified using the --flowType parameter, including various environmental and material effects.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/modtools/spawn-flow.rst#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nMiasma\nSteam\nMist\nMaterialDust\nMagmaMist\nSmoke\nDragonfire\nFire\nWeb\nMaterialGas\nMaterialVapor\nOceanWave\nSeaFoam\n```\n\n----------------------------------------\n\nTITLE: Using the Embark Anywhere Command in DFHack\nDESCRIPTION: The basic command to run the embark-anywhere script in DFHack. This must be executed when the player is on the embark site selection screen in Dwarf Fortress.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/gui/embark-anywhere.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ngui/embark-anywhere\n```\n\n----------------------------------------\n\nTITLE: Pulling a Specific Lever with High Priority in DFHack\nDESCRIPTION: Example command for queueing a high-priority job to pull lever 42.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/lever.rst#2025-04-21_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nlever pull --id 42 --priority\n```\n\n----------------------------------------\n\nTITLE: Bodyswap Command with Unit ID Specification\nDESCRIPTION: Extended command syntax that allows taking control of a specific unit by providing its ID number as a parameter.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/bodyswap.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nbodyswap --unit 42\n```\n\n----------------------------------------\n\nTITLE: Basic Usage Command for assign-preferences Script\nDESCRIPTION: Shows the basic command syntax for the assign-preferences script. The command accepts an optional unit ID parameter and various preference options.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/assign-preferences.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nassign-goals [--unit <id>] <options>\n```\n\n----------------------------------------\n\nTITLE: Using the Unit Syndromes Command in DFHack\nDESCRIPTION: This command launches the syndrome inspection tool in Dwarf Fortress, allowing players to view detailed information about syndromes affecting units including remaining and maximum duration and optional detailed effects information.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/gui/unit-syndromes.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ngui/unit-syndromes\n```\n\n----------------------------------------\n\nTITLE: Example: Setting Plant Preferences\nDESCRIPTION: Example command for making a unit like a specific plant (strawberry plants).\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/assign-preferences.rst#2025-04-21_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nassign-preferences --reset --likeplant BERRIES_STRAW\n```\n\n----------------------------------------\n\nTITLE: Usage: ungeld with optional unit ID\nDESCRIPTION: This code snippet demonstrates how to use the `ungeld` command with the optional `--unit` flag to specify the unit ID to ungelded. If no unit id is specified, it defaults to selected unit.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/ungeld.rst#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nungeld [--unit <id>]\n```\n\n----------------------------------------\n\nTITLE: Quickfort Run Example for Dreamfort Blueprint\nDESCRIPTION: Applies the first blueprint from the dreamfort file.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/quickfort.rst#2025-04-21_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\nquickfort run library/dreamfort.csv\n```\n\n----------------------------------------\n\nTITLE: Setting maximum and minimum fish levels in Autofish\nDESCRIPTION: Example command to set the maximum fish to 300 and minimum fish to 250 in the autofish script.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/autofish.rst#2025-04-21_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nautofish 300 250\n```\n\n----------------------------------------\n\nTITLE: Quickfort Orders Example with Dry Run Option\nDESCRIPTION: Calculates material requirements for multiple blueprints without making changes.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/quickfort.rst#2025-04-21_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\nquickfort orders 10,11,12 --dry-run\n```\n\n----------------------------------------\n\nTITLE: List-agreements Command Examples\nDESCRIPTION: Provides specific examples of how to use the list-agreements script with different parameters. Shows how to list only outstanding agreements with the basic command and how to list all agreements with the 'all' parameter.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/list-agreements.rst#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nlist-agreements\n    List outstanding, unfulfilled location agreements.\nlist-agreements all\n    Lists all location agreements, whether satisfied, denied, or expired.\n```\n\n----------------------------------------\n\nTITLE: Using Embark-Anyone Command\nDESCRIPTION: Basic command to enable selection of any civilization during embark. Must be run from the embark screen when choosing an origin civilization.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/embark-anyone.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nembark-anyone\n```\n\n----------------------------------------\n\nTITLE: Example: Setting Material Preferences\nDESCRIPTION: Example command for assigning material preferences to a unit, specifically making them like alabaster and willow wood.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/assign-preferences.rst#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nassign-preferences --reset --likematerial [ INORGANIC:ALABASTER PLANT:WILLOW:WOOD ]\n```\n\n----------------------------------------\n\nTITLE: DFHack Script Usage: Clearing Timeskip Duration\nDESCRIPTION: This example demonstrates how to reset the timeskip duration to its default value using the `--clear` argument. This command will not affect timeskips that have already started.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/set-timeskip-duration.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n\"set-timeskip-duration --clear\"\n```\n\n----------------------------------------\n\nTITLE: Querying Tiletype Materials in Lua\nDESCRIPTION: Command to display all valid tiletype material groups in DFHack using Lua.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/devel/cmptiles.rst#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n@df.tiletype_material\n```\n\n----------------------------------------\n\nTITLE: Windows Autoload Command\nDESCRIPTION: Command for starting Dwarf Fortress with automatic save loading on Windows systems.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/load-save.rst#2025-04-21_snippet_3\n\nLANGUAGE: batch\nCODE:\n```\n\"Dwarf Fortress.exe\" +load-save region1\n```\n\n----------------------------------------\n\nTITLE: Enabling Season Palette Feature\nDESCRIPTION: Command to activate the seasonal color palette switching mechanism in DFHack. When enabled, the script will automatically swap color palettes based on the current in-game season.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/season-palette.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenable season-palette\n```\n\n----------------------------------------\n\nTITLE: Running the CP437 Table Virtual Keyboard in DFHack\nDESCRIPTION: Command to launch the CP437 virtual keyboard tool in Dwarf Fortress. This allows users to input text by clicking on characters from code page 437 and sending the text to the parent screen.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/gui/cp437-table.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngui/cp437-table\n```\n\n----------------------------------------\n\nTITLE: Running the Light-Aquifers-Only Script\nDESCRIPTION: Command syntax for executing the light-aquifers-only script in DFHack. When executed, it converts heavy and varied aquifers to light aquifers either globally (pre-embark) or only for the active map (post-embark).\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/light-aquifers-only.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nlight-aquifers-only\n```\n\n----------------------------------------\n\nTITLE: Using list-agreements Command in DFHack\nDESCRIPTION: Shows the syntax and examples for using the list-agreements script in DFHack to track guildhall and temple agreements in Dwarf Fortress. The basic command lists only outstanding agreements, while adding the 'all' parameter shows the complete history.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/list-agreements.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nlist-agreements [all]\n```\n\n----------------------------------------\n\nTITLE: Listing All Creatures with Superspeed - DFHack Tool\nDESCRIPTION: This command lists all creatures in the game that currently have the superspeed effect applied, allowing players to keep track of their speed enhancements.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/superdwarf.rst#2025-04-21_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\n\"\"\"superdwarf list\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Example: Setting Color Preferences\nDESCRIPTION: Example command for making a unit like a specific color (aqua).\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/assign-preferences.rst#2025-04-21_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nassign-preferences --reset --likecolor AQUA\n```\n\n----------------------------------------\n\nTITLE: Toggling Keyboard Cursor in DFHack Tool Script\nDESCRIPTION: This script toggles the keyboard cursor functionality in DFHack, allowing users to easily switch the keyboard cursor on or off while working in different game modes. It requires DFHack and functions in adventure and fort modes to toggle respective game settings.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/toggle-kbd-cursor.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ntoggle-kbd-cursor\n```\n\n----------------------------------------\n\nTITLE: Memory Range Query by Hexadecimal Addresses\nDESCRIPTION: Example command showing how to query memory ranges using hexadecimal addresses. Addresses can be specified with or without the '0x' prefix.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/devel/lsmem.rst#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndevel/lsmem 0x1234 5678 90ab\n```\n\n----------------------------------------\n\nTITLE: Basic Animal Control Command Usage\nDESCRIPTION: Shows the basic command syntax for the animal-control script with optional selection and command parameters.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/animal-control.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nanimal-control [<selection options>] [<command options>]\n```\n\n----------------------------------------\n\nTITLE: Running the gui/confirm Script in DFHack\nDESCRIPTION: Command syntax for running the gui/confirm script. Optionally accepts an ID parameter to pre-select a specific confirmation dialog in the list.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/gui/confirm.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ngui/confirm [<ID>]\n```\n\n----------------------------------------\n\nTITLE: Using the hide-interface DFHack Command\nDESCRIPTION: The basic command to invoke the hide-interface script in DFHack. When executed, it hides the interface layer so you can view the game map without UI elements. Note that this only works in graphics mode, not in ASCII mode.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/hide-interface.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhide-interface\n```\n\n----------------------------------------\n\nTITLE: Basic List-Waves Command Usage\nDESCRIPTION: Shows the basic command syntax for the list-waves script, which can accept wave numbers and various options as parameters.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/list-waves.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nlist-waves [<wave num> ...] [<options>]\n```\n\n----------------------------------------\n\nTITLE: Using the clear-smoke command in DFHack\nDESCRIPTION: This command removes all smoke particles from the Dwarf Fortress map. It can be used to improve game performance or for visual cleanup. Simply type the command in the DFHack console.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/clear-smoke.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nclear-smoke\n```\n\n----------------------------------------\n\nTITLE: Sorting Needs by Strength in DFHack allneeds Script\nDESCRIPTION: This example demonstrates how to use the allneeds script with the --sort option to order the needs list by how strongly the dwarves feel about them.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/allneeds.rst#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nallneeds --sort strength\n```\n\n----------------------------------------\n\nTITLE: Running unretire-anyone Command in DFHack\nDESCRIPTION: This command is used to activate the DFHack script that allows users to play as a historical figure, whether living or undead, excluding deities, in adventure mode. By executing this command at the start of character creation in adventure mode, players receive a searchable list of historical figures to choose from. The script does not have any additional dependencies and requires no parameters to be executed initially.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/unretire-anyone.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nunretire-anyone\n```\n\n----------------------------------------\n\nTITLE: Memory Range Query by Pattern Matching\nDESCRIPTION: Example command demonstrating how to search memory ranges by matching file names using case-insensitive patterns.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/devel/lsmem.rst#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndevel/lsmem dwarf g_src\n```\n\n----------------------------------------\n\nTITLE: Options for Unforbid Tool\nDESCRIPTION: This section details the options available to modify the behavior of the unforbid tool, allowing for more precise control over which items to unforbid based on their status.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/unforbid.rst#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n``-u``, ``--include-unreachable``\n    Allows the tool to unforbid unreachable items.\n\n``-q``, ``--quiet``\n    Suppress non-error console output.\n\n``-X``, ``--include-worn``\n    Include worn (X) and tattered (XX) items when unforbidding.\n```\n\n----------------------------------------\n\nTITLE: Example of Clearing a Script Environment\nDESCRIPTION: An example showing how to clear the global environment for the gui/quickfort script, which resets any state that would normally persist between runs.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/devel/clear-script-env.rst#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\ndevel/clear-script-env gui/quickfort\n```\n\n----------------------------------------\n\nTITLE: Running DFHack Install Info Export\nDESCRIPTION: Command to export DFHack installation information and recent errors to install-info.txt in the current Dwarf Fortress directory. Used for generating bug reports and troubleshooting.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/install-info.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ninstall-info\n```\n\n----------------------------------------\n\nTITLE: Enabling Immortal Cravings Script in DFHack\nDESCRIPTION: Command to enable the immortal-cravings script which allows immortal units to consume food and drink to satisfy their personality needs when they are not otherwise occupied.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/immortal-cravings.rst#2025-04-21_snippet_0\n\nLANGUAGE: dfhack\nCODE:\n```\nenable immortal-cravings\n```\n\n----------------------------------------\n\nTITLE: Loading Region1 Save Example\nDESCRIPTION: Example command showing how to load a specific save named 'region1'.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/load-save.rst#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nload-save region1\n```\n\n----------------------------------------\n\nTITLE: Using quicksave Command in DFHack\nDESCRIPTION: This command triggers an immediate autosave in Dwarf Fortress when a fort is loaded. Note that the game only preserves the last 3 autosaves.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/quicksave.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nquicksave\n```\n\n----------------------------------------\n\nTITLE: Example assign-attributes Command with Multiple Attribute Changes\nDESCRIPTION: A practical example of using the assign-attributes script to reset all attributes to neutral and then set specific tier values for strength, agility, and spatial sense attributes.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/assign-attributes.rst#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nassign-attributes --reset --attributes [ STRENGTH 2 AGILITY -1 SPATIAL_SENSE -1 ]\n```\n\n----------------------------------------\n\nTITLE: Synchronizing or Randomizing Windmill Movement\nDESCRIPTION: This command synchronizes or randomizes the graphical states and timers of active windmills. It allows players to control windmill movements, adjusting alignment and operation to maintain a preferred state across multiple windmills.\\nDependencies include DFHack and proper setup of active windmills. The command accepts options for quiet mode, randomizing movement, and timing-only adjustments.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/sync-windmills.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsync-windmills [<options>]\n```\n\n----------------------------------------\n\nTITLE: Enabling the Modstate Monitor Tool in DFHack\nDESCRIPTION: Command used to enable the modstate-monitor tool that will display changes in key modifier states (Ctrl, Alt, and Shift). When activated, the tool will show these state changes in real-time.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/devel/modstate-monitor.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenable devel/modstate-monitor\n```\n\n----------------------------------------\n\nTITLE: DFHack Command Examples\nDESCRIPTION: Example commands referenced in the changelog, including enable/disable commands and argument formats.\nSOURCE: https://github.com/dfhack/scripts/blob/master/changelog.txt#2025-04-21_snippet_2\n\nLANGUAGE: dfhack\nCODE:\n```\nenable autolabor\n```\n\nLANGUAGE: dfhack\nCODE:\n```\ndrain-aquifer --top 2\n```\n\nLANGUAGE: dfhack\nCODE:\n```\nautofish --raw\n```\n\n----------------------------------------\n\nTITLE: Using the watch-minecarts command in DFHack\nDESCRIPTION: Command syntax for starting and stopping the minecart monitoring tool. When started, the script will log minecart coordinates and speeds to the console until explicitly stopped.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/devel/watch-minecarts.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ndevel/watch-minecarts start|stop\n```\n\n----------------------------------------\n\nTITLE: Quiet Registration and Loading of Color Schemes in Lua\nDESCRIPTION: These commands demonstrate how to quietly register a color scheme directory and load the default scheme. They are suitable for use in initialization scripts.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/color-schemes.rst#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\ncolor-schemes -q register colorschemes\ncolor-schemes default load\n```\n\n----------------------------------------\n\nTITLE: Querying Available Emotions in Lua\nDESCRIPTION: Lua command to list all available emotion types that can be used with the add-thought script.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/add-thought.rst#2025-04-21_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\n:lua @df.emotion_type\n```\n\n----------------------------------------\n\nTITLE: Markdown Export Examples\nDESCRIPTION: Examples showing the default usage and using the overwrite option with a custom filename.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/markdown.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmarkdown\nmarkdown -o descriptions\n```\n\n----------------------------------------\n\nTITLE: Using the fixnaked Command in DFHack\nDESCRIPTION: The command to execute the fixnaked script in DFHack. When run, it scans all units for unhappy thoughts caused by lack of clothing and removes those thoughts to reduce stress levels.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/fixnaked.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nfixnaked\n```\n\n----------------------------------------\n\nTITLE: Z-Level Restricted Burial Command\nDESCRIPTION: Creates tomb zones only for coffins on the current z-level.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/burial.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nburial -z\n```\n\n----------------------------------------\n\nTITLE: Using the migrants-now DFHack command in Dwarf Fortress\nDESCRIPTION: Command syntax for triggering an immediate migrant wave in Dwarf Fortress. The command requires no arguments and works only after at least one natural migrant wave has already occurred.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/migrants-now.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmigrants-now\n```\n\n----------------------------------------\n\nTITLE: Using the Tree Information Tool in DFHack\nDESCRIPTION: Command syntax for running the tree-info debugging tool, which displays trunk/branch/twig/blocked flags and directional information for the tree at the cursor position.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/devel/tree-info.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndevel/tree-info\n```\n\n----------------------------------------\n\nTITLE: Listing All Race Populations\nDESCRIPTION: This command lists total race populations in the region, including those not known to your civilization, with optional pattern filtering.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/region-pops.rst#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n``region-pops list-all [<pattern>]``\n```\n\n----------------------------------------\n\nTITLE: Quiet Mode Option for Windmill Synchronization\nDESCRIPTION: This snippet details the usage of the quiet mode option, which suppresses non-error console output when executing windmill synchronization commands. It is useful for users who prefer a clean output in the console.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/sync-windmills.rst#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n``-q``, ``--quiet``\n```\n\n----------------------------------------\n\nTITLE: Linux/MacOS Autoload Command\nDESCRIPTION: Command for starting Dwarf Fortress with automatic save loading on Linux or MacOS systems.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/load-save.rst#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./dfhack +load-save region1\n```\n\n----------------------------------------\n\nTITLE: Running a Simple Inline Lua Script with Anonymous-Script in DFHack\nDESCRIPTION: Demonstrates how to use the anonymous-script utility to execute a simple Lua print statement with arguments. The example shows passing a Lua script as the first argument, followed by additional arguments that can be accessed within the script.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/modtools/anonymous-script.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nanonymous-script \"print(args[1])\" arg1 arg2\n# prints \"arg1\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up Custom Keybindings for Markdown Export\nDESCRIPTION: Example showing how to create a custom keybinding in DFHack to quickly export descriptions to a specific file without typing the full command.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/markdown.rst#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkeybinding add Ctrl-Shift-S@dwarfmode/ViewSheets/UNIT|dwarfmode/ViewSheets/ITEM \"markdown descriptions\"\n```\n\n----------------------------------------\n\nTITLE: Using on-new-fortress Command Syntax\nDESCRIPTION: Demonstrates the basic syntax for using the on-new-fortress command. You specify one or more commands separated by semicolons, and they will only execute on the first tick of a new fortress.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/on-new-fortress.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\non-new-fortress <command>[; <command> ...]\n```\n\n----------------------------------------\n\nTITLE: Add-recipe Command Examples\nDESCRIPTION: Examples of how to use the add-recipe command, including adding native recipes, all available recipes, or a single specific recipe.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/add-recipe.rst#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nadd-recipe native\nadd-recipe all\nadd-recipe single SHOES:ITEM_SHOES_BOOTS\n```\n\n----------------------------------------\n\nTITLE: Running DFHack ID Validation\nDESCRIPTION: Command to execute the ID validation script which checks the integrity of game entity references in other vectors.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/devel/check-other-ids.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ndevel/check-other-ids\n```\n\n----------------------------------------\n\nTITLE: Adding Extra Skill Points to a Dwarf in Dwarf Fortress Embark\nDESCRIPTION: This example demonstrates how to give an extra 10 skill points to the selected dwarf after using all initial points. It allows for further skill customization during embark.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/embark-skills.rst#2025-04-21_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nembark-skills points 10\n```\n\n----------------------------------------\n\nTITLE: Using Lua Value Inspection Shortcuts in DFHack\nDESCRIPTION: Examples of using shortcut characters in the interactive Lua interpreter for inspecting game values. These shortcuts provide convenient ways to print variables and data structures with different levels of detail.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/lua.rst#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n:lua !df.global.window_z\n:lua !unit.id\n:lua ~item.flags\n:lua @df.profession\n```\n\n----------------------------------------\n\nTITLE: Executing DFHack Screen Inspector\nDESCRIPTION: Command to launch the screen inspection tool that displays tile information for the area under the mouse cursor. The tool allows viewing both UI grid tiles and map tiles.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/devel/inspect-screen.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndevel/inspect-screen\n```\n\n----------------------------------------\n\nTITLE: Executing DFHack Mass Remove Script\nDESCRIPTION: Command to launch the mass remove interface tool from DFHack.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/gui/mass-remove.rst#2025-04-21_snippet_0\n\nLANGUAGE: reST\nCODE:\n```\ngui/mass-remove\n```\n\n----------------------------------------\n\nTITLE: Using the kill-hf Script in DFHack\nDESCRIPTION: Command syntax for the kill-hf script which allows killing historical figures or terminating pregnancies. The script requires a historical figure ID and supports optional flags for pregnancy termination and dry-run mode.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/devel/kill-hf.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndevel/kill-hf [-p|--pregnancy] [-n|--dry-run] <histfig_id>\n```\n\n----------------------------------------\n\nTITLE: Removing Superspeed by Unit ID - DFHack Tool\nDESCRIPTION: This command removes superspeed from a creature identified by its specific unit ID, allowing precise control over speed effects.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/superdwarf.rst#2025-04-21_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\n\"\"\"superdwarf del <ID>\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Usage Commands for fix/protect-nicks DFHack Script\nDESCRIPTION: Commands for enabling, disabling, or immediately running the fix/protect-nicks script. Enable to save nicknames daily, disable to stop the checks, or run 'now' to immediately save all nicknames.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/fix/protect-nicks.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nenable fix/protect-nicks\n    Enable daily saving of the nicknames.\n\ndisable fix/protect-nicks\n    Disable the daily check.\n\nfix/protect-nicks now\n    Immediately save the nicknames.\n```\n\n----------------------------------------\n\nTITLE: Usage Example for DFHack Raw Object Injection\nDESCRIPTION: Example command format for injecting raw objects into Dwarf Fortress. Shows the basic command structure with object type and token parameters.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/devel/inject-raws.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ndevel/inject-raws reaction|<building type>|<item type> TOKEN [TOKEN ...]\n```\n\n----------------------------------------\n\nTITLE: Using export-map command syntax in DFHack\nDESCRIPTION: Shows the basic syntax for using the export-map command in DFHack. The command can be used without parameters to export all data, or with include/exclude options to control what data is exported.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/devel/export-map.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ndevel/export-map\ndevel/export-map (include|exclude) <options>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage Command for gui/pathable Tool\nDESCRIPTION: The command to activate the gui/pathable tool in DFHack. This simple command launches the pathable visualization tool without any parameters.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/gui/pathable.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ngui/pathable\n```\n\n----------------------------------------\n\nTITLE: Running DFHack Pop Screen Script in Dwarf Fortress\nDESCRIPTION: This command executes the pop-screen script from the devel folder in DFHack. It forcibly closes the current screen, bypassing the screen's input handling. This is equivalent to pressing Esc but useful when normal input handling is broken or not implemented.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/devel/pop-screen.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndevel/pop-screen\n```\n\n----------------------------------------\n\nTITLE: Basic Bodyswap Command Usage in DFHack Console\nDESCRIPTION: Basic command syntax for the bodyswap script, used to take control of the currently selected unit in adventure mode.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/bodyswap.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nbodyswap\n```\n\n----------------------------------------\n\nTITLE: DFHack Release Notes\nDESCRIPTION: Comprehensive changelog documenting fixes, improvements, new features and removed scripts across multiple DFHack versions. Includes detailed bullet points organized by category.\nSOURCE: https://github.com/dfhack/scripts/blob/master/changelog.txt#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## Fixes\n- `assign-profile`: fix handling of ``unit`` option for setting target unit id\n- `gui/gm-unit`: correctly display skill levels above Legendary+5\n[...additional changelog content...]\n```\n\n----------------------------------------\n\nTITLE: Memory Range Query Using Lua Pattern\nDESCRIPTION: Example command showing how to list memory ranges using Lua pattern matching to find all ranges with non-empty filenames.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/devel/lsmem.rst#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndevel/lsmem .+\n```\n\n----------------------------------------\n\nTITLE: Using the petitions command in DFHack\nDESCRIPTION: Command syntax for invoking the petitions script in DFHack. This command displays a list of all guild hall and temple agreements in the fortress, both pending and fulfilled.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/gui/petitions.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngui/petitions\n```\n\n----------------------------------------\n\nTITLE: Executing Firestarter Command in DFHack\nDESCRIPTION: Simple command to activate the firestarter functionality in DFHack. When executed, it allows setting fire to the currently selected item, map tile, or unit inventory.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/firestarter.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nfirestarter\n```\n\n----------------------------------------\n\nTITLE: Querying Available Thoughts in Lua\nDESCRIPTION: Lua command to list all available thought types that can be used with the add-thought script.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/add-thought.rst#2025-04-21_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\n:lua @df.unit_thought_type\n```\n\n----------------------------------------\n\nTITLE: Using the Nuke-Items DFHack Script\nDESCRIPTION: Command syntax for executing the nuke-items script in DFHack. When run, this command will delete all items that aren't being used by units, buildings, or jobs in the game. This is specifically intended for debugging performance issues.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/devel/nuke-items.rst#2025-04-21_snippet_0\n\nLANGUAGE: dfhack\nCODE:\n```\ndevel/nuke-items\n```\n\n----------------------------------------\n\nTITLE: Using dump-offsets Script in DFHack\nDESCRIPTION: This code snippet demonstrates the usage of the dump-offsets script in DFHack. It allows dumping either all global addresses or specific global variables' addresses.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/devel/dump-offsets.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndevel/dump-offsets all|<global var>\n```\n\n----------------------------------------\n\nTITLE: Binary Patch Command Usage\nDESCRIPTION: Shows the command syntax for the binpatch script. Allows checking, applying, or removing named binary patches through the command line interface.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/binpatch.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nbinpatch check|apply|remove <patchname>\n```\n\n----------------------------------------\n\nTITLE: Using the forum-dwarves DFHack Script\nDESCRIPTION: A simple command to run the forum-dwarves script in Dwarf Fortress. When executed, it captures the current text screen and appends a BBcode-formatted version to the forumdwarves.txt file.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/forum-dwarves.rst#2025-04-21_snippet_0\n\nLANGUAGE: dfhack\nCODE:\n```\nforum-dwarves\n```\n\n----------------------------------------\n\nTITLE: Usage of Tidlers Tool - DFHack - Lua\nDESCRIPTION: This snippet provides the usage instructions for the tidlers tool, which is designed to alter where the idlers count is shown in the user interface. Users can execute the command directly in the terminal to activate the functionality.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/tidlers.rst#2025-04-21_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\ntidlers\n```\n\n----------------------------------------\n\nTITLE: Listing Memory Ranges Command Usage\nDESCRIPTION: Base command syntax for the lsmem script showing how to query memory ranges using either addresses or name patterns.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/devel/lsmem.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndevel/lsmem [<address> ...] [<name|pattern> ...]\n```\n\n----------------------------------------\n\nTITLE: Running Basic Advtools Command\nDESCRIPTION: Basic command to invoke the advtools party management functionality.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/advtools.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nadvtools party\n```\n\n----------------------------------------\n\nTITLE: Citizens-Only Burial Command\nDESCRIPTION: Creates tomb zones that only allow automatic burial of citizens.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/burial.rst#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nburial -c\n```\n\n----------------------------------------\n\nTITLE: Setting Up Automatic Nickname Assignment for New Migrants\nDESCRIPTION: Command to automatically run the autonick script every 3 months, which ensures new migrants get nicknames without manual intervention.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/autonick.rst#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nrepeat -name autonick -time 3 -timeUnits months -command [ autonick all ]\n```\n\n----------------------------------------\n\nTITLE: Setting up syndrome triggers by syndrome class in DFHack\nDESCRIPTION: This command registers a trigger for any syndrome with the specified SYN_CLASS. When a unit acquires a syndrome of this class, the specified command will be executed.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/modtools/syndrome-trigger.rst#2025-04-21_snippet_2\n\nLANGUAGE: dfhack\nCODE:\n```\nmodtools/syndrome-trigger --synclass <class> --command [ <command> ]\n```\n\n----------------------------------------\n\nTITLE: Switching to Arena Mode in DFHack using Ruby\nDESCRIPTION: Command to change the game mode to arena mode, which allows spawning creatures. This is the first step in the process.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/devel/spawn-unit-helper.rst#2025-04-21_snippet_0\n\nLANGUAGE: rb\nCODE:\n```\ndf.gametype = :DWARF_ARENA\n```\n\n----------------------------------------\n\nTITLE: Using print-args in DFHack\nDESCRIPTION: Example command syntax for using the print-args debugging utility. The command takes any number of optional arguments which will be printed line by line.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/devel/print-args.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndevel/print-args [<args>]\n```\n\n----------------------------------------\n\nTITLE: Using Cannibalism Script in DFHack\nDESCRIPTION: Command to execute the cannibalism script which removes sapient flags from items. Must be run from either an adventurer's inventory screen or an item's detail screen to modify the selected items.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/cannibalism.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncannibalism\n```\n\n----------------------------------------\n\nTITLE: Using the Launch Command in DFHack\nDESCRIPTION: Simple command for executing the launch action in Dwarf Fortress. After attacking an enemy, this command grabs them and performs a flying suplex to the cursor position.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/launch.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nlaunch\n```\n\n----------------------------------------\n\nTITLE: Running the Fix Corrupt Jobs Script in DFHack\nDESCRIPTION: Command to manually execute the corrupt jobs fix script in DFHack. This script removes jobs with an id of -1 from units to prevent crashes, though it's designed to run automatically on fort load.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/fix/corrupt-jobs.rst#2025-04-21_snippet_0\n\nLANGUAGE: plain\nCODE:\n```\nfix/corrupt-jobs\n```\n\n----------------------------------------\n\nTITLE: Using print-args2 Script in DFHack\nDESCRIPTION: This code snippet demonstrates the usage of the print-args2 script in DFHack. It accepts any number of arguments and will print each one on a separate line, enclosed in quotes.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/devel/print-args2.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndevel/print-args2 [<args>]\n```\n\n----------------------------------------\n\nTITLE: Running the Hello World DFHack Script\nDESCRIPTION: Command syntax for executing the hello-world example script in DFHack. This command should be entered in the DFHack console to run the script.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/devel/hello-world.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndevel/hello-world\n```\n\n----------------------------------------\n\nTITLE: Executing DFHack Script for Scanning Item Lists\nDESCRIPTION: This command runs the DFHack script to scan and display the item lists that contain the currently selected item in the Dwarf Fortress UI. It outputs the indices in world.item.other[] where the item appears.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/devel/scanitemother.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndevel/scanitemother\n```\n\n----------------------------------------\n\nTITLE: Script Path Reference\nDESCRIPTION: Reference to DFHack script paths and specific changes using backticks for highlighting script names and paths\nSOURCE: https://github.com/dfhack/scripts/blob/master/changelog.txt#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n`devel/lsmem`\n`gui/gm-editor`\n`quickfort`\n`gui/quickfort`\n`suspendmanager`\n`caravan`\n`gui/design`\n`gui/liquids`\n```\n\n----------------------------------------\n\nTITLE: Using syndrome-trigger to clear triggers in DFHack\nDESCRIPTION: This command clears any previously registered syndrome triggers from the system.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/modtools/syndrome-trigger.rst#2025-04-21_snippet_0\n\nLANGUAGE: dfhack\nCODE:\n```\nmodtools/syndrome-trigger --clear\n```\n\n----------------------------------------\n\nTITLE: Displaying Historical Event by ID in DFHack\nDESCRIPTION: This command displays the historical event with the specified ID. It requires the '--id' flag followed by the event ID.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/devel/print-event.rst#2025-04-21_snippet_1\n\nLANGUAGE: dfhack\nCODE:\n```\ndevel/print-event --id <id>\n```\n\n----------------------------------------\n\nTITLE: Enabling Click Monitor Tool in DFHack\nDESCRIPTION: Command to enable the click-monitor tool which tracks mouse clicks and displays their grid coordinates in the console. This is useful for developers working on DFHack plugins or scripts.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/devel/click-monitor.rst#2025-04-21_snippet_0\n\nLANGUAGE: dfhack\nCODE:\n```\nenable devel/click-monitor\n```\n\n----------------------------------------\n\nTITLE: Displaying Historical Event by Index in DFHack\nDESCRIPTION: This command displays the historical event at the specified index. It requires the '--index' flag followed by a numeric value representing the event index.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/devel/print-event.rst#2025-04-21_snippet_0\n\nLANGUAGE: dfhack\nCODE:\n```\ndevel/print-event --index <num>\n```\n\n----------------------------------------\n\nTITLE: Using Gaydar Basic Command\nDESCRIPTION: Basic command syntax for the gaydar script showing how to target units and apply filters.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/gaydar.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ngaydar [<target>] [<filter>]\n```\n\n----------------------------------------\n\nTITLE: Using test-perlin Script from Command Line\nDESCRIPTION: Command-line usage pattern for the perlin noise image generation script. It accepts a filename with .pgm extension, density parameter, expression, and optional scaling parameters for controlling the noise.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/devel/test-perlin.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndevel/test-perlin <fname.pgm> <density> <expr> [-xy <xyscale>] [-z <zscale>]\n```\n\n----------------------------------------\n\nTITLE: Growing Specific Crop Types in DFHack\nDESCRIPTION: Demonstrates how to use growcrops to grow a specific type of seed by providing a crop name or substring. This will instantly mature all planted seeds of the specified type.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/growcrops.rst#2025-04-21_snippet_1\n\nLANGUAGE: plain\nCODE:\n```\ngrowcrops <crop name>\n```\n\n----------------------------------------\n\nTITLE: Reverting to Fortress Mode in DFHack using Ruby\nDESCRIPTION: Command to change the game mode back to the previous fortress mode after spawning creatures in arena mode.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/devel/spawn-unit-helper.rst#2025-04-21_snippet_1\n\nLANGUAGE: rb\nCODE:\n```\ndf.gametype = #{df.gametype.inspect}\n```\n\n----------------------------------------\n\nTITLE: Using hide-tutorials Script Commands in Dwarf Fortress\nDESCRIPTION: Commands to enable the hide-tutorials script, run it directly, or reset tutorial settings. The tool can be used to hide various tutorial popups that appear in new forts and adventures.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/hide-tutorials.rst#2025-04-21_snippet_0\n\nLANGUAGE: plain\nCODE:\n```\nenable hide-tutorials\nhide-tutorials\nhide-tutorials reset\n```\n\n----------------------------------------\n\nTITLE: Using the clear-script-env DFHack Tool\nDESCRIPTION: Shows the usage syntax for the clear-script-env tool. It accepts one or more script names as arguments.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/devel/clear-script-env.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndevel/clear-script-env <script name> [<script name> ...]\n```\n\n----------------------------------------\n\nTITLE: Running the DFHack Release Readiness Check Script\nDESCRIPTION: Command to execute the check-release script which verifies that release flags are properly set as part of the DFHack release process.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/devel/check-release.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ndevel/check-release\n```\n\n----------------------------------------\n\nTITLE: DFHack Changelog Section Template\nDESCRIPTION: Template structure for documenting new versions in the changelog, organizing changes into categories of New Tools, Features, Fixes, Improvements, and Removed items.\nSOURCE: https://github.com/dfhack/scripts/blob/master/changelog.txt#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## New Tools\n\n## New Features\n\n## Fixes\n\n## Misc Improvements\n\n## Removed\n```\n\n----------------------------------------\n\nTITLE: Using DFHack Tool to Resurrect Adventurer\nDESCRIPTION: This snippet provides the command for utilizing the DFHack tool 'resurrect-adv' to revive a deceased player character immediately after death. It highlights the limitations of the tool, specifically that it only works on the current player and must be executed promptly post-mortem.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/resurrect-adv.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nresurrect-adv\n```\n\n----------------------------------------\n\nTITLE: Using the hotkey-notes Command in DFHack\nDESCRIPTION: Simple usage example for the hotkey-notes command in DFHack. When executed, this command lists all map location hotkeys set by the user, showing their key binding (e.g. F1), name, and jump position.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/hotkey-notes.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nhotkey-notes\n```\n\n----------------------------------------\n\nTITLE: Example Command for Randomizing Windmills\nDESCRIPTION: This example shows how to randomize the movement of all active windmills. It alters the polarity and timer values for greater variation in windmill operation, useful for players wanting a less uniform approach.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/sync-windmills.rst#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n``sync-windmills -r``\n```\n\n----------------------------------------\n\nTITLE: Using the Save Version Tool in DFHack\nDESCRIPTION: Command to run the save-version tool through DFHack. This command displays information about which Dwarf Fortress versions have handled the current save file, including the original version and most recent version.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/devel/save-version.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndevel/save-version\n```\n\n----------------------------------------\n\nTITLE: Conditional Installation of DFHack Test Scripts in CMake\nDESCRIPTION: This CMake snippet conditionally installs test scripts if BUILD_TESTS is enabled. It copies the contents of the 'test' directory to a specific location in the DFHack data destination.\nSOURCE: https://github.com/dfhack/scripts/blob/master/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(BUILD_TESTS)\n    install(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/test/\n            DESTINATION ${DFHACK_DATA_DESTINATION}/scripts/test/scripts\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Spawning Flow Command Syntax in DFHack\nDESCRIPTION: Command syntax for spawning flows with required parameters for material type, flow type, and location coordinates. Optional parameter for flow size defaults to 100.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/modtools/spawn-flow.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nmodtools/spawn-flow --material <TOKEN> --flowType <type> --location [ <x> <y> <z> ] [--flowSize <size>]\n```\n\n----------------------------------------\n\nTITLE: Running Pre-release Warning Script in DFHack\nDESCRIPTION: Command syntax for executing the pre-release warning script. Can be run with an optional 'force' parameter to override the 'do not show again' setting.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/gui/prerelease-warning.rst#2025-04-21_snippet_0\n\nLANGUAGE: dfhack\nCODE:\n```\ngui/prerelease-warning [force]\n```\n\n----------------------------------------\n\nTITLE: Running the Quantum Stockpile Tool in DFHack\nDESCRIPTION: The basic command to launch the interactive quantum stockpile creation tool. When executed, it opens a GUI that walks you through the process of setting up quantum stockpiles.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/gui/quantum.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ngui/quantum\n```\n\n----------------------------------------\n\nTITLE: Converting Spawned Creatures to Livestock in DFHack using Ruby\nDESCRIPTION: Command to change a selected creature's civilization ID to match the player's, effectively converting it to fortress livestock.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/devel/spawn-unit-helper.rst#2025-04-21_snippet_2\n\nLANGUAGE: rb\nCODE:\n```\ndf.unit_find.civ_id = df.ui.civ_id\n```\n\n----------------------------------------\n\nTITLE: Disabling Season Palette Feature\nDESCRIPTION: Command to deactivate the seasonal color palette switching and revert to the default system color palette. This stops any automatic palette changes during gameplay.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/season-palette.rst#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndisable season-palette\n```\n\n----------------------------------------\n\nTITLE: Running DFHack Light Development Script\nDESCRIPTION: Command syntax for running the experimental lighting engine script. The optional 'static' parameter prevents automatic recalculation of lighting during gameplay.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/devel/light.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndevel/light [static]\n```\n\n----------------------------------------\n\nTITLE: Querying Syndromes for Thoughts\nDESCRIPTION: Command to list all available syndromes in the current world that can be used as thoughts.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/add-thought.rst#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndevel/query --table df.global.world.raws.syndromes.all --search syn_name --maxdepth 1\n```\n\n----------------------------------------\n\nTITLE: Resetting once-per-save Command History in DFHack\nDESCRIPTION: Command to reset the once-per-save tracking system, making it forget which commands have been run before in the current savegame.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/once-per-save.rst#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nonce-per-save --reset\n```\n\n----------------------------------------\n\nTITLE: Listing Available Creatures\nDESCRIPTION: Command to display all available animal IDs on the current map that can be used with the catsplosion script.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/catsplosion.rst#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ncatsplosion list\n```\n\n----------------------------------------\n\nTITLE: Manually Enabling the Agitation-Rebalance Script\nDESCRIPTION: Command to manually enable the agitation-rebalance script. This isn't needed if using the GUI control panel to manage the script.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/agitation-rebalance.rst#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nenable agitation-rebalance\n```\n\n----------------------------------------\n\nTITLE: Basic Cat Pregnancy Example\nDESCRIPTION: Basic command example that makes all adult female cats pregnant.\nSOURCE: https://github.com/dfhack/scripts/blob/master/docs/catsplosion.rst#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\ncatsplosion\n```\n\n----------------------------------------\n\nTITLE: Script Configuration Commands\nDESCRIPTION: Commands and hotkey references used in script configurations\nSOURCE: https://github.com/dfhack/scripts/blob/master/changelog.txt#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n``c``\n``Alt-c``\n``autoMilkCreature``\n``trader``\n``armok``\n```"
  }
]