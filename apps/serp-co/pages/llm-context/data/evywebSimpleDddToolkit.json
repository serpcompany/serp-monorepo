[
  {
    "owner": "evyweb",
    "repo": "simple-ddd-toolkit",
    "content": "TITLE: Handling Commands and Dispatching Events in TypeScript\nDESCRIPTION: This snippet shows how to handle commands and dispatch domain events within a command handler. It demonstrates injecting an event bus into the command handler and dispatching events after saving changes to the aggregate.  `dispatchEvents` is used to send the events to the appropriate handlers.\nSOURCE: https://github.com/evyweb/simple-ddd-toolkit/blob/master/README.md#_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CommandHandler, EventBus, Command, DomainEvent } from \"@evyweb/simple-ddd-toolkit\";\n\nexport class AddProductToOrderCommandHandler extends CommandHandler<\n  AddProductToOrderCommand,\n  void\n> {\n  constructor(\n    private readonly orderRepository: OrderRepository,\n    private readonly eventBus: EventBus\n  ) {\n    super();\n  }\n\n  async handle(command: AddProductToOrderCommand): Promise<void> {\n    const order = await this.orderRepository.getById(command.orderId);\n    order.addItem(command.productId, command.quantity);\n\n    order.addEvent(\n      new ProductAddedToOrderEvent(order.id(), command.productId, command.quantity)\n    );\n\n    this.orderRepository.save(order);\n    this.eventBus.dispatchEvents(order.getEvents());\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Entity Creation with Result Pattern in TypeScript\nDESCRIPTION: This example demonstrates combining the entity factory function with the Result pattern to handle validation errors.  It defines a custom `InvalidUserNameError` and uses the `Result` class to return either a valid `User` or an error if validation fails.  The `create` method returns `Result<User, InvalidUserNameError>`.\nSOURCE: https://github.com/evyweb/simple-ddd-toolkit/blob/master/README.md#_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Result, DomainError } from \"@evyweb/simple-ddd-toolkit\";\nimport { UUID } from \"@evyweb/simple-ddd-toolkit\";\n\ninterface UserData {\n  id: UUID;\n  name: string;\n}\n\nclass InvalidUserNameError extends DomainError {\n  constructor() {\n    super(\"Username cannot contain special characters.\");\n  }\n}\n\nexport class User extends Entity<UserData> {\n  static create(userData: UserData): Result<User, InvalidUserNameError> {\n    if (User.isInvalidUserName(userData.name)) {\n      return Result.fail(new InvalidUserNameError());\n    }\n\n    return Result.ok(new User(userData));\n  }\n\n  private static isInvalidUserName(name: string): boolean {\n    return /[^a-zA-Z0-9]/.test(name);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Entity with simple-ddd-toolkit in TypeScript\nDESCRIPTION: This snippet demonstrates how to create an entity by extending the `Entity` class from the `@evyweb/simple-ddd-toolkit` package. It includes defining an interface for the entity's data and a static factory method for creating instances. It uses `UUID` as a Value Object.\nSOURCE: https://github.com/evyweb/simple-ddd-toolkit/blob/master/README.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity } from \"@evyweb/simple-ddd-toolkit\";\nimport { UUID } from \"@evyweb/simple-ddd-toolkit\";\n\ninterface UserData {\n  id: UUID;\n  name: string;\n}\n\nexport class User extends Entity<UserData> {\n  static create(userData: UserData): User {\n    // Validation rules here\n    return new User(userData);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Command Handler in Typescript\nDESCRIPTION: This code snippet shows how to create a command handler by extending the `CommandHandler` class from the `@evyweb/simple-ddd-toolkit` package.  The `__TAG` property is defined to uniquely identify the handler, and it should follow the naming convention `{CommandName}Handler`. The `handle` method contains the logic to process the command. Requires `@evyweb/simple-ddd-toolkit` dependency.\nSOURCE: https://github.com/evyweb/simple-ddd-toolkit/blob/master/README.md#_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CommandHandler } from \"@evyweb/simple-ddd-toolkit\";\n\nexport class CreateCharacterCommandHandler extends CommandHandler<\n  CreateCharacterCommand,\n  void\n> {\n  public readonly __TAG = \"CreateCharacterCommandHandler\";\n\n  async handle(command: CreateCharacterCommand): Promise<void> {\n    // Process the command here\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing an Aggregate with simple-ddd-toolkit in TypeScript\nDESCRIPTION: This snippet demonstrates how to create an aggregate by extending the `Aggregate` class from the `@evyweb/simple-ddd-toolkit` package. It defines the aggregate's data structure and includes a method to add items, enforcing a business rule (maximum 10 items).\nSOURCE: https://github.com/evyweb/simple-ddd-toolkit/blob/master/README.md#_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Aggregate, UUID } from \"@evyweb/simple-ddd-toolkit\";\n\ninterface OrderItem {\n    productId: string;\n    quantity: number;\n}\n\ninterface OrderData {\n  id: UUID;\n  items: OrderItem[];\n  date: Date;\n}\n\nexport class Order extends Aggregate<OrderData> {\n  static create(orderData: OrderData): Order {\n    // Validation rules here\n    return new Order(orderData);\n  }\n\n  addItem(productId: string, quantity: number): void {\n    if (this.get(\"items\").length >= 10) {\n      throw new Error(\"An order cannot contain more than 10 items.\");\n    }\n    const item = {productId, quantity};\n    this.get(\"items\").push(item);\n  }\n}\n\nconst order = await orderRepository.getById(\"order-id\");\norder.addItem(\"product1\", 2);\norderRepository.save(order);\n```\n\n----------------------------------------\n\nTITLE: Creating a Domain Event in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a domain event by extending the `DomainEvent` class.  It defines the event's properties (orderId, productId, quantity) and includes a constructor to initialize the event with relevant data. The event includes an eventId, tag, and metadata.\nSOURCE: https://github.com/evyweb/simple-ddd-toolkit/blob/master/README.md#_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DomainEvent } from \"@evyweb/simple-ddd-toolkit\";\nimport { v4 as uuidv4 } from 'uuid';\n\nexport class ProductAddedToOrderEvent extends DomainEvent {\n  public readonly __TAG = \"ProductAddedToOrderEvent\";\n\n  constructor(\n    public readonly orderId: string,\n    public readonly productId: string,\n    public readonly quantity: number\n  ) {\n    super({\n      eventId: uuidv4(),\n      metadata: {\n        orderId,\n        productId,\n        quantity: quantity.toString()\n      }\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Command Handler in Typescript\nDESCRIPTION: This code snippet illustrates how to register a command handler with a command bus using the `register` method.  It creates a new `Bus` instance and then registers a factory function that returns a new `CreateCharacterCommandHandler` instance.  The `__TAG` property of the command is used as the key for registration. Requires `@evyweb/simple-ddd-toolkit` dependency.\nSOURCE: https://github.com/evyweb/simple-ddd-toolkit/blob/master/README.md#_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Bus, Command } from \"@evyweb/simple-ddd-toolkit\";\n\nconst commandBus = new Bus<Command>();\ncommandBus.register(() => new CreateCharacterCommandHandler());\n```\n\n----------------------------------------\n\nTITLE: Creating Event Handler (TypeScript)\nDESCRIPTION: Implements an event handler that processes a 'ConversationCreatedEvent'. The handler implements the `IEventHandler` interface, extracts data from the event, and executes a command using the command bus.\nSOURCE: https://github.com/evyweb/simple-ddd-toolkit/blob/master/README.md#_snippet_50\n\nLANGUAGE: typescript\nCODE:\n```\nimport { IEventHandler, DomainEvent, Command, Bus } from \"@evyweb/simple-ddd-toolkit\";\n\nexport class CreateDefaultPostEventHandler implements IEventHandler<ConversationCreatedEvent> {\n  public readonly __TAG = \"CreateDefaultPostEventHandler\";\n\n  constructor(private readonly commandBus: Bus<Command>) {}\n\n  async handle(event: ConversationCreatedEvent): Promise<void> {\n    const { conversationId, characterId, postId, userId, participantsIds } = event.metadata;\n    const command = new CreateDefaultPostCommand(\n      conversationId,\n      userId,\n      characterId,\n      postId,\n      participantsIds\n    );\n    await this.commandBus.execute(command);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Result Pattern Usage in TypeScript\nDESCRIPTION: Shows how to use the Result pattern to represent success or failure of an operation. It demonstrates creating both successful and failed results, and checking the result status using `isOk` and `isFail` methods.\nSOURCE: https://github.com/evyweb/simple-ddd-toolkit/blob/master/README.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Result } from \"@evyweb/simple-ddd-toolkit\";\n\nconst successResult = Result.ok(\"Operation successful\");\nconst errorResult = Result.fail(new Error(\"Operation failed\"));\n```\n\nLANGUAGE: typescript\nCODE:\n```\nif (currentResult.isOk()) {\n  console.log(currentResult.getValue());\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nif (currentResult.isFail()) {\n  console.log(currentResult.getError());\n}\n```\n\n----------------------------------------\n\nTITLE: Emitting Domain Events from an Aggregate in TypeScript\nDESCRIPTION: This snippet demonstrates how to emit domain events from an aggregate by adding the event to the aggregate's event queue using `addEvent`. The event is then dispatched using an event bus. `getEvents()` retrieves the events from the queue.\nSOURCE: https://github.com/evyweb/simple-ddd-toolkit/blob/master/README.md#_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nconst order = await orderRepository.getById(\"order-id\");\norder.addItem(\"product1\", 2);\n\norder.addEvent(new ProductAddedToOrderEvent(order.id(), \"product1\", 2));\n\norderRepository.save(order);\n\neventBus.dispatchEvents(order.getEvents());\n```\n\n----------------------------------------\n\nTITLE: Registering Middleware with IoC in Typescript\nDESCRIPTION: This snippet shows how to register middleware with the command bus or query bus using an IoC container (like InversifyJS or the simple-ddd-toolkit's built-in container). It assumes the `container` and `DI.CommandLoggerMiddleware` and/or `DI.QueryLoggerMiddleware` are defined. This method allows for dependency injection into the middleware.\nSOURCE: https://github.com/evyweb/simple-ddd-toolkit/blob/master/README.md#_snippet_46\n\nLANGUAGE: typescript\nCODE:\n```\ncommandBus.use(container.get(DI.CommandLoggerMiddleware));\nqueryBus.use(container.get(DI.QueryLoggerMiddleware));\n```\n\n----------------------------------------\n\nTITLE: Registering Event Handlers with IoC Container (TypeScript)\nDESCRIPTION: Registers an event handler with the EventBus, resolving the handler instance from an IoC container. This approach allows for dependency injection and better manageability of event handlers.\nSOURCE: https://github.com/evyweb/simple-ddd-toolkit/blob/master/README.md#_snippet_48\n\nLANGUAGE: typescript\nCODE:\n```\neventBus.on(\n  \"ConversationCreatedEvent\",\n  () => container.get(DI.CreateDefaultPostEventHandler)\n);\n```\n\n----------------------------------------\n\nTITLE: Registering Command Handler with IoC in Typescript\nDESCRIPTION: This snippet shows how to register a command handler with the command bus using an IoC container (like InversifyJS or the simple-ddd-toolkit's built-in container). It assumes the `container` and `DI.CreateCharacterCommandHandler` are defined. This method allows for dependency injection into the command handler.\nSOURCE: https://github.com/evyweb/simple-ddd-toolkit/blob/master/README.md#_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\ncommandBus.register(() => container.get(DI.CreateCharacterCommandHandler));\n```\n\n----------------------------------------\n\nTITLE: Registering Query Handler with IoC in Typescript\nDESCRIPTION: This snippet shows how to register a query handler with the query bus using an IoC container (like InversifyJS or the simple-ddd-toolkit's built-in container). It assumes the `container` and `DI.LoadCharacterCreationDialogQueryHandler` are defined. This method allows for dependency injection into the query handler.\nSOURCE: https://github.com/evyweb/simple-ddd-toolkit/blob/master/README.md#_snippet_42\n\nLANGUAGE: typescript\nCODE:\n```\nqueryBus.register(() => container.get(DI.LoadCharacterCreationDialogQueryHandler));\n```\n\n----------------------------------------\n\nTITLE: Using Static Factory Method for Entity Creation\nDESCRIPTION: This snippet shows how to use a static factory method (`User.create`) to create an instance of the `User` entity. This ensures that the entity is created with valid data and allows for validation logic within the factory method.\nSOURCE: https://github.com/evyweb/simple-ddd-toolkit/blob/master/README.md#_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = User.create({ id: UUID.create(), name: \"John Doe\" });\n```\n\n----------------------------------------\n\nTITLE: Creating a Query Handler in Typescript\nDESCRIPTION: This code snippet demonstrates how to create a query handler by extending the `QueryHandler` class from the `@evyweb/simple-ddd-toolkit` package.  The `__TAG` property is defined to uniquely identify the handler, and it should follow the naming convention `{QueryName}Handler`. The `handle` method contains the logic to process the query and return the response (ViewModel). Requires `@evyweb/simple-ddd-toolkit` dependency.\nSOURCE: https://github.com/evyweb/simple-ddd-toolkit/blob/master/README.md#_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QueryHandler, IResponse } from \"@evyweb/simple-ddd-toolkit\";\n\nexport class LoadCharacterCreationDialogQueryHandler extends QueryHandler<\n  LoadCharacterCreationDialogQuery,\n  LoadCharacterCreationDialogResponse\n> {\n  public readonly __TAG = \"LoadCharacterCreationDialogQueryHandler\";\n\n  async handle(\n    _query: LoadCharacterCreationDialogQuery\n  ): Promise<LoadCharacterCreationDialogResponse> {\n    // Data can be fetched from a database, an API, or any other source\n    return {\n      title: \"Add a new character\",\n      subTitle: \"Fill out the form to create a new character.\",\n      form: {\n        avatar: {\n          label: \"Avatar\",\n          required: false,\n          value: \"/images/avatars/default.png\",\n        },\n        name: {\n          label: \"Name *\",\n          placeholder: \"Character name\",\n          required: true,\n          value: \"\",\n        },\n        submit: {\n          label: \"Validate\",\n        },\n        cancel: {\n          label: \"Cancel\",\n        },\n      },\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Dispatching a Command in Typescript\nDESCRIPTION: This snippet demonstrates how to dispatch a command using the `execute` method of a command bus. It creates a new instance of the `CreateCharacterCommand` and then passes it to the `execute` method of the `commandBus`.  Requires a pre-existing `commandBus` instance and the `CreateCharacterCommand` class. The `name` variable should be defined.\nSOURCE: https://github.com/evyweb/simple-ddd-toolkit/blob/master/README.md#_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\nconst command = new CreateCharacterCommand(name);\nawait commandBus.execute(command);\n```\n\n----------------------------------------\n\nTITLE: Value Object Implementation (Factory Method)\nDESCRIPTION: Implements a Color value object with a static factory method 'create' to validate input RGB values before creating the instance. Includes validation logic to ensure RGB values are within the valid range.\nSOURCE: https://github.com/evyweb/simple-ddd-toolkit/blob/master/README.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ValueObject } from \"@evyweb/simple-ddd-toolkit\";\n\ninterface RGBColor {\n  red: number;\n  green: number;\n  blue: number;\n}\n\nexport class Color extends ValueObject<RGBColor> {\n  static create({ red, green, blue }: RGBColor): Color {\n    // Validate the red, green, and blue values here\n    Color.validateRGBColorFormat(red);\n    Color.validateRGBColorFormat(green);\n    Color.validateRGBColorFormat(blue);\n\n    return new Color({ red, green, blue });\n  }\n\n  private static validateRGBColorFormat(value: number): void {\n    if (value < 0 || value > 255) {\n      throw new Error(\"RGB color value must be between 0 and 255.\");\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Middleware in Typescript\nDESCRIPTION: This code shows how to register middleware with the command bus or query bus using the `use` method. Middleware is executed in the order it is registered.  Requires a pre-existing `commandBus` and/or `queryBus` instance, and instances of the middleware classes.\nSOURCE: https://github.com/evyweb/simple-ddd-toolkit/blob/master/README.md#_snippet_45\n\nLANGUAGE: typescript\nCODE:\n```\ncommandBus.use(new CommandLoggerMiddleware(logger, \"CommandLoggerMiddleware\"));\nqueryBus.use(new QueryLoggerMiddleware(logger, \"QueryLoggerMiddleware\"));\n```\n\n----------------------------------------\n\nTITLE: Dispatching Events (TypeScript)\nDESCRIPTION: Shows how to dispatch events using `dispatch` (synchronous) and `dispatchAsync` (asynchronous) methods of the event bus. `dispatch` waits for event processing to complete, while `dispatchAsync` dispatches the event without blocking the current thread.\nSOURCE: https://github.com/evyweb/simple-ddd-toolkit/blob/master/README.md#_snippet_51\n\nLANGUAGE: typescript\nCODE:\n```\nconst event = new ProductAddedToOrderEvent(order.id(), \"product1\", 2);\n\n// Use dispatch if you want to wait for the event to be processed before continuing (also present on aggregates)\nawait eventBus.dispatch(event);\n\n// if you want to dispatch events without blocking the user, prefer dispatchAsync (also present on aggregates)\n// Don't use: \"eventBus.dispatch(event);\" without await\n\n// Use:\neventBus.dispatchAsync(event);\n```\n\n----------------------------------------\n\nTITLE: Registering Event Handlers with Typed Event Names (TypeScript)\nDESCRIPTION: Demonstrates how to define event types in a single file and use them to register event handlers. This approach helps to avoid typos and group related event types by domain.\nSOURCE: https://github.com/evyweb/simple-ddd-toolkit/blob/master/README.md#_snippet_49\n\nLANGUAGE: typescript\nCODE:\n```\nexport const EventTypes = {\n  ConversationCreatedEvent: \"ConversationCreatedEvent\",\n  PostCreatedEvent: \"PostCreatedEvent\",\n  // ...\n};\n\neventBus.on(\n  EventTypes.ConversationCreatedEvent,\n  () => new CreateDefaultPostEventHandler()\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Query Middleware in Typescript\nDESCRIPTION: This code demonstrates how to create a query middleware by implementing the `Middleware<Query>` interface from the `@evyweb/simple-ddd-toolkit` package.  The middleware logs query data before passing it to the next middleware or the query handler. Requires `@evyweb/simple-ddd-toolkit` dependency and a logger instance.\nSOURCE: https://github.com/evyweb/simple-ddd-toolkit/blob/master/README.md#_snippet_44\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Middleware, Query } from \"@evyweb/simple-ddd-toolkit\";\nimport { Logger } from \"@evyweb/simple-ddd-toolkit\";\n\nexport class QueryLoggerMiddleware implements Middleware<Query> {\n  constructor(\n    private readonly logger: Logger,\n    private readonly middlewareId: string\n  ) {}\n\n  execute<T>(query: Query, next: (query: Query) => Promise<T>): Promise<T> {\n    const date = new Date().toISOString();\n    this.logger.log(\n      `[${date}][${this.middlewareId}][${query.__TAG}] - ${JSON.stringify(\n        query\n      )}`\n    );\n    return next(query);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Query Response Interface in Typescript\nDESCRIPTION: This code defines the interface for the response returned by the query handler.  It includes properties for title, subtitle, and a form, which is defined by the `CharacterCreationFormViewModel` interface. Requires `@evyweb/simple-ddd-toolkit` dependency for the `IResponse` interface.\nSOURCE: https://github.com/evyweb/simple-ddd-toolkit/blob/master/README.md#_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\ninterface CharacterCreationFormViewModel {\n  avatar: {\n    label: string;\n    required: boolean;\n    value: string;\n  };\n  name: {\n    label: string;\n    placeholder: string;\n    required: boolean;\n    value: string;\n  };\n  submit: {\n    label: string;\n  };\n  cancel: {\n    label: string;\n  };\n}\n\nexport interface LoadCharacterCreationDialogResponse extends IResponse {\n  title: string;\n  subTitle: string;\n  form: CharacterCreationFormViewModel;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Technical Error in TypeScript\nDESCRIPTION: Shows how to create a custom technical error by extending the `TechnicalError` class. It includes defining a custom error class with a specific tag and constructor.\nSOURCE: https://github.com/evyweb/simple-ddd-toolkit/blob/master/README.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TechnicalError } from \"@evyweb/simple-ddd-toolkit\";\n\nexport class AnyTechnicalError extends TechnicalError {\n  public readonly __TAG = \"AnyTechnicalError\";\n\n  constructor() {\n    super(\"Any technical related error message\"); // Can be also a translation key\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Command in Typescript\nDESCRIPTION: This code snippet demonstrates how to create a command by extending the `Command` class from the `@evyweb/simple-ddd-toolkit` package.  The `__TAG` property is defined to uniquely identify the command. A constructor initializes the command's properties.  Requires `@evyweb/simple-ddd-toolkit` dependency.\nSOURCE: https://github.com/evyweb/simple-ddd-toolkit/blob/master/README.md#_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Command } from \"@evyweb/simple-ddd-toolkit\";\n\nexport class CreateCharacterCommand extends Command {\n  public readonly __TAG = \"CreateCharacterCommand\";\n  public readonly name: string;\n\n  constructor(name: string) {\n    super();\n    this.name = name;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Entity to Plain Object with toObject() in TypeScript\nDESCRIPTION: This snippet demonstrates how to convert an entity to a plain JavaScript object using the `toObject` method.  This is useful for serialization or data transfer.\nSOURCE: https://github.com/evyweb/simple-ddd-toolkit/blob/master/README.md#_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = User.create({ id: UUID.create(), name: \"John Doe\" });\n\nuser.toObject(); // { id: '...', name: 'John Doe' }\n```\n\n----------------------------------------\n\nTITLE: Dispatching a Query in Typescript\nDESCRIPTION: This snippet demonstrates how to dispatch a query using the `execute` method of a query bus. It creates a new instance of the `LoadCharacterCreationDialogQuery` and then passes it to the `execute` method of the `queryBus`.  Requires a pre-existing `queryBus` instance and the `LoadCharacterCreationDialogQuery` class.\nSOURCE: https://github.com/evyweb/simple-ddd-toolkit/blob/master/README.md#_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\nconst query = new LoadCharacterCreationDialogQuery();\nconst response = await queryBus.execute(query);\n```\n\n----------------------------------------\n\nTITLE: Value Object Full Implementation\nDESCRIPTION: Provides the complete implementation of the Color value object, including factory methods for creating colors from RGB and HEX values, along with input validation for both formats.\nSOURCE: https://github.com/evyweb/simple-ddd-toolkit/blob/master/README.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ValueObject } from \"@evyweb/simple-ddd-toolkit\";\n\ninterface RGBColor {\n  red: number;\n  green: number;\n  blue: number;\n}\n\nexport class Color extends ValueObject<RGBColor> {\n  static fromRGB({ red, green, blue }: RGBColor): Color {\n    Color.validateRGBColorFormat(red);\n    Color.validateRGBColorFormat(green);\n    Color.validateRGBColorFormat(blue);\n\n    return new Color({ red, green, blue });\n  }\n\n  static fromHEX(hexValue: string): Color {\n    Color.validateHexColorFormat(hexValue);\n\n    return Color.fromRGB({\n      red: parseInt(hexValue.substring(1, 3), 16),\n      green: parseInt(hexValue.substring(3, 5), 16),\n      blue: parseInt(hexValue.substring(5, 7), 16),\n    });\n  }\n\n  private static validateRGBColorFormat(value: number): void {\n    if (value < 0 || value > 255) {\n      throw new Error(\"RGB color value must be between 0 and 255.\");\n    }\n  }\n\n  private static validateHexColorFormat(hex: string) {\n    if (!/^#[0-9A-F]{6}$/i.test(hex)) {\n      throw new Error(\"Invalid HEX color format.\");\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Value Object Comparison (Equals Method)\nDESCRIPTION: Demonstrates using the 'equals' method provided by the ValueObject class to compare two Color objects based on their properties.  This verifies that objects with the same RGB values are considered equal.\nSOURCE: https://github.com/evyweb/simple-ddd-toolkit/blob/master/README.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst color1 = Color.fromRGB({ red: 255, green: 0, blue: 0 });\nconst color2 = Color.fromHEX(\"#FF0000\");\n\nconsole.log(color1.equals(color2)); // true\n```\n\n----------------------------------------\n\nTITLE: Updating Value Object in TypeScript\nDESCRIPTION: Demonstrates how to update a value object by creating a new instance with the desired changes, as value objects are immutable. It shows the `removeRed` method that creates a new Color object with an updated red value.\nSOURCE: https://github.com/evyweb/simple-ddd-toolkit/blob/master/README.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst color = Color.fromRGB({ red: 255, green: 255, blue: 255 });\nconst newColor = color.removeRed();\n\nclass Color extends ValueObject<RGBColor> {\n  // ...\n  removeRed(): Color {\n    return Color.fromRGB({\n      red: 0,\n      green: this.get(\"green\"),\n      blue: this.get(\"blue\"),\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Command Middleware in Typescript\nDESCRIPTION: This code demonstrates how to create a command middleware by implementing the `Middleware<Command>` interface from the `@evyweb/simple-ddd-toolkit` package.  The middleware logs command data before passing it to the next middleware or the command handler. Requires `@evyweb/simple-ddd-toolkit` dependency and a logger instance.\nSOURCE: https://github.com/evyweb/simple-ddd-toolkit/blob/master/README.md#_snippet_43\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Middleware, Command } from \"@evyweb/simple-ddd-toolkit\";\nimport { Logger } from \"@evyweb/simple-ddd-toolkit\";\n\nexport class CommandLoggerMiddleware implements Middleware<Command> {\n  constructor(\n    private readonly logger: Logger,\n    private readonly middlewareId: string\n  ) {}\n\n  async execute<T>(command: Command, next: (command: Command) => Promise<T>): Promise<T> {\n    const date = new Date().toISOString();\n    this.logger.log(\n      `[${date}][${this.middlewareId}][${command.__TAG}] - ${JSON.stringify(\n        command\n      )}`\n    );\n    return next(command);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Entity Properties with set() method in TypeScript\nDESCRIPTION: This snippet shows how to update the properties of an entity using the `set` method. Entities are mutable, allowing direct modification of their properties.\nSOURCE: https://github.com/evyweb/simple-ddd-toolkit/blob/master/README.md#_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = User.create({ id: UUID.create(), name: \"John Doe\" });\n\nuser.set(\"name\", \"Jane Doe\");\n```\n\n----------------------------------------\n\nTITLE: Value Object Creation (Factory Usage)\nDESCRIPTION: Demonstrates creating a Color value object instance using the static factory method 'create'. This ensures that validation logic is executed before creating the object.\nSOURCE: https://github.com/evyweb/simple-ddd-toolkit/blob/master/README.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst color = Color.create({ red: 255, green: 0, blue: 0 });\n```\n\n----------------------------------------\n\nTITLE: Comparing Entity Identities in TypeScript\nDESCRIPTION: This example illustrates how entity comparison is based on identity (ID) rather than attributes. Two entities with the same ID are considered equal, even if their other properties differ. The `equals()` method is used for this comparison.\nSOURCE: https://github.com/evyweb/simple-ddd-toolkit/blob/master/README.md#_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nconst userId = UUID.create();\nconst user1 = User.create({ id: userId, name: \"John Doe\" });\nconst user2 = User.create({ id: userId, name: \"Jane Doe\" });\n\nconsole.log(user1.equals(user2)); // true\n```\n\n----------------------------------------\n\nTITLE: Getting Entity Properties with get() method in TypeScript\nDESCRIPTION: This snippet illustrates how to retrieve properties of an entity using the `get` method.  It shows how to access both primitive properties (e.g., `name`) and Value Object properties (e.g., `id`).\nSOURCE: https://github.com/evyweb/simple-ddd-toolkit/blob/master/README.md#_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = User.create({ id: UUID.create(), name: \"John Doe\" });\n\nuser.get(\"id\"); // UUID\nuser.get(\"name\"); // 'John Doe'\n```\n\n----------------------------------------\n\nTITLE: Accessing UUID Value Object's Value with id() shortcut\nDESCRIPTION: This snippet demonstrates a shortcut method, `id()`, to directly access the value of the `id` property (assuming it's a `UUID`) of an entity. This avoids the need to chain `get` calls.\nSOURCE: https://github.com/evyweb/simple-ddd-toolkit/blob/master/README.md#_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nconst userId = user.id(); // Similar to user.get('id').get('value')\n```\n\n----------------------------------------\n\nTITLE: Creating a Domain Error in TypeScript\nDESCRIPTION: Illustrates how to create a custom domain error by extending the `DomainError` class from the simple-ddd-toolkit.  It shows how to define a custom error class with a specific tag and message.\nSOURCE: https://github.com/evyweb/simple-ddd-toolkit/blob/master/README.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DomainError } from \"@evyweb/simple-ddd-toolkit\";\n\nexport class AnyDomainError extends DomainError {\n  public readonly __TAG = \"AnyDomainError\";\n\n  constructor() {\n    super(\"Any domain related error message\"); // Can be also a translation key\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Combining Factory Methods with Result Pattern in TypeScript\nDESCRIPTION: Demonstrates how to combine value object factory methods with the Result pattern for validation. It showcases the `fromRGB` factory method returning a `Result` that can either contain a `Color` object or an `InvalidRGBColorError` object.\nSOURCE: https://github.com/evyweb/simple-ddd-toolkit/blob/master/README.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\ninterface RGBColor {\n  red: number;\n  green: number;\n  blue: number;\n}\n\nclass InvalidRGBColorError extends Error {\n  constructor() {\n    super(\"Invalid RGB color format.\");\n  }\n}\n\nexport class Color extends ValueObject<RGBColor> {\n  static fromRGB(rgbColor: RGBColor): Result<Color, InvalidRGBColorError> {\n    if (Color.isInvalidRGBColor(rgbColor)) {\n      return Result.fail(new InvalidRGBColorError());\n    }\n\n    return Result.ok(new Color(rgbColor));\n  }\n\n  private static isInvalidRGBColor(rgbColor: RGBColor): boolean {\n      return rgbColor.red < 0 || rgbColor.red > 255 ||\n             rgbColor.green < 0 || rgbColor.green > 255 ||\n             rgbColor.blue < 0 || rgbColor.blue > 255;\n  }\n}\n\nconst colorCreation = Color.fromRGB({ red: 255, green: 255, blue: 255 });\nif (colorCreation.isOk()) {\n  // Do something with the color\n  console.log(colorCreation.getValue())\n} else {\n  // Handle the error\n  console.error(colorCreation.getError())\n}\n```\n\n----------------------------------------\n\nTITLE: Value Object Property Access\nDESCRIPTION: Demonstrates accessing the properties of a Color value object using the 'get' method provided by the ValueObject class.  Shows how to retrieve individual RGB values.\nSOURCE: https://github.com/evyweb/simple-ddd-toolkit/blob/master/README.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst color = Color.fromRGB({ red: 255, green: 255, blue: 255 });\n\ncolor.get(\"red\"); // 255\ncolor.get(\"green\"); // 255\ncolor.get(\"blue\"); // 255\n```\n\n----------------------------------------\n\nTITLE: Accessing UUID Value Object's Value\nDESCRIPTION: This example shows how to access the raw value of a `UUID` Value Object, which is a property of an Entity, using the `.get('value')` method.\nSOURCE: https://github.com/evyweb/simple-ddd-toolkit/blob/master/README.md#_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nconst userId = user.get(\"id\").get(\"value\");\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Error in TypeScript\nDESCRIPTION: Illustrates creating a custom error by extending the `CustomError` class. It involves defining the `__TAG` property and overriding the `isDomainError` and `isTechnicalError` methods.\nSOURCE: https://github.com/evyweb/simple-ddd-toolkit/blob/master/README.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomError } from \"@evyweb/simple-ddd-toolkit\";\n\nexport class AnyCustomError extends CustomError {\n  public readonly __TAG = \"AnyCustomError\";\n\n  constructor() {\n    super(\"Any custom error message\"); // Can be also a translation key\n  }\n\n  isDomainError(): boolean {\n    return false;\n  }\n\n  isTechnicalError(): boolean {\n    return true;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Preventing Direct Instantiation of Entity\nDESCRIPTION: This example illustrates preventing direct instantiation of the `User` entity class using the `new` keyword due to the protected constructor of the `Entity` base class. It highlights the need to use the static factory method `create`.\nSOURCE: https://github.com/evyweb/simple-ddd-toolkit/blob/master/README.md#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = new User({ id: UUID.create(), name: \"John Doe\" }); // Error\n```\n\n----------------------------------------\n\nTITLE: Registering a Query Handler in Typescript\nDESCRIPTION: This code snippet illustrates how to register a query handler with a query bus using the `register` method.  It creates a new `Bus` instance and then registers a factory function that returns a new `LoadCharacterCreationDialogQueryHandler` instance.  The `__TAG` property of the query is used as the key for registration. Requires `@evyweb/simple-ddd-toolkit` dependency.\nSOURCE: https://github.com/evyweb/simple-ddd-toolkit/blob/master/README.md#_snippet_41\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Bus, Query } from \"@evyweb/simple-ddd-toolkit\";\n\nconst queryBus = new Bus<Query>();\nqueryBus.register(() => new LoadCharacterCreationDialogQueryHandler());\n```\n\n----------------------------------------\n\nTITLE: Creating a Value Object Instance using Constructor in TypeScript\nDESCRIPTION: Example of how to create a new Color object directly using the constructor, demonstrating the syntax. It highlights that while possible, using static factory methods is preferred.\nSOURCE: https://github.com/evyweb/simple-ddd-toolkit/blob/master/README.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst color = new Color({ red: 255, green: 0, blue: 0 });\n```\n\n----------------------------------------\n\nTITLE: Creating a Query in Typescript\nDESCRIPTION: This snippet shows how to create a query by extending the `Query` class provided by the `@evyweb/simple-ddd-toolkit` package. The `__TAG` property is defined to uniquely identify the query. Requires `@evyweb/simple-ddd-toolkit` dependency.\nSOURCE: https://github.com/evyweb/simple-ddd-toolkit/blob/master/README.md#_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Query } from \"@evyweb/simple-ddd-toolkit\";\n\nexport class LoadCharacterCreationDialogQuery extends Query {\n    public readonly __TAG = \"LoadCharacterCreationDialogQuery\";\n}\n```\n\n----------------------------------------\n\nTITLE: Value Object Implementation (Initial)\nDESCRIPTION: Defines a Color value object extending the ValueObject class from the simple-ddd-toolkit.  This snippet shows the basic structure but lacks validation.\nSOURCE: https://github.com/evyweb/simple-ddd-toolkit/blob/master/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ValueObject } from \"@evyweb/simple-ddd-toolkit\";\n\nexport class Color extends ValueObject<{ red: number; green: number; blue: number }> {}\n```\n\n----------------------------------------\n\nTITLE: Value Object Implementation (Interface)\nDESCRIPTION: Defines a Color value object using an interface to define the RGB color properties.  The value object extends the ValueObject class from the simple-ddd-toolkit.\nSOURCE: https://github.com/evyweb/simple-ddd-toolkit/blob/master/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface RGBColor {\n  red: number;\n  green: number;\n  blue: number;\n}\n\nexport class Color extends ValueObject<RGBColor> {}\n```\n\n----------------------------------------\n\nTITLE: Value Object Constructor in TypeScript\nDESCRIPTION: Illustrates the use of a constructor for creating value objects, but recommends using static factory methods instead for validation purposes. Shows how a constructor can be defined and used to create a Color object.\nSOURCE: https://github.com/evyweb/simple-ddd-toolkit/blob/master/README.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nexport class Color extends ValueObject<RGBColor> {\n  constructor({ red, green, blue }: RGBColor) {\n    // Validate the red, green, and blue values here\n    super({ red, green, blue });\n  }\n\n  // Other methods\n}\n```\n\n----------------------------------------\n\nTITLE: Value Object Instance Creation (Error)\nDESCRIPTION: Demonstrates that you cannot directly create an instance of the Color class because the constructor is protected. This highlights the need for a factory method.\nSOURCE: https://github.com/evyweb/simple-ddd-toolkit/blob/master/README.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst color = new Color({ red: 255, green: 0, blue: 0 }); // Error\n```\n\n----------------------------------------\n\nTITLE: Using isDomainError and isTechnicalError in TypeScript\nDESCRIPTION: Demonstrates how to use the `isDomainError` and `isTechnicalError` methods to check the type of an error object. It shows an example of using these methods to handle domain and technical errors differently.\nSOURCE: https://github.com/evyweb/simple-ddd-toolkit/blob/master/README.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nconst error = new AnyDomainError();\n\nif (error.isDomainError()) {\n  // Handle domain error\n} else if (error.isTechnicalError()) {\n  // Handle technical error\n}\n```\n\n----------------------------------------\n\nTITLE: Install Simple DDD Toolkit\nDESCRIPTION: Installs the @evyweb/simple-ddd-toolkit package using npm. This command adds the toolkit as a dependency to your project.\nSOURCE: https://github.com/evyweb/simple-ddd-toolkit/blob/master/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @evyweb/simple-ddd-toolkit\n```\n\n----------------------------------------\n\nTITLE: Registering Event Handlers with EventBus (TypeScript)\nDESCRIPTION: Registers an event handler with the EventBus to handle the 'ConversationCreatedEvent'. This example shows how to create a new instance of the handler when the event occurs.\nSOURCE: https://github.com/evyweb/simple-ddd-toolkit/blob/master/README.md#_snippet_47\n\nLANGUAGE: typescript\nCODE:\n```\nimport { EventBus } from \"@evyweb/simple-ddd-toolkit\";\n\nconst eventBus = new EventBus();\neventBus.on(\"ConversationCreatedEvent\", () => new CreateDefaultPostEventHandler());\n```"
  }
]