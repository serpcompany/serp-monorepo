[
  {
    "owner": "oslo-project",
    "repo": "binary",
    "content": "TITLE: Converting between Binary and Integer Values with BigEndian and LittleEndian in TypeScript\nDESCRIPTION: Demonstrates how to use the @oslojs/binary package to convert Uint8Array data to and from integer values. The example shows both big-endian and little-endian operations, supporting uint8, uint16, uint32, and uint64 conversions.\nSOURCE: https://github.com/oslo-project/binary/blob/main/docs/pages/examples/integers.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BigEndian, LittleEndian } from \"@oslojs/binary\";\n\nconst toUint32: number = BigEndian.uint32(new Uint8Array([1, 2, 3, 4]));\nconst toUint64: bigint = LittleEndian.uint64(new Uint8Array([1, 2, 3, 4, 5, 6, 7, 8]));\n\nconst fromUint32 = new Uint8Array(4);\nconst fromUint64 = new Uint8Array(8);\nLittleEndian.putUint32(fromUint32, 135155375, 0);\nBigEndian.putUint64(fromUint64, 281478725684090n, 0);\n```\n\n----------------------------------------\n\nTITLE: Defining ByteOrder Interface in TypeScript\nDESCRIPTION: Interface definition for ByteOrder which provides methods for reading and writing unsigned integers of various bit lengths to and from Uint8Array buffers. The interface includes methods for handling 8, 16, 32, and 64-bit unsigned integers with appropriate type checking.\nSOURCE: https://github.com/oslo-project/binary/blob/main/docs/pages/reference/main/ByteOrder.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ByteOrder {\n\tuint8(data: Uint8Array, offset: number): number;\n\tuint16(data: Uint8Array, offset: number): number;\n\tuint32(data: Uint8Array, offset: number): number;\n\tuint64(data: Uint8Array, offset: number): bigint;\n\tputUint8(target: Uint8Array, value: number, offset: number): void;\n\tputUint16(target: Uint8Array, value: number, offset: number): void;\n\tputUint32(target: Uint8Array, value: number, offset: number): void;\n\tputUint64(target: Uint8Array, value: bigint, offset: number): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Byte Array to BigInt in TypeScript\nDESCRIPTION: Function definition for bigIntBytes that converts a Uint8Array to a bigint value, interpreting the bytes as a big-endian unsigned integer. It takes a single parameter 'bytes' which is the byte array to be converted.\nSOURCE: https://github.com/oslo-project/binary/blob/main/docs/pages/reference/main/bigIntFromBytes.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction bigIntBytes(bytes: Uint8Array): bigint;\n```\n\n----------------------------------------\n\nTITLE: Converting BigInt to Big-Endian Byte Array in TypeScript\nDESCRIPTION: A function that converts a BigInt value to its absolute representation as a big-endian byte array using Uint8Array. It takes a single parameter 'value' of type bigint and returns a Uint8Array containing the bytes.\nSOURCE: https://github.com/oslo-project/binary/blob/main/docs/pages/reference/main/bigIntBytes.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction bigIntBytes(value: bigint): Uint8Array;\n```\n\n----------------------------------------\n\nTITLE: Concatenating Uint8Arrays in TypeScript\nDESCRIPTION: Function signature for concatenating two Uint8Array parameters into a single Uint8Array result. Takes two byte arrays as input and returns their concatenated form.\nSOURCE: https://github.com/oslo-project/binary/blob/main/docs/pages/reference/main/concatenateBytes.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction concatenateBytes(a: Uint8Array, b: Uint8Array): Uint8Array;\n```\n\n----------------------------------------\n\nTITLE: Using compareBytes() to Compare Uint8Arrays in TypeScript\nDESCRIPTION: Example showing how to import and use the compareBytes() function to check equality between two Uint8Array objects with identical values.\nSOURCE: https://github.com/oslo-project/binary/blob/main/docs/pages/reference/main/compareBytes.md#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { compareBytes } from \"oslo/binary\";\n\nconst a = new Uint8Array([0, 1, 2]);\nconst b = new Uint8Array([0, 1, 2]);\nconst equal = compareBytes(a, b);\n```\n\n----------------------------------------\n\nTITLE: Defining DynamicBuffer.write() Method in TypeScript\nDESCRIPTION: Method definition for writing bytes to a DynamicBuffer. Takes a Uint8Array parameter and appends its contents to the end of the current buffer.\nSOURCE: https://github.com/oslo-project/binary/blob/main/docs/pages/reference/main/DynamicBuffer/write.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction write(bytes: Uint8Array): void;\n```\n\n----------------------------------------\n\nTITLE: Defining DynamicBuffer.bytes() Method in TypeScript\nDESCRIPTION: This code snippet defines the bytes() method for the DynamicBuffer class. The method returns a Uint8Array, which is a copy of the current value stored in the buffer.\nSOURCE: https://github.com/oslo-project/binary/blob/main/docs/pages/reference/main/DynamicBuffer/bytes.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction bytes(): Uint8Array;\n```\n\n----------------------------------------\n\nTITLE: DynamicBuffer Constructor Definition\nDESCRIPTION: Defines the constructor for the DynamicBuffer class which initializes a buffer with a specified initial capacity.\nSOURCE: https://github.com/oslo-project/binary/blob/main/docs/pages/reference/main/DynamicBuffer/index.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction constructor(capacity: number): this;\n```\n\n----------------------------------------\n\nTITLE: Adding a Byte to DynamicBuffer in TypeScript\nDESCRIPTION: Method definition for writeByte() which appends a single byte to the end of a DynamicBuffer. It takes a number parameter representing the byte value to add.\nSOURCE: https://github.com/oslo-project/binary/blob/main/docs/pages/reference/main/DynamicBuffer/writeByte.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction writeByte(byte: number): void;\n```\n\n----------------------------------------\n\nTITLE: DynamicBuffer Properties Interface\nDESCRIPTION: Defines the properties interface for DynamicBuffer with capacity and length properties. Capacity represents the total allocated space, while length represents the current used space.\nSOURCE: https://github.com/oslo-project/binary/blob/main/docs/pages/reference/main/DynamicBuffer/index.md#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Properties {\n\tcapacity: number;\n\tlength: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Buffer Read Operation in TypeScript\nDESCRIPTION: Method signature for copying buffer contents into a target Uint8Array. Takes a Uint8Array parameter named 'target' and returns void. Throws an error if the target array doesn't have enough space to hold the buffer contents.\nSOURCE: https://github.com/oslo-project/binary/blob/main/docs/pages/reference/main/DynamicBuffer/readInto.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction readInto(target: Uint8Array): void;\n```\n\n----------------------------------------\n\nTITLE: Defining compareBytes() Function in TypeScript for Uint8Array Comparison\nDESCRIPTION: Function signature for compareBytes() which takes two Uint8Array parameters and returns a boolean indicating if they match exactly. This comparison is not constant time.\nSOURCE: https://github.com/oslo-project/binary/blob/main/docs/pages/reference/main/compareBytes.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction compareBytes(a: Uint8Array, b: Uint8Array): boolean;\n```\n\n----------------------------------------\n\nTITLE: Defining the DynamicBuffer.clear() Method in TypeScript\nDESCRIPTION: Function signature for the clear() method that resets a DynamicBuffer instance to an empty array. This method takes no parameters and returns void.\nSOURCE: https://github.com/oslo-project/binary/blob/main/docs/pages/reference/main/DynamicBuffer/clear.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction clear(): void;\n```\n\n----------------------------------------\n\nTITLE: Implementing 64-bit Left Rotation in TypeScript\nDESCRIPTION: Function definition for performing a 64-bit left rotation operation. Takes a bigint value x and rotates it left by n bits. Returns the rotated value as a number.\nSOURCE: https://github.com/oslo-project/binary/blob/main/docs/pages/reference/main/rotl64.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction rotl64(x: bigint, n: number): number;\n```\n\n----------------------------------------\n\nTITLE: Implementing 64-bit Right Rotation in TypeScript\nDESCRIPTION: Function declaration for performing 64-bit bitwise rotation to the right. Takes a bigint parameter 'x' as the value to rotate and a number parameter 'n' specifying how many bits to rotate by. Returns the rotated value as a number.\nSOURCE: https://github.com/oslo-project/binary/blob/main/docs/pages/reference/main/rotr64.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction rotr64(x: bigint, n: number): number;\n```\n\n----------------------------------------\n\nTITLE: Defining 32-bit Left Rotation Function in TypeScript\nDESCRIPTION: TypeScript function definition for rotl32() which performs a 32-bit bitwise rotation on a number to the left by a specified number of bits. The function takes two parameters: x (the number to rotate) and n (the number of bits to rotate by).\nSOURCE: https://github.com/oslo-project/binary/blob/main/docs/pages/reference/main/rotl32.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction rotl32(x: number, n: number): number;\n```\n\n----------------------------------------\n\nTITLE: Defining 32-bit Right Rotation Function in TypeScript\nDESCRIPTION: Function declaration for performing 32-bit right bitwise rotation. Takes a number x and rotates it right by n bits.\nSOURCE: https://github.com/oslo-project/binary/blob/main/docs/pages/reference/main/rotr32.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction rotr32(x: number, n: number): number;\n```\n\n----------------------------------------\n\nTITLE: Installing @oslojs/binary via npm\nDESCRIPTION: Command to install the @oslojs/binary package using npm. This is the primary installation method for adding the library to your JavaScript project.\nSOURCE: https://github.com/oslo-project/binary/blob/main/docs/pages/index.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @oslojs/binary\n```\n\n----------------------------------------\n\nTITLE: Installing Oslo Binary Package via NPM\nDESCRIPTION: Command to install the @oslojs/binary package using npm package manager.\nSOURCE: https://github.com/oslo-project/binary/blob/main/README.md#2025-04-12_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i @oslojs/binary\n```"
  }
]