[
  {
    "owner": "dashbitco",
    "repo": "broadway",
    "content": "TITLE: Defining a Broadway Pipeline with RabbitMQ Producer - Elixir\nDESCRIPTION: Defines a Broadway pipeline module that consumes messages from RabbitMQ, configuring producer, processors, and batchers with customizable concurrency and batching parameters. Depends on Elixir, Broadway, and BroadwayRabbitMQ libraries. The `start_link/1` function initializes the pipeline; parameters such as queue name, prefetch_count, and batch_size affect throughput and processing. Output is a supervised pipeline that consumes and processes queue messages.\nSOURCE: https://github.com/dashbitco/broadway/blob/main/guides/examples/rabbitmq.md#_snippet_3\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule MyBroadway do\n  use Broadway\n\n  alias Broadway.Message\n\n  def start_link(_opts) do\n    Broadway.start_link(__MODULE__,\n      name: MyBroadway,\n      producer: [\n        module: {BroadwayRabbitMQ.Producer,\n          queue: \"my_queue\",\n          qos: [\n            prefetch_count: 50,\n          ]\n        },\n        concurrency: 1\n      ],\n      processors: [\n        default: [\n          concurrency: 50\n        ]\n      ],\n      batchers: [\n        default: [\n          batch_size: 10,\n          batch_timeout: 1500,\n          concurrency: 5\n        ]\n      ]\n    )\n  end\n\n  ...callbacks...\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Minimal Broadway Pipeline with SQS Producer in Elixir\nDESCRIPTION: This snippet demonstrates the definition of a basic Broadway pipeline module in Elixir, consuming messages from an Amazon SQS queue. The `start_link/1` function initializes the Broadway pipeline with `BroadwaySQS.Producer` configured using a given queue URL, and sets up default processors and batchers. The aliasing of `Broadway.Message` and placeholder callbacks are included, illustrating structure prior to adding custom message processing.\nSOURCE: https://github.com/dashbitco/broadway/blob/main/guides/examples/amazon-sqs.md#_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule MyBroadway do\n  use Broadway\n\n  alias Broadway.Message\n\n  def start_link(_opts) do\n    Broadway.start_link(__MODULE__,\n      name: __MODULE__,\n      producer: [\n        module: {BroadwaySQS.Producer,\n                 queue_url: \"https://us-east-2.queue.amazonaws.com/100000000001/my_queue\"}\n      ],\n      processors: [\n        default: []\n      ],\n      batchers: [\n        default: [\n          batch_size: 10,\n          batch_timeout: 2000\n        ]\n      ]\n    )\n  end\n\n  ...callbacks...\nend\n```\n\n----------------------------------------\n\nTITLE: Defining a Broadway Pipeline with SQS Producer - Elixir\nDESCRIPTION: This snippet defines a sample Broadway pipeline module that integrates with Amazon SQS using the broadway_sqs library. It sets up a producer for SQS, concurrent processors and batchers, and placeholder functions for message processing and batching. Dependencies include :broadway, :broadway_sqs, and appropriate AWS credentials. The module can be added to the supervision tree to process incoming SQS events, demonstrating parameterization such as queue URLs, concurrency, batch size, and batch timeout.\nSOURCE: https://github.com/dashbitco/broadway/blob/main/README.md#_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule MyBroadway do\n  use Broadway\n\n  alias Broadway.Message\n\n  def start_link(_opts) do\n    Broadway.start_link(__MODULE__,\n      name: __MODULE__,\n      producer: [\n        module: {BroadwaySQS.Producer, queue_url: \"https://us-east-2.queue.amazonaws.com/100000000001/my_queue\"}\n      ],\n      processors: [\n        default: [concurrency: 50]\n      ],\n      batchers: [\n        s3: [concurrency: 5, batch_size: 10, batch_timeout: 1000]\n      ]\n    )\n  end\n\n  def handle_message(_processor_name, message, _context) do\n    message\n    |> Message.update_data(&process_data/1)\n    |> Message.put_batcher(:s3)\n  end\n\n  def handle_batch(:s3, messages, _batch_info, _context) do\n    # Send batch of messages to S3\n  end\n\n  defp process_data(data) do\n    # Do some calculations, generate a JSON representation, process images.\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Minimal Broadway Pipeline Configuration in Elixir\nDESCRIPTION: Shows the basic structure of a Broadway module in Elixir, including the `use Broadway` directive and the `start_link/1` function. It configures the pipeline with a `BroadwayCloudPubSub.Producer` to consume from a specific Pub/Sub subscription, default processors, and default batchers.\nSOURCE: https://github.com/dashbitco/broadway/blob/main/guides/examples/google-cloud-pubsub.md#_snippet_11\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule MyBroadway do\n  use Broadway\n\n  alias Broadway.Message\n\n  def start_link(_opts) do\n    Broadway.start_link(__MODULE__,\n      name: __MODULE__,\n      producer: [\n        module:\n          {BroadwayCloudPubSub.Producer,\n           subscription: \"projects/test-pubsub/subscriptions/test-subscription\"}\n      ],\n      processors: [\n        default: []\n      ],\n      batchers: [\n        default: [\n          batch_size: 10,\n          batch_timeout: 2_000\n        ]\n      ]\n    )\n  end\n\n  ...callbacks...\nend\n```\n\n----------------------------------------\n\nTITLE: Defining the Broadway Kafka Pipeline Configuration (elixir)\nDESCRIPTION: This Elixir module sets up a Broadway pipeline for consuming messages from a Kafka topic 'test' using BroadwayKafka as the producer. The 'start_link/1' function initializes Broadway with producer, processor, and batcher stages, specifying host, group ID, topic, and concurrency settings. This configuration ensures parallel message processing while preserving Kafka partition ordering. Requires :broadway_kafka dependency and Kafka brokers accessible at localhost:9092.\nSOURCE: https://github.com/dashbitco/broadway/blob/main/guides/examples/apache-kafka.md#_snippet_3\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule MyBroadway do\n  use Broadway\n\n  alias Broadway.Message\n\n  def start_link(_opts) do\n    Broadway.start_link(__MODULE__,\n      name: __MODULE__,\n      producer: [\n        module:\n          {BroadwayKafka.Producer,\n           [\n             hosts: [localhost: 9092],\n             group_id: \"group_1\",\n             topics: [\"test\"]\n           ]},\n        concurrency: 1\n      ],\n      processors: [\n        default: [\n          concurrency: 10\n        ]\n      ],\n      batchers: [\n        default: [\n          batch_size: 100,\n          batch_timeout: 200,\n          concurrency: 10\n        ]\n      ]\n    )\n  end\n\n  ...callbacks...\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Broadway Message and Batch Callbacks - Elixir\nDESCRIPTION: Implements the required Broadway behaviour callbacks for processing messages and batches. The `handle_message/3` callback updates each message (e.g., parses numbers and multiplies by 2), while `handle_batch/4` aggregates and displays batch data. Requires prior Broadway setup. Input messages should be strings convertible to integers; results are updated message data and batch logs.\nSOURCE: https://github.com/dashbitco/broadway/blob/main/guides/examples/rabbitmq.md#_snippet_5\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule MyBroadway do\n  use Broadway\n\n  alias Broadway.Message\n\n  ...start_link...\n\n  @impl true\n  def handle_message(_, message, _) do\n    message\n    |> Message.update_data(fn data -> {data, String.to_integer(data) * 2} end)\n  end\n\n  @impl true\n  def handle_batch(_, messages, _, _) do\n    list = messages |> Enum.map(fn e -> e.data end)\n    IO.inspect(list, label: \"Got batch\")\n    messages\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Broadway Message Handling Callbacks in Elixir\nDESCRIPTION: Implements the `handle_message/3` and `handle_batch/4` callbacks for a Broadway pipeline. `handle_message` converts the incoming message data to uppercase, and `handle_batch` inspects the batch of processed messages before they are acknowledged back to Pub/Sub.\nSOURCE: https://github.com/dashbitco/broadway/blob/main/guides/examples/google-cloud-pubsub.md#_snippet_12\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule MyBroadway do\n  use Broadway\n\n  alias Broadway.Message\n\n  ...start_link...\n\n  def handle_message(_, %Message{data: data} = message, _) do\n    message\n    |> Message.update_data(fn data -> String.upcase(data) end)\n  end\n\n  def handle_batch(_, messages, _, _) do\n    list = messages |> Enum.map(fn e -> e.data end)\n    IO.inspect(list, label: \"Got batch of finished jobs from processors, sending ACKs to Pub/Sub as a batch.\")\n    messages\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Broadway Message and Batch Handlers (elixir)\nDESCRIPTION: This Elixir module implements the required Broadway callbacks to process incoming Kafka messages. 'handle_message/3' takes each incoming message (assumed to be a number as string), parses, doubles it, and stores as a tuple; 'handle_batch/4' receives a list of these messages, logs their data, and returns the unchanged batch. Depends on Broadway and BroadwayKafka. Input is messages from Kafka; outputs are processed messages displayed via IO.inspect.\nSOURCE: https://github.com/dashbitco/broadway/blob/main/guides/examples/apache-kafka.md#_snippet_4\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule MyBroadway do\n  use Broadway\n\n  alias Broadway.Message\n\n  ...start_link...\n\n  @impl true\n  def handle_message(_, message, _) do\n    message\n    |> Message.update_data(fn data -> {data, String.to_integer(data) * 2} end)\n  end\n\n  @impl true\n  def handle_batch(_, messages, _, _) do\n    list = messages |> Enum.map(fn e -> e.data end)\n    IO.inspect(list, label: \"Got batch\")\n    messages\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Broadway Callback Functions for Message Handling in Elixir Pipeline\nDESCRIPTION: This snippet provides concrete implementations of the `handle_message/3` and `handle_batch/4` callbacks required by the Broadway pipeline. Using pattern matching, each incoming message is updated by squaring its data value, and batches are inspected and acknowledged. IO output is used for visibility. Dependencies include `Broadway` and the `Broadway.Message` struct; the example assumes all message data are numbers.\nSOURCE: https://github.com/dashbitco/broadway/blob/main/guides/examples/amazon-sqs.md#_snippet_3\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule MyBroadway do\n  use Broadway\n\n  alias Broadway.Message\n\n  ...start_link...\n\n  @impl true\n  def handle_message(_, %Message{data: data} = message, _) do\n    message\n    |> Message.update_data(fn data -> data * data end)\n  end\n\n  @impl true\n  def handle_batch(_, messages, _, _) do\n    list = messages |> Enum.map(fn e -> e.data end)\n    IO.inspect(list, label: \"Got batch of finished jobs from processors, sending ACKs to SQS as a batch.\")\n    messages\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Integrating a GenStage Producer into Broadway with a Transformer in Elixir\nDESCRIPTION: Demonstrates how to consume events from a standard GenStage producer ('Counter') in a Broadway pipeline by using a transformer. Dependencies are ':broadway' and ':gen_stage'. The 'MyBroadway' module sets up Broadway with the necessary producer and transformer options, defines the required 'transform' callback to convert events to '%Broadway.Message{}' structs, and provides an 'ack' function for handling acknowledgements. The 'producer' option includes the transformer configuration, while processors and batchers setup concurrency for event handling.\nSOURCE: https://github.com/dashbitco/broadway/blob/main/guides/examples/custom-producers.md#_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule MyBroadway do\n  use Broadway\n\n  alias Broadway.Message\n\n  def start_link(_opts) do\n    Broadway.start_link(__MODULE__,\n      name: __MODULE__,\n      producer: [\n        module: {Counter, 1},\n        transformer: {__MODULE__, :transform, []}\n      ],\n      processors: [\n        default: [concurrency: 10]\n      ],\n      batchers: [\n        default: [concurrency: 2, batch_size: 5],\n      ]\n    )\n  end\n\n  ...callbacks...\n\n  def transform(event, _opts) do\n    %Message{\n      data: event,\n      acknowledger: {__MODULE__, :ack_id, :ack_data}\n    }\n  end\n\n  def ack(:ack_id, successful, failed) do\n    # Write ack code here\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Broadway Pipeline for Concurrency and Batching in Elixir\nDESCRIPTION: Defines a Broadway pipeline in Elixir with customized values for producer, processor, and batcher concurrency, as well as batching controls ('max_demand', 'batch_size'). The configuration is set within the 'start_link/1' function and demonstrates how to override defaults to match processing needs. Required dependencies include the 'broadway' library, and the module relies on being part of an OTP application. Key settings include 'concurrency' for parallel processes, 'max_demand' for processor prefetching, and batcher controls. Input is pipeline options in the supervisor spec; output is a running Broadway process.\nSOURCE: https://github.com/dashbitco/broadway/blob/main/guides/examples/google-cloud-pubsub.md#_snippet_17\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule MyBroadway do\n  use Broadway\n\n  def start_link(_opts) do\n    Broadway.start_link(__MODULE__,\n      name: __MODULE__,\n      producer: [\n        ...\n        concurrency: 10,\n      ],\n      processors: [\n        default: [\n          concurrency: 100,\n          max_demand: 1,\n        ]\n      ],\n      batchers: [\n        default: [\n          batch_size: 10,\n          concurrency: 10,\n        ]\n      ]\n    )\n  end\n\n  ...callbacks...\nend\n```\n\n----------------------------------------\n\nTITLE: Tuning Broadway Pipeline Concurrency and Batch Options in Elixir\nDESCRIPTION: This code demonstrates advanced tuning of a Broadway pipeline's concurrency, batch size, batch timeout, and demand options for producers, processors, and batchers. These parameters control parallelization and message throughput, enabling optimization for application and server limitations. Developers should set these values based on workload and performance metrics captured via telemetry.\nSOURCE: https://github.com/dashbitco/broadway/blob/main/guides/examples/amazon-sqs.md#_snippet_5\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule MyBroadway do\n  use Broadway\n\n  def start_link(_opts) do\n    Broadway.start_link(__MODULE__,\n      name: __MODULE__,\n      producer: [\n        ...\n        concurrency: 10,\n      ],\n      processors: [\n        default: [\n          concurrency: 100,\n          max_demand: 1,\n        ]\n      ],\n      batchers: [\n        default: [\n          batch_size: 10,\n          concurrency: 10,\n        ]\n      ]\n    )\n  end\n\n  ...callbacks...\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Broadway Pipeline to Elixir Supervision Tree\nDESCRIPTION: This code sample illustrates how to add the custom Broadway pipeline (`MyBroadway`) as a supervised child in a typical Elixir application supervision tree. The Broadway child is started using `{MyBroadway, []}` entry, and the tree is launched with `Supervisor.start_link/2` using the `:one_for_one` strategy. Dependencies for Broadway modules should be started before this entry if needed.\nSOURCE: https://github.com/dashbitco/broadway/blob/main/guides/examples/amazon-sqs.md#_snippet_4\n\nLANGUAGE: elixir\nCODE:\n```\nchildren = [\n  {MyBroadway, []}\n]\n\nSupervisor.start_link(children, strategy: :one_for_one)\n```\n\n----------------------------------------\n\nTITLE: Adding Broadway Pipeline to Supervision Tree in Elixir\nDESCRIPTION: Demonstrates how to add the `MyBroadway` module as a child worker to an Elixir application's supervision tree, typically within the `Application.start/2` callback. This ensures the Broadway pipeline is started and monitored by the supervisor.\nSOURCE: https://github.com/dashbitco/broadway/blob/main/guides/examples/google-cloud-pubsub.md#_snippet_13\n\nLANGUAGE: elixir\nCODE:\n```\nchildren = [\n  {MyBroadway, []}\n]\n\nSupervisor.start_link(children, strategy: :one_for_one)\n```\n\n----------------------------------------\n\nTITLE: Adding Broadway Pipeline to Supervision Tree (elixir)\nDESCRIPTION: This Elixir code snippet demonstrates how to add the Broadway pipeline ('MyBroadway' module) as a child to an Elixir application's supervision tree. It defines the 'children' list and starts the supervisor using the :one_for_one strategy. Dependencies required by Broadway should be listed earlier in the children list. Allows Broadway to automatically start and restart according to standard OTP practices.\nSOURCE: https://github.com/dashbitco/broadway/blob/main/guides/examples/apache-kafka.md#_snippet_5\n\nLANGUAGE: elixir\nCODE:\n```\nchildren = [\n  {MyBroadway, []}\n]\n\nSupervisor.start_link(children, strategy: :one_for_one)\n```\n\n----------------------------------------\n\nTITLE: Adding Broadway Pipeline to Supervision Tree - Elixir\nDESCRIPTION: Shows how to launch the Broadway pipeline by including it as a child in an Elixir supervision tree, typically within a project’s main application file. Demonstrates building the `children` list and calling `Supervisor.start_link/2` with the required strategy. Requires a valid Broadway pipeline module and a bootstrapped application.\nSOURCE: https://github.com/dashbitco/broadway/blob/main/guides/examples/rabbitmq.md#_snippet_6\n\nLANGUAGE: elixir\nCODE:\n```\nchildren = [\n  {MyBroadway, []}\n]\n\nSupervisor.start_link(children, strategy: :one_for_one)\n```\n\n----------------------------------------\n\nTITLE: Defining a GenStage Producer for Counting Events in Elixir\nDESCRIPTION: Defines the 'Counter' GenStage producer module which emits integer sequence events upon demand. Dependencies include ':gen_stage', and the module exposes 'start_link/1' for starting the producer, 'init/1' for initialization using the given starting number, and 'handle_demand/2' for producing the sequence. The 'init' callback sets up the process as a ':producer', and 'handle_demand' generates a list of numbers and updates the state accordingly.\nSOURCE: https://github.com/dashbitco/broadway/blob/main/guides/examples/custom-producers.md#_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule Counter do\n  use GenStage\n\n  def start_link(number) do\n    GenStage.start_link(Counter, number)\n  end\n\n  def init(counter) do\n    {:producer, counter}\n  end\n\n  def handle_demand(demand, counter) when demand > 0 do\n    events = Enum.to_list(counter..counter+demand-1)\n    {:noreply, events, counter + demand}\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Broadway Dependency in Mix.exs - Elixir\nDESCRIPTION: This snippet demonstrates how to add the Broadway library as a dependency to your Elixir project by updating the deps function in mix.exs. This is a required step to use Broadway features. You must run 'mix deps.get' after this change. The dependency is specified with a version requirement and can be used in mix-based Elixir projects.\nSOURCE: https://github.com/dashbitco/broadway/blob/main/README.md#_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\ndef deps do\n  [\n    {:broadway, \"~> 1.0\"}\n  ]\nend\n```\n\n----------------------------------------\n\nTITLE: Adding BroadwayRabbitMQ Dependency to mix.exs - Elixir\nDESCRIPTION: Demonstrates how to add the `:broadway_rabbitmq` dependency to the Elixir project's dependency list in the `mix.exs` file. This dependency is essential for integrating Broadway with RabbitMQ. Requires a valid `mix.exs` file; users should replace or update the shown version string as needed.\nSOURCE: https://github.com/dashbitco/broadway/blob/main/guides/examples/rabbitmq.md#_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\ndef deps do\n  [\n    ...\n    {:broadway_rabbitmq, \"~> 0.7\"},\n  ]\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Broadway and Goth Dependencies in Elixir\nDESCRIPTION: Defines the `broadway_cloud_pub_sub` and `goth` dependencies within the `mix.exs` file of an Elixir project. `broadway_cloud_pub_sub` provides the Broadway connector for Pub/Sub, and `goth` handles Google Cloud authentication.\nSOURCE: https://github.com/dashbitco/broadway/blob/main/guides/examples/google-cloud-pubsub.md#_snippet_10\n\nLANGUAGE: elixir\nCODE:\n```\ndefp deps() do\n  [\n    ...\n    {:broadway_cloud_pub_sub, \"~> 0.7\"},\n    {:goth, \"~> 1.0\"}\n  ]\nend\n```\n\n----------------------------------------\n\nTITLE: Adding :broadway_kafka Dependency to mix.exs (elixir)\nDESCRIPTION: This Elixir code defines the 'deps' function for use in a project's 'mix.exs' file, specifying :broadway_kafka as a dependency with version constraint '~> 0.3'. It assumes use of Mix, the Elixir build tool. Properly listing this dependency is required to access Broadway's Kafka connector and integrate with Kafka brokers via Broadway in Elixir. The code may need to be updated to reference newer versions when available.\nSOURCE: https://github.com/dashbitco/broadway/blob/main/guides/examples/apache-kafka.md#_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\ndef deps do\n  [\n    ...\n    {:broadway_kafka, \"~> 0.3\"}\n  ]\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Dependencies for BroadwaySQS and Hackney in Elixir Mix Project\nDESCRIPTION: This code block provides an example of specifying dependencies in the Elixir mix project file (`mix.exs`). It adds `:broadway_sqs` for SQS support and `:hackney` as the HTTP client. Developers must ensure they use the latest compatible versions of these packages. This configuration is required prior to launching a Broadway pipeline that interacts with Amazon SQS.\nSOURCE: https://github.com/dashbitco/broadway/blob/main/guides/examples/amazon-sqs.md#_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\ndef deps do\n  [\n    ...\n    {:broadway_sqs, \"~> 0.7\"},\n    {:hackney, \"~> 1.9\"},\n  ]\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Credentials for SQS Producer in Broadway Pipeline (Elixir)\nDESCRIPTION: This snippet shows how to explicitly supply AWS authentication credentials to the `BroadwaySQS.Producer` in the Broadway pipeline configuration. It overrides the default environment variable approach by directly setting `access_key_id` and `secret_access_key` in the `config` option of the producer. Use this method only when environmental credentials are not present or preferred, and protect sensitive values.\nSOURCE: https://github.com/dashbitco/broadway/blob/main/guides/examples/amazon-sqs.md#_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\n...\nproducer: [\n  module:\n    {BroadwaySQS.Producer,\n     queue_url: \"https://us-east-2.queue.amazonaws.com/100000000001/my_queue\",\n     config: [\n       access_key_id: \"YOUR_AWS_ACCESS_KEY_ID\",\n       secret_access_key: \"YOUR_AWS_SECRET_ACCESS_KEY\"\n     ]}\n]\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring RabbitMQ Producer with Credentials - Elixir\nDESCRIPTION: Illustrates how to configure the RabbitMQ producer in a Broadway pipeline with custom connection credentials for authorized access to a queue. Shows where the `connection` keyword with `username` and `password` is added under the producer configuration. Requires proper credentials and the configuration must be included within a producer specification.\nSOURCE: https://github.com/dashbitco/broadway/blob/main/guides/examples/rabbitmq.md#_snippet_4\n\nLANGUAGE: elixir\nCODE:\n```\n...\nproducer: [\n  module: {BroadwayRabbitMQ.Producer,\n    queue: \"my_queue\",\n    connection: [\n      username: \"user\",\n      password: \"password\",\n    ]\n    ...\n  }\n]\n...\n```\n\n----------------------------------------\n\nTITLE: Setting Google Application Credentials Environment Variable\nDESCRIPTION: Sets the `GOOGLE_APPLICATION_CREDENTIALS` environment variable to the path of the downloaded service account JSON key file. This is a common method for Google Cloud client libraries (like Goth) to find credentials.\nSOURCE: https://github.com/dashbitco/broadway/blob/main/guides/examples/google-cloud-pubsub.md#_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nexport GOOGLE_APPLICATION_CREDENTIALS=/path/to/credentials.json\n```\n\n----------------------------------------\n\nTITLE: Creating Service Account Credentials\nDESCRIPTION: Creates and downloads a JSON key file (`credentials.json`) for the specified service account ('test-account' in 'test-pubsub' project) using `gcloud`. This file contains credentials needed for programmatic API access.\nSOURCE: https://github.com/dashbitco/broadway/blob/main/guides/examples/google-cloud-pubsub.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ gcloud iam service-accounts keys create credentials.json --iam-account=test-account@test-pubsub.iam.gserviceaccount.com\ncreated key [xxx] of type [json] as [key] for [test-account@test-pubsub.iam.gserviceaccount.com]\n```\n\n----------------------------------------\n\nTITLE: Initializing Elixir Project with Supervision Tree (elixir)\nDESCRIPTION: This shell command creates a new Elixir project called 'my_app' with a supervision tree using the 'mix new' command and the '--sup' flag. It is a prerequisite for building scalable and fault-tolerant Elixir applications, especially when integrating Broadway pipelines. The generated project will contain supervisor setup code in its application module by default.\nSOURCE: https://github.com/dashbitco/broadway/blob/main/guides/examples/apache-kafka.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ mix new my_app --sup\n```\n\n----------------------------------------\n\nTITLE: Creating a New Supervised Elixir Application\nDESCRIPTION: Uses the `mix` build tool to create a new Elixir project named 'my_app' with a supervision tree structure enabled (`--sup` flag). This is the standard way to start an OTP-compliant Elixir application.\nSOURCE: https://github.com/dashbitco/broadway/blob/main/guides/examples/google-cloud-pubsub.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n$ mix new my_app --sup\n```\n\n----------------------------------------\n\nTITLE: Generating a New Elixir Project with Supervision Tree - Elixir\nDESCRIPTION: Shows how to create a new Elixir application project with supervision tree support by using the `mix new` command with the `--sup` flag. This is a prerequisite for setting up a robust Broadway pipeline. Requires Elixir installation and knowledge of the Mix build tool. No code parameters or outputs, but generates a new project directory with boilerplate.\nSOURCE: https://github.com/dashbitco/broadway/blob/main/guides/examples/rabbitmq.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ mix new my_app --sup\n```\n\n----------------------------------------\n\nTITLE: Publishing Test Messages to a RabbitMQ Queue Using AMQP - Elixir\nDESCRIPTION: Provides Elixir code for programmatically opening a RabbitMQ connection and channel, ensuring the queue exists, publishing a large number of messages, and closing the connection. Relies on the AMQP Elixir library (`AMQP.Connection`, `AMQP.Channel`, etc.). Core parameters include queue name, message range (e.g., 1..5000), and message content. Outputs published messages to the queue; error handling omitted for brevity.\nSOURCE: https://github.com/dashbitco/broadway/blob/main/guides/examples/rabbitmq.md#_snippet_7\n\nLANGUAGE: elixir\nCODE:\n```\n{:ok, connection} = AMQP.Connection.open\n{:ok, channel} = AMQP.Channel.open(connection)\nAMQP.Queue.declare(channel, \"my_queue\", durable: true)\n\nEnum.each(1..5000, fn i ->\n  AMQP.Basic.publish(channel, \"\", \"my_queue\", \"#{i}\")\nend)\nAMQP.Connection.close(connection)\n```\n\n----------------------------------------\n\nTITLE: Sending Messages to Kafka via :brod (elixir)\nDESCRIPTION: This Elixir code illustrates using the :brod client to send 1000 string messages to a Kafka topic named 'test', cycling across 3 partitions. It first starts the :brod client and producer, and uses Enum.each/2 to produce messages synchronously with keys as empty strings. Requires the :brod dependency and a running Kafka broker. Intended for generating sample traffic for testing the Broadway pipeline.\nSOURCE: https://github.com/dashbitco/broadway/blob/main/guides/examples/apache-kafka.md#_snippet_6\n\nLANGUAGE: elixir\nCODE:\n```\ntopic = \"test\"\nclient_id = :my_client\nhosts = [localhost: 9092]\n\n:ok = :brod.start_client(hosts, client_id, _client_config=[])\n:ok = :brod.start_producer(client_id, topic, _producer_config = [])\n\nEnum.each(1..1000, fn i ->\n  partition = rem(i, 3)\n  :ok = :brod.produce_sync(client_id, topic, partition, _key=\"\", \"#{i}\")\nend)\n```\n\n----------------------------------------\n\nTITLE: Publishing Test Messages to Pub/Sub Topic\nDESCRIPTION: Uses the `gcloud` CLI to publish test messages (\"test 1\", \"test 2\") to the specified Pub/Sub topic ('test-topic' in 'test-pubsub' project). This allows testing the running Broadway pipeline.\nSOURCE: https://github.com/dashbitco/broadway/blob/main/guides/examples/google-cloud-pubsub.md#_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\n$ gcloud pubsub topics publish  projects/test-pubsub/topics/test-topic --message \"test 1\"\nmessageIds:\n- '651428033718119'\n```\n\nLANGUAGE: shell\nCODE:\n```\ngcloud pubsub topics publish  projects/test-pubsub/topics/test-topic --message \"test 2\"\nmessageIds:\n- '651427034966696'\n```\n\n----------------------------------------\n\nTITLE: Starting the Elixir Application with IEx\nDESCRIPTION: Starts the Elixir application within an interactive Elixir shell (`iex`) using the `mix` build tool. This command compiles the project and starts the application, including its supervision tree and the Broadway pipeline.\nSOURCE: https://github.com/dashbitco/broadway/blob/main/guides/examples/google-cloud-pubsub.md#_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\n$ iex -S mix\n```\n\n----------------------------------------\n\nTITLE: Creating a Kafka Topic Using Command Line (shell)\nDESCRIPTION: This shell command creates a new Kafka topic named 'test' with 3 partitions using the Kafka CLI tool 'kafka-topics'. It requires a running ZooKeeper instance listening at localhost:2181 and assumes Kafka is installed on the local machine. No output is generated if successful; otherwise, error messages are displayed. This setup is essential for initializing an environment for Kafka stream consumption.\nSOURCE: https://github.com/dashbitco/broadway/blob/main/guides/examples/apache-kafka.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ kafka-topics --create --zookeeper localhost:2181 --partitions 3 --topic test\n```\n\n----------------------------------------\n\nTITLE: Declaring and Listing RabbitMQ Queues via Command Line - Elixir\nDESCRIPTION: Demonstrates how to declare a durable queue and list existing queues in RabbitMQ using command-line interface tools. Requires RabbitMQ, its management plugin, and the command line utilities `rabbitmqadmin` and `rabbitmqctl`. The example covers the basic commands to create a new queue and verify its existence by listing all queues.\nSOURCE: https://github.com/dashbitco/broadway/blob/main/guides/examples/rabbitmq.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ rabbitmqadmin declare queue name=my_queue durable=true\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ rabbitmqctl list_queues\nTimeout: 60.0 seconds ...\nListing queues for vhost / ...\nname      messages\nmy_queue  0\n```\n\n----------------------------------------\n\nTITLE: Creating a Google Cloud Pub/Sub Topic\nDESCRIPTION: Creates a new Pub/Sub topic named 'test-topic' within the 'test-pubsub' project using the `gcloud` CLI. Topics are named resources to which messages are sent by publishers.\nSOURCE: https://github.com/dashbitco/broadway/blob/main/guides/examples/google-cloud-pubsub.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ gcloud pubsub topics create test-topic --project test-pubsub\nCreated topic [projects/test-pubsub/topics/test-topic].\n```\n\n----------------------------------------\n\nTITLE: Creating a Google Cloud Pub/Sub Subscription\nDESCRIPTION: Creates a new Pub/Sub subscription named 'test-subscription' for the 'test-topic' within the 'test-pubsub' project using `gcloud`. Subscriptions represent a stream of messages from a single topic, to be delivered to subscribing applications.\nSOURCE: https://github.com/dashbitco/broadway/blob/main/guides/examples/google-cloud-pubsub.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ gcloud pubsub subscriptions create test-subscription --project test-pubsub --topic test-topic\nCreated subscription [projects/test-pubsub/subscriptions/test-subscription].\n```\n\n----------------------------------------\n\nTITLE: Creating a Google Cloud Service Account\nDESCRIPTION: Creates a new IAM service account named 'test-account' within the 'test-pubsub' project using `gcloud`. Service accounts are used by applications to make authorized API calls.\nSOURCE: https://github.com/dashbitco/broadway/blob/main/guides/examples/google-cloud-pubsub.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ gcloud iam service-accounts create test-account --project test-pubsub\nCreated service account [test-account].\n```\n\n----------------------------------------\n\nTITLE: Binding IAM Policy to Service Account\nDESCRIPTION: Adds an IAM policy binding using `gcloud`, granting the 'roles/editor' role to the newly created 'test-account' service account for the 'test-pubsub' project. This defines the permissions the service account has.\nSOURCE: https://github.com/dashbitco/broadway/blob/main/guides/examples/google-cloud-pubsub.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ gcloud projects add-iam-policy-binding test-pubsub \\\n    --member serviceAccount:test-account@test-pubsub.iam.gserviceaccount.com \\\n    --role roles/editor\nUpdated IAM policy for project [test-pubsub].\n(...)\n```\n\n----------------------------------------\n\nTITLE: Enabling the Pub/Sub API\nDESCRIPTION: Enables the Google Cloud Pub/Sub API for the 'test-pubsub' project using `gcloud`. This step is necessary before the project can use Pub/Sub services.\nSOURCE: https://github.com/dashbitco/broadway/blob/main/guides/examples/google-cloud-pubsub.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n$ gcloud services enable pubsub --project test-pubsub\nOperation \"operations/xxx\" finished successfully.\n```\n\n----------------------------------------\n\nTITLE: Creating a Google Cloud Project\nDESCRIPTION: Creates a new Google Cloud project named 'test-pubsub' using the `gcloud` CLI. Projects are the base-level organizing entity for Google Cloud resources.\nSOURCE: https://github.com/dashbitco/broadway/blob/main/guides/examples/google-cloud-pubsub.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ gcloud projects create test-pubsub\n```\n\n----------------------------------------\n\nTITLE: Authenticating gcloud CLI\nDESCRIPTION: Initiates the authentication process for the `gcloud` command-line tool, allowing it to interact with Google Cloud Platform resources on behalf of the user.\nSOURCE: https://github.com/dashbitco/broadway/blob/main/guides/examples/google-cloud-pubsub.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ gcloud auth login\n```\n\n----------------------------------------\n\nTITLE: Installing Google Cloud SDK via Homebrew (macOS)\nDESCRIPTION: Installs the Google Cloud SDK using Homebrew package manager on macOS. This is a prerequisite for using the `gcloud` command-line tool.\nSOURCE: https://github.com/dashbitco/broadway/blob/main/guides/examples/google-cloud-pubsub.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ brew install --cask google-cloud-sdk\n```\n\n----------------------------------------\n\nTITLE: Sample Broadway Batch Output (Console Log) - Elixir\nDESCRIPTION: Shows example output of batch data processed and logged by the Broadway pipeline, as generated by `IO.inspect/2` in the `handle_batch/4` callback. Output contains pairs of original and computed message data. No dependencies; illustrates expected result format for verification.\nSOURCE: https://github.com/dashbitco/broadway/blob/main/guides/examples/rabbitmq.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nGot batch: [\n  {\"7\", 14},\n  {\"5\", 10},\n  {\"8\", 16},\n  {\"98\", 196},\n  {\"6\", 12},\n  {\"97\", 194},\n  {\"9\", 18},\n  {\"99\", 198},\n  {\"10\", 20},\n  {\"100\", 200}\n]\nGot batch: [\n  {\"29\", 58},\n  {\"32\", 64},\n  ...\n]\n```\n\n----------------------------------------\n\nTITLE: Visualizing the Broadway Pipeline Model - AsciiDoc Diagram\nDESCRIPTION: This ASCII diagram illustrates the Broadway pipeline architecture, showing the flow of data from producers through processors, batchers, and batch processors. Each processing stage (handle_message/3 and prepare_messages/2 on processors; handle_batch/4 on batch processors) is called out, highlighting the demand and partition dispatchers, as well as the relation of processing and batching to stage partitioning. No dependencies are required as this is for visual documentation purposes. The diagram receives no input and produces no output, serving as technical reference for understanding module topologies and flow.\nSOURCE: https://github.com/dashbitco/broadway/blob/main/guides/internals/architecture.md#_snippet_0\n\nLANGUAGE: asciidoc\nCODE:\n```\n                                       [producers]   <- pulls data from SQS, RabbitMQ, etc.\\n                                            |\\n                                            |   (demand dispatcher)\\n                                            |\\n   handle_message/3 and  ---------->   [processors]\\n   prepare_messages/2 run here             / \\\\n                                          /   \\\\   (partition dispatcher)\\n                                         /     \\\\n                                   [batcher]   [batcher]   <- one for each batcher key\\n                                       |           |\\n                                       |           |   (demand dispatcher)\\n                                       |           |\\nhandle_batch/4 runs here -> [batch processor][batch processor]\n```\n\n----------------------------------------\n\nTITLE: Describing the Broadway Supervision Tree - AsciiDoc Diagram\nDESCRIPTION: This ASCII diagram details the hierarchical supervision structure for Broadway pipelines, mapping the parent-child relations and restart strategies for every part of the pipeline, from the top-level GenServer to producers, processors, batchers, and terminators. Supervision strategies like :one_for_one, :one_for_all, and :rest_for_one are annotated. This diagram forms part of the technical documentation for fault tolerance and process restart semantics in Broadway applications.\nSOURCE: https://github.com/dashbitco/broadway/blob/main/guides/internals/architecture.md#_snippet_1\n\nLANGUAGE: asciidoc\nCODE:\n```\n                                   [Broadway GenServer]\\n                                            |\\n                                            |\\n                                            |\\n                              [Broadway Pipeline Supervisor]\\n                             /    /   (:rest_for_one)   \\\\    \\\\n                           /     |                       |      \\\\n                         /       |                       |         \\\\n                       /         |                       |            \\\\n                     /           |                       |               \\\\n                   /             |                       |                  \\\\n  [ProducerSupervisor]  [ProcessorSupervisor]   [BatchersSupervisor]    [Terminator]\\n    (:one_for_one)        (:one_for_all)           (:one_for_one)\\n         / \\\\                    / \\\\                /            \\\\n        /   \\\\                  /   \\\\              /              \\\\n       /     \\\\                /     \\\\            /                \\\\n      /       \\\\              /       \\\\          /                  \\\\n[Producer_1]  ...    [Processor_1]  ...  [BatcherSupervisor_1]     ...\\n                                            (:rest_for_one)\\n                                            /             \\\\n                                           /               \\\\n                                          /                 \\\\n                                     [Batcher]   [BatchProcessorSupervisor]\\n                                                       (:one_for_all)\\n                                                        /           \\\\n                                                       /             \\\\n                                                      /               \\\\n                                            [BatchProcessor_1]        ...\n```"
  }
]