[
  {
    "owner": "jagenjo",
    "repo": "litegraph.js",
    "content": "TITLE: Initializing LiteGraph in HTML Application\nDESCRIPTION: Creates a new graph instance and canvas for rendering. This is the basic setup needed to integrate LiteGraph.js into an HTML application.\nSOURCE: https://github.com/jagenjo/litegraph.js/blob/master/guides/README.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar graph = new LiteGraph.LGraph();\nvar graph_canvas = new LiteGraph.LGraphCanvas( canvas, graph );\n```\n\n----------------------------------------\n\nTITLE: Basic LiteGraph.js HTML Integration Example\nDESCRIPTION: A minimal HTML setup showing how to integrate LiteGraph.js into a web page. It creates a canvas, initializes a graph with two nodes (a constant node and a watch node), connects them, and starts the graph execution.\nSOURCE: https://github.com/jagenjo/litegraph.js/blob/master/README.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<html>\n<head>\n\t<link rel=\"stylesheet\" type=\"text/css\" href=\"litegraph.css\">\n\t<script type=\"text/javascript\" src=\"litegraph.js\"></script>\n</head>\n<body style='width:100%; height:100%'>\n<canvas id='mycanvas' width='1024' height='720' style='border: 1px solid'></canvas>\n<script>\nvar graph = new LGraph();\n\nvar canvas = new LGraphCanvas(\"#mycanvas\", graph);\n\nvar node_const = LiteGraph.createNode(\"basic/const\");\nnode_const.pos = [200,200];\ngraph.add(node_const);\nnode_const.setValue(4.5);\n\nvar node_watch = LiteGraph.createNode(\"basic/watch\");\nnode_watch.pos = [700,200];\ngraph.add(node_watch);\n\nnode_const.connect(0, node_watch, 0 );\n\ngraph.start()\n</script>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Sum Node in LiteGraph.js\nDESCRIPTION: This snippet demonstrates how to create a custom node that adds two numbers. It shows the node constructor, defining properties, implementing the execution function, and registering the node in the LiteGraph system.\nSOURCE: https://github.com/jagenjo/litegraph.js/blob/master/guides/README.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n//your node constructor class\nfunction MyAddNode()\n{\n  //add some input slots\n  this.addInput(\"A\",\"number\");\n  this.addInput(\"B\",\"number\");\n  //add some output slots\n  this.addOutput(\"A+B\",\"number\");\n  //add some properties\n  this.properties = { precision: 1 };\n}\n\n//name to show on the canvas\nMyAddNode.title = \"Sum\";\n\n//function to call when the node is executed\nMyAddNode.prototype.onExecute = function()\n{\n  //retrieve data from inputs\n  var A = this.getInputData(0);\n  if( A === undefined )\n    A = 0;\n  var B = this.getInputData(1);\n  if( B === undefined )\n    B = 0;\n  //assing data to outputs\n  this.setOutputData( 0, A + B );\n}\n\n//register in the system\nLiteGraph.registerNodeType(\"basic/sum\", MyAddNode );\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Sum Node in JavaScript\nDESCRIPTION: Example of creating a custom node type that adds two number inputs. It defines a constructor that sets up inputs, outputs, and properties, along with an execution function and node registration.\nSOURCE: https://github.com/jagenjo/litegraph.js/blob/master/README.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n//node constructor class\nfunction MyAddNode()\n{\n  this.addInput(\"A\",\"number\");\n  this.addInput(\"B\",\"number\");\n  this.addOutput(\"A+B\",\"number\");\n  this.properties = { precision: 1 };\n}\n\n//name to show\nMyAddNode.title = \"Sum\";\n\n//function to call when the node is executed\nMyAddNode.prototype.onExecute = function()\n{\n  var A = this.getInputData(0);\n  if( A === undefined )\n    A = 0;\n  var B = this.getInputData(1);\n  if( B === undefined )\n    B = 0;\n  this.setOutputData( 0, A + B );\n}\n\n//register in the system\nLiteGraph.registerNodeType(\"basic/sum\", MyAddNode );\n```\n\n----------------------------------------\n\nTITLE: Wrapping an Existing Function as a LiteGraph Node\nDESCRIPTION: Example showing how to convert an existing JavaScript function into a LiteGraph node without creating a full node class, specifying input and output types.\nSOURCE: https://github.com/jagenjo/litegraph.js/blob/master/README.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction sum(a,b)\n{\n   return a+b;\n}\n\nLiteGraph.wrapFunctionAsNode(\"math/sum\",sum, [\"Number\",\"Number\"],\"Number\");\n```\n\n----------------------------------------\n\nTITLE: Adding a Slider Widget to a LiteGraph Node\nDESCRIPTION: This example shows how to add interactive widgets to a node, specifically a slider widget. It includes storing the widget reference and defining a callback function that gets triggered when the value changes.\nSOURCE: https://github.com/jagenjo/litegraph.js/blob/master/guides/README.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction MyNodeType()\n{\n  this.slider_widget = this.addWidget(\"slider\",\"Slider\", 0.5, function(value, widget, node){ /* do something with the value */ }, { min: 0, max: 1} );\n}\n```\n\n----------------------------------------\n\nTITLE: Starting LiteGraph Execution\nDESCRIPTION: Initiates the execution of the graph after it has been created. This will begin the graph processing cycle.\nSOURCE: https://github.com/jagenjo/litegraph.js/blob/master/guides/README.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ngraph.start();\n```\n\n----------------------------------------\n\nTITLE: Using LiteGraph.js in NodeJS Server Environment\nDESCRIPTION: Example of using LiteGraph.js on the server side with NodeJS. It creates a graph with time and console nodes, connects them, and starts the graph execution.\nSOURCE: https://github.com/jagenjo/litegraph.js/blob/master/README.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar LiteGraph = require(\"./litegraph.js\").LiteGraph;\n\nvar graph = new LiteGraph.LGraph();\n\nvar node_time = LiteGraph.createNode(\"basic/time\");\ngraph.add(node_time);\n\nvar node_console = LiteGraph.createNode(\"basic/console\");\nnode_console.mode = LiteGraph.ALWAYS;\ngraph.add(node_console);\n\nnode_time.connect( 0, node_console, 1 );\n\ngraph.start()\n```\n\n----------------------------------------\n\nTITLE: Defining Event Slots for LiteGraph Nodes\nDESCRIPTION: Shows how to add input and output event slots to a custom node. The LiteGraph.ACTION type is used for inputs, while LiteGraph.EVENT is used for outputs.\nSOURCE: https://github.com/jagenjo/litegraph.js/blob/master/guides/README.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nfunction MyNode()\n{\n  this.addInput(\"play\", LiteGraph.ACTION );\n  this.addInput(\"onFinish\", LiteGraph.EVENT );\n}\n```\n\n----------------------------------------\n\nTITLE: Triggering Events from LiteGraph Nodes\nDESCRIPTION: Shows how to trigger events from a node to connected nodes. The triggerSlot method is used to send an event through a specific output slot.\nSOURCE: https://github.com/jagenjo/litegraph.js/blob/master/guides/README.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nMyNode.prototype.onAction = function(action, data)\n{\n   if( this.button_was_clicked )\n    this.triggerSlot(0); //triggers event in slot 0\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Action Events in LiteGraph Nodes\nDESCRIPTION: Implements the onAction method to respond to events received through input slots. The method checks which action was triggered and executes appropriate code.\nSOURCE: https://github.com/jagenjo/litegraph.js/blob/master/guides/README.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nMyNode.prototype.onAction = function(action, data)\n{\n   if(action == \"play\")\n   {\n     //do your action...\n   }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Binding a Widget to a Node Property in LiteGraph\nDESCRIPTION: This example shows how to connect a widget to a node property, enabling automatic updates to the property when the widget value changes. The property connection is specified in the widget options.\nSOURCE: https://github.com/jagenjo/litegraph.js/blob/master/guides/README.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfunction MyNode()\n{\n  this.properties = { surname: \"smith\" };\n  this.addWidget(\"text\",\"Surname\",\"\", { property: \"surname\"}); //this will modify the node.properties\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Widget Serialization in LiteGraph Nodes\nDESCRIPTION: This snippet demonstrates how to enable serialization for widgets in a custom node. By setting serialize_widgets to true, the widget values will be saved when the graph is serialized.\nSOURCE: https://github.com/jagenjo/litegraph.js/blob/master/guides/README.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfunction MyNode()\n{\n  this.addWidget(\"text\",\"name\",\"\");\n  this.serialize_widgets = true;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Node Drawing in LiteGraph.js\nDESCRIPTION: This snippet demonstrates how to customize the appearance of a node by implementing the onDrawForeground callback. It draws a black rectangle on the left side of the node when not collapsed.\nSOURCE: https://github.com/jagenjo/litegraph.js/blob/master/guides/README.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nnode.onDrawForeground = function(ctx, graphcanvas)\n{\n  if(this.flags.collapsed)\n    return;\n  ctx.save();\n  ctx.fillColor = \"black\";\n  ctx.fillRect(0,0,10,this.size[1]);\n  ctx.restore();\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Mouse Events in LiteGraph Nodes\nDESCRIPTION: This snippet shows how to implement custom mouse interaction for a node by defining the onMouseDown callback. It returns true to indicate the event was handled by the node.\nSOURCE: https://github.com/jagenjo/litegraph.js/blob/master/guides/README.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nnode.onMouseDown = function( event, pos, graphcanvas )\n{\n    return true; //return true is the event was used by your node, to block other behaviours\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Link Tooltips in LiteGraph\nDESCRIPTION: Demonstrates how to customize tooltips for node links by adding a toToolTip function to the output data object. This is useful when outputting complex objects that need a more descriptive representation.\nSOURCE: https://github.com/jagenjo/litegraph.js/blob/master/guides/README.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nthis.setOutputData(0, {\n  complexObject: {\n    yes: true,\n  },\n  toToolTip: () => 'A useful description',\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing LiteGraph.js Configuration via Environment Variables in JavaScript\nDESCRIPTION: This snippet shows how to access environment variables in JavaScript to configure LiteGraph behavior. It demonstrates checking for the existence of environment variables and setting defaults when variables are not present.\nSOURCE: https://github.com/jagenjo/litegraph.js/blob/master/utils/deploy_files_core.txt#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// ENV is an alias for process.env or window.ENV || {}\nvar ENV = typeof(process) != \"undefined\" && process.env ? process.env : typeof(window) != \"undefined\" && window.ENV ? window.ENV : {};\n\n// Get node backend server URL\nENV.NODE_BACKEND = ENV.NODE_BACKEND || ENV.LITEGRAPH_NODE_BACKEND || \"ws://localhost:5006\";    \nENV.NODE_OPTIONS = ENV.NODE_OPTIONS || ENV.LITEGRAPH_OPTIONS || {cors:true};\n\n// Used to control canvas keyboard bindings functionality \nENV.CAPTURE_KEYBOARD = ENV.CAPTURE_KEYBOARD || ENV.LITEGRAPH_CAPTURE_KEYBOARD;\nENV.ALLOW_RENAME = ENV.ALLOW_RENAME || ENV.LITEGRAPH_ALLOW_RENAME;\nENV.ALLOW_SEARCHBOX = ENV.ALLOW_SEARCHBOX || ENV.LITEGRAPH_ALLOW_SEARCHBOX;\n```\n\n----------------------------------------\n\nTITLE: Installing LiteGraph.js via npm\nDESCRIPTION: Command for installing the LiteGraph.js library using npm package manager.\nSOURCE: https://github.com/jagenjo/litegraph.js/blob/master/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install litegraph.js\n```\n\n----------------------------------------\n\nTITLE: Running LiteGraph.js Demo on a Local Server\nDESCRIPTION: Shell commands for cloning the LiteGraph repository, installing dependencies, and running a local server to test the demos on port 80.\nSOURCE: https://github.com/jagenjo/litegraph.js/blob/master/README.md#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n$ git clone https://github.com/jagenjo/litegraph.js.git\n$ cd litegraph.js\n$ npm install\n$ node utils/server.js\nExample app listening on port 80!\n```"
  }
]