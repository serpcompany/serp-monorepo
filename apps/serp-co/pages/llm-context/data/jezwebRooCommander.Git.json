[
  {
    "owner": "jezweb",
    "repo": "roo-commander.git",
    "content": "TITLE: Declaring State Variable with useState Hook in React\nDESCRIPTION: Demonstrates how to use the useState Hook to declare a state variable. It returns an array with the current state and a function to update it.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/react-specialist-llms-context-20250406.md#2025-04-13_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst [state, setState] = useState(initialState)\n```\n\n----------------------------------------\n\nTITLE: Selecting Elements with D3.js in JavaScript\nDESCRIPTION: Demonstrates various ways to select elements using D3's select and selectAll methods. Includes examples of selecting by ID, tag name, and using DOM elements directly.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/d3js-specialist-llms-context-20250406.md#2025-04-13_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nconst svg = d3.select(\"#chart\");\nconst anchor = d3.select(\"a\");\nd3.select(document.body).style(\"background\", \"red\");\nd3.selectAll(\"p\").on(\"click\", (event) => d3.select(event.currentTarget).style(\"color\", \"red\"));\nconst p = d3.selectAll(\"p\");\nd3.selectAll(document.links).style(\"color\", \"red\");\n```\n\n----------------------------------------\n\nTITLE: Rendering Lists in React with map()\nDESCRIPTION: Shows how to render a list of components from an array of data using map(). Each list item requires a unique key prop for React to track items efficiently.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/react-specialist-llms-context-20250406.md#2025-04-13_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function List() {\n  const listItems = people.map(person =>\n    <li key={person.id}>\n      <img\n        src={getImageUrl(person)}\n        alt={person.name}\n      />\n      <p>\n        <b>{person.name}:</b>\n        {' ' + person.profession + ' '}\n        known for {person.accomplishment}\n      </p>\n    </li>\n  );\n  return (\n    <article>\n      <h1>Scientists</h1>\n      <ul>{listItems}</ul>\n    </article>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic FastAPI Application in Python\nDESCRIPTION: This snippet demonstrates how to create a simple FastAPI application with two endpoints: a root endpoint and an item endpoint with path and query parameters. It shows the core pattern of importing FastAPI, creating an app instance, and defining path operations.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/fastapi-developer-llms-context-20250406.md#2025-04-13_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Union\n\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n@app.get(\"/\")\ndef read_root():\n    return {\"Hello\": \"World\"}\n\n@app.get(\"/items/{item_id}\")\ndef read_item(item_id: int, q: Union[str, None] = None):\n    return {\"item_id\": item_id, \"q\": q}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Routes in Next.js\nDESCRIPTION: This code snippet demonstrates how to create a dynamic route for a blog post using the [slug] parameter. It shows how to access the dynamic segment value from the params prop in both TypeScript and JavaScript.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/nextjs-developer-llms-context-20250406.md#2025-04-13_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nexport default async function Page({\n  params,\n}: {\n  params: Promise<{ slug: string }>\n}) {\n  const { slug } = await params\n  return <div>My Post: {slug}</div>\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nexport default async function Page({ params }) {\n  const { slug } = await params\n  return <div>My Post: {slug}</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Default Form Action in SvelteKit\nDESCRIPTION: Shows how to define a default form action in a +page.server.js file. This action will handle POST requests from forms without a specific action attribute.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/sveltekit-llms-context-20250406.md#2025-04-13_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n/// file: src/routes/login/+page.server.js\n/** @satisfies {import('./$types').Actions} */\nexport const actions = {\n\tdefault: async (event) => {\n\t\t// TODO log the user in\n\t}\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Cleanup to an Effect in React\nDESCRIPTION: This snippet shows how to add a cleanup function to an Effect. The cleanup function is returned from the Effect and runs before the Effect runs again or when the component unmounts.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/react-specialist-llms-context-20250406.md#2025-04-13_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nuseEffect(() => {\n  const connection = createConnection();\n  connection.connect();\n  return () => {\n    connection.disconnect();\n  };\n}, []);\n```\n\n----------------------------------------\n\nTITLE: Implementing User Registration View in Flask\nDESCRIPTION: A Flask route handler for user registration that processes both GET and POST requests. It validates form input, inserts new users into the database with hashed passwords, and handles errors including duplicate usernames.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/flask-developer-llms-context-20250406.md#2025-04-13_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@bp.route('/register', methods=('GET', 'POST'))\ndef register():\n    if request.method == 'POST':\n        username = request.form['username']\n        password = request.form['password']\n        db = get_db()\n        error = None\n\n        if not username:\n            error = 'Username is required.'\n        elif not password:\n            error = 'Password is required.'\n\n        if error is None:\n            try:\n                db.execute(\n                    \"INSERT INTO user (username, password) VALUES (?, ?)\",\n                    (username, generate_password_hash(password)),\n                )\n                db.commit()\n            except db.IntegrityError:\n                error = f\"User {username} is already registered.\"\n            else:\n                return redirect(url_for(\"auth.login\"))\n\n        flash(error)\n\n    return render_template('auth/register.html')\n```\n\n----------------------------------------\n\nTITLE: Initializing State with useState Hook in React\nDESCRIPTION: Shows how to initialize a state variable using the useState Hook in a React component. The state variable 'index' is created with an initial value of 0 and a setter function 'setIndex'.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/react-specialist-llms-context-20250406.md#2025-04-13_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst [index, setIndex] = useState(0);\n```\n\n----------------------------------------\n\nTITLE: Configuring CORS Middleware in FastAPI\nDESCRIPTION: This example shows how to set up CORS middleware in a FastAPI application with custom allowed origins, methods, and headers. It demonstrates importing CORSMiddleware, defining allowed origins, and adding middleware to the FastAPI app.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/fastapi-developer-llms-context-20250406.md#2025-04-13_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi.middleware.cors import CORSMiddleware\n\norigins = [\n    \"http://localhost.tiangolo.com\",\n    \"https://localhost.tiangolo.com\",\n    \"http://localhost\",\n    \"http://localhost:8080\",\n]\n\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=origins,\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\n```\n\n----------------------------------------\n\nTITLE: Optimizing Performance with useMemo Hook in React\nDESCRIPTION: This snippet demonstrates how to use the useMemo Hook to optimize performance by caching expensive calculations. It shows memoizing filtered todos based on the 'todos' and 'tab' dependencies.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/react-specialist-llms-context-20250406.md#2025-04-13_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nfunction TodoList({ todos, tab, theme }) {\n  const visibleTodos = useMemo(() => filterTodos(todos, tab), [todos, tab]);\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Form with State Management in React\nDESCRIPTION: Demonstrates a React component that uses state to manage a form submission. It shows how setting state triggers a re-render and updates the UI, including form handling and conditional rendering.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/react-specialist-llms-context-20250406.md#2025-04-13_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\n\nexport default function Form() {\n  const [isSent, setIsSent] = useState(false);\n  const [message, setMessage] = useState('Hi!');\n  if (isSent) {\n    return <h1>Your message is on its way!</h1>\n  }\n  return (\n    <form onSubmit={(e) => {\n      e.preventDefault();\n      setIsSent(true);\n      sendMessage(message);\n    }}>\n      <textarea\n        placeholder=\"Message\"\n        value={message}\n        onChange={e => setMessage(e.target.value)}\n      />\n      <button type=\"submit\">Send</button>\n    </form>\n  );\n}\n\nfunction sendMessage(message) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Session Dependency Implementation\nDESCRIPTION: This example creates a FastAPI dependency that provides database session management for requests. It demonstrates how to use SQLModel's Session and FastAPI's Depends for database operations.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/fastapi-developer-llms-context-20250406.md#2025-04-13_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Annotated\nfrom sqlmodel import Session\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\nSessionDep = Annotated[Session, Depends(get_session)]\n```\n\n----------------------------------------\n\nTITLE: Sharing State Between Components in React\nDESCRIPTION: Demonstrates how to lift state up to a common parent component to share it between child components in a React application. This example uses an Accordion component with nested Panel components.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/react-specialist-llms-context-20250406.md#2025-04-13_snippet_16\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\n\nexport default function Accordion() {\n  const [activeIndex, setActiveIndex] = useState(0);\n  return (\n    <>\n      <h2>Almaty, Kazakhstan</h2>\n      <Panel\n        title=\"About\"\n        isActive={activeIndex === 0}\n        onShow={() => setActiveIndex(0)}\n      >\n        With a population of about 2 million, Almaty is Kazakhstan's largest city. From 1929 to 1997, it was its capital city.\n      </Panel>\n      <Panel\n        title=\"Etymology\"\n        isActive={activeIndex === 1}\n        onShow={() => setActiveIndex(1)}\n      >\n        The name comes from <span lang=\"kk-KZ\">алма</span>, the Kazakh word for \"apple\" and is often translated as \"full of apples\". In fact, the region surrounding Almaty is thought to be the ancestral home of the apple, and the wild <i lang=\"la\">Malus sieversii</i> is considered a likely candidate for the ancestor of the modern domestic apple.\n      </Panel>\n    </>\n  );\n}\n\nfunction Panel({\n  title,\n  children,\n  isActive,\n  onShow\n}) {\n  return (\n    <section className=\"panel\">\n      <h3>{title}</h3>\n      {isActive ? (\n        <p>{children}</p>\n      ) : (\n        <button onClick={onShow}>\n          Show\n        </button>\n      )}\n    </section>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Server-Side Form Validation with Zod\nDESCRIPTION: Implements server-side form validation using the Zod schema validation library within a Server Action. It validates email input from a form submission and returns appropriate error messages if validation fails.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/nextjs-developer-llms-context-20250406.md#2025-04-13_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n'use server'\n\nimport { z } from 'zod'\n\nconst schema = z.object({\n  email: z.string({\n    invalid_type_error: 'Invalid Email',\n  }),\n})\n\nexport default async function createUser(formData: FormData) {\n  const validatedFields = schema.safeParse({\n    email: formData.get('email'),\n  })\n\n  if (!validatedFields.success) {\n    return {\n      errors: validatedFields.error.flatten().fieldErrors,\n    }\n  }\n\n  // Mutate data\n}\n```\n\n----------------------------------------\n\nTITLE: React Component Type Definition in TypeScript\nDESCRIPTION: Shows how to define a React component with TypeScript including a props interface for type checking. Demonstrates proper typing with generics in React.Component and how TypeScript validates prop usage.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/typescript-specialist-llms-context-20250406.md#2025-04-13_snippet_59\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Props {\n  foo: string;\n}\n\nclass MyComponent extends React.Component<Props, {}> {\n  render() {\n    return <span>{this.props.foo}</span>;\n  }\n}\n\n<MyComponent foo=\"bar\" />; // ok\n<MyComponent foo={0} />; // error\n```\n\n----------------------------------------\n\nTITLE: Implementing Form with React Hook Form and Zod in React TSX\nDESCRIPTION: Demonstrates how to create a form using React Hook Form with Zod validation, including form definition and submit handler.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/shadcn-ui-specialist-llms-context-20250406.md#2025-04-13_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\"\n\nimport { zodResolver } from \"@hookform/resolvers/zod\"\nimport { useForm } from \"react-hook-form\"\nimport { z } from \"zod\"\n\nconst formSchema = z.object({\n  username: z.string().min(2, {\n    message: \"Username must be at least 2 characters.\",\n  }),\n})\n\nexport function ProfileForm() {\n  // 1. Define your form.\n  const form = useForm<z.infer<typeof formSchema>>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      username: \"\",\n    },\n  })\n\n  // 2. Define a submit handler.\n  function onSubmit(values: z.infer<typeof formSchema>) {\n    // Do something with the form values.\n    // ✅ This will be type-safe and validated.\n    console.log(values)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Vue Application Instance Creation\nDESCRIPTION: Shows how to create and mount a Vue application instance with initial state.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/vuejs-developer-llms-context-20250406.md#2025-04-13_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue'\n\ncreateApp({\n  data() {\n    return {\n      count: 0\n    }\n  }\n}).mount('#app')\n```\n\n----------------------------------------\n\nTITLE: Forwarding Props with JSX Spread Syntax in React\nDESCRIPTION: Illustrates how to forward all props to a child component using the spread syntax. This can be useful when a component doesn't use props directly but passes them to its children.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/react-specialist-llms-context-20250406.md#2025-04-13_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Profile(props) {\n  return (\n    <div className=\"card\">\n      <Avatar {...props} />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Route Module Implementation in Remix TSX\nDESCRIPTION: Full route module example showing integration of server-side functions (loader, action, headers) with client-side component rendering and form handling.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/remix-developer-llms-context-20250406.md#2025-04-13_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {\n  ActionFunctionArgs,\n  HeadersFunction,\n  LoaderFunctionArgs,\n} from \"@remix-run/node\";\nimport { json } from \"@remix-run/node\";\nimport { useLoaderData } from \"@remix-run/react\";\n\nimport { getUser, updateUser } from \"../user\";\n\nexport const headers: HeadersFunction = () => ({\n  \"Cache-Control\": \"max-age=300, s-maxage=3600\",\n});\n\nexport async function loader({\n  request,\n}: LoaderFunctionArgs) {\n  const user = await getUser(request);\n  return json({\n    displayName: user.displayName,\n    email: user.email,\n  });\n}\n\nexport default function Component() {\n  const user = useLoaderData<typeof loader>();\n  return (\n    <Form action=\"/account\">\n      <h1>Settings for {user.displayName}</h1>\n\n      <input\n        name=\"displayName\"\n        defaultValue={user.displayName}\n      />\n      <input name=\"email\" defaultValue={user.email} />\n\n      <button type=\"submit\">Save</button>\n    </Form>\n  );\n}\n\nexport async function action({\n  request,\n}: ActionFunctionArgs) {\n  const formData = await request.formData();\n  const user = await getUser(request);\n\n  await updateUser(user.id, {\n    email: formData.get(\"email\"),\n    displayValue: formData.get(\"displayName\"),\n  });\n\n  return json({ ok: true });\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Dependency Function in Python for FastAPI\nDESCRIPTION: This snippet defines a common_parameters function that serves as a dependency for FastAPI route handlers. It processes query parameters for pagination and filtering, demonstrating how to create reusable dependencies.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/fastapi-developer-llms-context-20250406.md#2025-04-13_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\ndef common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n```\n\n----------------------------------------\n\nTITLE: Defining Classes in TypeScript\nDESCRIPTION: Demonstrates the declaration of a class in TypeScript, including a constructor and method. Classes in TypeScript support object-oriented programming patterns.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/031-frontend/typescript-specialist/031-work-fe-typescript-specialist.mode.md#2025-04-13_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass Greeter { constructor(message: string) {} greet() {} }\n```\n\n----------------------------------------\n\nTITLE: Implementing Generic Parameter Defaults in TypeScript\nDESCRIPTION: Shows how to use default type parameters in generic functions, making them optional to specify and providing more flexibility in function signatures.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/typescript-specialist-llms-context-20250406.md#2025-04-13_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function create<T extends HTMLElement = HTMLDivElement, U extends HTMLElement[] = T[]>(\n  element?: T,\n  children?: U\n): Container<T, U>;\n```\n\n----------------------------------------\n\nTITLE: Memoization with useMemo\nDESCRIPTION: Using useMemo hook to cache expensive calculations\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/react-specialist-llms-context-20250406.md#2025-04-13_snippet_45\n\nLANGUAGE: jsx\nCODE:\n```\nfunction TodoList({ todos, filter }) {\n  const [newTodo, setNewTodo] = useState('');\n  const visibleTodos = useMemo(() => {\n    // ✅ Does not re-run unless todos or filter change\n    return getFilteredTodos(todos, filter);\n  }, [todos, filter]);\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Supabase Auth in React\nDESCRIPTION: React component that initializes Supabase client, handles authentication state, and renders either an Auth UI component or a logged-in message. It uses the Supabase Auth UI React component and subscribes to auth state changes.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/supabase-developer-llms-context-20250406.md#2025-04-13_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nimport './index.css'\nimport { useState, useEffect } from 'react'\nimport { createClient } from '@supabase/supabase-js'\nimport { Auth } from '@supabase/auth-ui-react'\nimport { ThemeSupa } from '@supabase/auth-ui-shared'\n\nconst supabase = createClient('https://<project>.supabase.co', '<your-anon-key>')\n\nexport default function App() {\n  const [session, setSession] = useState(null)\n\n  useEffect(() => {\n    supabase.auth.getSession().then(({ data: { session } }) => {\n      setSession(session)\n    })\n\n    const {\n      data: { subscription },\n    } = supabase.auth.onAuthStateChange((_event, session) => {\n      setSession(session)\n    })\n\n    return () => subscription.unsubscribe()\n  }, [])\n\n  if (!session) {\n    return (<Auth supabaseClient={supabase} appearance={{ theme: ThemeSupa }} />)\n  }\n  else {\n    return (<div>Logged in!</div>)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Vue Single-File Component Structure\nDESCRIPTION: Complete example of a Vue Single-File Component showing script setup syntax, template with event handling, and scoped styling.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/vuejs-developer-llms-context-20250406.md#2025-04-13_snippet_10\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { ref } from 'vue'\nconst count = ref(0)\n</script>\n\n<template>\n  <button @click=\"count++\">Count is: {{ count }}</button>\n</template>\n\n<style scoped>\nbutton {\n  font-weight: bold;\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Updating State with useState Setter Function in React\nDESCRIPTION: This example demonstrates using the setter function returned by useState to update state in response to an event.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/react-specialist-llms-context-20250406.md#2025-04-13_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nfunction handleClick() {\n  setName('Robin');\n}\n```\n\n----------------------------------------\n\nTITLE: Performing Advanced Querying and Filtering with Django ORM\nDESCRIPTION: Demonstrates advanced querying techniques using the Django ORM, including filtering across relationships, using complex lookups, and applying distinct() for unique results.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/django-developer-llms-context-20250406.md#2025-04-13_snippet_41\n\nLANGUAGE: pycon\nCODE:\n```\n>>> r.article_set.filter(headline__startswith=\"This\")\n<QuerySet [<Article: This is a test>]>\n\n>>> Article.objects.filter(reporter__first_name=\"John\")\n<QuerySet [<Article: John's second story>, <Article: This is a test>]>\n\n>>> Article.objects.filter(reporter__first_name=\"John\", reporter__last_name=\"Smith\")\n<QuerySet [<Article: John's second story>, <Article: This is a test>]>\n\n>>> Article.objects.filter(reporter__in=[1, 2]).distinct()\n<QuerySet [<Article: John's second story>, <Article: Paul's story>, <Article: This is a test>]>\n\n>>> Reporter.objects.filter(article__headline__startswith=\"This\").distinct()\n<QuerySet [<Reporter: John Smith>]>\n```\n\n----------------------------------------\n\nTITLE: Creating a Blank Chart with D3 in JavaScript\nDESCRIPTION: Shows how to create a basic chart structure using D3. It sets up chart dimensions, scales for x and y axes, creates an SVG container, and adds axes. This provides a complete foundation for building various chart types.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/d3js-specialist-llms-context-20250406.md#2025-04-13_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  // Declare the chart dimensions and margins.\n  const width = 640;\n  const height = 400;\n  const marginTop = 20;\n  const marginRight = 20;\n  const marginBottom = 30;\n  const marginLeft = 40;\n\n  // Declare the x (horizontal position) scale.\n  const x = d3.scaleUtc()\n      .domain([new Date(\"2023-01-01\"), new Date(\"2024-01-01\")])\n      .range([marginLeft, width - marginRight]);\n\n  // Declare the y (vertical position) scale.\n  const y = d3.scaleLinear()\n      .domain([0, 100])\n      .range([height - marginBottom, marginTop]);\n\n  // Create the SVG container.\n  const svg = d3.create(\"svg\")\n      .attr(\"width\", width)\n      .attr(\"height\", height);\n\n  // Add the x-axis.\n  svg.append(\"g\")\n      .attr(\"transform\", `translate(0,${height - marginBottom})`)\n      .call(d3.axisBottom(x));\n\n  // Add the y-axis.\n  svg.append(\"g\")\n      .attr(\"transform\", `translate(${marginLeft},0)`)\n      .call(d3.axisLeft(y));\n\n  // Return the SVG element.\n  return svg.node();\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Font Definitions File with Next.js Font System\nDESCRIPTION: Demonstrates how to centralize font loading by creating a definitions file that imports and configures multiple Google and local fonts. This approach improves reusability across components and pages.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/nextjs-developer-llms-context-20250406.md#2025-04-13_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Inter, Lora, Source_Sans_3 } from 'next/font/google'\nimport localFont from 'next/font/local'\n\nconst inter = Inter()\nconst lora = Lora()\nconst sourceCodePro400 = Source_Sans_3({ weight: '400' })\nconst sourceCodePro700 = Source_Sans_3({ weight: '700' })\nconst greatVibes = localFont({ src: './GreatVibes-Regular.ttf' })\n\nexport { inter, lora, sourceCodePro400, sourceCodePro700, greatVibes }\n```\n\n----------------------------------------\n\nTITLE: Implementing padLeft Function with Type Narrowing in TypeScript\nDESCRIPTION: Demonstrates type narrowing using typeof checks to handle different padding types (number or string) in a padLeft function.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/typescript-specialist-llms-context-20250406.md#2025-04-13_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\nfunction padLeft(padding: number | string, input: string): string {\n  if (typeof padding === \"number\") {\n    return \" \".repeat(padding) + input;\n  }\n  return padding + input;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic React Component in JavaScript\nDESCRIPTION: Demonstrates the creation of a simple functional React component using JSX syntax. This pattern is fundamental to building React applications.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/condensed_indices/react-specialist-condensed-index.md#2025-04-13_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nfunction MyComponent(props) { ... }\n```\n\n----------------------------------------\n\nTITLE: Implementing Exhaustiveness Checking with never Type in TypeScript\nDESCRIPTION: Demonstrates how to use the never type for exhaustiveness checking in switch statements, ensuring all cases of a discriminated union are handled.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/typescript-specialist-llms-context-20250406.md#2025-04-13_snippet_47\n\nLANGUAGE: typescript\nCODE:\n```\ntype Shape = Circle | Square;\n\nfunction getArea(shape: Shape) {\n  switch (shape.kind) {\n    case \"circle\":\n      return Math.PI * shape.radius ** 2;\n    case \"square\":\n      return shape.sideLength ** 2;\n    default:\n      const _exhaustiveCheck: never = shape;\n      return _exhaustiveCheck;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up a New Next.js Project with create-next-app\nDESCRIPTION: Uses the create-next-app CLI tool to initialize a new Next.js project with the latest version. This command starts the installation process and prompts for project configuration options such as TypeScript, ESLint, and Tailwind CSS.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/nextjs-developer-llms-context-20250406.md#2025-04-13_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app@latest\n```\n\n----------------------------------------\n\nTITLE: Declaring Reactive State in Vue.js\nDESCRIPTION: Shows how to create reactive state using ref() for primitives and reactive() for objects. These are fundamental to Vue's reactivity system.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/condensed_indices/vuejs-developer-condensed-index.md#2025-04-13_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nref(value)\nreactive(object)\n```\n\n----------------------------------------\n\nTITLE: Implementing Generic Class-Based Views in Django\nDESCRIPTION: Shows implementation of Django's generic ListView and DetailView classes for a polls application. This example includes custom template names and context object handling for the index, detail, and results views.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/django-developer-llms-context-20250406.md#2025-04-13_snippet_35\n\nLANGUAGE: python\nCODE:\n```\nfrom django.views import generic\n\nclass IndexView(generic.ListView):\n    template_name = \"polls/index.html\"\n    context_object_name = \"latest_question_list\"\n\n    def get_queryset(self):\n        \"\"\"Return the last five published questions.\"\"\"\n        return Question.objects.order_by(\"-pub_date\")[:5]\n\n\nclass DetailView(generic.DetailView):\n    model = Question\n    template_name = \"polls/detail.html\"\n\n\nclass ResultsView(generic.DetailView):\n    model = Question\n    template_name = \"polls/results.html\"\n```\n\n----------------------------------------\n\nTITLE: Select Binding with v-model in Vue\nDESCRIPTION: This snippet demonstrates v-model usage with select elements in Vue, including examples for single and multiple selections. It shows how to bind form inputs to component state.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/vuejs-developer-llms-context-20250406.md#2025-04-13_snippet_29\n\nLANGUAGE: vue\nCODE:\n```\n<select v-model=\"selected\">\n  <option disabled value=\"\">Please select one</option>\n  <option>A</option>\n  <option>B</option>\n  <option>C</option>\n</select>\n```\n\nLANGUAGE: vue\nCODE:\n```\n<select v-model=\"selected\" multiple>\n  <option>A</option>\n  <option>B</option>\n  <option>C</option>\n</select>\n```\n\n----------------------------------------\n\nTITLE: WebSocket Endpoint Implementation\nDESCRIPTION: Shows how to create a WebSocket endpoint for real-time communication.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/fastapi-developer-llms-context-20250406.md#2025-04-13_snippet_32\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI, WebSocket\n\napp = FastAPI()\n\n@app.websocket(\"/ws\")\nasync def websocket_endpoint(websocket: WebSocket):\n    await websocket.accept()\n    while True:\n        data = await websocket.receive_text()\n        await websocket.send_text(f\"Message text was: {data}\")\n```\n\n----------------------------------------\n\nTITLE: Initializing a Flask Web Application in Python\nDESCRIPTION: This code creates a minimal Flask web application that responds with 'Hello, World!' when accessed at the root route. It demonstrates importing Flask, creating an application instance, defining a route, and running the server.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/flask-developer-llms-context-20250406.md#2025-04-13_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Dependency Injection in FastAPI\nDESCRIPTION: Illustrates the use of dependency injection in FastAPI for managing shared resources like database connections. This pattern promotes code reusability and efficient resource management.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/condensed_indices/fastapi-developer-condensed-index.md#2025-04-13_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom fastapi import Depends\nfrom typing import Annotated\n\nasync def get_db():\n    db = await connect_to_db()\n    try:\n        yield db\n    finally:\n        await db.close()\n\n@app.get(\"/users/\")\nasync def read_users(db: Annotated[AsyncSession, Depends(get_db)]):\n    users = await db.execute(select(User))\n    return users.scalars().all()\n```\n\n----------------------------------------\n\nTITLE: Implementing Redirects in SvelteKit Form Actions\nDESCRIPTION: Demonstrates how to implement redirects in SvelteKit form actions using the redirect function from @sveltejs/kit. This example shows login and registration actions with error handling and redirects.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/sveltekit-llms-context-20250406.md#2025-04-13_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\n// @errors: 2345\n/// file: src/routes/login/+page.server.js\nimport { fail, redirect } from '@sveltejs/kit';\nimport * as db from '$lib/server/db';\n\n/** @satisfies {import('./$types').Actions} */\nexport const actions = {\n\tlogin: async ({ cookies, request, url }) => {\n\t\tconst data = await request.formData();\n\t\tconst email = data.get('email');\n\t\tconst password = data.get('password');\n\n\t\tconst user = await db.getUser(email);\n\t\tif (!user) {\n\t\t\treturn fail(400, { email, missing: true });\n\t\t}\n\n\t\tif (user.password !== db.hash(password)) {\n\t\t\treturn fail(400, { email, incorrect: true });\n\t\t}\n\n\t\tcookies.set('sessionid', await db.createSession(user), { path: '/' });\n\n\t\tif (url.searchParams.has('redirectTo')) {\n\t\t\tredirect(303, url.searchParams.get('redirectTo'));\n\t\t}\n\n\t\treturn { success: true };\n\t},\n\tregister: async (event) => {\n\t\t// TODO register the user\n\t}\n};\n```\n\n----------------------------------------\n\nTITLE: Throwing Expected Errors in SvelteKit Page Load Function\nDESCRIPTION: This snippet demonstrates how to throw an expected error using the 'error' helper from '@sveltejs/kit' in a page server load function. It checks if a post exists and throws a 404 error if not found.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/sveltekit-llms-context-20250406.md#2025-04-13_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nimport { error } from '@sveltejs/kit';\nimport * as db from '$lib/server/database';\n\n/** @type {import('./$types').PageServerLoad} */\nexport async function load({ params }) {\n\tconst post = await db.getPost(params.slug);\n\n\tif (!post) {\n\t\terror(404, {\n\t\t\tmessage: 'Not found'\n\t\t});\n\t}\n\n\treturn { post };\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Authentication Backend in Django\nDESCRIPTION: This code snippet demonstrates how to create a custom authentication backend that authenticates against settings-defined credentials and creates a superuser on first login. It overrides the authenticate and get_user methods of BaseBackend.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/django-developer-llms-context-20250406.md#2025-04-13_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nfrom django.conf import settings\nfrom django.contrib.auth.backends import BaseBackend\nfrom django.contrib.auth.hashers import check_password\nfrom django.contrib.auth.models import User\n\nclass SettingsBackend(BaseBackend):\n    def authenticate(self, request, username=None, password=None):\n        login_valid = settings.ADMIN_LOGIN == username\n        pwd_valid = check_password(password, settings.ADMIN_PASSWORD)\n        if login_valid and pwd_valid:\n            try:\n                user = User.objects.get(username=username)\n            except User.DoesNotExist:\n                user = User(username=username)\n                user.is_staff = True\n                user.is_superuser = True\n                user.save()\n            return user\n        return None\n\n    def get_user(self, user_id):\n        try:\n            return User.objects.get(pk=user_id)\n        except User.DoesNotExist:\n            return None\n```\n\n----------------------------------------\n\nTITLE: Implementing a Generic Class in TypeScript\nDESCRIPTION: Creates a generic class that can work with different types of numeric values, demonstrating TypeScript's powerful generic capabilities.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/typescript-specialist-llms-context-20250406.md#2025-04-13_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nclass GenericNumber<NumType> {\n  zeroValue: NumType;\n  add: (x: NumType, y: NumType) => NumType;\n}\n```\n\n----------------------------------------\n\nTITLE: Generic Classes and Interfaces\nDESCRIPTION: Examples of generic class and interface declarations in TypeScript.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/condensed_indices/typescript-specialist-condensed-index.md#2025-04-13_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nclass Box<T> { contents: T; }\ninterface Collection<T> { add(item: T): void; }\n```\n\n----------------------------------------\n\nTITLE: Declaring Props in Vue 3 Composition API\nDESCRIPTION: This snippet demonstrates how to declare props using the defineProps macro in a Vue 3 Single File Component with <script setup>. It shows the basic syntax for prop declaration and usage.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/vuejs-developer-llms-context-20250406.md#2025-04-13_snippet_17\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst props = defineProps(['foo'])\n\nconsole.log(props.foo)\n</script>\n```\n\n----------------------------------------\n\nTITLE: Setting Response Status Code in FastAPI\nDESCRIPTION: This example shows how to set HTTP status codes for FastAPI path operations using both direct integer codes and status constants. It demonstrates setting a custom status code for a created item.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/fastapi-developer-llms-context-20250406.md#2025-04-13_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI, status\n\napp = FastAPI()\n\n@app.get(\"/items/\", status_code=status.HTTP_201_CREATED)\nasync def create_item():\n    return {\"name\": \"item\", \"id\": 1}\n```\n\n----------------------------------------\n\nTITLE: Using TypeScript with Supabase.js v2\nDESCRIPTION: Demonstrates how to use TypeScript with Supabase.js v2, including importing database definitions and creating a typed client.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/supabase-developer-llms-context-20250406.md#2025-04-13_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Database } from './DatabaseDefinitions'\n\nconst supabase = createClient<Database>(SUPABASE_URL, ANON_KEY)\n\nconst { data } = await supabase.from('messages').select().match({ id: 1 })\n```\n\n----------------------------------------\n\nTITLE: Handling Database Transactions with Nested Atomic Blocks in Django\nDESCRIPTION: Demonstrates error handling pattern with nested atomic blocks for database integrity errors. This ensures database consistency by managing transactions properly when errors occur.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/django-developer-llms-context-20250406.md#2025-04-13_snippet_33\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import IntegrityError, transaction\n\n@transaction.atomic\ndef viewfunc(request):\n    create_parent()\n\n    try:\n        with transaction.atomic():\n            generate_relationships()\n    except IntegrityError:\n        handle_exception()\n\n    add_children()\n```\n\n----------------------------------------\n\nTITLE: Complete Remix Route Module Implementation\nDESCRIPTION: Full route module implementation showing loader for data fetching, action for form handling, and component rendering with error handling.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/remix-developer-llms-context-20250406.md#2025-04-13_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nexport async function loader() {\n  return json(await db.projects.findAll());\n}\n\nexport default function Projects() {\n  const projects = useLoaderData<typeof loader>();\n  const actionData = useActionData<typeof action>();\n\n  return (\n    <div>\n      {projects.map((project) => (\n        <Link key={project.slug} to={project.slug}>\n          {project.title}\n        </Link>\n      ))}\n\n      <Form method=\"post\">\n        <input name=\"title\" />\n        <button type=\"submit\">Create New Project</button>\n      </Form>\n      {actionData?.errors ? (\n        <ErrorMessages errors={actionData.errors} />\n      ) : null}\n\n      <Outlet />\n    </div>\n  );\n}\n\nexport async function action({\n  request,\n}: ActionFunctionArgs) {\n  const form = await request.formData();\n  const errors = validate(form);\n  if (errors) {\n    return json({ errors });\n  }\n  await createProject({ title: form.get(\"title\") });\n  return json({ ok: true });\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Image Gallery with React useState Hook\nDESCRIPTION: This component uses the useState hook to manage state for an image gallery. It demonstrates how to update state and conditionally render content based on state values.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/react-specialist-llms-context-20250406.md#2025-04-13_snippet_20\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { sculptureList } from './data.js';\n\nexport default function Gallery() {\n  const [index, setIndex] = useState(0);\n  const [showMore, setShowMore] = useState(false);\n  const hasNext = index < sculptureList.length - 1;\n\n  function handleNextClick() {\n    if (hasNext) {\n      setIndex(index + 1);\n    } else {\n      setIndex(0);\n    }\n  }\n\n  function handleMoreClick() {\n    setShowMore(!showMore);\n  }\n\n  let sculpture = sculptureList[index];\n  return (\n    // Component JSX\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing User Authentication with OAuth2\nDESCRIPTION: This snippet creates a dependency for getting the current user using OAuth2 token authentication. It includes a fake utility function for token validation and user retrieval, demonstrating the structure of authentication in FastAPI.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/fastapi-developer-llms-context-20250406.md#2025-04-13_snippet_14\n\nLANGUAGE: python\nCODE:\n```\ndef fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\",\n        email=\"john@example.com\",\n        full_name=\"John Doe\"\n    )\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    user = fake_decode_token(token)\n    return user\n```\n\n----------------------------------------\n\nTITLE: Implementing a Global Error Handler in Next.js\nDESCRIPTION: Shows how to create a client-side global error boundary component that handles errors occurring in the root layout. This component includes the required HTML and body tags and provides a reset mechanism.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/nextjs-developer-llms-context-20250406.md#2025-04-13_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\n'use client' // Error boundaries must be Client Components\n\nexport default function GlobalError({\n  error,\n  reset,\n}: {\n  error: Error & { digest?: string }\n  reset: () => void\n}) {\n  return (\n    // global-error must include html and body tags\n    <html>\n      <body>\n        <h2>Something went wrong!</h2>\n        <button onClick={() => reset()}>Try again</button>\n      </body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Building Form with React Hook Form and Zod Validation in TypeScript\nDESCRIPTION: A complete implementation of a profile form using React Hook Form with Zod validation. This component demonstrates the integration of custom form components with form validation and submission handling.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/shadcn-ui-specialist-llms-context-20250406.md#2025-04-13_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\"\n\nimport { zodResolver } from \"@hookform/resolvers/zod\"\nimport { useForm } from \"react-hook-form\"\nimport { z } from \"zod\"\n\nimport { Button } from \"@/components/ui/button\"\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\"\nimport { Input } from \"@/components/ui/input\"\n\nconst formSchema = z.object({\n  username: z.string().min(2, {\n    message: \"Username must be at least 2 characters.\",\n  }),\n})\n\nexport function ProfileForm() {\n  // ...\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-8\">\n        <FormField\n          control={form.control}\n          name=\"username\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Username</FormLabel>\n              <FormControl>\n                <Input placeholder=\"shadcn\" {...field} />\n              </FormControl>\n              <FormDescription>\n                This is your public display name.\n              </FormDescription>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <Button type=\"submit\">Submit</Button>\n      </form>\n    </Form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing a Flask Application with Configuration in Python\nDESCRIPTION: Creates a basic Flask application with configuration settings from both hard-coded values and environment variables with prefixes. Defines a simple root route that returns a hello world message.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/flask-developer-llms-context-20250406.md#2025-04-13_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import Flask\n\napp = Flask(__name__)\napp.config.from_mapping(\n    SECRET_KEY=\"dev\",\n)\napp.config.from_prefixed_env()\n\n@app.route(\"/\")\ndef index():\n    return \"Hello, World!\"\n```\n\n----------------------------------------\n\nTITLE: Using the Next.js Link Component for Client-Side Navigation\nDESCRIPTION: Demonstrates how to use the built-in Link component for client-side navigation between routes. This component extends the HTML anchor tag with prefetching capabilities for improved performance.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/nextjs-developer-llms-context-20250406.md#2025-04-13_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport Link from 'next/link'\n\nexport default function Page() {\n\n```\n\n----------------------------------------\n\nTITLE: React Custom Hook for Authenticated Fetch\nDESCRIPTION: Custom hook implementation for making authenticated requests in React applications. Uses the useAuth hook to get the session token and includes it in the Authorization header.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/clerk-auth-specialist-llms-context-20250406.md#2025-04-13_snippet_17\n\nLANGUAGE: jsx\nCODE:\n```\nexport default async function useFetch() {\n  const { getToken } = useAuth()\n\n  const token = await getToken()\n\n  const authenticatedFetch = async (...args) => {\n    return fetch(...args, {\n      headers: { Authorization: `Bearer ${token}` },\n    }).then((res) => res.json())\n  }\n  return authenticatedFetch\n}\n```\n\n----------------------------------------\n\nTITLE: Creating FastAPI Route with Request Body\nDESCRIPTION: Implements a POST route that accepts a request body using Pydantic model validation. The route handler receives the validated Item model instance.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/fastapi-developer-llms-context-20250406.md#2025-04-13_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n@app.post(\"/items/\")\nasync def create_item(item: Item):\n    return item\n```\n\n----------------------------------------\n\nTITLE: Implementing Server-Side Validation in Astro\nDESCRIPTION: Shows comprehensive server-side validation for a registration form. The code checks for valid input formats, performs database validation, and handles error messages before redirecting on successful registration.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/astro-developer-llms-context-20250406.md#2025-04-13_snippet_32\n\nLANGUAGE: astro\nCODE:\n```\n---\nimport { isRegistered, registerUser } from \"../../data/users\"\nimport { isValidEmail } from \"../../utils/isValidEmail\";\n\nconst errors = { username: \"\", email: \"\", password: \"\" };\nif (Astro.request.method === \"POST\") {\n  try {\n    const data = await Astro.request.formData();\n    const name = data.get(\"username\");\n    const email = data.get(\"email\");\n    const password = data.get(\"password\");\n    if (typeof name !== \"string\" || name.length < 1) {\n      errors.username += \"Please enter a username. \";\n    }\n    if (typeof email !== \"string\" || !isValidEmail(email)) {\n      errors.email += \"Email is not valid. \";\n    } else if (await isRegistered(email)) {\n      errors.email += \"Email is already registered. \";\n    }\n    if (typeof password !== \"string\" || password.length < 6) {\n      errors.password += \"Password must be at least 6 characters. \";\n    }\n    const hasErrors = Object.values(errors).some(msg => msg)\n    if (!hasErrors) {\n      await registerUser({name, email, password});\n      return Astro.redirect(\"/login\");\n    }\n  } catch (error) {\n    if (error instanceof Error) {\n      console.error(error.message);\n    }\n  }\n}\n---\n```\n\n----------------------------------------\n\nTITLE: Implementing Clerk Sign-In UI with Multiple Steps in React\nDESCRIPTION: This code snippet showcases a comprehensive implementation of a Clerk sign-in flow using React components. It includes multiple steps for email input, strategy selection, and verification methods (password and email code). The component uses custom Card components and Clerk's components for authentication logic.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/clerk-auth-specialist-llms-context-20250406.md#2025-04-13_snippet_9\n\nLANGUAGE: TSX\nCODE:\n```\n<SignIn.Root>\n  <Clerk.Loading>\n    {(isLoading) => (\n      <>\n        <SignIn.Step name=\"identifier\">\n          <Card className=\"w-full sm:w-96\">\n            <CardHeader>\n              <CardTitle>Sign in</CardTitle>\n              <CardDescription>\n                Enter your email to sign in or create a new account\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <Clerk.Field name=\"identifier\" className=\"space-y-2\">\n                <Clerk.Label asChild>\n                  <Label>Email</Label>\n                </Clerk.Label>\n                <Clerk.Input type=\"email\" required asChild>\n                  <Input />\n                </Clerk.Input>\n                <Clerk.FieldError className=\"block text-sm text-destructive\" />\n              </Clerk.Field>\n            </CardContent>\n            <CardFooter>\n              <div className=\"grid w-full gap-y-4\">\n                <SignIn.Action submit asChild>\n                  <Button disabled={isGlobalLoading}>\n                    <Clerk.Loading>\n                      {(isLoading) => {\n                        return isLoading ? (\n                          <Icons.spinner className=\"size-4 animate-spin\" />\n                        ) : (\n                          'Continue'\n                        )\n                      }}\n                    </Clerk.Loading>\n                  </Button>\n                </SignIn.Action>\n                <Button variant=\"link\" size=\"sm\" asChild>\n                  <Clerk.Link navigate=\"sign-up\">\n                    Don&apos;t have an account? Sign up\n                  </Clerk.Link>\n                </Button>\n              </div>\n            </CardFooter>\n          </Card>\n        </SignIn.Step>\n\n        <SignIn.Step name=\"choose-strategy\">\n          {/* Strategy selection step */}\n        </SignIn.Step>\n\n        <SignIn.Step name=\"verifications\">\n          <SignIn.Strategy name=\"password\">\n            {/* Password verification step */}\n          </SignIn.Strategy>\n\n          <SignIn.Strategy name=\"email_code\">\n            {/* Email code verification step */}\n          </SignIn.Strategy>\n        </SignIn.Step>\n      </>\n    )}\n  </Clerk.Loading>\n</SignIn.Root>\n```\n\n----------------------------------------\n\nTITLE: Creating a Shared Layout with Navigation and Footer in Next.js\nDESCRIPTION: Demonstrates how to build a reusable layout component that includes Navbar and Footer components wrapped around the main content. This pattern helps maintain consistent UI elements across multiple pages.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/nextjs-developer-llms-context-20250406.md#2025-04-13_snippet_33\n\nLANGUAGE: jsx\nCODE:\n```\nimport Navbar from './navbar'\nimport Footer from './footer'\n\nexport default function Layout({ children }) {\n  return (\n    <>\n      <Navbar />\n      <main>{children}</main>\n      <Footer />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Pydantic Data Models\nDESCRIPTION: Example of data model definition using Pydantic BaseModel for request/response validation and serialization.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/032-backend/fastapi-developer/032-work-be-fastapi-developer.mode.md#2025-04-13_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nclass Item(BaseModel):\n    name: str\n    description: str | None = Field(default=None, min_length=1, description=\"Item description\")\n    price: float\n    tax: float | None = None\n```\n\n----------------------------------------\n\nTITLE: Consuming Context with useContext Hook in React\nDESCRIPTION: This example demonstrates reading context values in a component using the useContext Hook.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/react-specialist-llms-context-20250406.md#2025-04-13_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useContext } from 'react';\nimport { LevelContext } from './LevelContext.js';\n\nexport default function Heading({ children }) {\n  const level = useContext(LevelContext);\n  switch (level) {\n    case 1:\n      return <h1>{children}</h1>;\n    case 2:\n```\n\n----------------------------------------\n\nTITLE: Generics Implementation in TypeScript\nDESCRIPTION: Shows how to use generics to create type-safe collections and interfaces with variable types.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/typescript-specialist-llms-context-20250406.md#2025-04-13_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Backpack<Type> {\n  add: (obj: Type) => void;\n  get: () => Type;\n}\n```\n\n----------------------------------------\n\nTITLE: Using selection.join() for Enter, Update, and Exit in D3.js\nDESCRIPTION: Demonstrates the use of selection.join() as a convenient alternative to the explicit general update pattern. It shows how to handle enter, update, and exit selections in a single method call, applying different attributes to each selection.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/d3js-specialist-llms-context-20250406.md#2025-04-13_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nsvg.selectAll(\"circle\")\n  .data(data)\n  .join(\n    enter => enter.append(\"circle\").attr(\"fill\", \"green\"),\n    update => update.attr(\"fill\", \"blue\")\n  )\n    .attr(\"stroke\", \"black\");\n```\n\n----------------------------------------\n\nTITLE: Custom Sign-In Form with Clerk Elements\nDESCRIPTION: Example of building a custom sign-in form using Clerk Elements components with proper structure and error handling\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/condensed_indices/clerk-auth-specialist-condensed-index.md#2025-04-13_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n<SignIn.Root>\n  <SignIn.Step>\n    <Clerk.Field>\n      <Clerk.Label>Email</Clerk.Label>\n      <Clerk.Input type=\"email\" />\n      <Clerk.FieldError />\n    </Clerk.Field>\n    <SignIn.Action>\n      <Clerk.Loading>Signing in...</Clerk.Loading>\n    </SignIn.Action>\n  </SignIn.Step>\n</SignIn.Root>\n```\n\n----------------------------------------\n\nTITLE: Rendering Lists in React with Map\nDESCRIPTION: Demonstrates how to render a list of components in React using the map function. This pattern is crucial for dynamically generating UI elements from arrays of data, with each item requiring a unique 'key' prop for efficient updates.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/031-frontend/react-specialist/031-work-fe-react-specialist.mode.md#2025-04-13_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\ndata.map(item => <Component key={item.id} {...item} />)\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Server Action in Next.js Server Component\nDESCRIPTION: Demonstrates how to implement a server action within a component using the 'use server' directive. The function can perform server-side mutations while being called from a client component.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/nextjs-developer-llms-context-20250406.md#2025-04-13_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nexport default function Page() {\n  async function create() {\n    'use server'\n    // Mutate data\n  }\n\n  return '...'\n}\n```\n\n----------------------------------------\n\nTITLE: Header-based Authentication in FastAPI\nDESCRIPTION: Implements token-based authentication using headers with error handling.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/fastapi-developer-llms-context-20250406.md#2025-04-13_snippet_29\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Annotated\nfrom fastapi import FastAPI, Header, HTTPException\n\napp = FastAPI()\n\n@app.get(\"/items/\")\nasync def read_items(x_token: Annotated[str | None, Header()] = None):\n    if x_token != \"fake-super-secret-token\":\n        raise HTTPException(status_code=400, detail=\"Invalid X-Token header\")\n    return {\"item\": \"Foo\", \"rating\": 42}\n\n@app.post(\"/items/\")\nasync def create_item(item: dict, x_token: Annotated[str | None, Header()] = None):\n    if x_token != \"fake-super-secret-token\":\n        raise HTTPException(status_code=400, detail=\"Invalid X-Token header\")\n    if not item:\n        raise HTTPException(status_code=400, detail=\"Invalid item\")\n    return {\"item\": item, \"rating\": 42}\n```\n\n----------------------------------------\n\nTITLE: Implementing Error Boundary Component in Next.js (TypeScript)\nDESCRIPTION: Creates a client-side error boundary component that handles runtime errors and provides a fallback UI with error logging and reset functionality. Uses TypeScript with proper type definitions for error and reset props.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/nextjs-developer-llms-context-20250406.md#2025-04-13_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\n'use client' // Error boundaries must be Client Components\n\nimport { useEffect } from 'react'\n\nexport default function Error({\n  error,\n  reset,\n}: {\n  error: Error & { digest?: string }\n  reset: () => void\n}) {\n  useEffect(() => {\n    // Log the error to an error reporting service\n    console.error(error)\n  }, [error])\n\n  return (\n    <div>\n      <h2>Something went wrong!</h2>\n      <button\n        onClick={\n          // Attempt to recover by trying to re-render the segment\n          () => reset()\n        }\n      >\n        Try again\n      </button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using revalidatePath in Next.js Server Action\nDESCRIPTION: Demonstrates how to use revalidatePath to update cached data after a form submission. This server action performs an async operation and then refreshes the cache for the specified path.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/nextjs-developer-llms-context-20250406.md#2025-04-13_snippet_27\n\nLANGUAGE: ts\nCODE:\n```\n'use server'\n\nimport { revalidatePath } from 'next/cache'\n\nexport default async function submit() {\n  await submitForm()\n  revalidatePath('/')\n}\n```\n\n----------------------------------------\n\nTITLE: Optimizing Re-renders with useMemo and useCallback in React\nDESCRIPTION: Demonstrates how to use useMemo and useCallback Hooks to optimize re-renders when passing objects and functions via context in a React application.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/react-specialist-llms-context-20250406.md#2025-04-13_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nfunction MyApp() {\n  const [currentUser, setCurrentUser] = useState(null);\n\n  const login = useCallback((response) => {\n    storeCredentials(response.credentials);\n    setCurrentUser(response.user);\n  }, []);\n\n  const contextValue = useMemo(() => ({\n    currentUser,\n    login\n  }), [currentUser, login]);\n\n  return (\n    <AuthContext.Provider value={contextValue}>\n      <Page />\n    </AuthContext.Provider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing APIRouter for User Routes\nDESCRIPTION: Shows how to create and use APIRouter for organizing user-related endpoints.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/fastapi-developer-llms-context-20250406.md#2025-04-13_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import APIRouter\n\nrouter = APIRouter()\n\n@router.get(\"/users/\", tags=[\"users\"])\nasync def read_users():\n    return [{\"username\": \"Rick\"}, {\"username\": \"Morty\"}]\n\n@router.get(\"/users/me\", tags=[\"users\"])\nasync def read_user_me():\n    return {\"username\": \"fakecurrentuser\"}\n\n@router.get(\"/users/{username}\", tags=[\"users\"])\nasync def read_user(username: str):\n    return {\"username\": username}\n```\n\n----------------------------------------\n\nTITLE: Configuring Main FastAPI Application with Multiple Routers\nDESCRIPTION: Demonstrates the setup of a FastAPI application with multiple included routers, global dependencies, and specialized configurations for admin routes. Includes prefix, tags, and custom response definitions.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/fastapi-developer-llms-context-20250406.md#2025-04-13_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import Depends, FastAPI\nfrom .dependencies import get_query_token\nfrom .routers import items, users\nfrom .internal import admin\n\napp = FastAPI(dependencies=[Depends(get_query_token)])\n\napp.include_router(users.router)\napp.include_router(items.router)\napp.include_router(\n    admin.router,\n    prefix=\"/admin\",\n    tags=[\"admin\"],\n    dependencies=[Depends(get_token_header)],\n    responses={418: {\"description\": \"I'm a teapot\"}},\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Strict Mode\nDESCRIPTION: The 'strict' compiler flag enables comprehensive type checking behavior in TypeScript. When enabled, it activates all strict mode family options by default, though individual checks can be disabled as needed. Future TypeScript versions may add additional strict checks under this flag.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/typescript-specialist-llms-context-20250406.md#2025-04-13_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"strict\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Intersection Types for Network Responses in TypeScript\nDESCRIPTION: Demonstrates how to combine multiple interfaces using intersection types with the & operator to create new types that have all properties from both types. Shows practical usage with network response handling for artwork and artist data.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/typescript-specialist-llms-context-20250406.md#2025-04-13_snippet_48\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ErrorHandling {\n  success: boolean;\n  error?: { message: string };\n}\n\ninterface ArtworksData {\n  artworks: { title: string }[];\n}\n\ninterface ArtistsData {\n  artists: { name: string }[];\n}\n\ntype ArtworksResponse = ArtworksData & ErrorHandling;\ntype ArtistsResponse = ArtistsData & ErrorHandling;\n```\n\n----------------------------------------\n\nTITLE: Implementing Partial Prerendering in Next.js Page Component\nDESCRIPTION: Shows how to use Partial Prerendering (PPR) to combine static and dynamic content in a Next.js page. The experimental_ppr flag enables this feature, while Suspense handles the dynamic component loading.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/nextjs-developer-llms-context-20250406.md#2025-04-13_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Suspense } from 'react'\nimport { StaticComponent, DynamicComponent, Fallback } from '@/app/ui'\n\nexport const experimental_ppr = true\n\nexport default function Page() {\n  return (\n    <>\n      <StaticComponent />\n      <Suspense fallback={<Fallback />}>\n        <DynamicComponent />\n      </Suspense>\n    </>\n  )\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Suspense } from \"react\"\nimport { StaticComponent, DynamicComponent, Fallback } from \"@/app/ui\"\n\nexport const experimental_ppr = true\n\nexport default function Page() {\n  return {\n     <>\n      <StaticComponent />\n      <Suspense fallback={<Fallback />}>\n        <DynamicComponent />\n      </Suspense>\n     </>\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Async Server Component in Next.js\nDESCRIPTION: Structure of an async Server Component in Next.js, allowing for data fetching and asynchronous operations directly within the component.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/condensed_indices/nextjs-developer-condensed-index.md#2025-04-13_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nasync function Component() {\n  // Async operations here\n}\n```\n\n----------------------------------------\n\nTITLE: Using useContext Hook for Modern Context Usage in React\nDESCRIPTION: Shows the recommended way to read context values using the useContext Hook in a React component.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/react-specialist-llms-context-20250406.md#2025-04-13_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Button() {\n  const theme = useContext(ThemeContext);\n  return <button className={theme} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing File Upload and Validation in Flask\nDESCRIPTION: Handles file uploads in Flask with validation for allowed file extensions. Implements secure filename handling and provides a simple HTML form for upload. Includes flash messages for error states.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/flask-developer-llms-context-20250406.md#2025-04-13_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndef allowed_file(filename):\n    return '.' in filename and \\\n           filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS\n\n@app.route('/', methods=['GET', 'POST'])\ndef upload_file():\n    if request.method == 'POST':\n        # check if the post request has the file part\n        if 'file' not in request.files:\n            flash('No file part')\n            return redirect(request.url)\n        file = request.files['file']\n        # If the user does not select a file, the browser submits an\n        # empty file without a filename.\n        if file.filename == '':\n            flash('No selected file')\n            return redirect(request.url)\n        if file and allowed_file(file.filename):\n            filename = secure_filename(file.filename)\n            file.save(os.path.join(app.config['UPLOAD_FOLDER'], filename))\n            return redirect(url_for('download_file', name=filename))\n    return '''\n    <!doctype html>\n    <title>Upload new File</title>\n    <h1>Upload new File</h1>\n    <form method=post enctype=multipart/form-data>\n      <input type=file name=file>\n      <input type=submit value=Upload>\n    </form>\n    '''\n```\n\n----------------------------------------\n\nTITLE: Fetching Data with ORM or Database in Next.js Server Component\nDESCRIPTION: Shows how to fetch data directly from a database using an ORM within a Server Component. The component queries a database for blog posts and renders them in an unordered list without client-side caching.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/nextjs-developer-llms-context-20250406.md#2025-04-13_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { db, posts } from '@/lib/db'\n\nexport default async function Page() {\n  const allPosts = await db.select().from(posts)\n  return (\n    <ul>\n      {allPosts.map((post) => (\n        <li key={post.id}>{post.title}</li>\n      ))}\n    </ul>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Vue Component with Options API\nDESCRIPTION: Shows basic component structure using Options API with data property for state management.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/vuejs-developer-llms-context-20250406.md#2025-04-13_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script>\nexport default {\n  data() {\n    return {\n      count: 0\n    }\n  }\n}\n</script>\n\n<template>\n  <button @click=\"count++\">You clicked me {{ count }} times.</button>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Defining Callback Return Types in TypeScript\nDESCRIPTION: Illustrates the proper way to define return types for callbacks, using 'void' instead of 'any' when the return value is ignored to catch potential errors.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/typescript-specialist-llms-context-20250406.md#2025-04-13_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n/* WRONG */\nfunction fn(x: () => any) {\n  x();\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n/* OK */\nfunction fn(x: () => void) {\n  x();\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nfunction fn(x: () => void) {\n  var k = x(); // oops! meant to do something else\n  k.doSomething(); // error, but would be OK if the return type had been 'any'\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Functional React Component\nDESCRIPTION: Demonstrates the basic structure of a functional React component using JSX. This pattern is fundamental to building React applications, allowing for the creation of reusable UI elements.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/031-frontend/react-specialist/031-work-fe-react-specialist.mode.md#2025-04-13_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nfunction MyComponent(props) { return <jsx />; }\n```\n\n----------------------------------------\n\nTITLE: Vue TypeScript Component Definition\nDESCRIPTION: Demonstrates TypeScript integration with Vue components using defineComponent and proper props typing.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/vuejs-developer-llms-context-20250406.md#2025-04-13_snippet_41\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineComponent } from 'vue'\n\nexport default defineComponent({\n  // type inference enabled\n  props: {\n    message: String\n  },\n  setup(props) {\n    props.message // type: string | undefined\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Cached GET Route Handler with MongoDB API Connection\nDESCRIPTION: Implements a static Route Handler that fetches data from MongoDB API and returns a JSON response. It uses force-static configuration for caching and includes authentication with an environment variable API key.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/nextjs-developer-llms-context-20250406.md#2025-04-13_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const dynamic = 'force-static'\n\nexport async function GET() {\n  const res = await fetch('https://data.mongodb-api.com/...', {\n    headers: {\n      'Content-Type': 'application/json',\n      'API-Key': process.env.DATA_API_KEY,\n    },\n  })\n  const data = await res.json()\n\n  return Response.json({ data })\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Root Route with Document Components in Remix TSX\nDESCRIPTION: Sets up the root route configuration with document-level components including Links, Meta, Scripts and global stylesheet integration. Establishes the basic HTML structure and client-side functionality.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/remix-developer-llms-context-20250406.md#2025-04-13_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { LinksFunction } from \"@remix-run/node\";\nimport {\n  Links,\n  LiveReload,\n  Meta,\n  Outlet,\n  Scripts,\n  ScrollRestoration,\n} from \"@remix-run/react\";\n\nimport globalStylesheetUrl from \"./global-styles.css\";\n\nexport const links: LinksFunction = () => {\n  return [{ rel: \"stylesheet\", href: globalStylesheetUrl }];\n};\n\nexport default function App() {\n  return (\n    <html lang=\"en\">\n      <head>\n        <meta charSet=\"utf-8\" />\n        <meta\n          name=\"viewport\"\n          content=\"width=device-width, initial-scale=1\"\n        />\n        <Meta />\n        <Links />\n      </head>\n      <body>\n        <Outlet />\n        <ScrollRestoration />\n        <Scripts />\n        <LiveReload />\n      </body>\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Client-Side Navigation with next/link in React\nDESCRIPTION: Usage of the Link component from next/link for client-side navigation in Next.js applications. This component enables smooth transitions between pages without full page reloads.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/condensed_indices/nextjs-developer-condensed-index.md#2025-04-13_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Link href=\"/path\">\n```\n\n----------------------------------------\n\nTITLE: Defining Full Function Types in TypeScript\nDESCRIPTION: Illustrates how to write the complete type of a function in TypeScript, including parameter types and return type using arrow notation. The example defines an add function with typed parameters and return value.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/typescript-specialist-llms-context-20250406.md#2025-04-13_snippet_50\n\nLANGUAGE: typescript\nCODE:\n```\nlet myAdd: (x: number, y: number) => number = function (\n  x: number,\n  y: number\n): number {\n  return x + y;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing API Route Handler in Next.js\nDESCRIPTION: Structure of an API Route Handler in Next.js, defining endpoints using HTTP methods. This example shows a GET request handler using the NextRequest object.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/condensed_indices/nextjs-developer-condensed-index.md#2025-04-13_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function GET(request: NextRequest) {\n  // Handle GET request\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Response Model with Type Annotations\nDESCRIPTION: This example shows how to declare response types using Python type annotations on path operation functions. It demonstrates returning a list of items with a specific type annotation.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/fastapi-developer-llms-context-20250406.md#2025-04-13_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef read_items() -> List[Item]:\n    return [\"Portal gun\", \"Plumbus\"]\n```\n\n----------------------------------------\n\nTITLE: Custom Database Session Storage Implementation\nDESCRIPTION: Creates custom session storage using a database in Remix with CRUD operations for session management.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/remix-developer-llms-context-20250406.md#2025-04-13_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSessionStorage } from \"@remix-run/node\";\n\nfunction createDatabaseSessionStorage({\n  cookie,\n  host,\n  port,\n}) {\n  const db = createDatabaseClient(host, port);\n\n  return createSessionStorage({\n    cookie,\n    async createData(data, expires) {\n      const id = await db.insert(data);\n      return id;\n    },\n    async readData(id) {\n      return (await db.select(id)) || null;\n    },\n    async updateData(id, data, expires) {\n      await db.update(id, data);\n    },\n    async deleteData(id) {\n      await db.delete(id);\n    },\n  });\n}\n\nconst { getSession, commitSession, destroySession } =\n  createDatabaseSessionStorage({\n    host: \"localhost\",\n    port: 1234,\n    cookie: {\n      name: \"__session\",\n      sameSite: \"lax\",\n    },\n  });\n```\n\n----------------------------------------\n\nTITLE: Importing and Using CSS Modules in Next.js App Router\nDESCRIPTION: Shows how to import and apply CSS Modules in a Next.js application using the App Router. The styles object provides access to scoped CSS classes that can be applied to components.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/nextjs-developer-llms-context-20250406.md#2025-04-13_snippet_26\n\nLANGUAGE: tsx\nCODE:\n```\nimport styles from './styles.module.css'\n\nexport default function DashboardLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return <section className={styles.dashboard}>{children}</section>\n}\n```\n\nLANGUAGE: css\nCODE:\n```\n.dashboard {\n  padding: 24px;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Partial Prerendering with User Component and Skeleton\nDESCRIPTION: Demonstrates Partial Prerendering with a dynamic User component wrapped in Suspense. The static heading is prerendered while the User component loads dynamically with an AvatarSkeleton fallback.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/nextjs-developer-llms-context-20250406.md#2025-04-13_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Suspense } from 'react'\nimport { User, AvatarSkeleton } from './user'\n\nexport const experimental_ppr = true\n\nexport default function Page() {\n  return (\n    <section>\n      <h1>This will be prerendered</h1>\n      <Suspense fallback={<AvatarSkeleton />}>\n        <User />\n      </Suspense>\n    </section>\n  )\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Suspense } from 'react'\nimport { User, AvatarSkeleton } from './user'\n\nexport const experimental_ppr = true\n\nexport default function Page() {\n  return (\n    <section>\n      <h1>This will be prerendered</h1>\n      <Suspense fallback={<AvatarSkeleton />}>\n        <User />\n      </Suspense>\n    </section>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: MongoDB Aggregation Pipeline\nDESCRIPTION: Execution of multi-stage aggregation pipelines for data processing and analysis.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/033-database/mongodb-specialist/033-work-db-mongodb-specialist.mode.md#2025-04-13_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ndb.collection.aggregate([<stage1>, <stage2>, ...])\n```\n\n----------------------------------------\n\nTITLE: Connecting to Neon Database in Go Application\nDESCRIPTION: Establishes a connection to a Neon PostgreSQL database from a Go application using the sql/db package and lib/pq driver. It connects to the database, executes a version query, and handles potential errors.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/neon-db-specialist-llms-context-20250406.md#2025-04-13_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"database/sql\"\n    \"fmt\"\n\n    _ \"github.com/lib/pq\"\n)\n\nfunc main() {\n    connStr := \"postgresql://[user]:[password]@[neon_hostname]/[dbname]?sslmode=require\"\n    db, err := sql.Open(\"postgres\", connStr)\n    if err != nil {\n        panic(err)\n    }\n    defer db.Close()\n\n    var version string\n    if err := db.QueryRow(\"select version()\").Scan(&version); err != nil {\n        panic(err)\n    }\n\n    fmt.Printf(\"version=%s\\n\", version)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Flask Application in Python\nDESCRIPTION: A minimal Flask application setup that creates an instance and defines a simple root route that returns a hello world message.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/flask-developer-llms-context-20250406.md#2025-04-13_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import Flask\n\napp = Flask(__name__)\n\n@app.route(\"/\")\ndef hello():\n    return \"Hello, World!\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Nested Dashboard Layout in Next.js\nDESCRIPTION: Shows how to implement a nested layout specifically for dashboard routes in Next.js. These layouts enable more granular UI structure control for specific route segments within the application.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/nextjs-developer-llms-context-20250406.md#2025-04-13_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\nexport default function DashboardLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return <section>{children}</section>\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function DashboardLayout({ children }) {\n  return <section>{children}</section>\n}\n```\n\n----------------------------------------\n\nTITLE: Using auth() Helper in Next.js Server Components\nDESCRIPTION: Demonstrates how to use Clerk's auth() helper function in a Next.js server component to access authentication data dynamically at request time. This approach opts the entire route into dynamic rendering.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/clerk-auth-specialist-llms-context-20250406.md#2025-04-13_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport { auth } from '@clerk/nextjs/server'\n\n// This page will be dynamically rendered at request time\nexport default async function Page() {\n  const { userId } = await auth()\n\n  return <p>Hello, {userId}</p>\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Page Loading with Parameters in SvelteKit\nDESCRIPTION: Shows how to implement dynamic page loading using +page.js for blog posts with error handling. This example demonstrates loading content based on a slug parameter and throwing a 404 error if not found.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/sveltekit-llms-context-20250406.md#2025-04-13_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\n/// file: src/routes/blog/[slug]/+page.js\nimport { error } from '@sveltejs/kit';\n\n/** @type {import('./$types').PageLoad} */\nexport function load({ params }) {\n\tif (params.slug === 'hello-world') {\n\t\treturn {\n\t\t\ttitle: 'Hello world!',\n\t\t\tcontent: 'Welcome to our blog. Lorem ipsum dolor sit amet...'\n\t\t};\n\t}\n\n\terror(404, 'Not found');\n}\n```\n\n----------------------------------------\n\nTITLE: Providing Context to a Component Tree in React\nDESCRIPTION: This snippet shows how to wrap a component or part of the tree with a context provider to make the context value available to all components inside it.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/react-specialist-llms-context-20250406.md#2025-04-13_snippet_28\n\nLANGUAGE: jsx\nCODE:\n```\nfunction MyPage() {\n  return (\n    <ThemeContext.Provider value=\"dark\">\n      <Form />\n    </ThemeContext.Provider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Async FastAPI Route Example\nDESCRIPTION: This snippet demonstrates the basic pattern for creating an asynchronous path operation function in FastAPI using async/await syntax. It shows how to handle asynchronous operations within a FastAPI route.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/fastapi-developer-llms-context-20250406.md#2025-04-13_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\n@app.get('/')\nasync def read_results():\n    results = await some_library()\n    return results\n```\n\n----------------------------------------\n\nTITLE: Implementing Lazy Loading with Suspense in React\nDESCRIPTION: Provides a complete example of implementing lazy loading in a React component. It includes state management, conditional rendering, and error handling with Suspense for a MarkdownEditor component.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/react-specialist-llms-context-20250406.md#2025-04-13_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState, Suspense, lazy } from 'react';\nimport Loading from './Loading.js';\n\nconst MarkdownPreview = lazy(() => delayForDemo(import('./MarkdownPreview.js')));\n\nexport default function MarkdownEditor() {\n  const [showPreview, setShowPreview] = useState(false);\n  const [markdown, setMarkdown] = useState('Hello, **world**!');\n  return (\n    <>\n      <textarea value={markdown} onChange={e => setMarkdown(e.target.value)} />\n      <label>\n        <input type=\"checkbox\" checked={showPreview} onChange={e => setShowPreview(e.target.checked)} />\n        Show preview\n      </label>\n      <hr />\n      {showPreview && (\n        <Suspense fallback={<Loading />}>\n          <h2>Preview</h2>\n          <MarkdownPreview markdown={markdown} />\n        </Suspense>\n      )}\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Money Transfer Transaction Implementation\nDESCRIPTION: Implements a secure money transfer between accounts using MongoDB transactions with validation checks and error handling.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/mongodb-specialist-llms-context-20250406.md#2025-04-13_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nvar session = db.getMongo().startSession( { readPreference: { mode: \"primary\" } } );\nsession.withTransaction( async() => {  \n\n   const sessionCollection = session.getDatabase(dbName).getCollection(collectionName);\n\n   // Check needed values\n   var checkFromAccount = sessionCollection.findOne(\n      {\n         \"customer\": fromAccount,\n         \"balance\": { $gte: transferAmount }\n      }\n   )\n   if( checkFromAccount === null ){\n      throw new Error( \"Problem with sender account\" )\n   } \n\n   var checkToAccount = sessionCollection.findOne(\n      { \"customer\": toAccount }\n   )\n   if( checkToAccount === null ){\n      throw new Error( \"Problem with receiver account\" )\n   } \n\n   // Transfer the funds\n   sessionCollection.updateOne(\n      { \"customer\": toAccount },\n      { $inc: { \"balance\": transferAmount } }\n   )\n   sessionCollection.updateOne(\n      { \"customer\": fromAccount },\n      { $inc: { \"balance\": -1 * transferAmount } }\n   )\n\n } )\n```\n\n----------------------------------------\n\nTITLE: Using the useState Hook in React\nDESCRIPTION: Illustrates the usage of the useState hook for managing state in functional components. This hook is crucial for handling data that changes over time in React applications.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/condensed_indices/react-specialist-condensed-index.md#2025-04-13_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst [state, setState] = useState(initialValue)\n```\n\n----------------------------------------\n\nTITLE: Creating a Server Component with Data Fetching\nDESCRIPTION: Define an asynchronous Server Component that fetches data. Server Components are the default in Next.js and allow for direct data access.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/031-frontend/nextjs-developer/031-work-fe-nextjs-developer.mode.md#2025-04-13_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nasync function Page() {\n  const data = await fetch('https://api.example.com/data')\n  const json = await data.json()\n  return <div>{json.title}</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing City Search Combobox with Remix's useFetcher\nDESCRIPTION: Creates a city search combobox component using Remix's useFetcher hook for real-time data fetching. Includes both the loader function for handling search requests and the React component that displays search results in a dropdown interface.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/remix-developer-llms-context-20250406.md#2025-04-13_snippet_24\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { LoaderFunctionArgs } from \"@remix-run/node\"; // or cloudflare/deno\nimport { json } from \"@remix-run/node\"; // or cloudflare/deno\n\nexport async function loader({\n  request,\n}: LoaderFunctionArgs) {\n  const { searchParams } = new URL(request.url);\n  const cities = await searchCities(searchParams.get(\"q\"));\n  return json(cities);\n}\n\nexport function CitySearchCombobox() {\n  const fetcher = useFetcher<typeof loader>();\n\n  return (\n    <fetcher.Form action=\"/city-search\">\n      <Combobox aria-label=\"Cities\">\n        <ComboboxInput\n          name=\"q\"\n          onChange={(event) =>\n            // submit the form onChange to get the list of cities\n            fetcher.submit(event.target.form)\n          }\n        />\n\n        {/* render with the loader's data */}\n        {fetcher.data ? (\n          <ComboboxPopover className=\"shadow-popup\">\n            {fetcher.data.length > 0 ? (\n              <ComboboxList>\n                {fetcher.data.map((city) => (\n                  <ComboboxOption\n                    key={city.id}\n                    value={city.name}\n                  />\n                ))}\n              </ComboboxList>\n            ) : (\n              <span>No results found</span>\n            )}\n          </ComboboxPopover>\n        ) : null}\n      </Combobox>\n    </fetcher.Form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Vue 3 Script Setup with Reactive State\nDESCRIPTION: Demonstrates the script setup syntax in Vue 3 with ref for reactive state management. Shows template integration with automatic ref unwrapping.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/vuejs-developer-llms-context-20250406.md#2025-04-13_snippet_35\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { ref } from 'vue'\n\nconst count = ref(0)\n</script>\n\n<template>\n  <button @click=\"count++\">{{ count }}</button>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Rendering Lists in React with map()\nDESCRIPTION: Shows how to dynamically render lists of components using the map() function. The key prop is essential for React's reconciliation process when rendering lists.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/condensed_indices/react-specialist-condensed-index.md#2025-04-13_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nitems.map(item => <li key={item.id}>...</li>)\n```\n\n----------------------------------------\n\nTITLE: Data Streaming with Suspense\nDESCRIPTION: Example of streaming data using Suspense for loading states\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/react-specialist-llms-context-20250406.md#2025-04-13_snippet_48\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function App() {\n  const messagePromise = fetchMessage();\n  return (\n    <Suspense fallback={<p>waiting for message...</p>}>\n      <Message messagePromise={messagePromise} />\n    </Suspense>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MongoDB Document Models with MongoEngine\nDESCRIPTION: This snippet demonstrates how to define MongoDB document models using MongoEngine. It includes examples of basic field types and embedded documents.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/flask-developer-llms-context-20250406.md#2025-04-13_snippet_20\n\nLANGUAGE: Python\nCODE:\n```\nimport mongoengine as me\n\nclass Movie(me.Document):\n    title = me.StringField(required=True)\n    year = me.IntField()\n    rated = me.StringField()\n    director = me.StringField()\n    actors = me.ListField()\n\nclass Imdb(me.EmbeddedDocument):\n    imdb_id = me.StringField()\n    rating = me.DecimalField()\n    votes = me.IntField()\n\nclass Movie(me.Document):\n    ...\n    imdb = me.EmbeddedDocumentField(Imdb)\n```\n\n----------------------------------------\n\nTITLE: Emitting Events with Arguments in Vue\nDESCRIPTION: This snippet shows how to emit an event with additional arguments in Vue. It demonstrates passing data from a child component to its parent component through custom events.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/vuejs-developer-llms-context-20250406.md#2025-04-13_snippet_20\n\nLANGUAGE: vue-html\nCODE:\n```\n<button @click=\"$emit('increaseBy', 1)\">\n  Increase by 1\n</button>\n```\n\n----------------------------------------\n\nTITLE: Implementing v-model with Vue 3 Composition API\nDESCRIPTION: This snippet shows how to implement v-model on a component using the defineModel macro in Vue 3.4+. It demonstrates two-way binding between a parent and child component.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/vuejs-developer-llms-context-20250406.md#2025-04-13_snippet_22\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst model = defineModel()\n\nfunction update() {\n  model.value++\n}\n</script>\n\n<template>\n  <div>Parent bound v-model is: {{ model }}</div>\n  <button @click=\"update\">Increment</button>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing handleError Hook for Error Handling in SvelteKit\nDESCRIPTION: This example shows how to implement the 'handleError' hook in SvelteKit for custom error handling and logging, including integration with error tracking services like Sentry.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/sveltekit-llms-context-20250406.md#2025-04-13_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n/// file: src/hooks.server.js\nimport * as Sentry from '@sentry/sveltekit';\n\nSentry.init({/*...*/})\n\n/** @type {import('@sveltejs/kit').HandleServerError} */\nexport async function handleError({ error, event, status, message }) {\n\tconst errorId = crypto.randomUUID();\n\n\tSentry.captureException(error, {\n\t\textra: { event, errorId, status }\n\t});\n\n\treturn {\n\t\tmessage: 'Whoops!',\n\t\terrorId\n\t};\n}\n```\n\n----------------------------------------\n\nTITLE: HttpClient Injection in Service\nDESCRIPTION: Shows how to properly inject and use HttpClient in an Angular service using dependency injection.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/angular-developer-llms-context-20250406.md#2025-04-13_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\n@Injectable({providedIn: 'root'})\nexport class ConfigService {\n  constructor(private http: HttpClient) {\n    // This service can now make HTTP requests via `this.http`.\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Django Models for AI Marketplace\nDESCRIPTION: This snippet defines Django model classes for an AI marketplace, including ModelAuthor, AIModel, ModelPurchase, UsageScenario, and ModelBenchmark entities.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/neon-db-specialist-llms-context-20250406.md#2025-04-13_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\nfrom django.core.validators import MinValueValidator, MaxValueValidator\n\nclass ModelAuthor(models.Model):\n    name = models.CharField(max_length=200)\n    bio = models.TextField()\n    contact_info = models.EmailField()\n    rating = models.FloatField(validators=[MinValueValidator(0), MaxValueValidator(5)])\n\n    def __str__(self):\n        return self.name\n\nclass AIModel(models.Model):\n    MODEL_TYPES = [\n        ('NLP', 'Natural Language Processing'),\n        ('CV', 'Computer Vision'),\n        ('RL', 'Reinforcement Learning'),\n        ('OTHER', 'Other'),\n    ]\n    FRAMEWORKS = [\n        ('PT', 'PyTorch'),\n        ('TF', 'TensorFlow'),\n        ('KRS', 'Keras'),\n        ('OTHER', 'Other'),\n    ]\n    name = models.CharField(max_length=200)\n    model_type = models.CharField(max_length=5, choices=MODEL_TYPES)\n    description = models.TextField()\n    framework = models.CharField(max_length=5, choices=FRAMEWORKS)\n    version = models.CharField(max_length=50)\n    download_url = models.URLField()\n    price = models.DecimalField(max_digits=10, decimal_places=2)\n    tags = models.JSONField()\n    author = models.ForeignKey(ModelAuthor, on_delete=models.CASCADE, related_name='models_uploaded')\n\n    def __str__(self):\n        return f\"{self.name} - {self.version}\"\n\nclass ModelPurchase(models.Model):\n    user = models.CharField(max_length=200)  # Simplified for this example\n    ai_model = models.ForeignKey(AIModel, on_delete=models.CASCADE)\n    purchase_date = models.DateTimeField(auto_now_add=True)\n    price_paid = models.DecimalField(max_digits=10, decimal_places=2)\n    license_key = models.CharField(max_length=100)\n    download_link = models.URLField()\n\n    def __str__(self):\n        return f\"{self.user} - {self.ai_model.name}\"\n\nclass UsageScenario(models.Model):\n    ai_model = models.ForeignKey(AIModel, on_delete=models.CASCADE, related_name='usage_scenarios')\n    title = models.CharField(max_length=200)\n    description = models.TextField()\n    code_snippet = models.TextField()\n    usage_frequency = models.IntegerField(default=0)\n\n    def __str__(self):\n        return f\"{self.ai_model.name} - {self.title}\"\n\nclass ModelBenchmark(models.Model):\n    ai_model = models.ForeignKey(AIModel, on_delete=models.CASCADE, related_name='benchmarks')\n    metric_name = models.CharField(max_length=100)\n    value = models.FloatField()\n    benchmark_date = models.DateTimeField(auto_now_add=True)\n    hardware_used = models.CharField(max_length=200)\n\n    def __str__(self):\n        return f\"{self.ai_model.name} - {self.metric_name}: {self.value}\"\n```\n\n----------------------------------------\n\nTITLE: Bulk Creating Custom ManyToMany Relationships in Django\nDESCRIPTION: Demonstrates using bulk_create() to efficiently insert multiple relationships for a custom ManyToMany through model. This method is useful for creating multiple relationship objects in a single database query.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/django-developer-llms-context-20250406.md#2025-04-13_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nPizzaToppingRelationship = Pizza.toppings.through\nPizzaToppingRelationship.objects.bulk_create([\n    PizzaToppingRelationship(pizza=my_pizza, topping=pepperoni),\n    PizzaToppingRelationship(pizza=your_pizza, topping=pepperoni),\n    PizzaToppingRelationship(pizza=your_pizza, topping=mushroom),\n], ignore_conflicts=True)\n```\n\n----------------------------------------\n\nTITLE: Creating a Database Session Dependency with Yield in FastAPI\nDESCRIPTION: This snippet shows how to create a dependency that yields a database session and closes it after the response is sent. It uses a try-finally block to ensure proper cleanup, demonstrating FastAPI's support for context management in dependencies.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/fastapi-developer-llms-context-20250406.md#2025-04-13_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\ndef get_db():\n    db = DBSession()\n    try:\n        yield db\n    finally:\n        db.close()\n```\n\n----------------------------------------\n\nTITLE: Protected User Endpoint Implementation\nDESCRIPTION: Creates a protected endpoint that requires user authentication using FastAPI's dependency injection.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/fastapi-developer-llms-context-20250406.md#2025-04-13_snippet_41\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/users/me\")\nasync def read_users_me(current_user: User = Depends(get_current_user)):\n    return current_user\n```\n\n----------------------------------------\n\nTITLE: Interface-based React Component Props with TypeScript\nDESCRIPTION: Shows how to use TypeScript interfaces to define component props with documentation and multiple properties in a React component.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/react-specialist-llms-context-20250406.md#2025-04-13_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\ninterface MyButtonProps {\n  /** The text to display inside the button */\n  title: string;\n  /** Whether the button can be interacted with */\n  disabled: boolean;\n}\n\nfunction MyButton({ title, disabled }: MyButtonProps) {\n  return (\n    <button disabled={disabled}>{title}</button>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Navigation Blocking Implementation with useBlocker\nDESCRIPTION: Shows how to implement navigation blocking using useBlocker hook to prevent accidental navigation away from forms with unsaved changes.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/remix-developer-llms-context-20250406.md#2025-04-13_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nfunction ImportantForm() {\n  const [value, setValue] = React.useState(\"\");\n\n  const blocker = useBlocker(\n    ({ currentLocation, nextLocation }) =>\n      value !== \"\" &&\n      currentLocation.pathname !== nextLocation.pathname\n  );\n\n  return (\n    <Form method=\"post\">\n      <label>\n        Enter some important data:\n        <input\n          name=\"data\"\n          value={value}\n          onChange={(e) => setValue(e.target.value)}\n        />\n      </label>\n      <button type=\"submit\">Save</button>\n\n      {blocker.state === \"blocked\" ? (\n        <div>\n          <p>Are you sure you want to leave?</p>\n          <button onClick={() => blocker.proceed()}>\n            Proceed\n          </button>\n          <button onClick={() => blocker.reset()}>\n            Cancel\n          </button>\n        </div>\n      ) : null}\n    </Form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Complete Animation with Keyframes in Anime.js\nDESCRIPTION: A complete example showing how to use the animate function from Anime.js with keyframes. Demonstrates sequencing multiple animation states with individual timing and easing parameters while also applying global animation settings.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/animejs-specialist-llms-context-20250406.md#2025-04-13_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport { animate } from 'animejs';\n\nanimate('.square', {\n  keyframes: [\n    { y: '-2.5rem', ease: 'out', duration: 400 },\n    { x: '17rem', scale: .5, duration: 800 },\n    { y: '2.5rem' }, // The duration here is 3000 / 5 = 600ms\n    { x: 0, scale: 1, duration: 800 },\n    { y: 0, ease: 'in', duration: 400 }\n  ],\n  rotate: { to: 360, ease: 'linear' },\n  duration: 3000,\n  ease: 'inOut', // ease applied between each keyframes if no ease defined\n  playbackEase: 'ouIn(5)', // ease applied accross all keyframes\n  loop: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Declaring TypeScript Types and Interfaces\nDESCRIPTION: Examples of basic TypeScript type annotations and interface declarations for defining object shapes and type contracts.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/condensed_indices/typescript-specialist-condensed-index.md#2025-04-13_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nlet name: string;\ninterface Point { x: number; y: number; }\n```\n\n----------------------------------------\n\nTITLE: Implementing Asynchronous Class-Based View in Django\nDESCRIPTION: Demonstrates creating an asynchronous class-based view using async def. This example shows an AsyncView that waits for 1 second using asyncio.sleep before returning an HTTP response.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/django-developer-llms-context-20250406.md#2025-04-13_snippet_31\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom django.http import HttpResponse\nfrom django.views import View\n\n\nclass AsyncView(View):\n    async def get(self, request, *args, **kwargs):\n        # Perform io-blocking view logic using await, sleep for example.\n        await asyncio.sleep(1)\n        return HttpResponse(\"Hello async world!\")\n```\n\n----------------------------------------\n\nTITLE: Configuring URL Patterns in Django\nDESCRIPTION: Sets up URL routing configuration in Django by mapping URLs to view functions. Includes examples of path patterns with parameter capture and named URLs for polls application.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/django-developer-llms-context-20250406.md#2025-04-13_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django.urls import path\n\nfrom . import views\n\nurlpatterns = [\n    # ex: /polls/\n    path(\"\", views.index, name=\"index\"),\n    # ex: /polls/5/\n    path(\"<int:question_id>/\", views.detail, name=\"detail\"),\n    # ex: /polls/5/results/\n    path(\"<int:question_id>/results/\", views.results, name=\"results\"),\n    # ex: /polls/5/vote/\n    path(\"<int:question_id>/vote/\", views.vote, name=\"vote\"),\n]\n```\n\n----------------------------------------\n\nTITLE: Flask Blueprint Registration\nDESCRIPTION: Illustrates how to create and register blueprints for modular application organization. Shows blueprint creation and registration with optional URL prefix.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/032-backend/flask-developer/032-work-be-flask-developer.mode.md#2025-04-13_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nbp = Blueprint('name', __name__)\napp.register_blueprint(bp, url_prefix='/prefix')\n```\n\n----------------------------------------\n\nTITLE: Implementing FormField with React Hook Form in TypeScript\nDESCRIPTION: A code snippet showing how to implement a FormField component with React Hook Form. It demonstrates proper usage of form control, labels, descriptions, and error messages in a form field.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/shadcn-ui-specialist-llms-context-20250406.md#2025-04-13_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst form = useForm()\n\n<FormField\n  control={form.control}\n  name=\"username\"\n  render={({ field }) => (\n    <FormItem>\n      <FormLabel>Username</FormLabel>\n      <FormControl>\n        <Input placeholder=\"shadcn\" {...field} />\n      </FormControl>\n      <FormDescription>This is your public display name.</FormDescription>\n      <FormMessage />\n    </FormItem>\n  )}\n/>\n```\n\n----------------------------------------\n\nTITLE: Filtering D3 Selections in JavaScript\nDESCRIPTION: Demonstrates different ways to filter D3 selections using strings and functions. Includes examples of using CSS selectors, custom filtering functions, and alternative selection methods.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/d3js-specialist-llms-context-20250406.md#2025-04-13_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\nconst even = d3.selectAll(\"tr\").filter(\":nth-child(even)\");\nconst even = d3.selectAll(\"tr:nth-child(even)\");\nconst even = d3.selectAll(\"tr\").filter((d, i) => i & 1);\nconst even = d3.selectAll(\"tr\").select(function(d, i) { return i & 1 ? this : null; });\n```\n\n----------------------------------------\n\nTITLE: Declaring Interfaces in TypeScript\nDESCRIPTION: Illustrates the declaration of an interface in TypeScript. Interfaces define the shape of objects and are used for type checking.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/031-frontend/typescript-specialist/031-work-fe-typescript-specialist.mode.md#2025-04-13_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface Point { x: number; y: number; }\n```\n\n----------------------------------------\n\nTITLE: Importing Astro Content Collection APIs\nDESCRIPTION: Demonstrates the main imports available from astro:content module for collection management.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/astro-developer-llms-context-20250406.md#2025-04-13_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nimport { \n  z,\n  defineCollection,\n  getCollection,\n  getEntry,\n  getEntries,\n  reference,\n  render\n } from 'astro:content';\n```\n\n----------------------------------------\n\nTITLE: Implementing Interactive Product Table with State in React\nDESCRIPTION: This snippet shows a final implementation of a product table with state management and two-way data binding for search and filtering functionality.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/react-specialist-llms-context-20250406.md#2025-04-13_snippet_32\n\nLANGUAGE: jsx\nCODE:\n```\nfunction FilterableProductTable({ products }) {\n  const [filterText, setFilterText] = useState('');\n  const [inStockOnly, setInStockOnly] = useState(false);\n\n  return (\n    <div>\n      <SearchBar \n        filterText={filterText} \n        inStockOnly={inStockOnly}\n        onFilterTextChange={setFilterText}\n        onInStockOnlyChange={setInStockOnly} />\n      <ProductTable \n        products={products}\n        filterText={filterText}\n        inStockOnly={inStockOnly} />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Three.js Scene and Rendering - JavaScript\nDESCRIPTION: Sets up a basic Three.js scene with a cube, camera, and renderer. Demonstrates scene creation, object addition, and rendering loop setup.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/condensed_indices/threejs-specialist-condensed-index.md#2025-04-13_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as THREE from 'three';\n\nconst scene = new THREE.Scene();\nconst camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n\nconst geometry = new THREE.BoxGeometry(1, 1, 1);\nconst material = new THREE.MeshNormalMaterial();\nconst mesh = new THREE.Mesh(geometry, material);\nscene.add(mesh);\n\nconst renderer = new THREE.WebGLRenderer({ antialias: true });\nrenderer.setSize(window.innerWidth, window.innerHeight);\ndocument.body.appendChild(renderer.domElement);\n\nrenderer.setAnimationLoop(() => {\n  renderer.render(scene, camera);\n});\n```\n\n----------------------------------------\n\nTITLE: Handling JSON Responses in Flask Views\nDESCRIPTION: Shows how to return JSON responses from Flask views using direct dict returns and jsonify. Includes examples for single item and list responses.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/flask-developer-llms-context-20250406.md#2025-04-13_snippet_23\n\nLANGUAGE: Python\nCODE:\n```\n@app.route(\"/user/<int:id>\")\ndef user_detail(id):\n    user = User.query.get_or_404(id)\n    return {\n        \"username\": User.username,\n        \"email\": User.email,\n        \"picture\": url_for(\"static\", filename=f\"users/{id}/profile.png\"),\n    }\n```\n\nLANGUAGE: Python\nCODE:\n```\nfrom flask import jsonify\n\n@app.route(\"/users\")\ndef user_list():\n    users = User.query.order_by(User.name).all()\n    return jsonify([u.to_json() for u in users])\n```\n\n----------------------------------------\n\nTITLE: Defining Angular DI Core Types\nDESCRIPTION: Defines core types and functions for Angular's dependency injection system including interfaces and utility functions.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/angular-developer-llms-context-20250406.md#2025-04-13_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport function getCurrentInjector(): Injector | undefined | null;\n\n// @public\nexport interface InjectionToken<T> {\n    // (undocumented)\n    ɵprov: ɵɵInjectableDeclaration<T>;\n}\n\n// @public (undocumented)\nexport interface Injector {\n    // (undocumented)\n    retrieve<T>(token: InjectionToken<T>, options?: unknown): T | NotFound;\n}\n\n// @public\nexport function isNotFound(e: unknown): e is NotFound;\n\n// @public\nexport const NOT_FOUND: unique symbol;\n\n// @public\nexport type NotFound = typeof NOT_FOUND | NotFoundError;\n\n// @public\nexport class NotFoundError extends Error {\n    constructor(message: string);\n}\n\n// @public (undocumented)\nexport function setCurrentInjector(injector: Injector | null | undefined): Injector | undefined | null;\n```\n\n----------------------------------------\n\nTITLE: Implementing Form State Management in React\nDESCRIPTION: This component demonstrates how to manage form state using React hooks, specifically useState. It shows how to handle input changes and display derived state.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/react-specialist-llms-context-20250406.md#2025-04-13_snippet_19\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\n\nexport default function Form() {\n  const [firstName, setFirstName] = useState('');\n  const [lastName, setLastName] = useState('');\n\n  const fullName = firstName + ' ' + lastName;\n\n  function handleFirstNameChange(e) {\n    setFirstName(e.target.value);\n  }\n\n  function handleLastNameChange(e) {\n    setLastName(e.target.value);\n  }\n\n  return (\n    <>\n      <h2>Let's check you in</h2>\n      <label>\n        First name:{' '}\n        <input\n          value={firstName}\n          onChange={handleFirstNameChange}\n        />\n      </label>\n      <label>\n        Last name:{' '}\n        <input\n          value={lastName}\n          onChange={handleLastNameChange}\n        />\n      </label>\n      <p>\n        Your ticket will be issued to: <b>{fullName}</b>\n      </p>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Interactive Animation with Mouse Tracking in anime.js\nDESCRIPTION: A complete example demonstrating how to create an interactive animation that responds to mouse movement. The code creates an animatable circle element and updates its position and background color based on cursor coordinates.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/animejs-specialist-llms-context-20250406.md#2025-04-13_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createAnimatable, utils } from 'animejs';\n\nconst $demos = document.querySelector('#docs-demos');\nconst $demo = $demos.querySelector('.docs-demo.is-active');\nlet bounds = $demo.getBoundingClientRect();\nconst refreshBounds = () => bounds = $demo.getBoundingClientRect();\n\nconst circle = createAnimatable('.circle', {\n  x: 0,\n  y: 0,\n  backgroundColor: 0,\n  ease: 'outExpo',\n});\n\nconst rgb = [164, 255, 79];\n\n// Sets new durations and easings\ncircle.x(0, 500, 'out(2)');\ncircle.y(0, 500, 'out(3)');\ncircle.backgroundColor(rgb, 250);\n\nconst onMouseMove = e => {\n  const { width, height, left, top } = bounds;\n  const hw = width / 2;\n  const hh = height / 2;\n  const x = utils.clamp(e.clientX - left - hw, -hw, hw);\n  const y = utils.clamp(e.clientY - top - hh, -hh, hh);\n  rgb[0] = utils.mapRange(x, -hw, hw, 0, 164);\n  rgb[2] = utils.mapRange(x, -hw, hw, 79, 255);\n  circle.x(x).y(y).backgroundColor(rgb); // Update values\n}\n\nwindow.addEventListener('mousemove', onMouseMove);\n$demos.addEventListener('scroll', refreshBounds);\n```\n\n----------------------------------------\n\nTITLE: Running FastAPI Development Server\nDESCRIPTION: This snippet shows the command line instructions for starting a FastAPI development server with a main.py file. It displays the server startup output including documentation URLs and process information.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/fastapi-developer-llms-context-20250406.md#2025-04-13_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ fastapi dev main.py\n\n  FastAPI  Starting development server 🚀\n\n             Searching for package file structure from directories\n             with __init__.py files\n             Importing from /home/user/code/awesomeapp\n\n   module  🐍 main.py\n\n     code  Importing the FastAPI app object from the module with\n             the following code:\n\n             from main import app\n\n      app  Using import string: main:app\n\n   server  Server started at http://127.0.0.1:8000\n   server  Documentation at http://127.0.0.1:8000/docs\n```\n\n----------------------------------------\n\nTITLE: Implementing Dark Mode in Next.js App Router with Joy UI\nDESCRIPTION: This snippet demonstrates how to set up dark mode in a Next.js project using the App Router. It shows the use of InitColorSchemeScript, CssVarsProvider, and CssBaseline in the root layout file to prevent flickering and enable dark mode.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/material-ui-specialist-llms-context-20250406.md#2025-04-13_snippet_17\n\nLANGUAGE: jsx\nCODE:\n```\nimport InitColorSchemeScript from '@mui/joy/InitColorSchemeScript';\nimport { CssVarsProvider } from '@mui/joy/styles';\nimport CssBaseline from '@mui/joy/CssBaseline';\n\nexport default function RootLayout(props) {\n  return (\n    <html lang=\"en\" suppressHydrationWarning={true}>\n      <body>\n        <InitColorSchemeScript />\n        <CssVarsProvider>\n          <CssBaseline />\n          {props.children}\n        </CssVarsProvider>\n      </body>\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Line Plot with D3 in Svelte\nDESCRIPTION: A Svelte component that creates a line plot using D3. It shows how to use D3's scale and line functions within a Svelte component, and how to create SVG elements using Svelte's template syntax with reactivity.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/d3js-specialist-llms-context-20250406.md#2025-04-13_snippet_5\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import * as d3 from 'd3';\n\n  export let data;\n  export let width = 640;\n  export let height = 400;\n  export let marginTop = 20;\n  export let marginRight = 20;\n  export let marginBottom = 20;\n  export let marginLeft = 20;\n\n  $: x = d3.scaleLinear([0, data.length - 1], [marginLeft, width - marginRight]);\n  $: y = d3.scaleLinear(d3.extent(data), [height - marginBottom, marginTop]);\n  $: line = d3.line((d, i) => x(i), y);\n</script>\n<svg width={width} height={height}>\n  <path fill=\"none\" stroke=\"currentColor\" stroke-width=\"1.5\" d={line(data)} />\n  <g fill=\"white\" stroke=\"currentColor\" stroke-width=\"1.5\">\n    {#each data as d, i}\n      <circle key={i} cx={x(i)} cy={y(d)} r=\"2.5\" />\n    {/each}\n  </g>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Generic Identity Function in TypeScript\nDESCRIPTION: Creates a generic identity function that works with any type, preserving type information and demonstrating TypeScript's type inference capabilities.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/typescript-specialist-llms-context-20250406.md#2025-04-13_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nfunction identity<Type>(arg: Type): Type {\n  return arg;\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Headers with Fetch API in SvelteKit Server Route\nDESCRIPTION: Demonstrates how to work with request and response headers in a SvelteKit server route. Shows logging request headers and creating a JSON response with custom headers using the user-agent information.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/sveltekit-llms-context-20250406.md#2025-04-13_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nimport { json } from '@sveltejs/kit';\n\n/** @type {import('./$types').RequestHandler} */\nexport function GET({ request }) {\n\t// log all headers\n\tconsole.log(...request.headers);\n\n\t// create a JSON Response using a header we received\n\treturn json({\n\t\t// retrieve a specific header\n\t\tuserAgent: request.headers.get('user-agent')\n\t}, {\n\t\t// set a header on the response\n\t\theaders: { 'x-custom-header': 'potato' }\n\t});\n}\n```\n\n----------------------------------------\n\nTITLE: Importing FastAPI Class in Python\nDESCRIPTION: This code snippet demonstrates how to import the FastAPI class directly from the fastapi module. This is the primary way to start using FastAPI in Python projects.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/fastapi-developer-llms-context-20250406.md#2025-04-13_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\n```\n\n----------------------------------------\n\nTITLE: Optional Properties in TypeScript Interfaces\nDESCRIPTION: Shows how to define optional properties in interfaces using the question mark syntax. Demonstrates implementation in a square creation function that handles missing properties gracefully.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/typescript-specialist-llms-context-20250406.md#2025-04-13_snippet_58\n\nLANGUAGE: typescript\nCODE:\n```\ninterface SquareConfig {\n  color?: string;\n  width?: number;\n}\n\nfunction createSquare(config: SquareConfig): { color: string; area: number } {\n  let newSquare = { color: \"white\", area: 100 };\n  if (config.color) {\n    newSquare.color = config.color;\n  }\n  if (config.width) {\n    newSquare.area = config.width * config.width;\n  }\n  return newSquare;\n}\n\nlet mySquare = createSquare({ color: \"black\" });\n```\n\n----------------------------------------\n\nTITLE: Initializing SQLite Database for Flask Application\nDESCRIPTION: Defines functions to initialize a SQLite database for a Flask application using a SQL schema file. Includes a Click command for CLI database initialization and a SQLite converter for timestamp handling.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/flask-developer-llms-context-20250406.md#2025-04-13_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ndef init_db():\n    db = get_db()\n\n    with current_app.open_resource('schema.sql') as f:\n        db.executescript(f.read().decode('utf8'))\n\n\n@click.command('init-db')\ndef init_db_command():\n    \"\"\"Clear the existing data and create new tables.\"\"\"\n    init_db()\n    click.echo('Initialized the database.')\n\n\nsqlite3.register_converter(\n    \"timestamp\", lambda v: datetime.fromisoformat(v.decode())\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Route Module Exports in Remix TSX\nDESCRIPTION: Basic structure for a Remix route module showing the three main exports: loader for data fetching, default component for UI rendering, and action for data updates.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/remix-developer-llms-context-20250406.md#2025-04-13_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nexport async function loader() {\n  // provides data to the component\n}\n\nexport default function Component() {\n  // renders the UI\n}\n\nexport async function action() {\n  // updates persistent data\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Content Security Policy Header in Flask\nDESCRIPTION: Shows how to set a strict Content Security Policy (CSP) header in a Flask response to control resource loading.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/flask-developer-llms-context-20250406.md#2025-04-13_snippet_18\n\nLANGUAGE: Python\nCODE:\n```\nresponse.headers['Content-Security-Policy'] = \"default-src 'self'\"\n```\n\n----------------------------------------\n\nTITLE: Firestore Database Operations\nDESCRIPTION: Demonstrates common Firestore operations including adding documents, setting documents with specific IDs, querying data, and real-time listeners.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/032-backend/firebase-developer/032-work-be-firebase-developer.mode.md#2025-04-13_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getFirestore, collection, doc, addDoc, setDoc, getDoc, getDocs, query, where, orderBy, limit, onSnapshot } from 'firebase/firestore';\n\nconst db = getFirestore();\n\n// Add a document to a collection\nconst docRef = await addDoc(collection(db, 'users'), {\n  name: 'John Doe',\n  email: 'john@example.com'\n});\n\n// Set a document with a specific ID\nawait setDoc(doc(db, 'users', userId), { name: 'John Doe' });\n\n// Get a document\nconst docSnap = await getDoc(doc(db, 'users', userId));\nif (docSnap.exists()) {\n  console.log('Document data:', docSnap.data());\n}\n\n// Query documents\nconst q = query(\n  collection(db, 'users'),\n  where('age', '>=', 18),\n  orderBy('age'),\n  limit(10)\n);\nconst querySnapshot = await getDocs(q);\nquerySnapshot.forEach((doc) => {\n  console.log(doc.id, ' => ', doc.data());\n});\n\n// Real-time listener\nconst unsubscribe = onSnapshot(doc(db, 'users', userId), (doc) => {\n  console.log('Current data:', doc.data());\n});\n```\n\n----------------------------------------\n\nTITLE: Complex Animation with Keyframes and Property Parameters in Anime.js\nDESCRIPTION: A comprehensive example showing animation with keyframes, property-specific parameters, function-based values, easing, loops, and delays for animating spans.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/animejs-specialist-llms-context-20250406.md#2025-04-13_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { animate } from 'animejs';\n\nanimate('span', {\n  // Property keyframes\n  y: [\n    { to: '-2.75rem', ease: 'outExpo', duration: 600 },\n    { to: 0, ease: 'outBounce', duration: 800, delay: 100 }\n  ],\n  // Property specific parameters\n  rotate: {\n    from: '-1turn',\n    delay: 0\n  },\n  delay: (_, i) => i * 50, // Function based value\n  ease: 'inOutCirc',\n  loopDelay: 1000,\n  loop: true\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Nested Fields in MongoDB using JavaScript\nDESCRIPTION: Demonstrates how to query documents using the $lt (less than) operator on a nested field 'h' within the 'size' object. This query will return all documents where the 'size.h' value is less than 15.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/mongodb-specialist-llms-context-20250406.md#2025-04-13_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\ndb.inventory.find( { \"size.h\": { $lt: 15 } } )\n```\n\n----------------------------------------\n\nTITLE: Configuring Application Routes\nDESCRIPTION: Shows how to configure application routes using the provideRouter function. This is typically done in the main application module or bootstrapping process.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/031-frontend/angular-developer/031_angular-developer.mode.md#2025-04-13_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nprovideRouter(routes)\n```\n\n----------------------------------------\n\nTITLE: Configuring WebGL Renderer\nDESCRIPTION: Setup and configuration of the WebGL renderer including initialization, size setting, and animation loop setup.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/031-frontend/threejs-specialist/031-work-fe-threejs-specialist.mode.md#2025-04-13_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nnew THREE.WebGLRenderer({ antialias: true });\nrenderer.setSize(width, height);\nrenderer.setAnimationLoop(callback);\nrenderer.render(scene, camera);\n```\n\n----------------------------------------\n\nTITLE: Implementing Server-Side Authentication Actions in Next.js\nDESCRIPTION: Server-side actions for handling user login and signup using Supabase authentication in a Next.js application. Includes form processing, error handling, and redirects.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/supabase-developer-llms-context-20250406.md#2025-04-13_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n'use server'\n\nimport { revalidatePath } from 'next/cache'\nimport { redirect } from 'next/navigation'\nimport { createClient } from '@/utils/supabase/server'\n\nexport async function login(formData) {\n  const supabase = await createClient()\n  const data = {\n    email: formData.get('email'),\n    password: formData.get('password'),\n  }\n  const { error } = await supabase.auth.signInWithPassword(data)\n  if (error) {\n    redirect('/error')\n  }\n  revalidatePath('/', 'layout')\n  redirect('/account')\n}\n\nexport async function signup(formData) {\n  const supabase = await createClient()\n  const data = {\n    email: formData.get('email'),\n    password: formData.get('password'),\n  }\n  const { error } = await supabase.auth.signUp(data)\n  if (error) {\n    redirect('/error')\n  }\n  revalidatePath('/', 'layout')\n  redirect('/account')\n}\n```\n\n----------------------------------------\n\nTITLE: Creating MongoDB User with Roles\nDESCRIPTION: Demonstrates user creation with specific role assignments for database access control.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/mongodb-specialist-llms-context-20250406.md#2025-04-13_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nuse products\ndb.createUser(\n   {\n     user: \"accountUser\",\n     pwd: passwordPrompt(),  // Or  \"<cleartext password>\",\n     roles: [ \"readWrite\", \"dbAdmin\" ]\n   }\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Root Layout in Next.js App Router\nDESCRIPTION: Implements the required root layout for a Next.js application using the App Router. This layout applies to all routes and must contain html and body tags to properly define the page structure for the entire application.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/nextjs-developer-llms-context-20250406.md#2025-04-13_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <body>\n        {/* Layout UI */}\n        <main>{children}</main>\n      </body>\n    </html>\n  )\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function RootLayout({ children }) {\n  return (\n    <html lang=\"en\">\n      <body>\n        {/* Layout UI */}\n        <main>{children}</main>\n      </body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a 3D Scene with Rotating Cube in Three.js\nDESCRIPTION: Sets up a basic 3D scene using Three.js with a camera, scene, and a geometric cube that rotates. The code demonstrates how to initialize a WebGL renderer and add it to the document body, along with an animation loop for continuous rendering.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/threejs-specialist-llms-context-20250406.md#2025-04-13_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as THREE from 'three';\n\nconst width = window.innerWidth, height = window.innerHeight;\n\n// init\n\nconst camera = new THREE.PerspectiveCamera( 70, width / height, 0.01, 10 );\ncamera.position.z = 1;\n\nconst scene = new THREE.Scene();\n\nconst geometry = new THREE.BoxGeometry( 0.2, 0.2, 0.2 );\nconst material = new THREE.MeshNormalMaterial();\n\nconst mesh = new THREE.Mesh( geometry, material );\nscene.add( mesh );\n\nconst renderer = new THREE.WebGLRenderer( { antialias: true } );\nrenderer.setSize( width, height );\nrenderer.setAnimationLoop( animate );\ndocument.body.appendChild( renderer.domElement );\n\n// animation\n\nfunction animate( time ) {\n\n\tmesh.rotation.x = time / 2000;\n\tmesh.rotation.y = time / 1000;\n\n\trenderer.render( scene, camera );\n\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Objects with Django QuerySets\nDESCRIPTION: Shows various ways to retrieve objects from the database using QuerySets, including filtering and chaining filters. This demonstrates the flexibility of Django's ORM for querying data.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/django-developer-llms-context-20250406.md#2025-04-13_snippet_22\n\nLANGUAGE: python\nCODE:\n```\n>>> Entry.objects.all()\n>>> Entry.objects.filter(pub_date__year=2006)\n>>> Entry.objects.filter(headline__startswith=\"What\").exclude(\n...     pub_date__gte=datetime.date.today()\n... ).filter(pub_date__gte=datetime.date(2005, 1, 30))\n```\n\n----------------------------------------\n\nTITLE: Creating Dashboard Layout Components in Next.js\nDESCRIPTION: Shows how to define a layout component for a dashboard that wraps children elements. Includes both TypeScript and JavaScript implementations that provide the same functionality.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/nextjs-developer-llms-context-20250406.md#2025-04-13_snippet_28\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function DashboardLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return <section>{children}</section>\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function DashboardLayout({ children }) {\n  return <section>{children}</section>\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Line Plot with D3 in React\nDESCRIPTION: A React component that creates a line plot using D3. It demonstrates how to use D3's scale and line functions within a React component, and how to create SVG elements using JSX. The component takes data and dimension parameters to configure the chart.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/d3js-specialist-llms-context-20250406.md#2025-04-13_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as d3 from \"d3\";\n\nexport default function LinePlot({\n  data,\n  width = 640,\n  height = 400,\n  marginTop = 20,\n  marginRight = 20,\n  marginBottom = 20,\n  marginLeft = 20\n}) {\n  const x = d3.scaleLinear([0, data.length - 1], [marginLeft, width - marginRight]);\n  const y = d3.scaleLinear(d3.extent(data), [height - marginBottom, marginTop]);\n  const line = d3.line((d, i) => x(i), y);\n  return (\n    <svg width={width} height={height}>\n      <path fill=\"none\" stroke=\"currentColor\" strokeWidth=\"1.5\" d={line(data)} />\n      <g fill=\"white\" stroke=\"currentColor\" strokeWidth=\"1.5\">\n        {data.map((d, i) => (<circle key={i} cx={x(i)} cy={y(d)} r=\"2.5\" />))}\n      </g>\n    </svg>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Three.js Core Components\nDESCRIPTION: Basic setup of essential Three.js components including Scene, Camera, Geometry, Material, and Mesh. Shows standard ES6 module import and scene graph construction.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/031-frontend/threejs-specialist/031-work-fe-threejs-specialist.mode.md#2025-04-13_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as THREE from 'three';\nnew THREE.Scene();\nnew THREE.PerspectiveCamera(fov, aspect, near, far);\nnew THREE.BoxGeometry(width, height, depth);\nnew THREE.MeshNormalMaterial();\nnew THREE.Mesh(geometry, material);\nscene.add(mesh);\n```\n\n----------------------------------------\n\nTITLE: Implementing Magic Link Authentication with Supabase in JavaScript\nDESCRIPTION: JavaScript function demonstrating how to implement Magic Link authentication using Supabase Auth. It includes options to prevent automatic user creation and specify a custom redirect URL after successful authentication.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/supabase-developer-llms-context-20250406.md#2025-04-13_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nasync function signInWithEmail() {\n  const { data, error } = await supabase.auth.signInWithOtp({\n    email: 'valid.email@supabase.io',\n    options: {\n      // set this to false if you do not want the user to be automatically signed up\n      shouldCreateUser: false,\n      emailRedirectTo: 'https://example.com/welcome',\n    },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Next.js Middleware for Session Management\nDESCRIPTION: Setup of Next.js middleware to handle Supabase authentication and session management with cookie handling.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/supabase-developer-llms-context-20250406.md#2025-04-13_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createServerClient } from '@supabase/ssr'\nimport { NextResponse, type NextRequest } from 'next/server'\n\nexport async function updateSession(request: NextRequest) {\n  let supabaseResponse = NextResponse.next({\n    request,\n  })\n\n  const supabase = createServerClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n    {\n      cookies: {\n        getAll() {\n          return request.cookies.getAll()\n        },\n        setAll(cookiesToSet) {\n          cookiesToSet.forEach(({ name, value, options }) => request.cookies.set(name, value))\n          supabaseResponse = NextResponse.next({\n            request,\n          })\n          cookiesToSet.forEach(({ name, value, options }) =>\n            supabaseResponse.cookies.set(name, value, options)\n          )\n        },\n      },\n    }\n  )\n\n  const {\n    data: { user },\n  } = await supabase.auth.getUser()\n\n  return supabaseResponse\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Vite Dev Server in TypeScript\nDESCRIPTION: Example of creating and configuring a Vite dev server programmatically with TypeScript. Shows basic server setup with port configuration and CLI shortcuts.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/vite-specialist-llms-context-20250406.md#2025-04-13_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { fileURLToPath } from 'node:url'\nimport { createServer } from 'vite'\n\nconst __dirname = fileURLToPath(new URL('.', import.meta.url))\n\nconst server = await createServer({\n  configFile: false,\n  root: __dirname,\n  server: {\n    port: 1337,\n  },\n})\nawait server.listen()\n\nserver.printUrls()\nserver.bindCLIShortcuts({ print: true })\n```\n\n----------------------------------------\n\nTITLE: Creating Mapped Types in TypeScript\nDESCRIPTION: Example of creating new types by transforming properties of existing types\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/typescript-specialist-llms-context-20250406.md#2025-04-13_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\ntype Partial<T> = {\n  [P in keyof T]?: T[P];\n};\n\ntype Readonly<T> = {\n  readonly [P in keyof T]: T[P];\n};\n```\n\n----------------------------------------\n\nTITLE: Connecting to a Realtime Channel in TypeScript\nDESCRIPTION: Demonstrates how to connect to a Supabase Realtime Channel using the Supabase JavaScript client, setting authentication, and subscribing to a channel.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/supabase-developer-llms-context-20250406.md#2025-04-13_snippet_40\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createClient } from '@supabase/supabase-js'\n\n// Prepare client with authenticated user\nconst client = createClient('<url>', '<anon_key>')\nclient.realtime.setAuth(token)\n\n// Prepare the realtime channel\nconst channel = client.channel('topic')\n\nchannel\n.subscribe((status: string, err: any) => {\n  if (status === 'SUBSCRIBED') {\n    console.log('Connected')\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Optimizing Props in Vue.js List Components\nDESCRIPTION: Demonstrates efficient prop passing to list items by computing active state in parent component.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/vuejs-developer-llms-context-20250406.md#2025-04-13_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<ListItem\n  v-for=\"item in list\"\n  :id=\"item.id\"\n  :active=\"item.id === activeId\" />\n```\n\n----------------------------------------\n\nTITLE: Vue List Rendering with v-for\nDESCRIPTION: Demonstrates v-for directive usage with array items and index parameter. Shows both Composition API and Options API approaches for data management.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/vuejs-developer-llms-context-20250406.md#2025-04-13_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\nconst parentMessage = ref('Parent')\nconst items = ref([{ message: 'Foo' }, { message: 'Bar' }])\n```\n\nLANGUAGE: javascript\nCODE:\n```\ndata() {\n  return {\n    parentMessage: 'Parent',\n    items: [{ message: 'Foo' }, { message: 'Bar' }]\n  }\n}\n```\n\nLANGUAGE: vue-html\nCODE:\n```\n<li v-for=\"(item, index) in items\">\n  {{ parentMessage }} - {{ index }} - {{ item.message }}\n</li>\n```\n\n----------------------------------------\n\nTITLE: Aggregation Pipeline Example\nDESCRIPTION: Demonstrates a basic aggregation pipeline with matching, grouping, and sorting stages.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/mongodb-specialist-llms-context-20250406.md#2025-04-13_snippet_17\n\nLANGUAGE: mongodb\nCODE:\n```\ndb.collection.aggregate([\n  { $match: { status: \"active\" } },\n  { $group: { _id: \"$category\", total: { $sum: \"$amount\" } } },\n  { $sort: { total: -1 } }\n])\n```\n\n----------------------------------------\n\nTITLE: Defining Django Models with Foreign Key Relationship\nDESCRIPTION: Shows how to define Django models with relationships. This example creates Musician and Album models with a foreign key relationship, where an Album belongs to a Musician.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/django-developer-llms-context-20250406.md#2025-04-13_snippet_32\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\n\n\nclass Musician(models.Model):\n    first_name = models.CharField(max_length=50)\n    last_name = models.CharField(max_length=50)\n    instrument = models.CharField(max_length=100)\n\n\nclass Album(models.Model):\n    artist = models.ForeignKey(Musician, on_delete=models.CASCADE)\n    name = models.CharField(max_length=100)\n    release_date = models.DateField()\n    num_stars = models.IntegerField()\n```\n\n----------------------------------------\n\nTITLE: Basic Union Type Example with padLeft Function in TypeScript\nDESCRIPTION: Demonstrates how to use union types to accept multiple parameter types. The function accepts either a number or string for padding and applies it accordingly, with type checking.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/typescript-specialist-llms-context-20250406.md#2025-04-13_snippet_53\n\nLANGUAGE: typescript\nCODE:\n```\nfunction padLeft(value: string, padding: string | number) {\n  if (typeof padding === \"number\") {\n    return Array(padding + 1).join(\" \") + value;\n  }\n  if (typeof padding === \"string\") {\n    return padding + value;\n  }\n  throw new Error(`Expected string or number, got '${typeof padding}'.`);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Inheritance in TypeScript\nDESCRIPTION: Demonstrates how to create derived classes using inheritance in TypeScript, including method overriding and the use of the 'super' keyword.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/typescript-specialist-llms-context-20250406.md#2025-04-13_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nclass Animal {\n  name: string;\n  constructor(theName: string) {\n    this.name = theName;\n  }\n  move(distanceInMeters: number = 0) {\n    console.log(`${this.name} moved ${distanceInMeters}m.`);\n  }\n}\n\nclass Snake extends Animal {\n  constructor(name: string) {\n    super(name);\n  }\n  move(distanceInMeters = 5) {\n    console.log(\"Slithering...\");\n    super.move(distanceInMeters);\n  }\n}\n\nclass Horse extends Animal {\n  constructor(name: string) {\n    super(name);\n  }\n  move(distanceInMeters = 45) {\n    console.log(\"Galloping...\");\n    super.move(distanceInMeters);\n  }\n}\n\nlet sam = new Snake(\"Sammy the Python\");\nlet tom: Animal = new Horse(\"Tommy the Palomino\");\n\nsam.move();\ntom.move(34);\n```\n\n----------------------------------------\n\nTITLE: Creating a New Command Constructor in Three.js Editor\nDESCRIPTION: Template for creating a new command object constructor that implements the undo/redo functionality. It shows the required structure including the constructor setup, command type definition, and user-facing name for display in the editor interface.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/threejs-specialist-llms-context-20250406.md#2025-04-13_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction DoSomethingCommand( editor ) {\n\n\tCommand.call( this, editor ); // Required: Call default constructor\n\n\tthis.type = 'DoSomethingCommand';            // Required: has to match the object-name!\n\tthis.name = 'Set/Do/Update Something'; // Required: description of the command, used in Sidebar.History\n\n\t// TODO: store all the relevant information needed to\n\t// restore the old and the new state\n\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Generic Function for Array Operations in TypeScript\nDESCRIPTION: Demonstrates generic function implementation with type parameters for type-safe array operations.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/typescript-specialist-llms-context-20250406.md#2025-04-13_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nfunction firstElement<Type>(arr: Type[]): Type | undefined {\n  return arr[0];\n}\n\n// s is of type 'string'\nconst s = firstElement([\"a\", \"b\", \"c\"]);\n// n is of type 'number'\nconst n = firstElement([1, 2, 3]);\n// u is of type undefined\nconst u = firstElement([]);\n```\n\n----------------------------------------\n\nTITLE: Creating Duration-Based Keyframe Animation in Anime.js\nDESCRIPTION: This snippet demonstrates how to create a duration-based keyframe animation that affects multiple properties per keyframe. Each object in the keyframes array represents a state in the animation sequence.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/animejs-specialist-llms-context-20250406.md#2025-04-13_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nanimate('.square', {\n  keyframes: [\n    { x: 100, y: 100 },\n\n```\n\n----------------------------------------\n\nTITLE: Indexing and Querying Date Fields in Elasticsearch\nDESCRIPTION: This example demonstrates how to define a mapping with a date field, index documents with various date formats, and perform a search query with date sorting.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/elasticsearch-specialist-llms-context-20250406.md#2025-04-13_snippet_21\n\nLANGUAGE: console\nCODE:\n```\nPUT my-index-000001\n{\n  \"mappings\": {\n    \"properties\": {\n      \"date\": {\n        \"type\": \"date\"\n      }\n    }\n  }\n}\n\nPUT my-index-000001/_doc/1\n{ \"date\": \"2015-01-01\" }\n\nPUT my-index-000001/_doc/2\n{ \"date\": \"2015-01-01T12:10:30Z\" }\n\nPUT my-index-000001/_doc/3\n{ \"date\": 1420070400001 }\n\nGET my-index-000001/_search\n{\n  \"sort\": { \"date\": \"asc\"}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Variants in Material UI Theme\nDESCRIPTION: Demonstrates how to create and style custom variants for Material UI components. Includes examples of modifying existing variants and creating new ones with TypeScript support.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/material-ui-specialist-llms-context-20250406.md#2025-04-13_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst theme = createTheme({\n  components: {\n    MuiButton: {\n      styleOverrides: {\n        root: {\n          variants: [\n            {\n              props: { variant: 'dashed', color: 'secondary' },\n              style: {\n                border: `4px dashed ${red[500]}`,\n              },\n            },\n          ],\n        },\n      },\n    },\n  },\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare module '@mui/material/Button' {\n  interface ButtonPropsVariantOverrides {\n    dashed: true;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating TasksProvider Component with Context in React\nDESCRIPTION: Demonstrates how to encapsulate reducer and context logic in a separate provider component for cleaner organization in a React application.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/react-specialist-llms-context-20250406.md#2025-04-13_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nexport function TasksProvider({ children }) {\n  const [tasks, dispatch] = useReducer(tasksReducer, initialTasks);\n  return (\n    <TasksContext.Provider value={tasks}>\n      <TasksDispatchContext.Provider value={dispatch}>\n        {children}\n      </TasksDispatchContext.Provider>\n    </TasksContext.Provider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Client-Side Counter Component in Next.js\nDESCRIPTION: Implements an interactive counter using React's useState hook with the 'use client' directive. This creates a Client Component that handles state updates and user interactions on the client side.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/nextjs-developer-llms-context-20250406.md#2025-04-13_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n'use client'\n\nimport { useState } from 'react'\n\nexport default function Counter() {\n  const [count, setCount] = useState(0)\n\n  return (\n    <div>\n      <p>You clicked {count} times</p>\n      <button onClick={() => setCount(count + 1)}>Click me</button>\n    </div>\n  )\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n'use client'\n\nimport { useState } from 'react'\n\nexport default function Counter() {\n  const [count, setCount] = useState(0)\n\n  return (\n    <div>\n      <p>You clicked {count} times</p>\n      <button onClick={() => setCount(count + 1)}>Click me</button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Next.js with create-next-app\nDESCRIPTION: Use the create-next-app CLI to automatically set up a new Next.js project. This command initiates the installation process and prompts for project configuration options.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/nextjs-developer-llms-context-20250406.md#2025-04-13_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app@latest\n```\n\n----------------------------------------\n\nTITLE: Server-Side Supabase Client Creation\nDESCRIPTION: JavaScript/TypeScript client methods for creating server-specific Supabase clients for handling authentication and sessions in server environments.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/032-backend/supabase-developer/032-work-be-supabase-developer.mode.md#2025-04-13_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\ncreateServerClient()\ncreateMiddlewareClient()\n```\n\n----------------------------------------\n\nTITLE: Creating Poll Models in Django\nDESCRIPTION: Defines Question and Choice models for a polling application using Django's ORM. Establishes relationship between models using ForeignKey.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/django-developer-llms-context-20250406.md#2025-04-13_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\n\nclass Question(models.Model):\n    question_text = models.CharField(max_length=200)\n    pub_date = models.DateTimeField(\"date published\")\n\nclass Choice(models.Model):\n    question = models.ForeignKey(Question, on_delete=models.CASCADE)\n    choice_text = models.CharField(max_length=200)\n    votes = models.IntegerField(default=0)\n```\n\n----------------------------------------\n\nTITLE: Merging Namespaces with Classes in TypeScript\nDESCRIPTION: Demonstrates TypeScript's feature of merging namespaces with classes to create inner classes or add static members. The namespace must follow the class declaration it will merge with.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/typescript-specialist-llms-context-20250406.md#2025-04-13_snippet_51\n\nLANGUAGE: typescript\nCODE:\n```\nclass Album {\n  label: Album.AlbumLabel;\n}\nnamespace Album {\n  export class AlbumLabel {}\n}\n```\n\n----------------------------------------\n\nTITLE: Animating CSS Transforms with AnimeJS using JavaScript and WAAPI Methods\nDESCRIPTION: Shows how to animate CSS transform properties using AnimeJS in two ways: the JavaScript animate() method with individual transform properties and the WAAPI animate() method with the direct transform property.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/animejs-specialist-llms-context-20250406.md#2025-04-13_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { animate, waapi } from 'animejs';\n\nanimate('.square', {\n  x: '15rem', // TranslateX shorthand\n  scale: 1.25,\n  skew: -45,\n  rotate: '1turn',\n});\n\n// the WAAPI version is recommanded if you want to animate the transform property directly\nwaapi.animate('.square', {\n  transform: 'translateX(15rem) scale(1.25) skew(-45deg) rotate(1turn)',\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Middleware Implementation\nDESCRIPTION: Shows how to create a middleware function for intercepting requests and modifying the locals object\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/astro-developer-llms-context-20250406.md#2025-04-13_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nexport function onRequest (context, next) {\n    context.locals.title = \"New title\";\n    return next();\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Supabase Client with TypeScript\nDESCRIPTION: TypeScript code for initializing the Supabase client with type safety. This includes creating standard clients, server-side clients, and middleware clients for framework integration.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/condensed_indices/supabase-developer-condensed-index.md#2025-04-13_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\ncreateClient<Database>(url, key)\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\ncreateServerClient() / createMiddlewareClient()\n```\n\n----------------------------------------\n\nTITLE: Using sensitive_variables Decorator for Security in Django\nDESCRIPTION: Demonstrates how to use the sensitive_variables decorator to prevent sensitive local variables from being included in error reports. This example hides user, password, and credit card information.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/django-developer-llms-context-20250406.md#2025-04-13_snippet_37\n\nLANGUAGE: python\nCODE:\n```\nfrom django.views.decorators.debug import sensitive_variables\n\n@sensitive_variables(\"user\", \"pw\", \"cc\")\ndef process_info(user):\n    pw = user.pass_word\n    cc = user.credit_card_number\n    name = user.name\n    ...\n```\n\n----------------------------------------\n\nTITLE: Basic Authentication Implementation\nDESCRIPTION: Implements secure username/password verification with timing attack protection.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/fastapi-developer-llms-context-20250406.md#2025-04-13_snippet_37\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import Depends, FastAPI, HTTPBasic, HTTPBasicCredentials, HTTPException\nfrom fastapi.security import HTTPBasicCredentials\nimport secrets\n\napp = FastAPI()\nsecurity = HTTPBasic()\n\ndef get_current_username(credentials: HTTPBasicCredentials = Depends(security)):\n    current_username_bytes = credentials.username.encode(\"utf8\")\n    correct_username_bytes = b\"stanleyjobson\"\n    is_correct_username = secrets.compare_digest(\n```\n\n----------------------------------------\n\nTITLE: Basic Vue Single-File Component Structure\nDESCRIPTION: This snippet shows the fundamental structure of a Vue Single-File Component (SFC). It includes template, script, style, and custom blocks, demonstrating the basic organization of a Vue component file.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/vuejs-developer-llms-context-20250406.md#2025-04-13_snippet_13\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div class=\"example\">{{ msg }}</div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      msg: 'Hello world!'\n    }\n  }\n}\n</script>\n\n<style>\n.example {\n  color: red;\n}\n</style>\n\n<custom1>\n  This could be e.g. documentation for the component.\n</custom1>\n```\n\n----------------------------------------\n\nTITLE: Declaring Query Parameters in FastAPI\nDESCRIPTION: This snippet demonstrates how to declare query parameters in a FastAPI route function. The parameters 'skip' and 'limit' are automatically interpreted as query parameters, showing FastAPI's automatic parameter inference.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/fastapi-developer-llms-context-20250406.md#2025-04-13_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nasync def read_item(skip: int = 0, limit: int = 10):\n```\n\n----------------------------------------\n\nTITLE: Using useState Hook in React Component\nDESCRIPTION: Shows how to use the useState Hook to add state to a React component. The example declares a state variable 'index' and its setter function 'setIndex' for an ImageGallery component.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/react-specialist-llms-context-20250406.md#2025-04-13_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction ImageGallery() {\n  const [index, setIndex] = useState(0);\n  // ...\n```\n\n----------------------------------------\n\nTITLE: Implementing Offline-Capable Service Worker in SvelteKit\nDESCRIPTION: Complete implementation of a service worker that caches built app assets and static files eagerly, while caching other requests as they occur. Enables offline functionality for previously visited pages.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/sveltekit-llms-context-20250406.md#2025-04-13_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\n// @errors: 2339\n/// <reference types=\"@sveltejs/kit\" />\nimport { build, files, version } from '$service-worker';\n\nconst CACHE = `cache-${version}`;\n\nconst ASSETS = [\n\t...build,\n\t...files\n];\n\nself.addEventListener('install', (event) => {\n\tasync function addFilesToCache() {\n\t\tconst cache = await caches.open(CACHE);\n\t\tawait cache.addAll(ASSETS);\n\t}\n\n\tevent.waitUntil(addFilesToCache());\n});\n\nself.addEventListener('activate', (event) => {\n\tasync function deleteOldCaches() {\n\t\tfor (const key of await caches.keys()) {\n\t\t\tif (key !== CACHE) await caches.delete(key);\n\t\t}\n\t}\n\n\tevent.waitUntil(deleteOldCaches());\n});\n\nself.addEventListener('fetch', (event) => {\n\tif (event.request.method !== 'GET') return;\n\n\tasync function respond() {\n\t\tconst url = new URL(event.request.url);\n\t\tconst cache = await caches.open(CACHE);\n\n\t\tif (ASSETS.includes(url.pathname)) {\n\t\t\tconst response = await cache.match(url.pathname);\n\n\t\t\tif (response) {\n\t\t\t\treturn response;\n\t\t\t}\n\t\t}\n\n\t\ttry {\n\t\t\tconst response = await fetch(event.request);\n\n\t\t\tif (!(response instanceof Response)) {\n\t\t\t\tthrow new Error('invalid response from fetch');\n\t\t\t}\n\n\t\t\tif (response.status === 200) {\n\t\t\t\tcache.put(event.request, response.clone());\n\t\t\t}\n\n\t\t\treturn response;\n\t\t} catch (err) {\n\t\t\tconst response = await cache.match(event.request);\n\n\t\t\tif (response) {\n\t\t\t\treturn response;\n\t\t\t}\n\n\t\t\tthrow err;\n\t\t}\n\t}\n\n\tevent.respondWith(respond());\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching Blog Posts with getStaticProps in Next.js\nDESCRIPTION: Demonstrates how to fetch data at build time using getStaticProps from an external API. The data is passed as props to the page component, allowing for pre-rendered pages with dynamic content.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/nextjs-developer-llms-context-20250406.md#2025-04-13_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// posts will be populated at build time by getStaticProps()\nexport default function Blog({ posts }) {\n  return (\n    <ul>\n      {posts.map((post) => (\n        <li>{post.title}</li>\n      ))}\n    </ul>\n  )\n}\n\n// This function gets called at build time on server-side.\n// It won't be called on client-side, so you can even do\n// direct database queries.\nexport async function getStaticProps() {\n  // Call an external API endpoint to get posts.\n  // You can use any data fetching library\n  const res = await fetch('https://.../posts')\n  const posts = await res.json()\n\n  // By returning { props: { posts } }, the Blog component\n  // will receive `posts` as a prop at build time\n  return {\n    props: {\n      posts,\n    },\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// posts will be populated at build time by getStaticProps()\nexport default function Blog({ posts }) {\n  return (\n    <ul>\n      {posts.map((post) => (\n        <li>{post.title}</li>\n      ))}\n    </ul>\n  )\n}\n\n// This function gets called at build time on server-side.\n// It won't be called on client-side, so you can even do\n// direct database queries.\nexport async function getStaticProps() {\n  // Call an external API endpoint to get posts.\n  // You can use any data fetching library\n  const res = await fetch('https://.../posts')\n  const posts = await res.json()\n\n  // By returning { props: { posts } }, the Blog component\n  // will receive `posts` as a prop at build time\n  return {\n    props: {\n      posts,\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring VS Code Debugging for Next.js\nDESCRIPTION: This JSON configuration sets up debugging tasks for Next.js in VS Code. It includes configurations for server-side debugging, client-side debugging (Chrome and Firefox), and full-stack debugging.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/nextjs-developer-llms-context-20250406.md#2025-04-13_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"name\": \"Next.js: debug server-side\",\n      \"type\": \"node-terminal\",\n      \"request\": \"launch\",\n      \"command\": \"npm run dev\"\n    },\n    {\n      \"name\": \"Next.js: debug client-side\",\n      \"type\": \"chrome\",\n      \"request\": \"launch\",\n      \"url\": \"http://localhost:3000\"\n    },\n    {\n      \"name\": \"Next.js: debug client-side (Firefox)\",\n      \"type\": \"firefox\",\n      \"request\": \"launch\",\n      \"url\": \"http://localhost:3000\",\n      \"reAttach\": true,\n      \"pathMappings\": [\n        {\n          \"url\": \"webpack://_N_E\",\n          \"path\": \"${workspaceFolder}\"\n        }\n      ]\n    },\n    {\n      \"name\": \"Next.js: debug full stack\",\n      \"type\": \"node\",\n      \"request\": \"launch\",\n      \"program\": \"${workspaceFolder}/node_modules/.bin/next\",\n      \"runtimeArgs\": [\"--inspect\"],\n      \"skipFiles\": [\"<node_internals>/**\"],\n      \"serverReadyAction\": {\n        \"action\": \"debugWithEdge\",\n        \"killOnServerStop\": true,\n        \"pattern\": \"- Local:.+(https?://.+)\",\n        \"uriFormat\": \"%s\",\n        \"webRoot\": \"${workspaceFolder}\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Flask Application Factory in Python\nDESCRIPTION: Creates an application factory function for a Flask app that sets up configuration, creates necessary directories, and defines a simple route. This pattern allows for better testing and multiple application instances.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/flask-developer-llms-context-20250406.md#2025-04-13_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nfrom flask import Flask\n\n\ndef create_app(test_config=None):\n    # create and configure the app\n    app = Flask(__name__, instance_relative_config=True)\n    app.config.from_mapping(\n        SECRET_KEY='dev',\n        DATABASE=os.path.join(app.instance_path, 'flaskr.sqlite'),\n    )\n\n    if test_config is None:\n        # load the instance config, if it exists, when not testing\n        app.config.from_pyfile('config.py', silent=True)\n    else:\n        # load the test config if passed in\n        app.config.from_mapping(test_config)\n\n    # ensure the instance folder exists\n    try:\n        os.makedirs(app.instance_path)\n    except OSError:\n        pass\n\n    # a simple page that says hello\n    @app.route('/hello')\n    def hello():\n        return 'Hello, World!'\n\n    return app\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Django View with Database Query\nDESCRIPTION: Shows how to create a Django view that queries the database and returns the results. It retrieves the latest 5 questions ordered by publication date and renders them in a template.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/django-developer-llms-context-20250406.md#2025-04-13_snippet_29\n\nLANGUAGE: python\nCODE:\n```\nfrom django.shortcuts import render\n\nfrom .models import Question\n\n\ndef index(request):\n    latest_question_list = Question.objects.order_by(\"-pub_date\")[:5]\n    context = {\"latest_question_list\": latest_question_list}\n    return render(request, \"polls/index.html\", context)\n```\n\n----------------------------------------\n\nTITLE: Basic Type Inference in TypeScript\nDESCRIPTION: Shows how TypeScript infers the type of a variable from its initial value without an explicit type annotation.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/typescript-specialist-llms-context-20250406.md#2025-04-13_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nlet x = 3;\n```\n\n----------------------------------------\n\nTITLE: Full-Text Search with Supabase JavaScript Client\nDESCRIPTION: JavaScript client method for performing full-text search using PostgreSQL's to_tsvector and to_tsquery functions in Supabase.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/condensed_indices/supabase-developer-condensed-index.md#2025-04-13_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\n.textSearch('column', 'query', { type?, config? })\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Poll Views in Django\nDESCRIPTION: Implements basic view functions for handling poll-related actions including detail, results, and voting.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/django-developer-llms-context-20250406.md#2025-04-13_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ndef detail(request, question_id):\n    return HttpResponse(\"You're looking at question %s.\" % question_id)\n\n\ndef results(request, question_id):\n    response = \"You're looking at the results of question %s.\"\n    return HttpResponse(response % question_id)\n\n\ndef vote(request, question_id):\n    return HttpResponse(\"You're voting on question %s.\" % question_id)\n```\n\n----------------------------------------\n\nTITLE: Updating Neon Project Settings via API with Bash\nDESCRIPTION: Uses curl to send a PATCH request to the Neon API for updating a project's maintenance window settings. It specifies the day of the week and time range when maintenance operations can occur.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/neon-db-specialist-llms-context-20250406.md#2025-04-13_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request PATCH \\\n     --url https://console.neon.tech/api/v2/projects/fragrant-mode-99795914 \\\n     --header 'accept: application/json' \\\n     --header 'authorization: Bearer $NEON_API' \\\n     --header 'content-type: application/json' \\\n     --data '\n{\n  \"project\": {\n    \"settings\": {\n      \"maintenance_window\": {\n        \"weekdays\": [\n          7\n        ],\n        \"start_time\": \"01:00\",\n        \"end_time\": \"02:00\"\n      }\n    }\n  }\n}\n'\n```\n\n----------------------------------------\n\nTITLE: Two-way Binding with Form Controls Angular\nDESCRIPTION: Implements two-way binding using ngModel directive and FormsModule in Angular component.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/angular-developer-llms-context-20250406.md#2025-04-13_snippet_17\n\nLANGUAGE: angular-ts\nCODE:\n```\nimport { Component } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\n\n@Component({\n  imports: [FormsModule],\n  template: `\n    <main>\n      <h2>Hello {{ firstName }}!</h2>\n      <input type=\"text\" [(ngModel)]=\"firstName\" />\n    </main>\n  `\n})\nexport class AppComponent {\n  firstName = 'Ada';\n}\n```\n\n----------------------------------------\n\nTITLE: Programmatically instantiating a Bootstrap Modal\nDESCRIPTION: JavaScript code to programmatically create and control a Bootstrap Modal component.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/condensed_indices/bootstrap-specialist-condensed-index.md#2025-04-13_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nnew bootstrap.Modal('#myModal')\n```\n\n----------------------------------------\n\nTITLE: Binding Data to DOM Elements in D3\nDESCRIPTION: Shows how to bind an array of data to selected DOM elements, optionally using a key function for object constancy.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/031-frontend/d3js-specialist/031-work-fe-d3js-specialist.mode.md#2025-04-13_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nselection.data(data, [key])\n```\n\n----------------------------------------\n\nTITLE: Declaring Python Types with Pydantic\nDESCRIPTION: Shows basic type declaration in Python using type hints and Pydantic BaseModel. Demonstrates type annotation for function parameters and importing required dependencies.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/fastapi-developer-llms-context-20250406.md#2025-04-13_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import date\n\nfrom pydantic import BaseModel\n\n# Declare a variable as a str\n# and get editor support inside the function\ndef main(user_id: str):\n    return user_id\n```\n\n----------------------------------------\n\nTITLE: Basic Syntax of PostgreSQL Recursive CTE\nDESCRIPTION: Shows the fundamental syntax structure for creating a recursive Common Table Expression (CTE) in PostgreSQL. It includes the anchor member, recursive term with UNION clause, and final SELECT statement.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/neon-db-specialist-llms-context-20250406.md#2025-04-13_snippet_10\n\nLANGUAGE: SQL\nCODE:\n```\nWITH RECURSIVE cte_name (column1, column2, ...)\nAS(\n    -- anchor member\n    SELECT select_list FROM table1 WHERE condition\n\n    UNION [ALL]\n\n    -- recursive term\n    SELECT select_list FROM cte_name WHERE recursive_condition\n)\nSELECT * FROM cte_name;\n```\n\n----------------------------------------\n\nTITLE: Vue Component Structure Examples\nDESCRIPTION: Demonstrations of Vue component declarations using both Options API and Composition API syntax\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/031-frontend/vuejs-developer/031-work-fe-vuejs-developer.mode.md#2025-04-13_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Composition API with <script setup>\n<script setup lang=\"ts\">\nimport { ref, computed } from 'vue'\nconst count = ref(0)\nconst double = computed(() => count.value * 2)\n</script>\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Options API\nexport default {\n  data() {\n    return {\n      count: 0\n    }\n  },\n  computed: {\n    double() {\n      return this.count * 2\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Access Modifiers in TypeScript Classes\nDESCRIPTION: Demonstrates the use of public, private, and protected access modifiers in TypeScript classes.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/typescript-specialist-llms-context-20250406.md#2025-04-13_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\nclass Animal {\n  private name: string;\n  constructor(theName: string) {\n    this.name = theName;\n  }\n}\n\nnew Animal(\"Cat\").name; // Error: 'name' is private\n```\n\n----------------------------------------\n\nTITLE: Loading Django Secret Key\nDESCRIPTION: Shows secure method for loading Django's SECRET_KEY from an external file.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/django-developer-llms-context-20250406.md#2025-04-13_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nwith open(\"/etc/secret_key.txt\") as f:\n    SECRET_KEY = f.read().strip()\n```\n\n----------------------------------------\n\nTITLE: useLayoutEffect vs useEffect Comparison\nDESCRIPTION: Demonstrates the difference between synchronous useLayoutEffect and asynchronous useEffect\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/react-specialist-llms-context-20250406.md#2025-04-13_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\n// useLayoutEffect blocks the browser from repainting\nuseLayoutEffect(() => {\n  const { height } = ref.current.getBoundingClientRect();\n  setTooltipHeight(height);\n}, []);\n\n// useEffect does not block the browser\nuseEffect(() => {\n  const { height } = ref.current.getBoundingClientRect();\n  setTooltipHeight(height);\n}, []);\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Client-Side Routing in Vue (Composition API)\nDESCRIPTION: This snippet demonstrates a simple client-side router implementation using Vue's Composition API. It uses hash-based routing with dynamic components to handle route changes and component rendering based on URL paths.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/vuejs-developer-llms-context-20250406.md#2025-04-13_snippet_28\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { ref, computed } from 'vue'\nimport Home from './Home.vue'\nimport About from './About.vue'\nimport NotFound from './NotFound.vue'\n\nconst routes = {\n  '/': Home,\n  '/about': About\n}\n\nconst currentPath = ref(window.location.hash)\n\nwindow.addEventListener('hashchange', () => {\n  currentPath.value = window.location.hash\n})\n\nconst currentView = computed(() => {\n  return routes[currentPath.value.slice(1) || '/'] || NotFound\n})\n</script>\n\n<template>\n  <a href=\"#/\">Home</a> |\n  <a href=\"#/about\">About</a> |\n  <a href=\"#/non-existent-path\">Broken Link</a>\n  <component :is=\"currentView\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Defining Pydantic Models for Product Data Validation in Python\nDESCRIPTION: Creates Pydantic models for validating product data in a Python application. Includes models for product representation, creation with field validation rules, and configuration for ORM integration via model_config.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/neon-db-specialist-llms-context-20250406.md#2025-04-13_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom pydantic import BaseModel, Field, ConfigDict\nfrom typing import Optional\n\nclass Product(BaseModel):\n    model_config = ConfigDict(from_attributes=True)\n    id: int\n    name: str\n    price: float\n    quantity: int\n    description: Optional[str]\n\nclass ProductCreate(BaseModel):\n    name: str\n    price: float = Field(..., ge=0)\n    quantity: int = Field(..., ge=0)\n    description: Optional[str] = Field(None, max_length=255)\n```\n\n----------------------------------------\n\nTITLE: Basic Simple Query String Search in Elasticsearch\nDESCRIPTION: Example of a simple query string search using field boosting and boolean operators. The query searches for 'fried eggs' as a phrase, must include either 'eggplant' or 'potato', and excludes 'frittata'.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/elasticsearch-specialist-llms-context-20250406.md#2025-04-13_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nGET /_search\n{\n  \"query\": {\n    \"simple_query_string\" : {\n        \"query\": \"\\\"fried eggs\\\" +(eggplant | potato) -frittata\",\n        \"fields\": [\"title^5\", \"body\"],\n        \"default_operator\": \"and\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Accessors in TypeScript\nDESCRIPTION: Demonstrates the use of getters and setters to control access to class properties, including validation logic.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/typescript-specialist-llms-context-20250406.md#2025-04-13_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst fullNameMaxLength = 10;\n\nclass Employee {\n  private _fullName: string = \"\";\n\n  get fullName(): string {\n    return this._fullName;\n  }\n\n  set fullName(newName: string) {\n    if (newName && newName.length > fullNameMaxLength) {\n      throw new Error(\"fullName has a max length of \" + fullNameMaxLength);\n    }\n\n    this._fullName = newName;\n  }\n}\n\nlet employee = new Employee();\nemployee.fullName = \"Bob Smith\";\n\nif (employee.fullName) {\n  console.log(employee.fullName);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Generated Types with Supabase JS v2 in TypeScript\nDESCRIPTION: TypeScript example demonstrating how to use generated database types with Supabase JS v2. It imports the Database type and uses it to create a strongly-typed Supabase client instance.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/supabase-developer-llms-context-20250406.md#2025-04-13_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Database } from './DatabaseDefinitions'\n\nconst supabase = createClient<Database>(SUPABASE_URL, ANON_KEY)\n\nconst { data } = await supabase.from('messages').select().match({ id: 1 })\n```\n\n----------------------------------------\n\nTITLE: Importing and Exporting React Components\nDESCRIPTION: This snippet demonstrates how to split React components into separate files and import/export them. The Gallery component imports and renders the Profile component.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/react-specialist-llms-context-20250406.md#2025-04-13_snippet_30\n\nLANGUAGE: jsx\nCODE:\n```\nimport Profile from './Profile.js';\n\nexport default function Gallery() {\n  return (\n    <section>\n      <h1>Amazing scientists</h1>\n      <Profile />\n      <Profile />\n      <Profile />\n    </section>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Generic Classes and Interfaces in TypeScript\nDESCRIPTION: Illustrates the definition of generic classes and interfaces in TypeScript. This allows for the creation of flexible, reusable components that work with various types.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/031-frontend/typescript-specialist/031-work-fe-typescript-specialist.mode.md#2025-04-13_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass Box<T> { contents: T; }\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface Collection<T> { add(item: T): void; }\n```\n\n----------------------------------------\n\nTITLE: Using Authorization Header in Next.js API Request\nDESCRIPTION: Example showing how to forward an authorization header from an incoming request to another API fetch call within a Next.js Server Component.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/nextjs-developer-llms-context-20250406.md#2025-04-13_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nimport { headers } from 'next/headers'\n\nexport default async function Page() {\n  const authorization = (await headers()).get('authorization')\n  const res = await fetch('...', {\n    headers: { authorization }, // Forward the authorization header\n  })\n  const user = await res.json()\n\n  return <h1>{user.name}</h1>\n}\n```\n\n----------------------------------------\n\nTITLE: Firebase Authentication Implementation\nDESCRIPTION: Shows various authentication methods including email/password signup, signin, Google authentication, and auth state observation using Firebase Auth.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/032-backend/firebase-developer/032-work-be-firebase-developer.mode.md#2025-04-13_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getAuth, createUserWithEmailAndPassword, signInWithEmailAndPassword, signInWithPopup, GoogleAuthProvider, onAuthStateChanged } from 'firebase/auth';\n\nconst auth = getAuth();\n\n// Email/Password Sign Up\ncreateUserWithEmailAndPassword(auth, email, password)\n  .then((userCredential) => {\n    const user = userCredential.user;\n  })\n  .catch((error) => {\n    const errorCode = error.code;\n    const errorMessage = error.message;\n  });\n\n// Email/Password Sign In\nsignInWithEmailAndPassword(auth, email, password);\n\n// Google Sign In\nconst provider = new GoogleAuthProvider();\nsignInWithPopup(auth, provider);\n\n// Auth State Observer\nonAuthStateChanged(auth, (user) => {\n  if (user) {\n    // User is signed in\n  } else {\n    // User is signed out\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Protecting tRPC Procedures with Clerk Authentication\nDESCRIPTION: Implement a tRPC middleware to protect procedures using Clerk authentication. This pattern ensures that only authenticated users can access certain API endpoints.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/031-frontend/clerk-auth-specialist/031-work-fe-clerk-auth-specialist.mode.md#2025-04-13_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { TRPCError } from '@trpc/server';\nimport { middleware, publicProcedure } from './trpc';\n\nconst isAuthed = middleware(async ({ ctx, next }) => {\n  if (!ctx.auth.userId) {\n    throw new TRPCError({ code: 'UNAUTHORIZED' });\n  }\n  return next({ ctx: { userId: ctx.auth.userId } });\n});\n\nconst protectedProcedure = publicProcedure.use(isAuthed);\n\nexport const appRouter = createTRPCRouter({\n  secureEndpoint: protectedProcedure.query(() => {\n    return 'This is a protected endpoint';\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Using Named Slots in Vue.js Components\nDESCRIPTION: This snippet demonstrates how to use named slots to define multiple slot outlets in a single Vue component. It shows both the slot definition in a component and how to provide content for those slots when using the component.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/vuejs-developer-llms-context-20250406.md#2025-04-13_snippet_33\n\nLANGUAGE: vue-html\nCODE:\n```\n<div class=\"container\">\n  <header>\n    <slot name=\"header\"></slot>\n  </header>\n  <main>\n    <slot></slot>\n  </main>\n  <footer>\n    <slot name=\"footer\"></slot>\n  </footer>\n</div>\n```\n\nLANGUAGE: vue-html\nCODE:\n```\n<BaseLayout>\n  <template #header>\n```\n\n----------------------------------------\n\nTITLE: Applying Plugins Conditionally in Vite\nDESCRIPTION: This code shows how to conditionally apply a plugin only during the build process in Vite. It uses the rollup-plugin-typescript2 as an example and sets it to apply only during 'build' using the 'apply' property.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/vite-specialist-llms-context-20250406.md#2025-04-13_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\nimport typescript2 from 'rollup-plugin-typescript2'\nimport { defineConfig } from 'vite'\n\nexport default defineConfig({\n  plugins: [\n    {\n      ...typescript2(),\n      apply: 'build',\n    },\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Authentication State in Server Components\nDESCRIPTION: Use the auth() helper function to access authentication state in Server Components and Server Actions. This example demonstrates how to retrieve the userId on the server-side.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/031-frontend/clerk-auth-specialist/031-work-fe-clerk-auth-specialist.mode.md#2025-04-13_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { auth } from '@clerk/nextjs';\n\nasync function ServerComponent() {\n  const { userId } = auth();\n\n  if (!userId) {\n    return <div>Please sign in</div>;\n  }\n\n  // Fetch user data or perform authenticated actions\n  return <div>Welcome, user {userId}</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Password Verification in FastAPI\nDESCRIPTION: Implements password verification logic comparing encoded credentials against stored values using secure comparison.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/fastapi-developer-llms-context-20250406.md#2025-04-13_snippet_38\n\nLANGUAGE: python\nCODE:\n```\ncurrent_password_bytes = credentials.password.encode(\"utf8\")\ncorrect_password_bytes = b\"swordfish\"\nis_correct_password = secrets.compare_digest(\n    current_password_bytes, correct_password_bytes\n)\nif not (is_correct_username and is_correct_password):\n    raise HTTPException(\n        status_code=401,\n        detail=\"Incorrect username or password\",\n        headers={\"WWW-Authenticate\": \"Basic\"},\n    )\nreturn credentials.username\n```\n\n----------------------------------------\n\nTITLE: Handling Form Submission and Validation in Flask View\nDESCRIPTION: This code snippet shows how to handle form submission and validation in a Flask view function. It creates a form instance, validates the data, and processes it if valid.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/flask-developer-llms-context-20250406.md#2025-04-13_snippet_30\n\nLANGUAGE: Python\nCODE:\n```\n@app.route('/register', methods=['GET', 'POST'])\ndef register():\n    form = RegistrationForm(request.form)\n    if request.method == 'POST' and form.validate():\n        user = User(form.username.data, form.email.data,\n                    form.password.data)\n        db_session.add(user)\n        flash('Thanks for registering')\n        return redirect(url_for('login'))\n    return render_template('register.html', form=form)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Data to Request with Locals in SvelteKit\nDESCRIPTION: This example shows how to use the 'locals' object in SvelteKit to add custom data to the request, which can be accessed in handlers and server-side load functions. It also demonstrates setting custom headers on the response.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/sveltekit-llms-context-20250406.md#2025-04-13_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\n/// file: src/hooks.server.js\n/** @type {import('@sveltejs/kit').Handle} */\nexport async function handle({ event, resolve }) {\n\tevent.locals.user = await getUserInformation(event.cookies.get('sessionid'));\n\n\tconst response = await resolve(event);\n\n\tresponse.headers.set('x-custom-header', 'potato');\n\n\treturn response;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Context Managers in Dependencies with Yield in FastAPI\nDESCRIPTION: This example demonstrates how to use context managers within a FastAPI dependency that uses yield. It shows the proper way to manage resources using 'with' statements inside the dependency, ensuring proper resource management.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/fastapi-developer-llms-context-20250406.md#2025-04-13_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\nclass MySuperContextManager:\n    def __init__(self):\n        self.db = DBSession()\n\n    def __enter__(self):\n        return self.db\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        self.db.close()\n\nasync def get_db():\n    with MySuperContextManager() as db:\n        yield db\n```\n\n----------------------------------------\n\nTITLE: Function with Type Checking Example in TypeScript\nDESCRIPTION: Demonstrates how TypeScript can catch potential runtime errors through static type checking in function parameters.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/typescript-specialist-llms-context-20250406.md#2025-04-13_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nfunction greet(person: string, date: Date) {\n  console.log(`Hello ${person}, today is ${date.toDateString()}!`);\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Sign-in with Clerk Elements\nDESCRIPTION: Implementation of a custom sign-in interface using Clerk Elements and shadcn/ui components. Features social login options and email/password authentication.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/clerk-auth-specialist-llms-context-20250406.md#2025-04-13_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\nimport * as Clerk from '@clerk/elements/common'\nimport * as SignIn from '@clerk/elements/sign-in'\nimport Link from 'next/link'\nimport { Button } from '@/components/ui/button'\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from '@/components/ui/card'\nimport { Input } from '@/components/ui/input'\nimport { Label } from '@/components/ui/label'\nimport { Icons } from '@/components/ui/icons'\nimport { cn } from '@/lib/utils'\n\nexport default function SignInPage() {\n  return (\n    <div className=\"grid w-full grow items-center px-4 sm:justify-center\">\n      <SignIn.Root>\n        <Clerk.Loading>\n          {(isGlobalLoading) => (\n            <>\n              <SignIn.Step name=\"start\">\n                <Card className=\"w-full sm:w-96\">\n                  <CardHeader>\n                    <CardTitle>Sign in to Acme Co</CardTitle>\n                    <CardDescription>Welcome back! Please sign in to continue</CardDescription>\n                  </CardHeader>\n                  <CardContent className=\"grid gap-y-4\">\n                    <div className=\"grid grid-cols-2 gap-x-4\">\n                      <Clerk.Connection name=\"github\" asChild>\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          type=\"button\"\n                          disabled={isGlobalLoading}\n                        >\n                          <Clerk.Loading scope=\"provider:github\">\n                            {(isLoading) =>\n                              isLoading ? (\n                                <Icons.spinner className=\"size-4 animate-spin\" />\n                              ) : (\n                                <>\n                                  <Icons.gitHub className=\"mr-2 size-4\" />\n                                  GitHub\n                                </>\n                              )\n                            }\n                          </Clerk.Loading>\n                        </Button>\n                      </Clerk.Connection>\n                      <Clerk.Connection name=\"google\" asChild>\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          type=\"button\"\n                          disabled={isGlobalLoading}\n                        >\n                          <Clerk.Loading scope=\"provider:google\">\n                            {(isLoading) =>\n                              isLoading ? (\n                                <Icons.spinner className=\"size-4 animate-spin\" />\n                              ) : (\n                                <>\n                                  <Icons.google className=\"mr-2 size-4\" />\n                                  Google\n                                </>\n                              )\n                            }\n                          </Clerk.Loading>\n                        </Button>\n                      </Clerk.Connection>\n                    </div>\n                    <p className=\"flex items-center gap-x-3 text-sm text-muted-foreground before:h-px before:flex-1 before:bg-border after:h-px after:flex-1 after:bg-border\">\n                      or\n                    </p>\n                    <Clerk.Field name=\"identifier\" className=\"space-y-2\">\n                      <Clerk.Label asChild>\n                        <Label>Email address</Label>\n```\n\n----------------------------------------\n\nTITLE: Creating an INSERT Policy for Authenticated Users\nDESCRIPTION: This SQL snippet demonstrates how to create a policy that allows authenticated users to insert their own profile with row level security enabled.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/supabase-developer-llms-context-20250406.md#2025-04-13_snippet_37\n\nLANGUAGE: sql\nCODE:\n```\ncreate table profiles (\n  id uuid primary key,\n  user_id uuid references auth.users,\n  avatar_url text\n);\n\nalter table profiles enable row level security;\n\ncreate policy \"Users can create a profile.\"\non profiles for insert\nto authenticated\nwith check ( (select auth.uid()) = user_id );\n```\n\n----------------------------------------\n\nTITLE: Applying Generic Constraints in TypeScript Functions\nDESCRIPTION: Demonstrates how to use generic constraints to ensure that the type parameter has specific properties or methods.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/typescript-specialist-llms-context-20250406.md#2025-04-13_snippet_42\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Lengthwise {\n  length: number;\n}\n\nfunction loggingIdentity<T extends Lengthwise>(arg: T): T {\n  console.log(arg.length);\n  return arg;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Signals in Angular TypeScript\nDESCRIPTION: Demonstrates signal creation, reading values, and updating using set and update methods. Shows basic signal operations in Angular applications.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/angular-developer-llms-context-20250406.md#2025-04-13_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {signal} from '@angular/core';\n\n// Create a signal with the `signal` function.\nconst firstName = signal('Morgan');\n\n// Read a signal value by calling it— signals are functions.\nconsole.log(firstName());\n\n// Change the value of this signal by calling its `set` method with a new value.\nfirstName.set('Jaime');\n\n// You can also use the `update` method to change the value\n// based on the previous value.\nfirstName.update(name => name.toUpperCase());\n```\n\n----------------------------------------\n\nTITLE: Creating Reusable DataTable Component with TanStack Table in TypeScript\nDESCRIPTION: Implements a generic DataTable component using TanStack Table with shadcn/ui Table components. This reusable component handles rendering of table headers, rows, and cells with proper TypeScript generics for type safety.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/shadcn-ui-specialist-llms-context-20250406.md#2025-04-13_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\"\n\nimport {\n  ColumnDef,\n  flexRender,\n  getCoreRowModel,\n  useReactTable,\n} from \"@tanstack/react-table\"\n\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\"\n\ninterface DataTableProps<TData, TValue> {\n  columns: ColumnDef<TData, TValue>[]\n  data: TData[]\n}\n\nexport function DataTable<TData, TValue>({\n  columns,\n  data,\n}: DataTableProps<TData, TValue>) {\n  const table = useReactTable({\n    data,\n    columns,\n    getCoreRowModel: getCoreRowModel(),\n  })\n\n  return (\n    <div className=\"rounded-md border\">\n      <Table>\n        <TableHeader>\n          {table.getHeaderGroups().map((headerGroup) => (\n            <TableRow key={headerGroup.id}>\n              {headerGroup.headers.map((header) => {\n                return (\n                  <TableHead key={header.id}>\n                    {header.isPlaceholder\n                      ? null\n                      : flexRender(\n                          header.column.columnDef.header,\n                          header.getContext()\n                        )}\n                  </TableHead>\n                )\n              })}\n            </TableRow>\n          ))}\n        </TableHeader>\n        <TableBody>\n          {table.getRowModel().rows?.length ? (\n            table.getRowModel().rows.map((row) => (\n              <TableRow\n                key={row.id}\n                data-state={row.getIsSelected() && \"selected\"}\n              >\n                {row.getVisibleCells().map((cell) => (\n                  <TableCell key={cell.id}>\n                    {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                  </TableCell>\n                ))}\n              </TableRow>\n            ))\n          ) : (\n            <TableRow>\n              <TableCell colSpan={columns.length} className=\"h-24 text-center\">\n                No results.\n              </TableCell>\n            </TableRow>\n          )}\n        </TableBody>\n      </Table>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Contact Form in Django\nDESCRIPTION: This snippet shows how to create a simple contact form using Django's forms module. It defines a ContactForm class with name and message fields, and includes a method for sending emails.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/django-developer-llms-context-20250406.md#2025-04-13_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nfrom django import forms\n\n\nclass ContactForm(forms.Form):\n    name = forms.CharField()\n    message = forms.CharField(widget=forms.Textarea)\n\n    def send_email(self):\n        # send email using the self.cleaned_data dictionary\n        pass\n```\n\n----------------------------------------\n\nTITLE: Flask Route Decorator Pattern\nDESCRIPTION: Shows the basic routing pattern in Flask using decorators to map URL paths to view functions. Includes method specification and variable rules.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/032-backend/flask-developer/032-work-be-flask-developer.mode.md#2025-04-13_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n@app.route('/path/<converter:name>', methods=['GET', 'POST'])\ndef view_function(name):\n    return jsonify({'name': name})\n```\n\n----------------------------------------\n\nTITLE: Checking User Permissions in Django\nDESCRIPTION: Shows how to check user permissions in Django. This example demonstrates both checking specific permissions and module-level permissions for a user.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/django-developer-llms-context-20250406.md#2025-04-13_snippet_38\n\nLANGUAGE: python\nCODE:\n```\nif user.has_perm('app_label.permission_codename'):\n    # User has permission\n    pass\n\nif user.has_module_perms('app_label'):\n    # User has permission to access app module\n    pass\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Input Groups with Bootstrap\nDESCRIPTION: Demonstrates how to create basic input groups with text add-ons, buttons, and various input types using Bootstrap classes. This snippet showcases different ways to enhance form inputs with additional elements and styling.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/bootstrap-specialist-llms-context-20250406.md#2025-04-13_snippet_31\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"input-group mb-3\">\n  <span class=\"input-group-text\" id=\"basic-addon1\">@</span>\n  <input type=\"text\" class=\"form-control\" placeholder=\"Username\" aria-label=\"Username\" aria-describedby=\"basic-addon1\">\n</div>\n\n<div class=\"input-group mb-3\">\n  <input type=\"text\" class=\"form-control\" placeholder=\"Recipient's username\" aria-label=\"Recipient's username\" aria-describedby=\"basic-addon2\">\n  <span class=\"input-group-text\" id=\"basic-addon2\">@example.com</span>\n</div>\n\n<div class=\"mb-3\">\n  <label for=\"basic-url\" class=\"form-label\">Your vanity URL</label>\n  <div class=\"input-group\">\n    <span class=\"input-group-text\" id=\"basic-addon3\">https://example.com/users/</span>\n    <input type=\"text\" class=\"form-control\" id=\"basic-url\" aria-describedby=\"basic-addon3 basic-addon4\">\n  </div>\n  <div class=\"form-text\" id=\"basic-addon4\">Example help text goes outside the input group.</div>\n</div>\n\n<div class=\"input-group mb-3\">\n  <span class=\"input-group-text\">$</span>\n  <input type=\"text\" class=\"form-control\" aria-label=\"Amount (to the nearest dollar)\">\n\n```\n\n----------------------------------------\n\nTITLE: Inserting Multiple Rows into Movies Table with JavaScript\nDESCRIPTION: JavaScript code using Supabase client to insert multiple rows into the 'movies' table. Each movie entry includes a name and description.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/supabase-developer-llms-context-20250406.md#2025-04-13_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nconst { data, error } = await supabase.from('movies').insert([\n  {\n    name: 'The Empire Strikes Back',\n    description:\n      'After the Rebels are brutally overpowered by the Empire on the ice planet Hoth, Luke Skywalker begins Jedi training with Yoda.',\n  },\n  {\n    name: 'Return of the Jedi',\n    description:\n      'After a daring mission to rescue Han Solo from Jabba the Hutt, the Rebels dispatch to Endor to destroy the second Death Star.',\n  },\n])\n```\n\n----------------------------------------\n\nTITLE: Documenting Research Strategy in Markdown\nDESCRIPTION: Template for logging the research strategy, including primary questions to answer and information sources to consult.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/040-assistant/research-context-builder/040-asst-research-context-builder.mode.md#2025-04-13_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n```markdown\n## Research Strategy\n\n**Primary Questions:**\n- [List 2-3 key questions the research should answer]\n\n**Information Sources:**\n- Web search using keywords: [list keywords]\n- Specific documentation sites: [if applicable]\n- Code repositories: [if applicable]\n- Local project files: [if applicable]\n```\n```\n\n----------------------------------------\n\nTITLE: Basic PostgreSQL INSERT Statement\nDESCRIPTION: Shows the fundamental syntax for inserting data into a PostgreSQL table.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/neon-db-specialist-llms-context-20250406.md#2025-04-13_snippet_26\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO table1(column1, column2, …)\nVALUES (value1, value2, …);\n```\n\n----------------------------------------\n\nTITLE: Implementing OAuth2 Password Bearer Authentication\nDESCRIPTION: Shows how to set up OAuth2 password bearer authentication in FastAPI using the security utilities provided by the framework. This pattern is commonly used for securing API endpoints.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/condensed_indices/fastapi-developer-condensed-index.md#2025-04-13_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nfrom fastapi import Depends, FastAPI, HTTPException, status\nfrom fastapi.security import OAuth2PasswordBearer\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n@app.get(\"/users/me\")\nasync def read_users_me(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = get_current_user(token)\n    return user\n```\n\n----------------------------------------\n\nTITLE: Implementing handleFetch Hook for Server-Side Fetch Requests in SvelteKit\nDESCRIPTION: This snippet demonstrates the implementation of the 'handleFetch' hook in SvelteKit, allowing modification of fetch requests made inside server-side load or action functions.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/sveltekit-llms-context-20250406.md#2025-04-13_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n/// file: src/hooks.server.js\n/** @type {import('@sveltejs/kit').HandleFetch} */\nexport async function handleFetch({ request, fetch }) {\n\tif (request.url.startsWith('https://api.yourapp.com/')) {\n\t\trequest = new Request(\n\t\t\trequest.url.replace('https://api.yourapp.com/', 'http://localhost:9999/'),\n\t\t\trequest\n\t\t);\n\t}\n\n\treturn fetch(request);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Column Level Privileges in PostgreSQL\nDESCRIPTION: Revokes table-level UPDATE privilege and grants column-level UPDATE privilege on specific columns for the authenticated role.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/supabase-developer-llms-context-20250406.md#2025-04-13_snippet_35\n\nLANGUAGE: sql\nCODE:\n```\nrevoke\nupdate\n  on table public.posts\nfrom\n  authenticated;\n\ngrant\nupdate\n  (title, content) on table public.posts to authenticated;\n```\n\n----------------------------------------\n\nTITLE: Implementing Server-Side Rendering with Joy UI Dark Mode Toggle\nDESCRIPTION: Shows how to implement server-side rendering with Joy UI's dark mode while avoiding hydration mismatches. Uses a useEffect hook to render the toggle UI only after the component has mounted on the client side.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/material-ui-specialist-llms-context-20250406.md#2025-04-13_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\nfunction ModeToggle() {\n  const { mode, setMode } = useColorScheme();\n  const [mounted, setMounted] = React.useState(false);\n\n  React.useEffect(() => {\n    setMounted(true);\n  }, []);\n\n  if (!mounted) {\n    // to avoid layout shift, render a placeholder button\n    return <Button variant=\"outlined\" color=\"neutral\" sx={{ width: 120 }} />;\n  }\n\n  return (\n    <Button\n      variant=\"outlined\"\n      color=\"neutral\"\n      onClick={() => setMode(mode === 'dark' ? 'light' : 'dark')}\n    >\n      {mode === 'dark' ? 'Turn light' : 'Turn dark'}\n    </Button>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Server Components Build-Time Rendering in React\nDESCRIPTION: Demonstrates how Server Components can render content at build time, eliminating the need for client-side libraries and improving initial load performance in a React application.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/react-specialist-llms-context-20250406.md#2025-04-13_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport marked from 'marked'; // Not included in bundle\nimport sanitizeHtml from 'sanitize-html'; // Not included in bundle\n\nasync function Page({page}) {\n  // NOTE: loads *during* render, when the app is built.\n  const content = await file.readFile(`${page}.md`);\n  \n  return <div>{sanitizeHtml(marked(content))}</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Animation Values with AnimeJS\nDESCRIPTION: Demonstrates how to specify different tween value types in AnimeJS animations, including string values with units, function-based values, relative values with operators, and object notation for explicit from/to values.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/animejs-specialist-llms-context-20250406.md#2025-04-13_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nanimate('.square', {\n  x: '6rem', ─────────────────┐\n  y: $el => $el.dataset.y, ───┤\n  scale: '+=.25', ────────────┼─ Tween Values\n  opacity: {                  │\n    from: .4, ────────────────┘\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Document Storage Schema with Vector Embeddings in SQL\nDESCRIPTION: SQL schema creation for storing documents and their sections with vector embeddings. Includes tables for documents and document sections with a foreign key relationship and owner tracking.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/supabase-developer-llms-context-20250406.md#2025-04-13_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\ncreate table documents (\n  id bigint primary key generated always as identity,\n  name text not null,\n  owner_id uuid not null references auth.users (id) default auth.uid(),\n  created_at timestamp with time zone not null default now()\n);\n\ncreate table document_sections (\n  id bigint primary key generated always as identity,\n  document_id bigint not null references documents (id),\n  content text not null,\n  embedding vector (384)\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Prerender Option in SvelteKit\nDESCRIPTION: Enables or disables prerendering for routes. Can be set to true, false, or 'auto'. When true, the route will be prerendered at build time.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/sveltekit-llms-context-20250406.md#2025-04-13_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nexport const prerender = true;\n```\n\n----------------------------------------\n\nTITLE: Adding Process Time HTTP Middleware\nDESCRIPTION: Implements middleware to track request processing time and add it as a response header.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/fastapi-developer-llms-context-20250406.md#2025-04-13_snippet_24\n\nLANGUAGE: python\nCODE:\n```\n@app.middleware(\"http\")\nasync def add_process_time_header(request: Request, call_next):\n    start_time = time.perf_counter()\n    response = await call_next(request)\n    process_time = time.perf_counter() - start_time\n    response.headers[\"X-Process-Time\"] = str(process_time)\n```\n\n----------------------------------------\n\nTITLE: Custom Exception Handler\nDESCRIPTION: Implements a custom exception handler for specialized error handling.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/fastapi-developer-llms-context-20250406.md#2025-04-13_snippet_34\n\nLANGUAGE: python\nCODE:\n```\nclass UnicornException(Exception):\n    def __init__(self, name: str):\n        self.name = name\n\n@app.exception_handler(UnicornException)\nasync def unicorn_exception_handler(request: Request, exc: UnicornException):\n    return JSONResponse(\n        status_code=418,\n        content={\"message\": f\"Oops! {exc.name} did something. There goes a rainbow...\"}\n    )\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Database for Django Project\nDESCRIPTION: This snippet shows how to configure the DATABASES setting in Django's settings.py file to use PostgreSQL with environment variables and SSL.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/neon-db-specialist-llms-context-20250406.md#2025-04-13_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nDATABASES = {\n  'default': {\n    'ENGINE': 'django.db.backends.postgresql',\n    'NAME': getenv('PGDATABASE'),\n    'USER': getenv('PGUSER'),\n    'PASSWORD': getenv('PGPASSWORD'),\n    'HOST': getenv('PGHOST'),\n    'PORT': getenv('PGPORT', 5432),\n    'OPTIONS': {\n      'sslmode': 'require',\n    },\n    'DISABLE_SERVER_SIDE_CURSORS': True,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring a Django User Model\nDESCRIPTION: Shows how to create a User model instance with basic attributes in Django. This example demonstrates creating a user with username, email, and password, then updating first and last name fields.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/django-developer-llms-context-20250406.md#2025-04-13_snippet_42\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.auth.models import User\n\nuser = User.objects.create_user(\n    username='john',\n    email='john@example.com',\n    password='secret'\n)\n\nuser.first_name = 'John'\nuser.last_name = 'Doe'\nuser.save()\n```\n\n----------------------------------------\n\nTITLE: Using a Vue.js Component with Class Attribute\nDESCRIPTION: This snippet demonstrates how to use a custom Vue.js component with a class attribute. It shows attribute inheritance, where the class is passed to the root element of the component.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/vuejs-developer-llms-context-20250406.md#2025-04-13_snippet_31\n\nLANGUAGE: vue-html\nCODE:\n```\n<MyButton class=\"large\" />\n```\n\n----------------------------------------\n\nTITLE: Session Verification with Clerk Backend\nDESCRIPTION: Example of verifying a session using Clerk's Backend SDK. Takes session ID and token as parameters to validate session authenticity.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/clerk-auth-specialist-llms-context-20250406.md#2025-04-13_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst sessionId = 'my-session-id'\n\nconst token = 'my-session-token'\n\nconst session = await clerkClient.sessions.verifySession(sessionId, token)\n```\n\n----------------------------------------\n\nTITLE: Vue Ref API Implementation\nDESCRIPTION: Demonstrates creation and usage of reactive references with TypeScript interface and JavaScript example.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/vuejs-developer-llms-context-20250406.md#2025-04-13_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nfunction ref<T>(value: T): Ref<UnwrapRef<T>>\n\ninterface Ref<T> {\n  value: T\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst count = ref(0)\nconsole.log(count.value) // 0\n\ncount.value = 1\nconsole.log(count.value) // 1\n```\n\n----------------------------------------\n\nTITLE: Enabling pgvector Extension in PostgreSQL\nDESCRIPTION: SQL command to enable the pgvector extension in PostgreSQL, which provides vector similarity search capabilities. This extension is used for AI applications and vector embeddings in Supabase.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/condensed_indices/supabase-developer-condensed-index.md#2025-04-13_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\ncreate extension vector with schema extensions;\n```\n\n----------------------------------------\n\nTITLE: Method Handler with Event Object in Vue.js\nDESCRIPTION: This snippet demonstrates how to handle events using component methods in Vue.js. It shows how to access the native DOM event object and the component instance within the event handler.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/vuejs-developer-llms-context-20250406.md#2025-04-13_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nconst name = ref('Vue.js')\\n\\nfunction greet(event) {\\n  alert(`Hello ${name.value}!`)\\n  // `event` is the native DOM event\\n  if (event) {\\n    alert(event.target.tagName)\\n  }\\n}\n```\n\nLANGUAGE: vue-html\nCODE:\n```\n<!-- `greet` is the name of the method defined above -->\\n<button @click=\"greet\">Greet</button>\n```\n\n----------------------------------------\n\nTITLE: Initializing Flask Application Package\nDESCRIPTION: Main __init__.py file that creates the Flask application instance and imports views. This is the core of the Flask package structure.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/flask-developer-llms-context-20250406.md#2025-04-13_snippet_31\n\nLANGUAGE: Python\nCODE:\n```\nfrom flask import Flask\napp = Flask(__name__)\n\nimport yourapplication.views\n```\n\n----------------------------------------\n\nTITLE: Setting up Reactive Form Validation\nDESCRIPTION: Demonstrates form validation configuration using FormGroup and FormControl with built-in and custom validators.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/angular-developer-llms-context-20250406.md#2025-04-13_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nconst actorForm = new FormGroup({\n  'name': new FormControl('', [\n    Validators.required,\n    Validators.minLength(4),\n    forbiddenNameValidator(/bob/i)\n  ])\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Request Object in Remix Loader\nDESCRIPTION: Demonstrates how to use the request object in a Remix loader function to access HTTP headers and URL search parameters. Shows examples of reading cookies from headers and extracting query parameters from the URL.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/remix-developer-llms-context-20250406.md#2025-04-13_snippet_22\n\nLANGUAGE: tsx\nCODE:\n```\nexport async function loader({\n  request,\n}: LoaderFunctionArgs) {\n  // read a cookie\n  const cookie = request.headers.get(\"Cookie\");\n\n  // parse the search params for `?q=`\n  const url = new URL(request.url);\n  const query = url.searchParams.get(\"q\");\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Export in Next.js Configuration File\nDESCRIPTION: Demonstrates how to configure Next.js for static site generation by setting the output mode to 'export' in the Next.js configuration file. Includes optional settings for handling trailing slashes and customizing the output directory.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/nextjs-developer-llms-context-20250406.md#2025-04-13_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @type {import('next').NextConfig}\n */\nconst nextConfig = {\n  output: 'export',\n\n  // Optional: Change links `/me` -> `/me/` and emit `/me.html` -> `/me/index.html`\n  // trailingSlash: true,\n\n  // Optional: Prevent automatic `/me` -> `/me/`, instead preserve `href`\n  // skipTrailingSlashRedirect: true,\n\n  // Optional: Change the output directory `out` -> `dist`\n  // distDir: 'dist',\n}\n\nmodule.exports = nextConfig\n```\n\n----------------------------------------\n\nTITLE: Creating Named Interfaces in TypeScript\nDESCRIPTION: Demonstrates how to define a named interface for an object type and use it in a function parameter.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/typescript-specialist-llms-context-20250406.md#2025-04-13_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Person {\n  name: string;\n  age: number;\n}\n\nfunction greet(person: Person) {\n  return \"Hello \" + person.name;\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Single Row into PostgreSQL with Python and psycopg2\nDESCRIPTION: A Python function that inserts a new vendor record into a database table and returns the generated vendor_id. Uses psycopg2 for database connection and implements proper error handling, transaction management, and parameter binding.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/neon-db-specialist-llms-context-20250406.md#2025-04-13_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nimport psycopg2\nfrom config import load_config\n\n\ndef insert_vendor(vendor_name):\n    \"\"\" Insert a new vendor into the vendors table \"\"\"\n\n    sql = \"\"\"INSERT INTO vendors(vendor_name)\n             VALUES(%s) RETURNING vendor_id;\"\"\"\n\n    vendor_id = None\n    config = load_config()\n\n    try:\n        with  psycopg2.connect(**config) as conn:\n            with  conn.cursor() as cur:\n                # execute the INSERT statement\n                cur.execute(sql, (vendor_name,))\n\n                # get the generated id back\n                rows = cur.fetchone()\n                if rows:\n                    vendor_id = rows[0]\n\n                # commit the changes to the database\n                conn.commit()\n    except (Exception, psycopg2.DatabaseError) as error:\n        print(error)\n    finally:\n        return vendor_id\n\n\nif __name__ == '__main__':\n    insert_vendor(\"3M Co.\")\n```\n\n----------------------------------------\n\nTITLE: Complex MongoDB Aggregation with SQL Equivalent\nDESCRIPTION: Demonstrates advanced aggregation pipeline using $match, $group, and $sort stages with date filtering and calculations, alongside its SQL equivalent.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/mongodb-specialist-llms-context-20250406.md#2025-04-13_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\ndb.sales.aggregate([\n  // First Stage\n  {\n    $match : { \"date\": { $gte: new ISODate(\"2014-01-01\"), $lt: new ISODate(\"2015-01-01\") } }\n  },\n  // Second Stage\n  {\n    $group : {\n       _id : { $dateToString: { format: \"%Y-%m-%d\", date: \"$date\" } },\n       totalSaleAmount: { $sum: { $multiply: [ \"$price\", \"$quantity\" ] } },\n       averageQuantity: { $avg: \"$quantity\" },\n       count: { $sum: 1 }\n    }\n  },\n  // Third Stage\n  {\n    $sort : { totalSaleAmount: -1 }\n  }\n ])\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT date,\n       Sum(( price * quantity )) AS totalSaleAmount,\n       Avg(quantity)             AS averageQuantity,\n       Count(*)                  AS Count\nFROM   sales\nWHERE  date >= '01/01/2014' AND date < '01/01/2015'\nGROUP  BY date\nORDER  BY totalSaleAmount DESC\n```\n\n----------------------------------------\n\nTITLE: Raising HTTPException in FastAPI\nDESCRIPTION: This example demonstrates how to raise an HTTPException with a 404 status code when an item is not found. It shows error handling in FastAPI routes.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/fastapi-developer-llms-context-20250406.md#2025-04-13_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import HTTPException\n\nif item_id not in items:\n    raise HTTPException(status_code=404, detail=\"Item not found\")\n```\n\n----------------------------------------\n\nTITLE: Database Operations with Supabase JavaScript Client\nDESCRIPTION: JavaScript client methods for performing database operations in Supabase, including data retrieval with filters, data insertion, and calling PostgreSQL functions.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/condensed_indices/supabase-developer-condensed-index.md#2025-04-13_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nsupabase.from('table_name').select('columns')\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nsupabase.from('table_name').insert([{ col: val }, ...])\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nsupabase.rpc('function_name', { arg1: val })\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering with @switch Angular\nDESCRIPTION: Shows conditional rendering using @switch block with multiple @case and @default blocks.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/angular-developer-llms-context-20250406.md#2025-04-13_snippet_18\n\nLANGUAGE: angular-html\nCODE:\n```\n@switch (userPermissions) {\n  @case ('admin') {\n    <app-admin-dashboard />\n  }\n  @case ('reviewer') {\n    <app-reviewer-dashboard />\n  }\n  @case ('editor') {\n    <app-editor-dashboard />\n  }\n  @default {\n    <app-viewer-dashboard />\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Parent Data in SvelteKit Load Functions\nDESCRIPTION: Complete example showing how to access and chain data between parent and child load functions in SvelteKit routes.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/sveltekit-llms-context-20250406.md#2025-04-13_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\n/// file: src/routes/+layout.js\n/** @type {import('./$types').LayoutLoad} */\nexport function load() {\n\treturn { a: 1 };\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n/// file: src/routes/abc/+layout.js\n/** @type {import('./$types').LayoutLoad} */\nexport async function load({ parent }) {\n\tconst { a } = await parent();\n\treturn { b: a + 1 };\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n/// file: src/routes/abc/+page.js\n/** @type {import('./$types').PageLoad} */\nexport async function load({ parent }) {\n\tconst { a, b } = await parent();\n\treturn { c: a + b };\n}\n```\n\nLANGUAGE: svelte\nCODE:\n```\n<!--- file: src/routes/abc/+page.svelte --->\n<script>\n\t/** @type {import('./$types').PageProps} */\n\tlet { data } = $props();\n</script>\n\n<!-- renders `1 + 2 = 3` -->\n<p>{data.a} + {data.b} = {data.c}</p>\n```\n\n----------------------------------------\n\nTITLE: Multiple Form Handling in Single Route\nDESCRIPTION: Implementation of handling multiple forms in a single route using the intent field for form differentiation.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/remix-developer-llms-context-20250406.md#2025-04-13_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function action({\n  request,\n}: ActionFunctionArgs) {\n  const formData = await request.formData();\n  const intent = formData.get(\"intent\");\n  switch (intent) {\n    case \"update\": {\n      // do your update\n      return updateProjectName(formData.get(\"name\"));\n    }\n    case \"delete\": {\n      // do your delete\n      return deleteStuff(formData);\n    }\n\n```\n\n----------------------------------------\n\nTITLE: Including CSRF Token in Django Template Form\nDESCRIPTION: Demonstrates how to include the CSRF token in a POST form for internal URLs using Django's template tag. This is essential for security to prevent cross-site request forgery attacks.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/django-developer-llms-context-20250406.md#2025-04-13_snippet_28\n\nLANGUAGE: html\nCODE:\n```\n<form method=\"post\">{% csrf_token %}\n```\n\n----------------------------------------\n\nTITLE: Glob Importing in Vite\nDESCRIPTION: Vite provides a special import.meta.glob function for importing multiple modules from the file system.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/vite-specialist-llms-context-20250406.md#2025-04-13_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst modules = import.meta.glob('./dir/*.js')\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Route Loader in Remix (TSX)\nDESCRIPTION: Basic loader implementation that fetches and returns user data in a Remix route. Shows proper typing with LoaderFunctionArgs and json helper usage.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/remix-developer-llms-context-20250406.md#2025-04-13_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { LoaderFunctionArgs } from \"@remix-run/node\";\nimport { json } from \"@remix-run/node\";\n\nexport async function loader({\n  request,\n}: LoaderFunctionArgs) {\n  const user = await getUser(request);\n  return json({\n    displayName: user.displayName,\n    email: user.email,\n  });\n}\n\nexport default function Component() {\n  // ...\n}\n\nexport async function action() {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Document with Schema Validation in MongoDB\nDESCRIPTION: Demonstrates an attempt to insert a document into the 'students' collection that will fail validation. The error occurs because the 'gpa' field is provided as an integer when the schema validator requires a double value.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/mongodb-specialist-llms-context-20250406.md#2025-04-13_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ndb.students.insertOne( {\n   name: \"Alice\",\n   year: Int32( 2019 ),\n   major: \"History\",\n   gpa: Int32(3),\n   address: {\n      city: \"NYC\",\n      street: \"33rd Street\"\n   }\n} )\n```\n\n----------------------------------------\n\nTITLE: Testing Django View with QuerySet Assertions\nDESCRIPTION: Tests a Django view by making a GET request and asserting the expected QuerySet in the response context. This is useful for verifying that a view correctly retrieves and orders data.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/django-developer-llms-context-20250406.md#2025-04-13_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nresponse = self.client.get(reverse(\"polls:index\"))\nself.assertQuerySetEqual(\n    response.context[\"latest_question_list\"],\n    [question2, question1],\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom SvelteKit Adapter in JavaScript\nDESCRIPTION: This code snippet demonstrates the structure and required methods for creating a custom SvelteKit adapter. It includes the main adapter function, the 'adapt' method for building, an optional 'emulate' method for development and preview, and a 'supports' object for handling file system operations.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/sveltekit-llms-context-20250406.md#2025-04-13_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n/** @param {AdapterSpecificOptions} options */\nexport default function (options) {\n\t/** @type {import('@sveltejs/kit').Adapter} */\n\tconst adapter = {\n\t\tname: 'adapter-package-name',\n\t\tasync adapt(builder) {\n\t\t\t// adapter implementation\n\t\t},\n\t\tasync emulate() {\n\t\t\treturn {\n\t\t\t\tasync platform({ config, prerender }) {\n\t\t\t\t\t// the returned object becomes `event.platform` during dev, build and\n\t\t\t\t\t// preview. Its shape is that of `App.Platform`\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tsupports: {\n\t\t\tread: ({ config, route }) => {\n\t\t\t\t// Return `true` if the route with the given `config` can use `read`\n\t\t\t\t// from `$app/server` in production, return `false` if it can't.\n\t\t\t\t// Or throw a descriptive error describing how to configure the deployment\n\t\t\t}\n\t\t}\n\t};\n\n\treturn adapter;\n}\n```\n\n----------------------------------------\n\nTITLE: Server Proxy Configuration\nDESCRIPTION: Comprehensive proxy configuration examples for Vite development server including string shortcuts, options, RegExp patterns, and websocket proxying.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/vite-specialist-llms-context-20250406.md#2025-04-13_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nexport default defineConfig({\n  server: {\n    proxy: {\n      // string shorthand:\n      '/foo': 'http://localhost:4567',\n      // with options:\n      '/api': {\n        target: 'http://jsonplaceholder.typicode.com',\n        changeOrigin: true,\n        rewrite: (path) => path.replace(/^\\/api/, ''),\n      },\n      // with RegExp:\n      '^/fallback/.*': {\n        target: 'http://jsonplaceholder.typicode.com',\n        changeOrigin: true,\n        rewrite: (path) => path.replace(/^\\/fallback/, ''),\n      },\n      // Using the proxy instance\n      '/api': {\n        target: 'http://jsonplaceholder.typicode.com',\n        changeOrigin: true,\n        configure: (proxy, options) => {\n          // proxy will be an instance of 'http-proxy'\n        },\n      },\n      // Proxying websockets or socket.io:\n      '/socket.io': {\n        target: 'ws://localhost:5174',\n        ws: true,\n        rewriteWsOrigin: true,\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Class Fields with Type Annotations in TypeScript\nDESCRIPTION: Shows how to declare class fields with type annotations in TypeScript. This example defines a Point class with x and y coordinates of type number and demonstrates initializing an instance.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/typescript-specialist-llms-context-20250406.md#2025-04-13_snippet_49\n\nLANGUAGE: typescript\nCODE:\n```\nclass Point {\n  x: number;\n  y: number;\n}\n\nconst pt = new Point();\npt.x = 0;\npt.y = 0;\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Compiler with tsconfig.json\nDESCRIPTION: Illustrates the configuration of the TypeScript compiler using tsconfig.json. This example shows how to enable strict mode for robust type checking.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/031-frontend/typescript-specialist/031-work-fe-typescript-specialist.mode.md#2025-04-13_snippet_17\n\nLANGUAGE: JSON\nCODE:\n```\n{ \"compilerOptions\": { \"strict\": true } }\n```\n\n----------------------------------------\n\nTITLE: Using Type Predicates for Custom Type Guards in TypeScript\nDESCRIPTION: Demonstrates the use of type predicates to create custom type guards, allowing for more precise type narrowing in user-defined scenarios.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/typescript-specialist-llms-context-20250406.md#2025-04-13_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\ntype Fish = { swim: () => void };\ntype Bird = { fly: () => void };\n\nfunction isFish(pet: Fish | Bird): pet is Fish {\n  return (pet as Fish).swim !== undefined;\n}\n\nlet pet = getSmallPet();\n\nif (isFish(pet)) {\n  pet.swim();\n} else {\n  pet.fly();\n}\n```\n\n----------------------------------------\n\nTITLE: Updating State Based on Previous State in React\nDESCRIPTION: This example demonstrates using an updater function to set state based on the previous state value, which is useful for avoiding race conditions in state updates.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/react-specialist-llms-context-20250406.md#2025-04-13_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nfunction handleClick() {\n  setAge(a => a + 1); // setAge(42 => 43)\n  setAge(a => a + 1); // setAge(43 => 44)\n  setAge(a => a + 1); // setAge(44 => 45)\n}\n```\n\n----------------------------------------\n\nTITLE: Using Conditional Types with Generics in TypeScript\nDESCRIPTION: Shows how conditional types can be combined with generics to create flexible type definitions that adapt based on input types.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/typescript-specialist-llms-context-20250406.md#2025-04-13_snippet_41\n\nLANGUAGE: typescript\nCODE:\n```\ntype NameOrId<T extends number | string> = T extends number\n  ? IdLabel\n  : NameLabel;\n\nfunction createLabel<T extends number | string>(idOrName: T): NameOrId<T> {\n  throw \"unimplemented\";\n}\n\nlet a = createLabel(\"typescript\");\nlet b = createLabel(2.8);\nlet c = createLabel(Math.random() ? \"hello\" : 42);\n```\n\n----------------------------------------\n\nTITLE: Generic Object Types in TypeScript\nDESCRIPTION: Shows how to create generic object types using type parameters, allowing for reusable and type-safe object definitions.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/typescript-specialist-llms-context-20250406.md#2025-04-13_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Box<Type> {\n  contents: Type;\n}\n\nlet box: Box<string>;\n```\n\n----------------------------------------\n\nTITLE: Inserting Multiple Documents in MongoDB\nDESCRIPTION: Demonstrates batch document insertion into MongoDB inventory collection using insertMany(). The documents contain various item details with nested objects for size specifications.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/mongodb-specialist-llms-context-20250406.md#2025-04-13_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ndb.inventory.insertMany( [\n   { item: \"journal\", qty: 25, size: { h: 14, w: 21, uom: \"cm\" }, status: \"A\" },\n   { item: \"notebook\", qty: 50, size: { h: 8.5, w: 11, uom: \"in\" }, status: \"A\" },\n   { item: \"paper\", qty: 100, size: { h: 8.5, w: 11, uom: \"in\" }, status: \"D\" },\n   { item: \"planner\", qty: 75, size: { h: 22.85, w: 30, uom: \"cm\" }, status: \"D\" },\n   { item: \"postcard\", qty: 45, size: { h: 10, w: 15.25, uom: \"cm\" }, status: \"A\" }\n]);\n```\n\n----------------------------------------\n\nTITLE: Implementing useContext with TypeScript in React\nDESCRIPTION: This snippet demonstrates the implementation of React Context using TypeScript with proper typing for theme values and context creation.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/react-specialist-llms-context-20250406.md#2025-04-13_snippet_29\n\nLANGUAGE: tsx\nCODE:\n```\ntype Theme = \"light\" | \"dark\" | \"system\";\nconst ThemeContext = createContext<Theme>(\"system\");\n\nconst useGetTheme = () => useContext(ThemeContext);\n```\n\n----------------------------------------\n\nTITLE: Creating Nested React Components with JSX\nDESCRIPTION: Illustrates how to create and nest React components using JSX syntax. The Gallery component renders multiple Profile components.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/react-specialist-llms-context-20250406.md#2025-04-13_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Profile() {\n  return (\n    <img\n      src=\"https://i.imgur.com/MK3eW3As.jpg\"\n      alt=\"Katherine Johnson\"\n    />\n  );\n}\n\nexport default function Gallery() {\n  return (\n    <section>\n      <h1>Amazing scientists</h1>\n      <Profile />\n      <Profile />\n      <Profile />\n    </section>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Protecting Server Actions with Clerk Auth in Next.js\nDESCRIPTION: This snippet shows how to use the auth() helper from Clerk to protect a server action in a Server Component. It checks if the user is signed in before allowing the action to proceed.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/clerk-auth-specialist-llms-context-20250406.md#2025-04-13_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport { auth } from '@clerk/nextjs/server'\n\nexport default function AddToCart() {\n  async function addItem(formData: FormData) {\n    'use server'\n\n    const { userId } = await auth()\n\n    if (!userId) {\n      throw new Error('You must be signed in to add an item to your cart')\n    }\n\n    console.log('add item server action', formData)\n  }\n\n  return (\n    <form action={addItem}>\n      <input value={'test'} type=\"text\" name=\"name\" />\n      <button type=\"submit\">Add to Cart</button>\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating MongoDB User with Multiple Roles\nDESCRIPTION: Creates a MongoDB user named 'accountAdmin01' with custom data and multiple roles. The roles include cluster administration, read access to all databases, and read-write access to the current database. The command also specifies a majority write concern with a timeout.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/mongodb-specialist-llms-context-20250406.md#2025-04-13_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nuse products\ndb.createUser( { user: \"accountAdmin01\",\n                 pwd: passwordPrompt(),  // Or  \"<cleartext password>\"\n                 customData: { employeeId: 12345 },\n                 roles: [ { role: \"clusterAdmin\", db: \"admin\" },\n                          { role: \"readAnyDatabase\", db: \"admin\" },\n                          \"readWrite\"] },\n               { w: \"majority\" , wtimeout: 5000 } )\n```\n\n----------------------------------------\n\nTITLE: Executing Database Query with Python SQLite\nDESCRIPTION: Executes a database query and returns results based on the 'one' parameter. If 'one' is True, returns only the first row or None if no results exist.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/flask-developer-llms-context-20250406.md#2025-04-13_snippet_32\n\nLANGUAGE: python\nCODE:\n```\ncur = get_db().execute(query, args)\nrv = cur.fetchall()\ncur.close()\nreturn (rv[0] if rv else None) if one else rv\n```\n\n----------------------------------------\n\nTITLE: Node.js AWS Lambda Database Function\nDESCRIPTION: AWS Lambda function that connects to a Neon database using Node.js pg client to retrieve user data with error handling.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/neon-db-specialist-llms-context-20250406.md#2025-04-13_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\n'use strict';\nconst { Client } = require('pg');\n\nlet client;\n\nmodule.exports.getAllUsers = async () => {\n  if (!client) {\n    console.log('Initializing new database client');\n    client = new Client({ connectionString: process.env.DATABASE_URL });\n    try {\n      await client.connect();\n    } catch (error) {\n      console.error('Error connecting to the database:', error);\n      return {\n        statusCode: 500,\n        body: JSON.stringify({\n          error: 'Failed to connect to the database',\n        }),\n      };\n    }\n  }\n\n  try {\n    const { rows } = await client.query('SELECT * FROM users');\n    return {\n      statusCode: 200,\n      body: JSON.stringify({\n        data: rows,\n      }),\n    };\n  } catch (error) {\n    console.error('Error executing query:', error);\n    return {\n      statusCode: 500,\n      body: JSON.stringify({\n        error: 'Failed to fetch users',\n      }),\n    };\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Reporter and Article Models in Django\nDESCRIPTION: Creates models for a news system with Reporter and Article entities, demonstrating relationships and string representation.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/django-developer-llms-context-20250406.md#2025-04-13_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\n\n\nclass Reporter(models.Model):\n    full_name = models.CharField(max_length=70)\n\n    def __str__(self):\n        return self.full_name\n\n\nclass Article(models.Model):\n    pub_date = models.DateField()\n    headline = models.CharField(max_length=200)\n    content = models.TextField()\n    reporter = models.ForeignKey(Reporter, on_delete=models.CASCADE)\n\n    def __str__(self):\n        return self.headline\n```\n\n----------------------------------------\n\nTITLE: Demonstrating sx Prop Usage in Material UI v5 with React\nDESCRIPTION: This code snippet illustrates how to use the new sx prop in Material UI v5 for applying custom styles to a Box component. It showcases the ability to work with a superset of CSS, including responsive styles and pseudo-selectors.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/material-ui-specialist-llms-context-20250406.md#2025-04-13_snippet_23\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport Box from '@mui/material/Box';\n\nexport default function BoxSx() {\n  return (\n    <Box\n      sx={{\n        width: 300,\n        height: 300,\n        backgroundColor: 'primary.dark',\n        '&:hover': {\n          backgroundColor: 'primary.main',\n          opacity: [0.9, 0.8, 0.7],\n        },\n      }}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Angular Component Structure\nDESCRIPTION: Shows fundamental structure of an Angular component with decorator, selector, and template.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/angular-developer-llms-context-20250406.md#2025-04-13_snippet_16\n\nLANGUAGE: angular-ts\nCODE:\n```\n@Component({\n  selector: 'profile-photo',\n  template: `<img src=\"profile-photo.jpg\" alt=\"Your profile photo\">`,\n})\nexport class ProfilePhoto { }\n```\n\n----------------------------------------\n\nTITLE: Using Clerk Backend SDK Standalone in TypeScript\nDESCRIPTION: Example of using the Clerk Backend SDK on its own to authenticate a request. It demonstrates creating a Clerk client with environment variables and using it to authenticate an incoming request.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/clerk-auth-specialist-llms-context-20250406.md#2025-04-13_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createClerkClient } from '@clerk/backend'\n\nexport async function GET(req: Request) {\n  const clerkClient = createClerkClient({\n    secretKey: process.env.CLERK_SECRET_KEY,\n    publishableKey: process.env.CLERK_PUBLISHABLE_KEY,\n  })\n\n  const { isSignedIn } = await clerkClient.authenticateRequest(req, {\n    authorizedParties: ['https://example.com'],\n  })\n\n  if (!isSignedIn) {\n    return Response.json({ status: 401 })\n  }\n\n  // Add logic to perform protected actions\n\n  return Response.json({ message: 'This is a reply' })\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Dark Mode with ThemeProvider in Material UI\nDESCRIPTION: Creates and applies a dark theme using Material UI's ThemeProvider and CssBaseline components. This demonstrates the basic setup for enabling dark mode application-wide.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/material-ui-specialist-llms-context-20250406.md#2025-04-13_snippet_20\n\nLANGUAGE: js\nCODE:\n```\nimport { ThemeProvider, createTheme } from '@mui/material/styles';\nimport CssBaseline from '@mui/material/CssBaseline';\n\nconst darkTheme = createTheme({\n  palette: {\n    mode: 'dark',\n  },\n});\n\nexport default function App() {\n  return (\n    <ThemeProvider theme={darkTheme}>\n      <CssBaseline />\n      <main>This app is using the dark mode</main>\n    </ThemeProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Load Function Implementation\nDESCRIPTION: Demonstrates the proper way to handle data in a load function by returning it instead of setting global state.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/sveltekit-llms-context-20250406.md#2025-04-13_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('./$types').PageServerLoad} */\nexport async function load({ fetch }) {\n\tconst response = await fetch('/api/user');\n\n\treturn {\n\t\tuser: await response.json()\n\t};\n}\n```\n\n----------------------------------------\n\nTITLE: create-next-app CLI Options for Non-interactive Setup\nDESCRIPTION: Comprehensive list of command-line options for create-next-app, allowing non-interactive project setup with specific configurations such as TypeScript, Tailwind CSS, ESLint, and more.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/nextjs-developer-llms-context-20250406.md#2025-04-13_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nUsage: create-next-app [project-directory] [options]\n\nOptions:\n  -V, --version                        output the version number\n  --ts, --typescript\n\n    Initialize as a TypeScript project. (default)\n\n  --js, --javascript\n\n    Initialize as a JavaScript project.\n\n  --tailwind\n\n    Initialize with Tailwind CSS config. (default)\n\n  --eslint\n\n    Initialize with ESLint config.\n\n  --app\n\n    Initialize as an App Router project.\n\n  --src-dir\n\n    Initialize inside a `src/` directory.\n\n  --turbopack\n\n    Enable Turbopack by default for development.\n\n  --import-alias <alias-to-configure>\n\n    Specify import alias to use (default \"@/*\").\n\n  --empty\n\n    Initialize an empty project.\n\n  --use-npm\n\n    Explicitly tell the CLI to bootstrap the application using npm\n\n  --use-pnpm\n\n    Explicitly tell the CLI to bootstrap the application using pnpm\n\n  --use-yarn\n\n    Explicitly tell the CLI to bootstrap the application using Yarn\n\n  --use-bun\n\n    Explicitly tell the CLI to bootstrap the application using Bun\n\n  -e, --example [name]|[github-url]\n\n    An example to bootstrap the app with. You can use an example name\n    from the official Next.js repo or a GitHub URL. The URL can use\n    any branch and/or subdirectory\n\n  --example-path <path-to-example>\n\n    In a rare case, your GitHub URL might contain a branch name with\n    a slash (e.g. bug/fix-1) and the path to the example (e.g. foo/bar).\n    In this case, you must specify the path to the example separately:\n    --example-path foo/bar\n\n  --reset-preferences\n\n    Explicitly tell the CLI to reset any stored preferences\n\n  --skip-install\n\n    Explicitly tell the CLI to skip installing packages\n\n  --disable-git\n\n    Explicitly tell the CLI to skip initializing a git repository.\n\n  --yes\n\n    Use previous preferences or defaults for all options that were not\n    explicitly specified, without prompting.\n\n  -h, --help                           display help for command\n```\n\n----------------------------------------\n\nTITLE: Protected tRPC Procedure Implementation\nDESCRIPTION: Setup for protected tRPC procedures using authentication middleware. Includes error handling for unauthorized access attempts.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/clerk-auth-specialist-llms-context-20250406.md#2025-04-13_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst isAuthed = t.middleware(({ next, ctx }) => {\n  if (!ctx.auth.userId) {\n    throw new TRPCError({ code: 'UNAUTHORIZED' })\n  }\n  return next({\n    ctx: {\n      auth: ctx.auth,\n    },\n  })\n})\n\nexport const router = t.router\nexport const publicProcedure = t.procedure\nexport const protectedProcedure = t.procedure.use(isAuthed)\n```\n\n----------------------------------------\n\nTITLE: Server-side Page Data Loading in SvelteKit\nDESCRIPTION: Demonstrates a server-side load function in +page.server.js that fetches data from a database. This function only runs on the server and can access private resources.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/sveltekit-llms-context-20250406.md#2025-04-13_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n/// file: src/routes/blog/[slug]/+page.server.js\nimport * as db from '$lib/server/database';\n\n/** @type {import('./$types').PageServerLoad} */\nexport async function load({ params }) {\n\treturn {\n\t\tpost: await db.getPost(params.slug)\n\t};\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Flask Database Session Management\nDESCRIPTION: Sets up automatic database session cleanup at the end of each request using Flask's teardown_appcontext decorator.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/flask-developer-llms-context-20250406.md#2025-04-13_snippet_21\n\nLANGUAGE: Python\nCODE:\n```\nfrom yourapplication.database import db_session\n\n@app.teardown_appcontext\ndef shutdown_session(exception=None):\n    db_session.remove()\n```\n\n----------------------------------------\n\nTITLE: Password Form Data Handling in FastAPI\nDESCRIPTION: This example demonstrates handling username and password form data using OAuth2PasswordRequestForm dependency in FastAPI. It shows user lookup and authentication logic, including raising an HTTPException for incorrect credentials.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/fastapi-developer-llms-context-20250406.md#2025-04-13_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\nif not user_dict:\n    raise HTTPException(\n        status_code=400, detail=\"Incorrect username or password\"\n    )\n```\n\n----------------------------------------\n\nTITLE: Next.js Joy UI Theme Registry Implementation\nDESCRIPTION: Implementation of a ThemeRegistry component for Joy UI integration with Next.js App Router, handling server-side style injection\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/material-ui-specialist-llms-context-20250406.md#2025-04-13_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\nimport createCache from '@emotion/cache';\nimport { useServerInsertedHTML } from 'next/navigation';\nimport { CacheProvider } from '@emotion/react';\nimport { CssVarsProvider } from '@mui/joy/styles';\nimport CssBaseline from '@mui/joy/CssBaseline';\nimport theme from '/path/to/custom/theme'; // OPTIONAL\n\nexport default function ThemeRegistry(props) {\n  const { options, children } = props;\n\n  const [{ cache, flush }] = React.useState(() => {\n    const cache = createCache(options);\n    cache.compat = true;\n    const prevInsert = cache.insert;\n    let inserted: string[] = [];\n    cache.insert = (...args) => {\n      const serialized = args[1];\n      if (cache.inserted[serialized.name] === undefined) {\n        inserted.push(serialized.name);\n      }\n      return prevInsert(...args);\n    };\n    const flush = () => {\n      const prevInserted = inserted;\n      inserted = [];\n      return prevInserted;\n    };\n    return { cache, flush };\n  });\n\n  useServerInsertedHTML(() => {\n    const names = flush();\n    if (names.length === 0) {\n      return null;\n    }\n    let styles = '';\n    for (const name of names) {\n      styles += cache.inserted[name];\n    }\n    return (\n      <style\n        key={cache.key}\n        data-emotion={`${cache.key} ${names.join(' ')}`}\n        dangerouslySetInnerHTML={{\n          __html: styles,\n        }}\n      />\n    );\n  });\n\n  return (\n    <CacheProvider value={cache}>\n      <CssVarsProvider theme={theme}>\n        <CssBaseline />\n        {children}\n      </CssVarsProvider>\n    </CacheProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Bootstrap CSS and JavaScript in Webpack\nDESCRIPTION: JavaScript code to import Bootstrap's CSS and all of its JavaScript components in the Webpack entry point. This setup allows for easy integration of Bootstrap in a Webpack-based project.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/bootstrap-specialist-llms-context-20250406.md#2025-04-13_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n// Import our custom CSS\nimport '../scss/styles.scss'\n\n// Import all of Bootstrap's JS\nimport * as bootstrap from 'bootstrap'\n```\n\n----------------------------------------\n\nTITLE: Creating Basic D3 Transition in JavaScript\nDESCRIPTION: Shows how to create a simple transition that changes the background color of the body element. This example demonstrates the basic transition syntax using d3.select() followed by transition() and style() methods.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/d3js-specialist-llms-context-20250406.md#2025-04-13_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nd3.select(\"body\")\n  .transition()\n    .style(\"background-color\", \"red\");\n```\n\n----------------------------------------\n\nTITLE: Creating a Reactive Effect\nDESCRIPTION: Demonstrates how to create an effect that executes code reactively based on signal changes. Effects are useful for performing side effects in response to state changes.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/031-frontend/angular-developer/031_angular-developer.mode.md#2025-04-13_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\neffect(() => { /* side effect */ })\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL GROUP BY with max() Function\nDESCRIPTION: Query using max() aggregate function with GROUP BY to find largest order amounts per customer, limited to top 5.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/neon-db-specialist-llms-context-20250406.md#2025-04-13_snippet_30\n\nLANGUAGE: sql\nCODE:\n```\nSELECT customer_id, max(order_amount) AS largest_order\nFROM orders\nGROUP BY customer_id\nORDER BY largest_order DESC\nLIMIT 5;\n```\n\n----------------------------------------\n\nTITLE: Implementing FastAPI CRUD Operations\nDESCRIPTION: Shows implementation of basic CRUD operations using FastAPI with Pydantic models for request/response validation.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/fastapi-developer-llms-context-20250406.md#2025-04-13_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\nclass Item(BaseModel):\n    name: str\n    price: float\n    is_offer: Union[bool, None] = None\n\n@app.get(\"/\")\ndef read_root():\n    return {\"Hello\": \"World\"}\n\n@app.get(\"/items/{item_id}\")\ndef read_item(item_id: int, q: Union[str, None] = None):\n    return {\"item_id\": item_id, \"q\": q}\n\n@app.put(\"/items/{item_id}\")\ndef update_item(item_id: int, item: Item):\n    return {\"item_name\": item.name, \"item_id\": item_id}\n```\n\n----------------------------------------\n\nTITLE: Using JavaScript Expressions in Vue Templates\nDESCRIPTION: This snippet shows examples of using JavaScript expressions within Vue template bindings for dynamic content. It demonstrates various ways to compute values directly in the template.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/vuejs-developer-llms-context-20250406.md#2025-04-13_snippet_30\n\nLANGUAGE: vue-html\nCODE:\n```\n{{ number + 1 }}\n\n{{ ok ? 'YES' : 'NO' }}\n\n{{ message.split('').reverse().join('') }}\n\n<div :id=\"`list-${id}`\"></div>\n```\n\n----------------------------------------\n\nTITLE: Implementing generateStaticParams for Dynamic SSG\nDESCRIPTION: Use generateStaticParams to specify which dynamic routes should be pre-rendered at build time for static site generation.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/031-frontend/nextjs-developer/031-work-fe-nextjs-developer.mode.md#2025-04-13_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// app/blog/[slug]/page.tsx\nexport async function generateStaticParams() {\n  const posts = await getPosts()\n  return posts.map((post) => ({\n    slug: post.slug,\n  }))\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RunnableDevEnvironment and ModuleRunner in TypeScript\nDESCRIPTION: This snippet defines the RunnableDevEnvironment class and ModuleRunner interface, which are used for running modules in the same runtime as the Vite server. It includes methods for importing modules and checking environment compatibility.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/vite-specialist-llms-context-20250406.md#2025-04-13_snippet_45\n\nLANGUAGE: typescript\nCODE:\n```\nexport class RunnableDevEnvironment extends DevEnvironment {\n  public readonly runner: ModuleRunner\n}\n\nclass ModuleRunner {\n  /**\n   * URL to execute.\n   * Accepts file path, server path, or id relative to the root.\n   * Returns an instantiated module (same as in ssrLoadModule)\n   */\n  public async import(url: string): Promise<Record<string, any>>\n  /**\n   * Other ModuleRunner methods...\n   */\n}\n\nif (isRunnableDevEnvironment(server.environments.ssr)) {\n  await server.environments.ssr.runner.import('/entry-point.js')\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom User Model in Django\nDESCRIPTION: This code snippet shows how to create a custom User model that uses an email address as the username and includes a required date of birth field. It defines a custom manager and overrides necessary methods.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/django-developer-llms-context-20250406.md#2025-04-13_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\nfrom django.contrib.auth.models import BaseUserManager, AbstractBaseUser\n\nclass MyUserManager(BaseUserManager):\n    def create_user(self, email, date_of_birth, password=None):\n        if not email:\n            raise ValueError(\"Users must have an email address\")\n        user = self.model(\n            email=self.normalize_email(email),\n            date_of_birth=date_of_birth,\n        )\n        user.set_password(password)\n        user.save(using=self._db)\n        return user\n\n    def create_superuser(self, email, date_of_birth, password=None):\n        user = self.create_user(\n            email,\n            password=password,\n            date_of_birth=date_of_birth,\n        )\n        user.is_admin = True\n        user.save(using=self._db)\n        return user\n\nclass MyUser(AbstractBaseUser):\n    email = models.EmailField(\n        verbose_name=\"email address\",\n        max_length=255,\n        unique=True,\n    )\n    date_of_birth = models.DateField()\n    is_active = models.BooleanField(default=True)\n    is_admin = models.BooleanField(default=False)\n\n    objects = MyUserManager()\n\n    USERNAME_FIELD = \"email\"\n    REQUIRED_FIELDS = [\"date_of_birth\"]\n\n    def __str__(self):\n        return self.email\n\n    def has_perm(self, perm, obj=None):\n        return True\n\n    def has_module_perms(self, app_label):\n        return True\n\n    @property\n    def is_staff(self):\n        return self.is_admin\n```\n\n----------------------------------------\n\nTITLE: Implementing Command Prototype Methods in Three.js Editor\nDESCRIPTION: Defines the required prototype methods for a Three.js editor command including execute, undo, toJSON, and fromJSON. These methods handle applying changes, restoring previous states, and serializing/deserializing the command for history management.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/threejs-specialist-llms-context-20250406.md#2025-04-13_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nDoSomethingCommand.prototype = {\n\n\texecute: function () {\n\n\t\t// TODO: apply changes to 'object' to reach the new state\n\n\t},\n\n\tundo: function () {\n\n\t\t// TODO: restore 'object' to old state\n\n\t},\n\n\ttoJSON: function () {\n\n\t\tvar output = Command.prototype.toJSON.call( this ); // Required: Call 'toJSON'-method of prototype 'Command'\n\n\t\t// TODO: serialize all the necessary information as part of 'output' (JSON-format)\n\t\t// so that it can be restored in 'fromJSON'\n\n\t\treturn output;\n\n\t},\n\n\tfromJSON: function ( json ) {\n\n\t\tCommand.prototype.fromJSON.call( this, json ); // Required: Call 'fromJSON'-method of prototype 'Command'\n\n\t\t// TODO: restore command from json\n\n\t}\n\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Streaming Rendering with React Suspense\nDESCRIPTION: Usage of the Suspense component from React to enable streaming rendering in Next.js, allowing for improved loading states and partial content display.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/condensed_indices/nextjs-developer-condensed-index.md#2025-04-13_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n<Suspense fallback={...}>\n```\n\n----------------------------------------\n\nTITLE: Flask Application Factory Pattern\nDESCRIPTION: Demonstrates the recommended pattern for creating and configuring Flask applications using a factory function. This pattern improves testability and scalability while ensuring proper extension initialization.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/032-backend/flask-developer/032-work-be-flask-developer.mode.md#2025-04-13_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\ndef create_app():\n    app = Flask(__name__)\n    # Configure app\n    app.config.from_object('config')\n    # Initialize extensions\n    ext.init_app(app)\n    return app\n```\n\n----------------------------------------\n\nTITLE: Basic MongoDB $lookup Aggregation Stage\nDESCRIPTION: Demonstrates the syntax for performing a simple equality join between two collections using the $lookup aggregation stage.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/mongodb-specialist-llms-context-20250406.md#2025-04-13_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n{\n   $lookup:\n     {\n       from: <collection to join>,\n       localField: <field from the input documents>,\n       foreignField: <field from the documents of the \"from\" collection>,\n       as: <output array field>\n     }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Root Layout with HTML and Body Elements in Next.js\nDESCRIPTION: Demonstrates how to define a root layout in Next.js that includes the required HTML and body tags. This layout provides the foundation for the entire application and determines where nested layouts and pages are rendered.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/nextjs-developer-llms-context-20250406.md#2025-04-13_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\nexport default function DashboardLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <body>\n        {/* Layout UI */}\n        {/* Place children where you want to render a page or nested layout */}\n        <main>{children}</main>\n      </body>\n    </html>\n  )\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function DashboardLayout({ children }) {\n  return (\n    <html lang=\"en\">\n      <body>\n        {/* Layout UI */}\n        {/* Place children where you want to render a page or nested layout */}\n        <main>{children}</main>\n      </body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SvelteKit with Adapter in JavaScript\nDESCRIPTION: Demonstrates the basic structure of a svelte.config.js file, showing how to import and configure an adapter for SvelteKit. The configuration includes TypeScript type declarations and the main configuration object with adapter setup.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/sveltekit-llms-context-20250406.md#2025-04-13_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/// file: svelte.config.js\n// @filename: ambient.d.ts\ndeclare module '@sveltejs/adapter-auto' {\n\tconst plugin: () => import('@sveltejs/kit').Adapter;\n\texport default plugin;\n}\n\n// @filename: index.js\n// ---cut---\nimport adapter from '@sveltejs/adapter-auto';\n\n/** @type {import('@sveltejs/kit').Config} */\nconst config = {\n\tkit: {\n\t\tadapter: adapter()\n\t}\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Class-based Flask Configuration Pattern\nDESCRIPTION: Demonstrates using Python classes for managing different configuration environments in Flask applications. This pattern allows for inheritance where specific environments like production can override base settings.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/flask-developer-llms-context-20250406.md#2025-04-13_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nclass Config(object):\n    TESTING = False\n\nclass ProductionConfig(Config):\n\n```\n\n----------------------------------------\n\nTITLE: Authentication Functions in SQL for Row Level Security\nDESCRIPTION: SQL functions used in Supabase to retrieve authentication information within database queries and RLS policies.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/032-backend/supabase-developer/032-work-be-supabase-developer.mode.md#2025-04-13_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\nauth.uid()\nauth.jwt()\n```\n\n----------------------------------------\n\nTITLE: Ref Forwarding Pattern\nDESCRIPTION: Shows how to forward refs through multiple component levels\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/react-specialist-llms-context-20250406.md#2025-04-13_snippet_44\n\nLANGUAGE: javascript\nCODE:\n```\nconst FormField = forwardRef(function FormField(props, ref) {\n  // ...\n  return (\n    <>\n      <MyInput ref={ref} />\n      ...\n    </>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Joy UI Color Scheme Styling\nDESCRIPTION: Example of applying different styles for light and dark color schemes in Joy UI using theme.getColorSchemeSelector\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/material-ui-specialist-llms-context-20250406.md#2025-04-13_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nextendTheme({\n  components: {\n    JoyChip: {\n      styleOverrides: {\n        root: ({ ownerState, theme }) => ({\n          boxShadow: theme.vars.shadow.sm,\n\n          [theme.getColorSchemeSelector('dark')]: {\n            boxShadow: 'none',\n          },\n        }),\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Injectable Calculator Service in Angular TypeScript\nDESCRIPTION: Creates a basic injectable service using @Injectable decorator with root-level provision. Implements a simple calculator with add functionality.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/angular-developer-llms-context-20250406.md#2025-04-13_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Injectable} from '@angular/core';\n\n@Injectable({providedIn: 'root'})\nexport class Calculator {\n  add(x: number, y: number) {\n    return x + y;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Vite Applications with Package Managers\nDESCRIPTION: Different ways to create a new Vue application with Vite using various package managers including npm, yarn, pnpm, and bun.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/vite-specialist-llms-context-20250406.md#2025-04-13_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# npm 7+, extra double-dash is needed:\n$ npm create vite@latest my-vue-app -- --template vue\n$ yarn create vite my-vue-app --template vue\n$ pnpm create vite my-vue-app --template vue\n$ bun create vite my-vue-app --template vue\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Animation with AnimeJS\nDESCRIPTION: Shows the fundamental pattern for creating an animation using the animate() method with targets and parameters.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/animejs-specialist-llms-context-20250406.md#2025-04-13_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst animation = animate(targets, parameters);\n```\n\n----------------------------------------\n\nTITLE: Initializing Firebase Web App\nDESCRIPTION: Demonstrates how to initialize a Firebase application using the modular Web v9 SDK. Requires a firebaseConfig object with project credentials.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/032-backend/firebase-developer/032-work-be-firebase-developer.mode.md#2025-04-13_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { initializeApp } from 'firebase/app';\nconst firebaseConfig = { apiKey: '...', authDomain: '...', projectId: '...', ... };\nconst app = initializeApp(firebaseConfig);\n```\n\n----------------------------------------\n\nTITLE: Implementing Form Validation with JavaScript in Bootstrap\nDESCRIPTION: JavaScript code that handles custom form validation by preventing form submission and showing validation feedback. This script enhances Bootstrap's form validation capabilities.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/bootstrap-specialist-llms-context-20250406.md#2025-04-13_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\n(() => {\n  'use strict'\n\n  const forms = document.querySelectorAll('.needs-validation')\n\n  Array.from(forms).forEach(form => {\n    form.addEventListener('submit', event => {\n      if (!form.checkValidity()) {\n        event.preventDefault()\n        event.stopPropagation()\n      }\n\n      form.classList.add('was-validated')\n    }, false)\n  })\n})()\n```\n\n----------------------------------------\n\nTITLE: Event Handling with v-on Directive in Vue\nDESCRIPTION: This snippet showcases various ways to use the v-on directive for event handling in Vue. It includes method handlers, inline statements, shorthand syntax, and event modifiers for common operations.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/vuejs-developer-llms-context-20250406.md#2025-04-13_snippet_15\n\nLANGUAGE: vue\nCODE:\n```\n<!-- method handler -->\n<button v-on:click=\"doThis\"></button>\n\n<!-- inline statement -->\n<button v-on:click=\"doThat('hello', $event)\"></button>\n\n<!-- shorthand -->\n<button @click=\"doThis\"></button>\n\n<!-- stop propagation -->\n<button @click.stop=\"doThis\"></button>\n\n<!-- prevent default -->\n<button @click.prevent=\"doThis\"></button>\n```\n\n----------------------------------------\n\nTITLE: Revalidating Next.js Cache After Form Submission\nDESCRIPTION: Shows how to revalidate specific paths in the Next.js cache after performing data updates. This server function processes form data and then triggers a cache update for the /posts route using revalidatePath.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/nextjs-developer-llms-context-20250406.md#2025-04-13_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\n'use server'\n\nimport { revalidatePath } from 'next/cache'\n\nexport async function createPost(formData: FormData) {\n  // Update data\n  // ...\n\n  revalidatePath('/posts')\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n'use server'\n\nimport { revalidatePath } from 'next/cache'\n\nexport async function createPost(formData) {\n  // Update data\n  // ...\n  revalidatePath('/posts')\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing User Data in Next.js Pages Router\nDESCRIPTION: Implementation of getServerSideProps to handle user authentication and data access using Clerk's server-side utilities. Demonstrates route protection and user data fetching.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/clerk-auth-specialist-llms-context-20250406.md#2025-04-13_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getAuth, buildClerkProps } from '@clerk/nextjs/server'\nimport { GetServerSideProps } from 'next'\n\nexport const getServerSideProps: GetServerSideProps = async (ctx) => {\n  // Use `getAuth()` to get the user's ID\n  const { userId } = getAuth(ctx.req)\n\n  // Protect the route by checking if the user is signed in\n  if (!userId) {\n    // Handle when the user is not signed in\n  }\n\n  // Initialize the Backend SDK\n  const client = await clerkClient()\n\n  // Get the user's full `Backend User` object\n  const user = userId ? await client.users.getUser(userId) : undefined\n\n  return { props: { ...buildClerkProps(ctx.req, { user }) } }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Computed Property with Vue 3 Composition API\nDESCRIPTION: This snippet demonstrates how to implement a computed property using Vue 3's Composition API. It uses reactive data and a computed ref to determine the status of published books.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/vuejs-developer-llms-context-20250406.md#2025-04-13_snippet_12\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { reactive, computed } from 'vue'\n\nconst author = reactive({\n  name: 'John Doe',\n  books: [\n    'Vue 2 - Advanced Guide',\n    'Vue 3 - Basic Guide',\n    'Vue 4 - The Mystery'\n  ]\n})\n\nconst publishedBooksMessage = computed(() => {\n  return author.books.length > 0 ? 'Yes' : 'No'\n})\n</script>\n\n<template>\n  <p>Has published books:</p>\n  <span>{{ publishedBooksMessage }}</span>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Performing Terms Aggregation with Top Hits in Elasticsearch\nDESCRIPTION: An aggregation query that groups documents by 'type' field and returns the most recent document for each type. It uses terms aggregation combined with top_hits, and filters the returned source to include only date and price fields.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/elasticsearch-specialist-llms-context-20250406.md#2025-04-13_snippet_36\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"aggs\": {\n    \"top_tags\": {\n      \"terms\": {\n        \"field\": \"type\",\n        \"size\": 3\n      },\n      \"aggs\": {\n        \"top_sales_hits\": {\n          \"top_hits\": {\n            \"sort\": [\n              {\n                \"date\": {\n                  \"order\": \"desc\"\n                }\n              }\n            ],\n            \"_source\": {\n              \"includes\": [ \"date\", \"price\" ]\n            },\n            \"size\": 1\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Index with Mapped Properties in Elasticsearch\nDESCRIPTION: Demonstrates creating an Elasticsearch index with explicitly defined properties for both object and nested field types. The example shows mapping configuration for a manager object and nested employees array, including age and name fields for each.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/elasticsearch-specialist-llms-context-20250406.md#2025-04-13_snippet_31\n\nLANGUAGE: console\nCODE:\n```\nPUT my-index-000001\n{\n  \"mappings\": {\n    \"properties\": {\n      \"manager\": {\n        \"properties\": {\n          \"age\":  { \"type\": \"integer\" },\n          \"name\": { \"type\": \"text\"  }\n        }\n      },\n      \"employees\": {\n        \"type\": \"nested\",\n        \"properties\": {\n          \"age\":  { \"type\": \"integer\" },\n          \"name\": { \"type\": \"text\"  }\n        }\n      }\n    }\n  }\n}\n\nPUT my-index-000001/_doc/1\n{\n  \"region\": \"US\",\n  \"manager\": {\n    \"name\": \"Alice White\",\n    \"age\": 30\n  },\n  \"employees\": [\n    {\n      \"name\": \"John Smith\",\n      \"age\": 34\n    },\n    {\n      \"name\": \"Peter Brown\",\n      \"age\": 26\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Context-Based State Management in SvelteKit\nDESCRIPTION: Shows how to use Svelte's context API for state management in a layout component, making state accessible to child components.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/sveltekit-llms-context-20250406.md#2025-04-13_snippet_31\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\timport { setContext } from 'svelte';\n\n\t/** @type {import('./$types').LayoutProps} */\n\tlet { data } = $props();\n\n\t// Pass a function referencing our state\n\t// to the context for child components to access\n\tsetContext('user', () => data.user);\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating Stacked Bar Chart with D3.js\nDESCRIPTION: This snippet demonstrates how to create a stacked bar chart using D3.js. It includes data binding, joining elements, and setting attributes for rectangles based on data values.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/d3js-specialist-llms-context-20250406.md#2025-04-13_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n.selectAll(\"g\")\n  .data(series)\n  .join(\"g\")\n    .attr(\"fill\", d => color(d.key))\n  .selectAll(\"rect\")\n  .data(D => D)\n  .join(\"rect\")\n    .attr(\"x\", d => x(d.data[0]))\n    .attr(\"y\", d => y(d[1]))\n    .attr(\"height\", d => y(d[0]) - y(d[1]))\n    .attr(\"width\", x.bandwidth());\n```\n\n----------------------------------------\n\nTITLE: Inverting Linear Scale in D3.js\nDESCRIPTION: Demonstrates inverting a linear scale to get domain values from range values. This is useful for converting pixel positions back to data values.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/d3js-specialist-llms-context-20250406.md#2025-04-13_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nconst x = d3.scaleLinear([10, 130], [0, 960]);\nx.invert(80); // 20\nx.invert(320); // 50\n```\n\n----------------------------------------\n\nTITLE: Initializing and Managing SQLite3 Connection in Flask\nDESCRIPTION: This snippet demonstrates how to set up a SQLite3 database connection in Flask, including connection initialization and automatic closing when the context ends. It uses Flask's app context and the 'g' object for efficient connection management.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/flask-developer-llms-context-20250406.md#2025-04-13_snippet_24\n\nLANGUAGE: Python\nCODE:\n```\nimport sqlite3\nfrom flask import g\n\nDATABASE = '/path/to/database.db'\n\ndef get_db():\n    db = getattr(g, '_database', None)\n    if db is None:\n        db = g._database = sqlite3.connect(DATABASE)\n    return db\n\n@app.teardown_appcontext\ndef close_connection(exception):\n    db = getattr(g, '_database', None)\n    if db is not None:\n        db.close()\n```\n\n----------------------------------------\n\nTITLE: Implementing Resume, Pause, and Alternate Controls with AnimeJS in JavaScript\nDESCRIPTION: This code demonstrates how to create animation controls using AnimeJS. It sets up an animation that moves squares horizontally with staggered delays and implements pause, alternate, and resume functionality through button click handlers.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/animejs-specialist-llms-context-20250406.md#2025-04-13_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nimport { animate, utils, stagger } from 'animejs';\n\nconst [ $pauseButton, $alternateButton, $resumeButton ] = utils.$('.button');\n\nconst animation = animate('.square', {\n  x: '17rem',\n  ease: 'inOutSine',\n  loop: true,\n  delay: stagger(100),\n});\n\nconst pauseAnimation = () => animation.pause();\nconst alternateAnimation = () => animation.alternate();\nconst resumeAnimation = () => animation.resume();\n\n$pauseButton.addEventListener('click', pauseAnimation);\n$alternateButton.addEventListener('click', alternateAnimation);\n$resumeButton.addEventListener('click', resumeAnimation);\n```\n\n----------------------------------------\n\nTITLE: Creating Optuna Study for Hyperparameter Tuning with Neon Database\nDESCRIPTION: Sets up an Optuna study for machine learning hyperparameter tuning, using a Neon PostgreSQL database as storage. It configures the study to maximize the objective function and run 100 optimization trials.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/neon-db-specialist-llms-context-20250406.md#2025-04-13_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nif __name__ == \"__main__\":\n    study = optuna.create_study(\n        study_name=\"sklearn_example\",\n        storage=os.environ[\"DATABASE_URL\"],\n        load_if_exists=True,\n        direction=\"maximize\",\n    )\n    study.optimize(objective, n_trials=100)\n```\n\n----------------------------------------\n\nTITLE: Setting up SSR dev server with Express and Vite\nDESCRIPTION: This snippet demonstrates how to set up a development server for SSR using Express and Vite in middleware mode. It creates a Vite server instance and uses it as middleware in an Express application.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/vite-specialist-llms-context-20250406.md#2025-04-13_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport fs from 'node:fs'\nimport path from 'node:path'\nimport { fileURLToPath } from 'node:url'\nimport express from 'express'\nimport { createServer as createViteServer } from 'vite'\n\nconst __dirname = path.dirname(fileURLToPath(import.meta.url))\n\nasync function createServer() {\n  const app = express()\n\n  // Create Vite server in middleware mode and configure the app type as\n  // 'custom', disabling Vite's own HTML serving logic so parent server\n  // can take control\n  const vite = await createViteServer({\n    server: { middlewareMode: true },\n    appType: 'custom'\n  })\n\n  // Use vite's connect instance as middleware. If you use your own\n  // express router (express.Router()), you should use router.use\n  // When the server restarts (for example after the user modifies\n  // vite.config.js), `vite.middlewares` is still going to be the same\n  // reference (with a new internal stack of Vite and plugin-injected\n  // middlewares). The following is valid even after restarts.\n  app.use(vite.middlewares)\n\n  app.use('*', async (req, res) => {\n    // serve index.html - we will tackle this next\n  })\n\n  app.listen(5173)\n}\n\ncreateServer()\n```\n\n----------------------------------------\n\nTITLE: Implementing Modal with Parallel Routes in Next.js\nDESCRIPTION: Example of using parallel routes to create a modal component with deep linking support. Utilizes the useRouter hook for navigation.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/nextjs-developer-llms-context-20250406.md#2025-04-13_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n'use client'\n\nimport { useRouter } from 'next/navigation'\n\nexport function Modal({ children }: { children: React.ReactNode }) {\n  const router = useRouter()\n\n  return (\n    <>\n      <button\n        onClick={() => {\n          router.back()\n        }}\n      >\n        Close modal\n      </button>\n      <div>{children}</div>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Button and Link Components\nDESCRIPTION: Implementation of action elements including a login button and sign-up link with custom styling.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/material-ui-specialist-llms-context-20250406.md#2025-04-13_snippet_28\n\nLANGUAGE: jsx\nCODE:\n```\n<Button sx={{ mt: 1 /* margin top */ }}>\n  Log in\n</Button>\n<Typography\n  endDecorator={<Link href=\"/sign-up\">Sign up</Link>}\n  fontSize=\"sm\"\n  sx={{ alignSelf: 'center' }}\n>\n  Don't have an account?\n</Typography>\n```\n\n----------------------------------------\n\nTITLE: Using Clerk Sign-In Hook with Error Handling\nDESCRIPTION: Demonstrates how to use the useSignIn hook with proper error handling using isClerkAPIResponseError\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/condensed_indices/clerk-auth-specialist-condensed-index.md#2025-04-13_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntry {\n  await signIn.create({\n    identifier: email,\n    password: password\n  });\n} catch (err) {\n  if (isClerkAPIResponseError(err)) {\n    console.error(err.longMessage);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying D3 Drag Behavior to Selection in JavaScript\nDESCRIPTION: Shows how to apply a drag behavior to a D3 selection using the call() method. This example also demonstrates setting an event listener for the 'start' event.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/d3js-specialist-llms-context-20250406.md#2025-04-13_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nd3.selectAll(\".node\").call(d3.drag().on(\"start\", started));\n```\n\n----------------------------------------\n\nTITLE: Vue Render Function with Fragment\nDESCRIPTION: Shows a compiled render function implementation using stable fragment for multiple root nodes optimization.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/vuejs-developer-llms-context-20250406.md#2025-04-13_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\nexport function render() {\n  return (_openBlock(), _createElementBlock(_Fragment, null, [\n    /* children */\n  ], 64 /* STABLE_FRAGMENT */))\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an ExclusionConstraint with Expressions in Django\nDESCRIPTION: Shows an example of defining an ExclusionConstraint with expressions using RangeOperators. This constraint is typically used in PostgreSQL to prevent overlapping ranges or values in a database.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/django-developer-llms-context-20250406.md#2025-04-13_snippet_36\n\nLANGUAGE: python\nCODE:\n```\nexpressions = [\n    (\"timespan\", RangeOperators.ADJACENT_TO),\n    (F(\"room\"), RangeOperators.EQUAL),\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing ngOnChanges Lifecycle Hook\nDESCRIPTION: Shows implementation of ngOnChanges lifecycle hook to track changes in component inputs using SimpleChanges interface.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/angular-developer-llms-context-20250406.md#2025-04-13_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\n@Component({\n  /* ... */\n})\nexport class UserProfile {\n  @Input() name: string = '';\n\n  ngOnChanges(changes: SimpleChanges) {\n    for (const inputName in changes) {\n      const inputValues = changes[inputName];\n      console.log(`Previous ${inputName} == ${inputValues.previousValue}`);\n      console.log(`Current ${inputName} == ${inputValues.currentValue}`);\n      console.log(`Is first ${inputName} change == ${inputValues.firstChange}`);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rank Feature Query in Elasticsearch\nDESCRIPTION: Demonstrates a bool query combining match query with rank feature queries to boost scores based on pagerank, url_length and sports topic.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/elasticsearch-specialist-llms-context-20250406.md#2025-04-13_snippet_20\n\nLANGUAGE: console\nCODE:\n```\nGET /test/_search\n{\n  \"query\": {\n    \"bool\": {\n      \"must\": [\n        {\n          \"match\": {\n            \"content\": \"2016\"\n          }\n        }\n      ],\n      \"should\": [\n        {\n          \"rank_feature\": {\n            \"field\": \"pagerank\"\n          }\n        },\n        {\n          \"rank_feature\": {\n            \"field\": \"url_length\",\n            \"boost\": 0.1\n          }\n        },\n        {\n          \"rank_feature\": {\n            \"field\": \"topics.sports\",\n            \"boost\": 0.4\n          }\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: PATCH Request Partial Update in FastAPI\nDESCRIPTION: This snippet implements partial updates using the PATCH method in FastAPI. It shows how to use Pydantic's exclude_unset and model_copy for handling partial updates while preserving existing data.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/fastapi-developer-llms-context-20250406.md#2025-04-13_snippet_17\n\nLANGUAGE: Python\nCODE:\n```\nstored_item_model = Item(**stored_item_data)\nupdate_data = item.dict(exclude_unset=True)\nupdated_item = stored_item_model.copy(update=update_data)\nstored_item_data = jsonable_encoder(updated_item)\n```\n\n----------------------------------------\n\nTITLE: Importing Auth Object in Next.js App Router\nDESCRIPTION: Demonstrates how to import and use the auth() function in the Next.js App Router. This function returns an Auth object containing important user session information.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/clerk-auth-specialist-llms-context-20250406.md#2025-04-13_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nimport { auth } from \"@clerk/nextjs\";\n```\n\n----------------------------------------\n\nTITLE: Cloud Functions Implementation\nDESCRIPTION: Demonstrates different types of Cloud Functions including Firestore triggers, HTTP endpoints, and callable functions.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/032-backend/firebase-developer/032-work-be-firebase-developer.mode.md#2025-04-13_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst functions = require('firebase-functions');\nconst admin = require('firebase-admin');\nadmin.initializeApp();\n\n// Firestore trigger\nexports.createUserProfile = functions.auth.user().onCreate((user) => {\n  return admin.firestore().collection('users').doc(user.uid).set({\n    email: user.email,\n    createdAt: admin.firestore.FieldValue.serverTimestamp()\n  });\n});\n\n// HTTP trigger\nexports.api = functions.https.onRequest((req, res) => {\n  res.json({ message: 'Hello from Firebase!' });\n});\n\n// Callable function\nexports.addMessage = functions.https.onCall((data, context) => {\n  if (!context.auth) {\n    throw new functions.https.HttpsError('unauthenticated', 'User must be logged in');\n  }\n  return admin.firestore().collection('messages').add({\n    text: data.text,\n    userId: context.auth.uid,\n    timestamp: admin.firestore.FieldValue.serverTimestamp()\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: SQLModel Hero Definition\nDESCRIPTION: Defines a Hero database model using SQLModel with fields for id, name, secret_name, and age.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/fastapi-developer-llms-context-20250406.md#2025-04-13_snippet_43\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Optional\nfrom sqlmodel import Field, SQLModel\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n```\n\n----------------------------------------\n\nTITLE: Executing a Basic Match Query in Elasticsearch\nDESCRIPTION: A simple match query that searches for documents containing 'this is a test' in the message field. Match queries analyze the input text before searching.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/elasticsearch-specialist-llms-context-20250406.md#2025-04-13_snippet_35\n\nLANGUAGE: console\nCODE:\n```\nGET /_search\n{\n  \"query\": {\n    \"match\": {\n      \"message\": {\n        \"query\": \"this is a test\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Pipe Implementation\nDESCRIPTION: Shows how to create a custom pipe for string transformation to kebab case format.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/angular-developer-llms-context-20250406.md#2025-04-13_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'kebabCase',\n})\nexport class KebabCasePipe implements PipeTransform {\n  transform(value: string): string {\n    return value.toLowerCase().replace(/ /g, '-');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering DataTable in Next.js Page Component with TypeScript\nDESCRIPTION: Shows how to implement a data table in a Next.js page. This component fetches payment data and passes it to a DataTable component, demonstrating data fetching and rendering patterns in Next.js server components.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/shadcn-ui-specialist-llms-context-20250406.md#2025-04-13_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Payment, columns } from \"./columns\"\nimport { DataTable } from \"./data-table\"\n\nasync function getData(): Promise<Payment[]> {\n  // Fetch data from your API here.\n  return [\n    {\n      id: \"728ed52f\",\n      amount: 100,\n      status: \"pending\",\n      email: \"m@example.com\",\n    },\n    // ...\n  ]\n}\n\nexport default async function DemoPage() {\n  const data = await getData()\n\n  return (\n    <div className=\"container mx-auto py-10\">\n      <DataTable columns={columns} data={data} />\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Programmatically instantiating Bootstrap Modal\nDESCRIPTION: This JavaScript snippet demonstrates how to create a new Bootstrap Modal instance programmatically. It's useful for dynamically controlling modal behavior in your application.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/031-frontend/bootstrap-specialist/031-work-fe-bootstrap-specialist.mode.md#2025-04-13_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nnew bootstrap.Modal(...)\n```\n\n----------------------------------------\n\nTITLE: Customizing Bootstrap SCSS Variables\nDESCRIPTION: This snippet shows a table of key Sass variables used to customize Bootstrap's global options. Each variable is listed with its default value, possible values, and a description of its effect on the framework, allowing for easy customization of Bootstrap's core features.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/bootstrap-specialist-llms-context-20250406.md#2025-04-13_snippet_29\n\nLANGUAGE: scss\nCODE:\n```\n$spacer: 1rem;\n$enable-dark-mode: true;\n$enable-rounded: true;\n$enable-shadows: false;\n$enable-gradients: false;\n$enable-transitions: true;\n$enable-reduced-motion: true;\n$enable-grid-classes: true;\n$enable-cssgrid: false;\n$enable-container-classes: true;\n$enable-caret: true;\n$enable-button-pointers: true;\n$enable-rfs: true;\n$enable-validation-icons: true;\n$enable-negative-margins: false;\n$enable-deprecation-messages: true;\n$enable-important-utilities: true;\n$enable-smooth-scroll: true;\n```\n\n----------------------------------------\n\nTITLE: Implementing Django REST Framework Serializers for AI Marketplace\nDESCRIPTION: This snippet defines serializer classes for each model in the AI marketplace, handling conversion between complex data types and JSON representations for the REST API.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/neon-db-specialist-llms-context-20250406.md#2025-04-13_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nfrom rest_framework import serializers\nfrom .models import ModelAuthor, AIModel, ModelPurchase, UsageScenario, ModelBenchmark\n\nclass ModelAuthorSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = ModelAuthor\n        fields = ['id', 'name', 'bio', 'contact_info', 'rating']\n\nclass AIModelSerializer(serializers.ModelSerializer):\n    author = ModelAuthorSerializer(read_only=True)\n    author_id = serializers.PrimaryKeyRelatedField(\n        queryset=ModelAuthor.objects.all(), source='author', write_only=True\n    )\n\n    class Meta:\n        model = AIModel\n        fields = ['id', 'name', 'model_type', 'description', 'framework', 'version',\n                  'download_url', 'price', 'tags', 'author', 'author_id']\n\nclass ModelPurchaseSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = ModelPurchase\n        fields = ['id', 'user', 'ai_model', 'purchase_date', 'price_paid', 'license_key', 'download_link']\n\nclass UsageScenarioSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = UsageScenario\n        fields = ['id', 'ai_model', 'title', 'description', 'code_snippet', 'usage_frequency']\n\nclass ModelBenchmarkSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = ModelBenchmark\n        fields = ['id', 'ai_model', 'metric_name', 'value', 'benchmark_date', 'hardware_used']\n```\n\n----------------------------------------\n\nTITLE: Executing Match Phrase Prefix Query in Elasticsearch\nDESCRIPTION: This snippet demonstrates how to use the match_phrase_prefix query to search for documents containing phrases beginning with 'quick brown f' in the 'message' field.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/elasticsearch-specialist-llms-context-20250406.md#2025-04-13_snippet_11\n\nLANGUAGE: console\nCODE:\n```\nGET /_search\n{\n  \"query\": {\n    \"match_phrase_prefix\": {\n      \"message\": {\n        \"query\": \"quick brown f\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Grouping and Reducing Data with D3.js rollup() Function\nDESCRIPTION: Demonstrates the use of d3.rollup() to group and reduce an iterable of values into an InternMap. The example shows grouping and counting penguins by species and sex.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/d3js-specialist-llms-context-20250406.md#2025-04-13_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nconst speciesCount = d3.rollup(penguins, (D) => D.length, (d) => d.species);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nspeciesCount.get(\"Adelie\") // 152\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst speciesSexCount = d3.rollup(penguins, (D) => D.length, (d) => d.species, (d) => d.sex);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nspeciesSexCount.get(\"Adelie\").get(\"FEMALE\") // 73\n```\n\n----------------------------------------\n\nTITLE: Creating Trigger for New User Profiles in Supabase\nDESCRIPTION: SQL code to automatically create user profiles when new users register. Creates a function and trigger that extracts first and last name from user metadata and inserts them into a profiles table.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/supabase-developer-llms-context-20250406.md#2025-04-13_snippet_17\n\nLANGUAGE: sql\nCODE:\n```\n-- inserts a row into public.profiles\ncreate function public.handle_new_user()\nreturns trigger\nlanguage plpgsql\nsecurity definer set search_path = ''\nas $$\nbegin\n  insert into public.profiles (id, first_name, last_name)\n  values (new.id, new.raw_user_meta_data ->> 'first_name', new.raw_user_meta_data ->> 'last_name');\n  return new;\nend;\n$$;\n\n-- trigger the function every time a user is created\ncreate trigger on_auth_user_created\n  after insert on auth.users\n  for each row execute procedure public.handle_new_user();\n```\n\n----------------------------------------\n\nTITLE: Defining Vue.js Components with TypeScript\nDESCRIPTION: Demonstrates how to define Vue.js components with TypeScript support using defineComponent and script setup.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/condensed_indices/vuejs-developer-condensed-index.md#2025-04-13_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ndefineComponent({...})\n<script setup lang=\"ts\">\n```\n\n----------------------------------------\n\nTITLE: Applying Pack Layout to Hierarchy in D3.js\nDESCRIPTION: Lays out a hierarchical data structure, assigning x, y coordinates and radius to each node. Requires calling root.sum() before layout and optionally root.sort() for ordering.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/d3js-specialist-llms-context-20250406.md#2025-04-13_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\npack(root)\n```\n\n----------------------------------------\n\nTITLE: Creating RLS Policy Using JWT for Team Membership\nDESCRIPTION: SQL policy that checks if a user belongs to a team by accessing the JWT's app_metadata. The policy allows authenticated users to access rows where their team ID is in their JWT metadata.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/supabase-developer-llms-context-20250406.md#2025-04-13_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\ncreate policy \"User is in team\"\non my_table\nto authenticated\nusing ( team_id in (select auth.jwt() -> 'app_metadata' -> 'teams'));\n```\n\n----------------------------------------\n\nTITLE: Querying Nested Aggregation for Minimum Price in Elasticsearch\nDESCRIPTION: Performs a nested aggregation to find the minimum price across all resellers for a product.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/elasticsearch-specialist-llms-context-20250406.md#2025-04-13_snippet_22\n\nLANGUAGE: console\nCODE:\n```\nGET /products/_search?size=0\n{\n  \"query\": {\n    \"match\": {\n      \"name\": \"led tv\"\n    }\n  },\n  \"aggs\": {\n    \"resellers\": {\n      \"nested\": {\n        \"path\": \"resellers\"\n      },\n      \"aggs\": {\n        \"min_price\": {\n          \"min\": {\n            \"field\": \"resellers.price\"\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Structural Typing in TypeScript\nDESCRIPTION: Shows how structural typing allows compatibility between a class and interface with matching members, even without explicit implementation.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/typescript-specialist-llms-context-20250406.md#2025-04-13_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Pet {\n  name: string;\n}\n\nclass Dog {\n  name: string;\n}\n\nlet pet: Pet;\n// OK, because of structural typing\npet = new Dog();\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Named Breakpoints in Material UI Theme\nDESCRIPTION: Demonstrates how to create custom named breakpoints in the Material UI theme configuration. Defines breakpoints for mobile, tablet, laptop, and desktop screens with corresponding pixel values.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/material-ui-specialist-llms-context-20250406.md#2025-04-13_snippet_40\n\nLANGUAGE: js\nCODE:\n```\nconst theme = createTheme({\n  breakpoints: {\n    values: {\n      mobile: 0,\n      tablet: 640,\n      laptop: 1024,\n      desktop: 1200,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Monitoring Collection Changes with Python Change Streams\nDESCRIPTION: Implements a change stream watcher in Python to monitor collection modifications with error handling and resume capability.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/mongodb-specialist-llms-context-20250406.md#2025-04-13_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ntry:\n    resume_token = None\n    pipeline = []\n    with collection.watch(pipeline) as stream:\n        for change_document in stream:\n            print(change_document)\n            resume_token = change_document['_id']\nexcept pymongo.errors.PyMongoError:\n    if resume_token is None:\n        logging.error('Unable to open change stream')\n    else:\n        with collection.watch(\n                pipeline, resume_after=resume_token) as stream:\n            for change_document in stream:\n                print(change_document)\n                resume_token = change_document['_id']\n```\n\n----------------------------------------\n\nTITLE: MongoDB Document Insert Operations\nDESCRIPTION: Methods for inserting single or multiple documents into a collection.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/condensed_indices/mongodb-specialist-condensed-index.md#2025-04-13_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndb.collection.insertOne(<document>)\n```\n\nLANGUAGE: javascript\nCODE:\n```\ndb.collection.insertMany([<doc1>, <doc2>, ...])\n```\n\n----------------------------------------\n\nTITLE: Creating Type Predicates in TypeScript\nDESCRIPTION: Shows how to create type predicates in TypeScript. Type predicates are user-defined type guards that allow for custom type narrowing logic.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/031-frontend/typescript-specialist/031-work-fe-typescript-specialist.mode.md#2025-04-13_snippet_16\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction isFish(pet: Fish | Bird): pet is Fish { return ... }\n```\n\n----------------------------------------\n\nTITLE: Bootstrap JavaScript Import Example\nDESCRIPTION: Example showing how to import Bootstrap JavaScript as ES modules\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/031-frontend/bootstrap-specialist/031-work-fe-bootstrap-specialist.mode.md#2025-04-13_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as bootstrap from 'bootstrap'\n```\n\n----------------------------------------\n\nTITLE: Binding FormGroup to Template in Angular HTML\nDESCRIPTION: Demonstrates form binding using formGroup and formControlName directives in Angular templates.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/angular-developer-llms-context-20250406.md#2025-04-13_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<form [formGroup]=\"profileForm\">\n  <label>\n    Name\n    <input type=\"text\" formControlName=\"name\" />\n  </label>\n  <label>\n    Email\n    <input type=\"email\" formControlName=\"email\" />\n  </label>\n  <button type=\"submit\">Submit</button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Type Guards and Predicates\nDESCRIPTION: Examples of TypeScript type guards using typeof, in operator, and custom type predicates.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/condensed_indices/typescript-specialist-condensed-index.md#2025-04-13_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nif (typeof value === \"string\") { ... }\nif (\"property\" in object) { ... }\nfunction isFish(pet: Fish | Bird): pet is Fish { return ... }\n```\n\n----------------------------------------\n\nTITLE: Custom Timed Route Implementation\nDESCRIPTION: Creates a custom route class that adds response timing information.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/fastapi-developer-llms-context-20250406.md#2025-04-13_snippet_35\n\nLANGUAGE: python\nCODE:\n```\nclass TimedRoute(APIRoute):\n    def get_route_handler(self) -> Callable:\n        original_route_handler = super().get_route_handler()\n\n        async def custom_route_handler(request: Request) -> Response:\n            before = time.time()\n            response: Response = await original_route_handler(request)\n            duration = time.time() - before\n            response.headers[\"X-Response-Time\"] = str(duration)\n            return response\n\n        return custom_route_handler\n```\n\n----------------------------------------\n\nTITLE: Implementing Blocking Data Fetch\nDESCRIPTION: Shows how to implement blocking data fetches in an Astro page component.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/astro-developer-llms-context-20250406.md#2025-04-13_snippet_21\n\nLANGUAGE: astro\nCODE:\n```\n---\nconst personResponse = await fetch('https://randomuser.me/api/');\nconst personData = await personResponse.json();\nconst randomPerson = personData.results[0];\nconst factResponse = await fetch('https://catfact.ninja/fact');\nconst factData = await factResponse.json();\n---\n<html>\n  <head>\n    <title>A name and a fact</title>\n  </head>\n  <body>\n    <h2>A name</h2>\n    <p>{randomPerson.name.first}</p>\n    <h2>A fact</h2>\n    <p>{factData.fact}</p>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Creating an UPDATE Policy for User Profiles in PostgreSQL\nDESCRIPTION: SQL snippet showing how to create and secure a profiles table with RLS. Includes table creation with auth.users reference and a policy that allows users to update only their own profile.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/supabase-developer-llms-context-20250406.md#2025-04-13_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\ncreate table profiles (\n  id uuid primary key,\n  user_id uuid references auth.users,\n  avatar_url text\n);\n\nalter table profiles enable row level security;\n\ncreate policy \"Users can update their own profile.\"\non profiles for update\nto authenticated\nusing ( (select auth.uid()) = user_id )\nwith check ( (select auth.uid()) = user_id );\n```\n\n----------------------------------------\n\nTITLE: Complex Union Type Combinations in Template Literals\nDESCRIPTION: Demonstrates how multiple union types are cross-multiplied in template literal interpolation positions. Creates complex combinations of language codes and message IDs for localization.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/typescript-specialist-llms-context-20250406.md#2025-04-13_snippet_57\n\nLANGUAGE: typescript\nCODE:\n```\ntype EmailLocaleIDs = \"welcome_email\" | \"email_heading\";\ntype FooterLocaleIDs = \"footer_title\" | \"footer_sendoff\";\ntype AllLocaleIDs = `${EmailLocaleIDs | FooterLocaleIDs}_id`;\ntype Lang = \"en\" | \"ja\" | \"pt\";\n\ntype LocaleMessageIDs = `${Lang}_${AllLocaleIDs}`;\n```\n\n----------------------------------------\n\nTITLE: Generating Large CSV Files in Flask Using a Generator Function\nDESCRIPTION: Creates a Flask route that generates a large CSV file on the fly using a generator function, which is memory-efficient for large datasets.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/flask-developer-llms-context-20250406.md#2025-04-13_snippet_36\n\nLANGUAGE: python\nCODE:\n```\n@app.route('/large.csv')\ndef generate_large_csv():\n    def generate():\n        for row in iter_all_rows():\n            yield f\"{','.join(row)}\\n\"\n    return generate(), {\"Content-Type\": \"text/csv\"}\n```\n\n----------------------------------------\n\nTITLE: Importing Anime.js as ES6 Module after NPM Installation\nDESCRIPTION: Example showing how to import the animate method from Anime.js as an ES6 module after installing via NPM.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/animejs-specialist-llms-context-20250406.md#2025-04-13_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { animate } from 'animejs';\n```\n\n----------------------------------------\n\nTITLE: Initializing SQLAlchemy with Declarative Mapping in Flask\nDESCRIPTION: Sets up SQLAlchemy ORM with a SQLite database using the declarative approach. Creates a database engine, session management, and a base model class with query property to enable model.query syntax.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/flask-developer-llms-context-20250406.md#2025-04-13_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.orm import scoped_session, sessionmaker, declarative_base\n\nengine = create_engine('sqlite:////tmp/test.db')\ndb_session = scoped_session(sessionmaker(autocommit=False,\n                                         autoflush=False,\n                                         bind=engine))\nBase = declarative_base()\nBase.query = db_session.query_property()\n\ndef init_db():\n    # import all modules here that might define models so that\n    # they will be registered properly on the metadata.  Otherwise\n    # you will have to import them first before calling init_db()\n    import yourapplication.models\n    Base.metadata.create_all(bind=engine)\n```\n\n----------------------------------------\n\nTITLE: Signal Usage in Components\nDESCRIPTION: Demonstrates the implementation of signals and computed signals for state management in components.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/angular-developer-llms-context-20250406.md#2025-04-13_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\n@Component({/* ... */})\nexport class UserProfile {\n  isTrial = signal(false);\n  isTrialExpired = signal(false);\n  showTrialDuration = computed(() => this.isTrial() && !this.isTrialExpired());\n\n  activateTrial() {\n    this.isTrial.set(true);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Databases in Django Settings\nDESCRIPTION: Shows how to configure multiple databases in Django's settings.py file. This example defines a default PostgreSQL database and a secondary MySQL database for user data.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/django-developer-llms-context-20250406.md#2025-04-13_snippet_34\n\nLANGUAGE: python\nCODE:\n```\nDATABASES = {\n    \"default\": {\n        \"NAME\": \"app_data\",\n        \"ENGINE\": \"django.db.backends.postgresql\",\n        \"USER\": \"postgres_user\",\n        \"PASSWORD\": \"s3krit\",\n    },\n    \"users\": {\n        \"NAME\": \"user_data\",\n        \"ENGINE\": \"django.db.backends.mysql\",\n        \"USER\": \"mysql_user\",\n        \"PASSWORD\": \"priv4te\",\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Multi-Page App Configuration in Vite\nDESCRIPTION: Configuration for building a multi-page application with multiple HTML entry points using Vite.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/vite-specialist-llms-context-20250406.md#2025-04-13_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { dirname, resolve } from 'node:path'\nimport { fileURLToPath } from 'node:url'\nimport { defineConfig } from 'vite'\n\nconst __dirname = dirname(fileURLToPath(import.meta.url))\n\nexport default defineConfig({\n  build: {\n    rollupOptions: {\n      input: {\n        main: resolve(__dirname, 'index.html'),\n        nested: resolve(__dirname, 'nested/index.html'),\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Flask Extension Initialization Patterns\nDESCRIPTION: Demonstrates two different approaches to initialize Flask extensions: direct initialization which is simpler but less flexible, and the two-step initialization approach which allows for the application factory pattern.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/flask-developer-llms-context-20250406.md#2025-04-13_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef create_app(config_filename):\n    app = Flask(__name__)\n    app.config.from_pyfile(config_filename)\n\n    db = SQLAlchemy(app)\n```\n\nLANGUAGE: python\nCODE:\n```\ndb = SQLAlchemy()\n```\n\nLANGUAGE: python\nCODE:\n```\ndef create_app(config_filename):\n    app = Flask(__name__)\n    app.config.from_pyfile(config_filename)\n\n    from yourapplication.model import db\n    db.init_app(app)\n```\n\n----------------------------------------\n\nTITLE: Analyzing Text with Simple Analyzer in Elasticsearch\nDESCRIPTION: Example showing how to use the simple analyzer to process text. The analyzer breaks down the input text into tokens at non-letter characters and converts them to lowercase.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/elasticsearch-specialist-llms-context-20250406.md#2025-04-13_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nPOST _analyze\n{\n  \"analyzer\": \"simple\",\n  \"text\": \"The 2 QUICK Brown-Foxes jumped over the lazy dog's bone.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Vite with Package Managers\nDESCRIPTION: Commands to install Vite using different package managers including npm, Yarn, pnpm, and Bun. Each command initializes a new Vite project with the respective package manager.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/vite-specialist-llms-context-20250406.md#2025-04-13_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm create vite@latest\n$ yarn create vite\n$ pnpm create vite\n$ bun create vite\n```\n\n----------------------------------------\n\nTITLE: Asset Import Syntax\nDESCRIPTION: Examples of importing static assets and web workers in Vite\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/031-frontend/vite-specialist/031-work-fe-vite-specialist.mode.md#2025-04-13_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport assetUrl from './asset.png'\nimport Worker from './script.js?worker'\n```\n\n----------------------------------------\n\nTITLE: Accessing Environment Variables in JavaScript\nDESCRIPTION: Demonstrates how Vite exposes environment variables with VITE_ prefix to client code while protecting sensitive variables.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/vite-specialist-llms-context-20250406.md#2025-04-13_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(import.meta.env.VITE_SOME_KEY) // \"123\"\nconsole.log(import.meta.env.DB_PASSWORD) // undefined\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-Analyzer Text Analysis in Elasticsearch\nDESCRIPTION: Example demonstrating how to set up multiple analyzers for different query types, specifically handling stop words differently for phrase and non-phrase queries. Shows configuration of custom analyzers, field mappings, and document indexing with search examples.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/elasticsearch-specialist-llms-context-20250406.md#2025-04-13_snippet_7\n\nLANGUAGE: console\nCODE:\n```\nPUT my-index-000001\n{\n   \"settings\":{\n      \"analysis\":{\n         \"analyzer\":{\n            \"my_analyzer\":{\n               \"type\":\"custom\",\n               \"tokenizer\":\"standard\",\n               \"filter\":[\n                  \"lowercase\"\n               ]\n            },\n            \"my_stop_analyzer\":{\n               \"type\":\"custom\",\n               \"tokenizer\":\"standard\",\n               \"filter\":[\n                  \"lowercase\",\n                  \"english_stop\"\n               ]\n            }\n         },\n         \"filter\":{\n            \"english_stop\":{\n               \"type\":\"stop\",\n               \"stopwords\":\"_english_\"\n            }\n         }\n      }\n   },\n   \"mappings\":{\n       \"properties\":{\n          \"title\": {\n             \"type\":\"text\",\n             \"analyzer\":\"my_analyzer\",\n             \"search_analyzer\":\"my_stop_analyzer\",\n             \"search_quote_analyzer\":\"my_analyzer\"\n         }\n      }\n   }\n}\n\nPUT my-index-000001/_doc/1\n{\n   \"title\":\"The Quick Brown Fox\"\n}\n\nPUT my-index-000001/_doc/2\n{\n   \"title\":\"A Quick Brown Fox\"\n}\n\nGET my-index-000001/_search\n{\n   \"query\":{\n      \"query_string\":{\n         \"query\":\"\\\"the quick brown fox\\\"\"\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using AnimeJS to Animate CSS Properties\nDESCRIPTION: This snippet demonstrates how to use AnimeJS to animate various CSS properties including positioning, border radius, background color, and filter effects. Properties with dashes are converted to camel case or written as strings.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/animejs-specialist-llms-context-20250406.md#2025-04-13_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { animate } from 'animejs';\n\nanimate('.square', {\n  left: 'calc(7.75rem * 2)',\n  borderRadius: 64,\n  'background-color': '#F9F640',\n  filter: 'blur(5px)',\n});\n```\n\n----------------------------------------\n\nTITLE: Add to Cart Functionality Implementation\nDESCRIPTION: Shows both basic and enhanced Add to Cart button implementations using Remix Form and useFetcher.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/remix-developer-llms-context-20250406.md#2025-04-13_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nexport function AddToCart({ id }) {\n  return (\n    <Form method=\"post\" action=\"/add-to-cart\">\n      <input type=\"hidden\" name=\"id\" value={id} />\n      <button type=\"submit\">Add To Cart</button>\n    </Form>\n  );\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useFetcher } from \"@remix-run/react\";\n\nexport function AddToCart({ id }) {\n  const fetcher = useFetcher();\n\n  return (\n    <fetcher.Form method=\"post\" action=\"/add-to-cart\">\n      <input name=\"id\" value={id} />\n      <button type=\"submit\">\n        {fetcher.state === \"submitting\"\n          ? \"Adding...\"\n          : \"Add To Cart\"}\n      </button>\n    </fetcher.Form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing HeroService with Mock Data in Angular TypeScript\nDESCRIPTION: Creates a HeroService that returns mock hero data, demonstrating basic service implementation with root-level injection.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/angular-developer-llms-context-20250406.md#2025-04-13_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable } from '@angular/core';\nimport { HEROES } from './mock-heroes';\n\n@Injectable({\n  // declares that this service should be created\n  // by the root application injector.\n  providedIn: 'root',\n})\nexport class HeroService {\n  getHeroes() {\n    return HEROES;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Accessibility Attributes to React Modal\nDESCRIPTION: Demonstrates how to add proper accessibility attributes to the Modal component, including aria-labelledby and aria-describedby for screen readers.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/material-ui-specialist-llms-context-20250406.md#2025-04-13_snippet_24\n\nLANGUAGE: JSX\nCODE:\n```\n<Modal aria-labelledby=\"modal-title\" aria-describedby=\"modal-description\">\n  <h2 id=\"modal-title\">My Title</h2>\n  <p id=\"modal-description\">My Description</p>\n</Modal>\n```\n\n----------------------------------------\n\nTITLE: Merging Interfaces in TypeScript\nDESCRIPTION: Demonstrates how TypeScript merges multiple interface declarations with the same name into a single interface. This example shows merging of non-function and function members.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/typescript-specialist-llms-context-20250406.md#2025-04-13_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Box {\n  height: number;\n  width: number;\n}\n\ninterface Box {\n  scale: number;\n}\n\nlet box: Box = { height: 5, width: 6, scale: 10 };\n```\n\n----------------------------------------\n\nTITLE: Updating a D3.js Axis with Transition\nDESCRIPTION: This code shows how to update an existing D3.js axis with a smooth transition. It applies a duration to the transition and calls the axis function again to update the axis based on new data.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/d3js-specialist-llms-context-20250406.md#2025-04-13_snippet_46\n\nLANGUAGE: javascript\nCODE:\n```\ngx.transition()\n    .duration(750)\n    .call(d3.axisBottom(x));\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Pydantic Model in Python\nDESCRIPTION: Demonstrates creating a basic Pydantic model with type hints for user data including id, name, and join date fields.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/fastapi-developer-llms-context-20250406.md#2025-04-13_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nclass User(BaseModel):\n    id: int\n    name: str\n    joined: date\n```\n\n----------------------------------------\n\nTITLE: Implementing Login Required Decorator in Python for Flask\nDESCRIPTION: This code snippet defines a login_required decorator that checks if a user is logged in before allowing access to a view. It redirects to the login page if the user is not authenticated.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/flask-developer-llms-context-20250406.md#2025-04-13_snippet_27\n\nLANGUAGE: Python\nCODE:\n```\nfrom functools import wraps\nfrom flask import g, request, redirect, url_for\n\ndef login_required(f):\n    @wraps(f)\n    def decorated_function(*args, **kwargs):\n        if g.user is None:\n            return redirect(url_for('login', next=request.url))\n        return f(*args, **kwargs)\n    return decorated_function\n```\n\n----------------------------------------\n\nTITLE: Configuring Vue Application Error Handler\nDESCRIPTION: This snippet demonstrates how to set up an app-level error handler for a Vue application. The handler will capture and process errors from all descendant components.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/vuejs-developer-llms-context-20250406.md#2025-04-13_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\napp.config.errorHandler = (err) => {\n  /* handle error */\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Timeline with Labels\nDESCRIPTION: Demonstrates creation of a timeline with default settings and multiple animations using label references and relative positioning.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/animejs-specialist-llms-context-20250406.md#2025-04-13_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createTimeline } from 'animejs';\n\nconst tl = createTimeline({ defaults: { duration: 750 } });\n\ntl.label('start')\n  .add('.square', { x: '15rem' }, 500)\n  .add('.circle', { x: '15rem' }, 'start')\n  .add('.triangle', { x: '15rem', rotate: '1turn' }, '<-=500');\n```\n\n----------------------------------------\n\nTITLE: Vite Server Environment Access\nDESCRIPTION: Example of accessing and interacting with Vite server environments, including request transformation and module graph access.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/vite-specialist-llms-context-20250406.md#2025-04-13_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\n// create the server, or get it from the configureServer hook\nconst server = await createServer(/* options */)\n\nconst environment = server.environments.client\nenvironment.transformRequest(url)\nconsole.log(server.environments.ssr.moduleGraph)\n```\n\n----------------------------------------\n\nTITLE: Enabling pgvector Extension in PostgreSQL\nDESCRIPTION: SQL command to enable the pgvector extension in PostgreSQL, which allows for vector operations and similarity searches in the database.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/032-backend/supabase-developer/032-work-be-supabase-developer.mode.md#2025-04-13_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\ncreate extension vector with schema extensions;\n```\n\n----------------------------------------\n\nTITLE: Implementing Responsive Dark/Light Mode Logo with HTML Picture Element\nDESCRIPTION: HTML structure for displaying different logo variants based on user color scheme preference, using the <picture> element to switch between dark and light mode versions of a logo.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/condensed_indices/tailwind-specialist-condensed-index.md#2025-04-13_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<picture>\n  <source media=\"(prefers-color-scheme: dark)\" srcset=\"[path-to-dark-logo]\">\n  <source media=\"(prefers-color-scheme: light)\" srcset=\"[path-to-light-logo]\">\n  <img alt=\"Tailwind CSS\" src=\"[path-to-default-logo]\">\n</picture>\n```\n\n----------------------------------------\n\nTITLE: Configuring Content Collections\nDESCRIPTION: Defines content collections with type definitions and schemas using defineCollection.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/astro-developer-llms-context-20250406.md#2025-04-13_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineCollection, z } from 'astro:content';\nimport { glob, file } from 'astro/loaders';\n\nconst blog = defineCollection({\n  loader: glob({ pattern: \"**/*.md\", base: \"./src/data/blog\" }),\n  schema: z.object({\n    title: z.string(),\n    description: z.string(),\n    pubDate: z.coerce.date(),\n    updatedDate: z.coerce.date().optional(),\n  })\n});\n\nconst dogs = defineCollection({\n  loader: file(\"src/data/dogs.json\"),\n  schema: z.object({\n    id: z.string(),\n    breed: z.string(),\n    temperament: z.array(z.string()),\n  }),\n});\n\nexport const collections = { blog, dogs };\n```\n\n----------------------------------------\n\nTITLE: Handling Form Submission in Django View\nDESCRIPTION: Implements form processing logic in a view function, including validation and redirect after successful submission.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/django-developer-llms-context-20250406.md#2025-04-13_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom django.http import HttpResponseRedirect\nfrom django.shortcuts import render\nfrom .forms import NameForm\n\ndef get_name(request):\n    if request.method == \"POST\":\n        form = NameForm(request.POST)\n        if form.is_valid():\n            # Process the data\n            return HttpResponseRedirect(\"/thanks/\")\n    else:\n        form = NameForm()\n    return render(request, \"name.html\", {\"form\": form})\n```\n\n----------------------------------------\n\nTITLE: Using Generic Constraints in TypeScript\nDESCRIPTION: Illustrates how to constrain generic types to those with specific properties using interfaces and the 'extends' keyword.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/typescript-specialist-llms-context-20250406.md#2025-04-13_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Lengthwise {\n  length: number;\n}\n\nfunction loggingIdentity<Type extends Lengthwise>(arg: Type): Type {\n  console.log(arg.length);\n  return arg;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Form Class with Multiple Field Types in Django\nDESCRIPTION: Defines a comprehensive Django Form class with multiple field types for a contact form. This example includes text, textarea, email, and boolean field types with appropriate constraints.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/django-developer-llms-context-20250406.md#2025-04-13_snippet_43\n\nLANGUAGE: python\nCODE:\n```\nfrom django import forms\n\nclass ContactForm(forms.Form):\n    subject = forms.CharField(max_length=100)\n    message = forms.CharField(widget=forms.Textarea)\n    sender = forms.EmailField()\n    cc_myself = forms.BooleanField(required=False)\n```\n\n----------------------------------------\n\nTITLE: Configuring HttpClient with Interceptors\nDESCRIPTION: Shows how to configure the HttpClient with interceptors for tasks like logging or authentication. This is typically done in the application's main module or provider configuration.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/031-frontend/angular-developer/031_angular-developer.mode.md#2025-04-13_snippet_14\n\nLANGUAGE: TypeScript\nCODE:\n```\nprovideHttpClient(withInterceptors([loggingInterceptor]))\n```\n\n----------------------------------------\n\nTITLE: Accessing Template Elements in Component Class\nDESCRIPTION: Demonstrates how to use the @ViewChild decorator to access template elements or child components within the component class, allowing for direct manipulation or data access.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/031-frontend/angular-developer/031_angular-developer.mode.md#2025-04-13_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\n@ViewChild('templateVar') elementRef!: ElementRef;\n```\n\n----------------------------------------\n\nTITLE: Defining Root CSS Variables in Bootstrap\nDESCRIPTION: This snippet shows the default CSS variables available globally in Bootstrap, defined in the :root selector. These variables are used for theme colors, breakpoints, and font stacks, allowing for easy customization of Bootstrap's default styles.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/bootstrap-specialist-llms-context-20250406.md#2025-04-13_snippet_27\n\nLANGUAGE: css\nCODE:\n```\n:root,\n[data-bs-theme=light] {([^}]*)}\n```\n\n----------------------------------------\n\nTITLE: Basic Astro Component Structure\nDESCRIPTION: Demonstrates the fundamental structure of an Astro component with component script and template sections\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/astro-developer-llms-context-20250406.md#2025-04-13_snippet_0\n\nLANGUAGE: astro\nCODE:\n```\n---\n// Component Script (JavaScript)\n---\n<!-- Component Template (HTML + JS Expressions) -->\n```\n\n----------------------------------------\n\nTITLE: Implementing Command Menu Dialog with Keyboard Shortcut in React TSX\nDESCRIPTION: A React component that creates a command menu dialog that can be opened with the keyboard shortcut Cmd/Ctrl + K. It uses React hooks for state management and event handling, and renders a dialog with a search input and suggested command items.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/shadcn-ui-specialist-llms-context-20250406.md#2025-04-13_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\nexport function CommandMenu() {\n  const [open, setOpen] = React.useState(false)\n\n  React.useEffect(() => {\n    const down = (e: KeyboardEvent) => {\n      if (e.key === \"k\" && (e.metaKey || e.ctrlKey)) {\n        e.preventDefault()\n        setOpen((open) => !open)\n      }\n    }\n    document.addEventListener(\"keydown\", down)\n    return () => document.removeEventListener(\"keydown\", down)\n  }, [])\n\n  return (\n    <CommandDialog open={open} onOpenChange={setOpen}>\n      <CommandInput placeholder=\"Type a command or search...\" />\n      <CommandList>\n        <CommandEmpty>No results found.</CommandEmpty>\n        <CommandGroup heading=\"Suggestions\">\n          <CommandItem>Calendar</CommandItem>\n          <CommandItem>Search Emoji</CommandItem>\n          <CommandItem>Calculator</CommandItem>\n        </CommandGroup>\n      </CommandList>\n    </CommandDialog>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating FormControl in Angular Component\nDESCRIPTION: Shows how to create and use a FormControl instance in an Angular component class.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/angular-developer-llms-context-20250406.md#2025-04-13_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { FormControl } from '@angular/forms';\n\nexport class NameEditorComponent {\n  name = new FormControl('');\n}\n```\n\n----------------------------------------\n\nTITLE: Python PostgreSQL Connection Pool Implementation\nDESCRIPTION: Python script that implements connection pooling with psycopg2 to connect to a Neon database and execute queries.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/neon-db-specialist-llms-context-20250406.md#2025-04-13_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom psycopg2 import pool\nfrom dotenv import load_dotenv\n\n# Load .env file\nload_dotenv()\n\n# Get the connection string from the environment variable\nconnection_string = os.getenv('DATABASE_URL')\n\n# Create a connection pool\nconnection_pool = pool.SimpleConnectionPool(\n    1,  # Minimum number of connections in the pool\n    10,  # Maximum number of connections in the pool\n    connection_string\n)\n\n# Check if the pool was created successfully\nif connection_pool:\n    print(\"Connection pool created successfully\")\n\n# Get a connection from the pool\nconn = connection_pool.getconn()\n\n# Create a cursor object\ncur = conn.cursor()\n\n# Execute SQL commands to retrieve the current time and version from PostgreSQL\ncur.execute('SELECT NOW();')\ntime = cur.fetchone()[0]\n\ncur.execute('SELECT version();')\nversion = cur.fetchone()[0]\n\n# Close the cursor and return the connection to the pool\ncur.close()\nconnection_pool.putconn(conn)\n\n# Close all connections in the pool\nconnection_pool.closeall()\n\n# Print the results\nprint('Current time:', time)\nprint('PostgreSQL version:', version)\n```\n\n----------------------------------------\n\nTITLE: Defining Runtime Field in Elasticsearch Mapping\nDESCRIPTION: Example of adding a runtime field in the mapping definition that extracts the day of the week from a timestamp field. The script uses the @timestamp field to calculate the day name and emits it as a keyword type.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/elasticsearch-specialist-llms-context-20250406.md#2025-04-13_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nPUT my-index/\n{\n  \"mappings\": {\n    \"runtime\": {\n      \"day_of_week\": {\n        \"type\": \"keyword\",\n        \"script\": {\n          \"source\":\n          \"\"\"emit(doc['@timestamp'].value.dayOfWeekEnum\n          .getDisplayName(TextStyle.FULL, Locale.ROOT))\"\"\"\n        }\n      }\n    },\n    \"properties\": {\n      \"@timestamp\": {\"type\": \"date\"}\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Summing Node Values in D3 Hierarchy\nDESCRIPTION: Demonstrates how to use the sum() method to calculate and assign values to nodes based on their descendants. This is often required before applying layout algorithms like treemap or pack.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/d3js-specialist-llms-context-20250406.md#2025-04-13_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\nroot.sum((d) => d.value ? 1 : 0);\n```\n\n----------------------------------------\n\nTITLE: User Input Model Definition\nDESCRIPTION: Defines a Pydantic model for user input data including username, password, email, and optional full name.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/fastapi-developer-llms-context-20250406.md#2025-04-13_snippet_45\n\nLANGUAGE: python\nCODE:\n```\nclass UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: str | None = None\n```\n\n----------------------------------------\n\nTITLE: Route Module Exports in TypeScript\nDESCRIPTION: Demonstrates the standard exports for a Remix route module including loader, action, and component definitions.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/031-frontend/remix-developer/031-work-fe-remix-developer.mode.md#2025-04-13_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nasync function loader({ request, params, context }) {\\n  return json(data);\\n}\\n\\nasync function action({ request, params, context }) {\\n  const formData = await request.formData();\\n  // Handle mutation\\n  return json(result);\\n}\\n\\nexport default function RouteComponent() {\\n  const data = useLoaderData();\\n  return <div>{/* UI */}</div>;\\n}\\n\\nexport function ErrorBoundary() {\\n  const error = useRouteError();\\n  return <div>{/* Error UI */}</div>;\\n}\n```\n\n----------------------------------------\n\nTITLE: Using the any Type in TypeScript\nDESCRIPTION: Demonstrates using the any type to disable type checking for a variable, allowing access to any properties or methods without compiler errors.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/typescript-specialist-llms-context-20250406.md#2025-04-13_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nlet obj: any = { x: 0 };\n// None of the following lines of code will throw compiler errors.\n// Using `any` disables all further type checking, and it is assumed\n// you know the environment better than TypeScript.\nobj.foo();\nobj();\nobj.bar = 100;\nobj = \"hello\";\nconst n: number = obj;\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Dev Environment for Workerd in TypeScript\nDESCRIPTION: Illustrates how to create a custom development environment for Workerd. This example sets up a connection and transport mechanism for hot module replacement (HMR).\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/vite-specialist-llms-context-20250406.md#2025-04-13_snippet_43\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DevEnvironment, HotChannel } from 'vite'\n\nfunction createWorkerdDevEnvironment(\n  name: string,\n  config: ResolvedConfig,\n  context: DevEnvironmentContext\n) {\n  const connection = /* ... */\n  const transport: HotChannel = {\n    on: (listener) => { connection.on('message', listener) },\n    send: (data) => connection.send(data),\n  }\n\n  const workerdDevEnvironment = new DevEnvironment(name, config, {\n    options: {\n      resolve: { conditions: ['custom'] },\n      ...context.options,\n    },\n    hot: true,\n    transport,\n  })\n  return workerdDevEnvironment\n}\n```\n\n----------------------------------------\n\nTITLE: Working with Writable Signals\nDESCRIPTION: Shows how to create and manipulate writable signals including reading values and using set/update operations.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/angular-developer-llms-context-20250406.md#2025-04-13_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nconst count = signal(0);\n\n// Signals are getter functions - calling them reads their value.\nconsole.log('The count is: ' + count());\n```\n\nLANGUAGE: typescript\nCODE:\n```\ncount.set(3);\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// Increment the count by 1.\ncount.update(value => value + 1);\n```\n\n----------------------------------------\n\nTITLE: Calculating Average Population using Aggregation Pipeline\nDESCRIPTION: Uses MongoDB aggregation pipeline to calculate average city population grouped by state through multiple stages.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/mongodb-specialist-llms-context-20250406.md#2025-04-13_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\ndb.zipcodes.aggregate( [\n   { $group: { _id: { state: \"$state\", city: \"$city\" }, pop: { $sum: \"$pop\" } } },\n   { $group: { _id: \"$_id.state\", avgCityPop: { $avg: \"$pop\" } } }\n] )\n```\n\n----------------------------------------\n\nTITLE: Implementing Server-Side Handle Hook in SvelteKit\nDESCRIPTION: This snippet demonstrates how to implement the 'handle' hook in SvelteKit for server-side request handling. It shows how to customize responses or bypass SvelteKit for specific routes.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/sveltekit-llms-context-20250406.md#2025-04-13_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/// file: src/hooks.server.js\n/** @type {import('@sveltejs/kit').Handle} */\nexport async function handle({ event, resolve }) {\n\tif (event.url.pathname.startsWith('/custom')) {\n\t\treturn new Response('custom response');\n\t}\n\n\tconst response = await resolve(event);\n\treturn response;\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Flask Blueprint\nDESCRIPTION: Shows how to register a blueprint with a Flask application, which allows for modular organization of routes and functionality. The example demonstrates basic blueprint registration without any prefix or options.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/flask-developer-llms-context-20250406.md#2025-04-13_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import Flask\nfrom yourapplication.simple_page import simple_page\n\napp = Flask(__name__)\napp.register_blueprint(simple_page)\n```\n\n----------------------------------------\n\nTITLE: Updating User Model Fields in Django\nDESCRIPTION: Demonstrates how to update specific fields of a user model instance and save the changes to the database.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/django-developer-llms-context-20250406.md#2025-04-13_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nuser.last_name = \"Lennon\"\nuser.save()\n```\n\n----------------------------------------\n\nTITLE: Creating Tests for QuestionIndexView in Django\nDESCRIPTION: This code snippet defines a test class for the QuestionIndexView. It includes tests for various scenarios such as no questions, past questions, future questions, and multiple questions. It demonstrates best practices for writing comprehensive tests in Django.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/django-developer-llms-context-20250406.md#2025-04-13_snippet_26\n\nLANGUAGE: python\nCODE:\n```\ndef create_question(question_text, days):\n    \"\"\"\n    Create a question with the given `question_text` and published the\n    given number of `days` offset to now (negative for questions published\n    in the past, positive for questions that have yet to be published).\n    \"\"\"\n    time = timezone.now() + datetime.timedelta(days=days)\n    return Question.objects.create(question_text=question_text, pub_date=time)\n\n\nclass QuestionIndexViewTests(TestCase):\n    def test_no_questions(self):\n        \"\"\"\n        If no questions exist, an appropriate message is displayed.\n        \"\"\"\n        response = self.client.get(reverse(\"polls:index\"))\n        self.assertEqual(response.status_code, 200)\n        self.assertContains(response, \"No polls are available.\")\n        self.assertQuerySetEqual(response.context[\"latest_question_list\"], [])\n\n    def test_past_question(self):\n        \"\"\"\n        Questions with a pub_date in the past are displayed on the\n        index page.\n        \"\"\"\n        question = create_question(question_text=\"Past question.\", days=-30)\n        response = self.client.get(reverse(\"polls:index\"))\n        self.assertQuerySetEqual(\n            response.context[\"latest_question_list\"],\n            [question],\n        )\n\n    def test_future_question(self):\n        \"\"\"\n        Questions with a pub_date in the future aren't displayed on\n        the index page.\n        \"\"\"\n        create_question(question_text=\"Future question.\", days=30)\n        response = self.client.get(reverse(\"polls:index\"))\n        self.assertContains(response, \"No polls are available.\")\n        self.assertQuerySetEqual(response.context[\"latest_question_list\"], [])\n\n    def test_future_question_and_past_question(self):\n        \"\"\"\n        Even if both past and future questions exist, only past questions\n        are displayed.\n        \"\"\"\n        question = create_question(question_text=\"Past question.\", days=-30)\n        create_question(question_text=\"Future question.\", days=30)\n        response = self.client.get(reverse(\"polls:index\"))\n        self.assertQuerySetEqual(\n            response.context[\"latest_question_list\"],\n            [question],\n        )\n\n    def test_two_past_questions(self):\n        \"\"\"\n        The questions index page may display multiple questions.\n        \"\"\"\n        question1 = create_question(question_text=\"Past question 1.\", days=-30)\n        question2 = create_question(question_text=\"Past question 2.\", days=-5)\n```\n\n----------------------------------------\n\nTITLE: Implementing REST API using MethodView in Flask\nDESCRIPTION: Complete REST API implementation using MethodView for handling different HTTP methods. It includes CRUD operations for a model.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/flask-developer-llms-context-20250406.md#2025-04-13_snippet_22\n\nLANGUAGE: Python\nCODE:\n```\nfrom flask.views import MethodView\n\nclass ItemAPI(MethodView):\n    init_every_request = False\n\n    def __init__(self, model):\n        self.model = model\n        self.validator = generate_validator(model)\n\n    def _get_item(self, id):\n        return self.model.query.get_or_404(id)\n\n    def get(self, id):\n        item = self._get_item(id)\n        return jsonify(item.to_json())\n\n    def patch(self, id):\n        item = self._get_item(id)\n        errors = self.validator.validate(item, request.json)\n\n        if errors:\n            return jsonify(errors), 400\n\n        item.update_from_json(request.json)\n        db.session.commit()\n        return jsonify(item.to_json())\n\n    def delete(self, id):\n        item = self._get_item(id)\n        db.session.delete(item)\n        db.session.commit()\n        return \"\", 204\n```\n\n----------------------------------------\n\nTITLE: Vue Slot Content Rendering\nDESCRIPTION: Shows different ways to implement slot outlets in child components for content distribution.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/vuejs-developer-llms-context-20250406.md#2025-04-13_snippet_39\n\nLANGUAGE: vue-html\nCODE:\n```\n<!-- in child template -->\n<slot/>\n```\n\nLANGUAGE: vue-html\nCODE:\n```\n<!-- in child template -->\n<slot></slot>\n```\n\n----------------------------------------\n\nTITLE: Creating a Pydantic Model for Request Body Validation\nDESCRIPTION: Shows how to define a Pydantic model for validating and serializing request bodies in FastAPI. This approach leverages Python type hints and Pydantic's Field for additional validation rules.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/condensed_indices/fastapi-developer-condensed-index.md#2025-04-13_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom pydantic import BaseModel, Field\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = Field(default=None, min_length=1, description=\"Optional item description\")\n    price: float\n    tax: float | None = None\n```\n\n----------------------------------------\n\nTITLE: Defining Primary Color Tokens in JavaScript for Material UI\nDESCRIPTION: Shows how to define the primary color tokens (main, light, dark, and contrastText) that can be used in the Material UI theme. This defines a blue color palette with appropriate contrast text.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/material-ui-specialist-llms-context-20250406.md#2025-04-13_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\nconst primary = {\n  main: '#1976d2',\n  light: '#42a5f5',\n  dark: '#1565c0',\n  contrastText: '#fff',\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Sign-In UI with Clerk Elements\nDESCRIPTION: Build a custom sign-in form using Clerk Elements components. This approach provides flexibility in design while maintaining accessibility and functionality provided by Clerk.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/031-frontend/clerk-auth-specialist/031-work-fe-clerk-auth-specialist.mode.md#2025-04-13_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { SignIn } from '@clerk/elements/sign-in';\nimport { Clerk } from '@clerk/elements/common';\n\nconst CustomSignInForm = () => (\n  <SignIn.Root>\n    <SignIn.Step name=\"identifier\">\n      <Clerk.Field name=\"identifier\">\n        <Clerk.Label>Email</Clerk.Label>\n        <Clerk.Input type=\"email\" />\n        <Clerk.FieldError />\n      </Clerk.Field>\n      <SignIn.Action>Next</SignIn.Action>\n    </SignIn.Step>\n    {/* Add additional steps for password, 2FA, etc. */}\n  </SignIn.Root>\n);\n```\n\n----------------------------------------\n\nTITLE: Creating WAAPI-powered Animation\nDESCRIPTION: Shows how to create an animation using the lightweight WAAPI version of AnimeJS.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/animejs-specialist-llms-context-20250406.md#2025-04-13_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nconst animation = waapi.animate(targets, parameters);\n```\n\n----------------------------------------\n\nTITLE: Implementing Secure Email Handling in Django\nDESCRIPTION: Shows proper email handling with form validation and sanitization before sending.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/django-developer-llms-context-20250406.md#2025-04-13_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom django import forms\nfrom django.core.mail import send_mail\nfrom django.http import JsonResponse\n\n\nclass EmailForm(forms.Form):\n    email = forms.EmailField()\n\n\ndef my_proof_of_concept(request):\n    form = EmailForm(request.GET)\n    if form.is_valid():\n        send_mail(\n            \"Email subject\",\n            \"Email body\",\n            form.cleaned_data[\"email\"],\n            [\"admin@example.com\"],\n        )\n        return JsonResponse(status=200)\n    return JsonResponse(form.errors, status=400)\n```\n\n----------------------------------------\n\nTITLE: Server-Side Rendering Handler Implementation\nDESCRIPTION: Implementation of a catch-all route handler for server-side rendering that processes HTML templates and handles Vite transformations.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/vite-specialist-llms-context-20250406.md#2025-04-13_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\napp.use('*', async (req, res, next) => {\n  const url = req.originalUrl\n\n  try {\n    // 1. Read index.html\n    let template = fs.readFileSync(\n      path.resolve(__dirname, 'index.html'),\n      'utf-8',\n    )\n\n    // 2. Apply Vite HTML transforms. This injects the Vite HMR client,\n    //    and also applies HTML transforms from Vite plugins, e.g. global\n    //    preambles from @vitejs/plugin-react\n    template = await vite.transformIndexHtml(url, template)\n\n    // 3. Load the server entry. ssrLoadModule automatically transforms\n    //    ESM source code to be usable in Node.js! There is no bundling\n    //    required, and provides efficient invalidation similar to HMR.\n    const { render } = await vite.ssrLoadModule('/src/entry-server.js')\n\n    // 4. render the app HTML. This assumes entry-server.js's exported\n    //     `render` function calls appropriate framework SSR APIs,\n    //    e.g. ReactDOMServer.renderToString()\n    const appHtml = await render(url)\n\n    // 5. Inject the app-rendered HTML into the template.\n    const html = template.replace(`<!--ssr-outlet-->`, () => appHtml)\n\n    // 6. Send the rendered HTML back.\n    res.status(200).set({ 'Content-Type': 'text/html' }).end(html)\n  } catch (e) {\n    // If an error is caught, let Vite fix the stack trace so it maps back\n    // to your actual source code.\n    vite.ssrFixStacktrace(e)\n    next(e)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Virtual Modules Plugin Example\nDESCRIPTION: Plugin implementation showing how to create virtual modules in Vite for passing build time information through ESM imports.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/vite-specialist-llms-context-20250406.md#2025-04-13_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function myPlugin() {\n  const virtualModuleId = 'virtual:my-module'\n  const resolvedVirtualModuleId = '\\0' + virtualModuleId\n\n  return {\n    name: 'my-plugin',\n    resolveId(id) {\n      if (id === virtualModuleId) {\n        return resolvedVirtualModuleId\n      }\n    },\n    load(id) {\n      if (id === resolvedVirtualModuleId) {\n        return `export const msg = \"from virtual module\"`\n      }\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Type Declarations\nDESCRIPTION: Examples of union types, intersection types, and type aliases in TypeScript.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/condensed_indices/typescript-specialist-condensed-index.md#2025-04-13_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntype StringOrNumber = string | number;\ntype Combined = TypeA & TypeB;\ntype ID = string | number;\ntype Pair = [string, number];\n```\n\n----------------------------------------\n\nTITLE: Implementing Union Types in TypeScript\nDESCRIPTION: Demonstrates the use of union types to allow multiple type possibilities for a single variable or parameter.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/typescript-specialist-llms-context-20250406.md#2025-04-13_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getLength(obj: string | string[]) {\n  return obj.length;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Form Controls with Bootstrap\nDESCRIPTION: Example showing basic email input and textarea implementation with Bootstrap form control classes. This demonstrates how to create responsive and styled form elements using Bootstrap's CSS classes.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/bootstrap-specialist-llms-context-20250406.md#2025-04-13_snippet_22\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"mb-3\">\n  <label for=\"exampleFormControlInput1\" class=\"form-label\">Email address</label>\n  <input type=\"email\" class=\"form-control\" id=\"exampleFormControlInput1\" placeholder=\"name@example.com\">\n</div>\n<div class=\"mb-3\">\n  <label for=\"exampleFormControlTextarea1\" class=\"form-label\">Example textarea</label>\n  <textarea class=\"form-control\" id=\"exampleFormControlTextarea1\" rows=\"3\"></textarea>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Accessing the NextRequest Object in Next.js Route Handlers\nDESCRIPTION: Shows how to use the NextRequest object in a Next.js route handler. The NextRequest extends the Web Request API and provides additional functionality for accessing cookies and URL information.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/nextjs-developer-llms-context-20250406.md#2025-04-13_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { NextRequest } from 'next/server'\n\nexport async function GET(request: NextRequest) {\n  const url = request.nextUrl\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport async function GET(request) {\n  const url = request.nextUrl\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Mapped Type with Property Key Iteration in TypeScript\nDESCRIPTION: Shows how to create a mapped type that transforms all properties of an input type to boolean values\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/typescript-specialist-llms-context-20250406.md#2025-04-13_snippet_46\n\nLANGUAGE: typescript\nCODE:\n```\ntype OptionsFlags<Type> = {\n  [Property in keyof Type]: boolean;\n};\n\ntype Features = {\n  darkMode: () => void;\n  newUserProfile: () => void;\n};\n\ntype FeatureOptions = OptionsFlags<Features>;\n```\n\n----------------------------------------\n\nTITLE: Importing ReactiveFormsModule in Angular TypeScript\nDESCRIPTION: Sets up reactive forms functionality by importing ReactiveFormsModule from @angular/forms and adding it to the NgModule imports array.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/angular-developer-llms-context-20250406.md#2025-04-13_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ReactiveFormsModule } from '@angular/forms';\n\n@NgModule({\n  imports: [\n    // other imports ...\n    ReactiveFormsModule\n  ],\n})\nexport class AppModule { }\n```\n\n----------------------------------------\n\nTITLE: Inline Style Component Configuration\nDESCRIPTION: Shows how to define inline styles within component configuration using the styles property.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/angular-developer-llms-context-20250406.md#2025-04-13_snippet_36\n\nLANGUAGE: angular-ts\nCODE:\n```\n@Component({\n  selector: 'profile-photo',\n  template: `<img src=\"profile-photo.jpg\" alt=\"Your profile photo\">`,\n  styles: ` img { border-radius: 50%; } `,\n})\nexport class ProfilePhoto { }\n```\n\n----------------------------------------\n\nTITLE: Implementing Type Guards with 'in' Operator in TypeScript\nDESCRIPTION: Demonstrates the implementation of type guards using the 'in' operator in TypeScript. This allows for checking the presence of properties in an object.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/031-frontend/typescript-specialist/031-work-fe-typescript-specialist.mode.md#2025-04-13_snippet_15\n\nLANGUAGE: TypeScript\nCODE:\n```\nif (\"property\" in object) { ... }\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering in Vue.js\nDESCRIPTION: Illustrates the use of v-if, v-else-if, and v-else directives for conditional rendering in Vue.js templates.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/condensed_indices/vuejs-developer-condensed-index.md#2025-04-13_snippet_7\n\nLANGUAGE: html\nCODE:\n```\nv-if\nv-else-if\nv-else\n```\n\n----------------------------------------\n\nTITLE: Inserting Data in Astro DB with Form Handling\nDESCRIPTION: Demonstrates how to insert data into Astro DB tables using form submissions. The code handles POST requests, validates input types, inserts data, and displays existing comments.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/astro-developer-llms-context-20250406.md#2025-04-13_snippet_29\n\nLANGUAGE: astro\nCODE:\n```\n---\nimport { db, Comment } from 'astro:db';\n\nif (Astro.request.method === 'POST') {\n  const formData = await Astro.request.formData();\n  const author = formData.get('author');\n  const body = formData.get('body');\n  if (typeof author === 'string' && typeof body === 'string') {\n    await db.insert(Comment).values({ author, body });\n  }\n}\n\nconst comments = await db.select().from(Comment);\n---\n\n<form method=\"POST\" style=\"display: grid\">\n\t<label for=\"author\">Author</label>\n\t<input id=\"author\" name=\"author\" />\n\n\t<label for=\"body\">Body</label>\n\t<textarea id=\"body\" name=\"body\"></textarea>\n\n\t<button type=\"submit\">Submit</button>\n</form>\n\n<!-- Render `comments` -->\n```\n\n----------------------------------------\n\nTITLE: Custom Validator Implementation\nDESCRIPTION: Shows how to create a custom validator function that validates input against forbidden names using regular expressions.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/angular-developer-llms-context-20250406.md#2025-04-13_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nexport function forbiddenNameValidator(nameRe: RegExp): ValidatorFn {\n  return (control: AbstractControl): ValidationErrors | null => {\n    const forbidden = nameRe.test(control.value);\n    return forbidden ? {'forbiddenName': {value: control.value}} : null;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: UserService Implementation with HttpClient\nDESCRIPTION: Shows implementation of a reusable service for user data access using HttpClient.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/angular-developer-llms-context-20250406.md#2025-04-13_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\n@Injectable({providedIn: 'root'})\nexport class UserService {\n  constructor(private http: HttpClient) {}\n\n  getUser(id: string): Observable<User> {\n    return this.http.get<User>(`/api/user/${id}`);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: HMR API Usage Pattern\nDESCRIPTION: Example of safely implementing Hot Module Replacement (HMR) with production tree-shaking support\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/031-frontend/vite-specialist/031-work-fe-vite-specialist.mode.md#2025-04-13_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nif (import.meta.hot) {\n  // HMR code here\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Remix Vite Plugin\nDESCRIPTION: A comprehensive configuration example for the Remix Vite plugin. Shows various options including basename, build directory, future flags, route file ignoring patterns, and custom routing definitions.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/remix-developer-llms-context-20250406.md#2025-04-13_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nimport { vitePlugin as remix } from \"@remix-run/dev\";\nimport { defineConfig } from \"vite\";\n\nexport default defineConfig({\n  plugins: [\n    remix({\n      basename: \"/\",\n      buildDirectory: \"build\",\n      future: {\n        /* any enabled future flags */\n      },\n      ignoredRouteFiles: [\"**/*.css\"],\n      routes(defineRoutes) {\n        return defineRoutes((route) => {\n          route(\"/somewhere/cool/*\", \"catchall.tsx\");\n        });\n      },\n      serverBuildFile: \"index.js\",\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Immer State Updates\nDESCRIPTION: Using Immer for simplified nested state updates\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/react-specialist-llms-context-20250406.md#2025-04-13_snippet_50\n\nLANGUAGE: javascript\nCODE:\n```\nupdateMyTodos(draft => {\n  const artwork = draft.find(a => a.id === artworkId);\n  artwork.seen = nextSeen;\n});\n```\n\n----------------------------------------\n\nTITLE: Vite Plugin Server Bundles Configuration\nDESCRIPTION: Configuration for Remix Vite plugin to create separate server bundles based on route authentication requirements.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/remix-developer-llms-context-20250406.md#2025-04-13_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { vitePlugin as remix } from \"@remix-run/dev\";\nimport { defineConfig } from \"vite\";\n\nexport default defineConfig({\n  plugins: [\n    remix({\n      serverBundles: ({ branch }) => {\n        const isAuthenticatedRoute = branch.some((route) =>\n          route.id.split(\"/\").includes(\"_authenticated\")\n        );\n\n        return isAuthenticatedRoute\n          ? \"authenticated\"\n          : \"unauthenticated\";\n      },\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Enter/Update/Exit Selections in D3\nDESCRIPTION: Demonstrates the join method for efficiently handling enter, update, and exit selections in a single call.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/031-frontend/d3js-specialist/031-work-fe-d3js-specialist.mode.md#2025-04-13_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nselection.join(enter[, update][, exit])\n```\n\n----------------------------------------\n\nTITLE: Attribute and Event Binding in Vue.js Templates\nDESCRIPTION: Shows how to bind attributes and attach event listeners in Vue.js templates using shorthand and full syntax.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/condensed_indices/vuejs-developer-condensed-index.md#2025-04-13_snippet_6\n\nLANGUAGE: html\nCODE:\n```\nv-bind:attribute\n:attribute\nv-on:event\n@event\n```\n\n----------------------------------------\n\nTITLE: MongoDB Document Query Operations\nDESCRIPTION: Core query operations for finding documents with optional query filters and field projections.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/condensed_indices/mongodb-specialist-condensed-index.md#2025-04-13_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndb.collection.find(<query>, <projection>)\n```\n\n----------------------------------------\n\nTITLE: Defining FastAPI Path Operation with Type Hints\nDESCRIPTION: Demonstrates how to define a FastAPI path operation (route) using decorators and type hints for parameters. This pattern enables automatic request validation and API documentation.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/condensed_indices/fastapi-developer-condensed-index.md#2025-04-13_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n@app.get(\"/items/{item_id}\")\ndef read_item(item_id: int, q: str | None = None):\n    return {\"item_id\": item_id, \"q\": q}\n```\n\n----------------------------------------\n\nTITLE: Implementing ThemeProvider Component for Dark Mode in React with TypeScript\nDESCRIPTION: This component manages theme state (light, dark, or system) and persists preferences in local storage. It uses React context to provide theme settings throughout the application and updates the document's root class list accordingly.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/shadcn-ui-specialist-llms-context-20250406.md#2025-04-13_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createContext, useContext, useEffect, useState } from \"react\"\n\ntype Theme = \"dark\" | \"light\" | \"system\"\n\ntype ThemeProviderProps = {\n  children: React.ReactNode\n  defaultTheme?: Theme\n  storageKey?: string\n}\n\ntype ThemeProviderState = {\n  theme: Theme\n  setTheme: (theme: Theme) => void\n}\n\nconst initialState: ThemeProviderState = {\n  theme: \"system\",\n  setTheme: () => null,\n}\n\nconst ThemeProviderContext = createContext<ThemeProviderState>(initialState)\n\nexport function ThemeProvider({\n  children,\n  defaultTheme = \"system\",\n  storageKey = \"vite-ui-theme\",\n  ...props\n}: ThemeProviderProps) {\n  const [theme, setTheme] = useState<Theme>(\n    () => (localStorage.getItem(storageKey) as Theme) || defaultTheme\n  )\n\n  useEffect(() => {\n    const root = window.document.documentElement\n\n    root.classList.remove(\"light\", \"dark\")\n\n    if (theme === \"system\") {\n      const systemTheme = window.matchMedia(\"(prefers-color-scheme: dark)\")\n        .matches\n        ? \"dark\"\n        : \"light\"\n\n      root.classList.add(systemTheme)\n      return\n    }\n\n    root.classList.add(theme)\n  }, [theme])\n\n  const value = {\n    theme,\n    setTheme: (theme: Theme) => {\n      localStorage.setItem(storageKey, theme)\n      setTheme(theme)\n    },\n  }\n\n  return (\n    <ThemeProviderContext.Provider {...props} value={value}>\n      {children}\n    </ThemeProviderContext.Provider>\n  )\n}\n\nexport const useTheme = () => {\n  const context = useContext(ThemeProviderContext)\n\n  if (context === undefined)\n    throw new Error(\"useTheme must be used within a ThemeProvider\")\n\n  return context\n}\n```\n\n----------------------------------------\n\nTITLE: Using Link Component for Client-Side Navigation\nDESCRIPTION: Implement client-side navigation in Next.js using the Link component from next/link. This preserves the single-page application experience.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/031-frontend/nextjs-developer/031-work-fe-nextjs-developer.mode.md#2025-04-13_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport Link from 'next/link'\n\nexport default function Navigation() {\n  return (\n    <Link href=\"/about\">About Us</Link>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Synchronous FastAPI Route Definition\nDESCRIPTION: This snippet shows an alternative implementation of the root endpoint using a synchronous function instead of async. It demonstrates that FastAPI supports both synchronous and asynchronous route handlers.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/fastapi-developer-llms-context-20250406.md#2025-04-13_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n@app.get(\"/\")\ndef root():\n    return {\"message\": \"Hello World\"}\n```\n\n----------------------------------------\n\nTITLE: Implementing User Session Validation in Remix TypeScript\nDESCRIPTION: Creates a session validation function using cookie-based storage. Checks for valid user sessions and redirects to login if none exists.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/remix-developer-llms-context-20250406.md#2025-04-13_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  createCookieSessionStorage,\n  redirect,\n} from \"@remix-run/node\";\n\nconst { getSession } = createCookieSessionStorage();\n\nexport async function requireUserSession(request) {\n  const cookie = request.headers.get(\"cookie\");\n  const session = await getSession(cookie);\n\n  if (!session.has(\"userId\")) {\n    throw redirect(\"/login\");\n  }\n\n  return session;\n}\n```\n\n----------------------------------------\n\nTITLE: Using an Astro Layout Component\nDESCRIPTION: Demonstrates how to use a layout component in an Astro page file. This pattern allows for consistent page structure while inserting page-specific content within the layout.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/astro-developer-llms-context-20250406.md#2025-04-13_snippet_33\n\nLANGUAGE: astro\nCODE:\n```\n---\nimport MySiteLayout from '../layouts/MySiteLayout.astro';\n---\n<MySiteLayout title=\"Home Page\">\n  <p>My page content, wrapped in a layout!</p>\n</MySiteLayout>\n```\n\n----------------------------------------\n\nTITLE: Implementing useReducer with TypeScript in React\nDESCRIPTION: This snippet provides a complete example of implementing useReducer with proper TypeScript types for state and actions.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/react-specialist-llms-context-20250406.md#2025-04-13_snippet_34\n\nLANGUAGE: tsx\nCODE:\n```\ninterface State {\n   count: number \n};\n\ntype CounterAction =\n  | { type: \"reset\" }\n  | { type: \"setCount\"; value: State[\"count\"] }\n\nconst initialState: State = { count: 0 };\n\nfunction stateReducer(state: State, action: CounterAction): State {\n  switch (action.type) {\n    case \"reset\":\n      return initialState;\n    case \"setCount\":\n      return { ...state, count: action.value };\n    default:\n      throw new Error(\"Unknown action\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Partial Bootstrap Sass Components\nDESCRIPTION: Shows how to selectively import specific Bootstrap Sass components and utilities. This approach allows developers to customize their Bootstrap build by including only the necessary components, reducing the overall file size.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/bootstrap-specialist-llms-context-20250406.md#2025-04-13_snippet_24\n\nLANGUAGE: scss\nCODE:\n```\n// Custom.scss\n// Option B: Include parts of Bootstrap\n\n// 1. Include functions first (so you can manipulate colors, SVGs, calc, etc)\n@import \"../node_modules/bootstrap/scss/functions\";\n\n// 2. Include any default variable overrides here\n\n// 3. Include remainder of required Bootstrap stylesheets\n@import \"../node_modules/bootstrap/scss/variables\";\n@import \"../node_modules/bootstrap/scss/variables-dark\";\n\n// 4. Include any default map overrides here\n\n// 5. Include remainder of required parts\n@import \"../node_modules/bootstrap/scss/maps\";\n@import \"../node_modules/bootstrap/scss/mixins\";\n@import \"../node_modules/bootstrap/scss/root\";\n\n// 6. Optionally include any other parts as needed\n@import \"../node_modules/bootstrap/scss/utilities\";\n@import \"../node_modules/bootstrap/scss/reboot\";\n@import \"../node_modules/bootstrap/scss/type\";\n@import \"../node_modules/bootstrap/scss/images\";\n@import \"../node_modules/bootstrap/scss/containers\";\n@import \"../node_modules/bootstrap/scss/grid\";\n@import \"../node_modules/bootstrap/scss/helpers\";\n\n// 7. Optionally include utilities API last\n@import \"../node_modules/bootstrap/scss/utilities/api\";\n\n// 8. Add additional custom code here\n```\n\n----------------------------------------\n\nTITLE: Configuring Force Simulation with Multiple Forces in D3.js\nDESCRIPTION: Shows how to create a force simulation with multiple forces including many-body force, link force, and centering force for graph layout. This is used for creating force-directed graph visualizations.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/d3js-specialist-llms-context-20250406.md#2025-04-13_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst simulation = d3.forceSimulation(nodes)\n    .force(\"charge\", d3.forceManyBody())\n    .force(\"link\", d3.forceLink(links))\n    .force(\"center\", d3.forceCenter());\n```\n\n----------------------------------------\n\nTITLE: Handling Click Events in React\nDESCRIPTION: Illustrates two common ways to handle click events in React: using an inline arrow function or referencing a separate handler function. Both methods are widely used for attaching event listeners to elements.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/031-frontend/react-specialist/031-work-fe-react-specialist.mode.md#2025-04-13_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nonClick={() => console.log('Clicked')}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nonClick={handleClick}\n```\n\n----------------------------------------\n\nTITLE: Creating Server Island Component\nDESCRIPTION: Shows how to create a server island component using the server:defer directive.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/astro-developer-llms-context-20250406.md#2025-04-13_snippet_25\n\nLANGUAGE: astro\nCODE:\n```\n---\nimport Avatar from \"../components/Avatar.astro\";\n---\n<Avatar server:defer />\n```\n\n----------------------------------------\n\nTITLE: Formatting D3.js Axis Ticks in JavaScript\nDESCRIPTION: Shows different ways to format axis ticks in D3.js. The first snippet uses a custom format function with d3.format, while the second uses a format specifier directly with the ticks method to control both number and format of ticks.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/d3js-specialist-llms-context-20250406.md#2025-04-13_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\naxis.tickFormat(d3.format(\",.0f\"));\n```\n\nLANGUAGE: javascript\nCODE:\n```\naxis.ticks(10, \",f\");\n```\n\n----------------------------------------\n\nTITLE: Generating Static Params for Dynamic Routes in Next.js\nDESCRIPTION: Implements the generateStaticParams function to pre-generate routes for dynamic path segments at build time. It fetches posts data from an API and maps each post to a corresponding slug parameter for static page generation.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/nextjs-developer-llms-context-20250406.md#2025-04-13_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function generateStaticParams() {\n  const posts = await fetch('https://.../posts').then((res) => res.json())\n\n  return posts.map((post) => ({\n    slug: post.slug,\n  }))\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nexport async function generateStaticParams() {\n  const posts = await fetch('https://.../posts').then((res) => res.json())\n\n  return posts.map((post) => ({\n    slug: post.slug,\n  }))\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Registration Form with WTForms in Python\nDESCRIPTION: This snippet demonstrates how to create a RegistrationForm class using WTForms. It includes various field types and validators for a typical user registration form.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/flask-developer-llms-context-20250406.md#2025-04-13_snippet_19\n\nLANGUAGE: Python\nCODE:\n```\nfrom wtforms import Form, BooleanField, StringField, PasswordField, validators\n\nclass RegistrationForm(Form):\n    username = StringField('Username', [validators.Length(min=4, max=25)])\n    email = StringField('Email Address', [validators.Length(min=6, max=35)])\n    password = PasswordField('New Password', [\n        validators.DataRequired(),\n        validators.EqualTo('confirm', message='Passwords must match')\n    ])\n    confirm = PasswordField('Repeat Password')\n    accept_tos = BooleanField('I accept the TOS', [validators.DataRequired()])\n```\n\n----------------------------------------\n\nTITLE: Customizing Palette Colors Using Color Objects in Material UI\nDESCRIPTION: Demonstrates how to customize palette colors by importing and applying predefined color objects from Material UI. This example applies the purple color palette to the primary theme color.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/material-ui-specialist-llms-context-20250406.md#2025-04-13_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createTheme } from '@mui/material/styles';\nimport { purple } from '@mui/material/colors';\n\nconst theme = createTheme({\n  palette: {\n    primary: purple,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Next.js Sign-in Form with Error Handling\nDESCRIPTION: React component implementing email/password sign-in using Clerk's useSignIn hook. Includes form validation, error handling, and user feedback. Handles successful authentication by redirecting to home page.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/clerk-auth-specialist-llms-context-20250406.md#2025-04-13_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n'use client'\n\nimport * as React from 'react'\nimport { useSignIn } from '@clerk/nextjs'\nimport { useRouter } from 'next/navigation'\nimport { ClerkAPIError } from '@clerk/types'\nimport { isClerkAPIResponseError } from '@clerk/nextjs/errors'\n\nexport default function SignInForm() {\n  const { isLoaded, signIn, setActive } = useSignIn()\n  const [email, setEmail] = React.useState('')\n  const [password, setPassword] = React.useState('')\n  const [errors, setErrors] = React.useState<ClerkAPIError[]>()\n\n  const router = useRouter()\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    setErrors(undefined)\n    if (!isLoaded) return\n    try {\n      const signInAttempt = await signIn.create({\n        identifier: email,\n        password,\n      })\n      if (signInAttempt.status === 'complete') {\n        await setActive({ session: signInAttempt.createdSessionId })\n        router.push('/')\n      } else {\n        console.error(JSON.stringify(signInAttempt, null, 2))\n      }\n    } catch (err) {\n      if (isClerkAPIResponseError(err)) setErrors(err.errors)\n      console.error(JSON.stringify(err, null, 2))\n    }\n  }\n\n  return (\n    <>\n      <h1>Sign in</h1>\n      <form onSubmit={(e) => handleSubmit(e)}>\n        <div>\n          <label htmlFor=\"email\">Enter email address</label>\n          <input\n            onChange={(e) => setEmail(e.target.value)}\n            id=\"email\"\n            name=\"email\"\n            type=\"email\"\n            value={email}\n          />\n        </div>\n        <div>\n          <label htmlFor=\"password\">Enter password</label>\n          <input\n            onChange={(e) => setPassword(e.target.value)}\n            id=\"password\"\n            name=\"password\"\n            type=\"password\"\n            value={password}\n          />\n        </div>\n        <button type=\"submit\">Sign in</button>\n      </form>\n\n      {errors && (\n        <ul>\n          {errors.map((el, index) => (\n            <li key={index}>{el.longMessage}</li>\n          ))}\n        </ul>\n      )}\n    </>\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Page Title in Svelte Component\nDESCRIPTION: Demonstrates how to set a unique, descriptive title for each page in a SvelteKit application using the <svelte:head> element. This is important for route announcements and SEO.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/sveltekit-llms-context-20250406.md#2025-04-13_snippet_14\n\nLANGUAGE: svelte\nCODE:\n```\n<svelte:head>\n```\n\n----------------------------------------\n\nTITLE: Creating and Registering Authentication Blueprint in Flask\nDESCRIPTION: This snippet demonstrates how to create a Blueprint for authentication and register it with the Flask application. It sets up the basic structure for organizing authentication-related views.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/flask-developer-llms-context-20250406.md#2025-04-13_snippet_29\n\nLANGUAGE: Python\nCODE:\n```\nimport functools\n\nfrom flask import (\n    Blueprint, flash, g, redirect, render_template, request, session, url_for\n)\nfrom werkzeug.security import check_password_hash, generate_password_hash\n\nfrom flaskr.db import get_db\n\nbp = Blueprint('auth', __name__, url_prefix='/auth')\n```\n\nLANGUAGE: Python\nCODE:\n```\ndef create_app():\n    app = ...\n    # existing code omitted\n\n    from . import auth\n    app.register_blueprint(auth.bp)\n\n    return app\n```\n\n----------------------------------------\n\nTITLE: Identifying Long-Running Queries in PostgreSQL\nDESCRIPTION: SQL query that lists the top 100 queries with the longest average execution time from the pg_stat_statements system view. It includes user ID, query text, execution count, and mean execution time.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/neon-db-specialist-llms-context-20250406.md#2025-04-13_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n    userid,\n    query,\n    calls,\n    mean_exec_time\nFROM\n    pg_stat_statements\nORDER BY\n    mean_exec_time DESC\nLIMIT 100;\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Three-Column Grid Layout with Bootstrap\nDESCRIPTION: Example showing basic three-column grid layout using Bootstrap's container, row and column classes. This demonstrates the fundamental structure of Bootstrap's grid system for responsive layouts.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/bootstrap-specialist-llms-context-20250406.md#2025-04-13_snippet_28\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"container text-center\">\n  <div class=\"row\">\n    <div class=\"col\">\n      Column\n    </div>\n    <div class=\"col\">\n      Column\n    </div>\n    <div class=\"col\">\n      Column\n    </div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Type Annotations for Variables in TypeScript\nDESCRIPTION: Demonstrates how to explicitly annotate variable types in TypeScript using let, const, and var declarations.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/typescript-specialist-llms-context-20250406.md#2025-04-13_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nlet myName: string = \"Alice\";\n//        ^^^^^^^^ Type annotation\n```\n\n----------------------------------------\n\nTITLE: Creating Bar Chart with Grid, Axis, Tooltip, and Legend in React TSX\nDESCRIPTION: This comprehensive example demonstrates how to create a bar chart with a grid, x-axis, tooltip, and legend using Recharts and custom shadcn-ui components.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/shadcn-ui-specialist-llms-context-20250406.md#2025-04-13_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Bar, BarChart, CartesianGrid, XAxis } from \"recharts\"\nimport { ChartContainer, ChartTooltip, ChartTooltipContent, ChartLegend, ChartLegendContent } from \"@/components/ui/chart\"\n\n<ChartContainer config={chartConfig} className=\"h-[200px] w-full\">\n  <BarChart accessibilityLayer data={chartData}>\n    <CartesianGrid vertical={false} />\n    <XAxis\n      dataKey=\"month\"\n      tickLine={false}\n      tickMargin={10}\n      axisLine={false}\n      tickFormatter={(value) => value.slice(0, 3)}\n    />\n    <ChartTooltip content={<ChartTooltipContent />} />\n    <ChartLegend content={<ChartLegendContent />} />\n    <Bar dataKey=\"desktop\" fill=\"var(--color-desktop)\" radius={4} />\n    <Bar dataKey=\"mobile\" fill=\"var(--color-mobile)\" radius={4} />\n  </BarChart>\n</ChartContainer>\n```\n\n----------------------------------------\n\nTITLE: Mapping a Completion Field in Elasticsearch\nDESCRIPTION: This snippet demonstrates how to map a field of type 'completion' in Elasticsearch. The example creates an index named 'music' with a 'suggest' field of type 'completion', which is used for generating fast completions.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/elasticsearch-specialist-llms-context-20250406.md#2025-04-13_snippet_15\n\nLANGUAGE: json\nCODE:\n```\nPUT music\n{\n  \"mappings\": {\n    \"properties\": {\n      \"suggest\": {\n        \"type\": \"completion\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Vue Event Listener Implementation\nDESCRIPTION: Shows how to attach event listeners to custom components with automatic event inheritance.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/vuejs-developer-llms-context-20250406.md#2025-04-13_snippet_40\n\nLANGUAGE: vue-html\nCODE:\n```\n<MyButton @click=\"onClick\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Modal Structure in HTML with Bootstrap\nDESCRIPTION: Shows the basic HTML structure for a Bootstrap modal with header, body, and footer sections. This structure is essential for creating interactive dialog boxes and popups in Bootstrap-based web applications.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/bootstrap-specialist-llms-context-20250406.md#2025-04-13_snippet_30\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"modal\" tabindex=\"-1\">\n  <div class=\"modal-dialog\">\n    <div class=\"modal-content\">\n      <div class=\"modal-header\">\n        <h5 class=\"modal-title\">Modal title</h5>\n        <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\n      </div>\n      <div class=\"modal-body\">\n        <p>Modal body text goes here.</p>\n      </div>\n      <div class=\"modal-footer\">\n        <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">Close</button>\n        <button type=\"button\" class=\"btn btn-primary\">Save changes</button>\n      </div>\n    </div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Custom Greeting Web Component\nDESCRIPTION: Creates a custom web component with data attributes for server-to-client data passing\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/astro-developer-llms-context-20250406.md#2025-04-13_snippet_6\n\nLANGUAGE: astro\nCODE:\n```\n---\nconst { message = 'Welcome, world!' } = Astro.props;\n---\n\n<astro-greet data-message={message}>\n  <button>Say hi!</button>\n</astro-greet>\n\n<script>\n  class AstroGreet extends HTMLElement {\n    connectedCallback() {\n      const message = this.dataset.message;\n      const button = this.querySelector('button');\n      button.addEventListener('click', () => {\n        alert(message);\n      });\n    }\n  }\n\n  customElements.define('astro-greet', AstroGreet);\n</script>\n```\n\n----------------------------------------\n\nTITLE: Auth.js Session Management\nDESCRIPTION: Implements user session retrieval using Auth.js in an Astro component\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/astro-developer-llms-context-20250406.md#2025-04-13_snippet_2\n\nLANGUAGE: astro\nCODE:\n```\n---\nimport Layout from 'src/layouts/Base.astro';\nimport { getSession } from 'auth-astro/server';\n\nconst session = await getSession(Astro.request);\n---\n<Layout>\n  {\n    session ? (\n      <p>Welcome {session.user?.name}</p>\n    ) : (\n      <p>Not logged in</p>\n    )\n  }\n</Layout>\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Conditional Types in TypeScript\nDESCRIPTION: Demonstrates the syntax and basic usage of conditional types, showing how types can be conditionally selected based on type relationships.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/typescript-specialist-llms-context-20250406.md#2025-04-13_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Animal {\n  live(): void;\n}\ninterface Dog extends Animal {\n  woof(): void;\n}\n\ntype Example1 = Dog extends Animal ? number : string;\n\ntype Example2 = RegExp extends Animal ? number : string;\n```\n\n----------------------------------------\n\nTITLE: HttpClient Class Structure\nDESCRIPTION: Defines the structure and available methods of the HttpClient class for making HTTP requests.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/angular-developer-llms-context-20250406.md#2025-04-13_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\nexport class HttpClient {\n    constructor(handler: HttpHandler);\n    get<T>(url: string, options?: {\n        headers?: HttpHeaders;\n        observe?: 'body';\n        params?: HttpParams;\n        reportProgress?: boolean;\n        responseType?: 'json';\n        withCredentials?: boolean;\n    }): Observable<T>;\n    // Additional methods not shown for brevity\n}\n```\n\n----------------------------------------\n\nTITLE: Animating Elements with Different Color Formats in AnimeJS\nDESCRIPTION: This snippet demonstrates how to animate background colors of elements using various color formats in AnimeJS. It imports the animate function and applies different color formats (HEX, RGB, HSL, HEXA, RGBA, HSLA) to target elements with corresponding class names.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/animejs-specialist-llms-context-20250406.md#2025-04-13_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nimport { animate } from 'animejs';\n\nanimate('.hex',  {\n  background: '#FF4B4B',\n});\n\nanimate('.rgb',  {\n  background: 'rgb(255, 168, 40)',\n});\n\nanimate('.hsl',  {\n  background: 'hsl(44, 100%, 59%)',\n});\n\nanimate('.hexa', {\n  background: '#FF4B4B33',\n});\n\nanimate('.rgba', {\n  background: 'rgba(255, 168, 40, .2)',\n});\n\nanimate('.hsla', {\n  background: 'hsla(44, 100%, 59%, .2)',\n});\n```\n\n----------------------------------------\n\nTITLE: Creating PostgreSQL Accounts Table with Constraints\nDESCRIPTION: SQL command to create an 'accounts' table with various column types and constraints including a SERIAL PRIMARY KEY, UNIQUE constraints for username and email, and NOT NULL constraints for required fields.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/neon-db-specialist-llms-context-20250406.md#2025-04-13_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE accounts (\n  user_id SERIAL PRIMARY KEY,\n  username VARCHAR (50) UNIQUE NOT NULL,\n  password VARCHAR (50) NOT NULL,\n  email VARCHAR (255) UNIQUE NOT NULL,\n  created_at TIMESTAMP NOT NULL,\n  last_login TIMESTAMP\n);\n```\n\n----------------------------------------\n\nTITLE: Inserting Role Permissions Seed Data in PostgreSQL\nDESCRIPTION: SQL code for inserting initial role permissions data into the database. The code sets up admin and moderator roles with various permissions for channels and messages management.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/supabase-developer-llms-context-20250406.md#2025-04-13_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\ninsert into public.role_permissions (role, permission)\nvalues\n  ('admin', 'channels.delete'),\n  ('admin', 'messages.delete'),\n  ('moderator', 'messages.delete');\n```\n\n----------------------------------------\n\nTITLE: Making Fetch Requests in SvelteKit Load Functions\nDESCRIPTION: Shows how to use the provided fetch function to make API requests within a load function. This example fetches item data based on the route parameter.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/sveltekit-llms-context-20250406.md#2025-04-13_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\n/// file: src/routes/items/[id]/+page.js\n/** @type {import('./$types').PageLoad} */\nexport async function load({ fetch, params }) {\n\tconst res = await fetch(`/api/items/${params.id}`);\n\tconst item = await res.json();\n\n\treturn { item };\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Cookies in Next.js Server Component\nDESCRIPTION: Demonstrates how to read cookies in a Next.js Server Component using the cookies() function. This example retrieves a cookie named 'theme' from the cookie store for server-side processing.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/nextjs-developer-llms-context-20250406.md#2025-04-13_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\nimport { cookies } from 'next/headers'\n\nexport default async function Page() {\n  const cookieStore = await cookies()\n  const theme = cookieStore.get('theme')\n  return '...'\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { cookies } from 'next/headers'\n\nexport default async function Page() {\n  const cookieStore = await cookies()\n  const theme = cookieStore.get('theme')\n  return '...'\n}\n```\n\n----------------------------------------\n\nTITLE: Using ROW_NUMBER() Window Function in PostgreSQL\nDESCRIPTION: This SQL query demonstrates the ROW_NUMBER() window function, assigning sequential numbers to rows within product group partitions, ordered by price.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/neon-db-specialist-llms-context-20250406.md#2025-04-13_snippet_17\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n\tproduct_name,\n\tgroup_name,\n\tprice,\n\tROW_NUMBER () OVER (\n\t\tPARTITION BY group_name\n\t\tORDER BY\n\t\t\tprice\n\t)\nFROM\n\tproducts\nINNER JOIN product_groups USING (group_id);\n```\n\n----------------------------------------\n\nTITLE: Handling Union Types with Type Narrowing in TypeScript\nDESCRIPTION: Shows how to work with union types in TypeScript, including type narrowing using type predicates.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/typescript-specialist-llms-context-20250406.md#2025-04-13_snippet_43\n\nLANGUAGE: typescript\nCODE:\n```\nfunction start(\n  arg: string | string[] | (() => string) | { s: string }\n): string {\n  if (typeof arg === \"string\") {\n    return commonCase(arg);\n  } else if (Array.isArray(arg)) {\n    return arg.map(commonCase).join(\",\");\n  } else if (typeof arg === \"function\") {\n    return commonCase(arg());\n  } else {\n    return commonCase(arg.s);\n  }\n\n  function commonCase(s: string): string {\n    return s;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Server Actions in Next.js\nDESCRIPTION: Directive to mark functions as Server Actions in Next.js, allowing them to be called from both client and server contexts. This enables secure server-side logic execution from client components.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/condensed_indices/nextjs-developer-condensed-index.md#2025-04-13_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n'use server'\n```\n\n----------------------------------------\n\nTITLE: Using Awaited Type for Promise Unwrapping in TypeScript\nDESCRIPTION: Demonstrates the Awaited utility type for unwrapping Promise types recursively\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/typescript-specialist-llms-context-20250406.md#2025-04-13_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\ntype A = Awaited<Promise<string>>;\ntype B = Awaited<Promise<Promise<number>>>;\ntype C = Awaited<boolean | Promise<number>>;\n```\n\n----------------------------------------\n\nTITLE: Creating a Writable Signal for Reactive State\nDESCRIPTION: Illustrates how to create a writable signal for managing reactive state in Angular. Signals provide a fine-grained approach to reactivity and state management.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/031-frontend/angular-developer/031_angular-developer.mode.md#2025-04-13_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nsignal(initialValue)\n```\n\n----------------------------------------\n\nTITLE: Supabase CLI Project Initialization\nDESCRIPTION: Command for initializing Supabase configuration in a local project directory using the Supabase CLI tool.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/condensed_indices/supabase-developer-condensed-index.md#2025-04-13_snippet_9\n\nLANGUAGE: Shell\nCODE:\n```\nsupabase init\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Theme Variables in Material UI\nDESCRIPTION: Example of adding custom variables to Material UI theme using createTheme function. Shows how to extend the theme with custom status indicators.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/material-ui-specialist-llms-context-20250406.md#2025-04-13_snippet_22\n\nLANGUAGE: jsx\nCODE:\n```\nconst theme = createTheme({\n  status: {\n    danger: orange[500],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Project Folder Structure Example\nDESCRIPTION: Demonstrates the recommended folder structure for organizing web design project files, including HTML, CSS, JavaScript and assets.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/030-design/one-shot-web-designer/030-work-des-one-shot-web-designer.mode.md#2025-04-13_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndesigns/\n  page-name/\n    index.html\n    styles.css\n    script.js (if needed)\n    assets/ (images, fonts, etc.)\n```\n\n----------------------------------------\n\nTITLE: Type Checking in TypeScript\nDESCRIPTION: Demonstrates how TypeScript catches spelling errors in property names during compilation through static type checking.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/typescript-specialist-llms-context-20250406.md#2025-04-13_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst obj = { width: 10, height: 15 };\nconst area = obj.width * obj.heigth;\n```\n\n----------------------------------------\n\nTITLE: Rendering D3.js Axis Structure in HTML\nDESCRIPTION: This HTML snippet shows the typical structure of a D3.js-generated axis. It includes the main group element, domain path, and individual tick groups with lines and text elements.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/d3js-specialist-llms-context-20250406.md#2025-04-13_snippet_18\n\nLANGUAGE: html\nCODE:\n```\n<g fill=\"none\" font-size=\"10\" font-family=\"sans-serif\" text-anchor=\"middle\">\n  <path class=\"domain\" stroke=\"currentColor\" d=\"M0.5,6V0.5H880.5V6\"></path>\n  <g class=\"tick\" opacity=\"1\" transform=\"translate(0.5,0)\">\n    <line stroke=\"currentColor\" y2=\"6\"></line>\n    <text fill=\"currentColor\" y=\"9\" dy=\"0.71em\">0.0</text>\n  </g>\n  <g class=\"tick\" opacity=\"1\" transform=\"translate(176.5,0)\">\n    <line stroke=\"currentColor\" y2=\"6\"></line>\n    <text fill=\"currentColor\" y=\"9\" dy=\"0.71em\">0.2</text>\n  </g>\n  <g class=\"tick\" opacity=\"1\" transform=\"translate(352.5,0)\">\n    <line stroke=\"currentColor\" y2=\"6\"></line>\n    <text fill=\"currentColor\" y=\"9\" dy=\"0.71em\">0.4</text>\n  </g>\n  <g class=\"tick\" opacity=\"1\" transform=\"translate(528.5,0)\">\n    <line stroke=\"currentColor\" y2=\"6\"></line>\n    <text fill=\"currentColor\" y=\"9\" dy=\"0.71em\">0.6</text>\n  </g>\n  <g class=\"tick\" opacity=\"1\" transform=\"translate(704.5,0)\">\n    <line stroke=\"currentColor\" y2=\"6\"></line>\n    <text fill=\"currentColor\" y=\"9\" dy=\"0.71em\">0.8</text>\n  </g>\n  <g class=\"tick\" opacity=\"1\" transform=\"translate(880.5,0)\">\n    <line stroke=\"currentColor\" y2=\"6\"></line>\n    <text fill=\"currentColor\" y=\"9\" dy=\"0.71em\">1.0</text>\n  </g>\n</g>\n```\n\n----------------------------------------\n\nTITLE: Initializing Next.js Project with create-next-app\nDESCRIPTION: Use the create-next-app CLI tool to bootstrap a new Next.js project. This sets up the basic project structure and dependencies.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/031-frontend/nextjs-developer/031-work-fe-nextjs-developer.mode.md#2025-04-13_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app\n```\n\n----------------------------------------\n\nTITLE: Implementing OAuth2 Password Bearer Authentication in FastAPI\nDESCRIPTION: Sets up OAuth2 password bearer authentication in FastAPI by creating a token endpoint and dependency. Includes route definition that requires token authentication.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/fastapi-developer-llms-context-20250406.md#2025-04-13_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import Depends, FastAPI\nfrom fastapi.security import OAuth2PasswordBearer\n\napp = FastAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\n@app.get(\"/items/\")\nasync def read_items(token: str = Depends(oauth2_scheme)):\n    return {\"token\": token}\n```\n\n----------------------------------------\n\nTITLE: Configuring Flask for Single-Page Application and API\nDESCRIPTION: Sets up a Flask application to serve a Single-Page Application (SPA) alongside API endpoints. Includes static file configuration, a health check endpoint, and a catch-all route that serves the SPA index.html for client-side routing.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/flask-developer-llms-context-20250406.md#2025-04-13_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import Flask, jsonify\n\napp = Flask(__name__, static_folder='app', static_url_path=\"/app\")\n\n\n@app.route(\"/heartbeat\")\ndef heartbeat():\n    return jsonify({\"status\": \"healthy\"})\n\n\n@app.route('/', defaults={'path': ''})\n@app.route('/<path:path>')\ndef catch_all(path):\n    return app.send_static_file(\"index.html\")\n```\n\n----------------------------------------\n\nTITLE: Generating Axes in D3\nDESCRIPTION: Demonstrates creating axis generators for different orientations and applying them to selections using the call method.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/031-frontend/d3js-specialist/031-work-fe-d3js-specialist.mode.md#2025-04-13_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nd3.axisBottom(scale)\nd3.axisLeft(scale)\nd3.axisTop(scale)\nd3.axisRight(scale)\n```\n\n----------------------------------------\n\nTITLE: Interactive Confetti Button Component\nDESCRIPTION: Creates an interactive button that triggers confetti animation using canvas-confetti npm module\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/astro-developer-llms-context-20250406.md#2025-04-13_snippet_4\n\nLANGUAGE: astro\nCODE:\n```\n<button data-confetti-button>Celebrate!</button>\n\n<script>\n  // Import npm modules.\n  import confetti from 'canvas-confetti';\n\n  // Find our component DOM on the page.\n  const buttons = document.querySelectorAll('[data-confetti-button]');\n\n  // Add event listeners to fire confetti when a button is clicked.\n  buttons.forEach((button) => {\n    button.addEventListener('click', () => confetti());\n  });\n</script>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Integration with Markdown Layouts\nDESCRIPTION: Shows how to implement TypeScript type safety in Astro markdown layouts with frontmatter property definitions\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/astro-developer-llms-context-20250406.md#2025-04-13_snippet_1\n\nLANGUAGE: astro\nCODE:\n```\n---\nimport type { MarkdownLayoutProps } from 'astro';\n\ntype Props = MarkdownLayoutProps<{\n  // Define frontmatter props here\n  title: string;\n  author: string;\n  date: string;\n}>;\n\n// Now, `frontmatter`, `url`, and other Markdown layout properties\n// are accessible with type safety\nconst { frontmatter, url } = Astro.props;\n---\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <link rel=\"canonical\" href={new URL(url, Astro.site).pathname}>\n    <title>{frontmatter.title}</title>\n  </head>\n  <body>\n    <h1>{frontmatter.title} by {frontmatter.author}</h1>\n    <slot />\n    <p>Written on: {frontmatter.date}</p>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Bootstrap Accordion\nDESCRIPTION: Implementation of a Bootstrap accordion component with collapsible items. The first accordion item is set to be expanded by default using the .show class and appropriate aria attributes for accessibility.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/bootstrap-specialist-llms-context-20250406.md#2025-04-13_snippet_36\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"accordion\" id=\"accordionExample\">\n  <div class=\"accordion-item\">\n    <h2 class=\"accordion-header\">\n      <button class=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\n        Accordion Item #1\n      </button>\n    </h2>\n    <div id=\"collapseOne\" class=\"accordion-collapse collapse show\" data-bs-parent=\"#accordionExample\">\n      <div class=\"accordion-body\">\n        <strong>This is the first item's accordion body.</strong> It is shown by default...\n      </div>\n    </div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Database URIs for Different Environments in Python\nDESCRIPTION: This snippet defines database URIs for different configuration environments (development, testing) using Python classes.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/flask-developer-llms-context-20250406.md#2025-04-13_snippet_16\n\nLANGUAGE: Python\nCODE:\n```\nDATABASE_URI = 'mysql://user@localhost/foo'\n\nclass DevelopmentConfig(Config):\n    DATABASE_URI = \"sqlite:////tmp/foo.db\"\n\nclass TestingConfig(Config):\n    DATABASE_URI = 'sqlite:///:memory:'\n    TESTING = True\n```\n\n----------------------------------------\n\nTITLE: Executing MongoDB Geospatial Query with $center\nDESCRIPTION: Searches the 'places' collection for documents where the 'loc' field contains coordinates within a circular area. The search uses the $geoWithin and $center operators to define a circle centered at [-74, 40.74] with radius 10.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/mongodb-specialist-llms-context-20250406.md#2025-04-13_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ndb.places.find(\n   { loc: { $geoWithin: { $center: [ [-74, 40.74], 10 ] } } }\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing SvelteKit Project via CLI\nDESCRIPTION: Commands to create a new SvelteKit project, install dependencies, and start the development server. The server will run on localhost:5173 after setup.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/sveltekit-llms-context-20250406.md#2025-04-13_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx sv create my-app\ncd my-app\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Class in TypeScript\nDESCRIPTION: Demonstrates how to define a simple class with a constructor, property, and method in TypeScript.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/typescript-specialist-llms-context-20250406.md#2025-04-13_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nclass Greeter {\n  greeting: string;\n\n  constructor(message: string) {\n    this.greeting = message;\n  }\n\n  greet() {\n    return \"Hello, \" + this.greeting;\n  }\n}\n\nlet greeter = new Greeter(\"world\");\n```\n\n----------------------------------------\n\nTITLE: Children Props with Card Component\nDESCRIPTION: Example of passing and rendering children props in a Card component wrapper\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/react-specialist-llms-context-20250406.md#2025-04-13_snippet_42\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Card({ children }) {\n  return (\n    <div className=\"card\">\n      {children}\n    </div>\n  );\n}\n\nexport default function Profile() {\n  return (\n    <Card>\n      <Avatar\n        size={100}\n        person={{ \n          name: 'Katsuko Saruhashi',\n          imageId: 'YfeOqp2'\n        }}\n      />\n    </Card>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Role and Privilege Management Commands\nDESCRIPTION: List of essential PostgreSQL commands for managing user roles, privileges, and security settings. These commands are used for creating, modifying, and removing roles, as well as granting and revoking privileges.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/neon-db-specialist-llms-context-20250406.md#2025-04-13_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nCREATE ROLE\nGRANT\nREVOKE\nALTER ROLE\nDROP ROLE\nSET ROLE\n```\n\n----------------------------------------\n\nTITLE: Configuring SPA/MPA Environment in Vite\nDESCRIPTION: Example configuration for a single-page or multi-page application in Vite. This configuration applies to the default 'client' environment.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/vite-specialist-llms-context-20250406.md#2025-04-13_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nexport default defineConfig({\n  build: {\n    sourcemap: false,\n  },\n  optimizeDeps: {\n    include: ['lib'],\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Lazy Component Loading\nDESCRIPTION: Implementation of lazy loading components for code splitting\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/react-specialist-llms-context-20250406.md#2025-04-13_snippet_47\n\nLANGUAGE: javascript\nCODE:\n```\nimport { lazy } from 'react';\n\nconst MarkdownPreview = lazy(() => import('./MarkdownPreview.js'));\n```\n\n----------------------------------------\n\nTITLE: Defining Text Color Utility in Bootstrap CSS\nDESCRIPTION: CSS implementation of a text color utility class (.text-primary) using CSS variables with RGB values and opacity for flexible color manipulation. This approach allows for easier theming and modification.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/bootstrap-specialist-llms-context-20250406.md#2025-04-13_snippet_34\n\nLANGUAGE: CSS\nCODE:\n```\n.text-primary {\n  --bs-text-opacity: 1;\n  color: rgba(var(--bs-primary-rgb), var(--bs-text-opacity)) !important;\n}\n```\n\n----------------------------------------\n\nTITLE: Timer Implementation with Callbacks\nDESCRIPTION: Creates a timer with configurable duration, loop settings, and frame rate. Includes callback functions for updating DOM elements with current time and loop count.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/animejs-specialist-llms-context-20250406.md#2025-04-13_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nimport { animate } from 'animejs';\n\nconst [ $time, $count ] = utils.$('.value');\n\ncreateTimer({\n  duration: 1000,\n  loop: true,\n  frameRate: 30,\n  onUpdate: self => $time.innerHTML = self.currentTime,\n  onLoop: self => $count.innerHTML = self._currentIteration\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Django User Programmatically\nDESCRIPTION: Shows how to create a new user account using Django's User model create_user helper method.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/django-developer-llms-context-20250406.md#2025-04-13_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.auth.models import User\nuser = User.objects.create_user(\"john\", \"lennon@thebeatles.com\", \"johnpassword\")\n\n# At this point, user is a User object that has already been saved\n# to the database. You can continue to change its attributes\n```\n\n----------------------------------------\n\nTITLE: TypeScript Theme Augmentation in Material UI\nDESCRIPTION: Demonstrates how to extend Material UI theme types in TypeScript using module augmentation to add custom theme variables.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/material-ui-specialist-llms-context-20250406.md#2025-04-13_snippet_25\n\nLANGUAGE: tsx\nCODE:\n```\ndeclare module '@mui/material/styles' {\n  interface Theme {\n    status: {\n      danger: string;\n    };\n  }\n  interface ThemeOptions {\n    status?: {\n      danger?: string;\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using AnimeJS with DOM Element Targets\nDESCRIPTION: Demonstrates how to import the animate function from AnimeJS and use it to target DOM elements. The example shows animating both a single element and a collection of elements with different properties.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/animejs-specialist-llms-context-20250406.md#2025-04-13_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nimport { animate } from 'animejs';\n\nconst $demo = document.querySelector('#selector-demo');\nconst $squares = $demo.querySelectorAll('.square');\n\nanimate($demo, { scale: .75 });\nanimate($squares, { x: '23rem' });\n```\n\n----------------------------------------\n\nTITLE: Type Exports in TypeScript\nDESCRIPTION: Demonstrates how to export type definitions and interfaces in TypeScript modules. Shows examples of exporting a type alias and an interface for use in other files.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/typescript-specialist-llms-context-20250406.md#2025-04-13_snippet_55\n\nLANGUAGE: typescript\nCODE:\n```\nexport type Cat = { breed: string; yearOfBirth: number };\n\nexport interface Dog {\n  breeds: string[];\n  yearOfBirth: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Page Data in SvelteKit\nDESCRIPTION: Defines a load function in +page.js to fetch data for a page component. The data is then available to the page via the data prop.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/sveltekit-llms-context-20250406.md#2025-04-13_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/// file: src/routes/blog/[slug]/+page.js\n/** @type {import('./$types').PageLoad} */\nexport function load({ params }) {\n\treturn {\n\t\tpost: {\n\t\t\ttitle: `Title for ${params.slug} goes here`,\n\t\t\tcontent: `Content for ${params.slug} goes here`\n\t\t}\n\t};\n}\n```\n\nLANGUAGE: svelte\nCODE:\n```\n<!--- file: src/routes/blog/[slug]/+page.svelte --->\n<script>\n\t/** @type {import('./$types').PageProps} */\n\tlet { data } = $props();\n</script>\n\n<h1>{data.post.title}</h1>\n<div>{@html data.post.content}</div>\n```\n\n----------------------------------------\n\nTITLE: Creating a Row-Level Security Policy in SQL\nDESCRIPTION: Defines a row-level security policy that allows authenticated users to delete their own profile entries.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/supabase-developer-llms-context-20250406.md#2025-04-13_snippet_19\n\nLANGUAGE: sql\nCODE:\n```\ncreate policy \"Users can delete a profile.\"\non profiles for delete\nto authenticated\nusing ( (select auth.uid()) = user_id );\n```\n\n----------------------------------------\n\nTITLE: Defining Django Model Classes for a Blog Application\nDESCRIPTION: Example model definitions for Blog, Author, and Entry classes, demonstrating relationships and field types. This shows how to structure related models in a Django application.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/django-developer-llms-context-20250406.md#2025-04-13_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import date\n\nfrom django.db import models\n\n\nclass Blog(models.Model):\n    name = models.CharField(max_length=100)\n    tagline = models.TextField()\n\n    def __str__(self):\n        return self.name\n\n\nclass Author(models.Model):\n    name = models.CharField(max_length=200)\n    email = models.EmailField()\n\n    def __str__(self):\n        return self.name\n\n\nclass Entry(models.Model):\n    blog = models.ForeignKey(Blog, on_delete=models.CASCADE)\n    headline = models.CharField(max_length=255)\n    body_text = models.TextField()\n    pub_date = models.DateField()\n    mod_date = models.DateField(default=date.today)\n    authors = models.ManyToManyField(Author)\n    number_of_comments = models.IntegerField(default=0)\n    number_of_pingbacks = models.IntegerField(default=0)\n    rating = models.IntegerField(default=5)\n\n    def __str__(self):\n        return self.headline\n```\n\n----------------------------------------\n\nTITLE: Implementing Form Action Logic in SvelteKit\nDESCRIPTION: Demonstrates a complete implementation of form actions including form data processing, database interaction, and returning action results.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/sveltekit-llms-context-20250406.md#2025-04-13_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/// file: src/routes/login/+page.server.js\nimport * as db from '$lib/server/db';\n\n/** @type {import('./$types').PageServerLoad} */\nexport async function load({ cookies }) {\n\tconst user = await db.getUserFromSession(cookies.get('sessionid'));\n\treturn { user };\n}\n\n/** @satisfies {import('./$types').Actions} */\nexport const actions = {\n\tlogin: async ({ cookies, request }) => {\n\t\tconst data = await request.formData();\n\t\tconst email = data.get('email');\n\t\tconst password = data.get('password');\n\n\t\tconst user = await db.getUser(email);\n\t\tcookies.set('sessionid', await db.createSession(user), { path: '/' });\n\n\t\treturn { success: true };\n\t},\n\tregister: async (event) => {\n\t\t// TODO register the user\n\t}\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring SvelteKit Adapter in JavaScript\nDESCRIPTION: Demonstrates how to configure a SvelteKit adapter in the svelte.config.js file. The code shows the basic structure for importing and configuring an adapter with custom options. This configuration is essential for preparing the app for deployment to specific platforms.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/sveltekit-llms-context-20250406.md#2025-04-13_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport adapter from 'svelte-adapter-foo';\n\n/** @type {import('@sveltejs/kit').Config} */\nconst config = {\n\tkit: {\n\t\tadapter: adapter({\n\t\t\t// adapter options go here\n\t\t})\n\t}\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating State Snapshots in React\nDESCRIPTION: This snippet shows how React uses state snapshots. It demonstrates that the state value accessed in an asynchronous callback reflects the value at the time the callback was created, not the current state.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/react-specialist-llms-context-20250406.md#2025-04-13_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\n\nexport default function Counter() {\n  const [number, setNumber] = useState(0);\n\n  return (\n    <>\n      <h1>{number}</h1>\n      <button onClick={() => {\n        setNumber(number + 5);\n        setTimeout(() => {\n          alert(number);\n        }, 3000);\n      }}>+5</button>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Visually Hidden Content\nDESCRIPTION: Implementation of visually hidden content for accessibility.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/bootstrap-specialist-llms-context-20250406.md#2025-04-13_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n<p class=\"text-danger\">\n  <span class=\"visually-hidden\">Danger: </span>\n  This action is not reversible\n</p>\n```\n\n----------------------------------------\n\nTITLE: Constructing a Treemap Layout with D3 Hierarchy\nDESCRIPTION: Shows how to create a treemap layout using d3.treemap(), including sizing, padding, summing values, and sorting nodes. This is used for creating hierarchical visualizations like treemaps.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/d3js-specialist-llms-context-20250406.md#2025-04-13_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\n// Construct the treemap layout.\nconst treemap = d3.treemap();\ntreemap.size([width, height]);\ntreemap.padding(2);\n\n// Sum and sort the data.\nroot.sum((d) => d.value);\nroot.sort((a, b) => b.height - a.height || b.value - a.value);\n\n// Compute the treemap layout.\ntreemap(root);\n\n// Retrieve all descendant nodes.\nconst nodes = root.descendants();\n```\n\n----------------------------------------\n\nTITLE: Risk Analysis Documentation Template in Markdown\nDESCRIPTION: Template for structured risk analysis that categorizes identified vulnerabilities by location, severity, exploitability, business impact, and priority level, along with recommended actions.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/039-cross-functional/security-specialist/039-work-xf-security-specialist.mode.md#2025-04-13_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## Risk Analysis\n\n| Vulnerability | Location | Severity | Exploitability | Business Impact | Priority | Recommendation |\n|---|---|---|---|---|---|---|\n| Broken Object Level Authorization (BOLA) | `GET /api/v1/users/{id}` | Critical | Easy | High (PII access) | P0 | Implement ownership checks |\n| Reflected XSS | `profile.php?msg=` | Medium | Moderate | Medium | P1 | Apply context-aware output encoding |\n```\n\n----------------------------------------\n\nTITLE: Programmatic Vite Build Configuration\nDESCRIPTION: Example of using Vite's build API to programmatically build a project with custom configuration settings.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/vite-specialist-llms-context-20250406.md#2025-04-13_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nimport path from 'node:path'\nimport { fileURLToPath } from 'node:url'\nimport { build } from 'vite'\n\nconst __dirname = fileURLToPath(new URL('.', import.meta.url))\n\nawait build({\n  root: path.resolve(__dirname, './project'),\n  base: '/foo/',\n  build: {\n    rollupOptions: {\n      // ...\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining a Client Component in Next.js\nDESCRIPTION: Create a Client Component by adding the 'use client' directive. This allows the use of React hooks and browser APIs.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/031-frontend/nextjs-developer/031-work-fe-nextjs-developer.mode.md#2025-04-13_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n'use client'\n\nimport { useState } from 'react'\n\nexport default function Counter() {\n  const [count, setCount] = useState(0)\n  return <button onClick={() => setCount(count + 1)}>{count}</button>\n}\n```\n\n----------------------------------------\n\nTITLE: Hashing Password with PostgreSQL crypt Function\nDESCRIPTION: Example of using PostgreSQL's crypt function with gen_salt to generate a secure password hash using MD5 algorithm.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/neon-db-specialist-llms-context-20250406.md#2025-04-13_snippet_22\n\nLANGUAGE: sql\nCODE:\n```\nSELECT crypt('user_password', gen_salt('md5'));\n```\n\n----------------------------------------\n\nTITLE: Creating Delaunay Triangulation and Voronoi Diagram with D3.js\nDESCRIPTION: Demonstrates how to create a Delaunay triangulation from a set of points and then generate the corresponding Voronoi diagram with specified bounds using D3.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/d3js-specialist-llms-context-20250406.md#2025-04-13_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nconst delaunay = d3.Delaunay.from([[0, 0], [0, 100], [100, 0], [100, 100]]);\nconst voronoi = delaunay.voronoi([0, 0, 640, 480]);\n```\n\n----------------------------------------\n\nTITLE: Enforcing MFA for New Users with PostgreSQL RLS Policy\nDESCRIPTION: A restrictive Row Level Security (RLS) policy that enforces MFA for users created after a specific date, while grandfathering in existing users with less stringent authentication requirements.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/supabase-developer-llms-context-20250406.md#2025-04-13_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\ncreate policy \"Policy name.\"\n  on table_name\n  as restrictive -- very important!\n  to authenticated\n  using\n    (array[(select auth.jwt()->>'aal')] <@ (\n       select\n         case\n           when created_at >= '2022-12-12T00:00:00Z' then array['aal2']\n           else array['aal1', 'aal2']\n         end as aal\n       from auth.users\n       where (select auth.uid()) = id));\n```\n\n----------------------------------------\n\nTITLE: Using D3 in Vanilla HTML with ES Modules\nDESCRIPTION: Shows how to use D3 in a vanilla HTML file using ES modules loaded from a CDN. It creates a basic chart structure with axes and appends it to a container element in the HTML document.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/d3js-specialist-llms-context-20250406.md#2025-04-13_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<div id=\"container\"></div>\n<script type=\"module\">\n\nimport * as d3 from \"https://cdn.jsdelivr.net/npm/d3@7/+esm\";\n\n// Declare the chart dimensions and margins.\nconst width = 640;\nconst height = 400;\nconst marginTop = 20;\nconst marginRight = 20;\nconst marginBottom = 30;\nconst marginLeft = 40;\n\n// Declare the x (horizontal position) scale.\nconst x = d3.scaleUtc()\n    .domain([new Date(\"2023-01-01\"), new Date(\"2024-01-01\")])\n    .range([marginLeft, width - marginRight]);\n\n// Declare the y (vertical position) scale.\nconst y = d3.scaleLinear()\n    .domain([0, 100])\n    .range([height - marginBottom, marginTop]);\n\n// Create the SVG container.\nconst svg = d3.create(\"svg\")\n    .attr(\"width\", width)\n    .attr(\"height\", height);\n\n// Add the x-axis.\nsvg.append(\"g\")\n    .attr(\"transform\", `translate(0,${height - marginBottom})`)\n    .call(d3.axisBottom(x));\n\n// Add the y-axis.\nsvg.append(\"g\")\n    .attr(\"transform\", `translate(${marginLeft},0)`)\n    .call(d3.axisLeft(y));\n\n// Append the SVG element.\ncontainer.append(svg.node());\n\n</script>\n```\n\n----------------------------------------\n\nTITLE: Defining an Event Handler in React JSX\nDESCRIPTION: Illustrates how to define an inline event handler in React. This pattern is commonly used for handling user interactions like clicks or form submissions.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/condensed_indices/react-specialist-condensed-index.md#2025-04-13_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nonClick={() => console.log('Clicked')}\n```\n\n----------------------------------------\n\nTITLE: Implementing Button Sizes in HTML with Bootstrap\nDESCRIPTION: Demonstrates how to create larger and smaller buttons using Bootstrap's size classes. This snippet shows the implementation of both large and small button variants.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/bootstrap-specialist-llms-context-20250406.md#2025-04-13_snippet_25\n\nLANGUAGE: html\nCODE:\n```\n<button type=\"button\" class=\"btn btn-primary btn-lg\">Large button</button>\n<button type=\"button\" class=\"btn btn-secondary btn-lg\">Large button</button>\n```\n\nLANGUAGE: html\nCODE:\n```\n<button type=\"button\" class=\"btn btn-primary btn-sm\">Small button</button>\n<button type=\"button\" class=\"btn btn-secondary btn-sm\">Small button</button>\n```\n\n----------------------------------------\n\nTITLE: Gzip Request Handler Implementation\nDESCRIPTION: Custom request class that handles gzip-compressed request bodies automatically when the appropriate header is present.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/fastapi-developer-llms-context-20250406.md#2025-04-13_snippet_42\n\nLANGUAGE: python\nCODE:\n```\nclass GzipRequest(Request):\n    async def body(self) -> bytes:\n        if not hasattr(self, \"_body\"):\n            body = await super().body()\n            if \"gzip\" in self.headers.getlist(\"Content-Encoding\"):\n                body = gzip.decompress(body)\n            self._body = body\n        return self._body\n```\n\n----------------------------------------\n\nTITLE: Executing a Terms Query in Elasticsearch\nDESCRIPTION: A terms query that searches for documents where the user.id field exactly matches either 'kimchy' or 'elkbee'. It includes an optional boost parameter to adjust the query's relevance score.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/elasticsearch-specialist-llms-context-20250406.md#2025-04-13_snippet_38\n\nLANGUAGE: console\nCODE:\n```\nGET /_search\n{\n  \"query\": {\n    \"terms\": {\n      \"user.id\": [ \"kimchy\", \"elkbee\" ],\n      \"boost\": 1.0\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Type Inference Example in TypeScript\nDESCRIPTION: Illustrates TypeScript's ability to infer types without explicit annotations, improving code readability.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/typescript-specialist-llms-context-20250406.md#2025-04-13_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nlet msg = \"hello there!\";\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Material UI Theme\nDESCRIPTION: Example of creating a simple custom theme with primary and secondary color palettes using Material UI's createTheme function\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/material-ui-specialist-llms-context-20250406.md#2025-04-13_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createTheme } from '@mui/material/styles';\nimport { green, purple } from '@mui/material/colors';\n\nconst theme = createTheme({\n  palette: {\n    primary: {\n      main: purple[500],\n    },\n    secondary: {\n      main: green[500],\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Accordion Component in React JSX\nDESCRIPTION: Example of using the Accordion component with collapsible functionality and custom styling. Demonstrates the composable interface of shadcn/ui components.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/shadcn-ui-specialist-llms-context-20250406.md#2025-04-13_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\n<Accordion collapsible>\n  <AccordionItem value=\"faq-1\" className=\"border-none\">\n    <AccordionTrigger>\n      How do I pull upstream updates in an Open Code approach?\n    </AccordionTrigger>\n    <AccordionContent>\n      <p>\n        shadcn/ui follows a headless component architecture. This means the core\n        of your app can receive fixes by updating your dependencies, for\n        instance, radix-ui or input-otp.\n      </p>\n      <p className=\"mt-4\">\n        The topmost layer, i.e., the one closest to your design system, is not\n        coupled with the implementation of the library. It stays open for\n        modification.\n      </p>\n    </AccordionContent>\n  </AccordionItem>\n</Accordion>\n```\n\n----------------------------------------\n\nTITLE: Importing Asset as URL in JavaScript\nDESCRIPTION: Demonstrates how to import a static asset as a URL in JavaScript using Vite. The resolved public URL is returned when the asset is served.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/vite-specialist-llms-context-20250406.md#2025-04-13_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Testing Astro Components\nDESCRIPTION: Demonstrates testing Astro components using the experimental Container API with Vitest.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/astro-developer-llms-context-20250406.md#2025-04-13_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nimport { experimental_AstroContainer as AstroContainer } from 'astro/container';\nimport { expect, test } from 'vitest';\nimport Card from '../src/components/Card.astro';\n\ntest('Card with slots', async () => {\n\tconst container = await AstroContainer.create();\n\tconst result = await container.renderToString(Card, {\n\t\tslots: {\n\t\t\tdefault: 'Card content',\n\t\t},\n\t});\n\n\texpect(result).toContain('This is a card');\n\texpect(result).toContain('Card content');\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Row Selection in React TSX\nDESCRIPTION: Adds row selection functionality to the table, including a checkbox column and selection state management.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/shadcn-ui-specialist-llms-context-20250406.md#2025-04-13_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\"\n\nimport { ColumnDef } from \"@tanstack/react-table\"\n\nimport { Badge } from \"@/components/ui/badge\"\nimport { Checkbox } from \"@/components/ui/checkbox\"\n\nexport const columns: ColumnDef<Payment>[] = [\n  {\n    id: \"select\",\n    header: ({ table }) => (\n      <Checkbox\n        checked={\n          table.getIsAllPageRowsSelected() ||\n          (table.getIsSomePageRowsSelected() && \"indeterminate\")\n        }\n        onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}\n        aria-label=\"Select all\"\n      />\n    ),\n    cell: ({ row }) => (\n      <Checkbox\n        checked={row.getIsSelected()}\n        onCheckedChange={(value) => row.toggleSelected(!!value)}\n        aria-label=\"Select row\"\n      />\n    ),\n    enableSorting: false,\n    enableHiding: false,\n  },\n  // ... other columns\n]\n\nexport function DataTable<TData, TValue>({\n  columns,\n  data,\n}: DataTableProps<TData, TValue>) {\n  const [rowSelection, setRowSelection] = React.useState({})\n\n  const table = useReactTable({\n    data,\n    columns,\n    onRowSelectionChange: setRowSelection,\n    state: {\n      rowSelection,\n    },\n    // ... other table options\n  })\n\n  return (\n    <div>\n```\n\n----------------------------------------\n\nTITLE: Defining Conditional Types in TypeScript\nDESCRIPTION: Demonstrates the definition of conditional types in TypeScript. Conditional types select one of two possible types based on a condition.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/031-frontend/typescript-specialist/031-work-fe-typescript-specialist.mode.md#2025-04-13_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype IsString<T> = T extends string ? true : false;\n```\n\n----------------------------------------\n\nTITLE: Defining Keyframes in Anime.js\nDESCRIPTION: Example of using keyframes to define multiple points in an animation sequence.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/031-frontend/animejs-specialist/031_animejs-specialist.mode.md#2025-04-13_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nkeyframes: [ { translateY: -40 }, { translateY: 0 } ]\n```\n\n----------------------------------------\n\nTITLE: Creating JSON Error Handlers for HTTP Exceptions in Flask\nDESCRIPTION: Implements a generic exception handler for HTTPException to return JSON instead of HTML for HTTP errors, making the API more consistent for frontend clients.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/flask-developer-llms-context-20250406.md#2025-04-13_snippet_37\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import json\nfrom werkzeug.exceptions import HTTPException\n\n@app.errorhandler(HTTPException)\ndef handle_exception(e):\n    \"\"\"Return JSON instead of HTML for HTTP errors.\"\"\"\n    # start with the correct headers and status code from the error\n    response = e.get_response()\n    # replace the body with JSON\n    response.data = json.dumps({\n        \"code\": e.code,\n        \"name\": e.name,\n        \"description\": e.description,\n    })\n    response.content_type = \"application/json\"\n    return response\n```\n\n----------------------------------------\n\nTITLE: Basic Full Text Search in Multiple Languages\nDESCRIPTION: Examples of full text search on a 'description' column in a 'books' table across various programming languages using Supabase clients.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/supabase-developer-llms-context-20250406.md#2025-04-13_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nselect\n  *\nfrom\n  books\nwhere\n  to_tsvector(description)\n  @@ to_tsquery('big');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst { data, error } = await supabase.from('books').select().textSearch('description', `'big'`)\n```\n\nLANGUAGE: dart\nCODE:\n```\nfinal result = await client\n  .from('books')\n  .select()\n  .textSearch('description', \"'big'\");\n```\n\nLANGUAGE: swift\nCODE:\n```\nlet response = await client.from(\"books\")\n  .select()\n  .textSearch(\"description\", value: \"'big'\")\n  .execute()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nval data = supabase.from(\"books\").select {\n    filter {\n        textSearch(\"description\", \"'big'\", TextSearchType.NONE)\n    }\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ndata = supabase.from_('books').select().text_search('description', \"'big'\").execute()\n```\n\n----------------------------------------\n\nTITLE: Root-Level Service Provider Configuration\nDESCRIPTION: Demonstrates how to configure a service to be provided at the root level using @Injectable decorator.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/angular-developer-llms-context-20250406.md#2025-04-13_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\n@Injectable({\n  providedIn: 'root'  // <--provides this service in the root EnvironmentInjector\n})\nexport class ItemService {\n  name = 'telephone';\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Type Inference in TypeScript\nDESCRIPTION: Demonstrates how TypeScript automatically infers types from variable assignments without explicit type declarations.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/typescript-specialist-llms-context-20250406.md#2025-04-13_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\nlet helloWorld = \"Hello World\";\n```\n\n----------------------------------------\n\nTITLE: Basic Interface Implementation in TypeScript\nDESCRIPTION: Shows a simple interface implementation for object type checking with a labeled object example, demonstrating TypeScript's structural typing.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/typescript-specialist-llms-context-20250406.md#2025-04-13_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ninterface LabeledValue {\n  label: string;\n}\n\nfunction printLabel(labeledObj: LabeledValue) {\n  console.log(labeledObj.label);\n}\n\nlet myObj = { size: 10, label: \"Size 10 Object\" };\nprintLabel(myObj);\n```\n\n----------------------------------------\n\nTITLE: MongoDB Aggregation Pipeline\nDESCRIPTION: Multi-stage data processing framework for complex transformations and analysis.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/condensed_indices/mongodb-specialist-condensed-index.md#2025-04-13_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ndb.collection.aggregate([<stage1>, <stage2>, ...])\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-up Form in Next.js\nDESCRIPTION: Example of a sign-up form component using Server Actions in Next.js. It demonstrates how to capture user credentials and handle form submission.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/nextjs-developer-llms-context-20250406.md#2025-04-13_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\nimport { signup } from '@/app/actions/auth'\n\nexport function SignupForm() {\n  return (\n    <form action={signup}>\n      <div>\n        <label htmlFor=\"name\">Name</label>\n        <input id=\"name\" name=\"name\" placeholder=\"Name\" />\n      </div>\n      <div>\n        <label htmlFor=\"email\">Email</label>\n        <input id=\"email\" name=\"email\" type=\"email\" placeholder=\"Email\" />\n      </div>\n      <div>\n        <label htmlFor=\"password\">Password</label>\n        <input id=\"password\" name=\"password\" type=\"password\" />\n      </div>\n      <button type=\"submit\">Sign Up</button>\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Appending Elements with D3.js\nDESCRIPTION: Shows different approaches to creating and appending elements using D3. Includes methods using append(), createElement(), and direct DOM manipulation.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/d3js-specialist-llms-context-20250406.md#2025-04-13_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nd3.selectAll(\"div\").append(\"p\");\n```\n\nLANGUAGE: javascript\nCODE:\n```\nd3.selectAll(\"div\").append(() => document.createElement(\"p\"));\n```\n\nLANGUAGE: javascript\nCODE:\n```\nd3.selectAll(\"div\").select(function() {\n  return this.appendChild(document.createElement(\"p\"));\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Project Update/Delete Forms in Remix\nDESCRIPTION: A React component that renders forms for updating and deleting projects. Uses Remix's Form component and intent-based actions through button values. Retrieves project data with useLoaderData and displays it in the form.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/remix-developer-llms-context-20250406.md#2025-04-13_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function Projects() {\n  const project = useLoaderData<typeof loader>();\n  return (\n    <>\n      <h2>Update Project</h2>\n      <Form method=\"post\">\n        <label>\n          Project name:{\" \"}\n          <input\n            type=\"text\"\n            name=\"name\"\n            defaultValue={project.name}\n          />\n        </label>\n        <button type=\"submit\" name=\"intent\" value=\"update\">\n          Update\n        </button>\n      </Form>\n\n      <Form method=\"post\">\n        <button type=\"submit\" name=\"intent\" value=\"delete\">\n          Delete\n        </button>\n      </Form>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Vector Store Client with Vecs in Python\nDESCRIPTION: Initializes a vector store client using the vecs library with a database connection string.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/supabase-developer-llms-context-20250406.md#2025-04-13_snippet_31\n\nLANGUAGE: python\nCODE:\n```\n# create vector store client\nvx = vecs.create_client(DB_CONNECTION)\n```\n\n----------------------------------------\n\nTITLE: Navigating to a Route in HTML Template\nDESCRIPTION: Demonstrates how to use the routerLink directive in an HTML template to create a navigation link to a specified route within the application.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/031-frontend/angular-developer/031_angular-developer.mode.md#2025-04-13_snippet_8\n\nLANGUAGE: HTML\nCODE:\n```\n<a routerLink=\"/path\">Link Text</a>\n```\n\n----------------------------------------\n\nTITLE: Route Module Type Definitions in TypeScript\nDESCRIPTION: Type definitions for key route module exports including loader, action, and component interfaces.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/condensed_indices/remix-developer-condensed-index.md#2025-04-13_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nasync function loader({ request, params, context }): Promise<Response>;\nasync function action({ request, params, context }): Promise<Response>;\nfunction meta({ data, params, location, matches }): MetaDescriptor[];\nfunction links(): LinkDescriptor[];\nasync function clientLoader({ serverLoader, request, params }): Promise<any>;\n```\n\n----------------------------------------\n\nTITLE: Type Guards with In Operator in TypeScript\nDESCRIPTION: Shows how to use the 'in' operator as a type guard to narrow down union types in conditional statements.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/typescript-specialist-llms-context-20250406.md#2025-04-13_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nfunction move(pet: Fish | Bird) {\n  if (\"swim\" in pet) {\n    return pet.swim();\n  }\n  return pet.fly();\n}\n```\n\n----------------------------------------\n\nTITLE: Logging User Authentication Attempts in Flask\nDESCRIPTION: Demonstrates how to log successful and failed login attempts using Flask's app.logger. Includes user authentication and redirects based on the login result.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/flask-developer-llms-context-20250406.md#2025-04-13_snippet_38\n\nLANGUAGE: python\nCODE:\n```\n@app.route('/login', methods=['POST'])\ndef login():\n    user = get_user(request.form['username'])\n\n    if user.check_password(request.form['password']):\n        login_user(user)\n        app.logger.info('%s logged in successfully', user.username)\n        return redirect(url_for('index'))\n    else:\n        app.logger.info('%s failed to log in', user.username)\n        abort(401)\n```\n\n----------------------------------------\n\nTITLE: Installing MUI Base Package with Different Package Managers\nDESCRIPTION: Shows commands to install the @mui/base package using different JavaScript package managers: npm, pnpm, and yarn.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/material-ui-specialist-llms-context-20250406.md#2025-04-13_snippet_41\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @mui/base\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @mui/base\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @mui/base\n```\n\n----------------------------------------\n\nTITLE: Initializing Next.js Project with create-next-app\nDESCRIPTION: Command to create a new Next.js project using the create-next-app CLI tool. This sets up a new project with the latest Next.js version and default configuration.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/condensed_indices/nextjs-developer-condensed-index.md#2025-04-13_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app@latest\n```\n\n----------------------------------------\n\nTITLE: Implementing OnInit Interface Angular\nDESCRIPTION: Demonstrates implementation of OnInit interface for proper lifecycle hook handling.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/angular-developer-llms-context-20250406.md#2025-04-13_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n@Component({\n  /* ... */\n})\nexport class UserProfile implements OnInit {\n  ngOnInit() {\n    /* ... */\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: ClerkProvider Integration in Next.js\nDESCRIPTION: Setup for ClerkProvider in Next.js App Router, providing authentication context to the entire application.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/clerk-auth-specialist-llms-context-20250406.md#2025-04-13_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react'\nimport { ClerkProvider } from '@clerk/nextjs'\n\nexport default function RootLayout({ children }: { children: React.ReactNode }) {\n  return (\n    <ClerkProvider>\n      <html lang=\"en\">\n        <body>{children}</body>\n      </html>\n    </ClerkProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring VS Code Debugging for Next.js\nDESCRIPTION: Set up debugging configuration in VS Code for a Next.js project by creating a launch.json file.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/031-frontend/nextjs-developer/031-work-fe-nextjs-developer.mode.md#2025-04-13_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n// launch.json\n{\n  // Configuration for Next.js debugging\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Boolean Query Example in Elasticsearch\nDESCRIPTION: Demonstrates a boolean query combining multiple clause types including must, filter, must_not and should. Shows usage of minimum_should_match and boost parameters.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/elasticsearch-specialist-llms-context-20250406.md#2025-04-13_snippet_16\n\nLANGUAGE: console\nCODE:\n```\nPOST _search\n{\n  \"query\": {\n    \"bool\" : {\n      \"must\" : {\n        \"term\" : { \"user.id\" : \"kimchy\" }\n      },\n      \"filter\": {\n        \"term\" : { \"tags\" : \"production\" }\n      },\n      \"must_not\" : {\n        \"range\" : {\n          \"age\" : { \"gte\" : 10, \"lte\" : 20 }\n        }\n      },\n      \"should\" : [\n        { \"term\" : { \"tags\" : \"env1\" } },\n        { \"term\" : { \"tags\" : \"deployed\" } }\n      ],\n      \"minimum_should_match\" : 1,\n      \"boost\" : 1.0\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic D3 Element Selection and Modification in JavaScript\nDESCRIPTION: Demonstrates how to select all paragraph elements in a document and modify their class and color properties using D3's method chaining. This is a fundamental pattern for D3 selections and styling.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/d3js-specialist-llms-context-20250406.md#2025-04-13_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nd3.selectAll(\"p\")\n    .attr(\"class\", \"graf\")\n    .style(\"color\", \"red\");\n```\n\n----------------------------------------\n\nTITLE: Common Query Parameters Class\nDESCRIPTION: Defines a reusable class for common query parameters including search query, skip, and limit functionality.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/fastapi-developer-llms-context-20250406.md#2025-04-13_snippet_44\n\nLANGUAGE: python\nCODE:\n```\nclass CommonQueryParams:\n    def __init__(self, q: str | None = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit\n```\n\n----------------------------------------\n\nTITLE: HeroService with Logger Implementation\nDESCRIPTION: Shows implementation of a service that uses dependency injection to utilize a Logger service.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/angular-developer-llms-context-20250406.md#2025-04-13_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\nimport { inject, Injectable } from '@angular/core';\nimport { HEROES } from './mock-heroes';\nimport { Logger } from '../logger.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class HeroService {\n  private logger = inject(Logger);\n\n  getHeroes() {\n    this.logger.log('Getting heroes.');\n    return HEROES;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Exception Handling Block\nDESCRIPTION: Template for implementing error handling in PL/pgSQL procedures\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/033-database/neon-db-specialist/033-work-db-neon-db-specialist.mode.md#2025-04-13_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nEXCEPTION\n```\n\n----------------------------------------\n\nTITLE: Implementing ButtonGroup with Multiple Buttons in React\nDESCRIPTION: Demonstrates how to group related buttons using the ButtonGroup component from Material UI. The example shows three buttons as immediate children of the ButtonGroup component.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/material-ui-specialist-llms-context-20250406.md#2025-04-13_snippet_32\n\nLANGUAGE: jsx\nCODE:\n```\n<ButtonGroup>\\n  <Button>One</Button>\\n  <Button>Two</Button>\\n  <Button>Three</Button>\\n</ButtonGroup>\n```\n\n----------------------------------------\n\nTITLE: Template Variables with ViewChild Queries Angular\nDESCRIPTION: Shows usage of template reference variables with ViewChild decorator for element querying.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/angular-developer-llms-context-20250406.md#2025-04-13_snippet_14\n\nLANGUAGE: angular-html\nCODE:\n```\n<input #description value=\"Original description\">\n```\n\nLANGUAGE: angular-ts\nCODE:\n```\n@Component({\n  /* ... */,\n  template: `<input #description value=\"Original description\">`,\n})\nexport class AppComponent {\n  // Query for the input element based on the template variable name.\n  @ViewChild('description') input: ElementRef | undefined;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a ForeignKey with Cross-Application Reference in Django\nDESCRIPTION: Demonstrates how to create a ForeignKey relationship that references a model in a different application using the app_label.ModelName syntax. This is useful for referencing models outside the current app.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/django-developer-llms-context-20250406.md#2025-04-13_snippet_39\n\nLANGUAGE: python\nCODE:\n```\nclass Car(models.Model):\n    manufacturer = models.ForeignKey(\n        \"thirdpartyapp.Manufacturer\",\n        on_delete=models.CASCADE,\n    )\n```\n\n----------------------------------------\n\nTITLE: Required Input Declaration Angular\nDESCRIPTION: Demonstrates declaring required inputs using input.required with explicit type specification.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/angular-developer-llms-context-20250406.md#2025-04-13_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n@Component({/*...*/})\nexport class CustomSlider {\n  // Declare a required input named value. Returns an `InputSignal<number>`.\n  value = input.required<number>();\n}\n```\n\n----------------------------------------\n\nTITLE: Array Type Declarations in TypeScript\nDESCRIPTION: Demonstrates two ways to declare array types: using square bracket notation and using the generic Array type.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/typescript-specialist-llms-context-20250406.md#2025-04-13_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nlet list: number[] = [1, 2, 3];\n```\n\nLANGUAGE: typescript\nCODE:\n```\nlet list: Array<number> = [1, 2, 3];\n```\n\n----------------------------------------\n\nTITLE: Defining a Django Model with Enumeration Choices\nDESCRIPTION: Example of defining a Runner model with a medal field using enumeration choices. This demonstrates how to create a model with predefined choices for a field.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/django-developer-llms-context-20250406.md#2025-04-13_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\n\n\nclass Runner(models.Model):\n    MedalType = models.TextChoices(\"MedalType\", \"GOLD SILVER BRONZE\")\n    name = models.CharField(max_length=60)\n    medal = models.CharField(blank=True, choices=MedalType, max_length=10)\n```\n\n----------------------------------------\n\nTITLE: TypeScript Class Implementation\nDESCRIPTION: Example of TypeScript class declaration with constructor and methods.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/condensed_indices/typescript-specialist-condensed-index.md#2025-04-13_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass Greeter { constructor(message: string) {} greet() {} }\n```\n\n----------------------------------------\n\nTITLE: Form Validation Action Implementation in Remix TSX\nDESCRIPTION: Implements server-side form validation for email and password fields with error handling and success redirection logic.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/remix-developer-llms-context-20250406.md#2025-04-13_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { ActionFunctionArgs } from \"@remix-run/node\";\nimport { json, redirect } from \"@remix-run/node\";\nimport { Form } from \"@remix-run/react\";\n\nexport default function Signup() {\n  // omitted for brevity\n}\n\nexport async function action({\n  request,\n}: ActionFunctionArgs) {\n  const formData = await request.formData();\n  const email = String(formData.get(\"email\"));\n  const password = String(formData.get(\"password\"));\n\n  const errors = {};\n\n  if (!email.includes(\"@\")) {\n    errors.email = \"Invalid email address\";\n  }\n\n  if (password.length < 12) {\n    errors.password =\n      \"Password should be at least 12 characters\";\n  }\n\n  if (Object.keys(errors).length > 0) {\n    return json({ errors });\n  }\n\n  return redirect(\"/dashboard\");\n}\n```\n\n----------------------------------------\n\nTITLE: Context Consumption with useContext\nDESCRIPTION: Using useContext hook to access theme context\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/react-specialist-llms-context-20250406.md#2025-04-13_snippet_49\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Button() {\n  const theme = useContext(ThemeContext);\n  // ...\n```\n\n----------------------------------------\n\nTITLE: Creating an HTML Table from a Matrix using D3.js Data Joining\nDESCRIPTION: Demonstrates how to use selection.data() and selection.join() methods to create an HTML table from a matrix of numbers. It shows the process of binding data to DOM elements and creating nested table structures based on the data.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/d3js-specialist-llms-context-20250406.md#2025-04-13_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst matrix = [\n  [11975,  5871, 8916, 2868],\n  [ 1951, 10048, 2060, 6171],\n  [ 8010, 16145, 8090, 8045],\n  [ 1013,   990,  940, 6907]\n];\n\nd3.select(\"body\")\n  .append(\"table\")\n  .selectAll(\"tr\")\n  .data(matrix)\n  .join(\"tr\")\n  .selectAll(\"td\")\n  .data(d => d)\n  .join(\"td\")\n    .text(d => d);\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Customer-Payment JOIN Query\nDESCRIPTION: Demonstrates INNER JOIN between customer and payment tables to combine customer information with their payment details.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/neon-db-specialist-llms-context-20250406.md#2025-04-13_snippet_25\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  customer.customer_id,\n  customer.first_name,\n  customer.last_name,\n  payment.amount,\n  payment.payment_date\nFROM\n  customer\n  INNER JOIN payment ON payment.customer_id = customer.customer_id\nORDER BY\n  payment.payment_date;\n```\n\n----------------------------------------\n\nTITLE: Creating an Index with Aggregate Metric Double Field in Elasticsearch\nDESCRIPTION: This snippet demonstrates how to create an Elasticsearch index with an aggregate_metric_double field. The field is configured with min, max, sum, and value_count metrics, with max set as the default metric.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/elasticsearch-specialist-llms-context-20250406.md#2025-04-13_snippet_10\n\nLANGUAGE: console\nCODE:\n```\nPUT my-index\n{\n  \"mappings\": {\n    \"properties\": {\n      \"my-agg-metric-field\": {\n        \"type\": \"aggregate_metric_double\",\n        \"metrics\": [ \"min\", \"max\", \"sum\", \"value_count\" ],\n        \"default_metric\": \"max\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Grid-based Staggering in Anime.js\nDESCRIPTION: Advanced example of staggering using a grid layout with specified dimensions and starting point.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/031-frontend/animejs-specialist/031_animejs-specialist.mode.md#2025-04-13_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ndelay: anime.stagger(100, { grid: [10, 5], from: 'center' })\n```\n\n----------------------------------------\n\nTITLE: Creating IVFFlat Index for Vector Inner Product in PostgreSQL\nDESCRIPTION: SQL command to create an IVFFlat index using the vector_ip_ops operator class for inner product distance calculations. The index is created on a vector column with 100 lists for improved search performance.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/supabase-developer-llms-context-20250406.md#2025-04-13_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\ncreate index on items using ivfflat (column_name vector_ip_ops) with (lists = 100);\n```\n\n----------------------------------------\n\nTITLE: React Root Creation and Rendering\nDESCRIPTION: Basic setup for creating React root and rendering app component\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/react-specialist-llms-context-20250406.md#2025-04-13_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createRoot } from 'react-dom/client';\n\nconst domNode = document.getElementById('root');\nconst root = createRoot(domNode);\nroot.render(<App />);\n```\n\n----------------------------------------\n\nTITLE: Creating Simple Name Form in Django\nDESCRIPTION: Defines a basic form class with a single field for collecting user names.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/django-developer-llms-context-20250406.md#2025-04-13_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom django import forms\n\nclass NameForm(forms.Form):\n    your_name = forms.CharField(label=\"Your name\", max_length=100)\n```\n\n----------------------------------------\n\nTITLE: Data Fetching and Rendering Pattern\nDESCRIPTION: Demonstrates API data fetching and rendering in both HTML and component props\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/astro-developer-llms-context-20250406.md#2025-04-13_snippet_10\n\nLANGUAGE: astro\nCODE:\n```\n---\n// src/components/User.astro\nimport Contact from \"../components/Contact.jsx\";\nimport Location from \"../components/Location.astro\";\n\nconst response = await fetch(\"https://randomuser.me/api/\");\nconst data = await response.json();\nconst randomUser = data.results[0];\n---\n<!-- Data fetched at build can be rendered in HTML -->\n<h1>User</h1>\n<h2>{randomUser.name.first} {randomUser.name.last}</h2>\n\n<!-- Data fetched at build can be passed to components as props -->\n<Contact client:load email={randomUser.email} />\n<Location city={randomUser.location.city} />\n```\n\n----------------------------------------\n\nTITLE: HMR API Usage Guard\nDESCRIPTION: Implementation of a conditional guard for HMR API usage that enables tree-shaking in production.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/vite-specialist-llms-context-20250406.md#2025-04-13_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\nif (import.meta.hot) {\n  // HMR code\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Spring Physics Easing in Anime.js\nDESCRIPTION: Example of using spring physics for easing, specifying tension, friction, and other parameters.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/031-frontend/animejs-specialist/031_animejs-specialist.mode.md#2025-04-13_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\neasing: 'spring(1, 80, 10, 0)'\n```\n\n----------------------------------------\n\nTITLE: Grouping Data with D3.js group() Function\nDESCRIPTION: Demonstrates how to use d3.group() to group an iterable of values into an InternMap. The example shows grouping a penguins dataset by species and accessing grouped data.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/d3js-specialist-llms-context-20250406.md#2025-04-13_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nconst species = d3.group(penguins, (d) => d.species);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nspecies.get(\"Adelie\") // Array(152)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst speciesSex = d3.group(penguins, (d) => d.species, (d) => d.sex)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nspeciesSex.get(\"Adelie\").get(\"FEMALE\") // Array(73)\n```\n\n----------------------------------------\n\nTITLE: Enabling Server-Side Rendering Hydration\nDESCRIPTION: Demonstrates how to enable server-side rendering hydration in an Angular application, which improves initial load performance and SEO capabilities.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/031-frontend/angular-developer/031_angular-developer.mode.md#2025-04-13_snippet_15\n\nLANGUAGE: TypeScript\nCODE:\n```\nprovideClientHydration()\n```\n\n----------------------------------------\n\nTITLE: Installing Vue.js with Package Managers\nDESCRIPTION: Shows different methods to create a new Vue.js project using Yarn and Bun package managers.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/vuejs-developer-llms-context-20250406.md#2025-04-13_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\n$ yarn dlx create-vue@latest\n```\n\nLANGUAGE: sh\nCODE:\n```\n$ bun create vue@latest\n```\n\n----------------------------------------\n\nTITLE: Creating Row-Level Security Policy for User-Specific Data Access\nDESCRIPTION: SQL command to create a row-level security (RLS) policy that restricts data access to the authenticated user. This is a common pattern for ensuring users can only access their own data.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/condensed_indices/supabase-developer-condensed-index.md#2025-04-13_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\ncreate policy \"name\" on table for {SELECT|INSERT|UPDATE|DELETE} using ( (select auth.uid()) = user_id )\n```\n\n----------------------------------------\n\nTITLE: Configuring Joy UI and Material UI Providers in React\nDESCRIPTION: Sets up the necessary providers to use Joy UI and Material UI together. Uses ThemeProvider from Material UI as the outer wrapper and CssVarsProvider from Joy UI as the inner provider with proper theme separation.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/material-ui-specialist-llms-context-20250406.md#2025-04-13_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  createTheme,\n  ThemeProvider,\n  THEME_ID as MATERIAL_THEME_ID,\n} from '@mui/material/styles';\nimport { CssVarsProvider as JoyCssVarsProvider } from '@mui/joy/styles';\nimport CssBaseline from '@mui/material/CssBaseline';\n\nconst materialTheme = createTheme();\n\nexport default function App() {\n  return (\n    <ThemeProvider theme={{ [MATERIAL_THEME_ID]: materialTheme }}>\n      <JoyCssVarsProvider>\n        <CssBaseline enableColorScheme />\n        ...Material UI and Joy UI components\n      </JoyCssVarsProvider>\n    </ThemeProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Adding CSRF Protection to Django View\nDESCRIPTION: Demonstrates how to apply CSRF protection to a specific view using the csrf_protect decorator.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/django-developer-llms-context-20250406.md#2025-04-13_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom django.shortcuts import render\nfrom django.views.decorators.csrf import csrf_protect\n\n\n@csrf_protect\ndef my_view(request):\n    c = {}\n    # ...\n    return render(request, \"a_template.html\", c)\n```\n\n----------------------------------------\n\nTITLE: Tuple Types in TypeScript\nDESCRIPTION: Shows how to define and use tuple types for fixed-length arrays with specific types at each index.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/typescript-specialist-llms-context-20250406.md#2025-04-13_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ntype StringNumberPair = [string, number];\n\nfunction doSomething(pair: [string, number]) {\n  const a = pair[0];\n  const b = pair[1];\n  // ...\n}\n\ndoSomething([\"hello\", 42]);\n```\n\n----------------------------------------\n\nTITLE: Basic Prefix Query in Elasticsearch\nDESCRIPTION: Example of a basic prefix query that searches for documents where the user.id field contains terms beginning with 'ki'. Shows the standard query structure with field and value parameters.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/elasticsearch-specialist-llms-context-20250406.md#2025-04-13_snippet_30\n\nLANGUAGE: console\nCODE:\n```\nGET /_search\n{\n  \"query\": {\n    \"prefix\": {\n      \"user.id\": {\n        \"value\": \"ki\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Performance-Optimized Option Component\nDESCRIPTION: Example of creating a StableOption component using useOptionContextStabilizer for improved performance with many options.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/material-ui-specialist-llms-context-20250406.md#2025-04-13_snippet_29\n\nLANGUAGE: tsx\nCODE:\n```\nconst StableOption = React.forwardRef(function StableOption<OptionValue>(\n  props: OptionProps<OptionValue>,\n  ref: React.ForwardedRef<Element>,\n) {\n  const { contextValue } = useOptionContextStabilizer(props.value);\n\n  return (\n    <ListContext.Provider value={contextValue}>\n      <Option {...props} ref={ref} />\n    </ListContext.Provider>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Delayed Promise Resolution in JavaScript\nDESCRIPTION: This function wraps a promise and adds a fixed delay to its resolution, useful for demonstrating loading states in user interfaces.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/react-specialist-llms-context-20250406.md#2025-04-13_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nfunction delayForDemo(promise) {\n  return new Promise(resolve => {\n    setTimeout(resolve, 2000);\n  }).then(() => promise);\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Stacked Bar Chart with D3.js\nDESCRIPTION: Shows how to append a group element that will contain the stacked bars in a stacked bar chart. This is a fragment of a larger implementation that would position and style the bars based on stacked data.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/d3js-specialist-llms-context-20250406.md#2025-04-13_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nsvg.append(\"g\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Production Error Handling in Vue\nDESCRIPTION: This snippet shows how to set up an app-level error handler in Vue for production use. It demonstrates creating a Vue app instance and configuring the errorHandler to report errors to tracking services.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/vuejs-developer-llms-context-20250406.md#2025-04-13_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue'\n\nconst app = createApp(...)\n\napp.config.errorHandler = (err, instance, info) => {\n  // report error to tracking services\n}\n```\n\n----------------------------------------\n\nTITLE: Importing createRoot from react-dom/client in React\nDESCRIPTION: This snippet shows how to import the createRoot function from the react-dom/client package. This function is used to create a root for rendering React components in a browser DOM node.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/react-specialist-llms-context-20250406.md#2025-04-13_snippet_26\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createRoot } from 'react-dom/client';\n```\n\n----------------------------------------\n\nTITLE: Backing up MongoDB Database Using mongodump\nDESCRIPTION: Simple command to create a backup of a MongoDB database running on localhost port 27017. The backup is stored in the current directory under the 'dump/' folder.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/mongodb-specialist-llms-context-20250406.md#2025-04-13_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmongodump\n```\n\n----------------------------------------\n\nTITLE: Custom Chat Room Hook Implementation\nDESCRIPTION: Custom hook that manages chat room connection lifecycle with cleanup\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/react-specialist-llms-context-20250406.md#2025-04-13_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\nfunction useChatRoom({ serverUrl, roomId }) {\n  useEffect(() => {\n    const options = {\n      serverUrl: serverUrl,\n      roomId: roomId\n    };\n    const connection = createConnection(options);\n    connection.connect();\n    connection.on('message', (msg) => {\n      showNotification('New message: ' + msg);\n    });\n    return () => connection.disconnect();\n  }, [roomId, serverUrl]);\n}\n```\n\n----------------------------------------\n\nTITLE: MongoDB Update Operations\nDESCRIPTION: Method for updating multiple documents with filter criteria and update operators.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/033-database/mongodb-specialist/033-work-db-mongodb-specialist.mode.md#2025-04-13_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ndb.collection.updateMany(<filter>, <update>, <options>)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Current MongoDB Operations\nDESCRIPTION: Uses the $currentOp aggregation stage to retrieve information about active operations and cursors in MongoDB. This helps identify performance issues and monitor database activity.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/mongodb-specialist-llms-context-20250406.md#2025-04-13_snippet_1\n\nLANGUAGE: mongodb\nCODE:\n```\n$currentOp\n```\n\n----------------------------------------\n\nTITLE: Responsive Navbar Implementation\nDESCRIPTION: Complete responsive navbar implementation with brand, navigation links, and search form.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/bootstrap-specialist-llms-context-20250406.md#2025-04-13_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<nav class=\"navbar navbar-expand-lg bg-body-tertiary\">\n  <div class=\"container-fluid\">\n    <a class=\"navbar-brand\" href=\"#\">Navbar</a>\n    <button class=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n      <span class=\"navbar-toggler-icon\"></span>\n    </button>\n    <div class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n      <ul class=\"navbar-nav me-auto mb-2 mb-lg-0\">\n        <li class=\"nav-item\">\n          <a class=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\n        </li>\n        <li class=\"nav-item\">\n          <a class=\"nav-link\" href=\"#\">Link</a>\n        </li>\n      </ul>\n      <form class=\"d-flex\" role=\"search\">\n        <input class=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\">\n        <button class=\"btn btn-outline-success\" type=\"submit\">Search</button>\n      </form>\n    </div>\n  </div>\n</nav>\n```\n\n----------------------------------------\n\nTITLE: Basic Document Query Operation\nDESCRIPTION: Shows the basic syntax for querying documents with optional projection and query options.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/mongodb-specialist-llms-context-20250406.md#2025-04-13_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\ndb.collection.find( <query>, <projection>, <options> )\n```\n\n----------------------------------------\n\nTITLE: Using the TypeScript CLI (tsc) for Various Compilation Scenarios\nDESCRIPTION: Provides examples of using the TypeScript compiler CLI (tsc) for different compilation scenarios including project-based compilation, single file compilation, and using specific compiler options.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/typescript-specialist-llms-context-20250406.md#2025-04-13_snippet_52\n\nLANGUAGE: sh\nCODE:\n```\n# Run a compile based on a backwards look through the fs for a tsconfig.json\ntsc\n\n# Emit JS for just the index.ts with the compiler defaults\ntsc index.ts\n\n# Emit JS for any .ts files in the folder src, with the default settings\ntsc src/*.ts\n\n# Emit files referenced in with the compiler settings from tsconfig.production.json\ntsc --project tsconfig.production.json\n\n# Emit d.ts files for a js file with showing compiler options which are booleans\ntsc index.js --declaration --emitDeclarationOnly\n\n# Emit a single .js file from two files via compiler options which take string arguments\ntsc app.ts util.ts --target esnext --outfile index.js\n```\n\n----------------------------------------\n\nTITLE: Styling Stat Components with Material UI in JavaScript\nDESCRIPTION: Defines styled components for a Stat component using Material UI's styled API. Creates StatUnit with typography and color theming from the Material UI theme.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/material-ui-specialist-llms-context-20250406.md#2025-04-13_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nconst StatUnit = styled('div', {\n  name: 'MuiStat',\n  slot: 'unit',\n})(({ theme }) => ({\n  ...theme.typography.body2,\n  color: theme.palette.text.secondary,\n}));\n```\n\n----------------------------------------\n\nTITLE: Configuring Range Field Mappings in Elasticsearch\nDESCRIPTION: This snippet demonstrates how to configure mappings for various range field types in Elasticsearch, including integer_range and date_range. It also shows how to index a document with range values.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/elasticsearch-specialist-llms-context-20250406.md#2025-04-13_snippet_27\n\nLANGUAGE: console\nCODE:\n```\nPUT range_index\n{\n  \"settings\": {\n    \"number_of_shards\": 2\n  },\n  \"mappings\": {\n    \"properties\": {\n      \"expected_attendees\": {\n        \"type\": \"integer_range\"\n      },\n      \"time_frame\": {\n        \"type\": \"date_range\",\n        \"format\": \"yyyy-MM-dd HH:mm:ss||yyyy-MM-dd||epoch_millis\"\n      }\n    }\n  }\n}\n\nPUT range_index/_doc/1?refresh\n{\n  \"expected_attendees\" : {\n    \"gte\" : 10,\n    \"lt\" : 20\n  },\n  \"time_frame\" : {\n    \"gte\" : \"2015-10-31 12:00:00\",\n    \"lte\" : \"2015-11-01\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Next.js Page Component\nDESCRIPTION: Create a basic page component in Next.js using the app directory structure. This file defines the UI for a specific route.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/031-frontend/nextjs-developer/031-work-fe-nextjs-developer.mode.md#2025-04-13_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// app/page.tsx\nexport default function Page() {\n  return <h1>Hello, Next.js!</h1>\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting DOM Elements with D3\nDESCRIPTION: Demonstrates how to select DOM elements using D3's select and selectAll methods with CSS selectors.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/031-frontend/d3js-specialist/031-work-fe-d3js-specialist.mode.md#2025-04-13_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nd3.select(selector)\nd3.selectAll(selector)\n```\n\n----------------------------------------\n\nTITLE: Creating a Mouse Position Tracking Composable in Vue\nDESCRIPTION: This snippet defines a reusable composable function that encapsulates mouse tracking logic using Vue's Composition API. It uses refs to track x and y coordinates and hooks for lifecycle management.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/vuejs-developer-llms-context-20250406.md#2025-04-13_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\n// mouse.js\nimport { ref, onMounted, onUnmounted } from 'vue'\n\nexport function useMouse() {\n  const x = ref(0)\n  const y = ref(0)\n\n  function update(event) {\n    x.value = event.pageX\n    y.value = event.pageY\n  }\n\n  onMounted(() => window.addEventListener('mousemove', update))\n  onUnmounted(() => window.removeEventListener('mousemove', update))\n\n  return { x, y }\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to SQLite Database in Flask\nDESCRIPTION: Defines functions to connect to a SQLite database and close the connection. Uses Flask's g object for request-scoped data storage and current_app for accessing the application context.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/flask-developer-llms-context-20250406.md#2025-04-13_snippet_33\n\nLANGUAGE: python\nCODE:\n```\nimport sqlite3\nfrom datetime import datetime\n\nimport click\nfrom flask import current_app, g\n\n\ndef get_db():\n    if 'db' not in g:\n        g.db = sqlite3.connect(\n            current_app.config['DATABASE'],\n            detect_types=sqlite3.PARSE_DECLTYPES\n        )\n        g.db.row_factory = sqlite3.Row\n\n    return g.db\n\n\ndef close_db(e=None):\n    db = g.pop('db', None)\n\n    if db is not None:\n        db.close()\n```\n\n----------------------------------------\n\nTITLE: Querying Todos with Supabase Client Libraries\nDESCRIPTION: Examples of fetching all todos using Supabase client libraries in JavaScript, Dart, Python, and Swift. Each snippet selects all columns from the 'todos' table.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/supabase-developer-llms-context-20250406.md#2025-04-13_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nconst { data, error } = await supabase.from('todos').select()\n```\n\nLANGUAGE: dart\nCODE:\n```\nfinal data = await supabase.from('todos').select('*');\n```\n\nLANGUAGE: python\nCODE:\n```\nresponse = supabase.table('todos').select(\"*\").execute()\n```\n\nLANGUAGE: swift\nCODE:\n```\nlet response = try await supabase.from(\"todos\").select()\n```\n\n----------------------------------------\n\nTITLE: Button Variants\nDESCRIPTION: Implementation of various Bootstrap button styles and variants.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/bootstrap-specialist-llms-context-20250406.md#2025-04-13_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<button type=\"button\" class=\"btn btn-primary\">Primary</button>\n<button type=\"button\" class=\"btn btn-secondary\">Secondary</button>\n<button type=\"button\" class=\"btn btn-success\">Success</button>\n<button type=\"button\" class=\"btn btn-danger\">Danger</button>\n<button type=\"button\" class=\"btn btn-warning\">Warning</button>\n<button type=\"button\" class=\"btn btn-info\">Info</button>\n<button type=\"button\" class=\"btn btn-light\">Light</button>\n<button type=\"button\" class=\"btn btn-dark\">Dark</button>\n<button type=\"button\" class=\"btn btn-link\">Link</button>\n```\n\n----------------------------------------\n\nTITLE: Using v-model in Vue.js\nDESCRIPTION: Demonstrates the usage of v-model for two-way data binding on form inputs and components.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/condensed_indices/vuejs-developer-condensed-index.md#2025-04-13_snippet_5\n\nLANGUAGE: html\nCODE:\n```\nv-model\ndefineModel()\n```\n\n----------------------------------------\n\nTITLE: Creating Vector Search Index in Elasticsearch\nDESCRIPTION: Creates an index with dense vector mapping for image vectors, including configuration for dimensions, similarity metric, and additional fields.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/elasticsearch-specialist-llms-context-20250406.md#2025-04-13_snippet_13\n\nLANGUAGE: console\nCODE:\n```\nPUT my-image-index\n{\n  \"mappings\": {\n    \"properties\": {\n       \"image-vector\": {\n        \"type\": \"dense_vector\",\n        \"dims\": 3,\n        \"index\": true,\n        \"similarity\": \"l2_norm\"\n      },\n      \"file-type\": {\n        \"type\": \"keyword\"\n      },\n      \"title\": {\n        \"type\": \"text\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic useRef Hook Usage in React\nDESCRIPTION: Provides a basic example of declaring and using a ref with the useRef Hook. It returns an object with a mutable current property that persists across renders.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/react-specialist-llms-context-20250406.md#2025-04-13_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst ref = useRef(initialValue)\n```\n\n----------------------------------------\n\nTITLE: Server Action Definition in Astro\nDESCRIPTION: Example of defining type-safe server actions using defineAction with input validation\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/031-frontend/astro-developer/031-work-fe-astro-developer.mode.md#2025-04-13_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { defineAction } from 'astro:actions';\nimport { z } from 'zod';\n\nexport const myAction = defineAction({\n  schema: z.object({\n    name: z.string()\n  }),\n  async handler({ name }) {\n    // Action logic here\n    return { success: true };\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating ModeToggle Component for Theme Switching in React TSX\nDESCRIPTION: This code defines a ModeToggle component that allows users to switch between light, dark, and system themes. It uses a dropdown menu to present theme options and updates the theme using the useTheme hook.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/shadcn-ui-specialist-llms-context-20250406.md#2025-04-13_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Moon, Sun } from \"lucide-react\"\n\nimport { Button } from \"@/components/ui/button\"\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\nimport { useTheme } from \"@/components/theme-provider\"\n\nexport function ModeToggle() {\n  const { setTheme } = useTheme()\n\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button variant=\"outline\" size=\"icon\">\n          <Sun className=\"h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0\" />\n          <Moon className=\"absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100\" />\n          <span className=\"sr-only\">Toggle theme</span>\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align=\"end\">\n        <DropdownMenuItem onClick={() => setTheme(\"light\")}>\n          Light\n        </DropdownMenuItem>\n        <DropdownMenuItem onClick={() => setTheme(\"dark\")}>\n          Dark\n        </DropdownMenuItem>\n        <DropdownMenuItem onClick={() => setTheme(\"system\")}>\n          System\n        </DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Storing Extension-Specific Data in Flask g Object\nDESCRIPTION: Shows two approaches to safely store extension-specific data in Flask's g object during a request: using a prefixed attribute name and using a namespace object.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/flask-developer-llms-context-20250406.md#2025-04-13_snippet_40\n\nLANGUAGE: python\nCODE:\n```\n# an internal prefix with the extension name\ng._hello_user_id = 2\n\n# or an internal prefix as a namespace\nfrom types import SimpleNamespace\ng._hello = SimpleNamespace()\ng._hello.user_id = 2\n```\n\n----------------------------------------\n\nTITLE: Demonstrating XSS Vulnerability in Django Templates\nDESCRIPTION: Shows how unsanitized template variables can lead to XSS vulnerabilities when used in style tags without proper quoting. This example highlights a case where Django's automatic escaping may not provide complete protection.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/django-developer-llms-context-20250406.md#2025-04-13_snippet_21\n\nLANGUAGE: text\nCODE:\n```\n<style class={{ var }}>...</style>\n```\n\n----------------------------------------\n\nTITLE: Vue Attribute Binding\nDESCRIPTION: Shows how to bind dynamic values to HTML attributes using v-bind directive.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/vuejs-developer-llms-context-20250406.md#2025-04-13_snippet_6\n\nLANGUAGE: vue-html\nCODE:\n```\n<div v-bind:id=\"dynamicId\"></div>\n```\n\n----------------------------------------\n\nTITLE: Running Three.js E2E Tests and Screenshots Generation\nDESCRIPTION: Shell commands for generating new screenshots and running end-to-end tests for Three.js examples. The commands support testing specific examples by name or running tests across all available examples in the codebase.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/threejs-specialist-llms-context-20250406.md#2025-04-13_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n# generate new screenshots for exact examples\nnpm run make-screenshot <example1_name> ... <exampleN_name>\n\n# check exact examples\nnpm run test-e2e <example1_name> ... <exampleN_name>\n```\n\n----------------------------------------\n\nTITLE: Registering Lifecycle Hook with Vue 3 Composition API\nDESCRIPTION: This snippet shows how to register an onMounted lifecycle hook using Vue 3's Composition API within a script setup block. The hook logs a message when the component is mounted to the DOM.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/vuejs-developer-llms-context-20250406.md#2025-04-13_snippet_32\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { onMounted } from 'vue'\n\nonMounted(() => {\n  console.log(`the component is now mounted.`)\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Object Types in TypeScript\nDESCRIPTION: Demonstrates defining and using object types with properties and optional fields in function parameters.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/typescript-specialist-llms-context-20250406.md#2025-04-13_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// The parameter's type annotation is an object type\nfunction printCoord(pt: { x: number; y: number }) {\n  console.log(\"The coordinate's x value is \" + pt.x);\n  console.log(\"The coordinate's y value is \" + pt.y);\n}\nprintCoord({ x: 3, y: 7 });\n```\n\n----------------------------------------\n\nTITLE: Basic Significant Terms Query in Elasticsearch\nDESCRIPTION: Example of using significant terms aggregation to analyze crime types for British Transport Police.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/elasticsearch-specialist-llms-context-20250406.md#2025-04-13_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nGET /_search\n{\n  \"query\": {\n    \"terms\": { \"force\": [ \"British Transport Police\" ] }\n  },\n  \"aggregations\": {\n    \"significant_crime_types\": {\n      \"significant_terms\": { \"field\": \"crime_type\" }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Timeline Example with add() and sync() in Anime.js\nDESCRIPTION: A comprehensive example showing how to import Anime.js functions, create an animation, then add it to a timeline using sync(). Also demonstrates adding additional animations directly with add() and chaining timeline methods.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/animejs-specialist-llms-context-20250406.md#2025-04-13_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createTimeline, animate } from 'animejs';\n\nconst circleAnimation = animate('.circle', {\n  x: '15rem'\n});\n\nconst tl = createTimeline()\n.sync(circleAnimation)\n.add('.triangle', {\n  x: '15rem',\n  rotate: '1turn',\n  duration: 500,\n  alternate: true,\n  loop: 2,\n})\n.add('.square', {\n  x: '15rem',\n});\n```\n\n----------------------------------------\n\nTITLE: Applying Login Required Decorator to Flask Route\nDESCRIPTION: This example demonstrates how to apply the login_required decorator to a Flask route, ensuring that only authenticated users can access the secret_page view.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/flask-developer-llms-context-20250406.md#2025-04-13_snippet_26\n\nLANGUAGE: Python\nCODE:\n```\n@app.route('/secret_page')\n@login_required\ndef secret_page():\n    pass\n```\n\n----------------------------------------\n\nTITLE: Typing Reactive Objects in Vue 3 with TypeScript\nDESCRIPTION: Shows two approaches for typing reactive objects in Vue 3: using type inference and explicit interface typing. Demonstrates proper TypeScript integration with Vue's reactive system.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/vuejs-developer-llms-context-20250406.md#2025-04-13_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\nimport { reactive } from 'vue'\n\n// inferred type: { title: string }\nconst book = reactive({ title: 'Vue 3 Guide' })\n\ninterface Book {\n  title: string\n  year?: number\n}\n\nconst book: Book = reactive({ title: 'Vue 3 Guide' })\n```\n\n----------------------------------------\n\nTITLE: Text Search in Supabase JavaScript Client\nDESCRIPTION: JavaScript client method for performing full-text search operations in Supabase, leveraging PostgreSQL's text search capabilities.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/032-backend/supabase-developer/032-work-be-supabase-developer.mode.md#2025-04-13_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\n.textSearch('column', 'query', { type?, config? })\n```\n\n----------------------------------------\n\nTITLE: Redirects in SvelteKit Load Functions\nDESCRIPTION: Demonstrates how to perform redirects in load functions using the redirect helper from @sveltejs/kit. This example checks for user authentication and redirects to the login page if not authenticated.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/sveltekit-llms-context-20250406.md#2025-04-13_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\n/// file: src/routes/user/+layout.server.js\nimport { redirect } from '@sveltejs/kit';\n\n/** @type {import('./$types').LayoutServerLoad} */\nexport function load({ locals }) {\n\tif (!locals.user) {\n\t\tredirect(307, '/login');\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Querying MongoDB with $in Operator\nDESCRIPTION: Returns documents from the 'bios' collection where the _id field equals either 5 or a specific ObjectId. Demonstrates the usage of the $in operator for matching multiple possible values.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/mongodb-specialist-llms-context-20250406.md#2025-04-13_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndb.bios.find(\n   { _id: { $in: [ 5, ObjectId(\"507c35dd8fada716c89d0013\") ] } }\n)\n```\n\n----------------------------------------\n\nTITLE: Querying Outbound Connections with CIDR Filtering in ESQL\nDESCRIPTION: ESQL query that identifies users with high numbers of outbound connections to non-private IP addresses. Includes CIDR filtering, LDAP enrichment, and conditional evaluation for follow-up flagging.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/elasticsearch-specialist-llms-context-20250406.md#2025-04-13_snippet_17\n\nLANGUAGE: esql\nCODE:\n```\nFROM logs-*\n| WHERE NOT CIDR_MATCH(destination.ip, \"10.0.0.0/8\", \"172.16.0.0/12\", \"192.168.0.0/16\")\n| STATS destcount = COUNT(destination.ip) BY user.name, host.name\n| ENRICH ldap_lookup_new ON user.name\n| WHERE group.name IS NOT NULL\n| EVAL follow_up = CASE(destcount >= 100, \"true\",\"false\")\n| SORT destcount DESC\n| KEEP destcount, host.name, user.name, group.name, follow_up\n```\n\n----------------------------------------\n\nTITLE: Loading Flask Configuration from Python File and Environment\nDESCRIPTION: Demonstrates loading Flask application configuration from a Python module using from_object and from an environment variable using from_envvar. This allows for flexible configuration management across environments.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/flask-developer-llms-context-20250406.md#2025-04-13_snippet_11\n\nLANGUAGE: python\nCODE:\n```\napp = Flask(__name__)\napp.config.from_object('yourapplication.default_settings')\napp.config.from_envvar('YOURAPPLICATION_SETTINGS')\n```\n\n----------------------------------------\n\nTITLE: Firebase CLI Commands\nDESCRIPTION: Common Firebase CLI commands for project initialization, local development, and deployment.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/032-backend/firebase-developer/032-work-be-firebase-developer.mode.md#2025-04-13_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# Initialize Firebase project\nfirebase init\n\n# Start local emulators\nfirebase emulators:start\n\n# Deploy to Firebase\nfirebase deploy\n\n# Deploy only specific services\nfirebase deploy --only hosting,functions\n```\n\n----------------------------------------\n\nTITLE: Neon API Authentication\nDESCRIPTION: Example of authenticating with Neon's REST API using curl and bearer token\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/033-database/neon-db-specialist/033-work-db-neon-db-specialist.mode.md#2025-04-13_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\ncurl -X GET \"https://console.neon.tech/api/v2/projects\" \\\n  -H \"Authorization: Bearer $NEON_API_KEY\"\n```\n\n----------------------------------------\n\nTITLE: Error Handling in SvelteKit Load Functions\nDESCRIPTION: Shows how to handle errors in load functions using the error helper from @sveltejs/kit. This example demonstrates checking user authentication and authorization in a layout server load function.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/sveltekit-llms-context-20250406.md#2025-04-13_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n/// file: src/routes/admin/+layout.server.js\nimport { error } from '@sveltejs/kit';\n\n/** @type {import('./$types').LayoutServerLoad} */\nexport function load({ locals }) {\n\tif (!locals.user) {\n\t\terror(401, 'not logged in');\n\t}\n\n\tif (!locals.user.isAdmin) {\n\t\terror(403, 'not an admin');\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Streaming with Suspense in Next.js\nDESCRIPTION: This snippet shows how to implement streaming using React's Suspense component in a Next.js page. It allows for granular control over which parts of the page are streamed, improving initial load time and user experience.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/nextjs-developer-llms-context-20250406.md#2025-04-13_snippet_24\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Suspense } from 'react'\nimport BlogList from '@/components/BlogList'\nimport BlogListSkeleton from '@/components/BlogListSkeleton'\n\nexport default function BlogPage() {\n  return (\n    <div>\n      {/* This content will be sent to the client immediately */}\n      <header>\n        <h1>Welcome to the Blog</h1>\n        <p>Read the latest posts below.</p>\n      </header>\n      <main>\n        {/* Any content wrapped in a <Suspense> boundary will be streamed */}\n        <Suspense fallback={<BlogListSkeleton />}>\n          <BlogList />\n        </Suspense>\n      </main>\n    </div>\n  )\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Suspense } from 'react'\nimport BlogList from '@/components/BlogList'\nimport BlogListSkeleton from '@/components/BlogListSkeleton'\n\nexport default function BlogPage() {\n  return (\n    <div>\n      {/* This content will be sent to the client immediately */}\n      <header>\n        <h1>Welcome to the Blog</h1>\n        <p>Read the latest posts below.</p>\n      </header>\n      <main>\n        {/* Any content wrapped in a <Suspense> boundary will be streamed */}\n        <Suspense fallback={<BlogListSkeleton />}>\n          <BlogList />\n        </Suspense>\n      </main>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Library Build Configuration in Vite\nDESCRIPTION: Configuration for building a library with defined entry points and external dependencies handling.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/vite-specialist-llms-context-20250406.md#2025-04-13_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nimport { dirname, resolve } from 'node:path'\nimport { fileURLToPath } from 'node:url'\nimport { defineConfig } from 'vite'\n\nconst __dirname = dirname(fileURLToPath(import.meta.url))\n\nexport default defineConfig({\n  build: {\n    lib: {\n      entry: resolve(__dirname, 'lib/main.js'),\n      name: 'MyLib',\n      fileName: 'my-lib',\n    },\n    rollupOptions: {\n      external: ['vue'],\n      output: {\n        globals: {\n          vue: 'Vue',\n        },\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Custom Express Server Integration with SvelteKit\nDESCRIPTION: Example of creating a custom server using Express with SvelteKit's handler, including a separate healthcheck endpoint. This setup allows for additional server-side logic alongside the SvelteKit application.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/sveltekit-llms-context-20250406.md#2025-04-13_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nimport { handler } from './build/handler.js';\nimport express from 'express';\n\nconst app = express();\n\n// add a route that lives separately from the SvelteKit app\napp.get('/healthcheck', (req, res) => {\n\tres.end('ok');\n});\n\n// let SvelteKit handle everything else, including serving prerendered pages and static assets\napp.use(handler);\n\napp.listen(3000, () => {\n\tconsole.log('listening on port 3000');\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring registry.json for shadcn-ui Component Registry in JSON\nDESCRIPTION: Create a registry.json file in the root of your project to define the registry schema and items. This file is required when using the shadcn CLI to build your registry.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/shadcn-ui-specialist-llms-context-20250406.md#2025-04-13_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://ui.shadcn.com/schema/registry.json\",\n  \"name\": \"acme\",\n  \"homepage\": \"https://acme.com\",\n  \"items\": [\n    // ...\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Markdown Content in Astro Components\nDESCRIPTION: Shows how to import and display Markdown content in Astro components. The example demonstrates accessing frontmatter metadata and listing multiple Markdown posts using dynamic file imports.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/astro-developer-llms-context-20250406.md#2025-04-13_snippet_30\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: 'The greatest post of all time'\nauthor: 'Ben'\n---\n\nHere is my _great_ post!\n```\n\nLANGUAGE: astro\nCODE:\n```\n---\nimport * as greatPost from './posts/great-post.md';\nconst posts = Object.values(import.meta.glob('./posts/*.md', { eager: true }));\n---\n\n<p>{greatPost.frontmatter.title}</p>\n<p>Written by: {greatPost.frontmatter.author}</p>\n\n<p>Post Archive:</p>\n<ul>\n  {posts.map(post => <li><a href={post.url}>{post.frontmatter.title}</a></li>)}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Creating an Index to Improve RLS Performance in PostgreSQL\nDESCRIPTION: SQL command to create a B-tree index on a user_id column to improve Row Level Security (RLS) performance when policies frequently filter by user ID.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/supabase-developer-llms-context-20250406.md#2025-04-13_snippet_16\n\nLANGUAGE: sql\nCODE:\n```\ncreate index userid\non test_table\nusing btree (user_id);\n```\n\n----------------------------------------\n\nTITLE: Customizing Model Save Method in Django\nDESCRIPTION: Shows how to extend model save behavior by overriding the save() method with custom logic.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/django-developer-llms-context-20250406.md#2025-04-13_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\n\n\nclass Blog(models.Model):\n    name = models.CharField(max_length=100)\n    tagline = models.TextField()\n\n    def save(self, **kwargs):\n        do_something()\n        super().save(**kwargs)  # Call the \"real\" save() method.\n        do_something_else()\n```\n\n----------------------------------------\n\nTITLE: Authentication with Supabase JavaScript Client\nDESCRIPTION: JavaScript client methods for user authentication in Supabase, including sign-in with various providers, user registration, session retrieval, and auth state change listeners.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/condensed_indices/supabase-developer-condensed-index.md#2025-04-13_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nsupabase.auth.signInWith...({ provider?, email?, password?, phone?, options? })\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nsupabase.auth.signUp({ email?, password?, phone?, options? })\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nsupabase.auth.getSession() / supabase.auth.getUser()\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nsupabase.auth.onAuthStateChange((event, session) => ...)\n```\n\n----------------------------------------\n\nTITLE: Vue 3 Component with Script Setup\nDESCRIPTION: Implements a counter component using Composition API with <script setup> syntax and ref for reactive state.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/vuejs-developer-llms-context-20250406.md#2025-04-13_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { ref } from 'vue'\n\nconst count = ref(0)\n\nfunction increment() {\n  count.value++\n}\n</script>\n\n<template>\n  <button @click=\"increment\">\n    {{ count }}\n  </button>\n</template>\n```\n\n----------------------------------------\n\nTITLE: User Creation Trigger in PostgreSQL\nDESCRIPTION: SQL pattern for creating a database trigger that automatically executes when new users are added to the auth.users table.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/032-backend/supabase-developer/032-work-be-supabase-developer.mode.md#2025-04-13_snippet_15\n\nLANGUAGE: SQL\nCODE:\n```\ncreate function handle_new_user() returns trigger ... create trigger ... after insert on auth.users ...\n```\n\n----------------------------------------\n\nTITLE: Synchronizing Multiple Timelines in AnimeJS\nDESCRIPTION: This example demonstrates how to use the sync() method to synchronize different timelines and animations in AnimeJS, creating and synchronizing multiple timelines with different animations, including position offsets.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/animejs-specialist-llms-context-20250406.md#2025-04-13_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createTimeline, animate } from 'animejs';\n\nconst circleAnimation = animate('.circle', {\n  x: '15rem'\n});\n\nconst tlA = createTimeline()\n.sync(circleAnimation)\n.add('.triangle', {\n  x: '15rem',\n  duration: 2000,\n})\n.add('.square', {\n  x: '15rem',\n});\n\nconst tlB = createTimeline({ defaults: { duration: 2000 } })\n.add(['.triangle', '.square'], {\n  rotate: 360,\n}, 0)\n.add('.circle', {\n  scale: [1, 1.5, 1],\n}, 0);\n\nconst tlMain = createTimeline()\n.sync(tlA)\n.sync(tlB, '-=2000');\n```\n\n----------------------------------------\n\nTITLE: Card Component Implementation\nDESCRIPTION: Basic card component with image, title, text, and action button.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/bootstrap-specialist-llms-context-20250406.md#2025-04-13_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"card\" style=\"width: 18rem;\">\n  {{< placeholder width=\"100%\" height=\"180\" class=\"card-img-top\" text=\"Image cap\" >}}\n  <div class=\"card-body\">\n    <h5 class=\"card-title\">Card title</h5>\n    <p class=\"card-text\">Some quick example text to build on the card title and make up the bulk of the card's content.</p>\n    <a href=\"#\" class=\"btn btn-primary\">Go somewhere</a>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Initializing Postgres Vector Store for LlamaIndex in TypeScript\nDESCRIPTION: Creates a PGVectorStore instance for use with LlamaIndex, using a PostgreSQL connection URL from environment variables. This enables vector-based operations for AI and machine learning applications.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/neon-db-specialist-llms-context-20250406.md#2025-04-13_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport 'dotenv/config';\nimport { PGVectorStore } from 'llamaindex';\n\nexport default new PGVectorStore({\n  connectionString: process.env.POSTGRES_URL,\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Supabase Status Feed to Slack\nDESCRIPTION: Slack command for subscribing to Supabase platform status updates using the built-in RSS functionality.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/supabase-developer-llms-context-20250406.md#2025-04-13_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n/feed subscribe https://status.supabase.com/history.atom\n```\n\n----------------------------------------\n\nTITLE: Defining Route Parameter Types in SvelteKit\nDESCRIPTION: Shows how to manually define types for route parameters in a SvelteKit RequestHandler using JSDoc annotations.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/sveltekit-llms-context-20250406.md#2025-04-13_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('@sveltejs/kit').RequestHandler<{\n    foo: string;\n    bar: string;\n    baz: string\n  }>} */\nexport async function GET({ params }) {\n\t// ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite Plugins in JavaScript\nDESCRIPTION: Example showing how to configure Vite and Rollup plugins in a vite.config.js file, including support for plugin presets.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/vite-specialist-llms-context-20250406.md#2025-04-13_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport vitePlugin from 'vite-plugin-feature'\nimport rollupPlugin from 'rollup-plugin-feature'\n\nexport default defineConfig({\n  plugins: [vitePlugin(), rollupPlugin()],\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Dialog Component in React TSX\nDESCRIPTION: This example demonstrates the basic structure and usage of the Dialog component, including the trigger, content, header, title, and description.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/shadcn-ui-specialist-llms-context-20250406.md#2025-04-13_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n<Dialog>\n  <DialogTrigger>Open</DialogTrigger>\n  <DialogContent>\n    <DialogHeader>\n      <DialogTitle>Are you absolutely sure?</DialogTitle>\n      <DialogDescription>\n        This action cannot be undone. This will permanently delete your account\n        and remove your data from our servers.\n      </DialogDescription>\n    </DialogHeader>\n  </DialogContent>\n</Dialog>\n```\n\n----------------------------------------\n\nTITLE: HttpClient Provider Configuration\nDESCRIPTION: Shows how to configure HttpClient provider in Angular application configuration.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/angular-developer-llms-context-20250406.md#2025-04-13_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\nexport const appConfig: ApplicationConfig = {\n  providers: [\n    provideHttpClient(),\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Drag Event Listeners in D3.js\nDESCRIPTION: Shows how to implement drag event listeners for start, drag, and end events. This example raises the dragged element and updates its position based on the event coordinates.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/d3js-specialist-llms-context-20250406.md#2025-04-13_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\nfunction started(event) {\n  const circle = d3.select(this).classed(\"dragging\", true);\n  const dragged = (event, d) => circle.raise().attr(\"cx\", d.x = event.x).attr(\"cy\", d.y = event.y);\n  const ended = () => circle.classed(\"dragging\", false);\n  event.on(\"drag\", dragged).on(\"end\", ended);\n}\n```\n\n----------------------------------------\n\nTITLE: Email Verification Function Definition\nDESCRIPTION: TypeScript function definition for preparing email address verification. Supports email code and link verification strategies.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/clerk-auth-specialist-llms-context-20250406.md#2025-04-13_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction prepareEmailAddressVerification(\n  params?: PrepareEmailAddressVerificationParams,\n): Promise<SignUpResource>\n```\n\n----------------------------------------\n\nTITLE: Creating Template Literal Types in TypeScript\nDESCRIPTION: Shows how to create template literal types in TypeScript. These types allow for the creation of string literal types based on other types.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/031-frontend/typescript-specialist/031-work-fe-typescript-specialist.mode.md#2025-04-13_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype EventName = `on${Capitalize<string>}`\n```\n\n----------------------------------------\n\nTITLE: Function Parameter Type Annotations in TypeScript\nDESCRIPTION: Shows how to add type annotations to function parameters, improving code clarity and catching potential errors.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/typescript-specialist-llms-context-20250406.md#2025-04-13_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Parameter type annotation\nfunction greet(name: string) {\n  console.log(\"Hello, \" + name.toUpperCase() + \"!!\");\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a GET Route Handler in Next.js\nDESCRIPTION: Create a GET API route handler in Next.js. This defines a serverless function for handling GET requests to a specific API endpoint.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/031-frontend/nextjs-developer/031-work-fe-nextjs-developer.mode.md#2025-04-13_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// app/api/hello/route.ts\nimport { NextRequest } from 'next/server'\n\nexport async function GET(request: NextRequest) {\n  return new Response('Hello, Next.js!')\n}\n```\n\n----------------------------------------\n\nTITLE: Selective Sass Import\nDESCRIPTION: Demonstration of selective Bootstrap Sass component importing.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/bootstrap-specialist-llms-context-20250406.md#2025-04-13_snippet_17\n\nLANGUAGE: scss\nCODE:\n```\n{{< scss-docs name=\"import-stack\" file=\"scss/bootstrap.scss\" >}}\n```\n\n----------------------------------------\n\nTITLE: Creating Hybrid Structured and Unstructured Metadata Table in SQL\nDESCRIPTION: SQL commands to create a table 'docs' with both structured columns (id, embedding, content, url) and an unstructured JSONB column (meta). Includes an example INSERT statement to populate the table.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/supabase-developer-llms-context-20250406.md#2025-04-13_snippet_24\n\nLANGUAGE: sql\nCODE:\n```\ncreate table docs (\n  id uuid primary key,\n  embedding vector(3),\n  content text,\n  url string,\n  meta jsonb\n);\n\ninsert into docs\n  (id, embedding, content, url, meta)\nvalues\n  (\n    '79409372-7556-4ccc-ab8f-5786a6cfa4f7',\n    array[0.1, 0.2, 0.3],\n    'Hello world',\n    '/hello-world',\n    '{\"key\": \"value\"}'\n  );\n```\n\n----------------------------------------\n\nTITLE: Remix Developer Workflow Steps\nDESCRIPTION: Outlines the systematic workflow process for handling Remix development tasks, from requirement gathering to implementation and completion reporting.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/031-frontend/remix-developer/031-work-fe-remix-developer.mode.md#2025-04-13_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n1.  Receive and understand the Remix-related task and requirements\n2.  Plan implementation steps considering routing, data, UI, and collaboration/escalation points\n3.  Implement or modify route modules, utilities, and components following Remix best practices\n4.  Consult Remix documentation and resources as needed\n5.  Guide running the development server and local testing\n6.  Log work completion in task logs or journals\n7.  Report back task completion\n```\n\n----------------------------------------\n\nTITLE: Defining Animatable Properties in AnimateJS\nDESCRIPTION: This snippet demonstrates how to define properties that can be animated using the animate() function, showing animatable properties and animation control parameters like duration, delay, and callbacks.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/animejs-specialist-llms-context-20250406.md#2025-04-13_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nanimate('.square', {\n┌──────────────────┐\n│ translateX: 100, │\n│ scale: 2,        ├─ Animatable Properties\n│ opacity: .5,     │\n└──────────────────┘\n  duration: 400,\n  delay: 250,\n  ease: 'out(3)',\n  loop: 3,\n  alternate: true,\n  autoplay: false,\n  onBegin: () => {},\n  onLoop: () => {},\n  onUpdate: () => {},\n});\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Table with Composite Primary Key\nDESCRIPTION: Creates a table with a multi-column primary key constraint combining order_id and item_no columns.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/neon-db-specialist-llms-context-20250406.md#2025-04-13_snippet_31\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE order_items(\n  order_id INT,\n  item_no SERIAL,\n  item_description VARCHAR NOT NULL,\n  quantity INTEGER NOT NULL,\n  price DEC(10, 2),\n  PRIMARY KEY (order_id, item_no)\n);\n```\n\n----------------------------------------\n\nTITLE: Including Command in Editor Test Suite - HTML\nDESCRIPTION: Shows how to include new command and test files in the editor's test suite HTML file. The snippets demonstrate the proper placement and ordering of script references.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/threejs-specialist-llms-context-20250406.md#2025-04-13_snippet_18\n\nLANGUAGE: html\nCODE:\n```\n// <!-- command object classes -->\n//...\n<script src=\"../../editor/js/commands/AddScriptCommand.js\"></script>\n<script src=\"../../editor/js/commands/DoSomethingCommand.js\"></script>         // add this line\n<script src=\"../../editor/js/commands/MoveObjectCommand.js\"></script>\n//...\n```\n\n----------------------------------------\n\nTITLE: Implementing TypeScript Props\nDESCRIPTION: Shows how to implement and use TypeScript interfaces for component props.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/astro-developer-llms-context-20250406.md#2025-04-13_snippet_24\n\nLANGUAGE: astro\nCODE:\n```\n---\ninterface Props {\n  name: string;\n  greeting?: string;\n}\n\nconst { greeting = \"Hello\", name } = Astro.props;\n---\n<h2>{greeting}, {name}!</h2>\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Person Model in Django\nDESCRIPTION: Creates a simple Person model with basic fields for storing first and last names.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/django-developer-llms-context-20250406.md#2025-04-13_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\n\n\nclass Person(models.Model):\n    first_name = models.CharField(max_length=30)\n    last_name = models.CharField(max_length=30)\n```\n\n----------------------------------------\n\nTITLE: Generating a New Component with Angular CLI\nDESCRIPTION: Demonstrates the Angular CLI command to scaffold a new component, which creates the component files and updates necessary module declarations.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/031-frontend/angular-developer/031_angular-developer.mode.md#2025-04-13_snippet_13\n\nLANGUAGE: Shell\nCODE:\n```\nng generate component <name>\n```\n\n----------------------------------------\n\nTITLE: Root Error Boundary Implementation\nDESCRIPTION: Error boundary component implementation for handling uncaught errors at the application root level.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/remix-developer-llms-context-20250406.md#2025-04-13_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\nexport function ErrorBoundary() {\n  const error = useRouteError();\n  console.error(error);\n  return (\n    <html>\n      <head>\n        <title>Oh no!</title>\n        <Meta />\n        <Links />\n      </head>\n      <body>\n        {/* add the UI you want your users to see */}\n        <Scripts />\n      </body>\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Variables with Type Annotations in TypeScript\nDESCRIPTION: Demonstrates how to declare variables with explicit type annotations in TypeScript. This is a fundamental concept in TypeScript that allows for static type checking.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/031-frontend/typescript-specialist/031-work-fe-typescript-specialist.mode.md#2025-04-13_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nlet name: string;\n```\n\n----------------------------------------\n\nTITLE: Implementing Asynchronous Route Handler in Flask\nDESCRIPTION: Shows how to create an asynchronous route handler in Flask using Python's async/await syntax. The handler makes an asynchronous database query and returns the result as JSON without blocking the server.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/flask-developer-llms-context-20250406.md#2025-04-13_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n@app.route(\"/get-data\")\nasync def get_data():\n    data = await async_db_query(...)\n    return jsonify(data)\n```\n\n----------------------------------------\n\nTITLE: Bulk Creation of Entries in Django\nDESCRIPTION: Shows how to use bulk_create() method to efficiently create multiple Entry objects with a single database query. This is useful for inserting multiple records at once, improving performance.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/django-developer-llms-context-20250406.md#2025-04-13_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nEntry.objects.bulk_create([\n    Entry(headline=\"This is a test\"),\n    Entry(headline=\"This is only a test\"),\n])\n```\n\n----------------------------------------\n\nTITLE: Generating Stacked Data with D3.js stack() Function\nDESCRIPTION: Demonstrates how to use the stack generator to create stacked data from a dataset. This example shows data preparation, key selection, and value computation for fruit sales data.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/d3js-specialist-llms-context-20250406.md#2025-04-13_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nconst series = d3.stack()\n    .keys(d3.union(data.map(d => d.fruit))) // apples, bananas, cherries, …\n    .value(([, group], key) => group.get(key).sales)\n  (d3.index(data, d => d.date, d => d.fruit));\n```\n\n----------------------------------------\n\nTITLE: MongoDB User Management\nDESCRIPTION: Commands for creating database users with specific roles and permissions.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/condensed_indices/mongodb-specialist-condensed-index.md#2025-04-13_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ndb.createUser({ user: \"<name>\", pwd: passwordPrompt(), roles: [...] })\n```\n\n----------------------------------------\n\nTITLE: Configuring Asset Loaders in Three.js - JavaScript\nDESCRIPTION: Demonstrates how to set up DRACOLoader and KTX2Loader for loading compressed geometries and textures in Three.js. Includes path configuration for decoders and transcoders.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/condensed_indices/threejs-specialist-condensed-index.md#2025-04-13_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { DRACOLoader } from 'three/examples/jsm/loaders/DRACOLoader';\nimport { KTX2Loader } from 'three/examples/jsm/loaders/KTX2Loader';\n\nconst dracoLoader = new DRACOLoader();\ndracoLoader.setDecoderPath('/path/to/draco/');\n\nconst ktx2Loader = new KTX2Loader();\nktx2Loader.setTranscoderPath('/path/to/basis/');\nktx2Loader.detectSupport(renderer);\n```\n\n----------------------------------------\n\nTITLE: Advanced Base URL Configuration\nDESCRIPTION: Implementation of advanced base URL handling for assets and public files during build process.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/vite-specialist-llms-context-20250406.md#2025-04-13_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\nexperimental: {\n  renderBuiltUrl(filename, { hostType }) {\n    if (hostType === 'js') {\n      return { runtime: `window.__toCdnUrl(${JSON.stringify(filename)})` }\n    } else {\n      return { relative: true }\n    }\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Animating Elements with Tween Values Array in Anime.js\nDESCRIPTION: This example demonstrates how to animate an element by specifying an array of values for x and y properties. The animation will transition through each value over the total duration.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/animejs-specialist-llms-context-20250406.md#2025-04-13_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nanimate('.square', {\n  x: [0, 100, 200],\n  y: [0, 100, 200],\n  duration: 3000,\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Component Input Properties\nDESCRIPTION: Shows two ways to define input properties for a component: using the @Input() decorator and the new input.required<T>() syntax for required inputs with type checking.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/031-frontend/angular-developer/031_angular-developer.mode.md#2025-04-13_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\n@Input() optionalProp: string;\ninput requiredProp = input.required<number>();\n```\n\n----------------------------------------\n\nTITLE: Preview Port Configuration\nDESCRIPTION: NPM script configuration for setting a custom port for the Vite preview server.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/vite-specialist-llms-context-20250406.md#2025-04-13_snippet_32\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"preview\": \"vite preview --port 8080\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using hot.data for Persistent Data in HMR\nDESCRIPTION: Demonstrates how to use `import.meta.hot.data` to persist data across different instances of the same updated module during hot module replacement.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/vite-specialist-llms-context-20250406.md#2025-04-13_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\n// ok\nimport.meta.hot.data.someValue = 'hello'\n\n// not supported\nimport.meta.hot.data = { someValue: 'hello' }\n```\n\n----------------------------------------\n\nTITLE: Conditional Expression Result Reference\nDESCRIPTION: Shows how to save and reuse conditional expression results in @if blocks using the 'as' keyword for template optimization.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/angular-developer-llms-context-20250406.md#2025-04-13_snippet_28\n\nLANGUAGE: angular-html\nCODE:\n```\n@if (user.profile.settings.startDate; as startDate) {\n  {{ startDate }}\n}\n```\n\n----------------------------------------\n\nTITLE: Using Generic Constraints in TypeScript\nDESCRIPTION: Demonstrates the use of generic constraints in TypeScript. Constraints limit the types that can be used with a generic, ensuring certain properties or methods are available.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/031-frontend/typescript-specialist/031-work-fe-typescript-specialist.mode.md#2025-04-13_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction logLength<T extends { length: number }>(obj: T) { ... }\n```\n\n----------------------------------------\n\nTITLE: Creating Mapped Types in TypeScript\nDESCRIPTION: Illustrates the creation of mapped types in TypeScript, using the Readonly utility type as an example. Mapped types allow for the transformation of one type into another.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/031-frontend/typescript-specialist/031-work-fe-typescript-specialist.mode.md#2025-04-13_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype Readonly<T> = { readonly [P in keyof T]: T[P]; };\n```\n\n----------------------------------------\n\nTITLE: Rendering a Line Path in D3.js\nDESCRIPTION: Demonstrates how to use a line generator function to create an SVG path element with the generated line data. The path is appended to an SVG container and styled with a stroke color.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/d3js-specialist-llms-context-20250406.md#2025-04-13_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nsvg.append(\"path\").attr(\"d\", line(data)).attr(\"stroke\", \"currentColor\");\n```\n\n----------------------------------------\n\nTITLE: useReducer Hook Basic Usage\nDESCRIPTION: Basic syntax example of useReducer hook for state management\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/react-specialist-llms-context-20250406.md#2025-04-13_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\nconst [state, dispatch] = useReducer(reducer, initialArg, init?)\n```\n\n----------------------------------------\n\nTITLE: CSS Module Import\nDESCRIPTION: Importing CSS modules with automatic scoping in Vite\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/031-frontend/vite-specialist/031-work-fe-vite-specialist.mode.md#2025-04-13_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport styles from './styles.module.css'\n```\n\n----------------------------------------\n\nTITLE: Executing a Combined Fields Query in Elasticsearch\nDESCRIPTION: This snippet demonstrates how to use the combined_fields query to search across multiple text fields (title, abstract, body) for specific terms with an AND operator.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/elasticsearch-specialist-llms-context-20250406.md#2025-04-13_snippet_14\n\nLANGUAGE: json\nCODE:\n```\nGET /_search\n{\n  \"query\": {\n    \"combined_fields\" : {\n      \"query\":      \"database systems\",\n      \"fields\":     [ \"title\", \"abstract\", \"body\"],\n      \"operator\":   \"and\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Vue Object Iteration with v-for\nDESCRIPTION: Shows how to iterate through object properties using v-for directive with value, key, and index parameters.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/vuejs-developer-llms-context-20250406.md#2025-04-13_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\nconst myObject = reactive({\n  title: 'How to do lists in Vue',\n  author: 'Jane Doe',\n  publishedAt: '2016-04-10'\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\ndata() {\n  return {\n    myObject: {\n      title: 'How to do lists in Vue',\n      author: 'Jane Doe',\n      publishedAt: '2016-04-10'\n    }\n  }\n}\n```\n\nLANGUAGE: vue-html\nCODE:\n```\n<li v-for=\"(value, key, index) in myObject\">\n  {{ index }}. {{ key }}: {{ value }}\n</li>\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering in React JSX\nDESCRIPTION: Demonstrates conditional rendering using the ternary operator in JSX. This pattern allows for dynamic UI based on component state or props.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/condensed_indices/react-specialist-condensed-index.md#2025-04-13_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n{condition ? <A /> : <B />}\n```\n\n----------------------------------------\n\nTITLE: Enforcing MFA for All Users in PostgreSQL\nDESCRIPTION: Creates a restrictive Row Level Security policy that enforces MFA for all authenticated users by requiring an 'aal2' level JWT.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/supabase-developer-llms-context-20250406.md#2025-04-13_snippet_32\n\nLANGUAGE: sql\nCODE:\n```\ncreate policy \"Policy name.\"\n  on table_name\n  as restrictive\n  to authenticated\n  using ((select auth.jwt()->>'aal') = 'aal2');\n```\n\n----------------------------------------\n\nTITLE: Configuring Orchestrator Mode\nDESCRIPTION: JSON configuration for a workflow orchestration mode that coordinates complex tasks by delegating to specialized modes. Limited to editing mode configuration files only.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/knowledge/community_mode_ideas.md#2025-04-13_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n      \"slug\": \"orchestrator\",\n      \"name\": \"Orchestrator\",\n      \"roleDefinition\": \"You are Roo, a strategic workflow orchestrator who coordinates complex tasks by delegating them to appropriate specialized modes. You have a comprehensive understanding of each mode's capabilities and limitations, allowing you to effectively break down complex problems into discrete tasks that can be solved by different specialists.\",\n      \"customInstructions\": \"Your role is to coordinate complex workflows by delegating tasks to specialized modes. As an orchestrator, you should:\\n\\n1. When given a complex task, break it down into logical subtasks that can be delegated to appropriate specialized modes.\\n\\n2. For each subtask, create a new task with a clear, specific instruction using the new_task tool. Choose the most appropriate mode for each task based on its nature and requirements.\\n\\n3. Track and manage the progress of all subtasks. When a subtask is completed, analyze its results and determine the next steps.\\n\\n4. Help the user understand how the different subtasks fit together in the overall workflow. Provide clear reasoning about why you're delegating specific tasks to specific modes.\\n\\n5. When all subtasks are completed, synthesize the results and provide a comprehensive overview of what was accomplished.\\n\\n6. You can also manage custom modes by editing cline_custom_modes.json and .roomodes files directly. This allows you to create, modify, or delete custom modes as part of your orchestration capabilities.\\n\\n7. Ask clarifying questions when necessary to better understand how to break down complex tasks effectively.\\n\\n8. Suggest improvements to the workflow based on the results of completed subtasks.\",\n      \"groups\": [\n        \"read\",\n        [\"edit\", { \"fileRegex\": \"\\\\.roomodes$|cline_custom_modes\\\\.json$\", \"description\": \"Mode configuration files only\" }]\n      ],\n      \"source\": \"global\"\n    }\n```\n\n----------------------------------------\n\nTITLE: SvelteKit Developer Role Definition\nDESCRIPTION: Markdown documentation outlining the capabilities, workflow, and operational principles for a SvelteKit developer role. Includes detailed instructions for building high-performance web applications with SvelteKit framework features.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/031-frontend/sveltekit-developer/031-work-fe-sveltekit-developer.mode.md#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Mode: 🔥 SvelteKit Developer (`sveltekit-developer`)\n\n## Description\nSpecializes in building high-performance web applications using the SvelteKit framework, covering routing, data loading, form handling, SSR/SSG, and deployment.\n\n## Capabilities\n*   Build SvelteKit applications with server-side rendering (SSR) and static site generation (SSG)\n*   Implement file-based routing, load functions, form actions, and hooks\n*   Develop Svelte components and server endpoints\n*   Handle advanced routing features such as layout groups, optional parameters, and route guards\n*   Implement service workers for offline capabilities\n*   Guide on state management using Svelte stores and context API\n*   Integrate deployment adapters for various platforms (Node, static, Vercel, Cloudflare, etc.)\n*   Provide guidance on testing SvelteKit applications using Playwright and Vitest\n*   Maintain knowledge of SvelteKit best practices, patterns, and common integrations\n*   Use CLI commands for development and build processes\n*   Fetch and utilize external context resources for enhanced understanding\n*   Log progress and completion details systematically\n*   Escalate or delegate complex tasks to appropriate specialists\n```\n\n----------------------------------------\n\nTITLE: MongoDB Authentication and Database Selection\nDESCRIPTION: Commands for authenticating users and switching database context.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/033-database/mongodb-specialist/033-work-db-mongodb-specialist.mode.md#2025-04-13_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ndb.auth()\nuse <db>\n```\n\n----------------------------------------\n\nTITLE: Basic PostgreSQL CREATE TABLE Syntax Template\nDESCRIPTION: Shows the fundamental syntax template for creating a new table in PostgreSQL. The template includes optional IF NOT EXISTS clause, column definitions with data types, and table constraints.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/neon-db-specialist-llms-context-20250406.md#2025-04-13_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE [IF NOT EXISTS] table_name (\n   column1 datatype(length) column_constraint,\n   column2 datatype(length) column_constraint,\n   ...\n   table_constraints\n);\n```\n\n----------------------------------------\n\nTITLE: Optional Properties in TypeScript Object Types\nDESCRIPTION: Illustrates how to define optional properties in an interface using the question mark (?), allowing for flexible object shapes.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/typescript-specialist-llms-context-20250406.md#2025-04-13_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\ninterface PaintOptions {\n  shape: Shape;\n  xPos?: number;\n  yPos?: number;\n}\n\nfunction paintShape(opts: PaintOptions) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Animation Timeline with Anime.js\nDESCRIPTION: Example of creating a timeline to sequence multiple animations. Shows how to add animations to the timeline and use relative timing offsets.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/031-frontend/animejs-specialist/031_animejs-specialist.mode.md#2025-04-13_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nanime.timeline({ easing: 'easeOutExpo', duration: 750 }) .add({ targets: '.el1', translateX: 250 }) .add({ targets: '.el2', translateY: 250 }, '-=600');\n```\n\n----------------------------------------\n\nTITLE: Implementing Form Validation in SvelteKit Actions\nDESCRIPTION: Demonstrates how to implement form validation in SvelteKit actions using the fail function to return validation errors and previously submitted form values.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/sveltekit-llms-context-20250406.md#2025-04-13_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/// file: src/routes/login/+page.server.js\nimport { fail } from '@sveltejs/kit';\nimport * as db from '$lib/server/db';\n\n/** @satisfies {import('./$types').Actions} */\nexport const actions = {\n\tlogin: async ({ cookies, request }) => {\n\t\tconst data = await request.formData();\n\t\tconst email = data.get('email');\n\t\tconst password = data.get('password');\n\n\t\tif (!email) {\n\t\t\treturn fail(400, { email, missing: true });\n\t\t}\n\n\t\tconst user = await db.getUser(email);\n\n\t\tif (!user || user.password !== db.hash(password)) {\n\t\t\treturn fail(400, { email, incorrect: true });\n\t\t}\n\n\t\tcookies.set('sessionid', await db.createSession(user), { path: '/' });\n\n\t\treturn { success: true };\n\t},\n\tregister: async (event) => {\n\t\t// TODO register the user\n\t}\n};\n```\n\n----------------------------------------\n\nTITLE: Defining an Angular Component\nDESCRIPTION: Demonstrates the basic structure of an Angular component using the @Component decorator. It includes the selector for use in templates, references to the HTML template and CSS styles, and specifies any necessary imports.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/031-frontend/angular-developer/031_angular-developer.mode.md#2025-04-13_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n@Component({\n  selector: 'app-example',\n  templateUrl: './example.component.html',\n  styleUrls: ['./example.component.css'],\n  imports: [CommonModule]\n})\n```\n\n----------------------------------------\n\nTITLE: Passing Server Components to Client Components as Props in Next.js\nDESCRIPTION: Demonstrates the supported pattern of passing Server Components as props to Client Components, using the children prop as an example. This Client Component uses React hooks and can receive Server Components as children.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/nextjs-developer-llms-context-20250406.md#2025-04-13_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\n'use client'\n\nimport { useState } from 'react'\n\nexport default function ClientComponent({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  const [count, setCount] = useState(0)\n\n  return (\n    <>\n      <button onClick={() => setCount(count + 1)}>{count}</button>\n      {children}\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Command Component in React TSX\nDESCRIPTION: This example shows how to use the Command component and its subcomponents to create a command menu interface in React TSX.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/shadcn-ui-specialist-llms-context-20250406.md#2025-04-13_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n<Command>\n  <CommandInput placeholder=\"Type a command or search...\" />\n  <CommandList>\n    <CommandEmpty>No results found.</CommandEmpty>\n    <CommandGroup heading=\"Suggestions\">\n      <CommandItem>Calendar</CommandItem>\n      <CommandItem>Search Emoji</CommandItem>\n      <CommandItem>Calculator</CommandItem>\n    </CommandGroup>\n    <CommandSeparator />\n    <CommandGroup heading=\"Settings\">\n      <CommandItem>Profile</CommandItem>\n      <CommandItem>Billing</CommandItem>\n      <CommandItem>Settings</CommandItem>\n    </CommandGroup>\n  </CommandList>\n</Command>\n```\n\n----------------------------------------\n\nTITLE: Configuring Astro Integrations\nDESCRIPTION: Shows different methods of adding integrations to an Astro project configuration.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/astro-developer-llms-context-20250406.md#2025-04-13_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n// astro.config.mjs\nimport { defineConfig } from 'astro/config';\nimport installedIntegration from '@astrojs/vue';\nimport localIntegration from './my-integration.js';\n\nexport default defineConfig({\n  integrations: [\n    // 1. Imported from an installed npm package\n    installedIntegration(),\n    // 2. Imported from a local JS file\n    localIntegration(),\n    // 3. An inline object\n    {name: 'namespace:id', hooks: { /* ... */ }},\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Bootstrap Class Examples\nDESCRIPTION: Example of common Bootstrap class names referenced in the documentation for grid system, components and utilities.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/031-frontend/bootstrap-specialist/031-work-fe-bootstrap-specialist.mode.md#2025-04-13_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n.container, .row, .col-*, .form-control, .btn, .btn-*, .navbar, .card, .modal, .accordion, .btn-group, .input-group, .m-*, .p-*, .text-*, .bg-*, .visually-hidden, .d-flex, align-items-*, justify-content-*\n```\n\n----------------------------------------\n\nTITLE: Basic Multi-Index Search in Elasticsearch\nDESCRIPTION: Demonstrates how to search across multiple specific indices using comma-separated values in the search API path. The example searches for a user ID across two indices.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/elasticsearch-specialist-llms-context-20250406.md#2025-04-13_snippet_9\n\nLANGUAGE: console\nCODE:\n```\nGET /my-index-000001,my-index-000002/_search\n{\n  \"query\": {\n    \"match\": {\n      \"user.id\": \"kimchy\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Module Import Pattern\nDESCRIPTION: Vite-specific syntax for importing multiple files matching a glob pattern\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/031-frontend/vite-specialist/031-work-fe-vite-specialist.mode.md#2025-04-13_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport.meta.glob('./*.js')\n```\n\n----------------------------------------\n\nTITLE: Creating a SELECT Policy for Public Access\nDESCRIPTION: SQL snippet showing how to create a policy that allows public read access to a profiles table with row level security.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/supabase-developer-llms-context-20250406.md#2025-04-13_snippet_42\n\nLANGUAGE: sql\nCODE:\n```\ncreate table profiles (\n  id uuid primary key,\n  user_id references auth.users,\n  avatar_url text\n);\n\nalter table profiles enable row level security;\n\ncreate policy \"Public profiles are visible to everyone.\"\non profiles for select\nto anon\nusing ( true );\n```\n\n----------------------------------------\n\nTITLE: Implementing ReadonlyArray Type in TypeScript\nDESCRIPTION: Demonstrates the use of ReadonlyArray type for immutable arrays.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/typescript-specialist-llms-context-20250406.md#2025-04-13_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\nfunction doStuff(values: ReadonlyArray<string>) {\n  const copy = values.slice();\n  console.log(`The first value is ${values[0]}`);\n  // Error: Property 'push' does not exist on type 'readonly string[]'.\n  // values.push(\"hello!\");\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Bug Report Template in Markdown\nDESCRIPTION: Template for creating standardized bug reports with YAML frontmatter containing metadata fields like ID, status, priority, and assignments. Includes sections for bug description, reproduction steps, environment details, and acceptance criteria.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/knowledge/project-management/markdown-driven-task-management-MDTM/markdown-driven-task-management-MDTM-feature-structure/implementing.md#2025-04-13_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n---\n# 🆔 Task Identification & Core Metadata\nid:             # << GENERATE_UNIQUE_ID (e.g., BUG-NNN) >>\ntitle:          # << CONCISE BUG DESCRIPTION >>\nstatus:         \"🟡 To Do\"\ntype:           \"🐞 Bug\"\n\n# ⏳ Scheduling & Effort\npriority:       \"🔼 High\" # Default higher for bugs\ncreated_date:   # << YYYY-MM-DD >>\nupdated_date:   # << YYYY-MM-DD >>\ndue_date:       # Optional\nestimated_effort: # Optional\n\n# 🧑‍💻 Assignment & Responsibility\nassigned_to:    # Optional\nreporter:       # << WHO FOUND THE BUG? (e.g., \"🧑‍💻 User:Name\", \"QA\") >>\n\n# 🔗 Relationships & Context\nparent_task:    # Optional (Related feature?)\ndepends_on:     []\nrelated_docs:   [] # Links to error logs, screenshots?\ntags:           [\"bug\"] # << Add relevant feature tags >>\n\n# 🤖 AI & Review Specific Fields\nai_prompt_log:  []\nreview_checklist: [\"[ ] Bug is fixed\", \"[ ] Regression test added\", \"[ ] Code Style OK\"]\nreviewed_by:    # Optional\n---\n\n# << CONCISE BUG DESCRIPTION >>\n\n## Description ✍️\n*   **What happened?** (Detailed description of the bug)\n*   **Expected behavior?**\n*   **Actual behavior?**\n\n## Steps to Reproduce 👣\n1.  Go to '...'\n2.  Click on '....'\n3.  Scroll down to '....'\n4.  See error / incorrect behavior\n\n## Environment 🖥️\n*   Browser: (e.g., Chrome 110, Safari 16)\n*   OS: (e.g., macOS Ventura, Windows 11)\n*   Device: (e.g., Desktop, iPhone 14)\n*   User role (if applicable):\n\n## Acceptance Criteria ✅\n*   - [ ] The bug described above no longer occurs following the steps to reproduce.\n*   - [ ] Expected behavior is observed.\n*   - [ ] A regression test covering this scenario is added and passes.\n\n## Implementation Notes / Analysis 📝\n*   (Root cause analysis, proposed fix)\n\n## AI Prompt Log 🤖\n*   (Log prompts used for analysis or fix generation)\n```\n\n----------------------------------------\n\nTITLE: Node.js Neon Serverless Package Reference\nDESCRIPTION: Reference to the Neon serverless package for Node.js applications\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/033-database/neon-db-specialist/033-work-db-neon-db-specialist.mode.md#2025-04-13_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n@neondatabase/serverless\n```\n\n----------------------------------------\n\nTITLE: Layout Data Loading in SvelteKit\nDESCRIPTION: Shows how to load data for a layout component using +layout.server.js. The loaded data is available to child components.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/sveltekit-llms-context-20250406.md#2025-04-13_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n/// file: src/routes/blog/[slug]/+layout.server.js\nimport * as db from '$lib/server/database';\n\n/** @type {import('./$types').LayoutServerLoad} */\nexport async function load() {\n\treturn {\n\t\tposts: await db.getPostSummaries()\n\t};\n}\n```\n\nLANGUAGE: svelte\nCODE:\n```\n<!--- file: src/routes/blog/[slug]/+layout.svelte --->\n<script>\n\t/** @type {import('./$types').LayoutProps} */\n\tlet { data, children } = $props();\n</script>\n\n<main>\n\t<!-- +page.svelte is `@render`ed here -->\n\t{@render children()}\n</main>\n\n<aside>\n\t<h2>More posts</h2>\n\t<ul>\n\t\t{#each data.posts as post}\n\t\t\t<li>\n\t\t\t\t<a href=\"/blog/{post.slug}\">\n\t\t\t\t\t{post.title}\n\t\t\t\t</a>\n\t\t\t</li>\n\t\t{/each}\n\t</ul>\n</aside>\n```\n\n----------------------------------------\n\nTITLE: Customizing Switch Component with CSS Modules in TypeScript\nDESCRIPTION: Demonstrates how to customize a Switch component using CSS Modules in TypeScript. Uses the clsx utility to conditionally apply class names based on the component's state (checked, disabled).\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/material-ui-specialist-llms-context-20250406.md#2025-04-13_snippet_34\n\nLANGUAGE: tsx\nCODE:\n```\nimport clsx from 'clsx';\nimport { Switch as BaseSwitch, SwitchOwnerState } from '@mui/base/Switch';\nimport classes from './styles.module.css';\n\nexport default function Switch(props) {\n  const slotProps = {\n    root: (ownerState: SwitchOwnerState) => ({\n      className: clsx(classes.root, {\n        [classes.checked]: ownerState.checked,\n        [classes.disabled]: ownerState.disabled,\n      }),\n    }),\n    thumb: { className: classes.thumb },\n    track: { className: classes.track },\n    input: { className: classes.input },\n  };\n\n  return <BaseSwitch {...props} slotProps={slotProps} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating Anime.js with React using Hooks and createScope\nDESCRIPTION: A comprehensive React component example that demonstrates how to use Anime.js with React hooks, creating animation scopes, implementing spring animations, making elements draggable, and properly cleaning up animations when components unmount.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/animejs-specialist-llms-context-20250406.md#2025-04-13_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { animate, createScope, createSpring, createDraggable } from 'animejs';\nimport { useEffect, useRef, useState } from 'react';\nimport reactLogo from './assets/react.svg';\nimport './App.css';\n\nfunction App() {\n  const root = useRef(null);\n  const scope = useRef(null);\n  const [ rotations, setRotations ] = useState(0);\n\n  useEffect(() => {\n  \n    scope.current = createScope({ root }).add( scope => {\n    \n      // Every anime.js instances declared here are now scopped to <div ref={root}>\n\n      // Created a bounce animation loop\n      animate('.logo', {\n        scale: [\n          { to: 1.25, ease: 'inOut(3)', duration: 200 },\n          { to: 1, ease: createSpring({ stiffness: 300 }) }\n        ],\n        loop: true,\n        loopDelay: 250,\n      });\n      \n      // Make the logo draggable around its center\n      createDraggable('.logo', {\n        container: [0, 0, 0, 0],\n        releaseEase: createSpring({ stiffness: 200 })\n      });\n\n      // Register function methods to be used outside the useEffect\n      scope.add('rotateLogo', (i) => {\n        animate('.logo', {\n          rotate: i * 360,\n          ease: 'out(4)',\n          duration: 1500,\n        });\n      });\n\n    });\n\n    // Properly cleanup all anime.js instances declared inside the scope\n    return () => scope.current.revert()\n\n  }, []);\n\n  const handleClick = () => {\n    const i = rotations + 1;\n    setRotations(i);\n    // Animate logo rotation on click using the method declared inside the scope\n    scope.current.methods.rotateLogo(i);\n  };\n\n  return (\n    <div ref={root}>\n      <div className=\"large centered row\">\n        <img src={reactLogo} className=\"logo react\" alt=\"React logo\" />\n      </div>\n      <div className=\"medium row\">\n        <fieldset className=\"controls\">\n        <button onClick={handleClick}>rotations: {rotations}</button>\n        </fieldset>\n      </div>\n    </div>\n  )\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Configuring Animation Playback Settings with AnimeJS in JavaScript\nDESCRIPTION: This snippet demonstrates how to configure animation playback settings in AnimeJS. It shows how to animate a square element with various properties including transformation, opacity, duration, delay, easing function, and playback settings such as looping, alternating direction, and autoplay control.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/animejs-specialist-llms-context-20250406.md#2025-04-13_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nanimate('.square', {\n  translateX: 100,\n  scale: 2,\n  opacity: .5,\n  duration: 400,\n  delay: 250,\n  ease: 'out(3)',\n  loop: 3,\n  alternate: true,\n  autoplay: false,\n  onBegin: () => {},\n  onLoop: () => {},\n  onUpdate: () => {},\n});\n```\n\n----------------------------------------\n\nTITLE: Component Composition Implementation\nDESCRIPTION: Shows how to compose components together using parent-child relationships in Angular.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/angular-developer-llms-context-20250406.md#2025-04-13_snippet_35\n\nLANGUAGE: angular-ts\nCODE:\n```\n@Component({\n  selector: 'profile-photo',\n})\nexport class ProfilePhoto { }\n\n@Component({\n  imports: [ProfilePhoto],\n  template: `<profile-photo />`\n})\nexport class UserProfile { }\n```\n\n----------------------------------------\n\nTITLE: Flask Application Initialization Example\nDESCRIPTION: Basic Flask application initialization pattern that should trigger automatic mode invocation\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v6.3/improvements/flask-developer-improvements.md#2025-04-13_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport flask\napp = Flask(__name__)\n```\n\n----------------------------------------\n\nTITLE: Reading Context in React Component with useContext\nDESCRIPTION: Demonstrates how to use the useContext Hook at the top level of a component to read and subscribe to context.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/react-specialist-llms-context-20250406.md#2025-04-13_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst value = useContext(SomeContext)\n```\n\n----------------------------------------\n\nTITLE: Using Progressive Enhancement with use:enhance in Svelte\nDESCRIPTION: Shows how to use the use:enhance directive in Svelte to progressively enhance form submissions without full page reloads.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/sveltekit-llms-context-20250406.md#2025-04-13_snippet_10\n\nLANGUAGE: svelte\nCODE:\n```\n/// file: src/routes/login/+page.svelte\n<script>\n\timport { enhance } from '$app/forms';\n\n\t/** @type {import('./$types').PageProps} */\n\tlet { form } = $props();\n</script>\n\n<form method=\"POST\" use:enhance>\n\t<!-- form content -->\n</form>\n```\n\n----------------------------------------\n\nTITLE: Configuring Rollup Build Options in Vite\nDESCRIPTION: Example of customizing Vite's build configuration by adjusting Rollup options in the vite.config.js file.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/vite-specialist-llms-context-20250406.md#2025-04-13_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nexport default defineConfig({\n  build: {\n    rollupOptions: {\n      // https://rollupjs.org/configuration-options/\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Generic Function Implementation\nDESCRIPTION: Demonstration of TypeScript generic function with type parameter T.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/condensed_indices/typescript-specialist-condensed-index.md#2025-04-13_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction identity<T>(arg: T): T { return arg; }\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js Middleware for Supabase Auth\nDESCRIPTION: Sets up middleware to handle session refreshing and route protection for Supabase authentication.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/supabase-developer-llms-context-20250406.md#2025-04-13_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMiddlewareClient } from '@supabase/auth-helpers-nextjs'\nimport { NextResponse } from 'next/server'\n\nexport async function middleware(req) {\n  const res = NextResponse.next()\n  const supabase = createMiddlewareClient({ req, res })\n  await supabase.auth.getUser()\n  return res\n}\n\nexport const config = {\n  matcher: ['/((?!_next/static|_next/image|favicon.ico).*)'],\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Enter and Exit Selections in D3.js\nDESCRIPTION: Demonstrates the use of selection.enter() and selection.exit() to handle new and removed data points. It shows how to create new elements for entering data and remove elements for exiting data that no longer exists in the dataset.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/d3js-specialist-llms-context-20250406.md#2025-04-13_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\ndiv = div.data([1, 2, 4, 8, 16, 32], d => d);\n\ndiv.enter().append(\"div\").text(d => d);\n\ndiv.exit().remove();\n```\n\n----------------------------------------\n\nTITLE: Mapping a Match-Only Text Field in Elasticsearch\nDESCRIPTION: Example of creating an index with a 'match_only_text' field for space-efficient text storage.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/elasticsearch-specialist-llms-context-20250406.md#2025-04-13_snippet_5\n\nLANGUAGE: console\nCODE:\n```\nPUT logs\n{\n  \"mappings\": {\n    \"properties\": {\n      \"@timestamp\": {\n        \"type\": \"date\"\n      },\n      \"message\": {\n        \"type\": \"match_only_text\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Spotify OAuth Sign In with Supabase\nDESCRIPTION: JavaScript function for signing in users with Spotify OAuth using Supabase Auth. Utilizes the signInWithOAuth method with 'spotify' as the provider.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/supabase-developer-llms-context-20250406.md#2025-04-13_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nasync function signInWithSpotify() {\n  const { data, error } = await supabase.auth.signInWithOAuth({\n    provider: 'spotify',\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Collection with JSON Schema Validation\nDESCRIPTION: Shows how to create a collection with comprehensive JSON Schema validation rules for document structure and field types.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/mongodb-specialist-llms-context-20250406.md#2025-04-13_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\ndb.createCollection(\"students\", {\n   validator: {\n      $jsonSchema: {\n         bsonType: \"object\",\n         title: \"Student Object Validation\",\n         required: [ \"name\", \"year\", \"major\", \"address\" ],\n         properties: {\n            name: {\n               bsonType: \"string\",\n               description: \"'name' must be a string and is required\"\n            },\n            year: {\n               bsonType: \"int\",\n               minimum: 2017,\n               maximum: 3017,\n               description: \"'year' must be an integer in [ 2017, 3017 ] and is required\"\n            },\n            major: {\n               enum: [ \"Math\", \"English\", \"Computer Science\", \"History\", null ],\n               description: \"'major' can only be one of the enum values and is required\"\n            },\n            gpa: {\n               bsonType: [ \"double\" ],\n               description: \"'gpa' must be a double if the field exists\"\n            },\n            address: {\n               bsonType: \"object\",\n               required: [ \"city\", \"street\" ],\n               properties: {\n                  street: {\n                     bsonType: \"string\",\n                     description: \"'street' must be a string and is required\"\n                  },\n                  city: {\n                     bsonType: \"string\",\n                     description: \"'city' must be a string and is required\"\n                  }\n               }\n            }\n         }\n      }\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Form Actions in SvelteKit\nDESCRIPTION: Demonstrates how to define multiple named form actions (login and register) in a SvelteKit page.server.js file. These actions can be triggered based on the form's action attribute.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/sveltekit-llms-context-20250406.md#2025-04-13_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\n/// file: src/routes/login/+page.server.js\n/** @satisfies {import('./$types').Actions} */\nexport const actions = {\n\tlogin: async (event) => {\n\t\t// TODO log the user in\n\t},\n\tregister: async (event) => {\n\t\t// TODO register the user\n\t}\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering WTForms in Jinja2 Template\nDESCRIPTION: This HTML template demonstrates how to render a complete form using a previously defined macro. It iterates through the form fields and applies the render_field macro to each.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/flask-developer-llms-context-20250406.md#2025-04-13_snippet_17\n\nLANGUAGE: HTML\nCODE:\n```\n{% from \"_formhelpers.html\" import render_field %}\n<form method=post>\n  <dl>\n    {{ render_field(form.username) }}\n    {{ render_field(form.email) }}\n    {{ render_field(form.password) }}\n    {{ render_field(form.confirm) }}\n    {{ render_field(form.accept_tos) }}\n  </dl>\n  <p><input type=submit value=Register>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Setting Up CORS Middleware in FastAPI\nDESCRIPTION: Demonstrates how to configure CORS (Cross-Origin Resource Sharing) middleware in a FastAPI application. This is crucial for allowing controlled access to your API from different origins.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/condensed_indices/fastapi-developer-condensed-index.md#2025-04-13_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom fastapi.middleware.cors import CORSMiddleware\n\napp = FastAPI()\n\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"https://example.com\"],\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\n```\n\n----------------------------------------\n\nTITLE: Example Task Delegation Command in Markdown\nDESCRIPTION: Demonstrates how to delegate a RAG implementation task from Project Manager to the RAG Database Developer specialist mode using the new_task command. Shows proper task formatting with requirements and context references.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v3.0/AI-and-MCP-Modes-README.md#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nProject Manager -> `new_task` -> `rag-database-developer`:\\n\\n`Task: Implement RAG retrieval for project documentation.`\\n`Requirements: Use ChromaDB, sentence-transformer embeddings. Index all markdown files in ./docs/. Provide retrieval function.`\\n`Context Refs: project_journal/planning/requirements.md#section-3, project_journal/planning/architecture.md#rag-component`\n```\n\n----------------------------------------\n\nTITLE: Joy UI Theme Token Customization\nDESCRIPTION: Example of customizing Joy UI theme tokens including color schemes and font families\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/material-ui-specialist-llms-context-20250406.md#2025-04-13_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { CssVarsProvider, extendTheme } from '@mui/joy/styles';\n\nconst theme = extendTheme({\n  colorSchemes: {\n    light: {\n      palette: {\n        // affects all Joy components that has `color=\"primary\"` prop.\n        primary: {\n          50: '#fffbeb',\n          100: '#fef3c7',\n          200: '#fde68a',\n          // 300, 400, ..., 800,\n          900: '#78350f',\n        },\n      },\n    },\n  },\n  fontFamily: {\n    display: 'Inter, var(--joy-fontFamily-fallback)',\n    body: 'Inter, var(--joy-fontFamily-fallback)',\n  },\n});\n\nfunction App() {\n  return <CssVarsProvider theme={theme}>...</CssVarsProvider>;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Menubar Component in React TSX\nDESCRIPTION: This code snippet demonstrates how to use the Menubar component in a React application, including creating a menu with items, separators, and shortcuts.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/shadcn-ui-specialist-llms-context-20250406.md#2025-04-13_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\n<Menubar>\n  <MenubarMenu>\n    <MenubarTrigger>File</MenubarTrigger>\n    <MenubarContent>\n      <MenubarItem>\n        New Tab <MenubarShortcut>⌘T</MenubarShortcut>\n      </MenubarItem>\n      <MenubarItem>New Window</MenubarItem>\n      <MenubarSeparator />\n      <MenubarItem>Share</MenubarItem>\n      <MenubarSeparator />\n      <MenubarItem>Print</MenubarItem>\n    </MenubarContent>\n  </MenubarMenu>\n</Menubar>\n```\n\n----------------------------------------\n\nTITLE: Realtime Subscriptions with Supabase JavaScript Client\nDESCRIPTION: JavaScript client code for subscribing to realtime updates from Supabase, allowing applications to receive database changes in real-time.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/032-backend/supabase-developer/032-work-be-supabase-developer.mode.md#2025-04-13_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nsupabase.channel('channel_name').on(...).subscribe(...)\n```\n\n----------------------------------------\n\nTITLE: Using Generic Functions with Type Argument Inference in TypeScript\nDESCRIPTION: Shows how to use a generic function with type argument inference, allowing the compiler to automatically determine the type based on the input.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/typescript-specialist-llms-context-20250406.md#2025-04-13_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nlet output = identity(\"myString\");\n//       ^?\n```\n\n----------------------------------------\n\nTITLE: Bootstrap Metadata Tags Definition\nDESCRIPTION: Definition of metadata tags for categorizing Bootstrap-related work and expertise areas\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v6.3/improvements/bootstrap-specialist-improvements.md#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n\"bootstrap\", \"css\", \"frontend\", \"responsive-design\", \"ui-framework\"\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter for Kanban Work Items\nDESCRIPTION: Defines the YAML metadata structure for work items including identification, flow management, metrics tracking, and assignment attributes.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/knowledge/project-management/kanban/implementing.md#2025-04-13_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\n# 🆔 Item Identification & Core Details\nid:             # REQUIRED. Unique Project-wide ID (e.g., ITEM-001). Convention: {TYPE_PREFIX}-{NNN}\ntitle:          # REQUIRED. Concise item description.\nstatus:         # REQUIRED. Current Kanban column/workflow state. **MUST MATCH a state defined in WorkflowPolicies.md**. E.g., \"💻 Ready for Dev\"\ntype:           # REQUIRED. Work item type. E.g., \"✨ Feature\". See Types.\n\n# 🌊 Flow Management Attributes\npriority:       # Recommended for ordering Input Queues. E.g., \"🔼 High\". See Priorities.\nblocked:        # Optional. Use status \"🚧 Blocked\" OR a boolean `blocked: true`.\nblocked_reason: # Required if Blocked. Text explaining the impediment.\n# wip_limit_exempt: # Optional boolean for expedited items (use with caution & clear policy).\n\n# ⏱️ Metrics Tracking Attributes (Timestamps are key!)\ncreated_date:   # Recommended. Date item entered the system. YYYY-MM-DD.\nupdated_date:   # REQUIRED for metrics. Timestamp of *last status change*. YYYY-MM-DD HH:MM:SS. **Update this whenever `status` changes!**\n# lead_time_start_date: # Optional: Date committed to (e.g., moved from raw Input).\n# cycle_time_start_date: # Optional: Date work *actively* started (e.g., moved to Dev In Progress).\n# completion_date:      # Optional: Date moved to final Done status. (Can be inferred from last update if status is Done).\n\n# 🧑‍💻 Assignment & Context\nassigned_to:    # Optional. Who is currently pulling/working on it.\nparent_area:    # Optional. Path to the AREA/_overview.md file.\nrelated_docs:   # Optional. Links. **Crucially, link to your WorkflowPolicies.md**. [\"docs/WorkflowPolicies.md\"]\ntags:           # Optional. Keywords for filtering.\n---\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Angular Components TypeScript\nDESCRIPTION: Shows component composition by importing and using child components within a parent component template.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/angular-developer-llms-context-20250406.md#2025-04-13_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport {ProfilePhoto} from 'profile-photo.ts';\n\n@Component({\n  selector: 'user-profile',\n  imports: [ProfilePhoto],\n  template: `\n    <h1>User profile</h1>\n    <profile-photo />\n    <p>This is the user profile page</p>\n  `,\n})\nexport class UserProfile {\n  // Component behavior is defined in here\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Button Group with Bootstrap Classes in HTML\nDESCRIPTION: Demonstrates how to create a group of three buttons using Bootstrap's button and button group classes.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/bootstrap-specialist-llms-context-20250406.md#2025-04-13_snippet_19\n\nLANGUAGE: html\nCODE:\n```\n<button type=\"button\" class=\"btn btn-primary\">Left</button>\n<button type=\"button\" class=\"btn btn-primary\">Middle</button>\n<button type=\"button\" class=\"btn btn-primary\">Right</button>\n```\n\n----------------------------------------\n\nTITLE: Configuring Client Hydration\nDESCRIPTION: Demonstrates how to enable client-side hydration in Angular applications using provideClientHydration with bootstrapApplication.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/angular-developer-llms-context-20250406.md#2025-04-13_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  bootstrapApplication,\n  provideClientHydration,\n} from '@angular/platform-browser';\n...\n\nbootstrapApplication(AppComponent, {\n  providers: [provideClientHydration()]\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Base Layout in Astro\nDESCRIPTION: Defines a base layout component with standard HTML structure including header, footer, and meta tags.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/astro-developer-llms-context-20250406.md#2025-04-13_snippet_17\n\nLANGUAGE: astro\nCODE:\n```\n---\nimport Header from '../components/Header.astro';\nimport Footer from '../components/Footer.astro';\nimport '../styles/global.css';\nconst pageTitle = \"Home Page\";\n---\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <link rel=\"icon\" type=\"image/svg+xml\" href=\"/favicon.svg\" />\n    <meta name=\"viewport\" content=\"width=device-width\" />\n    <meta name=\"generator\" content={Astro.generator} />\n    <title>{pageTitle}</title>\n  </head>\n  <body>\n    <Header />\n    <h1>{pageTitle}</h1>\n    <Footer />\n    <script>\n      import \"../scripts/menu.js\";\n    </script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Performing Semantic Search in Elasticsearch\nDESCRIPTION: This snippet demonstrates how to use the semantic query type to perform a semantic search on a semantic_text field. It searches for \"Best surfing places\" in the \"inference_field\".\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/elasticsearch-specialist-llms-context-20250406.md#2025-04-13_snippet_32\n\nLANGUAGE: console\nCODE:\n```\nGET my-index-000001/_search\n{\n  \"query\": {\n    \"semantic\": {\n      \"field\": \"inference_field\",\n      \"query\": \"Best surfing places\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON Structure for Roo Orchestrator\nDESCRIPTION: Defines the core configuration for the Roo orchestrator including role definition, custom instructions, and access permissions. The configuration specifies capabilities for task decomposition, workflow management, and mode-specific delegation patterns.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/knowledge/community_mode_ideas.md#2025-04-13_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"slug\": \"advanced-orchestrator\",\n  \"name\": \"Advanced Orchestrator\",\n  \"roleDefinition\": \"You are Roo, a strategic workflow orchestrator who coordinates complex tasks by delegating them to appropriate specialized modes. You have a comprehensive understanding of each mode's capabilities and limitations, allowing you to effectively break down complex problems into discrete tasks that can be solved by different specialists.\",\n  \"customInstructions\": \"Your role is to coordinate complex workflows by delegating tasks to specialized modes. As an orchestrator, you should:\\n\\n1. When given a complex task, break it down into logical subtasks that can be delegated to appropriate specialized modes:\\n   - Create specific, clearly defined, and scope-limited subtasks\\n   - Ensure each subtask fits within context length limitations\\n   - Make subtask divisions granular enough to prevent misunderstandings and information loss\\n   - Prioritize core functionality implementation over iterative development when task complexity is high\\n\\n2. For each subtask, create a new task with a clear, specific instruction using the new_task tool:\\n   - Choose the most appropriate mode for each task based on its nature and requirements\\n   - Provide detailed requirements and summaries of completed work for context\\n   - Store all subtask-related content in a dedicated prompt directory\\n   - Ensure subtasks focus on their specific stage while maintaining compatibility with other modules\\n\\n3. Track and manage the progress of all subtasks:\\n   - Arrange subtasks in a logical sequence based on dependencies\\n   - Establish checkpoints to validate incremental achievements\\n   - Reserve adequate context space for complex subtasks\\n   - Define clear completion criteria for each subtask\\n   - When a subtask is completed, analyze its results and determine the next steps\\n\\n4. Facilitate effective communication throughout the workflow:\\n   - Use clear, natural language for subtask descriptions (avoid code blocks in descriptions)\\n   - Provide sufficient context information when initiating each subtask\\n   - Keep instructions concise and unambiguous\\n   - Clearly label inputs and expected outputs for each subtask\\n\\n5. Help the user understand how the different subtasks fit together in the overall workflow:\\n   - Provide clear reasoning about why you're delegating specific tasks to specific modes\\n   - Document the workflow architecture and dependencies between subtasks\\n   - Visualize the workflow when helpful for understanding\\n\\n6. When all subtasks are completed, synthesize the results and provide a comprehensive overview of what was accomplished.\\n\\n7. You can also manage custom modes by editing cline_custom_modes.json and .roomodes files directly. This allows you to create, modify, or delete custom modes as part of your orchestration capabilities.\\n\\n8. Ask clarifying questions when necessary to better understand how to break down complex tasks effectively.\\n\\n9. Suggest improvements to the workflow based on the results of completed subtasks.\",\n  \"groups\": [\n    \"read\",\n    [\"edit\", { \"fileRegex\": \"\\\\.roomodes$|cline_custom_modes\\\\.json$\", \"description\": \"Mode configuration files only\" }]\n  ],\n  \"source\": \"global\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Vue Application Instances\nDESCRIPTION: This snippet demonstrates how to create and mount multiple Vue application instances on the same page. Each instance can have its own configuration and global assets.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/vuejs-developer-llms-context-20250406.md#2025-04-13_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nconst app1 = createApp({\n  /* ... */\n})\napp1.mount('#container-1')\n\nconst app2 = createApp({\n  /* ... */\n})\napp2.mount('#container-2')\n```\n\n----------------------------------------\n\nTITLE: Creating Line Generators in D3\nDESCRIPTION: Shows how to create a line generator, which returns path data strings. The curve method can be used to set interpolation.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/031-frontend/d3js-specialist/031-work-fe-d3js-specialist.mode.md#2025-04-13_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nd3.line([x][, y])\n```\n\n----------------------------------------\n\nTITLE: Mapping Framework Options in React/JSX Component\nDESCRIPTION: A React/JSX code snippet that maps through framework quickstart options to render GlassPanel components wrapped in Link elements. Each item includes title, URL path, description and icon information.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/supabase-developer-llms-context-20250406.md#2025-04-13_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n{[\n    {\n      title: 'Next.js',\n      href: '/guides/auth/server-side/nextjs',\n      description:\n        'Automatically configure Supabase in Next.js to use cookies, making your user and their session available on the client and server.',\n      icon: '/docs/img/icons/nextjs-icon',\n    },\n    {\n      title: 'SvelteKit',\n      href: '/guides/auth/server-side/sveltekit',\n      description:\n        'Automatically configure Supabase in SvelteKit to use cookies, making your user and their session available on the client and server.',\n      icon: '/docs/img/icons/svelte-icon',\n    },\n  ].map((item) => {\n    return (\n      <Link href={`${item.href}`} key={item.title} passHref>\n        <GlassPanel title={item.title} background={false} icon={item.icon}>\n          {item.description}\n        </GlassPanel>\n      </Link>\n    )\n  })}\n```\n\n----------------------------------------\n\nTITLE: Initializing Supabase Client with TypeScript\nDESCRIPTION: TypeScript code for initializing the Supabase client with optional type safety through generated database types.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/032-backend/supabase-developer/032-work-be-supabase-developer.mode.md#2025-04-13_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\ncreateClient<Database>(url, key)\n```\n\n----------------------------------------\n\nTITLE: Installing Astro DB\nDESCRIPTION: Command to install the Astro DB integration.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/astro-developer-llms-context-20250406.md#2025-04-13_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\nnpx astro add db\n```\n\n----------------------------------------\n\nTITLE: Flex Item Alignment\nDESCRIPTION: Examples of flex container alignment utilities.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/bootstrap-specialist-llms-context-20250406.md#2025-04-13_snippet_16\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"d-flex align-items-start\">...</div>\n<div class=\"d-flex align-items-end\">...</div>\n<div class=\"d-flex align-items-center\">...</div>\n<div class=\"d-flex align-items-baseline\">...</div>\n<div class=\"d-flex align-items-stretch\">...</div>\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Modes Configuration Structure in JSON\nDESCRIPTION: Basic JSON structure for defining custom modes in Roo Code. Each mode includes a unique slug, display name, role definition, allowed tool groups, and optional custom instructions.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/knowledge/custom_modes.md#2025-04-13_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"customModes\": [\n    {\n      \"slug\": \"mode-name\",\n      \"name\": \"Mode Display Name\",\n      \"roleDefinition\": \"Mode's role and capabilities\",\n      \"groups\": [\"read\", \"edit\"],\n      \"customInstructions\": \"Additional guidelines\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Staggered Animation with AnimeJS\nDESCRIPTION: Demonstrates staggered animation setup using AnimeJS for multiple '.square' elements with alternating y-position and rotation values. The animation loops and alternates direction.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/animejs-specialist-llms-context-20250406.md#2025-04-13_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nimport { animate, stagger } from 'animejs';\n\nconst animation = animate('.square', {\n  y: stagger(['-2.75rem', '2.75rem']),\n  rotate: { from: stagger('-.125turn') },\n  loop: true,\n  alternate: true\n});\n```\n\n----------------------------------------\n\nTITLE: Using CSS Variables for Page Styling in Bootstrap\nDESCRIPTION: Example of using Bootstrap's CSS variables to set base styling for the page font and link colors. It demonstrates the flexibility of CSS variables compared to Sass variables for runtime modifications.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/bootstrap-specialist-llms-context-20250406.md#2025-04-13_snippet_35\n\nLANGUAGE: CSS\nCODE:\n```\nbody {\n  font: 1rem/1.5 var(--bs-font-sans-serif);\n}\na {\n  color: var(--bs-blue);\n}\n```\n\n----------------------------------------\n\nTITLE: Angular Core API Type Definitions TypeScript\nDESCRIPTION: Defines core Angular APIs including rxjs imports, signal primitives, and core components with type definitions.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/angular-developer-llms-context-20250406.md#2025-04-13_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as _angular_core from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { SIGNAL } from '@angular/core/primitives/signals';\nimport { SignalNode } from '@angular/core/primitives/signals';\nimport { Subject } from 'rxjs';\nimport { Subscription } from 'rxjs';\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js for Static Site Generation\nDESCRIPTION: Configuration in next.config.js to enable static site generation in Next.js, useful for creating fully static websites that can be deployed to static hosting services.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/condensed_indices/nextjs-developer-condensed-index.md#2025-04-13_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// next.config.js\nmodule.exports = {\n  output: 'export'\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Vector Table for Embeddings in PostgreSQL\nDESCRIPTION: SQL command to create a table that can store vector embeddings for posts. The table includes columns for ID, title, body text, and a vector embedding field with dimension 384.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/supabase-developer-llms-context-20250406.md#2025-04-13_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\ncreate table posts (\n  id serial primary key,\n  title text not null,\n  body text not null,\n  embedding vector(384)\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Flask Blueprint with Template Rendering\nDESCRIPTION: Implements a Flask blueprint that handles route templates with parameters and renders static templates. Includes error handling for template not found situations by returning a 404 response.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/flask-developer-llms-context-20250406.md#2025-04-13_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import Blueprint, render_template, abort\nfrom jinja2 import TemplateNotFound\n\nsimple_page = Blueprint('simple_page', __name__,\n                        template_folder='templates')\n\n@simple_page.route('/', defaults={'page': 'index'})\n@simple_page.route('/<page>')\ndef show(page):\n    try:\n        return render_template(f'pages/{page}.html')\n    except TemplateNotFound:\n        abort(404)\n```\n\n----------------------------------------\n\nTITLE: Executing Transaction with Python Callback\nDESCRIPTION: Implements a transaction using Python driver's callback API to perform operations on multiple collections atomically.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/mongodb-specialist-llms-context-20250406.md#2025-04-13_snippet_15\n\nLANGUAGE: python\nCODE:\n```\ndef callback(session):\n    collection_one = session.client.mydb1.foo\n    collection_two = session.client.mydb2.bar\n    \n    collection_one.insert_one({\"abc\": 1}, session=session)\n    collection_two.insert_one({\"xyz\": 999}, session=session)\n\nwith client.start_session() as session:\n    session.with_transaction(callback)\n```\n\n----------------------------------------\n\nTITLE: Logging Task Completion Status in Markdown\nDESCRIPTION: Template for documenting the final status of the research task, including completion status, outcome, and file references.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/040-assistant/research-context-builder/040-asst-research-context-builder.mode.md#2025-04-13_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n```markdown\n---\n**Status:** ✅ Complete\n**Outcome:** Success\n**Summary:** Research complete. Synthesized findings saved.\n**References:** [`project_journal/research/[TaskID]_[topic_slug].md` (created)]\n```\n```\n\n----------------------------------------\n\nTITLE: Custom Switch with useSwitch Hook\nDESCRIPTION: Implementation of a custom Switch component using the MUI Base useSwitch hook with styling and accessibility features\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/material-ui-specialist-llms-context-20250406.md#2025-04-13_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from 'react';\nimport { useSwitch } from '@mui/base/useSwitch';\nimport { styled } from '@mui/system';\n\nconst BasicSwitch = styled('span')`\n  font-size: 0;\n  position: relative;\n  display: inline-block;\n  width: 32px;\n  height: 20px;\n  background: #B3C3D3;\n  border-radius: 10px;\n  margin: 10px;\n  cursor: pointer;\n\n  &.Switch-disabled {\n    opacity: 0.4;\n    cursor: not-allowed;\n  }\n\n  &.Switch-checked {\n    background: #007FFF;\n  }\n`;\n\nconst Thumb = styled('span')`\n  display: block;\n  width: 14px;\n  height: 14px;\n  top: 3px;\n  left: 3px;\n  border-radius: 16px;\n  background-color: #FFF;\n  position: relative;\n  transition: all 200ms ease;\n\n  .Switch-checked & {\n    left: 14px;\n\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Band Scale in D3.js\nDESCRIPTION: Demonstrates how to construct a new band scale with a specified domain and range. The domain consists of discrete categories, and the range defines the output pixel range.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/d3js-specialist-llms-context-20250406.md#2025-04-13_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nconst x = d3.scaleBand([\"a\", \"b\", \"c\"], [0, 960]);\n```\n\n----------------------------------------\n\nTITLE: Configuring SvelteKit Cloudflare Pages Adapter\nDESCRIPTION: Configuration setup for SvelteKit's Cloudflare adapter including route inclusion/exclusion and platform proxy settings.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/sveltekit-llms-context-20250406.md#2025-04-13_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\n// @errors: 2307\n/// file: svelte.config.js\nimport adapter from '@sveltejs/adapter-cloudflare';\n\nexport default {\n\tkit: {\n\t\tadapter: adapter({\n\t\t\t// See below for an explanation of these options\n\t\t\troutes: {\n\t\t\t\tinclude: ['/*'],\n\t\t\t\texclude: ['<all>']\n\t\t\t},\n\t\t\tplatformProxy: {\n\t\t\t\tconfigPath: undefined,\n\t\t\t\tenvironment: undefined,\n\t\t\t\tpersist: undefined\n\t\t\t}\n\t\t})\n\t}\n};\n```\n\n----------------------------------------\n\nTITLE: Theme Toggle Implementation\nDESCRIPTION: Client-side JavaScript for managing theme toggling with local storage and system preferences\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/astro-developer-llms-context-20250406.md#2025-04-13_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst theme = (() => {\n  const localStorageTheme = localStorage?.getItem(\"theme\") ?? '';\n  if (['dark', 'light'].includes(localStorageTheme)) {\n    return localStorageTheme;\n  }\n  if (window.matchMedia('(prefers-color-scheme: dark)').matches) {\n    return 'dark';\n  }\n    return 'light';\n})();\n        \nif (theme === 'light') {\n  document.documentElement.classList.remove('dark');\n} else {\n  document.documentElement.classList.add('dark');\n}\n\nwindow.localStorage.setItem('theme', theme);\n\nconst handleToggleClick = () => {\n  const element = document.documentElement;\n  element.classList.toggle(\"dark\");\n  \n  const isDark = element.classList.contains(\"dark\");\n  localStorage.setItem(\"theme\", isDark ? \"dark\" : \"light\");\n}\n\ndocument.getElementById(\"themeToggle\")?.addEventListener(\"click\", handleToggleClick);\n```\n\n----------------------------------------\n\nTITLE: Logging Consulted Sources in Markdown\nDESCRIPTION: Template for documenting sources consulted during research, including their relevance and credibility assessment.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/040-assistant/research-context-builder/040-asst-research-context-builder.mode.md#2025-04-13_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n```markdown\n## Sources Consulted\n\n1. [Source Name/URL] - [Brief description of relevance/credibility]\n2. [Source Name/URL] - [Brief description of relevance/credibility]\n```\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for MDTM Kanban Implementation\nDESCRIPTION: Defines the recommended folder structure for organizing Kanban work items using the Markdown-Driven Task Management system.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/knowledge/project-management/kanban/implementing.md#2025-04-13_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nPROJECT_ROOT/\n├── src/                     # Source Code\n├── docs/                    # Supporting Docs (Workflow Policies, DoD, Designs)\n│   └── WorkflowPolicies.md  # 👈 **Define your Kanban board columns (statuses) & WIP limits here!**\n├── tasks/                   # 👈 **Main MDTM Directory for Kanban Items**\n│   ├── _templates/          # 📄 Templates (Essential for consistency)\n│   │   ├── ✨_feature_item.md\n│   │   ├── 🛠️_task_item.md\n│   │   ├── 🐞_bug_item.md\n│   │   └── 💡_spike_item.md\n│   │\n│   ├── INPUT_QUEUE/         # 📥 Optional: Raw, unprioritized input\n│   │   └── IDEA_new_reporting_module.md\n│   │\n│   ├── AREA_authentication/   # 🔑 Product Area: Authentication\n│   │   ├── _overview.md       # Optional: Goals/context for this area\n│   │   ├── 001_✨_mfa_support_feature.md    # Work Item\n│   │   ├── 002_🛠️_optimize_login_query.md # Work Item\n│   │   └── 003_🐞_invalid_token_error.md   # Work Item\n│   │\n│   ├── AREA_payments/         # 💳 Product Area: Payments\n│   │   └── 004_✨_add_new_gateway.md\n│   │\n│   └── AREA_ui_ux/            # 🎨 Product Area: UI/UX Improvements\n│       └── 005_🛠️_improve_dashboard_layout.md\n│\n├── archive/                 # 📦 Optional: Completed items (status = ✅ Done)\n│   └── ...\n└── README.md\n```\n\n----------------------------------------\n\nTITLE: Including Bootstrap via CDN\nDESCRIPTION: Implementation of Bootstrap CSS and JS CDN links with SRI hash verification.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/bootstrap-specialist-llms-context-20250406.md#2025-04-13_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<link href=\"{{< param \"cdn.css\" >}}\" rel=\"stylesheet\" integrity=\"{{< param \"cdn.css_hash\" >}}\" crossorigin=\"anonymous\">\n<script src=\"{{< param \"cdn.js_bundle\" >}}\" integrity=\"{{< param \"cdn.js_bundle_hash\" >}}\" crossorigin=\"anonymous\"></script>\n```\n\n----------------------------------------\n\nTITLE: Django Model Relationship Examples\nDESCRIPTION: Examples of Django model relationship fields for defining database schema relationships\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/condensed_indices/django-developer-condensed-index.md#2025-04-13_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nmodels.ForeignKey\nmodels.ManyToManyField\n```\n\n----------------------------------------\n\nTITLE: Customizing Bootstrap Sass variables\nDESCRIPTION: This Sass code shows how to customize Bootstrap's primary color using a Sass variable. It's part of the recommended approach for theming and customizing Bootstrap.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/031-frontend/bootstrap-specialist/031-work-fe-bootstrap-specialist.mode.md#2025-04-13_snippet_6\n\nLANGUAGE: Sass\nCODE:\n```\n$primary: #your-custom-color;\n```\n\n----------------------------------------\n\nTITLE: Basic Page Component Implementation in Svelte\nDESCRIPTION: Demonstrates creating basic page components using +page.svelte files for home and about pages with navigation links between them.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/sveltekit-llms-context-20250406.md#2025-04-13_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<!--- file: src/routes/+page.svelte --->\n<h1>Hello and welcome to my site!</h1>\n<a href=\"/about\">About my site</a>\n```\n\nLANGUAGE: svelte\nCODE:\n```\n<!--- file: src/routes/about/+page.svelte --->\n<h1>About this site</h1>\n<p>TODO...</p>\n<a href=\"/\">Home</a>\n```\n\n----------------------------------------\n\nTITLE: Indexing Vector Data in Elasticsearch\nDESCRIPTION: Bulk indexes sample vector data with associated metadata using the _bulk API endpoint.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/elasticsearch-specialist-llms-context-20250406.md#2025-04-13_snippet_23\n\nLANGUAGE: console\nCODE:\n```\nPOST my-image-index/_bulk?refresh=true\n{ \"index\": { \"_id\": \"1\" } }\n{ \"image-vector\": [1, 5, -20], \"file-type\": \"jpg\", \"title\": \"mountain lake\" }\n{ \"index\": { \"_id\": \"2\" } }\n{ \"image-vector\": [42, 8, -15], \"file-type\": \"png\", \"title\": \"frozen lake\"}\n{ \"index\": { \"_id\": \"3\" } }\n{ \"image-vector\": [15, 11, 23], \"file-type\": \"jpg\", \"title\": \"mountain lake lodge\" }\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Front Matter for Lean Flow and Metrics Tracking\nDESCRIPTION: This YAML snippet shows the recommended front matter structure for work item files in a Lean MDTM system. It includes fields for identification, value definition, flow management, and metrics tracking to support Lean principles.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/knowledge/project-management/lean-principles/README.md#2025-04-13_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\n# 🆔 Item Identification & Core Details\nid:             # REQUIRED. Unique ID (e.g., ITEM-001). Convention: {TYPE_PREFIX}-{NNN}\ntitle:          # REQUIRED. Clear description of work/value.\nstatus:         # REQUIRED. Current stage in the value stream/workflow. E.g., \"🔬 Analysis\". **MUST MATCH a defined state.**\ntype:           # REQUIRED. Work item type. E.g., \"✨ Value Item\". See Types.\n\n# 🏆 Value & Prioritization\npriority:       # Recommended for ordering input queues. E.g., \"🔼 High\". See Priorities.\nvalue_score:    # Optional. Estimate of customer/business value (e.g., 1-10, MoSCoW). Helps prioritization.\n# cost_of_delay:  # Optional. Qualitative assessment if item is delayed (e.g., High, Medium, Low).\n\n# 🌊 Flow Management\nblocked:        # Optional. Use status \"🚧 Blocked\" OR boolean `blocked: true`.\nblocked_reason: # Required if Blocked. Explanation of impediment.\n\n# ⏱️ Metrics Tracking Attributes (Timestamp precision is important!)\ncreated_date:   # Recommended. Date item identified/requested. YYYY-MM-DD.\nupdated_date:   # REQUIRED for metrics. Timestamp of *last status change*. YYYY-MM-DD HH:MM:SS. **UPDATE THIS WHEN STATUS CHANGES!**\n# lead_time_start_date: # Optional: Date committed to start work (e.g., moved from Backlog).\n# cycle_time_start_date: # Optional: Date active work began (e.g., moved to Development).\ncompletion_date:      # Optional: Date moved to final Done/Delivered status. YYYY-MM-DD HH:MM:SS.\n```\n\n----------------------------------------\n\nTITLE: Iterating over Selection Elements with each() in D3.js\nDESCRIPTION: Demonstrates how to use the each() method to iterate over selected elements, accessing both parent and child data simultaneously. Useful for complex data binding scenarios.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/d3js-specialist-llms-context-20250406.md#2025-04-13_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nparent.each(function(p, j) {\n  d3.select(this)\n    .selectAll(\".child\")\n      .text(d => `child ${d.name} of ${p.name}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Subclassing Forms in Django\nDESCRIPTION: Demonstrates form inheritance by extending a base ContactForm with additional fields.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/django-developer-llms-context-20250406.md#2025-04-13_snippet_4\n\nLANGUAGE: pycon\nCODE:\n```\n>>> class ContactFormWithPriority(ContactForm):\n...     priority = forms.CharField()\n...\n>>> f = ContactFormWithPriority(auto_id=False)\n>>> print(f)\n<div>Subject:<input type=\"text\" name=\"subject\" maxlength=\"100\" required></div>\n<div>Message:<textarea name=\"message\" cols=\"40\" rows=\"10\" required></textarea></div>\n<div>Sender:<input type=\"email\" name=\"sender\" required></div>\n<div>Cc myself:<input type=\"checkbox\" name=\"cc_myself\"></div>\n<div>Priority:<input type=\"text\" name=\"priority\" required></div>\n```\n\n----------------------------------------\n\nTITLE: Vector Extension Installation\nDESCRIPTION: SQL command to enable pgvector extension for vector storage capabilities\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/033-database/neon-db-specialist/033-work-db-neon-db-specialist.mode.md#2025-04-13_snippet_7\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE EXTENSION IF NOT EXISTS pgvector;\n```\n\n----------------------------------------\n\nTITLE: Creating a Reusable Function with call() in D3\nDESCRIPTION: Shows how to create a reusable function that sets multiple attributes on a selection using the call() method for method chaining. The example creates a name function and demonstrates two ways to use it.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/d3js-specialist-llms-context-20250406.md#2025-04-13_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\nfunction name(selection, first, last) {\n  selection\n      .attr(\"first-name\", first)\n      .attr(\"last-name\", last);\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nd3.selectAll(\"div\").call(name, \"John\", \"Snow\");\n```\n\nLANGUAGE: javascript\nCODE:\n```\nname(d3.selectAll(\"div\"), \"John\", \"Snow\");\n```\n\n----------------------------------------\n\nTITLE: Creating Mermaid Diagrams in MDTM Task Files\nDESCRIPTION: Example of using Mermaid diagrams to visualize workflows, states, and other process-related information within task documentation.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/knowledge/project-management/markdown-driven-task-management-MDTM/markdown-driven-task-management-MDTM-feature-structure/implementing.md#2025-04-13_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n```mermaid\ngraph TD\n    A[ToDo] --> B{Generating};\n    B --> C[Review];\n    C -- Changes Needed --> B;\n    C -- OK --> D[Testing];\n    D --> E((Done));\n```\n```\n\n----------------------------------------\n\nTITLE: Running Bundle Script with Default Settings in Bash\nDESCRIPTION: Executes the bundle_modes.js script using Node.js with default settings. This reads from ./roo-modes-dev/ directory and writes to ./bundled_modes.json.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/dev_tools/bundle_modes_sop.md#2025-04-13_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnode dev_tools/bundle_modes.js\n```\n\n----------------------------------------\n\nTITLE: Configuring Senior Developer Code Reviewer Mode\nDESCRIPTION: JSON configuration for an architectural code reviewer mode focused on system-level implications and technical decisions. Includes permissions for read access and Markdown file editing only.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/knowledge/community_mode_ideas.md#2025-04-13_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"slug\": \"senior-reviewer\",\n  \"name\": \"Senior Dev Code Reviewer\",\n  \"roleDefinition\": \"You are Roo, a highly experienced technical architect providing strategic code review feedback focused on system-level implications and architectural decisions.\\n\\nYour core principles are:\\n\\n1. ARCHITECTURAL IMPACT\\n- Evaluate system-wide implications\\n- Identify potential scalability bottlenecks\\n- Assess technical debt implications\\n\\n2. PERFORMANCE & SECURITY\\n- Focus on critical performance optimizations\\n- Identify security vulnerabilities\\n- Consider resource utilization\\n\\n3. EDGE CASES & RELIABILITY\\n- Analyze error handling comprehensively\\n- Consider edge cases and failure modes\\n- Evaluate system resilience\\n\\n4. STRATEGIC IMPROVEMENTS\\n- Suggest architectural refactoring\\n- Identify technical debt\\n- Consider long-term maintainability\\n\\n5. TRADE-OFF ANALYSIS\\n- Discuss architectural trade-offs\\n- Consider alternative approaches\\n- Evaluate technical decisions\",\n  \"customInstructions\": \"When reviewing code:\\n1. Focus on architectural and systemic implications\\n2. Evaluate performance and scalability concerns\\n3. Consider security implications\\n4. Analyze error handling and edge cases\\n5. Suggest strategic improvements\\n6. Discuss technical trade-offs\\n7. Be direct and concise\\n8. Think about long-term maintainability\",\n  \"groups\": [\n    \"read\",\n    [\n      \"edit\",\n      {\n        \"fileRegex\": \"\\\\.(md)$\",\n        \"description\": \"Markdown files for review output\"\n      }\n    ],\n    \"command\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Environment Variables for Supabase in Next.js\nDESCRIPTION: Environment variable configuration for a Next.js application using Supabase. Includes the Supabase URL and anonymous key needed for client-side access.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/supabase-developer-llms-context-20250406.md#2025-04-13_snippet_12\n\nLANGUAGE: text\nCODE:\n```\nNEXT_PUBLIC_SUPABASE_URL=<your_supabase_project_url>\nNEXT_PUBLIC_SUPABASE_ANON_KEY=<your_supabase_anon_key>\n```\n\n----------------------------------------\n\nTITLE: Configuring JavaScript Import Aliases in jsconfig.json\nDESCRIPTION: JSON configuration for setting up import path aliases in a JavaScript project. This configuration enables the use of the '@/' prefix to reference files from the project root, providing cleaner imports.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/shadcn-ui-specialist-llms-context-20250406.md#2025-04-13_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"paths\": {\n      \"@/*\": [\"./\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Component with External Templates in Angular\nDESCRIPTION: Shows how to configure an Angular component using external template and style files via templateUrl and styleUrl properties.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/angular-developer-llms-context-20250406.md#2025-04-13_snippet_20\n\nLANGUAGE: angular-ts\nCODE:\n```\n@Component({\n  selector: 'profile-photo',\n  templateUrl: 'profile-photo.html',\n  styleUrl: 'profile-photo.css',\n})\nexport class ProfilePhoto { }\n```\n\n----------------------------------------\n\nTITLE: Implementing Dependency Injection\nDESCRIPTION: Shows how to use FastAPI's dependency injection system with common parameters.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/fastapi-developer-llms-context-20250406.md#2025-04-13_snippet_31\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/items/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n\n@app.get(\"/users/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons\n```\n\n----------------------------------------\n\nTITLE: Custom Validation Form\nDESCRIPTION: Form implementation with Bootstrap custom validation styles and feedback messages.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/bootstrap-specialist-llms-context-20250406.md#2025-04-13_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<form class=\"row g-3 needs-validation\" novalidate>\n  <div class=\"col-md-4\">\n    <label for=\"validationCustom01\" class=\"form-label\">First name</label>\n    <input type=\"text\" class=\"form-control\" id=\"validationCustom01\" value=\"Mark\" required>\n    <div class=\"valid-feedback\">\n      Looks good!\n    </div>\n  </div>\n  <!-- Additional form fields -->\n</form>\n```\n\n----------------------------------------\n\nTITLE: Implementing FastAPI Lifespan Events\nDESCRIPTION: Creates an async context manager for handling application lifecycle events, particularly for ML model management.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/fastapi-developer-llms-context-20250406.md#2025-04-13_snippet_39\n\nLANGUAGE: python\nCODE:\n```\nfrom contextlib import asynccontextmanager\n\nfrom fastapi import FastAPI\n\nfake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n\nclass Model:\n    def __init__(self):\n        self.data = {\"key\": \"value\"}\n\n    def predict(self, x):\n        return self.data\n\n@asynccontextmanager\nasync def lifespan(app: FastAPI):\n    # Load the ML model\n    model = Model()\n    app.state.model = model\n    yield\n    # Clean up the ML models and release the resources\n    app.state.model = None\n\napp = FastAPI(lifespan=lifespan)\n```\n\n----------------------------------------\n\nTITLE: Using Type Guards with typeof in TypeScript\nDESCRIPTION: Illustrates the use of type guards with the typeof operator in TypeScript. Type guards allow for safe type narrowing within conditional blocks.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/031-frontend/typescript-specialist/031-work-fe-typescript-specialist.mode.md#2025-04-13_snippet_14\n\nLANGUAGE: TypeScript\nCODE:\n```\nif (typeof value === \"string\") { ... }\n```\n\n----------------------------------------\n\nTITLE: Configuring SvelteKit Vercel Adapter\nDESCRIPTION: Shows how to set up the Vercel adapter in a SvelteKit project with optional configuration settings.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/sveltekit-llms-context-20250406.md#2025-04-13_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nimport adapter from '@sveltejs/adapter-vercel';\n\nexport default {\n\tkit: {\n\t\tadapter: adapter({\n\t\t\t// see below for options that can be set here\n\t\t})\n\t}\n};\n```\n\n----------------------------------------\n\nTITLE: Initial Task Log Template in Markdown\nDESCRIPTION: Template for initializing a new accessibility task log with basic structure including task ID and goal definition.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/031-frontend/accessibility-specialist/031-work-fe-accessibility-specialist.mode.md#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Task Log: [TaskID] - Accessibility Audit/Fix: [UI Area]\\n\\n**Goal:** Audit [UI area] for WCAG [level] compliance based on [context/escalation reason].\n```\n\n----------------------------------------\n\nTITLE: Clerk Middleware Configuration\nDESCRIPTION: Configuration for Clerk middleware in Next.js, including route matchers for protected paths and API endpoints.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/clerk-auth-specialist-llms-context-20250406.md#2025-04-13_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { clerkMiddleware } from '@clerk/nextjs/server'\n\nexport default clerkMiddleware()\n\nexport const config = {\n  matcher: [\n    '/((?!_next|[^?]*\\.(?:html?|css|js(?!on)|jpe?g|webp|png|gif|svg|ttf|woff2?|ico|csv|docx?|xlsx?|zip|webmanifest)).*)',\n    '/(api|trpc)(.*)',\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Layout Component Structure\nDESCRIPTION: Shows how to create a reusable layout component with meta tags, navigation, and content slots\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/astro-developer-llms-context-20250406.md#2025-04-13_snippet_9\n\nLANGUAGE: astro\nCODE:\n```\n---\n// src/layouts/MySiteLayout.astro\nimport BaseHead from '../components/BaseHead.astro';\nimport Footer from '../components/Footer.astro';\nconst { title } = Astro.props;\n---\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n    <BaseHead title={title}/>\n  </head>\n  <body>\n    <nav>\n      <a href=\"#\">Home</a>\n      <a href=\"#\">Posts</a>\n      <a href=\"#\">Contact</a>\n    </nav>\n    <h1>{title}</h1>\n    <article>\n      <slot /> <!-- your content is injected here -->\n    </article>\n    <Footer />\n  </body>\n  <style>\n    h1 {\n      font-size: 2rem;\n    }\n  </style>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Configuring npm scripts for Vite build and preview\nDESCRIPTION: Defines npm scripts for building and previewing a Vite project. The 'build' script runs the Vite build process, while 'preview' starts a local server to preview the built files.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/vite-specialist-llms-context-20250406.md#2025-04-13_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"build\": \"vite build\",\n    \"preview\": \"vite preview\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing CSS Variable Prefix in Material UI\nDESCRIPTION: Demonstrates how to change the default CSS variable prefix in Material UI using the createTheme function. It shows examples of setting a custom prefix and removing the prefix entirely.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/material-ui-specialist-llms-context-20250406.md#2025-04-13_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\ncreateTheme({ cssVariables: { cssVarPrefix: 'any' } });\n\n// generated stylesheet:\n// --any-palette-primary-main: ...;\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncreateTheme({ cssVariables: { cssVarPrefix: '' } });\n\n// generated stylesheet:\n// --palette-primary-main: ...;\n```\n\n----------------------------------------\n\nTITLE: Feature Item Template in Markdown\nDESCRIPTION: Template for creating new feature work items with basic YAML front matter setup.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/knowledge/project-management/kanban/implementing.md#2025-04-13_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n---\nid:             # ITEM-NNN\ntitle:          # ✨ Feature: Concise value description\nstatus:         \"📥 Backlog\" # Initial status\ntype:           \"✨ Feature\"\npriority:       \"▶️ Medium\"\n# blocked:\n# blocked_reason:\ncreated_date:   # YYYY-MM-DD\nupdated_date:   # YYYY-MM-DD HH:MM:SS\n# assigned_to:\nparent_area:    # Path to AREA/_overview.md\nrelated_docs:   [\"docs/WorkflowPolicies.md\"] # Link to your policies!\ntags:           []\n---\n\n# << Feature Title >>\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Feature/Value Streams in MDTM\nDESCRIPTION: Illustrates the recommended directory structure for organizing Agile projects using Markdown-Driven Task Management, with a focus on feature-based organization rather than time-based (sprints). Shows how to organize tasks, templates, backlog items, and feature-specific work.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/knowledge/project-management/agile-principles/README.md#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nPROJECT_ROOT/\n├── src/                     # Source Code\n├── docs/                    # Supporting Docs (User Personas, High-Level Designs)\n├── tasks/                   # 👈 **Main MDTM Directory**\n│   ├── _templates/          # 📄 Optional: Standard task/story templates\n│   │   ├── 📖_user_story.md\n│   │   ├── 🛠️_task.md\n│   │   └── 🐞_bug.md\n│   │\n│   ├── BACKLOG/             # 📥 Optional: Contains unsorted/unrefined items\n│   │   └── IDEA_new_reporting_feature.md\n│   │\n│   ├── FEATURE_authentication/  # 🔑 Feature: Authentication (Value Stream)\n│   │   ├── _overview.md       # 🗺️ Optional: Epic/Feature summary\n│   │   ├── 001_📖_user_login.md   # 📖 User Story\n│   │   ├── 002_🛠️_setup_auth_db.md # 🛠️ Technical Task supporting the story\n│   │   └── 003_📖_password_reset.md # 📖 User Story\n│   │\n│   ├── FEATURE_user_profile/  # 👤 Feature: User Profile\n│   │   ├── _overview.md\n│   │   └── 004_📖_view_profile_data.md\n│   │\n│   └── AREA_tech_debt/        # 🧹 Area: Non-feature work\n│       └── 005_🧹_refactor_legacy_api.md\n│\n├── archive/                 # 📦 Optional: Completed items (mirrors feature structure)\n│   └── ...\n└── README.md\n```\n\n----------------------------------------\n\nTITLE: Applying a Line Generator to SVG Path in D3.js\nDESCRIPTION: This code shows how to use a previously defined line generator to compute the 'd' attribute of an SVG path element, binding data to the path. The line generator transforms the data into a path string.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/d3js-specialist-llms-context-20250406.md#2025-04-13_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\npath.datum(data).attr(\"d\", line);\n```\n\n----------------------------------------\n\nTITLE: Basic Vite Configuration Structure\nDESCRIPTION: The most basic Vite configuration file structure using ES modules syntax.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/vite-specialist-llms-context-20250406.md#2025-04-13_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  // config options\n}\n```\n\n----------------------------------------\n\nTITLE: Creating New Angular Workspace\nDESCRIPTION: Command to create a new Angular workspace and initial starter app with feature selection prompts.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/angular-developer-llms-context-20250406.md#2025-04-13_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nng new my-app\n```\n\n----------------------------------------\n\nTITLE: Creating Vue Application Instance\nDESCRIPTION: Shows different ways to create a Vue application instance using createApp() method.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/vuejs-developer-llms-context-20250406.md#2025-04-13_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nfunction createApp(rootComponent: Component, rootProps?: object): App\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue'\n\nconst app = createApp({\n  /* root component options */\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue'\nimport App from './App.vue'\n\nconst app = createApp(App)\n```\n\n----------------------------------------\n\nTITLE: Querying with Greater Than Operator\nDESCRIPTION: Shows how to query documents using the $gt comparison operator to find records with quantity greater than 20.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/mongodb-specialist-llms-context-20250406.md#2025-04-13_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\ndb.inventory.find( { quantity: { $gt: 20 } } )\n```\n\n----------------------------------------\n\nTITLE: Organizing Directory Structure for CPM Tasks in MDTM\nDESCRIPTION: A recommended directory structure for organizing CPM tasks according to Work Breakdown Structure (WBS). This structure helps maintain clear organization of task files within appropriate WBS elements, includes templates for consistency, and provides logical project organization.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/knowledge/project-management/critical-path-method/README.md#2025-04-13_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nPROJECT_ROOT/\n├── docs/                    # Supporting Docs (Project Charter, Scope Statement)\n├── tasks/                   # 👈 **Main MDTM Directory for CPM Task Data**\n│   ├── _templates/          # 📄 Template for CPM task files\n│   │   └── 🏗️_cpm_task.md\n│   │\n│   ├── 1.0_Project_Initiation/ # 📂 WBS Level 1\n│   │   ├── 1.1_Define_Scope.md       # 📝 Task File\n│   │   └── 1.2_Secure_Funding.md\n│   │\n│   ├── 2.0_Planning/           # 📂 WBS Level 1\n│   │   ├── 2.1_Develop_Project_Plan/ # 📂 WBS Level 2\n│   │   │   ├── 2.1.1_Identify_Tasks.md # 📝 Task File (This task defines other tasks!)\n│   │   │   └── 2.1.2_Estimate_Durations.md\n│   │   ├── 2.2_Define_Resources.md\n│   │\n│   ├── 3.0_Execution/          # 📂 WBS Level 1\n│   │   ├── 3.1_Develop_Module_A/   # 📂 WBS Level 2\n│   │   │    ├── 3.1.1_Code_Feature_X.md # 📝 Task File\n│   │   │    └── 3.1.2_Test_Feature_X.md\n│   │   └── 3.2_Develop_Module_B.md\n│   │\n│   └── 4.0_Closure/            # 📂 WBS Level 1\n│       └── 4.1_Final_Report.md\n│\n├── archive/                 # 📦 Optional: Completed tasks\n│   └── ...\n└── README.md\n```\n\n----------------------------------------\n\nTITLE: FastAPI Test Client Setup\nDESCRIPTION: Shows how to set up and use TestClient for API testing.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/fastapi-developer-llms-context-20250406.md#2025-04-13_snippet_36\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi.testclient import TestClient\n\nfrom app.main import app\n\nclient = TestClient(app)\n\ndef test_read_main():\n    response = client.get(\"/\")\n    assert response.status_code == 200\n    assert response.json() == {\"msg\": \"Hello World\"}\n```\n\n----------------------------------------\n\nTITLE: Basic Nested Query in Elasticsearch\nDESCRIPTION: Demonstrates a nested query searching for objects with specific name and count criteria within the nested field.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/elasticsearch-specialist-llms-context-20250406.md#2025-04-13_snippet_6\n\nLANGUAGE: console\nCODE:\n```\nGET /my-index-000001/_search\n{\n  \"query\": {\n    \"nested\": {\n      \"path\": \"obj1\",\n      \"query\": {\n        \"bool\": {\n          \"must\": [\n            { \"match\": { \"obj1.name\": \"blue\" } },\n            { \"range\": { \"obj1.count\": { \"gt\": 5 } } }\n          ]\n        }\n      },\n      \"score_mode\": \"avg\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Self-accepting Module with HMR in JavaScript\nDESCRIPTION: Demonstrates how to create a self-accepting module using `import.meta.hot.accept()`. The callback receives the updated module, allowing for handling of the hot update.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/vite-specialist-llms-context-20250406.md#2025-04-13_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nexport const count = 1\n\nif (import.meta.hot) {\n  import.meta.hot.accept((newModule) => {\n    if (newModule) {\n      // newModule is undefined when SyntaxError happened\n      console.log('updated: count is now ', newModule.count)\n    }\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Configuration for Kanban Work Items\nDESCRIPTION: Defines the YAML structure for work items with fields supporting Kanban flow management, metrics tracking, and item identification.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/knowledge/project-management/kanban/README.md#2025-04-13_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\n# 🆔 Item Identification & Core Details\nid:             # REQUIRED. Unique Project-wide ID (e.g., ITEM-001, BUG-003). Convention: {TYPE_PREFIX}-{NNN}\ntitle:          # REQUIRED. Concise item description.\nstatus:         # REQUIRED. Current Kanban column/workflow state. E.g., \"📥 Ready for Dev\". See Statuses below.\ntype:           # REQUIRED. Work item type. E.g., \"✨ Feature\", \"🐞 Bug\". See Types below.\n\n# 🌊 Flow Management Attributes\npriority:       # Recommended for ordering Input Queues (Backlogs). E.g., \"🔼 High\". See Priorities.\nblocked:        # Optional. Is the item blocked? (Boolean: true/false or Status: \"🚧 Blocked\")\nblocked_reason: # Optional. Text explaining blocker if status is Blocked. \"Waiting for API spec\"\n# wip_limit_exempt: # Optional (Boolean). E.g., For expedited items bypassing some WIP limits. Needs clear policy.\n\n# ⏱️ Metrics Tracking Attributes (Optional - requires tooling/scripts to calculate)\n# lead_time_start_date: # Date item was requested/added to first input queue. YYYY-MM-DD\n# cycle_time_start_date: # Date item moved into the first \"active work\" status (e.g., Development). YYYY-MM-DD\n# completion_date:      # Date item moved to the final \"Done\" status. YYYY-MM-DD\ncreated_date:   # Recommended. YYYY-MM-DD\nupdated_date:   # Recommended. YYYY-MM-DD HH:MM:SS. CRITICAL for tracking time-in-status if calculating metrics.\n\n# 🧑‍💻 Assignment & Context\nassigned_to:    # Optional. Who is currently working on it. \"🧑‍💻 Dev:Chen\", \"🤖 AI\"\nparent_area:    # Optional. Path to the AREA/_overview.md file.\nrelated_docs:   # Optional. Links to Designs, Policies, Specs. [\"docs/WorkflowPolicies.md\"]\ntags:           # Optional. Keywords for filtering. [\"api\", \"performance\", \"ux\"]\n---\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up Repository for Material UI\nDESCRIPTION: Commands to clone the Material UI repository, add the upstream remote, and install dependencies using pnpm.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/material-ui-specialist-llms-context-20250406.md#2025-04-13_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/<your username>/material-ui.git\ncd material-ui\ngit remote add upstream https://github.com/mui/material-ui.git\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Creating a Next.js app with Supabase integration\nDESCRIPTION: Uses create-next-app command with the with-supabase template to set up a Next.js project pre-configured with Cookie-based Auth, TypeScript, and Tailwind CSS.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/supabase-developer-llms-context-20250406.md#2025-04-13_snippet_43\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app -e with-supabase\n```\n\n----------------------------------------\n\nTITLE: Vite HMR API Usage\nDESCRIPTION: Example of safely using Vite's Hot Module Replacement API with production safeguard\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/condensed_indices/vite-specialist-condensed-index.md#2025-04-13_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nif (import.meta.hot) { ... }\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Server-Side Data Fetching in Next.js\nDESCRIPTION: Demonstrates a simple server-side data fetch using the fetch API in an asynchronous React Server Component. The component fetches blog posts from an API endpoint and renders them in an unordered list.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/nextjs-developer-llms-context-20250406.md#2025-04-13_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nexport default async function Page() {\n  const data = await fetch('https://api.vercel.app/blog')\n  const posts = await data.json()\n  return (\n    <ul>\n      {posts.map((post) => (\n        <li key={post.id}>{post.title}</li>\n      ))}\n    </ul>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Row Level Security (RLS) Policy Creation in PostgreSQL\nDESCRIPTION: SQL command pattern for creating Row Level Security policies in Supabase PostgreSQL databases, which control access to data based on the authenticated user.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/032-backend/supabase-developer/032-work-be-supabase-developer.mode.md#2025-04-13_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\ncreate policy \"name\" on table for {SELECT|INSERT|UPDATE|DELETE} using ( (select auth.uid()) = user_id )\n```\n\n----------------------------------------\n\nTITLE: Controlling Menu Open State\nDESCRIPTION: Example of controlling menu open state using the Dropdown component's open and onOpenChange props\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/material-ui-specialist-llms-context-20250406.md#2025-04-13_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Dropdown open={open} onOpenChange={handleOpenChange}>\n  {/* Menu components */}\n</Dropdown>\n```\n\n----------------------------------------\n\nTITLE: Defining ModuleRunnerTransport Interface in TypeScript\nDESCRIPTION: Defines the interface for transport mechanisms used by ModuleRunner to communicate with the Vite server. It includes methods for connecting, disconnecting, sending data, and invoking remote procedures.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/vite-specialist-llms-context-20250406.md#2025-04-13_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ModuleRunnerTransport {\n  connect?(handlers: ModuleRunnerTransportHandlers): Promise<void> | void\n  disconnect?(): Promise<void> | void\n  send?(data: HotPayload): Promise<void> | void\n  invoke?(data: HotPayload): Promise<{ result: any } | { error: any }>\n  timeout?: number\n}\n```\n\n----------------------------------------\n\nTITLE: Using Server Functions with Actions in React Client Components\nDESCRIPTION: This snippet illustrates how to use Server Functions within Actions in Client Components, including state management and error handling.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/react-specialist-llms-context-20250406.md#2025-04-13_snippet_33\n\nLANGUAGE: jsx\nCODE:\n```\n\"use client\";\n\nimport {updateName} from './actions';\n\nfunction UpdateName() {\n  const [name, setName] = useState('');\n  const [error, setError] = useState(null);\n\n  const [isPending, startTransition] = useTransition();\n\n  const submitAction = async () => {\n    startTransition(async () => {\n      const {error} = await updateName(name);\n      if (error) {\n        setError(error);\n      } else {\n        setName('');\n      }\n    })\n  }\n  \n  return (\n    <form action={submitAction}>\n      <input type=\"text\" name=\"name\" disabled={isPending}/>\n      {error && <span>Failed: {error}</span>}\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Shadcn UI with CLI in React/Next.js\nDESCRIPTION: CLI command to set up Shadcn UI in a project, including dependencies, CSS variables, and utilities.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/031-frontend/shadcn-ui-specialist/031-work-fe-shadcn-ui-specialist.mode.md#2025-04-13_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-ui@latest init\n```\n\n----------------------------------------\n\nTITLE: Defining Waterfall-Adapted MDTM Directory Structure\nDESCRIPTION: Illustrates the recommended directory structure for organizing tasks and documentation in a Waterfall-adapted MDTM project. It emphasizes the importance of the docs/ folder and the sequential nature of task folders.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/knowledge/project-management/waterfall-project-management/README.md#2025-04-13_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nPROJECT_ROOT/\n├── src/                      # Source Code (Primarily used in Implementation phase)\n├── docs/                     # 👈 **CRUCIAL Waterfall Documentation Hub**\n│   ├── 01_SoftwareRequirementsSpecification_SRS.md # 🎯 Requirements Doc\n│   ├── 02_SoftwareDesignDocument_SDD.md          # 📐 Design Doc\n│   ├── 03_TestPlan.md                            # 🧪 Test Plan Doc\n│   └── 04_DeploymentPlan.md                      # 🚀 Deployment Plan Doc\n├── tasks/                    # 👈 **Main MDTM Directory**\n│   ├── _templates/           # 📄 Optional: Phase-specific task templates?\n│   │   └── ⚙️_implementation_task.md\n│   │\n│   ├── 01_Requirements/        # 🎯 Phase 1: Requirements Gathering Tasks\n│   │   ├── 001_🎯_define_user_roles.md\n│   │   └── 002_🎯_document_functional_reqs.md\n│   │\n│   ├── 02_Design/              # 📐 Phase 2: Design Tasks\n│   │   ├── 003_📐_design_database_schema.md\n│   │   ├── 004_📐_create_ui_mockups.md\n│   │   └── 005_📐_define_api_endpoints.md\n│   │\n│   ├── 03_Implementation/      # ⚙️ Phase 3: Coding Tasks\n│   │   ├── 006_⚙️_implement_user_model.md\n│   │   ├── 007_⚙️_build_login_api.md\n│   │   └── 008_⚙️_create_login_frontend.md\n│   │\n│   ├── 04_Testing/             # 🧪 Phase 4: Testing Tasks\n│   │   ├── 009_🧪_execute_unit_tests.md\n│   │   ├── 010_🧪_perform_integration_testing.md\n│   │   └── 011_🧪_conduct_user_acceptance_testing.md\n│   │\n│   ├── 05_Deployment/          # 🚀 Phase 5: Deployment Tasks\n│   │   └── 012_🚀_deploy_to_production.md\n│   │\n│   └── AREA_ChangeRequests/    # 🔁 Optional: For tracking approved changes\n│       └── CR_001_add_new_report_field.md\n│\n├── archive/                  # 📦 Optional: Completed/Closed tasks (mirrors `tasks/` phase structure)\n│   └── ...\n└── README.md\n```\n\n----------------------------------------\n\nTITLE: Performing Full Text Search with Proximity Operator in Multiple Languages\nDESCRIPTION: Demonstrates how to perform a full text search using the proximity operator in SQL and various client libraries. The search looks for 'big' and 'dreams' words close to each other in the 'description' field of the 'books' table.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/supabase-developer-llms-context-20250406.md#2025-04-13_snippet_20\n\nLANGUAGE: sql\nCODE:\n```\nselect\n  *\nfrom\n  books\nwhere\n  to_tsvector(description) @@ to_tsquery('big <-> dreams');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst { data, error } = await supabase\n  .from('books')\n  .select()\n  .textSearch('description', `'big' <-> 'dreams'`)\n```\n\nLANGUAGE: dart\nCODE:\n```\nfinal result = await client\n  .from('books')\n  .select()\n  .textSearch('description', \"'big' <-> 'dreams'\");\n```\n\nLANGUAGE: swift\nCODE:\n```\nlet response = try await client\n  .from(\"books\")\n  .select()\n  .textSearch(\"description\", value: \"'big' <-> 'dreams'\")\n  .execute()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nval data = supabase.from(\"books\").select {\n    filter {\n        textSearch(\"description\", \"'big' <-> 'dreams'\", TextSearchType.NONE)\n    }\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ndata = client.from_('books').select().text_search('description', \"'big' <-> 'dreams'\").execute()\n```\n\n----------------------------------------\n\nTITLE: Tree-Shaking Import Example\nDESCRIPTION: Demonstrates proper named import syntax for enabling tree-shaking optimization\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/material-ui-specialist-llms-context-20250406.md#2025-04-13_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Button, TextField } from '@mui/material';\n```\n\n----------------------------------------\n\nTITLE: Converting HTML to JSX in React\nDESCRIPTION: This snippet demonstrates the process of converting HTML markup to JSX syntax for use in a React component. It shows the original HTML and the resulting JSX, highlighting the differences and necessary adjustments.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/react-specialist-llms-context-20250406.md#2025-04-13_snippet_21\n\nLANGUAGE: html\nCODE:\n```\n<h1>Hedy Lamarr's Todos</h1>\n<img \n  src=\"https://i.imgur.com/yXOvdOSs.jpg\" \n  alt=\"Hedy Lamarr\" \n  class=\"photo\"\n>\n<ul>\n    <li>Invent new traffic lights\n    <li>Rehearse a movie scene\n    <li>Improve the spectrum technology\n</ul>\n```\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function TodoList() {\n  return (\n    <>\n      <h1>Hedy Lamarr's Todos</h1>\n      <img \n        src=\"https://i.imgur.com/yXOvdOSs.jpg\" \n        alt=\"Hedy Lamarr\" \n        className=\"photo\" \n      />\n      <ul>\n        <li>Invent new traffic lights</li>\n        <li>Rehearse a movie scene</li>\n        <li>Improve the spectrum technology</li>\n      </ul>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Inject Method in Angular TypeScript\nDESCRIPTION: Shows how to use the inject method to request dependencies in Angular components.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/angular-developer-llms-context-20250406.md#2025-04-13_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n@Component({ … })\nclass HeroListComponent {\n  private service = inject(HeroService);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Key Lean YAML Fields in Markdown Task Management\nDESCRIPTION: This snippet demonstrates essential YAML fields used in MDTM to support Lean principles, including status tracking, value scoring, and impediment identification.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/knowledge/project-management/lean-principles/README.md#2025-04-13_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nstatus:\nupdated_date:\nvalue_score:\ncost_of_delay:\nblocked:\nblocked_reason:\ntype:\n```\n\n----------------------------------------\n\nTITLE: Form Control Structure\nDESCRIPTION: Basic form control implementation with labels and input fields.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/bootstrap-specialist-llms-context-20250406.md#2025-04-13_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"mb-3\">\n  <label for=\"formGroupExampleInput\" class=\"form-label\">Example label</label>\n  <input type=\"text\" class=\"form-control\" id=\"formGroupExampleInput\" placeholder=\"Example input placeholder\">\n</div>\n<div class=\"mb-3\">\n  <label for=\"formGroupExampleInput2\" class=\"form-label\">Another label</label>\n  <input type=\"text\" class=\"form-control\" id=\"formGroupExampleInput2\" placeholder=\"Another input placeholder\">\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite Warmup for Performance\nDESCRIPTION: Shows how to configure Vite's server warmup feature to pre-transform frequently used files and improve loading performance.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/vite-specialist-llms-context-20250406.md#2025-04-13_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nexport default defineConfig({\n  server: {\n    warmup: {\n      clientFiles: [\n        './src/components/BigComponent.vue',\n        './src/utils/big-utils.js',\n      ],\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js for Static Export\nDESCRIPTION: Set up Next.js configuration for static site generation. This allows for exporting the app as static HTML files.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/031-frontend/nextjs-developer/031-work-fe-nextjs-developer.mode.md#2025-04-13_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// next.config.js\nmodule.exports = {\n  output: 'export'\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Container Queries with Material UI Theme\nDESCRIPTION: Shows how to use theme.containerQueries to create CSS container queries based on theme breakpoints. This example demonstrates using the 'up' method with a breakpoint key to generate a container query.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/material-ui-specialist-llms-context-20250406.md#2025-04-13_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\ntheme.containerQueries.up('sm'); // => '@container (min-width: 600px)'\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with Primary Key in SQL\nDESCRIPTION: SQL command to create a table named 'movies' with an auto-incrementing primary key and two text columns for name and description.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/supabase-developer-llms-context-20250406.md#2025-04-13_snippet_41\n\nLANGUAGE: sql\nCODE:\n```\ncreate table movies (\n  id bigint generated by default as identity primary key,\n  name text,\n  description text\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Project Directory Structure\nDESCRIPTION: Directory structure template showing the organization of source code, documentation, tasks, and archives in a Waterfall project using MDTM.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/knowledge/project-management/waterfall-project-management/implementing.md#2025-04-13_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nPROJECT_ROOT/\n├── src/                      # Source Code (Populated mainly during Implementation)\n├── docs/                     # 👈 **CENTRAL HUB for Waterfall Documents**\n│   ├── 01_Requirements_SRS.md  # 🎯 Software Requirements Specification\n│   ├── 02_Design_SDD.md        # 📐 Software Design Document\n│   ├── 03_Test_Plan.md         # 🧪 Test Plan & Cases\n│   └── 04_Deployment_Plan.md   # 🚀 Deployment Strategy\n├── tasks/                    # 👈 **Main MDTM Task Directory**\n│   ├── _templates/           # 📄 Optional: Templates for phase-specific tasks\n│   │   ├── 🎯_requirement_task.md\n│   │   ├── 📐_design_task.md\n│   │   ├── ⚙️_implementation_task.md\n│   │   └── 🧪_testing_task.md\n│   │\n│   ├── 01_Requirements/        # 🎯 Phase 1: Define WHAT\n│   │   ├── _phase_overview.md  # Optional: Summary/Goals for this Phase\n│   │   ├── 001_🎯_gather_stakeholder_needs.md\n│   │   └── 002_🎯_finalize_srs_section_3.md\n│   │\n│   ├── 02_Design/              # 📐 Phase 2: Define HOW\n│   │   ├── _phase_overview.md\n│   │   ├── 003_📐_design_database_schema.md\n│   │   └── 004_📐_create_architecture_diagram.md\n│   │\n│   ├── 03_Implementation/      # ⚙️ Phase 3: BUILD the system\n│   │   ├── _phase_overview.md\n│   │   ├── 005_⚙️_build_user_auth_module.md\n│   │   └── 006_⚙️_implement_api_endpoint_X.md\n│   │\n│   ├── 04_Testing/             # 🧪 Phase 4: VERIFY the system\n│   │   ├── _phase_overview.md\n│   │   ├── 007_🧪_execute_auth_test_cases.md\n│   │   └── 008_🧪_perform_uat_session_1.md\n│   │\n│   ├── 05_Deployment/          # 🚀 Phase 5: RELEASE the system\n│   │   ├── _phase_overview.md\n│   │   └── 009_🚀_prepare_production_environment.md\n│   │\n│   └── AREA_ChangeRequests/    # 🔁 Optional: Track approved changes post-baseline\n│       └── CR_001_update_reporting_feature.md\n│\n├── archive/                  # 📦 Optional: Completed tasks mirror phase structure\n│   └── ...\n└── README.md\n```\n\n----------------------------------------\n\nTITLE: Defining Core Remix Development Capabilities\nDESCRIPTION: Lists the core capabilities expected from a Remix Developer including route module implementation, data flow management, form handling, error boundaries, and integration with various adapters.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/031-frontend/remix-developer/031-work-fe-remix-developer.mode.md#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n*   Design and implement Remix route modules (`loader`, `action`, `Component`, `ErrorBoundary`)\n*   Manage server/client data flow with loaders and actions\n*   Build forms with progressive enhancement using `<Form>` and `useFetcher`\n*   Implement nested routing with `<Outlet>` and advanced routing techniques\n*   Leverage web standards such as Fetch API and Request/Response\n```\n\n----------------------------------------\n\nTITLE: Material UI Component Style Overrides\nDESCRIPTION: Example of overriding default Material UI component styles using theme configuration\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/material-ui-specialist-llms-context-20250406.md#2025-04-13_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst theme = createTheme({\n  components: {\n    // Name of the component\n    MuiButton: {\n      styleOverrides: {\n        // Name of the slot\n        root: {\n          // Some CSS\n          fontSize: '1rem',\n        },\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Referencing Password Reset Form in Django\nDESCRIPTION: References the built-in PasswordResetForm class from Django's authentication system.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/django-developer-llms-context-20250406.md#2025-04-13_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ndjango.contrib.auth.forms.PasswordResetForm\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Exception Handling Syntax in PL/pgSQL\nDESCRIPTION: This snippet illustrates the basic syntax for exception handling in PL/pgSQL, showing how to declare conditions and handle multiple exception types.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/neon-db-specialist-llms-context-20250406.md#2025-04-13_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\n<<label>>\ndeclare\n   ...\nbegin\n    ...\nexception\n    when condition [or condition...] then\n       handle_exception;\n   [when condition [or condition...] then\n       handle_exception;]\n   [when others then\n       handle_other_exceptions;\n   ]\nend;\n```\n\n----------------------------------------\n\nTITLE: Creating Task Template in Markdown\nDESCRIPTION: A template for technical tasks, including YAML frontmatter for metadata and structured sections for task details and acceptance criteria.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/knowledge/project-management/agile-principles/README.md#2025-04-13_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n---\n# 🆔 Task Identification & Core Metadata\nid:             # << GENERATE_UNIQUE_ID (e.g., TASK-NNN) >>\ntitle:          # << TASK: Concise technical description >>\nstatus:         \"🟡 Backlog\"\ntype:           \"🛠️ Task\"\n\n# 🏆 Prioritization & Value\npriority:       \"▶️ Medium\"\n\n# ⏳ Effort & Iteration Tracking\nestimated_effort: # << Hours / Size >>\n# iteration:\n\n# 🧑‍💻 Assignment & Collaboration\n# assigned_to:\n\n# 🔗 Relationships & Context\nparent_story:   # Optional: Link to User Story ID this supports\nparent_feature: # << Path to FEATURE/_overview.md >>\n# depends_on:     []\ntags:           [\"technical\", ...] # << Keywords >>\n---\n\n# << TASK: Concise technical description >>\n\n## Task Details 🛠️\nDescribe the technical work needed. Why is it necessary? What User Story does it support (link if applicable)?\n*Example:* \"Set up the PostgreSQL database schema for the authentication feature, including `users` and `sessions` tables as per [Design Doc Section X](...).\"\n\n## Acceptance Criteria ✅\n*   - [ ] Database migration script exists and runs successfully.\n*   - [ ] `users` table created with specified columns (id, email, password_hash, created_at).\n*   - [ ] `sessions` table created with specified columns.\n*   - [ ] Necessary indexes are created.\n```\n\n----------------------------------------\n\nTITLE: User Story Template in Markdown\nDESCRIPTION: Template for creating user stories with YAML front matter and standardized markdown sections\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/knowledge/project-management/scrum/implementing.md#2025-04-13_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n---\nid:             # STORY-NNN\ntitle:          # As a [Role], I want [Action], so that [Value]\nstatus:         \"🟡 Product Backlog\"\ntype:           \"📖 User Story\"\npriority:       \"▶️ Medium\"\nestimate_story_points: # Estimate Here (e.g., 5)\nsprint:         # Leave blank until Sprint Planning\n# assigned_to:\nreporter:\nparent_feature: # Path to _overview.md\nrelated_docs:   [\"docs/DefinitionOfDone.md\"]\ntags:           []\n---\n\n# << Story Title >>\n\n## User Story 📖\n> As a **[Role]**,\n> I want **[Action]**,\n> So that **[Value]**.\n```\n\n----------------------------------------\n\nTITLE: Handling Form Submission in React with Fetch API\nDESCRIPTION: This React snippet demonstrates form submission using fetch API to send form data to a server endpoint. It includes form rendering with required fields and displays response messages from the server.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/astro-developer-llms-context-20250406.md#2025-04-13_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nconst formData = new FormData(e.target as HTMLFormElement);\nconst response = await fetch(\"/api/feedback\", {\n  method: \"POST\",\n  body: formData,\n});\nconst data = await response.json();\nif (data.message) {\n  setResponseMessage(data.message);\n}\n}\n\nreturn (\n<form onSubmit={submit}>\n  <label htmlFor=\"name\">\n    Name\n    <input type=\"text\" id=\"name\" name=\"name\" autoComplete=\"name\" required />\n  </label>\n  <label htmlFor=\"email\">\n    Email\n    <input type=\"email\" id=\"email\" name=\"email\" autoComplete=\"email\" required />\n  </label>\n  <label htmlFor=\"message\">\n    Message\n    <textarea id=\"message\" name=\"message\" autoComplete=\"off\" required />\n  </label>\n  <button>Send</button>\n  {responseMessage && <p>{responseMessage}</p>}\n</form>\n);\n```\n\n----------------------------------------\n\nTITLE: Vite Environment Variable Access\nDESCRIPTION: Accessing client-exposed environment variables in Vite applications\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/condensed_indices/vite-specialist-condensed-index.md#2025-04-13_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport.meta.env.VITE_VAR_NAME\n```\n\n----------------------------------------\n\nTITLE: Initializing FastAPI Application and Route Declaration\nDESCRIPTION: Examples of basic FastAPI application setup and route declaration patterns using decorators and type hints.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/032-backend/fastapi-developer/032-work-be-fastapi-developer.mode.md#2025-04-13_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n@app.get(\"/items/{item_id}\")\ndef read_item(item_id: int, q: str | None = None):\n    return {\"item_id\": item_id, \"q\": q}\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Constants in Vite\nDESCRIPTION: Example of using defineConfig to set global constants that will be defined during dev and statically replaced during build using esbuild defines.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/vite-specialist-llms-context-20250406.md#2025-04-13_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nexport default defineConfig({\n  define: {\n    __APP_VERSION__: JSON.stringify('v1.0.0'),\n    __API_URL__: 'window.__backend_api_url',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flask Testing Fixtures with Pytest\nDESCRIPTION: Configures basic pytest fixtures for Flask application testing, including app configuration, test client, and CLI runner setup. These fixtures help isolate test cases and simplify test setup.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/flask-developer-llms-context-20250406.md#2025-04-13_snippet_42\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\nfrom my_project import create_app\n\n@pytest.fixture()\ndef app():\n    app = create_app()\n    app.config.update({\n        \"TESTING\": True,\n    })\n\n    # other setup can go here\n\n    yield app\n\n    # clean up / reset resources here\n\n\n@pytest.fixture()\ndef client(app):\n    return app.test_client()\n\n\n@pytest.fixture()\ndef runner(app):\n    return app.test_cli_runner()\n```\n\n----------------------------------------\n\nTITLE: Implementing an Updatable Command in Three.js Editor\nDESCRIPTION: Demonstrates how to implement the 'update' function for an updatable command in the Three.js editor. This allows commands to be modified without creating entirely new command instances, which is useful for operations like dragging or continuous value changes.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/threejs-specialist-llms-context-20250406.md#2025-04-13_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nupdate: function ( cmd ) {\n\n\tthis.newValue = cmd.newValue;\n\n},\n```\n\n----------------------------------------\n\nTITLE: Chaining Transitions in D3.js\nDESCRIPTION: This example demonstrates how to chain multiple transitions to create a sequence of color changes and removal of elements. It shows how to set delays and apply different styles in each transition.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/d3js-specialist-llms-context-20250406.md#2025-04-13_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nd3.selectAll(\".apple\")\n  .transition() // First fade to green.\n    .style(\"fill\", \"green\")\n  .transition() // Then red.\n    .style(\"fill\", \"red\")\n  .transition() // Wait one second. Then brown, and remove.\n    .delay(1000)\n    .style(\"fill\", \"brown\")\n    .remove();\n```\n\n----------------------------------------\n\nTITLE: Implementing Bootstrap Input Groups\nDESCRIPTION: Examples of various Bootstrap input group patterns including adding prefixes/suffixes to form controls, combining multiple inputs, and working with textareas.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/bootstrap-specialist-llms-context-20250406.md#2025-04-13_snippet_32\n\nLANGUAGE: HTML\nCODE:\n```\n<span class=\"input-group-text\">.00</span>\n</div>\n\n<div class=\"input-group mb-3\">\n  <input type=\"text\" class=\"form-control\" placeholder=\"Username\" aria-label=\"Username\">\n  <span class=\"input-group-text\">@</span>\n  <input type=\"text\" class=\"form-control\" placeholder=\"Server\" aria-label=\"Server\">\n</div>\n\n<div class=\"input-group\">\n  <span class=\"input-group-text\">With textarea</span>\n  <textarea class=\"form-control\" aria-label=\"With textarea\"></textarea>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Executing Database Function in SQL and Client Libraries\nDESCRIPTION: Examples of executing a database function named 'hello_world' using SQL and various Supabase client libraries including JavaScript, Dart, Swift, Kotlin, and Python.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/supabase-developer-llms-context-20250406.md#2025-04-13_snippet_26\n\nLANGUAGE: sql\nCODE:\n```\nselect hello_world();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst { data, error } = await supabase.rpc('hello_world')\n```\n\nLANGUAGE: dart\nCODE:\n```\nfinal data = await supabase\n  .rpc('hello_world');\n```\n\nLANGUAGE: swift\nCODE:\n```\ntry await supabase.rpc(\"hello_world\").execute()\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nval data = supabase.postgrest.rpc(\"hello_world\")\n```\n\nLANGUAGE: python\nCODE:\n```\ndata = supabase.rpc('hello_world').execute()\n```\n\n----------------------------------------\n\nTITLE: Setting Responsive Meta Tag for Material UI\nDESCRIPTION: HTML meta tag configuration required for proper mobile-first rendering and touch zooming across all devices when using Material UI components.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/material-ui-specialist-llms-context-20250406.md#2025-04-13_snippet_19\n\nLANGUAGE: html\nCODE:\n```\n<meta name=\"viewport\" content=\"initial-scale=1, width=device-width\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Comments to MongoDB Aggregation\nDESCRIPTION: Shows how to add comments to aggregation operations for better tracking and profiling of database operations.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/mongodb-specialist-llms-context-20250406.md#2025-04-13_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ndb.movies.aggregate( [ { $match: { year : 1995 } } ], { comment : \"match_all_movies_from_1995\" } ).pretty()\n```\n\n----------------------------------------\n\nTITLE: Defining Named and Anonymous Functions in TypeScript\nDESCRIPTION: Demonstrates how to create named and anonymous functions in TypeScript, showing the basic syntax for function declarations.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/typescript-specialist-llms-context-20250406.md#2025-04-13_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\n// Named function\nfunction add(x, y) {\n  return x + y;\n}\n\n// Anonymous function\nlet myAdd = function (x, y) {\n  return x + y;\n};\n```\n\n----------------------------------------\n\nTITLE: Example Task File Structure in Markdown with YAML Front Matter\nDESCRIPTION: This snippet demonstrates the structure of a task file in the MDTM Feature Structure system. It includes YAML front matter for metadata, followed by Markdown sections for description, acceptance criteria, implementation notes, and an optional AI prompt log.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/knowledge/project-management/markdown-driven-task-management-MDTM/markdown-driven-task-management-MDTM-feature-structure/README.md#2025-04-13_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n---\n# YAML Front Matter (Metadata for machines & humans)\nid: FEAT-AUTH-001\ntitle: \"Implement User Login UI (Vue)\"\nstatus: \"To Do\"  # <-- CRITICAL for workflow tracking\npriority: High\ntype: Feature\nassigned_to: \"AI\"\ncreated_date: 2025-04-05\nupdated_date: 2025-04-05\nestimated_effort: \"M\"\nparent_task: \"authentication/_overview.md\" # Links to feature overview\nrelated_docs:\n  - \"docs/PRD.md#Login Requirements\"\n  - \"docs/DesignMockups.md#Login Screen\"\ntags: [\"ui\", \"vue\", \"authentication\", \"frontend\"]\n---\n\n# Implement User Login UI (Vue)  <== Human-friendly title (optional redundancy)\n\n## Description ✍️\nDetailed explanation of the task goals, background, and rationale.\nWhy is this needed? What problem does it solve?\n\n## Acceptance Criteria ✅\nUse checklists for clear, verifiable completion conditions.\n- [ ] Criterion 1: Component renders correctly per mockups.\n- [ ] Criterion 2: Input fields capture data.\n- [ ] Criterion 3: Basic validation implemented.\n- [ ] Criterion 4: Button click handler exists and is stubbed.\n\n## Implementation Notes / Sub-Tasks / Discussion 📝\n- Use Vue 3 Composition API.\n- Break down steps if needed:\n  - [ ] Create component file.\n  - [ ] Add input fields.\n  - [ ] Add button.\n- Link to relevant code: `src/components/auth/LoginView.vue` (once created)\n\n## AI Prompt Log (Optional Traceability) 🤖\n```prompt\nGenerate a Vue 3 Composition API component named 'LoginView.vue'. Include labeled input fields for username (text) and password (password type), and a submit button labeled 'Login'. Add a placeholder link for 'Forgot Password?'. Implement a basic 'handleLogin' method triggered by the button click that logs the input values to the console and prevents default form submission. Include simple non-empty validation on the fields before logging. Use Tailwind CSS for basic styling.\n```\n```\n\n----------------------------------------\n\nTITLE: Root Layout Component Structure\nDESCRIPTION: Basic structure of a Remix root layout component showing essential wrapper elements and metadata components.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/condensed_indices/remix-developer-condensed-index.md#2025-04-13_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// app/root.tsx\n<html>\n  <head>\n    <Links />\n    <Meta />\n  </head>\n  <body>\n    <Outlet />\n    <Scripts />\n    <ScrollRestoration />\n    <LiveReload />\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Creating Linear Scales in D3\nDESCRIPTION: Shows how to create a continuous linear scale with optional domain and range. The invert method finds the corresponding domain value for a given range value.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/031-frontend/d3js-specialist/031-work-fe-d3js-specialist.mode.md#2025-04-13_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nd3.scaleLinear([domain], [range])\n```\n\n----------------------------------------\n\nTITLE: MongoDB Index Management\nDESCRIPTION: Operations for creating and listing indexes on collection fields.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/condensed_indices/mongodb-specialist-condensed-index.md#2025-04-13_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ndb.collection.createIndex({ <field>: <1|-1>, ... })\n```\n\nLANGUAGE: javascript\nCODE:\n```\ndb.collection.getIndexes()\n```\n\n----------------------------------------\n\nTITLE: Realtime Subscriptions with Supabase JavaScript Client\nDESCRIPTION: JavaScript client method for subscribing to real-time database changes and custom events over WebSockets in Supabase.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/condensed_indices/supabase-developer-condensed-index.md#2025-04-13_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nsupabase.channel('channel_name').on(...).subscribe(...)\n```\n\n----------------------------------------\n\nTITLE: Data Operations with Supabase JavaScript Client\nDESCRIPTION: JavaScript client methods for performing CRUD operations on Supabase tables, including selecting, inserting data, and calling database functions.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/032-backend/supabase-developer/032-work-be-supabase-developer.mode.md#2025-04-13_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nsupabase.from('table_name').select('columns')\nsupabase.from('table_name').insert([{ col: val }, ...])\nsupabase.rpc('function_name', { arg1: val })\n```\n\n----------------------------------------\n\nTITLE: Creating Status Badges with shields.io\nDESCRIPTION: HTML structure for displaying status badges (like build status, downloads, version) using shields.io, linking to relevant sources such as GitHub Actions or npm.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/condensed_indices/tailwind-specialist-condensed-index.md#2025-04-13_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"[link-to-source]\"><img src=\"[shields.io-badge-url]\" alt=\"[Badge Description]\"></a>\n```\n\n----------------------------------------\n\nTITLE: Implementing Server and Client Loaders in Remix TSX\nDESCRIPTION: Demonstrates implementation of both server-side and client-side data loading patterns in a Remix route using separate loader functions.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/remix-developer-llms-context-20250406.md#2025-04-13_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nexport async function loader() {\n  // During SSR, we talk to the DB directly\n  const data = getServerDataFromDb();\n  return json(data);\n}\n\nexport async function clientLoader() {\n  // During client-side navigations, we hit our exposed API endpoints directly\n  const data = await fetchDataFromApi();\n  return data;\n}\n\nexport default function Component() {\n\n\n```\n\n----------------------------------------\n\nTITLE: Default Container Implementation\nDESCRIPTION: Basic implementation of Bootstrap's container class for content wrapping.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/bootstrap-specialist-llms-context-20250406.md#2025-04-13_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"container\">\n  <!-- Content here -->\n</div>\n```\n\n----------------------------------------\n\nTITLE: PL/pgSQL Block Structure Template\nDESCRIPTION: Template showing the basic structure of a PL/pgSQL block including optional label and sections.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/neon-db-specialist-llms-context-20250406.md#2025-04-13_snippet_29\n\nLANGUAGE: sql\nCODE:\n```\n[ <<label>> ]\n[ declare\n    declarations ]\nbegin\n    statements;\n    ...\nend [ label ];\n```\n\n----------------------------------------\n\nTITLE: Task Template in Markdown\nDESCRIPTION: Template for creating technical tasks with YAML frontmatter including status, type, sprint assignment and parent story reference. Includes sections for task details and acceptance criteria.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/knowledge/project-management/scrum/README.md#2025-04-13_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n---\nid:             # << GENERATE_ID (TASK-NNN) >>\ntitle:          # << TASK: Technical step for a Story/Bug >>\nstatus:         \"🔵 Sprint Backlog\" # Usually created already in Sprint Backlog\ntype:           \"🛠️ Task\"\n# priority:       # Priority often inherited from Story\n# estimate_story_points: # Effort often tracked at Story level, Tasks might use hours/sub-items\nsprint:         # << Current Sprint Name/ID >>\n# assigned_to:    # Assigned during Sprint\nparent_story:   # << ID of parent Story (e.g., STORY-NNN) >>\nparent_feature: # << Path to FEATURE/_overview.md >>\ntags:           [\"technical\", ...]\n---\n\n# << TASK: Technical step for a Story/Bug >>\n\n## Task Details 🛠️\n(Specific technical work required. E.g., \"Create API endpoint for X\", \"Update database migration script Y\")\n\n## Acceptance Criteria ✅\n*   - [ ] Technical outcome achieved (e.g., Endpoint returns expected data).\n*   - [ ] Unit tests written and pass.\n*   - [ ] Code reviewed (if applicable at task level).\n```\n\n----------------------------------------\n\nTITLE: Modifying Delegate Tasks Step in Roo Commander\nDESCRIPTION: Proposed changes to the 'Delegate Tasks' step in Roo Commander's customInstructions. It introduces task type assessment, MDTM workflow for complex tasks, and updated logging procedures.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v6.0/changes/roo-commander-mdtm-delegation-integration.md#2025-04-13_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n 7.  **Delegate Tasks:**\n+    *   **Assess Task Type:** Determine if the task is simple/read-only or multi-step/stateful/critical, warranting the MDTM approach.\n+    *   **Simple Tasks:** Use `new_task` directly. The message MUST state goal, acceptance criteria, and context refs.\n+    *   **Complex/Critical Tasks (MDTM Workflow):**\n+        *   **Guidance (Create Task File):** Create a dedicated task file using `write_to_file` at `project_journal/tasks/TASK-[MODE]-[YYYYMMDD-HHMMSS].md`. Include Goal, Status (Pending), Coordinator (self TaskID), Assigned To, Acceptance Criteria, Context Files, and a detailed Checklist (`- [⏳] Step...`). Indicate reporting points with `📣`.\n+        *   **Guidance (Delegate):** Use `new_task` targeting the specialist. The message should primarily point to the created task file (e.g., \"Process task file: `[path_to_task_file]`\"). Include the Commander's Task ID for reference.\n-        Use `new_task` (with Task ID) to specialists. Task messages MUST state goal, acceptance criteria, context refs.\n     *   **Guidance (Log Delegation):** Regardless of method, log the delegation action (including the specialist Task ID/file path if MDTM) in the Commander's own task log (e.g., `project_journal/tasks/TASK-CMD-....md`) using `insert_content`.\n```\n\n----------------------------------------\n\nTITLE: Creating Base Layout Template with Jinja in Flask\nDESCRIPTION: Demonstrates creating a base layout template using Jinja in Flask with placeholders for title, header, and content. Includes conditional rendering for user authentication status and flash message display.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/flask-developer-llms-context-20250406.md#2025-04-13_snippet_39\n\nLANGUAGE: html+jinja\nCODE:\n```\n<!doctype html>\n<title>{% block title %}{% endblock %} - Flaskr</title>\n<link rel=\"stylesheet\" href=\"{{ url_for('static', filename='style.css') }}\">\n<nav>\n  <h1>Flaskr</h1>\n  <ul>\n    {% if g.user %}\n      <li><span>{{ g.user['username'] }}</span>\n      <li><a href=\"{{ url_for('auth.logout') }}\">Log Out</a>\n    {% else %}\n      <li><a href=\"{{ url_for('auth.register') }}\">Register</a>\n      <li><a href=\"{{ url_for('auth.login') }}\">Log In</a>\n    {% endif %}\n  </ul>\n</nav>\n<section class=\"content\">\n  <header>\n    {% block header %}{% endblock %}\n  </header>\n  {% for message in get_flashed_messages() %}\n    <div class=\"flash\">{{ message }}</div>\n  {% endfor %}\n  {% block content %}{% endblock %}\n</section>\n```\n\n----------------------------------------\n\nTITLE: Referencing TypeScript File Extensions\nDESCRIPTION: Example of TypeScript file extensions that trigger specialist mode\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v6.3/improvements/typescript-specialist-improvements.md#2025-04-13_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n.ts/.tsx\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Logging in Flask\nDESCRIPTION: Configures basic logging for a Flask application using dictConfig. Sets up a formatter, a stream handler, and configures the root logger with an INFO level.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/flask-developer-llms-context-20250406.md#2025-04-13_snippet_34\n\nLANGUAGE: python\nCODE:\n```\nfrom logging.config import dictConfig\n\ndictConfig({\n    'version': 1,\n    'formatters': {'default': {\n        'format': '[%(asctime)s] %(levelname)s in %(module)s: %(message)s',\n    }},\n    'handlers': {'wsgi': {\n        'class': 'logging.StreamHandler',\n        'stream': 'ext://flask.logging.wsgi_errors_stream',\n        'formatter': 'default'\n    }},\n    'root': {\n        'level': 'INFO',\n        'handlers': ['wsgi']\n    }\n})\n\napp = Flask(__name__)\n```\n\n----------------------------------------\n\nTITLE: Database Query Loader Implementation\nDESCRIPTION: Loader function implementation using Prisma ORM to fetch and display user data.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/remix-developer-llms-context-20250406.md#2025-04-13_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useLoaderData } from \"@remix-run/react\";\n\nimport { prisma } from \"../db\";\n\nexport async function loader() {\n  return json(await prisma.user.findMany());\n}\n\nexport default function Users() {\n  const data = useLoaderData<typeof loader>();\n  return (\n    <ul>\n      {data.map((user) => (\n        <li key={user.id}>{user.name}</li>\n      ))}\n    </ul>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Vue Application Initialization\nDESCRIPTION: Example of creating and mounting a Vue application instance with plugin configuration\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/031-frontend/vuejs-developer/031-work-fe-vuejs-developer.mode.md#2025-04-13_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue'\nimport { createPinia } from 'pinia'\nimport App from './App.vue'\n\nconst app = createApp(App)\napp.use(createPinia())\napp.mount('#app')\n```\n\n----------------------------------------\n\nTITLE: Basic Average Aggregation in Elasticsearch\nDESCRIPTION: Demonstrates how to compute a basic average over numeric fields in documents. This example calculates the average grade across exam documents.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/elasticsearch-specialist-llms-context-20250406.md#2025-04-13_snippet_29\n\nLANGUAGE: console\nCODE:\n```\nPOST /exams/_search?size=0\n{\n  \"aggs\": {\n    \"avg_grade\": { \"avg\": { \"field\": \"grade\" } }\n  }\n}\n```\n\nLANGUAGE: console-result\nCODE:\n```\n{\n  ...\n  \"aggregations\": {\n    \"avg_grade\": {\n      \"value\": 75.0\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Material UI Component with ownerState Pattern\nDESCRIPTION: Demonstrates using ownerState to style a component based on props or internal state. This implementation adds a variant prop to the Stat component and passes the state to child components.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/material-ui-specialist-llms-context-20250406.md#2025-04-13_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nconst Stat = React.forwardRef(function Stat(props, ref) {\n  const { value, unit, variant, ...other } = props;\n\n  const ownerState = { ...props, variant };\n\n  return (\n    <StatRoot ref={ref} ownerState={ownerState} {...other}>\n      <StatValue ownerState={ownerState}>{value}</StatValue>\n      <StatUnit ownerState={ownerState}>{unit}</StatUnit>\n    </StatRoot>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Multi-match Query in Elasticsearch\nDESCRIPTION: Example of a basic multi_match query searching across multiple fields. The query looks for 'this is a test' in both subject and message fields.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/elasticsearch-specialist-llms-context-20250406.md#2025-04-13_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"query\": {\n    \"multi_match\" : {\n      \"query\": \"this is a test\",\n      \"fields\": [ \"subject\", \"message\" ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Validation Errors in Svelte Form\nDESCRIPTION: Shows how to display validation errors returned from a form action in a Svelte component, including error messages and preserving form values.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/sveltekit-llms-context-20250406.md#2025-04-13_snippet_8\n\nLANGUAGE: svelte\nCODE:\n```\n/// file: src/routes/login/+page.svelte\n<form method=\"POST\" action=\"?/login\">\n\t{#if form?.missing}<p class=\"error\">The email field is required</p>{/if}\n\t{#if form?.incorrect}<p class=\"error\">Invalid credentials!</p>{/if}\n\t<label>\n\t\tEmail\n\t\t<input name=\"email\" type=\"email\" value={form?.email ?? ''}>\n\t</label>\n\t<label>\n\t\tPassword\n\t\t<input name=\"password\" type=\"password\">\n\t</label>\n\t<button>Log in</button>\n\t<button formaction=\"?/register\">Register</button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Initializing Supabase Vecs Client in Python\nDESCRIPTION: Python code to set up a connection to Supabase database using the vecs client. It requires a valid PostgreSQL connection string with pooling support for compatibility with environments like Google Colab.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/supabase-developer-llms-context-20250406.md#2025-04-13_snippet_30\n\nLANGUAGE: python\nCODE:\n```\nimport vecs\n\nDB_CONNECTION = \"postgresql://<user>:<password>@<host>:<port>/<db_name>\"\n```\n\n----------------------------------------\n\nTITLE: MongoDB Transaction Management\nDESCRIPTION: Implementation of ACID transactions for multi-document operations.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/033-database/mongodb-specialist/033-work-db-mongodb-specialist.mode.md#2025-04-13_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nsession.withTransaction(async () => { ... })\n```\n\n----------------------------------------\n\nTITLE: Configuring Remix Application Settings\nDESCRIPTION: Basic Remix configuration setup defining app directory structure, asset management, and custom route definitions.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/remix-developer-llms-context-20250406.md#2025-04-13_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('@remix-run/dev').AppConfig} */\nmodule.exports = {\n  appDirectory: \"app\",\n  assetsBuildDirectory: \"public/build\",\n  future: {\n    /* any enabled future flags */\n  },\n  ignoredRouteFiles: [\"**/*.css\"],\n  publicPath: \"/build/\",\n  routes(defineRoutes) {\n    return defineRoutes((route) => {\n      route(\"/somewhere/cool/*\", \"catchall.tsx\");\n    });\n  },\n  serverBuildPath: \"build/index.js\",\n};\n```\n\n----------------------------------------\n\nTITLE: Metadata Tags Definition in Markdown\nDESCRIPTION: Definition of metadata tags for project management categorization and organization\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v6.3/improvements/project-manager-improvements.md#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n\"project-management\", \"task-management\", \"coordination\", \"mdtm\", \"planning\", \"tracking\"\n```\n\n----------------------------------------\n\nTITLE: Defining Type Aliases in TypeScript\nDESCRIPTION: Demonstrates the definition of type aliases in TypeScript. Type aliases create new names for types, improving code readability and reusability.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/031-frontend/typescript-specialist/031-work-fe-typescript-specialist.mode.md#2025-04-13_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype ID = string | number;\n```\n\n----------------------------------------\n\nTITLE: Setting Curve Type for Area Generator in D3.js\nDESCRIPTION: Demonstrates how to set a different curve interpolation type for the area generator using d3.curveStep. This affects how the area generator interpolates between data points.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/d3js-specialist-llms-context-20250406.md#2025-04-13_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\nconst area = d3.area().curve(d3.curveStep);\n```\n\n----------------------------------------\n\nTITLE: Basic Timeline Control Methods\nDESCRIPTION: Shows the basic timeline control methods available in Anime.js for controlling animation playback state.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/animejs-specialist-llms-context-20250406.md#2025-04-13_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\ntimeline.pause()\ntimeline.play()\ntimeline.restart()\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-In with Clerk in React\nDESCRIPTION: Use the useSignIn hook to manage the sign-in flow state and actions on the client-side. This example shows how to initiate a sign-in attempt and handle the response.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/031-frontend/clerk-auth-specialist/031-work-fe-clerk-auth-specialist.mode.md#2025-04-13_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useSignIn } from '@clerk/nextjs';\n\nconst SignInComponent = () => {\n  const { signIn, setActive } = useSignIn();\n\n  const handleSignIn = async (identifier, password) => {\n    try {\n      const result = await signIn.create({ identifier, password });\n      if (result.status === 'complete') {\n        await setActive({ session: result.createdSessionId });\n      }\n    } catch (err) {\n      console.error('Error during sign in:', err);\n    }\n  };\n\n  return (\n    // Render sign-in form\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Vector Index in PostgreSQL\nDESCRIPTION: SQL command for creating an optimized index for vector similarity searches using the inner product (IP) method.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/032-backend/supabase-developer/032-work-be-supabase-developer.mode.md#2025-04-13_snippet_12\n\nLANGUAGE: SQL\nCODE:\n```\ncreate index ... using ivfflat (column vector_ip_ops) with (lists = N);\n```\n\n----------------------------------------\n\nTITLE: Initial Task Log Template in Markdown\nDESCRIPTION: Template for creating initial task log entries when starting architectural work. Includes goal and context sections.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/010-director/technical-architect/010-dir-technical-architect.mode.md#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Task Log: [TaskID] - Architecture Design: [Feature Y]\\n\\n**Goal:** Design architecture for [Feature Y], considering [Key Constraints/Goals].\\n**Context:** Requirements (`planning/requirements.md`), Stack Profile (`discovery/stack_profile.md`)\n```\n\n----------------------------------------\n\nTITLE: Updating State in React Event Handler\nDESCRIPTION: Illustrates how to update a state variable using its setter function inside an event handler. The 'handleClick' function increments the 'index' state variable.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/react-specialist-llms-context-20250406.md#2025-04-13_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nfunction handleClick() {\n  setIndex(index + 1);\n}\n```\n\n----------------------------------------\n\nTITLE: Regex Pattern Generation Command\nDESCRIPTION: Example command to request Roo to generate a regex pattern for matching JavaScript files while excluding test files.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/knowledge/custom_modes.md#2025-04-13_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\nCreate a regex pattern that matches JavaScript files but excludes test files\n```\n\n----------------------------------------\n\nTITLE: Defining CI/CD Specialist Mode in Markdown\nDESCRIPTION: This snippet outlines the mode, description, capabilities, workflow, role definition, and custom instructions for the CI/CD Specialist in the Roo Commander project. It covers the specialist's responsibilities in automating software delivery pipelines and best practices for operation.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/035-devops/cicd-specialist/035-work-do-cicd-specialist.mode.md#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Mode: 🚀 CI/CD Specialist (`cicd-specialist`)\n\n## Description\nDesigns, implements, and manages CI/CD pipelines for automated build, test, scan, and deployment using various platforms (GitHub Actions, GitLab CI, Jenkins, etc.). Focuses on automation, security, and reliability.\n\n## Capabilities\n*   Design CI/CD pipelines tailored to project requirements\n*   Implement and configure pipelines on platforms like GitHub Actions, GitLab CI, Jenkins, CircleCI, Azure DevOps\n*   Automate build, test, security scanning, and deployment stages\n*   Maintain, optimize, and troubleshoot CI/CD pipelines\n*   Manage secrets securely within pipelines\n*   Integrate pipelines with Infrastructure as Code tools (Terraform, Pulumi)\n*   Collaborate with Infrastructure, Security, Containerization, Testing, and Architecture specialists\n*   Configure deployment strategies such as rolling updates, blue/green, and canary deployments\n*   Set up quality gates and approval workflows\n*   Monitor pipeline execution and configure alerts\n*   Document pipeline design, changes, and decisions\n*   Escalate complex issues to appropriate specialists\n\n## Workflow\n1.  Receive task assignment and initialize task log with context and goals\n2.  Analyze project context and plan pipeline stages, tools, and triggers\n3.  Collaborate with relevant specialists to clarify infrastructure, containerization, testing, and security details\n4.  Implement pipeline configuration files and automation scripts\n5.  Implement deployment automation within the pipeline configuration\n6.  Configure secret management strategies\n7.  Set up quality gates and approval steps\n8.  Test and troubleshoot the pipeline iteratively until successful\n9.  Optimize pipeline performance and resource usage if needed\n10. Provide Git branching strategy guidance if requested\n11. Save formal documentation if required\n12. Log completion status and summary in the task log\n13. Report task completion with references to key artifacts\n14. Escalate blockers or complex issues to appropriate specialists\n\n---\n\n## Role Definition\nYou are Roo CI/CD Specialist, an expert in automating software delivery pipelines. You design, implement, configure, and maintain robust Continuous Integration (CI) and Continuous Deployment/Delivery (CD) processes using platforms like GitHub Actions, GitLab CI, Jenkins, CircleCI, Azure DevOps, and others. Your focus is on automating build, test, security scanning, and deployment stages, ensuring reliable, secure, and efficient software delivery. You are proficient in pipeline configuration syntax (YAML, Groovy, etc.), scripting (shell, Python), deployment strategies (rolling, blue/green, canary), secret management best practices, and integrating with Infrastructure as Code (IaC) tools.\n\n---\n\n## Custom Instructions\n\n### 1. General Operational Principles\n*   **Maximize Specialist Utilization:** Proactively identify tasks suitable for your expertise (pipeline setup, config, troubleshooting) and delegate unrelated tasks (e.g., complex infrastructure setup, deep application debugging) to appropriate specialists.\n*   **Standardize Collaboration & Escalation:** Follow defined pathways for collaboration and escalation.\n*   **Increase System Robustness:** Focus on creating reliable, secure, and maintainable pipelines. Implement checks and balances.\n*   **Maintain User Control & Transparency:** Clearly explain proposed pipeline changes and configurations. Use journaling diligently.\n*   **Tool Usage Diligence:** Before invoking any tool, carefully review its description and parameters. Ensure all *required* parameters are included with valid values according to the specified format. Avoid making assumptions about default values for required parameters.\n*   **Iterative Execution:** Use tools one step at a time. Wait for the result of each tool use before proceeding to the next step.\n*   **Journaling:** Maintain clear and concise logs of actions, decisions, configurations, and justifications in the designated task log file (`project_journal/tasks/[TaskID].md`).\n```\n\n----------------------------------------\n\nTITLE: Implementing Combobox Component with Popover and Command UI in TypeScript\nDESCRIPTION: Creates an interactive combobox component using shadcn/ui's Popover and Command components. This implementation manages its own open/close state and selection, providing a searchable dropdown of framework options with proper accessibility attributes.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/shadcn-ui-specialist-llms-context-20250406.md#2025-04-13_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\"\n\nimport * as React from \"react\"\nimport { Check, ChevronsUpDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n} from \"@/components/ui/command\"\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\"\n\nconst frameworks = [\n  {\n    value: \"next.js\",\n    label: \"Next.js\",\n  },\n  {\n    value: \"sveltekit\",\n    label: \"SvelteKit\",\n  },\n  {\n    value: \"nuxt.js\",\n    label: \"Nuxt.js\",\n  },\n  {\n    value: \"remix\",\n    label: \"Remix\",\n  },\n  {\n    value: \"astro\",\n    label: \"Astro\",\n  },\n]\n\nexport function ComboboxDemo() {\n  const [open, setOpen] = React.useState(false)\n  const [value, setValue] = React.useState(\"\")\n\n  return (\n    <Popover open={open} onOpenChange={setOpen}>\n      <PopoverTrigger asChild>\n        <Button\n          variant=\"outline\"\n          role=\"combobox\"\n          aria-expanded={open}\n          className=\"w-[200px] justify-between\"\n        >\n          {value\n            ? frameworks.find((framework) => framework.value === value)?.label\n            : \"Select framework...\"}\n          <ChevronsUpDown className=\"ml-2 h-4 w-4 shrink-0 opacity-50\" />\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-[200px] p-0\">\n        <Command>\n          <CommandInput placeholder=\"Search framework...\" />\n          <CommandList>\n            <CommandEmpty>No framework found.</CommandEmpty>\n            <CommandGroup>\n              {frameworks.map((framework) => (\n                <CommandItem\n                  key={framework.value}\n                  value={framework.value}\n                  onSelect={(currentValue) => {\n                    setValue(currentValue === value ? \"\" : currentValue)\n                    setOpen(false)\n                  }}\n                >\n                  <Check\n                    className={cn(\n                      \"mr-2 h-4 w-4\",\n                      value === framework.value ? \"opacity-100\" : \"opacity-0\"\n                    )}\n                  />\n                  {framework.label}\n                </CommandItem>\n              ))}\n            </CommandGroup>\n          </CommandList>\n        </Command>\n      </PopoverContent>\n    </Popover>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Project Onboarding Workflow and Configuration in Markdown\nDESCRIPTION: Comprehensive documentation of the project onboarding mode including capabilities, workflow steps, role definition, and operational principles. Covers both new and existing project scenarios with detailed step-by-step processes.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/010-director/project-onboarding/010-dir-project-onboarding.mode.md#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Mode: 🚦 Project Onboarding (`project-onboarding`)\n\n## Description\nHandles initial user interaction, determines project scope (new/existing), delegates discovery/requirements gathering, coordinates basic setup, and delegates tech initialization.\n\n## Capabilities\n*   Receive and analyze initial user requests\n*   Determine if the project is new or existing\n*   Clarify project intent with the user if unclear\n*   Delegate discovery and requirements gathering to the Discovery Agent\n*   Coordinate creation of project journal structure\n*   Initialize Git repository and basic files\n*   Delegate technology-specific project initialization\n*   Delegate initial Git commit to Git Manager\n*   Coordinate onboarding for existing projects including journal setup and context gathering\n*   Maintain logs and report onboarding completion to Commander\n*   Handle failures gracefully and report issues\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Front Matter for Agile Task Metadata in MDTM\nDESCRIPTION: Provides the YAML front matter template for tracking Agile work items. Includes fields for identification, prioritization, effort estimation, iteration tracking, assignment, and relationships between tasks.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/knowledge/project-management/agile-principles/implementing.md#2025-04-13_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\n# 🆔 Item Identification & Core Details\nid:             # REQUIRED. Unique ID (e.g., STORY-001, TASK-002). Convention: {TYPE_PREFIX}-{NNN}\ntitle:          # REQUIRED. Human-readable title.\nstatus:         # REQUIRED. Current workflow state. (e.g., \"🟡 Backlog\", \"🔵 In Progress\"). See Statuses.\ntype:           # REQUIRED. Work item type. (e.g., \"📖 User Story\", \"🛠️ Task\"). See Types.\n\n# 🏆 Prioritization & Value\npriority:       # Recommended. Importance/Order. (e.g., \"🔼 High\"). See Priorities.\n# value_score:    # Optional. Business value estimate (e.g., 1-10).\n# risk_score:     # Optional. Risk estimate (e.g., 1-10).\n\n# ⏳ Effort & Iteration/Sprint Tracking\nestimated_effort: # Recommended. Story Points or T-Shirt Size. (e.g., \"3\", \"M\").\niteration:      # Optional. Sprint/Iteration identifier. (e.g., \"Sprint 4\", \"2025-Q2-Iter3\"). Used for filtering/grouping.\n# created_date:   # Optional. YYYY-MM-DD\nupdated_date:   # Recommended. YYYY-MM-DD. Auto-update ideally.\n\n# 🧑‍💻 Assignment & Collaboration\nassigned_to:    # Optional. (e.g., \"🧑‍💻 User:TeamA\", \"🤖 AI+Pair:Alice\").\n# reporter:       # Optional.\n\n# 🔗 Relationships & Context\nparent_feature: # Optional. Path to Feature/_overview.md.\nparent_story:   # Optional. ID of User Story this Task/Bug belongs to.\ndepends_on:     # Optional. List of other item IDs this blocks on.\nrelated_docs:   # Optional. Links to Personas, Designs, Specs.\ntags:           # Optional. Keywords. (e.g., [\"frontend\", \"mvp\", \"performance\"]).\n\n# ✅ Definition of Done Checklist (Team standard - optional here, often better in team docs)\n# dod_checklist: [\"Code Complete\", \"Tests Pass\", \"Reviewed\", \"AC Met\"]\n---\n\n# << Item Title >>\n\n## Description / User Story 📖 / Task Details 🛠️ / Bug Report 🐞\n... Markdown Body content specific to the item type ...\n\n## Acceptance Criteria ✅\n... Specific, testable checklist for *this* item ...\n```\n\n----------------------------------------\n\nTITLE: Creating an Injectable Service\nDESCRIPTION: Shows how to define a service that can be injected throughout the application using the @Injectable decorator. The providedIn: 'root' option ensures the service is available as a singleton at the root level.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/031-frontend/angular-developer/031_angular-developer.mode.md#2025-04-13_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n@Injectable({\n  providedIn: 'root'\n})\n```\n\n----------------------------------------\n\nTITLE: Metadata Tags for Accessibility Mode\nDESCRIPTION: Suggested metadata tags for identifying and categorizing accessibility-related content and functionality\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v6.3/improvements/accessibility-specialist-improvements.md#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n\"accessibility\", \"wcag\", \"a11y\", \"frontend\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Arc Generator in D3.js\nDESCRIPTION: Creates a new arc generator with default settings that can be used to generate SVG path data for circular or annular sectors. This is commonly used in pie charts or donut charts.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/d3js-specialist-llms-context-20250406.md#2025-04-13_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nconst arc = d3.arc();\n```\n\n----------------------------------------\n\nTITLE: Enabling pgvector Extension in Postgres SQL\nDESCRIPTION: SQL command to enable the pgvector extension for vector operations in Postgres. The extension is added to the 'extensions' schema.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/supabase-developer-llms-context-20250406.md#2025-04-13_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ncreate extension vector\nwith\n  schema extensions;\n```\n\n----------------------------------------\n\nTITLE: Implementing Access Control Query Template in Elasticsearch\nDESCRIPTION: A template query implementation for access control in Elasticsearch. It uses a boolean query with should clauses to either include documents without access control restrictions or documents where the user has explicit access through _allow_access_control field.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/elasticsearch-specialist-llms-context-20250406.md#2025-04-13_snippet_34\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"_id\": \"john@example.co\",\n  \"_version\": 1,\n  \"_seq_no\": 0,\n  \"_primary_term\": 1,\n  \"found\": true,\n  \"_source\": {\n    \"identity\": {\n      \"email\": \"john@example.co\",\n      \"access_control\": [\n        \"john@example.co\",\n        \"Engineering Members\"\n      ]\n    },\n    \"query\": {\n      \"template\": {\n        \"params\": {\n          \"access_control\": [\n            \"john@example.co\",\n            \"Engineering Members\"\n            ]\n        },\n        \"source\": \"\"\"\n        {\n          \"bool\": {\n            \"should\": [\n              {\n                \"bool\": {\n                  \"must_not\": {\n                    \"exists\": {\n                      \"field\": \"_allow_access_control\"\n                    }\n                  }\n                }\n              },\n              {\n                \"terms\": {\n                  \"_allow_access_control.enum\": {{#toJson}}access_control{{/toJson}}\n                }\n              }\n            ]\n          }\n        }\n        \"\"\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Destructuring Props in React Components\nDESCRIPTION: Shows how to use object destructuring to extract specific props directly in the component's parameter list. This pattern improves readability and makes it clear which props the component expects.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/031-frontend/react-specialist/031-work-fe-react-specialist.mode.md#2025-04-13_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nfunction MyComponent({ prop1, prop2 }) { ... }\n```\n\n----------------------------------------\n\nTITLE: Accessing App Configuration in Flask Blueprint\nDESCRIPTION: Shows how to access the application configuration within a blueprint using Flask's current_app context proxy. This approach allows blueprints to access application configuration without direct coupling.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/flask-developer-llms-context-20250406.md#2025-04-13_snippet_25\n\nLANGUAGE: Python\nCODE:\n```\nfrom flask import current_app, Blueprint, render_template\nadmin = Blueprint('admin', __name__, url_prefix='/admin')\n\n@admin.route('/')\ndef index():\n    return render_template(current_app.config['INDEX_TEMPLATE'])\n```\n\n----------------------------------------\n\nTITLE: Implementing Editor Commands in Three.js - JavaScript\nDESCRIPTION: Shows the structure of a custom editor command in Three.js. Includes methods for execution, undoing, and JSON serialization/deserialization.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/condensed_indices/threejs-specialist-condensed-index.md#2025-04-13_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass CustomCommand extends Command {\n  constructor(editor) {\n    super(editor);\n    this.type = 'CustomCommand';\n    this.name = 'Custom Action';\n  }\n\n  execute() {\n    // Implementation\n  }\n\n  undo() {\n    // Reverse implementation\n  }\n\n  toJSON() {\n    return {\n      type: this.type,\n      // Other properties\n    };\n  }\n\n  fromJSON(json) {\n    // Restore state from JSON\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Binding Styles to Arrays in Vue\nDESCRIPTION: This snippet shows how to bind multiple style objects to an element using an array in Vue. It allows for combining multiple style objects or overriding styles.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/vuejs-developer-llms-context-20250406.md#2025-04-13_snippet_24\n\nLANGUAGE: vue-html\nCODE:\n```\n<div :style=\"[baseStyles, overridingStyles]\"></div>\n```\n\n----------------------------------------\n\nTITLE: Creating Computed Properties in Vue.js\nDESCRIPTION: Illustrates the creation of computed properties, which are cached reactive calculations based on other reactive sources.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/condensed_indices/vuejs-developer-condensed-index.md#2025-04-13_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncomputed(getter)\ncomputed({ get, set })\n```\n\n----------------------------------------\n\nTITLE: MongoDB Document Insertion\nDESCRIPTION: Methods for inserting single and multiple documents into MongoDB collections.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/033-database/mongodb-specialist/033-work-db-mongodb-specialist.mode.md#2025-04-13_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndb.collection.insertOne(<document>)\n```\n\nLANGUAGE: javascript\nCODE:\n```\ndb.collection.insertMany([<doc1>, <doc2>, ...])\n```\n\n----------------------------------------\n\nTITLE: Setting up HTML structure for Bootstrap\nDESCRIPTION: Essential HTML structure for Bootstrap, including the doctype declaration and viewport meta tag for responsive behavior.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/condensed_indices/bootstrap-specialist-condensed-index.md#2025-04-13_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<!doctype html>\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n```\n\n----------------------------------------\n\nTITLE: Configuring VibeMode Custom Mode for Natural Language Programming\nDESCRIPTION: A JSON configuration for a VibeMode custom mode in Roo Code that transforms natural language descriptions into functional code. This mode embraces intuitive, flow-based development where developers focus on what they want to build rather than how to build it, with features for continuous testing and validation.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/knowledge/community_mode_ideas.md#2025-04-13_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"slug\": \"vibemode\",\n  \"name\": \"VibeMode\",\n  \"roleDefinition\": \"You are Roo, a Vibe Coding assistant that transforms natural language descriptions into working code. You embrace the philosophy that coding should be intuitive and flow-based, where developers can 'give in to the vibes' and focus on what they want to build rather than how to build it.\\n\\nDescription: An AI coding partner focused on natural language programming and vibe-based development with continuous testing\\n\\nSystem Prompt: You are a Vibe Coding assistant that helps transform natural language descriptions into working code. Focus on understanding intent over technical specifics while ensuring functionality through continuous testing. Embrace experimentation and rapid iteration with built-in validation.\\n\\nGoals:\\n- Transform natural language descriptions into functional code\\n- Maintain flow state by handling technical details automatically\\n- Suggest improvements while preserving user intent\\n- Handle error resolution autonomously when possible\\n- Ensure code quality through continuous testing\\n- Validate each iteration before proceeding\\n\\nPrimary Responsibilities:\\n\\nNatural Language Programming\\n- Transform conversational descriptions into functional code\\n- Handle technical implementation details automatically\\n- Maintain creative flow by managing error resolution autonomously\\n- Suggest improvements while preserving user intent\\n- Generate appropriate tests for new functionality\\n\\nWorkflow Optimization\\n- Minimize keyboard interaction by supporting voice-to-text input\\n- Handle error messages through simple copy-paste resolution\\n- Maintain context across development sessions\\n- Switch to appropriate specialized modes when needed\\n- Run tests automatically after each significant change\\n- Provide immediate feedback on test results\\n\\nTest-Driven Development\\n- Create tests before implementing new features\\n- Validate changes through automated testing\\n- Maintain test coverage throughout development\\n- Flag potential issues early in the development cycle\\n- Ensure backwards compatibility with existing functionality\\n\\nPrompt Templates:\\n- Initialization: 'I want to create {description}'\\n- Refinement: 'Can you modify this to {change}'\\n- Error Handling: 'Fix this error: {error}'\\n- Iteration: 'Let's improve {aspect}'\\n- Test Creation: 'Generate tests for {feature}'\\n- Validation: 'Verify the changes to {component}'\",\n  \"groups\": [\n    \"read\",\n    \"edit\",\n    \"browser\",\n    \"command\",\n    \"mcp\"\n  ],\n  \"customInstructions\": \"Prioritize working solutions over perfect code. Use error messages as learning opportunities. Maintain a conversational, encouraging tone. Suggest improvements without breaking flow. Document key decisions and assumptions. Focus on understanding intent over technical specifics. Embrace experimentation and rapid iteration. Switch to architect mode when structural changes are needed. Switch to ask mode when research is required. Switch to code mode when precise implementation is needed. Maintain context across mode transitions. Handle errors autonomously when possible. Preserve code context and conversation history. Support voice-to-text input through SuperWhisper integration. Generate and run tests for each new feature. Validate all changes through automated testing. Maintain test coverage throughout development. Provide immediate feedback on test results. Flag potential issues early in development cycle. Ensure backwards compatibility.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Separate Popper and Bootstrap JS Integration\nDESCRIPTION: Implementation showing separate inclusion of Popper.js and Bootstrap JavaScript files.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/bootstrap-specialist-llms-context-20250406.md#2025-04-13_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"{{< param \"cdn.popper\" >}}\" integrity=\"{{< param \"cdn.popper_hash\" >}}\" crossorigin=\"anonymous\"></script>\n<script src=\"{{< param \"cdn.js\" >}}\" integrity=\"{{< param \"cdn.js_hash\" >}}\" crossorigin=\"anonymous\"></script>\n```\n\n----------------------------------------\n\nTITLE: Creating a Workerd Environment Factory in TypeScript\nDESCRIPTION: Demonstrates how to create an environment factory for Workerd, setting up default options and merging with user configurations. This factory can be used to create environments for both development and build phases.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/vite-specialist-llms-context-20250406.md#2025-04-13_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nfunction createWorkerdEnvironment(\n  userConfig: EnvironmentOptions,\n): EnvironmentOptions {\n  return mergeConfig(\n    {\n      resolve: {\n        conditions: [\n          /*...*/\n        ],\n      },\n      dev: {\n        createEnvironment(name, config) {\n          return createWorkerdDevEnvironment(name, config, {\n            hot: true,\n            transport: customHotChannel(),\n          })\n        },\n      },\n      build: {\n        createEnvironment(name, config) {\n          return createWorkerdBuildEnvironment(name, config)\n        },\n      },\n    },\n    userConfig,\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up HTML viewport for Bootstrap\nDESCRIPTION: This snippet shows the essential HTML meta tag for responsive design with Bootstrap. It ensures proper rendering and touch zooming on mobile devices.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/031-frontend/bootstrap-specialist/031-work-fe-bootstrap-specialist.mode.md#2025-04-13_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n```\n\n----------------------------------------\n\nTITLE: Setting Up API Router and Middleware\nDESCRIPTION: Example of API router configuration and middleware implementation for request processing and error handling.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/032-backend/fastapi-developer/032-work-be-fastapi-developer.mode.md#2025-04-13_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nrouter = APIRouter(prefix=\"/api/v1\")\n\n@router.middleware(\"http\")\nasync def add_process_time_header(request: Request, call_next):\n    start_time = time.time()\n    response = await call_next(request)\n    process_time = time.time() - start_time\n    response.headers[\"X-Process-Time\"] = str(process_time)\n    return response\n```\n\n----------------------------------------\n\nTITLE: Grid-Based Form Layout\nDESCRIPTION: Complex form layout implementation using Bootstrap's grid system.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/bootstrap-specialist-llms-context-20250406.md#2025-04-13_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<form class=\"row g-3\">\n  <div class=\"col-md-6\">\n    <label for=\"inputEmail4\" class=\"form-label\">Email</label>\n    <input type=\"email\" class=\"form-control\" id=\"inputEmail4\">\n  </div>\n  <div class=\"col-md-6\">\n    <label for=\"inputPassword4\" class=\"form-label\">Password</label>\n    <input type=\"password\" class=\"form-control\" id=\"inputPassword4\">\n  </div>\n  <!-- More form fields -->\n  <div class=\"col-12\">\n    <button type=\"submit\" class=\"btn btn-primary\">Sign in</button>\n  </div>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Creating Task Completion Log Entry for Flask Projects\nDESCRIPTION: Markdown template for documenting completed Flask development tasks, including status, outcome, summary, and file references.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/032-backend/flask-developer/032-work-be-flask-developer.mode.md#2025-04-13_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n---\n**Status:** ✅ Complete\n**Outcome:** Success\n**Summary:** Implemented '/profile' route using Flask-Login and rendered user data in `profile.html` template. Added unit tests.\n**References:** [`app/routes.py` (modified), `app/templates/profile.html` (created), `tests/test_profile.py` (created)]\n```\n\n----------------------------------------\n\nTITLE: Implementing Access Modifiers in TypeScript Classes\nDESCRIPTION: Shows how to use public, private and protected access modifiers on class members.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/typescript-specialist-llms-context-20250406.md#2025-04-13_snippet_44\n\nLANGUAGE: typescript\nCODE:\n```\nclass Greeter {\n  public greet() {\n    console.log(\"Hello, \" + this.getName());\n  }\n  protected getName() {\n    return \"hi\";\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: NgClass Dynamic Class Setting\nDESCRIPTION: Shows how to dynamically set CSS classes using NgClass directive through a component method.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/angular-developer-llms-context-20250406.md#2025-04-13_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\nsetCurrentClasses() {\n  this.currentClasses = {\n    'saveable': this.canSave,\n    'modified': !this.isUnchanged,\n    'special': this.isSpecial\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Task Documentation Template in Markdown\nDESCRIPTION: Structured Markdown template for documenting task details including description, prerequisites, checklist of tasks, deliverables and references.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/knowledge/project-management/waterfall-project-management/implementing.md#2025-04-13_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n# << DESIGN: Concise description >>\n\n## Description ✍️\nDevelop the design element specified below, based on the referenced requirements. Ensure alignment with the overall architecture.\n\n## Inputs / Prerequisites 📥\n*   Requirement(s): See `requirement_ref` link(s) above.\n*   Overall Architecture Document: `docs/02_Design_SDD.md#architecture` (Example)\n*   UI Style Guide: `docs/UI_StyleGuide.md` (Example, if applicable)\n\n## Tasks / Checklist ✅\n*   - [ ] Review input requirements and architecture.\n*   - [ ] Draft the design element (e.g., diagram, schema definition, mockup).\n*   - [ ] Document the design element in the appropriate SDD section.\n*   - [ ] Conduct peer review of the design element.\n*   - [ ] Submit for formal approval (if required).\n*   - [ ] Incorporate feedback.\n\n## Outputs / Deliverables 📤\n*   Updated SDD Section(s): [Link to section, e.g., `docs/02_Design_SDD.md#section-X.Y`]\n*   Design artifact file(s): [Link to diagrams, mockups, etc.]\n\n## References 🔗\n*   `[SRS §X.Y](docs/01_Requirements_SRS.md#req-X.Y)`\n```\n\n----------------------------------------\n\nTITLE: Adding Components with shadcn CLI in Bash\nDESCRIPTION: Use the 'add' command to add components and dependencies to your project. This command allows you to specify which components to add or provide a URL to the component.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/shadcn-ui-specialist-llms-context-20250406.md#2025-04-13_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add [component]\n```\n\n----------------------------------------\n\nTITLE: Task Item Template in Markdown with YAML Frontmatter\nDESCRIPTION: Template for creating task items with metadata including ID, status, type, priority, dates, and relationships. Includes sections for task details, acceptance criteria, and notes.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/knowledge/project-management/kanban/implementing.md#2025-04-13_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n---\nid:             # ITEM-NNN\ntitle:          # 🛠️ Task: Technical objective\nstatus:         \"📥 Backlog\" # Initial status\ntype:           \"🛠️ Task\"\npriority:       \"▶️ Medium\"\n# blocked:\n# blocked_reason:\ncreated_date:   # YYYY-MM-DD\nupdated_date:   # YYYY-MM-DD HH:MM:SS\n# assigned_to:\nparent_area:    # Path to AREA/_overview.md\nrelated_docs:   [\"docs/WorkflowPolicies.md\"]\ntags:           [\"technical\", ...]\n---\n\n# << Task Title >>\n\n## Task Details 🛠️\n(Explain technical work, links to parent feature if applicable)\n\n## Acceptance Criteria ✅\n*   - [ ] Technical outcome 1 is met.\n*   - [ ] Technical outcome 2 is met.\n\n## Notes / Impediments 🚧\n(Updates, decisions, blocker details)\n```\n\n----------------------------------------\n\nTITLE: Creating a JSX Element in React\nDESCRIPTION: Shows the basic syntax for creating a JSX element, which is a core part of React's declarative UI approach. JSX allows HTML-like syntax within JavaScript.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/condensed_indices/react-specialist-condensed-index.md#2025-04-13_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst element = <h1>Hello</h1>;\n```\n\n----------------------------------------\n\nTITLE: Mode Definition File Fields\nDESCRIPTION: Key fields that are defined in a mode's JSON configuration file including slug, name, roleDefinition, customInstructions, and groups.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v6.3/improvements/mode-maker-improvements.md#2025-04-13_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"slug\": \"mode-identifier\",\n  \"name\": \"Mode Name\",\n  \"roleDefinition\": \"Role description\",\n  \"customInstructions\": \"Mode-specific instructions\",\n  \"groups\": [\"tool-groups\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Username/Password Sign-in with Clerk Elements\nDESCRIPTION: A complete implementation of a username/password sign-in flow using Clerk Elements. Features styled form inputs for username and password with error handling and navigation to sign-up.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/clerk-auth-specialist-llms-context-20250406.md#2025-04-13_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\n\nimport * as Clerk from '@clerk/elements/common'\nimport * as SignIn from '@clerk/elements/sign-in'\n\nexport default function SignInPage() {\n  return (\n    <div className=\"grid w-full flex-grow items-center bg-zinc-100 px-4 sm:justify-center\">\n      <SignIn.Root>\n        <SignIn.Step\n          name=\"start\"\n          className=\"w-full space-y-6 rounded-2xl bg-white px-4 py-10 shadow-md ring-1 ring-black/5 sm:w-96 sm:px-8\"\n        >\n          <!-- Component implementation details -->\n        </SignIn.Step>\n      </SignIn.Root>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Expo React Native Auth Implementation\nDESCRIPTION: Basic structure for implementing authentication in Expo React Native applications using Clerk.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/clerk-auth-specialist-llms-context-20250406.md#2025-04-13_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as React from 'react'\nimport { Text, TextInput, Button, View } from 'react-native'\n// Expo implementation...\n```\n\n----------------------------------------\n\nTITLE: Styling MUI Base Switch with Emotion\nDESCRIPTION: Comprehensive example of styling a MUI Base Switch component using Emotion CSS-in-JS, including hover states and animations\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/material-ui-specialist-llms-context-20250406.md#2025-04-13_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from 'react';\nimport { Switch } from '@mui/base/Switch';\nimport { styled } from '@mui/system';\n\nconst StyledSwitch = styled(Switch)`\n  font-size: 0;\n  position: relative;\n  display: inline-block;\n  width: 32px;\n  height: 20px;\n  cursor: pointer;\n  background: #b3c3d3;\n  border-radius: 9999px;\n  margin: 10px;\n  transition: all 150ms;\n\n  & .base-Switch-thumb {\n    display: block;\n    width: 14px;\n    height: 14px;\n    top: 3px;\n    left: 3px;\n    border-radius: 16px;\n    background-color: #fff;\n    position: relative;\n    transition: all 200ms;\n  }\n\n  & .base-Switch-input {\n    cursor: inherit;\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    top: 0;\n    left: 0;\n    opacity: 0;\n    z-index: 1;\n    margin: 0;\n  }\n\n  &:hover {\n    background: #8796a5;\n  }\n\n  &.base-Switch-disabled {\n    opacity: 0.4;\n    cursor: not-allowed;\n  }\n\n  &.base-Switch-checked {\n    background: #007fff;\n\n    & .base-Switch-thumb {\n      left: 14px;\n      top: 3px;\n      background-color: #fff;\n    }\n\n    &:hover {\n      background: #0059b2;\n    }\n  }\n`;\n\nexport default function StylingSlotsSingleComponent() {\n  return <StyledSwitch defaultChecked />;\n}\n```\n\n----------------------------------------\n\nTITLE: Preventing Default Behavior in React Events\nDESCRIPTION: This example shows how to prevent the default behavior of a form submission event in React using e.preventDefault(). It allows for custom handling of form submissions without page reloads.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/react-specialist-llms-context-20250406.md#2025-04-13_snippet_31\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function Signup() {\n  return (\n    <form onSubmit={e => {\n      e.preventDefault();\n      alert('Submitting!');\n    }}>\n      <input />\n      <button>Send</button>\n    </form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Component Template Features Overview\nDESCRIPTION: Comprehensive example showing various template features including HTML, JavaScript expressions, and component imports\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/astro-developer-llms-context-20250406.md#2025-04-13_snippet_5\n\nLANGUAGE: astro\nCODE:\n```\n---\nimport Banner from '../components/Banner.astro';\nimport Avatar from '../components/Avatar.astro';\nimport ReactPokemonComponent from '../components/ReactPokemonComponent.jsx';\nconst myFavoritePokemon = [/* ... */];\nconst { title } = Astro.props;\n---\n<!-- HTML comments supported! -->\n{/* JS comment syntax is also valid! */}\n\n<Banner />\n<h1>Hello, world!</h1>\n\n<p>{title}</p>\n\n<Avatar server:defer>\n  <svg slot=\"fallback\" class=\"generic-avatar\" transition:name=\"avatar\">...</svg>\n</Avatar>\n\n<ReactPokemonComponent client:visible />\n\n<ul>\n  {myFavoritePokemon.map((data) => <li>{data.name}</li>)}\n</ul>\n\n<p class:list={[\"add\", \"dynamic\", { classNames: true }]} />\n```\n\n----------------------------------------\n\nTITLE: Using Multiple CTEs for Complex PostgreSQL Statistics\nDESCRIPTION: Demonstrates the use of multiple Common Table Expressions (CTEs) to calculate film and customer statistics in a single query. The query combines data from two CTEs to produce a comprehensive statistical report.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/neon-db-specialist-llms-context-20250406.md#2025-04-13_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nWITH film_stats AS (\n    -- CTE 1: Calculate film statistics\n    SELECT\n        AVG(rental_rate) AS avg_rental_rate,\n        MAX(length) AS max_length,\n        MIN(length) AS min_length\n    FROM film\n),\ncustomer_stats AS (\n    -- CTE 2: Calculate customer statistics\n    SELECT\n        COUNT(DISTINCT customer_id) AS total_customers,\n        SUM(amount) AS total_payments\n    FROM payment\n)\n-- Main query using the CTEs\nSELECT\n    ROUND((SELECT avg_rental_rate FROM film_stats), 2) AS avg_film_rental_rate,\n    (SELECT max_length FROM film_stats) AS max_film_length,\n    (SELECT min_length FROM film_stats) AS min_film_length,\n    (SELECT total_customers FROM customer_stats) AS total_customers,\n    (SELECT total_payments FROM customer_stats) AS total_payments;\n```\n\n----------------------------------------\n\nTITLE: Named and Default Slots Implementation\nDESCRIPTION: Shows how to use named and default slots for content projection in Astro components\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/astro-developer-llms-context-20250406.md#2025-04-13_snippet_3\n\nLANGUAGE: astro\nCODE:\n```\n---\nimport Header from './Header.astro';\nimport Logo from './Logo.astro';\nimport Footer from './Footer.astro';\n\nconst { title } = Astro.props;\n---\n<div id=\"content-wrapper\">\n  <Header />\n  <slot name=\"after-header\" />\n  <Logo />\n  <h1>{title}</h1>\n  <slot />\n  <Footer />\n  <slot name=\"after-footer\" />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing WalkBuilder for Directory Traversal\nDESCRIPTION: Rust implementation using WalkBuilder to traverse directories with custom configuration for hidden files.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/tailwind-specialist-llms-context-20250406.md#2025-04-13_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse ignore::WalkBuilder;\n\nfor result in WalkBuilder::new(\"./\").hidden(false).build() {\n    println!(\"{:?}\", result);\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Blog Blueprint in Flask\nDESCRIPTION: Sets up the basic blog blueprint with necessary imports and blueprint registration in the Flask application factory.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/flask-developer-llms-context-20250406.md#2025-04-13_snippet_28\n\nLANGUAGE: Python\nCODE:\n```\nfrom flask import (\n    Blueprint, flash, g, redirect, render_template, request, url_for\n)\nfrom werkzeug.exceptions import abort\n\nfrom flaskr.auth import login_required\nfrom flaskr.db import get_db\n\nbp = Blueprint('blog', __name__)\n```\n\nLANGUAGE: Python\nCODE:\n```\ndef create_app():\n    app = ...\n    # existing code omitted\n\n    from . import blog\n    app.register_blueprint(blog.bp)\n    app.add_url_rule('/', endpoint='index')\n\n    return app\n```\n\n----------------------------------------\n\nTITLE: Configuring Arabic Analyzer in Elasticsearch\nDESCRIPTION: Example of reimplementing the Arabic analyzer as a custom analyzer in Elasticsearch. It includes stopword removal, stemming, and keyword marking for excluding words from stemming.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/elasticsearch-specialist-llms-context-20250406.md#2025-04-13_snippet_25\n\nLANGUAGE: JSON\nCODE:\n```\nPUT /arabic_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"filter\": {\n        \"arabic_stop\": {\n          \"type\":       \"stop\",\n          \"stopwords\":  \"_arabic_\"\n        },\n        \"arabic_keywords\": {\n          \"type\":       \"keyword_marker\",\n          \"keywords\":   [\"مثال\"]\n        },\n        \"arabic_stemmer\": {\n          \"type\":       \"stemmer\",\n          \"language\":   \"arabic\"\n        }\n      },\n      \"analyzer\": {\n        \"rebuilt_arabic\": {\n          \"tokenizer\":  \"standard\",\n          \"filter\": [\n            \"lowercase\",\n            \"decimal_digit\",\n            \"arabic_stop\",\n            \"arabic_normalization\",\n            \"arabic_keywords\",\n            \"arabic_stemmer\"\n          ]\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Junior Developer Code Reviewer Mode\nDESCRIPTION: JSON configuration for a mentoring code reviewer mode focused on educational feedback for junior developers. Includes permissions for read access and Markdown file editing only.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/knowledge/community_mode_ideas.md#2025-04-13_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"slug\": \"junior-reviewer\",\n  \"name\": \"Junior Dev Code Reviewer\",\n  \"roleDefinition\": \"You are Roo, an experienced and supportive code reviewer focused on helping junior developers grow. Your reviews are educational, encouraging, and packed with learning opportunities.\\n\\nYour core principles are:\\n\\n1. EDUCATIONAL FOCUS\\n- Explain concepts thoroughly with clear examples\\n- Link to relevant documentation and learning resources\\n- Break down complex issues into digestible pieces\\n\\n2. POSITIVE REINFORCEMENT\\n- Acknowledge good practices and clever solutions\\n- Frame feedback as learning opportunities\\n- Encourage experimentation while ensuring code quality\\n\\n3. FUNDAMENTAL BEST PRACTICES\\n- Focus on coding standards and common patterns\\n- Explain the reasoning behind established practices\\n- Introduce design patterns gradually\\n\\n4. CLEAR EXAMPLES\\n- Provide before/after code samples\\n- Explain changes step by step\\n- Show alternative approaches when relevant\\n\\n5. STRUCTURED LEARNING\\n- Organize feedback by learning objective\\n- Build on previous review comments\\n- Include exercises and challenges when appropriate\",\n  \"customInstructions\": \"When reviewing code:\\n1. Start with positive observations\\n2. Include detailed explanations with each suggestion\\n3. Link to relevant documentation\\n4. Provide clear, educational code examples\\n5. Use a supportive and encouraging tone\\n6. Focus on fundamental best practices\\n7. Create structured learning opportunities\\n8. Always explain the 'why' behind each suggestion\",\n  \"groups\": [\n    \"read\",\n    [\n      \"edit\",\n      {\n        \"fileRegex\": \"\\\\.(md)$\",\n        \"description\": \"Markdown files for review output\"\n      }\n    ],\n    \"command\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Protecting API Routes in SvelteKit\nDESCRIPTION: TypeScript code for protecting an API route in SvelteKit using Supabase authentication. Demonstrates session validation and database querying.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/supabase-developer-llms-context-20250406.md#2025-04-13_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\nimport { json, error } from '@sveltejs/kit'\n\nexport const GET = async ({ locals: { supabase, safeGetSession } }) => {\n  const { session } = await safeGetSession()\n  if (!session) {\n    // the user is not signed in\n    throw error(401, { message: 'Unauthorized' })\n  }\n  const { data } = await supabase.from('test').select('*')\n\n  return json({ data })\n}\n```\n\n----------------------------------------\n\nTITLE: ACL Filter Index Document Structure in Elasticsearch\nDESCRIPTION: Example document structure from the access control index showing user permissions and query template for DLS\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/elasticsearch-specialist-llms-context-20250406.md#2025-04-13_snippet_33\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"_index\": \".search-acl-filter-search-sharepoint\",\n```\n\n----------------------------------------\n\nTITLE: Development Commands and Testing\nDESCRIPTION: Common development and testing commands for project setup, unit testing, and E2E testing.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/031-frontend/threejs-specialist/031-work-fe-threejs-specialist.mode.md#2025-04-13_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run test-unit\nnpm run test-e2e [example_name]\nnpx servez -p 8080 --ssl\ngit clone --depth=1 ...\ndebugger;\n```\n\n----------------------------------------\n\nTITLE: Implementing Dependency Injection\nDESCRIPTION: Sample code showing dependency injection patterns using Depends and Annotated for database connections and shared logic.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/032-backend/fastapi-developer/032-work-be-fastapi-developer.mode.md#2025-04-13_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nasync def get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n\n@app.get(\"/users/\")\nasync def read_users(db: Annotated[Session, Depends(get_db)]):\n    users = db.query(User).all()\n    return users\n```\n\n----------------------------------------\n\nTITLE: Accepting Updates from Dependencies in JavaScript\nDESCRIPTION: Shows how a module can accept updates from its direct dependencies without reloading itself, using `import.meta.hot.accept()` with specified dependency paths.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/vite-specialist-llms-context-20250406.md#2025-04-13_snippet_44\n\nLANGUAGE: javascript\nCODE:\n```\nimport { foo } from './foo.js'\n\nfoo()\n\nif (import.meta.hot) {\n  import.meta.hot.accept('./foo.js', (newFoo) => {\n    // the callback receives the updated './foo.js' module\n    newFoo?.foo()\n  })\n\n  // Can also accept an array of dep modules:\n  import.meta.hot.accept(\n    ['./foo.js', './bar.js'],\n    ([newFooModule, newBarModule]) => {\n      // The callback receives an array where only the updated module is\n      // non null. If the update was not successful (syntax error for ex.),\n      // the array is empty\n    },\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Task Completion Log Template in Markdown\nDESCRIPTION: Template for logging task completion details including status, outcome, implementation summary and file references.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/032-backend/php-laravel-developer/032-work-be-php-laravel-developer.mode.md#2025-04-13_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n---\n**Status:** ✅ Complete\n**Outcome:** Success\n**Summary:** Implemented Product CRUD API using Eloquent in `ProductController.php`, created Blade views in `resources/views/products/`, added routes, and wrote passing feature tests.\n**References:** [`app/Http/Controllers/ProductController.php`, `app/Models/Product.php`, `routes/web.php`, `database/migrations/..._create_products_table.php`, `resources/views/products/index.blade.php`, `tests/Feature/ProductManagementTest.php` (all modified/created)]\n```\n\n----------------------------------------\n\nTITLE: Defining Anonymous Object Types in TypeScript\nDESCRIPTION: Demonstrates how to define an anonymous object type inline within a function parameter.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/typescript-specialist-llms-context-20250406.md#2025-04-13_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\nfunction greet(person: { name: string; age: number }) {\n  return \"Hello \" + person.name;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Three.js Dependencies\nDESCRIPTION: Command to install project dependencies using npm from the root folder of the Three.js project.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/threejs-specialist-llms-context-20250406.md#2025-04-13_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Initializing Security Task Log Template in Markdown\nDESCRIPTION: Template for creating the initial log entry when a security specialist receives a new task. The template captures the task ID, brief description, goal, and provided context.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/039-cross-functional/security-specialist/039-work-xf-security-specialist.mode.md#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Task Log: [TaskID] - Security Task: [Brief Description]\n\n**Goal:** [e.g., Conduct OWASP Top 10 assessment for the user authentication module, Threat model the new payment gateway API].\n**Context Provided:** [Stack Profile, Architecture Diagram Link, Relevant Code Files]\n```\n\n----------------------------------------\n\nTITLE: Framework Components with Hydration Directives\nDESCRIPTION: Demonstrates different client directive patterns for framework component hydration\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/astro-developer-llms-context-20250406.md#2025-04-13_snippet_8\n\nLANGUAGE: astro\nCODE:\n```\n---\nimport InteractiveButton from '../components/InteractiveButton.jsx';\nimport InteractiveCounter from '../components/InteractiveCounter.jsx';\nimport InteractiveModal from '../components/InteractiveModal.svelte';\n---\n<!-- This component's JS will begin importing when the page loads -->\n<InteractiveButton client:load />\n\n<!-- This component's JS will not be sent to the client until\nthe user scrolls down and the component is visible on the page -->\n<InteractiveCounter client:visible />\n\n<!-- This component won't render on the server, but will render on the client when the page loads -->\n<InteractiveModal client:only=\"svelte\" />\n```\n\n----------------------------------------\n\nTITLE: Formatting Example for Successful Git Task Completion Log in Markdown\nDESCRIPTION: Example template for logging successful completion of a Git task, including status, outcome, summary, and references to the resources affected by the operation.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/039-cross-functional/git-manager/039-work-xf-git-manager.mode.md#2025-04-13_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n```markdown\n---\n**Status:** ✅ Complete\n**Outcome:** Success\n**Summary:** Successfully created branch 'feature/login'.\n**References:** [Branch: feature/login]\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Task Completion Log Entry in Markdown\nDESCRIPTION: Example template for documenting task completion in markdown format, including status, outcome, summary, and references for Elasticsearch work.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/033-database/elasticsearch-specialist/033-work-db-elasticsearch-specialist.mode.md#2025-04-13_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n---\n**Status:** ✅ Complete\n**Outcome:** Success\n**Summary:** Created 'documents' index (ES v8.10) with `text` and `dense_vector` (768 dims) mappings. Verified indexing and k-NN search query functionality.\n**References:** [`mappings/documents.json` (created), `queries/doc_vector_search.json` (created)]\n```\n\n----------------------------------------\n\nTITLE: Implementing Feedback Form\nDESCRIPTION: Creates a React-based feedback form component with state management.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/astro-developer-llms-context-20250406.md#2025-04-13_snippet_26\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useState } from \"react\";\nimport type { FormEvent } from \"react\";\n\nexport default function Form() {\n  const [responseMessage, setResponseMessage] = useState(\"\");\n\n  async function submit(e: FormEvent<HTMLFormElement>) {\n    e.preventDefault();\n\n```\n\n----------------------------------------\n\nTITLE: Modifying Project Onboarding Workflow in diff format\nDESCRIPTION: Shows the proposed changes to the project-onboarding.json workflow to implement context-aware analysis. The changes include adding an initial intent analysis step and modifying the flow to potentially skip the new vs. existing project question.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v6.0/changes/project-onboarding-context-awareness-improvement.md#2025-04-13_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n **Workflow:**\n\n 1.  **Receive Task:** The Roo Commander will delegate the initial user request to you (including the original message context).\n+2.  **Analyze Initial Intent:**\n+    *   Review the message context received from Commander.\n+    *   Check for strong keywords indicating a new project (e.g., \"create\", \"new\", \"build\", \"start\").\n+    *   **If** intent for a *new project* is clear:\n+        *   Proceed directly to Step 4a (Ask for project name).\n+    *   **Else (intent is unclear or suggests existing project):**\n+        *   Proceed to Step 3 (Clarify Intent - Ask 'new vs. existing').\n-2.  **Clarify Intent:** Immediately use `ask_followup_question`:\\n    *   **Question:** \\\"Welcome! Are we starting a brand new project or working on an existing one?\\\"\\n    *   **Suggestions:** \\\"🚀 Start a new project.\\\", \\\"📂 Work on an existing project.\\\"\n+3.  **Clarify Intent (Fallback):** Use `ask_followup_question`:\\n    *   **Question:** \\\"Welcome! Are we starting a brand new project or working on an existing one?\\\"\\n    *   **Suggestions:** \\\"🚀 Start a new project.\\\", \\\"📂 Work on an existing project.\\\"\n-3.  **Branch based on user response:**\n+4.  **Branch based on user response (or direct path from Step 2):**\n     *   **If 'New Project':**\n-        a.  Use `ask_followup_question`: \\\"Great! What should we name this new project? ...\n+        a.  *(Now potentially reached directly from Step 2)* Use `ask_followup_question`: \\\"Great! What should we name this new project? ...\n     *   **If 'Existing Project':**\n         ... (rest of workflow follows) ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Clerk Middleware in Next.js\nDESCRIPTION: Basic setup of clerkMiddleware() in a Next.js application with route matcher configuration to skip static files and include API routes.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/clerk-auth-specialist-llms-context-20250406.md#2025-04-13_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { clerkMiddleware } from '@clerk/nextjs/server'\n\nexport default clerkMiddleware()\n\nexport const config = {\n  matcher: [\n    '/((?!_next|[^?]*\\.(?:html?|css|js(?!on)|jpe?g|webp|png|gif|svg|ttf|woff2?|ico|csv|docx?|xlsx?|zip|webmanifest)).*)',\n    '/(api|trpc)(.*)',\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Interpolating Fill Attribute with D3 Transition\nDESCRIPTION: Examples of using attrTween() to interpolate the fill attribute between colors. Shows three approaches: interpolating between fixed colors, interpolating from current color, and using a custom rainbow interpolator.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/d3js-specialist-llms-context-20250406.md#2025-04-13_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\ntransition.attrTween(\"fill\", () => d3.interpolateRgb(\"red\", \"blue\"));\n\ntransition.attrTween(\"fill\", function() {\n  return d3.interpolateRgb(this.getAttribute(\"fill\"), \"blue\");\n});\n\ntransition.attrTween(\"fill\", () => (t) => `hsl(${t * 360},100%,50%)`);\n```\n\n----------------------------------------\n\nTITLE: Basic Template Literal Type Declaration in TypeScript\nDESCRIPTION: Shows how to create a simple template literal type by concatenating a string literal with a type variable. This example defines a greeting type that combines 'hello' with the 'world' type.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/typescript-specialist-llms-context-20250406.md#2025-04-13_snippet_54\n\nLANGUAGE: typescript\nCODE:\n```\ntype World = \"world\";\n\ntype Greeting = `hello ${World}`;\n```\n\n----------------------------------------\n\nTITLE: Collection Iteration with @for\nDESCRIPTION: Shows how to iterate over collections using the @for block with tracking optimization.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/angular-developer-llms-context-20250406.md#2025-04-13_snippet_37\n\nLANGUAGE: angular-html\nCODE:\n```\n@for (item of items; track item.id) {\n  {{ item.name }}\n}\n```\n\n----------------------------------------\n\nTITLE: Structuring Second Opinion Report in Markdown\nDESCRIPTION: Comprehensive template for creating a formal feedback report. It includes sections for executive summary, original solution analysis, strengths, concerns, questions, alternative approaches with implementation details, and specific recommendations.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/039-cross-functional/second-opinion/039-work-xf-second-opinion.mode.md#2025-04-13_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n```markdown\n# Second Opinion: [Topic]\n\n## Executive Summary\n[1-2 paragraph overview of key findings and recommendations]\n\n## Original Solution Analysis\n[Analysis based on evaluation framework]\n\n### Strengths\n- ✅ [Strength 1]\n\n### Concerns\n- ⚠️ [Concern 1]\n\n### Questions\n- ❓ [Question 1]\n\n## Alternative Approaches\n\n### Alternative 1: [Name]\n[Detailed description, implementation details]\n\n#### Comparison to Original Solution\n[Direct comparison using established criteria]\n\n#### Trade-offs\n[Analysis of trade-offs, complexity, migration]\n\n## Recommendations\n- 📌 [Recommendation 1]\n```\n```\n\n----------------------------------------\n\nTITLE: State-Based Styling with Data Attributes in CSS\nDESCRIPTION: Demonstrates how to use data attributes for state-based styling of Clerk Elements components. This approach allows for styling based on the validity state of form fields.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/clerk-auth-specialist-llms-context-20250406.md#2025-04-13_snippet_14\n\nLANGUAGE: css\nCODE:\n```\n.input {\n  --border-color: gray;\n  border: 1px solid var(--border-color);\n\n  &[data-invalid] {\n    --border-color: red;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Reusable Head Component\nDESCRIPTION: Implements a reusable head component for managing metadata and SEO tags.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/astro-developer-llms-context-20250406.md#2025-04-13_snippet_20\n\nLANGUAGE: astro\nCODE:\n```\n---\nimport Favicon from \"../assets/Favicon.astro\";\nimport SomeOtherTags from \"./SomeOtherTags.astro\";\n\nconst { title = \"My Astro Website\", ...props } = Astro.props;\n---\n<link rel=\"sitemap\" href=\"/sitemap-index.xml\">\n<title>{title}</title>\n<meta name=\"description\" content=\"Welcome to my new Astro site!\">\n\n<!-- Web analytics -->\n<script data-goatcounter=\"https://my-account.goatcounter.com/count\" async src=\"//gc.zgo.at/count.js\"></script>\n\n<!-- Open Graph tags -->\n<meta property=\"og:title\" content=\"My New Astro Website\" />\n<meta property=\"og:type\" content=\"website\" />\n<meta property=\"og:url\" content=\"http://www.example.com/\" />\n<meta property=\"og:description\" content=\"Welcome to my new Astro site!\" />\n<meta property=\"og:image\" content=\"https://www.example.com/_astro/seo-banner.BZD7kegZ.webp\">\n<meta property=\"og:image:alt\" content=\"\">\n\n<SomeOtherTags />\n\n<Favicon />\n```\n\n----------------------------------------\n\nTITLE: Installing Material UI Core Dependencies\nDESCRIPTION: Commands to install Material UI and Emotion dependencies using npm, pnpm, and yarn package managers\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/material-ui-specialist-llms-context-20250406.md#2025-04-13_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @mui/material@next @emotion/react @emotion/styled\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @mui/material@next @emotion/react @emotion/styled\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @mui/material@next @emotion/react @emotion/styled\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Angular Component TypeScript\nDESCRIPTION: Shows basic structure of an Angular component with inline template implementation.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/angular-developer-llms-context-20250406.md#2025-04-13_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n@Component({\n  selector: 'user-profile',\n  template: `\n    <h1>User profile</h1>\n    <p>This is the user profile page</p>\n  `,\n})\nexport class UserProfile { /* Your component code goes here */ }\n```\n\n----------------------------------------\n\nTITLE: Creating User with Extended Options\nDESCRIPTION: Detailed example of user creation command with all available options including authentication restrictions and SCRAM mechanisms.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/mongodb-specialist-llms-context-20250406.md#2025-04-13_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\ndb.runCommand(\n   {\n     createUser: \"<name>\",\n     pwd: passwordPrompt(),      // Or  \"<cleartext password>\",\n     customData: { <any information> },\n     roles: [\n       { role: \"<role>\", db: \"<database>\" } | \"<role>\",\n       ...\n     ],\n     writeConcern: { <write concern> },\n     authenticationRestrictions: [\n        { clientSource: [ \"<IP|CIDR range>\", ... ], serverAddress: [ \"<IP|CIDR range>\", ... ] }, \n        ...\n     ],\n     mechanisms: [ \"<scram-mechanism>\", ... ], \n     digestPassword: <boolean>,\n     comment: <any>\n   }\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing File Restrictions in Custom Modes\nDESCRIPTION: JSON structure for specifying file restrictions in custom modes. This example shows how to restrict the 'edit' group to specific file types using a regular expression pattern.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/knowledge/custom_modes.md#2025-04-13_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\"edit\", {\n  \"fileRegex\": \"\\\\.md$\",\n  \"description\": \"Markdown files only\"\n}]\n```\n\n----------------------------------------\n\nTITLE: Initializing shadcn Project with CLI in Bash\nDESCRIPTION: Use the 'init' command to initialize configuration and dependencies for a new project. This command installs dependencies, adds the 'cn' util, and configures CSS variables.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/shadcn-ui-specialist-llms-context-20250406.md#2025-04-13_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest init\n```\n\n----------------------------------------\n\nTITLE: Defining Missing Data Handler in D3.js Area Generator\nDESCRIPTION: Shows how to configure the area generator to handle missing or invalid data points. This is useful for creating area charts with gaps or discontinuities.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/d3js-specialist-llms-context-20250406.md#2025-04-13_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nconst area = d3.area().defined((d) => !isNaN(d.Close));\n```\n\n----------------------------------------\n\nTITLE: URL Content Download Command\nDESCRIPTION: Bash command for downloading content from URLs using curl, with support for creating directories and following redirects\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/knowledge/sop-create-condensed-context-index.md#2025-04-13_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -L [URL] -o [Local Path] --create-dirs\n```\n\n----------------------------------------\n\nTITLE: Vector Data Type in PostgreSQL\nDESCRIPTION: SQL data type from pgvector extension for storing vector embeddings in Supabase PostgreSQL databases, used for AI and similarity search applications.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/032-backend/supabase-developer/032-work-be-supabase-developer.mode.md#2025-04-13_snippet_11\n\nLANGUAGE: SQL\nCODE:\n```\nvector(dimensions)\n```\n\n----------------------------------------\n\nTITLE: Installing Angular CLI Using Package Managers\nDESCRIPTION: Commands for globally installing Angular CLI using different package managers including npm, pnpm, yarn, and bun.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/angular-developer-llms-context-20250406.md#2025-04-13_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpm install -g @angular/cli\n```\n\nLANGUAGE: shell\nCODE:\n```\npnpm install -g @angular/cli\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn global add @angular/cli\n```\n\nLANGUAGE: shell\nCODE:\n```\nbun install -g @angular/cli\n```\n\n----------------------------------------\n\nTITLE: Final Task Log Template in Markdown\nDESCRIPTION: Template for completing task log entries with status, outcome, implementation summary, and file references.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/031-frontend/sveltekit-developer/031-work-fe-sveltekit-developer.mode.md#2025-04-13_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n---\n**Status:** ✅ Complete\n**Outcome:** Success - SvelteKit Features Implemented\n**Summary:** Implemented new route with form handling and server-side validation. Created +page.svelte, +page.server.js with actions for form processing, and added client-side enhancements with use:enhance.\n**References:** [`src/routes/contact/+page.svelte` (created), `src/routes/contact/+page.server.js` (created), `src/lib/validators.js` (modified)]\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering with Ternary in React\nDESCRIPTION: Component that uses ternary operator to conditionally render content based on isPacked prop\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/react-specialist-llms-context-20250406.md#2025-04-13_snippet_37\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Item({ name, isPacked }) {\n  return (\n    <li className=\"item\">\n      {isPacked ? (\n        <del>\n          {name + ' ✅'}\n        </del>\n      ) : (\n        name\n      )}\n    </li>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Cloud Storage Operations\nDESCRIPTION: Shows how to perform file upload operations and retrieve download URLs using Firebase Cloud Storage.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/032-backend/firebase-developer/032-work-be-firebase-developer.mode.md#2025-04-13_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getStorage, ref, uploadBytes, getDownloadURL } from 'firebase/storage';\n\nconst storage = getStorage();\n\n// Upload file\nconst storageRef = ref(storage, 'images/' + file.name);\nconst snapshot = await uploadBytes(storageRef, file);\n\n// Get download URL\nconst url = await getDownloadURL(storageRef);\n```\n\n----------------------------------------\n\nTITLE: Initializing Task Log Template in Markdown\nDESCRIPTION: Template for creating initial task log entries when starting bug investigation. Includes basic structure for documenting bug details and context.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/039-cross-functional/bug-fixer/039-work-xf-bug-fixer.mode.md#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Task Log: [TaskID] - Bug Fix: [Bug ID/Short Description]\n\n**Goal:** Investigate and fix Bug #[Bug ID] - [brief description].\n**Initial Context:** [Error message, logs path, reproduction steps, code refs, environment details]\n```\n\n----------------------------------------\n\nTITLE: Stringify and Export HTML in JavaScript\nDESCRIPTION: Fragment of a function that converts HTML to a JSON string and returns it as a default export. This appears to be part of a template or HTML processing utility.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/vite-specialist-llms-context-20250406.md#2025-04-13_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\nreturn `export default ${JSON.stringify(html)}`\n```\n\n----------------------------------------\n\nTITLE: Formatting Example for Failed Git Task with Conflicts in Markdown\nDESCRIPTION: Example template for logging a Git task that failed due to complex conflicts, indicating the need for manual intervention and including relevant branch references.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/039-cross-functional/git-manager/039-work-xf-git-manager.mode.md#2025-04-13_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n```markdown\n---\n**Status:** ❌ Failed\n**Outcome:** FailedConflict\n**Summary:** Failed merge: Complex conflicts in `file.xyz`. Escalated back to caller. Manual intervention required.\n**References:** [Branch: main, Branch: develop]\n```\n```\n\n----------------------------------------\n\nTITLE: Rendering Project Status Badges in HTML\nDESCRIPTION: HTML markup for displaying project status badges including build status, download count, version, and license information for Tailwind CSS.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/tailwind-specialist-llms-context-20250406.md#2025-04-13_snippet_11\n\nLANGUAGE: HTML\nCODE:\n```\n<p align=\"center\">\n    <a href=\"https://github.com/tailwindlabs/tailwindcss/actions\"><img src=\"https://img.shields.io/github/actions/workflow/status/tailwindlabs/tailwindcss/ci.yml?branch=next\" alt=\"Build Status\"></a>\n    <a href=\"https://www.npmjs.com/package/tailwindcss\"><img src=\"https://img.shields.io/npm/dt/tailwindcss.svg\" alt=\"Total Downloads\"></a>\n    <a href=\"https://github.com/tailwindcss/tailwindcss/releases\"><img src=\"https://img.shields.io/npm/v/tailwindcss.svg\" alt=\"Latest Release\"></a>\n    <a href=\"https://github.com/tailwindcss/tailwindcss/blob/master/LICENSE\"><img src=\"https://img.shields.io/npm/l/tailwindcss.svg\" alt=\"License\"></a>\n</p>\n```\n\n----------------------------------------\n\nTITLE: Dynamic Multi-Level Page Generation in Astro\nDESCRIPTION: Demonstrates generating multiple pages at different URL depths using getStaticPaths. The example creates pages with dynamic routes, titles, and content based on a predefined array of page data.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/astro-developer-llms-context-20250406.md#2025-04-13_snippet_31\n\nLANGUAGE: astro\nCODE:\n```\n---\nexport function getStaticPaths() {\n  const pages = [\n    {\n      slug: undefined,\n      title: \"Astro Store\",\n      text: \"Welcome to the Astro store!\",\n    },\n    {\n      slug: \"products\",\n      title: \"Astro products\",\n      text: \"We have lots of products for you\",\n    },\n    {\n      slug: \"products/astro-handbook\",\n      title: \"The ultimate Astro handbook\",\n      text: \"If you want to learn Astro, you must read this book.\",\n    },\n  ];\n  \n  return pages.map(({ slug, title, text }) => {\n    return {\n      params: { slug },\n      props: { title, text },\n    };\n  });\n}\n\nconst { title, text } = Astro.props;\n---\n<html>\n  <head>\n    <title>{title}</title>\n  </head>\n  <body>\n    <h1>{title}</h1>\n    <p>{text}</p>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Implementing Directory Structure for MDTM Scrum\nDESCRIPTION: Defines the recommended project directory structure for organizing Product Backlog Items by feature, including templates, backlog, and feature-specific folders.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/knowledge/project-management/scrum/README.md#2025-04-13_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nPROJECT_ROOT/\n├── src/                     # Source Code -> The Increment evolves here\n├── docs/                    # Supporting Docs (Personas, DoD, Architecture)\n│   └── DefinitionOfDone.md  # 👈 Example DoD Document\n├── tasks/                   # 👈 **Main MDTM Directory**\n│   ├── _templates/          # 📄 PBI Templates (Story, Bug, Task, Spike)\n│   │   ├── 📖_user_story.md\n│   │   ├── 🐞_bug.md\n│   │   ├── 🛠️_task.md\n│   │   └── 💡_spike.md\n│   │\n│   ├── BACKLOG/             # 📥 Optional: Unrefined/Unprioritized PBIs\n│   │   └── IDEA_reporting_dashboard.md\n│   │\n│   ├── FEATURE_authentication/  # 🔑 Product Backlog Area: Authentication Feature\n│   │   ├── _overview.md       # 🗺️ Optional: Epic/Feature Definition\n│   │   ├── 001_📖_user_login_story.md     # PBI\n│   │   ├── 002_🛠️_setup_auth_db_task.md   # PBI (Technical Task)\n│   │   └── 003_📖_password_reset_story.md # PBI\n│   │\n│   ├── FEATURE_user_profile/  # 👤 Product Backlog Area: User Profile Feature\n│   │   ├── _overview.md\n│   │   └── 004_📖_display_profile_story.md\n│   │\n│   └── AREA_tech_debt/        # 🧹 Product Backlog Area: Technical Debt\n│       └── 005_🧹_refactor_legacy_service.md\n│\n├── archive/                 # 📦 Optional: Completed items (e.g., items 'Done' in previous Sprints)\n│   └── ...\n└── README.md\n```\n\n----------------------------------------\n\nTITLE: Creating Task Completion Log Template in Markdown\nDESCRIPTION: Template for logging task completion details, including status, outcome, work summary, and file references for React development tasks.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/031-frontend/react-specialist/031-work-fe-react-specialist.mode.md#2025-04-13_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n---\n**Status:** ✅ Complete\n**Outcome:** Success\n**Summary:** Implemented UserProfile component (`src/components/UserProfile.tsx`) using functional components, hooks, and TypeScript. Added state management via Context API (`src/context/UserContext.tsx`). Integrated with API using custom hook (`src/hooks/useUserData.ts`). Delegated complex styling to `tailwind-specialist` (Task: TASK-TW-...). Added unit tests (`src/components/UserProfile.test.tsx`). All tests passing.\n**References:** [`src/components/UserProfile.tsx` (created), `src/context/UserContext.tsx` (created), `src/hooks/useUserData.ts` (created), `src/components/UserProfile.test.tsx` (created)]\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Link Component in Next.js (JavaScript)\nDESCRIPTION: Demonstrates how to create a basic Next.js page component with a Link to the dashboard. Uses the Link component from next/link for client-side navigation.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/nextjs-developer-llms-context-20250406.md#2025-04-13_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport Link from 'next/link'\n\nexport default function Page() {\n  return <Link href=\"/dashboard\">Dashboard</Link>\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling pg_stat_statements Extension in PostgreSQL\nDESCRIPTION: SQL commands to enable and disable the pg_stat_statements extension. Creates the extension within a separate schema to keep the public schema clean.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/supabase-developer-llms-context-20250406.md#2025-04-13_snippet_38\n\nLANGUAGE: sql\nCODE:\n```\n-- Enable the \"pg_stat_statements\" extension\ncreate extension pg_stat_statements with schema extensions;\n\n-- Disable the \"pg_stat_statements\" extension\ndrop extension if exists pg_stat_statements;\n```\n\n----------------------------------------\n\nTITLE: Defining Astro DB Tables in TypeScript\nDESCRIPTION: Shows how to define database tables using the defineTable() and column utilities from astro:db. This example configures a Comment table with required text columns for author and body.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/astro-developer-llms-context-20250406.md#2025-04-13_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineDb, defineTable, column } from 'astro:db';\n\nconst Comment = defineTable({\n  columns: {\n    author: column.text(),\n    body: column.text(),\n  }\n})\n\nexport default defineDb({\n  tables: { Comment },\n})\n```\n\n----------------------------------------\n\nTITLE: Task Template Metadata Structure in YAML\nDESCRIPTION: Template showing the required YAML metadata fields for task documentation, including scheduling, assignment, approval, tags and change request tracking.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/knowledge/project-management/waterfall-project-management/implementing.md#2025-04-13_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# design_ref:     # Optional: Link if refining previous design element\n# test_case_ref:  # Optional: Link to test cases this enables\n\n# ⏳ Scheduling & Effort\ncreated_date:   # << YYYY-MM-DD >>\nupdated_date:   # << YYYY-MM-DD >>\n\n# 🧑‍💻 Assignment & Approval\nassigned_to:    # Optional\napproved_by:    # Optional\n\n# 🏷️ Tags\ntags:           []\n\n# 🔁 Change Request Link\nrelated_cr:     # Optional\n```\n\n----------------------------------------\n\nTITLE: SvelteKit Project Structure Overview\nDESCRIPTION: Illustrates the standard directory and file structure of a SvelteKit project, showing the organization of source files, routes, and configuration files.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/sveltekit-llms-context-20250406.md#2025-04-13_snippet_36\n\nLANGUAGE: bash\nCODE:\n```\nmy-project/\n├ src/\n│ ├ lib/\n│ │ ├ server/\n│ │ │ └ [your server-only lib files]\n│ │ └ [your lib files]\n│ ├ params/\n│ │ └ [your param matchers]\n│ ├ routes/\n│ │ └ [your routes]\n│ ├ app.html\n│ ├ error.html\n│ ├ hooks.client.js\n│ ├ hooks.server.js\n│ └ service-worker.js\n├ static/\n│ └ [your static assets]\n├ tests/\n│ └ [your tests]\n├ package.json\n├ svelte.config.js\n├ tsconfig.json\n└ vite.config.js\n```\n\n----------------------------------------\n\nTITLE: Accessing Request Headers in Next.js\nDESCRIPTION: Usage of the headers function from next/headers to access request headers in Next.js Server Components or API routes.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/condensed_indices/nextjs-developer-condensed-index.md#2025-04-13_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nheaders().get('...')\n```\n\n----------------------------------------\n\nTITLE: Installing Joy UI Core Dependencies\nDESCRIPTION: Commands to install Joy UI and its Emotion dependencies using different package managers\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/material-ui-specialist-llms-context-20250406.md#2025-04-13_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @mui/joy @emotion/react @emotion/styled\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @mui/joy @emotion/react @emotion/styled\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @mui/joy @emotion/react @emotion/styled\n```\n\n----------------------------------------\n\nTITLE: Defining Component Output Event Emitters\nDESCRIPTION: Illustrates how to define output event emitters for a component using both the @Output() decorator and the new output<T>() syntax for improved type inference.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/031-frontend/angular-developer/031_angular-developer.mode.md#2025-04-13_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\n@Output() oldStyleEvent = new EventEmitter<string>();\noutput newStyleEvent = output<number>();\n```\n\n----------------------------------------\n\nTITLE: Configuring SvelteKit Node Adapter\nDESCRIPTION: Basic configuration for the Node adapter in a SvelteKit project's configuration file.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/sveltekit-llms-context-20250406.md#2025-04-13_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nimport adapter from '@sveltejs/adapter-node';\n\nexport default {\n\tkit: {\n\t\tadapter: adapter()\n\t}\n};\n```\n\n----------------------------------------\n\nTITLE: Declaring Props and Emits in Vue.js Components\nDESCRIPTION: Shows how to declare props and emits within a Vue component using the script setup syntax.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/condensed_indices/vuejs-developer-condensed-index.md#2025-04-13_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ndefineProps([...])\ndefineProps({...})\ndefineEmits([...])\n```\n\n----------------------------------------\n\nTITLE: Disabling Transitions on Color Scheme Change in Material UI\nDESCRIPTION: Shows how to disable CSS transitions when switching between light and dark color schemes in Material UI by applying the disableTransitionOnChange prop to the ThemeProvider component.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/material-ui-specialist-llms-context-20250406.md#2025-04-13_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\n<ThemeProvider disableTransitionOnChange />\n```\n\n----------------------------------------\n\nTITLE: Downloading URL Content with cURL in Bash\nDESCRIPTION: Command for downloading content from URLs using cURL. This is used during the input acquisition phase to fetch remote documentation sources for processing.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/040-assistant/context-condenser/040-asst-context-condenser.mode.md#2025-04-13_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -L [URL] -o [Local Path] --create-dirs\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Front Matter Structure for MDTM Tasks\nDESCRIPTION: The structured metadata section that appears at the top of each task file. It includes required fields like ID, title, status, and type, plus recommended and optional fields for scheduling, assignment, relationships, and review information.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/knowledge/project-management/markdown-driven-task-management-MDTM/markdown-driven-task-management-MDTM-feature-structure/implementing.md#2025-04-13_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\n# 🆔 Task Identification & Core Metadata (Required)\nid:             # REQUIRED. Unique ID (e.g., FEAT-AUTH-001, BUG-123). Convention: {TYPE_PREFIX}-{FEATURE_NAME_ABBR}-{NNN}\ntitle:          # REQUIRED. Human-readable title (String). \"Implement Login UI (Vue)\"\nstatus:         # REQUIRED. Current workflow state (String, from standard list). See Statuses below. \"🟡 To Do\"\ntype:           # REQUIRED. Category of work (String, from standard list). See Types below. \"🌟 Feature\"\n\n# ⏳ Scheduling & Effort (Recommended)\npriority:       # Recommended. Task importance (String, from standard list). See Priorities below. \"🔼 High\"\ncreated_date:   # Recommended. Date created (YYYY-MM-DD). \"2025-04-05\"\nupdated_date:   # Recommended. Date last modified (YYYY-MM-DD). \"2025-04-05\"\ndue_date:       # Optional. Target completion date (YYYY-MM-DD). \"2025-04-12\"\nestimated_effort: # Optional. Size estimate (String/Number). E.g., \"M\", \"L\", \"3\", \"5\" (Points or T-Shirt Size)\n\n# 🧑‍💻 Assignment & Responsibility (Recommended)\nassigned_to:    # Recommended. Who tackles the next action (String). \"🤖 AI\", \"🧑‍💻 User:Alice\", \"👥 Team:Frontend\"\nreporter:       # Optional. Who created/reported the task (String). \"🧑‍💻 User:Bob\" (Especially for Bugs)\n\n# 🔗 Relationships & Context (Crucial for Context)\nparent_task:    # Optional. Path/ID of parent feature/epic (String). \"FEATURE_authentication/_overview.md\"\ndepends_on:     # Optional. List of task IDs this waits for (List of Strings). [\"FEAT-AUTH-002\"]\nrelated_docs:   # Optional. Links to external docs/sections (List of Strings). [\"docs/PRD.md#login-reqs\", \"docs/API.md#auth\"]\ntags:           # Optional. Keywords for filtering (List of Strings). [\"ui\", \"vue\", \"auth\", \"critical\"]\n\n# 🤖 AI & Review Specific Fields (Optional)\nai_prompt_log:  # Optional. Log of key prompts used (List of Strings or multiline string). [\"Generate component X...\", \"Refine Y...\"]\nreview_checklist: # Optional. Standard review checks (List of Strings - use Markdown checkboxes). [\"[ ] Code Style\", \"[ ] Tests Pass\"]\nreviewed_by:    # Optional. Who reviewed the task (String). \"🧑‍💻 User:Charlie\"\n---\n\n# Title matching YAML title (optional redundancy)\n## Description ✍️\n... Markdown Body ...\n```\n\n----------------------------------------\n\nTITLE: Authentication Methods in Supabase JS Client\nDESCRIPTION: Core JavaScript client methods for user authentication in Supabase, including sign in with various providers, user registration, session retrieval, and auth state change listeners.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/032-backend/supabase-developer/032-work-be-supabase-developer.mode.md#2025-04-13_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nsupabase.auth.signInWith...({ provider?, email?, password?, phone?, options? })\nsupabase.auth.signUp({ email?, password?, phone?, options? })\nsupabase.auth.getSession()\nsupabase.auth.getUser()\nsupabase.auth.onAuthStateChange((event, session) => ...)\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Anime.js with Vanilla JavaScript\nDESCRIPTION: This snippet demonstrates how to import Anime.js modules and create animations in vanilla JavaScript. It includes a bounce animation loop, making an element draggable, and animating rotation on click events.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/animejs-specialist-llms-context-20250406.md#2025-04-13_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { animate, utils, createSpring } from 'animejs';\n\nconst [ $logo ] = utils.$('.logo.js');\nconst [ $button ] = utils.$('button');\nlet rotations = 0;\n\n// Created a bounce animation loop\nanimate('.logo.js', {\n  scale: [\n    { to: 1.25, ease: 'inOut(3)', duration: 200 },\n    { to: 1, ease: createSpring({ stiffness: 300 }) }\n  ],\n  loop: true,\n  loopDelay: 250,\n});\n\n// Make the logo draggable around its center\ncreateDraggable('.logo.js', {\n  container: [0, 0, 0, 0],\n  releaseEase: createSpring({ stiffness: 200 })\n});\n\n// Animate logo rotation on click\nconst rotateLogo = () => {\n  rotations++;\n  $button.innerText = `rotations: ${rotations}`;\n  animate($logo, {\n    rotate: rotations * 360,\n    ease: 'out(4)',\n    duration: 1500,\n  });\n}\n\n$button.addEventListener('click', rotateLogo);\n```\n\n----------------------------------------\n\nTITLE: Defining List Field in Pydantic\nDESCRIPTION: Shows how to define a simple list field in a Pydantic model.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/fastapi-developer-llms-context-20250406.md#2025-04-13_snippet_26\n\nLANGUAGE: python\nCODE:\n```\ntags: list\n```\n\n----------------------------------------\n\nTITLE: Installing Django with pip in Python\nDESCRIPTION: Command to install the latest version of Django using pip, the Python package installer. This should be run in an activated virtual environment to isolate dependencies.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/django-developer-llms-context-20250406.md#2025-04-13_snippet_44\n\nLANGUAGE: bash\nCODE:\n```\n$ python -m pip install Django\n```\n\n----------------------------------------\n\nTITLE: Language-Specific Debug Tags\nDESCRIPTION: Example of language-specific debugging tag format for specialized versions of the bug fixer.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v6.3/improvements/bug-fixer-improvements.md#2025-04-13_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n\"python-debugging\"\n```\n\n----------------------------------------\n\nTITLE: Joining Data by Key in D3.js\nDESCRIPTION: Shows how to use a key function with selection.data() to join data to DOM elements based on a unique identifier. It demonstrates handling both the datum and the DOM element's properties in the key function to maintain element identity across updates.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/d3js-specialist-llms-context-20250406.md#2025-04-13_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"Ford\"></div>\n<div id=\"Jarrah\"></div>\n<div id=\"Kwon\"></div>\n<div id=\"Locke\"></div>\n<div id=\"Reyes\"></div>\n<div id=\"Shephard\"></div>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = [\n  {name: \"Locke\", number: 4},\n  {name: \"Reyes\", number: 8},\n  {name: \"Ford\", number: 15},\n  {name: \"Jarrah\", number: 16},\n  {name: \"Shephard\", number: 23},\n  {name: \"Kwon\", number: 42}\n];\n\nd3.selectAll(\"div\")\n  .data(data, function(d) { return d ? d.name : this.id; })\n    .text(d => d.number);\n```\n\n----------------------------------------\n\nTITLE: Task Completion Log Template\nDESCRIPTION: Markdown template for recording the completion status and summary of mode maintenance tasks.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/039-cross-functional/mode-maintainer/039-work-xf-mode-maintainer.mode.md#2025-04-13_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n---\n**Status:** ✅ Complete\n**Outcome:** Success\n**Summary:** Updated `customInstructions` in `[target_mode_path]` to incorporate [brief description of change, e.g., new escalation rules].\n**References:** [`[target_mode_path]` (modified)]\n```\n\n----------------------------------------\n\nTITLE: Running End-to-End Tests for Three.js\nDESCRIPTION: Command to execute end-to-end tests for the Three.js project using npm.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/threejs-specialist-llms-context-20250406.md#2025-04-13_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test-e2e\n```\n\n----------------------------------------\n\nTITLE: Connecting to Supabase Database with Drizzle ORM in TypeScript\nDESCRIPTION: TypeScript code to set up a connection to the Supabase database using the Connection Pooler and Drizzle ORM. It uses environment variables for the database URL and disables prefetch for transaction pool mode compatibility.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/supabase-developer-llms-context-20250406.md#2025-04-13_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nimport 'dotenv/config'\n\nimport { drizzle } from 'drizzle-orm/postgres-js'\nimport postgres from 'postgres'\n\nconst connectionString = process.env.DATABASE_URL\n\n// Disable prefetch as it is not supported for \"Transaction\" pool mode\nexport const client = postgres(connectionString, { prepare: false })\nexport const db = drizzle(client);\n```\n\n----------------------------------------\n\nTITLE: Defining Mermaid Diagram Types in Markdown\nDESCRIPTION: This snippet lists the supported Mermaid diagram types that the Diagramer mode can generate. It includes graph, sequence, ER, C4, state, and Gantt diagrams.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/030-design/diagramer/030-work-des-diagramer.mode.md#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```mermaid\ngraph, sequenceDiagram, erDiagram, C4Context, stateDiagram, gantt\n```\n```\n\n----------------------------------------\n\nTITLE: Web Worker Import Configuration\nDESCRIPTION: Examples of importing scripts as web workers using different worker types and inline options.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/vite-specialist-llms-context-20250406.md#2025-04-13_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\n// Separate chunk in the production build\nimport Worker from './shader.js?worker'\nconst worker = new Worker()\n\n// sharedworker\nimport SharedWorker from './shader.js?sharedworker'\nconst sharedWorker = new SharedWorker()\n\n// Inlined as base64 strings\nimport InlineWorker from './shader.js?worker&inline'\n```\n\n----------------------------------------\n\nTITLE: Dev Server Configuration Plugin\nDESCRIPTION: Example showing how to configure the Vite dev server using the configureServer hook to add custom middleware.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/vite-specialist-llms-context-20250406.md#2025-04-13_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nconst myPlugin = () => ({\n  name: 'configure-server',\n  configureServer(server) {\n    server.middlewares.use((req, res, next) => {\n      // custom handle request...\n    })\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Task Log Template in Markdown\nDESCRIPTION: Template for creating initial task log entries in the project journal, including task ID, API name, and goal definition.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/032-backend/api-developer/032-work-be-api-developer.mode.md#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Task Log: [TaskID] - API Development: [API Name/Feature]\n\n**Goal:** Design and implement [REST/GraphQL] API for [brief goal, e.g., product catalog management] based on [Requirements Doc Ref].\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering with @if in Angular\nDESCRIPTION: Demonstrates conditional rendering in Angular templates using the @if block to show different content based on user admin status.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/angular-developer-llms-context-20250406.md#2025-04-13_snippet_23\n\nLANGUAGE: html\nCODE:\n```\n<h1>User profile</h1>\n\n@if (isAdmin()) {\n  <h2>Admin settings</h2>\n  <!-- ... -->\n} @else {\n  <h2>User settings</h2>\n  <!-- ... -->  \n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Project-Specific Mode Override\nDESCRIPTION: Example of a project-specific mode that overrides the default 'code' mode. This configuration restricts editing to JavaScript and TypeScript files only, with project-specific custom instructions.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/knowledge/custom_modes.md#2025-04-13_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"customModes\": [{\n    \"slug\": \"code\",\n    \"name\": \"Code (Project-Specific)\",\n    \"roleDefinition\": \"You are a software engineer with project-specific constraints\",\n    \"groups\": [\n      \"read\",\n      [\"edit\", { \"fileRegex\": \"\\\\.(js|ts)$\", \"description\": \"JS/TS files only\" }]\n    ],\n    \"customInstructions\": \"Focus on project-specific JS/TS development\"\n  }]\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Button Clicks in React\nDESCRIPTION: Demonstrates how to handle click events on a Button component using the onClick prop. The example shows an alert being triggered when the button is clicked.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/material-ui-specialist-llms-context-20250406.md#2025-04-13_snippet_16\n\nLANGUAGE: jsx\nCODE:\n```\n<Button\n  onClick={() => {\n    alert('clicked');\n  }}\n>\n  Click me\n</Button>\n```\n\n----------------------------------------\n\nTITLE: Accessing Cookies in Next.js\nDESCRIPTION: Usage of the cookies function from next/cookies to access request cookies in Next.js Server Components or API routes.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/condensed_indices/nextjs-developer-condensed-index.md#2025-04-13_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ncookies().get('...')\n```\n\n----------------------------------------\n\nTITLE: Installing Material UI Next.js Dependencies\nDESCRIPTION: Commands for installing Material UI dependencies specifically for Next.js App Router integration\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/material-ui-specialist-llms-context-20250406.md#2025-04-13_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @mui/material-nextjs @emotion/cache\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @mui/material-nextjs @emotion/cache\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @mui/material-nextjs @emotion/cache\n```\n\n----------------------------------------\n\nTITLE: Task Template Structure in YAML/Markdown\nDESCRIPTION: Template structure for defining project tasks with YAML metadata including WBS identifiers, assignments, dates, and CPM-related fields.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/knowledge/project-management/critical-path-method/implementing.md#2025-04-13_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n# finish_date_actual:\n\n# 🧑‍💻 Context & Assignment\nwbs_id:         # << WBS Identifier (e.g., \"1.2\") >>\n# assigned_to:\n# related_docs:\ntags:           []\n\n# ======================================================================\n# ⚠️ CALCULATED FIELDS (Output from External CPM Tool - DO NOT EDIT HERE)\n# ======================================================================\n# critical_path:\n# total_float:\n# free_float:\n# early_start:\n# early_finish:\n# late_start:\n# late_finish:\n---\n\n# << Task Title >>\n\n## Task Objective / Description 🏗️\n(Detailed definition of the work for this task.)\n\n## Duration Basis / Assumptions 🧐\n*   (Estimated based on...)\n*   (Assumes...)\n\n## Predecessor Rationale (Why `depends_on`?) 🔗\n*   (Depends on Task X because...)\n*   (Depends on Task Y because...)\n\n## Resources Required 🛠️\n*   (List resources needed)\n```\n\n----------------------------------------\n\nTITLE: MongoDB Update Operations\nDESCRIPTION: Methods for updating multiple documents matching a filter condition with specified modifications.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/condensed_indices/mongodb-specialist-condensed-index.md#2025-04-13_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndb.collection.updateMany(<filter>, <update>, <options>)\n```\n\n----------------------------------------\n\nTITLE: Using Slots in Vue.js Components\nDESCRIPTION: Shows how to use slots for content distribution in Vue.js components, including named slots and slot targeting.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/condensed_indices/vuejs-developer-condensed-index.md#2025-04-13_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<slot>\n<slot name=\"name\">\n<template #name>\n```\n\n----------------------------------------\n\nTITLE: Defining Readonly Properties in TypeScript Interfaces\nDESCRIPTION: Illustrates how to create immutable properties using the readonly modifier in interfaces.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/typescript-specialist-llms-context-20250406.md#2025-04-13_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Point {\n  readonly x: number;\n  readonly y: number;\n}\n\nlet p1: Point = { x: 10, y: 20 };\n// p1.x = 5; // error!\n```\n\n----------------------------------------\n\nTITLE: Creating a Documentation Writer Custom Mode\nDESCRIPTION: Complete example of a custom mode configured for documentation writing. This mode allows reading files and editing only Markdown files, with custom instructions focusing on clear explanations.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/knowledge/custom_modes.md#2025-04-13_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"customModes\": [{\n    \"slug\": \"docs-writer\",\n    \"name\": \"Documentation Writer\",\n    \"roleDefinition\": \"You are a technical writer specializing in clear documentation\",\n    \"groups\": [\n      \"read\",\n      [\"edit\", { \"fileRegex\": \"\\\\.md$\", \"description\": \"Markdown files only\" }]\n    ],\n    \"customInstructions\": \"Focus on clear explanations and examples\"\n  }]\n}\n```\n\n----------------------------------------\n\nTITLE: Content Collection Configuration in Astro\nDESCRIPTION: Example of defining content collections using defineCollection and zod schema validation\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/031-frontend/astro-developer/031-work-fe-astro-developer.mode.md#2025-04-13_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { defineCollection, z } from 'astro:content';\n\nexport const collections = {\n  posts: defineCollection({\n    schema: z.object({\n      title: z.string(),\n      date: z.date()\n    })\n  })\n};\n```\n\n----------------------------------------\n\nTITLE: Installing AnimeJS with NPM\nDESCRIPTION: Command to install Anime.js using NPM package manager for projects using bundlers like Vite or esbuild.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/animejs-specialist-llms-context-20250406.md#2025-04-13_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nnpm install animejs\n```\n\n----------------------------------------\n\nTITLE: Rule Retriever Example in Elasticsearch\nDESCRIPTION: Shows how to use a rule retriever to apply query rules on top of search results.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/elasticsearch-specialist-llms-context-20250406.md#2025-04-13_snippet_8\n\nLANGUAGE: console\nCODE:\n```\nGET movies/_search\n{\n  \"retriever\": {\n    \"rule\": {\n      \"match_criteria\": {\n        \"query_string\": \"harry potter\"\n      },\n      \"ruleset_ids\": [\n        \"my-ruleset\"\n      ],\n      \"retriever\": {\n        \"standard\": {\n          \"query\": {\n            \"query_string\": {\n              \"query\": \"harry potter\"\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating .gitignore File Content\nDESCRIPTION: Defines standard content for a .gitignore file, including common patterns for Node.js projects.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/010-director/project-onboarding/010-dir-project-onboarding.mode.md#2025-04-13_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nnode_modules\n.env\ndist\n*.log\n```\n\n----------------------------------------\n\nTITLE: Importing Bootstrap Sass in a custom stylesheet\nDESCRIPTION: Example of how to import Bootstrap's Sass files in a custom stylesheet, allowing for variable overrides and selective component imports.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/condensed_indices/bootstrap-specialist-condensed-index.md#2025-04-13_snippet_2\n\nLANGUAGE: Sass\nCODE:\n```\n$primary: ...;\n@import \".../bootstrap/scss/bootstrap\";\n```\n\n----------------------------------------\n\nTITLE: Creating Task Log Entry in Markdown\nDESCRIPTION: Example template for creating an initial task log entry in markdown format, showing how to document task goals and context for Elasticsearch-related work.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/033-database/elasticsearch-specialist/033-work-db-elasticsearch-specialist.mode.md#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Task Log: [TaskID] - Elasticsearch Vector Search Setup\n\n**Goal:** Define mapping for 'documents' index with dense_vector field (ES v8.10).\n**Context:** Existing cluster, Python client library.\n```\n\n----------------------------------------\n\nTITLE: Creating Detailed Material UI Color Theme\nDESCRIPTION: Advanced example of creating a custom color theme with complete color variants including light, main, dark, and contrastText for both primary and secondary palettes\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/material-ui-specialist-llms-context-20250406.md#2025-04-13_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createTheme } from '@mui/material/styles';\n\nconst theme = createTheme({\n  palette: {\n    primary: {\n      light: '#757ce8',\n      main: '#3f50b5',\n      dark: '#002884',\n      contrastText: '#fff',\n    },\n    secondary: {\n      light: '#ff7961',\n      main: '#f44336',\n      dark: '#ba000d',\n      contrastText: '#000',\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Portfolio Website Project Request Example\nDESCRIPTION: Example prompt for requesting a simple one-page portfolio website build through the Roo Commander.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v3.0/User-Guide-v3.md#2025-04-13_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nBuild a simple one-page portfolio website for a web developer. It should have sections for About Me, Projects (with placeholders for images/links), and Contact Info. Use clean HTML, CSS, and maybe a little JavaScript for basic interactions.\n```\n\n----------------------------------------\n\nTITLE: Architecture Decision Record (ADR) Template in Markdown\nDESCRIPTION: Standard template for documenting architectural decisions, including status, context, decision rationale, and consequences.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/010-director/technical-architect/010-dir-technical-architect.mode.md#2025-04-13_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n# ADR: [Decision Topic]\\n\\n**Status:** [Proposed | Accepted | Rejected | Deprecated | Superseded]\\n**Context:** [Problem statement, constraints, forces]\\n**Decision:** [Chosen option]\\n**Rationale:** [Justification, trade-offs considered, evidence]\\n**Consequences:** [Positive and negative impacts, future considerations]\n```\n\n----------------------------------------\n\nTITLE: MongoDB Collection and User Management\nDESCRIPTION: Commands for creating collections with schema validation and managing database users.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/033-database/mongodb-specialist/033-work-db-mongodb-specialist.mode.md#2025-04-13_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ndb.createCollection(\"<name>\", { validator: { $jsonSchema: { ... } } })\n```\n\nLANGUAGE: javascript\nCODE:\n```\ndb.createUser({ user: \"<name>\", pwd: passwordPrompt(), roles: [...] })\n```\n\n----------------------------------------\n\nTITLE: Optimizing Images with next/image Component in React\nDESCRIPTION: Implementation of the Image component from next/image for optimized image loading and rendering in Next.js. This component handles lazy loading, resizing, and format optimization automatically.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/condensed_indices/nextjs-developer-condensed-index.md#2025-04-13_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Image src={...} alt=\"...\" />\n```\n\n----------------------------------------\n\nTITLE: Creating and Positioning a D3.js Axis in JavaScript\nDESCRIPTION: Creates a bottom-oriented axis using D3.js and positions it within an SVG element. It uses the axisBottom function and applies a transform to set the axis position at the bottom of the chart area.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/d3js-specialist-llms-context-20250406.md#2025-04-13_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst gx = svg.append(\"g\")\n    .attr(\"transform\", `translate(0,${height - marginBottom})`)\n    .call(d3.axisBottom(x));\n```\n\n----------------------------------------\n\nTITLE: Displaying Output Directory Structure for Roo Commander Collections\nDESCRIPTION: Shows the expected directory structure after running the bundling script, with each collection stored in its own subdirectory containing a consolidated JSON file.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/dev_tools/bundle_modes_collections_sop.md#2025-04-13_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n<outputBaseDir>/\n├── <collection_name_1>/\n│   └── <collection_name_1>_modes.json\n├── <collection_name_2>/\n│   └── <collection_name_2>_modes.json\n└── ...\n```\n\n----------------------------------------\n\nTITLE: Basic Flask Configuration Example\nDESCRIPTION: Demonstrates two ways to configure a Flask application: using dictionary-style access for individual settings and using the update method for multiple settings at once. Includes setting test mode and defining a secret key.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/flask-developer-llms-context-20250406.md#2025-04-13_snippet_9\n\nLANGUAGE: python\nCODE:\n```\napp = Flask(__name__)\napp.config['TESTING'] = True\n\napp.config.update(\n    TESTING=True,\n    SECRET_KEY='192b9bdd22ab9ed4d12e236c78afcb9a393ec15f71bbf5dc987d54727823bcbf'\n)\n```\n\n----------------------------------------\n\nTITLE: MongoDB Collection and Schema Management\nDESCRIPTION: Methods for creating collections with schema validation rules using JSON Schema.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/condensed_indices/mongodb-specialist-condensed-index.md#2025-04-13_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ndb.createCollection(\"<name>\", { validator: { $jsonSchema: { ... } } })\n```\n\n----------------------------------------\n\nTITLE: Importing Bootstrap as an ES module\nDESCRIPTION: JavaScript code to import Bootstrap as an ES module, allowing for modular usage of Bootstrap's JavaScript components.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/condensed_indices/bootstrap-specialist-condensed-index.md#2025-04-13_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as bootstrap from 'bootstrap'\n```\n\n----------------------------------------\n\nTITLE: Feature Task Template for MDTM Implementation\nDESCRIPTION: A starter template for creating new feature task files. It includes all required fields in the YAML front matter with placeholder values to be filled in when creating a new task.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/knowledge/project-management/markdown-driven-task-management-MDTM/markdown-driven-task-management-MDTM-feature-structure/implementing.md#2025-04-13_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n---\n# 🆔 Task Identification & Core Metadata\nid:             # << GENERATE_UNIQUE_ID (e.g., FEAT-XXX-NNN) >>\ntitle:          # << CONCISE FEATURE TITLE >>\nstatus:         \"🟡 To Do\"\ntype:           \"🌟 Feature\"\n\n# ⏳ Scheduling & Effort\npriority:       \"▶️ Medium\"\ncreated_date:   # << YYYY-MM-DD >>\nupdated_date:   # << YYYY-MM-DD >>\ndue_date:       # Optional\nestimated_effort: # Optional (e.g., \"M\")\n\n# 🧑‍💻 Assignment & Responsibility\nassigned_to:    # Optional (e.g., \"🤖 AI\", \"🧑‍💻 User:Name\")\nreporter:       # Optional\n\n# 🔗 Relationships & Context\nparent_task:    # Optional (Path to _overview.md)\ndepends_on:     [] # Optional (List of task IDs)\nrelated_docs:   [] # << LIST PATHS TO PRD, DESIGNS, SPECS >>\ntags:           [] # << LIST KEYWORDS >>\n\n# 🤖 AI & Review Specific Fields\nai_prompt_log:  []\nreview_checklist: [\"[ ] Meets all AC\", \"[ ] Code Style OK\", \"[ ] Tests Added/Pass\"]\nreviewed_by:    # Optional\n---\n\n# << CONCISE FEATURE TITLE >>\n```\n\n----------------------------------------\n\nTITLE: Configuring SvelteKit Static Adapter\nDESCRIPTION: Demonstrates configuration for the static adapter including pages, assets, fallback, precompress and strict settings.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/sveltekit-llms-context-20250406.md#2025-04-13_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nimport adapter from '@sveltejs/adapter-static';\n\nexport default {\n\tkit: {\n\t\tadapter: adapter({\n\t\t\t// default options are shown. On some platforms\n\t\t\t// these options are set automatically — see below\n\t\t\tpages: 'build',\n\t\t\tassets: 'build',\n\t\t\tfallback: undefined,\n\t\t\tprecompress: false,\n\t\t\tstrict: true\n\t\t})\n\t}\n};\n```\n\n----------------------------------------\n\nTITLE: Importing CSS Modules in Vite\nDESCRIPTION: Vite supports CSS Modules for files ending with .module.css, allowing import of CSS classes as objects.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/vite-specialist-llms-context-20250406.md#2025-04-13_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nimport classes from './example.module.css'\ndocument.getElementById('foo').className = classes.red\n```\n\n----------------------------------------\n\nTITLE: Multiple Environment Configuration in Vite\nDESCRIPTION: Configuration for multiple environments (client, server, and edge) using Vite's environments option.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/vite-specialist-llms-context-20250406.md#2025-04-13_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  build: {\n    sourcemap: false,\n  },\n  optimizeDeps: {\n    include: ['lib'],\n  },\n  environments: {\n    server: {},\n    edge: {\n      resolve: {\n        noExternal: true,\n      },\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring a Test Engineer Custom Mode\nDESCRIPTION: Example of a custom mode for test engineering that restricts file editing to test files only. This configuration allows read access to all files while limiting write access to JavaScript and TypeScript test files.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/knowledge/custom_modes.md#2025-04-13_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"customModes\": [{\n    \"slug\": \"test-engineer\",\n    \"name\": \"Test Engineer\",\n    \"roleDefinition\": \"You are a test engineer focused on code quality\",\n    \"groups\": [\n      \"read\",\n      [\"edit\", { \"fileRegex\": \"\\\\.(test|spec)\\\\.(js|ts)$\", \"description\": \"Test files only\" }]\n    ]\n  }]\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning Three.js Repository with Depth Parameter\nDESCRIPTION: This command demonstrates how to clone the Three.js repository from GitHub using Git. It uses the '--depth=1' parameter to reduce the download size by fetching only the most recent commit.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/threejs-specialist-llms-context-20250406.md#2025-04-13_snippet_20\n\nLANGUAGE: sh\nCODE:\n```\ngit clone --depth=1 https://github.com/mrdoob/three.js.git\n```\n\n----------------------------------------\n\nTITLE: Marking React Component for Client-Side Execution\nDESCRIPTION: Directive to mark a React component or module for client-side execution in Next.js. This enables the use of hooks and browser APIs within the component.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/condensed_indices/nextjs-developer-condensed-index.md#2025-04-13_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n'use client'\n```\n\n----------------------------------------\n\nTITLE: Creating an Animation Object in AnimeJS\nDESCRIPTION: This snippet demonstrates how to create an animation object in AnimeJS by calling the animate function with targets and parameters. The animation object provides access to various properties for controlling and monitoring the animation.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/animejs-specialist-llms-context-20250406.md#2025-04-13_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nconst animation = animate(targets, parameters);\n```\n\n----------------------------------------\n\nTITLE: Initializing Task Log Example in Markdown\nDESCRIPTION: Example template for initializing a new code review task log with basic structure including task ID and purpose\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/039-cross-functional/code-reviewer/039-work-xf-code-reviewer.mode.md#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Task Log: [TaskID] - Code Review: [PR #/Branch/Topic]\n\n**Goal:** Review code changes for [purpose, e.g., User Profile Feature] against project standards.\n```\n\n----------------------------------------\n\nTITLE: Initializing Task Log for Vue.js Implementation\nDESCRIPTION: Example of initial content for a task log file when starting a Vue.js implementation task. It includes the task ID, goal, and basic structure.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/031-frontend/vuejs-developer/031-work-fe-vuejs-developer.mode.md#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Task Log: [TaskID] - Vue.js Implementation\n**Goal:** [e.g., Create a new Vue component for user profile display using Composition API and Pinia].\n```\n\n----------------------------------------\n\nTITLE: Implementing Transitions in D3\nDESCRIPTION: Demonstrates how to start a transition on selected elements, set duration and delay, and use attrTween for custom interpolations.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/031-frontend/d3js-specialist/031-work-fe-d3js-specialist.mode.md#2025-04-13_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nselection.transition([name])\n  .duration(ms)\n  .delay(ms)\n  .attrTween(name, interpolator)\n```\n\n----------------------------------------\n\nTITLE: Creating Decision Record in Markdown\nDESCRIPTION: Example of creating an Architectural Decision Record (ADR) using Markdown format. This snippet demonstrates how to structure and document key project decisions.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/000-executive/roo-commander/000-exec-roo-commander.mode.md#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# ADR: Technology Choice for Backend\n\n**Status:** Accepted\n**Context:** Need to choose backend framework for Project X... Stack Profile indicates Python expertise...\n**Decision:** We will use FastAPI.\n**Rationale:** Team familiarity (per profile), performance requirements, suitable specialist available (`fastapi-developer`).\n**Consequences:** ...\n```\n\n----------------------------------------\n\nTITLE: Task Completion Summary Template in Markdown\nDESCRIPTION: Template for documenting the final status of a security task, including outcome summary, key findings, remediation actions, and references to modified files or related tasks.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/039-cross-functional/security-specialist/039-work-xf-security-specialist.mode.md#2025-04-13_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n---\n**Status:** ✅ Complete\n**Outcome:** Success - Assessment Completed & High-Risk Vulns Remediated/Delegated\n**Summary:** Conducted OWASP API Security assessment on `/api/v1/users`. Identified 1 Critical BOLA (Delegated: TASK-SEC-FIX-BOLA-...) and 1 Medium XSS (Fixed). Updated 1 vulnerable dependency. Verification passed for fixed items.\n**References:** [`profile.php` (modified), `package.json` (modified), `project_journal/tasks/TASK-SEC-FIX-BOLA-...` (delegated task), `project_journal/formal_docs/security_report_[TaskID]_api_users.md` (optional)]\n```\n\n----------------------------------------\n\nTITLE: Creating Task Completion Log in Markdown\nDESCRIPTION: Template for logging the completion status of a code review task, including outcome, summary, and references\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/039-cross-functional/code-reviewer/039-work-xf-code-reviewer.mode.md#2025-04-13_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n---\n**Status:** ✅ Complete\n**Outcome:** 👍 ApproveWithSuggestions\n**Summary:** Review completed for PR #45. Approved with minor suggestions regarding variable naming and test coverage. Feedback saved.\n**References:** [`project_journal/formal_docs/code_review_[TaskID]_pr45.md` (created)]\n```\n\n----------------------------------------\n\nTITLE: Defining a Computed Signal\nDESCRIPTION: Shows how to create a computed signal based on other signals. Computed signals automatically update when their dependencies change, providing efficient derived state.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/031-frontend/angular-developer/031_angular-developer.mode.md#2025-04-13_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\ncomputed(() => expression)\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Date Truncation with Intervals\nDESCRIPTION: Demonstrates date_trunc function usage with interval types and timestamp difference calculations.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/neon-db-specialist-llms-context-20250406.md#2025-04-13_snippet_23\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  date_trunc('hour', INTERVAL '2 days 3 hours 40 minutes') AS truncated_interval,\n  date_trunc('day', '2024-03-15 23:30:00+00'::TIMESTAMPTZ - '2023-09-14 11:20:00+00'::TIMESTAMPTZ) AS truncated_day;\n```\n\n----------------------------------------\n\nTITLE: Django Template CSRF Protection\nDESCRIPTION: Template tag for including CSRF token protection in POST forms\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/condensed_indices/django-developer-condensed-index.md#2025-04-13_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n{% csrf_token %}\n```\n\n----------------------------------------\n\nTITLE: Creating Vector Index for Similarity Search\nDESCRIPTION: SQL command to create an index for vector similarity search using the IVFFLAT index type with inner product (IP) operation. This optimizes vector similarity queries in pgvector.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/condensed_indices/supabase-developer-condensed-index.md#2025-04-13_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\ncreate index ... using ivfflat (column vector_ip_ops) with (lists = N);\n```\n\n----------------------------------------\n\nTITLE: Task Template for Kanban MDTM in Markdown\nDESCRIPTION: Template for creating technical task work items in MDTM with YAML frontmatter and structured sections for task details, acceptance criteria, and notes.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/knowledge/project-management/kanban/README.md#2025-04-13_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n---\nid:             # ITEM-NNN\ntitle:          # 🛠️ Task: Technical objective\nstatus:         \"📥 Input Queue\" # Or appropriate starting state\ntype:           \"🛠️ Task\"\npriority:       \"▶️ Medium\"\n# blocked:        false\n# blocked_reason:\ncreated_date:   # YYYY-MM-DD\nupdated_date:   # YYYY-MM-DD HH:MM:SS\n# assigned_to:\nparent_area:    # Path to AREA/_overview.md\n# related_docs:\ntags:           [\"technical\", ...]\n---\n\n# << Task Title >>\n\n## Task Details 🛠️\n(Explain the technical work required)\n\n## Acceptance Criteria ✅\n*   - [ ] Technical outcome 1 is met (e.g., Service deployed).\n*   - [ ] Technical outcome 2 is met (e.g., Documentation updated).\n\n## Notes / Impediments 🚧\n(Add notes or blocker details here)\n```\n\n----------------------------------------\n\nTITLE: Vue Project Setup Commands\nDESCRIPTION: Package manager commands for creating new Vue projects using create-vue scaffolding tool.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/vuejs-developer-llms-context-20250406.md#2025-04-13_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\n$ npm create vue@latest\n```\n\nLANGUAGE: sh\nCODE:\n```\n$ pnpm create vue@latest\n```\n\nLANGUAGE: sh\nCODE:\n```\n# For Yarn (v1+)\n$ yarn create vue\n\n# For Yarn Modern (v2+)\n$ yarn create vue@latest\n```\n\n----------------------------------------\n\nTITLE: HTML5 Doctype Declaration\nDESCRIPTION: Standard HTML5 doctype declaration required for Bootstrap compatibility.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/bootstrap-specialist-llms-context-20250406.md#2025-04-13_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html lang=\"en\">\n  ...\n</html>\n```\n\n----------------------------------------\n\nTITLE: Enabling Bootstrap Dark Mode\nDESCRIPTION: This HTML attribute enables Bootstrap's built-in dark mode. It can be applied to the <html> tag or any container element to switch the color scheme.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/031-frontend/bootstrap-specialist/031-work-fe-bootstrap-specialist.mode.md#2025-04-13_snippet_8\n\nLANGUAGE: HTML\nCODE:\n```\ndata-bs-theme=\"dark\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Generic Interface in TypeScript\nDESCRIPTION: Illustrates how to create a generic interface that describes a function with a generic type parameter.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/typescript-specialist-llms-context-20250406.md#2025-04-13_snippet_45\n\nLANGUAGE: typescript\nCODE:\n```\ninterface GenericIdentityFn<Type> {\n  (arg: Type): Type;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Bootstrap via npm\nDESCRIPTION: This command installs Bootstrap 5.3.3 using npm. It's the recommended method for projects using a build system or module bundler.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/031-frontend/bootstrap-specialist/031-work-fe-bootstrap-specialist.mode.md#2025-04-13_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install bootstrap@5.3.3\n```\n\n----------------------------------------\n\nTITLE: Structuring User Story in Markdown\nDESCRIPTION: A template for creating a user story in Markdown format. It includes the core user story structure and placeholders for key information.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/knowledge/project-management/agile-principles/README.md#2025-04-13_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nAs a [type of user],\nI want [to perform some action],\nSo that [I can achieve some goal/benefit].\n```\n\n----------------------------------------\n\nTITLE: Installing FastAPI with Standard Dependencies\nDESCRIPTION: This command installs FastAPI with its standard optional dependencies using pip. It ensures that all necessary components for a full-featured FastAPI application are installed.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/fastapi-developer-llms-context-20250406.md#2025-04-13_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install \"fastapi[standard]\"\n```\n\n----------------------------------------\n\nTITLE: Root Layout Configuration\nDESCRIPTION: Shows the structure of a root layout file (app/root.tsx) with essential Remix components for document setup.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/031-frontend/remix-developer/031-work-fe-remix-developer.mode.md#2025-04-13_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport default function App() {\\n  return (\\n    <html>\\n      <head>\\n        <Links />\\n        <Meta />\\n      </head>\\n      <body>\\n        <Outlet />\\n        <ScrollRestoration />\\n        <Scripts />\\n        <LiveReload />\\n      </body>\\n    </html>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Library Build Settings Configuration\nDESCRIPTION: Configuration for library build settings including entry points, file naming conventions, and CSS output settings.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/vite-specialist-llms-context-20250406.md#2025-04-13_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from 'vite'\n\nexport default defineConfig({\n  build: {\n    lib: {\n      entry: ['src/main.js'],\n      fileName: (format, entryName) => `my-lib-${entryName}.${format}.js`,\n      cssFileName: 'my-lib-style',\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Bootstrap with Package Managers\nDESCRIPTION: Commands to install Bootstrap using various package managers like npm, yarn, Composer, and NuGet. This allows developers to easily add Bootstrap to their projects using their preferred package management system.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/bootstrap-specialist-llms-context-20250406.md#2025-04-13_snippet_21\n\nLANGUAGE: shell\nCODE:\n```\nnpm install bootstrap@v5.3.3\nyarn add bootstrap@v5.3.3\ncomposer require twbs/bootstrap:5.3.3\nInstall-Package bootstrap\nInstall-Package bootstrap.sass\n```\n\n----------------------------------------\n\nTITLE: Django View Decorators\nDESCRIPTION: Common Django decorators for views including CSRF protection and database transactions\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/condensed_indices/django-developer-condensed-index.md#2025-04-13_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\n@decorators.csrf.csrf_protect\n@transaction.atomic\n```\n\n----------------------------------------\n\nTITLE: Environment Factory Configuration\nDESCRIPTION: Configuration using custom environment factory to set up SSR and RSC environments with Workerd.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/vite-specialist-llms-context-20250406.md#2025-04-13_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWorkerdEnvironment } from 'vite-environment-workerd'\n\nexport default {\n  environments: {\n    ssr: createWorkerdEnvironment({\n      build: {\n        outDir: '/dist/ssr',\n      },\n    }),\n    rsc: createWorkerdEnvironment({\n      build: {\n        outDir: '/dist/rsc',\n      },\n    }),\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Tool Call Object Structure in TypeScript\nDESCRIPTION: Object structure for processing tool calls, including type, name, arguments, and call ID.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/knowledge/tool_use_overview.md#2025-04-13_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst toolCall = {\n    type: \"tool_call\",\n    name: chunk.name,\n    arguments: chunk.input,\n    callId: chunk.callId\n}\n```\n\n----------------------------------------\n\nTITLE: Blog Website Project Request Example\nDESCRIPTION: Example prompt for requesting a dynamic blog website with PHP/Laravel backend through the Roo Commander.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v3.0/User-Guide-v3.md#2025-04-13_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nDevelop a blog website. The frontend should display posts (title, content, author, date). There needs to be a backend, preferably using PHP and Laravel, to manage creating, editing, and deleting posts (authentication for admin actions is required).\n```\n\n----------------------------------------\n\nTITLE: Adding Viewport Meta Tag for Bootstrap\nDESCRIPTION: Meta tag implementation for responsive design support across all devices.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/bootstrap-specialist-llms-context-20250406.md#2025-04-13_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n```\n\n----------------------------------------\n\nTITLE: Final Task Log Summary Template in Markdown\nDESCRIPTION: Template for documenting task completion, including status, outcome, summary, and reference links.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/010-director/technical-architect/010-dir-technical-architect.mode.md#2025-04-13_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n---\\n**Status:** ✅ Complete\\n**Outcome:** Success\\n**Summary:** Designed architecture for [Feature Y]. Key decisions documented in ADRs. Architecture doc and diagrams updated/requested.\\n**References:** [`project_journal/planning/architecture.md` (updated), `project_journal/decisions/YYYYMMDD-backend-framework.md` (created), `project_journal/visualizations/architecture_diagram.md` (update requested)]\n```\n\n----------------------------------------\n\nTITLE: Completing Task Log for Vue.js Implementation\nDESCRIPTION: Example of final content to append to a task log file upon completing a Vue.js implementation task. It includes status, outcome, summary, and references.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/031-frontend/vuejs-developer/031-work-fe-vuejs-developer.mode.md#2025-04-13_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n---\n**Status:** ✅ Complete\n**Outcome:** Success - Vue.js Implementation\n**Summary:** Created `UserProfile.vue` component using Composition API and TypeScript. Integrated with Pinia store for user data. Added unit tests.\n**References:** [`src/components/UserProfile.vue` (created), `src/stores/user.ts` (modified), `src/components/UserProfile.spec.ts` (created)]\n```\n\n----------------------------------------\n\nTITLE: Initializing Task Log in Markdown\nDESCRIPTION: Example of initial content to be logged in the task log file when starting a new UI design task. It includes the task ID, brief description, and goal.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/030-design/ui-designer/030-work-des-ui-designer.mode.md#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Task Log: [TaskID] - UI Design: [Brief Description]\n\n**Goal:** Design [e.g., user profile page] considering [key constraints/requirements].\n```\n\n----------------------------------------\n\nTITLE: Handling Expected Errors in Next.js Server Components\nDESCRIPTION: Shows how to handle expected errors when fetching data inside a Server Component using TypeScript. The component checks the response status and provides appropriate error handling with conditional rendering.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/nextjs-developer-llms-context-20250406.md#2025-04-13_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nexport default async function Page() {\n  const res = await fetch(`https://...`)\n  const data = await res.json()\n\n  if (!res.ok) {\n    return 'There was an error.'\n  }\n\n  return '...'\n}\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Table Creation with Identity Column\nDESCRIPTION: Creates a table with an auto-incrementing identity column using GENERATED ALWAYS AS IDENTITY constraint.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/neon-db-specialist-llms-context-20250406.md#2025-04-13_snippet_27\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE color (\n    color_id INT GENERATED ALWAYS AS IDENTITY,\n    color_name VARCHAR NOT NULL\n);\n```\n\n----------------------------------------\n\nTITLE: Security Fix for Django's Truncator.words() Method\nDESCRIPTION: References a security fix addressing CVE-2024-27351, resolving a potential regular expression denial-of-service vulnerability in the django.utils.text.Truncator.words() method.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/django-developer-llms-context-20250406.md#2025-04-13_snippet_30\n\nLANGUAGE: python\nCODE:\n```\ndjango.utils.text.Truncator.words()\n```\n\n----------------------------------------\n\nTITLE: Binding HTML Classes to Objects in Vue Template\nDESCRIPTION: This snippet demonstrates using v-bind to dynamically toggle classes based on data properties in Vue. The presence of the 'active' class is determined by the truthiness of the isActive property.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/vuejs-developer-llms-context-20250406.md#2025-04-13_snippet_25\n\nLANGUAGE: vue-html\nCODE:\n```\n<div :class=\"{ active: isActive }\"></div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Nginx as a Reverse Proxy for Flask WSGI Applications\nDESCRIPTION: Basic Nginx server configuration that sets up a reverse proxy to forward requests to a WSGI server running locally on port 8000. Includes necessary proxy headers for proper request forwarding.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/flask-developer-llms-context-20250406.md#2025-04-13_snippet_41\n\nLANGUAGE: nginx\nCODE:\n```\nserver {\n    listen 80;\n    server_name _;\n\n    location / {\n        proxy_pass http://127.0.0.1:8000/;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header X-Forwarded-Host $host;\n        proxy_set_header X-Forwarded-Prefix /;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Project Directory Structure for Lean MDTM Implementation\nDESCRIPTION: This snippet illustrates the recommended directory structure for organizing work items in a Lean MDTM system. It emphasizes value streams, feature areas, and includes templates and an optional input queue.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/knowledge/project-management/lean-principles/README.md#2025-04-13_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nPROJECT_ROOT/\n├── src/                     # Source Code\n├── docs/                    # Supporting Docs (Value Stream Map, Workflow Policies, DoD)\n│   └── WorkflowPolicies.md  # 👈 **Define your workflow statuses & policies here!**\n├── tasks/                   # 👈 **Main MDTM Directory**\n│   ├── _templates/          # 📄 Templates for Value Items, Tasks, Bugs, etc.\n│   │   ├── ✨_value_item.md # (Feature or User Story)\n│   │   ├── 🛠️_task_item.md\n│   │   ├── 🐞_bug_item.md\n│   │   └── 🧹_improvement_chore.md\n│   │\n│   ├── INPUT_QUEUE/         # 📥 Optional: Raw input, ideas, unsorted needs\n│   │   └── IDEA_customer_feedback_X.md\n│   │\n│   ├── VALUE_STREAM_onboarding/ # 🌱 Value Stream/Feature Area: User Onboarding\n│   │   ├── _overview.md       # Optional: High-level goals for this stream\n│   │   ├── 001_✨_simplify_signup_flow.md # Value Item\n│   │   ├── 002_🛠️_add_welcome_email_task.md # Supporting Task\n│   │   └── 003_🐞_fix_confirmation_link_bug.md # Related Bug\n│   │\n│   ├── VALUE_STREAM_reporting/  # 📊 Value Stream/Feature Area: Reporting\n│   │   └── 004_✨_add_export_to_csv.md\n│   │\n│   └── AREA_platform_health/    # 🩺 Area: Non-direct value stream (e.g., Platform)\n│       └── 005_🧹_reduce_api_latency_chore.md # Improvement Chore\n│\n├── archive/                 # 📦 Optional: Completed items (status = ✅ Delivered)\n│   └── ...\n└── README.md\n```\n\n----------------------------------------\n\nTITLE: Bootstrap npm Installation\nDESCRIPTION: Command line instruction for installing Bootstrap via npm package manager.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/bootstrap-specialist-llms-context-20250406.md#2025-04-13_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nnpm install bootstrap@{{< param \"current_version\" >}}\n```\n\n----------------------------------------\n\nTITLE: Vite NPM Scripts Configuration\nDESCRIPTION: Standard npm scripts configuration for a Vite project including development, build, and preview commands.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/vite-specialist-llms-context-20250406.md#2025-04-13_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"dev\": \"vite\",\n    \"build\": \"vite build\",\n    \"preview\": \"vite preview\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Cities in the United States Using a Subquery in SQL\nDESCRIPTION: This SQL query uses a subquery to find the country_id for the United States, then uses that result in the main query to retrieve all cities in that country, ordered by city name.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/neon-db-specialist-llms-context-20250406.md#2025-04-13_snippet_19\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  city\nFROM\n  city\nWHERE\n  country_id = (\n    SELECT\n      country_id\n    FROM\n      country\n    WHERE\n      country = 'United States'\n  )\nORDER BY\n  city;\n```\n\n----------------------------------------\n\nTITLE: Running Three.js Unit Tests in Node.js\nDESCRIPTION: Command to execute unit tests in a Node.js environment from the root folder of the Three.js project.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/threejs-specialist-llms-context-20250406.md#2025-04-13_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test-unit\n```\n\n----------------------------------------\n\nTITLE: Creating and Mounting a Vue Application\nDESCRIPTION: Demonstrates how to create a Vue application instance and mount it to a DOM element. This is typically the entry point for a Vue.js application.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/condensed_indices/vuejs-developer-condensed-index.md#2025-04-13_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncreateApp(rootComponent, rootProps?)\napp.mount(selector)\n```\n\n----------------------------------------\n\nTITLE: Python Database Error Handling\nDESCRIPTION: Example of Python error handling structure for database operations\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/033-database/neon-db-specialist/033-work-db-neon-db-specialist.mode.md#2025-04-13_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ntry...except\n```\n\n----------------------------------------\n\nTITLE: Configuring Neon Database Connection String\nDESCRIPTION: Example of a secure Neon database connection string configuration using SSL mode.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/033-database/neon-db-specialist/033-work-db-neon-db-specialist.mode.md#2025-04-13_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npostgres://...neon.tech...?sslmode=require\n```\n\n----------------------------------------\n\nTITLE: TypeScript Compiler Command Reference\nDESCRIPTION: Reference to the TypeScript compiler command used in build processes\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v6.3/improvements/typescript-specialist-improvements.md#2025-04-13_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\ntsc\n```\n\n----------------------------------------\n\nTITLE: Task Template in Markdown\nDESCRIPTION: Template for creating technical task documents with YAML frontmatter including ID, status, priority, and other metadata fields. Includes sections for task details and acceptance criteria.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/knowledge/project-management/agile-principles/implementing.md#2025-04-13_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n---\nid:             # << GENERATE_ID (TASK-NNN) >>\ntitle:          # << TASK: Concise technical goal >>\nstatus:         \"🟡 Backlog\"\ntype:           \"🛠️ Task\"\npriority:       \"▶️ Medium\"\nestimated_effort: # << Hours/Size >>\n# iteration:\n# assigned_to:\nparent_story:   # << Optional: ID of story this supports >>\nparent_feature: # << Path to FEATURE/_overview.md >>\n# depends_on:     []\ntags:           [\"technical\", ...]\n---\n\n# << TASK: Concise technical goal >>\n\n## Task Details 🛠️\n(Explain the technical work. Link to parent story if applicable.)\n\n## Acceptance Criteria ✅\n*   - [ ] Technical outcome 1 is achieved (e.g., Database schema updated).\n*   - [ ] Technical outcome 2 is achieved (e.g., Unit tests for module X pass).\n*   - [ ] ...\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Table Structure with Formatting in React TSX\nDESCRIPTION: A JSX/TSX snippet that creates a formatted table structure with caption, header, and data row. It defines column widths using className props and includes invoice information with status, payment method and amount.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/shadcn-ui-specialist-llms-context-20250406.md#2025-04-13_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\n<Table>\n  <TableCaption>A list of your recent invoices.</TableCaption>\n  <TableHeader>\n    <TableRow>\n      <TableHead className=\"w-[100px]\">Invoice</TableHead>\n      <TableHead>Status</TableHead>\n      <TableHead>Method</TableHead>\n      <TableHead className=\"text-right\">Amount</TableHead>\n    </TableRow>\n  </TableHeader>\n  <TableBody>\n    <TableRow>\n      <TableCell className=\"font-medium\">INV001</TableCell>\n      <TableCell>Paid</TableCell>\n      <TableCell>Credit Card</TableCell>\n      <TableCell className=\"text-right\">$250.00</TableCell>\n    </TableRow>\n  </TableBody>\n</Table>\n```\n\n----------------------------------------\n\nTITLE: Django URL Pattern Configuration\nDESCRIPTION: Example of mapping URL routes to views with optional name parameter\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/condensed_indices/django-developer-condensed-index.md#2025-04-13_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nurls.path(route, view, name='url_name')\n```\n\n----------------------------------------\n\nTITLE: Virtual Module Plugin Implementation\nDESCRIPTION: Plugin implementation for creating virtual modules to handle index.html transformation in SSR scenarios.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/vite-specialist-llms-context-20250406.md#2025-04-13_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\nfunction vitePluginVirtualIndexHtml(): Plugin {\n  let server: ViteDevServer | undefined\n  return {\n    name: vitePluginVirtualIndexHtml.name,\n    configureServer(server_) {\n      server = server_\n    },\n    resolveId(source) {\n      return source === 'virtual:index-html' ? '\\0' + source : undefined\n    },\n    async load(id) {\n      if (id === '\\0' + 'virtual:index-html') {\n        let html: string\n        if (server) {\n          this.addWatchFile('index.html')\n          html = fs.readFileSync('index.html', 'utf-8')\n          html = await server.transformIndexHtml('/', html)\n        } else {\n          html = fs.readFileSync('dist/client/index.html', 'utf-8')\n        }\n\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Index View in Django\nDESCRIPTION: Implements a simple view function that returns a basic HTTP response.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/django-developer-llms-context-20250406.md#2025-04-13_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom django.http import HttpResponse\n\n\ndef index(request):\n    return HttpResponse(\"Hello, world. You're at the polls index.\")\n```\n\n----------------------------------------\n\nTITLE: Defining Collections in JSON for Roo Mode Bundling\nDESCRIPTION: Example of the collections definition file (mode_collections_wrapped.json) structure. It defines a 'core' collection with a name, description, and list of mode slugs to include.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v6.4/tools/bundle_modes_collections_sop.md#2025-04-13_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"collections\": {\n    \"core\": {\n      \"name\": \"Core\",\n      \"description\": \"Essential modes for coordination and basic project tasks.\",\n      \"modes\": [\n        \"roo-commander\",\n        \"project-onboarding\",\n        \"context-resolver\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Vite Project Setup Command\nDESCRIPTION: Command to scaffold a new Vite project with optional template specification\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/031-frontend/vite-specialist/031-work-fe-vite-specialist.mode.md#2025-04-13_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm create vite@latest [app-name] [--template <template>]\n```\n\n----------------------------------------\n\nTITLE: Creating Initial Task Log Template for Discovery Agent\nDESCRIPTION: Markdown template for initializing the task log at the beginning of the discovery process, capturing the task ID and project/feature name, along with the primary goal.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/040-assistant/discovery-agent/040-asst-discovery-agent.mode.md#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Task Log: [TaskID] - Project Discovery & Requirements: [Project/Feature Name]\n\n**Goal:** Analyze project context, detect technical stack, and gather detailed requirements for [project/feature].\n```\n\n----------------------------------------\n\nTITLE: Creating Final Log Entry Example in Markdown\nDESCRIPTION: Example template for completing a task log entry after finishing a technical writing assignment, including status, outcome, summary, and references to created documents.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/039-cross-functional/technical-writer/039-work-xf-technical-writer.mode.md#2025-04-13_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n---\n**Status:** ✅ Complete\n**Outcome:** Success\n**Summary:** Drafted and saved documentation for [subject] targeting [audience]. Integrated diagrams and code examples.\n**References:** [`[final_document_path]` (created/updated)], [`project_journal/tasks/[DiagramerTaskID].md` (if applicable)]\n```\n\n----------------------------------------\n\nTITLE: Creating User Trigger Function for Profile Creation\nDESCRIPTION: SQL pattern for automatically creating related data when a new user signs up. This example shows how to create a trigger that fires after a new user is inserted into the auth.users table.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/condensed_indices/supabase-developer-condensed-index.md#2025-04-13_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\ncreate function handle_new_user() returns trigger ... create trigger ... after insert on auth.users ...\n```\n\n----------------------------------------\n\nTITLE: Computing Basic Statistics with D3 Count\nDESCRIPTION: Demonstrates using d3.count() to count valid numeric values in a dataset while ignoring null, NaN and undefined values. This example counts the number of penguins with valid body mass measurements.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/d3js-specialist-llms-context-20250406.md#2025-04-13_snippet_45\n\nLANGUAGE: javascript\nCODE:\n```\nd3.count(penguins, (d) => d.body_mass_g) // 342\n```\n\n----------------------------------------\n\nTITLE: Verification Results Documentation Template in Markdown\nDESCRIPTION: Template for logging the verification methods and results after implementing security fixes, confirming remediation effectiveness for each vulnerability.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/039-cross-functional/security-specialist/039-work-xf-security-specialist.mode.md#2025-04-13_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n## Verification Results\n\n**BOLA Fix (TASK-SEC-FIX-BOLA-...):**\n- Manual Testing: ✅ Confirmed users can only access their own data via `GET /api/v1/users/{id}`.\n- Automated Scan: ✅ Relevant scanner rule no longer triggers.\n\n**XSS Fix:**\n- Manual Testing: ✅ Injected payloads are properly encoded and rendered harmlessly.\n- Browser Inspection: ✅ Verified output encoding.\n```\n\n----------------------------------------\n\nTITLE: Basic MongoDB Query Operations\nDESCRIPTION: Core query methods for finding and filtering documents in MongoDB collections. Demonstrates use of find() with query and projection parameters.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/033-database/mongodb-specialist/033-work-db-mongodb-specialist.mode.md#2025-04-13_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndb.collection.find(<query>, <projection>)\n```\n\n----------------------------------------\n\nTITLE: Using Local Images with Next.js Image Component\nDESCRIPTION: Demonstrates how to use local images with the Next.js Image component by importing the image file directly. The component automatically provides width, height, and blurDataURL properties for optimal image loading.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/nextjs-developer-llms-context-20250406.md#2025-04-13_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport Image from 'next/image'\nimport profilePic from './me.png'\n\nexport default function Page() {\n  return (\n    <Image\n      src={profilePic}\n      alt=\"Picture of the author\"\n      // width={500} automatically provided\n      // height={500} automatically provided\n      // blurDataURL=\"data:...\" automatically provided\n      // placeholder=\"blur\" // Optional blur-up while loading\n    />\n  )\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport Image from 'next/image'\nimport profilePic from './me.png'\n\nexport default function Page() {\n  return (\n    <Image\n      src={profilePic}\n      alt=\"Picture of the author\"\n      // width={500} automatically provided\n      // height={500} automatically provided\n      // blurDataURL=\"data:...\" automatically provided\n      // placeholder=\"blur\" // Optional blur-up while loading\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Task Template in Markdown\nDESCRIPTION: A comprehensive template for implementing tasks in a Waterfall project using MDTM. Includes YAML frontmatter for task metadata and structured markdown sections for description, inputs, tasks/checklist, outputs, and references.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/knowledge/project-management/waterfall-project-management/README.md#2025-04-13_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n---\n# 🆔 Task Identification & Core Metadata\nid:             # << GENERATE_UNIQUE_ID (e.g., IMPL-NNN) >>\ntitle:          # << IMPLEMENT: Concise description >>\nphase:          \"⚙️ Implementation\"\nstatus:         \"🟡 To Do\"\ntype:           \"⚙️ Implementation Unit\"\n\n# ⏳ Scheduling & Effort\npriority:       \"▶️ Medium\"\ncreated_date:   # << YYYY-MM-DD >>\nupdated_date:   # << YYYY-MM-DD >>\n\n# 🧑‍💻 Assignment & Responsibility\nassigned_to:    # Optional\n\n# 🔗 Relationships & Context\nrequirement_ref: # << REQUIRED: Link to SRS section(s) >>\ndesign_ref:     # << REQUIRED: Link to SDD section(s) >>\ntest_case_ref:  # Optional (Link to related test cases)\ntags:           []\n\n# 🔁 Change Request Link\nrelated_cr:     # Optional\n---\n\n# << IMPLEMENT: Concise description >>\n\n## Description ✍️\nImplement the functionality described in the referenced Design Document section(s), ensuring it meets the linked Requirements.\n\n## Inputs 📥\n*   Requirements: See `requirement_ref` above.\n*   Design: See `design_ref` above.\n*   Architecture Guidelines: `docs/Architecture.md` (Example)\n\n## Tasks / Checklist ✅\n*   - [ ] Set up necessary file structure/boilerplate.\n*   - [ ] Implement core logic according to Design specification.\n*   - [ ] Implement data handling/persistence.\n*   - [ ] Write comprehensive unit tests (mention coverage target?).\n*   - [ ] Perform code self-review against standards.\n*   - [ ] Submit for formal Code Review.\n*   - [ ] Address code review feedback.\n*   - [ ] Merge code to the main development branch.\n\n## Outputs / Deliverables 📤\n*   Code commit/Pull Request: [Link Here]\n*   Unit Test execution results: [Link or Status Here]\n\n## References 🔗\n*   Requirement: `[SRS §X.Y](docs/01_SRS.md#req-X.Y)`\n*   Design: `[SDD §A.B](docs/02_SDD.md#design-A.B)`\n```\n\n----------------------------------------\n\nTITLE: Task Log Template for Mode Maintenance\nDESCRIPTION: Markdown template for initializing a new task log entry when starting mode maintenance work.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/039-cross-functional/mode-maintainer/039-work-xf-mode-maintainer.mode.md#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Task Log: [TaskID] - Mode Maintenance: [target_mode_path]\n\n**Goal:** Update mode definition based on [Reference to instructions/SOP].\n```\n\n----------------------------------------\n\nTITLE: Initializing New Astro Project\nDESCRIPTION: Creates a new Astro project using npm create command.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/astro-developer-llms-context-20250406.md#2025-04-13_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nnpm create astro@latest\n```\n\n----------------------------------------\n\nTITLE: Simplified Match Query Syntax in Elasticsearch\nDESCRIPTION: Shortened version of the match query combining field and query parameters\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/elasticsearch-specialist-llms-context-20250406.md#2025-04-13_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nGET /_search\n{\n  \"query\": {\n    \"match\": {\n      \"message\": \"this is a test\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Tests and Development Server for Three.js - Shell\nDESCRIPTION: Provides commands for running unit tests, end-to-end tests, and starting a development server for Three.js projects. Includes npm and git commands.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/condensed_indices/threejs-specialist-condensed-index.md#2025-04-13_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install\nnpm run test-unit\nnpm run test-e2e [example_name]\nnpx servez -p 8080 --ssl\ngit clone --depth=1 https://github.com/mrdoob/three.js.git\n```\n\n----------------------------------------\n\nTITLE: Creating Tables in Neon PostgreSQL\nDESCRIPTION: Example of standard SQL table creation syntax in Neon with common constraints and data types\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/033-database/neon-db-specialist/033-work-db-neon-db-specialist.mode.md#2025-04-13_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE [IF NOT EXISTS] ... (\n  id INT GENERATED ALWAYS AS IDENTITY,\n  field1 VARCHAR(255) NOT NULL,\n  field2 INTEGER UNIQUE,\n  PRIMARY KEY (id)\n);\n```\n\n----------------------------------------\n\nTITLE: Database Configuration in Astro\nDESCRIPTION: Example of defining database schema in Astro using defineDb and defineTable in db/config.ts\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/031-frontend/astro-developer/031-work-fe-astro-developer.mode.md#2025-04-13_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { defineDb, defineTable, column } from 'astro:db';\n\nexport default defineDb({\n  tables: {\n    myTable: defineTable({\n      columns: {\n        id: column.number({ primaryKey: true }),\n        name: column.text()\n      }\n    })\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Front Matter for Lean Work Items\nDESCRIPTION: Provides a template for the YAML front matter to be used in work item Markdown files. It includes fields for item identification, value tracking, flow management, metrics tracking, and completion criteria, supporting Lean principles of value focus and flow optimization.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/knowledge/project-management/lean-principles/implementing.md#2025-04-13_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\n# 🆔 Item Identification & Core Details\nid:             # REQUIRED. Unique Project-wide ID (e.g., ITEM-001). Convention: {TYPE_PREFIX}-{NNN}\ntitle:          # REQUIRED. Clear description focusing on value or purpose.\nstatus:         # REQUIRED. Current stage in value stream. **MUST MATCH a defined state from WorkflowPolicies.md**. E.g., \"🛠️ Development\"\ntype:           # REQUIRED. Work item type. E.g., \"✨ Value Item\". See Types.\n\n# 🏆 Value & Prioritization (Focus on Value First!)\npriority:       # Recommended for ordering input queues. E.g., \"🔼 High\". See Priorities.\nvalue_score:    # Optional. Estimate of customer/business value (e.g., 1-10, MoSCoW). Aids prioritization.\n# cost_of_delay:  # Optional. Impact if delayed (e.g., High, Medium, Low). Helps sequencing.\n\n# 🌊 Flow Management & Waste Identification\nblocked:        # Optional. Use status \"🚧 Blocked\" OR boolean `blocked: true`.\nblocked_reason: # Required if Blocked. Specific impediment description.\n# lead_time_class: # Optional. E.g., \"Standard\", \"Expedite\", \"Fixed Date\". Needs policy.\n\n# ⏱️ Metrics Tracking Attributes (Timestamps are ESSENTIAL)\ncreated_date:   # Recommended. Date item entered system/backlog. YYYY-MM-DD.\nupdated_date:   # **REQUIRED**. Timestamp of *last status change*. YYYY-MM-DD HH:MM:SS. **CRITICAL for metrics.**\ncompletion_date: # Optional but Recommended. Date moved to final Done status. YYYY-MM-DD HH:MM:SS. (Helps calculate Lead Time easily).\n# cycle_time_start_date: # Optional: Date active work began (e.g., moved to first WIP state). Helps calculate Cycle Time accurately.\n\n# 🧑‍💻 Context & Assignment\nassigned_to:    # Optional. Current owner/worker.\nparent_value_stream: # Optional. Path to the VALUE_STREAM/_overview.md file.\nrelated_docs:   # Optional. **Crucially, link to WorkflowPolicies.md**. [\"docs/WorkflowPolicies.md\"]\ntags:           # Optional. Keywords for filtering.\n\n# ✅ Quality & Completion Criteria\n# acceptance_criteria_summary: # Optional YAML summary, main AC in body.\n---\n```\n\n----------------------------------------\n\nTITLE: Displaying Tailwind CSS Logo with Dark/Light Mode Support in HTML\nDESCRIPTION: HTML snippet for rendering the Tailwind CSS logo with support for dark and light color schemes. It uses the <picture> element to provide different logo versions based on the user's color scheme preference.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/tailwind-specialist-llms-context-20250406.md#2025-04-13_snippet_12\n\nLANGUAGE: HTML\nCODE:\n```\n<p align=\"center\">\n  <a href=\"https://tailwindcss.com\" target=\"_blank\">\n    <picture>\n      <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://raw.githubusercontent.com/tailwindlabs/tailwindcss/HEAD/.github/logo-dark.svg\">\n      <source media=\"(prefers-color-scheme: light)\" srcset=\"https://raw.githubusercontent.com/tailwindlabs/tailwindcss/HEAD/.github/logo-light.svg\">\n      <img alt=\"Tailwind CSS\" src=\"https://raw.githubusercontent.com/tailwindlabs/tailwindcss/HEAD/.github/logo-light.svg\" width=\"350\" height=\"70\" style=\"max-width: 100%;\">\n    </picture>\n  </a>\n</p>\n```\n\n----------------------------------------\n\nTITLE: Using Field for Model Validation\nDESCRIPTION: Demonstrates using Pydantic Field for adding validation rules to model attributes.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/fastapi-developer-llms-context-20250406.md#2025-04-13_snippet_28\n\nLANGUAGE: python\nCODE:\n```\ntitle: str = Field(min_length=1, max_length=50, description=\"Title of the item\")\ndescription: str | None = Field(\n    default=None, title=\"The description of the item\", max_length=300\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite for Linked Dependencies\nDESCRIPTION: Configuration example showing how to handle linked dependencies in a monorepo setup by including them in optimization and CommonJS options.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/vite-specialist-llms-context-20250406.md#2025-04-13_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\nexport default defineConfig({\n  optimizeDeps: {\n    include: ['linked-dep'],\n  },\n  build: {\n    commonjsOptions: {\n      include: [/linked-dep/, /node_modules/],\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Functions with Type Annotations in TypeScript\nDESCRIPTION: Shows how to define functions with type annotations for parameters and return values in TypeScript. This enables compile-time checking of function inputs and outputs.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/031-frontend/typescript-specialist/031-work-fe-typescript-specialist.mode.md#2025-04-13_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction greet(name: string): void\n```\n\n----------------------------------------\n\nTITLE: Component Import and Usage Example Angular\nDESCRIPTION: Demonstrates importing and using a component within another component using the imports array.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/angular-developer-llms-context-20250406.md#2025-04-13_snippet_10\n\nLANGUAGE: angular-ts\nCODE:\n```\nimport {ProfilePhoto} from './profile-photo';\n\n@Component({\n  imports: [ProfilePhoto],\n  /* ... */\n})\nexport class UserProfile { }\n```\n\n----------------------------------------\n\nTITLE: Current Formal Document Maintenance Instructions in Markdown\nDESCRIPTION: The existing instructions for formal document maintenance in the customInstructions section of roo-commander.json.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v6.0/changes/roo-commander-tool-usage-refinement.md#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n**Formal Document Maintenance:**\n- **Responsibility:** Oversee high-level docs in `project_journal/planning/` or `project_journal/formal_docs/`.\n- **Guidance:** Save/update these documents using `write_to_file`.\n```\n\n----------------------------------------\n\nTITLE: Creating a Value Item Template in Markdown\nDESCRIPTION: This template provides a structure for creating value-focused items (features/stories) in MDTM, including YAML frontmatter and sections for description, acceptance criteria, and waste identification.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/knowledge/project-management/lean-principles/README.md#2025-04-13_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n---\nid:             # ITEM-NNN\ntitle:          # ✨ Concise Value Proposition\nstatus:         \"📥 Intake / Needs Refinement\" # Initial state\ntype:           \"✨ Value Item\"\npriority:       \"▶️ Medium\"\nvalue_score:    # Optional: Assign value score\n# cost_of_delay:  # Optional\n# blocked:\n# blocked_reason:\ncreated_date:   # YYYY-MM-DD\nupdated_date:   # YYYY-MM-DD HH:MM:SS\n# assigned_to:\nparent_value_stream: # Path to VALUE_STREAM/_overview.md\nrelated_docs:   [\"docs/WorkflowPolicies.md\"]\ntags:           []\n---\n\n# << Value Item Title >>\n\n## Description ✨\n(Explain the customer problem/need and the proposed solution/value. Use \"As a...\" format if helpful).\n\n## Acceptance Criteria ✅\n*   - [ ] Criterion 1 demonstrating value delivery.\n*   - [ ] Criterion 2...\n\n## Potential Waste / Risks 🗑️\n(Optional: Identify risks or waste addressed/introduced)\n\n## Notes / Blockers 🚧\n(Updates, decisions, blocker details)\n```\n\n----------------------------------------\n\nTITLE: JSON Response Creation Example\nDESCRIPTION: Example of creating a JSON response using jsonify function\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/knowledge/sop-create-condensed-context-index.md#2025-04-13_snippet_3\n\nLANGUAGE: python\nCODE:\n```\njsonify({'key': 'value'})\n```\n\n----------------------------------------\n\nTITLE: Mapping Data to Components in React\nDESCRIPTION: Demonstrates a common pattern for rendering a list of components based on an array of data. This approach combines list rendering with prop passing.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/condensed_indices/react-specialist-condensed-index.md#2025-04-13_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\ndata.map(item => <Component key={item.id} {...item} />)\n```\n\n----------------------------------------\n\nTITLE: Creating Index with Custom Date Format in Elasticsearch\nDESCRIPTION: An index creation command that specifies a custom date format for the 'date' field in the mappings. It sets the field type to 'date' and configures it to use the 'yyyy-MM-dd' format.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/elasticsearch-specialist-llms-context-20250406.md#2025-04-13_snippet_37\n\nLANGUAGE: console\nCODE:\n```\nPUT my-index-000001\n{\n  \"mappings\": {\n    \"properties\": {\n      \"date\": {\n        \"type\":   \"date\",\n        \"format\": \"yyyy-MM-dd\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Tailwind Specialist Mode Metadata in JSON\nDESCRIPTION: Example of enhanced mode definition with tags metadata for a Tailwind specialist. This structure allows for better matching of detected tags to specialist modes.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v6.2/roo-commander-mode-escalation-analysis.md#2025-04-13_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"slug\": \"tailwind-specialist\",\n  \"tags\": [\"tailwind\", \"css\", \"frontend\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Grid Sass Variables in Bootstrap\nDESCRIPTION: Core Sass variables that control the Bootstrap grid system's columns, gutters, and row columns. These variables define the fundamental structure of the responsive grid layout.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/bootstrap-specialist-llms-context-20250406.md#2025-04-13_snippet_37\n\nLANGUAGE: SCSS\nCODE:\n```\n$grid-columns:      12;\n$grid-gutter-width: 1.5rem;\n$grid-row-columns:  6;\n```\n\n----------------------------------------\n\nTITLE: Aggregating MongoDB Data by Month\nDESCRIPTION: This aggregation pipeline counts how many people joined each month of the year. It extracts the month from the 'joined' field, groups by that month, counts documents in each group, and sorts the results chronologically.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/mongodb-specialist-llms-context-20250406.md#2025-04-13_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ndb.members.aggregate( [\n   { $project: { month_joined: { $month: \"$joined\" } } } ,\n   { $group: { _id: { month_joined: \"$month_joined\" } , number: { $sum: 1 } } },\n   { $sort: { \"_id.month_joined\": 1 } }\n] )\n```\n\n----------------------------------------\n\nTITLE: Documenting Properties in Three.js\nDESCRIPTION: Illustrates the HTML structure for documenting properties in the Three.js documentation.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/threejs-specialist-llms-context-20250406.md#2025-04-13_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<h3>[property:TypeName propertyName]</h3>\n```\n\n----------------------------------------\n\nTITLE: Rendering Header Component\nDESCRIPTION: Simple component return statement showing header rendering\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/react-specialist-llms-context-20250406.md#2025-04-13_snippet_36\n\nLANGUAGE: jsx\nCODE:\n```\nreturn <h2>{children}</h2>;\n```\n\n----------------------------------------\n\nTITLE: Creating a DELETE Policy for User Profiles in PostgreSQL\nDESCRIPTION: SQL snippet showing how to create a profiles table with PostgreSQL and enable Row Level Security. This sets up the structure for creating DELETE policies, though the actual DELETE policy is not included in the snippet.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/supabase-developer-llms-context-20250406.md#2025-04-13_snippet_18\n\nLANGUAGE: sql\nCODE:\n```\ncreate table profiles (\n  id uuid primary key,\n  user_id uuid references auth.users,\n  avatar_url text\n);\n\nalter table profiles enable row level security;\n```\n\n----------------------------------------\n\nTITLE: Creating Linear Color Scale in D3.js\nDESCRIPTION: Shows how to create and use a linear scale for color interpolation between brown and steelblue. The scale maps input values between 10 and 100 to colors.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/d3js-specialist-llms-context-20250406.md#2025-04-13_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nconst color = d3.scaleLinear([10, 100], [\"brown\", \"steelblue\"]);\ncolor(20); // \"rgb(154, 52, 57)\"\ncolor(50); // \"rgb(123, 81, 103)\"\n```\n\n----------------------------------------\n\nTITLE: Starting Next.js Development Server\nDESCRIPTION: Commands to start the Next.js development server using different package managers including npm, yarn, pnpm, and bun.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/tailwind-specialist-llms-context-20250406.md#2025-04-13_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\n----------------------------------------\n\nTITLE: PL/pgSQL Exception Handling Block\nDESCRIPTION: Template for PL/pgSQL stored procedure with error handling capabilities\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/033-database/neon-db-specialist/033-work-db-neon-db-specialist.mode.md#2025-04-13_snippet_5\n\nLANGUAGE: PL/pgSQL\nCODE:\n```\nDECLARE\n  -- variable declarations\nBEGIN\n  -- procedure logic\nEXCEPTION\n  WHEN others THEN\n    -- error handling\nEND;\n```\n\n----------------------------------------\n\nTITLE: Initializing Supabase Project with CLI\nDESCRIPTION: Shell command to initialize a new Supabase project using the command-line interface tool.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/supabase-developer-llms-context-20250406.md#2025-04-13_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nsupabase init\n```\n\n----------------------------------------\n\nTITLE: Defining Objective Function for TensorFlow/Keras Model Optimization\nDESCRIPTION: This Python script implements an objective function for optimizing hyperparameters of a TensorFlow/Keras convolutional neural network model using Optuna, including number of filters, kernel size, and learning rate.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/neon-db-specialist-llms-context-20250406.md#2025-04-13_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nimport urllib\nimport os\n\nimport optuna\nfrom tensorflow.keras.backend import clear_session\nfrom tensorflow.keras.datasets import mnist\nfrom tensorflow.keras.layers import Conv2D\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.layers import Flatten\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.optimizers import RMSprop\n\nN_TRAIN_EXAMPLES = 3000\nN_VALID_EXAMPLES = 1000\nBATCHSIZE = 128\nCLASSES = 10\nEPOCHS = 10\n\n\ndef objective(trial):\n    clear_session()\n\n    (x_train, y_train), (x_valid, y_valid) = mnist.load_data()\n    img_x, img_y = x_train.shape[1], x_train.shape[2]\n    x_train = x_train.reshape(-1, img_x, img_y, 1)[:N_TRAIN_EXAMPLES].astype(\"float32\") / 255\n    x_valid = x_valid.reshape(-1, img_x, img_y, 1)[:N_VALID_EXAMPLES].astype(\"float32\") / 255\n    y_train = y_train[:N_TRAIN_EXAMPLES]\n    y_valid = y_valid[:N_VALID_EXAMPLES]\n    input_shape = (img_x, img_y, 1)\n\n    model = Sequential()\n    model.add(\n        Conv2D(\n            filters=trial.suggest_categorical(\"filters\", [32, 64]),\n            kernel_size=trial.suggest_categorical(\"kernel_size\", [3, 5]),\n            strides=trial.suggest_categorical(\"strides\", [1, 2]),\n            activation=trial.suggest_categorical(\"activation\", [\"relu\", \"linear\"]),\n            input_shape=input_shape,\n        )\n    )\n    model.add(Flatten())\n    model.add(Dense(CLASSES, activation=\"softmax\"))\n\n    learning_rate = trial.suggest_float(\"learning_rate\", 1e-5, 1e-1, log=True)\n    model.compile(\n        loss=\"sparse_categorical_crossentropy\",\n        optimizer=RMSprop(learning_rate=learning_rate),\n        metrics=[\"accuracy\"],\n    )\n\n    model.fit(\n        x_train,\n        y_train,\n        validation_data=(x_valid, y_valid),\n        shuffle=True,\n        batch_size=BATCHSIZE,\n        epochs=EPOCHS,\n        verbose=False,\n    )\n\n    score = model.evaluate(x_valid, y_valid, verbose=0)\n    return score[1]\n\nif __name__ == \"__main__\":\n    study = optuna.create_study(\n        study_name=\"tfkeras_example\",\n        storage=os.environ[\"DATABASE_URL\"],\n        load_if_exists=True,\n        direction=\"maximize\",\n    )\n    study.optimize(objective, n_trials=100, timeout=600)\n```\n\n----------------------------------------\n\nTITLE: Index Field Mapping Example\nDESCRIPTION: Example of field mapping definition in Elasticsearch showing text field configuration with analyzer settings\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/033-database/elasticsearch-specialist/033-work-db-elasticsearch-specialist.mode.md#2025-04-13_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"message\": {\"type\": \"text\"}\n```\n\n----------------------------------------\n\nTITLE: Debug Process Flow\nDESCRIPTION: Systematic debugging process steps outlined in a structured format.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v6.3/improvements/bug-fixer-improvements.md#2025-04-13_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nReproduce -> Diagnose -> Fix -> Test -> Verify\n```\n\n----------------------------------------\n\nTITLE: CSS Modules Import in Vite\nDESCRIPTION: Example of importing CSS modules in Vite projects\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/condensed_indices/vite-specialist-condensed-index.md#2025-04-13_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport styles from './styles.module.css'\n```\n\n----------------------------------------\n\nTITLE: Angular Developer Mode Documentation\nDESCRIPTION: Markdown documentation outlining the capabilities, workflow, and operational principles for Angular development within the system.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/031-frontend/angular-developer/031_angular-developer.mode.md#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Mode: 🅰️ Angular Developer (`angular-developer`)\n\n## Description\nExpert in developing robust, scalable, and maintainable Angular applications using TypeScript, with a focus on best practices, performance, testing, and integration with Angular ecosystem tools.\n\n## Capabilities\n*   Build complex Angular applications with TypeScript\n*   Use Angular CLI for scaffolding, building, serving, and testing\n*   Design and implement components, services, modules, and routing (including lazy loading)\n*   Develop Reactive and Template-driven Forms\n*   Write unit, integration, and end-to-end tests\n*   Optimize performance through change detection strategies and lazy loading\n*   Integrate Angular Material and other component libraries\n*   Implement security best practices including sanitization and XSS prevention\n*   Utilize RxJS and Signals for reactive state management\n*   Collaborate with UI, accessibility, backend, and testing specialists\n*   Assist with Angular version upgrades\n*   Consult official Angular documentation and resources\n```\n\n----------------------------------------\n\nTITLE: Creating Basic React Button Component\nDESCRIPTION: Shows how to create a simple React button component using a function that returns JSX markup.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/react-specialist-llms-context-20250406.md#2025-04-13_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction MyButton() {\n  return (\n    <button>I'm a button</button>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Intersection Types in TypeScript\nDESCRIPTION: Illustrates the creation of intersection types in TypeScript. Intersection types combine multiple types into one, useful for mixins or combining interfaces.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/031-frontend/typescript-specialist/031-work-fe-typescript-specialist.mode.md#2025-04-13_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype Combined = TypeA & TypeB;\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Template for CPM Task Data in MDTM\nDESCRIPTION: A comprehensive YAML front matter template for capturing Critical Path Method (CPM) data in Markdown task files. Includes required fields for task identification, duration, dependencies, as well as optional fields for status tracking and contextual information.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/knowledge/project-management/critical-path-method/README.md#2025-04-13_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\n# 🆔 Task Identification & Core CPM Data\nid:             # REQUIRED. Unique Project-wide ID for this task. **MUST be unique**. E.g., \"T001\", \"DefineScope\", \"CodeFeatX\". Used in `depends_on`.\ntitle:          # REQUIRED. Human-readable task name.\nduration:       # REQUIRED. Estimated task duration (Number). Specify unit consistently (e.g., days, hours). E.g., 5 (meaning 5 days if unit is days).\nduration_unit:  # REQUIRED. Unit for duration. E.g., \"days\", \"hours\", \"weeks\". Must be consistent across project for calculation.\ndepends_on:     # REQUIRED (List of Strings). List of `id`s of tasks that MUST be completed before this task can start. E.g., [\"T005\", \"T012\"]. Use empty list `[]` for tasks with no predecessors.\n\n# 📊 Status & Progress Tracking (Optional but Recommended)\nstatus:         # Recommended. E.g., \"⚪ Not Started\", \"🏗️ In Progress\", \"✅ Completed\". See Statuses.\npercent_complete: # Optional. Number (0-100). How much of the *duration* is estimated complete.\n# start_date:     # Optional. Actual start date (YYYY-MM-DD).\n# finish_date:    # Optional. Actual finish date (YYYY-MM-DD).\n\n# 🧑‍💻 Context & Assignment\nwbs_id:         # Recommended. WBS identifier string (e.g., \"3.1.1\").\nassigned_to:    # Optional. Resource/Team responsible.\nrelated_docs:   # Optional. Links to specs, plans, diagrams.\ntags:           # Optional. Keywords.\n\n# ⚠️ Calculated Fields (DO NOT MANUALLY FILL - These come from external CPM tool)\n# critical_path_member: # Boolean (true/false) - Determined by calculation.\n# total_float:          # Number - Determined by calculation.\n# early_start:          # Date/Number - Determined by calculation.\n# early_finish:         # Date/Number - Determined by calculation.\n# late_start:           # Date/Number - Determined by calculation.\n# late_finish:          # Date/Number - Determined by calculation.\n---\n\n# << Task Title >>\n\n## Description / Objective 🏗️\n... Markdown Body: Detail the work involved in this task ...\n\n## Assumptions / Constraints 🧐\n... Note any assumptions made for duration estimate or dependencies ...\n\n## Resources Needed 🛠️\n... List key resources (personnel, equipment, info) ...\n```\n\n----------------------------------------\n\nTITLE: Initializing Task Log in Markdown\nDESCRIPTION: Example of initial content for the task log file, including task goal, database type, and implementation method.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/033-database/database-specialist/033-work-db-database-specialist.mode.md#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Task Log: [TaskID] - Database Schema Update\n\n**Goal:** [e.g., Add 'orders' table and relationship to 'users'].\n**DB Type:** PostgreSQL\n**Method:** Prisma ORM\n```\n\n----------------------------------------\n\nTITLE: Creating Force Simulation in D3.js\nDESCRIPTION: Creates a new force simulation with specified nodes array. The simulation starts automatically and mutates the passed-in nodes with position and velocity data. This is used for creating force-directed graph layouts.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/d3js-specialist-llms-context-20250406.md#2025-04-13_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nconst simulation = d3.forceSimulation(nodes);\n```\n\n----------------------------------------\n\nTITLE: Executing a Disjunction Max Query in Elasticsearch\nDESCRIPTION: This snippet demonstrates how to use the dis_max query to search for documents matching either 'Quick pets' in the title or body fields. It includes a tie_breaker parameter to adjust relevance scores for documents matching multiple clauses.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/elasticsearch-specialist-llms-context-20250406.md#2025-04-13_snippet_18\n\nLANGUAGE: console\nCODE:\n```\nGET /_search\n{\n  \"query\": {\n    \"dis_max\": {\n      \"queries\": [\n        { \"term\": { \"title\": \"Quick pets\" } },\n        { \"term\": { \"body\": \"Quick pets\" } }\n      ],\n      \"tie_breaker\": 0.7\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: CPM Task Template Structure in Markdown\nDESCRIPTION: A reusable template file for creating new CPM tasks, including all required YAML front matter fields and document sections. This template ensures consistency across all task files and proper data capture for CPM analysis.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/knowledge/project-management/critical-path-method/implementing.md#2025-04-13_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n---\n# 🆔 Task Identification (Required)\nid:             # << UNIQUE_PROJECT_ID (e.g., Task_1.2 or T002) >>\ntitle:          # << Clear, Concise Task Name >>\n\n# ⏱️ Duration Estimation (Required)\nduration:       # << Numeric value (e.g., 10) >>\nduration_unit:  \"days\" # << Project's Consistent Unit (e.g., days) >>\n\n# 🔗 Dependency Mapping (Required)\ndepends_on:     # << [\"ID_of_Pred1\", \"ID_of_Pred2\"] or [] >>\n\n# 📊 Status & Progress Tracking\nstatus:         \"⚪ Not Started\"\n# percent_complete: 0\n# start_date_actual:\n```\n\n----------------------------------------\n\nTITLE: Animating JavaScript Object Properties with AnimeJS\nDESCRIPTION: This snippet demonstrates how to animate a JavaScript object's properties using AnimeJS. It creates a 2D vector object and animates its x and y coordinates from 0 to 100 and 150 respectively, with the current state displayed in a code element. The animation uses the round modifier to ensure integer values and an onUpdate callback to display the changing values.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/animejs-specialist-llms-context-20250406.md#2025-04-13_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport { animate, utils } from 'animejs';\n\nconst [ $log ] = utils.$('code');\n\nconst vector2D = { x: 0, y: 0 };\n\nanimate(vector2D, {\n  x: 100,\n  y: 150,\n  modifier: utils.round(0),\n  onUpdate: () => $log.textContent = JSON.stringify(vector2D),\n});\n```\n\nLANGUAGE: html\nCODE:\n```\n<pre class=\"row large centered\">\n  <code>{\"x\":0,\"y\":0}</code>\n</pre>\n```\n\n----------------------------------------\n\nTITLE: Configuring TrustedHostMiddleware\nDESCRIPTION: Shows how to set up TrustedHostMiddleware for host header validation.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/fastapi-developer-llms-context-20250406.md#2025-04-13_snippet_30\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom fastapi.middleware.trustedhost import TrustedHostMiddleware\n\napp = FastAPI()\n\napp.add_middleware(\n    TrustedHostMiddleware, allowed_hosts=[\"example.com\", \"*.example.com\"]\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Legacy Browser Support in Vite\nDESCRIPTION: Configuration for @vitejs/plugin-legacy to enable support for older browsers while excluding IE 11.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/vite-specialist-llms-context-20250406.md#2025-04-13_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nimport legacy from '@vitejs/plugin-legacy'\nimport { defineConfig } from 'vite'\n\nexport default defineConfig({\n  plugins: [\n    legacy({\n      targets: ['defaults', 'not IE 11'],\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Creating an Improvement Chore Template in Markdown\nDESCRIPTION: This template provides a structure for creating improvement-focused tasks (chores) in MDTM, including YAML frontmatter and sections for improvement goals, actions, and success metrics.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/knowledge/project-management/lean-principles/README.md#2025-04-13_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n---\nid:             # ITEM-NNN\ntitle:          # 🧹 Chore: Improve X / Reduce Y\nstatus:         \"📥 Intake / Needs Refinement\" # Initial state\ntype:           \"🧹 Chore\"\npriority:       \"▶️ Medium\"\n# value_score:    # Value might be internal efficiency/quality\n# blocked:\n# blocked_reason:\ncreated_date:   # YYYY-MM-DD\nupdated_date:   # YYYY-MM-DD HH:MM:SS\n# assigned_to:    # Often assigned to team/process owner\nparent_value_stream: # Related value stream? Or general process area.\nrelated_docs:   [\"docs/WorkflowPolicies.md\"]\ntags:           [\"improvement\", \"kaizen\", \"process\"]\n---\n\n# << Chore Title >>\n\n## Improvement Goal / Waste Addressed 🎯\n(Describe the problem, the type of waste being targeted (e.g., reduce waiting time, eliminate defects), and the desired improvement).\n\n## Proposed Action(s) / Tasks ✅\n*   - [ ] Action 1 needed to implement the improvement.\n*   - [ ] Action 2...\n\n## How to Measure Success? 📊\n(Define how you'll know the improvement worked, e.g., \"Cycle time for X reduced by 10%\", \"Defect rate for Y decreased\").\n\n## Notes / Blockers 🚧\n(Updates, decisions, blocker details)\n```\n\n----------------------------------------\n\nTITLE: MongoDB Index Management\nDESCRIPTION: Commands for creating and viewing indexes on collection fields.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/033-database/mongodb-specialist/033-work-db-mongodb-specialist.mode.md#2025-04-13_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ndb.collection.createIndex({ <field>: <1|-1>, ... })\n```\n\nLANGUAGE: javascript\nCODE:\n```\ndb.collection.getIndexes()\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Front Matter for Waterfall MDTM Tasks\nDESCRIPTION: Demonstrates the structure of YAML front matter adapted for Waterfall methodology tasks. It includes fields for task identification, scheduling, assignment, relationships to documentation, and change request links.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/knowledge/project-management/waterfall-project-management/README.md#2025-04-13_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\n# 🆔 Task Identification & Core Metadata (Required)\nid:             # REQUIRED. Unique ID (e.g., REQ-001, DES-003, IMPL-006). Convention: {PHASE_ABBR}-{NNN}\ntitle:          # REQUIRED. Human-readable title (String). \"Design Database Schema for User Auth\"\nphase:          # REQUIRED. The Waterfall phase this task belongs to (String). See Phases below. \"📐 Design\"\nstatus:         # REQUIRED. Status *within this phase* (String). See Statuses below. \"🟡 To Do\"\ntype:           # REQUIRED. Type of work item (String). E.g., \"📝 Definition\", \"📐 Design Element\", \"⚙️ Implementation Unit\", \"🧪 Test Case\".\n\n# ⏳ Scheduling & Effort (Optional - often defined at project level in Waterfall)\npriority:       # Optional. Task importance if needed within phase. \"▶️ Medium\"\ncreated_date:   # Recommended. Date task created (YYYY-MM-DD). \"2025-04-05\"\nupdated_date:   # Recommended. Date last modified (YYYY-MM-DD). \"2025-04-05\"\n# due_date:       # Often managed at the Phase level in Waterfall.\n\n# 🧑‍💻 Assignment & Responsibility (Optional)\nassigned_to:    # Optional. Who is responsible for this task. \"🧑‍💻 User:DatabaseTeam\", \"👥 Team:Frontend\"\napproved_by:    # Optional. Formal sign-off for this specific task/deliverable. \"🧑‍⚖️ Manager:Jane\"\n\n# 🔗 Relationships & Context (CRITICAL in Waterfall)\nrequirement_ref: # CRITICAL. ID(s) or link(s) to specific item(s) in the SRS (String/List). [\"docs/01_SRS.md#req-3.1.2\"]\ndesign_ref:     # CRITICAL (for Impl/Test). ID(s) or link(s) to specific item(s) in the SDD (String/List). [\"docs/02_SDD.md#design-user-model\"]\ntest_case_ref:  # CRITICAL (for Testing). ID(s) or link(s) to specific test cases in Test Plan (String/List). [\"docs/03_TestPlan.md#tc-05\"]\ntags:           # Optional. Keywords (e.g., [\"database\", \"authentication\"]).\n\n# 🔁 Change Request Link (Optional)\nrelated_cr:     # Optional. Link to a Change Request task file if this task addresses a CR. \"AREA_ChangeRequests/CR_001...\"\n---\n\n# Title matching YAML title (optional redundancy)\n## Description ✍️\n... Markdown Body detailing task within the phase context ...\n```\n\n----------------------------------------\n\nTITLE: Storing User Details in Markdown File\nDESCRIPTION: After gathering optional user details, this snippet shows how the information is saved to a markdown file using the write_to_file function.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v6.0/changes/roo-commander-proactive-intent.md#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nproject_journal/context/user_profile.md\n```\n\n----------------------------------------\n\nTITLE: Creating Initial Task Log in Markdown\nDESCRIPTION: Example markdown template for initializing the task log when beginning a file repair operation. Includes task identification, goal description and corruption information.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/040-assistant/file-repair-specialist/040-asst-file-repair-specialist.mode.md#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Task Log: [TaskID] - File Repair: `[file_path]`\n\n**Goal:** Attempt repair of corrupted file `[file_path]`. Issue: [description], Suspected Type: [e.g., encoding]. Caller: [Caller Task ID/Mode].\n```\n\n----------------------------------------\n\nTITLE: List Rendering in Vue.js\nDESCRIPTION: Demonstrates how to render lists from arrays or objects using the v-for directive in Vue.js templates.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/condensed_indices/vuejs-developer-condensed-index.md#2025-04-13_snippet_8\n\nLANGUAGE: html\nCODE:\n```\nv-for=\"(item, index) in items\"\n```\n\n----------------------------------------\n\nTITLE: Creating Initial Task Log in Markdown\nDESCRIPTION: Template for creating an initial task log that documents the research goal. This template is used when initializing a new research task.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/040-assistant/research-context-builder/040-asst-research-context-builder.mode.md#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```markdown\n# Task Log: [TaskID] - Research: [Topic]\n\n**Goal:** Research [topic] and provide synthesized summary.\n```\n```\n\n----------------------------------------\n\nTITLE: Django Template Variable Output\nDESCRIPTION: Django template syntax for outputting variables\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/condensed_indices/django-developer-condensed-index.md#2025-04-13_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n{{ }}\n```\n\n----------------------------------------\n\nTITLE: Defining React Specialist Tags\nDESCRIPTION: List of metadata tags to identify React-related tasks and capabilities in the system.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v6.3/improvements/react-specialist-improvements.md#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n\"react\", \"javascript\", \"frontend\", \"ui-library\", \"component-based\", \"hooks\", \"context-api\", \"jsx\"\n```\n\n----------------------------------------\n\nTITLE: Canonical Link Meta Implementation\nDESCRIPTION: Implementation of canonical URL links using Remix's meta function.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/remix-developer-llms-context-20250406.md#2025-04-13_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\nexport const meta: MetaFunction = () => {\n  return [\n    {\n      tagName: \"link\",\n      rel: \"canonical\",\n      href: \"https://remix.run\",\n    },\n  ];\n};\n```\n\n----------------------------------------\n\nTITLE: Applying Treemap Layout to Hierarchy in D3\nDESCRIPTION: Lays out the specified root hierarchy, assigning position properties to each node. This method requires the hierarchy to have values assigned using root.sum() beforehand to determine node sizes.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/d3js-specialist-llms-context-20250406.md#2025-04-13_snippet_47\n\nLANGUAGE: javascript\nCODE:\n```\n*treemap*(*root*)\n```\n\n----------------------------------------\n\nTITLE: User Story Template for MDTM Agile Implementation\nDESCRIPTION: A template for creating user stories in the MDTM system. Includes YAML front matter for tracking metadata and a structured format for capturing the user story, notes, and acceptance criteria.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/knowledge/project-management/agile-principles/implementing.md#2025-04-13_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n---\nid:             # << GENERATE_ID (STORY-NNN) >>\ntitle:          # << As a User, I want Action, so that Benefit >>\nstatus:         \"🟡 Backlog\"\ntype:           \"📖 User Story\"\npriority:       \"▶️ Medium\"\nestimated_effort: # << Points/Size >>\n# iteration:\n# assigned_to:\nreporter:       # << Who? >>\nparent_feature: # << Path to FEATURE/_overview.md >>\n# depends_on:     []\nrelated_docs:   []\ntags:           []\n---\n\n# << As a User, I want Action, so that Benefit >>\n\n## User Story 📖\n> As a **[User Role]**,\n> I want **[Action]**,\n> So that **[Benefit]**.\n\n## Notes / Discussion 💬\n(Context, assumptions, links to designs...)\n\n## Acceptance Criteria ✅\n*   - [ ] Criterion 1 (Given/When/Then or simple statement)\n*   - [ ] Criterion 2\n*   - [ ] ...\n```\n\n----------------------------------------\n\nTITLE: Creating Basic README.md Content\nDESCRIPTION: Generates a simple README.md file with the project name as the main heading.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/010-director/project-onboarding/010-dir-project-onboarding.mode.md#2025-04-13_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n# [project_name]\n```\n\n----------------------------------------\n\nTITLE: Using the Next.js Image Component with Automatic Optimization\nDESCRIPTION: Demonstrates how to import and implement the Image component from next/image with local images. The component automatically handles width, height, and optimization features like blur placeholders.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/nextjs-developer-llms-context-20250406.md#2025-04-13_snippet_29\n\nLANGUAGE: jsx\nCODE:\n```\nimport Image from 'next/image'\nimport profilePic from './me.png'\n\nexport default function Page() {\n  return (\n    <Image\n      src={profilePic}\n      alt=\"Picture of the author\"\n      // width={500} automatically provided\n      // height={500} automatically provided\n      // blurDataURL=\"data:...\" automatically provided\n      // placeholder=\"blur\" // Optional blur-up while loading\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Variable Width Histogram Aggregation in Elasticsearch\nDESCRIPTION: This snippet demonstrates how to request a variable width histogram aggregation with a target of 2 buckets on the 'price' field in Elasticsearch. The aggregation dynamically determines bucket intervals based on document distribution.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/elasticsearch-specialist-llms-context-20250406.md#2025-04-13_snippet_12\n\nLANGUAGE: console\nCODE:\n```\nPOST /sales/_search?size=0\n{\n  \"aggs\": {\n    \"prices\": {\n      \"variable_width_histogram\": {\n        \"field\": \"price\",\n        \"buckets\": 2\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Body Template for Tasks\nDESCRIPTION: Template showing the recommended structure for the markdown body of task files, including sections for description, inputs, tasks, outputs, and references.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/knowledge/project-management/waterfall-project-management/implementing.md#2025-04-13_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n# << Task Title >>\n\n## Description ✍️\nBriefly explain the objective of *this specific task* within its phase. Always refer back to the main documents in `docs/` for the comprehensive details.\n*Example (Design Task):* \"Create the detailed sequence diagram for the user login process as specified in [SRS §3.1](docs/01_Requirements_SRS.md#section-3.1).\"\n\n## Inputs / Prerequisites 📥\nList the specific documents, sections, or outputs from previous tasks/phases needed to perform this task.\n*   *Example:* \"Approved [SRS §3.1](docs/01_Requirements_SRS.md#section-3.1)\", \"Overall [Architecture Diagram](docs/02_Design_SDD.md#arch-diagram)\".\n\n## Tasks / Checklist ✅\nBreak down the specific steps required to complete *this task* within this phase. Use Markdown checklists (`- [ ]`).\n*   *Example (Design Task):*\n    *   - [ ] Review relevant SRS section.\n    *   - [ ] Draft sequence diagram using Mermaid/tool.\n    *   - [ ] Add diagram to [SDD §4.5](docs/02_Design_SDD.md#seq-login).\n    *   - [ ] Submit SDD section for review.\n    *   - [ ] Incorporate review feedback.\n\n## Outputs / Deliverables 📤\nSpecify what this task produces or updates.\n*   *Example:* \"Updated [SDD §4.5](docs/02_Design_SDD.md#seq-login)\", \"Sequence diagram file `docs/diagrams/login_sequence.png`\".\n\n## References 🔗\nDirect links to the most relevant sections in the primary `docs/` files.\n*   *Example:* `[SRS §3.1](docs/01_Requirements_SRS.md#section-3.1)`\n```\n\n----------------------------------------\n\nTITLE: Router Module Import\nDESCRIPTION: Shows how to import the Router module for routing functionality in Angular applications.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/angular-developer-llms-context-20250406.md#2025-04-13_snippet_43\n\nLANGUAGE: typescript\nCODE:\n```\nimport { provideRouter } from '@angular/router';\n```\n\n----------------------------------------\n\nTITLE: Applying Linear Scale for Position Mapping in D3.js\nDESCRIPTION: Shows how to use D3's linear scale to map domain values (data values) to pixel positions in a range. This example maps the domain [10, 130] to a pixel range of [0, 960] and shows the resulting mapped values.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/d3js-specialist-llms-context-20250406.md#2025-04-13_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst x = d3.scaleLinear([10, 130], [0, 960]);\nx(20); // 80\nx(50); // 320\n```\n\n----------------------------------------\n\nTITLE: Initial Task Log Template in Markdown\nDESCRIPTION: Template for creating initial task log entries in the project journal, including task ID and goal description.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/032-backend/php-laravel-developer/032-work-be-php-laravel-developer.mode.md#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Task Log: [TaskID] - PHP/Laravel Development\n\n**Goal:** Implement [e.g., product management CRUD operations].\n```\n\n----------------------------------------\n\nTITLE: Remediation Planning and Implementation Log Template in Markdown\nDESCRIPTION: Template for documenting the remediation plans for identified vulnerabilities, including delegation details for complex fixes and direct implementation details for simpler fixes.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/039-cross-functional/security-specialist/039-work-xf-security-specialist.mode.md#2025-04-13_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n## Remediation Plan & Actions\n\n**Vulnerability:** BOLA in `GET /api/v1/users/{id}` (P0)\n**Action:** Delegated to `backend-developer` (Task: TASK-SEC-FIX-BOLA-...) with recommendation to add ownership check based on authenticated user ID.\n\n**Vulnerability:** Reflected XSS in `profile.php` (P1)\n**Action:** Applied context-aware HTML encoding to the `msg` parameter output.\n**Files Modified:** `profile.php` (using `apply_diff`)\n\n**Vulnerability:** Outdated dependency `libfoo` (CVE-...) (P2)\n**Action:** Updated dependency version in `package.json`.\n**Files Modified:** `package.json` (using `apply_diff`)\n```\n\n----------------------------------------\n\nTITLE: Defining Mode Configuration in JSON\nDESCRIPTION: JSON schema for defining an AI agent mode, including role definition, custom instructions, group assignments, and file permissions. This template shows the complete structure needed to configure a new mode in the system.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/ROO_MODE_SYSTEM.md#2025-04-13_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"slug\": \"unique-mode-identifier\", // Lowercase, hyphenated identifier\n  \"name\": \"User-Friendly Mode Name\", // Display name\n  \"roleDefinition\": \"Detailed description of the mode's purpose, expertise, and responsibilities.\",\n  \"customInstructions\": [ // Array of instruction blocks\n    {\n      \"title\": \"Core Workflow\",\n      \"content\": \"Step-by-step guidance on how this mode should operate...\"\n    },\n    {\n      \"title\": \"Collaboration Points\",\n      \"content\": \"Instructions on how to interact with other modes (Managers, Specialists)...\"\n    },\n    {\n      \"title\": \"Key Knowledge/Patterns\", // Embed essential information for specialists\n      \"content\": \"Specific code patterns, API usage, best practices...\"\n    }\n    // Add more instruction blocks as needed\n  ],\n  \"groups\": [\"specialist\", \"frontend\"], // Categorisation for organisation/permissions\n  \"fileRegex\": [ // Optional: Regex patterns for allowed file edits\n    \"\\\\.js$\",\n    \"\\\\.jsx$\",\n    \"\\\\.css$\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Angular CI Test Configuration\nDESCRIPTION: Shows the command for running Angular tests in a CI environment with specific configurations.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/angular-developer-llms-context-20250406.md#2025-04-13_snippet_41\n\nLANGUAGE: shell\nCODE:\n```\nng test --no-watch --no-progress --browsers=ChromeHeadless\n```\n\n----------------------------------------\n\nTITLE: Button Group Implementation\nDESCRIPTION: Basic button group structure with proper ARIA attributes.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/bootstrap-specialist-llms-context-20250406.md#2025-04-13_snippet_18\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"btn-group\" role=\"group\" aria-label=\"Basic example\">\n```\n\n----------------------------------------\n\nTITLE: Linux musl Binary Package Documentation\nDESCRIPTION: Markdown documentation for the Linux x64 musl binary package of Tailwind CSS Oxide.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/tailwind-specialist-llms-context-20250406.md#2025-04-13_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n# `@tailwindcss/oxide-linux-x64-musl`\n\nThis is the **x86_64-unknown-linux-musl** binary for `@tailwindcss/oxide`\n```\n\n----------------------------------------\n\nTITLE: Using Built-in Template Control Flow Syntax\nDESCRIPTION: Shows examples of Angular's built-in template control flow syntax for conditional rendering, looping, and switch statements within component templates.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/031-frontend/angular-developer/031_angular-developer.mode.md#2025-04-13_snippet_12\n\nLANGUAGE: HTML\nCODE:\n```\n@if (condition) {\n  <p>Rendered when true</p>\n}\n@for (item of items; track item.id) {\n  <li>{{ item.name }}</li>\n}\n@switch (value) {\n  @case ('a') { <p>A</p> }\n  @case ('b') { <p>B</p> }\n  @default { <p>Default</p> }\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Bootstrap CSS variables\nDESCRIPTION: Example of overriding Bootstrap's CSS variables for customization, specifically changing the primary color.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/condensed_indices/bootstrap-specialist-condensed-index.md#2025-04-13_snippet_3\n\nLANGUAGE: CSS\nCODE:\n```\n:root { --bs-primary: ...; }\n```\n\n----------------------------------------\n\nTITLE: Creating Research Summary in Markdown\nDESCRIPTION: Comprehensive template for creating the final research summary document, including executive summary, detailed findings, code examples, and references.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/040-assistant/research-context-builder/040-asst-research-context-builder.mode.md#2025-04-13_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n```markdown\n# Research Summary: [Topic]\n\n## Executive Summary\n[1-2 paragraphs overview]\n\n## Detailed Findings\n\n### [Subtopic 1]\n[Details with citations]\n\n### [Subtopic 2]\n[Details with citations]\n\n## Code Examples\n\n```[language]\n[code snippet]\n```\n\n## References\n\n1. [Author]. (Year). [Title]. [Source]. [URL]\n2. [Author]. (Year). [Title]. [Source]. [URL]\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Django Developer Mode Metadata in JSON\nDESCRIPTION: Example of mode definition with tags metadata for a Django developer. This structure helps in identifying appropriate specialists for backend tasks involving Django and Python.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v6.2/roo-commander-mode-escalation-analysis.md#2025-04-13_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"slug\": \"django-developer\",\n  \"tags\": [\"django\", \"python\", \"backend\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Alert Dialog in React TSX\nDESCRIPTION: Example implementation of an alert dialog with header, description, and action buttons for confirmation flow\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/shadcn-ui-specialist-llms-context-20250406.md#2025-04-13_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\n<AlertDialog>\n  <AlertDialogTrigger>Open</AlertDialogTrigger>\n  <AlertDialogContent>\n    <AlertDialogHeader>\n      <AlertDialogTitle>Are you absolutely sure?</AlertDialogTitle>\n      <AlertDialogDescription>\n        This action cannot be undone. This will permanently delete your account\n        and remove your data from our servers.\n      </AlertDialogDescription>\n    </AlertDialogHeader>\n    <AlertDialogFooter>\n      <AlertDialogCancel>Cancel</AlertDialogCancel>\n      <AlertDialogAction>Continue</AlertDialogAction>\n    </AlertDialogFooter>\n  </AlertDialogContent>\n</AlertDialog>\n```\n\n----------------------------------------\n\nTITLE: Documenting Success in Task Log using Markdown\nDESCRIPTION: Template for logging successful refactoring completion in the project journal, including summary of changes and metrics.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/039-cross-functional/refactor-specialist/039-work-xf-refactor-specialist.mode.md#2025-04-13_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n---\n**Status:** ✅ Complete\n**Outcome:** Success\n**Summary:** Refactored `[file(s)]`: [e.g., extracted 3 methods, simplified conditionals]. All tests passing.\n**Improvements:** [e.g., Reduced cyclomatic complexity from X to Y. Removed N lines of duplicate code.]\n**References:** [`[path/to/file]` (modified)]\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for MDTM Kanban Implementation\nDESCRIPTION: Demonstrates the recommended project directory structure for organizing Kanban work items by feature/product area. Shows how to organize tasks, templates, and input queues.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/knowledge/project-management/kanban/README.md#2025-04-13_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nPROJECT_ROOT/\n├── src/                     # Source Code\n├── docs/                    # Supporting Docs (Workflow Policies, DoD, Designs)\n│   └── WorkflowPolicies.md  # 👈 IMPORTANT: Define statuses, WIP limits, policies here\n├── tasks/                   # 👈 **Main MDTM Directory**\n│   ├── _templates/          # 📄 Templates for consistent item creation\n│   │   ├── ✨_feature_item.md\n│   │   ├── 🛠️_task_item.md\n│   │   └── 🐞_bug_item.md\n│   │\n│   ├── INPUT_QUEUE/         # 📥 Optional: Unprioritized or raw input\n│   │   └── IDEA_new_integration.md\n│   │\n│   ├── AREA_authentication/   # 🔑 Product Area: Authentication\n│   │   ├── _overview.md       # Optional: High-level goals for this area\n│   │   ├── 001_✨_user_login_feature.md    # Feature Item\n│   │   ├── 002_🛠️_update_password_hash.md # Task Item\n│   │   └── 003_🐞_session_timeout_bug.md   # Bug Item\n│   │\n│   ├── AREA_reporting/        # 📊 Product Area: Reporting\n│   │   └── 004_✨_generate_sales_pdf.md\n│   │\n│   └── AREA_deployment/       # 🚀 Product Area: Deployment Pipeline\n│       └── 005_🛠️_add_staging_step.md\n│\n├── archive/                 # 📦 Optional: Completed items (status = ✅ Done)\n│   └── ...\n└── README.md\n```\n\n----------------------------------------\n\nTITLE: Linux GNU Package Name Definition\nDESCRIPTION: Package name specification for the Linux x86_64 GNU binary of Tailwind CSS Oxide.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/tailwind-specialist-llms-context-20250406.md#2025-04-13_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n@tailwindcss/oxide-linux-x64-gnu\n```\n\n----------------------------------------\n\nTITLE: Metadata Tags for Technical Documentation\nDESCRIPTION: List of recommended metadata tags for documentation classification and organization\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v6.3/improvements/technical-writer-improvements.md#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n\"documentation\", \"technical-writing\", \"readme\", \"user-guide\", \"api-documentation\", \"markdown\", \"rst\"\n```\n\n----------------------------------------\n\nTITLE: Importing Anime.js in JavaScript\nDESCRIPTION: Basic import statement for including Anime.js in a JavaScript project.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/031-frontend/animejs-specialist/031_animejs-specialist.mode.md#2025-04-13_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport anime from 'animejs';\n```\n\n----------------------------------------\n\nTITLE: Simple MongoDB Collection Query\nDESCRIPTION: Shows how to retrieve all documents from a MongoDB collection using an empty query predicate.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/mongodb-specialist-llms-context-20250406.md#2025-04-13_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\ndb.collection.find({})\n```\n\n----------------------------------------\n\nTITLE: Creating and Querying an IP Field in Elasticsearch\nDESCRIPTION: This snippet demonstrates how to create an index with an IP field, insert a document with an IP address, and perform a query using CIDR notation.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/elasticsearch-specialist-llms-context-20250406.md#2025-04-13_snippet_28\n\nLANGUAGE: console\nCODE:\n```\nPUT my-index-000001\n{\n  \"mappings\": {\n    \"properties\": {\n      \"ip_addr\": {\n        \"type\": \"ip\"\n      }\n    }\n  }\n}\n\nPUT my-index-000001/_doc/1\n{\n  \"ip_addr\": \"192.168.1.1\"\n}\n\nGET my-index-000001/_search\n{\n  \"query\": {\n    \"term\": {\n      \"ip_addr\": \"192.168.0.0/16\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Bundle Script with Custom Source and Output in Bash\nDESCRIPTION: Executes the bundle_modes.js script with a custom source directory along with custom output settings. This allows reading from a non-standard modes directory.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/dev_tools/bundle_modes_sop.md#2025-04-13_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnode dev_tools/bundle_modes.js --source path/to/your/modes --outputDir v5.1 --outputFile roo_commander_modes_v5.1.json\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Project Folder Structure for MDTM Feature Structure\nDESCRIPTION: This snippet illustrates the recommended folder structure for organizing tasks in the MDTM Feature Structure approach. It shows how tasks are grouped by feature and includes placeholders for templates, overviews, and archived tasks.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/knowledge/project-management/markdown-driven-task-management-MDTM/markdown-driven-task-management-MDTM-feature-structure/README.md#2025-04-13_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nPROJECT_ROOT/\n├── src/\n│   └── ... your source code ...\n├── docs/\n│   ├── PRD.md\n│   └── API_Spec.md\n├── tasks/                      # <== Main directory for all tasks\n│   ├── _templates/             # Optional: Templates for different task types\n│   │   ├── feature_task.md\n│   │   └── bug_report.md\n│   ├── authentication/         # <== Folder for the Authentication Feature\n│   │   ├── _overview.md        # Optional: Markdown summary of the feature/epic\n│   │   ├── 001_login_ui.md     # <== Task file\n│   │   ├── 002_login_logic.md\n│   │   └── 003_password_reset.md\n│   ├── user_profile/           # <== Folder for User Profile Feature\n│   │   ├── _overview.md\n│   │   └── 004_display_data.md\n│   └── bugs/                   # <== Folder for bug reports\n│       └── 005_login_crash_on_safari.md\n├── archive/                    # <== Optional: Completed tasks moved here\n│   └── authentication/\n│       └── ... completed auth tasks ...\n└── README.md\n```\n\n----------------------------------------\n\nTITLE: Creating Final Task Log Summary in Markdown\nDESCRIPTION: Example markdown template for the final summary entry in a task log after completing a file repair attempt. Includes status, outcome, summary of actions taken, and file references.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/040-assistant/file-repair-specialist/040-asst-file-repair-specialist.mode.md#2025-04-13_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n---\n**Status:** ✅ Complete\n**Outcome:** [Success/Partial Success/Failure]\n**Summary:** Attempted repair of `[file_path]` by [action taken, e.g., removing extraneous tag]. Verification [successful/partially successful/failed].\n**References:** [`[file_path]` (modified)]\n```\n\n----------------------------------------\n\nTITLE: Importing AnimeJS Animation Module\nDESCRIPTION: Basic import statement for the animate function from the animejs library.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/animejs-specialist-llms-context-20250406.md#2025-04-13_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport { animate } from 'animejs';\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Fields for MDTM Task Management\nDESCRIPTION: Example YAML fields commonly used in MDTM task files. These fields provide structured metadata for each task, including identifiers, status, priorities, and relationships to other tasks or documents.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/knowledge/project-management/markdown-driven-task-management-MDTM/markdown-driven-task-management-MDTM-feature-structure/README.md#2025-04-13_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nid: FEAT-AUTH-001\ntitle: Implement user authentication\nstatus: In Progress\npriority: High\ntype: Feature\nassigned_to: User:Alice\ncreated_date: 2023-05-01\nupdated_date: 2023-05-03\ndue_date: 2023-05-15\nestimated_effort: M\nparent_task: authentication/_overview.md\ndepends_on: [\"FEAT-AUTH-002\"]\nrelated_docs: [\"docs/PRD.md#section-3.1\", \"../shared/API.md#auth-endpoint\"]\ntags: [\"ui\", \"security\", \"critical\"]\n```\n\n----------------------------------------\n\nTITLE: Documenting Methods in Three.js\nDESCRIPTION: Demonstrates the HTML structure for documenting methods in the Three.js documentation.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/threejs-specialist-llms-context-20250406.md#2025-04-13_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<h3>[method:ReturnType methodName]</h3>\n```\n\n----------------------------------------\n\nTITLE: Connecting to PostgreSQL Using psql Client\nDESCRIPTION: A simple command to connect to a PostgreSQL database using the psql client tool with the postgres user.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/neon-db-specialist-llms-context-20250406.md#2025-04-13_snippet_0\n\nLANGUAGE: php\nCODE:\n```\npsql -U postgres\n```\n\n----------------------------------------\n\nTITLE: TailwindCSS Project Header HTML\nDESCRIPTION: HTML structure for a project header featuring responsive dark/light mode logo and project badges.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/tailwind-specialist-llms-context-20250406.md#2025-04-13_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<p align=\"center\">\n  <a href=\"https://tailwindcss.com\" target=\"_blank\">\n    <picture>\n      <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://raw.githubusercontent.com/tailwindlabs/tailwindcss/HEAD/.github/logo-dark.svg\">\n      <source media=\"(prefers-color-scheme: light)\" srcset=\"https://raw.githubusercontent.com/tailwindlabs/tailwindcss/HEAD/.github/logo-light.svg\">\n      <img alt=\"Tailwind CSS\" src=\"https://raw.githubusercontent.com/tailwindlabs/tailwindcss/HEAD/.github/logo-light.svg\" width=\"350\" height=\"70\" style=\"max-width: 100%;\">\n    </picture>\n  </a>\n</p>\n\n<p align=\"center\">\n  A utility-first CSS framework for rapidly building custom user interfaces.\n</p>\n\n<p align=\"center\">\n    <a href=\"https://github.com/tailwindlabs/tailwindcss/actions\"><img src=\"https://img.shields.io/github/actions/workflow/status/tailwindlabs/tailwindcss/ci.yml?branch=next\" alt=\"Build Status\"></a>\n    <a href=\"https://www.npmjs.com/package/tailwindcss\"><img src=\"https://img.shields.io/npm/dt/tailwindcss.svg\" alt=\"Total Downloads\"></a>\n    <a href=\"https://github.com/tailwindcss/tailwindcss/releases\"><img src=\"https://img.shields.io/npm/v/tailwindcss.svg\" alt=\"Latest Release\"></a>\n    <a href=\"https://github.com/tailwindcss/tailwindcss/blob/master/LICENSE\"><img src=\"https://img.shields.io/npm/l/tailwindcss.svg\" alt=\"License\"></a>\n</p>\n```\n\n----------------------------------------\n\nTITLE: Initializing Task Log for Vite Configuration in Markdown\nDESCRIPTION: Example of initial log content for a Vite configuration task, including the task ID, goal, and basic structure.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/031-frontend/vite-specialist/031-work-fe-vite-specialist.mode.md#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Task Log: [TaskID] - Vite Configuration\n\n**Goal:** [e.g., Set up Vite project with React and TypeScript, Configure build optimization for production, Migrate Webpack config to Vite].\n```\n\n----------------------------------------\n\nTITLE: Manual Next.js Installation\nDESCRIPTION: Manually install Next.js and its peer dependencies using npm. This approach gives more control over the initial setup.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/031-frontend/nextjs-developer/031-work-fe-nextjs-developer.mode.md#2025-04-13_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install next react react-dom\n```\n\n----------------------------------------\n\nTITLE: Supabase CLI Initialization\nDESCRIPTION: Command to initialize Supabase configuration in a local project directory using the Supabase CLI.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/032-backend/supabase-developer/032-work-be-supabase-developer.mode.md#2025-04-13_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nsupabase init\n```\n\n----------------------------------------\n\nTITLE: Basic File Regex Pattern in JSON Configuration\nDESCRIPTION: Demonstrates how to specify a file regex pattern in JSON format to match only Markdown files. The pattern uses escaped backslashes and ends with a $ to ensure exact extension matching.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/knowledge/custom_modes.md#2025-04-13_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n[\"edit\", { \"fileRegex\": \"\\\\.md$\", \"description\": \"Markdown files only\" }]\n```\n\n----------------------------------------\n\nTITLE: Task Completion Log Entry in Markdown\nDESCRIPTION: Final log entry format for recording task completion status. This markdown snippet includes the status, outcome, summary, and references to the generated index file.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/040-assistant/context-condenser/040-asst-context-condenser.mode.md#2025-04-13_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n---\n**Status:** ✅ Complete\\n**Outcome:** Success\\n**Summary:** Generated Condensed Context Index for [tech_name] v[tech_version].\\n**References:** [`[index_output_path]` (created)]\\n\n```\n\n----------------------------------------\n\nTITLE: Structuring MDTM Directory for Lean Project Management\nDESCRIPTION: Defines the recommended directory structure for organizing Lean work items using MDTM. It includes folders for templates, value streams, and areas of focus, supporting visibility and organization of work.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/knowledge/project-management/lean-principles/implementing.md#2025-04-13_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nPROJECT_ROOT/\n├── src/                     # Source Code\n├── docs/                    # Supporting Docs (Value Stream Map, Workflow Policies, DoD)\n│   └── WorkflowPolicies.md  # 👈 **Define your value stream stages (statuses), WIP limits, pull rules here!**\n├── tasks/                   # 👈 **Main MDTM Directory for Lean Items**\n│   ├── _templates/          # 📄 Templates (Essential for consistency)\n│   │   ├── ✨_value_item.md # (Represents Feature or Story)\n│   │   ├── 🛠️_task_item.md\n│   │   ├── 🐞_bug_item.md\n│   │   └── 🧹_improvement_chore.md # (For Kaizen/Continuous Improvement)\n│   │\n│   ├── INPUT_QUEUE/         # 📥 Optional: Raw ideas, needs analysis, unsorted input\n│   │   └── IDEA_integrate_new_api.md\n│   │\n│   ├── VALUE_STREAM_user_acquisition/ # 🌱 Value Stream/Feature Area\n│   │   ├── _overview.md       # Optional: Goals/Metrics for this value stream\n│   │   ├── 001_✨_improve_signup_conversion.md # Value Item\n│   │   ├── 002_🛠️_setup_ab_test_framework.md  # Supporting Task\n│   │   └── 003_🐞_fix_signup_form_validation.md # Related Bug (Waste!)\n│   │\n│   ├── VALUE_STREAM_core_functionality/ # ⚙️ Another Value Stream/Feature Area\n│   │   └── 004_✨_add_item_to_cart.md\n│   │\n│   └── AREA_technical_excellence/      # 🩺 Area for platform health, tech debt etc.\n│       └── 005_🧹_migrate_to_new_db_version.md # Improvement Chore\n│\n├── archive/                 # 📦 Optional: Completed items (status = ✅ Delivered)\n│   └── ...\n└── README.md\n```\n\n----------------------------------------\n\nTITLE: Basic Button Implementation\nDESCRIPTION: Simple button implementation using Bootstrap's base button class.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/bootstrap-specialist-llms-context-20250406.md#2025-04-13_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<button type=\"button\" class=\"btn\">Base class</button>\n```\n\n----------------------------------------\n\nTITLE: Configuring User Story Creator Mode\nDESCRIPTION: JSON configuration for an agile requirements specialist mode focused on creating structured user stories with acceptance criteria. Includes templates and guidelines for different story types.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/knowledge/community_mode_ideas.md#2025-04-13_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"slug\": \"user-story-creator\",\n  \"name\": \"User Story Creator\",\n  \"roleDefinition\": \"You are Roo, an agile requirements specialist focused on creating clear, valuable user stories. Your expertise includes:\\n- Crafting well-structured user stories following the standard format\\n- Breaking down complex requirements into manageable stories\\n- Identifying acceptance criteria and edge cases\\n- Ensuring stories deliver business value\\n- Maintaining consistent story quality and granularity\",\n  \"customInstructions\": \"Expected User Story Format:\\n\\nTitle: [Brief descriptive title]\\n\\nAs a [specific user role/persona],\\nI want to [clear action/goal],\\nSo that [tangible benefit/value].\\n\\nAcceptance Criteria:\\n1. [Criterion 1]\\n2. [Criterion 2]\\n3. [Criterion 3]\\n\\nStory Types to Consider:\\n- Functional Stories (user interactions and features)\\n- Non-functional Stories (performance, security, usability)\\n- Epic Breakdown Stories (smaller, manageable pieces)\\n- Technical Stories (architecture, infrastructure)\\n\\nEdge Cases and Considerations:\\n- Error scenarios\\n- Permission levels\\n- Data validation\\n- Performance requirements\\n- Security implications\",\n  \"groups\": [\n    \"read\",\n    \"edit\",\n    \"command\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Project Metadata Configuration in Markdown\nDESCRIPTION: Defines the project's metadata configuration including level designation, tool groups, tags, categories, technical stack, delegation structure, reporting lines and API model configuration.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/010-director/technical-architect/010-dir-technical-architect.mode.md#2025-04-13_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n## Metadata\n\n**Level:** 010-director\n\n**Tool Groups:**\n- read\n- edit\n- browser\n- command\n- mcp\n\n**Tags:**\n- architecture\n- system-design\n- technical-leadership\n- solution-design\n- non-functional-requirements\n- technology-selection\n- adr\n\n**Categories:**\n- Architecture\n- Technical Leadership\n- System Design\n\n**Stack:**\n- Architecture\n- System Design\n- Documentation\n\n**Delegates To:**\n- `diagramer`\n- `research-context-builder`\n- `technical-writer`\n- `frontend-developer`\n- `backend-developer`\n\n**Escalates To:**\n- `research-context-builder`\n- `complex-problem-solver`\n\n**Reports To:**\n- `roo-commander`\n- `project-manager`\n\n**API Configuration:**\n- model: gemini-2.5-pro\n```\n\n----------------------------------------\n\nTITLE: Documenting Blocked Refactoring in Task Log using Markdown\nDESCRIPTION: Template for logging a blocked refactoring attempt due to insufficient test coverage, used when further progress is unsafe.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/039-cross-functional/refactor-specialist/039-work-xf-refactor-specialist.mode.md#2025-04-13_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n---\n**Status:** 🧱 Blocked\n**Outcome:** Blocked - Insufficient Tests\n**Summary:** Refactoring halted for `[files_to_refactor]`. Cannot proceed safely without adequate test coverage. Recommend test creation.\n**References:** [`[files_to_refactor]`]\n```\n\n----------------------------------------\n\nTITLE: Integration Testing Metadata Tags\nDESCRIPTION: Recommended metadata tags for categorizing integration testing related tasks and documentation\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v6.3/improvements/integration-tester-improvements.md#2025-04-13_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n\"testing\", \"integration-testing\", \"quality-assurance\", \"api-testing\", \"component-testing\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Project Journal Directory Structure in Markdown\nDESCRIPTION: This code snippet illustrates the structure of the Project Journal directory, which is crucial for context management in the Roo Commander system. It shows the organization of tasks, decisions, formal documents, visualizations, planning, and technical notes.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v4.5/README.md#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```\nproject_journal/\n├── tasks/                   # Task-specific logs (TASK-ID.md for each delegated task)\n│   └── TASK-FE-YYYYMMDD-HHMMSS.md\n├── decisions/               # Project-level decisions (ADR-like files)\n│   └── YYYYMMDD-technology-choice.md\n├── formal_docs/           # Finalized outputs (reports, specs, guides)\n│   └── api_spec_v1.yaml\n├── visualizations/          # Mermaid diagrams\n│   └── architecture_diagram.md\n├── planning/              # Core plans\n│   ├── requirements.md\n│   ├── architecture.md\n│   └── project_plan.md\n└── technical_notes/       # Ad-hoc technical documentation\n```\n```\n\n----------------------------------------\n\nTITLE: RouterModule Import Configuration\nDESCRIPTION: Shows how to import RouterModule in Angular component configuration.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/angular-developer-llms-context-20250406.md#2025-04-13_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nimports: [RouterModule],\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter for Task Definition\nDESCRIPTION: Template showing the required and optional YAML front matter fields for defining phase tasks in the Waterfall MDTM system.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/knowledge/project-management/waterfall-project-management/implementing.md#2025-04-13_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\n# 🆔 Task Identification & Core Metadata\nid:             # REQUIRED. Unique ID (e.g., REQ-001, DES-003). Convention: {PHASE_ABBR}-{NNN}\ntitle:          # REQUIRED. Human-readable title. \"Finalize SRS Section 3 (Functional Requirements)\"\nphase:          # REQUIRED. Waterfall phase name. \"🎯 Requirements\"\nstatus:         # REQUIRED. Status *within this phase*. \"🟡 To Do\", \"🔵 In Progress\", \"🟢 Done (Phase)\"\ntype:           # REQUIRED. Type of work within phase. \"📝 Definition\", \"📐 Design Element\", \"🧪 Test Execution\"\n\n# 🔗 Relationships & Context (CRITICAL)\nrequirement_ref: # REQUIRED (for tasks in/after Req phase). Link(s) to SRS section(s). [\"docs/01_Requirements_SRS.md#section-3\"]\ndesign_ref:     # REQUIRED (for tasks in/after Design phase). Link(s) to SDD section(s). [\"docs/02_Design_SDD.md#arch-diagram\"]\ntest_case_ref:  # REQUIRED (for tasks in/after Test Plan phase). Link(s) to Test Plan section(s). [\"docs/03_Test_Plan.md#tc-auth-01\"]\n\n# ⏳ Scheduling & Effort (Often less granular in Waterfall)\ncreated_date:   # Recommended. \"YYYY-MM-DD\"\nupdated_date:   # Recommended. \"YYYY-MM-DD\"\n\n# 🧑‍💻 Assignment & Approval\nassigned_to:    # Optional. \"🧑‍💻 User:AnalystBob\", \"👥 Team:Dev\"\napproved_by:    # Optional. Formal sign-off for this task's output. \"🧑‍⚖️ Manager:Jane\"\n\n# 🔁 Change Request Link\nrelated_cr:     # Optional. Link to Change Request file if this addresses it. \"AREA_ChangeRequests/CR_001...\"\n\n# 🏷️ Tags\ntags:           # Optional. Keywords (e.g., [\"authentication\", \"database\"]).\n---\n```\n\n----------------------------------------\n\nTITLE: Bug Report Template in Markdown\nDESCRIPTION: Template for creating bug reports with YAML frontmatter including bug ID, status, priority, and reporter information. Includes sections for reproduction steps, expected behavior, and acceptance criteria.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/knowledge/project-management/agile-principles/implementing.md#2025-04-13_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n---\nid:             # << GENERATE_ID (BUG-NNN) >>\ntitle:          # << BUG: Short description of issue >>\nstatus:         \"🟡 Backlog\"\ntype:           \"🐞 Bug\"\npriority:       \"🔼 High\" # Usually higher\n# estimated_effort: # Optional for bugs\n# iteration:\n# assigned_to:\nreporter:       # << Who found it? >>\nparent_feature: # << Path to affected FEATURE/_overview.md >>\n# related_docs:   # Links to logs/screenshots\ntags:           [\"bug\", ...] # Add feature tag\n---\n\n# << BUG: Short description of issue >>\n\n## Bug Report 🐞\n\n**Summary:**\n(Brief explanation of the problem)\n\n**Steps to Reproduce 👣:**\n1.  ...\n2.  ...\n3.  ...\n\n**Expected Behavior ✅:**\n(What should have happened?)\n\n**Actual Behavior ❌:**\n(What actually happened?)\n\n**Environment 🖥️:**\n(Browser, OS, etc.)\n\n## Acceptance Criteria ✅\n*   - [ ] Following Steps to Reproduce, the Actual Behavior no longer occurs.\n*   - [ ] Expected Behavior is observed.\n*   - [ ] (Optional) A regression test covering this scenario is added.\n```\n\n----------------------------------------\n\nTITLE: Initial Task Log Template in Markdown\nDESCRIPTION: Template for logging the initial task details in the project journal, including task ID and feature name.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/032-backend/django-developer/032-work-be-django-developer.mode.md#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Task Log: [TaskID] - Django Feature: [Feature Name]\\n\\n**Goal:** Implement [brief goal, e.g., user profile editing view].\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Animation Instance\nDESCRIPTION: Shows the basic structure for creating an animation instance that can be controlled with methods like play, pause, and restart.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/animejs-specialist-llms-context-20250406.md#2025-04-13_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nconst animation = animate(target, parameters);\n```\n\n----------------------------------------\n\nTITLE: Apple Silicon Binary Package Documentation\nDESCRIPTION: Markdown documentation for the Apple Silicon (ARM64) binary package of Tailwind CSS Oxide.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/tailwind-specialist-llms-context-20250406.md#2025-04-13_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n# `@tailwindcss/oxide-darwin-arm64`\n\nThis is the **aarch64-apple-darwin** binary for `@tailwindcss/oxide`\n```\n\n----------------------------------------\n\nTITLE: Documenting MUI v5+ Core Concepts and Implementation\nDESCRIPTION: Detailed markdown documentation covering Material UI's core concepts, installation, theming, styling approaches, component library, dark mode support, responsiveness, Next.js integration, accessibility considerations and performance optimization techniques\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/031-frontend/material-ui-specialist/031-work-fe-material-ui-specialist.mode.md#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Material UI (MUI) v5+ - Condensed Context Index\n\n### Overall Purpose\n\nMaterial UI (MUI) is a comprehensive suite of React UI components. It includes:\n*   **MUI Core:** Pre-built components following Material Design guidelines (`@mui/material`).\n*   **Joy UI:** A distinct design system with its own components and theming (`@mui/joy`).\n*   **MUI Base:** Unstyled (\"headless\") components and hooks for maximum customization (`@mui/base`).\nRelies heavily on Emotion for styling (`@emotion/react`, `@emotion/styled`).\n\n### Core Concepts & Capabilities\n\n*   **Installation & Setup:** Install packages (`@mui/material`, `@mui/joy`, `@mui/base`, `@emotion/*`) via npm/pnpm/yarn. Requires specific setup for frameworks like Next.js (`@mui/material-nextjs`, `@emotion/cache`).\n*   **Theming:** Highly customizable themes using `createTheme` (Material) or `extendTheme` (Joy). Define `palette` (colors, modes), `typography`, `breakpoints`, `components` (overrides/variants), custom tokens, and CSS variables (`cssVarPrefix`). Use `ThemeProvider` (Material) or `CssVarsProvider` (Joy).\n*   **Styling:** Multiple approaches:\n    *   `sx` prop: Inline styles with theme access, responsive values, pseudo-selectors.\n    *   `styled` API (Emotion): Create reusable styled components (CSS-in-JS).\n    *   Theme `components` object: Global style overrides (`styleOverrides`) and custom `variants`.\n    *   CSS Modules: Use with `clsx` for conditional classes, especially with MUI Base.\n    *   `ownerState`: Access component props/state within styling functions.\n*   **Component Library:** Rich set of pre-built components (e.g., `Button`, `TextField`, `Modal`, `Menu`, `Switch`, `Box`, `ButtonGroup`). MUI Base provides unstyled primitives and hooks (e.g., `useSwitch`).\n*   **Dark Mode:** Supported via theme `palette.mode` (Material) or `CssVarsProvider` / `InitColorSchemeScript` (Joy UI, SSR).\n*   **Responsiveness:** Built-in support via theme `breakpoints` and responsive syntax in `sx` prop. Requires `<meta name=\"viewport\">`. Container queries via `theme.containerQueries`.\n*   **Joy UI & MUI Core Integration:** Can be used together using separate theme providers (`ThemeProvider`, `JoyCssVarsProvider`).\n*   **Next.js Integration:** Specific packages (`@mui/material-nextjs`) and patterns (`ThemeRegistry`, `useServerInsertedHTML`, `InitColorSchemeScript`) for App Router compatibility, SSR, and styling.\n*   **Accessibility:** Components often include basic accessibility, but manual additions (e.g., `aria-*` for `Modal`) are sometimes needed. Collaborate with `accessibility-specialist` for complex cases.\n*   **Performance:** Tree-shaking via named imports is crucial. Hooks like `useOptionContextStabilizer` exist for specific scenarios. Collaborate with `performance-optimizer` for bottlenecks.\n\n### Key APIs / Components / Configuration / Patterns\n\n*   **Packages:** `@mui/material`, `@mui/joy`, `@mui/base`, `@emotion/react`, `@emotion/styled`, `@mui/material-nextjs`, `@emotion/cache`.\n*   **Theme Creation:** `createTheme` (@mui/material/styles), `extendTheme` (@mui/joy/styles).\n*   **Theme Providers:** `ThemeProvider` (@mui/material/styles), `CssVarsProvider` (@mui/joy/styles), `CssBaseline` (@mui/material/CssBaseline, @mui/joy/CssBaseline).\n*   **Theme Structure Keys:** `palette`, `components` (`styleOverrides`, `variants`), `breakpoints`, `typography`, `cssVariables` (`cssVarPrefix`).\n*   **Styling:** `sx` prop, `styled('element', { name, slot })`, `ownerState`.\n*   **Core Components:** `Button`, `ButtonGroup`, `Box`, `Typography`, `TextField`, `Modal`, `Menu`, `Switch` (Material & Base versions).\n*   **MUI Base Hooks:** `useSwitch`, `useOptionContextStabilizer`.\n*   **Next.js:** `InitColorSchemeScript` (@mui/joy/InitColorSchemeScript), `ThemeRegistry` (Pattern), `useServerInsertedHTML` (next/navigation).\n*   **Accessibility:** `aria-labelledby`, `aria-describedby` attributes.\n*   **Imports:** `import { Component } from '@mui/material';` (Supports tree-shaking).\n\n### Common Patterns & Best Practices / Pitfalls\n\n*   **Dependencies:** Emotion (`@emotion/react`, `@emotion/styled`) is fundamental for styling.\n*   **Tree-shaking:** Always use named imports (`import { Button } from ...`) to minimize bundle size.\n*   **Styling Choice:** Use `sx` for one-off styles, `styled` for reusable components, theme overrides for global consistency.\n*   **MUI Base:** Ideal for fully custom designs; requires manual styling (Emotion, Tailwind, CSS Modules).\n*   **Joy UI:** Use `CssVarsProvider` and `extendTheme`. Styles often leverage CSS variables.\n*   **Next.js:** Follow specific App Router setup (`ThemeRegistry`, `InitColorSchemeScript`) carefully to avoid SSR/hydration issues.\n*   **Responsiveness:** Configure `breakpoints` and use responsive syntax in `sx` or media queries in `styled`. Ensure `<meta name=\"viewport\">` is present.\n*   **Accessibility:** Add necessary `aria-*` attributes, especially for interactive components like `Modal`. Escalate complex issues.\n*   **Versioning/Migration:** Be aware of breaking changes between major versions. Consult migration guides when needed.\n```\n\n----------------------------------------\n\nTITLE: Asset Import in Vite\nDESCRIPTION: Examples of importing assets and web workers in Vite projects\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/condensed_indices/vite-specialist-condensed-index.md#2025-04-13_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport assetUrl from './asset.png'\nimport Worker from './script.js?worker'\n```\n\n----------------------------------------\n\nTITLE: Displaying Project Badges in HTML\nDESCRIPTION: HTML implementation for showing project status badges including build status, download statistics, version information, and license details using shields.io badges.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/tailwind-specialist-llms-context-20250406.md#2025-04-13_snippet_9\n\nLANGUAGE: HTML\nCODE:\n```\n<p align=\"center\">\n    <a href=\"https://github.com/tailwindlabs/tailwindcss/actions\"><img src=\"https://img.shields.io/github/actions/workflow/status/tailwindlabs/tailwindcss/ci.yml?branch=next\" alt=\"Build Status\"></a>\n    <a href=\"https://www.npmjs.com/package/tailwindcss\"><img src=\"https://img.shields.io/npm/dt/tailwindcss.svg\" alt=\"Total Downloads\"></a>\n    <a href=\"https://github.com/tailwindcss/tailwindcss/releases\"><img src=\"https://img.shields.io/npm/v/tailwindcss.svg\" alt=\"Latest Release\"></a>\n    <a href=\"https://github.com/tailwindcss/tailwindcss/blob/master/LICENSE\"><img src=\"https://img.shields.io/npm/l/tailwindcss.svg\" alt=\"License\"></a>\n</p>\n```\n\n----------------------------------------\n\nTITLE: Converting XML to JSON Structure in ask_followup_question\nDESCRIPTION: Shows the JSON structure used to transform XML-formatted questions and suggestions into a standardized format for UI display. This enables the presentation of interactive question elements with selectable suggestion buttons.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/knowledge/ask_followup_question.md#2025-04-13_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  question: \"User's question here\",\n  suggest: [\n    { answer: \"Suggestion 1\" },\n    { answer: \"Suggestion 2\" }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Example Project Context Summary Format in Markdown\nDESCRIPTION: Demonstrates the expected format for project context summaries, showing how to structure information with emoji indicators and source references.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/040-assistant/context-resolver/040-asst-context-resolver.mode.md#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n**Project Context Summary (re: Task FE-003 Login Form):**\n*   🎯 **Goal:** Implement user login functionality (from requirements.md).\n*   📄 **Task Log (`tasks/FE-003.md`):** Status ✅ Complete. Summary: Implemented component, connected to API. Refs: `src/components/LoginForm.tsx`.\n*   💡 **Relevant Decisions:** None found in `decisions/` related to login flow.\n*   🧱 **Blockers:** None noted in task log.\n*   *(Note: Planning document 'project_plan.md' could not be read.)*\n```\n\n----------------------------------------\n\nTITLE: Vite Module Glob Import\nDESCRIPTION: Vite-specific function for importing multiple files matching a pattern\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/condensed_indices/vite-specialist-condensed-index.md#2025-04-13_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport.meta.glob('./*.js')\n```\n\n----------------------------------------\n\nTITLE: MDTM CPM Task Template Definition in Markdown\nDESCRIPTION: Template for creating task definitions using YAML frontmatter and markdown sections. Includes core CPM data, status tracking, context fields, and calculated fields. Features structured sections for task description, assumptions, and resource requirements.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/knowledge/project-management/critical-path-method/README.md#2025-04-13_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n---\n# 🆔 Task Identification & Core CPM Data\nid:             # << UNIQUE_PROJECT_WIDE_ID >>\ntitle:          # << Clear Task Name >>\nduration:       # << Numeric Duration Estimate >>\nduration_unit:  # << e.g., \"days\" (Be Consistent!) >>\ndepends_on:     # << List of prerequisite task 'id's, e.g., [\"T001\", \"T005\"] or [] >>\n\n# 📊 Status & Progress Tracking\nstatus:         \"⚪ Not Started\"\n# percent_complete: 0\n# start_date:\n# finish_date:\n\n# 🧑‍💻 Context & Assignment\nwbs_id:         # << WBS Identifier (e.g., \"1.2.3\") >>\n# assigned_to:\n# related_docs:\ntags:           []\n\n# ⚠️ Calculated Fields (DO NOT MANUALLY FILL)\n# critical_path_member:\n# total_float:\n# early_start:\n# early_finish:\n# late_start:\n# late_finish:\n---\n\n# << Task Title >>\n\n## Description / Objective 🏗️\n(Define the work to be done for this task)\n\n## Assumptions / Constraints 🧐\n*   (Assumption: Resource X is available)\n*   (Constraint: Must use library Y)\n\n## Resources Needed 🛠️\n*   (e.g., Senior Developer, Test Environment A)\n```\n\n----------------------------------------\n\nTITLE: Defining Hierarchical Mode Structure in Markdown\nDESCRIPTION: Structured representation of the v7 hierarchy levels including executive, director, lead, worker, and assistant classifications with their corresponding numeric codes and responsibilities\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/templates/mode_classification_guide.md#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* **`000-executive`**: Top-level strategy & coordination.\n* **`010-director`**: Manages project phases, architecture, lifecycle.\n* **`020-lead`**: Manages a specific technical department/domain.\n* **`03x-worker`**: Executes tasks within a department/domain.\n* **`040-assistant`**: Provides focused support/utility functions.\n```\n\n----------------------------------------\n\nTITLE: Initializing Task Log in Markdown\nDESCRIPTION: Example structure for initializing a task log file when starting a Second Opinion task. It establishes the basic template with task ID and artifact path information.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/039-cross-functional/second-opinion/039-work-xf-second-opinion.mode.md#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```markdown\n# Task Log: [TaskID] - Second Opinion: [Topic]\n\n**Goal:** Provide second opinion on artifact `[artifact_path]`.\n```\n```\n\n----------------------------------------\n\nTITLE: CPM Data Management Workflow Process\nDESCRIPTION: Detailed workflow steps for managing and calculating CPM data using the MDTM system, including planning, estimation, calculation, and tracking processes.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/knowledge/project-management/critical-path-method/implementing.md#2025-04-13_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n## 8. 🔄 Workflow: Data Management & Calculation Cycle\n\n1.  **Plan & Define:** Create all task `.md` files, assigning unique `id`s and placing them in the WBS structure.\n2.  **Estimate & Link:** Fill in realistic `duration` estimates (and consistent `duration_unit`). Carefully define the `depends_on` lists using the correct predecessor `id`s.\n3.  **Commit:** Save all task data to Git. This is your baseline schedule input.\n4.  **Calculate 📊:** Feed the data (all `.md` files) into your chosen external CPM tool/script. This tool parses the `id`, `duration`, `depends_on` fields.\n5.  **Analyze Results:** The external tool outputs the critical path, task floats, ES/EF/LS/LF dates. Review this schedule information.\n6.  **Execute & Track:** As the project progresses, update the `status`, `percent_complete`, `start_date_actual`, `finish_date_actual` fields in the MDTM files. Commit these updates.\n7.  **Update & Re-Calculate:** If task durations are re-estimated, dependencies change, or actual progress deviates significantly, update the relevant `.md` files (duration, dependencies, status). **You must then re-run the external CPM calculation** to see the impact on the schedule.\n```\n\n----------------------------------------\n\nTITLE: Basic ESQL Query Structure Examples\nDESCRIPTION: Demonstrates the basic structure of an ESQL query with a source command and optional processing commands separated by pipe characters.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/elasticsearch-specialist-llms-context-20250406.md#2025-04-13_snippet_24\n\nLANGUAGE: esql\nCODE:\n```\nsource-command\n| processing-command1\n| processing-command2\n```\n\nLANGUAGE: esql\nCODE:\n```\nsource-command | processing-command1 | processing-command2\n```\n\n----------------------------------------\n\nTITLE: Initializing Git Repository\nDESCRIPTION: Initializes a new Git repository in the current directory using the git init command.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/010-director/project-onboarding/010-dir-project-onboarding.mode.md#2025-04-13_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit init\n```\n\n----------------------------------------\n\nTITLE: Task Status Checklist Format\nDESCRIPTION: Markdown format for tracking task status using checklist items with status indicators\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/000-executive/roo-commander/000-exec-roo-commander.mode.md#2025-04-13_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n- [⏳] Step...\n📣 [Reporting Point]\n🧱 [Blocker]\n❌ [Failure]\n```\n\n----------------------------------------\n\nTITLE: Final Task Log Template in Markdown\nDESCRIPTION: Template for completing a task log with status, outcome, summary, and references to modified or created files.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/031-frontend/accessibility-specialist/031-work-fe-accessibility-specialist.mode.md#2025-04-13_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n---\\n**Status:** ✅ Complete\\n**Outcome:** Success - Audit Complete & Fixes Applied\\n**Summary:** Completed audit of [UI area]. Fixed [N] issues (e.g., WCAG 1.4.3 contrast, WCAG 4.1.2 ARIA labels). [M] issues remain or were escalated.\\n**References:** [`src/components/Component.tsx` (modified), `project_journal/formal_docs/a11y_report_[date].md` (created), `project_journal/tasks/[EscalatedTaskID].md` (escalated)]\n```\n\n----------------------------------------\n\nTITLE: Implementing Directory Structure for MDTM\nDESCRIPTION: Defines the core directory structure for organizing Product Backlog Items (PBIs) by features and areas, including templates and archive folders\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/knowledge/project-management/scrum/implementing.md#2025-04-13_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nPROJECT_ROOT/\n├── src/                     # Source Code (Where the Increment lives)\n├── docs/                    # Supporting Docs (DoD, Personas, Architecture)\n│   └── DefinitionOfDone.md  # 👈 IMPORTANT: Team's DoD\n├── tasks/                   # 👈 **Main MDTM Directory for Scrum Artifacts**\n│   ├── _templates/          # 📄 PBI Templates (Essential for consistency)\n│   │   ├── 📖_user_story.md\n│   │   ├── 🐞_bug.md\n│   │   ├── 🛠️_task.md        # (Often used for Sprint Backlog breakdown)\n│   │   └── 💡_spike.md\n│   │\n│   ├── BACKLOG/             # 📥 Optional: Unrefined/Unprioritized PBIs\n│   │   └── IDEA_future_widget.md\n│   │\n│   ├── FEATURE_authentication/  # 🔑 Product Backlog Area: Authentication\n│   │   ├── _overview.md       # 🗺️ Optional: Epic Definition for this Feature\n│   │   ├── 001_📖_user_login_story.md     # PBI: User Story\n│   │   ├── 002_🐞_login_error_bug.md      # PBI: Bug\n│   │   └── 003_📖_password_reset_story.md # PBI: User Story\n│   │\n│   ├── FEATURE_reporting/     # 📊 Product Backlog Area: Reporting\n│   │   ├── _overview.md\n│   │   └── 004_📖_view_sales_report_story.md\n│   │\n│   └── AREA_infrastructure/   # 🏗️ Product Backlog Area: Non-Feature Work\n│       └── 005_🛠️_upgrade_database_task.md # PBI: Technical Task\n│\n├── archive/                 # 📦 Optional: PBIs completed in previous Sprints\n│   └── Sprint_5/            # Optional: Sub-archive by Sprint\n│       └── ...\n└── README.md\n```\n\n----------------------------------------\n\nTITLE: Proposed Changes to Formal Document Maintenance Instructions in Diff\nDESCRIPTION: The proposed changes to the Formal Document Maintenance section, shown in diff format. It introduces separate guidance for creating new documents and updating existing ones, emphasizing the appropriate use of different tools.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v6.0/changes/roo-commander-tool-usage-refinement.md#2025-04-13_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n **Formal Document Maintenance:**\n - **Responsibility:** Oversee high-level docs in `project_journal/planning/` or `project_journal/formal_docs/`.\n+- **Guidance (Create):** Create *new* formal documents using `write_to_file`.\n+- **Guidance (Update):** For *updates* to existing formal documents, prefer delegating the update task to a relevant specialist (e.g., `technical-writer`). If direct, minor modifications are necessary, consider using `apply_diff` or `insert_content` for targeted changes. **Avoid using `write_to_file` to update large existing documents.**\n- **Guidance:** Save/update these documents using `write_to_file`.\n\n```\n\n----------------------------------------\n\nTITLE: TypeScript Configuration File Reference\nDESCRIPTION: Reference to the TypeScript configuration file that the specialist handles\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v6.3/improvements/typescript-specialist-improvements.md#2025-04-13_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\ntsconfig.json\n```\n\n----------------------------------------\n\nTITLE: Markdown Project Requirements Structure\nDESCRIPTION: Example of how project requirements are structured in markdown format within the requirements.md file.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v4.5/workflow_examples.md#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Project Requirements: my-portfolio\n...\n```\n\n----------------------------------------\n\nTITLE: Creating Function with Custom Timeout in PostgreSQL\nDESCRIPTION: Defines a function 'myfunc' with a custom statement timeout of 4 seconds. This approach allows setting timeouts for specific functions, useful for recurring functions that need special runtime exemptions.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/supabase-developer-llms-context-20250406.md#2025-04-13_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ncreate or replace function myfunc()\nreturns void as $$\n select pg_sleep(3); -- simulating some long-running process\n$$\nlanguage sql\nset statement_timeout TO '4s'; -- set custom timeout\n```\n\n----------------------------------------\n\nTITLE: Feature Template for Kanban MDTM in Markdown\nDESCRIPTION: Template for creating feature work items in MDTM with YAML frontmatter and structured sections for description, acceptance criteria, and notes.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/knowledge/project-management/kanban/README.md#2025-04-13_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n---\nid:             # ITEM-NNN\ntitle:          # ✨ Feature: Concise description of value\nstatus:         \"📥 Input Queue\" # Or initial analysis state\ntype:           \"✨ Feature\"\npriority:       \"▶️ Medium\"\n# blocked:        false\n# blocked_reason:\ncreated_date:   # YYYY-MM-DD\nupdated_date:   # YYYY-MM-DD HH:MM:SS\n# assigned_to:\nparent_area:    # Path to AREA/_overview.md\nrelated_docs:   [\"docs/WorkflowPolicies.md\"]\ntags:           []\n---\n\n# << Feature Title >>\n\n## Description ✨\n(Explain the feature, the user value, link to designs/epics)\n\n## Acceptance Criteria ✅\n*   - [ ] Criterion 1 for the feature to be considered done.\n*   - [ ] Criterion 2...\n\n## Notes / Impediments 🚧\n(Add notes or blocker details here)\n```\n\n----------------------------------------\n\nTITLE: Example Roo Mode Bundling Script Execution\nDESCRIPTION: Specific example of running the bundling script with defined paths for source modes, collections file, and output directory.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v6.4/tools/bundle_modes_collections_sop.md#2025-04-13_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnode bundle_modes_collections_with_core.js --source v6.3/modes --collections dev_tools/mode_collections_wrapped.json --outputBaseDir v6.4/modes\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Switch Component with Styling Hooks in React\nDESCRIPTION: This snippet demonstrates the creation of a custom Switch component using Material UI's styling hooks. It utilizes the useSwitch hook to manage state and applies dynamic classes based on the component's state.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/material-ui-specialist-llms-context-20250406.md#2025-04-13_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function StylingHooks() {\n  const { getInputProps, checked, disabled, focusVisible } = useSwitch();\n\n  const stateClasses = {\n    'Switch-checked': checked,\n    'Switch-disabled': disabled,\n    'Switch-focusVisible': focusVisible,\n  };\n\n  return (\n    <BasicSwitch className={Object.entries(stateClasses)\n      .filter(([, v]) => v)\n      .map(([cls]) => cls)\n      .join(' ')}>\n      <Thumb />\n      <input {...getInputProps()} aria-hidden={true} />\n    </BasicSwitch>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Initial Task Log Template in Markdown\nDESCRIPTION: Template for creating the initial task log entry when starting an integration testing task. Includes task ID and goal description.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/034-qa/integration-tester/034-work-qa-integration-tester.mode.md#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Task Log: [TaskID] - Integration Testing\n\n**Goal:** Test integration between [e.g., User Service and Auth API].\n```\n\n----------------------------------------\n\nTITLE: Signal Effects Implementation\nDESCRIPTION: Shows how to implement effects that react to signal changes in Angular components.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/angular-developer-llms-context-20250406.md#2025-04-13_snippet_42\n\nLANGUAGE: typescript\nCODE:\n```\neffect(() => {\n  console.log(`The current count is: ${count()}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Complete Bootstrap HTML Template\nDESCRIPTION: Basic HTML template with Bootstrap integration including viewport meta tag and CDN links.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/bootstrap-specialist-llms-context-20250406.md#2025-04-13_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n    <title>Bootstrap demo</title>\n    <link href=\"{{< param \"cdn.css\" >}}\" rel=\"stylesheet\" integrity=\"{{< param \"cdn.css_hash\" >}}\" crossorigin=\"anonymous\">\n  </head>\n  <body>\n    <h1>Hello, world!</h1>\n    <script src=\"{{< param \"cdn.js_bundle\" >}}\" integrity=\"{{< param \"cdn.js_bundle_hash\" >}}\" crossorigin=\"anonymous\"></script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Resolving Bare Module Imports in JavaScript\nDESCRIPTION: Vite detects and resolves bare module imports in source files, converting them to valid URLs that the browser can import.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/vite-specialist-llms-context-20250406.md#2025-04-13_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport { someMethod } from 'my-dep'\n```\n\n----------------------------------------\n\nTITLE: Information Gathering Tool Chain\nDESCRIPTION: Common pattern for gathering information using multiple tools in sequence.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/knowledge/tool_use_overview.md#2025-04-13_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n[ask_followup_question](/features/tools/ask-followup-question) → [read_file](/features/tools/read-file) → [search_files](/features/tools/search-files)\n```\n\n----------------------------------------\n\nTITLE: React SPA Project Request Example\nDESCRIPTION: Example prompt for requesting a React-based Single Page Application with API integration through the Roo Commander.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v3.0/User-Guide-v3.md#2025-04-13_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nCreate an interactive Single Page Application (SPA) using React. It needs to fetch user data from `https://api.example.com/users` and display a list of user profiles with their names and emails. Include a simple search bar to filter users by name.\n```\n\n----------------------------------------\n\nTITLE: Improvement Chore Template for Markdown Task Management\nDESCRIPTION: Template for creating improvement/chore tasks with fields for tracking waste reduction and measuring success metrics.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/knowledge/project-management/lean-principles/implementing.md#2025-04-13_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n---\nid:             # ITEM-NNN\ntitle:          # 🧹 Chore: Improve X / Eliminate Waste Y\nstatus:         \"📥 Intake\" # Initial state\ntype:           \"🧹 Chore\"\npriority:       \"▶️ Medium\"\n# value_score:    # Value is often internal (efficiency, quality, reduced risk)\ncreated_date:   # YYYY-MM-DD\nupdated_date:   # YYYY-MM-DD HH:MM:SS\n# completion_date:\n# assigned_to:    # Often the team or specific role\nparent_value_stream: # Related stream? Or \"Process\"\nrelated_docs:   [\"docs/WorkflowPolicies.md\"]\ntags:           [\"improvement\", \"kaizen\", \"waste reduction\"]\n---\n\n# << Improvement Chore Title >>\n\n## Improvement Goal / Waste Addressed 🎯\n(Describe the problem/waste (e.g., long wait times in 'Ready for Verify', high defect rate from feature X). State the specific improvement hypothesis/goal.)\n\n## Proposed Action(s) ✅\n*   - [ ] Action 1 needed to implement the change.\n*   - [ ] Action 2...\n\n## How to Measure Success? 📊\n(Define metrics to track, e.g., \"Reduce average time in 'Ready for Verify' status by 20%\", \"Decrease bug count related to feature X in next release\").\n\n## Notes / Blockers 🚧\n(Progress, findings, impediments)\n```\n\n----------------------------------------\n\nTITLE: Django Project Detection Files\nDESCRIPTION: Key files used for automatically detecting Django projects in the codebase\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v6.3/improvements/django-developer-improvements.md#2025-04-13_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nmanage.py, settings.py, requirements.txt with Django\n```\n\n----------------------------------------\n\nTITLE: Running Bundle Script with Custom Output Location in Bash\nDESCRIPTION: Executes the bundle_modes.js script with custom output directory and filename settings, useful for versioning. This creates a specific version bundle in a dedicated directory.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/dev_tools/bundle_modes_sop.md#2025-04-13_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnode dev_tools/bundle_modes.js --outputDir v5.0 --outputFile roo_commander_modes_v5.0.json\n```\n\n----------------------------------------\n\nTITLE: Markdown Template for Mode Documentation\nDESCRIPTION: A comprehensive markdown template that defines the structure for documenting operational modes. Includes sections for mode description, capabilities, workflow steps, role definitions, custom instructions, and metadata.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/templates/mode_template.md#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Mode: [Mode Name] (`[mode_slug]`)\n\n## Description\n[Description from corresponding description-capabilities-workflow JSON]\n\n## Capabilities\n*   [Capability 1 from corresponding description-capabilities-workflow JSON]\n*   [Capability 2 from corresponding description-capabilities-workflow JSON]\n*   ...\n\n## Workflow\n1.  [Workflow Step 1 from corresponding description-capabilities-workflow JSON]\n2.  [Workflow Step 2 from corresponding description-capabilities-workflow JSON]\n3.  ...\n\n---\n\n## Role Definition\n[roleDefinition from main mode JSON]\n\n---\n\n## Custom Instructions\n\n### 1. General Operational Principles\n[Extract relevant section from customInstructions]\n\n### 2. Workflow / Operational Steps\n[Extract relevant section from customInstructions]\n\n### 3. Collaboration & Delegation/Escalation\n[Extract relevant section from customInstructions]\n\n### 4. Key Considerations / Safety Protocols\n[Extract relevant section from customInstructions]\n\n### 5. Error Handling\n[Extract relevant section from customInstructions]\n\n### 6. Context / Knowledge Base (Optional)\n[Extract relevant section from customInstructions, if present]\n\n---\n\n## Metadata\n\n**Level:** [level from main mode JSON]\n\n**Tool Groups:**\n- read\n- edit\n- browser\n- command\n- mcp\n\n**Tags:**\n- [tag1 from main mode JSON]\n- [tag2 from main mode JSON]\n- ...\n\n**Categories:**\n*   [category1 from main mode JSON]\n*   [category2 from main mode JSON]\n*   ...\n\n**Stack:**\n*   [stack item 1 from main mode JSON]\n*   [stack item 2 from main mode JSON]\n*   ...\n\n**Delegates To:**\n*   `[delegatesTo mode slug 1 from main mode JSON]`\n*   `[delegatesTo mode slug 2 from main mode JSON]`\n*   ...\n\n**Escalates To:**\n*   `[escalatesTo mode slug 1 from main mode JSON]`\n*   ...\n\n**Reports To:**\n*   `[reportsTo mode slug 1 from main mode JSON]`\n*   ...\n\n**API Configuration:**\n- model: [model from apiConfiguration]\n```\n\n----------------------------------------\n\nTITLE: Creating Final Task Log Summary in Markdown\nDESCRIPTION: Template for documenting the final status and outcome of bug resolution, including fix details, root cause, and verification results.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/039-cross-functional/bug-fixer/039-work-xf-bug-fixer.mode.md#2025-04-13_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n---\n**Status:** ✅ Complete\n**Outcome:** Success\n**Summary:** Fixed null pointer exception in `src/services/AuthService.php` (Bug #123) by adding a null check.\n**Root Cause:** The `user` object could be null under specific conditions, which wasn't handled.\n**References:** [`src/services/AuthService.php` (modified), `tests/Unit/AuthServiceTest.php` (created)]\n**Verification:** Regression test passed. Full unit test suite passed.\n```\n\n----------------------------------------\n\nTITLE: Initializing Task Log Entry in Markdown\nDESCRIPTION: Example of markdown structure for initializing a task log when beginning the condensed context index generation process. The log captures the task ID, technology name, and source paths.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/040-assistant/context-condenser/040-asst-context-condenser.mode.md#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Task Log: [TaskID] - Condense Context: [tech_name]\\n\\n**Goal:** Generate Condensed Context Index for [tech_name] from [source_paths] and save to [index_output_path].\\n\n```\n\n----------------------------------------\n\nTITLE: MongoDB Transaction Management\nDESCRIPTION: Implementation of ACID transactions for multi-document operations.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/condensed_indices/mongodb-specialist-condensed-index.md#2025-04-13_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nsession.withTransaction(async () => { ... })\n```\n\n----------------------------------------\n\nTITLE: Creating Initial Task Log in Markdown\nDESCRIPTION: Template for initializing a new task log file with basic structure including goal definition.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/035-devops/infrastructure-specialist/035-work-do-infrastructure-specialist.mode.md#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Task Log: [TaskID] - Infrastructure Setup\n\n**Goal:** [e.g., Provision staging environment resources on AWS using Terraform based on Stack Profile and requirements doc].\n```\n\n----------------------------------------\n\nTITLE: Defining Mode Structure in JSON for Roo Hierarchical Mode System\nDESCRIPTION: This JSON structure defines a mode in the Roo Hierarchical Mode System. It includes fields for identification, role definition, custom instructions, group categorization, and file permissions. The structure allows for detailed configuration of AI agent behaviors and responsibilities within the system hierarchy.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v4.5/ROO_MODE_SYSTEM.md#2025-04-13_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"slug\": \"unique-mode-identifier\",\n  \"name\": \"User-Friendly Mode Name\",\n  \"roleDefinition\": \"Detailed description of the mode's purpose, expertise, and responsibilities.\",\n  \"customInstructions\": [\n    {\n      \"title\": \"Core Workflow\",\n      \"content\": \"Step-by-step guidance on how this mode should operate...\"\n    },\n    {\n      \"title\": \"Collaboration Points\",\n      \"content\": \"Instructions on how to interact with other modes (Managers, Specialists)...\"\n    },\n    {\n      \"title\": \"Key Knowledge/Patterns\",\n      \"content\": \"Specific code patterns, API usage, best practices...\"\n    }\n  ],\n  \"groups\": [\"specialist\", \"frontend\"],\n  \"fileRegex\": [\n    \"\\\\.js$\",\n    \"\\\\.jsx$\",\n    \"\\\\.css$\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Task Log Template for Flask Projects\nDESCRIPTION: Markdown template for creating initial task log entries when starting Flask development tasks. Includes goal specification and task structure.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/032-backend/flask-developer/032-work-be-flask-developer.mode.md#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Task Log: [TaskID] - Flask Feature: [Brief Description]\n\n**Goal:** Implement [brief goal, e.g., '/profile' route showing user data].\n```\n\n----------------------------------------\n\nTITLE: Querying Encrypted Documents in Java\nDESCRIPTION: Shows the structure for querying documents with encrypted fields in Java, specifically for use with automatic Queryable Encryption functionality.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/mongodb-specialist-llms-context-20250406.md#2025-04-13_snippet_23\n\nLANGUAGE: java\nCODE:\n```\nstart-find\\nend-find\n```\n\n----------------------------------------\n\nTITLE: Creating User Story Template in Markdown\nDESCRIPTION: A comprehensive template for user stories, including YAML frontmatter for metadata and structured sections for the story description, acceptance criteria, and notes.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/knowledge/project-management/agile-principles/README.md#2025-04-13_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n---\n# 🆔 Task Identification & Core Metadata\nid:             # << GENERATE_UNIQUE_ID (e.g., STORY-NNN) >>\ntitle:          # << As a [User], I want [Action], so that [Benefit] >>\nstatus:         \"🟡 Backlog\"\ntype:           \"📖 User Story\"\n\n# 🏆 Prioritization & Value\npriority:       \"▶️ Medium\"\n# value_score:    # Optional\n\n# ⏳ Effort & Iteration Tracking\nestimated_effort: # << Story Points / T-Shirt Size >>\n# iteration:      # Optional\n\n# 🧑‍💻 Assignment & Collaboration\n# assigned_to:\nreporter:       # << Who requested/identified? >>\n\n# 🔗 Relationships & Context\nparent_feature: # << Path to FEATURE/_overview.md >>\n# depends_on:     []\nrelated_docs:   [] # Links to Personas, Mockups\ntags:           [] # << Keywords >>\n---\n\n# << As a [User], I want [Action], so that [Benefit] >>\n\n## User Story 📖\n\n> As a **[Type of User, e.g., Registered User]**,\n> I want **[To perform some action, e.g., to log in using my email and password]**,\n> So that **[I can achieve some goal/benefit, e.g., I can access my personalized dashboard]**.\n\n## Description / Notes 💬\n(Optional: Add context, assumptions, technical notes, links to designs)\n\n## Acceptance Criteria ✅\n*   - [ ] Given I am on the login page\n    When I enter my valid email and password\n    And click 'Login'\n    Then I am redirected to my dashboard page.\n*   - [ ] Given I am on the login page\n    When I enter an invalid email or password\n    And click 'Login'\n    Then I see an error message \"Invalid credentials\".\n*   - [ ] Login button is disabled if email or password fields are empty.\n*   - [ ] Password field masks input characters.\n```\n\n----------------------------------------\n\nTITLE: Initial Performance Task Log Template in Markdown\nDESCRIPTION: A template for creating an initial task log when starting a performance optimization task. Includes fields for goal definition, context references, and task identification.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/039-cross-functional/performance-optimizer/039-work-xf-performance-optimizer.mode.md#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```markdown\n# Task Log: [TaskID] - Performance Optimization\n\n**Goal:** Investigate [e.g., slow API response for /products endpoint]. Target: [SLO/Goal].\n**Context:** [Link to monitoring data, relevant code areas]\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Percolator Field Mapping in Elasticsearch\nDESCRIPTION: Example showing how to configure a percolator field type in an Elasticsearch index mapping.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/elasticsearch-specialist-llms-context-20250406.md#2025-04-13_snippet_26\n\nLANGUAGE: console\nCODE:\n```\nPUT my-index-000001\n{\n  \"mappings\": {\n    \"properties\": {\n      \"query\": {\n        \"type\": \"percolator\"\n      },\n      \"field\": {\n        \"type\": \"text\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Logging E2E Test Completion in Markdown\nDESCRIPTION: Appends a final status summary to the task log, including outcome, execution summary, and references to relevant files.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/034-qa/e2e-tester/034-work-qa-e2e-tester.mode.md#2025-04-13_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n---\n**Status:** ✅ Complete\n**Outcome:** Failed - Some Tests Failed\n**Summary:** Executed login E2E tests: 5 run, 4 passed, 1 failed. Escalated failure to `bug-fixer` (Task #XYZ).\n**References:** [`cypress/e2e/login.cy.js` (modified), `project_journal/tasks/[TaskID].md` (log)]\n```\n\n----------------------------------------\n\nTITLE: Creating a Dynamic Route in Next.js\nDESCRIPTION: Define a dynamic route segment using square brackets in the file name. This allows for parameterized routes.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/031-frontend/nextjs-developer/031-work-fe-nextjs-developer.mode.md#2025-04-13_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// app/[slug]/page.tsx\nexport default function Page({ params }) {\n  return <h1>Post: {params.slug}</h1>\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest Test Engineer Custom Mode for Roo Code\nDESCRIPTION: A JSON configuration for a Jest Test Engineer custom mode in Roo Code. This mode specializes in writing and maintaining Jest test suites with TypeScript support, focusing on TDD practices with built-in best practices for test organization and TypeScript-aware test writing. It includes restricted access to test-related files only.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/knowledge/community_mode_ideas.md#2025-04-13_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"slug\": \"jest-test-engineer\",\n  \"name\": \"Jest Test Engineer\",\n  \"roleDefinition\": \"You are Roo, a Jest testing specialist with deep expertise in:\\n- Writing and maintaining Jest test suites\\n- Test-driven development (TDD) practices\\n- Mocking and stubbing with Jest\\n- Integration testing strategies\\n- TypeScript testing patterns\\n- Code coverage analysis\\n- Test performance optimization\\n\\nYour focus is on maintaining high test quality and coverage across the codebase, working primarily with:\\n- Test files in __tests__ directories\\n- Mock implementations in __mocks__\\n- Test utilities and helpers\\n- Jest configuration and setup\\n\\nYou ensure tests are:\\n- Well-structured and maintainable\\n- Following Jest best practices\\n- Properly typed with TypeScript\\n- Providing meaningful coverage\\n- Using appropriate mocking strategies\",\n  \"groups\": [\n    \"read\",\n    \"browser\",\n    \"command\",\n    [\"edit\", {\n      \"fileRegex\": \"(__tests__/.*|__mocks__/.*|\\\\.test\\\\.(ts|tsx|js|jsx)$|/test/.*|jest\\\\.config\\\\.(js|ts)$)\",\n      \"description\": \"Test files, mocks, and Jest configuration\"\n    }]\n  ],\n  \"customInstructions\": \"When writing tests:\\n- Always use describe/it blocks for clear test organization\\n- Include meaningful test descriptions\\n- Use beforeEach/afterEach for proper test isolation\\n- Implement proper error cases\\n- Add JSDoc comments for complex test scenarios\\n- Ensure mocks are properly typed\\n- Verify both positive and negative test cases\"\n}\n```\n\n----------------------------------------\n\nTITLE: Asset Loader Configuration\nDESCRIPTION: Configuration of DRACOLoader and KTX2Loader for handling compressed geometries and textures.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/031-frontend/threejs-specialist/031-work-fe-threejs-specialist.mode.md#2025-04-13_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nnew DRACOLoader();\nnew KTX2Loader();\n```\n\n----------------------------------------\n\nTITLE: Creating Core Journal Structure with mkdir Command\nDESCRIPTION: Uses the mkdir command to create a structured set of directories for project documentation and management.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/010-director/project-onboarding/010-dir-project-onboarding.mode.md#2025-04-13_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p \"project_journal/tasks\" \"project_journal/decisions\" \"project_journal/formal_docs\" \"project_journal/visualizations\" \"project_journal/planning\" \"project_journal/technical_notes\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Clerk Middleware in Next.js\nDESCRIPTION: Example of configuring Clerk middleware in Next.js to handle authentication state and route protection using matcher patterns\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/condensed_indices/clerk-auth-specialist-condensed-index.md#2025-04-13_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default clerkMiddleware({\n  matcher: [\"/((?!.+\\.[\\w]+$|_next).*)\", \"/\", \"/(api|trpc)(.*)\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Value Item Template for Markdown Task Management\nDESCRIPTION: Template for creating value item tasks with fields for ID, status, priority, dates, and structured sections for description, acceptance criteria, and notes.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/knowledge/project-management/lean-principles/implementing.md#2025-04-13_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n---\nid:             # ITEM-NNN\ntitle:          # ✨ Concise statement of Value/Feature\nstatus:         \"📥 Intake\" # Initial state\ntype:           \"✨ Value Item\"\npriority:       \"▶️ Medium\"\n# value_score:\n# cost_of_delay:\ncreated_date:   # YYYY-MM-DD\nupdated_date:   # YYYY-MM-DD HH:MM:SS\n# completion_date:\n# cycle_time_start_date:\n# assigned_to:\nparent_value_stream: # Path to VALUE_STREAM/_overview.md\nrelated_docs:   [\"docs/WorkflowPolicies.md\"]\ntags:           []\n---\n\n# << Value Item Title >>\n\n## Description ✨\n(Explain the *Why*. Use \"As a...\" or focus on Problem/Solution/Benefit)\n\n## Acceptance Criteria ✅\n*   - [ ] Criterion 1 (Verifies value delivered)\n*   - [ ] Criterion 2...\n\n## Out of Scope ❌\n*   (Optional: Specify related things NOT included)\n\n## Notes / Blockers 🚧\n(Updates, decisions, impediments)\n```\n\n----------------------------------------\n\nTITLE: Initializing Project Management Log in Markdown\nDESCRIPTION: Example of initial content for a Project Management log file. It includes the task ID, goal, context references, and link to MDTM documentation.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/010-director/project-manager/010-dir-project-manager.mode.md#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Task Log: [PM_TaskID] - Project Management (MDTM)\n\n**Goal:** [e.g., Manage Feature X development using MDTM].\n**Context:** [Link to Requirements, Stack Profile, Commander Task ID]\n**MDTM Docs:** [`project_journal/knowledge/project-management/markdown-driven-task-management-MDTM/markdown-driven-task-management-MDTM-feature-structure/README.md`].\n```\n\n----------------------------------------\n\nTITLE: Initiating Website Project Request Format\nDESCRIPTION: Generic prompt structure for initiating a new website project with the Roo Commander mode. Shows the basic format for describing project goals and requirements.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v3.0/User-Guide-v3.md#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nCreate/Modify a website for [purpose/domain]. Key goals are [goal 1], [goal 2]. [Add any other high-level context like target audience or essential features].\n```\n\n----------------------------------------\n\nTITLE: Modifying Coordinate & Decide Step in Roo Commander\nDESCRIPTION: Proposed changes to the 'Coordinate & Decide' step in Roo Commander's customInstructions. It adds logic for handling interruptions in MDTM tasks and enhances the decision-making process.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v6.0/changes/roo-commander-mdtm-delegation-integration.md#2025-04-13_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n 10. **Coordinate & Decide:** Manage dependencies. Handle blockers (🧱) or failures (❌):\n     *   **Analyze:** Review specialist's `attempt_completion` message or relevant task log (`read_file` for MDTM task files). Use `context-resolver` if needed.\n     *   **Decide:** Determine next steps (retry, alternative approach, report to user). **Guidance:** Log decision using `write_to_file` to `project_journal/decisions/...`.\n+    *   **Handle Interruption (MDTM):** If a delegated MDTM task seems interrupted (no completion received), use `read_file` on the specific `project_journal/tasks/TASK-[MODE]-....md` file to check the checklist status *before* re-delegating. Re-delegate using `new_task` pointing to the *existing* task file.\n     *   **Delegate Analysis:** If needed, delegate analysis to `complex-problem-solver`.\n     *   **Diagrams:** Request diagram updates (`diagramer`) for major changes.\n     *   **Guidance (Log Coordination):** Log coordination actions in own task log using `insert_content`.\n```\n\n----------------------------------------\n\nTITLE: Initial Task Log Template in Markdown\nDESCRIPTION: Template for creating initial task log entries when starting containerization work, including goal documentation.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/035-devops/docker-compose-specialist/035-work-do-docker-compose-specialist.mode.md#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Task Log: [TaskID] - Containerization\n\n**Goal:** [e.g., Create Dockerfile for frontend app based on Stack Profile].\n```\n\n----------------------------------------\n\nTITLE: Importing anime.js Core Components\nDESCRIPTION: The main import statement for anime.js that brings in all core functionality including the animate function, utility methods, and specialized animation creators.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/condensed_indices/animejs-specialist-condensed-index.md#2025-04-13_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { animate, utils, createSpring, createDraggable, createTimeline, stagger, waapi, onScroll, createScope, createAnimatable, createTimer } from 'animejs';\n```\n\n----------------------------------------\n\nTITLE: Documenting Failed Refactoring in Task Log using Markdown\nDESCRIPTION: Template for logging a failed refactoring attempt due to test failures, including details about the failed step and reverted changes.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/039-cross-functional/refactor-specialist/039-work-xf-refactor-specialist.mode.md#2025-04-13_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n---\n**Status:** ❌ Failed\n**Outcome:** Failed - Test Failure\n**Summary:** Refactoring step '[describe step]' failed. Tests '[list failed tests]' broke. Change reverted. Cannot proceed with this refactoring.\n**References:** [`[path/to/file]` (reverted)]\n```\n\n----------------------------------------\n\nTITLE: Code Modification Tool Chain\nDESCRIPTION: Common pattern for modifying code using multiple tools in sequence.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/knowledge/tool_use_overview.md#2025-04-13_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n[read_file](/features/tools/read-file) → [apply_diff](/features/tools/apply-diff) → [attempt_completion](/features/tools/attempt-completion)\n```\n\n----------------------------------------\n\nTITLE: Initial Task Log Template in Markdown\nDESCRIPTION: Template for logging initial task information including goal and implementation details for Supabase features.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/032-backend/supabase-developer/032-work-be-supabase-developer.mode.md#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Task Log: [TaskID] - Supabase Implementation\n\n**Goal:** [e.g., Implement authentication (OAuth, Magic Link) and database schema for user profiles with RLS policies and pgvector for similarity search].\n```\n\n----------------------------------------\n\nTITLE: Metadata Tags for Bug Fixing\nDESCRIPTION: Suggested metadata tags for categorizing and organizing bug fixing related tasks and documentation.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v6.3/improvements/bug-fixer-improvements.md#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n\"debugging\", \"testing\", \"troubleshooting\", \"error-analysis\", \"regression-testing\"\n```\n\n----------------------------------------\n\nTITLE: Basic HTML5 Structure\nDESCRIPTION: Minimal HTML5 template with viewport meta tag for mobile responsiveness.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/bootstrap-specialist-llms-context-20250406.md#2025-04-13_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n    <title>Bootstrap demo</title>\n  </head>\n  <body>\n    <h1>Hello, world!</h1>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Task Completion Log Template - FastAPI Development\nDESCRIPTION: Markdown template for documenting completed FastAPI development tasks, including status, outcome, and implementation references.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/032-backend/fastapi-developer/032-work-be-fastapi-developer.mode.md#2025-04-13_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n---\n**Status:** ✅ Complete\n**Outcome:** Success\n**Summary:** Implemented WebSocket endpoint `/ws/updates` using Pydantic for messages and async handling.\n**References:** [`main.py` (modified), `schemas.py` (created)]\n```\n\n----------------------------------------\n\nTITLE: Adding Material Icons Font via Google Web Fonts CDN\nDESCRIPTION: HTML code to include the Material Icons font in a project using the Google Web Fonts CDN.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/material-ui-specialist-llms-context-20250406.md#2025-04-13_snippet_26\n\nLANGUAGE: html\nCODE:\n```\n<link\n  rel=\"stylesheet\"\n  href=\"https://fonts.googleapis.com/icon?family=Material+Icons\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Example of Requesting Database Selection\nDESCRIPTION: Demonstrates using the ask_followup_question tool to gather information about database preferences. The question includes four suggested database options with their key characteristics to help the user make an informed decision.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/knowledge/ask_followup_question.md#2025-04-13_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<ask_followup_question>\n<question>What database should this application use for storing user data?</question>\n<follow_up>\n<suggest>MongoDB for flexible schema and document-based storage</suggest>\n<suggest>PostgreSQL for relational data with strong consistency guarantees</suggest>\n<suggest>Firebase for real-time updates and simplified backend management</suggest>\n<suggest>SQLite for lightweight local storage without external dependencies</suggest>\n</follow_up>\n</ask_followup_question>\n```\n\n----------------------------------------\n\nTITLE: Initializing E2E Test Task Log in Markdown\nDESCRIPTION: Creates an initial log entry for an E2E testing task, including the task ID, goal, and target environment.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/034-qa/e2e-tester/034-work-qa-e2e-tester.mode.md#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Task Log: [TaskID] - E2E Testing\n\n**Goal:** Test [e.g., user login and profile update flow] using [Framework].\n**Target:** [URL/Environment]\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter for Agile Task Management\nDESCRIPTION: Provides a comprehensive YAML front matter template for Agile work items (user stories, tasks, bugs), including fields for identification, status tracking, prioritization, effort estimation, iteration tracking, assignment, and relationships between items.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/knowledge/project-management/agile-principles/README.md#2025-04-13_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\n# 🆔 Task Identification & Core Metadata\nid:             # REQUIRED. Unique ID (e.g., STORY-001, TASK-002, BUG-003). Convention: {TYPE_PREFIX}-{NNN}\ntitle:          # REQUIRED. Human-readable title. \"As a User, I want to log in securely\"\nstatus:         # REQUIRED. Current workflow state. \"🟡 Backlog\", \"🔵 In Progress\", \"🟢 Done\". See Statuses below.\ntype:           # REQUIRED. Work item type. \"📖 User Story\", \"🛠️ Task\", \"🐞 Bug\". See Types below.\n\n# 🏆 Prioritization & Value\npriority:       # Recommended. Importance/Order. \"🔼 High\", \"▶️ Medium\", \"🔽 Low\". See Priorities below.\nvalue_score:    # Optional. Business value estimate (e.g., 1-10, MoSCoW).\nrisk_score:     # Optional. Risk estimate (e.g., 1-10).\n\n# ⏳ Effort & Iteration Tracking\nestimated_effort: # Recommended. Story Points or T-Shirt size. \"3\", \"5\", \"M\", \"L\".\niteration:      # Optional. Sprint/Iteration name or number. \"Sprint 3\", \"Iteration 2025.04\"\n# created_date:   # Optional. YYYY-MM-DD\nupdated_date:   # Recommended. YYYY-MM-DD\n\n# 🧑‍💻 Assignment & Collaboration\nassigned_to:    # Optional. Who is working on it. \"🧑‍💻 User:DevTeamA\", \"🤖 AI+Pair:Bob\"\nreporter:       # Optional. Who created/reported it.\n\n# 🔗 Relationships & Context\nparent_feature: # Optional. Path/ID of parent Feature/Epic overview file. \"FEATURE_authentication/_overview.md\"\ndepends_on:     # Optional. List of task/story IDs this waits for. [\"TASK-002\"]\nrelated_docs:   # Optional. Links to Personas, Designs, etc. [\"docs/personas.md#returning_user\"]\ntags:           # Optional. Keywords. [\"authentication\", \"security\", \"mvp\"]\n\n# ✅ Definition of Done Checklist (Optional - Team Standard)\n# dod_checklist: # Example - can use body instead\n#   - \"[ ] Code Complete\"\n#   - \"[ ] Unit Tests Pass (>80%)\"\n#   - \"[ ] Code Reviewed\"\n#   - \"[ ] AC Met\"\n#   - \"[ ] Deployed to Staging\"\n---\n\n# User Story / Task Title (matches YAML title)\n\n## Description / User Story 📖 / Task Details 🛠️\n... Markdown Body: User Story format, Task description, Bug details ...\n\n## Acceptance Criteria ✅\n... Checklists defining Done for THIS item ...\n```\n\n----------------------------------------\n\nTITLE: Initializing Task Log Template in Markdown\nDESCRIPTION: Template for creating initial task log entries when starting Firebase-related tasks, including goal documentation and structure.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/032-backend/firebase-developer/032-work-be-firebase-developer.mode.md#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Task Log: [TaskID] - Firebase Implementation\n\n**Goal:** [e.g., Implement user authentication and Firestore database with security rules for a chat application].\n```\n\n----------------------------------------\n\nTITLE: Progressive Search Box Implementation\nDESCRIPTION: Search box component with progressive enhancement, showing both basic and enhanced versions with loading states.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/remix-developer-llms-context-20250406.md#2025-04-13_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nexport function SearchBox() {\n  return (\n    <Form method=\"get\" action=\"/search\">\n      <input type=\"search\" name=\"query\" />\n      <SearchIcon />\n    </Form>\n  );\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useNavigation } from \"@remix-run/react\";\n\nexport function SearchBox() {\n  const navigation = useNavigation();\n  const isSearching =\n    navigation.location.pathname === \"/search\";\n\n  return (\n    <Form method=\"get\" action=\"/search\">\n      <input type=\"search\" name=\"query\" />\n      {isSearching ? <Spinner /> : <SearchIcon />}\n    </Form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Better Auth Client in React\nDESCRIPTION: Initializes a Better Auth client for React authentication in an Astro project.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/astro-developer-llms-context-20250406.md#2025-04-13_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAuthClient } from 'better-auth/react';\n\nexport const authClient = createAuthClient();\n\nexport const { signIn, signOut } = authClient;\n```\n\n----------------------------------------\n\nTITLE: Bootstrap Grid System Classes Reference\nDESCRIPTION: Reference to core Bootstrap grid system class names used for layout structuring\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v6.3/improvements/bootstrap-specialist-improvements.md#2025-04-13_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n.container, .row, .col-*\n```\n\n----------------------------------------\n\nTITLE: Creating Final Task Log Summary in Markdown\nDESCRIPTION: Template for completing a task log with status, outcome, summary, and reference information.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/035-devops/infrastructure-specialist/035-work-do-infrastructure-specialist.mode.md#2025-04-13_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n---\n**Status:** ✅ Complete\n**Outcome:** Success\n**Summary:** Provisioned AWS resources (EC2, RDS, VPC, SGs) for staging environment via Terraform (`terraform/staging/main.tf`). Implemented basic monitoring and tagging.\n**References:** [`terraform/staging/main.tf` (created/modified), `project_journal/tasks/[DiagramerTaskID].md` (delegated diagram)]\n```\n\n----------------------------------------\n\nTITLE: Initial Task Log Template in Markdown\nDESCRIPTION: Template for creating initial task log entries in project_journal/tasks/[TaskID].md, capturing the task goal and basic information.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/031-frontend/sveltekit-developer/031-work-fe-sveltekit-developer.mode.md#2025-04-13_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n# Task Log: [TaskID] - SvelteKit Implementation\n\n**Goal:** [e.g., Implement a new route with form handling and server-side validation].\n```\n\n----------------------------------------\n\nTITLE: Task Completion Log Template in Markdown\nDESCRIPTION: Template for logging the completion status and summary of a Django development task, including references to modified files.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/032-backend/django-developer/032-work-be-django-developer.mode.md#2025-04-13_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n---\\n**Status:** ✅ Complete\\n**Outcome:** Success\\n**Summary:** Implemented DRF endpoint for user profiles, including serializer, viewset, and URL registration. Added tests.\\n**References:** [`users/serializers.py` (created), `users/views.py` (modified), `project/urls.py` (modified), `users/tests.py` (modified)]\n```\n\n----------------------------------------\n\nTITLE: Logging Initial Task Goal in Markdown\nDESCRIPTION: Example of how to log the initial goal of a Shadcn UI implementation task in a markdown file.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/031-frontend/shadcn-ui-specialist/031-work-fe-shadcn-ui-specialist.mode.md#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Task Log: [TaskID] - Shadcn UI Implementation\n\n**Goal:** [e.g., Implement a form with Shadcn UI components for user registration].\n```\n\n----------------------------------------\n\nTITLE: Project Directory Structure Commands\nDESCRIPTION: Example of directory creation commands used by Project Initializer to set up the project structure.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v4.5/workflow_examples.md#2025-04-13_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmkdir project_journal/tasks/\nmkdir decisions/\nmkdir src/\nmkdir css/\nmkdir js/\ngit init\n```\n\n----------------------------------------\n\nTITLE: Task Completion Log Template in Markdown\nDESCRIPTION: Template for logging task completion with status, outcome, summary, and references to modified files.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/035-devops/docker-compose-specialist/035-work-do-docker-compose-specialist.mode.md#2025-04-13_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n---\n**Status:** ✅ Complete\n**Outcome:** Success\n**Summary:** Created optimized Dockerfile and docker-compose.yml. Pushed image `my-registry/my-app:v1.2.0`. Configured resource limits and persistent volume.\n**References:** [`Dockerfile` (created/modified), `.dockerignore` (created/modified), `docker-compose.yml` (created/modified)]\n```\n\n----------------------------------------\n\nTITLE: Installing Bootstrap via npm\nDESCRIPTION: Command to install Bootstrap v5.3.3 using npm package manager.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/condensed_indices/bootstrap-specialist-condensed-index.md#2025-04-13_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install bootstrap@5.3.3\n```\n\n----------------------------------------\n\nTITLE: Final Status Log Template in Markdown\nDESCRIPTION: Template for logging the final status and summary of integration test execution. Includes test results, outcomes, and references to related files.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/034-qa/integration-tester/034-work-qa-integration-tester.mode.md#2025-04-13_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n---\n**Status:** ⚠️ Complete with Failures\n**Outcome:** 1 Test Failed\n**Summary:** Executed integration tests for User-Auth interaction: 10 run, 9 passed, 1 failed. Failure related to token validation.\n**Escalation:** Escalated failure to `bug-fixer` (Task: [BugTaskID]).\n**References:** [`tests/integration/test_user_auth.py` (modified), `project_journal/tasks/[BugTaskID].md`]\n```\n\n----------------------------------------\n\nTITLE: Date Format Configuration\nDESCRIPTION: Example of date format specification in Elasticsearch field mapping\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/033-database/elasticsearch-specialist/033-work-db-elasticsearch-specialist.mode.md#2025-04-13_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"yyyy-MM-dd\"\n```\n\n----------------------------------------\n\nTITLE: User Response Format Example with answer Tags\nDESCRIPTION: Demonstrates how user responses to questions are formatted with XML-like answer tags for clarity and consistency. This formatting helps to separate user answers from other conversation elements.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/knowledge/ask_followup_question.md#2025-04-13_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<answer>\nUse Tailwind CSS for utility-first styling with maximum flexibility\n</answer>\n```\n\n----------------------------------------\n\nTITLE: Basic Menu Implementation Reference in React\nDESCRIPTION: References a demo component for a basic menu implementation. The menu opens over an anchor element, realigns when near screen edges, and closes upon option selection.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/material-ui-specialist-llms-context-20250406.md#2025-04-13_snippet_38\n\nLANGUAGE: jsx\nCODE:\n```\n{\"demo\": \"BasicMenu.js\"}\n```\n\n----------------------------------------\n\nTITLE: Configuring Documentation Writer Mode\nDESCRIPTION: JSON configuration for a documentation specialist mode with capabilities for creating and maintaining technical documentation, READMEs, and API docs. Includes read, edit, and command access permissions.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/knowledge/community_mode_ideas.md#2025-04-13_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"slug\": \"documentation-writer\",\n  \"name\": \"Documentation Writer\",\n  \"roleDefinition\": \"You are Roo, a technical documentation expert specializing in creating clear, comprehensive documentation for software projects. Your expertise includes:\\nWriting clear, concise technical documentation\\nCreating and maintaining README files, API documentation, and user guides\\nFollowing documentation best practices and style guides\\nUnderstanding code to accurately document its functionality\\nOrganizing documentation in a logical, easily navigable structure\",\n  \"customInstructions\": \"Focus on creating documentation that is clear, concise, and follows a consistent style. Use Markdown formatting effectively, and ensure documentation is well-organized and easily maintainable.\",\n  \"groups\": [\n    \"read\",\n    \"edit\",\n    \"command\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Task Log Template for D3.js Visualization\nDESCRIPTION: Markdown template for logging D3.js visualization tasks, including goal documentation and outcome tracking.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/031-frontend/d3js-specialist/031-work-fe-d3js-specialist.mode.md#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Task Log: [TaskID] - D3 Visualization: [Chart Type]\n\n**Goal:** Create a [Chart Type] visualization using D3.js v[Version] based on [Data Source].\n```\n\n----------------------------------------\n\nTITLE: Running the Mode Collection Bundling Script with Custom Collections Definition\nDESCRIPTION: Command to execute the bundling script with a custom collections definition file and a specified output directory.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/dev_tools/bundle_modes_collections_sop.md#2025-04-13_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnode dev_tools/bundle_modes_collections.js --collections path/to/your/collections.json --outputBaseDir v6.1\n```\n\n----------------------------------------\n\nTITLE: Logging Task Completion in Markdown\nDESCRIPTION: Example of final content to be appended to the task log file upon completion of a UI design task. It includes status, outcome, summary, and references to created documents.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/030-design/ui-designer/030-work-des-ui-designer.mode.md#2025-04-13_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n---\n**Status:** ✅ Complete\n**Outcome:** Success\n**Summary:** Completed mockups and design specification for [feature]. Saved to formal docs.\n**References:** [`project_journal/formal_docs/design_[TaskID]_[topic].md` (created)]\n```\n\n----------------------------------------\n\nTITLE: Defining Astro Server Action\nDESCRIPTION: Creates a server action using defineAction with input validation using zod schema.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/astro-developer-llms-context-20250406.md#2025-04-13_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineAction } from 'astro:actions';\nimport { z } from 'astro:schema';\n\nexport const server = {\n  getGreeting: defineAction({\n    input: z.object({\n      name: z.string(),\n    }),\n    handler: async (input) => {\n      return `Hello, ${input.name}!`\n    }\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Vite Development Server Start Command\nDESCRIPTION: Command line instruction for starting the Vite development server.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/vite-specialist-llms-context-20250406.md#2025-04-13_snippet_31\n\nLANGUAGE: bash\nCODE:\n```\nvite [root]\n```\n\n----------------------------------------\n\nTITLE: Completing Task Log for Vite Configuration in Markdown\nDESCRIPTION: Example of final log content for a completed Vite configuration task, including status, outcome, summary, and references.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/031-frontend/vite-specialist/031-work-fe-vite-specialist.mode.md#2025-04-13_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n---\n**Status:** ✅ Complete\n**Outcome:** Success - Vite Configuration\n**Summary:** Configured Vite for [specific task], added [plugins], and optimized [specific aspects]. Verified working with development server and production build.\n**References:** [`vite.config.js` (modified), `package.json` (dependencies added)]\n```\n\n----------------------------------------\n\nTITLE: Creating Final Task Completion Log Entry in Markdown\nDESCRIPTION: This snippet demonstrates how to format the final summary entry in a task log. It includes the status, outcome, implementation summary, and references to created artifacts.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/035-devops/cicd-specialist/035-work-do-cicd-specialist.mode.md#2025-04-13_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n---\n**Status:** ✅ Complete\n**Outcome:** Success\n**Summary:** Implemented GitHub Actions workflow `.github/workflows/main.yml` with lint, build, test, scan, and deploy-to-staging stages. Integrated Trivy for container scanning. Configured deployment via kubectl apply.\n**References:** [`.github/workflows/main.yml` (created), `project_journal/formal_docs/cicd_strategy_backend.md` (optional)]\n```\n\n----------------------------------------\n\nTITLE: Configuring Clerk Middleware in Next.js\nDESCRIPTION: Set up Clerk middleware in Next.js to handle authentication state and route protection. Use the 'matcher' option to define which routes should be processed by the middleware.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/031-frontend/clerk-auth-specialist/031-work-fe-clerk-auth-specialist.mode.md#2025-04-13_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { clerkMiddleware } from '@clerk/nextjs';\n\nexport default clerkMiddleware({\n  matcher: ['/((?!.+\\.[\\w]+$|_next).*)', '/', '/(api|trpc)(.*)'],\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Web Designer Mode Metadata Tags\nDESCRIPTION: List of metadata tags to categorize and identify the Web Designer Mode's capabilities and focus areas.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v6.3/improvements/one-shot-web-designer-improvements.md#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n\"web-design\", \"ui-design\", \"visual-design\", \"html\", \"css\", \"frontend\", \"prototyping\", \"creative\"\n```\n\n----------------------------------------\n\nTITLE: Logging Task Completion in Markdown\nDESCRIPTION: Example of how to log the completion status, outcome, and summary of a Shadcn UI implementation task in a markdown file.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/031-frontend/shadcn-ui-specialist/031-work-fe-shadcn-ui-specialist.mode.md#2025-04-13_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n---\n**Status:** ✅ Complete\n**Outcome:** Success - UI Components Implemented\n**Summary:** Implemented Shadcn UI components: Form, Input, Button, Select for user registration. Added custom styling with Tailwind CSS for responsive layout.\n**References:** [`src/components/UserRegistration.tsx` (created), `src/styles/form.css` (modified)]\n```\n\n----------------------------------------\n\nTITLE: Example of Addressing Authentication Requirements\nDESCRIPTION: Shows how to use the ask_followup_question tool to clarify user authentication requirements. The question provides three common authentication approaches as suggested answers to guide the user's response.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/knowledge/ask_followup_question.md#2025-04-13_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<ask_followup_question>\n<question>How should the application handle user authentication?</question>\n<follow_up>\n<suggest>Implement email/password authentication with account verification</suggest>\n<suggest>Use social login providers (Google, GitHub, etc.) for quick signup</suggest>\n<suggest>Implement both email/password and social login options</suggest>\n</follow_up>\n</ask_followup_question>\n```\n\n----------------------------------------\n\nTITLE: Design Task Template\nDESCRIPTION: Example template for design tasks showing the minimum required YAML front matter fields.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/knowledge/project-management/waterfall-project-management/implementing.md#2025-04-13_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n---\n# 🆔 Task Identification & Core Metadata\nid:             # << GENERATE_UNIQUE_ID (e.g., DES-NNN) >>\ntitle:          # << DESIGN: Concise description >>\nphase:          \"📐 Design\"\nstatus:         \"🟡 To Do\"\ntype:           \"📐 Design Element\" # Or Diagramming, Prototyping, etc.\n\n# 🔗 Relationships & Context\nrequirement_ref: # << REQUIRED: Link to relevant SRS section(s) >>\n```\n\n----------------------------------------\n\nTITLE: Security Assessment Log Template in Markdown\nDESCRIPTION: Template for documenting the security assessment process, including the framework used, scope of assessment, tools employed, and components evaluated.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/039-cross-functional/security-specialist/039-work-xf-security-specialist.mode.md#2025-04-13_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## Security Assessment\n\n**Framework:** [e.g., OWASP API Security Top 10 2023]\n**Scope:** [e.g., /api/v1/users endpoints]\n**Tools:** [e.g., ZAP (DAST), Semgrep (SAST), Trivy (SCA)]\n**Files/Components Assessed:** [List relevant files/configs]\n```\n\n----------------------------------------\n\nTITLE: Installing Vite Project\nDESCRIPTION: Command to scaffold a new Vite project with optional template specification\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/condensed_indices/vite-specialist-condensed-index.md#2025-04-13_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create vite@latest [app-name] [--template <template>]\n```\n\n----------------------------------------\n\nTITLE: Initializing Task Log Template in Markdown\nDESCRIPTION: Template for creating initial task log entries when starting a new analysis, including goal statement and context references.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/039-cross-functional/complex-problem-solver/039-work-xf-complex-problem-solver.mode.md#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Task Log: [TaskID] - Complex Problem Analysis: [Brief Problem Statement]\n\n**Goal:** Analyze [problem] and recommend solution(s).\n**Context:** [Refs to code, logs, docs, constraints, Stack Profile, previous attempts]\n```\n\n----------------------------------------\n\nTITLE: Function References in Project Documentation\nDESCRIPTION: Key function references used in the project workflow for communication and documentation including ask_followup_question, attempt_completion, read_file, and project_journal operations.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v3.0/User-Guide-v3.md#2025-04-13_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\nask_followup_question\nattempt_completion\nread_file\nproject_journal\n```\n\n----------------------------------------\n\nTITLE: Task Management Tool Chain\nDESCRIPTION: Common pattern for managing tasks using multiple tools in sequence.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/knowledge/tool_use_overview.md#2025-04-13_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n[new_task](/features/tools/new-task) → [switch_mode](/features/tools/switch-mode) → [execute_command](/features/tools/execute-command)\n```\n\n----------------------------------------\n\nTITLE: Debug Tool Integration Command\nDESCRIPTION: Reference to the command interface for debugging tool integration.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v6.3/improvements/bug-fixer-improvements.md#2025-04-13_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nexecute_command\n```\n\n----------------------------------------\n\nTITLE: Creating React Application with Create React App\nDESCRIPTION: Command-line instruction to create a new React application using the create-react-app scaffolding tool. This sets up a new project named 'my-app' with a basic React application structure.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/supabase-developer-llms-context-20250406.md#2025-04-13_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-react-app my-app\n```\n\n----------------------------------------\n\nTITLE: Adding a Debugger Statement in Three.js Tests\nDESCRIPTION: JavaScript code snippet demonstrating how to add a debugger statement in a test for browser-based debugging. This allows pausing execution for inspection in browser developer tools.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/threejs-specialist-llms-context-20250406.md#2025-04-13_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\ndebugger;\n```\n\n----------------------------------------\n\nTITLE: Implementing Directory Structure for MDTM Task Management\nDESCRIPTION: A structured directory layout for organizing tasks by features, epics, and components within a project. The structure includes templates, feature directories, and an optional archive for completed tasks.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/knowledge/project-management/markdown-driven-task-management-MDTM/markdown-driven-task-management-MDTM-feature-structure/implementing.md#2025-04-13_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nPROJECT_ROOT/\n├── src/                     # Source Code\n├── docs/                    # Project Documentation (PRDs, Specs)\n├── tasks/                   # 👈 **Main MDTM Directory**\n│   ├── _templates/          # 📄 Optional: Standard task templates\n│   │   ├── 🌟_feature.md\n│   │   ├── 🐞_bug.md\n│   │   ├── 🧹_chore.md\n│   │   └── 📖_documentation.md\n│   │\n│   ├── FEATURE_authentication/  # 🔑 Feature: Authentication\n│   │   ├── _overview.md       # 🗺️ Optional: Feature summary/epic description\n│   │   ├── 001_➕_login_ui.md   # ✨ Task: Implement Login UI\n│   │   ├── 002_⚙️_login_logic.md # ✨ Task: Implement Login Logic API Call\n│   │   └── 003_🔑_password_reset.md # ✨ Task: Password Reset Flow\n│   │\n│   ├── FEATURE_user_profile/  # 👤 Feature: User Profile\n│   │   ├── _overview.md       # 🗺️ Optional: Feature summary\n│   │   └── 004_🖼️_display_data.md # ✨ Task: Display User Profile Data\n│   │\n│   ├── AREA_refactoring/        # 🧹 Area: Code Refactoring\n│   │   └── 005_🧹_refactor_auth_service.md # ✨ Task: Refactor Auth Service\n│   │\n│   └── AREA_bugs/               # 🐞 Area: Bug Tracking\n│       └── 006_🐞_login_fails_safari.md # ✨ Task: Bug Fix\n│\n├── archive/                 # 📦 Optional: Completed/Closed tasks (mirrors `tasks/` structure)\n│   └── ...\n└── README.md\n```\n\n----------------------------------------\n\nTITLE: Mode Maintainer Configuration Tags\nDESCRIPTION: Metadata tags for categorizing and identifying the Mode Maintainer component within the system\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v6.3/improvements/mode-maintainer-improvements.md#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n\"mode-management\", \"configuration\", \"json\", \"meta-programming\", \"roo-system\"\n```\n\n----------------------------------------\n\nTITLE: Creating Styled Component Slots in Material UI\nDESCRIPTION: Demonstrates how to create styled component slots using the styled API with name and slot parameters. This allows for customization of individual elements through the theme.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/material-ui-specialist-llms-context-20250406.md#2025-04-13_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport { styled } from '@mui/material/styles';\n\nconst StatRoot = styled('div', {\n  name: 'MuiStat', // The component name\n  slot: 'root', // The slot name\n})(({ theme }) => ({\n  display: 'flex',\n  flexDirection: 'column',\n  gap: theme.spacing(0.5),\n  padding: theme.spacing(3, 4),\n  backgroundColor: theme.palette.background.paper,\n  borderRadius: theme.shape.borderRadius,\n  boxShadow: theme.shadows[2],\n  letterSpacing: '-0.025em',\n  fontWeight: 600,\n}));\n\nconst StatValue = styled('div', {\n  name: 'MuiStat',\n  slot: 'value',\n})(({ theme }) => ({\n```\n\n----------------------------------------\n\nTITLE: Initializing Task Log Template in Markdown\nDESCRIPTION: Template for creating initial task log entries, including goal description and context references for React development tasks.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/031-frontend/react-specialist/031-work-fe-react-specialist.mode.md#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Task Log: [TaskID] - React Development: [Brief Task Description]\n\n**Goal:** Implement [e.g., user profile component `src/components/UserProfile.tsx` based on design spec `docs/designs/profile.md`].\n**Context:** Stack Profile (`project_journal/context/stack_profile.md`), Requirements (`project_journal/requirements/[ReqID].md`)\n```\n\n----------------------------------------\n\nTITLE: Basic Component Nesting\nDESCRIPTION: Example of composing React components by nesting them\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/react-specialist-llms-context-20250406.md#2025-04-13_snippet_46\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function MyApp() {\n  return (\n    <div>\n      <h1>Welcome to my app</h1>\n      <MyButton />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Image URL in JavaScript\nDESCRIPTION: Basic example of importing and setting an image URL on an HTML element using JavaScript.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/vite-specialist-llms-context-20250406.md#2025-04-13_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nimport imgUrl from './img.png'\ndocument.getElementById('hero-img').src = imgUrl\n```\n\n----------------------------------------\n\nTITLE: Creating Initial Task Log Template in Markdown\nDESCRIPTION: This snippet provides a template for initializing a task log file for CI/CD setup projects. It includes sections for documenting the goal and context references that will guide the implementation.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/035-devops/cicd-specialist/035-work-do-cicd-specialist.mode.md#2025-04-13_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n# Task Log: [TaskID] - CI/CD Setup for [Project/Service]\n\n**Goal:** Setup [e.g., GitHub Actions workflow for backend service deployment to staging].\n**Context:** [Link to requirements, Stack Profile, infra plan, etc.]\n```\n\n----------------------------------------\n\nTITLE: Creating Task Log Entry in Markdown\nDESCRIPTION: Template for initializing a task log entry in the project journal, capturing the refactoring goal and context.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/039-cross-functional/refactor-specialist/039-work-xf-refactor-specialist.mode.md#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Task Log: [TaskID] - Code Refactoring: [files_to_refactor]\n\n**Goal:** Refactor `[files_to_refactor]` for [e.g., clarity, performance based on provided goals].\n**Context:** [Link to standards/guidelines if provided]\n```\n\n----------------------------------------\n\nTITLE: Integration Testing Tool Examples\nDESCRIPTION: Example testing frameworks and tools used in integration testing\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v6.3/improvements/integration-tester-improvements.md#2025-04-13_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npytest, jest, Postman/Newman\n```\n\n----------------------------------------\n\nTITLE: Starting a Local Web Server for Three.js Browser Tests\nDESCRIPTION: Command to start a local web server using servez for running browser-based unit tests. This sets up an HTTPS server on port 8080.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/threejs-specialist-llms-context-20250406.md#2025-04-13_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nnpx servez -p 8080 --ssl\n```\n\n----------------------------------------\n\nTITLE: Django Metadata Tags\nDESCRIPTION: List of metadata tags for categorizing Django development expertise and related technologies\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v6.3/improvements/django-developer-improvements.md#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n\"django\", \"python\", \"backend\", \"web-framework\", \"mvt\", \"orm\", \"drf\"\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for CPM Task Management using MDTM\nDESCRIPTION: Example directory structure that mirrors a project's Work Breakdown Structure (WBS), showing how to organize task files in hierarchical folders to maintain logical project organization.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/knowledge/project-management/critical-path-method/implementing.md#2025-04-13_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nPROJECT_ROOT/\n├── docs/                    # Supporting Project Docs (Charter, Scope)\n├── tasks/                   # 👈 **Main MDTM Directory for CPM Task Data**\n│   ├── _templates/          # 📄 Template for CPM task files (Essential!)\n│   │   └── 🏗️_cpm_task.md\n│   │\n│   ├── 1.0_Initiation/        # 📂 WBS Level 1\n│   │   ├── _wbs_overview.md   # Optional: Summary for this WBS branch\n│   │   ├── 1.1_Define_Goals.md       # 📝 CPM Task File\n│   │   └── 1.2_Feasibility_Study.md  # 📝 CPM Task File\n│   │\n│   ├── 2.0_Planning/          # 📂 WBS Level 1\n│   │   ├── 2.1_Create_WBS/      # 📂 WBS Level 2\n│   │   │   └── 2.1.1_Identify_Deliverables.md # 📝 CPM Task File\n│   │   ├── 2.2_Schedule_Development/ # 📂 WBS Level 2\n│   │   │   ├── 2.2.1_Define_Activities.md # 📝 CPM Task File (Defines other tasks)\n│   │   │   ├── 2.2.2_Sequence_Activities.md # 📝 CPM Task File (Defines dependencies)\n│   │   │   └── 2.2.3_Estimate_Durations.md  # 📝 CPM Task File (Defines durations)\n│   │   └── 2.3_Resource_Plan.md\n│   │\n│   ├── 3.0_Execution/         # 📂 WBS Level 1\n│   │   ├── 3.1_Component_A_Dev/ # 📂 WBS Level 2\n│   │   │   ├── 3.1.1_Code_Module_X.md # 📝 CPM Task File\n│   │   │   └── 3.1.2_Test_Module_X.md # 📝 CPM Task File\n│   │   └── 3.2_Integration.md\n│   │\n│   └── 4.0_Closure/           # 📂 WBS Level 1\n│       └── 4.1_Project_Review.md\n│\n├── archive/                 # 📦 Optional: Completed tasks\n│   └── ...\n└── README.md\n```\n\n----------------------------------------\n\nTITLE: Configuration Access Example\nDESCRIPTION: Example of accessing configuration values in a web application\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/knowledge/sop-create-condensed-context-index.md#2025-04-13_snippet_2\n\nLANGUAGE: python\nCODE:\n```\napp.config['SECRET_KEY']\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Animation with Anime.js\nDESCRIPTION: Example of a simple animation that translates an element horizontally. Demonstrates setting targets, properties, duration, and easing.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/031-frontend/animejs-specialist/031_animejs-specialist.mode.md#2025-04-13_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nanime({ targets: '.my-element', translateX: 250, duration: 800, easing: 'easeInOutQuad' });\n```\n\n----------------------------------------\n\nTITLE: Using the inject Function for Dependency Injection\nDESCRIPTION: Demonstrates the use of the inject function for flexible dependency injection in Angular. This method is often preferred over constructor injection for its versatility.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/031-frontend/angular-developer/031_angular-developer.mode.md#2025-04-13_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\ninject(ServiceType)\n```\n\n----------------------------------------\n\nTITLE: Environment Variables for Supabase Configuration\nDESCRIPTION: Common pattern for storing Supabase credentials as environment variables in web applications.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/032-backend/supabase-developer/032-work-be-supabase-developer.mode.md#2025-04-13_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\n.env.local\nNEXT_PUBLIC_SUPABASE_URL, NEXT_PUBLIC_SUPABASE_ANON_KEY\n```\n\n----------------------------------------\n\nTITLE: Linking to Class Pages in Three.js Documentation\nDESCRIPTION: Demonstrates how to create links to class pages, class members, and local members within the Three.js documentation using Markdown syntax.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/threejs-specialist-llms-context-20250406.md#2025-04-13_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n[page:ClassName link title]\n[page:ClassName]\n[page:ClassName.memberName]\n[page:.memberName]\n```\n\n----------------------------------------\n\nTITLE: Importing createScope from Anime.js\nDESCRIPTION: Basic syntax for importing and creating a new animation scope with parameters in Anime.js.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/animejs-specialist-llms-context-20250406.md#2025-04-13_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createScope } from 'animejs';\n\nconst scope = createScope(parameters);\n```\n\n----------------------------------------\n\nTITLE: Completion Log Template for D3.js Tasks\nDESCRIPTION: Markdown template for documenting completed D3.js visualization tasks, including status, outcome, and implementation summary.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/031-frontend/d3js-specialist/031-work-fe-d3js-specialist.mode.md#2025-04-13_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n---\n**Status:** ✅ Complete\n**Outcome:** Success\n**Summary:** Implemented interactive bar chart using D3.js v7 scales, axes, and data binding. Added tooltips on hover.\n**References:** [`src/charts/barChart.js` (created/modified), `data/source_data.csv` (used)]\n```\n\n----------------------------------------\n\nTITLE: Formatting Example for Failed Git Task with Authentication Error in Markdown\nDESCRIPTION: Example template for logging a Git task that failed due to authentication issues, instructing the user to check their credentials and providing reference to the affected remote.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/039-cross-functional/git-manager/039-work-xf-git-manager.mode.md#2025-04-13_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n```markdown\n---\n**Status:** ❌ Failed\n**Outcome:** FailedAuth\n**Summary:** Failed push: Authentication error. Escalated back to caller. User needs to check credentials.\n**References:** [Remote: origin]\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing User Authentication with Flask Message Flashing\nDESCRIPTION: Demonstrates a basic Flask application setup with message flashing functionality, including user login and flash message display. Uses Flask's flash() function to show success/error messages.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/flask-developer-llms-context-20250406.md#2025-04-13_snippet_35\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import Flask, flash, redirect, render_template, \\\n     request, url_for\n\napp = Flask(__name__)\napp.secret_key = b'_5#y2L\"F4Q8z\\n\\xec]/'\n\n@app.route('/')\ndef index():\n    return render_template('index.html')\n\n@app.route('/login', methods=['GET', 'POST'])\ndef login():\n    error = None\n    if request.method == 'POST':\n        if request.form['username'] != 'admin' or \\\n                request.form['password'] != 'secret':\n            error = 'Invalid credentials'\n        else:\n            flash('You were successfully logged in')\n            return redirect(url_for('index'))\n    return render_template('login.html', error=error)\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter for CPM Task Data\nDESCRIPTION: Defines the essential YAML front matter fields required for CPM analysis, including task identification, duration estimation, dependency mapping, status tracking, and assignment information. This structure captures all data needed for external CPM calculation tools.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/knowledge/project-management/critical-path-method/implementing.md#2025-04-13_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\n# 🆔 Task Identification (Required for Linking)\nid:             # REQUIRED. Project-wide UNIQUE identifier. **Cannot have duplicates!** Use WBS ID or simple T### format (e.g., \"Task_1.1\", \"T005\"). This ID is used in `depends_on`.\ntitle:          # REQUIRED. Human-readable name of the task/activity.\n\n# ⏱️ Duration Estimation (Required for Scheduling)\nduration:       # REQUIRED. Numeric estimate of task length. (e.g., 5, 10, 0 for Milestones).\nduration_unit:  # REQUIRED. Consistent unit for ALL tasks in the project. (e.g., \"days\", \"hours\", \"weeks\").\n\n# 🔗 Dependency Mapping (Required for Network Logic)\ndepends_on:     # REQUIRED. List of `id` strings for immediate predecessors. Use `[]` for tasks with no dependencies (start tasks). E.g., [\"Task_1.1\", \"Task_2.3\"].\n\n# 📊 Status & Progress Tracking (Recommended)\nstatus:         # Recommended. Workflow state. E.g., \"⚪ Not Started\", \"🏗️ In Progress\", \"✅ Completed\". See Statuses below.\n# percent_complete: # Optional. Numeric (0-100).\n# start_date_actual: # Optional. Actual start (YYYY-MM-DD).\n# finish_date_actual: # Optional. Actual finish (YYYY-MM-DD).\n\n# 🧑‍💻 Context & Assignment\nwbs_id:         # Recommended. The WBS identifier string (e.g., \"3.1.1\"). Matches folder structure/filename convention.\n# assigned_to:    # Optional. Responsible person/team.\n# related_docs:   # Optional. Links to specifications, etc.\ntags:           # Optional. Keywords for filtering.\n\n# ======================================================================\n# ⚠️ CALCULATED FIELDS (Output from External CPM Tool - DO NOT EDIT HERE)\n# These fields are determined by running a CPM calculation on the data above.\n# They should NOT be manually entered or edited in this source MDTM file.\n# ======================================================================\n# critical_path:  # (Boolean) Is this task on the critical path?\n# total_float:    # (Number) Total slack/float for this task.\n# free_float:     # (Number) Free slack/float for this task.\n# early_start:    # (Number/Date) Earliest possible start.\n# early_finish:   # (Number/Date) Earliest possible finish.\n# late_start:     # (Number/Date) Latest allowable start.\n# late_finish:    # (Number/Date) Latest allowable finish.\n---\n\n# << Task Title >>\n\n## Task Objective / Description 🏗️\n(Clearly define the work to be performed in this task. What does 'Done' look like?)\n\n## Duration Basis / Assumptions 🧐\n(Explain how the `duration` was estimated. Note key assumptions, e.g., resource availability, complexity.)\n\n## Predecessor Rationale (Why `depends_on`?) 🔗\n(Optional but helpful: Briefly explain *why* this task depends on the listed predecessors.)\n\n## Resources Required 🛠️\n(List key personnel, equipment, information needed.)\n```\n\n----------------------------------------\n\nTITLE: Running the Mode Collection Bundling Script with Custom Source Directory\nDESCRIPTION: Command to run the bundling script with a custom source directory for mode definitions along with a specified output directory.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/dev_tools/bundle_modes_collections_sop.md#2025-04-13_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnode dev_tools/bundle_modes_collections.js --source path/to/your/modes --outputBaseDir v6.1\n```\n\n----------------------------------------\n\nTITLE: Using Staggered Delays in Anime.js\nDESCRIPTION: Demonstration of basic staggering to apply incremental delays across multiple targets.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/031-frontend/animejs-specialist/031_animejs-specialist.mode.md#2025-04-13_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ndelay: anime.stagger(100)\n```\n\n----------------------------------------\n\nTITLE: Logging Task Completion in Markdown\nDESCRIPTION: Template for documenting the completion status of a Second Opinion task. It includes fields for status, outcome, a concise summary of feedback provided, and references to the full report location.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/039-cross-functional/second-opinion/039-work-xf-second-opinion.mode.md#2025-04-13_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n```markdown\n---\n**Status:** ✅ Complete\n**Outcome:** Success (Feedback Provided)\n**Feedback Summary:** [Concise summary, e.g., Original viable, alternative offers better scalability. Full report saved.]\n**References:** [`project_journal/formal_docs/second_opinion_[TaskID]_[topic].md` (created)]\n```\n```\n\n----------------------------------------\n\nTITLE: FastAPI Request Parameter Imports\nDESCRIPTION: Imports common FastAPI request parameter functions for handling various types of request data.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/fastapi-developer-llms-context-20250406.md#2025-04-13_snippet_40\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import Body, Cookie, File, Form, Header, Path, Query\n```\n\n----------------------------------------\n\nTITLE: Ignore Crate Dependencies Configuration\nDESCRIPTION: Cargo.toml configuration for adding the ignore crate dependency to a Rust project.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/tailwind-specialist-llms-context-20250406.md#2025-04-13_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\nignore = \"0.4\"\n```\n\n----------------------------------------\n\nTITLE: Importing Bootstrap JavaScript as ES Module\nDESCRIPTION: This JavaScript code imports all Bootstrap components as an ES Module. It's useful when working with modern build tools and allows tree-shaking for optimized builds.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/031-frontend/bootstrap-specialist/031-work-fe-bootstrap-specialist.mode.md#2025-04-13_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as bootstrap from 'bootstrap'\n```\n\n----------------------------------------\n\nTITLE: API Route Definition Example\nDESCRIPTION: Example decorator syntax for defining URL routes with HTTP methods in a web framework\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/knowledge/sop-create-condensed-context-index.md#2025-04-13_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@app.route('/path', methods=['GET', 'POST'])\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Task Management\nDESCRIPTION: Example file paths showing the structure for storing task files, decisions, and visualizations in the project journal\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/000-executive/roo-commander/000-exec-roo-commander.mode.md#2025-04-13_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nproject_journal/tasks/TASK-[MODE]-[YYYYMMDD-HHMMSS].md\nproject_journal/decisions/...\nproject_journal/visualizations/[diagram_name].md\n```\n\n----------------------------------------\n\nTITLE: Running the Mode Collection Bundling Script with Version Directory\nDESCRIPTION: Command to execute the bundling script with a specified output base directory, which creates a versioned structure for the mode collections.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/dev_tools/bundle_modes_collections_sop.md#2025-04-13_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnode dev_tools/bundle_modes_collections.js --outputBaseDir v6.1\n```\n\n----------------------------------------\n\nTITLE: Enabling Dark Mode in Bootstrap HTML\nDESCRIPTION: Implementation of dark mode across an entire project by adding the data-bs-theme attribute to the HTML element. This approach sets the theme at the document level.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/bootstrap-specialist-llms-context-20250406.md#2025-04-13_snippet_33\n\nLANGUAGE: HTML\nCODE:\n```\n<!doctype html>\n<html lang=\"en\" data-bs-theme=\"dark\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n    <title>Bootstrap demo</title>\n    <link href=\"{{< param \"cdn.css\" >}}\" rel=\"stylesheet\" integrity=\"{{< param \"cdn.css_hash\" >}}\" crossorigin=\"anonymous\">\n  </head>\n  <body>\n    <h1>Hello, world!</h1>\n    <script src=\"{{< param \"cdn.js_bundle\" >}}\" integrity=\"{{< param \"cdn.js_bundle_hash\" >}}\" crossorigin=\"anonymous\"></script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Template for PBI Definition\nDESCRIPTION: Defines the standard YAML metadata structure for Product Backlog Items including core details, attributes, sprint information, and relationships\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/knowledge/project-management/scrum/implementing.md#2025-04-13_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\n# 🆔 PBI Identification & Core Details\nid:             # REQUIRED. Unique Project-wide ID (e.g., STORY-001, BUG-002). Convention: {TYPE_PREFIX}-{NNN}\ntitle:          # REQUIRED. Concise PBI Title / Summary.\nstatus:         # REQUIRED. Current Workflow State. See Statuses below. E.g., \"🟡 Product Backlog\"\ntype:           # REQUIRED. PBI Type. E.g., \"📖 User Story\". See Types below.\n\n# 🏆 Product Backlog Attributes (Set by PO/Team during Refinement)\npriority:       # Recommended for PO ordering. E.g., \"🔼 High\". See Priorities.\nestimate_story_points: # REQUIRED for Sprint Planning. Relative effort. E.g., 3, 5, 8.\n# value:          # Optional. Business value indicator.\n\n# 🗓️ Sprint Backlog Attributes (Set during Sprint Planning)\nsprint:         # REQUIRED for Sprint Backlog items. Sprint Identifier. E.g., \"Sprint 7 (May 6-17)\"\n# sprint_goal_contribution: # Optional text describing how this PBI helps meet the Sprint Goal.\n\n# ⏳ Tracking & Assignment (Updated during Sprint)\nupdated_date:   # Recommended. YYYY-MM-DD. Track last modification.\nassigned_to:    # Optional. Set when a Developer starts work. E.g., \"🧑‍💻 Dev:Maria\", \"🤖 AI\"\n\n# 🔗 Relationships & Context\nparent_feature: # Optional. Path to the feature's _overview.md file.\nparent_story:   # Optional. ID of the Story this Task/Bug relates to. E.g., \"STORY-001\"\n# depends_on:     # Optional. List of other PBI IDs this depends on.\nrelated_docs:   # Optional. Links. E.g., [\"docs/DefinitionOfDone.md\", \"docs/Designs.md#login\"]\ntags:           # Optional. Keywords. E.g., [\"frontend\", \"api\", \"security\"]\n---\n```\n\n----------------------------------------\n\nTITLE: Formatting Example for Git Task Initial Log Entry in Markdown\nDESCRIPTION: Example of how to format the initial task log entry when the Git Manager receives a new task assignment. This template includes the task ID and goal statement.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/039-cross-functional/git-manager/039-work-xf-git-manager.mode.md#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```markdown\n# Task Log: [TaskID] - Git Operation\n\n**Goal:** [e.g., Create branch 'feature/login'].\n```\n```\n\n----------------------------------------\n\nTITLE: Project Description and Status Badges\nDESCRIPTION: HTML markup for displaying project description and status badges including build status, downloads, version, and license information.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/tailwind-specialist-llms-context-20250406.md#2025-04-13_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<p align=\"center\">\n  A utility-first CSS framework for rapidly building custom user interfaces.\n</p>\n\n<p align=\"center\">\n    <a href=\"https://github.com/tailwindlabs/tailwindcss/actions\"><img src=\"https://img.shields.io/github/actions/workflow/status/tailwindlabs/tailwindcss/ci.yml?branch=next\" alt=\"Build Status\"></a>\n    <a href=\"https://www.npmjs.com/package/tailwindcss\"><img src=\"https://img.shields.io/npm/dt/tailwindcss.svg\" alt=\"Total Downloads\"></a>\n    <a href=\"https://github.com/tailwindcss/tailwindcss/releases\"><img src=\"https://img.shields.io/npm/v/tailwindcss.svg\" alt=\"Latest Release\"></a>\n    <a href=\"https://github.com/tailwindcss/tailwindcss/blob/master/LICENSE\"><img src=\"https://img.shields.io/npm/l/tailwindcss.svg\" alt=\"License\"></a>\n</p>\n```\n\n----------------------------------------\n\nTITLE: Logging Project Management Task Completion in Markdown\nDESCRIPTION: Example of final content to append to a Project Management log file upon task completion. It includes status, outcome, summary, and references to related tasks.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/010-director/project-manager/010-dir-project-manager.mode.md#2025-04-13_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n---\n**Status:** ✅ Complete\n**Outcome:** Success\n**Summary:** Managed Feature X development using MDTM. All tasks (`project_journal/tasks/FEATURE_X/...`) are now `🟢 Done` or archived.\n**References:** [`project_journal/tasks/FEATURE_X/` directory]\n```\n\n----------------------------------------\n\nTITLE: Keyboard Navigation Demo\nDESCRIPTION: Reference to a keyboard navigation implementation for MUI Base components\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/material-ui-specialist-llms-context-20250406.md#2025-04-13_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n{\"demo\": \"KeyboardNavigation.js\", \"defaultCodeOpen\": false}\n```\n\n----------------------------------------\n\nTITLE: Task Log File Path Structure\nDESCRIPTION: Demonstrates the standard file path format for task logging used by the MongoDB Specialist\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/033-database/mongodb-specialist/033-work-db-mongodb-specialist.mode.md#2025-04-13_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nproject_journal/tasks/[TaskID].md\n```\n\n----------------------------------------\n\nTITLE: Defining Roo Mode Directory Structure\nDESCRIPTION: Demonstrates the hierarchical folder structure for organizing Roo modes within the v7.0/modes/ directory. Shows the nesting pattern from top-level hierarchy through department organization to individual mode folders and resources.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/templates/mode_folder_structure.md#2025-04-13_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nv7.0/\n└── modes/\n    ├── [LEVEL_PREFIX]-[level_name]/  # e.g., 000-executive, 010-director\n    │   └── [department_name]/        # Optional: Only for lead/worker levels\n    │       └── [mode_slug]/          # Folder for the specific mode\n    │           ├── [level_prefix]-[department_shortcode]-[mode_slug].mode.md  # The main Markdown definition file (all lowercase, hyphenated)\n    │           └── resources/        # Optional: Subdirectory for mode-specific files\n    │               └── ...\n    └── ...\n```\n\n----------------------------------------\n\nTITLE: Feature Addition Project Request Example\nDESCRIPTION: Example prompt for requesting a new feature addition to an existing e-commerce website through the Roo Commander.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v3.0/User-Guide-v3.md#2025-04-13_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\nI need to add a 'wishlist' feature to my existing e-commerce project located at `./my-online-shop`. Users should be able to add products to a wishlist, view their wishlist, and remove items. The backend likely needs API endpoints and database changes.\n```\n\n----------------------------------------\n\nTITLE: Adding Shadcn UI Components via CLI in React/Next.js\nDESCRIPTION: CLI command to copy specific Shadcn UI component source code directly into the project for full control and customization.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/031-frontend/shadcn-ui-specialist/031-work-fe-shadcn-ui-specialist.mode.md#2025-04-13_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-ui@latest add [component]\n```\n\n----------------------------------------\n\nTITLE: Exploring Compiled Bootstrap Directory Structure\nDESCRIPTION: Shows the complete directory structure of a compiled Bootstrap distribution, including CSS files (with grid, reboot, utilities variants) and JavaScript files (with bundles and source maps). This helps developers understand the organization of Bootstrap's compiled files.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/bootstrap-specialist-llms-context-20250406.md#2025-04-13_snippet_23\n\nLANGUAGE: text\nCODE:\n```\nbootstrap/\n├── css/\n│   ├── bootstrap-grid.css\n│   ├── bootstrap-grid.css.map\n│   ├── bootstrap-grid.min.css\n│   ├── bootstrap-grid.min.css.map\n│   ├── bootstrap-grid.rtl.css\n│   ├── bootstrap-grid.rtl.css.map\n│   ├── bootstrap-grid.rtl.min.css\n│   ├── bootstrap-grid.rtl.min.css.map\n│   ├── bootstrap-reboot.css\n│   ├── bootstrap-reboot.css.map\n│   ├── bootstrap-reboot.min.css\n│   ├── bootstrap-reboot.min.css.map\n│   ├── bootstrap-reboot.rtl.css\n│   ├── bootstrap-reboot.rtl.css.map\n│   ├── bootstrap-reboot.rtl.min.css\n│   ├── bootstrap-reboot.rtl.min.css.map\n│   ├── bootstrap-utilities.css\n│   ├── bootstrap-utilities.css.map\n│   ├── bootstrap-utilities.min.css\n│   ├── bootstrap-utilities.min.css.map\n│   ├── bootstrap-utilities.rtl.css\n│   ├── bootstrap-utilities.rtl.css.map\n│   ├── bootstrap-utilities.rtl.min.css\n│   ├── bootstrap-utilities.rtl.min.css.map\n│   ├── bootstrap.css\n│   ├── bootstrap.css.map\n│   ├── bootstrap.min.css\n│   ├── bootstrap.min.css.map\n│   ├── bootstrap.rtl.css\n│   ├── bootstrap.rtl.css.map\n│   ├── bootstrap.rtl.min.css\n│   └── bootstrap.rtl.min.css.map\n└── js/\n    ├── bootstrap.bundle.js\n    ├── bootstrap.bundle.js.map\n    ├── bootstrap.bundle.min.js\n    ├── bootstrap.bundle.min.js.map\n    ├── bootstrap.esm.js\n    ├── bootstrap.esm.js.map\n    ├── bootstrap.esm.min.js\n    ├── bootstrap.esm.min.js.map\n    ├── bootstrap.js\n    ├── bootstrap.js.map\n    ├── bootstrap.min.js\n    └── bootstrap.min.js.map\n```\n\n----------------------------------------\n\nTITLE: Combined Parameter Handling\nDESCRIPTION: Demonstrates handling multiple parameter types in a single endpoint.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/fastapi-developer-llms-context-20250406.md#2025-04-13_snippet_33\n\nLANGUAGE: python\nCODE:\n```\n@app.put(\"/items/{item_id}\")\nasync def create_item(item_id: int, item: Item, q: str | None = None):\n    result = {\"item_id\": item_id, **item.dict()}\n    if q:\n        result.update({\"q\": q})\n    return result\n```\n\n----------------------------------------\n\nTITLE: Defining Project Journal Structure in Markdown\nDESCRIPTION: This snippet outlines the new standardized, hierarchical structure for technical notes in the project journal. It shows the file path format used for logging specific events, decisions, or work summaries.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v3.0/README.md#2025-04-13_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nproject_journal/technical_notes/[mode_slug]/YYYY-MM-DD/YYYY-MM-DD_HH-MM-SS_[mode_slug]_brief-topic.md\n```\n\n----------------------------------------\n\nTITLE: Installing Next.js Dependencies with npm\nDESCRIPTION: Manually install the required packages for a Next.js application using npm. This includes next, react, and react-dom which are core dependencies for any Next.js project.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/nextjs-developer-llms-context-20250406.md#2025-04-13_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install next@latest react@latest react-dom@latest\n```\n\n----------------------------------------\n\nTITLE: Configuring Mode-specific Instructions for Boomerang Mode\nDESCRIPTION: Detailed instructions for the Boomerang Mode, specifying how to coordinate workflows, delegate tasks, and manage the overall process.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/knowledge/boomerang_tasks.md#2025-04-13_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nYour role is to coordinate complex workflows by delegating tasks to specialized modes. As an orchestrator, you should:\n\n1. When given a complex task, break it down into logical subtasks that can be delegated to appropriate specialized modes.\n\n2. For each subtask, use the `new_task` tool to delegate. Choose the most appropriate mode for the subtask's specific goal and provide comprehensive instructions in the `message` parameter. These instructions must include:\n    *   All necessary context from the parent task or previous subtasks required to complete the work.\n    *   A clearly defined scope, specifying exactly what the subtask should accomplish.\n    *   An explicit statement that the subtask should *only* perform the work outlined in these instructions and not deviate.\n    *   An instruction for the subtask to signal completion by using the `attempt_completion` tool, providing a concise yet thorough summary of the outcome in the `result` parameter, keeping in mind that this summary will be the source of truth used to keep track of what was completed on this project.\n    *   A statement that these specific instructions supersede any conflicting general instructions the subtask's mode might have.\n\n3. Track and manage the progress of all subtasks. When a subtask is completed, analyze its results and determine the next steps.\n\n4. Help the user understand how the different subtasks fit together in the overall workflow. Provide clear reasoning about why you're delegating specific tasks to specific modes.\n\n5. When all subtasks are completed, synthesize the results and provide a comprehensive overview of what was accomplished.\n\n6. Ask clarifying questions when necessary to better understand how to break down complex tasks effectively.\n\n7. Suggest improvements to the workflow based on the results of completed subtasks.\n\nUse subtasks to maintain clarity. If a request significantly shifts focus or requires a different expertise (mode), consider creating a subtask rather than overloading the current one.\n```\n\n----------------------------------------\n\nTITLE: Project Role References\nDESCRIPTION: List of specialized roles involved in the project execution including technical architects, developers, testers, and infrastructure specialists.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v3.0/User-Guide-v3.md#2025-04-13_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\nroo-commander\nproject-manager\ntechnical-architect\nui-designer\napi-developer\ndatabase-specialist\nfrontend-developer\nintegration-tester\nbug-fixer\ndevops-manager\ncicd-specialist\ninfrastructure-specialist\ndiscovery-agent\nsecretary\n```\n\n----------------------------------------\n\nTITLE: Declaring Union Types in TypeScript\nDESCRIPTION: Shows how to declare union types in TypeScript. Union types allow a variable to hold values of multiple types, providing flexibility while maintaining type safety.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/031-frontend/typescript-specialist/031-work-fe-typescript-specialist.mode.md#2025-04-13_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype StringOrNumber = string | number;\n```\n\n----------------------------------------\n\nTITLE: Logout Functionality with Session Management\nDESCRIPTION: Implementation of logout functionality using session management in Remix, including both action and component.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/remix-developer-llms-context-20250406.md#2025-04-13_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getSession, destroySession } from \"../sessions\";\n\nexport const action = async ({\n  request,\n}: ActionFunctionArgs) => {\n  const session = await getSession(\n    request.headers.get(\"Cookie\")\n  );\n  return redirect(\"/login\", {\n    headers: {\n      \"Set-Cookie\": await destroySession(session),\n    },\n  });\n};\n\nexport default function LogoutRoute() {\n  return (\n    <>\n      <p>Are you sure you want to log out?</p>\n      <Form method=\"post\">\n        <button>Logout</button>\n      </Form>\n      <Link to=\"/\">Never mind</Link>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering TailwindCSS Logo with Dark/Light Mode\nDESCRIPTION: HTML markup for displaying the TailwindCSS logo with responsive dark and light mode support using the picture element. Includes responsive image sizing and proper alt text.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/tailwind-specialist-llms-context-20250406.md#2025-04-13_snippet_10\n\nLANGUAGE: HTML\nCODE:\n```\n<p align=\"center\">\n  <a href=\"https://tailwindcss.com\" target=\"_blank\">\n    <picture>\n      <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://raw.githubusercontent.com/tailwindlabs/tailwindcss/HEAD/.github/logo-dark.svg\">\n      <source media=\"(prefers-color-scheme: light)\" srcset=\"https://raw.githubusercontent.com/tailwindlabs/tailwindcss/HEAD/.github/logo-light.svg\">\n      <img alt=\"Tailwind CSS\" src=\"https://raw.githubusercontent.com/tailwindlabs/tailwindcss/HEAD/.github/logo-light.svg\" width=\"350\" height=\"70\" style=\"max-width: 100%;\">\n    </picture>\n  </a>\n</p>\n```\n\n----------------------------------------\n\nTITLE: Yarn Project Creation Command\nDESCRIPTION: Shows the command for creating a new Astro project using yarn package manager\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/astro-developer-llms-context-20250406.md#2025-04-13_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n# create a new project with yarn\nyarn create astro\n```\n\n----------------------------------------\n\nTITLE: Displaying Apache License 2.0 Full Text\nDESCRIPTION: Complete text of the Apache License Version 2.0 that defines the terms and conditions for using, reproducing, and distributing MaterialX software. Includes detailed definitions, copyright and patent licenses, redistribution requirements, and liability terms.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/threejs-specialist-llms-context-20250406.md#2025-04-13_snippet_21\n\nLANGUAGE: text\nCODE:\n```\n-------------------------------------------------------------------------\n                              Apache License\n                        Version 2.0, January 2004\n                     http://www.apache.org/licenses/\n\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n   \"License\" shall mean the terms and conditions for use, reproduction,\n   and distribution as defined by Sections 1 through 9 of this document.\n\n   \"Licensor\" shall mean the copyright owner or entity authorized by\n   the copyright owner that is granting the License.\n\n   \"Legal Entity\" shall mean the union of the acting entity and all\n   other entities that control, are controlled by, or are under common\n   control with that entity. For the purposes of this definition,\n   \"control\" means (i) the power, direct or indirect, to cause the\n   direction or management of such entity, whether by contract or\n   otherwise, or (ii) ownership of fifty percent (50%) or more of the\n   outstanding shares, or (iii) beneficial ownership of such entity.\n\n   \"You\" (or \"Your\") shall mean an individual or Legal Entity\n   exercising permissions granted by this License.\n\n   \"Source\" form shall mean the preferred form for making modifications,\n   including but not limited to software source code, documentation\n   source, and configuration files.\n\n   \"Object\" form shall mean any form resulting from mechanical\n   transformation or translation of a Source form, including but\n   not limited to compiled object code, generated documentation,\n   and conversions to other media types.\n\n   \"Work\" shall mean the work of authorship, whether in Source or\n   Object form, made available under the License, as indicated by a\n   copyright notice that is included in or attached to the work\n   (an example is provided in the Appendix below).\n\n   \"Derivative Works\" shall mean any work, whether in Source or Object\n   form, that is based on (or derived from) the Work and for which the\n   editorial revisions, annotations, elaborations, or other modifications\n   represent, as a whole, an original work of authorship. For the purposes\n   of this License, Derivative Works shall not include works that remain\n   separable from, or merely link (or bind by name) to the interfaces of,\n   the Work and Derivative Works thereof.\n\n   \"Contribution\" shall mean any work of authorship, including\n   the original version of the Work and any modifications or additions\n   to that Work or Derivative Works thereof, that is intentionally\n   submitted to Licensor for inclusion in the Work by the copyright owner\n   or by an individual or Legal Entity authorized to submit on behalf of\n   the copyright owner. For the purposes of this definition, \"submitted\"\n   means any form of electronic, verbal, or written communication sent\n   to the Licensor or its representatives, including but not limited to\n   communication on electronic mailing lists, source code control systems,\n   and issue tracking systems that are managed by, or on behalf of, the\n   Licensor for the purpose of discussing and improving the Work, but\n   excluding communication that is conspicuously marked or otherwise\n   designated in writing by the copyright owner as \"Not a Contribution.\"\n\n   \"Contributor\" shall mean Licensor and any individual or Legal Entity\n   on behalf of whom a Contribution has been received by Licensor and\n   subsequently incorporated within the Work.\n\n2. Grant of Copyright License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   copyright license to reproduce, prepare Derivative Works of,\n   publicly display, publicly perform, sublicense, and distribute the\n   Work and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   (except as stated in this section) patent license to make, have made,\n   use, offer to sell, sell, import, and otherwise transfer the Work,\n   where such license applies only to those patent claims licensable\n   by such Contributor that are necessarily infringed by their\n   Contribution(s) alone or by combination of their Contribution(s)\n   with the Work to which such Contribution(s) was submitted. If You\n   institute patent litigation against any entity (including a\n   cross-claim or counterclaim in a lawsuit) alleging that the Work\n   or a Contribution incorporated within the Work constitutes direct\n   or contributory patent infringement, then any patent licenses\n   granted to You under this License for that Work shall terminate\n   as of the date such litigation is filed.\n\n4. Redistribution. You may reproduce and distribute copies of the\n   Work or Derivative Works thereof in any medium, with or without\n   modifications, and in Source or Object form, provided that You\n   meet the following conditions:\n\n   (a) You must give any other recipients of the Work or\n       Derivative Works a copy of this License; and\n\n   (b) You must cause any modified files to carry prominent notices\n       stating that You changed the files; and\n\n   (c) You must retain, in the Source form of any Derivative Works\n       that You distribute, all copyright, patent, trademark, and\n       attribution notices from the Source form of the Work,\n       excluding those notices that do not pertain to any part of\n       the Derivative Works; and\n\n   (d) If the Work includes a \"NOTICE\" text file as part of its\n       distribution, then any Derivative Works that You distribute must\n       include a readable copy of the attribution notices contained\n       within such NOTICE file, excluding those notices that do not\n       pertain to any part of the Derivative Works, in at least one\n       of the following places: within a NOTICE text file distributed\n```\n\n----------------------------------------\n\nTITLE: Task Completion Log Template in Markdown\nDESCRIPTION: Template for logging the final status, outcome, and summary of completed Supabase implementation tasks.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/032-backend/supabase-developer/032-work-be-supabase-developer.mode.md#2025-04-13_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n---\n**Status:** ✅ Complete\n**Outcome:** Success - Supabase Features Implemented\n**Summary:** Implemented user authentication with email/password and Google OAuth. Created database schema with profiles table and RLS policies for user-specific data access. Set up storage bucket for user avatars. Deployed an Edge Function for custom validation.\n**References:** [`src/lib/supabaseClient.js` (created), `src/routes/+page.svelte` (modified), `supabase/migrations/20250904_add_profiles.sql` (created), `supabase/functions/validate-data/index.ts` (created)]\n```\n\n----------------------------------------\n\nTITLE: Logging Task Completion in Markdown\nDESCRIPTION: Example of final content to be appended to the task log file, including status, outcome, summary, and references.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/033-database/database-specialist/033-work-db-database-specialist.mode.md#2025-04-13_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n---\n**Status:** ✅ Complete\n**Outcome:** Success\n**Summary:** Added 'orders' table with foreign key to 'users' via Prisma migration. Optimized user lookup query with new index. Collaborated with API Dev on access pattern. Delegated diagram update.\n**References:** [`prisma/schema.prisma` (modified), `prisma/migrations/...` (created), `project_journal/tasks/TASK-DIAG-XYZ.md` (diagram update), `project_journal/tasks/[TaskID].md` (this log)]\n```\n\n----------------------------------------\n\nTITLE: Creating Initial Task Log Example in Markdown\nDESCRIPTION: Example template for initializing a task log for a technical writing assignment, including the goal, subject, audience, purpose, and references.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/039-cross-functional/technical-writer/039-work-xf-technical-writer.mode.md#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Task Log: [TaskID] - Technical Writing: [final_document_path]\n\n**Goal:** Create/Update documentation: `[final_document_path]`\n**Subject:** [Brief subject description]\n**Audience:** [Target audience]\n**Purpose:** [Purpose of the documentation]\n**References:** [List of context files/links]\n```\n\n----------------------------------------\n\nTITLE: Security Fix for UserAttributeSimilarityValidator DoS Vulnerability\nDESCRIPTION: References a security update addressing CVE-2021-45115 where UserAttributeSimilarityValidator had a potential DoS vulnerability with artificially large password inputs. The fix implements length restrictions for comparison values.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/django-developer-llms-context-20250406.md#2025-04-13_snippet_40\n\nLANGUAGE: python\nCODE:\n```\nUserAttributeSimilarityValidator\n```\n\n----------------------------------------\n\nTITLE: Creating Final Task Log Summary for Discovery Agent\nDESCRIPTION: Markdown template for concluding the task log with status, outcome, summary, and references to the discovery report generated by the agent.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/040-assistant/discovery-agent/040-asst-discovery-agent.mode.md#2025-04-13_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n---\n**Status:** ✅ Complete\n**Outcome:** Success\n**Summary:** Project discovery and requirements gathering complete. Stack profile generated. Final report saved.\n**References:** [`project_journal/discovery/[TaskID]_discovery_report.md` (created)]\n```\n\n----------------------------------------\n\nTITLE: Creating Final Task Log Summary in Markdown\nDESCRIPTION: Template for documenting task completion summary including status, outcome, implementation details, and relevant file references.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/032-backend/api-developer/032-work-be-api-developer.mode.md#2025-04-13_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n---\n**Status:** ✅ Complete\n**Outcome:** Success\n**Summary:** Implemented GraphQL API for product catalog (queries, mutations). Added JWT authentication via Security Specialist delegation. Updated schema documentation.\n**References:** [`src/graphql/schema.gql`, `src/resolvers/productResolver.js`, `docs/api/schema.graphql` (updated), TaskLog-SecuritySpecialist-XYZ.md]\n```\n\n----------------------------------------\n\nTITLE: Implementing Directory Structure for MDTM in Agile Projects\nDESCRIPTION: Shows the recommended directory structure for organizing tasks by features or value streams in a Markdown-Driven Task Management system. This structure supports Agile workflows by grouping related items under feature folders with templates for consistency.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/knowledge/project-management/agile-principles/implementing.md#2025-04-13_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nPROJECT_ROOT/\n├── src/                     # Source Code\n├── docs/                    # Supporting Docs (Personas, Designs, etc.)\n├── tasks/                   # 👈 **Main MDTM Directory for Agile Items**\n│   ├── _templates/          # 📄 Standard templates (Highly Recommended)\n│   │   ├── 📖_user_story.md\n│   │   ├── 🛠️_task.md\n│   │   ├── 🐞_bug.md\n│   │   └── 💡_spike.md\n│   │\n│   ├── BACKLOG/             # 📥 Optional: Unrefined or unscheduled items\n│   │   └── IDEA_gamification_feature.md\n│   │\n│   ├── FEATURE_authentication/  # 🔑 Feature Area (Value Stream)\n│   │   ├── _overview.md       # 🗺️ Optional: Epic/Feature Definition\n│   │   ├── 001_📖_user_login_story.md   # 📖 A User Story\n│   │   ├── 002_🛠️_setup_auth_db_task.md # 🛠️ Supporting Technical Task\n│   │   ├── 003_🐞_incorrect_error_msg_bug.md # 🐞 Related Bug\n│   │   └── 004_📖_password_reset_story.md # 📖 Another User Story\n│   │\n│   ├── FEATURE_user_profile/  # 👤 Another Feature Area\n│   │   ├── _overview.md\n│   │   └── 005_📖_display_profile_story.md\n│   │\n│   └── AREA_performance/        # 🧹 Cross-cutting Area (e.g., Tech Debt)\n│       └── 006_💡_research_caching_spike.md # 💡 Research Task\n│\n├── archive/                 # 📦 Optional: Completed items (mirrors feature structure)\n│   └── FEATURE_authentication/\n│       └── ... (completed items from auth feature)\n└── README.md\n```\n\n----------------------------------------\n\nTITLE: Creating Task Completion Log in Markdown\nDESCRIPTION: Template for documenting task completion details including status, outcome, summary, and references to modified files.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/032-backend/firebase-developer/032-work-be-firebase-developer.mode.md#2025-04-13_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n---\n**Status:** ✅ Complete\n**Outcome:** Success - Firebase Features Implemented\n**Summary:** Implemented user authentication with email/password and Google OAuth. Created Firestore schema with security rules. Set up Cloud Functions for triggers. Configured Hosting.\n**References:** [`src/firebase.js` (created), `firestore.rules` (created), `functions/index.js` (created)]\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Front Matter for Scrum PBIs\nDESCRIPTION: Defines the YAML structure for Product Backlog Items including identification, core details, sprint attributes, tracking, and relationships.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/knowledge/project-management/scrum/README.md#2025-04-13_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\n# 🆔 PBI Identification & Core Details\nid:             # REQUIRED. Unique ID (e.g., STORY-001, BUG-003). Convention: {TYPE_PREFIX}-{NNN}\ntitle:          # REQUIRED. Human-readable title / Story summary.\nstatus:         # REQUIRED. Workflow state. See Statuses below. Crucial for Sprint tracking. \"🟡 Product Backlog\"\ntype:           # REQUIRED. PBI type. \"📖 User Story\", \"🐞 Bug\", etc. See Types.\n\n# 🏆 Product Backlog Attributes\npriority:       # Recommended for PO ordering. \"🔥 Highest\", \"🔼 High\", etc. See Priorities.\nvalue:          # Optional. Business value score/category.\nestimate_story_points: # Recommended. Team's relative effort estimate. E.g., 1, 2, 3, 5, 8, 13...\n\n# 🗓️ Sprint Backlog Attributes\nsprint:         # REQUIRED for items in a Sprint. Sprint identifier. \"Sprint 6 (Apr 22 - May 3)\" or \"Sprint 6\".\n# sprint_goal_contribution: # Optional. How this PBI contributes to the Sprint Goal.\n\n# ⏳ Tracking & Assignment\n# created_date:   # Optional. YYYY-MM-DD\nupdated_date:   # Recommended. YYYY-MM-DD. Auto-update ideally.\n# assigned_to:    # Optional. Can be assigned during Sprint. \"🧑‍💻 Dev:Bob\", \"🤖 AI\"\n\n# 🔗 Relationships & Context\nparent_feature: # Optional. Path to Feature/_overview.md.\n# depends_on:     # Optional. List of other PBI IDs this depends on.\nrelated_docs:   # Optional. Links to Designs, Personas, DoD. [\"docs/DefinitionOfDone.md\"]\ntags:           # Optional. Keywords for filtering. [\"frontend\", \"security\"]\n\n# ✅ Acceptance Criteria (Defined in body, but could have summary checklist here)\n# ac_summary: [\"[ ] Login succeeds\", \"[ ] Error shown\"]\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Secretary Mode File Permissions in JSON\nDESCRIPTION: This snippet shows the JSON configuration for restricting the secretary mode to only edit Markdown files within the project_journal directory. It uses a regular expression to enforce this permission.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v3.0/README.md#2025-04-13_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"fileRegex\": \"^project_journal\\/.*\\.md$\"\n```\n\n----------------------------------------\n\nTITLE: User Story Template in Markdown\nDESCRIPTION: Template for creating user stories with YAML frontmatter including status, type, priority and other metadata fields. Includes sections for story description, notes and acceptance criteria.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/knowledge/project-management/scrum/README.md#2025-04-13_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n---\nid:             # << GENERATE_ID (STORY-NNN) >>\ntitle:          # << As a User, I want..., So that... >>\nstatus:         \"🟡 Product Backlog\"\ntype:           \"📖 User Story\"\npriority:       \"▶️ Medium\"\nestimate_story_points: # << Points (e.g., 3, 5) >>\n# sprint:         # << Assigned during Sprint Planning >>\n# assigned_to:\nreporter:       # << PO or User Proxy >>\nparent_feature: # << Path to FEATURE/_overview.md >>\nrelated_docs:   [\"docs/DefinitionOfDone.md\"]\ntags:           []\n---\n\n# << As a User, I want..., So that... >>\n\n## User Story 📖\n> As a **...**,\n> I want **...**,\n> So that **...**.\n\n## Notes / Conversation 💬\n(Details, assumptions, decisions from refinement)\n\n## Acceptance Criteria ✅\n*   - [ ] Criterion 1 (Specific, Testable)\n*   - [ ] Criterion 2\n*   - [ ] ...\n```\n\n----------------------------------------\n\nTITLE: Defining Worker Department Classifications in Markdown\nDESCRIPTION: Detailed breakdown of worker-level (03x) department classifications including design, frontend, backend, database, QA, devops, and cross-functional roles\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/templates/mode_classification_guide.md#2025-04-13_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n* **`030-worker-design`**: Focuses on UI/UX design, visual creation, diagramming.\n* **`031-worker-frontend`**: Focuses on implementing the client-side of applications.\n* **`032-worker-backend`**: Focuses on server-side logic, APIs, and application integration.\n* **`033-worker-database`**: Focuses specifically on database design, querying, and administration.\n* **`034-worker-qa`**: Focuses on testing, quality assurance, and validation.\n* **`035-worker-devops`**: Focuses on CI/CD, infrastructure, containerization, deployment.\n* **`039-worker-cross-functional`**: Focuses on tasks supporting the overall development process.\n```\n\n----------------------------------------\n\nTITLE: Example of Asking Implementation Preferences\nDESCRIPTION: Shows how to use the ask_followup_question tool to inquire about styling preferences for a web application. Includes a question and three suggested answers that guide the user toward common styling approaches.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/knowledge/ask_followup_question.md#2025-04-13_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<ask_followup_question>\n<question>Which styling approach would you prefer for this web application?</question>\n<follow_up>\n<suggest>Use Bootstrap for rapid development with consistent components</suggest>\n<suggest>Use Tailwind CSS for utility-first styling with maximum flexibility</suggest>\n<suggest>Use vanilla CSS with custom styling for complete control and minimal dependencies</suggest>\n</follow_up>\n</ask_followup_question>\n```\n\n----------------------------------------\n\nTITLE: Creating a Responsive Animation Scope with Media Queries\nDESCRIPTION: Example of creating a scope with media queries to adjust animations based on screen size and user preferences. The animation adapts by changing its behavior, direction, and duration when viewed on smaller screens or when reduced motion is preferred.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/animejs-specialist-llms-context-20250406.md#2025-04-13_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nimport { animate, utils, createScope } from 'animejs';\n\ncreateScope({\n  mediaQueries: {\n    isSmall: '(max-width: 200px)',\n    reduceMotion: '(prefers-reduced-motion)',\n  }\n})\n.add(self => {\n\n  const { isSmall, reduceMotion } = self.matches;\n  \n  if (isSmall) {\n    utils.set('.square', { scale: .5 });\n  }\n    \n  animate('.square', {\n    x: isSmall ? 0 : ['-35vw', '35vw'],\n    y: isSmall ? ['-40vh', '40vh'] : 0,\n    loop: true,\n    alternate: true,\n    duration: reduceMotion ? 0 : isSmall ? 750 : 1250\n  });\n\n});\n```\n\n----------------------------------------\n\nTITLE: Displaying Project Journal Directory Structure in Markdown\nDESCRIPTION: This code snippet shows the standard directory structure created by the project-initializer mode for the project_journal/ directory. It includes subdirectories for planning, technical notes, formal docs, decision log, visualizations, and mode-specific memories.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v4.5/project_journal_summary.md#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- `project_journal/`\n  - `planning/`\n  - `technical_notes/`\n  - `formal_docs/`\n    - `adr/` (Intended for Architecture Decision Records, created by `technical-architect` via `secretary`)\n  - `decision_log/` (*Note: Directory created, but ADRs are typically placed in `formal_docs/adr/`*)\n  - `visualizations/`\n  - `memories/`\n    - `accessibility-specialist/`\n    - `api-developer/`\n    - `bug-fixer/`\n    - `cicd-specialist/`\n    - `code-reviewer/`\n    - `complex-problem-solver/`\n    - `containerization-developer/`\n    - `database-specialist/`\n    - `e2e-tester/`\n    - `file-repair-specialist/`\n    - `frontend-developer/`\n    - `git-manager/`\n    - `infrastructure-specialist/`\n    - `integration-tester/`\n    - `material-ui-specialist/`\n    - `performance-optimizer/`\n    - `php-laravel-developer/`\n    - `react-specialist/`\n    - `refactor-specialist/`\n    - `research-context-builder/`\n    - `second-opinion/`\n    - `security-specialist/`\n    - `tailwind-specialist/`\n    - `ui-designer/`\n```\n\n----------------------------------------\n\nTITLE: Configuring Role Definition for Boomerang Mode\nDESCRIPTION: Defines the core role and responsibilities of Roo as a strategic workflow orchestrator for the Boomerang Mode configuration.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/knowledge/boomerang_tasks.md#2025-04-13_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nYou are Roo, a strategic workflow orchestrator who coordinates complex tasks by delegating them to appropriate specialized modes. You have a comprehensive understanding of each mode's capabilities and limitations, allowing you to effectively break down complex problems into discrete tasks that can be solved by different specialists.\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Access\nDESCRIPTION: Accessing client-exposed environment variables in Vite applications\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/031-frontend/vite-specialist/031-work-fe-vite-specialist.mode.md#2025-04-13_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport.meta.env.VITE_VAR_NAME\n```\n\n----------------------------------------\n\nTITLE: Tool Mode Validation Function in TypeScript\nDESCRIPTION: Function signature for validating if a tool is allowed in a specific mode, checking against custom modes and tool requirements.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/knowledge/tool_use_overview.md#2025-04-13_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nisToolAllowedForMode(\n    tool: string,\n    modeSlug: string,\n    customModes: ModeConfig[],\n    toolRequirements?: Record<string, boolean>,\n    toolParams?: Record<string, any>\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Neon Serverless Driver with npm\nDESCRIPTION: Command to install the Neon serverless driver package using npm, which enables serverless PostgreSQL connections.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/neon-db-specialist-llms-context-20250406.md#2025-04-13_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @neondatabase/serverless\n```\n\n----------------------------------------\n\nTITLE: Fetching MCP Server Creation Instructions using XML\nDESCRIPTION: This XML snippet demonstrates how to use the fetch_instructions tool to retrieve guidance on setting up an MCP server environment. It's useful for users creating similar generator modes or needing to understand the setup process.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v4.5/ROO_MODE_SYSTEM.md#2025-04-13_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<fetch_instructions>\n<task>create_mcp_server</task>\n</fetch_instructions>\n```\n\n----------------------------------------\n\nTITLE: Unit Test Template for Commands in Three.js Editor\nDESCRIPTION: Provides a template for creating unit tests for undo/redo commands in the Three.js editor. Includes the basic setup with editor initialization and test objects, with placeholders for testing execute, undo, and redo operations.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/threejs-specialist-llms-context-20250406.md#2025-04-13_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmodule( \"DoSomethingCommand\" );\n\ntest(\"Test DoSomethingCommand (Undo and Redo)\", function() {\n\n    var editor = new Editor();\n\n    var box = aBox( 'Name your box' );\n\n    // other available objects from \"CommonUtilities.js\"\n    // var sphere = aSphere( 'Name your sphere' );\n    // var pointLight = aPointLight( 'Name your pointLight' );\n    // var perspectiveCamera = aPerspectiveCamera( 'Name your perspectiveCamera' );\n\n    // in most cases you'll need to add the object to work with\n    editor.execute( new AddObjectCommand( editor, box ) );\n\n\n    // your test begins here...\n\n\n} );\n```\n\n----------------------------------------\n\nTITLE: Creating and Populating a Blog Posts Table with tsvector in PostgreSQL\nDESCRIPTION: This SQL snippet demonstrates creating a table with a tsvector column for full-text search, inserting sample data, updating the search vector, and creating an index for improved search performance.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/neon-db-specialist-llms-context-20250406.md#2025-04-13_snippet_20\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE blog_posts (\n    id SERIAL PRIMARY KEY,\n    title TEXT NOT NULL,\n    content TEXT NOT NULL,\n    search_vector tsvector\n);\n\nINSERT INTO blog_posts (title, content)\nVALUES\n    ('PostgreSQL Full-Text Search', 'PostgreSQL offers powerful full-text search capabilities using tsvector and tsquery.'),\n    ('Indexing in Databases', 'Proper indexing is crucial for database performance. It can significantly speed up query execution.'),\n    ('ACID Properties', 'ACID (Atomicity, Consistency, Isolation, Durability) properties ensure reliable processing of database transactions.');\n\nUPDATE blog_posts\nSET search_vector = to_tsvector('english', title || ' ' || content);\n\nCREATE INDEX idx_search_vector ON blog_posts USING GIN (search_vector);\n```\n\n----------------------------------------\n\nTITLE: Loading KTX2 Textures with Three.js KTX2Loader\nDESCRIPTION: Shows how to use the KTX2Loader in Three.js to load and transcode .ktx2 textures. The snippet demonstrates setting the transcoder path, detecting renderer support, and loading a texture with success and error callbacks.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/threejs-specialist-llms-context-20250406.md#2025-04-13_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst ktx2Loader = new KTX2Loader();\nktx2Loader.setTranscoderPath( 'examples/jsm/libs/basis/' );\nktx2Loader.detectSupport( renderer );\nktx2Loader.load( 'diffuse.ktx2', function ( texture ) {\n\n\tconst material = new THREE.MeshStandardMaterial( { map: texture } );\n\n}, function () {\n\n\tconsole.log( 'onProgress' );\n\n}, function ( e ) {\n\n\tconsole.error( e );\n\n} );\n```\n\n----------------------------------------\n\nTITLE: Final Performance Task Log Summary Template in Markdown\nDESCRIPTION: A template for summarizing completed performance optimization tasks, including status, outcome, summary of actions taken, performance improvements achieved, and references to modified files or related documents.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/039-cross-functional/performance-optimizer/039-work-xf-performance-optimizer.mode.md#2025-04-13_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n```markdown\n---\n**Status:** ✅ Complete\n**Outcome:** Success - Goal Met\n**Summary:** Identified N+1 query issue in /orders API. Coordinated with DB Specialist (Task DB-456) to add index `idx_order_items_product_id`. Implemented eager loading in `OrderService.js`. Reduced P95 response time from 1200ms to 350ms (verified via k6 load test). Recommended monitoring P95 latency for this endpoint.\n**References:** [`src/services/OrderService.js` (modified), `project_journal/tasks/DB-456.md`, `project_journal/tasks/[TaskID].md#verification-results`, `project_journal/formal_docs/performance_report_[TaskID]_orders_api.md` (optional)]\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Root Layout in Remix\nDESCRIPTION: Creates a root layout component in Remix that provides the HTML structure for the application. Includes essential Remix components for handling links, meta tags, scripts, and rendering child routes through the Outlet component.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/remix-developer-llms-context-20250406.md#2025-04-13_snippet_21\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  Links,\n  Meta,\n  Outlet,\n  Scripts,\n  ScrollRestoration,\n} from \"@remix-run/react\";\n\nexport default function Root() {\n  return (\n    <html lang=\"en\">\n      <head>\n        <Links />\n        <Meta />\n      </head>\n      <body>\n        <Outlet />\n        <ScrollRestoration />\n        <Scripts />\n      </body>\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ScrollObserver with onLeave Callback\nDESCRIPTION: Sets up scroll-based animation with a counter that increments when an element leaves the viewport. Includes scroll container configuration and debug options.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/animejs-specialist-llms-context-20250406.md#2025-04-13_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nimport { animate, onScroll, utils } from 'animejs';\n\nconst [ $value ] = utils.$('.value');\n\nlet exits = 0;\n\nanimate('.square', {\n  x: '15rem',\n  rotate: '1turn',\n  ease: 'linear',\n  autoplay: onScroll({\n    container: '.scroll-container',\n    enter: 'bottom-=50 top',\n    leave: 'top+=60 bottom',\n    sync: true,\n    debug: true,\n    onLeave: () => $value.textContent = ++exits,\n  })\n});\n```\n\n----------------------------------------\n\nTITLE: BFF Pattern Loader Implementation in Remix TypeScript\nDESCRIPTION: Creates a loader function implementing the Backend-for-Frontend pattern with external API data fetching, authentication, and response transformation.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/remix-developer-llms-context-20250406.md#2025-04-13_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { LoaderFunctionArgs } from \"@remix-run/node\";\nimport { json } from \"@remix-run/node\";\nimport escapeHtml from \"escape-html\";\n\nexport async function loader({\n  request,\n}: LoaderFunctionArgs) {\n  const apiUrl = \"http://api.example.com/some-data.json\";\n  const res = await fetch(apiUrl, {\n    headers: {\n      Authorization: `Bearer ${process.env.API_TOKEN}`,\n    },\n  });\n\n  const data = await res.json();\n\n  const prunedData = data.map((record) => {\n    return {\n      id: record.id,\n      title: record.title,\n      formattedBody: escapeHtml(record.content),\n    };\n  });\n  return json(prunedData);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Evaluation Framework in Markdown\nDESCRIPTION: Template for documenting the evaluation framework assessment in the task log. It structures the analysis across seven key dimensions: correctness, efficiency, robustness, scalability, simplicity, standards compliance, and security.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/039-cross-functional/second-opinion/039-work-xf-second-opinion.mode.md#2025-04-13_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n```markdown\n## Evaluation Framework\n\n**Correctness:** [Assessment]\n**Efficiency:** [Assessment]\n**Robustness:** [Assessment]\n**Scalability:** [Assessment]\n**Simplicity:** [Assessment]\n**Standards Compliance:** [Assessment]\n**Security:** [Assessment]\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Component Data in Vue\nDESCRIPTION: This snippet demonstrates how to define the initial reactive state for a Vue component using the data option. It returns a plain JavaScript object that becomes reactive, accessible via this.$data.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/vuejs-developer-llms-context-20250406.md#2025-04-13_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  data() {\n    return { a: 1 }\n  },\n  created() {\n    console.log(this.a) // 1\n    console.log(this.$data) // { a: 1 }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Animation Targets\nDESCRIPTION: HTML markup showing span elements arranged in a grid to spell 'HELLO WORLD'. These elements would be targeted by animations in the examples.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/animejs-specialist-llms-context-20250406.md#2025-04-13_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<h2 class=\"large grid centered square-grid text-xl\">\n  <span>H</span>\n  <span>E</span>\n  <span>L</span>\n  <span>L</span>\n  <span>O</span>\n  <span>&nbsp;</span>\n  <span>W</span>\n  <span>O</span>\n  <span>R</span>\n  <span>L</span>\n  <span>D</span>\n</h2>\n```\n\n----------------------------------------\n\nTITLE: Testing FastAPI Applications with TestClient\nDESCRIPTION: Demonstrates how to use FastAPI's TestClient for writing tests against API endpoints. This approach allows for comprehensive testing without needing to run a live server.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/condensed_indices/fastapi-developer-condensed-index.md#2025-04-13_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nfrom fastapi.testclient import TestClient\nfrom .main import app\n\nclient = TestClient(app)\n\ndef test_read_main():\n    response = client.get(\"/\")\n    assert response.status_code == 200\n    assert response.json() == {\"message\": \"Hello World\"}\n```\n\n----------------------------------------\n\nTITLE: Computing Projected Planar Bounding Box in D3\nDESCRIPTION: Illustrates how to use the bounds method of a path generator to compute the projected planar bounding box of a GeoJSON object. Returns an array of two points representing the top-left and bottom-right corners.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/d3js-specialist-llms-context-20250406.md#2025-04-13_snippet_44\n\nLANGUAGE: javascript\nCODE:\n```\npath.bounds(california) // [[18.48513821663947, 159.95146883594333], [162.7651668852596, 407.09641570706725]]\n```\n\n----------------------------------------\n\nTITLE: Defining and Using the Omit Helper Type in TypeScript\nDESCRIPTION: Shows how to use the built-in Omit utility type which creates a new type by excluding specified properties from an existing type. The example removes the 'location' property from a Person type.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/typescript-specialist-llms-context-20250406.md#2025-04-13_snippet_56\n\nLANGUAGE: typescript\nCODE:\n```\ntype Person = {\n  name: string;\n  age: number;\n  location: string;\n};\n\ntype QuantumPerson = Omit<Person, \"location\">;\n\n// equivalent to\ntype QuantumPerson = {\n  name: string;\n  age: number;\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing DRACOLoader in Three.js\nDESCRIPTION: Demonstrates how to set up and configure a DRACOLoader instance in a Three.js project. It shows how to set the decoder path and provides an optional configuration to override WebAssembly (WASM) support detection.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/threejs-specialist-llms-context-20250406.md#2025-04-13_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar dracoLoader = new DRACOLoader();\ndracoLoader.setDecoderPath('path/to/decoders/');\ndracoLoader.setDecoderConfig({type: 'js'}); // (Optional) Override detection of WASM support.\n```\n\n----------------------------------------\n\nTITLE: Detecting MDTM Tasks using Regular Expression in Markdown\nDESCRIPTION: A regular expression pattern to identify incoming messages that indicate an MDTM task file. This pattern checks if the message starts with 'Process task file:' followed by a file path in backticks.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v6.0/changes/specialist-mode-mdtm-implementation-guide.md#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n^Process task file: \\`(.*)\\`\n```\n\n----------------------------------------\n\nTITLE: Defining Reactive Data Structure with Vue Composition API\nDESCRIPTION: This snippet shows how to define a reactive data structure in Vue using the Composition API. It creates a reactive author object with nested properties using the reactive function.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/vuejs-developer-llms-context-20250406.md#2025-04-13_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nconst author = reactive({\n  name: 'John Doe',\n  books: [\n    'Vue 2 - Advanced Guide',\n    'Vue 3 - Basic Guide',\n    'Vue 4 - The Mystery'\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Task Completion Log Entry in Markdown\nDESCRIPTION: Template for logging the completion of an analysis task, including status, outcome, recommendation summary, and references to detailed reports.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/039-cross-functional/complex-problem-solver/039-work-xf-complex-problem-solver.mode.md#2025-04-13_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n---\n**Status:** ✅ Complete\n**Outcome:** Success (Recommendation Provided)\n**Recommendation Summary:** Refactor service X using async pattern and implement caching layer Y. See report for details.\n**References:** [`project_journal/analysis_reports/analysis_report_[TaskID]_api_perf.md` (created)]\n```\n\n----------------------------------------\n\nTITLE: Registering Lifecycle Hook with Options API in Vue\nDESCRIPTION: This snippet shows how to register a mounted lifecycle hook using Vue's Options API. The hook logs a message to the console when the component is mounted to the DOM.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/vuejs-developer-llms-context-20250406.md#2025-04-13_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  mounted() {\n    console.log(`the component is now mounted.`)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching MCP Server Creation Instructions Using XML Command\nDESCRIPTION: XML snippet that demonstrates how to use the fetch_instructions tool with the create_mcp_server task to retrieve foundational guidance for setting up an MCP server environment.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/ROO_MODE_SYSTEM.md#2025-04-13_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<fetch_instructions>\n<task>create_mcp_server</task>\n</fetch_instructions>\n```\n\n----------------------------------------\n\nTITLE: Importing and Creating a Timeline in AnimeJS\nDESCRIPTION: Basic syntax for importing the createTimeline function from AnimeJS and creating a new timeline instance. The timeline can be configured with optional parameters for playback settings and callbacks.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/animejs-specialist-llms-context-20250406.md#2025-04-13_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createTimeline } from 'animejs';\n\nconst timeline = createTimeline(parameters);\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Area Generator in D3.js\nDESCRIPTION: Demonstrates how to create a basic area generator with x, y0, and y1 accessors for mapping data points to coordinates. This is typically used for creating area charts.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/d3js-specialist-llms-context-20250406.md#2025-04-13_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nconst area = d3.area((d) => x(d.Date), y(0), (d) => y(d.Close));\n```\n\n----------------------------------------\n\nTITLE: Example Roo Mode Bundling Script Execution with Full Paths\nDESCRIPTION: Complete example of running the bundling script with full paths for source modes, collections file, and output directory.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v6.4/tools/bundle_modes_collections_sop.md#2025-04-13_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnode dev_tools/bundle_modes_collections_with_core.js --source v6.3/modes --collections dev_tools/mode_collections_wrapped.json --outputBaseDir v6.4/modes\n```\n\n----------------------------------------\n\nTITLE: Executing a Command in Three.js Editor\nDESCRIPTION: Shows how to execute a command using the editor object. When a command is executed, it's added to the editor's history stack, enabling undo/redo functionality.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/threejs-specialist-llms-context-20250406.md#2025-04-13_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\neditor.execute( new DoSomethingCommand() );\n```\n\n----------------------------------------\n\nTITLE: Vue Conditional Rendering with v-if/v-else\nDESCRIPTION: Demonstrates toggling between two states using v-if and v-else directives with a button trigger.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/vuejs-developer-llms-context-20250406.md#2025-04-13_snippet_42\n\nLANGUAGE: vue-html\nCODE:\n```\n<button @click=\"awesome = !awesome\">Toggle</button>\n\n<h1 v-if=\"awesome\">Vue is awesome!</h1>\n<h1 v-else>Oh no 😢</h1>\n```\n\n----------------------------------------\n\nTITLE: Basic Directory Walking Implementation\nDESCRIPTION: Rust code demonstrating basic directory traversal with error handling using the ignore crate.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/tailwind-specialist-llms-context-20250406.md#2025-04-13_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nuse ignore::Walk;\n\nfor result in Walk::new(\"./\") {\n    // Each item yielded by the iterator is either a directory entry or an\n    // error, so either print the path or the error.\n    match result {\n        Ok(entry) => println!(\"{}\", entry.path().display()),\n        Err(err) => println!(\"ERROR: {}\", err),\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Task Log Template - FastAPI Implementation\nDESCRIPTION: Markdown template for logging FastAPI development tasks, including goal specification, context, status tracking, and outcome documentation.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/032-backend/fastapi-developer/032-work-be-fastapi-developer.mode.md#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Task Log: [TaskID] - FastAPI Feature: [Feature Purpose]\n\n**Goal:** Implement [brief goal, e.g., WebSocket endpoint for real-time updates].\n**Context:** [Link to Stack Profile/Requirements Doc]\n```\n\n----------------------------------------\n\nTITLE: Setting Curve Type for Line Generator in D3.js\nDESCRIPTION: Demonstrates how to specify a custom curve type for the line generator using d3.curveStep. This affects how the line generator interpolates between data points.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/d3js-specialist-llms-context-20250406.md#2025-04-13_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\nconst line = d3.line().curve(d3.curveStep);\n```\n\n----------------------------------------\n\nTITLE: Running Roo Mode Bundling Script with Parameters\nDESCRIPTION: Command to execute the bundling script (bundle_modes_collections_with_core.js) with parameters for source directory, collections file, and output directory.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v6.4/tools/bundle_modes_collections_sop.md#2025-04-13_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnode bundle_modes_collections_with_core.js --source <source_dir> --collections <collections_file> --outputBaseDir <output_dir>\n```\n\n----------------------------------------\n\nTITLE: Including Test File Reference - HTML\nDESCRIPTION: Demonstrates how to include the test file reference in the Undo-Redo tests section of the test suite.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/threejs-specialist-llms-context-20250406.md#2025-04-13_snippet_19\n\nLANGUAGE: html\nCODE:\n```\n// <!-- Undo-Redo tests -->\n//...\n<script src=\"editor/TestAddScriptCommand.js\"></script>\n<script src=\"editor/TestDoSomethingCommand.js\"></script>              // add this line\n<script src=\"editor/TestMoveObjectCommand.js\"></script>\n//...\n```\n\n----------------------------------------\n\nTITLE: Using Bootstrap CSS custom properties\nDESCRIPTION: This CSS snippet demonstrates the use of Bootstrap's CSS custom properties (variables) for customization. It's an alternative to Sass variables and allows for runtime changes.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/031-frontend/bootstrap-specialist/031-work-fe-bootstrap-specialist.mode.md#2025-04-13_snippet_7\n\nLANGUAGE: CSS\nCODE:\n```\n--bs-primary: #your-custom-color;\n```\n\n----------------------------------------\n\nTITLE: Declaring Tuple Types in TypeScript\nDESCRIPTION: Shows how to declare tuple types in TypeScript. Tuples are arrays with a fixed number of elements where each element may have a different type.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/031-frontend/typescript-specialist/031-work-fe-typescript-specialist.mode.md#2025-04-13_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype Pair = [string, number];\n```\n\n----------------------------------------\n\nTITLE: Creating Year Archive View in Django\nDESCRIPTION: Implements a view function that filters articles by year and renders them using a template.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/django-developer-llms-context-20250406.md#2025-04-13_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom django.shortcuts import render\n\nfrom .models import Article\n\n\ndef year_archive(request, year):\n    a_list = Article.objects.filter(pub_date__year=year)\n    context = {\"year\": year, \"article_list\": a_list}\n    return render(request, \"news/year_archive.html\", context)\n```\n\n----------------------------------------\n\nTITLE: Creating Generic Functions in TypeScript\nDESCRIPTION: Shows how to create a generic function in TypeScript. Generics allow for the creation of reusable components that work with multiple types.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/v7.0/modes/03x-worker/031-frontend/typescript-specialist/031-work-fe-typescript-specialist.mode.md#2025-04-13_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction identity<T>(arg: T): T { return arg; }\n```\n\n----------------------------------------\n\nTITLE: Vue Conditional Rendering with v-if\nDESCRIPTION: Shows basic conditional rendering using v-if directive. Element is only rendered when the condition evaluates to true.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/vuejs-developer-llms-context-20250406.md#2025-04-13_snippet_37\n\nLANGUAGE: vue-html\nCODE:\n```\n<h1 v-if=\"awesome\">Vue is awesome!</h1>\n```\n\n----------------------------------------\n\nTITLE: Vue Reactive Watch Implementation\nDESCRIPTION: Demonstrates watch functionality for reactive state tracking with TypeScript type definitions and JavaScript usage example.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/vuejs-developer-llms-context-20250406.md#2025-04-13_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nfunction watch<T>(\n  source: WatchSource<T>,\n  callback: WatchCallback<T>,\n  options?: WatchOptions\n): WatchHandle\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst state = reactive({ count: 0 })\nwatch(\n  () => state.count,\n  (count, prevCount) => {\n    /* ... */\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Form Status Management with useState\nDESCRIPTION: Managing form submission state using enumerated status values\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/react-specialist-llms-context-20250406.md#2025-04-13_snippet_40\n\nLANGUAGE: jsx\nCODE:\n```\nconst [status, setStatus] = useState('typing');\n\nasync function handleSubmit(e) {\n  e.preventDefault();\n  setStatus('sending');\n  await sendMessage(text);\n  setStatus('sent');\n}\n\nconst isSending = status === 'sending';\nconst isSent = status === 'sent';\n```\n\n----------------------------------------\n\nTITLE: Basic v-model Input Binding\nDESCRIPTION: Shows two-way data binding between template and component state using v-model directive.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/vuejs-developer-llms-context-20250406.md#2025-04-13_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<p>Message is: {{ message }}</p>\n<input v-model=\"message\" placeholder=\"edit me\" />\n```\n\n----------------------------------------\n\nTITLE: Linking to Examples in Three.js Documentation\nDESCRIPTION: Shows the correct format for linking to Three.js examples within the documentation using Markdown syntax.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/threejs-specialist-llms-context-20250406.md#2025-04-13_snippet_17\n\nLANGUAGE: markdown\nCODE:\n```\n[example:exampleName title]\n```\n\n----------------------------------------\n\nTITLE: Watching for Data Changes in Vue.js\nDESCRIPTION: Demonstrates how to watch for changes in reactive data and execute a callback when changes occur.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/condensed_indices/vuejs-developer-condensed-index.md#2025-04-13_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nwatch(source, callback, options?)\n```\n\n----------------------------------------\n\nTITLE: Basic Path Parameter Implementation\nDESCRIPTION: Shows basic path parameter handling in FastAPI route.\nSOURCE: https://github.com/jezweb/roo-commander.git/blob/main/project_journal/context/source_docs/fastapi-developer-llms-context-20250406.md#2025-04-13_snippet_27\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id):\n    return {\"item_id\": item_id}\n```"
  }
]