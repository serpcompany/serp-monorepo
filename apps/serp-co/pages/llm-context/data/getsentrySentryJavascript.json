[
  {
    "owner": "getsentry",
    "repo": "sentry-javascript",
    "content": "TITLE: Initializing Sentry SDK in React Application - JavaScript\nDESCRIPTION: This snippet illustrates how to initialize the Sentry SDK within a React app using the @sentry/react package. It requires installing @sentry/react and @sentry/browser as dependencies. The Sentry.init function should be called before mounting the main React component, with the 'dsn' parameter set to your project's DSN from Sentry. The snippet also shows rendering the root component with createRoot and notes compatibility with hydrateRoot for server-side rendering scenarios. Expected input includes Sentry configuration options, primarily 'dsn'. Outputs are error and performance monitoring tied to the initialized options.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/react/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from 'react';\nimport { createRoot } from 'react-dom/client';\nimport * as Sentry from '@sentry/react';\n\nSentry.init({\n  dsn: '__DSN__',\n  // ...\n});\n\n// ...\n\nconst container = document.getElementById(“app”);\nconst root = createRoot(container);\nroot.render(<App />);\n\n// also works with hydrateRoot\n// const domNode = document.getElementById('root');\n// const root = hydrateRoot(domNode, reactNode);\n// root.render(<App />);\n```\n\n----------------------------------------\n\nTITLE: Initializing Sentry in NestJS\nDESCRIPTION: This code snippet initializes the Sentry SDK within a NestJS application using `Sentry.init()`. It requires a Sentry DSN (Data Source Name) for configuration. This initialization should occur before any other modules are imported to ensure proper instrumentation.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/nestjs/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as Sentry from '@sentry/nestjs';\n\nSentry.init({\n  dsn: '__DSN__',\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Sentry Browser SDK with JavaScript\nDESCRIPTION: Initializes the official Sentry Browser SDK by calling Sentry.init with a configuration object containing at least the DSN (Data Source Name). This snippet demonstrates how to import the SDK and configure it to hook into the browser environment early in the application's lifecycle. The dsn parameter is required to identify the project in Sentry. Additional options can be provided for fine-tuning behavior and disabling side effects.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/browser/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as Sentry from '@sentry/browser';\n\nSentry.init({\n  dsn: '__DSN__',\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Sentry SDK - JavaScript\nDESCRIPTION: This snippet demonstrates how to initialize the Sentry SDK in a JavaScript project. It imports the necessary module, initializes the SDK with a DSN, and then captures a message.  This is a fundamental step for integrating Sentry into a JavaScript application.  It requires the `@sentry/browser` package or similar high level SDK. The DSN is a unique identifier that links the application to a Sentry project.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Sentry from '@sentry/browser';\n\nSentry.init({\n  dsn: '__DSN__',\n  // ...\n});\n\nSentry.captureMessage('Hello, world!');\n```\n\n----------------------------------------\n\nTITLE: Initializing Sentry Browser Tracing Integration in JavaScript (@sentry/browser, @sentry/svelte, @sentry/gatsby)\nDESCRIPTION: This snippet shows initializing Sentry in JavaScript for projects using '@sentry/browser', '@sentry/svelte', or '@sentry/gatsby' packages. It demonstrates best practice for enabling browser tracing via the new functional integration method 'browserTracingIntegration'. Ensure the latest SDK version and matching package for your application type. This setup is required for capturing performance traces in browser-based apps.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/migration/v7-to-v8.md#_snippet_55\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as Sentry from '@sentry/browser';\n\nSentry.init({\n  integrations: [Sentry.browserTracingIntegration()],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Sentry - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to configure the Sentry SDK within the `astro.config.mjs` file. It uses the `defineConfig` function from Astro and integrates Sentry with the provided DSN and source maps upload configuration, including the project slug and authentication token. The DSN (Data Source Name) and SENTRY_AUTH_TOKEN are required for sending events and uploading source maps respectively.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/astro/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from 'astro/config';\nimport sentry from '@sentry/astro';\n\nexport default defineConfig({\n  integrations: [\n    sentry({\n      dsn: '__DSN__',\n      sourceMapsUploadOptions: {\n        project: 'your-sentry-project-slug',\n        authToken: process.env.SENTRY_AUTH_TOKEN,\n      },\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Migrating Replay Integration Imports to Browser SDK - JavaScript\nDESCRIPTION: Shows the change of how to import Replay integration after removal of the '@sentry/replay' package in v8. Replay functionality must now be imported directly from the browser SDK or framework-specific packages such as '@sentry/browser' or '@sentry/react'. This snippet simplifies usage and consolidates SDK imports.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/migration/v7-to-v8.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n// v7\nimport { Replay } from '@sentry/replay';\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { replayIntegration } from '@sentry/browser';\n```\n\n----------------------------------------\n\nTITLE: Initializing Sentry SDK in Angular (JavaScript)\nDESCRIPTION: Initializes the Sentry SDK using `init` before bootstrapping the Angular application. This is the fundamental step to enable Sentry monitoring. Requires `@angular/platform-browser` and `@sentry/angular`.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/angular/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { bootstrapApplication } from '@angular/platform-browser';\nimport { init } from '@sentry/angular';\n\nimport { AppComponent } from './app/app.component';\n\ninit({\n  dsn: '__DSN__',\n  // ...\n});\n\nbootstrapApplication(AppComponent, appConfig);\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Spans in Angular (JavaScript)\nDESCRIPTION: Demonstrates how to manually create custom performance spans using `startSpan` from `@sentry/angular`. This example wraps the Angular bootstrapping process (`platformBrowserDynamic().bootstrapModule`) to measure its duration.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/angular/README.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\nimport { init, startSpan } from '@sentry/angular';\n\nimport { AppModule } from './app/app.module';\n\n// ...\nstartSpan(\n  {\n    name: 'platform-browser-dynamic',\n    op: 'ui.angular.bootstrap',\n  },\n  async () => {\n    await platformBrowserDynamic().bootstrapModule(AppModule);\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Sentry SDK with Performance Monitoring and Session Replay\nDESCRIPTION: Demonstrates how to initialize the Sentry SDK with browser tracing and session replay integrations. Includes configuration for trace sampling, replay session sampling, and trace propagation targets for distributed tracing.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/gatsby/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Sentry from '@sentry/gatsby';\n\nSentry.init({\n  dsn: '__PUBLIC_DSN__',\n  integrations: [Sentry.browserTracingIntegration(), Sentry.replayIntegration()],\n\n  // Set tracesSampleRate to 1.0 to capture 100%\n  // of transactions for performance monitoring.\n  // We recommend adjusting this value in production\n  tracesSampleRate: 1.0,\n\n  // Capture Replay for 10% of all sessions,\n  // plus for 100% of sessions with an error\n  replaysSessionSampleRate: 0.1,\n  replaysOnErrorSampleRate: 1.0,\n\n  // Set `tracePropagationTargets` to control for which URLs distributed tracing should be enabled\n  tracePropagationTargets: ['localhost', /^https:\\/\\/yourserver\\.io\\/api/],\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Sentry with Session Replay Integration - JavaScript\nDESCRIPTION: This snippet demonstrates the standard way to initialize Sentry and include the Session Replay integration. It shows how to configure session and error-based sampling rates and pass additional options to the replay integration constructor. Requires `@sentry/browser` or a framework-specific Sentry SDK.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/replay-internal/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Sentry from '@sentry/browser';\n// or e.g. import * as Sentry from '@sentry/react';\n\nSentry.init({\n  dsn: '__DSN__',\n\n  // This sets the sample rate to be 10%. You may want this to be 100% while\n  // in development and sample at a lower rate in production\n  replaysSessionSampleRate: 0.1,\n\n  // If the entire session is not sampled, use the below sample rate to sample\n  // sessions when an error occurs.\n  replaysOnErrorSampleRate: 1.0,\n\n  integrations: [\n    Sentry.replayIntegration({\n      // Additional SDK configuration goes in here, for example:\n      maskAllText: true,\n      blockAllMedia: true,\n      // See below for all available options\n    }),\n  ],\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Example usage of startSpan() for automatic span management in JavaScript\nDESCRIPTION: Demonstrates how to create a span that automatically manages its lifecycle using the startSpan() API, including handling asynchronous operations and automatic error status updates.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/v8-new-performance-apis.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nSentry.startSpan(\n  {\n    name: 'my-span',\n    attributes: {\n      attr1: 'my-attribute',\n      attr2: 123,\n    },\n  },\n  span => {\n    // do something that you want to measure\n    // once this is done, the span is automatically ended\n  },\n);\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nSentry.startSpan(\n  {\n    name: 'my-span',\n    attributes: {},\n  },\n  async span => {\n    // do something that you want to measure\n    await waitOnSomething();\n    // once this is done, the span is automatically ended\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Using SentryCron Decorator in NestJS\nDESCRIPTION: This code snippet demonstrates using the `@SentryCron()` decorator to augment the native NestJS `@Cron` decorator. It sends check-ins to Sentry before and after each cron job run, allowing you to monitor your cron jobs in Sentry. It also showcases the use of MonitorConfig to configure the monitor within Sentry.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/nestjs/README.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Cron } from '@nestjs/schedule';\nimport { SentryCron, MonitorConfig } from '@sentry/nestjs';\nimport type { MonitorConfig } from '@sentry/core';\n\nconst monitorConfig: MonitorConfig = {\n  schedule: {\n    type: 'crontab',\n    value: '* * * * *',\n  },\n  checkinMargin: 2, // In minutes. Optional.\n  maxRuntime: 10, // In minutes. Optional.\n  timezone: 'America/Los_Angeles', // Optional.\n};\n\nexport class MyCronService {\n  @Cron('* * * * *')\n  @SentryCron('my-monitor-slug', monitorConfig)\n  handleCron() {\n    // Your cron job logic here\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Sentry Integrations in JavaScript (v7 vs v8)\nDESCRIPTION: Compares Sentry v7 and v8 initialization syntax for integrations. V7 used class instantiation (e.g., `new Sentry.BrowserTracing()`), while v8 uses functional invocation (e.g., `Sentry.browserTracingIntegration()`). This change simplifies the integration setup process in Sentry SDK v8 as class-based integrations have been removed.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/CHANGELOG.md#_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\n// old (v7)\nSentry.init({\n  integrations: [new Sentry.BrowserTracing()],\n});\n\n// new (v8)\nSentry.init({\n  integrations: [Sentry.browserTracingIntegration()],\n});\n```\n\n----------------------------------------\n\nTITLE: Wrapping Background Event Functions with Sentry in Google Cloud - JavaScript\nDESCRIPTION: This code shows how to instrument a background (event-driven) Google Cloud Function for Sentry monitoring by wrapping the handler in 'Sentry.wrapEventFunction'. Any uncaught errors thrown within the handler are automatically intercepted and recorded by Sentry for monitoring and debugging. This method requires '@sentry/google-cloud-serverless' as a dependency. The function accepts 'data', 'context', and 'callback' parameters matching typical background triggers, and outputs a Sentry-instrumented function export.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/google-cloud-serverless/README.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nexports.helloEvents = Sentry.wrapEventFunction((data, context, callback) => {\n  throw new Error('oh, hello there!');\n});\n```\n\n----------------------------------------\n\nTITLE: Manually Capturing Exceptions in Bun with Sentry SDK (TypeScript)\nDESCRIPTION: Provides a TypeScript example demonstrating how to manually capture exceptions using a try-catch block and calling `Sentry.captureException`. This approach is necessary because Bun does not yet support automatic capturing of unhandled exceptions or promise rejections.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/bun/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as Sentry from '@sentry/bun';\n\ntry {\n  throw new Error('test');\n} catch (e) {\n  Sentry.captureException(e);\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Sentry with browserTracingIntegration and enableInp option in JavaScript\nDESCRIPTION: This snippet demonstrates how to initialize the Sentry SDK in a JavaScript environment with the browserTracingIntegration enabled and the 'enableInp' option set to true. This activation opts in to support INP (Interaction to Next Paint) web vital tracking, currently available for SaaS Sentry and upcoming self-hosted releases. The snippet requires the Sentry SDK to be installed and imported correctly in the project environment. The expected input is a configuration object passed to Sentry.init, and the output is the initialization of Sentry with enhanced performance monitoring capabilities including INP metrics. The snippet contains a minor syntax error with a semicolon inside the integrations array that should be corrected.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/changelog/v7.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nSentry.init({\n  integrations: [\n    Sentry.browserTracingIntegration({\n      enableInp: true\n    })\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring React 19 Error Hooks with Sentry.reactErrorHandler - JavaScript\nDESCRIPTION: This snippet demonstrates integrating Sentry with React 19's createRoot and hydrateRoot error hooks by passing Sentry.reactErrorHandler to onUncaughtError, onCaughtError, and onRecoverableError callbacks. Prerequisites include React 19+ and @sentry/react. Key parameters are error and errorInfo for onUncaughtError. This approach enables automatic error collection through React's rendering lifecycle and allows custom logic for uncaught exceptions. Inputs are error objects from React, outputs are captured Sentry error events with optional custom handling.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/react/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst container = document.getElementById(“app”);\nconst root = createRoot(container, {\n  // Callback called when an error is thrown and not caught by an Error Boundary.\n  onUncaughtError: Sentry.reactErrorHandler((error, errorInfo) => {\n    console.warn('Uncaught error', error, errorInfo.componentStack);\n  }),\n  // Callback called when React catches an error in an Error Boundary.\n  onCaughtError: Sentry.reactErrorHandler(),\n  // Callback called when React automatically recovers from errors.\n  onRecoverableError: Sentry.reactErrorHandler(),\n});\nroot.render(<App />);\n```\n\n----------------------------------------\n\nTITLE: Wrapping Remix Root Component with Sentry HOC (TypeScript/TSX)\nDESCRIPTION: Illustrates how to wrap the main application component defined in `root.tsx` using the `withSentry` higher-order component from `@sentry/remix`. This integration is essential for capturing React rendering errors and obtaining detailed, parameterized transaction data for performance monitoring.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/remix/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// root.tsx\n\nimport {\n  Links,\n  LiveReload,\n  Meta,\n  Outlet,\n  Scripts,\n  ScrollRestoration,\n} from \"@remix-run/react\";\n\nimport { withSentry } from \"@sentry/remix\";\n\nfunction App() {\n  return (\n    <html>\n      <head>\n        <Meta />\n        <Links />\n      </head>\n      <body>\n        <Outlet />\n        <ScrollRestoration />\n        <Scripts />\n        <LiveReload />\n      </body>\n    </html>\n  );\n}\n\nexport default withSentry(App);\n```\n\n----------------------------------------\n\nTITLE: Configuring Sentry ErrorHandler in Angular (TypeScript)\nDESCRIPTION: Provides a custom Angular ErrorHandler using `createErrorHandler` from `@sentry/angular`. This automatically captures and sends unhandled errors to Sentry. It shows configuration for both standalone components (`ApplicationConfig`) and NgModules. The `showDialog` option can be used to display Sentry's user feedback dialog.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/angular/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApplicationConfig, NgModule, ErrorHandler } from '@angular/core';\nimport { createErrorHandler } from '@sentry/angular';\n\nexport const appConfig: ApplicationConfig = {\n  providers: [\n    {\n      provide: ErrorHandler,\n      useValue: createErrorHandler({\n        showDialog: true,\n      }),\n    },\n  ],\n};\n\n// Or using an old module approach:\n@NgModule({\n  // ...\n  providers: [\n    {\n      provide: ErrorHandler,\n      useValue: createErrorHandler({\n        showDialog: true,\n      }),\n    },\n  ],\n  // ...\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Initializing and Wrapping AWS Lambda Handlers with Sentry in JavaScript\nDESCRIPTION: This snippet shows how to initialize the Sentry SDK for AWS Lambda functions using JavaScript by calling Sentry.init() with configuration options such as the DSN. It includes examples of wrapping both asynchronous and synchronous Lambda handlers with Sentry.wrapHandler to automatically capture errors and context. This snippet depends on the '@sentry/aws-serverless' package and assumes an AWS Lambda environment. Inputs include the event and context parameters of the Lambda handler, and outputs are standard AWS Lambda responses or errors propagated through the wrapper.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/aws-serverless/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as Sentry from '@sentry/aws-serverless';\n\nSentry.init({\n  dsn: '__DSN__',\n  // ...\n});\n\n// async (recommended)\nexports.handler = Sentry.wrapHandler(async (event, context) => {\n  throw new Error('oh, hello there!');\n});\n\n// sync\nexports.handler = Sentry.wrapHandler((event, context, callback) => {\n  throw new Error('oh, hello there!');\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Sentry SDK (CJS)\nDESCRIPTION: This JavaScript snippet initializes the Sentry SDK using CommonJS (CJS) syntax. It imports the Sentry module and calls the `Sentry.init()` function. The `dsn` parameter should be replaced with your Sentry DSN to enable error tracking. It is crucial to initialize Sentry as early as possible in your application.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/node/README.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n// CJS Syntax\nconst Sentry = require('@sentry/node');\n// ESM Syntax\nimport * as Sentry from '@sentry/node';\n\nSentry.init({\n  dsn: '__DSN__',\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Integrating Vue Tracing Options via vueIntegration in Nuxt SDK (TypeScript)\nDESCRIPTION: This snippet demonstrates the recommended method for configuring tracing options in the Nuxt Sentry SDK by utilizing the exported `vueIntegration()` function. This approach replaces the deprecated `tracingOptions` property and improves tree-shaking and alignment with the Vue SDK. The snippet imports '@sentry/nuxt' and initializes Sentry with an integrations array including `vueIntegration` configured with `tracingOptions`, like enabling component tracking. This setup requires Nuxt and the Sentry Nuxt SDK to be installed and configured accordingly.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/CHANGELOG.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n// sentry.client.config.ts\nimport * as Sentry from '@sentry/nuxt';\n\nSentry.init({\n  // ...\n  integrations: [\n    Sentry.vueIntegration({\n      tracingOptions: {\n        trackComponents: true,\n      },\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Migrating Sentry Tracing Integration for Browser SDK - JavaScript\nDESCRIPTION: Demonstrates how to update the Sentry tracing and performance monitoring setup from version 7 to version 8 for browser applications. Shows transition from importing the BrowserTracing class from '@sentry/tracing' to using the new 'browserTracingIntegration' export directly from '@sentry/browser'. This snippet is crucial for adapting the tracing configuration after the removal of '@sentry/tracing' package. It expects a DSN string and sample rate number as parameters for initialization.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/migration/v7-to-v8.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// v7\nimport * as Sentry from '@sentry/browser';\nimport { BrowserTracing } from '@sentry/tracing';\n\nSentry.init({\n  dsn: '__DSN__',\n  tracesSampleRate: 1.0,\n  integrations: [new BrowserTracing()],\n});\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// v8\nimport * as Sentry from '@sentry/browser';\n\nSentry.init({\n  dsn: '__DSN__',\n  tracesSampleRate: 1.0,\n  integrations: [Sentry.browserTracingIntegration()],\n});\n```\n\n----------------------------------------\n\nTITLE: Using the TraceClass Decorator in Angular Components (TypeScript)\nDESCRIPTION: Applies the `@TraceClass()` decorator from `@sentry/angular` to an Angular component class. This automatically instruments the component, creating a span that measures the duration between the `OnInit` and `AfterViewInit` lifecycle hooks.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/angular/README.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Component } from '@angular/core';\nimport { TraceClass } from '@sentry/angular';\n\n@Component({\n  selector: 'layout-header',\n  templateUrl: './header.component.html',\n})\n@TraceClass()\nexport class HeaderComponent {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Context and Capturing Events Using Sentry Browser SDK in JavaScript\nDESCRIPTION: Demonstrates how to set various context data such as user info, tags, and additional extras using the Sentry Browser SDK, as well as how to add breadcrumbs for richer event history. It also shows the capturing of messages, exceptions, and custom events. All functions require prior SDK initialization. This snippet helps in augmenting error reports with contextual information, improving observability and debugging capabilities.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/browser/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as Sentry from '@sentry/browser';\n\n// Set user information, as well as tags and further extras\nSentry.setExtra('battery', 0.7);\nSentry.setTag('user_mode', 'admin');\nSentry.setUser({ id: '4711' });\n\n// Add a breadcrumb for future events\nSentry.addBreadcrumb({\n  message: 'My Breadcrumb',\n  // ...\n});\n\n// Capture exceptions, messages or manual events\nSentry.captureMessage('Hello, world!');\nSentry.captureException(new Error('Good bye'));\nSentry.captureEvent({\n  message: 'Manual',\n  stacktrace: [\n    // ...\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Removing @sentry/tracing Dependency in Browser SDK\nDESCRIPTION: Example of how to update browser code to remove the dependency on @sentry/tracing package, as the tracing functionality is now included in the main SDK packages.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/migration/v7-to-v8.md#_snippet_67\n\nLANGUAGE: javascript\nCODE:\n```\n// Before\nimport * as Sentry from '@sentry/browser';\nimport { BrowserTracing } from '@sentry/tracing';\n\nSentry.init({\n  dsn: '__DSN__',\n  tracesSampleRate: 1.0,\n  integrations: [new BrowserTracing()],\n});\n\n// After\nimport * as Sentry from '@sentry/browser';\n\nSentry.init({\n  dsn: '__DSN__',\n  tracesSampleRate: 1.0,\n  integrations: [new Sentry.BrowserTracing()],\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Context and Sending Events - TypeScript\nDESCRIPTION: This code snippet demonstrates how to use the `@sentry/nextjs` SDK to set user information, tags, extra context, breadcrumbs, and to capture exceptions and messages.  It requires the `@sentry/nextjs` package to be installed. Key functions include `setTag`, `setUser`, `setContext`, `addBreadcrumb`, `captureException`, and `captureMessage`. The output will be sent to Sentry for error tracking and monitoring.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/nextjs/README.md#_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport * as Sentry from '@sentry/nextjs';\n\n// Set user information, as well as tags and further extras\nSentry.setTag('user_mode', 'admin');\nSentry.setUser({ id: '4711' });\nSentry.setContext('application_area', { location: 'checkout' });\n\n// Add a breadcrumb for future events\nSentry.addBreadcrumb({\n  message: '\"Add to cart\" clicked',\n  // ...\n});\n\n// Capture exceptions or messages\nSentry.captureException(new Error('Oh no.'));\nSentry.captureMessage('Hello, world!');\n```\n\n----------------------------------------\n\nTITLE: Integrating Sentry in Cloudflare Pages middleware\nDESCRIPTION: This code demonstrates how to integrate Sentry into a Cloudflare Pages application using middleware. The `sentryPagesPlugin` function is used to initialize Sentry.  It takes configuration options, including the DSN from the environment.  Middleware ensures that Sentry is initialized for the entire application.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/cloudflare/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// functions/_middleware.js\nimport * as Sentry from '@sentry/cloudflare';\n\nexport const onRequest = Sentry.sentryPagesPlugin({\n  dsn: process.env.SENTRY_DSN,\n  // Set tracesSampleRate to 1.0 to capture 100% of spans for tracing.\n  tracesSampleRate: 1.0,\n});\n```\n\n----------------------------------------\n\nTITLE: Wrapping Solid ErrorBoundary for Sentry\nDESCRIPTION: This snippet demonstrates how to wrap the native SolidJS `ErrorBoundary` component using `withSentryErrorBoundary` from `@sentry/solidstart`. This allows Sentry to automatically capture and report exceptions thrown within the component tree and renders a fallback component to gracefully handle the error.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/solidstart/README.md#_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nimport * as Sentry from '@sentry/solidstart';\nimport { ErrorBoundary } from 'solid-js';\n\nconst SentryErrorBoundary = Sentry.withSentryErrorBoundary(ErrorBoundary);\n\nrender(\n  () => (\n    <SentryErrorBoundary fallback={err => <div>Error: {err.message}</div>}>\n      <ProblematicComponent />\n    </SentryErrorBoundary>\n  ),\n  document.getElementById('root'),\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Sentry & Using Logging Features\nDESCRIPTION: This snippet demonstrates the initialization of the Sentry SDK with the logging features enabled and shows examples of using the new logging methods (trace, debug, info, warn, error, fatal, and fmt).  It depends on the Sentry SDK being installed and the `_experiments.enableLogs` option being set to `true` in the initialization.  The `fmt` helper is used for structured logging where the string template and parameters are sent separately.  The output will be sent to the Sentry platform.  This is part of the upcoming logging product from Sentry and is in early access.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/CHANGELOG.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nSentry.init({\n  dsn: 'PUBLIC_DSN',\n  // `enableLogs` must be set to true to use the logging features\n  _experiments: { enableLogs: true },\n});\n\nconst { trace, debug, info, warn, error, fatal, fmt } = Sentry.logger;\n\ntrace('Starting database connection', { database: 'users' });\ndebug('Cache miss for user', { userId: 123 });\nerror('Failed to process payment', { orderId: 'order_123', amount: 99.99 });\nfatal('Database connection pool exhausted', { database: 'users', activeConnections: 100 });\n\n// Structured logging via the `fmt` helper function. When you use `fmt`, the string template and parameters are sent separately so they can be queried independently in Sentry.\n\ninfo(fmt(`Updated profile for user ${userId}`));\nwarn(fmt(`Rate limit approaching for endpoint ${endpoint}. Requests: ${requests}, Limit: ${limit}`));\n```\n\n----------------------------------------\n\nTITLE: Initializing Sentry Browser Tracing in Vue Applications with Custom Router in JavaScript\nDESCRIPTION: This snippet demonstrates how to set up Sentry in a Vue application using '@sentry/vue' and configure browser tracing. If a router is present, it should be passed to 'browserTracingIntegration' for proper instrumentation. This ensures that navigation events and route changes are accurately captured for performance monitoring. Requires compatible Sentry and Vue Router packages.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/migration/v7-to-v8.md#_snippet_57\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as Sentry from '@sentry/vue';\n\nSentry.init({\n  integrations: [\n    Sentry.browserTracingIntegration({\n      // pass router in, if applicable\n      router,\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Instrumenting node-schedule Cron Jobs with Sentry in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to instrument scheduled cron jobs executed with the `node-schedule` library using Sentry's `cron.instrumentNodeSchedule` utility. It requires both the `@sentry/node` and `node-schedule` packages as dependencies. The user initializes Sentry, wraps the original `schedule` module with `instrumentNodeSchedule`, and then schedules jobs with `scheduleWithCheckIn.scheduleJob`. Parameters include a job name, cron pattern, and job function. Output is a cron job with built-in check-in instrumentation for Sentry monitoring. Ensure the Sentry SDK and node-schedule are properly installed and imported.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/changelog/v7.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as Sentry from '@sentry/node';\nimport * as schedule from 'node-schedule';\n\nconst scheduleWithCheckIn = Sentry.cron.instrumentNodeSchedule(schedule);\n\nconst job = scheduleWithCheckIn.scheduleJob('my-cron-job', '* * * * *', () => {\n  console.log('You will see this message every minute');\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Sentry SDK for Vue 3 in JavaScript\nDESCRIPTION: This snippet demonstrates how to initialize the Sentry SDK in a Vue 3 application. It shows the creation of a Vue app instance using createApp, then passing this instance along with a DSN and optional routing integrations to Sentry.init. Dependencies include Vue 3's createApp function and the Sentry SDK. Inputs are the Vue app and DSN string, with an optional router integration for browser tracing. This setup enables enhanced error monitoring and performance tracing tied to Vue 3 lifecycle.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/vue/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst app = createApp({\n  // ...\n});\n\nSentry.init({\n  app,\n  dsn: '__PUBLIC_DSN__',\n  integrations: [\n    // Or omit `router` if you're not using vue-router\n    Sentry.browserTracingIntegration({ router }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Client-Side Sentry SDK Initialization for React Router (TypeScript)\nDESCRIPTION: Initializes the Sentry SDK in a React Router client entry point (`entry.client.tsx`). It configures tracing, DSN, and propagation targets, then hydrates the React app within StrictMode. Requires @sentry/react-router and React libraries.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/react-router/README.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as Sentry from '@sentry/react-router';\nimport { startTransition, StrictMode } from 'react';\nimport { hydrateRoot } from 'react-dom/client';\nimport { HydratedRouter } from 'react-router/dom';\n\nSentry.init({\n  dsn: '___PUBLIC_DSN___',\n  integrations: [Sentry.browserTracingIntegration()],\n  tracesSampleRate: 1.0, //  Capture all transactions\n  tracePropagationTargets: [/^\\//, /^https:\\/\\/yourserver\\.io\\/api/],\n});\n\nstartTransition(() => {\n  hydrateRoot(\n    document,\n    <StrictMode>\n      <HydratedRouter />\n    </StrictMode>,\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Using Sentry API Manually in Remix (TypeScript)\nDESCRIPTION: Provides examples of interacting with the Sentry SDK directly within a Remix application using functions exported by `@sentry/remix`. It covers setting contextual information (user, tags, extras), adding breadcrumbs for tracing user actions, and manually sending different types of events like messages, exceptions, or custom structured events.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/remix/README.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as Sentry from '@sentry/remix';\n\n// Set user information, as well as tags and further extras\nSentry.setExtra('battery', 0.7);\nSentry.setTag('user_mode', 'admin');\nSentry.setUser({ id: '4711' });\n\n// Add a breadcrumb for future events\nSentry.addBreadcrumb({\n  message: 'My Breadcrumb',\n  // ...\n});\n\n// Capture exceptions, messages or manual events\nSentry.captureMessage('Hello, world!');\nSentry.captureException(new Error('Good bye'));\nSentry.captureEvent({\n  message: 'Manual',\n  stacktrace: [\n    // ...\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Sentry SDK in Svelte Application (TypeScript)\nDESCRIPTION: Initializes the Sentry SDK for Svelte within the application's main entry point (`main.js` or `main.ts`) before bootstrapping the Svelte app. This configuration sets up the DSN, release version, enables browser tracing integration, and configures the transaction sample rate for performance monitoring. Requires the `@sentry/svelte` package.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/svelte/README.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// main.js / main.ts\n\nimport App from './App.svelte';\n\nimport * as Sentry from '@sentry/svelte';\n\n// Initialize the Sentry SDK here\nSentry.init({\n  dsn: '__DSN__',\n  release: 'my-project-name@2.3.12',\n  integrations: [Sentry.browserTracingIntegration()],\n\n  // Set tracesSampleRate to 1.0 to capture 100%\n  // of transactions for performance monitoring.\n  // We recommend adjusting this value in production\n  tracesSampleRate: 1.0,\n});\n\n// Then bootstrap your Svelte app\nconst app = new App({\n  target: document.getElementById('app'),\n});\n\nexport default app;\n```\n\n----------------------------------------\n\nTITLE: Starting Remix Development Server (Shell)\nDESCRIPTION: Runs the Remix application in development mode. This command typically watches for file changes and rebuilds assets automatically, enabling rapid development cycles.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/dev-packages/e2e-tests/test-applications/create-remix-app-v2/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Creating child spans within an active span context in JavaScript\nDESCRIPTION: Demonstrates how to create a child span scoped to a specific parent span using the withActiveSpan() helper, ensuring correct parent-child relationships in the span tree.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/v8-new-performance-apis.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nSentry.withActiveSpan(parentSpan, () => {\n  Sentry.startSpan({ name: 'my-span' }, span => {\n    // span will be a direct child of parentSpan\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Sentry Nuxt Module to nuxt.config.ts in TypeScript\nDESCRIPTION: This snippet shows how to include the '@sentry/nuxt/module' in the Nuxt configuration file (nuxt.config.ts). Adding the module here enables the Sentry Nuxt integration and ensures the SDK is incorporated during the Nuxt build and runtime process.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/nuxt/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// nuxt.config.ts\nexport default defineNuxtConfig({\n  modules: ['@sentry/nuxt/module'],\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Integration Imports from '@sentry/integrations' to SDK Packages - JavaScript\nDESCRIPTION: Explains how to migrate pluggable integrations previously imported from the '@sentry/integrations' package to the new locations within '@sentry/browser' or '@sentry/node'. The integrations changed from class-based exports to functional exports, reflecting a major API change that requires updating import paths and usage patterns. This snippet demonstrates importing 'RewriteFrames' in v7 and its equivalent 'rewriteFramesIntegration' in v8.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/migration/v7-to-v8.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n// v7\nimport { RewriteFrames } from '@sentry/integrations';\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// v8\nimport { rewriteFramesIntegration } from '@sentry/browser';\n```\n\n----------------------------------------\n\nTITLE: Wrapping Handler with Sentry (Cloudflare Workers)\nDESCRIPTION: This example demonstrates initializing Sentry in Cloudflare Workers using the `withSentry` function. This function wraps the main handler and takes the environment variables for configuration like DSN. It allows for automatic error tracking and performance monitoring, allowing you to hook into the environment.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/cloudflare/README.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Sentry from '@sentry/cloudflare';\n\nexport default withSentry(\n  env => ({\n    dsn: env.SENTRY_DSN,\n    // Set tracesSampleRate to 1.0 to capture 100% of spans for tracing.\n    tracesSampleRate: 1.0,\n  }),\n  {\n    async fetch(request, env, ctx) {\n      return new Response('Hello World!');\n    },\n  } satisfies ExportedHandler<Env>,\n);\n```\n\n----------------------------------------\n\nTITLE: Next.js Configuration v8\nDESCRIPTION: Illustrates the configuration method where the `sentry` property is removed and options are now part of the second parameter.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/migration/v7-to-v8.md#_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\n// v8\nconst nextConfig = {\n  // Your Next.js options...\n};\n\nmodule.exports = withSentryConfig(nextConfig, {\n  // Your Sentry Webpack Plugin Options...\n  // AND your Sentry SDK options...\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Spans in Sentry v8 vs. v7 (TypeScript)\nDESCRIPTION: Illustrates the change in Sentry v8 where `startSpan` always returns a `Span` object, eliminating the need to check for `undefined`. In v7, the callback argument could be `Span | undefined`, requiring a null check before accessing span methods like `setAttribute`. V8 simplifies this by returning a Noop-Span if tracing is disabled or not sampled.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/v8-new-performance-apis.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nSentry.startSpan((span: Span | undefined) => {\n  // previously, in order to be type safe, you had to do...\n  span?.setAttribute('attr', 1);\n});\n\n// In v8, the signature changes to:\nSentry.startSpan((span: Span) => {\n  // no need to guard anymore!\n  span.setAttribute('attr', 1);\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Context and Capturing Events with Sentry Bun SDK\nDESCRIPTION: Illustrates using various Sentry functions to enrich error reports and manually send events after initialization. It shows how to set extra data (`setExtra`), tags (`setTag`), user information (`setUser`), add breadcrumbs (`addBreadcrumb`), and capture messages (`captureMessage`), exceptions (`captureException`), or custom events (`captureEvent`). Note that these functions are only effective after `Sentry.init()` has been called.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/bun/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Set user information, as well as tags and further extras\nSentry.setExtra('battery', 0.7);\nSentry.setTag('user_mode', 'admin');\nSentry.setUser({ id: '4711' });\n\n// Add a breadcrumb for future events\nSentry.addBreadcrumb({\n  message: 'My Breadcrumb',\n  // ...\n});\n\n// Capture exceptions, messages or manual events\nSentry.captureMessage('Hello, world!');\nSentry.captureException(new Error('Good bye'));\nSentry.captureEvent({\n  message: 'Manual',\n  stacktrace: [\n    // ...\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Starting NestJS Project: Production Mode\nDESCRIPTION: This command starts the NestJS application in production mode. It's optimized for performance and assumes all dependencies are installed and the project has been built. The output is the production application.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/dev-packages/e2e-tests/test-applications/nestjs-fastify/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn run start:prod\n```\n\n----------------------------------------\n\nTITLE: Nesting Spans with startSpan\nDESCRIPTION: This snippet demonstrates nesting spans using multiple calls to `Sentry.startSpan`. The inner `startSpan` call creates a child span of the outer span, establishing a parent-child relationship. This is useful to reflect the nested execution of operations, aiding the tracing and analysis of performance within different functional blocks.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/migration/v7-to-v8.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// You can nest spans via more `startSpan` calls.\nconst value = Sentry.startSpan({ name: 'mySpan' }, span => {\n  span.setAttribute('key1', 'value1');\n\n  // `nestedSpan` becomes the child of `mySpan`.\n  return Sentry.startSpan({ name: 'nestedSpan' }, nestedSpan => {\n    nestedSpan.setAttribute('key2', 'value2');\n    return expensiveFunction();\n  });\n});\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Sentry and previous_trace Span Links\nDESCRIPTION: This snippet shows how to initialize the Sentry SDK with browser tracing integration, and how to configure the `linkPreviousTrace` option to control how previous trace information is stored. The `linkPreviousTrace` option accepts values like 'in-memory', 'session-storage', and 'off'.  Dependencies include the `@sentry/browser` or similar SDKs, and browserTracingIntegration is from this SDK.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/CHANGELOG.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nSentry.init({\n  dsn: 'your-dsn-here'\n  integrations: [\n    Sentry.browserTracingIntegration({\n      // Available settings:\n      // - 'in-memory' (default): Stores previous trace information in memory\n      // - 'session-storage': Stores previous trace information in the browser's `sessionStorage`\n      // - 'off': Disable storing and sending previous trace information\n      linkPreviousTrace: 'in-memory',\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Running Tests - Bash\nDESCRIPTION: This command executes the Ember application's test suite. It requires the application to be built. The output displays the results of the tests, showing which tests passed or failed. --server allows the tests to be run in the browser for interactive testing.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/dev-packages/e2e-tests/test-applications/ember-classic/README.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\nember test\nember test --server\n```\n\n----------------------------------------\n\nTITLE: Initializing Sentry Node SDK via Import Hook (ESM)\nDESCRIPTION: Demonstrates initializing the Sentry Node.js SDK in an ECMAScript Module (ESM) project using the Node.js `--import` flag. This method allows Sentry initialization without explicit code changes in the application, requiring the SENTRY_DSN environment variable to be set. This feature requires Node.js version 18.19.0 or higher.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/CHANGELOG.md#_snippet_33\n\nLANGUAGE: Shell\nCODE:\n```\nSENTRY_DSN=https://examplePublicKey@o0.ingest.sentry.io/0 node --import=@sentry/node/init app.mjs\n```\n\n----------------------------------------\n\nTITLE: Initializing Sentry SDK (ESM)\nDESCRIPTION: This JavaScript snippet shows how to initialize the Sentry SDK using ES Module (ESM) syntax. It imports the Sentry module and calls `Sentry.init()`. The `dsn` parameter should be replaced with your Sentry DSN to enable error tracking. It is crucial to initialize Sentry as early as possible in your application.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/node/README.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n// CJS Syntax\nconst Sentry = require('@sentry/node');\n// ESM Syntax\nimport * as Sentry from '@sentry/node';\n\nSentry.init({\n  dsn: '__DSN__',\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Pluggable Integrations from SDK - JavaScript\nDESCRIPTION: These snippets illustrate the updated method for importing pluggable integrations. Instead of importing from `@sentry/integrations`, integrations should now be imported directly from the main SDK package (e.g., `@sentry/browser`) and accessed via the SDK's namespace (e.g., `Sentry.dedupeIntegration()`). Only functional integrations are re-exported this way.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/changelog/v7.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Before\nimport * as Sentry fromv '@sentry/browser';\nimport { dedupeIntegration } from '@sentry/integrations';\n\nSentry.init({\n  integrations: [dedupeIntegration()],\n});\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// After\nimport * as Sentry from '@sentry/browser';\n\nSentry.init({\n  integrations: [Sentry.dedupeIntegration()],\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Sentry v8 in a Separate File (`instrument.js`) in JavaScript\nDESCRIPTION: Shows the recommended method for initializing `@sentry/node` v8. Sentry initialization (`Sentry.init`) is placed in a dedicated file (e.g., `instrument.js`) to ensure it runs before any other application code, satisfying OpenTelemetry's auto-instrumentation prerequisites.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/v8-node.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n// In v8, create a separate file that initializes sentry.\n// Then pass the file to Node via --require or --import.\nconst Sentry = require('@sentry/node');\nSentry.init({\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Integrating Sentry with Winston Logger in Node.js (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates how to integrate Sentry with the winston logger to enable structured log forwarding to Sentry in Node.js applications. Requires the winston and winston-transport packages as well as the Sentry SDK for Node.js. The transport is created using Sentry's createSentryWinstonTransport utility and registered with winston, enabling automatic log capturing.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/CHANGELOG.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst winston = require('winston');\nconst Transport = require('winston-transport');\n\nconst transport = Sentry.createSentryWinstonTransport(Transport);\n\nconst logger = winston.createLogger({\n  transports: [transport],\n});\n```\n\n----------------------------------------\n\nTITLE: Using startSpan with Custom Scope in Sentry JavaScript SDK (JavaScript)\nDESCRIPTION: This snippet demonstrates the changed behavior of startSpan when a custom scope is provided in Sentry SDK v9. In v9, the scope is cloned, making changes like setTag in the callback only persist within its context unless explicitly set directly on the customScope. Dependencies include the Sentry SDK and use of the startSpan API. The key parameters are name (for the span) and scope (the custom scope object). Expected input is a span configuration and callback. This is only compatible with Sentry v9 and onward, and modifying the customScope inside the callback requires explicit updates.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/MIGRATION.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nstartSpan({ name: 'example', scope: customScope }, () => {\n  getCurrentScope().setTag('tag-a', 'a'); // this tag will only remain within the callback\n  // set the tag directly on customScope in addition, if you want to to persist the tag outside of the callback\n  customScope.setTag('tag-a', 'a');\n});\n```\n\n----------------------------------------\n\nTITLE: Manually Controlling Span Lifecycle with startSpanManual\nDESCRIPTION: This snippet shows how to use `Sentry.startSpanManual`.  This allows you to manually control the span's start and end points, which is especially useful for instrumenting asynchronous operations where you need to hook into event emitters or similar constructs. The span is ended when the finish event occurs.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/migration/v7-to-v8.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// Use `startSpanManual` if you want to manually control when to end the span\n// Useful when you need to hook into event emitters or similar.\nfunction middleware(res, req, next) {\n  return Sentry.startSpanManual({ name: 'mySpan' }, span => {\n    res.on('finish', () => {\n      span.end();\n    });\n    return next();\n  });\n}\n\n```\n\n----------------------------------------\n\nTITLE: Express/Connect Handler Changes - JavaScript\nDESCRIPTION: This code highlights the changes in Express and Connect handler usage, removing the need for `requestHandler`, `tracingHandler`, and `errorHandler`, instead requiring only the framework-specific error handler. Dependencies: `@sentry/node` and Express or Connect framework. Input:  An express application. Output:  Sentry instrumentation.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/migration/v7-to-v8.md#_snippet_32\n\n\n\n----------------------------------------\n\nTITLE: Updating `Transport` interface - TypeScript\nDESCRIPTION: This snippet shows the updated `Transport` interface in TypeScript. The `send` method now always requires a `TransportMakeRequestResponse` in the promise. Dependencies:  TypeScript enabled project using Sentry SDK.  Input: An Event.  Output:  A Promise that resolves with a TransportMakeRequestResponse.  Limitations: Affects the `Transport` interface implementation.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/migration/v7-to-v8.md#_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\n// v7\ninterface Transport {\n  send(event: Event): Promise<void | TransportMakeRequestResponse>;\n}\n```\n\n----------------------------------------\n\nTITLE: Suppressing Tracing for Code Block (JavaScript)\nDESCRIPTION: Illustrates how to use the `Sentry.suppressTracing` utility function to prevent Sentry tracing spans from being generated within a specific function execution. This is useful for code blocks where tracing is not desired or would generate excessive noise. The function executes the provided callback and returns its result.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/CHANGELOG.md#_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\nreturn Sentry.suppressTracing(() => {\n  // Ensure this fetch call does not generate a span\n  return fetch('/my-url');\n});\n```\n\n----------------------------------------\n\nTITLE: Client-side Sentry Initialization in sentry.client.config.ts using JavaScript\nDESCRIPTION: This snippet initializes the Sentry SDK on the client side by importing the SDK and calling Sentry.init with the DSN fetched from the Nuxt runtime public configuration. It shows a method for integrating environment-specific credentials securely and ensures Sentry captures client-side errors.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/nuxt/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useRuntimeConfig } from '#imports';\nimport * as Sentry from '@sentry/nuxt';\n\nSentry.init({\n  // If set up, you can use your runtime config here\n  dsn: useRuntimeConfig().public.sentry.dsn,\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Sentry in Client Hooks\nDESCRIPTION: This code initializes the Sentry SDK on the client-side within the `hooks.client.(js|ts)` file.  It sets the DSN, sample rates for traces and replays, and configures integrations such as session replay.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/sveltekit/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// hooks.client.(js|ts)\nimport * as Sentry from '@sentry/sveltekit';\n\nSentry.init({\n  dsn: '__DSN__',\n  tracesSampleRate: 1.0,\n  // For instance, initialize Session Replay:\n  replaysSessionSampleRate: 0.1,\n  replaysOnErrorSampleRate: 1.0,\n  integrations: [Sentry.replayIntegration()],\n});\n```\n\n----------------------------------------\n\nTITLE: Manually Controlling Sentry Session Replay State - JavaScript\nDESCRIPTION: This code shows how to manually stop, start, or start buffering a Sentry Session Replay instance. `stop()` halts recording, `start()` begins recording in full session mode, and `startBuffering()` begins recording in buffer mode (for error capture). Requires access to the replay integration instance.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/replay-internal/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Sentry from \"@sentry/react\";\nimport { BrowserClient } from \"@sentry/browser\";\n\nconst replay = Sentry.replayIntegration();\n\nSentry.init({\n  integrations: [replay]\n});\n\nconst client = Sentry.getClient<BrowserClient>();\n\n// Add replay integration, will start recording\nclient?.addIntegration(replay);\n\n// Stop recording\nreplay.stop();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nreplay.start(); // Will start a session in \"session\" mode, regardless of sample rates\n```\n\nLANGUAGE: javascript\nCODE:\n```\nreplay.startBuffering(); // Will start a session in \"buffer\" mode, regardless of sample rates\n```\n\n----------------------------------------\n\nTITLE: Adjusting Sentry Runloop Queue Duration Threshold\nDESCRIPTION: Demonstrates how to configure the minimum duration threshold for capturing Ember runloop queue times as spans in Sentry. This is set via the `minimumRunloopQueueDuration` property within the `ENV['@sentry/ember']` object in `config/environment.js`.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/ember/README.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nENV['@sentry/ember'] = {\n  minimumRunloopQueueDuration: 0, // All runloop queue durations will be added as spans.\n};\n```\n\n----------------------------------------\n\nTITLE: Instrumenting Ember Route Performance with Sentry\nDESCRIPTION: Shows how to wrap an Ember Route class with `instrumentRoutePerformance` imported from `@sentry/ember`. This enables detailed performance tracking for the route's lifecycle hooks (`beforeModel`, `model`, `afterModel`, `setupController`).\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/ember/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport Route from '@ember/routing/route';\nimport { instrumentRoutePerformance } from '@sentry/ember';\n\nclass MyRoute extends Route {\n  model() {\n    //...\n  }\n}\n\nexport default instrumentRoutePerformance(MyRoute);\n```\n\n----------------------------------------\n\nTITLE: Specifying Middleware in app.config.ts\nDESCRIPTION: This snippet specifies the middleware file in `app.config.ts`.  This links the middleware defined in `src/middleware.ts` with the SolidStart application.  It also describes the necessary configuration for Sentry to work properly in a SolidStart app.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/solidstart/README.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@solidjs/start/config';\n\nexport default defineConfig({\n  // ...\n  middleware: './src/middleware.ts',\n});\n```\n\n----------------------------------------\n\nTITLE: Sending Custom Browser Metrics using Sentry Browser SDK\nDESCRIPTION: Provides examples of sending various custom metrics (counters, gauges, distributions, sets) from the browser using the `Sentry.metrics` API. Requires the `MetricsAggregator` integration to be enabled during Sentry initialization. Demonstrates adding values, tags, and units.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/changelog/v7.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n// Add 4 to a counter named `hits`\nSentry.metrics.increment('hits', 4);\n\n// Add 2 to gauge named `parallel_requests`, tagged with `happy: \"no\"`\nSentry.metrics.gauge('parallel_requests', 2, { tags: { happy: 'no' } });\n\n// Add 4.6 to a distribution named `response_time` with unit seconds\nSentry.metrics.distribution('response_time', 4.6, { unit: 'seconds' });\n\n// Add 2 to a set named `valuable.ids`\nSentry.metrics.set('valuable.ids', 2);\n```\n\n----------------------------------------\n\nTITLE: Creating an Inactive Span\nDESCRIPTION: This code demonstrates creating an inactive span with `Sentry.startInactiveSpan`.  Inactive spans are not automatically ended, giving manual control over their lifecycle. Useful when passing a span reference into another closure, such as for measuring duration between hooks where automatic start/end isn't appropriate.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/migration/v7-to-v8.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// You can also create an inactive span that does not take a callback.\n// Useful when you need to pass a span reference into another closure (like measuring duration between hooks).\nconst span = Sentry.startInactiveSpan({ name: 'mySpan' });\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Sentry on the Client-side\nDESCRIPTION: This snippet initializes the Sentry SDK on the client-side in `entry-client.jsx`. It sets up the SDK with the provided DSN, integrates Solid Router tracing, and configures the sample rate. The `mount` function attaches the application to the DOM element with the id 'app'.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/solidstart/README.md#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as Sentry from '@sentry/solidstart';\nimport { solidRouterBrowserTracingIntegration } from '@sentry/solidstart/solidrouter';\nimport { mount, StartClient } from '@solidjs/start/client';\n\nSentry.init({\n  dsn: '__PUBLIC_DSN__',\n  integrations: [solidRouterBrowserTracingIntegration()],\n  tracesSampleRate: 1.0, //  Capture 100% of the transactions\n});\n\nmount(() => <StartClient />, document.getElementById('app'));\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Instrumentations via Sentry Init JavaScript\nDESCRIPTION: Illustrates the updated method for integrating OpenTelemetry instrumentations with Sentry. The previously used `Sentry.addOpenTelemetryInstrumentation` method has been removed. Instrumentations should now be provided as an array to the `openTelemetryInstrumentations` option within the `Sentry.init()` call.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/MIGRATION.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as Sentry from '@sentry/node';\n\n// after\nSentry.init({\n  openTelemetryInstrumentations: [new GenericPoolInstrumentation()],\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Prisma Client Tracing Feature Prisma Schema\nDESCRIPTION: Adds the `tracing` preview feature to the Prisma client generator configuration in the `schema.prisma` file. This setting is required for Sentry's Prisma integration to collect tracing data when using Prisma versions prior to v6, where tracing was not enabled by default.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/MIGRATION.md#_snippet_3\n\nLANGUAGE: Prisma\nCODE:\n```\ngenerator client {\n  provider = \"prisma-client-js\"\n  previewFeatures = [\"tracing\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Remove componentTrackingPreprocessor - Svelte\nDESCRIPTION: Demonstrates how to remove the `componentTrackingPreprocessor` and use `withSentryConfig` for component tracking in Svelte when migrating to Sentry SDK v8. This change involves adjusting the svelte.config.js file to utilize the newer configuration approach.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/migration/v7-to-v8.md#_snippet_47\n\nLANGUAGE: js\nCODE:\n```\n// v7 - svelte.config.js\nimport { componentTrackingPreprocessor } from '@sentry/svelte';\n\nconst config = {\n  preprocess: [\n    componentTrackingPreprocessor(),\n    // ...\n  ],\n  // ...\n};\n\nexport default config;\n```\n\nLANGUAGE: js\nCODE:\n```\n// v8 - svelte.config.js\nimport { withSentryConfig } from \"@sentry/svelte\";\n\nconst config = {\n  // Your svelte config\n  compilerOptions: {...},\n};\n\nexport default withSentryConfig(config);\n```\n\n----------------------------------------\n\nTITLE: Setting Global Tags with New Sentry SDK (JavaScript)\nDESCRIPTION: Demonstrates setting global tags with the new `@sentry/browser` or `@sentry/node` SDKs. It uses `Sentry.configureScope()` to access the current scope and then calls the `scope.setTag()` method to add a key-value tag.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/changelog/v4.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nSentry.configureScope(scope => {\n  scope.setTag('key', 'value');\n});\n```\n\n----------------------------------------\n\nTITLE: Instrumenting MCP Servers Using wrapMcpServerWithSentry (JavaScript ESM)\nDESCRIPTION: This JavaScript snippet shows how to instrument an MCP server from the @modelcontextprotocol/sdk using Sentry's wrapMcpServerWithSentry API. The import statement requires ESM module support. Developers must ensure that version ^1.9.0 or higher of @modelcontextprotocol/sdk is available and the Sentry SDK is initialized. The function wraps an MCP server instance, enabling performance monitoring and error reporting.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/CHANGELOG.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { McpServer } from '@modelcontextprotocol/sdk/server/mcp.js';\n\n// Create an MCP server\nconst server = new McpServer({\n  name: 'Demo',\n  version: '1.0.0',\n});\n\n// Use the instrumented server in your application\nconst instrumentedServer = Sentry.wrapMcpServerWithSentry(server);\n```\n\n----------------------------------------\n\nTITLE: Initializing Sentry Node SDK Early in Remix Application Entry - JavaScript\nDESCRIPTION: Demonstrates the recommended SDK initialization pattern for Remix applications using '@sentry/remix' in version 8. Emphasizes early initialization at the top of server entrypoints to ensure performance monitoring starts immediately. The example includes DSN, trace sampling configuration, trace propagation targets, and disabling auto session tracking for deterministic testing. Also shows how to wrap error handling with the Sentry SDK's helper.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/migration/v7-to-v8.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n// first import Sentry and initialize Sentry\nimport * as Sentry from '@sentry/remix';\n\nSentry.init({\n  dsn: 'https://public@dsn.ingest.sentry.io/1337',\n  tracesSampleRate: 1,\n  tracePropagationTargets: ['example.org'],\n  // Disabling to test series of envelopes deterministically.\n  autoSessionTracking: false,\n});\n\n// then handle everything else\nimport type { EntryContext } from '@remix-run/node';\nimport { RemixServer } from '@remix-run/react';\nimport { renderToString } from 'react-dom/server';\n\nexport const handleError = Sentry.wrapRemixHandleError;\n```\n\n----------------------------------------\n\nTITLE: Capturing Messages with New Sentry SDK (JavaScript)\nDESCRIPTION: Shows how to capture custom messages with the new `@sentry/browser` or `@sentry/node` SDKs. It uses `Sentry.withScope()` to add event-specific context (like extra data via `scope.setExtra()`) before calling `Sentry.captureMessage()` with the message string and optional severity level.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/changelog/v4.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nSentry.withScope(scope => {\n  scope.setExtra('debug', false);\n  Sentry.captureMessage('test', 'info');\n});\n```\n\n----------------------------------------\n\nTITLE: Wrapping Solid Router for Sentry\nDESCRIPTION: This snippet demonstrates how to wrap the Solid Router (`Router`, `MemoryRouter`, or `HashRouter`) using `withSentryRouterRouting` from `@sentry/solidstart/solidrouter`. This enables Sentry to capture performance data related to navigation within the application.  It creates a higher order component that allows Sentry to reach the router context.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/solidstart/README.md#_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nimport { withSentryRouterRouting } from '@sentry/solidstart/solidrouter';\nimport { Route, Router } from '@solidjs/router';\n\nconst SentryRouter = Sentry.withSentryRouterRouting(Router);\n\nrender(\n  () => (\n    <SentryRouter>\n      <Route path=\"/\" component={App} />\n      ...\n    </SentryRouter>\n  ),\n  document.getElementById('root'),\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Automatic Server-Side Sentry Injection in SolidStart (JavaScript)\nDESCRIPTION: Shows how to configure the `withSentry` wrapper in SolidStart to automatically inject the Sentry server configuration using `autoInjectServerSentry: 'top-level-import'`. This method imports the Sentry config (`src/instrument.server.ts`) at the top of the server entry point, offering an alternative to the recommended `--import` flag approach, though it may have tracing limitations.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/CHANGELOG.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nwithSentry(\n  {\n    /* Your SolidStart config options... */\n  },\n  {\n    // Optional: Install Sentry with a top-level import\n    autoInjectServerSentry: 'top-level-import',\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Replay Network Details\nDESCRIPTION: This snippet shows how to configure the Replay feature in the Sentry SDK to capture network request and response bodies and headers.  It uses the `networkDetailAllowUrls` option to specify which URLs should have their network details captured, along with configurations for enabling or disabling body capture and controlling which headers are captured.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/changelog/v7.md#_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nnew Replay({\n  networkDetailAllowUrls: ['https://sentry.io/api'],\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nnew Replay({\n  networkDetailAllowUrls: ['https://sentry.io/api'],\n  // opt-out of capturing bodies\n  networkCaptureBodies: false,\n  // These headers are captured _in addition to_ the default headers\n  networkRequestHeaders: ['X-Custom-Header'],\n  networkResponseHeaders: ['X-Custom-Header', 'X-Custom-Header-2'],\n});\n```\n\n----------------------------------------\n\nTITLE: Setting up Sentry v8 Error Handling for Fastify in JavaScript\nDESCRIPTION: Shows the setup for Sentry v8 error handling and performance monitoring within a Fastify application. `Sentry.setupFastifyErrorHandler(app)` is called immediately after creating the Fastify instance to enable automatic instrumentation. Routes should be defined afterwards. Requires `@sentry/node` and `fastify` packages.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/v8-node.md#_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nconst Sentry = require('@sentry/node');\nconst { fastify } = require('fastify');\nconst app = fastify();\nSentry.setupFastifyErrorHandler(app);\n\n// add routes etc. here\n\napp.listen();\n```\n\n----------------------------------------\n\nTITLE: Configuring Sentry Middleware\nDESCRIPTION: This snippet configures the Sentry middleware within the `src/middleware.ts` file. It imports the `sentryBeforeResponseMiddleware` from `@sentry/solidstart` and adds it to the `onBeforeResponse` array in the `createMiddleware` configuration. This ensures that Sentry middleware is executed before any other middleware, enabling distributed tracing.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/solidstart/README.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { sentryBeforeResponseMiddleware } from '@sentry/solidstart';\nimport { createMiddleware } from '@solidjs/start/middleware';\n\nexport default createMiddleware({\n  onBeforeResponse: [\n    sentryBeforeResponseMiddleware(),\n    // Add your other middleware handlers after `sentryBeforeResponseMiddleware`\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Setting up Sentry v8 Error Handling for Express in JavaScript\nDESCRIPTION: Illustrates how to integrate Sentry v8 error handling into an Express application. After defining routes, `Sentry.setupExpressErrorHandler(app)` should be called to automatically capture errors and performance data specific to Express. Other custom error middleware should be added after the Sentry handler. Requires `@sentry/node` and `express` packages.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/v8-node.md#_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nconst Sentry = require('@sentry/node');\nconst express = require('express');\nconst app = express();\n\n// add routes etc. here\n\nSentry.setupExpressErrorHandler(app);\n// add other error middleware below this, if needed\n\napp.listen(3000);\n```\n\n----------------------------------------\n\nTITLE: Using getCurrentScope() Instead of configureScope()\nDESCRIPTION: Example of using getCurrentScope() to directly modify the Sentry scope, which is the recommended approach replacing the deprecated configureScope() method.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/migration/v7-to-v8.md#_snippet_65\n\nLANGUAGE: javascript\nCODE:\n```\nSentry.getCurrentScope().setTag('xx', 'yy');\n```\n\n----------------------------------------\n\nTITLE: Configuring Nuxt Sentry SDK Auto Injection Option (TypeScript)\nDESCRIPTION: Shows how to enable the auto-injection of Sentry initialization in the Nuxt configuration file using the `autoInjectServerSentry` option. This configuration provides alternatives for server-side SDK initialization when the --import flag is not used. The options include 'top-level-import' or 'experimental_dynamic-import', which allow for different methods of SDK auto-injection on the server side. This snippet should be added inside the Nuxt config under the 'sentry' property and comes with limitations compared to explicit imports.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/CHANGELOG.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nsentry: {\n  autoInjectServerSentry: 'top-level-import', // or 'experimental_dynamic-import'\n},\n```\n\n----------------------------------------\n\nTITLE: Integrating Sentry with a Hapi Server in Node.js (TypeScript)\nDESCRIPTION: Illustrates how to integrate Sentry with a Hapi web server using TypeScript. It involves initializing a Hapi server instance and passing it to the `Sentry.Integrations.Hapi` integration within the `Sentry.init` configuration for automatic error and performance monitoring. Requires `@sentry/node` and `@hapi/hapi`.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/changelog/v7.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst Sentry = require('@sentry/node');\nconst Hapi = require('@hapi/hapi');\n\nconst init = async () => {\n  const server = Hapi.server({\n    // your server configuration ...\n  });\n\n  Sentry.init({\n    dsn: '__DSN__',\n    tracesSampleRate: 1.0,\n    integrations: [new Sentry.Integrations.Hapi({ server })],\n  });\n\n  server.route({\n    // your route configuration ...\n  });\n\n  await server.start();\n};\n```\n\n----------------------------------------\n\nTITLE: Using Sentry.reactErrorHandler in React 19 (JavaScript)\nDESCRIPTION: This code snippet shows how to use `Sentry.reactErrorHandler` in React 19 to handle uncaught and caught errors. It integrates with `ReactDOM.hydrateRoot` and provides an optional callback for custom configuration.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/CHANGELOG.md#_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Sentry from '@sentry/react';\nimport { hydrateRoot } from 'react-dom/client';\n\nReactDOM.hydrateRoot(\n  document.getElementById('root'),\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  {\n    onUncaughtError: Sentry.reactErrorHandler(),\n    onCaughtError: Sentry.reactErrorHandler((error, errorInfo) => {\n      // optional callback if users want custom config.\n    }),\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Integrating Sentry v8 with a Custom OpenTelemetry Setup in JavaScript\nDESCRIPTION: Explains how to integrate Sentry v8 into an existing, custom OpenTelemetry setup. Requires setting `skipOpenTelemetrySetup: true` in `Sentry.init()` and manually installing `@sentry/opentelemetry` to configure Sentry-specific components like `SentrySpanProcessor`, `SentryPropagator`, `SentryContextManager`, and optionally `SentrySampler`. Assumes an existing OpenTelemetry `provider` instance.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/v8-node.md#_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nconst Sentry = require('@sentry/node');\nconst { SentrySpanProcessor, SentryPropagator, SentryContextManager, SentrySampler } = require('@sentry/opentelemetry');\n\n// We need a custom span processor\nprovider.addSpanProcessor(new SentrySpanProcessor());\n// We need a custom propagator and context manager\nprovider.register({\n  propagator: new SentryPropagator(),\n  contextManager: new SentryContextManager(),\n});\n\n// And optionally, if you want to use the `tracesSamplingRate` or related options from Sentry,\n// you also need to use a custom sampler when you set up your provider\nconst provider = new BasicTracerProvider({\n  sampler: new SentrySampler(Sentry.getClient()),\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring stacktrace and unhandled rejection handling from raven-js to @sentry/browser in JavaScript\nDESCRIPTION: Highlights configuration changes for attaching stacktraces to events and disabling unhandled promise rejection handling. Shows the rename of 'stacktrace' to 'attachStacktrace', and the new method to disable promise rejection tracking via integrations configuration (GlobalHandlers with onunhandledrejection set to false). These examples assist migration of such event handling features.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/migration/v4-to-v5_v6.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nRaven.config('___PUBLIC_DSN___', {\n  stacktrace: true,\n});\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nSentry.init({\n  attachStacktrace: true,\n});\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nRaven.config('___PUBLIC_DSN___', {\n  captureUnhandledRejections: false,\n});\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nSentry.init({\n  integrations: [\n    new Sentry.Integrations.GlobalHandlers({\n      onunhandledrejection: false,\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Nuxt Sentry Dynamic Import Disable JavaScript\nDESCRIPTION: This configuration snippet shows how to disable the new default behavior in the Sentry Nuxt SDK that automatically wraps the server entry point using dynamic import. Setting `dynamicImportForServerEntry` to `false` in your `nuxt.config.ts` file allows you to revert to the previous method of initializing Sentry via the Node `--import` flag, which is now a breaking change if not updated.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/CHANGELOG.md#_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nsentry: {\n  dynamicImportForServerEntry: false;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring httpIntegration to Ignore Incoming Request Body (TypeScript)\nDESCRIPTION: This TypeScript snippet configures the Sentry SDK with an httpIntegration that uses the ignoreIncomingRequestBody callback to selectively skip capturing the body of incoming HTTP requests. The callback receives the URL and request object, returning true to prevent body capture for matching criteria. Make sure to install and initialize the Sentry SDK for Node.js, and provide appropriate URL matching logic as needed.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/CHANGELOG.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nSentry.init({\n  integrations: [\n    Sentry.httpIntegration({\n      ignoreIncomingRequestBody: (url, request) => {\n        return request.method === 'GET' && url.includes('/api/large-payload');\n      },\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Sentry SDK with ignoreTransactions Option - TypeScript\nDESCRIPTION: Demonstrates how to initialize the Sentry SDK and configure it to ignore specific transactions by their names using the \"ignoreTransactions\" option. This feature filters out specified routes (e.g., '/api/healthcheck', '/ping') from being sent as transactions to Sentry. Requires Sentry SDK version 7.46.0 or later. The \"ignoreTransactions\" parameter expects an array of strings representing transaction names.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/changelog/v7.md#_snippet_41\n\nLANGUAGE: TypeScript\nCODE:\n```\nSentry.init({\n  ignoreTransactions: ['/api/healthcheck', '/ping'],\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Sentry Server-Side in Remix (TypeScript)\nDESCRIPTION: Shows the Sentry SDK initialization within the `entry.server.tsx` file for server-side error monitoring in a Remix app. It sets the DSN and `tracesSampleRate`, and includes the optional `prismaIntegration` for database monitoring if Prisma is used (requires installing `@sentry/integrations`).\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/remix/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// entry.server.tsx\n\nimport { prisma } from '~/db.server';\n\nimport * as Sentry from '@sentry/remix';\n\nSentry.init({\n  dsn: '__DSN__',\n  tracesSampleRate: 1,\n  integrations: [Sentry.prismaIntegration()],\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Sentry Browser Tracing in Remix Applications in JavaScript\nDESCRIPTION: This snippet shows how to initialize Sentry browser tracing in a Remix application using '@sentry/remix'. The 'browserTracingIntegration' function can accept Remix-specific hooks such as 'useEffect', 'useLocation', and 'useMatches' for enhanced tracing of navigations and page loads. Ensure that Remix and the relevant Sentry SDK version are installed.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/migration/v7-to-v8.md#_snippet_59\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as Sentry from '@sentry/remix';\n\nSentry.init({\n  integrations: [\n    Sentry.browserTracingIntegration({\n      useEffect,\n      useLocation,\n      useMatches,\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Sentry Component Definition Spans\nDESCRIPTION: Demonstrates how to enable the creation of spans representing component definitions, which helps in understanding which components are rendering, especially Glimmer components. Set `enableComponentDefinition: true` in the `ENV['@sentry/ember']` configuration in `config/environment.js`.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/ember/README.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nENV['@sentry/ember'] = {\n  enableComponentDefinition: true, // All component definitions will be added as spans.\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite for Sentry\nDESCRIPTION: This code configures Vite to include the Sentry SDK in the build process. It adds `sentrySvelteKit()` to the Vite plugins in `vite.config.(js|ts)` to enable features like automatic source map upload.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/sveltekit/README.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// vite.config.(js|ts)\nimport { sveltekit } from '@sveltejs/kit/vite';\nimport { sentrySvelteKit } from '@sentry/sveltekit';\n\nexport default {\n  plugins: [sentrySvelteKit(), sveltekit()],\n  // ... rest of your Vite config\n};\n```\n\n----------------------------------------\n\nTITLE: Sending Failed Cron Monitor Check-in with Sentry Node SDK JavaScript\nDESCRIPTION: This JavaScript snippet shows how to notify Sentry that a scheduled cron job has failed by calling `captureCheckIn` with the status set to `'error'`. It requires the `@sentry/node` package and expects the `checkInId` from the initial 'in_progress' check-in. This integration helps capture and report job failure states to Sentry’s cron monitoring system.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/changelog/v7.md#_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\n// 🔴 Notify Sentry your job has failed:\nSentry.captureCheckIn({\n  checkInId,\n  monitorSlug: '<monitor-slug>',\n  status: 'error',\n});\n```\n\n----------------------------------------\n\nTITLE: Migrating Sentry Browser Integrations to Functional Style (v8)\nDESCRIPTION: Illustrates the migration from deprecated class-based integrations (v7) to the new functional style integrations (v8) for the Sentry Browser SDK. The example specifically shows the change for the `BrowserTracing` integration, replacing `new Sentry.BrowserTracing()` with `new Sentry.browserTracingIntegration()`.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/CHANGELOG.md#_snippet_43\n\nLANGUAGE: js\nCODE:\n```\nimport * as Sentry from '@sentry/browser';\n// v7\nSentry.init({\n  integrations: [new Sentry.BrowserTracing()],\n});\n// v8\nSentry.init({\n  integrations: [new Sentry.browserTracingIntegration()],\n});\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Server Instrumentation - JavaScript\nDESCRIPTION: This JavaScript code snippet shows how to disable automatic server instrumentation provided by the Sentry Astro integration. By setting `requestHandler` to `false` within the `autoInstrumentation` options, you can prevent the automatic addition of middleware. This is useful when you want to control the server instrumentation manually.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/astro/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from 'astro/config';\nimport sentry from '@sentry/astro';\n\nexport default defineConfig({\n  integrations: [\n    sentry({\n      dsn: '__DSN__',\n      autoInstrumentation: {\n        requestHandler: false,\n      },\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Up Sentry with OpenTelemetry in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates the comprehensive setup of Sentry's OpenTelemetry integration in a Node.js application. It initializes the Sentry SDK with a DSN, retrieves the client, and configures OpenTelemetry tracing by setting up an OTEL tracer provider with the SentrySampler sampler and SentrySpanProcessor span processor. It wraps the OpenTelemetry AsyncLocalStorageContextManager for context management, sets the global tracer provider, propagator, and context manager, and finally establishes the OpenTelemetry asynchronous context strategy for Sentry. This setup enables capturing and reporting OpenTelemetry spans and traces to Sentry for error monitoring and observability.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/opentelemetry/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Sentry from '@sentry/node';\nimport {\n  SentryPropagator,\n  SentrySampler,\n  SentrySpanProcessor,\n  setupEventContextTrace,\n  wrapContextManagerClass,\n  setOpenTelemetryContextAsyncContextStrategy,\n} from '@sentry/opentelemetry';\nimport { AsyncLocalStorageContextManager } from '@opentelemetry/context-async-hooks';\nimport { context, propagation, trace } from '@opentelemetry/api';\n\nfunction setupSentry() {\n  Sentry.init({\n    dsn: 'xxx',\n  });\n\n  const client = Sentry.getClient();\n  setupEventContextTrace(client);\n\n  const provider = new BasicTracerProvider({\n    sampler: new SentrySampler(client),\n  });\n  provider.addSpanProcessor(new SentrySpanProcessor());\n\n  const SentryContextManager = wrapContextManagerClass(AsyncLocalStorageContextManager);\n\n  // Initialize the provider\n  trace.setGlobalTracerProvider(provider);\n  propagation.setGlobalPropagator(new SentryPropagator());\n  context.setGlobalContextManager(new SentryContextManager());\n\n  setOpenTelemetryContextAsyncContextStrategy();\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Error Handling in Server Hooks\nDESCRIPTION: This code snippet demonstrates integrating the `handleErrorWithSentry` function into the `handleError` hook within the `hooks.server.(js|ts)` file.  This allows Sentry to capture and report server-side errors, either using a custom error handler or the default one.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/sveltekit/README.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// hooks.server.(js|ts)\nimport { handleErrorWithSentry } from '@sentry/sveltekit';\n\nconst myErrorHandler = ({ error, event }) => {\n  console.error('An error occurred on the server side:', error, event);\n};\n\nexport const handleError = handleErrorWithSentry(myErrorHandler);\n// or alternatively, if you don't have a custom error handler:\n// export const handleError = handleErrorWithSentry();\n```\n\n----------------------------------------\n\nTITLE: Running Sentry v8 Migration Codemod\nDESCRIPTION: Provides the command to execute the Sentry v8 migration codemod (`@sentry/migr8`) using `npx`. This tool helps automate the process of updating project code to align with the breaking changes and new patterns introduced in version 8 of the Sentry JavaScript SDKs.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/CHANGELOG.md#_snippet_35\n\nLANGUAGE: Shell\nCODE:\n```\nnpx @sentry/migr8@latest\n```\n\n----------------------------------------\n\nTITLE: Initializing Sentry ContextLines Integration for Browser SDK - JavaScript\nDESCRIPTION: This snippet demonstrates how to initialize the ContextLines integration in the Sentry Browser SDK. The ContextLines integration captures source code lines from inline JavaScript embedded in HTML pages to improve error stack traces. It requires importing the integration from '@sentry/integrations' and configuring it with an optional `frameContextLines` parameter, which specifies the number of source lines to collect before and after each frame line number, defaulting to 7. This integration is particularly useful for capturing errors in inline scripts when the source files are not accessible to Sentry backend, for example on login-protected pages.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/changelog/v7.md#_snippet_23\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ContextLines } from '@sentry/integrations';\n\nSentry.init({\n  // ...\n  integrations: [\n    new ContextLines({\n      // The number of lines to collect before and after each stack frame's line number\n      // Defaults to 7\n      frameContextLines: 7,\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Creating an External Store in Svelte with TypeScript\nDESCRIPTION: This code snippet demonstrates how to create a simple external store in Svelte using TypeScript to manage shared state outside of components. It imports the writable function from 'svelte/store' and exports a writable store initialized with a value of 0, enabling reactive state management across components.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/dev-packages/e2e-tests/test-applications/svelte-5/README.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { writable } from 'svelte/store';\nexport default writable(0);\n```\n\n----------------------------------------\n\nTITLE: Initializing Sentry Tracing Integration in Angular (JavaScript)\nDESCRIPTION: Initializes Sentry with the `browserTracingIntegration` specifically configured for Angular. This enables performance monitoring by capturing transactions, including those related to routing. Requires `@sentry/angular`. Key options include `tracePropagationTargets` for distributed tracing and `tracesSampleRate` to control the volume of traces sent.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/angular/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { init, browserTracingIntegration } from '@sentry/angular';\n\ninit({\n  dsn: '__DSN__',\n  integrations: [browserTracingIntegration()],\n  tracePropagationTargets: ['localhost', 'https://yourserver.io/api'],\n  tracesSampleRate: 1,\n});\n```\n\n----------------------------------------\n\nTITLE: Running Node.js with Pre-required Sentry Initialization using Bash\nDESCRIPTION: Demonstrates how to launch a Node.js application while ensuring the Sentry initialization file (`instrument.js` or `instrument.mjs`) is loaded before any other modules using the `--require` flag for CommonJS (CJS) or the `--import` flag for ECMAScript Modules (ESM, Node v18.19.0+). This is the preferred method for v8.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/v8-node.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# If you are using CommonJS (CJS)\nnode --require ./instrument.js app.js\n\n# If you are using ECMAScript Modules (ESM)\n# Note: This is only available for Node v18.19.0 onwards.\nnode --import ./instrument.mjs app.mjs\n```\n\n----------------------------------------\n\nTITLE: Disabling Auto Middleware Instrumentation in Next.js Config (JavaScript)\nDESCRIPTION: Demonstrates how to disable automatic instrumentation of Next.js middleware within the `next.config.js` file. By setting `autoInstrumentMiddleware` to `false` inside the `sentry` configuration object, developers can opt-out of the default behavior and use manual instrumentation if preferred.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/changelog/v7.md#_snippet_45\n\nLANGUAGE: javascript\nCODE:\n```\nconst moduleExports = {\n  sentry: {\n    autoInstrumentMiddleware: false,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Sentry Nuxt with Pinia Integration - TypeScript\nDESCRIPTION: Demonstrates how to configure the `@sentry/nuxt` SDK client to include the `piniaIntegration`. This integration tracks the state of a Pinia store when errors are captured, providing additional context for debugging. It requires importing the Pinia instance using `#imports` and passing it to the integration function.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/CHANGELOG.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n// sentry.client.config.ts\nimport { usePinia } from '#imports';\n\nSentry.init({\n  integrations: [\n    Sentry.piniaIntegration(usePinia(), {\n      /* optional Pinia plugin options */\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Instrumenting D1 with Sentry\nDESCRIPTION: This code demonstrates how to use the `instrumentD1WithSentry` method to integrate Sentry with Cloudflare D1.  `instrumentD1WithSentry` wraps the D1 database binding, allowing you to monitor database interactions with Sentry.  This enables error tracking and performance monitoring of D1 queries.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/cloudflare/README.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Sentry from '@sentry/cloudflare';\n\n// env.DB is the D1 DB binding configured in your `wrangler.toml`\nconst db = Sentry.instrumentD1WithSentry(env.DB);\n// Now you can use the database as usual\nawait db.prepare('SELECT * FROM table WHERE id = ?').bind(1).run();\n```\n\n----------------------------------------\n\nTITLE: Wrapping Function Execution with Sentry Performance Span and Span Mutation - JavaScript\nDESCRIPTION: Uses `Sentry.startSpan` with a callback that receives the created span instance. This allows for mutating the span (e.g., adding data or setting status) within the callback before the primary wrapped function logic executes. The span is automatically finished when the callback returns.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/changelog/v7.md#_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n// You can also mutate the span wrapping the callback to set data or status\nSentry.startSpan({ name: 'important function' }, span => {\n  // span is undefined if performance monitoring is turned off or if\n  // the span was not sampled. This is done to reduce overhead.\n  span?.setData('version', '1.0.0');\n  return expensiveFunction();\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing @sentry/browser SDK with Vue integration using @sentry/integrations in JavaScript\nDESCRIPTION: Illustrates the upgrade to version 5.x where optional integrations require installing @sentry/integrations separately. Imports both the main SDK and integrations modules, then initializes with the Vue integration explicitly instantiated from @sentry/integrations. This approach modularizes integrations and allows opt-in usage.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/migration/v4-to-v5_v6.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as Sentry from '@sentry/browser';\nimport * as Integrations from '@sentry/integrations';\n\nSentry.init({\n  dsn: '___PUBLIC_DSN___',\n  integrations: [\n    new Integrations.Vue({\n      Vue,\n      attachProps: true,\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Error Handling in Client Hooks\nDESCRIPTION: This code snippet demonstrates adding the `handleErrorWithSentry` function to the `handleError` hook in `hooks.client.(js|ts)`.  This allows Sentry to capture and report client-side errors, either using a custom error handler or the default one.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/sveltekit/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// hooks.client.(js|ts)\nimport { handleErrorWithSentry } from '@sentry/sveltekit';\n\nconst myErrorHandler = ({ error, event }) => {\n  console.error('An error occurred on the client side:', error, event);\n};\n\nexport const handleError = handleErrorWithSentry(myErrorHandler);\n// or alternatively, if you don't have a custom error handler:\n// export const handleError = handleErrorWithSentry();\n```\n\n----------------------------------------\n\nTITLE: Adding Sentry Middleware - JavaScript\nDESCRIPTION: This JavaScript snippet shows how to add the Sentry middleware to the `src/middleware.js` file. It imports the `sequence` function and the `Sentry` module from `@sentry/astro`. The `onRequest` function sequences Sentry's `handleRequest()` and any other custom handlers. This middleware is crucial for instrumentation and data collection in Astro SSR applications.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/astro/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// src/middleware.js\nimport { sequence } from 'astro:middleware';\nimport * as Sentry from '@sentry/astro';\n\nexport const onRequest = sequence(\n  Sentry.handleRequest(),\n  // Add your other handlers after Sentry.handleRequest()\n);\n```\n\n----------------------------------------\n\nTITLE: v8 example of init with browserTracingIntegration\nDESCRIPTION: This TypeScript example showcases initializing Sentry in v8. It uses the functional form of browser tracing integration and specifies the `tracePropagationTargets` option.  This sets the DSN, enables BrowserTracing and specifies which origins to trace for HTTP headers, which is a replacement for `tracingOrigins`.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/migration/v7-to-v8.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n// v8\nSentry.init({\n  dsn: '__DSN__',\n  integrations: [Sentry.browserTracingIntegration()],\n  tracePropagationTargets: ['localhost', 'example.com'],\n});\n\n```\n\n----------------------------------------\n\nTITLE: Removing @sentry/tracing Dependency in Node.js SDK\nDESCRIPTION: Example of how to update Node.js code to remove the dependency on @sentry/tracing package, using autoDiscoverNodePerformanceMonitoringIntegrations() instead.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/migration/v7-to-v8.md#_snippet_68\n\nLANGUAGE: javascript\nCODE:\n```\n// Before\nconst Sentry = require('@sentry/node');\nrequire('@sentry/tracing');\n\nSentry.init({\n  dsn: '__DSN__',\n  tracesSampleRate: 1.0,\n});\n\n// After\nconst Sentry = require('@sentry/node');\n\nSentry.init({\n  dsn: '__DSN__',\n  tracesSampleRate: 1.0,\n  integrations: [\n    // Automatically instrument Node.js libraries and frameworks\n    ...Sentry.autoDiscoverNodePerformanceMonitoringIntegrations(),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Compiling and Running NestJS Project\nDESCRIPTION: This command is used to start the NestJS application in development mode. It compiles the code, and starts the application with hot-reloading capabilities, so that any changes are reflected immediately.  This command requires the project dependencies to be installed.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/dev-packages/e2e-tests/test-applications/nestjs-fastify/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# development\n$ yarn run start\n```\n\n----------------------------------------\n\nTITLE: Migrate SpanStatus Enum - Sentry JavaScript\nDESCRIPTION: This snippet demonstrates how to migrate from the deprecated `SpanStatus` enum to using string literals and the `spanStatusfromHttpCode` function in Sentry JavaScript SDK version 6.17.0. This change aims to reduce bundle size by avoiding the enum. It requires the `@sentry/tracing` package.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/migration/v6-to-v7.md#_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n// New in 6.17.0:\nimport { spanStatusfromHttpCode } from '@sentry/tracing';\n\nconst status = spanStatusfromHttpCode(403);\n\n// Before:\nimport { SpanStatus } from '@sentry/tracing';\n\nconst status = SpanStatus.fromHttpCode(403);\n```\n\n----------------------------------------\n\nTITLE: Running the Application with NODE_OPTIONS\nDESCRIPTION: This command is used to start the SolidStart application with the Sentry instrumentation by setting the `NODE_OPTIONS` environment variable. It specifies the path to the `instrument.server.mjs` file, which is generated during the build process, allowing Sentry to capture server-side performance data.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/solidstart/README.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nNODE_OPTIONS='--import=./.output/server/instrument.server.mjs' yarn start\n```\n\n----------------------------------------\n\nTITLE: v8 example - init\nDESCRIPTION: This TypeScript example shows how to initialize Sentry in v8 without any extra configuration for metrics.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/migration/v7-to-v8.md#_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\n// v8\nSentry.init({\n  dsn: '__DSN__',\n});\n\n```\n\n----------------------------------------\n\nTITLE: Using `withIsolationScope` - JavaScript\nDESCRIPTION: This demonstrates the use of `Sentry.withIsolationScope` as the replacement for `Sentry.runWithAsyncContext`. Dependencies: `@sentry/node`. Input: A function to be executed within an isolation scope. Output:  The code within the function runs within the Sentry isolation scope.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/migration/v7-to-v8.md#_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\n// after (v8)\nSentry.withIsolationScope(() => {\n  // Your code here...\n});\n```\n\n----------------------------------------\n\nTITLE: Importing instrument.ts file\nDESCRIPTION: This code snippet demonstrates importing the `instrument.ts` file, which contains the Sentry initialization, before any other modules. This is crucial for ensuring that Sentry instruments all modules in the application. It then imports other modules and bootstraps the NestJS application.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/nestjs/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Import this first!\nimport './instrument';\n\n// Now import other modules\nimport * as Sentry from '@sentry/nestjs';\nimport { NestFactory } from '@nestjs/core';\nimport { AppModule } from './app.module';\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n  await app.listen(3000);\n}\n\nbootstrap();\n```\n\n----------------------------------------\n\nTITLE: Setting up ESBuild for Bundling Sentry Profiling with Native Modules\nDESCRIPTION: Example package.json script and ESBuild configuration for bundling @sentry/profiling-node with proper handling of .node native files.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/profiling-node/README.md#_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n// package.json\n{\n  \"scripts\": \"node esbuild.serverless.js\"\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// esbuild.serverless.js\nconst { sentryEsbuildPlugin } = require('@sentry/esbuild-plugin');\n\nrequire('esbuild').build({\n  entryPoints: ['./index.js'],\n  outfile: './dist',\n  platform: 'node',\n  bundle: true,\n  minify: true,\n  sourcemap: true,\n  // This is no longer necessary\n  // external: [\"@sentry/profiling-node\"],\n  loader: {\n    // ensures .node binaries are copied to ./dist\n    '.node': 'copy',\n  },\n  plugins: [\n    // See https://docs.sentry.io/platforms/javascript/sourcemaps/uploading/esbuild/\n    sentryEsbuildPlugin({\n      project: '',\n      org: '',\n      authToken: '',\n      release: '',\n      sourcemaps: {\n        // Specify the directory containing build artifacts\n        assets: './dist/**',\n      },\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Sentry Node SDK via Require Hook (CJS)\nDESCRIPTION: Shows how to initialize the Sentry Node.js SDK in a CommonJS project using the Node.js `--require` flag. Similar to the ESM `--import` method, this enables Sentry instrumentation without modifying application code, provided the SENTRY_DSN environment variable is set. This requires Node.js version 14.8.0 or higher.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/CHANGELOG.md#_snippet_34\n\nLANGUAGE: Shell\nCODE:\n```\nSENTRY_DSN=https://examplePublicKey@o0.ingest.sentry.io/0 node --require=@sentry/node/init app.js\n```\n\n----------------------------------------\n\nTITLE: Replacing API class with new functions\nDESCRIPTION: This code snippet shows how the internal `API` class has been removed and replaced with direct access to client options. It shows how to use `initAPIDetails`, `getEnvelopeEndpointWithUrlEncodedAuth`, and `getStoreEndpointWithUrlEncodedAuth`.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/migration/v6-to-v7.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// New in v7:\nimport {\n  initAPIDetails,\n  getEnvelopeEndpointWithUrlEncodedAuth,\n  getStoreEndpointWithUrlEncodedAuth,\n} from '@sentry/core';\n\nconst client = getCurrentHub().getClient();\nconst dsn = client.getDsn();\nconst options = client.getOptions();\nconst envelopeEndpoint = getEnvelopeEndpointWithUrlEncodedAuth(dsn, options.tunnel);\n```\n\n----------------------------------------\n\nTITLE: Using runWithAsyncContext for Scope Isolation in Sentry Node.js\nDESCRIPTION: Illustrates the usage of `Sentry.runWithAsyncContext` in a Node.js request handler to manually manage asynchronous context isolation. This API provides a way to ensure Sentry's scope (like tags or breadcrumbs) is correctly associated with asynchronous operations, replacing older domain-based approaches. The example shows configuring the scope within the async context to add request data to Sentry events.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/changelog/v7.md#_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Sentry from '@sentry/node';\n\nconst requestHandler = (ctx, next) => {\n  return new Promise((resolve, reject) => {\n    Sentry.runWithAsyncContext(async () => {\n      const hub = Sentry.getCurrentHub();\n\n      hub.configureScope(scope =>\n        scope.addEventProcessor(event =>\n          Sentry.addRequestDataToEvent(event, ctx.request, {\n            include: {\n              user: false,\n            },\n          }),\n        ),\n      );\n\n      try {\n        await next();\n      } catch (err) {\n        reject(err);\n      }\n      resolve();\n    });\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Identifying Users for Sentry Session Replay - JavaScript\nDESCRIPTION: This snippet demonstrates how to associate user information with recorded sessions using `Sentry.setUser()`. This allows you to see user details in the Sentry UI alongside their session replays. Requires `@sentry/browser` or a compatible Sentry SDK.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/replay-internal/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Sentry from '@sentry/browser';\n\nSentry.setUser({ email: 'jane.doe@example.com' });\n```\n\n----------------------------------------\n\nTITLE: Migrating from Hub to Scope API for Event Capture in Typescript\nDESCRIPTION: This code snippet illustrates how to capture events using the new Scope API, replacing the deprecated Hub-based approach. It initializes a client, creates a new scope, sets the client on the scope, and then calls `scope.captureException()` to capture an exception within the scope.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/migration/v7-to-v8.md#_snippet_63\n\nLANGUAGE: typescript\nCODE:\n```\n// OLD\nconst client = new Client();\nconst hub = new Hub(client);\nhub.captureException();\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// NEW\nconst client = new Client();\nconst scope = new Scope();\nscope.setClient(client);\nscope.captureException();\n```\n\n----------------------------------------\n\nTITLE: Creating a manual span with startSpanManual() in JavaScript\nDESCRIPTION: Illustrates the use of startSpanManual() API for creating spans that require explicit ending via span.end(), useful when automatic lifecycle management does not fit the use case.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/v8-new-performance-apis.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nSentry.startSpanManual(\n  {\n    name: 'my-span',\n  },\n  span => {\n    // do something that you want to measure\n\n    // Now manually end the span ourselves\n    span.end();\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Providing Framework-Specific Error Utilities (JavaScript)\nDESCRIPTION: Provides an example of a framework-specific utility function designed to integrate Sentry's error handling into a particular server framework (like Fastify), making setup easier for users. Requires an application instance (`app`).\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/creating-a-new-sdk.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nsetupFastifyErrorHandler(app)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Sentry Browser Tracing in Angular (Ivy) in JavaScript\nDESCRIPTION: This snippet shows how to configure browser tracing integration using '@sentry/angular' or '@sentry/angular-ivy' with the Sentry JavaScript SDK. Browser tracing is initialized via 'browserTracingIntegration', but the separate TraceService must still be included as before. This setup provides transaction tracing and performance monitoring in Angular applications. Ensure correct package installation and Angular dependency injection setup.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/migration/v7-to-v8.md#_snippet_58\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as Sentry from '@sentry/angular';\n\nSentry.init({\n  integrations: [Sentry.browserTracingIntegration()],\n});\n\n// You still need to add the TraceService like before!\n```\n\n----------------------------------------\n\nTITLE: Setting Active Span with withActiveSpan - JavaScript\nDESCRIPTION: This snippet shows how to use the `withActiveSpan` method to designate a specific span as the active parent for code executed within a provided callback. This allows you to create child spans using methods like `startInactiveSpan` (or `startSpan`) that correctly nest under the desired parent span.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/changelog/v7.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst parentSpan = Sentry.startInactiveSpan({ name: 'parent' });\nif (parentSpan) {\n  withActiveSpan(parentSpan, () => {\n    // This will be a direct child of parentSpan\n    const childSpan = Sentry.startInactiveSpan({ name: 'child' });\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Using beforeSendLog Option for Filtering\nDESCRIPTION: Illustrates the usage of the `_experiments.beforeSendLog` option to modify or filter log messages before they are sent to Sentry. This option is used to customize the logging behavior by modifying or filtering the log messages. The example doesn't include the actual implementation of `beforeSendLog`, but it describes its intended purpose.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/CHANGELOG.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n// To filter logs, or update them before they are sent to Sentry, you can use the `_experiments.beforeSendLog` option.\n```\n\n----------------------------------------\n\nTITLE: Initializing Sentry Feedback Widget Integration in JavaScript\nDESCRIPTION: Initializes the Sentry SDK with the feedbackIntegration and enables automatic injection of a floating feedback button into the DOM. Sets up feedbackIntegration with the default option `autoInject: true`, which creates a button that opens the feedback form. Requires the Sentry SDK and feedbackIntegration to be imported and available.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/migration/feedback.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nSentry.init({\n  integrations: [\n    feedbackIntegration({\n      autoInject: true,\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint with Sentry SDK rules\nDESCRIPTION: This JSON snippet demonstrates how to configure your ESLint file to use the `@sentry-internal/eslint-config-sdk` package. It extends the base Sentry SDK rules and sets up specific overrides for TypeScript files (`.ts`, `.tsx`, `.d.ts`), requiring the `parserOptions.project` to be set to your `tsconfig.json` for correct TypeScript rule application.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/eslint-config-sdk/README.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"extends\": [\"@sentry-internal/sdk\"],\n  \"overrides\": [\n    {\n      \"files\": [\"*.ts\", \"*.tsx\", \"*.d.ts\"],\n      \"parserOptions\": {\n        \"project\": \"./tsconfig.json\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Deprecated Tracing Side-Effect Imports in Node.js SDK - JavaScript\nDESCRIPTION: Illustrates removal of side-effect tracing imports for Node.js in Sentry v8. This snippet shows how to update Node.js initialization by deleting the '@sentry/tracing' require statement, as tracing functionality is now included directly within '@sentry/node'. Initialization remains functionally the same, requiring a DSN and sample rate.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/migration/v7-to-v8.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// v7\nconst Sentry = require('@sentry/node');\nrequire('@sentry/tracing');\n\nSentry.init({\n  dsn: '__DSN__',\n  tracesSampleRate: 1.0,\n});\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// v8\nconst Sentry = require('@sentry/node');\n\nSentry.init({\n  dsn: '__DSN__',\n  tracesSampleRate: 1.0,\n});\n```\n\n----------------------------------------\n\nTITLE: Importing and Running application\nDESCRIPTION: This JavaScript snippet demonstrates the proper way to import the Sentry instrumentation file and other modules in a Node.js application. It first imports the Sentry initialization file (instrument.js) and then proceeds to import other modules. This ensures that Sentry's instrumentation is active before other modules are loaded.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/node/README.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n// Import this first!\nimport './instrument';\n\n// Now import other modules\nimport http from 'http';\n\n// Your application code goes here\n```\n\n----------------------------------------\n\nTITLE: Using Sentry.continueTrace with Sentry.withIsolationScope in Typescript\nDESCRIPTION: This snippet demonstrates how to use `Sentry.continueTrace()` within a `Sentry.withIsolationScope()` block in a route handler. It retrieves trace information from request headers and uses it to continue the trace within the callback function, associating events recorded within the callback with the incoming trace. It demonstrates the updated version of `Sentry.continueTrace()` that requires a callback argument.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/migration/v7-to-v8.md#_snippet_64\n\nLANGUAGE: typescript\nCODE:\n```\napp.get('/your-route', req => {\n  Sentry.withIsolationScope(isolationScope => {\n    Sentry.continueTrace(\n      {\n        sentryTrace: req.headers.get('sentry-trace'),\n        baggage: req.headers.get('baggage'),\n      },\n      () => {\n        // All events recorded in this callback will be associated with the incoming trace. For example:\n        Sentry.startSpan({ name: '/my-route' }, async () => {\n          await doExpensiveWork();\n        });\n      },\n    );\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Injecting Sentry TraceService in Angular (TypeScript)\nDESCRIPTION: Injects the `TraceService` using Angular's dependency injection system via `APP_INITIALIZER` or `provideAppInitializer` (Angular 19+). This step is necessary for the SDK to automatically instrument Angular router changes as navigation transactions. Examples for both standalone components and NgModules are provided.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/angular/README.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApplicationConfig, APP_INITIALIZER, provideAppInitializer, inject } from '@angular/core';\nimport { TraceService } from '@sentry/angular'; // Assuming TraceService is exported from @sentry/angular\n\nexport const appConfig: ApplicationConfig = {\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: () => () => {},\n      deps: [TraceService],\n      multi: true,\n    },\n\n    // Starting with Angular 19, we can use `provideAppInitializer`\n    // instead of directly providing `APP_INITIALIZER` (deprecated):\n    provideAppInitializer(() => inject(TraceService)),\n  ],\n};\n\n// Or using an old module approach:\nimport { NgModule } from '@angular/core';\n\n@NgModule({\n  // ...\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: () => () => {},\n      deps: [TraceService],\n      multi: true,\n    },\n\n    // Starting with Angular 19, we can use `provideAppInitializer`\n    // instead of directly providing `APP_INITIALIZER` (deprecated):\n    provideAppInitializer(() => inject(TraceService)),\n  ],\n  // ...\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Running tests with Vitest and Testing Libraries\nDESCRIPTION: Command to execute project tests written with Vitest, @solidjs/testing-library, and @testing-library/jest-dom, designed to validate application functionality using custom matchers.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/dev-packages/e2e-tests/test-applications/solidstart-spa/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Profiling React Components with Sentry Profiler - JavaScript\nDESCRIPTION: This snippet demonstrates how to instrument a React component for performance profiling using Sentry's Profiler HOC from @sentry/react. The Profiler utilizes Sentry tracing (which must be enabled) to collect mount, update, and render timing of wrapped components. Dependencies are @sentry/react and tracing enabled through Sentry.init. The wrapped component will emit performance spans attached to Sentry transactions. Inputs are the component's render events; outputs are tracing spans sent to Sentry.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/react/README.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from 'react';\nimport * as Sentry from '@sentry/react';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <FancyComponent>\n        <InsideComponent someProp={2} />\n        <AnotherComponent />\n      </FancyComponent>\n    );\n  }\n}\n\nexport default Sentry.withProfiler(App);\n```\n\n----------------------------------------\n\nTITLE: Installing Sentry NestJS package\nDESCRIPTION: This command installs the @sentry/nestjs package using npm or yarn. This package provides the necessary tools to integrate Sentry with a NestJS application.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/nestjs/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @sentry/nestjs\n\n# Or yarn\nyarn add @sentry/nestjs\n```\n\n----------------------------------------\n\nTITLE: Configuring Interaction Sample Rate in Browser Tracing - JavaScript\nDESCRIPTION: This snippet demonstrates how to configure the `interactionsSampleRate` option within the `browserTracingIntegration`. This setting controls the sampling rate specifically for Interaction to Next Paint (INP) spans and is applied on top of the global `tracesSampleRate`. For example, `interactionsSampleRate: 0.5` with `tracesSampleRate: 0.1` results in an effective INP sample rate of `0.05`.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/changelog/v7.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nSentry.init({\n  tracesSampleRate: 0.1,\n  integrations: [\n    Sentry.browserTracingIntegration({\n      interactionsSampleRate: 0.5,\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Sentry with Node.js Profiling Integration\nDESCRIPTION: JavaScript code snippet showing how to initialize Sentry with the Node.js profiling integration, configuring trace and profile sampling rates.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/profiling-node/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Sentry from '@sentry/node';\nimport { nodeProfilingIntegration } from '@sentry/profiling-node';\n\nSentry.init({\n  dsn: 'https://7fa19397baaf433f919fbe02228d5470@o1137848.ingest.sentry.io/6625302',\n  debug: true,\n  tracesSampleRate: 1,\n  profilesSampleRate: 1, // Set profiling sampling rate.\n  integrations: [nodeProfilingIntegration()],\n});\n```\n\n----------------------------------------\n\nTITLE: Attaching Sentry Feedback Widget to Custom DOM Element in JavaScript\nDESCRIPTION: Attaches the feedback widget to a custom button element, replacing the default floating button. First obtains a reference to the feedbackIntegration instance either during SDK initialization or via the `getFeedback()` helper. Calls `attachTo()` on the custom button element to bind an onClick event listener that handles showing and hiding the feedback widget. Returns an unsubscribe function to clean up event listeners when needed. Assumes the presence of the Sentry SDK and feedbackIntegration.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/migration/feedback.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Option 1: Keep a reference when you setup the sdk:\nconst feedbackInstance = feedbackIntegration();\nSentry.init({\n  integrations: [feedbackInstance],\n});\n\n// Option 2: Get a reference from the SDK client\nconst feedbackInstance = getFeedback();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst myButton = document.getElementById('my-button');\nconst unsubscribe = feedbackInstance.attachTo(myButton);\n```\n\n----------------------------------------\n\nTITLE: Configuring the ANR Integration in Sentry Node.js\nDESCRIPTION: Demonstrates the updated method (as of v7.91.0) for enabling Application Not Responding (ANR) detection in Node.js applications (Node 16+). This involves adding `Sentry.Integrations.Anr` to the `integrations` array in `Sentry.init`, with optional configuration like `captureStackTrace` and `anrThreshold`. Requires `@sentry/node`.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/changelog/v7.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Sentry from '@sentry/node';\n\nSentry.init({\n  dsn: 'https://public@dsn.ingest.sentry.io/1337',\n  integrations: [new Sentry.Integrations.Anr({ captureStackTrace: true, anrThreshold: 200 })],\n});\n```\n\n----------------------------------------\n\nTITLE: Building and Previewing a Production Svelte App Using npm in Bash\nDESCRIPTION: Command to compile the Svelte project into an optimized production build. The preview command lets users test the built app locally before deployment. The build output can be deployed to environments supported by installing an appropriate SvelteKit adapter. Requires prior successful project setup.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/dev-packages/e2e-tests/test-applications/sveltekit-2/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Adding SentryModule to NestJS AppModule\nDESCRIPTION: This code snippet shows how to import the `SentryModule` into the main NestJS module (`AppModule`).  The `SentryModule.forRoot()` method is used to configure the module. This makes Sentry available throughout the application.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/nestjs/README.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Module } from '@nestjs/common';\nimport { SentryModule } from '@sentry/nestjs/setup';\n\n@Module({\n  imports: [\n    SentryModule.forRoot(),\n    // ...other modules\n  ],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Sentry SvelteKit Plugin for Vercel Adapter in Vite - JavaScript\nDESCRIPTION: This snippet configures the Sentry SvelteKit plugin within Vite to explicitly set the deployment adapter as 'vercel'. It is used in the 'vite.config.js' file and relies on the 'defineConfig', 'sentrySvelteKit', and 'sveltekit' functions or plugins. The key parameter is the 'adapter' field set to 'vercel'; this allows proper source map configuration for Vercel deployments. This configuration is not compatible with Vercel Edge runtime and works only for lambda functions.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/changelog/v7.md#_snippet_30\n\nLANGUAGE: JavaScript\nCODE:\n```\n// vite.config.js\nexport default defineConfig({\n  plugins: [\n    sentrySvelteKit({\n      adapter: 'vercel',\n    }),\n    sveltekit(),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Instrumenting Deno Cron Jobs with Sentry Deno SDK (TypeScript)\nDESCRIPTION: Demonstrates how to configure the Sentry Deno SDK to automatically monitor Deno cron jobs (`Deno.cron`) using Sentry Cron Monitors. This involves adding the `Sentry.DenoCron` integration during `Sentry.init`. Requires Deno v1.38+ running with the `--unstable` flag and the Sentry Deno SDK.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/changelog/v7.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n// Import from the Deno registry\nimport * as Sentry from 'https://deno.land/x/sentry/index.mjs';\n\nSentry.init({\n  dsn: '__DSN__',\n  integrations: [new Sentry.DenoCron()],\n});\n```\n\n----------------------------------------\n\nTITLE: Importing TraceModule for Directive Usage (TypeScript)\nDESCRIPTION: Imports the `TraceModule` from `@sentry/angular` into an Angular component's `imports` array (for standalone components). This makes the `trace` directive available for use within the component's template.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/angular/README.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Component } from '@angular/core';\nimport { TraceModule } from '@sentry/angular';\n\n@Component({\n  selector: 'some-component',\n  imports: [TraceModule],\n  standalone: true, // Assuming standalone component\n  template: `...`\n  // ...\n})\nexport class SomeComponentThatUsesTraceDirective {}\n```\n\n----------------------------------------\n\nTITLE: Wrapping Function Execution with Sentry Performance Span - JavaScript\nDESCRIPTION: Uses `Sentry.startSpan` to automatically create, activate, and finish a performance span around the execution of a provided callback function. This is the recommended way to instrument functions for performance monitoring, simplifying span management.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/changelog/v7.md#_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n// Start a span that tracks the duration of expensiveFunction\nconst result = Sentry.startSpan({ name: 'important function' }, () => {\n  return expensiveFunction();\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Sentry Vue Integration with Tracing Options in JavaScript\nDESCRIPTION: Shows how to initialize the @sentry/vue SDK with the updated vueIntegration method containing tracing options. It demonstrates setting 'trackComponents' to true, customizing the 'timeout', and specifying lifecycle hooks such as 'mount', 'update', and 'unmount' for tracing component behavior. This replaces earlier removed options that were previously direct configuration parameters in Sentry.init. This snippet requires importing Sentry from '@sentry/vue' and initializing the SDK with the integrations option.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/MIGRATION.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Sentry from '@sentry/vue';\n\nSentry.init({\n  integrations: [\n    Sentry.vueIntegration({\n      tracingOptions: {\n        trackComponents: true,\n        timeout: 1000,\n        hooks: ['mount', 'update', 'unmount'],\n      },\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Up a New E2E Test Application with Bash\nDESCRIPTION: Commands to create a new test application folder and configure it to use the fake test registry.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/dev-packages/e2e-tests/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd dev-packages/e2e-tests\n\n# Create a new test application folder\nmkdir test-applications/my-new-test-application # Name of the new folder doesn't technically matter but choose something meaningful\n\n# Create an npm configuration file that uses the fake test registry\ncat > test-applications/my-new-test-application/.npmrc << EOF\n@sentry:registry=http://127.0.0.1:4873\n@sentry-internal:registry=http://127.0.0.1:4873\nEOF\n```\n\n----------------------------------------\n\nTITLE: Measuring Async Callback Duration with startSpan\nDESCRIPTION: This example showcases using `Sentry.startSpan` with an async callback. It measures the time taken by an asynchronous function.  The `await` keyword ensures the span remains active until the asynchronous operation is complete. The asynchronous function must return a promise.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/migration/v7-to-v8.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// `startSpan` works with async callbacks as well - just make sure to return a promise!\nconst value = await Sentry.startSpan({ name: 'mySpan' }, async span => {\n  span.setAttribute('key', 'value');\n  return await expensiveFunction();\n});\n\n```\n\n----------------------------------------\n\nTITLE: Instrumenting Next.js Server Actions with Sentry in TypeScript\nDESCRIPTION: This snippet demonstrates using the Sentry SDK for Next.js to instrument a server action function for error and performance tracking. Dependencies include '@sentry/nextjs' and 'next/headers'. The function myServerAction wraps logic with Sentry.withServerActionInstrumentation, allowing formData, headers, and the option to record the server action's response. Inputs include the server action name, optional form data and headers, and parameters for result recording. The expected output is the execution result tracked by Sentry for observability. Ensure the Sentry Next.js SDK is installed and that your app is configured for server actions.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/changelog/v7.md#_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as Sentry from '@sentry/nextjs';\nimport { headers } from 'next/headers';\n\nexport default function ServerComponent() {\n  async function myServerAction(formData: FormData) {\n    'use server';\n    return await Sentry.withServerActionInstrumentation(\n      'myServerAction', // The name you want to associate this Server Action with in Sentry\n      {\n        formData, // Optionally pass in the form data\n        headers: headers(), // Optionally pass in headers\n        recordResponse: true, // Optionally record the server action response\n      },\n      async () => {\n        // ... Your Server Action code\n\n        return { name: 'John Doe' };\n      },\n    );\n  }\n\n  return (\n    <form action={myServerAction}>\n      <input type=\"text\" name=\"some-input-value\" />\n      <button type=\"submit\">Run Action</button>\n    </form>\n  );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Sentry with --import Flag for Nuxt Server-side (TypeScript)\nDESCRIPTION: Demonstrates how to run a Nuxt server-side application with the Sentry SDK initialized using the Node.js experimental --import flag. This approach ensures proper dynamic import behavior for the server-side SDK initialization. It requires Node.js with the experimental --import flag enabled. The snippet is a command-line example showing the execution of the server bundle along with the Sentry server configuration. This method avoids the limitations of the default dynamic import behavior.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/CHANGELOG.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nnode --import ./.output/server/sentry.server.config.mjs .output/server/index.mjs\n```\n\n----------------------------------------\n\nTITLE: Updating SvelteKit SDK Handle Function\nDESCRIPTION: This code snippet illustrates the required change in the `hooks.server.js` file when updating to the SvelteKit SDK version 7.50.0. The `sentryHandle` function, previously exported directly, now needs to be called as a function to initialize it.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/changelog/v7.md#_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\n// hooks.server.js\n\n// Old:\nexport const handle = sentryHandle;\n// New:\nexport const handle = sentryHandle();\n```\n\n----------------------------------------\n\nTITLE: Using SentryExceptionCaptured Decorator in NestJS\nDESCRIPTION: This code snippet demonstrates using the `@SentryExceptionCaptured()` decorator on the `catch()` method of a global exception filter. This decorator ensures that all exceptions caught by the filter are reported to Sentry.  It requires importing `Catch`, `ExceptionFilter` from `@nestjs/common` and `SentryExceptionCaptured` from `@sentry/nestjs`.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/nestjs/README.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Catch, ExceptionFilter } from '@nestjs/common';\nimport { SentryExceptionCaptured } from '@sentry/nestjs';\n\n@Catch()\nexport class YourCatchAllExceptionFilter implements ExceptionFilter {\n  @SentryExceptionCaptured()\n  catch(exception, host): void {\n    // your implementation here\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Sentry Feature Flags Integration for Manual Feature Flag Tracking (TypeScript)\nDESCRIPTION: Provides an example of setting up Sentry's browser SDK with a custom feature flag integration instance that allows manual tracking of feature flags. This enables attaching custom feature flag evaluations to subsequent error events. The snippet involves importing '@sentry/browser', creating an instance of the feature flags integration, initializing Sentry with it, and then manually adding a feature flag with a boolean state. This method supports scenarios where automated feature flag detection is not sufficient or available.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/CHANGELOG.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as Sentry from '@sentry/browser';\n\nconst featureFlagsIntegrationInstance = Sentry.featureFlagsIntegration();\n\nSentry.init({\n  // Initialize the SDK with the feature flag integration\n  integrations: [featureFlagsIntegrationInstance],\n});\n\n// Manually track a feature flag\nfeatureFlagsIntegrationInstance.addFeatureFlag('my-feature', true);\n```\n\n----------------------------------------\n\nTITLE: Using withMonitor() for Cron Monitoring in Node.js\nDESCRIPTION: Example of using the new Sentry.withMonitor() helper function to wrap callbacks with cron monitoring. This function automatically reports when cron jobs start, complete, or fail, and works with both synchronous and asynchronous callbacks.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/changelog/v7.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as Sentry from '@sentry/node';\n\n// withMonitor() will send checkin when callback is started/finished\n// works with async and sync callbacks.\nconst result = Sentry.withMonitor(\n  'dailyEmail',\n  () => {\n    // withCheckIn return value is same return value here\n    return sendEmail();\n  },\n  // Optional upsert options\n  {\n    schedule: {\n      type: 'crontab',\n      value: '0 * * * *',\n    },\n    // 🇨🇦🫡\n    timezone: 'Canada/Eastern',\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Vite Configuration with Sentry React Router Plugin (TypeScript)\nDESCRIPTION: Imports React Router and Sentry plugins for Vite, then applies `reactRouter()` and `sentryReactRouter()` plugins in the Vite config. The `sentryConfig` object holds authentication tokens and project info for sourcemap uploading and error tracking during build.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/react-router/README.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { reactRouter } from '@react-router/dev/vite';\nimport { sentryReactRouter } from '@sentry/react-router';\nimport { defineConfig } from 'vite';\n\nconst sentryConfig = {\n  authToken: '...',\n  org: '...',\n  project: '...'\n  // Additional config options\n};\n\nexport default defineConfig(config => {\n  return {\n    plugins: [reactRouter(), sentryReactRouter(sentryConfig, config)],\n    sentryConfig\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Replacing `addGlobalEventProcessor` with `addEventProcessor` - JavaScript\nDESCRIPTION: This snippet highlights the replacement of `addGlobalEventProcessor` with `addEventProcessor`. This change impacts how event processors are added globally. Dependencies: `@sentry/browser` or similar Sentry SDK package. Input: An event processing function.  Output: The event is processed and potentially modified.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/migration/v7-to-v8.md#_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\n// v7\naddGlobalEventProcessor(event => {\n  delete event.extra;\n  return event;\n});\n```\n\n----------------------------------------\n\nTITLE: Measuring Callback Duration with startSpan\nDESCRIPTION: This code snippet demonstrates the use of `Sentry.startSpan` to measure the duration of a callback function. It creates a span with a specified name and sets attributes. The span becomes active during the callback's execution, and the function's return value is returned. This applies to both synchronous and asynchronous callbacks, the latter of which requires a promise to be returned.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/migration/v7-to-v8.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// Measure how long a callback takes, `startSpan` returns the value of the callback.\n// The span will become the \"active span\" for the duration of the callback.\nconst value = Sentry.startSpan({ name: 'mySpan' }, span => {\n  span.setAttribute('key', 'value');\n  return expensiveFunction();\n});\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Multiple Sentry Clients - JavaScript\nDESCRIPTION: This snippet shows how to setup multiple Sentry clients in a Node.js environment, where multiple execution contexts are available.  It initializes a default client and then demonstrates setting up and activating different clients within separate execution contexts using `withScope`, `setCurrentClient`, and client `init`.  Each client's lifecycle is contained within the execution context. The DSN must be specified during initialization, represented here by 'xxx'.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/v8-initializing.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as Sentry from '@sentry/node';\n\n// Sets up the _default_ client\nSentry.init({\n  dsn: 'xxx',\n});\n\n// One execution context with client A\nSentry.withScope(() => {\n  const clientA = new Client();\n  Sentry.setCurrentClient(clientA); // binds this client to the current execution context only!\n  clientA.init();\n});\n\n// One execution context with client B\nSentry.withScope(() => {\n  const clientB = new Client();\n  Sentry.setCurrentClient(clientB); // binds this client to the current execution context only!\n  clientB.init();\n});\n```\n\n----------------------------------------\n\nTITLE: Sending Custom Server Runtime Metrics using Sentry Node.js\nDESCRIPTION: Provides examples of sending custom metrics (counters, gauges, distributions, sets) using the `Sentry.metrics` namespace in a Node.js environment. This requires the `metricsAggregator` experiment to be enabled during Sentry initialization. Demonstrates adding values, tags, and units.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/changelog/v7.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// Add 4 to a counter named `hits`\nSentry.metrics.increment('hits', 4);\n\n// Add 2 to gauge named `parallel_requests`, tagged with `type: \"a\"`\nSentry.metrics.gauge('parallel_requests', 2, { tags: { type: 'a' } });\n\n// Add 4.6 to a distribution named `response_time` with unit seconds\nSentry.metrics.distribution('response_time', 4.6, { unit: 'seconds' });\n\n// Add 2 to a set named `valuable.ids`\nSentry.metrics.set('valuable.ids', 2);\n```\n\n----------------------------------------\n\nTITLE: Adding SentryGlobalFilter to NestJS Providers\nDESCRIPTION: This code snippet shows how to add the `SentryGlobalFilter` to the providers array in the main NestJS module.  This filter reports unhandled exceptions to Sentry. It is important to register this filter before any other exception filters using the `APP_FILTER` token.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/nestjs/README.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Module } from '@nestjs/common';\nimport { APP_FILTER } from '@nestjs/core';\nimport { SentryGlobalFilter } from '@sentry/nestjs/setup';\n\n@Module({\n  providers: [\n    {\n      provide: APP_FILTER,\n      useClass: SentryGlobalFilter,\n    },\n    // ..other providers\n  ],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Global Error Boundary Error Reporting with Sentry in React Router (TypeScript)\nDESCRIPTION: Defines a React Error Boundary component that captures exceptions using Sentry, differentiating between 404 responses and other errors, and displays appropriate UI. It includes error details and optional stack trace for debugging.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/react-router/README.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as Sentry from '@sentry/react-router';\n\nexport function ErrorBoundary({ error }: Route.ErrorBoundaryProps) {\n  let message = 'Oops!';\n  let details = 'An unexpected error occurred.';\n  let stack: string | undefined;\n\n  if (isRouteErrorResponse(error)) {\n    message = error.status === 404 ? '404' : 'Error';\n    details = error.status === 404 ? 'The requested page could not be found.' : error.statusText || details;\n  } else if (error && error instanceof Error) {\n    // report non-404 errors to Sentry\n    Sentry.captureException(error);\n    if (import.meta.env.DEV) {\n      details = error.message;\n      stack = error.stack;\n    }\n  }\n\n  return (\n    <main>\n      <h1>{message}</h1>\n      <p>{details}</p>\n      {stack && (\n        <pre>\n          <code>{stack}</code>\n        </pre>\n      )}\n    </main>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Working with Sessions in Sentry JavaScript SDK v7\nDESCRIPTION: Demonstrates the new functional approach to creating and managing session objects in Sentry v7. Sessions are now created and manipulated using utility functions from @sentry/hub instead of using a Session class.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/migration/v6-to-v7.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n// New in v7:\nimport { makeSession, updateSession, closeSession } from '@sentry/hub';\n\nconst session = makeSession({ release: 'v1.0' });\nupdateSession(session, { environment: 'prod' });\ncloseSession(session, 'ok');\n```\n\n----------------------------------------\n\nTITLE: Initializing Sentry on the Server-side\nDESCRIPTION: This snippet initializes the Sentry SDK on the server-side within the `src/instrument.server.ts` file. It sets up Sentry with the provided DSN and configures the sample rate for transactions.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/solidstart/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Sentry from '@sentry/solidstart';\n\nSentry.init({\n  dsn: '__PUBLIC_DSN__',\n  tracesSampleRate: 1.0, //  Capture 100% of the transactions\n});\n```\n\n----------------------------------------\n\nTITLE: Using `trpcMiddleware` - JavaScript\nDESCRIPTION: This snippet showcases the updated import for the Sentry tRPC middleware, from `Sentry.Handlers.trpcMiddleware()` to `Sentry.trpcMiddleware()`. Dependencies: `@sentry/node` and setup tRPC middleware. Input: None. Output: Sentry instrumentation for tRPC middleware.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/migration/v7-to-v8.md#_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\n// v8\nimport * as Sentry from '@sentry/node';\nSentry.trpcMiddleware();\n```\n\n----------------------------------------\n\nTITLE: Setting up Sentry v8 Error Handling for Connect in JavaScript\nDESCRIPTION: Demonstrates integrating Sentry v8 error handling into a Connect middleware application. Call `Sentry.setupConnectErrorHandler(app)` after creating the Connect app instance and before adding routes or other middleware to capture errors and performance data. Requires `@sentry/node` and `connect` packages.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/v8-node.md#_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nconst connect = require('connect');\nconst Sentry = require('@sentry/node');\nconst app = connect();\n\nSentry.setupConnectErrorHandler(app);\n\n// Add your routes, etc.\n\napp.listen(3030);\n```\n\n----------------------------------------\n\nTITLE: Initializing Sentry with kafkajs Integration in JavaScript\nDESCRIPTION: This snippet shows how to configure Sentry to automatically instrument the 'kafkajs' library in a Node.js application. It assumes the Sentry SDK and 'kafkajs' package are installed. The integration is provided via the 'integrations' array by calling 'Sentry.kafkaIntegration()', enabling the capture of spans and traces for Kafka client operations. Inputs to 'Sentry.init' can include additional options, but the key requirement here is adding the Kafka integration for monitoring messaging workflows.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/CHANGELOG.md#_snippet_23\n\nLANGUAGE: JavaScript\nCODE:\n```\nSentry.init({\n  integrations: [Sentry.kafkaIntegration()],\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Manual Sentry Clients - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates initializing and using manual Sentry clients, which is necessary in environments without execution contexts, such as browsers and browser extensions. It initializes the default client, then sets up a manual client by creating a new `Client` and `Scope` and binding the client to the scope. It demonstrates how to manually capture exceptions for the manually setup client by `scope.captureException()`. The initial `Sentry.init` initializes the default Sentry instance and requires a DSN.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/v8-initializing.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Default client - this is used everywhere\nSentry.init({\n  dsn: 'xxx',\n});\n\n// Setup a manual client\nconst clientA = new Client();\nconst scope = new Scope();\nscope.setClient(clientA);\n// You can capture exceptions manually for this client like this:\nscope.captureException();\n```\n\n----------------------------------------\n\nTITLE: Wrapping SolidJS ErrorBoundary with Sentry Error Monitoring in JavaScript\nDESCRIPTION: This snippet shows how to automatically capture unhandled exceptions within a SolidJS component tree using Sentry's withSentryErrorBoundary wrapper. The native ErrorBoundary component from solid-js is wrapped so that any thrown errors are reported to Sentry, and a specified fallback UI is rendered. Requires @sentry/solid and solid-js as dependencies. The fallback parameter receives the error instance for rendering custom error messages. Inputs include the error to be displayed; outputs comprise both a Sentry event and user-facing fallback UI for errors.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/solid/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as Sentry from '@sentry/solid';\nimport { ErrorBoundary } from 'solid-js';\n\nSentry.init({\n  dsn: '__PUBLIC_DSN__',\n  tracesSampleRate: 1.0, //  Capture 100% of the transactions\n});\n\nconst SentryErrorBoundary = Sentry.withSentryErrorBoundary(ErrorBoundary);\n\nrender(\n  () => (\n    <SentryErrorBoundary fallback={err => <div>Error: {err.message}</div>}>\n      <ProblematicComponent />\n    </SentryErrorBoundary>\n  ),\n  document.getElementById('root'),\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Sentry React Tracing Integrations in JavaScript\nDESCRIPTION: This snippet demonstrates initializing Sentry for React with various tracing integrations depending on the router library used. Several integrations are supported, such as 'browserTracingIntegration' for general usage, and specialized integrations for React Router v3-v6, each requiring router-specific dependencies (e.g., 'useEffect', 'useLocation', 'history'). This setup ensures correct performance instrumentation for different routing solutions in a React app.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/migration/v7-to-v8.md#_snippet_56\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as Sentry from '@sentry/react';\n\nSentry.init({\n  integrations: [\n    // No react router\n    Sentry.browserTracingIntegration(),\n    // OR, if you are using react router, instead use one of the following:\n    Sentry.reactRouterV6BrowserTracingIntegration({\n      useEffect,\n      useLocation,\n      useNavigationType,\n      createRoutesFromChildren,\n      matchRoutes,\n      stripBasename,\n    }),\n    Sentry.reactRouterV5BrowserTracingIntegration({\n      history,\n    }),\n    Sentry.reactRouterV4BrowserTracingIntegration({\n      history,\n    }),\n    Sentry.reactRouterV3BrowserTracingIntegration({\n      history,\n      routes,\n      match,\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Instrumenting `node-cron` Library for Sentry Cron Monitoring in Node.js\nDESCRIPTION: Illustrates how to instrument the `node-cron` library using `Sentry.cron.instrumentNodeCron`. It shows how to schedule a task with the instrumented `cron` object, automatically sending check-ins to Sentry Cron Monitors by providing a job name in the options. Requires `@sentry/node` and the `node-cron` library.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/changelog/v7.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Sentry from '@sentry/node';\nimport cron from 'node-cron';\n\nconst cronWithCheckIn = Sentry.cron.instrumentNodeCron(cron);\n\ncronWithCheckIn.schedule(\n  '* * * * *',\n  () => {\n    console.log('running a task every minute');\n  },\n  { name: 'my-cron-job' }, \n);\n```\n\n----------------------------------------\n\nTITLE: Capturing Errors in Remix v2 ErrorBoundary - TypeScript\nDESCRIPTION: This snippet shows how to capture errors within a Remix v2 client-side ErrorBoundary component by using the Sentry helper `captureRemixErrorBoundaryError`. It imports the helper from '@sentry/remix' and invokes it inside the ErrorBoundary component, capturing the error obtained from the Remix `useRouteError` hook. This setup enables enhanced error tracking for Remix v2 client-side boundary errors. The expected input is the error object from the route error context, and the output is the error sent to the Sentry platform.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/changelog/v7.md#_snippet_24\n\nLANGUAGE: TypeScript\nCODE:\n```\n// root.tsx\nimport { captureRemixErrorBoundaryError } from \"@sentry/remix\";\n\nexport const ErrorBoundary: V2_ErrorBoundaryComponent = () => {\n  const error = useRouteError();\n\n  captureRemixErrorBoundaryError(error);\n\n  return <div> ... </div>;\n};\n```\n\n----------------------------------------\n\nTITLE: Sending Cron Monitor Check-ins with Sentry Node SDK TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to integrate Sentry's cron monitoring in a Node.js environment by sending check-ins to notify Sentry about the status of scheduled jobs. It requires the `@sentry/node` package. The first call to `captureCheckIn` marks the job as in progress and returns a `checkInId`. After task execution, the second call sends a successful completion status using the same `checkInId`. Additionally, a third example shows how to notify Sentry on job failure by sending an error status with the same `checkInId`. This two-step check-in process helps monitor job execution and failures.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/changelog/v7.md#_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\nconst Sentry = require('@sentry/node');\n\n// 🖱 Notify Sentry your job is running:\nconst checkInId = Sentry.captureCheckIn({\n  monitorSlug: '<monitor-slug>',\n  status: 'in_progress',\n});\n\n// Execute your scheduled task here...\n\n// 💚 Notify Sentry your job has completed successfully:\nSentry.captureCheckIn({\n  // make sure you pass in the checkInId generated by the first call to captureCheckIn\n  checkInId,\n  monitorSlug: '<monitor-slug>',\n  status: 'ok',\n});\n```\n\n----------------------------------------\n\nTITLE: Using `getCurrentScope` to set tag - JavaScript\nDESCRIPTION: This snippet demonstrates the correct approach for setting a tag using `getCurrentScope()` in Sentry v8. This replaces the deprecated `configureScope` method in v7. Dependencies: `@sentry/browser` or similar Sentry SDK package. Input: None. Output: The scope is configured with a tag.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/migration/v7-to-v8.md#_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\n// v8\nSentry.getCurrentScope().setTag('key', 'value');\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiplexed Transport in Sentry\nDESCRIPTION: This code demonstrates setting up a multiplexed transport in Sentry to send events to different DSNs based on custom logic.  It uses `makeMultiplexedTransport` and a function (`dsnFromFeature`) to determine the appropriate DSN(s) based on the `feature` tag of the event. This feature allows sending events to specific Sentry projects depending on event properties.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/changelog/v7.md#_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\nimport { makeMultiplexedTransport } from '@sentry/core';\nimport { init, captureException, makeFetchTransport } from '@sentry/browser';\n\nfunction dsnFromFeature({ getEvent }) {\n  const event = getEvent();\n  switch (event?.tags?.feature) {\n    case 'cart':\n      return ['__CART_DSN__'];\n    case 'gallery':\n      return ['__GALLERY_DSN__'];\n  }\n  return [];\n}\n\ninit({\n  dsn: '__FALLBACK_DSN__',\n  transport: makeMultiplexedTransport(makeFetchTransport, dsnFromFeature),\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Sentry ESM Loader Hooks in Node.js\nDESCRIPTION: Demonstrates how to run a Node.js application with Sentry's ESM loader hooks for instrumentation. Use `--experimental-loader=@sentry/node/hook` for Node.js <= 18.18.2 and `--import=@sentry/node/register` for Node.js >= 18.19.0. These hooks are necessary for instrumenting third-party packages and Node.js APIs when using ESM. Note: Potential upstream bugs may affect functionality in alpha versions.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/CHANGELOG.md#_snippet_40\n\nLANGUAGE: sh\nCODE:\n```\n# For Node.js <= 18.18.2\nnode --experimental-loader=@sentry/node/hook your-app.js\n\n# For Node.js >= 18.19.0\nnode --import=@sentry/node/register your-app.js\n```\n\n----------------------------------------\n\nTITLE: Executing Sentry Error Reporting Function in Node.js (TypeScript)\nDESCRIPTION: This snippet shows calling the `runSentry` function imported from another file within a TypeScript context. It demonstrates how the function is invoked and followed by a system call to list open files for the running process, which may be used for debugging memory leaks or resource usage. Dependencies include Node.js built-in `child_process.execSync`. The snippet simulates runtime execution of the error capturing logic.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/dev-packages/node-integration-tests/test.txt#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { runSentry } from './other-file';\n\nrunSentry();\n\nconsole.log(execSync(`lsof -p ${process.pid}`, { stdio: 'inherit', cwd: process.cwd() }));\n```\n\n----------------------------------------\n\nTITLE: Starting a Profiled Span in Sentry\nDESCRIPTION: Example of how to start a span that will be automatically profiled by the Sentry SDK.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/profiling-node/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nSentry.startSpan({ name: 'some workflow' }, () => {\n  // The code in here will be profiled\n});\n```\n\n----------------------------------------\n\nTITLE: Using SentryTraced Decorator in NestJS\nDESCRIPTION: This code snippet demonstrates using the `@SentryTraced()` decorator to gain performance insights for a function within a NestJS application.  The decorator adds a span to the Sentry transaction, allowing for detailed performance monitoring.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/nestjs/README.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable } from '@nestjs/common';\nimport { SentryTraced } from '@sentry/nestjs';\n\n@Injectable()\nexport class ExampleService {\n  @SentryTraced('example function')\n  async performTask() {\n    // Your business logic here\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Sentry Client-Side in Remix (TypeScript)\nDESCRIPTION: Demonstrates how to initialize the Sentry SDK in the `entry.client.tsx` file of a Remix application. It configures the DSN, sets the `tracesSampleRate`, and enables browser tracing using the `browserTracingIntegration`, providing necessary Remix hooks (`useEffect`, `useLocation`, `useMatches`) for instrumentation.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/remix/README.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// entry.client.tsx\n\nimport { useLocation, useMatches } from '@remix-run/react';\nimport * as Sentry from '@sentry/remix';\nimport { useEffect } from 'react';\n\nSentry.init({\n  dsn: '__DSN__',\n  tracesSampleRate: 1,\n  integrations: [\n    Sentry.browserTracingIntegration({\n      useEffect,\n      useLocation,\n      useMatches,\n    }),\n  ],\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js withSentryConfig (New)\nDESCRIPTION: Illustrates the new method of configuring `withSentryConfig` in Next.js SDK v8, where webpack plugin and SDK options are merged into a single configuration object passed as the second argument. This simplifies configuration and ensures proper typing.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/migration/v7-to-v8.md#_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\n// NEW\nconst nextConfig = {\n  // Your Next.js options...\n};\n\nmodule.exports = withSentryConfig(nextConfig, {\n  // Your Sentry Webpack Plugin Options...\n  // AND your Sentry SDK options...\n});\n```\n\n----------------------------------------\n\nTITLE: Replacing `configureScope` with `getCurrentScope` - JavaScript\nDESCRIPTION: This snippet demonstrates the change in how scope is accessed and modified.  The `Sentry.configureScope` method has been removed, and now `Sentry.getCurrentScope()` should be used. Dependencies: `@sentry/browser` or similar Sentry SDK package.  Input:  None. Output:  The scope is configured with a tag.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/migration/v7-to-v8.md#_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\n// v7\nSentry.configureScope(scope => {\n  scope.setTag('key', 'value');\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Rollup to Mark Sentry Profiling as External\nDESCRIPTION: Rollup configuration to exclude @sentry/profiling-node from bundling to avoid issues with native modules.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/profiling-node/README.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  entry: 'index.js',\n  external: '@sentry/profiling-node'\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Sentry Replay Sample Rates via Top-Level Options - JavaScript\nDESCRIPTION: This snippet illustrates the recommended, current approach for configuring Replay session and error sampling rates directly as top-level options in the Sentry.init() configuration object. The snippet requires the Sentry JavaScript SDK and assumes the Replay integration is available via 'new Replay()'. Main parameters are 'replaysSessionSampleRate' and 'replaysOnErrorSampleRate'; 'integrations' array now only contains Replay settings not related to sample rates. This pattern is required for SDK version 7.24.0 and newer.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/migration/replay.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nSentry.init({\n  dsn: '__DSN__',\n  replaysSessionSampleRate: 0.1,\n  replaysOnErrorSampleRate: 1.0,\n  integrations: [\n    new Replay({\n      // other replay config still goes in here\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Sentry Prisma Integration Custom Instrumentation JavaScript\nDESCRIPTION: Configures the Sentry Node.js SDK to use a specific version of the `@prisma/instrumentation` package for Prisma tracing. This is achieved by passing a `new PrismaInstrumentation()` instance to the `prismaInstrumentation` option within the `prismaIntegration` configuration. This overrides the default instrumentation provided by the Sentry integration.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/MIGRATION.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { PrismaInstrumentation } from '@prisma/instrumentation';\nSentry.init({\n  integrations: [\n    prismaIntegration({\n      // Override the default instrumentation that Sentry uses\n      prismaInstrumentation: new PrismaInstrumentation(),\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring `autoInjectServerSentry`\nDESCRIPTION: This snippet demonstrates the usage of the `autoInjectServerSentry` option in the `withSentry` configuration. This option is used in cases where modifying `NODE_OPTIONS` is not possible, adding a top-level import of `instrument.server.mjs` to the server entry file. Note that it has a fundamental restriction and only supports limited performance instrumentation.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/solidstart/README.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@solidjs/start/config';\nimport { withSentry } from '@sentry/solidstart';\n\nexport default defineConfig(\n  withSentry(\n    {\n      // ...\n      middleware: './src/middleware.ts',\n    },\n    {\n      org: process.env.SENTRY_ORG,\n      project: process.env.SENTRY_PROJECT,\n      authToken: process.env.SENTRY_AUTH_TOKEN,\n      debug: true,\n      // optional: if your `instrument.server.ts` file is not located inside `src`\n      instrumentation: './mypath/instrument.server.ts',\n      // optional: if NODE_OPTIONS or --import is not avaiable\n      autoInjectServerSentry: 'top-level-import',\n    },\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Migrating raven-js usage to @sentry/browser SDK in JavaScript\nDESCRIPTION: Provides a side-by-side comparison of initializing and configuring the deprecated raven-js SDK versus the new @sentry/browser SDK. Includes examples for setup with a DSN and release, setting global tags, setting user context, capturing exceptions and messages with scoped extra data, and handling breadcrumbs. This facilitates migration by showing equivalent modern usage patterns aligned with the updated API.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/migration/v4-to-v5_v6.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nRaven.config('___PUBLIC_DSN___', {\n  release: '1.3.0',\n}).install();\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nSentry.init({\n  dsn: '___PUBLIC_DSN___',\n  release: '1.3.0',\n});\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nRaven.setTagsContext({ key: 'value' });\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nSentry.setTag('key', 'value');\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nRaven.setUserContext({\n  id: '123',\n  email: 'david@example.com',\n});\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nSentry.setUser({\n  id: '123',\n  email: 'david@example.com',\n});\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\ntry {\n  throwingFunction();\n} catch (e) {\n  Raven.captureException(e, { extra: { debug: false } });\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\ntry {\n  throwingFunction();\n} catch (e) {\n  Sentry.withScope(scope => {\n    scope.setExtra('debug', false);\n    Sentry.captureException(e);\n  });\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nRaven.captureMessage('test1', 'info');\nRaven.captureMessage('test2', 'info', { extra: { debug: false } });\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nSentry.captureMessage('test1', 'info');\nSentry.withScope(scope => {\n  scope.setExtra('debug', false);\n  Sentry.captureMessage('test2', 'info');\n});\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nRaven.captureBreadcrumb({\n  message: 'Item added to shopping cart',\n  category: 'action',\n  data: {\n    isbn: '978-1617290541',\n    cartSize: '3',\n  },\n});\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nSentry.addBreadcrumb({\n  message: 'Item added to shopping cart',\n  category: 'action',\n  data: {\n    isbn: '978-1617290541',\n    cartSize: '3',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Sentry Vite Plugins for SvelteKit Integration\nDESCRIPTION: Demonstrates the new approach to integrating Sentry into a SvelteKit project using Vite, replacing the deprecated `withSentryViteConfig` wrapper. This involves importing `sentrySvelteKit` from `@sentry/sveltekit` and adding it directly to the `plugins` array in `vite.config.js`, alongside the standard `sveltekit()` plugin. This method is presented as a more transparent and native way to apply build-time modifications for Sentry.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/changelog/v7.md#_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\n// vite.config.js\nimport { sveltekit } from '@sveltejs/kit/vite';\nimport { sentrySvelteKit } from '@sentry/sveltekit';\n\nexport default {\n  plugins: [sentrySvelteKit(), sveltekit()],\n  // ... rest of your Vite config\n};\n```\n\n----------------------------------------\n\nTITLE: Enabling Browser Metrics Aggregation in Sentry Browser SDK\nDESCRIPTION: Shows how to enable the experimental browser metrics feature in Sentry's Browser SDKs (`@sentry/browser`, framework SDKs). This is achieved by adding the `Sentry.metrics.MetricsAggregator` integration to the `integrations` list during `Sentry.init`. This is a prerequisite for sending custom browser metrics.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/changelog/v7.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nSentry.init({\n  dsn: '__DSN__',\n  integrations: [new Sentry.metrics.MetricsAggregator()],\n});\n```\n\n----------------------------------------\n\nTITLE: Using Sentry.ErrorBoundary Component for Error Catching - JavaScript\nDESCRIPTION: This snippet shows how to use the ErrorBoundary component from @sentry/react to automatically report JavaScript errors in a component tree. It uses a custom fallback UI and the showDialog prop to show a dialog on error capture. Required dependencies are @sentry/react and React. The fallback prop specifies the UI shown when an error occurs, and showDialog triggers Sentry's report dialog. This component captures all errors in the subtree, sends events to Sentry, and displays the fallback UI.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/react/README.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React from 'react';\nimport * as Sentry from '@sentry/react';\n\nfunction FallbackComponent() {\n  return <div>An error has occurred</div>;\n}\n\nclass App extends React.Component {\n  render() {\n    return (\n      <Sentry.ErrorBoundary fallback={FallbackComponent} showDialog>\n        <OtherComponents />\n      </Sentry.ErrorBoundary>\n    );\n  }\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Running Sentry migr8 for Automated Migration in Bash\nDESCRIPTION: This command runs the experimental '@sentry/migr8' tool to assist in automatically migrating and updating Sentry SDK usage in a project. Requires Node.js version 18 or higher and an internet connection to download the migr8 package from npm. The tool interactively prompts for upgrade choices and patches code, but manual review of changes is advised before committing.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/migration/v7-to-v8.md#_snippet_54\n\nLANGUAGE: Bash\nCODE:\n```\nnpx @sentry/migr8@latest\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite for Sentry Profiling\nDESCRIPTION: Vite configuration to exclude @sentry/profiling-node from SSR bundling to avoid issues with native modules.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/profiling-node/README.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nssr: {\n  external: ['@sentry/profiling-node'];\n}\n```\n\n----------------------------------------\n\nTITLE: Using Sentry SDK Functions in Deno for Setting Context and Capturing Events\nDESCRIPTION: This snippet illustrates how to use various exported functions of the Deno Sentry SDK to set user data, tags, and extras, add breadcrumbs, and capture messages, exceptions, or custom events. These functions require prior initialization via Sentry.init().\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/deno/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Set user information, as well as tags and further extras\nSentry.setExtra('battery', 0.7);\nSentry.setTag('user_mode', 'admin');\nSentry.setUser({ id: '4711' });\n\n// Add a breadcrumb for future events\nSentry.addBreadcrumb({\n  message: 'My Breadcrumb',\n  // ...\n});\n\n// Capture exceptions, messages or manual events\nSentry.captureMessage('Hello, world!');\nSentry.captureException(new Error('Good bye'));\nSentry.captureEvent({\n  message: 'Manual',\n  stacktrace: [\n    // ...\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing the Sentry Bun SDK in JavaScript\nDESCRIPTION: Demonstrates how to initialize the Sentry SDK for Bun using both CommonJS (`require`) and ES Modules (`import`) syntax. The `Sentry.init` function should be called as early as possible in the main entry module, providing the DSN (Data Source Name) and other optional configuration settings.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/bun/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// CJS Syntax\nconst Sentry = require('@sentry/bun');\n// ESM Syntax\nimport * as Sentry from '@sentry/bun';\n\nSentry.init({\n  dsn: '__DSN__',\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Custom OpenTelemetry Instrumentation with Sentry v8 in JavaScript\nDESCRIPTION: Shows how to add custom OpenTelemetry instrumentation (e.g., `@opentelemetry/instrumentation-generic-pool`) to a Sentry v8 setup. After initializing Sentry with `Sentry.init()`, use `Sentry.addOpenTelemetryInstrumentation()` to register additional instrumentation libraries.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/v8-node.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nconst Sentry = require('@sentry/node');\nconst { GenericPoolInstrumentation } = require('@opentelemetry/instrumentation-generic-pool');\n\nSentry.init({\n  dsn: '__DSN__',\n});\n\n// Afterwards, you can add additional instrumentation:\nSentry.addOpenTelemetryInstrumentation(new GenericPoolInstrumentation());\n```\n\n----------------------------------------\n\nTITLE: Wrapping Error Handler with Sentry in Remix using TypeScript\nDESCRIPTION: This snippet shows how to wrap a custom error handler with Sentry error tracking in a Remix application using TypeScript. The recommended approach is to use 'wrapHandleErrorWithSentry' from '@sentry/remix', replacing the older and deprecated 'wrapRemixHandleError'. The code is placed in 'entry.server.ts' and outputs a handler bound with Sentry's error reporting. Requires installation of Sentry Remix SDK and TypeScript environment.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/migration/v7-to-v8.md#_snippet_61\n\nLANGUAGE: TypeScript\nCODE:\n```\n// entry.server.ts\n\nexport const handleError = Sentry.wrapHandleErrorWithSentry(() => {\n  // Custom handleError implementation\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Vercel NCC for Sentry Profiling\nDESCRIPTION: Vercel NCC configuration to mark @sentry/profiling-node as an external dependency to avoid bundling issues.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/profiling-node/README.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  externals: [\"@sentry/profiling-node\"],\n}\n```\n\n----------------------------------------\n\nTITLE: Setting compatibility flags in wrangler.jsonc\nDESCRIPTION: This snippet shows how to set the `nodejs_als` compatibility flag in `wrangler.jsonc` file. The `nodejs_als` compatibility flag is required because the Sentry SDK needs access to the `AsyncLocalStorage` API to work correctly. This ensures proper functionality within the Cloudflare Worker environment.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/cloudflare/README.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compatibility_flags\": [\n    \"nodejs_als\"\n    // \"nodejs_compat\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Web Crawler Access - robots.txt\nDESCRIPTION: This snippet defines the rules for web crawlers accessing the website. The `User-agent: *` directive specifies that the rules apply to all crawlers. The `Disallow:` directive indicates that no paths are currently disallowed, meaning crawlers are permitted to access all parts of the site.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/dev-packages/e2e-tests/test-applications/create-react-app/public/robots.txt#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n# https://www.robotstxt.org/robotstxt.html\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Add Sentry Build Hook to Vite-Router Config (TypeScript)\nDESCRIPTION: Includes the `sentryOnBuildEnd` hook from Sentry in the Vite router configuration to enable sourcemaps upload after builds for error tracing and debugging.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/react-router/README.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport type { Config } from '@react-router/dev/config';\nimport { sentryOnBuildEnd } from '@sentry/react-router';\n\nexport default {\n  ssr: true,\n  buildEnd: sentryOnBuildEnd,\n} satisfies Config;\n```\n\n----------------------------------------\n\nTITLE: Disabling Default Healthcheck Transaction Filtering with InboundFilters - Sentry JavaScript\nDESCRIPTION: This example illustrates how to initialize the Sentry JavaScript SDK with the InboundFilters integration, disabling the built-in filtering of health check transactions by setting the 'disableTransactionDefaults' option to true. The code requires the Sentry SDK and optionally the InboundFilters integration. The main parameter is the integrations array, which includes an instance of InboundFilters. It disables filtering of default healthcheck transactions, ensuring that they are reported.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/changelog/v7.md#_snippet_29\n\nLANGUAGE: JavaScript\nCODE:\n```\nSentry.init({\n  //...\n  integrations: [new InboundFilters({ disableTransactionDefaults: true })],\n});\n```\n\n----------------------------------------\n\nTITLE: Wrapping CloudEvent Functions with Sentry in Google Cloud - JavaScript\nDESCRIPTION: This snippet demonstrates applying Sentry monitoring to a Google Cloud Function triggered by a CloudEvent. By wrapping the CloudEvent handler in 'Sentry.wrapCloudEventFunction', any exceptions thrown are automatically reported to Sentry error tracking. The required package is '@sentry/google-cloud-serverless'. The wrapped function receives 'context' and 'callback' arguments, and returns an export ready for serverless deployment.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/google-cloud-serverless/README.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nexports.helloEvents = Sentry.wrapCloudEventFunction((context, callback) => {\n  throw new Error('oh, hello there!');\n});\n```\n\n----------------------------------------\n\nTITLE: Migrating from Class-based to Functional Integration Setup in Sentry Browser JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to migrate from using the deprecated class-based `Replay` and `Feedback` integrations to the new functional `replayIntegration` and `feedbackIntegration` methods when initializing Sentry in the browser SDK. It requires the `@sentry/browser` package as a dependency. The `init` function's `integrations` array should use the new functions instead of `new Sentry.Replay()` and `new Sentry.Feedback()`. Inputs include the full set of Sentry initialization options; output is a properly configured Sentry instance. Only one set of functional replacements should be provided per integration. Ensure no duplicate integrations are present.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/changelog/v7.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as Sentry from '@sentry/browser';\n\nSentry.init({\n  integrations: [\n    // Instead of\n    new Sentry.Replay(),\n    new Sentry.Feedback(),\n    // Use the functional replacement:\n    Sentry.replayIntegration(),\n    Sentry.feedbackIntegration(),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Sentry Replay Sample Rates via Integration Options - JavaScript\nDESCRIPTION: This snippet demonstrates the legacy approach of configuring Replay session and error sampling rates as options within the Replay integration when calling Sentry.init(). It depends on the Sentry JavaScript SDK and assumes import/availability of both Sentry and the Replay module. Key input parameters include 'sessionSampleRate' and 'errorSampleRate'. Note: This method is now deprecated; do not use in SDK versions 7.24.0 and above.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/migration/replay.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nSentry.init({\n  dsn: '__DSN__',\n  integrations: [\n    new Replay({\n      sessionSampleRate: 0.1,\n      errorSampleRate: 1.0,\n    }),\n  ],\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Sentry tRPC Middleware to tRPC Procedures - TypeScript\nDESCRIPTION: Demonstrates how to apply Sentry's tRPC middleware to procedures in a tRPC server. This enables automatic enrichment of Sentry transactions with tRPC-specific context. Dependencies include '@trpc/server', '@sentry/node', and the Sentry SDK's tRPC middleware support (available from 7.46.0). The code sets up the middleware with the \"attachRpcInput\" parameter enabled, and uses it in procedures to capture additional input context.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/changelog/v7.md#_snippet_43\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { initTRPC } from '@trpc/server';\nimport * as Sentry from '@sentry/node';\n\nconst t = initTRPC.context().create();\nconst sentryMiddleware = t.middleware(\n  Sentry.Handlers.trpcMiddleware({\n    attachRpcInput: true,\n  }),\n);\n\nconst sentrifiedProcedure = t.procedure.use(sentryMiddleware);\n```\n\n----------------------------------------\n\nTITLE: Adding Request Handler in Server Hooks\nDESCRIPTION: This snippet demonstrates how to add the `sentryHandle` function to the `handle` hook in `hooks.server.ts`. This is essential for Sentry to process and monitor incoming requests.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/sveltekit/README.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// hooks.server.(js|ts)\nimport { sentryHandle } from '@sentry/sveltekit';\n\nexport const handle = sentryHandle();\n// or alternatively, if you already have a handler defined, use the `sequence` function\n// see: https://kit.svelte.dev/docs/modules#sveltejs-kit-hooks-sequence\n// export const handle = sequence(sentryHandle(), yourHandler());\n```\n\n----------------------------------------\n\nTITLE: Using the TraceMethod Decorator in Angular Components (TypeScript)\nDESCRIPTION: Applies the `@TraceMethod()` decorator from `@sentry/angular` to a specific method within an Angular component, such as a lifecycle hook like `ngOnInit`. This creates a point-in-time span whenever the decorated method is executed.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/angular/README.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Component, OnInit } from '@angular/core';\nimport { TraceMethod } from '@sentry/angular';\n\n@Component({\n  selector: 'app-footer',\n  templateUrl: './footer.component.html',\n})\nexport class FooterComponent implements OnInit {\n  @TraceMethod()\n  ngOnInit() {}\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Sentry in Server Hooks\nDESCRIPTION: This code initializes the Sentry SDK on the server-side within the `hooks.server.(js|ts)` file. It sets the DSN and the traces sample rate for error tracking and performance monitoring.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/sveltekit/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// hooks.server.(js|ts)\nimport * as Sentry from '@sentry/sveltekit';\n\nSentry.init({\n  dsn: '__DSN__',\n  tracesSampleRate: 1.0,\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Serverless-ESBuild for Sentry Profiling\nDESCRIPTION: Serverless-ESBuild YAML configuration to mark @sentry/profiling-node as external and install it via npm.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/profiling-node/README.md#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\ncustom:\n  esbuild:\n    external:\n      - @sentry/profiling-node\n    packagerOptions:\n      scripts:\n        - npm install @sentry/profiling-node\n```\n\n----------------------------------------\n\nTITLE: Applying Sentry Angular Tracing Decorators in JavaScript (v7)\nDESCRIPTION: This snippet demonstrates the usage of Angular tracing decorators in a JavaScript/TypeScript context, as supported in Sentry v7. It shows how to annotate a component class and method with TraceClassDecorator and TraceMethodDecorator, which automatically instrument performance tracing. The decorators do not accept parameters in this version. Requires Sentry's Angular integration and correct TypeScript/Angular decorator configuration.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/migration/v7-to-v8.md#_snippet_52\n\nLANGUAGE: JavaScript\nCODE:\n```\n// v7\n@Sentry.TraceClassDecorator()\nexport class HeaderComponent {\n  @Sentry.TraceMethodDecorator()\n  ngOnChanges(changes: SimpleChanges) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Svelte Development Server (Bash/npm)\nDESCRIPTION: These commands initiate a local development server for the Svelte project. Running `npm run dev` starts the server, while `npm run dev -- --open` starts the server and automatically opens the application in a new browser tab. This assumes project dependencies have been installed using `npm install`, `pnpm install`, or `yarn install`.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/dev-packages/e2e-tests/test-applications/sveltekit-cloudflare-pages/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\nLANGUAGE: bash\nCODE:\n```\n# or start the server and open the app in a new browser tab\nnpm run dev -- --open\n```\n\n----------------------------------------\n\nTITLE: Setting Tags on Scope for Spans in Sentry v8 (JavaScript)\nDESCRIPTION: Demonstrates how to set tags on the current scope using `Sentry.withScope` and `scope.setTag` before starting a span in Sentry v8. The subsequently created span will inherit these tags, providing a way to associate metadata when the direct `setTag` method on spans is deprecated in favor of attributes.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/v8-new-performance-apis.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nSentry.withScope(scope => {\n  scope.setTag('my-tag', 'tag-value');\n  Sentry.startSpan({ name: 'my-span' }, span => {\n    // do something here\n    // span will have the tags from the containing scope\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Sentry Replay Integration with unblock and unmask Options in JavaScript\nDESCRIPTION: This snippet shows how to initialize Sentry in a JavaScript application with the Replay integration, specifically configuring the 'unblock' and 'unmask' options. The 'unblock' and 'unmask' arrays must be explicitly set, as their new default is an empty array. This configuration allows customizing which DOM elements are unblocked or unmasked for session replay. Dependencies include the Sentry JavaScript SDK with Replay integration enabled. Inputs are CSS selectors for the relevant elements; output is the applied configuration at SDK initialization.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/migration/v7-to-v8.md#_snippet_51\n\nLANGUAGE: JavaScript\nCODE:\n```\nSentry.init({\n  integrations: [\n    Sentry.replayIntegration({\n      unblock: ['.sentry-unblock, [data-sentry-unblock]'],\n      unmask: ['.sentry-unmask, [data-sentry-unmask]'],\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Replay Integration with networkDetailDenyUrls - Sentry JavaScript\nDESCRIPTION: This snippet demonstrates how to configure the Replay integration in the Sentry JavaScript SDK to exclude specific URLs from network detail capture using the 'networkDetailDenyUrls' option. The example requires the Sentry SDK and its Integrations module, and accepts an array of URL patterns (as regular expressions) to exclude. When initialized, the Replay integration will not capture network details for requests matching these patterns. The key input is the 'networkDetailDenyUrls' list, and there are no explicit output values aside from the filtered network capture.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/changelog/v7.md#_snippet_27\n\nLANGUAGE: JavaScript\nCODE:\n```\nSentry.init({\n  integrations: [\n    new Sentry.Integrations.Replay({\n      networkDetailDenyUrls: [/^http:\\/\\/example.com\\/test$/],\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Building Svelte Production App using npm\nDESCRIPTION: Create a production-ready build of the Svelte application. This process typically involves compiling, minifying, and optimizing the code for deployment. Requires dependencies to be installed; outputs the optimized build files into a designated directory (e.g., 'build').\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/dev-packages/e2e-tests/test-applications/sveltekit-2-svelte-5/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Registering Sentry Initialization in Instrumentation File\nDESCRIPTION: Shows how to create an `instrumentation.ts|js` file in the root of your Next.js project and export a `register` function that imports the `sentry.server.config.js|ts` and `sentry.edge.config.js|ts` modules, thus initializing the Sentry SDK for server-side execution. The runtime environment is checked to determine which config to load.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/migration/v7-to-v8.md#_snippet_42\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as Sentry from '@sentry/nextjs';\n\nexport async function register() {\n  if (process.env.NEXT_RUNTIME === 'nodejs') {\n    await import('./sentry.server.config');\n  }\n\n  if (process.env.NEXT_RUNTIME === 'edge') {\n    await import('./sentry.edge.config');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Detecting SDK Connectivity Issues\nDESCRIPTION: This code snippet illustrates the usage of the `diagnoseSdkConnectivity()` function provided by the Sentry SDK. It checks for possible connectivity issues with the Sentry SDK programmatically. It expects the Sentry SDK to be initialized and returns an object indicating different connectivity states. The function result can be either: \"no-client-active\", \"sentry-unreachable\", or `undefined`.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/CHANGELOG.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst result = await Sentry.diagnoseSdkConnectivity();\n```\n\n----------------------------------------\n\nTITLE: Manually Instrumenting Universal Load Functions with Sentry in SvelteKit (JavaScript)\nDESCRIPTION: Demonstrates how to manually instrument universal `load` functions (in `+(page|layout).(js|ts)`) by wrapping the function logic with `wrapLoadWithSentry` imported from `@sentry/sveltekit`. This allows for manual performance monitoring of universal load operations.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/sveltekit/README.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport { wrapLoadWithSentry } from '@sentry/sveltekit';\n\nexport const load = wrapLoadWithSentry(event => {\n  //... your load code\n});\n```\n\n----------------------------------------\n\nTITLE: Running Node.js ESM Apps with Sentry Initialization via --import\nDESCRIPTION: Shows how to run a Node.js ESM application using the `--import` flag to load a module containing the `Sentry.init()` call before the main application starts. This method enables Sentry's ESM patching hooks and is supported in Sentry Node SDK v8.0.0-rc.2+ for specific Node.js versions (18.19.0+ and 20.6.0+).\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/CHANGELOG.md#_snippet_37\n\nLANGUAGE: sh\nCODE:\n```\nnode --import ./your-file-with-sentry-init.mjs your-app.mjs\n```\n\n----------------------------------------\n\nTITLE: Server-side Sentry Initialization in sentry.server.config.ts using JavaScript\nDESCRIPTION: This snippet demonstrates conditional initialization of the Sentry SDK on the server side by checking the presence of an environment variable 'SENTRY_DSN'. It protects against initializing Sentry without a valid DSN and accommodates usage scenarios where useRuntimeConfig cannot be used. It can be combined with environment loading techniques to manage secrets securely.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/nuxt/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Sentry from '@sentry/nuxt';\n\n// Only run `init` when process.env.SENTRY_DSN is available.\nif (process.env.SENTRY_DSN) {\n  Sentry.init({\n    dsn: 'your-dsn',\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Sentry JavaScript SDK\nDESCRIPTION: This snippet details the process of setting up and configuring the Sentry SDK within a JavaScript application. It includes importing the SDK, setting the DSN, environment, release, and other configuration options, enabling error tracking and performance monitoring. Dependencies include the @sentry/browser package.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/replay-internal/test/fixtures/fixJson/1_incompleteJson.txt#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as Sentry from '@sentry/browser';\n\nSentry.init({\n  dsn: 'your-dsn-here',\n  environment: 'production',\n  release: 'my-project@1.0.0',\n  integrations: [new Sentry.Integrations.Breadcrumbs({console: false})],\n  tracesSampleRate: 1.0\n});\n```\n\n----------------------------------------\n\nTITLE: Using `--import` flag\nDESCRIPTION: This bash snippet shows how to use the `--import` command line option in Node.js to import the instrument.mjs file. This ensures that Sentry is initialized before the application code is evaluated, which is required when using ESM. Replace `app.mjs` with the entrypoint of your application.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/node/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# Note: This is only available for Node v18.19.0 onwards.\nnode --import ./instrument.mjs app.mjs\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Map Upload Options\nDESCRIPTION: This code snippet shows how to configure options for source map uploading in `vite.config.(js|ts)`.  It sets the organization, project slug, and authentication token through environment variables or direct configuration, allowing the source maps to be uploaded automatically.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/sveltekit/README.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// vite.config.(js|ts)\nimport { sveltekit } from '@sveltejs/kit/vite';\nimport { sentrySvelteKit } from '@sentry/sveltekit';\n\nexport default {\n  plugins: [\n    sentrySvelteKit({\n      sourceMapsUploadOptions: {\n        org: 'my-org-slug',\n        project: 'my-project-slug',\n        authToken: process.env.SENTRY_AUTH_TOKEN,\n      },\n    }),\n    sveltekit(),\n  ],\n  // ... rest of your Vite config\n};\n```\n\n----------------------------------------\n\nTITLE: Wrapping SolidStart Configuration with Sentry in TypeScript\nDESCRIPTION: Demonstrates how to wrap the SolidStart configuration using the withSentry function from the @sentry/solidstart package instead of using the deprecated sentrySolidStartVite plugin. The snippet shows importing defineConfig from '@solidjs/start/config' and withSentry from '@sentry/solidstart', then exporting the configuration wrapped with Sentry integration. This pattern accepts a SolidStart config object and a second parameter for Sentry build-time options such as project and organization IDs.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/MIGRATION.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// app.config.ts\nimport { defineConfig } from '@solidjs/start/config';\nimport { withSentry } from '@sentry/solidstart';\n\nexport default defineConfig(\n  withSentry(\n    {\n      /* SolidStart config */\n    },\n    {\n      /* Sentry build-time config (like project and org) */\n    },\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Capturing Errors with Event Listeners (JavaScript)\nDESCRIPTION: Illustrates a common pattern in server-side JavaScript frameworks (like Node.js/Express/Koa) for capturing application-level errors using an event listener. This ensures errors are not missed by global handlers. Requires an application instance (`app`).\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/creating-a-new-sdk.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\napp.on('error')\n```\n\n----------------------------------------\n\nTITLE: Migrating from addExtensionMethods to addTracingExtensions\nDESCRIPTION: Comparison of before and after code when migrating from the deprecated addExtensionMethods to the new addTracingExtensions method for adding tracing functionality.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/migration/v7-to-v8.md#_snippet_66\n\nLANGUAGE: javascript\nCODE:\n```\n// Before\nimport * as Sentry from '@sentry/browser';\nimport { addExtensionMethods } from '@sentry/tracing';\n\nSentry.init({\n  dsn: '__DSN__',\n  tracesSampleRate: 1.0,\n});\n\naddExtensionMethods();\n\n// After\nimport * as Sentry from '@sentry/browser';\n\nSentry.init({\n  dsn: '__DSN__',\n  tracesSampleRate: 1.0,\n});\n\nSentry.addTracingExtensions();\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Source Map Upload\nDESCRIPTION: This code shows how to disable the automatic source map upload feature by setting `autoUploadSourceMaps` to `false` in `vite.config.(js|ts)`. This gives developers control over when source maps are uploaded.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/sveltekit/README.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// vite.config.(js|ts)\nimport { sveltekit } from '@sveltejs/kit/vite';\nimport { sentrySvelteKit } from '@sentry/sveltekit';\n\nexport default {\n  plugins: [\n    sentrySvelteKit({\n      autoUploadSourceMaps: false,\n    }),\n    sveltekit(),\n  ],\n  // ... rest of your Vite config\n};\n```\n\n----------------------------------------\n\nTITLE: Monitoring Cron with Sentry\nDESCRIPTION: This snippet shows how to monitor a scheduled cron job in Cloudflare Workers using Sentry. The `Sentry.withMonitor` API wraps the code block to be executed, providing uptime and performance monitoring. The `ctx.waitUntil` method ensures that the task completes even if the request ends.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/cloudflare/README.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  async scheduled(event, env, ctx) {\n    ctx.waitUntil(\n      Sentry.withMonitor('your-cron-name', () => {\n        return doSomeTaskOnASchedule();\n      }),\n    );\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing Sentry Browser Tracing for Next.js, Astro, and SvelteKit in JavaScript\nDESCRIPTION: This snippet illustrates how to manually customize browser tracing options in advanced frameworks such as Next.js, Astro, and SvelteKit. Although browser tracing is set up automatically in these Sentry SDKs, additional configuration can be passed to 'browserTracingIntegration' for specific tracing needs. The snippet is adaptable for frameworks that use compatible Sentry packages.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/migration/v7-to-v8.md#_snippet_60\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as Sentry from '@sentry/nextjs';\n\nSentry.init({\n  integrations: [\n    Sentry.browserTracingIntegration({\n      // add custom options here\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server for a Svelte Project Using npm in Bash\nDESCRIPTION: Commands to start the Svelte development server allowing live reloading as code changes. The second command additionally opens the app automatically in a browser tab. Assumes dependencies have been installed (npm install / pnpm install / yarn). Useful for iterative development and testing.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/dev-packages/e2e-tests/test-applications/sveltekit-2/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n\n# or start the server and open the app in a new browser tab\nnpm run dev -- --open\n```\n\n----------------------------------------\n\nTITLE: Using `addEventProcessor` (again) - JavaScript\nDESCRIPTION: This snippet demonstrates how to use `addEventProcessor` (same as above).  `addGlobalEventProcessor` has been removed. Dependencies:  `@sentry/browser` or similar Sentry SDK package.  Input:  An event processing function.  Output: The event is processed and potentially modified.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/migration/v7-to-v8.md#_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\n// v8\naddEventProcessor(event => {\n  delete event.extra;\n  return event;\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Sentry JavaScript SDK\nDESCRIPTION: This code snippet demonstrates how to initialize the Sentry SDK in a JavaScript application. It includes configuration options such as the DSN URL and environment. Dependencies include the Sentry SDK library. The snippet is essential for setting up error tracking before capturing any errors.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/dev-packages/e2e-tests/test-applications/ember-classic/public/robots.txt#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nSentry.init({\n  dsn: 'https://examplePublicKey@o0.ingest.sentry.io/0',\n  environment: 'production'\n});\n```\n\n----------------------------------------\n\nTITLE: Migrate Dsn Class - Sentry JavaScript\nDESCRIPTION: This snippet shows how to migrate from the deprecated internal `Dsn` class to the new `dsnToString` and `makeDsn` functions in Sentry JavaScript SDK version 6.17.0. This change aims to improve code maintainability and reduce bundle size. It requires the `@sentry/utils` package.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/migration/v6-to-v7.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n// New in 6.17.0:\nimport { dsnToString, makeDsn } from '@sentry/utils';\n\nconst dsn = makeDsn(process.env.SENTRY_DSN);\nconsole.log(dsnToString(dsn));\n\n// Before:\nimport { Dsn } from '@sentry/utils';\n\nconst dsn = new Dsn(process.env.SENTRY_DSN);\nconsole.log(dsn.toString());\n```\n\n----------------------------------------\n\nTITLE: Using `NODE_OPTIONS`\nDESCRIPTION: This bash snippet demonstrates the use of the `NODE_OPTIONS` environment variable to import the `instrument.mjs` file. This is an alternative approach to using the `--import` flag, especially when you can't directly modify the Node.js call.  It sets the environment variable to include the import parameter and then runs the start command via npm.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/node/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nNODE_OPTIONS=\"--import ./instrument.mjs\" npm run start\n```\n\n----------------------------------------\n\nTITLE: Installing Sentry SDK with yarn\nDESCRIPTION: This command installs the Sentry SolidStart SDK using yarn. It adds the necessary dependencies to the project to enable error tracking and performance monitoring.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/solidstart/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @sentry/solidstart\n```\n\n----------------------------------------\n\nTITLE: Configuring Trace Propagation Targets with Sentry SDK Initialization - JavaScript\nDESCRIPTION: This snippet initializes the Sentry JavaScript SDK with the 'tracePropagationTargets' option, which specifies which requests should attach 'sentry-trace' and 'baggage' HTTP headers for distributed tracing. It accepts an array of strings and regular expressions to match relevant URLs. There are no additional dependencies other than the Sentry SDK itself, and the main input is the array passed to 'tracePropagationTargets'. The expected effect is to enable trace propagation even when performance monitoring is disabled.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/changelog/v7.md#_snippet_26\n\nLANGUAGE: JavaScript\nCODE:\n```\nSentry.init({\n  tracePropagationTargets: ['third-party-site.com', /^https:\\/\\/yourserver\\.io\\/api/],\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Nuxt Client Sourcemaps JavaScript\nDESCRIPTION: This code demonstrates how to explicitly enable client-side sourcemap generation within your `nuxt.config.ts` file for the Sentry Nuxt SDK. Setting `sourcemap.client` to `true` is now required for Sentry to un-minify client-side errors and is a change implemented to prevent accidental leakage of source maps.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/CHANGELOG.md#_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nexport default defineNuxtConfig({\n  sourcemap: {\n    client: true,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Sentry Releases and Uploading Sourcemaps with sentry-cli (Bash)\nDESCRIPTION: A Bash script demonstrating how to use `sentry-cli` to create a new Sentry release, upload source maps from a specified directory (`./dist` by default), and finalize the release. Requires `sentry-cli` to be installed and configured. Environment variables or direct values for version, organization slug, project slug, and source maps path need to be provided. The script assumes a standard Vite Svelte project structure; paths may need adjustment.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/svelte/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\nVERSION=<your version>\nORG=<your org-slug>\nPROJECT=<your project-slug>\n\nSOURCEMAPS_PATH=./dist\n\nsentry-cli releases new $VERSION --org $ORG --project $PROJECT\nsentry-cli releases files $VERSION upload-sourcemaps $SOURCEMAPS_PATH --org $ORG --project $PROJECT\nsentry-cli releases finalize $VERSION  --org $ORG --project $PROJECT\n```\n\n----------------------------------------\n\nTITLE: Configuring Sentry Cron Monitor\nDESCRIPTION: This code demonstrates how to configure a Sentry cron monitor with additional metadata. This includes parameters such as the schedule, check-in margin, maximum runtime, and timezone.  These options provide fine-grained control over how Sentry monitors the cron job.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/cloudflare/README.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst monitorConfig = {\n  schedule: {\n    type: 'crontab',\n    value: '* * * * *',\n  },\n  checkinMargin: 2, // In minutes. Optional.\n  maxRuntime: 10, // In minutes. Optional.\n  timezone: 'America/Los_Angeles', // Optional.\n};\n\nexport default {\n  async scheduled(event, env, ctx) {\n    Sentry.withMonitor('your-cron-name', () => doSomeTaskOnASchedule(), monitorConfig);\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Sentry with Solid Router Instrumentation in JavaScript\nDESCRIPTION: This snippet demonstrates how to configure the Sentry SDK in a SolidJS application to instrument client-side routing with Solid Router. It replaces the standard browser tracing integration with solidRouterBrowserTracingIntegration to automatically create and monitor navigation spans for performance tracking. The Router component is wrapped using withSentryRouterRouting, ensuring Sentry can access the router context and track route transitions. Requires installation of @sentry/solid and @solidjs/router. Inputs include Sentry DSN and routing configuration; output is enhanced performance monitoring across route changes. Proper initialization within Sentry.init and component wrapping is essential for full functionality.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/solid/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as Sentry from '@sentry/solid';\nimport { solidRouterBrowserTracingIntegration, withSentryRouterRouting } from '@sentry/solid/solidrouter';\nimport { Route, Router } from '@solidjs/router';\n\nSentry.init({\n  dsn: '__PUBLIC_DSN__',\n  integrations: [solidRouterBrowserTracingIntegration()],\n  tracesSampleRate: 1.0, //  Capture 100% of the transactions\n});\n\nconst SentryRouter = Sentry.withSentryRouterRouting(Router);\n\nrender(\n  () => (\n    <SentryRouter>\n      <Route path=\"/\" component={App} />\n      ...\n    </SentryRouter>\n  ),\n  document.getElementById('root'),\n);\n```\n\n----------------------------------------\n\nTITLE: Apollo Integration Removal - JavaScript\nDESCRIPTION: This snippet details the removal of the `Apollo` integration in v8, as GraphQL support is now automatically added via `graphqlIntegration`. Dependencies: `@sentry/node` or `@sentry/browser` and setup of Apollo. Input:  None (Sentry initialization). Output:  Sentry integration with GraphQL.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/migration/v7-to-v8.md#_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\n// before (v7)\nSentry.init({\n  integrations: [Sentry.integrations.Apollo()],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Sentry with `withSentry`\nDESCRIPTION: This snippet shows how to wrap a SolidStart configuration with `withSentry`. It sets up the integration with the Sentry service. The `withSentry` function accepts the SolidStart config as the first argument and a Sentry configuration object as the second.  It configures the Sentry project settings, including organization, project, authentication token, debugging, and location of the `instrument.server.ts` file if not inside the `src` directory.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/solidstart/README.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@solidjs/start/config';\nimport { withSentry } from '@sentry/solidstart';\n\nexport default defineConfig(\n  withSentry(\n    {\n      // SolidStart config\n      middleware: './src/middleware.ts',\n    },\n    {\n      // Sentry `withSentry` options\n      org: process.env.SENTRY_ORG,\n      project: process.env.SENTRY_PROJECT,\n      authToken: process.env.SENTRY_AUTH_TOKEN,\n      debug: true,\n      // optional: if your `instrument.server.ts` file is not located inside `src`\n      instrumentation: './mypath/instrument.server.ts',\n    },\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing BrowserClient with Explicit Client Options\nDESCRIPTION: This snippet demonstrates how to initialize the `BrowserClient` in v7, now requiring explicit options for `transport`, `stackParser`, and `integrations`. It highlights the shift towards a more configurable client, allowing for tree-shaking and customization. It is crucial for managing dependencies.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/migration/v6-to-v7.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BrowserClient, defaultStackParser, defaultIntegrations, makeFetchTransport } from '@sentry/browser';\n\n// New in v7:\nconst client = new BrowserClient({\n  transport: makeFetchTransport,\n  stackParser: defaultStackParser,\n  integrations: defaultIntegrations,\n});\n```\n\n----------------------------------------\n\nTITLE: Capturing Errors with Sentry JavaScript SDK\nDESCRIPTION: This snippet illustrates how to capture and send an exception to Sentry in a JavaScript application. It relies on the SDK being initialized beforehand and shows how to manually report errors for debugging and tracking purposes.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/dev-packages/e2e-tests/test-applications/ember-classic/public/robots.txt#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\ntry {\n  // code that may throw an error\n} catch (error) {\n  Sentry.captureException(error);\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Trace Directive in Angular Templates (HTML)\nDESCRIPTION: Applies the `trace` directive as an attribute to elements within an Angular component's template. This creates spans tracking the component's lifecycle from `OnInit` to `AfterViewInit`. The directive requires a unique name attribute (`trace=\"unique-name\"`). Requires `TraceModule` to be imported in the parent component or module.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/angular/README.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<app-header trace=\"header\"></app-header>\n<articles-list trace=\"articles-list\"></articles-list>\n<app-footer trace=\"footer\"></app-footer>\n```\n\n----------------------------------------\n\nTITLE: Enabling Update Spans in Sentry Vue and Nuxt Tracing Hooks in TypeScript\nDESCRIPTION: Demonstrates how to re-enable creating \"update\" spans when component tracking is enabled in @sentry/vue and @sentry/nuxt by adding 'update' to the hooks array within the tracingOptions of the vueIntegration. This snippet must be used in Sentry.init where the integrations include vueIntegration. It is useful to restore default tracing behavior which no longer creates 'update' spans automatically.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/MIGRATION.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nSentry.init({\n  integrations: [\n    Sentry.vueIntegration({\n      tracingOptions: {\n        trackComponents: true,\n        hooks: [\n          'mount',\n          'update', // add this line to re-enable update spans\n          'unmount',\n        ],\n      },\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Applying Sentry Angular Tracing Decorators in JavaScript (v8)\nDESCRIPTION: This snippet illustrates the updated decorator usage in Sentry v8 for Angular. TraceClass and TraceMethod replace the old decorator names, and they now accept an optional 'name' parameter for precise transaction naming. This is helpful because Angular's minification can obscure method and class names. Requires Sentry's Angular integration and decorator support in the build environment.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/migration/v7-to-v8.md#_snippet_53\n\nLANGUAGE: JavaScript\nCODE:\n```\n// v8\n@Sentry.TraceClass({ name: 'HeaderComponent' })\nexport class HeaderComponent {\n  @Sentry.TraceMethod({ name: 'ngOnChanges' })\n  ngOnChanges(changes: SimpleChanges) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating Sentry Initialization in Ember App Class\nDESCRIPTION: Shows the recommended placement of `Sentry.init` within the `app.js` file, before the main `Application` class definition. This ensures Sentry is initialized early to capture potential startup issues. It includes standard Ember application imports for context.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/ember/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport Application from '@ember/application';\nimport Resolver from 'ember-resolver';\nimport loadInitializers from 'ember-load-initializers';\nimport config from './config/environment';\nimport * as Sentry from \"@sentry/ember\";\n\nSentry.init({\n  dsn: '__DSN__' // replace __DSN__ with your DSN,\n\n  // Set tracesSampleRate to 1.0 to capture 100%\n  // of transactions for performance monitoring.\n  // We recommend adjusting this value in production,\n  tracesSampleRate: 1.0,\n});\n\nexport default class App extends Application {\n  modulePrefix = config.modulePrefix;\n  podModulePrefix = config.podModulePrefix;\n  Resolver = Resolver;\n}\n```\n\n----------------------------------------\n\nTITLE: Updated `Transport` Interface - TypeScript\nDESCRIPTION: This snippet shows the updated `Transport` interface in TypeScript where the `send` method now always requires a `TransportMakeRequestResponse` to be returned in the promise.  Dependencies: TypeScript enabled project using Sentry SDK. Input: An Event. Output: A Promise that resolves with a TransportMakeRequestResponse. Limitations: Affects the `Transport` interface implementation.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/migration/v7-to-v8.md#_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\n// v8\ninterface Transport {\n  send(event: Event): Promise<TransportMakeRequestResponse>;\n}\n```\n\n----------------------------------------\n\nTITLE: Transport Interface in v7\nDESCRIPTION: This snippet shows the new `Transport` interface.  The `send` function now sends an envelope to the `Envelope` endpoint and provides `flush` to wait for the events to be sent or the timeout to expire. \nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/migration/v6-to-v7.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// New in v7:\nexport interface Transport {\n  /* Sends an envelope to the Envelope endpoint in Sentry */\n  send(request: Envelope): PromiseLike<void>;\n  /* Waits for all events to be sent or the timeout to expire, whichever comes first */\n  flush(timeout?: number): PromiseLike<boolean>;\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Vercel Monitors in Next.js SDK JavaScript\nDESCRIPTION: This snippet illustrates how to disable the automatic creation of Vercel Cron Job monitors in the Next.js SDK by setting the `automaticVercelMonitors` option to `false` within the `sentry` configuration in `next.config.js`. It is useful when you want to opt out of the beta feature that automatically instruments Vercel Cron Jobs for monitoring purposes.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/changelog/v7.md#_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\n// next.config.js\nconst nextConfig = {\n  sentry: {\n    automaticVercelMonitors: false,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Migrating from Hub to Scope API for Client Initialization in Typescript\nDESCRIPTION: This code snippet demonstrates how to initialize a client using the new Scope API, replacing the deprecated Hub-based approach. It initializes the client within an isolation scope using `Sentry.withIsolationScope`, sets the current client, and then calls `client.init()` to finalize the initialization.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/migration/v7-to-v8.md#_snippet_62\n\nLANGUAGE: typescript\nCODE:\n```\n// OLD\nconst hub = new Hub();\nhub.bindClient(client);\nmakeMain(hub);\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// NEW\nSentry.withIsolationScope(() => {\n  Sentry.setCurrentClient(client);\n  client.init();\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Sentry Astro SDK - Bash\nDESCRIPTION: This command installs the Sentry Astro SDK using the `astro` CLI. It downloads and sets up the necessary packages for integrating Sentry into an Astro project. This is a prerequisite for setting up error tracking and performance monitoring.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/astro/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx astro add @sentry/astro\n```\n\n----------------------------------------\n\nTITLE: Migrating Angular Service Initialization to Angular 19 (TypeScript)\nDESCRIPTION: Illustrates how to update the Angular `appConfig` to initialize the Sentry `TraceService` when migrating from Angular 18 to Angular 19. Angular 19 introduces the `provideAppInitializer` function as a recommended alternative to the deprecated `APP_INITIALIZER` token for application initialization tasks.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/CHANGELOG.md#_snippet_17\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Angular 18\nexport const appConfig: ApplicationConfig = {\n  providers: [\n    // other providers\n    {\n      provide: TraceService,\n      deps: [Router],\n    },\n    {\n      provide: APP_INITIALIZER,\n      useFactory: () => () => {},\n      deps: [TraceService],\n      multi: true,\n    },\n  ],\n};\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Angular 19\nexport const appConfig: ApplicationConfig = {\n  providers: [\n    // other providers\n    {\n      provide: TraceService,\n      deps: [Router],\n    },\n    provideAppInitializer(() => {\n      inject(TraceService);\n    }),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: v8 code example - getIntegrationByName\nDESCRIPTION: This code demonstrates the usage of `getClient().getIntegrationByName()` which is replacing the deprecated `Sentry.getIntegration` method in v8.  This is used to retrieve the `Replay` integration.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/migration/v7-to-v8.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n// v8\nconst replay = getClient().getIntegrationByName('Replay');\n\n```\n\n----------------------------------------\n\nTITLE: Uploading Sourcemaps with Sentry Wizard\nDESCRIPTION: This command uses the Sentry Wizard to configure the uploading of source maps. This helps to debug minified code by mapping it back to the original source code. It's crucial for understanding and resolving errors that occur in production.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/cloudflare/README.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpx @sentry/wizard@latest -i sourcemaps\n```\n\n----------------------------------------\n\nTITLE: Configuring Sentry with `withSentry` in SolidStart (JavaScript)\nDESCRIPTION: Demonstrates wrapping the SolidStart configuration with the `withSentry` higher-order function from `@sentry/solidstart`. This automatically adds the necessary Vite plugin and allows passing Sentry build-time options like organization, project, and authentication token for source map uploads alongside the standard SolidStart configuration.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/CHANGELOG.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@solidjs/start/config';\nimport { withSentry } from '@sentry/solidstart';\n\nexport default defineConfig(\n  withSentry(\n    {\n      /* Your SolidStart config options... */\n    },\n    {\n      // Options for setting up source maps\n      org: process.env.SENTRY_ORG,\n      project: process.env.SENTRY_PROJECT,\n      authToken: process.env.SENTRY_AUTH_TOKEN,\n    },\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Adding ReplayCanvas Integration with Sentry Browser JavaScript\nDESCRIPTION: This JavaScript snippet shows how to add the `ReplayCanvas` integration in addition to the standard `Replay` integration in Sentry's browser SDK. It requires the `@sentry/browser` package and the 7.94.0+ version where `ReplayCanvas` is available. The `integrations` array in `Sentry.init` should include both `new Sentry.Replay()` and `new Sentry.ReplayCanvas()` to enable canvas element capture. Inputs include the integrations array; outputs are enhanced replay capabilities. Both integrations must be specified separately and in addition to one another for full functionality.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/changelog/v7.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nSentry.init({\n  integrations: [new Sentry.Replay(), new Sentry.ReplayCanvas()],\n});\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Sourcemap Uploading in Gatsby\nDESCRIPTION: Shows how to disable the automatic sourcemap uploading feature of the Sentry Gatsby plugin by setting the enableClientWebpackPlugin option to false in the plugin configuration.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/gatsby/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  // ...\n  plugins: [\n    {\n      resolve: '@sentry/gatsby',\n      options: {\n        enableClientWebpackPlugin: false,\n      },\n    },\n    // ...\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Setting compatibility flags in wrangler.toml\nDESCRIPTION: This snippet illustrates how to set the `nodejs_als` compatibility flag within the `wrangler.toml` file. This is an alternative to setting it in `wrangler.jsonc`.  Setting this compatibility flag is a prerequisite for Sentry SDK to function correctly, as it gives access to AsyncLocalStorage, allowing the SDK to work within the Cloudflare environment.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/cloudflare/README.md#_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\ncompatibility_flags = [\"nodejs_als\"]\n# compatibility_flags = [\"nodejs_compat\"]\n```\n\n----------------------------------------\n\nTITLE: Creating Inactive Sentry Performance Spans - JavaScript\nDESCRIPTION: Uses `Sentry.startInactiveSpan` to create a performance span without making it the active span. This is useful for tracking concurrent or parallel operations that should not be nested under the current active span. These spans must be manually finished.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/changelog/v7.md#_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nconst span1 = Sentry.startInactiveSpan({ name: 'span1' });\n\nsomeWork();\n\nconst span2 = Sentry.startInactiveSpan({ name: 'span2' });\n\nmoreWork();\n\nconst span3 = Sentry.startInactiveSpan({ name: 'span3' });\n\nevenMoreWork();\n\nspan1?.finish();\nspan2?.finish();\nspan3?.finish();\n```\n\n----------------------------------------\n\nTITLE: Utilities and HTTP Request Interception Setup for Sentry Node.JS SDK Integration Tests in TypeScript\nDESCRIPTION: Describes the utility scripts located in the 'utils/' directory which provide helper functions and Sentry-specific assertions intended for use within test files. It also highlights usage of Nock-based interceptors to capture and analyze Sentry envelope requests via helper functions like 'getEnvelopeRequest' and 'getMultipleEnvelopeRequest'. Manual use of Nock in test cases is supported but should ensure proper cleanup to avoid test flakiness.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/dev-packages/node-integration-tests/README.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n`utils/` contains helpers and Sentry-specific assertions that can be used in (`test.ts`).\n\nNock interceptors are internally used to capture envelope requests by `getEnvelopeRequest` and `getMultipleEnvelopeRequest` helpers. After capturing required requests, the interceptors are removed. Nock can manually be used inside the test cases to intercept requests but should be removed before the test ends, as not to cause flakiness.\n```\n\n----------------------------------------\n\nTITLE: Installing Sentry SDK via npm\nDESCRIPTION: This snippet installs the Sentry Node.js SDK using npm. It specifies the package name and version to be installed.  The command downloads and installs the necessary dependencies for using Sentry in a Node.js project.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/node/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @sentry/node\n```\n\n----------------------------------------\n\nTITLE: Remove Gatsby Initialization via plugin options\nDESCRIPTION: Illustrates the removal of Gatsby SDK initialization via plugin options in v8, requiring the creation of a `sentry.config.js` file for SDK initialization. This configuration change necessitates creating a separate configuration file.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/migration/v7-to-v8.md#_snippet_48\n\nLANGUAGE: js\nCODE:\n```\n// v7 - gatsby-config.js\nmodule.exports = {\n  // ...\n  plugins: [\n    {\n      resolve: '@sentry/gatsby',\n      options: {\n        dsn: process.env.SENTRY_DSN,\n      },\n    },\n    // ...\n  ],\n};\n```\n\nLANGUAGE: js\nCODE:\n```\n// v8 - gatsby-config.js\nmodule.exports = {\n  // ...\n  plugins: [\n    {\n      resolve: '@sentry/gatsby',\n    },\n    // ...\n  ],\n};\n\n// v8 - sentry.config.js\nimport * as Sentry from '@sentry/gatsby';\n\nSentry.init({\n  dsn: '__PUBLIC_DSN__',\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Context and Capturing Errors using @sentry/tanstackstart-react\nDESCRIPTION: This snippet demonstrates how to configure user info, tags, context, breadcrumbs, and capture exceptions or messages using the Sentry SDK specific to TanStack Start React. It showcases integrations for improved error monitoring and logging, requiring the '@sentry/tanstackstart-react' package and TypeScript.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/tanstackstart-react/README.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as Sentry from '@sentry/tanstackstart-react';\n\n// Set user information, as well as tags and further extras\nSentry.setTag('user_mode', 'admin');\nSentry.setUser({ id: '4711' });\nSentry.setContext('application_area', { location: 'checkout' });\n\n// Add a breadcrumb for future events\nSentry.addBreadcrumb({\n  message: '\"Add to cart\" clicked',\n  // ...\n});\n\n// Capture exceptions or messages\nSentry.captureException(new Error('Oh no.'));\nSentry.captureMessage('Hello, world!');\n```\n\n----------------------------------------\n\nTITLE: v7 code example\nDESCRIPTION: This code shows example of v7 code that uses the Replay integration and retrieves it using `Sentry.getIntegration`. It is used to compare the integration with v8's changes.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/migration/v7-to-v8.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// v7\nconst replay = Sentry.getIntegration(Replay);\n\n```\n\n----------------------------------------\n\nTITLE: Sending Sentry User Feedback within beforeSend Hook in JavaScript\nDESCRIPTION: Illustrates integrating custom user feedback collection within the `Sentry.init` configuration using the `beforeSend` hook. When an event (like an error) is captured and about to be sent, this hook executes. Inside the hook, custom feedback logic (`collectYourUserFeedback()`) is called, and the resulting feedback is packaged and sent using `Sentry.captureUserFeedback`, ensuring it's linked to the triggering event via its `event_id`.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/changelog/v7.md#_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\nSentry.init({\n  dsn: '__DSN__',\n  beforeSend: event => {\n    const userFeedback = collectYourUserFeedback();\n    const feedback = {\n      ...userFeedback,\n      event_id: event.event_id.\n    }\n    Sentry.captureUserFeedback(feedback);\n    return event;\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Manually add browserTracingIntegration - Gatsby\nDESCRIPTION: Demonstrates how to manually add the `browserTracingIntegration` in the Gatsby SDK in v8, as it is no longer added automatically.  This configuration requires manual addition of the integration and setting `tracePropagationTargets`.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/migration/v7-to-v8.md#_snippet_50\n\nLANGUAGE: js\nCODE:\n```\n// v7 - gatsby-config.js\nmodule.exports = {\n  // ...\n  plugins: [\n    {\n      resolve: '@sentry/gatsby',\n      options: {\n        tracesSampleRate: 1.0,\n      },\n    },\n    // ...\n  ],\n};\n```\n\nLANGUAGE: js\nCODE:\n```\n// v8 - gatsby-config.js\nmodule.exports = {\n  // ...\n  plugins: [\n    {\n      resolve: '@sentry/gatsby',\n    },\n    // ...\n  ],\n};\n\n// v8 - sentry.config.js\nimport * as Sentry from '@sentry/gatsby';\n\nSentry.init({\n  dsn: '__PUBLIC_DSN__',\n  integrations: [Sentry.browserTracingIntegration()],\n\n  // Set tracesSampleRate to 1.0 to capture 100%\n  // of transactions for performance monitoring.\n  // We recommend adjusting this value in production\n  tracesSampleRate: 1.0,\n\n  // Set `tracePropagationTargets` to control for which URLs distributed tracing should be enabled\n  tracePropagationTargets: ['localhost', /^https:\\/\\/yourserver\\.io\\/api/],\n});\n```\n\n----------------------------------------\n\nTITLE: Controlling Feedback Form Display and Removal Asynchronously in JavaScript\nDESCRIPTION: Shows asynchronous control over the feedback form using the `createForm()` method that returns a promise resolving to the form controller. Illustrates delayed display of the feedback form by opening it 5 seconds after execution and closing/removing it 10 seconds later. Demonstrates the use of `appendToDom()`, `open()`, `close()`, and `removeFromDom()` methods to manage feedback form visibility and existence in the DOM. Useful for programmatic control scenarios, this snippet assumes an environment that supports async/await syntax and proper feedback instance initialization.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/migration/feedback.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst formPromise = feedbackInstance.createForm();\n\n// Automatically insert and open the dialog after 5 seconds\n// then close and remove it after another 10 seconds\nsetTimeout(async () => {\n  const form = await formPromise;\n  form.appendToDom();\n  form.open();\n\n  setTimeout(() => {\n    form.close();\n    form.removeFromDom();\n  }, 10_000);\n}, 5_000);\n```\n\n----------------------------------------\n\nTITLE: Installing Sentry SDK via yarn\nDESCRIPTION: This snippet installs the Sentry Node.js SDK using yarn. It specifies the package name and version to be installed. The command downloads and installs the necessary dependencies for using Sentry in a Node.js project.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/node/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @sentry/node\n```\n\n----------------------------------------\n\nTITLE: Using `graphqlIntegration` - JavaScript\nDESCRIPTION: Demonstrates Sentry initialization in v8 after removing the Apollo integration. The graphql integration is now enabled by default.  Dependencies: `@sentry/node` or `@sentry/browser`. Input: None (Sentry initialization). Output: Sentry integration with GraphQL.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/migration/v7-to-v8.md#_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\n// after (v8)\nSentry.init({});\n```\n\n----------------------------------------\n\nTITLE: Using `addEventProcessor` - JavaScript\nDESCRIPTION: This snippet demonstrates using `addEventProcessor`, which replaces `addGlobalEventProcessor` in v8.  Dependencies:  `@sentry/browser` or similar Sentry SDK package. Input:  An event processing function.  Output: The event is processed and potentially modified.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/migration/v7-to-v8.md#_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\n// v8\nSentry.getGlobalScope().addEventProcessor(event => {\n  delete event.extra;\n  return event;\n});\n```\n\n----------------------------------------\n\nTITLE: Using Sentry.metrics.timing() with a callback (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to use the `Sentry.metrics.timing()` method with a callback function. The method measures the duration of the callback execution. It creates an inactive span around the callback and emits a metric with the duration in seconds.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/CHANGELOG.md#_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nconst returnValue = Sentry.metrics.timing('myMetric', measureThisFunction);\n```\n\n----------------------------------------\n\nTITLE: React Router Server Error Handling Hook (TypeScript)\nDESCRIPTION: Exports the `handleError` function for React Router server routes to capture exceptions via Sentry, but only if the request was not aborted. Also logs error details to the console. Used for server-side error reporting.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/react-router/README.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as Sentry from '@sentry/react-router';\nimport { type HandleErrorFunction } from 'react-router';\n\nexport const handleError: HandleErrorFunction = (error, { request }) => {\n  // Skip aborted requests\n  if (!request.signal.aborted) {\n    Sentry.captureException(error);\n    console.error(error);\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Using Sentry.metrics.timing() for distribution metric (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to use the `Sentry.metrics.timing()` method to create a distribution metric with a numeric value. The default unit is `second`. It requires the `@sentry/react` package.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/CHANGELOG.md#_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nSentry.metrics.timing('myMetric', 100);\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js to Mark Sentry Profiling as External Package\nDESCRIPTION: Next.js configuration to mark @sentry/profiling-node as an external package to avoid bundling issues with native modules.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/profiling-node/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst { withSentryConfig } = require('@sentry/nextjs');\n\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  experimental: {\n    // Add the \"@sentry/profiling-node\" to serverComponentsExternalPackages.\n    serverComponentsExternalPackages: ['@sentry/profiling-node'],\n  },\n};\n\nmodule.exports = withSentryConfig(nextConfig, {\n  /* ... */\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript with Sentry's Shared Configuration\nDESCRIPTION: Example tsconfig.json that extends Sentry's shared TypeScript configuration. It sets basic compiler options including baseUrl, rootDir, and outDir paths.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/typescript/README.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"./node_modules/@sentry-internal/typescript/tsconfig.json\",\n  \"compilerOptions\": {\n    \"baseUrl\": \".\",\n    \"rootDir\": \"src\",\n    \"outDir\": \"dist\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring URL and event filtering from raven-js to @sentry/browser in JavaScript\nDESCRIPTION: Illustrates differences in configuration options related to ignoring URLs and filtering events between raven-js and the new SDK. Shows 'ignoreUrls' replaced by 'denyUrls' for excluding certain origins. Demonstrates the renaming of callbacks for event sending filtering from 'shouldSendCallback' to 'beforeSend', with required changes to return null instead of false to drop events. Presents example of event modification using 'beforeSend'.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/migration/v4-to-v5_v6.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nRaven.config('___PUBLIC_DSN___', {\n  ignoreUrls: ['https://www.baddomain.com', /graph\\.facebook\\.com/i],\n});\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nSentry.init({\n  denyUrls: ['https://www.baddomain.com', /graph\\.facebook\\.com/i],\n});\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nRaven.config('___PUBLIC_DSN___', {\n  shouldSendCallback(event) {\n    // Only send events that include user data\n    if (event.user) {\n      return true;\n    }\n    return false;\n  },\n});\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nSentry.init({\n  beforeSend(event) {\n    if (event.user) {\n      return event;\n    }\n    return null;\n  },\n});\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nRaven.config('___PUBLIC_DSN___', {\n  dataCallback(event) {\n    if (event.user) {\n      // Don't send user's email address\n      delete event.user.email;\n    }\n    return event;\n  },\n});\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nSentry.init({\n  beforeSend(event) {\n    if (event.user) {\n      delete event.user.email;\n    }\n    return event;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Integrating Sentry Pinia Plugin JavaScript\nDESCRIPTION: This snippet illustrates how to integrate the Sentry Pinia plugin into a Pinia store in a Vue application using the `@sentry/vue` package. You need to import `createPinia` from 'pinia' and `createSentryPiniaPlugin` from '@sentry/vue', create a Pinia instance, and then register the Sentry plugin using the `pinia.use()` method.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/CHANGELOG.md#_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createPinia } from 'pinia';\nimport { createSentryPiniaPlugin } from '@sentry/vue';\n\nconst pinia = createPinia();\n\npinia.use(createSentryPiniaPlugin());\n```\n\n----------------------------------------\n\nTITLE: Initializing Sentry Browser SDK with LaunchDarkly and OpenFeature Integrations (TypeScript)\nDESCRIPTION: Illustrates how to initialize the Sentry browser SDK with integrations for tracking feature flags using LaunchDarkly and OpenFeature JavaScript SDKs. This snippet requires the '@sentry/browser' package and assumes LaunchDarkly and OpenFeature SDKs are installed and configured separately. The integrations enhance error and performance monitoring by attaching feature flag evaluation data to events automatically. The snippet shows the import of Sentry and its initialization with the two integrations passed in the integrations array.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/CHANGELOG.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as Sentry from '@sentry/browser';\n\nSentry.init({\n  integrations: [\n    // Track LaunchDarkly feature flags\n    Sentry.launchDarklyIntegration(),\n    // Track OpenFeature feature flags\n    Sentry.openFeatureIntegration(),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Manually Instrumenting Server Load Functions with Sentry in SvelteKit (JavaScript)\nDESCRIPTION: Shows how to manually instrument server-specific `load` functions (in `+(page|layout).server.(js|ts)`) using the `wrapServerLoadWithSentry` function imported from `@sentry/sveltekit`. This enables manual performance tracking for server-side load operations.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/sveltekit/README.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport { wrapServerLoadWithSentry } from '@sentry/sveltekit';\n\nexport const load = wrapServerLoadWithSentry(event => {\n  //... your server load code\n});\n```\n\n----------------------------------------\n\nTITLE: Structured Logging with Server-Side SDKs\nDESCRIPTION: This snippet presents an example of structured logging using server-side SDKs, such as `@sentry/node`, `@sentry/bun` or the server-side of `@sentry/nextjs` or `@sentry/sveltekit`. It demonstrates the use of `info` and `warn` methods to log messages with parameters without needing the `fmt` helper function. This is an alternative logging style compared to the client-side logging example. Requires Sentry SDK installation for a server-side environment.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/CHANGELOG.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { info, warn } = Sentry.logger;\n\ninfo('User %s logged in successfully', [123]);\nwarn('Failed to load user %s data', [123], { errorCode: 404 });\n```\n\n----------------------------------------\n\nTITLE: Running NestJS Unit Tests\nDESCRIPTION: This command executes the unit tests defined within the NestJS project. The output is the test results, indicating test success or failure, along with coverage metrics. Requires the test dependencies to be installed.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/dev-packages/e2e-tests/test-applications/nestjs-fastify/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn run test\n```\n\n----------------------------------------\n\nTITLE: Installing Sentry Nuxt SDK using npm or yarn in Bash\nDESCRIPTION: This snippet demonstrates how to install the @sentry/nuxt package using npm or yarn package managers. It is the prerequisite step for setting up the Sentry SDK in a Nuxt project and must be executed in the project root directory to add the SDK as a dependency.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/nuxt/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Using npm\nnpm install @sentry/nuxt\n\n# Using yarn\nyarn add @sentry/nuxt\n```\n\n----------------------------------------\n\nTITLE: Transport Interface in previous versions\nDESCRIPTION: This snippet displays the legacy `Transport` interface from older versions of the Sentry SDK. This is being shown for reference and to demonstrate the changes made in the new version.  The `sendEvent` function would send an event to the `Store` endpoint, whereas the new interface sends an `Envelope`.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/migration/v6-to-v7.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// Before:\nexport interface Transport {\n  /* Sends the event to the Store endpoint in Sentry */\n  sendEvent(event: Event): PromiseLike<Response>;\n  /* Sends the session to the Envelope endpoint in Sentry */\n  sendSession?(session: Session | SessionAggregates): PromiseLike<Response>;\n  /* Waits for all events to be sent or the timeout to expire, whichever comes first */\n  close(timeout?: number): PromiseLike<boolean>;\n  /* Increment the counter for the specific client outcome */\n  recordLostEvent?(type: Outcome, category: SentryRequestType): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing @sentry/node with preload hook (Bash)\nDESCRIPTION: This code snippet demonstrates how to initialize the `@sentry/node` SDK using the `--require` flag to preload the SDK. This allows you to use the SDK with performance instrumentation even if you cannot call `Sentry.init()` at the start of your app.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/CHANGELOG.md#_snippet_31\n\nLANGUAGE: bash\nCODE:\n```\nnode --require @sentry/node/preload ./app.js\n```\n\n----------------------------------------\n\nTITLE: Instrumenting Cloudflare D1 with Sentry\nDESCRIPTION: This snippet demonstrates how to instrument a Cloudflare D1 database using the `instrumentD1WithSentry` method provided by the Sentry SDK. This allows for monitoring database interactions within the Cloudflare environment.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/CHANGELOG.md#_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\n// env.DB is the D1 DB binding configured in your `wrangler.toml`\nconst db = instrumentD1WithSentry(env.DB);\n// Now you can use the database as usual\nawait db.prepare('SELECT * FROM table WHERE id = ?').bind(1).run();\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Logs in Sentry JavaScript SDK\nDESCRIPTION: This code snippet demonstrates how to enable debug logs in the Sentry JavaScript SDK by setting the `debug` option to `true` during initialization. This is useful for gathering detailed information about issues for debugging purposes.  The logs can then be analyzed to identify the root cause of problems reported by users.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/triaging.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nSentry.intit({ debug: true })\n```\n\n----------------------------------------\n\nTITLE: Server Instrumentation Initialization for React Router (JavaScript Module)\nDESCRIPTION: Sets up Sentry in server environment by importing `@sentry/react-router` and initializing it with the DSN and trace sampling rate. This file is meant to be run at server startup to enable error tracking and performance monitoring.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/react-router/README.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as Sentry from '@sentry/react-router';\n\nSentry.init({\n  dsn: '___PUBLIC_DSN___',\n  tracesSampleRate: 1.0 //  Capture 100% of the transactions\n});\n```\n\n----------------------------------------\n\nTITLE: Running NestJS End-to-End Tests\nDESCRIPTION: This command executes the end-to-end (e2e) tests defined within the NestJS project. E2E tests check the application's behavior as a whole.  Requires the necessary e2e testing frameworks to be configured.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/dev-packages/e2e-tests/test-applications/nestjs-fastify/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn run test:e2e\n```\n\n----------------------------------------\n\nTITLE: Disabling Sentry Automatic Performance Instrumentation\nDESCRIPTION: Provides a specific example of disabling Sentry's automatic performance instrumentation in an Ember app. Set `disablePerformance: true` within the `ENV['@sentry/ember']` object in `config/environment.js`. Manual performance instrumentation will still function.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/ember/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nENV['@sentry/ember'] = {\n  disablePerformance: true, // Will disable automatic instrumentation of performance. Manual instrumentation will still be sent.\n};\n```\n\n----------------------------------------\n\nTITLE: Migrating from '@sentry/serverless' to Specific Cloud Serverless Packages - JavaScript\nDESCRIPTION: Depicts how to migrate serverless SDK usage from the deprecated '@sentry/serverless' package to the new specific packages '@sentry/aws-serverless' and '@sentry/google-cloud-serverless'. Initialization now occurs directly through these specialized packages without namespace imports. This is necessary because the monolithic serverless package has been split to better support platform-specific features and constraints.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/migration/v7-to-v8.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n// v7\nconst Sentry = require('@sentry/serverless');\n\nSentry.AWSLambda.init({\n  dsn: '__DSN__',\n  tracesSampleRate: 1.0,\n});\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// v8\nconst Sentry = require('@sentry/aws-serverless');\n\nSentry.init({\n  dsn: '__DSN__',\n  tracesSampleRate: 1.0,\n});\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// v7\nconst Sentry = require('@sentry/serverless');\n\nSentry.GCPFunction.init({\n  dsn: '__DSN__',\n  tracesSampleRate: 1.0,\n});\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// v8\nconst Sentry = require('@sentry/google-cloud-serverless');\n\nSentry.init({\n  dsn: '__DSN__',\n  tracesSampleRate: 1.0,\n});\n```\n\n----------------------------------------\n\nTITLE: Tree-shaking and using specific integrations\nDESCRIPTION: Demonstrates how to customize the integrations used by `BrowserClient` and exclude the defaults. This shows how to make use of the new client options by explicitly specifying the integrations to be used. Dependencies can be controlled by only importing specific packages.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/migration/v6-to-v7.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  BrowserClient,\n  Breadcrumbs,\n  Dedupe,\n  defaultStackParser,\n  GlobalHandlers,\n  Integrations,\n  makeFetchTransport,\n  LinkedErrors,\n} from '@sentry/browser';\n\n// New in v7:\nconst client = new BrowserClient({\n  transport: makeFetchTransport,\n  stackParser: defaultStackParser,\n  integrations: [new Breadcrumbs(), new GlobalHandlers(), new LinkedErrors(), new Dedupe()],\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Node.js ANR Detection with Sentry\nDESCRIPTION: Enables Application Not Responding (ANR) detection in a Node.js application using the `@sentry/node` package. This function must be called early in the application's lifecycle before the event loop might become blocked to ensure detection. The `captureStackTrace` option can be used to include a stack trace of the blocking code in the ANR event.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/changelog/v7.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as Sentry from '@sentry/node';\n\nSentry.init({\n  dsn: '___PUBLIC_DSN___',\n  tracesSampleRate: 1.0,\n});\n\nawait Sentry.enableANRDetection({ captureStackTrace: true });\n// Function that runs your app\nrunApp();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst Sentry = require('@sentry/node');\n\nSentry.init({\n  dsn: '___PUBLIC_DSN___',\n  tracesSampleRate: 1.0,\n});\n\nSentry.enableANRDetection({ captureStackTrace: true }).then(() => {\n  // Function that runs your app\n  runApp();\n});\n```\n\n----------------------------------------\n\nTITLE: Setting tracePropagationTargets at Top Level in Sentry Init - JavaScript\nDESCRIPTION: This snippet shows how to specify 'tracePropagationTargets' directly at the top level of the Sentry SDK initialization for tracing purposes. It requires Sentry's JavaScript SDK and takes an array of target domains or regex patterns specifying outgoing requests to attach trace headers. This setup impacts which requests have Sentry tracing headers applied, thereby controlling distributed tracing propagation. The snippet is suitable for integrating with backends such as 'api.site.com'.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/changelog/v7.md#_snippet_28\n\nLANGUAGE: JavaScript\nCODE:\n```\nSentry.init({\n  tracePropagationTargets: ['api.site.com'],\n});\n```\n\n----------------------------------------\n\nTITLE: v7 example using MetricsAggregator in Browser\nDESCRIPTION: This TypeScript code example shows initializing the Sentry SDK in the browser with the `metricsAggregatorIntegration` in v7. It sets the DSN and enables the metrics aggregator integration.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/migration/v7-to-v8.md#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\n// v7 - Browser\nSentry.init({\n  dsn: '__DSN__',\n  integrations: [Sentry.metricsAggregatorIntegration()],\n});\n\n```\n\n----------------------------------------\n\nTITLE: Configuring ESBuild to Mark Sentry Profiling as External\nDESCRIPTION: ESBuild configuration to exclude @sentry/profiling-node from bundling to avoid issues with native modules.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/profiling-node/README.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  entryPoints: ['index.js'],\n  platform: 'node',\n  external: ['@sentry/profiling-node'],\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Span Instrumentation Setup in Browser SDK - JavaScript\nDESCRIPTION: Shows how to instrument spans manually in browser environments by using 'registerSpanErrorInstrumentation' in Sentry v8, replacing the older 'addExtensionMethods' from '@sentry/tracing'. This snippet demonstrates the shift away from side-effect imports and reflects the updated API for manual span error instrumentation. It expects the user to call 'registerSpanErrorInstrumentation' before SDK initialization for proper setup.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/migration/v7-to-v8.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// v7\nimport * as Sentry from '@sentry/browser';\nimport '@sentry/tracing';\n\nSentry.init({\n  dsn: '__DSN__',\n  tracesSampleRate: 1.0,\n});\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// v8\nimport * as Sentry from '@sentry/browser';\n\nSentry.registerSpanErrorInstrumentation();\n\nSentry.init({\n  dsn: '__DSN__',\n  tracesSampleRate: 1.0,\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Lazy Logging Mode for Sentry Profiler in Node.js\nDESCRIPTION: Example of how to start a Node.js server with lazy logging mode for the Sentry profiler. This changes the profiler's default behavior from eager to lazy logging, which reduces constant CPU overhead but may increase the time to start profiling.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/profiling-node/README.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nSENTRY_PROFILER_LOGGING_MODE=lazy node server.js\n```\n\n----------------------------------------\n\nTITLE: Pruning Unused Sentry Profiling Binaries\nDESCRIPTION: Command to prune unused Sentry Profiling binaries using the provided utility script, targeting specific platform and Node.js version.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/profiling-node/README.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nsentry-prune-profiler-binaries --target_dir_path=./dist --target_platform=linux --target_node=16 --target_stdlib=musl --target_arch=x64\n```\n\n----------------------------------------\n\nTITLE: Migrate Status Enum - Sentry JavaScript\nDESCRIPTION: This snippet shows how to migrate from the deprecated `Status` enum to using string literals and the `eventStatusFromHttpCode` function in Sentry JavaScript SDK version 6.17.0. This change aims to reduce bundle size by avoiding the enum. It requires the `@sentry/types` and `@sentry/utils` packages.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/migration/v6-to-v7.md#_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n// New in 6.17.0:\nimport { eventStatusFromHttpCode } from '@sentry/utils';\n\nconst status = eventStatusFromHttpCode(500);\n\n// Before:\nimport { Status } from '@sentry/types';\n\nconst status = Status.fromHttpCode(500);\n```\n\n----------------------------------------\n\nTITLE: v7 example using MetricsAggregator\nDESCRIPTION: This snippet demonstrates how to use the `MetricsAggregator` integration in the server-side (Node/Deno/Bun) Sentry SDK in v7. It shows how to enable the metrics aggregator by configuring `_experiments` option in `Sentry.init`.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/migration/v7-to-v8.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n// v7 - Server (Node/Deno/Bun)\nSentry.init({\n  dsn: '__DSN__',\n  _experiments: {\n    metricsAggregator: true,\n  },\n});\n\n```\n\n----------------------------------------\n\nTITLE: Adding npm Target in Craft YML - YAML\nDESCRIPTION: This YAML code sample demonstrates how to add an npm release target for a new SDK package in the .craft.yml configuration file. The snippet requires the Craft release automation tool and expects a correctly named npm package and file glob matching the tarball output (e.g., sentry-[yourPackage]-*.tgz). 'name' should be set to 'npm', 'id' to the scoped package name, and 'includeNames' to a regular expression matching the generated tarball filenames. Inputs: package name and tarball pattern. Outputs: correctly configured release target in Craft's YAML file.\nDependencies: Craft tool. Limitations: must update the [yourPackage] placeholder, and ensure the regex fits your tarball naming convention.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/new-sdk-release-checklist.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n- name: npm\n  id: '@sentry/[yourPackage]'\n  includeNames: /^sentry-[yourPackage]-\\d.*\\.tgz$/\n\n```\n\n----------------------------------------\n\nTITLE: Importing and Initializing @sentry/deno SDK from npm Registry in JavaScript\nDESCRIPTION: Demonstrates how to import the @sentry/deno SDK package from the npm registry instead of the deno.land registry due to deprecated publishing. The snippet imports Sentry as a namespace from 'npm:@sentry/deno' and shows a basic Sentry.init() call with a DSN placeholder. This setup is needed for Deno users after the package move.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/MIGRATION.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Sentry from 'npm:@sentry/deno';\n\nSentry.init({\n  dsn: '__DSN__',\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Cloudflare Pages Plugin Integration\nDESCRIPTION: This snippet shows how to use the `sentryPagesPlugin` to instrument a Cloudflare Pages application. It configures the plugin with the DSN and sets the `tracesSampleRate` to 1.0 to capture 100% of spans.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/CHANGELOG.md#_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\n// functions/_middleware.js\nimport * as Sentry from '@sentry/cloudflare';\n\nexport const onRequest = Sentry.sentryPagesPlugin({\n  dsn: __PUBLIC_DSN__,\n  // Set tracesSampleRate to 1.0 to capture 100% of spans for tracing.\n  tracesSampleRate: 1.0,\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Sentry SDK in Ember.js App\nDESCRIPTION: Demonstrates the basic initialization of the Sentry Ember SDK. Import `@sentry/ember` and call `Sentry.init` within your application's `app.js` file, providing your DSN and configuring the `tracesSampleRate` for performance monitoring.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/ember/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n  import * as Sentry from \"@sentry/ember\";\n\n  Sentry.init({\n    dsn: '__DSN__' // replace __DSN__ with your DSN,\n\n    // Set tracesSampleRate to 1.0 to capture 100%\n    // of transactions for performance monitoring.\n    // We recommend adjusting this value in production,\n    tracesSampleRate: 1.0,\n  });\n```\n\n----------------------------------------\n\nTITLE: Installing @sentry/opentelemetry Package Using npm or yarn - Bash\nDESCRIPTION: This snippet shows how to install the @sentry/opentelemetry package using npm or yarn. Installing this package is necessary to enable sending OpenTelemetry trace data to Sentry. The snippet assumes a Node.js environment with an existing project setup and requires internet access to fetch the package from the npm registry.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/opentelemetry/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @sentry/opentelemetry\n\n# Or yarn\nyarn add @sentry/opentelemetry\n```\n\n----------------------------------------\n\nTITLE: Enabling Server Runtime Metrics Aggregation in Sentry Node.js\nDESCRIPTION: Shows how to enable the experimental server runtime metrics feature in Sentry SDKs (like `@sentry/node`). This is done by adding the `_experiments: { metricsAggregator: true }` option during `Sentry.init`. This setup is required before sending custom metrics using `Sentry.metrics`.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/changelog/v7.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nSentry.init({\n  dsn: '__DSN__',\n  _experiments: {\n    metricsAggregator: true,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: SvelteKit sentrySvelteKit() v7 options\nDESCRIPTION: Depicts old way to configure source map uploads in SvelteKit SDK v7, which utilized all the options from version 0.x Vite plugin.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/migration/v7-to-v8.md#_snippet_44\n\nLANGUAGE: js\nCODE:\n```\nsentrySvelteKit({\n  sourceMapsUploadOptions: {\n    org: process.env.SENTRY_ORG,\n    project: process.env.SENTRY_PROJECT,\n    authToken: process.env.SENTRY_AUTH_TOKEN,\n    release: '1.0.1',\n    injectRelease: true,\n    include: ['./build/*/**/*'],\n    ignore: ['**/build/client/**/*']\n  },\n}),\n```\n\n----------------------------------------\n\nTITLE: Loading Environment Variables with dotenv and Initializing Sentry Server-side in JavaScript\nDESCRIPTION: This snippet illustrates how to load environment variables from a .env file using the dotenv package before initializing the Sentry SDK on the server side. This approach is necessary when useRuntimeConfig is not accessible due to the load order and ensures that the SENTRY_DSN is properly supplied from environment variables at runtime.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/nuxt/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport dotenv from 'dotenv';\nimport * as Sentry from '@sentry/nuxt';\n\ndotenv.config();\n\nSentry.init({\n  dsn: process.env.SENTRY_DSN,\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Sentry Sampling Context API Access JavaScript\nDESCRIPTION: Demonstrates the change in the `samplingContext` argument passed to `tracesSampler` and `profilesSampler`. The `transactionContext` property has been removed, and its attributes, such as `name`, are now available directly on the `samplingContext` object itself. This snippet shows how to access the transaction name using the updated API.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/MIGRATION.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nSentry.init({\n  // Custom traces sampler\n  tracesSampler: samplingContext => {\n    if (samplingContext.name === '/health-check') {\n      return 0;\n    } else {\n      return 0.5;\n    }\n  },\n\n  // Custom profiles sampler\n  profilesSampler: samplingContext => {\n    if (samplingContext.name === '/health-check') {\n      return 0;\n    } else {\n      return 0.5;\n    }\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Map Upload Options (Advanced)\nDESCRIPTION: This snippet demonstrates how to specify additional options supported by the Sentry Vite Plugin for source map uploading. This allows customization of the source map upload process, which could be useful for custom build setups.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/sveltekit/README.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// vite.config.(js|ts)\nimport { sveltekit } from '@sveltejs/kit/vite';\nimport { sentrySvelteKit } from '@sentry/sveltekit';\n\nexport default {\n  plugins: [\n    sentrySvelteKit({\n      sourceMapsUploadOptions: {\n        org: 'my-org-slug',\n        project: 'my-project-slug',\n        authToken: process.env.SENTRY_AUTH_TOKEN,\n        include: ['dist'],\n        cleanArtifacts: true,\n        setCommits: {\n          auto: true,\n        },\n      },\n    }),\n    sveltekit(),\n  ],\n  // ... rest of your Vite config\n};\n```\n\n----------------------------------------\n\nTITLE: Installing yalc Globally Using npm or yarn in Shell\nDESCRIPTION: Installs the yalc package manager globally using either npm or yarn, allowing developers to manage local dependencies for testing SDK packages. Requires a working installation of Node.js. The commands should be run from the command line, and global installation is necessary for yalc commands to be accessible from anywhere. No special arguments or configuration parameters are needed beyond basic npm/yarn usage.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/using-yalc.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install -g yalc\n\nyarn global add yalc\n```\n\n----------------------------------------\n\nTITLE: Importing Functions from @sentry/minimal (deprecated)\nDESCRIPTION: This snippet shows the old way to import functions like `addBreadcrumb`, `captureException`, `configureScope`, and `setTag` from `@sentry/minimal` in previous versions of the Sentry JavaScript SDK.  This package was removed in version 7.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/migration/v6-to-v7.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Before:\nimport { addBreadcrumb, captureException, configureScope, setTag } from '@sentry/minimal';\n```\n\n----------------------------------------\n\nTITLE: Adding Breadcrumbs with New Sentry SDK (JavaScript)\nDESCRIPTION: Demonstrates adding breadcrumbs with the new `@sentry/browser` or `@sentry/node` SDKs. The `Sentry.addBreadcrumb()` method is used, taking an object describing the breadcrumb, including message, category, and data.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/changelog/v4.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nSentry.addBreadcrumb({\n  message: 'Item added to shopping cart',\n  category: 'action',\n  data: {\n    isbn: '978-1617290541',\n    cartSize: '3',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Map Uploading in nuxt.config.ts using TypeScript\nDESCRIPTION: This snippet configures Nuxt 3 to enable client-side source maps and sets Sentry-specific sourceMapsUploadOptions. It includes organization slug, project slug, and an authentication token sourced from environment variables. This configuration allows automated uploading of source maps to Sentry for better error stack traces.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/nuxt/README.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// nuxt.config.ts\nexport default defineNuxtConfig({\n  sourcemap: { client: true },\n\n  modules: ['@sentry/nuxt/module'],\n  sentry: {\n    sourceMapsUploadOptions: {\n      org: 'your-org-slug',\n      project: 'your-project-slug',\n      authToken: process.env.SENTRY_AUTH_TOKEN,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Sentry SDK for Deno in JavaScript\nDESCRIPTION: This snippet demonstrates how to import and initialize the Sentry SDK in Deno, allowing users to set up error tracking by specifying configuration options such as DSN. It ensures the SDK hooks into the environment early for effective monitoring.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/deno/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as Sentry from 'npm:@sentry/deno';\n\nSentry.init({\n  dsn: '__DSN__',\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Passing context to sentryPagesPlugin\nDESCRIPTION: This example demonstrates how to pass the `context` object, from Cloudflare Pages, into `sentryPagesPlugin`.  This is particularly useful for accessing and utilizing environmental variables.  The function receives the `context` and returns initialization options, like the DSN and sample rate.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/cloudflare/README.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexport const onRequest = Sentry.sentryPagesPlugin(context => ({\n  dsn: context.env.SENTRY_DSN,\n  tracesSampleRate: 1.0,\n}));\n```\n\n----------------------------------------\n\nTITLE: Initializing Sentry SDK (Classic) - TypeScript\nDESCRIPTION: This snippet demonstrates the classic initialization of the Sentry SDK in a TypeScript environment. It imports the Sentry browser package and initializes the SDK with a specified Data Source Name (DSN).  It sets up the default Sentry instance and uses existing global, isolation and current scope.  The DSN is a required parameter, and is represented as 'xxx' in the example.  The result is the binding of the client to current context.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/v8-initializing.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as Sentry from '@sentry/browser';\n\nSentry.init({\n  dsn: 'xxx',\n});\n```\n\n----------------------------------------\n\nTITLE: Linting Code - Bash\nDESCRIPTION: These commands use npm to run linters that check the code for style and potential errors.  The `lint` command runs the linter and `lint:fix` attempts to automatically fix linting issues where possible. This process promotes code consistency.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/dev-packages/e2e-tests/test-applications/ember-classic/README.md#_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\nnpm run lint\nnpm run lint:fix\n```\n\n----------------------------------------\n\nTITLE: Refactoring and Enhancements in Sentry JavaScript SDK (Various Features, JavaScript/TypeScript)\nDESCRIPTION: This collection of code snippets illustrates multiple updates to the Sentry JavaScript SDK, including performance optimizations, tracer support, framework integrations, build improvements, and bug fixes. Key changes include modifying span handling, updating framework-specific integrations, removing deprecated classes, and enhancing compatibility with various modules and environments. The snippets also demonstrate the evolution of the SDK's architecture to support advanced telemetry and better developer ergonomics.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/CHANGELOG.md#_snippet_41\n\nLANGUAGE: JavaScript\nCODE:\n```\n/* Example: Removing tags from spans & transactions */\n// Removes metadata tags from span/transaction objects to optimize data collection and storage.\n\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n/* Example: Updating scope transactionName on route resolution (Angular) */\n// Updates transaction name based on route resolution for better trace context.\n\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n/* Example: Updating @sentry/astro to use OpenTelemetry */\n// Enhances Astro framework SDK to leverage OTEL for telemetry collection.\n\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n/* Example: Removing HttpContext class in browser bundle */\n// Simplifies browser SDK by removing redundant HTTP context management.\n\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n/* Example: Using idle spans for browser tracing */\n// Improves performance by leveraging idle time to create and manage tracing spans.\n\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n/* Example: Wrapping core tracing functionalities to support custom trace implementations */\n// Extends core API flexibility for developers to define custom trace behavior.\n\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n/* Example: Moving globals to __SENTRY__ singleton */\n// Consolidates global variables for better encapsulation and scope management.\n\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n/* Example: Refactoring span conversion to JSON for OTEL spans */\n// Enables OTEL span serialization for external telemetry consumers.\n\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n/* Example: Fixes for span and sampling propagation in OpenTelemetry */\n// Corrects span context inheritance and sampling decisions during tracing.\n\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n/* Example: Updating framework-specific integrations (React Router, Remix, SvelteKit) */\n// Ensures accurate transaction naming and performance metrics collection in various frameworks.\n\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n/* Example: Removing deprecated or unused code, such as @sentry/opentelemetry-node */\n// Clarifies SDK structure by removing deprecated modules, promoting newer integrations.\n\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n/* Example: Improvements to build configurations, including rollup, webpack, and Vite plugins */\n// Facilitates better bundling, optimization, and customization of SDK builds.\n\n```\n\n----------------------------------------\n\nTITLE: Test Scenario and Assertion Usage in Sentry Node.JS Integration Tests with TypeScript\nDESCRIPTION: Explains the roles of key test files within each test scope: 'scenario.ts' contains Sentry SDK initialization logic and the test subject itself, while 'test.ts' holds assertions and test server runner logic, including request interceptors. It clarifies that by default the scenario at {TEST_DIR}/scenario.ts is used, but custom scenarios can be provided. All tests leverage Vitest for concurrent execution on the same thread.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/dev-packages/node-integration-tests/README.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n`scenario.ts` contains the initialization logic and the test subject. By default, `{TEST_DIR}/scenario.ts` is used, but `runServer` also accepts an optional `scenarioPath` argument for non-standard usage.\n\n`test.ts` is required for each test case, and contains the server runner logic, request interceptors for Sentry requests, and assertions. Test server, interceptors and assertions are all run on the same Vitest thread.\n```\n\n----------------------------------------\n\nTITLE: Commands to Run Sentry Node.JS SDK Integration Tests Locally using Yarn and Vitest Shell\nDESCRIPTION: Specifies shell commands to execute the integration tests locally. 'yarn test' runs the full suite, 'yarn test:watch' initiates Vitest’s watch mode for test-driven development, and 'yarn test -t \"<test title>\"' filters tests by matching titles for focused test execution. These commands help developers efficiently validate test functionality during development.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/dev-packages/node-integration-tests/README.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nyarn test\n\nyarn test:watch\n\nyarn test -t \"set different properties of a scope\"\n```\n\n----------------------------------------\n\nTITLE: Using wrapRequestHandler API\nDESCRIPTION: If you do not have access to the `onRequest` middleware API, you can use the `wrapRequestHandler` API instead.  The example shows how to use `wrapRequestHandler` in a SvelteKit server hook, retrieving the DSN from the `event.platform.env` object and resolving the event. This integrates Sentry within the SvelteKit application.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/cloudflare/README.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// hooks.server.js\nimport * as Sentry from '@sentry/cloudflare';\n\nexport const handle = ({ event, resolve }) => {\n  const requestHandlerOptions = {\n    options: {\n      dsn: event.platform.env.SENTRY_DSN,\n      tracesSampleRate: 1.0,\n    },\n    request: event.request,\n    context: event.platform.ctx,\n  };\n  return Sentry.wrapRequestHandler(requestHandlerOptions, () => resolve(event));\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing New Sentry SDK (JavaScript)\nDESCRIPTION: Shows how to initialize the new `@sentry/browser` or `@sentry/node` SDKs using the `Sentry.init()` method. Configuration options, including the DSN and release version, are passed as a single object.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/changelog/v4.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nSentry.init({\n  dsn: '___PUBLIC_DSN___',\n  release: '1.3.0',\n});\n```\n\n----------------------------------------\n\nTITLE: Running Ember Dummy App with Sentry DSN for Testing\nDESCRIPTION: Provides the shell command to run the dummy testing application included with the `@sentry/ember` package. The Sentry DSN must be provided as an environment variable `SENTRY_DSN` for the test application to connect to Sentry.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/ember/README.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nSENTRY_DSN=__DSN__ ember serve\n```\n\n----------------------------------------\n\nTITLE: v8 example of using SeverityLevel\nDESCRIPTION: This JavaScript code example demonstrates the recommended approach of using the `SeverityLevel` type directly in v8. It shows how to declare and assign a `SeverityLevel` variable, using the string literal directly.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/migration/v7-to-v8.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n// v8\nimport { SeverityLevel } from '@sentry/types';\n\nconst levelA = \"error\" as SeverityLevel;\n\nconst levelB: SeverityLevel = \"error\"\n\n```\n\n----------------------------------------\n\nTITLE: Creating package.json for an E2E Test Application\nDESCRIPTION: Example package.json configuration for a test application with Sentry dependencies set to allow both regular and prerelease versions.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/dev-packages/e2e-tests/README.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"my-new-test-application\",\n  \"version\": \"1.0.0\",\n  \"private\": true,\n  \"scripts\": {\n    \"test\": \"echo \\\"Hello world!\\\"\",\n    \"test:build\": \"pnpm install\",\n    \"test:assert\": \"pnpm test\"\n  },\n  \"dependencies\": {\n    \"@sentry/node\": \"latest || *\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Sentry Ember SDK Options in environment.js\nDESCRIPTION: Illustrates how to set Ember-specific configuration options for the Sentry SDK within the `config/environment.js` file. Options are placed under the `ENV['@sentry/ember']` key and control features like error warnings, performance instrumentation, runloop/component thresholds, and component definition spans.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/ember/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nENV['@sentry/ember'] = {\n  // Will silence Ember.onError warning without the need of using Ember debugging tools.\n  ignoreEmberOnErrorWarning: false,\n\n  // Will disable automatic instrumentation of performance.\n  // Manual instrumentation will still be sent.\n  disablePerformance: true,\n\n  // All runloop queue durations will be added as spans.\n  minimumRunloopQueueDuration: 0,\n\n  // Will disable automatic instrumentation for components.\n  disableInstrumentComponents: true,\n\n  // All (non-glimmer) component render durations will be added as spans.\n  minimumComponentRenderDuration: 0,\n\n  // All component definitions will be added as spans.\n  enableComponentDefinition: true,\n};\n```\n\n----------------------------------------\n\nTITLE: Potential PII Leakage Scenario with Dynamic Function Creation\nDESCRIPTION: Example showing a potential scenario where PII could leak through the profiler. This occurs when dynamic functions are created with names containing sensitive data using eval, which the profiler might capture in stack traces.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/profiling-node/README.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\neval('function scriptFor${PII_DATA}....');\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack to Mark Sentry Profiling as External\nDESCRIPTION: Webpack configuration to exclude @sentry/profiling-node from bundling to avoid issues with native modules.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/profiling-node/README.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexternals: {\n  \"@sentry/profiling-node\": \"commonjs @sentry/profiling-node\",\n},\n```\n\n----------------------------------------\n\nTITLE: Configuring Node Transport Options in Sentry JavaScript SDK v6 (Legacy)\nDESCRIPTION: Shows the previous method of configuring Node.js transport options in Sentry v6. Transport-related options were directly specified at the top level of the init options object.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/migration/v6-to-v7.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n// Before:\nSentry.init({\n  dsn: '...',\n  caCerts: getMyCaCert(),\n  httpsProxy: 'http://example.com',\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a new SolidStart project with npm\nDESCRIPTION: Commands to initialize a new SolidStart project using npm, either in the current directory or in a specified folder.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/dev-packages/e2e-tests/test-applications/solidstart-spa/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# create a new project in the current directory\nnpm init solid@latest\n\n# create a new project in my-app\nnpm init solid@latest my-app\n```\n\n----------------------------------------\n\nTITLE: Initializing a SolidStart Project\nDESCRIPTION: These commands are used to initialize a new SolidStart project. The first command initializes a project in the current directory, while the second creates a new project in a specified directory (my-app). They use the `npm init solid@latest` command.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/dev-packages/e2e-tests/test-applications/solidstart-top-level-import/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# create a new project in the current directory\nnpm init solid@latest\n\n# create a new project in my-app\nnpm init solid@latest my-app\n```\n\n----------------------------------------\n\nTITLE: Disabling Auto-Instrumentation\nDESCRIPTION: This snippet shows how to disable auto-instrumentation by setting `autoInstrument` to `false` in `vite.config.(js|ts)`. When disabled, you must manually instrument load functions.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/sveltekit/README.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// vite.config.(js|ts)\nimport { sveltekit } from '@sveltejs/kit/vite';\nimport { sentrySvelteKit } from '@sentry/sveltekit';\n\nexport default {\n  plugins: [\n    sentrySvelteKit({\n      autoInstrument: false;\n    }),\n    sveltekit(),\n  ],\n  // ... rest of your Vite config\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Svelte Project using npm\nDESCRIPTION: Initialize a new Svelte project using the `create-svelte` tool via npm. This command scaffolds the necessary project structure and initial files. Requires Node.js and npm installed; outputs a new directory containing the Svelte project files.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/dev-packages/e2e-tests/test-applications/sveltekit-2-svelte-5/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# create a new project in the current directory\nnpm create svelte@latest\n\n# create a new project in my-app\nnpm create svelte@latest my-app\n```\n\n----------------------------------------\n\nTITLE: Registering Sentry ESM Loader (Shell)\nDESCRIPTION: Provides examples of the command-line flags required to register Sentry's ESM loader hook when running a Node.js application. The correct flag (`--loader` or `--import`) depends on the Node.js version being used. This integration allows Sentry to instrument imported modules.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/CHANGELOG.md#_snippet_39\n\nLANGUAGE: shell\nCODE:\n```\n# For Node.js <= 18.18.2\nnode --loader=@sentry/node/loader app.js\n```\n\nLANGUAGE: shell\nCODE:\n```\n# For Node.js >= 18.19.0\nnode --import=@sentry/node/import app.js\n```\n\n----------------------------------------\n\nTITLE: Starting NestJS Project: Development Mode\nDESCRIPTION: This command starts the NestJS application in development mode. This enables features such as hot-reloading, allowing for live updates as the code changes. Requires project dependencies to be installed first.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/dev-packages/e2e-tests/test-applications/nestjs-fastify/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn run start:dev\n```\n\n----------------------------------------\n\nTITLE: CommonJS Module Default Export Compatibility Statement in JavaScript\nDESCRIPTION: Illustrates a CommonJS compatibility statement for SDK modules that have default exports. This snippet uses Object.defineProperty to mark the exports object with an __esModule flag set to true, which facilitates interoperability between CommonJS and ES Modules. It is relevant for build system compatibility of the SDK.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/MIGRATION.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nObject.defineProperty(exports, '__esModule', { value: true });\n```\n\n----------------------------------------\n\nTITLE: Starting the development server for SolidStart project\nDESCRIPTION: Commands to run the development server for a SolidStart project after installing dependencies, with options to open the application automatically in a browser.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/dev-packages/e2e-tests/test-applications/solidstart-spa/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n\n# or start the server and open the app in a new browser tab\nnpm run dev -- --open\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies using npm/pnpm/yarn (Bash)\nDESCRIPTION: This snippet demonstrates how to install project dependencies using common package managers like npm, pnpm, or yarn. The command `npm install` is used to install the dependencies listed in the `package.json` file. It is a prerequisite for running the application and ensures all necessary packages are available. The output of this command is the installation of the project dependencies into the `node_modules` folder. It also shows that the command can be replaced with `pnpm install` or `yarn install`.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/dev-packages/e2e-tests/test-applications/solid/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install # or pnpm install or yarn install\n```\n\n----------------------------------------\n\nTITLE: Lazy Loading Sentry Session Replay - JavaScript\nDESCRIPTION: This example shows how to initialize Sentry without the Replay integration initially and then add it later using `client.addIntegration()`. This is useful for lazy loading the feature. Requires `@sentry/browser` (for `BrowserClient` and `Replay` type) and the respective Sentry SDK.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/replay-internal/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Sentry from \"@sentry/react\";\nimport { BrowserClient } from \"@sentry/browser\";\n\nSentry.init({\n  // Do not load it initially\n  integrations: []\n});\n\n// Sometime later\nconst { Replay } = await import('@sentry/browser');\nconst client = Sentry.getClient<BrowserClient>();\n\n// Client can be undefined\nclient?.addIntegration(Sentry.replayIntegration());\n```\n\n----------------------------------------\n\nTITLE: Initializing Sentry SDK for Vue 2 in JavaScript\nDESCRIPTION: This snippet details the initialization of the Sentry SDK in a Vue 2 application. It imports Vue, the root App component, router, and the Sentry Vue package, then calls Sentry.init with Vue, DSN, and optional router tracing integration. Finally, it bootstrap the Vue instance mounting to '#app'. Dependencies include Vue 2 framework, the Sentry Vue package, and optionally vue-router. The inputs are Vue constructor, DSN string, and router instance to enable error tracking and tracing within Vue 2 apps.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/vue/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport Vue from 'vue';\nimport App from './App';\nimport router from './router';\nimport * as Sentry from '@sentry/vue';\n\nSentry.init({\n  Vue: Vue,\n  dsn: '__PUBLIC_DSN__',\n  integrations: [\n    // Or omit `router` if you're not using vue-router\n    Sentry.browserTracingIntegration({ router }),\n  ],\n});\n\nnew Vue({\n  el: '#app',\n  router,\n  components: { App },\n  template: '<App/>',\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring User Data in Sentry\nDESCRIPTION: This snippet illustrates how to set and update user context within Sentry to associate errors with specific user information. It involves setting user attributes such as id, email, username, and other custom tags. Proper usage requires the SDK to be initialized beforehand, enabling enhanced error diagnosis and user tracking.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/replay-internal/test/fixtures/fixJson/1_incompleteJson.txt#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nSentry.setUser({\n  id: '1234',\n  email: 'test-user-email@sentry.io',\n  username: 'ABCD1234',\n  ip_address: '127.0.0.1',\n  // Additional custom attributes\n  role: 'member',\n  project: 'feedback'\n});\n```\n\n----------------------------------------\n\nTITLE: Capturing Exceptions with Legacy Raven SDK (JavaScript)\nDESCRIPTION: Shows how to manually capture exceptions using the legacy `raven-js` or `raven` SDK within a try-catch block. `Raven.captureException()` is called with the caught error object and an optional second argument for extra context.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/changelog/v4.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ntry {\n  throwingFunction();\n} catch (e) {\n  Raven.captureException(e, { extra: { debug: false } });\n}\n```\n\n----------------------------------------\n\nTITLE: Capturing Exceptions with @sentry/node in TypeScript\nDESCRIPTION: This TypeScript snippet defines and exports a `runSentry` function that captures multiple exceptions within a loop by invoking `Sentry.captureException` with new Error instances. It requires the @sentry/node SDK to be installed and imported. The function takes no parameters and returns void, triggering Sentry to track errors labeled with the loop index. This is useful for testing Sentry's error reporting and capturing runtime exception stack traces with context lines.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/dev-packages/node-integration-tests/test.txt#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as Sentry from '@sentry/node';\n\nexport function runSentry(): void {\n  for (let i = 0; i < 10; i++) {\n    Sentry.captureException(new Error(`error in loop ${i}`));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Astro Basics Project Structure (text)\nDESCRIPTION: Illustrates the default folder and file structure for a new Astro project created with the 'basics' template. Key directories include `public` for static assets, `src` for source code (layouts, pages), and the root `package.json` for project metadata and dependencies.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/dev-packages/e2e-tests/test-applications/astro-5/README.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n/\n├── public/\n│   └── favicon.svg\n├── src/\n│   ├── layouts/\n│   │   └── Layout.astro\n│   └── pages/\n│       └── index.astro\n└── package.json\n```\n\n----------------------------------------\n\nTITLE: Starting inactive spans with startInactiveSpan() in JavaScript\nDESCRIPTION: Shows how to create spans that are inactive upon creation, allowing manual management of their lifecycle and parent-child relationships without automatically setting them as active spans.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/v8-new-performance-apis.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nSentry.startSpan({ name: 'outer' }, () => {\n  const inner1 = Sentry.startInactiveSpan({ name: 'inner1' });\n  const inner2 = Sentry.startInactiveSpan({ name: 'inner2' });\n\n  // do something\n\n  // manually end the spans\n  inner1.end();\n  inner2.end();\n});\n```\n\n----------------------------------------\n\nTITLE: Constructing and Using the Replay Integration API - JavaScript\nDESCRIPTION: This code shows how to instantiate a Replay object and use its limited public API methods, which post 7.24.0 are reduced to only 'start()' and 'stop()'. Requires importing Replay from the Replay package. No parameters are required for construction; only start and stop are callable.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/migration/replay.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst replay = new Replay();\n\nreplay.start();\nreplay.stop();\n```\n\n----------------------------------------\n\nTITLE: Configuring Prisma Integration with Custom Instrumentation in Node.js\nDESCRIPTION: Example showing how to configure Prisma integration with a custom instrumentation instance for Prisma version 6, which requires installing the @prisma/instrumentation package and passing a PrismaInstrumentation instance to the prismaInstrumentation option.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/CHANGELOG.md#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { PrismaInstrumentation } from '@prisma/instrumentation';\n\nSentry.init({\n  integrations: [\n    prismaIntegration({\n      // Override the default instrumentation that Sentry uses\n      prismaInstrumentation: new PrismaInstrumentation(),\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Running Remix App in Production Mode (Shell)\nDESCRIPTION: Starts the Remix application using the production build. This command should be run after successfully building the application with `npm run build`.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/dev-packages/e2e-tests/test-applications/create-remix-app-v2/README.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Forcing a span to behave as a transaction with forceTransaction: true\nDESCRIPTION: Explains how to explicitly create a span that is treated as a transaction in the Sentry UI by setting forceTransaction to true in startSpan or startInactiveSpan.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/v8-new-performance-apis.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst transaction = Sentry.startInactiveSpan({ name: 'transaction', forceTransaction: true });\n```\n\n----------------------------------------\n\nTITLE: Initializing @sentry/node asynchronously after preload (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to initialize the `@sentry/node` SDK asynchronously after preloading it using the `--require` flag.  It initializes Sentry with a DSN obtained asynchronously.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/CHANGELOG.md#_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nconst express = require('express');\nconst Sentry = require('@sentry/node');\n\nconst dsn = await getSentryDsn();\nSentry.init({ dsn });\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Transport in Sentry JavaScript SDK v7\nDESCRIPTION: Shows how to implement a custom transport in Sentry v7 using the new functional approach. The example demonstrates creating a transport function that handles requests and leverages the createTransport utility for rate limiting and flushing.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/migration/v6-to-v7.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// New in v7:\nimport { BaseTransportOptions, Transport, TransportMakeRequestResponse, TransportRequest } from '@sentry/types';\nimport { createTransport } from '@sentry/core';\n\nexport function makeMyCustomTransport(options: BaseTransportOptions): Transport {\n  function makeRequest(request: TransportRequest): PromiseLike<TransportMakeRequestResponse> {\n    // this is where your sending logic goes\n    const myCustomRequest = {\n      body: request.body,\n      url: options.url\n    };\n    // you define how `sendMyCustomRequest` works\n    return sendMyCustomRequest(myCustomRequest).then(response => ({\n      headers: {\n        'x-sentry-rate-limits': response.headers.get('X-Sentry-Rate-Limits'),\n        'retry-after': response.headers.get('Retry-After'),\n      },\n    }));\n  }\n\n  // `createTransport` takes care of rate limiting and flushing\n  return createTransport(options, makeRequest);\n}\n\nSentry.init({\n  dsn: '...',\n  transport: makeMyCustomTransport, // this function will be called when the client is initialized\n  ...\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Sentry SDK in Google Cloud Functions - JavaScript\nDESCRIPTION: This code snippet demonstrates how to import the Sentry SDK for Google Cloud Serverless and initialize it with custom configuration such as the DSN and trace sampling rate. The initialization must occur at the very start of your function file to ensure proper instrumentation of all serverless requests. Required dependency: '@sentry/google-cloud-serverless'. The configuration object can include parameters like 'dsn' (the Sentry project DSN) and 'tracesSampleRate' (controls the percentage of transactions captured). This setup does not produce immediate output but prepares all subsequent Sentry API usage.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/google-cloud-serverless/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst Sentry = require('@sentry/google-cloud-serverless');\n\nSentry.init({\n  dsn: '__DSN__',\n  tracesSampleRate: 1.0,\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies in NestJS\nDESCRIPTION: This snippet shows the command used to install project dependencies using Yarn.  It's a prerequisite step before compiling and running the NestJS application. Dependencies are defined in `package.json`.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/dev-packages/e2e-tests/test-applications/nestjs-fastify/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn install\n```\n\n----------------------------------------\n\nTITLE: Capturing Messages with Legacy Raven SDK (JavaScript)\nDESCRIPTION: Demonstrates sending a custom message event using the legacy `raven-js` or `raven` SDK. `Raven.captureMessage()` takes the message string, an optional severity level, and an optional object for extra context.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/changelog/v4.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nRaven.captureMessage('test', 'info', { extra: { debug: false } });\n```\n\n----------------------------------------\n\nTITLE: Next.js Configuration v7 Sentry Property\nDESCRIPTION: Shows the deprecated `sentry` property within `nextConfig` in Next.js SDK v7 for configuring Sentry. This approach is removed in v8 and the options need to be passed directly to `withSentryConfig`.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/migration/v7-to-v8.md#_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\n// v7\nconst nextConfig = {\n  // Your Next.js options...\n\n  sentry: {\n    // Your Sentry SDK options...\n  },\n};\n\nmodule.exports = withSentryConfig(nextConfig, {\n  // Your Sentry Webpack Plugin Options...\n});\n```\n\n----------------------------------------\n\nTITLE: Manually Controlling Sentry Performance Span with Callback - JavaScript\nDESCRIPTION: Uses `Sentry.startSpanManual` to create and activate a performance span, providing a callback that receives the span and a `finish` function. This pattern is suitable for scenarios where the span's lifecycle is tied to events (like a response finishing in middleware) rather than the return of a function, requiring explicit finishing.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/changelog/v7.md#_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\n// Start a span that tracks the duration of middleware\nfunction middleware(_req, res, next) {\n  return Sentry.startSpanManual({ name: 'middleware' }, (span, finish) => {\n    res.once('finish', () => {\n      setHttpStatus(span, res.status);\n      finish();\n    });\n    return next();\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Astro Basics Project (sh)\nDESCRIPTION: This command uses npm's 'create' utility to initialize a new Astro project. The `@latest` tag ensures the latest version of Astro is used, and the `--template basics` flag specifies the minimal 'basics' starter template.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/dev-packages/e2e-tests/test-applications/astro-5/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm create astro@latest -- --template basics\n```\n\n----------------------------------------\n\nTITLE: Creating a SolidStart Project with NPM - Bash\nDESCRIPTION: This snippet demonstrates how to initialize a new SolidStart project using the npm init command. It includes options to create the project in the current directory or in a specified subdirectory (e.g., my-app). Prerequisites include having Node.js and NPM installed. The command will prompt the user for template and project options, resulting in a ready-to-develop SolidStart application.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/dev-packages/e2e-tests/test-applications/solidstart-dynamic-import/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# create a new project in the current directory\nnpm init solid@latest\n\n# create a new project in my-app\nnpm init solid@latest my-app\n```\n\n----------------------------------------\n\nTITLE: Running a SolidStart Development Server with NPM - Bash\nDESCRIPTION: This snippet provides commands to launch the local development server for a SolidStart project using npm run dev. An additional flag (--open) opens the application automatically in the default browser. These commands require prior installation of dependencies with npm install. The server will serve the project on a local port and support hot reloading for rapid development.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/dev-packages/e2e-tests/test-applications/solidstart-dynamic-import/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n\n# or start the server and open the app in a new browser tab\nnpm run dev -- --open\n```\n\n----------------------------------------\n\nTITLE: Calling runSentry Function - JavaScript\nDESCRIPTION: This code snippet shows the call to the `runSentry` function within a test scenario file. This function is designed to execute code that triggers Sentry exception capturing, as indicated by the surrounding context which includes Sentry initialization and imports.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/dev-packages/node-integration-tests/test.txt#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nrunSentry();\n```\n\n----------------------------------------\n\nTITLE: Capturing Server-Side Exceptions in Remix v2 handleError - TypeScript\nDESCRIPTION: This example illustrates how to capture server-side exceptions in Remix v2 using Sentry. It defines a `handleError` function in the server entry point, which receives an error and the request context. The function distinguishes between Error instances and other types, calling `Sentry.captureRemixServerException` with the error, environment string `'remix.server'`, and the request object for Error types, and falls back to `Sentry.captureException` for non-Error objects. This approach ensures comprehensive error reporting from the server side in Remix applications.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/changelog/v7.md#_snippet_25\n\nLANGUAGE: TypeScript\nCODE:\n```\n// entry.server.tsx\nexport function handleError(error: unknown, { request }: DataFunctionArgs): void {\n  if (error instanceof Error) {\n    Sentry.captureRemixServerException(error, 'remix.server', request);\n  } else {\n    // Optionally capture non-Error objects\n    Sentry.captureException(error);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Manually Managing Sentry Feedback Widget Lifecycle in TypeScript\nDESCRIPTION: Demonstrates manual control over the feedback widget lifecycle without relying on the convenience `attachTo()` method. Defines an `attachTo` function that adds a click event listener to a provided button element, which creates a feedback widget instance with lifecycle callbacks for closing and removing the widget. The widget is appended to the DOM and opened on button click. Returns an unsubscribe function to remove the event listener. This approach provides granular control over widget behavior, requires the feedback instance, and works within a TypeScript environment due to type annotations.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/migration/feedback.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction attachTo(button: HTMLElement) {\n  const handleClick = () => {\n    const widget = feedbackInstance.createWidget({\n      onFormClose: () => {\n        widget.close();\n      },\n      onFormSubmitted: () => {\n        widget.removeFromDom();\n      }\n    });\n    widget.appendToDom();\n    widget.open();\n  };\n\n  button.addEventListener('click', handleClick);\n  return () => {\n    button.removeEventListener('click', handleClick)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Sentry SDK with Undici Integration - TypeScript\nDESCRIPTION: Shows how to initialize the Sentry SDK and explicitly add the Undici integration for Node.js environments. This integration instruments outgoing requests using Undici (v4.7.0 or higher) and Node.js fetch, enabling automatic tracing and breadcrumb creation. Sentry SDK version 7.46.0+ and Node.js v16.7.0 or higher are required. The \"integrations\" array must include a new instance of \"Sentry.Integrations.Undici\".\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/changelog/v7.md#_snippet_42\n\nLANGUAGE: TypeScript\nCODE:\n```\nSentry.init({\n  integrations: [new Sentry.Integrations.Undici()],\n});\n```\n\n----------------------------------------\n\nTITLE: Starting the SolidStart Development Server\nDESCRIPTION: This command starts the development server for a SolidStart project. The `--open` flag can be used to automatically open the app in a new browser tab.  It relies on the `npm run dev` command defined in `package.json`.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/dev-packages/e2e-tests/test-applications/solidstart-top-level-import/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n\n# or start the server and open the app in a new browser tab\nnpm run dev -- --open\n```\n\n----------------------------------------\n\nTITLE: Using API class (deprecated)\nDESCRIPTION: This snippet demonstrates the use of the now-removed `API` class in `@sentry/core` from earlier versions of the SDK, to fetch information like DSN and endpoints. It contrasts the previous approach with the updated method in v7.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/migration/v6-to-v7.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// Before:\nimport { API } from '@sentry/core';\n\nconst api = new API(dsn, metadata, tunnel);\nconst dsn = api.getDsn();\nconst storeEndpoint = api.getStoreEndpointWithUrlEncodedAuth();\nconst envelopeEndpoint = api.getEnvelopeEndpointWithUrlEncodedAuth();\n```\n\n----------------------------------------\n\nTITLE: Initializing Sentry for Next.js Edge Runtime (JavaScript)\nDESCRIPTION: Initializes the Sentry SDK within a `sentry.edge.config.js` or `sentry.edge.config.ts` file to enable error and performance monitoring for Next.js middleware and Edge API routes. It imports `@sentry/nextjs`, reads the Sentry DSN from environment variables, and calls `Sentry.init` with the DSN and a sample rate.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/changelog/v7.md#_snippet_44\n\nLANGUAGE: javascript\nCODE:\n```\n// sentry.edge.config.js or sentry.edge.config.ts\n\nimport * as Sentry from '@sentry/nextjs';\n\nconst SENTRY_DSN = process.env.SENTRY_DSN || process.env.NEXT_PUBLIC_SENTRY_DSN;\n\nSentry.init({\n  dsn: SENTRY_DSN || 'YOUR DSN HERE',\n  tracesSampleRate: 1.0,\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Node Transport Options in Sentry JavaScript SDK v7\nDESCRIPTION: Shows how to configure Node.js transport options in Sentry v7. Transport-related options like caCerts and proxy are now grouped under the transportOptions key in the init options object.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/migration/v6-to-v7.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// New in v7:\nSentry.init({\n  dsn: '...',\n  transportOptions: {\n    caCerts: getMyCaCert(),\n    proxy: 'http://example.com',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: SvelteKit sentrySvelteKit() v8 options\nDESCRIPTION: Depicts new way to configure source map uploads in SvelteKit SDK v8, with a subset of options from the 2.x version of the Vite plugin.  The `release` option is now an object with `name` and `inject` properties, and the `sourcemaps` option has `assets` and `ignore` properties.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/migration/v7-to-v8.md#_snippet_45\n\nLANGUAGE: js\nCODE:\n```\nsentrySvelteKit({\n  sourceMapsUploadOptions: {\n    org: process.env.SENTRY_ORG,\n    project: process.env.SENTRY_PROJECT,\n    authToken: process.env.SENTRY_AUTH_TOKEN,\n    release: {\n      name: '1.0.1',\n      inject: true\n    },\n    sourcemaps: {\n      assets: ['./build/*/**/*'],\n      ignore: ['**/build/client/**/*'],\n      filesToDeleteAfterUpload: ['./build/**/*.map']\n    },\n  },\n}),\n```\n\n----------------------------------------\n\nTITLE: Building Sentry SDK with preserveModules for Granular Analysis\nDESCRIPTION: Command to build the Sentry JavaScript SDK with preserveModules set to true via an environment variable, enabling more detailed module analysis. Note that using preserveModules affects tree-shaking behavior and can result in different total bundle size measurements.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/dev-packages/bundle-analyzer-scenarios/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nSENTRY_BUILD_PRESERVE_MODULES=true yarn build\n```\n\n----------------------------------------\n\nTITLE: Running a Single E2E Test App with Bash\nDESCRIPTION: Command to run only a specific E2E test application rather than the full test suite.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/dev-packages/e2e-tests/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn test:run <app-name>\n```\n\n----------------------------------------\n\nTITLE: Instrumenting `cron` Library for Sentry Cron Monitoring in Node.js\nDESCRIPTION: Demonstrates how to wrap the `CronJob` class from the `cron` library using `Sentry.cron.instrumentCron` to enable automatic check-ins for Sentry Cron Monitors. Shows instantiation using both the constructor and the `from` method. Requires `@sentry/node` and the `cron` library.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/changelog/v7.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Sentry from '@sentry/node';\nimport { CronJob } from 'cron';\n\nconst CronJobWithCheckIn = Sentry.cron.instrumentCron(CronJob, 'my-cron-job');\n\n// use the constructor\nconst job = new CronJobWithCheckIn('* * * * *', () => {\n  console.log('You will see this message every minute');\n});\n\n// or from\nconst job = CronJobWithCheckIn.from({\n  cronTime: '* * * * *',\n  onTick: () => {\n    console.log('You will see this message every minute');\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Auto-Instrumentation\nDESCRIPTION: This example shows how to customize auto-instrumentation of `load` functions. You can specify whether to instrument universal or server-only `load` functions or disable the feature entirely, giving fine-grained control over the instrumentation process.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/sveltekit/README.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// vite.config.(js|ts)\nimport { sveltekit } from '@sveltejs/kit/vite';\nimport { sentrySvelteKit } from '@sentry/sveltekit';\n\nexport default {\n  plugins: [\n    sentrySvelteKit({\n      autoInstrument: {\n        load: true, // universal load functions\n        serverLoad: false, // server-only load functions\n      },\n    }),\n    sveltekit(),\n  ],\n  // ... rest of your Vite config\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Sentry with TanStack Router Integration (React)\nDESCRIPTION: This code snippet demonstrates how to initialize the Sentry React SDK with the `tanstackRouterBrowserTracingIntegration` for instrumenting TanStack Router. It requires the `@sentry/react` package and the TanStack Router library. The `tracesSampleRate` is set to 1.0 to capture all traces.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/CHANGELOG.md#_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Sentry from '@sentry/react';\nimport { createRouter } from '@tanstack/react-router';\n\nconst router = createRouter({\n  // Your router options...\n});\n\nSentry.init({\n  dsn: '___PUBLIC_DSN___',\n  integrations: [Sentry.tanstackRouterBrowserTracingIntegration(router)],\n  tracesSampleRate: 1.0,\n});\n```\n\n----------------------------------------\n\nTITLE: Starting a Development Server\nDESCRIPTION: This command starts a development server for a SolidStart project. The `--open` flag automatically opens the application in a new browser tab.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/dev-packages/e2e-tests/test-applications/solidstart/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n\n# or start the server and open the app in a new browser tab\nnpm run dev -- --open\n```\n\n----------------------------------------\n\nTITLE: Enabling Logging in Browser SDK\nDESCRIPTION: Shows the initialization of the Sentry SDK to enable log sending via methods like info and warn. Requires the `_experiments.enableLogs: true` option within the Sentry.init configuration to use logging methods. This depends on having the Sentry SDK, such as `@sentry/browser` installed and initialized.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/CHANGELOG.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nSentry.init({\n  dsn: 'your-dsn-here',\n  _experiments: {\n    enableLogs: true, // This is required to use the logging features\n  },\n});\n\nSentry.logger.info('This is a trace message', { userId: 123 });\n// See PR for better documentation\n```\n\n----------------------------------------\n\nTITLE: Ensuring Request Isolation in Non-HTTP Contexts with `Sentry.withIsolationScope` in JavaScript\nDESCRIPTION: Demonstrates how to manually ensure request isolation for operations outside standard HTTP request handling (like scheduled jobs or WebSocket handlers) using `Sentry.withIsolationScope()`. Wrapping the asynchronous function ensures that events and context within the scope are properly isolated, even during concurrent execution.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/v8-node.md#_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nconst Sentry = require('@sentry/node');\n\nfunction myScheduledJob() {\n  return Sentry.withIsolationScope(async () => {\n    await doSomething();\n    await doSomethingElse();\n    return { status: 'DONE' };\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Performance Tracing for AWS Lambda with Sentry in JavaScript\nDESCRIPTION: This snippet demonstrates how to enable performance tracing for AWS Lambda functions using the Sentry SDK by calling Sentry.AWSLambda.init() with the 'tracesSampleRate' option set to 1.0. This causes Sentry to sample all transactions for performance monitoring, including incoming requests and outgoing AWS service calls. Dependencies include the '@sentry/aws-serverless' package. The configuration requires providing a valid DSN for Sentry. Setting 'tracesSampleRate' too high in production may result in increased data volume and costs.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/aws-serverless/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as Sentry from '@sentry/aws-serverless';\n\nSentry.AWSLambda.init({\n  dsn: '__DSN__',\n  tracesSampleRate: 1.0,\n});\n```\n\n----------------------------------------\n\nTITLE: Running Ember Application - Bash\nDESCRIPTION: This command starts the Ember development server, making the application accessible in a web browser.  It relies on Ember CLI being installed. The application becomes available at [http://localhost:4200].\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/dev-packages/e2e-tests/test-applications/ember-classic/README.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\nember serve\n```\n\n----------------------------------------\n\nTITLE: Creating a Svelte Project Using create-svelte CLI in Bash\nDESCRIPTION: Commands to initialize a new Svelte project either in the current directory or in a specified directory using the create-svelte tool. Prerequisites include having Node.js and npm installed. These commands scaffold the basic project structure ready for development.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/dev-packages/e2e-tests/test-applications/sveltekit-2/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# create a new project in the current directory\nnpm create svelte@latest\n\n# create a new project in my-app\nnpm create svelte@latest my-app\n```\n\n----------------------------------------\n\nTITLE: Example: Incorrect Sentry v7 Initialization Order (Pre-v8) in JavaScript\nDESCRIPTION: Demonstrates a typical Sentry initialization pattern in v7 using `require('@sentry/node')` followed by `require('express')`. This order is problematic in v8 due to OpenTelemetry's auto-instrumentation requirements.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/v8-node.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n// In v7, this was fine:\nconst Sentry = require('@sentry/node');\nconst express = require('express');\n\nSentry.init({\n  // ...\n});\n\nconst app = express();\n```\n\n----------------------------------------\n\nTITLE: Adjusting Sentry Component Render Duration Threshold\nDESCRIPTION: Explains how to set the minimum render duration for non-Glimmer components to be captured as spans in Sentry performance monitoring. Configure this using the `minimumComponentRenderDuration` property in `config/environment.js` under `ENV['@sentry/ember']`.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/ember/README.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nENV['@sentry/ember'] = {\n  minimumComponentRenderDuration: 0, // All (non-glimmer) component render durations will be added as spans.\n};\n```\n\n----------------------------------------\n\nTITLE: SvelteKit unstable_sentryVitePluginOptions\nDESCRIPTION: Illustrates usage of `unstable_sentryVitePluginOptions` to directly configure options from `@sentry/vite-plugin`.  Use with caution as the API is not guaranteed to be stable.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/migration/v7-to-v8.md#_snippet_46\n\nLANGUAGE: js\nCODE:\n```\nsentrySvelteKit({\n  sourceMapsUploadOptions: {\n    // ...\n    release: {\n      name: '1.0.1',\n    },\n    unstable_sentryVitePluginOptions: {\n      release: {\n        setCommits: {\n          auto: true\n        }\n      }\n    }\n  },\n}),\n```\n\n----------------------------------------\n\nTITLE: Alternative Sentry v8 Initialization via Top-Level `require` in JavaScript\nDESCRIPTION: Provides an alternative Sentry v8 initialization method for environments where using Node's `--require` or `--import` flags is not feasible. It involves adding a `require('./instrument.js')` statement at the very beginning of the main application file before any other imports or requires.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/v8-node.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nrequire('./instrument.js');\n\nconst express = require('express');\nconst app = express();\n```\n\n----------------------------------------\n\nTITLE: Replacing `runWithAsyncContext` with `withIsolationScope` - JavaScript\nDESCRIPTION: This shows the replacement of `Sentry.runWithAsyncContext` with `Sentry.withIsolationScope`.  Dependencies: `@sentry/node`. Input:  A function to be executed within an async context. Output: The function is executed with the Sentry context.  Limitations:  Applies to Node.js and similar server-side environments.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/migration/v7-to-v8.md#_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\n// before (v7)\nSentry.runWithAsyncContext(() => {\n  // Your code here...\n});\n```\n\n----------------------------------------\n\nTITLE: Starting Svelte Development Server using npm\nDESCRIPTION: Launch the development server for the Svelte project. This command provides hot module replacement and live reloading for efficient development. Requires dependencies to be installed first using `npm install` (or pnpm/yarn); outputs a running local server accessible via a web browser.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/dev-packages/e2e-tests/test-applications/sveltekit-2-svelte-5/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n\n# or start the server and open the app in a new browser tab\nnpm run dev -- --open\n```\n\n----------------------------------------\n\nTITLE: Setting up Sentry v8 Error Handling for Koa in JavaScript\nDESCRIPTION: Explains how to set up Sentry v8 error handling and performance monitoring for a Koa application. `Sentry.setupKoaErrorHandler(app)` should be invoked after creating the Koa app instance to enable automatic instrumentation before defining routes. Requires `@sentry/node`, `koa`, and `@koa/router` packages.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/v8-node.md#_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nconst Koa = require('koa');\nconst Router = require('@koa/router');\nconst Sentry = require('@sentry/node');\n\nconst router = new Router();\nconst app = new Koa();\n\nSentry.setupKoaErrorHandler(app);\n\n// Add your routes, etc.\n\napp.listen(3030);\n```\n\n----------------------------------------\n\nTITLE: Capturing Exceptions with New Sentry SDK (JavaScript)\nDESCRIPTION: Illustrates capturing exceptions with the new `@sentry/browser` or `@sentry/node` SDKs. It uses `Sentry.withScope()` inside the catch block to create a temporary scope for adding context (like extra data via `scope.setExtra()`) before calling `Sentry.captureException()` with the error.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/changelog/v4.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ntry {\n  throwingFunction();\n} catch (e) {\n  Sentry.withScope(scope => {\n    scope.setExtra('debug', false);\n    Sentry.captureException(e);\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Wrapping HTTP Functions with Sentry in Google Cloud - JavaScript\nDESCRIPTION: This snippet illustrates how to wrap an HTTP-triggered Google Cloud Function using Sentry's error capturing middleware. By passing your function handler to 'Sentry.wrapHttpFunction', uncaught exceptions within the handler will be automatically logged and reported to Sentry. This pattern ensures enhanced observability and error reporting. Required dependency: '@sentry/google-cloud-serverless'. The handler receives standard Express.js-style 'req' and 'res' objects, with the output being a wrapped export suitable for deployment.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/google-cloud-serverless/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nexports.helloHttp = Sentry.wrapHttpFunction((req, res) => {\n  throw new Error('oh, hello there!');\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js withSentryConfig (Old)\nDESCRIPTION: Demonstrates the old method of configuring `withSentryConfig` in Next.js versions prior to v8, where webpack plugin and SDK options were passed as separate arguments. This configuration is no longer supported in v8.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/migration/v7-to-v8.md#_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\n// OLD\nconst nextConfig = {\n  // Your Next.js options...\n};\n\nmodule.exports = withSentryConfig(\n  nextConfig,\n  {\n    // Your Sentry Webpack Plugin Options...\n  },\n  {\n    // Your Sentry SDK options...\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Replacing `spanStatusfromHttpCode` with `getSpanStatusFromHttpCode` - JavaScript\nDESCRIPTION: This snippet shows the change in function name for getting span status. `spanStatusfromHttpCode` has been renamed to `getSpanStatusFromHttpCode`. Dependencies: `@sentry/browser` or similar Sentry SDK package. Input: HTTP status code (e.g., 200). Output:  A span status object. Limitations:  This only applies to HTTP status code related operations.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/migration/v7-to-v8.md#_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\n// v7\nconst spanStatus = spanStatusfromHttpCode(200);\n```\n\n----------------------------------------\n\nTITLE: Configuring captureConsoleIntegration in Sentry.init for Explicit Handled Option (JavaScript)\nDESCRIPTION: This snippet illustrates configuring the captureConsoleIntegration integration within Sentry.init and setting the handled parameter to false, ensuring that console messages are marked as unhandled. The attachStackTrace option is also enabled to attach stack traces to captured console events. Dependencies are the Sentry JavaScript SDK and the captureConsoleIntegration integration. Key parameters are handled (boolean) for marking console messages and attachStackTrace (boolean) for stack tracing. This applies when upgrading to SDK v9 or higher and requires the integrations array in the init call.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/MIGRATION.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nSentry.init({\n  integrations: [Sentry.captureConsoleIntegration({ handled: false })],\n  attachStackTrace: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Adding NestJS Cron Monitoring with @SentryCron Decorator\nDESCRIPTION: This code demonstrates how to leverage the @Sentry/nestjs SDK to integrate cron job monitoring into a NestJS service. It includes defining a monitor configuration, applying the @SentryCron decorator to a cron handler, and configuring check-in margins, maximum runtime, and timezone for more accurate performance tracking.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/CHANGELOG.md#_snippet_26\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Cron } from '@nestjs/schedule';\nimport { SentryCron, MonitorConfig } from '@sentry/nestjs';\nconst monitorConfig: MonitorConfig = {\n  schedule: {\n    type: 'crontab',\n    value: '* * * * *',\n  },\n  checkinMargin: 2,\n  maxRuntime: 10,\n  timezone: 'America/Los_Angeles',\n};\n\nexport class MyCronService {\n  @Cron('* * * * *')\n  @SentryCron('my-monitor-slug', monitorConfig)\n  handleCron() {\n    // Your cron job logic here\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Tests\nDESCRIPTION: This command executes tests for a SolidStart project, utilizing Vitest, @solidjs/testing-library, and @testing-library/jest-dom.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/dev-packages/e2e-tests/test-applications/solidstart/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Using `getSpanStatusFromHttpCode` - JavaScript\nDESCRIPTION: This snippet demonstrates the use of `getSpanStatusFromHttpCode` function which replaced the old function name in Sentry v8. Dependencies: `@sentry/browser` or similar Sentry SDK package. Input: HTTP status code (e.g., 200). Output:  A span status object. Limitations: This only applies to HTTP status code related operations.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/migration/v7-to-v8.md#_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\n// v8\nconst spanStatus = getSpanStatusFromHttpCode(200);\n```\n\n----------------------------------------\n\nTITLE: Adding Canvas Integration to Sentry\nDESCRIPTION: This code snippet demonstrates how to add the canvas integration to your Sentry setup. It assumes you have already imported the Sentry library. The `Sentry.replayCanvasIntegration()` function enables the integration of canvas elements into session replays.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/replay-canvas/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nSentry.replayCanvasIntegration(),\n```\n\n----------------------------------------\n\nTITLE: Capturing Sentry User Feedback with captureMessage in JavaScript\nDESCRIPTION: Shows how to use the `Sentry.captureUserFeedback` API in browser-side JavaScript to send custom user feedback to Sentry without using the built-in dialog. This example first captures a simple message using `Sentry.captureMessage` to generate an associated `eventId`, retrieves user details (like email and username) from the current Sentry scope, and then sends a feedback object containing these details and comments, linked to the generated event ID.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/changelog/v7.md#_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\nconst eventId = Sentry.captureMessage('User Feedback');\nconst user = Sentry.getCurrentHub().getScope().getUser();\nconst userFeedback = {\n  event_id: eventId;\n  email: user.email\n  name: user.username\n  comments: 'I really like your App, thanks!'\n}\nSentry.captureUserFeedback(userFeedback);\n```\n\n----------------------------------------\n\nTITLE: Initializing Legacy Raven SDK (JavaScript)\nDESCRIPTION: Demonstrates the initialization process for the older `raven-js` or `raven` Sentry SDKs. It uses `Raven.config()` to set the DSN and configuration options like the release version, followed by `install()` to activate the SDK.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/changelog/v4.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nRaven.config('___PUBLIC_DSN___', {\n  release: '1.3.0',\n}).install();\n```\n\n----------------------------------------\n\nTITLE: Building the SolidStart application\nDESCRIPTION: Instructions on building the project using npm scripts, with support for different presets and deployment targets configured via package.json and app.config.js.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/dev-packages/e2e-tests/test-applications/solidstart-spa/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Installing Sentry SvelteKit SDK\nDESCRIPTION: This snippet demonstrates the installation of the Sentry SvelteKit SDK using npm or yarn. It's a prerequisite for setting up error tracking and performance monitoring in a SvelteKit project.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/sveltekit/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @sentry/sveltekit\n```\n\n----------------------------------------\n\nTITLE: Migrate Severity Enum - Sentry JavaScript\nDESCRIPTION: This snippet shows how to migrate from the deprecated `Severity` enum to using string literals typed as `SeverityLevel` in Sentry JavaScript SDK version 6.17.5.  This change aims to reduce bundle size by avoiding the enum.  It requires the `@sentry/types` package.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/migration/v6-to-v7.md#_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n// New in 6.17.5:\nimport { SeverityLevel } from '@sentry/types';\n\nconst levelA = \"error\" as SeverityLevel;\n\nconst levelB: SeverityLevel = \"error\"\n\n// Before:\nimport { Severity, SeverityLevel } from '@sentry/types';\n\nconst levelA = Severity.error;\n\nconst levelB: SeverityLevel = \"error\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Sentry with dataloader Integration in JavaScript\nDESCRIPTION: This code snippet demonstrates how to initialize the Sentry SDK and enable instrumentation for the 'dataloader' package in a Node.js application. It requires the Sentry JavaScript SDK and the 'dataloader' package as dependencies. The key parameter is the 'integrations' array, which accepts the result of 'Sentry.dataloaderIntegration()' to automatically monitor and trace dataloader instances. This integration helps capture performance data and potential errors related to batching and caching operations performed by dataloader.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/CHANGELOG.md#_snippet_22\n\nLANGUAGE: JavaScript\nCODE:\n```\nSentry.init({\n  integrations: [Sentry.dataloaderIntegration()],\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies - Bash\nDESCRIPTION: This command installs the necessary Node.js dependencies for the Ember application using npm. This requires Node.js and npm to be installed. It downloads and installs all the packages defined in the project's `package.json` file, making the application runnable.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/dev-packages/e2e-tests/test-applications/ember-classic/README.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Update Scripts for ESM Mode React Router with Server Instrumentation\nDESCRIPTION: Modifies the `dev` and `start` scripts in `package.json` to include the `--import` option for Node.js, ensuring the server instrumentation module is loaded before the application starts. Necessary for proper error and transaction tracking in server environment.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/react-router/README.md#_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n\"scripts\": {\n  \"dev\": \"NODE_OPTIONS='--import ./instrument.server.mjs' react-router dev\",\n  \"start\": \"NODE_OPTIONS='--import ./instrument.server.mjs' react-router-serve ./build/server/index.js\"\n}\n```\n\n----------------------------------------\n\nTITLE: Enable/Disable client-side webpack plugin - Gatsby\nDESCRIPTION: Shows how to enable or disable the `@sentry/webpack-plugin` in the client-side build for Gatsby in v8 using the `enableClientWebpackPlugin` option. This allows more control over the integration of the webpack plugin.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/migration/v7-to-v8.md#_snippet_49\n\nLANGUAGE: js\nCODE:\n```\n// v8 - gatsby-config.js\nmodule.exports = {\n  // ...\n  plugins: [\n    {\n      resolve: '@sentry/gatsby',\n      options: {\n        enableClientWebpackPlugin: false,\n      },\n    },\n    // ...\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Enabling Next.js Instrumentation Hook\nDESCRIPTION: Demonstrates enabling the Next.js instrumentation hook by setting `experimental.instrumentationHook` to `true` in `next.config.js`. This is necessary for initializing the Sentry SDK on the server-side using `instrumentation.ts`.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/migration/v7-to-v8.md#_snippet_41\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  experimental: {\n    instrumentationHook: true, // Not required on Next.js 15+\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Sentry Plugin in GatsbyJS Configuration\nDESCRIPTION: Shows how to register the @sentry/gatsby package as a plugin in gatsby-config.js with basic DSN configuration. This is the first step required to integrate Sentry with a Gatsby application.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/gatsby/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  // ...\n  plugins: [\n    {\n      resolve: '@sentry/gatsby',\n      options: {\n        dsn: process.env.SENTRY_DSN, // this is the default\n      },\n    },\n    // ...\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Using new Scope methods in @sentry/browser for setting multiple extras in JavaScript\nDESCRIPTION: Introduces batch setting of tags and extra data on the Scope object via setTags and setExtras methods new to SDK version 5.x. Compared to previous versions where extras were set one key at a time, this method accepts an object with multiple key-value pairs, improving ergonomics. Demonstrates capturing an exception with associated extra context using the new setExtras method.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/migration/v4-to-v5_v6.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n// New in 5.x setExtras\nSentry.withScope(scope => {\n  scope.setExtras(errorInfo);\n  Sentry.captureException(error);\n});\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// vs. 4.x\nSentry.withScope(scope => {\n  Object.keys(errorInfo).forEach(key => {\n    scope.setExtra(key, errorInfo[key]);\n  });\n  Sentry.captureException(error);\n});\n```\n\n----------------------------------------\n\nTITLE: Setting context, and capturing events\nDESCRIPTION: This snippet demonstrates setting user information, tags, and extra context using Sentry. Additionally, it illustrates how to add breadcrumbs and capture exceptions, messages and manual events using the `@sentry/cloudflare` package. These functions help in providing context around events and exceptions.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/cloudflare/README.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Sentry from '@sentry/cloudflare';\n\n// Set user information, as well as tags and further extras\nSentry.setExtra('battery', 0.7);\nSentry.setTag('user_mode', 'admin');\nSentry.setUser({ id: '4711' });\n\n// Add a breadcrumb for future events\nSentry.addBreadcrumb({\n  message: 'My Breadcrumb',\n  // ...\n});\n\n// Capture exceptions, messages or manual events\nSentry.captureMessage('Hello, world!');\nSentry.captureException(new Error('Good bye'));\nSentry.captureEvent({\n  message: 'Manual',\n  stacktrace: [\n    // ...\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Sentry Node SDK (v8) with OpenTelemetry\nDESCRIPTION: Demonstrates the correct way to initialize the `@sentry/node` SDK in v8. Crucially, `Sentry.init()` must be called *before* any other packages (like `http` or `express`) are required to allow OpenTelemetry to instrument them correctly. This initialization pattern is essential for the automated performance instrumentation introduced in v8.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/CHANGELOG.md#_snippet_42\n\nLANGUAGE: js\nCODE:\n```\nconst Sentry = require('@sentry/node');\nSentry.init({\n  dsn: '...',\n  // ... other config here\n});\n// now require other things below this!\nconst http = require('http');\nconst express = require('express');\n// ....\n```\n\n----------------------------------------\n\nTITLE: Initializing Sentry with Replay and Canvas Integrations\nDESCRIPTION: This code demonstrates a full example of initializing Sentry with both the standard replay integration and the canvas replay integration. It includes setting the DSN, session sample rates, and error sample rates. This configuration enables comprehensive session replay functionality, including canvas elements.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/replay-canvas/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Sentry from '@sentry/browser';\n// or e.g. import * as Sentry from '@sentry/react';\n\nSentry.init({\n  dsn: '__DSN__',\n\n  // This sets the sample rate to be 10%. You may want this to be 100% while\n  // in development and sample at a lower rate in production\n  replaysSessionSampleRate: 0.1,\n\n  // If the entire session is not sampled, use the below sample rate to sample\n  // sessions when an error occurs.\n  replaysOnErrorSampleRate: 1.0,\n\n  integrations: [Sentry.replayIntegration(), Sentry.replayCanvasIntegration()],\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Migrating Remix App to Pre-configured Host Template (Shell)\nDESCRIPTION: Sequence of shell commands demonstrating how to create a new Remix project using a hosting template, remove its default application code, and copy the application code (`app/` directory) from an existing project. This is useful for setting up deployment to a specific provider.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/dev-packages/e2e-tests/test-applications/create-remix-app-v2/README.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncd ..\n# create a new project, and pick a pre-configured host\nnpx create-remix@latest\ncd my-new-remix-app\n# remove the new project's app (not the old one!)\nrm -rf app\n# copy your app over\ncp -R ../my-old-remix-app/app app\n```\n\n----------------------------------------\n\nTITLE: Installing Sentry TypeScript Configuration Package\nDESCRIPTION: Commands to install the @sentry-internal/typescript package as a development dependency using either Yarn or NPM package managers.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/typescript/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# With Yarn:\nyarn add --dev @sentry-internal/typescript\n\n# With NPM:\nnpm install --save-dev @sentry-internal/typescript\n```\n\n----------------------------------------\n\nTITLE: Integrating Sentry in Cloudflare Pages with multiple middlewares\nDESCRIPTION: This snippet shows how to incorporate the Sentry middleware when there are already other middlewares present in Cloudflare Pages. The Sentry middleware must be the first middleware in the array. The example shows how to add more middlewares after initializing Sentry.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/cloudflare/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Sentry from '@sentry/cloudflare';\n\nexport const onRequest = [\n  // Make sure Sentry is the first middleware\n  Sentry.sentryPagesPlugin({\n    dsn: process.env.SENTRY_DSN,\n    tracesSampleRate: 1.0,\n  }),\n  // Add more middlewares here\n];\n```\n\n----------------------------------------\n\nTITLE: v7 example of using Severity\nDESCRIPTION: This JavaScript code example demonstrates the deprecated approach of using the `Severity` enum from `@sentry/types`.  It shows how to declare and assign a `Severity` variable.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/migration/v7-to-v8.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n// v7\nimport { Severity, SeverityLevel } from '@sentry/types';\n\nconst levelA = Severity.error;\n\nconst levelB: SeverityLevel = \"error\"\n\n```\n\n----------------------------------------\n\nTITLE: Configuring requestDataIntegration in Astro\nDESCRIPTION: Illustrates how to configure the `requestDataIntegration` in Astro to control header capture. The `trackHeaders` option is removed and replaced by this method to control the include option. The default is true.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/migration/v7-to-v8.md#_snippet_43\n\nLANGUAGE: js\nCODE:\n```\nSentry.init({\n  integrations: [\n    Sentry.requestDataIntegration({\n      include: {\n        headers: false,\n      },\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Working with Sessions in Sentry JavaScript SDK v6 (Legacy)\nDESCRIPTION: Shows the previous class-based approach to creating and managing session objects in Sentry v6. Sessions were created using the Session class constructor and managed through instance methods.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/migration/v6-to-v7.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n// Before:\nimport { Session } from '@sentry/hub';\n\nconst session = new Session({ release: 'v1.0' });\nsession.update({ environment: 'prod' });\nsession.close('ok');\n```\n\n----------------------------------------\n\nTITLE: Installing Sentry Cloudflare Package via npm\nDESCRIPTION: This command installs the `@sentry/cloudflare` package using npm.  It's a prerequisite step for integrating the Sentry SDK into Cloudflare projects.  The package provides functionalities for error tracking and performance monitoring.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/cloudflare/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @sentry/cloudflare\n```\n\n----------------------------------------\n\nTITLE: Disabling Sentry Component Render Instrumentation\nDESCRIPTION: Shows how to disable the automatic performance instrumentation for non-Glimmer component render times. Set `disableInstrumentComponents: true` within the `ENV['@sentry/ember']` object in `config/environment.js`.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/ember/README.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nENV['@sentry/ember'] = {\n  disableInstrumentComponents: true, // Will disable automatic instrumentation for components.\n};\n```\n\n----------------------------------------\n\nTITLE: Building Remix App for Production (Shell)\nDESCRIPTION: Compiles and bundles the Remix application for production deployment. This command generates optimized assets in the build output directories (`build/` and `public/build/`).\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/dev-packages/e2e-tests/test-applications/create-remix-app-v2/README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Running changelog\nDESCRIPTION: This command is used to generate changelog entries. It is a crucial step in preparing for a new release. The command helps to determine the version to be released (semver).\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/publishing-a-release.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn changelog\n```\n\n----------------------------------------\n\nTITLE: Configuring Sourcemap Deletion After Upload\nDESCRIPTION: Shows how to configure the Sentry Gatsby plugin to automatically delete source map files after they have been uploaded to Sentry by setting the deleteSourcemapsAfterUpload option to true.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/gatsby/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  // ...\n  plugins: [\n    {\n      resolve: '@sentry/gatsby',\n      options: {\n        deleteSourcemapsAfterUpload: true,\n      },\n    },\n    // ...\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Breadcrumbs with Legacy Raven SDK (JavaScript)\nDESCRIPTION: Illustrates how to manually record a breadcrumb using the legacy `raven-js` or `raven` SDK. `Raven.captureBreadcrumb()` is called with an object containing details like the message, category, and custom data.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/changelog/v4.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nRaven.captureBreadcrumb({\n  message: 'Item added to shopping cart',\n  category: 'action',\n  data: {\n    isbn: '978-1617290541',\n    cartSize: '3',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Sentry Vue integration via CDN in HTML\nDESCRIPTION: Shows how to load Sentry and its Vue integration via CDN scripts for browser environments. The example references the Sentry bundle and the Vue integration script, then initializes Sentry with the Vue integration configured. This allows usage without a build system and suits projects leveraging direct script includes.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/migration/v4-to-v5_v6.md#_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- Note that we now also provide a es6 build only -->\n<!-- <script src=\"https://browser.sentry-cdn.com/5.0.0/bundle.es6.min.js\" crossorigin=\"anonymous\"></script> -->\n<script src=\"https://browser.sentry-cdn.com/5.0.0/bundle.min.js\" crossorigin=\"anonymous\"></script>\n\n<!-- If you include the integration it will be available under Sentry.Integrations.Vue -->\n<script src=\"https://browser.sentry-cdn.com/5.0.0/vue.min.js\" crossorigin=\"anonymous\"></script>\n\n<script>\n  Sentry.init({\n    dsn: '___PUBLIC_DSN___',\n    integrations: [\n      new Sentry.Integrations.Vue({\n        Vue,\n        attachProps: true,\n      }),\n    ],\n  });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing from Sentry Replay Submodules (Deprecated) - JavaScript\nDESCRIPTION: This deprecated usage example demonstrates explicit import from an internal, now restricted, submodule path within the '@sentry/replay' package. In the updated npm package structure, only the root '@sentry/replay' import is guaranteed to be stable. Direct submodule imports may break in newer versions and are not recommended.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/migration/replay.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport something from '@sentry/replay/submodule';\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Transport in Sentry JavaScript SDK v6 (Legacy)\nDESCRIPTION: Demonstrates the previous class-based approach to implementing custom transports in Sentry v6. This shows how transports were created by extending BaseTransport and implementing sendEvent and sendSession methods.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/migration/v6-to-v7.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// Before:\nclass MyCustomTransport extends BaseTransport {\n  constructor(options: TransportOptions) {\n    // initialize your transport here\n    super(options);\n  }\n\n  public sendEvent(event: Event): PromiseLike<Response> {\n    // this is where your sending logic goes\n    // `url` is decoded from dsn in BaseTransport\n    const myCustomRequest = createMyCustomRequestFromEvent(event, this.url);\n    return sendMyCustomRequest(myCustomRequest).then(() => resolve({status: 'success'}));\n  }\n\n  public sendSession(session: Session): PromiseLike<Response> {...}\n  // ...\n}\n\nSentry.init({\n  dsn: '...',\n  transport: MyCustomTransport, // the constructor was called when the client was initialized\n  ...\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Svelte Project with sv CLI (Bash)\nDESCRIPTION: This snippet demonstrates how to initialize a new Svelte project using the `sv` command-line interface. The first command creates a project in the current directory, while the second creates one in a specified directory (`my-app`). This requires the `sv` CLI to be installed or accessible via `npx`.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/dev-packages/e2e-tests/test-applications/sveltekit-cloudflare-pages/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# create a new project in the current directory\nnpx sv create\n```\n\nLANGUAGE: bash\nCODE:\n```\n# create a new project in my-app\nnpx sv create my-app\n```\n\n----------------------------------------\n\nTITLE: Initializing BrowserClient (previous versions)\nDESCRIPTION: This snippet shows the instantiation of the `BrowserClient` in older versions of the SDK, without the need for explicit options as in v7. It serves as a point of comparison for the updated client initialization method.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/migration/v6-to-v7.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Before:\nconst client = new BrowserClient();\n```\n\n----------------------------------------\n\nTITLE: Installing Sentry SDK with npm\nDESCRIPTION: This command installs the Sentry SolidStart SDK using npm. It adds the necessary dependencies to the project to enable error tracking and performance monitoring.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/solidstart/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @sentry/solidstart\n```\n\n----------------------------------------\n\nTITLE: Installing Sentry SvelteKit SDK (Yarn)\nDESCRIPTION: This snippet shows how to install the Sentry SvelteKit SDK using yarn, an alternative to npm for managing project dependencies.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/sveltekit/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @sentry/sveltekit\n```\n\n----------------------------------------\n\nTITLE: Building Svelte Production App (Bash/npm)\nDESCRIPTION: This command generates a production-ready build of the Svelte application. Executing `npm run build` compiles the project into optimized assets suitable for deployment. The resulting build can typically be previewed locally using `npm run preview`, although deployment may require installing a specific adapter.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/dev-packages/e2e-tests/test-applications/sveltekit-cloudflare-pages/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Installing Sentry Profiling for Node.js\nDESCRIPTION: Commands for installing the required Sentry packages for Node.js profiling using either yarn or npm package managers.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/profiling-node/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Using yarn\nyarn add @sentry/node @sentry/profiling-node\n\n# Using npm\nnpm install --save @sentry/node @sentry/profiling-node\n```\n\n----------------------------------------\n\nTITLE: Creating a SolidStart Project\nDESCRIPTION: These commands initialize a new SolidStart project. The first command creates a project in the current directory. The second creates a project in a specified directory.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/dev-packages/e2e-tests/test-applications/solidstart/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# create a new project in the current directory\nnpm init solid@latest\n\n# create a new project in my-app\nnpm init solid@latest my-app\n```\n\n----------------------------------------\n\nTITLE: Common Astro Project Commands (sh)\nDESCRIPTION: Lists essential npm and Astro CLI commands run from the project root. Includes installing dependencies (`npm install`), starting the dev server (`npm run dev`), building for production (`npm run build`), previewing the build (`npm run preview`), and running arbitrary Astro CLI commands (`npm run astro ...`, `npm run astro -- --help`).\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/dev-packages/e2e-tests/test-applications/astro-5/README.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm install\n```\n\nLANGUAGE: sh\nCODE:\n```\nnpm run dev\n```\n\nLANGUAGE: sh\nCODE:\n```\nnpm run build\n```\n\nLANGUAGE: sh\nCODE:\n```\nnpm run preview\n```\n\nLANGUAGE: sh\nCODE:\n```\nnpm run astro ...\n```\n\nLANGUAGE: sh\nCODE:\n```\nnpm run astro -- --help\n```\n\n----------------------------------------\n\nTITLE: Replacing `trpcMiddleware` - JavaScript\nDESCRIPTION: This snippet showcases the change in the Sentry tRPC middleware import, moving from `Sentry.Handlers.trpcMiddleware()` to `Sentry.trpcMiddleware()`. Dependencies: `@sentry/node` and setup tRPC middleware. Input: None. Output: Sentry instrumentation for tRPC middleware.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/migration/v7-to-v8.md#_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\n// v7\nimport * as Sentry from '@sentry/node';\nSentry.Handlers.trpcMiddleware();\n```\n\n----------------------------------------\n\nTITLE: Migrate API Class - Sentry JavaScript\nDESCRIPTION: This snippet demonstrates how to migrate from the deprecated internal `API` class to the new `initAPIDetails`, `getEnvelopeEndpointWithUrlEncodedAuth`, and `getStoreEndpointWithUrlEncodedAuth` functions in Sentry JavaScript SDK version 6.17.0. This change promotes a functional approach and improves code organization. It requires the `@sentry/core` package.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/migration/v6-to-v7.md#_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n// New in 6.17.0:\nimport {\n  initAPIDetails,\n  getEnvelopeEndpointWithUrlEncodedAuth,\n  getStoreEndpointWithUrlEncodedAuth,\n} from '@sentry/core';\n\nconst dsn = initAPIDetails(dsn, metadata, tunnel);\nconst dsn = api.dsn;\nconst storeEndpoint = getStoreEndpointWithUrlEncodedAuth(api.dsn);\nconst envelopeEndpoint = getEnvelopeEndpointWithUrlEncodedAuth(api.dsn, api.tunnel);\n\n// Before:\nimport { API } from '@sentry/core';\n\nconst api = new API(dsn, metadata, tunnel);\nconst dsn = api.getDsn();\nconst storeEndpoint = api.getStoreEndpointWithUrlEncodedAuth();\nconst envelopeEndpoint = api.getEnvelopeEndpointWithUrlEncodedAuth();\n```\n\n----------------------------------------\n\nTITLE: Migrate ContextLines Integration - Sentry JavaScript\nDESCRIPTION: This snippet demonstrates how to migrate from the deprecated `frameContextLines` top-level option to the new `ContextLines` integration in Sentry JavaScript SDK version 6.18.0. This change allows for more granular control over context lines in error reporting.  It requires the `@sentry/node` package and the `ContextLines` integration.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/migration/v6-to-v7.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n// New in 6.18.0\ninit({\n  dsn: '__DSN__',\n  integrations: [new ContextLines({ frameContextLines: 10 })],\n});\n\n// Before:\ninit({\n  dsn: '__DSN__',\n  frameContextLines: 10,\n});\n```\n\n----------------------------------------\n\nTITLE: Generating NestJS Test Coverage Report\nDESCRIPTION: This command generates a test coverage report, which provides information about the lines of code covered by unit tests.  The report helps identify untested areas of the code. Requires a testing framework with coverage support.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/dev-packages/e2e-tests/test-applications/nestjs-fastify/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn run test:cov\n```\n\n----------------------------------------\n\nTITLE: Running SolidStart Tests\nDESCRIPTION: This command executes the test suite for a SolidStart project.  It uses Vitest, @solidjs/testing-library and @testing-library/jest-dom. It utilizes the `npm test` command defined in `package.json`.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/dev-packages/e2e-tests/test-applications/solidstart-top-level-import/README.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Running SolidStart Project Tests with NPM - Shell\nDESCRIPTION: This snippet shows how to execute the project's test suite with npm test. It assumes that tests are implemented using vitest, @solidjs/testing-library, and @testing-library/jest-dom, which extend the test capabilities of the project. Running this command will invoke the test runner and report results in the console. Dependencies on these testing tools must be installed beforehand.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/dev-packages/e2e-tests/test-applications/solidstart-dynamic-import/README.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Capturing Exception in Loop - JavaScript\nDESCRIPTION: This snippet represents the core action within the `runSentry` function: capturing an exception using `Sentry.captureException` inside a loop. This repeatedly triggers Sentry's error reporting mechanism, crucial for testing its behavior under load or during memory tests.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/dev-packages/node-integration-tests/test.txt#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nSentry.captureException(new Error(`error in loop ${i}`));\n```\n\n----------------------------------------\n\nTITLE: v7 example of init with BrowserTracing\nDESCRIPTION: This TypeScript code demonstrates initializing Sentry in v7, using the `BrowserTracing` integration and specifying `tracingOrigins`. This code is for the browser SDK and sets the DSN and enables BrowserTracing, specifying which origins should be traced.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/migration/v7-to-v8.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n// v7\nSentry.init({\n  dsn: '__DSN__',\n  integrations: [new Sentry.BrowserTracing({ tracingOrigins: ['localhost', 'example.com'] })],\n});\n\n```\n\n----------------------------------------\n\nTITLE: Importing Functions from @sentry/hub in v7\nDESCRIPTION: This snippet shows the new way to import functions like `addBreadcrumb`, `captureException`, `configureScope`, and `setTag` from `@sentry/hub` in version 7 of the Sentry JavaScript SDK. This change reflects the consolidation of functionality from the removed `@sentry/minimal` package.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/migration/v6-to-v7.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// New in v7:\nimport { addBreadcrumb, captureException, configureScope, setTag } from '@sentry/hub';\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies Using npm, pnpm, or yarn Bash\nDESCRIPTION: This snippet shows the command to install project dependencies using npm, pnpm, or yarn. It assumes you have a Node.js environment with the chosen package manager installed. No parameters are required besides running the command in the project root. The command installs all dependencies listed in the package manifest and lock file, preparing the environment for development or build.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/dev-packages/e2e-tests/test-applications/solid-solidrouter/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install # or pnpm install or yarn install\n```\n\n----------------------------------------\n\nTITLE: Implementing Transaction Tracking for Frontend Tests\nDESCRIPTION: TypeScript code to track transaction IDs in standardized frontend test applications by adding an event processor that records pageload and navigation transaction IDs.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/dev-packages/e2e-tests/README.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nSentry.addEventProcessor(event => {\n  if (\n    event.type === 'transaction' &&\n    (event.contexts?.trace?.op === 'pageload' || event.contexts?.trace?.op === 'navigation')\n  ) {\n    const eventId = event.event_id;\n    window.recordedTransactions = window.recordedTransactions || [];\n    window.recordedTransactions.push(eventId);\n  }\n\n  return event;\n});\n```\n\n----------------------------------------\n\nTITLE: Building Sentry Profiling Bindings from Source\nDESCRIPTION: Commands for configuring and building the native bindings used by Sentry Profiling SDK from source code using either yarn or npm.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/profiling-node/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# configure node-gyp using yarn\nyarn build:bindings:configure\n# or using npm\nnpm run build:bindings:configure\n\n# compile the binaries using yarn\nyarn build:bindings\n# or using npm\nnpm run build:bindings\n```\n\n----------------------------------------\n\nTITLE: Publishing Local SDK Packages with yalc in Shell\nDESCRIPTION: Publishes local SDK packages from the source repository to the local yalc repository, making them available for consumption in test projects. The process assumes all local changes have been built if necessary and yalc is installed. Running this command in the root publishes all SDKs, whereas running it within a subpackage publishes only that SDK. No output files are created, but changes are staged locally.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/using-yalc.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn yalc:publish\n```\n\n----------------------------------------\n\nTITLE: Cloning Ember Application - Bash\nDESCRIPTION: This snippet clones the Ember application repository from the specified URL. It requires Git to be installed. The command downloads the repository and prepares it for local use. After cloning, you navigate into the project directory.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/dev-packages/e2e-tests/test-applications/ember-classic/README.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\ngit clone <repository-url>\ncd ember-classic\n```\n\n----------------------------------------\n\nTITLE: Adding Local SDK Packages to Test Projects with yalc in Shell\nDESCRIPTION: Incorporates a locally published SDK package—such as @sentry/browser—into a test project using yalc. Requires that the package has already been published to the local yalc store. Developers should ensure dependencies of the SDK are also added with yalc to avoid missing modules. The operation is performed from the test project's root directory and repeated for all necessary related SDK packages.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/using-yalc.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyalc add @sentry/browser #or any other SDK package\n```\n\n----------------------------------------\n\nTITLE: Building Application - Bash\nDESCRIPTION: These commands build the Ember application for development or production environments.  `ember build` creates a development build, while `ember build --environment production` creates a production-ready build optimized for deployment. Building is essential before deploying.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/dev-packages/e2e-tests/test-applications/ember-classic/README.md#_snippet_5\n\nLANGUAGE: Bash\nCODE:\n```\nember build (development)\nember build --environment production (production)\n```\n\n----------------------------------------\n\nTITLE: Running E2E Tests with Bash Commands\nDESCRIPTION: Commands to build and run the E2E test suite, including building package tarballs and running all tests or specific test applications.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/dev-packages/e2e-tests/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn build:tarball\nyarn test:e2e\n```\n\n----------------------------------------\n\nTITLE: Setting Global Tags with Legacy Raven SDK (JavaScript)\nDESCRIPTION: Illustrates how to set global tags using the legacy `raven-js` or `raven` SDK. The `Raven.setTagsContext()` method is used to define key-value pairs that will be attached to all subsequent events.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/changelog/v4.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nRaven.setTagsContext({ key: 'value' });\n```\n\n----------------------------------------\n\nTITLE: Initializing @sentry/browser SDK with Vue integration in JavaScript\nDESCRIPTION: Demonstrates initialization of the @sentry/browser SDK with Vue integration. Shows the difference between version 4.x where integrations were bundled together, and 5.x where optional integrations moved to the separate @sentry/integrations package. The snippet includes parameters like the DSN, Vue instance, and attachProps option. Used to enable error tracking within Vue applications with richer integration capabilities.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/docs/migration/v4-to-v5_v6.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as Sentry from '@sentry/browser';\n\nSentry.init({\n  dsn: '___PUBLIC_DSN___',\n  integrations: [\n    new Sentry.Integrations.Vue({\n      Vue,\n      attachProps: true,\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Integration Tests Structure Definition for Sentry Node.JS SDK in TypeScript\nDESCRIPTION: Defines the directory and file structure of the integration tests for the Sentry Node.JS SDK. Each test scope contains folders for scenario initialization (scenario.ts) and assertion logic (test.ts), along with optional additional scenarios or custom server implementations. This layout facilitates organized and reusable test setups across different feature areas.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/dev-packages/node-integration-tests/README.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nsuites/\n|---- public-api/\n      |---- captureMessage/\n            |---- test.ts [assertions]\n            |---- scenario.ts [Sentry initialization and test subject]\n      |---- customTest/\n            |---- test.ts [assertions]\n            |---- scenario_1.ts [optional extra test scenario]\n            |---- scenario_2.ts [optional extra test scenario]\n            |---- server_with_mongo.ts [optional custom server]\n            |---- server_with_postgres.ts [optional custom server]\n```\n\n----------------------------------------\n\nTITLE: Creating Sentry Project Configuration\nDESCRIPTION: This snippet provides a sample list of available Sentry projects with associated attributes like project ID, name, and user access rights. It is useful for managing multiple projects within the Sentry platform, enabling programmatic access to project-specific error tracking and settings.\nSOURCE: https://github.com/getsentry/sentry-javascript/blob/develop/packages/replay-internal/test/fixtures/fixJson/1_incompleteJson.txt#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n[{\"id\":\"feedback\",\"name\":\"Feedback\",\"access\":\"read-write\"},{\"id\":\"javascript\",\"name\":\"JavaScript SDK\",\"access\":\"read-only\"}]\n```"
  }
]