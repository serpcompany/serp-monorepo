[
  {
    "owner": "knex",
    "repo": "knex",
    "content": "TITLE: Knex Transaction with Transaction Object (JavaScript)\nDESCRIPTION: This example demonstrates how to use `knex.transaction` with a handler function where the transaction object `trx` is used to explicitly commit or rollback the transaction. It inserts a catalogue and then inserts books associated with that catalogue. `transacting(trx)` is used to associate queries with the transaction, and `trx.commit` and `trx.rollback` are called to finalize the transaction based on success or failure.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/transactions.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nknex\n  .transaction(function (trx) {\n    const books = [\n      { title: 'Canterbury Tales' },\n      { title: 'Moby Dick' },\n      { title: 'Hamlet' },\n    ];\n\n    knex\n      .insert({ name: 'Old Books' }, 'id')\n      .into('catalogues')\n      .transacting(trx)\n      .then(function (ids) {\n        books.forEach((book) => (book.catalogue_id = ids[0]));\n        return knex('books').insert(books).transacting(trx);\n      })\n      .then(trx.commit)\n      .catch(trx.rollback);\n  })\n  .then(function (inserts) {\n    console.log(inserts.length + ' new books saved.');\n  })\n  .catch(function (error) {\n    // If we get here, that means that\n    // neither the 'Old Books' catalogues insert,\n    // nor any of the books inserts will have taken place.\n    console.error(error);\n  });\n```\n\n----------------------------------------\n\nTITLE: Knex Transaction with Query Builder (JavaScript)\nDESCRIPTION: This example demonstrates how to use `knex.transaction` with a handler function where the transaction object `trx` is used as a query builder. It inserts a catalogue and then inserts books associated with that catalogue. On success, it logs the number of inserted books. On failure, it logs the error, ensuring a rollback.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/transactions.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nknex\n  .transaction(function (trx) {\n    const books = [\n      { title: 'Canterbury Tales' },\n      { title: 'Moby Dick' },\n      { title: 'Hamlet' },\n    ];\n\n    return trx\n      .insert({ name: 'Old Books' }, 'id')\n      .into('catalogues')\n      .then(function (ids) {\n        books.forEach((book) => (book.catalogue_id = ids[0]));\n        return trx('books').insert(books);\n      });\n  })\n  .then(function (inserts) {\n    console.log(inserts.length + ' new books saved.');\n  })\n  .catch(function (error) {\n    // If we get here, that means that\n    // neither the 'Old Books' catalogues insert,\n    // nor any of the books inserts will have taken place.\n    console.error(error);\n  });\n```\n\n----------------------------------------\n\nTITLE: Inserting with Returning Values in Knex.js\nDESCRIPTION: Inserts a new row into the 'books' table and returns the 'id' of the newly inserted row. This is useful for retrieving auto-generated IDs or other calculated values after an insert operation. Supported by PostgreSQL, MSSQL, SQLite, and Oracle.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_46\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Returns [ { id: 1 } ]\nknex('books').returning('id').insert({ title: 'Slaughterhouse Five' });\n```\n\n----------------------------------------\n\nTITLE: Adding a Foreign Key with Knex\nDESCRIPTION: This snippet shows how to add a foreign key constraint to an existing column using Knex.js. It modifies the 'users' table, adds an unsigned integer column 'user_id', and creates a foreign key constraint referencing the 'Items.user_id_in_items' column, marking the constraint as deferrable.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/schema-builder.md#_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\nknex.schema.table('users', function (table) {\n  table.integer('user_id').unsigned();\n  table\n    .foreign('user_id')\n    .references('Items.user_id_in_items')\n    .deferrable('deferred');\n});\n```\n\n----------------------------------------\n\nTITLE: Upserting Data with Knex.js\nDESCRIPTION: This snippet demonstrates how to use the `.upsert()` method in Knex.js for CockroachDB and MySQL. It creates an upsert query that either inserts a new row or updates an existing one if a conflict occurs, specified by unique index on the column.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\n// insert new row with unique index on title column\nknex('books').upsert({ title: 'Great Gatsby' });\n\n// update row by unique title 'Great Gatsby'\n// and insert row with title 'Fahrenheit 451'\nknex('books').upsert(\n  [{ title: 'Great Gatsby' }, { title: 'Fahrenheit 451' }],\n  ['id']\n);\n\n// Normalizes for empty keys on multi-row upsert,\n// result sql:\n// (\"x\", \"y\") values (20, default), (default, 30), (10, 20):\nknex('coords').upsert([{ x: 20 }, { y: 30 }, { x: 10, y: 20 }]);\n```\n\n----------------------------------------\n\nTITLE: Inserting Data with Knex.js\nDESCRIPTION: This snippet demonstrates how to insert data into a table using Knex.js. It showcases inserting a single row and multiple rows, and specifies a returning array to retrieve inserted row details, like 'id'. It illustrates how different databases (mysql, sqlite, postgresql) may return varying results by default.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\n// Returns [1] in \"mysql\", \"sqlite\", \"oracle\";\n// [] in \"postgresql\"\n// unless the 'returning' parameter is set.\nknex('books').insert({ title: 'Slaughterhouse Five' });\n\n// Normalizes for empty keys on multi-row insert:\nknex('coords').insert([{ x: 20 }, { y: 30 }, { x: 10, y: 20 }]);\n\n// Returns [2] in \"mysql\", \"sqlite\"; [2, 3] in \"postgresql\"\nknex\n  .insert([{ title: 'Great Gatsby' }, { title: 'Fahrenheit 451' }], ['id'])\n  .into('books');\n```\n\n----------------------------------------\n\nTITLE: Creating a Unique Index with Knex\nDESCRIPTION: This snippet illustrates creating unique indexes on a table using Knex.js. It adds unique constraints/indexes on different columns with different options like index name, deferrability, storage engine index type, constraint usage, and predicate.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/schema-builder.md#_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\nknex.schema.alterTable('users', function (t) {\n  t.unique('email');\n});\nknex.schema.alterTable('job', function (t) {\n  t.unique(['account_id', 'program_id'], {\n    indexName: 'job_composite_index',\n    deferrable: 'deferred',\n    storageEngineIndexType: 'hash',\n  });\n});\nknex.schema.alterTable('job', function (t) {\n  t.unique(['account_id', 'program_id'], {\n    indexName: 'job_composite_index',\n    useConstraint: true,\n  });\n});\nknex.schema.alterTable('job', function (t) {\n  t.unique(['account_id', 'program_id'], {\n    indexName: 'job_composite_index',\n    predicate: knex.whereNotNull('account_id'),\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Explicit Transaction Management with Async Code and Error Handling (Knex)\nDESCRIPTION: This snippet demonstrates how to use explicit transaction management with async code and error handling in Knex. It wraps the transaction in a try-catch block to handle rollbacks. The `trx` parameter is the transaction object.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/faq/recipes.md#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\ntry {\n  await knex.transaction((trx) => {\n    async function stuff() {\n      trx.rollback(new Error('always explicit rollback this time'));\n    }\n    stuff();\n  });\n  // transaction was committed\n} catch (err) {\n  // transaction was rolled back\n}\n```\n\n----------------------------------------\n\nTITLE: Knex.js Transaction Example\nDESCRIPTION: Demonstrates how to use Knex.js transactions to ensure atomicity of database operations. It inserts a new book and then calls an external method within the transaction, committing or rolling back based on the outcome.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_50\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst Promise = require('bluebird');\nknex\n  .transaction(function (trx) {\n    knex('books')\n      .transacting(trx)\n      .insert({ name: 'Old Books' })\n      .then(function (resp) {\n        const id = resp[0];\n        return someExternalMethod(id, trx);\n      })\n      .then(trx.commit)\n      .catch(trx.rollback);\n  })\n  .then(function (resp) {\n    console.log('Transaction complete.');\n  })\n  .catch(function (err) {\n    console.error(err);\n  });\n```\n\n----------------------------------------\n\nTITLE: Raw Query with Named Bindings (Knex.js)\nDESCRIPTION: This code shows how to use raw queries with named bindings in Knex.js.  It uses named placeholders (e.g., `:name:`) for identifiers and values, providing a more readable and maintainable way to construct raw SQL queries with dynamic values.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/raw.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst raw =\n  ':name: = :thisGuy or :name: = :otherGuy or :name: = :undefinedBinding';\n\nknex('users').where(\n  knex.raw(raw, {\n    name: 'users.name',\n    thisGuy: 'Bob',\n    otherGuy: 'Jay',\n    undefinedBinding: undefined,\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Batch Insert with Knex.js\nDESCRIPTION: This code demonstrates how to use the `batchInsert` utility provided by Knex.js for inserting multiple rows into a table efficiently. It also shows how to use transactions and return inserted IDs. The `chunkSize` parameter controls the number of rows inserted in each batch, defaulting to 1000.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/utility.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst rows = [\n  {\n    /*...*/\n  },\n  {\n    /*...*/\n  },\n];\nconst chunkSize = 30;\nknex\n  .batchInsert('TableName', rows, chunkSize)\n  .returning('id')\n  .then(function (ids) {\n    /*...*/\n  })\n  .catch(function (error) {\n    /*...*/\n  });\n\nknex\n  .transaction(function (tr) {\n    return knex.batchInsert('TableName', rows, chunkSize).transacting(tr);\n  })\n  .then(function () {\n    /*...*/\n  })\n  .catch(function (error) {\n    /*...*/\n  });\n```\n\n----------------------------------------\n\nTITLE: Using knex.ref for Column and Table References in Knex.js\nDESCRIPTION: This example demonstrates how to use `knex.ref` to refer to table and column names in a Knex.js query.  It includes the use of `withSchema` to specify the schema and `as` to alias a column.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/ref.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nknex(knex.ref('Users').withSchema('TenantId'))\n  .where(knex.ref('Id'), 1)\n  .orWhere(knex.ref('Name'), 'Admin')\n  .select(['Id', knex.ref('Name').as('Username')]);\n```\n\n----------------------------------------\n\nTITLE: Knex Transaction with Async/Await (TypeScript)\nDESCRIPTION: This TypeScript example demonstrates using `knex.transaction` with `async/await`. It inserts a catalogue and then inserts books associated with that catalogue. The `await` keyword is used to ensure that each operation completes before the next one is executed. If an error occurs, the catch block handles the rollback.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/transactions.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntry {\n  await knex.transaction(async (trx) => {\n    const books = [\n      { title: 'Canterbury Tales' },\n      { title: 'Moby Dick' },\n      { title: 'Hamlet' },\n    ];\n\n    const ids = await trx('catalogues').insert(\n      {\n        name: 'Old Books',\n      },\n      'id'\n    );\n\n    books.forEach((book) => (book.catalogue_id = ids[0]));\n    const inserts = await trx('books').insert(books);\n\n    console.log(inserts.length + ' new books saved.');\n  });\n} catch (error) {\n  // If we get here, that means that neither the 'Old Books' catalogues insert,\n  // nor any of the books inserts will have taken place.\n  console.error(error);\n}\n```\n\n----------------------------------------\n\nTITLE: Knex Usage with TypeScript\nDESCRIPTION: Demonstrates how to use Knex with TypeScript for better autocompletion support.  It showcases defining an interface for the database row and using it as a type parameter for the knex function.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface User {\n  id: number;\n  name: string;\n  age: number;\n}\n\nknex('users').where('id').first(); // Resolves to any\n\nknex<User>('users') // User is the type of row in database\n  .where('id', 1) // Your IDE will be able to help with the completion of id\n  .first(); // Resolves to User | undefined\n```\n\n----------------------------------------\n\nTITLE: Creating a Materialized View with Knex.js\nDESCRIPTION: This code demonstrates how to create a materialized view using Knex.js with the `withMaterialized` function. It shows three variations: using a raw query, using a raw query with specified columns, and using a callback function to define the view's query. Materialized views can improve query performance by pre-computing and storing query results.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nknex\n  .withMaterialized(\n    'with_alias',\n    knex.raw('select * from \"books\" where \"author\" = ?', 'Test')\n  )\n  .select('*')\n  .from('with_alias');\n\nknex\n  .withMaterialized(\n    'with_alias',\n    ['title'],\n    knex.raw('select \"title\" from \"books\" where \"author\" = ?', 'Test')\n  )\n  .select('*')\n  .from('with_alias');\n\nknex\n  .withMaterialized('with_alias', (qb) => {\n    qb.select('*').from('books').where('author', 'Test');\n  })\n  .select('*')\n  .from('with_alias');\n```\n\n----------------------------------------\n\nTITLE: Querying with whereIn - Knex.js\nDESCRIPTION: Demonstrates using `whereIn` to filter results based on an array of values. The first example filters users where 'id' is in [1, 2, 3] or [4, 5, 6]. The second example filters based on a subquery.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_126\n\nLANGUAGE: javascript\nCODE:\n```\nknex\n  .select('name')\n  .from('users')\n  .whereIn('id', [1, 2, 3])\n  .orWhereIn('id', [4, 5, 6]);\n\nknex\n  .select('name')\n  .from('users')\n  .whereIn('account_id', function () {\n    this.select('id').from('accounts');\n  });\n\nconst subquery = knex.select('id').from('accounts');\n\nknex.select('name').from('users').whereIn('account_id', subquery);\n\nknex\n  .select('name')\n  .from('users')\n  .whereIn(\n    ['account_id', 'email'],\n    [\n      [3, 'test3@example.com'],\n      [4, 'test4@example.com'],\n    ]\n  );\n\nknex\n  .select('name')\n  .from('users')\n  .whereIn(\n    ['account_id', 'email'],\n    knex.select('id', 'email').from('accounts')\n  );\n```\n\n----------------------------------------\n\nTITLE: Creating Table Check Constraint in Knex.js\nDESCRIPTION: Shows how to define a check constraint on a table using Knex.js, enforcing a condition between two columns ('price' must be greater than or equal to 'price_min').\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/schema-builder.md#_snippet_51\n\nLANGUAGE: js\nCODE:\n```\nknex.schema.createTable('product', function (table) {\n  table.integer('price_min');\n  table.integer('price');\n  table.check('?? >= ??', ['price', 'price_min']);\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Knex with SQLite3 - JavaScript\nDESCRIPTION: This snippet demonstrates how to initialize Knex.js with SQLite3, including setting the client and connection details. It then shows basic database operations like creating tables, inserting data, and querying.\nSOURCE: https://github.com/knex/knex/blob/master/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst knex = require('knex')({\n  client: 'sqlite3',\n  connection: {\n    filename: './data.db',\n  },\n});\n\ntry {\n  // Create a table\n  await knex.schema\n    .createTable('users', (table) => {\n      table.increments('id');\n      table.string('user_name');\n    })\n    // ...and another\n    .createTable('accounts', (table) => {\n      table.increments('id');\n      table.string('account_name');\n      table.integer('user_id').unsigned().references('users.id');\n    });\n\n  // Then query the table...\n  const insertedRows = await knex('users').insert({ user_name: 'Tim' });\n\n  // ...and using the insert id, insert into the other table.\n  await knex('accounts').insert({\n    account_name: 'knex',\n    user_id: insertedRows[0],\n  });\n\n  // Query both of the rows.\n  const selectedRows = await knex('users')\n    .join('accounts', 'users.id', 'accounts.user_id')\n    .select('users.user_name as user', 'accounts.account_name as account');\n\n  // map over the results\n  const enrichedRows = selectedRows.map((row) => ({ ...row, active: true }));\n\n  // Finally, add a catch statement\n} catch (e) {\n  console.error(e);\n}\n```\n\n----------------------------------------\n\nTITLE: Running Latest Migrations\nDESCRIPTION: Runs the latest migrations for the current environment. The `--env` flag or `NODE_ENV` environment variable can be used to specify a different environment (e.g., production).\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/migrations.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ knex migrate:latest\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ knex migrate:latest --env production\n\n# or\n\n$ NODE_ENV=production knex migrate:latest\n```\n\n----------------------------------------\n\nTITLE: Updating Data with Knex.js\nDESCRIPTION: This snippet shows how to update data in a table using Knex.js. It demonstrates updating rows based on a where clause with a hash of properties and with key/value pair. It also shows retrieving updated row details, such as 'id' and 'title', using the returning array.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\nknex('books').where('published_date', '<', 2000).update({\n  status: 'archived',\n  thisKeyIsSkipped: undefined,\n});\n\n// Returns [1] in \"mysql\", \"sqlite\", \"oracle\";\n// [] in \"postgresql\"\n// unless the 'returning' parameter is set.\nknex('books').update('title', 'Slaughterhouse Five');\n\n/** Returns\n * [{\n *   id: 42,\n *   title: \"The Hitchhiker's Guide to the Galaxy\"\n * }] **/\nknex('books').where({ id: 42 }).update(\n  {\n    title: \"The Hitchhiker's Guide to the Galaxy\",\n  },\n  ['id', 'title']\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Union Query with Knex.js\nDESCRIPTION: This code demonstrates how to create a union query using Knex.js with the `union` function. It shows examples using a callback function, an array of queries, and raw statements. The code also shows how to handle orderBy, groupBy, limit, offset or having clauses on the queries within the union.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nknex\n  .select('*')\n  .from('users')\n  .whereNull('last_name')\n  .union(function () {\n    this.select('*').from('users').whereNull('first_name');\n  });\n\nknex\n  .select('*')\n  .from('users')\n  .whereNull('last_name')\n  .union([knex.select('*').from('users').whereNull('first_name')]);\n\nknex\n  .select('*')\n  .from('users')\n  .whereNull('last_name')\n  .union(\n    knex.raw('select * from users where first_name is null'),\n    knex.raw('select * from users where email is null')\n  );\n\nknex('users')\n  .select('id', 'name')\n  .groupBy('id')\n  .union(knex('invitations').select('id', 'name').orderBy('expires_at'));\n\nknex.union([\n  knex('users').select('id', 'name').groupBy('id'),\n  knex('invitations').select('id', 'name').orderBy('expires_at'),\n]);\n```\n\n----------------------------------------\n\nTITLE: Knex Transaction with Async/Await and transacting (TypeScript)\nDESCRIPTION: This TypeScript example demonstrates using `knex.transaction` with `async/await` and the `transacting` method.  It inserts a catalogue and then inserts books associated with that catalogue. The `await` keyword is used to ensure that each operation completes before the next one is executed. If an error occurs, the catch block handles the rollback. The `transacting` method explicitly associates the queries with the transaction.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/transactions.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntry {\n  await knex.transaction(async (trx) => {\n    const books = [\n      { title: 'Canterbury Tales' },\n      { title: 'Moby Dick' },\n      { title: 'Hamlet' },\n    ];\n\n    const ids = await knex('catalogues')\n      .insert(\n        {\n          name: 'Old Books',\n        },\n        'id'\n      )\n      .transacting(trx);\n\n    books.forEach((book) => (book.catalogue_id = ids[0]));\n    await knex('books').insert(books).transacting(trx);\n\n    console.log(inserts.length + ' new books saved.');\n  });\n} catch (error) {\n  console.error(error);\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Knex with PostgreSQL (Connection String)\nDESCRIPTION: This snippet shows how to initialize Knex.js with a PostgreSQL database using a connection string, including an additional option to set the search path.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/index.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst pg = require('knex')({\n  client: 'pg',\n  connection: process.env.PG_CONNECTION_STRING,\n  searchPath: ['knex', 'public'],\n});\n```\n\n----------------------------------------\n\nTITLE: Querying with Object Syntax - Knex.js\nDESCRIPTION: Demonstrates using object syntax to specify multiple conditions in a `where` clause. It selects the 'id' from 'users' where 'first_name' is 'Test' and 'last_name' is 'User'.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_114\n\nLANGUAGE: javascript\nCODE:\n```\nknex('users')\n  .where({\n    first_name: 'Test',\n    last_name: 'User',\n  })\n  .select('id');\n```\n\n----------------------------------------\n\nTITLE: Initializing Knexfile\nDESCRIPTION: Initializes a new knexfile in the current directory, which configures the database connection and other settings. The `-x ts` option creates a knexfile for TypeScript.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/migrations.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ knex init\n\n# or for .ts\n\n$ knex init -x ts\n```\n\n----------------------------------------\n\nTITLE: Knex Insert with Promise Chaining\nDESCRIPTION: This snippet demonstrates how to use Knex.js with Promises for inserting data and handling results. It selects an entry from the 'users' table, then inserts a new entry into the 'accounts' table using the user ID obtained from the first query. It logs the inserted ID and handles errors.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/interfaces.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nknex\n  .select('*')\n  .from('users')\n  .where({ name: 'Tim' })\n  .then(function (rows) {\n    return knex\n      .insert({ user_id: rows[0].id, name: 'Test' }, 'id')\n      .into('accounts');\n  })\n  .then(function (id) {\n    console.log('Inserted Account ' + id);\n  })\n  .catch(function (error) {\n    console.error(error);\n  });\n```\n\n----------------------------------------\n\nTITLE: Creating Column Check Constraint - checkRegex in Knex.js\nDESCRIPTION: Demonstrates how to add a check constraint on a column to ensure that the value matches a specific regular expression, using Knex.js.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/schema-builder.md#_snippet_58\n\nLANGUAGE: js\nCODE:\n```\nknex.schema.createTable('product', function (table) {\n  table.string('phone').checkRegex('[0-9]{8}');\n  // In MSSQL, {8} syntax don't work,\n  // you need to duplicate [0-9].\n  table.string('phone').checkRegex('[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]');\n});\n```\n\n----------------------------------------\n\nTITLE: Querying with Operator - Knex.js\nDESCRIPTION: Explains how to use an operator (like 'like') in a `where` clause for pattern matching.  This example selects users where 'columnName' contains 'rowlikeme'.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_118\n\nLANGUAGE: javascript\nCODE:\n```\nknex('users').where('columnName', 'like', '%rowlikeme%');\n```\n\n----------------------------------------\n\nTITLE: Merging Conflicts on Insert with Knex.js\nDESCRIPTION: This snippet demonstrates how to use the `.onConflict().merge()` methods in Knex.js to handle insert conflicts in PostgreSQL, MySQL and SQLite. When a conflict occurs, the existing row will be updated (upserted) with the new data from the insert.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nknex('tableName')\n  .insert({\n    email: 'ignore@example.com',\n    name: 'John Doe',\n  })\n  .onConflict('email')\n  .merge();\n```\n\n----------------------------------------\n\nTITLE: Dropping Table if Exists with dropTableIfExists - Knex.js\nDESCRIPTION: Drops a table conditionally if the table exists, specified by the table name. It takes the table name as a string. This prevents errors if the table does not exist.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/schema-builder.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nknex.schema.dropTableIfExists('users');\n```\n\n----------------------------------------\n\nTITLE: Inner Joining Tables - Knex.js\nDESCRIPTION: Shows how to perform an inner join between tables using `innerJoin`. Includes examples using column names and a function to define the join condition with `on` and `orOn`.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_142\n\nLANGUAGE: javascript\nCODE:\n```\nknex.from('users').innerJoin('accounts', 'users.id', 'accounts.user_id');\n\nknex.table('users').innerJoin('accounts', 'users.id', '=', 'accounts.user_id');\n\nknex('users').innerJoin('accounts', function () {\n  this.on('accounts.id', '=', 'users.account_id').orOn(\n    'accounts.owner_id',\n    '=',\n    'users.id'\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Table Existence with hasTable - Knex.js\nDESCRIPTION: Checks for a table's existence by its name, resolving with a boolean value to signal if the table exists. It returns a promise that resolves to true if the table exists, and false otherwise.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/schema-builder.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nknex.schema.hasTable('users').then(function (exists) {\n  if (!exists) {\n    return knex.schema.createTable('users', function (t) {\n      t.increments('id').primary();\n      t.string('first_name', 100);\n      t.string('last_name', 100);\n      t.text('bio');\n    });\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Extracting JSON Data with Knex.js\nDESCRIPTION: This code demonstrates how to extract data from a JSON column using Knex.js with the `jsonExtract` function.  It shows examples with and without an alias, and with a single value flag. It also shows how to extract multiple values at once. This function requires a column name and JsonPath.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nknex('accounts').jsonExtract('json_col', '$.name');\n\nknex('accounts').jsonExtract('json_col', '$.name', 'accountName');\n\nknex('accounts').jsonExtract('json_col', '$.name', 'accountName', true);\n\nknex('accounts').jsonExtract([\n  ['json_col', '$.name', 'accountName'],\n  ['json_col', '$.lastName', 'accountLastName'],\n]);\n```\n\n----------------------------------------\n\nTITLE: Get Current Timestamp with Knex.js\nDESCRIPTION: This snippet shows how to use `knex.fn.now(precision)` to retrieve the current timestamp with a specified precision and use it as a default value for a datetime column in a table. The precision parameter is optional.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/utility.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\ntable.datetime('some_time', { precision: 6 }).defaultTo(knex.fn.now(6));\n```\n\n----------------------------------------\n\nTITLE: Running and Undoing Specific Migrations\nDESCRIPTION: Runs the next migration or specified migration, and undoes the last migration or specified migration.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/migrations.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ knex migrate:up\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ knex migrate:up 001_migration_name.js\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ knex migrate:down\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ knex migrate:down 001_migration_name.js\n```\n\n----------------------------------------\n\nTITLE: Knex Transaction without Handler (TypeScript)\nDESCRIPTION: This TypeScript example demonstrates creating a transaction without a handler function, allowing for executing statements later.  It manually commits or rolls back the transaction using `trx.commit` or `trx.rollback`. The `await knex.transaction()` initiates the transaction.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/transactions.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Using trx as a transaction object:\nconst trx = await knex.transaction();\n\nconst books = [\n  { title: 'Canterbury Tales' },\n  { title: 'Moby Dick' },\n  { title: 'Hamlet' },\n];\n\ntrx('catalogues')\n  .insert({ name: 'Old Books' }, 'id')\n  .then(function (ids) {\n    books.forEach((book) => (book.catalogue_id = ids[0]));\n    return trx('books').insert(books);\n  })\n  .then(trx.commit)\n  .catch(trx.rollback);\n```\n\n----------------------------------------\n\nTITLE: Executing a Full Raw Query (Knex.js)\nDESCRIPTION: This example demonstrates how to use `knex.raw` to build and execute a complete SQL query. It utilizes the connection pool and provides a standardized interface for handling the query execution and results.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/raw.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nknex.raw('select * from users where id = ?', [1]).then(function (resp) {\n  /*...*/\n});\n```\n\n----------------------------------------\n\nTITLE: Raw Query with Identifier Binding (Knex.js)\nDESCRIPTION: This example illustrates how to use raw queries with identifier bindings in Knex.js.  The `??` placeholders ensure that identifiers (e.g., column names) are properly escaped, preventing potential injection vulnerabilities.  It filters the 'users' table based on a dynamically specified column.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/raw.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nknex('users').where(knex.raw('?? = ?', ['user.name', 1]));\n```\n\n----------------------------------------\n\nTITLE: Creating Table with createTable - Knex.js\nDESCRIPTION: Creates a new table on the database, using a callback function to modify the table's structure. It takes the table name and a callback function as arguments. The callback function uses schema-building commands to define columns, constraints, etc.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/schema-builder.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nknex.schema.createTable('users', function (table) {\n  table.increments();\n  table.string('name');\n  table.timestamps();\n});\n```\n\n----------------------------------------\n\nTITLE: Selecting the First Record in Knex.js\nDESCRIPTION: Retrieves and resolves with the first record from the query result. Returns `undefined` if no rows match the query. Requires Knex.js library and a database connection.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_100\n\nLANGUAGE: javascript\nCODE:\n```\nknex\n  .table('users')\n  .first('id', 'name')\n  .then(function (row) {\n    console.log(row);\n  });\n```\n\n----------------------------------------\n\nTITLE: Querying with whereBetween - Knex.js\nDESCRIPTION: Demonstrates using `whereBetween` to filter results based on a range of values. Filters users where 'votes' is between 1 and 100 (inclusive).\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_132\n\nLANGUAGE: javascript\nCODE:\n```\nknex('users').whereBetween('votes', [1, 100]);\n```\n\n----------------------------------------\n\nTITLE: Joining Tables - Knex.js\nDESCRIPTION: Demonstrates different ways to join tables using the `join` method. Includes examples using column names, grouped joins with `on` and `orOn`, nested joins and using raw values.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_141\n\nLANGUAGE: javascript\nCODE:\n```\nknex('users')\n  .join('contacts', 'users.id', '=', 'contacts.user_id')\n  .select('users.id', 'contacts.phone');\n\nknex('users')\n  .join('contacts', 'users.id', 'contacts.user_id')\n  .select('users.id', 'contacts.phone');\n\nknex\n  .select('*')\n  .from('users')\n  .join('accounts', function () {\n    this.on('accounts.id', '=', 'users.account_id').orOn(\n      'accounts.owner_id',\n      '=',\n      'users.id'\n    );\n  });\n\nknex\n  .select('*')\n  .from('users')\n  .join('accounts', function () {\n    this.on(function () {\n      this.on('accounts.id', '=', 'users.account_id');\n      this.orOn('accounts.owner_id', '=', 'users.id');\n    });\n  });\n\nknex\n  .select('*')\n  .from('users')\n  .join('accounts', { 'accounts.id': 'users.account_id' });\n\nknex\n  .select('*')\n  .from('users')\n  .join('accounts', 'accounts.type', knex.raw('?', ['admin']));\n```\n\n----------------------------------------\n\nTITLE: Adding an OrderBy Clause with Knex.js\nDESCRIPTION: This code snippet demonstrates how to add an order by clause to the query using Knex.js, sorting the results based on the specified columns and direction. It shows ordering by a single column and multiple columns. Dependencies: Knex.js\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_170\n\nLANGUAGE: javascript\nCODE:\n```\nknex('users').orderBy('email');\n\nknex('users').orderBy('name', 'desc');\n\nknex('users').orderBy('name', 'desc', 'first');\n\nknex('users').orderBy(['email', { column: 'age', order: 'desc' }]);\n\nknex('users').orderBy([{ column: 'email' }, { column: 'age', order: 'desc' }]);\n\nknex('users').orderBy([\n  { column: 'email' },\n  { column: 'age', order: 'desc', nulls: 'last' },\n]);\n```\n\n----------------------------------------\n\nTITLE: Modifying Table with table - Knex.js\nDESCRIPTION: Chooses a database table and modifies it using schema building functions inside a callback. It takes the table name and a callback function as arguments. The callback uses schema building functions to alter the table structure.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/schema-builder.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nknex.schema.table('users', function (table) {\n  table.dropColumn('name');\n  table.string('first_name');\n  table.string('last_name');\n});\n```\n\n----------------------------------------\n\nTITLE: Closing Knex Instance to Avoid Node Process Hanging\nDESCRIPTION: This snippet shows how to properly close a Knex instance after execution to prevent the Node.js process from hanging due to open database connections. The `knex.destroy()` method is called in a `finally` block to ensure it's always executed.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/faq/recipes.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nasync function migrate() {\n  try {\n    await knex.migrate.latest({\n      /**config**/\n    });\n  } catch (e) {\n    process.exit(1);\n  } finally {\n    try {\n      knex.destroy();\n    } catch (e) {\n      // ignore\n    }\n  }\n}\n\nmigrate();\n```\n\n----------------------------------------\n\nTITLE: Querying with whereNull - Knex.js\nDESCRIPTION: Demonstrates using `whereNull` to filter results where a specific column is null. Filters users where 'updated_at' is null.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_128\n\nLANGUAGE: javascript\nCODE:\n```\nknex('users').whereNull('updated_at');\n```\n\n----------------------------------------\n\nTITLE: Querying with Key-Value Pair - Knex.js\nDESCRIPTION: Shows how to use a key-value pair in a `where` clause to filter results. It selects from the 'users' table where 'id' is equal to 1.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_115\n\nLANGUAGE: javascript\nCODE:\n```\nknex('users').where('id', 1);\n```\n\n----------------------------------------\n\nTITLE: Knex Column (JavaScript)\nDESCRIPTION: Demonstrates how to use the `.column()` method to specify the columns to be selected. It shows the different ways of specifying columns - array, object, and list of column names.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nknex.column('title', 'author', 'year').select().from('books');\n\nknex.column(['title', 'author', 'year']).select().from('books');\n\nknex.column('title', { by: 'author' }, 'year').select().from('books');\n```\n\n----------------------------------------\n\nTITLE: Performing Full Outer Join with Knex.js\nDESCRIPTION: This code snippet demonstrates how to perform a full outer join using Knex.js. It shows two ways to specify the join condition: using column names directly and using a function for more complex conditions. Dependencies: Knex.js\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_147\n\nLANGUAGE: javascript\nCODE:\n```\nknex\n  .select('*')\n  .from('users')\n  .fullOuterJoin('accounts', 'users.id', 'accounts.user_id');\n\nknex\n  .select('*')\n  .from('users')\n  .fullOuterJoin('accounts', function () {\n    this.on('accounts.id', '=', 'users.account_id').orOn(\n      'accounts.owner_id',\n      '=',\n      'users.id'\n    );\n  });\n```\n\n----------------------------------------\n\nTITLE: Ignoring Conflicts on Insert with Knex.js\nDESCRIPTION: This snippet demonstrates how to use the `.onConflict().ignore()` methods in Knex.js to handle insert conflicts in PostgreSQL, MySQL and SQLite. When a conflict occurs due to a unique constraint violation, the insert operation will be silently ignored.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nknex('tableName')\n  .insert({\n    email: 'ignore@example.com',\n    name: 'John Doe',\n  })\n  .onConflict('email')\n  .ignore();\n```\n\n----------------------------------------\n\nTITLE: Querying with whereNotIn - Knex.js\nDESCRIPTION: Shows how to use `whereNotIn` to exclude results based on an array of values.  First example filters users where 'id' is not in [1, 2, 3]. The second combines like with whereNotIn.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_127\n\nLANGUAGE: javascript\nCODE:\n```\nknex('users').whereNotIn('id', [1, 2, 3]);\n\nknex('users').where('name', 'like', '%Test%').orWhereNotIn('id', [1, 2, 3]);\n```\n\n----------------------------------------\n\nTITLE: Knex Query with Promises\nDESCRIPTION: This snippet demonstrates how to use Knex.js with Promises to chain database queries. It selects data from the 'users' table, then uses the results to query the 'nicknames' table, and finally logs the results. It includes error handling using .catch(). Requires the 'knex' library and the underscore library ('_').\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/interfaces.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nknex\n  .select('name')\n  .from('users')\n  .where('id', '>', 20)\n  .andWhere('id', '<', 200)\n  .limit(10)\n  .offset(x)\n  .then(function (rows) {\n    return _.pluck(rows, 'name');\n  })\n  .then(function (names) {\n    return knex.select('id').from('nicknames').whereIn('nickname', names);\n  })\n  .then(function (rows) {\n    console.log(rows);\n  })\n  .catch(function (error) {\n    console.error(error);\n  });\n```\n\n----------------------------------------\n\nTITLE: Querying with whereRaw - Knex.js\nDESCRIPTION: Illustrates using `whereRaw` to specify a raw SQL expression in the `where` clause.  Filters users where 'id' equals 1.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_134\n\nLANGUAGE: javascript\nCODE:\n```\nknex('users').whereRaw('id = ?', [1]);\n```\n\n----------------------------------------\n\nTITLE: Merging Conflicts with Batch Inserts in Knex.js\nDESCRIPTION: This snippet demonstrates how to use the `.onConflict().merge()` methods in Knex.js with batch inserts to handle insert conflicts.  When a conflict occurs, the existing row will be updated with the new data from the insert.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nknex('tableName')\n  .insert([\n    { email: 'john@example.com', name: 'John Doe' },\n    { email: 'jane@example.com', name: 'Jane Doe' },\n    { email: 'alex@example.com', name: 'Alex Doe' },\n  ])\n  .onConflict('email')\n  .merge();\n```\n\n----------------------------------------\n\nTITLE: Modifying Query with Reusable Snippets in Knex.js\nDESCRIPTION: Allows encapsulating and re-using query snippets as functions. The callback function receives the query builder as its first argument. Requires Knex.js library and a database connection.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_107\n\nLANGUAGE: javascript\nCODE:\n```\nconst withUserName = function (queryBuilder, foreignKey) {\n  queryBuilder\n    .leftJoin('users', foreignKey, 'users.id')\n    .select('users.user_name');\n};\nknex\n  .table('articles')\n  .select('title', 'body')\n  .modify(withUserName, 'articles_user.id')\n  .then(function (article) {\n    console.log(article.user_name);\n  });\n```\n\n----------------------------------------\n\nTITLE: Migration File Structure for ESM in Knex.js (TypeScript)\nDESCRIPTION: This TypeScript code illustrates the structure of a migration file when using ECMAScript Modules (ESM) with Knex.js. The migration file must export two named functions: `up` and `down`. The `up` function is executed when applying the migration, and the `down` function is executed when rolling back the migration. Both functions accept the Knex instance as an argument.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/migrations.md#_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\n// file: migration.js\n/**\n * Same as the CommonJS version, the miration file should export\n * \"up\" and \"down\" named functions\n */\nexport function up(knex) {\n  // ... migration logic here\n}\nexport function down(knex) {\n  // ... migration logic here\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Limit to Query with Knex.js\nDESCRIPTION: This code shows how to add a limit clause to a query using Knex.js's `limit` function. It demonstrates setting the limit with an offset, and also skipping binding of the limit value.  Skipping binding is useful for some databases that do not allow prepared values for limit.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nknex.select('*').from('users').limit(10).offset(30);\n\nknex.select('*').from('users').limit(10).offset(30).toSQL().sql;\n\n// Limit value isn't a prepared value.\nknex\n  .select('*')\n  .from('users')\n  .limit(10, { skipBinding: true })\n  .offset(30)\n  .toSQL().sql;\n```\n\n----------------------------------------\n\nTITLE: Knex Select (JavaScript)\nDESCRIPTION: Shows how to use the `.select()` method to select specific columns from a table.  Demonstrates selecting specific columns and all columns.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nknex.select('title', 'author', 'year').from('books');\n\nknex.select().table('books');\n```\n\n----------------------------------------\n\nTITLE: Querying with whereLike - Knex.js\nDESCRIPTION: Demonstrates using `whereLike` for case-sensitive substring comparison. The first example filters users where 'email' contains 'mail'.  The second example combines andWhereLike and orWhereLike\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_135\n\nLANGUAGE: javascript\nCODE:\n```\nknex('users').whereLike('email', '%mail%');\n\nknex('users')\n  .whereLike('email', '%mail%')\n  .andWhereLike('email', '%.com')\n  .orWhereLike('email', '%name%');\n```\n\n----------------------------------------\n\nTITLE: Creating an Index with Knex\nDESCRIPTION: This snippet shows how to create an index on a table using Knex.js. It creates an index named 'idx_name_last_name' on the 'users' table for the 'name' and 'last_name' columns.  It specifies index options such as 'indexType' as 'FULLTEXT', 'storageEngineIndexType' as 'hash' and a 'predicate' to create a partial index using knex.whereNotNull('email').\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/schema-builder.md#_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\nknex.table('users', function (table) {\n  table.index(['name', 'last_name'], 'idx_name_last_name', {\n    indexType: 'FULLTEXT',\n    storageEngineIndexType: 'hash',\n    predicate: knex.whereNotNull('email'),\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Deleting Rows with Knex.js\nDESCRIPTION: Deletes rows from the 'accounts' table where the 'activated' column is false. Returns the number of affected rows. This is a basic example of deleting records based on a condition.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_42\n\nLANGUAGE: JavaScript\nCODE:\n```\nknex('accounts').where('activated', false).del();\n```\n\n----------------------------------------\n\nTITLE: Configuring Knex for PostgreSQL-compatible database\nDESCRIPTION: This snippet demonstrates how to configure Knex to connect to a PostgreSQL-compatible database (like CockroachDB) by specifying the PostgreSQL version the database is compatible with. The `version` option is used to ensure protocol compatibility. It depends on the `knex` package.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/faq/recipes.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst knex = require('knex')({\n  client: 'pg',\n  version: '7.2',\n  connection: {\n    host: '127.0.0.1',\n    user: 'your_database_user',\n    password: 'your_database_password',\n    database: 'myapp_test',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Querying with Subquery - Knex.js\nDESCRIPTION: Shows how to use a subquery within a `where` clause, filtering accounts based on a subquery that selects user IDs. Requires a pre-defined knex instance.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_119\n\nLANGUAGE: javascript\nCODE:\n```\nknex('users').where('votes', '>', 100);\n\nconst subquery = knex('users')\n  .where('votes', '>', 100)\n  .andWhere('status', 'active')\n  .orWhere('name', 'John')\n  .select('id');\n\nknex('accounts').where('id', 'in', subquery);\n```\n\n----------------------------------------\n\nTITLE: Initializing Knex with MySQL\nDESCRIPTION: This snippet demonstrates how to initialize Knex.js with a MySQL database connection, specifying the client, host, port, user, password, and database name.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/index.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst knex = require('knex')({\n  client: 'mysql',\n  connection: {\n    host: '127.0.0.1',\n    port: 3306,\n    user: 'your_database_user',\n    password: 'your_database_password',\n    database: 'myapp_test',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Left Joining Tables - Knex.js\nDESCRIPTION: Demonstrates how to perform a left join between tables using `leftJoin`. Includes examples using column names and a function to define the join condition with `on` and `orOn`.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_143\n\nLANGUAGE: javascript\nCODE:\n```\nknex\n  .select('*')\n  .from('users')\n  .leftJoin('accounts', 'users.id', 'accounts.user_id');\n\nknex\n  .select('*')\n  .from('users')\n  .leftJoin('accounts', function () {\n    this.on('accounts.id', '=', 'users.account_id').orOn(\n      'accounts.owner_id',\n      '=',\n      'users.id'\n    );\n  });\n```\n\n----------------------------------------\n\nTITLE: Querying with whereILike - Knex.js\nDESCRIPTION: Shows how to use `whereILike` for case-insensitive substring comparison. The first example filters users where 'email' contains 'mail' (case-insensitive). The second combines andWhereILike and orWhereILike.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_136\n\nLANGUAGE: javascript\nCODE:\n```\nknex('users').whereILike('email', '%mail%');\n\nknex('users')\n  .whereILike('email', '%MAIL%')\n  .andWhereILike('email', '%.COM')\n  .orWhereILike('email', '%NAME%');\n```\n\n----------------------------------------\n\nTITLE: Initializing Knex with SQLite3 (In-Memory)\nDESCRIPTION: This snippet shows how to initialize Knex.js with an in-memory SQLite3 database, using ':memory:' as the filename.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/index.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst knex = require('knex')({\n  client: 'sqlite3', // or 'better-sqlite3'\n  connection: {\n    filename: ':memory:',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Raw Query with Array Binding (Knex.js)\nDESCRIPTION: This code shows how to use raw queries with array bindings in Knex.js. Since there is no unified array binding syntax, `?` placeholders are added directly into the query string. It constructs an `IN` clause dynamically to filter by multiple values.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/raw.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst myArray = [1, 2, 3];\nknex.raw(\n  'select * from users where id in (' + myArray.map((_) => '?').join(',') + ')',\n  [...myArray]\n);\n```\n\nLANGUAGE: sql\nCODE:\n```\nselect * from users where id in (?, ?, ?) /* with bindings [1,2,3] */\n```\n\n----------------------------------------\n\nTITLE: Querying with Functions - Knex.js\nDESCRIPTION: Illustrates using a function to create a more complex `where` clause with nested `whereIn` and `whereNotIn` conditions. It also demonstrates using `andWhere`.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_116\n\nLANGUAGE: javascript\nCODE:\n```\nknex('users')\n  .where((builder) =>\n    builder.whereIn('id', [1, 11, 15]).whereNotIn('id', [17, 19])\n  )\n  .andWhere(function () {\n    this.where('id', '>', 10);\n  });\n```\n\n----------------------------------------\n\nTITLE: Knex From (JavaScript)\nDESCRIPTION: Demonstrates how to use the `.from()` method to specify the table to query. It shows a simple example selecting all columns from a table.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nknex.select('*').from('users');\n```\n\n----------------------------------------\n\nTITLE: Querying with whereJsonPath - Knex.js\nDESCRIPTION: Demonstrates using `whereJsonPath` for comparing a value within a JSON column specified by a JSON path. The first example filters users where the 'age' in 'json_col' is greater than 18. The second example filters users where the 'name' in 'json_col' is equal to 'username'.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_138\n\nLANGUAGE: javascript\nCODE:\n```\nknex('users').whereJsonPath('json_col', '$.age', '>', 18);\n\nknex('users').whereJsonPath('json_col', '$.name', '=', 'username');\n```\n\n----------------------------------------\n\nTITLE: Raw Query with Parameter Binding (Knex.js)\nDESCRIPTION: This code demonstrates how to use raw queries with positional parameter bindings in Knex.js to prevent SQL injection. It selects a count of users and their status, filters by a raw condition, and groups the results.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/raw.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nknex('users')\n  .select(knex.raw('count(*) as user_count, status'))\n  .where(knex.raw(1))\n  .orWhere(knex.raw('status <> ?', [1]))\n  .groupBy('status');\n```\n\n----------------------------------------\n\nTITLE: Configuring Knex.js to Use NULL as Default\nDESCRIPTION: This snippet shows how to configure Knex.js to use NULL as the default value for undefined keys during multi-row inserts instead of the database's default value. The `useNullAsDefault` configuration parameter needs to be set in the Knex configuration object.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nconst knex = require('knex')({\n  client: 'mysql',\n  connection: {\n    host: '127.0.0.1',\n    port: 3306,\n    user: 'your_database_user',\n    password: 'your_database_password',\n    database: 'myapp_test',\n  },\n  useNullAsDefault: true,\n});\n\nknex('coords').insert([{ x: 20 }, { y: 30 }, { x: 10, y: 20 }]);\n```\n\n----------------------------------------\n\nTITLE: Executing Raw SQL Queries with raw - Knex.js\nDESCRIPTION: Run an arbitrary sql query in the schema builder chain. This can be used to execute database-specific commands or functions. It takes a raw SQL string as an argument.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/schema-builder.md#_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nknex.schema.raw(\"SET sql_mode='TRADITIONAL'\",[]).table('users', function (table) {\n  table.dropColumn('name');\n  table.string('first_name');\n  table.string('last_name');\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Knexfile Configuration\nDESCRIPTION: A basic knexfile configuration showing how to define the client and connection details. The connection can be defined with DATABASE_URL environment variable or user and database.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/migrations.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  client: 'pg',\n  connection: process.env.DATABASE_URL || {\n    user: 'me',\n    database: 'my_app',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Raw Query with Single Binding (Knex.js)\nDESCRIPTION: This example demonstrates how to use raw queries with a single binding in Knex.js. It uses the `?` placeholder for value binding, providing a concise way to construct raw SQL queries with a single dynamic value. It filters the 'users' table based on different criteria.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/raw.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nknex('users')\n  .where(knex.raw('LOWER(\"login\") = ?', 'knex'))\n  .orWhere(knex.raw('accesslevel = ?', 1))\n  .orWhere(knex.raw('updtime = ?', '01-01-2016'));\n```\n\n----------------------------------------\n\nTITLE: Creating a Seed File\nDESCRIPTION: Creates a new seed file with the specified name.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/migrations.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ knex seed:make seed_name\n```\n\n----------------------------------------\n\nTITLE: Knex From with TypeScript\nDESCRIPTION: Demonstrates how to use the `.from()` method with TypeScript to specify the table and its row type. This improves type safety and autocompletion.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nknex.select('id').from('users'); // Resolves to any[]\n\nknex.select('id').from<User>('users'); // Results to Pick<User, \"id\">[]\n```\n\n----------------------------------------\n\nTITLE: Specifying Schema with withSchema - Knex.js\nDESCRIPTION: Specifies the schema to be used when using schema-building commands.  It takes the schema name as a string. It is used to ensure database operations are performed within the intended schema.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/schema-builder.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nknex.schema.withSchema('public').createTable('users', function (table) {\n  table.increments();\n});\n```\n\n----------------------------------------\n\nTITLE: Inserting Multiple Rows with Returning IDs in Knex.js\nDESCRIPTION: Inserts multiple rows into the 'books' table and returns the 'id' of the newly inserted rows. The result array structure differs depending on the database being used (MySQL, SQLite, PostgreSQL).\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_47\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Returns [{ id: 2 } ] in \"mysql\", \"sqlite\";\n// [ { id: 2 }, { id: 3 } ] in \"postgresql\"\nknex('books')\n  .returning('id')\n  .insert([{ title: 'Great Gatsby' }, { title: 'Fahrenheit 451' }]);\n```\n\n----------------------------------------\n\nTITLE: Knex Query with Callbacks\nDESCRIPTION: This snippet demonstrates how to use Knex.js with callbacks to execute database queries.  It selects data from the 'users' table and then uses the results to query the 'nicknames' table. It uses the `asCallback` method and includes error handling.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/interfaces.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nknex\n  .select('name')\n  .from('users')\n  .where('id', '>', 20)\n  .andWhere('id', '<', 200)\n  .limit(10)\n  .offset(x)\n  .asCallback(function (err, rows) {\n    if (err) return console.error(err);\n    knex\n      .select('id')\n      .from('nicknames')\n      .whereIn('nickname', _.pluck(rows, 'name'))\n      .asCallback(function (err, rows) {\n        if (err) return console.error(err);\n        console.log(rows);\n      });\n  });\n```\n\n----------------------------------------\n\nTITLE: Knex Transaction Completion Check (TypeScript)\nDESCRIPTION: This TypeScript example demonstrates how to use the `isCompleted` method to check if a transaction has been committed or rolled back.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/transactions.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst trx = await knex.transaction();\ntrx.isCompleted(); // false\nawait trx.commit();\ntrx.isCompleted(); // true\n\nconst trx2 = knex.transactionProvider();\nawait trx2.rollback();\ntrx2.isCompleted(); // true\n```\n\n----------------------------------------\n\nTITLE: Counting Rows with Knex.js\nDESCRIPTION: Counts the number of rows in the 'users' table where the 'active' column is present. This basic example demonstrates counting rows based on a specific column.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_57\n\nLANGUAGE: JavaScript\nCODE:\n```\nknex('users').count('active');\n```\n\n----------------------------------------\n\nTITLE: Initializing Knex with Custom Log Functions\nDESCRIPTION: This snippet shows how to overwrite the default logging behavior of Knex. It provides alternative functions for warn, error, deprecate, and debug messages. This allows integrating Knex logging with a custom logging system.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/index.md#_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nconst knex = require('knex')({\n  log: {\n    warn(message) {},\n    error(message) {},\n    deprecate(message) {},\n    debug(message) {},\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Merging Conflicts with Specific Columns in Knex.js\nDESCRIPTION: This snippet shows how to specify a subset of columns to merge during an upsert operation when a conflict occurs. This allows for finer-grained control over which columns are updated when a row already exists.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nconst timestamp = Date.now();\nknex('tableName')\n  .insert({\n    email: 'ignore@example.com',\n    name: 'John Doe',\n    created_at: timestamp,\n    updated_at: timestamp,\n  })\n  .onConflict('email')\n  .merge(['email', 'name', 'updated_at']);\n```\n\n----------------------------------------\n\nTITLE: Querying with whereExists - Knex.js\nDESCRIPTION: Illustrates using `whereExists` to filter results based on the existence of related records. The first example uses a callback, the second uses a builder.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_130\n\nLANGUAGE: javascript\nCODE:\n```\nknex('users').whereExists(function () {\n  this.select('*').from('accounts').whereRaw('users.account_id = accounts.id');\n});\n\nknex('users').whereExists(\n  knex.select('*').from('accounts').whereRaw('users.account_id = accounts.id')\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Tables with Increments (Primary Key)\nDESCRIPTION: Demonstrates how to create tables with an auto-incrementing primary key using the `increments()` method in Knex. The first example creates a simple table with `userId` as the primary key. The second shows creating a table with composite primary key ('userId', 'name') where `increments` method doesn't generate primary key.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/schema-builder.md#_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\n// create table 'users'\n// with a primary key using 'increments()'\nknex.schema.createTable('users', function (table) {\n  table.increments('userId');\n  table.string('name');\n});\n\n// create table 'users'\n// with a composite primary key ('userId', 'name').\n// increments doesn't generate primary key.\nknex.schema.createTable('users', function (table) {\n  table.primary(['userId', 'name']);\n  table.increments('userId');\n  table.string('name');\n});\n\n// reference the 'users' primary key in new table 'posts'\nknex.schema.createTable('posts', function (table) {\n  table.integer('author').unsigned().notNullable();\n  table.string('title', 30);\n  table.string('content');\n\n  table.foreign('author').references('userId').inTable('users');\n});\n```\n\n----------------------------------------\n\nTITLE: Querying with OR and Object - Knex.js\nDESCRIPTION: Demonstrates using `orWhere` with an object, which automatically wraps the statement to create an `OR (AND - AND - AND)` clause.  Selects users where 'id' is 1 or ('votes' is 100 and 'user' is 'knex').\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_120\n\nLANGUAGE: javascript\nCODE:\n```\nknex('users').where('id', 1).orWhere({ votes: 100, user: 'knex' });\n```\n\n----------------------------------------\n\nTITLE: Environment-Specific Configuration\nDESCRIPTION: Knexfile configuration showing different settings for development and production environments.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/migrations.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  development: {\n    client: 'pg',\n    connection: { user: 'me', database: 'my_app' },\n  },\n  production: {\n    client: 'pg',\n    connection: process.env.DATABASE_URL,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Counting Rows with Object and Alias in Knex.js\nDESCRIPTION: Counts the number of rows in the 'users' table where the 'active' column is present and assigns the alias 'a' to the count result. Object syntax used to define column aliases.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_60\n\nLANGUAGE: JavaScript\nCODE:\n```\nknex('users').count({ a: 'active' });\n```\n\n----------------------------------------\n\nTITLE: Altering Table with alterTable - Knex.js\nDESCRIPTION: Chooses a database table and modifies it using schema building functions inside a callback. It takes the table name and a callback function as arguments. The callback uses schema building functions to alter the table structure.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/schema-builder.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nknex.schema.alterTable('users', function (table) {\n  table.dropColumn('name');\n  table.string('first_name');\n  table.string('last_name');\n});\n```\n\n----------------------------------------\n\nTITLE: Knex With (JavaScript)\nDESCRIPTION: Demonstrates adding a 'with' clause (Common Table Expression or CTE) to the query using the `.with()` method. It shows usage with a raw query, a column list, and a callback function.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nknex\n  .with(\n    'with_alias',\n    knex.raw('select * from \"books\" where \"author\" = ?', 'Test')\n  )\n  .select('*')\n  .from('with_alias');\n\nknex\n  .with(\n    'with_alias',\n    ['title'],\n    knex.raw('select \"title\" from \"books\" where \"author\" = ?', 'Test')\n  )\n  .select('*')\n  .from('with_alias');\n\nknex\n  .with('with_alias', (qb) => {\n    qb.select('*').from('books').where('author', 'Test');\n  })\n  .select('*')\n  .from('with_alias');\n```\n\n----------------------------------------\n\nTITLE: Running Migrations and Seeding in Knex.js (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to run migrations and seed the database using Knex.js. It chains the `migrate.latest()` and `seed.run()` promises to execute migrations first, then seed the database, and finally handle any post-migration tasks. It returns a promise that resolves after migrations and seeding.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/migrations.md#_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nknex.migrate\n  .latest()\n  .then(function () {\n    return knex.seed.run();\n  })\n  .then(function () {\n    // migrations are finished\n  });\n```\n\n----------------------------------------\n\nTITLE: Dropping Table with dropTable - Knex.js\nDESCRIPTION: Drops a table, specified by its name. It takes the table name as a string. This permanently removes the table and its data from the database.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/schema-builder.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nknex.schema.dropTable('users');\n```\n\n----------------------------------------\n\nTITLE: Creating a Union All Query with Knex.js\nDESCRIPTION: This code demonstrates creating a `unionAll` query with Knex.js, showing examples with a callback, an array of queries, and raw statements.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nknex\n  .select('*')\n  .from('users')\n  .whereNull('last_name')\n  .unionAll(function () {\n    this.select('*').from('users').whereNull('first_name');\n  });\n\nknex\n  .select('*')\n  .from('users')\n  .whereNull('last_name')\n  .unionAll([knex.select('*').from('users').whereNull('first_name')]);\n\nknex\n  .select('*')\n  .from('users')\n  .whereNull('last_name')\n  .unionAll(\n    knex.raw('select * from users where first_name is null'),\n    knex.raw('select * from users where email is null')\n  );\n```\n\n----------------------------------------\n\nTITLE: Querying with whereJsonSubsetOf - Knex.js\nDESCRIPTION: Illustrates using `whereJsonSubsetOf` to filter results where a JSON column contains a subset of the provided JSON. Filters users where 'hobby' is included in { sport: 'tennis', book: 'fantasy' }.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_140\n\nLANGUAGE: javascript\nCODE:\n```\n// given a hobby column with { \\\"sport\\\" : \\\"tennis\\\" },\n// the where clause is true\nknex('users').whereJsonSubsetOf('hobby', { sport: 'tennis', book: 'fantasy' });\n```\n\n----------------------------------------\n\nTITLE: Creating or Replacing View with createViewOrReplace - Knex.js\nDESCRIPTION: Creates a new view or replaces it on the database, with a callback function to modify the view's structure. It takes the view name and a callback function as arguments. The callback uses schema building commands to define the view's columns and the query to populate the view.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/schema-builder.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nknex.schema.createViewOrReplace('users_view', function (view) {\n  view.columns(['first_name']);\n  view.as(knex('users').select('first_name').where('age', '>', '18'));\n});\n```\n\n----------------------------------------\n\nTITLE: Altering a Column with Knex\nDESCRIPTION: This snippet demonstrates how to alter columns in a table using Knex.js's `.alter()` method within an `alterTable` schema modification. It shows how to modify column types, add or remove `notNullable` constraints, and the implications of these operations.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/schema-builder.md#_snippet_44\n\nLANGUAGE: javascript\nCODE:\n```\nknex.schema.alterTable('user', function (t) {\n  t.increments().primary(); // add\n  // drops previous default value from column,\n  // change type to string and add not nullable constraint\n  t.string('username', 35).notNullable().alter();\n  // drops both not null constraint and the default value\n  t.integer('age').alter();\n  // if alterNullable is false, drops only the default value\n  t.integer('age').alter({ alterNullable: false });\n  // if alterType is false, type of column is not altered.\n  t.integer('age').alter({ alterType: false });\n});\n```\n\n----------------------------------------\n\nTITLE: Selecting with skipLocked in Knex.js\nDESCRIPTION: Selects all columns from 'tableName', skipping any locked rows. Requires a lock mode (forUpdate or forShare) to be specified beforehand. Only supported on MySQL 8.0+, MariaDB-10.6+ and PostgreSQL 9.5+.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_55\n\nLANGUAGE: JavaScript\nCODE:\n```\nknex('tableName').select('*').forUpdate().skipLocked();\n```\n\n----------------------------------------\n\nTITLE: Querying with whereNot and Subquery - Knex.js\nDESCRIPTION: Shows how to use a subquery within a `where` clause with `not in`, filtering accounts based on a subquery that selects user IDs. Requires a pre-defined knex instance.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_125\n\nLANGUAGE: javascript\nCODE:\n```\nconst subquery = knex('users')\n  .whereNot('votes', '>', 100)\n  .andWhere('status', 'active')\n  .orWhere('name', 'John')\n  .select('id');\n\nknex('accounts').where('id', 'not in', subquery);\n```\n\n----------------------------------------\n\nTITLE: Alternative: Avg Salary with .as() (Knex.js)\nDESCRIPTION: This code provides an alternative, more concise way to achieve the same result as the previous wrapping example, using the `.as()` method. It calculates the average salary for each department as a subquery.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/raw.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst subcolumn = knex\n  .avg('salary')\n  .from('employee')\n  .whereRaw('dept_no = e.dept_no')\n  .as('avg_sal_dept');\n\nknex\n  .select('e.lastname', 'e.salary', subcolumn)\n  .from('employee as e')\n  .whereRaw('dept_no = e.dept_no');\n```\n\n----------------------------------------\n\nTITLE: Adding Offset to Query with Knex.js\nDESCRIPTION: This code shows how to add an offset clause to a query using Knex.js's `offset` function. It demonstrates setting the offset and also skipping binding of the offset value. Skipping binding is useful for some databases that do not allow prepared values for offset.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nknex.select('*').from('users').offset(10);\n\nknex.select('*').from('users').offset(10).toSQL().sql;\n\n// Offset value isn't a prepared value.\nknex.select('*').from('users').offset(10, { skipBinding: true }).toSQL().sql;\n```\n\n----------------------------------------\n\nTITLE: Deleting Rows with Join in Knex.js\nDESCRIPTION: Deletes rows from the 'accounts' table based on a join condition between 'accounts' and 'users' tables. This example demonstrates deleting records based on a relationship between two tables, specifically for PostgreSQL.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_44\n\nLANGUAGE: JavaScript\nCODE:\n```\nknex('accounts')\n  .where('activated', false)\n  .join('accounts', 'accounts.id', 'users.account_id')\n  .del();\n```\n\n----------------------------------------\n\nTITLE: Inserting with Returning Multiple Columns in Knex.js\nDESCRIPTION: Inserts a new row into the 'books' table and returns both the 'id' and 'title' of the newly inserted row. Demonstrates how to return multiple columns after an insert operation.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_48\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Returns [ { id: 1, title: 'Slaughterhouse Five' } ]\nknex('books')\n  .returning(['id', 'title'])\n  .insert({ title: 'Slaughterhouse Five' });\n```\n\n----------------------------------------\n\nTITLE: Initializing Knex with postProcessResponse Callback (MySQL)\nDESCRIPTION: This snippet demonstrates how to use the `postProcessResponse` hook to modify the returned rows before passing them to the user. In this example, it performs a snake_case to camelCase conversion for the returned columns.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/index.md#_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nconst knex = require('knex')({\n  client: 'mysql',\n  // overly simplified snake_case -> camelCase converter\n  postProcessResponse: (result, queryContext) => {\n    // TODO: add special case for raw results\n    // (depends on dialect)\n    if (Array.isArray(result)) {\n      return result.map((row) => convertToCamel(row));\n    } else {\n      return convertToCamel(result);\n    }\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Knex Timeout (JavaScript)\nDESCRIPTION: Demonstrates how to set a timeout for a query using the `.timeout()` method. It also shows how to enable query cancellation when the timeout is exceeded.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nknex.select().from('books').timeout(1000);\n\nknex.select().from('books').timeout(1000, {\n  cancel: true, // MySQL and PostgreSQL only\n});\n```\n\n----------------------------------------\n\nTITLE: Convert UUID to Binary with Knex.js\nDESCRIPTION: This code shows how to convert a string UUID to a binary UUID using `knex.fn.uuidToBin(uuid)`. This can be useful for optimizing storage in databases that support binary UUID types.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/utility.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nknex.schema.createTable('uuid_table', (t) => {\n  t.uuid('uuid_col_binary', { useBinaryUuid: true });\n});\nknex('uuid_table').insert({\n  uuid_col_binary: knex.fn.uuidToBin('3f06af63-a93c-11e4-9797-00505690773f'),\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Knex with Migrations Configuration (MySQL)\nDESCRIPTION: This snippet demonstrates configuring Knex with migration settings. It specifies the table name used to store migration history. This is a convenience option for managing database schema changes.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/index.md#_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nconst knex = require('knex')({\n  client: 'mysql',\n  connection: {\n    host: '127.0.0.1',\n    port: 3306',\n    user: 'your_database_user',\n    password: 'your_database_password',\n    database: 'myapp_test',\n  },\n  migrations: {\n    tableName: 'migrations',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Adding a Having Clause with Knex.js\nDESCRIPTION: This code snippet demonstrates how to add a having clause to the query using Knex.js, filtering grouped results based on specified conditions. Dependencies: Knex.js\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_172\n\nLANGUAGE: javascript\nCODE:\n```\nknex('users')\n  .groupBy('count')\n  .orderBy('name', 'desc')\n  .having('count', '>', 100);\n```\n\n----------------------------------------\n\nTITLE: Finding Maximum Value with Raw Expression in Knex.js\nDESCRIPTION: Finds the maximum value in the 'age' column using a raw expression. Allows for complex SQL constructs.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_81\n\nLANGUAGE: JavaScript\nCODE:\n```\nknex('users').max(knex.raw('??', ['age']));\n```\n\n----------------------------------------\n\nTITLE: Performing Raw Join with Knex.js\nDESCRIPTION: This code snippet demonstrates how to perform a raw join using Knex.js. It shows two ways to achieve the same result: using joinRaw and using join with knex.raw. Dependencies: Knex.js\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_149\n\nLANGUAGE: javascript\nCODE:\n```\nknex\n  .select('*')\n  .from('accounts')\n  .joinRaw('natural full join table1')\n  .where('id', 1);\n\nknex\n  .select('*')\n  .from('accounts')\n  .join(knex.raw('natural full join table1'))\n  .where('id', 1);\n```\n\n----------------------------------------\n\nTITLE: Connecting to MSSQL on Azure SQL Database with Encryption\nDESCRIPTION: This snippet shows how to configure Knex to connect to an MSSQL database on Azure SQL Database. The `encrypt: true` option within the `options` object of the connection configuration is crucial for secure connections. It depends on the `knex` package.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/faq/recipes.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nknex({\n  client: 'mssql',\n  connection: {\n    database: 'mydatabase',\n    server: 'myserver.database.windows.net',\n    user: 'myuser',\n    password: 'mypass',\n    port: 1433,\n    connectionTimeout: 30000,\n    options: {\n      encrypt: true,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Knex with Pool Configuration (MySQL)\nDESCRIPTION: This snippet demonstrates how to initialize a Knex instance with a custom connection pool configuration for MySQL. It sets the minimum and maximum number of connections in the pool. The `min` value is recommended to be 0 to avoid stale connection issues.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/index.md#_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nconst knex = require('knex')({\n  client: 'mysql',\n  connection: {\n    host: '127.0.0.1',\n    port: 3306,\n    user: 'your_database_user',\n    password: 'your_database_password',\n    database: 'myapp_test',\n  },\n  pool: { min: 0, max: 7 },\n});\n```\n\n----------------------------------------\n\nTITLE: Knex Transaction Provider (TypeScript)\nDESCRIPTION: This TypeScript example demonstrates the use of a transaction provider, which starts a transaction only when it's first called and returns the same transaction on subsequent calls. It allows for reusable transaction instances that are not immediately started.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/transactions.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// Does not start a transaction yet\nconst trxProvider = knex.transactionProvider();\n\nconst books = [\n  { title: 'Canterbury Tales' },\n  { title: 'Moby Dick' },\n  { title: 'Hamlet' },\n];\n\n// Starts a transaction\nconst trx = await trxProvider();\nconst ids = await trx('catalogues').insert({ name: 'Old Books' }, 'id');\nbooks.forEach((book) => (book.catalogue_id = ids[0]));\nawait trx('books').insert(books);\n\n// Reuses same transaction\nconst sameTrx = await trxProvider();\nconst ids2 = await sameTrx('catalogues').insert({ name: 'New Books' }, 'id');\nbooks.forEach((book) => (book.catalogue_id = ids2[0]));\nawait sameTrx('books').insert(books);\n```\n\n----------------------------------------\n\nTITLE: Escaping Question Marks in Raw Query (Knex.js)\nDESCRIPTION: This example demonstrates how to escape the `?` character in raw queries using `\\?` to prevent it from being interpreted as a placeholder. This allows including literal question marks in the raw SQL.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/raw.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nknex\n  .select('*')\n  .from('users')\n  .where('id', '=', 1)\n  .whereRaw('?? \\? ?', ['jsonColumn', 'jsonKey']);\n```\n\n----------------------------------------\n\nTITLE: Finding Minimum Value with Object Alias in Knex.js\nDESCRIPTION: Finds the minimum value in the 'age' column of the 'users' table and assigns the alias 'a' to the result using object aliasing.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_69\n\nLANGUAGE: JavaScript\nCODE:\n```\nknex('users').min({ a: 'age' });\n```\n\n----------------------------------------\n\nTITLE: Creating a Primary Key with Knex\nDESCRIPTION: This snippet demonstrates how to add a primary key constraint to a table using Knex.js.  It modifies the 'job' table to add a primary key constraint on the 'email' column, naming the constraint 'users_primary_key' and sets the constraint as deferrable.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/schema-builder.md#_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\nknex.schema.alterTable('users', function (t) {\n  t.unique('email');\n});\nknex.schema.alterTable('job', function (t) {\n  t.primary('email', {\n    constraintName: 'users_primary_key',\n    deferrable: 'deferred',\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Creating an Intersect Query with Knex.js\nDESCRIPTION: This code demonstrates creating an `intersect` query with Knex.js. The intersect method is unsupported on MySQL. Examples are shown using a callback, an array of queries, and raw statements.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nknex\n  .select('*')\n  .from('users')\n  .whereNull('last_name')\n  .intersect(function () {\n    this.select('*').from('users').whereNull('first_name');\n  });\n\nknex\n  .select('*')\n  .from('users')\n  .whereNull('last_name')\n  .intersect([knex.select('*').from('users').whereNull('first_name')]);\n\nknex\n  .select('*')\n  .from('users')\n  .whereNull('last_name')\n  .intersect(\n    knex.raw('select * from users where first_name is null'),\n    knex.raw('select * from users where email is null')\n  );\n```\n\n----------------------------------------\n\nTITLE: Knex Transaction Read Only Mode (TypeScript)\nDESCRIPTION: This TypeScript example demonstrates how to set the transaction mode to `read only` using the `readOnly` config parameter.  Attempting to perform a write operation (like INSERT) within a read-only transaction will result in an error.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/transactions.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst trx = await knex.transaction({ readOnly: true });\n// 💥 Cannot `INSERT` while inside a `READ ONLY` transaction\nconst result = await trx(tableName).insert({ id: 1, foo: 'bar' });\n```\n\n----------------------------------------\n\nTITLE: Using Parentheses with AND operator in Knex Query\nDESCRIPTION: This snippet demonstrates how to use parentheses with the AND operator in a Knex query to generate a `WHERE` clause with complex conditions. It uses a nested `where` function to group `OR` conditions. It depends on the `knex` package.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/faq/recipes.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nqueryBuilder\n  .where('status', status.uuid)\n  .andWhere((qB) =>\n    qB\n      .where('firstName', 'ilike', `%${q}%`)\n      .orWhere('lastName', 'ilike', `%${q}%`)\n  );\n```\n\n----------------------------------------\n\nTITLE: Renaming Table with renameTable - Knex.js\nDESCRIPTION: Renames a table from a current table name to another. It takes two string arguments: the current table name and the new table name. This operation changes the table's identifier within the database.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/schema-builder.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nknex.schema.renameTable('old_users', 'users');\n```\n\n----------------------------------------\n\nTITLE: Counting Multiple Columns with Object and Alias in Knex.js\nDESCRIPTION: Counts the number of rows in the 'users' table considering both 'active' and 'valid' columns and assigns aliases 'a' and 'v' respectively. This example extends to multiple columns using object notation.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_61\n\nLANGUAGE: JavaScript\nCODE:\n```\nknex('users').count({ a: 'active', v: 'valid' });\n```\n\n----------------------------------------\n\nTITLE: Generate UUID with Knex.js\nDESCRIPTION: This example demonstrates how to use `knex.fn.uuid()` to generate a UUID and set it as the default value for a UUID column in a database table. Note: This function is not supported by Redshift.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/utility.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\ntable.uuid('uuid').defaultTo(knex.fn.uuid());\n```\n\n----------------------------------------\n\nTITLE: Type Hinting in JavaScript with Knex\nDESCRIPTION: This snippet showcases how to provide IntelliSense support in JavaScript when using Knex.js by explicitly setting the type using JSDoc comments. It configures Knex for a MySQL database and then runs database migrations.\nSOURCE: https://github.com/knex/knex/blob/master/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @type {Knex}\n */\nconst database = knex({\n  client: 'mysql',\n  connection: {\n    host: '127.0.0.1',\n    user: 'your_database_user',\n    password: 'your_database_password',\n    database: 'myapp_test',\n  },\n});\ndatabase.migrate.latest();\n```\n\n----------------------------------------\n\nTITLE: Knex Usage with JSDoc (JavaScript)\nDESCRIPTION: Shows how to leverage autocompletion in JavaScript using JSDoc comments to define the type of the database row and improve code completion in IDEs.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @typedef {Object} User\n * @property {number} id\n * @property {number} age\n * @property {string} name\n *\n * @returns {Knex.QueryBuilder<User, {}>}\n */\nconst Users = () => knex('Users');\n\n// 'id' property can be autocompleted by editor\nUsers().where('id', 1);\n```\n\n----------------------------------------\n\nTITLE: Creating Native Postgres Enum Column\nDESCRIPTION: Demonstrates creating a native enum column on Postgres using the `enu` method and the `useNative` option. This allows for a strongly typed enum in Postgres.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/schema-builder.md#_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\ntable.enu('column', ['value1', 'value2'], {\n  useNative: true,\n  enumName: 'foo_type',\n});\n```\n\n----------------------------------------\n\nTITLE: Calculating Sum for Multiple Columns with Object Alias\nDESCRIPTION: Calculates the sum for both 'products' and 'orders' columns with object aliasing.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_86\n\nLANGUAGE: JavaScript\nCODE:\n```\nknex('users').sum({ sum: ['products', 'orders'] });\n```\n\n----------------------------------------\n\nTITLE: Initializing Knex with Dynamic Connection Configuration\nDESCRIPTION: This snippet demonstrates how to initialize Knex.js with a function that dynamically determines the connection configuration.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/index.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst knex = require('knex')({\n  client: 'sqlite3',\n  connection: () => ({\n    filename: process.env.SQLITE_FILENAME,\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Using Existing Native Postgres Enum Column\nDESCRIPTION: Shows how to use an existing native enum column on Postgres by specifying the `existingType` and `enumName` options in the `enu` method. It allows you to reference pre-defined enum types.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/schema-builder.md#_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\ntable.enu('column', null, {\n  useNative: true,\n  existingType: true,\n  enumName: 'foo_type',\n});\n```\n\n----------------------------------------\n\nTITLE: Calculating Average with Object Alias in Knex.js\nDESCRIPTION: Calculates the average of the 'age' column using object alias syntax.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_91\n\nLANGUAGE: JavaScript\nCODE:\n```\nknex('users').avg({ a: 'age' });\n```\n\n----------------------------------------\n\nTITLE: Knex Select with TypeScript and Refs\nDESCRIPTION: Illustrates using Knex with TypeScript to select columns, and uses `knex.ref` to handle aliasing and schema specification for type inference.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nknex.select('id').from<User>('users'); // Resolves to Pick<User, \"id\">[]\n\nknex.select('users.id').from<User>('users'); // Resolves to any[]\n// ^ TypeScript doesn't provide us a way to look into a string and infer the type\n//   from a substring, so we fall back to any\n\n// We can side-step this using knex.ref:\nknex.select(knex.ref('id').withSchema('users')).from<User>('users'); // Resolves to Pick<User, \"id\">[]\n\nknex.select('id as identifier').from<User>('users'); // Resolves to any[], for same reason as above\n\n// Refs are handy here too:\nknex.select(knex.ref('id').as('identifier')).from<User>('users'); // Resolves to { identifier: number; }[]\n```\n\n----------------------------------------\n\nTITLE: Adding a Raw OrderBy Clause with Knex.js\nDESCRIPTION: This code snippet demonstrates how to add a raw order by clause to the query using Knex.js, allowing for more complex sorting expressions. Dependencies: Knex.js\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_171\n\nLANGUAGE: javascript\nCODE:\n```\nknex.select('*').from('table').orderByRaw('col DESC NULLS LAST');\n```\n\n----------------------------------------\n\nTITLE: Creating Enum Column\nDESCRIPTION: Demonstrates creating an enum column using the `enu` method with a list of allowed values.  The enum is implemented as an unchecked varchar(255) on Amazon Redshift.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/schema-builder.md#_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\ntable.enu('column', ['value1', 'value2']);\n```\n\n----------------------------------------\n\nTITLE: Initializing Knex with Connection Expiration Checker\nDESCRIPTION: This snippet demonstrates how to initialize Knex.js with a function that dynamically determines the connection configuration, and an `expirationChecker` function to refresh the configuration if it's expired (e.g., for expiring authentication tokens).\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/index.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst knex = require('knex')({\n  client: 'postgres',\n  connection: async () => {\n    const { token, tokenExpiration } = await someCallToGetTheToken();\n\n    return {\n      host: 'your_host',\n      port: 5432,\n      user: 'your_database_user',\n      password: token,\n      database: 'myapp_test',\n      expirationChecker: () => {\n        return tokenExpiration <= Date.now();\n      },\n    };\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Finding Maximum Value with Object Alias in Knex.js\nDESCRIPTION: Finds the maximum value in the 'age' column and aliases the result using the object syntax.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_77\n\nLANGUAGE: JavaScript\nCODE:\n```\nknex('users').max({ a: 'age' });\n```\n\n----------------------------------------\n\nTITLE: Updating Data with 'from' Syntax in PostgreSQL\nDESCRIPTION: This snippet demonstrates how to use the `.updateFrom()` method in Knex.js in PostgreSQL to define an update statement with an explicit 'from' clause.  This syntax allows you to reference other tables in the 'where' condition.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\nknex('accounts')\n  .update({ enabled: false })\n  .updateFrom('clients')\n  .where('accounts.id', '=', 'clients.id')\n  .where('clients.active', '=', false);\n```\n\n----------------------------------------\n\nTITLE: Install Knex.js and Database Drivers (npm)\nDESCRIPTION: This snippet demonstrates how to install Knex.js using npm, along with examples of installing various database drivers like pg (PostgreSQL), pg-native, sqlite3, mysql, mysql2, oracledb, and tedious (MSSQL). The `--save` flag adds the packages to your project's dependencies.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/index.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install knex --save\n\n# Then add one of the following (adding a --save) flag:\n$ npm install pg\n$ npm install pg-native\n$ npm install sqlite3\n$ npm install better-sqlite3\n$ npm install mysql\n$ npm install mysql2\n$ npm install oracledb\n$ npm install tedious\n```\n\n----------------------------------------\n\nTITLE: Querying with Grouped Chain - Knex.js\nDESCRIPTION: Demonstrates grouping `where` clauses using a function and chaining `orWhere` conditions, along with an `orWhere` condition specified using an object.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_117\n\nLANGUAGE: javascript\nCODE:\n```\nknex('users')\n  .where(function () {\n    this.where('id', 1).orWhere('id', '>', 10);\n  })\n  .orWhere({ name: 'Tester' });\n```\n\n----------------------------------------\n\nTITLE: Convert Binary to UUID with Knex.js\nDESCRIPTION: This example demonstrates how to convert a binary UUID back to a string UUID using `knex.fn.binToUuid(binaryUuid)`. This is useful for retrieving and displaying UUIDs stored in binary format.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/utility.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst res = await knex('uuid_table').select('uuid_col_binary');\nknex.fn.binToUuid(res[0].uuid_col_binary);\n```\n\n----------------------------------------\n\nTITLE: Using Existing Native Postgres Enum Column from a Specific Schema\nDESCRIPTION: Demonstrates using an existing native enum column on Postgres from a different schema by specifying the `schemaName` option. It allows referencing enum types defined in other schemas.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/schema-builder.md#_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\ntable.enu('column', null, {\n  useNative: true,\n  existingType: true,\n  enumName: 'foo_type',\n  schemaName: 'public',\n});\n```\n\n----------------------------------------\n\nTITLE: Calculating Sum with Object Alias in Knex.js\nDESCRIPTION: Calculates the sum of the values in the 'products' column using the object syntax for aliasing.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_84\n\nLANGUAGE: JavaScript\nCODE:\n```\nknex('users').sum({ p: 'products' });\n```\n\n----------------------------------------\n\nTITLE: Knex Query Event Listener\nDESCRIPTION: This snippet demonstrates how to listen for the 'query' event in Knex.js.  The 'query' event is fired just before a query is executed, and the provided function receives data about the query.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/interfaces.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nknex\n  .select('*')\n  .from('users')\n  .on('query', function (data) {\n    app.log(data);\n  })\n  .then(function () {\n    // ...\n  });\n```\n\n----------------------------------------\n\nTITLE: Adding a HavingNotExists Clause with Knex.js\nDESCRIPTION: This code snippet demonstrates how to add a havingNotExists clause to the query using Knex.js, filtering grouped results based on whether a subquery returns no rows. Dependencies: Knex.js\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_178\n\nLANGUAGE: javascript\nCODE:\n```\nknex\n  .select('*')\n  .from('users')\n  .havingNotExists(function () {\n    this.select('*')\n      .from('accounts')\n      .whereRaw('users.account_id = accounts.id');\n  });\n```\n\n----------------------------------------\n\nTITLE: Setting JSON Value with Knex.js\nDESCRIPTION: This code shows how to use the `jsonSet` function in Knex.js to set a value in a JSON column at a specified path.  Examples include setting a string value and setting a JSON object. A column alias can be specified for the result.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nknex('accounts').jsonSet('json_col', '$.name', 'newName', 'newNameCol');\n\nknex('accounts').jsonSet(\n  'json_col',\n  '$.name',\n  { name: 'newName' },\n  'newNameCol'\n);\n```\n\n----------------------------------------\n\nTITLE: Performing Right Outer Join with Knex.js\nDESCRIPTION: This code snippet demonstrates how to perform a right outer join using Knex.js. It shows two ways to specify the join condition: using column names directly and using a function for more complex conditions. Dependencies: Knex.js\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_146\n\nLANGUAGE: javascript\nCODE:\n```\nknex\n  .select('*')\n  .from('users')\n  .rightOuterJoin('accounts', 'users.id', 'accounts.user_id');\n\nknex\n  .select('*')\n  .from('users')\n  .rightOuterJoin('accounts', function () {\n    this.on('accounts.id', '=', 'users.account_id').orOn(\n      'accounts.owner_id',\n      '=',\n      'users.id'\n    );\n  });\n```\n\n----------------------------------------\n\nTITLE: Knex Stream with Options\nDESCRIPTION: Demonstrates creating a Knex.js stream with specific options, such as `highWaterMark`, and piping it to a writable stream for efficient data processing.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/interfaces.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// With options:\nconst stream = knex.select('*').from('users').stream({ highWaterMark: 5 });\nstream.pipe(writableStream);\n```\n\n----------------------------------------\n\nTITLE: Extending Knex Builders with Custom Functions (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to extend Knex's SchemaBuilder, TableBuilder, ViewBuilder, and ColumnBuilder with custom functions. Each `extend` call adds a new function to the respective builder's prototype. When called, these functions will log a message to the console and return the builder instance, allowing for chaining.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/extending.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nknex.SchemaBuilder.extend('functionName', function () {\n  console.log('Custom Schema Builder Function');\n  return this;\n});\nknex.TableBuilder.extend('functionName', function () {\n  console.log('Custom Table Builder Function');\n  return this;\n});\nknex.ViewBuilder.extend('functionName', function () {\n  console.log('Custom View Builder Function');\n  return this;\n});\nknex.ColumnBuilder.extend('functionName', function () {\n  console.log('Custom Column Builder Function');\n  return this;\n});\n```\n\n----------------------------------------\n\nTITLE: Knex Stream as Promise\nDESCRIPTION: This snippet demonstrates how to use Knex.js stream as a promise. It selects all entries from 'users' table that match a certain ID using `knex.raw`, streams data to `writableStream` and then executes code when stream finishes using `.then()` or catches error using `.catch()`.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/interfaces.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// Use as a promise:\nconst stream = knex\n  .select('*')\n  .from('users')\n  .where(knex.raw('id = ?', [1]))\n  .stream(function (stream) {\n    stream.pipe(writableStream);\n  })\n  .then(function () {\n    /* ... */\n  })\n  .catch(function (e) {\n    console.error(e);\n  });\n```\n\n----------------------------------------\n\nTITLE: Defining View Columns and Query in Knex.js\nDESCRIPTION: Demonstrates how to create a view using Knex.js, specifying the columns and the underlying select query that defines the view's data.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/schema-builder.md#_snippet_50\n\nLANGUAGE: js\nCODE:\n```\nknex.schema.createView('users_view', function (view) {\n  view.columns(['first_name', 'last_name']);\n  view.as(knex('users').select('first_name').where('age', '>', '18'));\n});\n```\n\n----------------------------------------\n\nTITLE: Raw Expression in Query Chain (Knex.js)\nDESCRIPTION: This code showcases how to use raw expressions directly within a Knex.js query chain. This enables the use of database-specific functions or syntax not directly supported by Knex.js.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/raw.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nknex('users')\n  .select(knex.raw('count(*) as user_count, status'))\n  .where(knex.raw(1))\n  .orWhere(knex.raw('status <> ?', [1]))\n  .groupBy('status');\n```\n\n----------------------------------------\n\nTITLE: Finding Maximum Value with Knex.js\nDESCRIPTION: Finds the maximum value in the 'age' column of the 'users' table.  Basic aggregate function example.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_74\n\nLANGUAGE: JavaScript\nCODE:\n```\nknex('users').max('age');\n```\n\n----------------------------------------\n\nTITLE: Querying with whereNot Operator - Knex.js\nDESCRIPTION: Explains how to use an operator (like '>') in a `whereNot` clause. This example selects users where 'votes' is NOT greater than 100.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_124\n\nLANGUAGE: javascript\nCODE:\n```\nknex('users').whereNot('votes', '>', 100);\n```\n\n----------------------------------------\n\nTITLE: DB Access using SQLite and SQLCipher with Knex\nDESCRIPTION: This snippet shows how to configure Knex to work with SQLite and SQLCipher, providing the encryption key when opening the database connection. The `afterCreate` hook is used to execute the `PRAGMA KEY` statement for each new connection. It depends on the `knex` package.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/faq/recipes.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst myDBConfig = {\n  client: 'sqlite3',\n  connection: {\n    filename: 'myEncryptedSQLiteDbFile.db',\n  },\n  pool: {\n    afterCreate: function (conn, done) {\n      conn.run(\"PRAGMA KEY = 'secret'\");\n      done();\n    },\n  },\n};\nconst knex = require('knex')(myDBConfig);\n```\n\n----------------------------------------\n\nTITLE: Knex Query Error Event Listener\nDESCRIPTION: This snippet demonstrates how to listen for the 'query-error' event in Knex.js. The 'query-error' event is fired when a query fails, providing the error object and data about the query. This can be used to log query errors.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/interfaces.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nknex\n  .select(['NonExistentColumn'])\n  .from('users')\n  .on('query-error', function (error, obj) {\n    app.log(error);\n  })\n  .then(function () {\n    /* ... */\n  })\n  .catch(function (error) {\n    // Same error object as the query-error event provides.\n  });\n```\n\n----------------------------------------\n\nTITLE: Adding a Point Column with Knex\nDESCRIPTION: This snippet demonstrates how to add a 'point' column to a table using Knex.js schema builder. It creates a table named 'tblName' and adds a column named 'pointColumn' of type 'point'. Note that 'point' column is not supported by CockroachDB and MSSQL.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/schema-builder.md#_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\nknex.schema.createTable(tblName, (table) => {\n  table.point('pointColumn');\n});\n```\n\n----------------------------------------\n\nTITLE: Using Timestamp with Timezone\nDESCRIPTION: Illustrates adding a timestamp column with timezone support using the `timestamp` method and the `useTz` option, primarily for PostgreSQL and MSSQL. Shows enabling timezone usage by setting `useTz` to true.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/schema-builder.md#_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\ntable.timestamp('created_at', { useTz: true });\n```\n\n----------------------------------------\n\nTITLE: Disabling Transactions Per Migration\nDESCRIPTION: Example showing how to disable transactions for a specific migration by setting `exports.config.transaction` to `false`.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/migrations.md#_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nexports.up = function (knex) {\n  return knex.schema\n    .createTable('users', function (table) {\n      table.increments('id');\n      table.string('first_name', 255).notNullable();\n      table.string('last_name', 255).notNullable();\n    })\n    .createTable('products', function (table) {\n      table.increments('id');\n      table.decimal('price').notNullable();\n      table.string('name', 1000).notNullable();\n    });\n};\n\nexports.down = function (knex) {\n  return knex.schema.dropTable('products').dropTable('users');\n};\n\nexports.config = { transaction: false };\n```\n\n----------------------------------------\n\nTITLE: Calculating Distinct Sum with Knex.js\nDESCRIPTION: Calculates the distinct sum of the values in the 'products' column. Counts only unique values.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_88\n\nLANGUAGE: JavaScript\nCODE:\n```\nknex('users').sumDistinct('products');\n```\n\n----------------------------------------\n\nTITLE: Initializing Knex with MySQL (Version)\nDESCRIPTION: This snippet demonstrates how to initialize Knex with a specific MySQL database version.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/index.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst knex = require('knex')({\n  client: 'mysql',\n  version: '5.7',\n  connection: {\n    host: '127.0.0.1',\n    port: 3306,\n    user: 'your_database_user',\n    password: 'your_database_password',\n    database: 'myapp_test',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Knex with SQLite3 - TypeScript\nDESCRIPTION: This snippet shows how to initialize Knex.js with SQLite3 using TypeScript, defining a custom interface for the 'users' table. It also demonstrates basic data selection with type safety.\nSOURCE: https://github.com/knex/knex/blob/master/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Knex, knex } from 'knex';\n\ninterface User {\n  id: number;\n  age: number;\n  name: string;\n  active: boolean;\n  departmentId: number;\n}\n\nconst config: Knex.Config = {\n  client: 'sqlite3',\n  connection: {\n    filename: './data.db',\n  },\n};\n\nconst knexInstance = knex(config);\n\ntry {\n  const users = await knex<User>('users').select('id', 'age');\n} catch (err) {\n  // error handling\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Knex with PostgreSQL (SSL Configuration)\nDESCRIPTION: This snippet illustrates how to initialize Knex.js with a PostgreSQL database, specifying connection details and SSL configuration, including the option to reject unauthorized certificates.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/index.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst pg = require('knex')({\n  client: 'pg',\n  connection: {\n    connectionString: config.DATABASE_URL,\n    host: config['DB_HOST'],\n    port: config['DB_PORT'],\n    user: config['DB_USER'],\n    database: config['DB_NAME'],\n    password: config['DB_PASSWORD'],\n    ssl: config['DB_SSL'] ? { rejectUnauthorized: false } : false,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Knexfile Configuration with Default and Named Exports (TypeScript)\nDESCRIPTION: This TypeScript code demonstrates how to configure a knexfile using both default and named exports. The default export takes precedence over the named exports. This allows for a flexible configuration approach, where a default configuration can be provided, but individual properties can still be accessed via named exports if needed.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/migrations.md#_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * filename: knexfile.js\n * For the knexfile you can use a default export\n **/\nexport default {\n  client: 'sqlite3',\n  connection: {\n    filename: '../test.sqlite3',\n  },\n  migrations: {\n    directory: './migrations',\n  },\n  seeds: {\n    directory: './seeds',\n  },\n};\n\n/**\n * filename: knexfile.js\n * Let knex find the configuration by providing named exports,\n * but if exported a default, it will take precedence, and it will be used instead\n **/\nconst config = {\n  client: 'sqlite3',\n  connection: {\n    filename: '../test.sqlite3',\n  },\n  migrations: {\n    directory: './migrations',\n  },\n  seeds: {\n    directory: './seeds',\n  },\n};\n/** this will be used, it has precedence over named export */\nexport default config;\n/** Named exports, will be used if you didn't provide a default export */\nexport const { client, connection, migrations, seeds } = config;\n```\n\n----------------------------------------\n\nTITLE: Adding a HavingIn Clause with Knex.js\nDESCRIPTION: This code snippet demonstrates how to add a havingIn clause to the query using Knex.js, filtering grouped results based on whether a column's value is in a specified array. Dependencies: Knex.js\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_173\n\nLANGUAGE: javascript\nCODE:\n```\nknex.select('*').from('users').havingIn('id', [5, 3, 10, 17]);\n```\n\n----------------------------------------\n\nTITLE: Querying with whereNot Object Syntax - Knex.js\nDESCRIPTION: Demonstrates using object syntax with `whereNot`. It selects the 'id' from 'users' where 'first_name' is NOT 'Test' and 'last_name' is NOT 'User'.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_121\n\nLANGUAGE: javascript\nCODE:\n```\nknex('users')\n  .whereNot({\n    first_name: 'Test',\n    last_name: 'User',\n  })\n  .select('id');\n```\n\n----------------------------------------\n\nTITLE: Adding havingBetween Clause with Knex.js\nDESCRIPTION: This snippet demonstrates how to add a havingBetween clause to a Knex.js query. It selects all columns from the 'users' table where the 'id' column is between 5 and 10. Requires Knex.js to be properly configured and connected to a database.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_179\n\nLANGUAGE: javascript\nCODE:\n```\nknex.select('*').from('users').havingBetween('id', [5, 10]);\n```\n\n----------------------------------------\n\nTITLE: Initializing Knex with PostgreSQL (Version)\nDESCRIPTION: This snippet demonstrates how to initialize Knex with a specific PostgreSQL database version.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/index.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst knex = require('knex')({\n  client: 'pg',\n  version: '7.2',\n  connection: {\n    host: '127.0.0.1',\n    port: 5432,\n    user: 'your_database_user',\n    password: 'your_database_password',\n    database: 'myapp_test',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Handling MSSQL Triggers During Updates with Knex.js\nDESCRIPTION: This snippet shows how to handle triggers in MSSQL when updating data using Knex.js. It uses the `includeTriggerModifications` option to ensure valid values are returned from update statements that might be interrupted by triggers. This option only affects MSSQL and is relevant when a returning value is specified.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\n// Adding the option includeTriggerModifications allows you\n// to run statements on tables that contain triggers.\n// Only affects MSSQL.\nknex('books').update({ title: 'Alice in Wonderland' }, ['id', 'title'], {\n  includeTriggerModifications: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Comments to Query in Knex.js\nDESCRIPTION: Prepends a comment to the SQL query using the `/* ... */` syntax.  Certain characters are forbidden within the comment, such as `/*`, `*/`, and `?`. Requires Knex.js library and a database connection.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_102\n\nLANGUAGE: javascript\nCODE:\n```\nknex('users').where('id', '=', 1).comment('Get user by id');\n```\n\n----------------------------------------\n\nTITLE: Counting Distinct Values with Knex.js\nDESCRIPTION: Counts the distinct values in the 'active' column of the 'users' table.  This aggregate function calculates the number of unique values present.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_65\n\nLANGUAGE: TypeScript\nCODE:\n```\nknex('users').countDistinct('active');\n```\n\n----------------------------------------\n\nTITLE: Initializing Knex with Better-SQLite3 (Read-Only)\nDESCRIPTION: This snippet illustrates how to initialize Knex.js with Better-SQLite3 in read-only mode.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/index.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst knex = require('knex')({\n  client: 'better-sqlite3',\n  connection: {\n    filename: '/path/to/db.sqlite3',\n    options: {\n      readonly: true,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Setting a Distinct Clause with Knex.js\nDESCRIPTION: This code snippet demonstrates how to set a distinct clause on the query using Knex.js, removing duplicate rows from the result set. If no columns specified, defaults to all columns. Dependencies: Knex.js\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_166\n\nLANGUAGE: javascript\nCODE:\n```\n// select distinct 'first_name' from customers\nknex('customers').distinct('first_name', 'last_name');\n\n// select which eliminates duplicate rows\nknex('customers').distinct();\n```\n\n----------------------------------------\n\nTITLE: Adding an onJsonPathEquals Clause with Knex.js\nDESCRIPTION: This code snippet demonstrates how to add an onJsonPathEquals clause to a join in Knex.js. It performs a join based on the values returned by two JSON paths on two JSON columns. Dependencies: Knex.js\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_158\n\nLANGUAGE: javascript\nCODE:\n```\nknex('cities')\n  .select('cities.name as cityName', 'country.name as countryName')\n  .join('country', function () {\n    this.onJsonPathEquals(\n      // json column in cities\n      'country_name',\n      // json path to country name in 'country_name' column\n      '$.country.name',\n      // json column in country\n      'description',\n      // json field in 'description' column\n      '$.name'\n    );\n  });\n```\n\n----------------------------------------\n\nTITLE: Nesting JSON Functions with Knex.js\nDESCRIPTION: This code demonstrates how to nest JSON functions when using Knex.js. The example shows using `jsonExtract`, `jsonRemove`, and `jsonSet` in combination within a single query. The nested structure lets you manipulate a JSON column value with a set of transformations in the same statement.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nknex('cities').jsonExtract([\n  [knex.jsonRemove('population', '$.min'), '$', 'withoutMin'],\n  [knex.jsonRemove('population', '$.max'), '$', 'withoutMax'],\n  [knex.jsonSet('population', '$.current', '1234'), '$', 'currentModified'],\n]);\n```\n\n----------------------------------------\n\nTITLE: Adding havingNotBetween Clause with Knex.js\nDESCRIPTION: This snippet demonstrates how to add a havingNotBetween clause to a Knex.js query. It selects all columns from the 'users' table where the 'id' column is not between 5 and 10. Requires Knex.js to be properly configured and connected to a database.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_180\n\nLANGUAGE: javascript\nCODE:\n```\nknex.select('*').from('users').havingNotBetween('id', [5, 10]);\n```\n\n----------------------------------------\n\nTITLE: Extending Knex.js Test Timeouts\nDESCRIPTION: Sets the `KNEX_TEST_TIMEOUT` environment variable to increase the test timeout in milliseconds. This is useful when dealing with slow DB connections or running CI on platforms like Travis, where the default timeout of 5 seconds might be insufficient.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/faq/index.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ export KNEX_TEST_TIMEOUT=30000\n$ npm test\n```\n\n----------------------------------------\n\nTITLE: Wrapping a Raw Query (Knex.js)\nDESCRIPTION: This code shows how to wrap a raw query using the `wrap` method in Knex.js.  This allows embedding the results of the raw query within a larger query, often used for subqueries or calculated columns. The example calculates the average salary for each department.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/raw.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst subcolumn = knex\n  .raw('select avg(salary) from employee where dept_no = e.dept_no')\n  .wrap('(', ') avg_sal_dept');\n\nknex\n  .select('e.lastname', 'e.salary', subcolumn)\n  .from('employee as e')\n  .whereRaw('dept_no = e.dept_no');\n```\n\n----------------------------------------\n\nTITLE: Plucking a Column from Results in Knex.js\nDESCRIPTION: Plucks the specified column from each row in the query results. This returns a promise that resolves to an array of values selected. Requires Knex.js library and a database connection.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_99\n\nLANGUAGE: javascript\nCODE:\n```\nknex\n  .table('users')\n  .pluck('id')\n  .then(function (ids) {\n    console.log(ids);\n  });\n```\n\n----------------------------------------\n\nTITLE: Knex WithRecursive (JavaScript)\nDESCRIPTION: Demonstrates how to create a recursive CTE using the `.withRecursive()` method. The example uses a recursive query to find ancestors in a 'people' table, as well as using unionAll to build family relationships.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nknex\n  .withRecursive('ancestors', (qb) => {\n    qb.select('*')\n      .from('people')\n      .where('people.id', 1)\n      .union((qb) => {\n        qb.select('*')\n          .from('people')\n          .join('ancestors', 'ancestors.parentId', 'people.id');\n      });\n  })\n  .select('*')\n  .from('ancestors');\n\nknex\n  .withRecursive('family', ['name', 'parentName'], (qb) => {\n    qb.select('name', 'parentName')\n      .from('folks')\n      .where({ name: 'grandchild' })\n      .unionAll((qb) =>\n        qb\n          .select('folks.name', 'folks.parentName')\n          .from('folks')\n          .join('family', knex.ref('family.parentName'), knex.ref('folks.name'))\n      );\n  })\n  .select('name')\n  .from('family');\n```\n\n----------------------------------------\n\nTITLE: Creating Table Like Another with createTableLike - Knex.js\nDESCRIPTION: Creates a new table on the database based on another table. This copies the structure (columns, keys, and indexes) of the original table. An optional callback function can be specified to add additional columns.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/schema-builder.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nknex.schema.createTableLike('new_users', 'users');\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// \"new_users\" table contains columns\n// of users and two new columns 'age' and 'last_name'.\nknex.schema.createTableLike('new_users', 'users', (table) => {\n  table.integer('age');\n  table.string('last_name');\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Migration Name Configuration\nDESCRIPTION: Knexfile configuration to customize migration name generation.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/migrations.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  client: 'pg',\n  migrations: {\n    getNewMigrationName: (name) => {\n      return `${+new Date()}-${name}.js`;\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Updating Knex import in TypeScript\nDESCRIPTION: This snippet shows how to update the Knex import statement in TypeScript to correctly use the knex function and Knex namespace for type definitions. It addresses the breaking changes introduced in Knex.js 0.95.0 regarding TypeScript type exports.\nSOURCE: https://github.com/knex/knex/blob/master/UPGRADING.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { knex, Knex } from 'knex';\n\nconst config: Knex.Config = {}; // this is a type from the Knex namespace\nconst knexInstance = knex(config);\n```\n\n----------------------------------------\n\nTITLE: Creating Materialized View with createMaterializedView - Knex.js\nDESCRIPTION: Creates a new materialized view on the database, with a callback function to modify the view's structure.  Only on PostgreSQL, CockroachDb, Redshift and Oracle. It takes the view name and a callback function as arguments. The callback uses schema building commands to define the view's columns and the query to populate the view.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/schema-builder.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nknex.schema.createMaterializedView('users_view', function (view) {\n  view.columns(['first_name']);\n  view.as(knex('users').select('first_name').where('age', '>', '18'));\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Column Information in Knex.js\nDESCRIPTION: Returns an object with the column information about the current table, including default value, type, max length, and nullable status.  Requires Knex.js library and a database connection.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_108\n\nLANGUAGE: javascript\nCODE:\n```\nknex('users')\n  .columnInfo()\n  .then(function (info) {\n    /*...*/\n  });\n```\n\n----------------------------------------\n\nTITLE: Setting a DistinctOn Clause with Knex.js\nDESCRIPTION: This code snippet demonstrates how to add a distinctOn clause to the query using Knex.js. This feature is specific to PostgreSQL. Dependencies: Knex.js, PostgreSQL\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_167\n\nLANGUAGE: javascript\nCODE:\n```\nknex('users').distinctOn('age');\n```\n\n----------------------------------------\n\nTITLE: Truncating a Table in Knex.js\nDESCRIPTION: Truncates the specified table using Knex.js. This operation removes all data from the table. Requires Knex.js library and a database connection with sufficient privileges.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_98\n\nLANGUAGE: javascript\nCODE:\n```\nknex('accounts').truncate();\n```\n\n----------------------------------------\n\nTITLE: Custom Migration Stub Configuration\nDESCRIPTION: Knexfile configuration to use a custom migration stub file.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/migrations.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  client: 'pg',\n  migrations: {\n    stub: 'migration.stub',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Knex Query to SQL Object\nDESCRIPTION: This demonstrates using `toSQL()` and `toSQL().toNative()` to obtain the raw SQL and bindings of a Knex.js query. This is useful for debugging and for running queries manually with a DB driver, providing dialect-specific output.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/interfaces.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nknex\n  .select('*')\n  .from('users')\n  .where(knex.raw('id = ?', [1]))\n  .toSQL();\n// Outputs:\n// {\n//   bindings: [1],\n//   method: 'select',\n//   sql: 'select * from \"users\" where id = ?',\n//   options: undefined,\n//   toNative: function () {}\n// }\n\nknex\n  .select('*')\n  .from('users')\n  .where(knex.raw('id = ?', [1]))\n  .toSQL()\n  .toNative();\n// Outputs for postgresql dialect:\n// {\n//   bindings: [1],\n//   sql: 'select * from \"users\" where id = $1',\n// }\n```\n\n----------------------------------------\n\nTITLE: Dropping View with dropView - Knex.js\nDESCRIPTION: Drops a view on the database. It takes the view name as an argument. This permanently removes the view from the database.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/schema-builder.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nknex.schema.dropView('users_view');\n```\n\n----------------------------------------\n\nTITLE: Initializing Knex with afterCreate Callback (PostgreSQL)\nDESCRIPTION: This snippet shows how to initialize Knex with an `afterCreate` callback for PostgreSQL. The callback is executed when a new connection is acquired from the database server. It allows running initialization queries like setting the timezone.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/index.md#_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nconst knex = require('knex')({\n  client: 'pg',\n  connection: {\n    /*...*/\n  },\n  pool: {\n    afterCreate: function (conn, done) {\n      // in this example we use pg driver's connection API\n      conn.query('SET timezone=\"UTC\";', function (err) {\n        if (err) {\n          // first query failed,\n          // return error and don't try to make next query\n          done(err, conn);\n        } else {\n          // do the second query...\n          conn.query('SELECT set_limit(0.01);', function (err) {\n            // if err is not falsy,\n            //  connection is discarded from pool\n            // if connection aquire was triggered by a\n            // query the error is passed to query promise\n            done(err, conn);\n          });\n        }\n      });\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Aliasing Columns with knex.ref in Knex.js\nDESCRIPTION: This example illustrates how to alias a column name using the `as` method in combination with `knex.ref`.  This allows you to rename the column in the result set.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/ref.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nknex('users').select(knex.ref('Id').as('UserId'));\n```\n\n----------------------------------------\n\nTITLE: Initializing Knex with acquireConnectionTimeout (PostgreSQL)\nDESCRIPTION: This snippet demonstrates setting the `acquireConnectionTimeout` option. It specifies the maximum time Knex should wait to acquire a connection from the pool before throwing an error. This is useful when the connection pool is exhausted.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/index.md#_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nconst knex = require('knex')({\n  client: 'pg',\n  connection: {\n    /*...*/\n  },\n  pool: {\n    /*...*/\n  },\n  acquireConnectionTimeout: 10000,\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Column Check Constraint - checkPositive in Knex.js\nDESCRIPTION: Demonstrates how to add a check constraint on a column to ensure that the value is positive, using Knex.js.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/schema-builder.md#_snippet_52\n\nLANGUAGE: js\nCODE:\n```\nknex.schema.createTable('product', function (table) {\n  table.integer('price').checkPositive();\n});\n```\n\n----------------------------------------\n\nTITLE: Incrementing Column Value in Knex.js\nDESCRIPTION: Increments the specified column's value by a given amount using Knex.js. Supports both single column updates and updates to multiple columns using object syntax. Requires Knex.js library and a database connection.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_96\n\nLANGUAGE: javascript\nCODE:\n```\nknex('accounts').where('userid', '=', 1).increment('balance', 10);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nknex('accounts').where('id', '=', 1).increment({\n  balance: 10,\n  times: 1,\n});\n```\n\n----------------------------------------\n\nTITLE: Inserting with Returning and Trigger Modification (MSSQL)\nDESCRIPTION: Inserts a new row into the 'books' table and returns the 'id' and 'title' columns, handling triggers in MSSQL. The `includeTriggerModifications` option ensures correct return values when triggers are present.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_49\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Adding the option includeTriggerModifications allows you\n// to run statements on tables that contain triggers.\n// Only affects MSSQL.\nknex('books')\n  .returning(['id', 'title'], { includeTriggerModifications: true })\n  .insert({ title: 'Slaughterhouse Five' });\n```\n\n----------------------------------------\n\nTITLE: Adding an onNotNull Clause with Knex.js\nDESCRIPTION: This code snippet demonstrates how to add an onNotNull clause to a join in Knex.js. It joins the 'users' and 'contacts' tables and adds a condition that 'contacts.email' must not be null. Dependencies: Knex.js\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_153\n\nLANGUAGE: javascript\nCODE:\n```\nknex\n  .select('*')\n  .from('users')\n  .join('contacts', function () {\n    this.on('users.id', '=', 'contacts.id').onNotNull('contacts.email');\n  });\n```\n\n----------------------------------------\n\nTITLE: Ignoring Conflicts with Conditional WHERE Clause Using Raw Query\nDESCRIPTION: This snippet demonstrates how to use the `.onConflict(knex.raw(...)).ignore()` methods in Knex.js to handle insert conflicts in PostgreSQL, MySQL and SQLite with the condition defined in RAW query. When a conflict occurs due to a unique constraint violation, the insert operation will be silently ignored only if the condition is met.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nknex('tableName')\n  .insert({\n    email: 'ignore@example.com',\n    name: 'John Doe',\n    active: true,\n  })\n  // ignore only on email conflict and active is true.\n  .onConflict(knex.raw('(email) where active'))\n  .ignore();\n```\n\n----------------------------------------\n\nTITLE: Publish Knex @next Release\nDESCRIPTION: This shell script snippet publishes the Knex package to npm under the 'next' tag. This command is used after updating the package.json version to a next release version (e.g., 0.16.0-next1).\nSOURCE: https://github.com/knex/knex/blob/master/scripts/next-release-howto.md#_snippet_1\n\nLANGUAGE: Shell Script\nCODE:\n```\nnpm publish --tag next\n```\n\n----------------------------------------\n\nTITLE: Knexfile Configuration for ESM Migrations (TypeScript)\nDESCRIPTION: This TypeScript code demonstrates a knexfile configuration that specifies the `loadExtensions` option for migrations. This is necessary when using '.cjs' or '.mjs' extensions for migration files or when mixing different module formats between the knexfile and migration/seed files. It allows Knex to correctly load the migration files with the specified extensions.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/migrations.md#_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * knexfile.mjs\n */\nexport default {\n  migrations: {\n    // ... client, connection,etc ....\n    directory: './migrations',\n    loadExtensions: ['.mjs'], //\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Calculating Average with Knex.js\nDESCRIPTION: Calculates the average of the values in the 'age' column. Basic aggregate average function.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_89\n\nLANGUAGE: JavaScript\nCODE:\n```\nknex('users').avg('age');\n```\n\n----------------------------------------\n\nTITLE: Querying with whereNotExists - Knex.js\nDESCRIPTION: Shows how to use `whereNotExists` to filter results based on the absence of related records. The first example uses a callback, the second uses a builder.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_131\n\nLANGUAGE: javascript\nCODE:\n```\nknex('users').whereNotExists(function () {\n  this.select('*').from('accounts').whereRaw('users.account_id = accounts.id');\n});\n\nknex('users').whereNotExists(\n  knex.select('*').from('accounts').whereRaw('users.account_id = accounts.id')\n);\n```\n\n----------------------------------------\n\nTITLE: Dropping Materialized View if Exists with dropMaterializedViewIfExists - Knex.js\nDESCRIPTION: Drops a materialized view on the database if it exists. Only on PostgreSQL, CockroachDb, Redshift and Oracle. It takes the view name as an argument. This prevents errors if the materialized view does not exist.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/schema-builder.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nknex.schema.dropMaterializedViewIfExists('users_view');\n```\n\n----------------------------------------\n\nTITLE: Knex Insert with Catch and Then\nDESCRIPTION: This example shows Knex.js using promises with `.catch` to handle errors during insertion and `.then` to continue execution. It attempts to insert a row into 'accounts', catches potential errors, then selects from 'accounts' based on ID, logging the result and catching potential errors in the selection as well.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/interfaces.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nreturn knex\n  .insert({ id: 1, name: 'Test' }, 'id')\n  .into('accounts')\n  .catch(function (error) {\n    console.error(error);\n  })\n  .then(function () {\n    return knex.select('*').from('accounts').where('id', 1);\n  })\n  .then(function (rows) {\n    console.log(rows[0]);\n  })\n  .catch(function (error) {\n    console.error(error);\n  });\n```\n\n----------------------------------------\n\nTITLE: Calculating Sum for Multiple Columns in Knex.js\nDESCRIPTION: Calculates the sum of the values in both the 'products' and 'orders' columns. May not be supported by all database drivers.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_85\n\nLANGUAGE: JavaScript\nCODE:\n```\nknex('users').sum('products', 'orders');\n```\n\n----------------------------------------\n\nTITLE: Creating Column Check Constraint - checkNegative in Knex.js\nDESCRIPTION: Demonstrates how to add a check constraint on a column to ensure that the value is negative, using Knex.js.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/schema-builder.md#_snippet_53\n\nLANGUAGE: js\nCODE:\n```\nknex.schema.createTable('product', function (table) {\n  table.integer('price_decrease').checkNegative();\n});\n```\n\n----------------------------------------\n\nTITLE: Adding an onNotExists Clause with Knex.js\nDESCRIPTION: This code snippet demonstrates how to add an onNotExists clause to a join in Knex.js. It joins the 'users' and 'contacts' tables and adds a condition that the subquery must return no rows. Dependencies: Knex.js\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_155\n\nLANGUAGE: javascript\nCODE:\n```\nknex\n  .select('*')\n  .from('users')\n  .join('contacts', function () {\n    this.on('users.id', '=', 'contacts.id').onNotExists(function () {\n      this.select('*')\n        .from('accounts')\n        .whereRaw('users.account_id = accounts.id');\n    });\n  });\n```\n\n----------------------------------------\n\nTITLE: Clearing Order Clauses with Knex.js\nDESCRIPTION: This code snippet demonstrates how to clear all order clauses from the query, excluding subqueries. clear('order') is preferred. Dependencies: Knex.js\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_163\n\nLANGUAGE: javascript\nCODE:\n```\nknex.select().from('users').orderBy('name', 'desc').clearOrder();\n```\n\n----------------------------------------\n\nTITLE: Explicit Transaction Management with Async Code (Knex)\nDESCRIPTION: This snippet demonstrates how to use explicit transaction management with async code in Knex. It uses `knex.transaction` and calls `trx.rollback` within an async function. The `trx` parameter is the transaction object.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/faq/recipes.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nawait knex.transaction((trx) => {\n  async function stuff() {\n    trx.rollback(new Error('Foo'));\n  }\n  stuff().then(() => {\n    // do something\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Calculating Distinct Average with Knex.js\nDESCRIPTION: Calculates the distinct average of values in 'age' column.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_95\n\nLANGUAGE: JavaScript\nCODE:\n```\nknex('users').avgDistinct('age');\n```\n\n----------------------------------------\n\nTITLE: Deleting Rows with 'using' Syntax in Knex.js (PostgreSQL)\nDESCRIPTION: Deletes rows from the 'accounts' table using the 'using' syntax to specify the table for the join condition. This is an alternative way to express joins in delete statements, specifically for PostgreSQL.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_45\n\nLANGUAGE: JavaScript\nCODE:\n```\nknex('accounts')\n  .where('activated', false)\n  .using('accounts')\n  .whereRaw('accounts.id = users.account_id')\n  .del();\n```\n\n----------------------------------------\n\nTITLE: Creating Unique Constraint with Index Name and Deferrable Option in Knex.js\nDESCRIPTION: Shows how to define a unique constraint on a column using Knex.js schema builder. The example includes specifying a custom index name and setting the deferrable option, which is supported in databases such as Postgres and Oracle.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/schema-builder.md#_snippet_46\n\nLANGUAGE: js\nCODE:\n```\nknex.schema.table('users', function (table) {\n  table\n    .integer('user_id')\n    .unique({ indexName: 'user_unique_id', deferrable: 'immediate' });\n});\n```\n\n----------------------------------------\n\nTITLE: Calculating Average with Alias in Knex.js\nDESCRIPTION: Calculates the average of the 'age' column and assigns it the alias 'a'.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_90\n\nLANGUAGE: JavaScript\nCODE:\n```\nknex('users').avg('age as a');\n```\n\n----------------------------------------\n\nTITLE: Build and Test Knex\nDESCRIPTION: This shell script snippet builds the Knex project and runs a series of tests, excluding coverage tests. The tests include plain tests, binary tests, and tests for OracleDB and MSSQL database adapters. It also initializes, tests, and destroys the MSSQL database.\nSOURCE: https://github.com/knex/knex/blob/master/scripts/next-release-howto.md#_snippet_0\n\nLANGUAGE: Shell Script\nCODE:\n```\nnpm run build\n\n# run bunch of tests, but skipping coverage which doesn't really work locally at least\nnpm plaintest\nnpm bin_test\nnpm oracledb:test\nnpm mssql:init\nnpm mssql:test\nnpm mssql:destroy\n```\n\n----------------------------------------\n\nTITLE: Adding a Comment to a Column in Knex.js\nDESCRIPTION: Demonstrates how to add a comment to a column using Knex.js. The example creates a table with an 'email' column and adds a comment describing its purpose.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/schema-builder.md#_snippet_48\n\nLANGUAGE: js\nCODE:\n```\nknex.schema.createTable('accounts', function (t) {\n  t.increments().primary();\n  t.string('email').unique().comment('This is the email field');\n});\n```\n\n----------------------------------------\n\nTITLE: Finding Maximum Values for Multiple Columns in Knex.js\nDESCRIPTION: Finds the maximum values for 'age' and 'logins'. Note that multiple columns may not be supported by all drivers.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_78\n\nLANGUAGE: JavaScript\nCODE:\n```\nknex('users').max('age', 'logins');\n```\n\n----------------------------------------\n\nTITLE: Initializing Knex with fetchAsString (OracleDB)\nDESCRIPTION: This snippet shows how to configure Knex to return specific data types as strings for OracleDB. The `fetchAsString` option takes an array of types ('DATE', 'NUMBER', 'CLOB') that should be returned as strings instead of their default representations.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/index.md#_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nconst knex = require('knex')({\n  client: 'oracledb',\n  connection: {\n    /*...*/\n  },\n  fetchAsString: ['number', 'clob'],\n});\n```\n\n----------------------------------------\n\nTITLE: Adding an onNotBetween Clause with Knex.js\nDESCRIPTION: This code snippet demonstrates how to add an onNotBetween clause to a join in Knex.js. It joins the 'users' and 'contacts' tables and adds a condition that 'contacts.id' must not be between 5 and 30. Dependencies: Knex.js\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_157\n\nLANGUAGE: javascript\nCODE:\n```\nknex\n  .select('*')\n  .from('users')\n  .join('contacts', function () {\n    this.on('users.id', '=', 'contacts.id').onNotBetween(\n      'contacts.id',\n      [5, 30]\n    );\n  });\n```\n\n----------------------------------------\n\nTITLE: Augmenting Knex Tables Interface for Modern TypeScript Modules\nDESCRIPTION: This code snippet demonstrates how to augment the `Tables` interface in the `'knex/types/tables.js'` module, when using modern TypeScript module resolution settings (`node16`, `nodenext`, etc.). These settings require the declared module name to end with a `.js` extension. This is essential for the TypeScript compiler to correctly recognize and apply the type augmentations.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/index.md#_snippet_29\n\nLANGUAGE: TypeScript\nCODE:\n```\n// The trailing `.js` is required by the TypeScript compiler in certain configs:\ndeclare module 'knex/types/tables.js' {\n  // <----- Different module path!!!\n  interface Tables {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Stopping Docker Databases for Knex.js Tests\nDESCRIPTION: This bash command stops all docker databases that were previously started for Knex.js integration tests. It depends on the docker-compose configuration. This is primarily used for local development and testing.\nSOURCE: https://github.com/knex/knex/blob/master/CONTRIBUTING.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\nnpm run db:stop\n```\n\n----------------------------------------\n\nTITLE: Minimal Bug Reproduction Code with Knex.js\nDESCRIPTION: This snippet illustrates a minimal, reproducible example for bug reporting in Knex.js. It creates a Knex instance connected to a PostgreSQL database, creates a table, inserts data, and then destroys the connection. It requires the 'knex' package and assumes a PostgreSQL database is available.  The code demonstrates the basic structure required to quickly reproduce a problem using Knex.js\nSOURCE: https://github.com/knex/knex/blob/master/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst knex = require('knex')({\n  client: 'pg',\n  connection: 'postgres:///knex_test'\n});\n\nasync function main() {\n  await knex.schema.createTable(...);\n  await knex('table').insert({foo: 'bar'});\n  await knex.destroy();\n}\n\nmain();\n```\n\n----------------------------------------\n\nTITLE: Starting PostgreSQL Docker for Knex.js Tests\nDESCRIPTION: This bash command starts only the PostgreSQL docker database, for running specific Knex.js integration tests. It relies on a simplified docker-compose configuration that only runs PostgreSQL. This reduces the startup time and resource usage when only PostgreSQL tests are needed.\nSOURCE: https://github.com/knex/knex/blob/master/CONTRIBUTING.md#_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\nnpm run db:start:postgres\n```\n\n----------------------------------------\n\nTITLE: Knex migration with schemaName in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the `schemaName` parameter in Knex.js migrations, which replaces including the schema in the `tableName` parameter.  This is necessary from Knex.js version 0.14.5 onwards.\nSOURCE: https://github.com/knex/knex/blob/master/UPGRADING.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nawait knex.migrate.latest({\n  directory: 'src/services/orders/database/migrations',\n  tableName: 'orders_migrations',\n  schemaName: 'orders',\n});\n```\n\n----------------------------------------\n\nTITLE: Inserting JSON Value with Knex.js\nDESCRIPTION: This code illustrates how to insert a value into a JSON column using Knex.js's `jsonInsert` function. It demonstrates inserting both single values and JSON objects at a specified path, and it can be used with extracted values. A column alias can be specified for the result.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nknex('accounts').jsonInsert('json_col', '$.name', 'newName', 'newNameCol');\n\nknex('accounts').jsonInsert(\n  'json_col',\n  '$.name',\n  { name: 'newName' },\n  'newNameCol'\n);\n\nknex('accounts').jsonInsert(\n  knex.jsonExtract('json_col', '$.otherAccount'),\n  '$.name',\n  { name: 'newName' },\n  'newNameCol'\n);\n```\n\n----------------------------------------\n\nTITLE: Calculating Sum with Alias in Knex.js\nDESCRIPTION: Calculates the sum of the values in the 'products' column and aliases the result as 'p'.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_83\n\nLANGUAGE: JavaScript\nCODE:\n```\nknex('users').sum('products as p');\n```\n\n----------------------------------------\n\nTITLE: Running Development Server (Yarn)\nDESCRIPTION: This command starts the development server for the Knex.js Vitepress documentation. It uses yarn to execute the 'dev' script, allowing for local development and testing of the documentation.\nSOURCE: https://github.com/knex/knex/blob/master/docs/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn dev # or npm run dev\n```\n\n----------------------------------------\n\nTITLE: Creating Column Check Constraint - checkLength in Knex.js\nDESCRIPTION: Demonstrates how to add a check constraint on a column to ensure that the length of the string matches a specific criteria, using Knex.js.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/schema-builder.md#_snippet_57\n\nLANGUAGE: js\nCODE:\n```\nknex.schema.createTable('product', function (table) {\n  // operator can be =, !=, <=, >=, <, >\n  t.varchar('phone').checkLength('=', 8);\n});\n```\n\n----------------------------------------\n\nTITLE: Running Knex.js Tests\nDESCRIPTION: Sets the environment variable `KNEX_TEST` with the path to the database configuration file and then runs the tests using `npm test`. This is essential for executing the test suite correctly, replacing `/path/to/your/knex_config.js` with the actual path to your configuration file.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/faq/index.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ export KNEX_TEST='/path/to/your/knex_config.js'\n$ npm test\n```\n\n----------------------------------------\n\nTITLE: Webpack Migration Source Example in Knex.js (JavaScript)\nDESCRIPTION: This code defines a custom migration source class that integrates with Webpack. It utilizes `require.context` to dynamically load migration files from a specified directory within the Webpack bundle. The `getMigrations`, `getMigrationName`, and `getMigration` methods are implemented to retrieve migrations from the Webpack context.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/migrations.md#_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nconst path = require('path');\n\nclass WebpackMigrationSource {\n  constructor(migrationContext) {\n    this.migrationContext = migrationContext;\n  }\n\n  getMigrations() {\n    return Promise.resolve(this.migrationContext.keys().sort());\n  }\n\n  getMigrationName(migration) {\n    return path.parse(migration).base;\n  }\n\n  getMigration(migration) {\n    return this.migrationContext(migration);\n  }\n}\n\n// pass an instance of your migration source as knex config\nknex.migrate.latest({\n  migrationSource: new WebpackMigrationSource(\n    require.context('./migrations', false, /.js$/)\n  ),\n});\n\n// with webpack >=5, require.context will add\n// both the relative and absolute paths to the context\n// to avoid duplicate migration errors, you'll need\n// to filter out one or the other this example filters\n// out absolute paths, leaving only the relative\n// ones(./migrations/*.js):\nknex.migrate.latest({\n  migrationSource: new WebpackMigrationSource(\n    require.context('./migrations', false, /^.\\/.*\\.js$/)\n  ),\n});\n```\n\n----------------------------------------\n\nTITLE: Adding a HavingNotIn Clause with Knex.js\nDESCRIPTION: This code snippet demonstrates how to add a havingNotIn clause to the query using Knex.js, filtering grouped results based on whether a column's value is not in a specified array. Dependencies: Knex.js\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_174\n\nLANGUAGE: javascript\nCODE:\n```\nknex.select('*').from('users').havingNotIn('id', [5, 3, 10, 17]);\n```\n\n----------------------------------------\n\nTITLE: Configuring Query Context in Knex.js\nDESCRIPTION: Allows for configuring a context to be passed to the wrapIdentifier and postProcessResponse hooks. The context can be any kind of value and will be passed to the hooks without modification.  Requires Knex.js library.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_112\n\nLANGUAGE: javascript\nCODE:\n```\nknex('accounts as a1')\n  .queryContext({ foo: 'bar' })\n  .select(['a1.email', 'a2.email']);\n```\n\n----------------------------------------\n\nTITLE: Migrating Custom Clients to Classes in JavaScript\nDESCRIPTION: This code illustrates how to migrate custom Knex.js clients from the old function-based approach to the new class-based approach. This change is required when upgrading to Knex.js version 1.0.0 or later, as clients are now classes instead of new-able functions.\nSOURCE: https://github.com/knex/knex/blob/master/UPGRADING.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst Client = require('knex');\nconst { inherits } = require('util');\n\n// old\nfunction CustomClient(config) {\n  Client.call(this, config);\n  // construction logic\n}\ninherits(CustomClient, Client);\nCustomClient.prototype.methodOverride = function () {\n  // logic\n};\n\n// new\nclass CustomClient extends Client {\n  // node 12+\n  driverName = 'abcd';\n  constructor(config) {\n    super(config);\n    this.driverName = 'abcd'; // bad way, will not work\n    // construction logic\n  }\n  methodOverride() {\n    // logic\n  }\n}\n// alternative to declare driverName\nCustomClient.prototype.driverName = 'abcd';\n```\n\n----------------------------------------\n\nTITLE: Knex Start Event Listener\nDESCRIPTION: This snippet demonstrates how to listen for the 'start' event in Knex.js.  The 'start' event is fired right before a query-builder is compiled. The builder can be modified, though it is not recommended.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/interfaces.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nknex\n  .select('*')\n  .from('users')\n  .on('start', function (builder) {\n    builder.where('IsPrivate', 0);\n  })\n  .then(function (Rows) {\n    //Only contains Rows where IsPrivate = 0\n  })\n  .catch(function (error) {};\n```\n\n----------------------------------------\n\nTITLE: Creating a Migration File with a Stub\nDESCRIPTION: Creates a new migration file using a custom stub template.  If a stub path is provided, it must be relative to the knexfile location. If a  is used, the stub is selected by its file name.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/migrations.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ knex migrate:make --stub\n\n# or\n\n$ knex migrate:make --stub\n```\n\n----------------------------------------\n\nTITLE: Finding Minimum Value with Alias in Knex.js\nDESCRIPTION: Finds the minimum value in the 'age' column of the 'users' table and assigns the alias 'a' to the result. Shows how to customize output names.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_67\n\nLANGUAGE: JavaScript\nCODE:\n```\nknex('users').min('age', { as: 'a' });\n```\n\n----------------------------------------\n\nTITLE: Augmenting Knex Tables Interface in TypeScript\nDESCRIPTION: This code snippet demonstrates how to augment the `Tables` interface in the `'knex/types/tables'` module to provide custom type definitions for database tables. This allows for improved type safety and auto-completion when using Knex.js with TypeScript. It defines interfaces for `User` and `users_composite` tables, including base types, insert types, and update types.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/index.md#_snippet_28\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Knex } from 'knex';\n\ndeclare module 'knex/types/tables' {\n  interface User {\n    id: number;\n    name: string;\n    created_at: string;\n    updated_at: string;\n  }\n\n  interface Tables {\n    // This is same as specifying `knex<User>('users')`\n    users: User;\n    // For more advanced types, you can specify separate type\n    // for base model, \"insert\" type and \"update\" type.\n    // But first: notice that if you choose to use this,\n    // the basic typing showed above can be ignored.\n    // So, this is like specifying\n    //    knex\n    //    .insert<{ name: string }>({ name: 'name' })\n    //    .into<{ name: string, id: number }>('users')\n    users_composite: Knex.CompositeTableType<\n      // This interface will be used for return type and\n      // `where`, `having` etc where full type is required\n      User,\n      // Specifying \"insert\" type will also make sure\n      // data matches interface in full. Meaning\n      // if interface is `{ a: string, b: string }`,\n      // `insert({ a: '' })` will complain about missing fields.\n      //\n      // For example, this will require only \"name\" field when inserting\n      // and make created_at and updated_at optional.\n      // And \"id\" can't be provided at all.\n      // Defaults to \"base\" type.\n      Pick<User, 'name'> & Partial<Pick<User, 'created_at' | 'updated_at'>>,\n      // This interface is used for \"update()\" calls.\n      // As opposed to regular specifying interface only once,\n      // when specifying separate update interface, user will be\n      // required to match it  exactly. So it's recommended to\n      // provide partial interfaces for \"update\". Unless you want to always\n      // require some field (e.g., `Partial<User> & { updated_at: string }`\n      // will allow updating any field for User but require updated_at to be\n      // always provided as well.\n      //\n      // For example, this wil allow updating all fields except \"id\".\n      // \"id\" will still be usable for `where` clauses so\n      //      knex('users_composite')\n      //      .update({ name: 'name2' })\n      //      .where('id', 10)`\n      // will still work.\n      // Defaults to Partial \"insert\" type\n      Partial<Omit<User, 'id'>>\n    >;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Dropping Check Constraints in Knex.js\nDESCRIPTION: Demonstrates how to drop existing check constraints from a table using Knex.js, specifying an array of constraint names to remove.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/schema-builder.md#_snippet_59\n\nLANGUAGE: js\nCODE:\n```\nknex.schema.createTable('product', function (table) {\n  table.integer('price').checkPositive('price_check');\n  table\n    .integer('price_proportion')\n    .checkBetween([0, 100], 'price_proportion_check');\n  table.dropChecks(['price_check', 'price_proportion_check']);\n});\n```\n\n----------------------------------------\n\nTITLE: Selecting with noWait in Knex.js\nDESCRIPTION: Selects all columns from 'tableName', failing immediately if any selected rows are locked. Requires a lock mode (forUpdate or forShare) to be specified beforehand. Only supported on MySQL 8.0+, MariaDB-10.3+ and PostgreSQL 9.5+.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_56\n\nLANGUAGE: JavaScript\nCODE:\n```\nknex('tableName').select('*').forUpdate().noWait();\n```\n\n----------------------------------------\n\nTITLE: Adding a HavingNull Clause with Knex.js\nDESCRIPTION: This code snippet demonstrates how to add a havingNull clause to the query using Knex.js, filtering grouped results based on whether a column's value is null. Dependencies: Knex.js\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_175\n\nLANGUAGE: javascript\nCODE:\n```\nknex.select('*').from('users').havingNull('email');\n```\n\n----------------------------------------\n\nTITLE: Adding an onNotIn Clause with Knex.js\nDESCRIPTION: This code snippet demonstrates how to add an onNotIn clause to a join in Knex.js. It joins the 'users' and 'contacts' tables and adds a condition that 'contacts.id' must not be in the specified array. Dependencies: Knex.js\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_151\n\nLANGUAGE: javascript\nCODE:\n```\nknex\n  .select('*')\n  .from('users')\n  .join('contacts', function () {\n    this.on('users.id', '=', 'contacts.id').onNotIn(\n      'contacts.id',\n      [7, 15, 23, 41]\n    );\n  });\n```\n\n----------------------------------------\n\nTITLE: Querying with whereNotBetween - Knex.js\nDESCRIPTION: Shows how to use `whereNotBetween` to filter results outside a range of values. Filters users where 'votes' is not between 1 and 100.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_133\n\nLANGUAGE: javascript\nCODE:\n```\nknex('users').whereNotBetween('votes', [1, 100]);\n```\n\n----------------------------------------\n\nTITLE: SQL Insert Statement with NULL Values\nDESCRIPTION: This is an example of a SQL insert statement that shows how NULL values are used when the `useNullAsDefault` option is enabled in Knex.js and undefined keys are encountered during a multi-row insert. This ensures that NULL is explicitly inserted into the database.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_30\n\nLANGUAGE: sql\nCODE:\n```\ninsert into `coords` (`x`, `y`) values (20, NULL), (NULL, 30), (10, 20)\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Knex with compileSqlOnError Flag\nDESCRIPTION: This snippet demonstrates configuring Knex to display parameterized SQL instead of compiled SQL in error messages by setting `compileSqlOnError` to `false`. This can be helpful for security by hiding sensitive data in logs.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/index.md#_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nconst knex = require('knex')({\n  compileSqlOnError: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Finding Minimum Value with String Alias in Knex.js\nDESCRIPTION: Finds the minimum value in the 'age' column of the 'users' table and aliases the result as 'a' using string aliasing.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_68\n\nLANGUAGE: JavaScript\nCODE:\n```\nknex('users').min('age as a');\n```\n\n----------------------------------------\n\nTITLE: Configuring Query Context with queryContext - Knex.js\nDESCRIPTION: Allows configuring a context to be passed to the [wrapIdentifier](/guide/#wrapidentifier) hook. The context can be any kind of value and will be passed to `wrapIdentifier` without modification. This is useful for customizing identifier quoting based on environment or user-specific settings.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/schema-builder.md#_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nknex.schema.queryContext({ foo: 'bar' }).table('users', function (table) {\n  table.string('first_name');\n  table.string('last_name');\n});\n```\n\n----------------------------------------\n\nTITLE: Updating QueryBuilder Augmentation in TypeScript\nDESCRIPTION: This code shows how to update the syntax for QueryBuilder augmentation in TypeScript when upgrading to Knex.js 0.95.0 or later.  The namespace needs to be properly declared for the augmentation to work.\nSOURCE: https://github.com/knex/knex/blob/master/UPGRADING.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare module 'knex' {\n  namespace Knex {\n    interface QueryBuilder {\n      paginate<TResult = any[]>(\n        params: IPaginateParams\n      ): KnexQB<any, IWithPagination<TResult>>;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Client\nDESCRIPTION: This snippet shows to use different clients for query building using knex.js\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/index.md#_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nconst pg = require('knex')({ client: 'pg' });\n\nknex('table').insert({ a: 'b' }).returning('*').toString();\n// \"insert into \\\"table\\\" (\\\"a\\\") values ('b')\"\n\npg('table').insert({ a: 'b' }).returning('*').toString();\n// \"insert into \\\"table\\\" (\\\"a\\\") values ('b') returning *\"\n```\n\n----------------------------------------\n\nTITLE: Performing Left Outer Join with Knex.js\nDESCRIPTION: This code snippet demonstrates how to perform a left outer join using Knex.js. It shows two ways to specify the join condition: using column names directly and using a function for more complex conditions. Dependencies: Knex.js\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_144\n\nLANGUAGE: javascript\nCODE:\n```\nknex\n  .select('*')\n  .from('users')\n  .leftOuterJoin('accounts', 'users.id', 'accounts.user_id');\n\nknex\n  .select('*')\n  .from('users')\n  .leftOuterJoin('accounts', function () {\n    this.on('accounts.id', '=', 'users.account_id').orOn(\n      'accounts.owner_id',\n      '=',\n      'users.id'\n    );\n  });\n```\n\n----------------------------------------\n\nTITLE: Removing JSON Value with Knex.js\nDESCRIPTION: This example demonstrates how to remove a value from a JSON column using Knex.js's `jsonRemove` function. It shows how to remove a value at a specified path, and includes the optional alias parameter.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nknex('accounts').jsonRemove('json_col', '$.name', 'colWithRemove');\n\nknex('accounts').jsonInsert(\n  'json_col',\n  '$.name',\n  { name: 'newName' },\n  'newNameCol'\n);\n```\n\n----------------------------------------\n\nTITLE: Adding an onBetween Clause with Knex.js\nDESCRIPTION: This code snippet demonstrates how to add an onBetween clause to a join in Knex.js. It joins the 'users' and 'contacts' tables and adds a condition that 'contacts.id' must be between 5 and 30. Dependencies: Knex.js\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_156\n\nLANGUAGE: javascript\nCODE:\n```\nknex\n  .select('*')\n  .from('users')\n  .join('contacts', function () {\n    this.on('users.id', '=', 'contacts.id').onBetween('contacts.id', [5, 30]);\n  });\n```\n\n----------------------------------------\n\nTITLE: Launching Knex.js with Node.js v10 for ESM (Bash)\nDESCRIPTION: This bash command demonstrates how to launch Knex.js on Node.js v10 while utilizing ECMAScript modules (ESM). It uses the `--experimental-modules` flag to enable ESM support in Node.js and then executes the Knex CLI.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/migrations.md#_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\n# launching knex on Node v10 to use mjs/cjs modules\nnode --experimental-modules ./node_modules/.bin/knex $@\n```\n\n----------------------------------------\n\nTITLE: Specifying Databases for Knex.js Tests\nDESCRIPTION: This bash command sets the `DB` environment variable to specify which database dialects to test with Knex.js. It then runs the tests. This allows contributors to run specific tests or sets of tests, instead of all tests.\nSOURCE: https://github.com/knex/knex/blob/master/CONTRIBUTING.md#_snippet_6\n\nLANGUAGE: Bash\nCODE:\n```\n$ DB='postgres mysql' npm test\n```\n\n----------------------------------------\n\nTITLE: Knex Transaction Isolation Level (TypeScript)\nDESCRIPTION: This TypeScript example shows how to specify an isolation level for a transaction using the `isolationLevel` config parameter. The example demonstrates a simple read skew scenario, where the results of two select queries within the same transaction may differ depending on the isolation level.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/transactions.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// Simple read skew example\nconst isolationLevel = 'read committed';\nconst trx = await knex.transaction({ isolationLevel });\nconst result1 = await trx(tableName).select();\nawait knex(tableName).insert({ id: 1, value: 1 });\nconst result2 = await trx(tableName).select();\nawait trx.commit();\n// result1 may or may not deep equal result2 depending on isolation level\n```\n\n----------------------------------------\n\nTITLE: Knex Query Response Event Listener\nDESCRIPTION: This example shows how to attach a listener for the `query-response` event in Knex.js, providing access to the query result, query information, and the query builder used. This allows for processing the result and logging of the query, query data, and builder.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/interfaces.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nknex\n  .select('*')\n  .from('users')\n  .on('query-response', function (response, obj, builder) {\n    // ...\n  })\n  .then(function (response) {\n    // Same response as the emitted event\n  })\n  .catch(function (error) {});\n```\n\n----------------------------------------\n\nTITLE: Setting Collation for a Column in Knex.js\nDESCRIPTION: Illustrates how to set the collation for a column using Knex.js, specifically for MySQL databases.  It shows how to create a table and specify the collation for the 'email' column.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/schema-builder.md#_snippet_49\n\nLANGUAGE: js\nCODE:\n```\nknex.schema.createTable('users', function (t) {\n  t.increments();\n  t.string('email').unique().collate('utf8_unicode_ci');\n});\n```\n\n----------------------------------------\n\nTITLE: Knex As (TypeScript)\nDESCRIPTION: Shows how to alias a subquery using the `.as()` method.  The example shows how the alias is ignored if not used on a subquery.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nknex\n  .avg('sum_column1')\n  .from(function () {\n    this.sum('column1 as sum_column1').from('t1').groupBy('column1').as('t1');\n  })\n  .as('ignored_alias');\n```\n\n----------------------------------------\n\nTITLE: Rank Function in Knex.js\nDESCRIPTION: Adds a rank() call to the query.  It supports string, raw, and function syntaxes for defining the ordering and partitioning. Requires Knex.js library and a database connection.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_104\n\nLANGUAGE: javascript\nCODE:\n```\nknex('users').select('*').rank('alias_name', 'email', 'firstName');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nknex('users')\n  .select('*')\n  .rank('alias_name', ['email', 'address'], ['firstName', 'lastName']);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nknex('users')\n  .select('*')\n  .rank('alias_name', knex.raw('order by ??', ['email']));\n```\n\nLANGUAGE: javascript\nCODE:\n```\nknex('users')\n  .select('*')\n  .rank('alias_name', function () {\n    this.orderBy('email').partitionBy('firstName');\n  });\n```\n\n----------------------------------------\n\nTITLE: Creating a Not Materialized View with Knex.js\nDESCRIPTION: This code demonstrates how to create a 'not materialized' view using Knex.js with the `withNotMaterialized` function. Similar to `withMaterialized`, it shows three variations: using a raw query, using a raw query with specified columns, and using a callback function. Not Materialized views are the opposite of materialized views, forcing the query to be re-computed each time, which can be useful for frequently changing data.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nknex\n  .withNotMaterialized(\n    'with_alias',\n    knex.raw('select * from \"books\" where \"author\" = ?', 'Test')\n  )\n  .select('*')\n  .from('with_alias');\n\nknex\n  .withNotMaterialized(\n    'with_alias',\n    ['title'],\n    knex.raw('select \"title\" from \"books\" where \"author\" = ?', 'Test')\n  )\n  .select('*')\n  .from('with_alias');\n\nknex\n  .withNotMaterialized('with_alias', (qb) => {\n    qb.select('*').from('books').where('author', 'Test');\n  })\n  .select('*')\n  .from('with_alias');\n```\n\n----------------------------------------\n\nTITLE: Setting Default Value with Constraint Name in Knex.js\nDESCRIPTION: Illustrates how to set a default value for a column in Knex.js, including how to specify a custom constraint name in MSSQL to ensure a specific constraint name is used.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/schema-builder.md#_snippet_47\n\nLANGUAGE: js\nCODE:\n```\ncolumn.defaultTo('value', { constraintName: 'df_table_value' });\n```\n\n----------------------------------------\n\nTITLE: Selecting with forUpdate Lock in Knex.js\nDESCRIPTION: Selects all columns from 'tableName' with a `FOR UPDATE` lock.  Requires a transaction to be specified.  This prevents other transactions from modifying the selected rows until the current transaction is complete. Supported on PostgreSQL and MySQL.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_51\n\nLANGUAGE: JavaScript\nCODE:\n```\nknex('tableName').transacting(trx).forUpdate().select('*');\n```\n\n----------------------------------------\n\nTITLE: Dropping Materialized View with dropMaterializedView - Knex.js\nDESCRIPTION: Drops a materialized view on the database. Only on PostgreSQL, CockroachDb, Redshift and Oracle. It takes the view name as an argument. This permanently removes the materialized view from the database.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/schema-builder.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nknex.schema.dropMaterializedView('users_view');\n```\n\n----------------------------------------\n\nTITLE: Initializing Knex with Unix Domain Socket\nDESCRIPTION: This snippet demonstrates how to initialize Knex.js with a Unix domain socket for database connection.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/index.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst knex = require('knex')({\n  client: 'mysql',\n  connection: {\n    socketPath: '/path/to/socket.sock',\n    user: 'your_database_user',\n    password: 'your_database_password',\n    database: 'myapp_test',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Calculating Sum with Raw Expression in Knex.js\nDESCRIPTION: Calculates the sum of 'products' using a raw expression.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_87\n\nLANGUAGE: JavaScript\nCODE:\n```\nknex('users').sum(knex.raw('??', ['products']));\n```\n\n----------------------------------------\n\nTITLE: Generated Migration Extension Configuration\nDESCRIPTION: Knexfile configuration to control the extension of generated migration files.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/migrations.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  client: 'pg',\n  migrations: {\n    extension: 'ts',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Using Timestamp with Default and Precision\nDESCRIPTION: Shows how to add a timestamp column with a default value and specified precision using the `timestamp` method. This is applicable to PostgreSQL and MySQL, setting precision to 6 in the example.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/schema-builder.md#_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\ntable.timestamp('created_at').defaultTo(knex.fn.now());\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntable.timestamp('created_at', { precision: 6 }).defaultTo(knex.fn.now(6));\n```\n\n----------------------------------------\n\nTITLE: Calculating Average for Multiple Columns with Object Alias\nDESCRIPTION: Calculates the average for both 'age' and 'logins' columns with object alias syntax.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_93\n\nLANGUAGE: JavaScript\nCODE:\n```\nknex('users').avg({ avg: ['age', 'logins'] });\n```\n\n----------------------------------------\n\nTITLE: Querying with whereJsonObject - Knex.js\nDESCRIPTION: Illustrates using `whereJsonObject` for comparing a JSON column with a JSON object. Filters users where the 'json_col' matches { name: 'user_name' }.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_137\n\nLANGUAGE: javascript\nCODE:\n```\nknex('users').whereJsonObject('json_col', { name: 'user_name' });\n```\n\n----------------------------------------\n\nTITLE: TypeScript Definitions for Knex Builder Extensions\nDESCRIPTION: This TypeScript code snippet provides the necessary type definitions to support the custom builder extensions added in the JavaScript code. It uses declaration merging to augment the existing Knex interfaces with the new `functionName` methods for SchemaBuilder, TableBuilder, ViewBuilder, and ColumnBuilder. This allows TypeScript to correctly recognize and type-check the custom functions.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/extending.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport 'knex';\ndeclare module 'knex' {\n  namespace Knex {\n    interface SchemaBuilder {\n      functionName(): Knex.SchemaBuilder;\n    }\n    interface TableBuilder {\n      functionName(): Knex.TableBuilder;\n    }\n    interface ViewBuilder {\n      functionName(): Knex.ViewBuilder;\n    }\n    interface ColumnBuilder {\n      functionName(): Knex.ColumnBuilder;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Knex Query to String\nDESCRIPTION: This example shows how to convert a Knex.js query to a SQL string using `.toString()`. This is useful for debugging purposes, but should not be used to directly execute queries.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/interfaces.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst toStringQuery = knex.select('*').from('users').where('id', 1).toString();\n\n// Outputs: console.log(toStringQuery);\n// select * from \"users\" where \"id\" = 1\n```\n\n----------------------------------------\n\nTITLE: Dense Rank Function in Knex.js\nDESCRIPTION: Adds a dense_rank() call to the query. It supports string, raw, and function syntaxes for defining the ordering and partitioning. Requires Knex.js library and a database connection.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_103\n\nLANGUAGE: javascript\nCODE:\n```\nknex('users').select('*').denseRank('alias_name', 'email', 'firstName');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nknex('users')\n  .select('*')\n  .denseRank('alias_name', ['email', 'address'], ['firstName', 'lastName']);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nknex('users')\n  .select('*')\n  .denseRank('alias_name', knex.raw('order by ??', ['email']));\n```\n\nLANGUAGE: javascript\nCODE:\n```\nknex('users')\n  .select('*')\n  .denseRank('alias_name', function () {\n    this.orderBy('email').partitionBy('firstName');\n  });\n```\n\n----------------------------------------\n\nTITLE: Knex FromRaw (JavaScript)\nDESCRIPTION: Shows how to use the `.fromRaw()` method to specify a raw SQL fragment as the table source.  It includes an example with a parameterized query.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nknex.select('*').fromRaw('(select * from \"users\" where \"age\" > ?)', '18');\n```\n\n----------------------------------------\n\nTITLE: Using Knex in JavaScript with require\nDESCRIPTION: This snippet shows how to use Knex in JavaScript using the `require` syntax. It ensures that IDE autocomplete works correctly when using JavaScript instead of TypeScript. This is applicable from Knex.js version 0.95.0 and later.\nSOURCE: https://github.com/knex/knex/blob/master/UPGRADING.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst knex = require('knex').knex({\n  //connection parameters\n});\n```\n\n----------------------------------------\n\nTITLE: Selecting with forShare Lock in Knex.js\nDESCRIPTION: Selects all columns from 'tableName' with a `FOR SHARE` lock (or `LOCK IN SHARE MODE` in MySQL). Requires a transaction to be specified. This allows other transactions to read the selected rows, but prevents them from modifying them. Supported on PostgreSQL and MySQL.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_52\n\nLANGUAGE: JavaScript\nCODE:\n```\nknex('tableName').transacting(trx).forShare().select('*');\n```\n\n----------------------------------------\n\nTITLE: Adding havingRaw Clause with Knex.js\nDESCRIPTION: This snippet shows how to add a havingRaw clause to a Knex.js query. It groups the results by 'count', orders them by 'name' in descending order, and then filters the groups where 'count' is greater than 100. Requires Knex.js to be properly configured and connected to a database.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_181\n\nLANGUAGE: javascript\nCODE:\n```\nknex('users')\n  .groupBy('count')\n  .orderBy('name', 'desc')\n  .havingRaw('count > ?', [100]);\n```\n\n----------------------------------------\n\nTITLE: Calculating Sum with Knex.js\nDESCRIPTION: Calculates the sum of the values in the 'products' column of the 'users' table. Basic aggregate sum function.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_82\n\nLANGUAGE: JavaScript\nCODE:\n```\nknex('users').sum('products');\n```\n\n----------------------------------------\n\nTITLE: Counting Rows with Alias in Knex.js\nDESCRIPTION: Counts the number of rows in the 'users' table where the 'active' column is present and assigns the alias 'a' to the count result. This example demonstrates how to provide custom names to aggregated results.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_58\n\nLANGUAGE: JavaScript\nCODE:\n```\nknex('users').count('active', { as: 'a' });\n```\n\n----------------------------------------\n\nTITLE: Querying with whereJsonSupersetOf - Knex.js\nDESCRIPTION: Shows how to use `whereJsonSupersetOf` to filter results where a JSON column contains a superset of the provided JSON. Filters users where 'hobbies' includes { sport: 'foot' }.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_139\n\nLANGUAGE: javascript\nCODE:\n```\nknex('users').whereJsonSupersetOf('hobbies', { sport: 'foot' });\n```\n\n----------------------------------------\n\nTITLE: Refreshing Materialized View with refreshMaterializedView - Knex.js\nDESCRIPTION: Refreshes a materialized view on the database. Only on PostgreSQL, CockroachDb, Redshift and Oracle. It takes the view name as an argument. This updates the view's data based on the underlying tables.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/schema-builder.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nknex.schema.refreshMaterializedView('users_view');\n```\n\n----------------------------------------\n\nTITLE: Escaping Named Bindings in Raw Query (Knex.js)\nDESCRIPTION: This code illustrates how to escape named bindings using `\\:` in raw queries to prevent them from being replaced with values.  This allows including literal named placeholders in the raw SQL.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/raw.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nknex\n  .select('*')\n  .from('users')\n  .whereRaw(\":property: = '\\\\:value' OR \\\\:property: = :value\", {\n    property: 'name',\n    value: 'Bob',\n  });\n```\n\n----------------------------------------\n\nTITLE: Deleting Rows with Returning and Trigger Modification (MSSQL)\nDESCRIPTION: Deletes rows from the 'books' table where the 'title' is 'Alice in Wonderland', returning the 'id' and 'title' columns. The `includeTriggerModifications` option is used for MSSQL to handle triggers and ensure correct return values.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_43\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Adding the option includeTriggerModifications allows you\n// to run statements on tables that contain triggers.\n// Only affects MSSQL.\nknex('books')\n  .where('title', 'Alice in Wonderland')\n  .del(['id', 'title'], { includeTriggerModifications: true });\n```\n\n----------------------------------------\n\nTITLE: Decrementing Column Value in Knex.js\nDESCRIPTION: Decrements the specified column's value by a given amount using Knex.js. Similar to increment, it supports single column decrement as well as multiple column decrement using object syntax. Requires Knex.js library and a database connection.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_97\n\nLANGUAGE: javascript\nCODE:\n```\nknex('accounts').where('userid', '=', 1).decrement('balance', 5);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nknex('accounts').where('id', '=', 1).decrement({\n  balance: 50,\n});\n```\n\n----------------------------------------\n\nTITLE: Seed File Structure for ESM in Knex.js (TypeScript)\nDESCRIPTION: This TypeScript code illustrates the structure of a seed file when using ECMAScript Modules (ESM) with Knex.js. The seed file must export a named function `seed` which accepts the Knex instance as an argument. This function is responsible for inserting or manipulating data in the database during the seeding process.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/migrations.md#_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\n// file: seed.js\n/**\n * Same as with the CommonJS modules\n * You will need to export a \"seed\" named function.\n * */\nexport function seed(knex) {\n  // ... seed logic here\n}\n```\n\n----------------------------------------\n\nTITLE: Running Seed Files\nDESCRIPTION: Runs all seed files in alphabetical order. Use the `--specific` option to run specific seed files.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/migrations.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ knex seed:run\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ knex seed:run --specific=seed-filename.js --specific=another-seed-filename.js\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Seed Source in Knex.js\nDESCRIPTION: This code snippet demonstrates the implementation of a custom seed source in Knex.js. It defines a class `MySeedSource` with methods to retrieve a list of seed names (`getSeeds`) and the corresponding seed function (`getSeed`). The `getSeeds` method returns a Promise that resolves to an array of seed names. The `getSeed` method takes a seed name as input and returns a Knex seeding function based on the seed name. An instance of this class is then used in the `knex.seed.run` method to execute the seeding process.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/migrations.md#_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\n// Create a custom seed source class\nclass MySeedSource {\n  // Must return a Promise containing a list of seeds.\n  // Seeds can be whatever you want, they will be passed as\n  // arguments to getSeed\n  getSeeds() {\n    // In this example we are just returning seed names\n    return Promise.resolve(['seed1']);\n  }\n\n  getSeed(seed) {\n    switch (seed) {\n      case 'seed1':\n        return (knex) => {\n          /* ... */\n        };\n    }\n  }\n}\n\n// pass an instance of your seed source as knex config\nknex.seed.run({ seedSource: new MySeedSource() });\n```\n\n----------------------------------------\n\nTITLE: Querying with whereNotNull - Knex.js\nDESCRIPTION: Shows how to use `whereNotNull` to filter results where a specific column is not null. Filters users where 'created_at' is not null.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_129\n\nLANGUAGE: javascript\nCODE:\n```\nknex('users').whereNotNull('created_at');\n```\n\n----------------------------------------\n\nTITLE: Conditional Updates During Merge with Knex.js\nDESCRIPTION: This snippet shows how to add a WHERE clause to conditionally update only matching rows during an upsert operation in PostgreSQL/SQLite. This example updates rows only where the `updated_at` column is less than a specified timestamp.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\nconst timestamp = Date.now();\nknex('tableName')\n  .insert({\n    email: 'ignore@example.com',\n    name: 'John Doe',\n    created_at: timestamp,\n    updated_at: timestamp,\n  })\n  .onConflict('email')\n  .merge({\n    name: 'John Doe',\n    updated_at: timestamp,\n  })\n  .where('updated_at', '<', timestamp);\n```\n\n----------------------------------------\n\nTITLE: Creating an Except Query with Knex.js\nDESCRIPTION: This code demonstrates creating an `except` query with Knex.js. The except method is unsupported on MySQL. Examples are shown using a callback, an array of queries, and raw statements.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nknex\n  .select('*')\n  .from('users')\n  .whereNull('last_name')\n  .except(function () {\n    this.select('*').from('users').whereNull('first_name');\n  });\n\nknex\n  .select('*')\n  .from('users')\n  .whereNull('last_name')\n  .except([knex.select('*').from('users').whereNull('first_name')]);\n\nknex\n  .select('*')\n  .from('users')\n  .whereNull('last_name')\n  .except(\n    knex.raw('select * from users where first_name is null'),\n    knex.raw('select * from users where email is null')\n  );\n```\n\n----------------------------------------\n\nTITLE: Adding a HavingExists Clause with Knex.js\nDESCRIPTION: This code snippet demonstrates how to add a havingExists clause to the query using Knex.js, filtering grouped results based on whether a subquery returns any rows. Dependencies: Knex.js\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_177\n\nLANGUAGE: javascript\nCODE:\n```\nknex\n  .select('*')\n  .from('users')\n  .havingExists(function () {\n    this.select('*')\n      .from('accounts')\n      .whereRaw('users.account_id = accounts.id');\n  });\n```\n\n----------------------------------------\n\nTITLE: Counting Multiple Columns with Object Alias in Knex.js\nDESCRIPTION: Counts the number of rows in the 'users' table based on the 'id' and 'active' columns using an object alias 'count'.  Note that some database drivers might not support multiple columns in count.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_63\n\nLANGUAGE: JavaScript\nCODE:\n```\nknex('users').count({ count: ['id', 'active'] });\n```\n\n----------------------------------------\n\nTITLE: Performing Right Join with Knex.js\nDESCRIPTION: This code snippet demonstrates how to perform a right join using Knex.js. It shows two ways to specify the join condition: using column names directly and using a function for more complex conditions. Dependencies: Knex.js\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_145\n\nLANGUAGE: javascript\nCODE:\n```\nknex\n  .select('*')\n  .from('users')\n  .rightJoin('accounts', 'users.id', 'accounts.user_id');\n\nknex\n  .select('*')\n  .from('users')\n  .rightJoin('accounts', function () {\n    this.on('accounts.id', '=', 'users.account_id').orOn(\n      'accounts.owner_id',\n      '=',\n      'users.id'\n    );\n  });\n```\n\n----------------------------------------\n\nTITLE: Knex Pipe to Writable Stream\nDESCRIPTION: This snippet shows how to pipe a Knex.js query stream directly to a writable stream using the `.pipe()` method, which is a concise way to handle streaming data from a database query.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/interfaces.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst stream = knex.select('*').from('users').pipe(writableStream);\n```\n\n----------------------------------------\n\nTITLE: Creating Primary Key with Constraint and Deferrable Option in Knex.js\nDESCRIPTION: Demonstrates how to define a primary key constraint on a column using Knex.js schema builder, specifying a custom constraint name and setting the deferrable option. This allows the constraint to be deferred until the end of the transaction in databases like Postgres and Oracle.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/schema-builder.md#_snippet_45\n\nLANGUAGE: js\nCODE:\n```\nknex.schema.table('users', function (table) {\n  table.integer('user_id').primary('email', {\n    constraintName: 'users_primary_key',\n    deferrable: 'deferred',\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Finding Minimum Value with Raw Expression in Knex.js\nDESCRIPTION: Finds the minimum value for the 'age' column using a raw expression.  Demonstrates flexibility with raw SQL.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_73\n\nLANGUAGE: JavaScript\nCODE:\n```\nknex('users').min(knex.raw('??', ['age']));\n```\n\n----------------------------------------\n\nTITLE: Knex Transaction Execution Promise (TypeScript)\nDESCRIPTION: This TypeScript example shows how to access the promise that gets resolved after the transaction is rolled back or committed, using the `executionPromise` field. It demonstrates this for both transaction providers and regular transactions.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/transactions.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst trxProvider = knex.transactionProvider();\nconst trx = await trxProvider();\nconst trxPromise = trx.executionPromise;\n\nconst trx2 = await knex.transaction();\nconst trx2Promise = trx2.executionPromise;\n\nconst trxInitPromise = new Promise(async (resolve, reject) => {\n  knex.transaction((transaction) => {\n    resolve(transaction);\n  });\n});\nconst trx3 = await trxInitPromise;\nconst trx3Promise = trx3.executionPromise;\n```\n\n----------------------------------------\n\nTITLE: Adding an onExists Clause with Knex.js\nDESCRIPTION: This code snippet demonstrates how to add an onExists clause to a join in Knex.js. It joins the 'users' and 'contacts' tables and adds a condition that the subquery must return at least one row. Dependencies: Knex.js\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_154\n\nLANGUAGE: javascript\nCODE:\n```\nknex\n  .select('*')\n  .from('users')\n  .join('contacts', function () {\n    this.on('users.id', '=', 'contacts.id').onExists(function () {\n      this.select('*')\n        .from('accounts')\n        .whereRaw('users.account_id = accounts.id');\n    });\n  });\n```\n\n----------------------------------------\n\nTITLE: Finding Minimum Values for Multiple Columns with Object Alias\nDESCRIPTION: Finds the minimum values for both the 'age' and 'experience' columns in the 'users' table, assigning aliases 'a' and 'b', respectively, using object aliasing.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_70\n\nLANGUAGE: JavaScript\nCODE:\n```\nknex('users').min({ a: 'age', b: 'experience' });\n```\n\n----------------------------------------\n\nTITLE: Custom Migration Source Class in Knex.js (JavaScript)\nDESCRIPTION: This code defines a custom migration source class for Knex.js. It overrides the `getMigrations`, `getMigrationName`, and `getMigration` methods to provide a custom way of loading and retrieving migrations. The migrations are defined within the class itself. It returns a migration source object.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/migrations.md#_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n// Create a custom migration source class\nclass MyMigrationSource {\n  // Must return a Promise containing a list of migrations.\n  // Migrations can be whatever you want,\n  // they will be passed as arguments to getMigrationName\n  // and getMigration\n  getMigrations() {\n    // In this example we are just returning migration names\n    return Promise.resolve(['migration1']);\n  }\n\n  getMigrationName(migration) {\n    return migration;\n  }\n\n  getMigration(migration) {\n    switch (migration) {\n      case 'migration1':\n        return {\n          up(knex) {\n            /* ... */\n          },\n          down(knex) {\n            /* ... */\n          },\n        };\n    }\n  }\n}\n\n// pass an instance of your migration source as knex config\nknex.migrate.latest({\n  migrationSource: new MyMigrationSource(),\n});\n```\n\n----------------------------------------\n\nTITLE: Adding a Full-Text Index for PostgreSQL\nDESCRIPTION: This snippet demonstrates how to add a full-text index to a PostgreSQL table using Knex migrations. It creates a table named 'foo' with an incrementing ID and a full-text column. The index is created using GIN. It depends on the `knex` package.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/faq/recipes.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nexports.up = (knex) => {\n  return knex.schema.createTable('foo', (table) => {\n    table.increments('id');\n    table.specificType('fulltext', 'tsvector');\n    table.index('fulltext', null, 'gin');\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Knex CLI\nDESCRIPTION: Installs the Knex command-line interface globally using npm. This allows you to run migration and seed commands from your terminal.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/migrations.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install knex -g\n```\n\n----------------------------------------\n\nTITLE: Specifying Schema with Knex.js\nDESCRIPTION: This code demonstrates how to specify a schema for a query using Knex.js with the `withSchema` function. It sets the schema to 'public' and then selects all columns from the 'users' table within that schema. This is useful for working with databases that have multiple schemas.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nknex.withSchema('public').select('*').from('users');\n```\n\n----------------------------------------\n\nTITLE: Adding an onIn Clause with Knex.js\nDESCRIPTION: This code snippet demonstrates how to add an onIn clause to a join in Knex.js. It joins the 'users' and 'contacts' tables and adds a condition that 'contacts.id' must be in the specified array. Dependencies: Knex.js\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_150\n\nLANGUAGE: javascript\nCODE:\n```\nknex\n  .select('*')\n  .from('users')\n  .join('contacts', function () {\n    this.on('users.id', '=', 'contacts.id').onIn(\n      'contacts.id',\n      [7, 15, 23, 41]\n    );\n  });\n```\n\n----------------------------------------\n\nTITLE: Creating Column Check Constraint - checkBetween in Knex.js\nDESCRIPTION: Demonstrates how to add a check constraint on a column to ensure that the value is within a specific range or set of ranges, using Knex.js.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/schema-builder.md#_snippet_56\n\nLANGUAGE: js\nCODE:\n```\nknex.schema.createTable('product', function (table) {\n  table.integer('price').checkBetween([0, 100]);\n});\n// You can add checks on multiple intervals\nknex.schema.createTable('product', function (table) {\n  table.integer('price').checkBetween([\n    [0, 20],\n    [30, 40],\n  ]);\n});\n```\n\n----------------------------------------\n\nTITLE: Counting Rows with Alias using String in Knex.js\nDESCRIPTION: Counts the number of rows in the 'users' table where the 'active' column is present and assigns the alias 'a' to the count result. This approach leverages string aliasing within the count function.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_59\n\nLANGUAGE: JavaScript\nCODE:\n```\nknex('users').count('active as a');\n```\n\n----------------------------------------\n\nTITLE: Creating View with createView - Knex.js\nDESCRIPTION: Creates a new view on the database, with a callback function to modify the view's structure. It takes the view name and a callback function as arguments. The callback uses schema building commands to define the view's columns and the query to populate the view.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/schema-builder.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nknex.schema.createView('users_view', function (view) {\n  view.columns(['first_name']);\n  view.as(knex('users').select('first_name').where('age', '>', '18'));\n});\n```\n\n----------------------------------------\n\nTITLE: Selecting with forKeyShare Lock in Knex.js\nDESCRIPTION: Selects all columns from 'tableName' with a `FOR KEY SHARE` lock. Requires a transaction to be specified. This is a PostgreSQL specific lock mode that allows concurrent reads but prevents modifications that would affect foreign key relationships.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_54\n\nLANGUAGE: JavaScript\nCODE:\n```\nknex('tableName').transacting(trx).forKeyShare().select('*');\n```\n\n----------------------------------------\n\nTITLE: Adding an onNull Clause with Knex.js\nDESCRIPTION: This code snippet demonstrates how to add an onNull clause to a join in Knex.js. It joins the 'users' and 'contacts' tables and adds a condition that 'contacts.email' must be null. Dependencies: Knex.js\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_152\n\nLANGUAGE: javascript\nCODE:\n```\nknex\n  .select('*')\n  .from('users')\n  .join('contacts', function () {\n    this.on('users.id', '=', 'contacts.id').onNull('contacts.email');\n  });\n```\n\n----------------------------------------\n\nTITLE: Finding Maximum Values with Different Aliases using Object Syntax\nDESCRIPTION: Finds the maximum values for both 'age' and 'experience' assigning different aliases to results using object aliasing.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_80\n\nLANGUAGE: JavaScript\nCODE:\n```\nknex('users').max({ max: 'age', exp: 'experience' });\n```\n\n----------------------------------------\n\nTITLE: Altering View with alterView - Knex.js\nDESCRIPTION: Alters a view to rename columns or change default values. Only available on PostgreSQL, MSSQL and Redshift. The callback function is used to define the changes to the view.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/schema-builder.md#_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nknex.schema.alterView('view_test', function (view) {\n  view.column('first_name').rename('name_user');\n  view.column('bio').defaultTo('empty');\n});\n```\n\n----------------------------------------\n\nTITLE: Counting with Raw Expressions in Knex.js\nDESCRIPTION: Counts the number of rows in the 'users' table using a raw expression for the 'active' column.  This example shows flexibility with raw expressions.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_64\n\nLANGUAGE: JavaScript\nCODE:\n```\nknex('users').count(knex.raw('??', ['active']));\n```\n\n----------------------------------------\n\nTITLE: Finding Maximum Values for Multiple Columns with Object Alias\nDESCRIPTION: Finds the maximum value for both 'age' and 'logins' using object aliasing with 'max'.  May not be supported by all drivers for multiple columns.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_79\n\nLANGUAGE: JavaScript\nCODE:\n```\nknex('users').max({ max: ['age', 'logins'] });\n```\n\n----------------------------------------\n\nTITLE: Handling MSSQL Triggers During Inserts with Knex.js\nDESCRIPTION: This snippet shows how to handle triggers in MSSQL when inserting data using Knex.js. It uses the `includeTriggerModifications` option to ensure valid values are returned from insert statements that might be interrupted by triggers. This option only affects MSSQL and is relevant when a returning value is specified.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\n// Adding the option includeTriggerModifications\n// allows you to run statements on tables\n// that contain triggers. Only affects MSSQL.\nknex('books').insert({ title: 'Alice in Wonderland' }, ['id'], {\n  includeTriggerModifications: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Updating JSON Column in PostgreSQL\nDESCRIPTION: Illustrates how to update a JSON column in PostgreSQL. Due to incompatibility between native array and json types, use `JSON.stringify()` to convert your value to a string before passing it to the query builder.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/schema-builder.md#_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nknex\n  .table('users')\n  .where({ id: 1 })\n  .update({ json_data: JSON.stringify(mightBeAnArray) });\n```\n\n----------------------------------------\n\nTITLE: Dropping Schema if Exists with dropSchemaIfExists - Knex.js\nDESCRIPTION: Drop a schema conditionally if the schema exists, specified by the schema's name, with optional cascade option (default to false). Only supported by PostgreSQL. The optional cascade option specifies whether to drop all objects within the schema as well.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/schema-builder.md#_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\n//drop schema if exists 'public'\nknex.schema.dropSchemaIfExists('public');\n//drop schema if exists 'public' cascade\nknex.schema.dropSchemaIfExists('public', true);\n```\n\n----------------------------------------\n\nTITLE: Adding a HavingNotNull Clause with Knex.js\nDESCRIPTION: This code snippet demonstrates how to add a havingNotNull clause to the query using Knex.js, filtering grouped results based on whether a column's value is not null. Dependencies: Knex.js\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_176\n\nLANGUAGE: javascript\nCODE:\n```\nknex.select('*').from('users').havingNotNull('email');\n```\n\n----------------------------------------\n\nTITLE: Initializing Knex with SQLite3 (Flags)\nDESCRIPTION: This snippet illustrates how to initialize Knex.js with SQLite3 and connection flags for URI and shared cache modes.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/index.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst knex = require('knex')({\n  client: 'sqlite3',\n  connection: {\n    filename: 'file:memDb1?mode=memory&cache=shared',\n    flags: ['OPEN_URI', 'OPEN_SHAREDCACHE'],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Transaction rollback configuration in JavaScript\nDESCRIPTION: This snippet demonstrates how to configure transaction rollback behavior in Knex.js. It shows how to prevent promise rejection on transaction rollback by setting `doNotRejectOnRollback` to `false` in the config object, preserving the previous behavior.\nSOURCE: https://github.com/knex/knex/blob/master/UPGRADING.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nawait knex.transaction(\n  async (trx) => {\n    const ids = await trx('catalogues').insert({ name: 'Old Books' }, 'id');\n  },\n  { doNotRejectOnRollback: false }\n);\n```\n\n----------------------------------------\n\nTITLE: Finding Maximum Value with Alias in Knex.js\nDESCRIPTION: Finds the maximum value in the 'age' column and aliases it as 'a'. Shows how to name results.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_75\n\nLANGUAGE: JavaScript\nCODE:\n```\nknex('users').max('age', { as: 'a' });\n```\n\n----------------------------------------\n\nTITLE: Partitioning Rows in Knex.js\nDESCRIPTION: Partitions rowNumber, denseRank, rank after a specific column or columns, allowing for specifying the sort direction. Requires Knex.js library and a database connection.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_106\n\nLANGUAGE: javascript\nCODE:\n```\nknex('users')\n  .select('*')\n  .rowNumber('alias_name', function () {\n    this.partitionBy('firstName');\n  });\n```\n\nLANGUAGE: javascript\nCODE:\n```\nknex('users')\n  .select('*')\n  .rowNumber('alias_name', function () {\n    this.partitionBy('firstName', 'desc');\n  });\n```\n\nLANGUAGE: javascript\nCODE:\n```\nknex('users')\n  .select('*')\n  .rowNumber('alias_name', function () {\n    this.partitionBy([\n      { column: 'firstName', order: 'asc' },\n      { column: 'lastName', order: 'desc' },\n    ]);\n  });\n```\n\n----------------------------------------\n\nTITLE: Adding Geometry Column\nDESCRIPTION: Shows how to add a geometry column to a table using the `geometry` method. Supported by SQLite, MSSQL and PostgreSQL.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/schema-builder.md#_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\nknex.schema.createTable(tblName, (table) => {\n  table.geometry('geometryColumn');\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Hint Comments to Query in Knex.js\nDESCRIPTION: Adds hints to the query using comment-like syntax, useful for optimizer hints in MySQL and Oracle. In other dialects, the hints are ignored as simple comments. Requires Knex.js library and a database connection.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_101\n\nLANGUAGE: javascript\nCODE:\n```\nknex('accounts').where('userid', '=', 1).hintComment('NO_ICP(accounts)');\n```\n\n----------------------------------------\n\nTITLE: Using withUserParams\nDESCRIPTION: This snippet shows to use `withUserParams` on a Knex instance to get a copy with custom parameters.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/index.md#_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nconst knex = require('knex')({\n  // Params\n});\n\nconst knexWithParams = knex.withUserParams({\n  customUserParam: 'table1',\n});\nconst customUserParam = knexWithParams.userParams.customUserParam;\n```\n\n----------------------------------------\n\nTITLE: Adding a GroupBy Clause with Knex.js\nDESCRIPTION: This code snippet demonstrates how to add a group by clause to the query using Knex.js, grouping results based on the specified columns. Dependencies: Knex.js\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_168\n\nLANGUAGE: javascript\nCODE:\n```\nknex('users').groupBy('count');\n```\n\n----------------------------------------\n\nTITLE: DB Access using SQLite and SQLCipher with Knex (Alternative)\nDESCRIPTION: This snippet shows how to execute `PRAGMA KEY` statement for each and every SQL you execute if you don't use the \"afterCreate\" configuration with SQLCipher.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/faq/recipes.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nreturn knex.raw(\"PRAGMA KEY = 'secret'\").then(() =>\n  knex('some_table')\n    .select()\n    .on('query-error', function (ex, obj) {\n      console.log('KNEX select from some_table ERR ex:', ex, 'obj:', obj);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Calculating Average for Multiple Columns in Knex.js\nDESCRIPTION: Calculates the average for both the 'age' and 'logins' columns. May not be supported by all database drivers.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_92\n\nLANGUAGE: JavaScript\nCODE:\n```\nknex('users').avg('age', 'logins');\n```\n\n----------------------------------------\n\nTITLE: Calling Oracle Stored Procedure with Bindout Variables (Knex)\nDESCRIPTION: This snippet shows how to call an Oracle stored procedure with bindout variables using Knex. The `oracle` package is used for defining bind variable directions. It depends on the `knex` and `oracledb` packages.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/faq/recipes.md#_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst oracle = require('oracledb');\nconst bindVars = {\n  input_var1: 6,\n  input_var2: 7,\n  output_var: {\n    dir: oracle.BIND_OUT,\n  },\n  output_message: {\n    dir: oracle.BIND_OUT,\n  },\n};\n\nconst sp =\n  'BEGIN MULTIPLY_STORED_PROCEDURE(:input_var1, :input_var2, :output_var, :output_message); END;';\nconst results = await knex.raw(sp, bindVars);\nconsole.log(results[0]); // 42\nconsole.log(results[1]); // 6 * 7 is the answer to life\n```\n\n----------------------------------------\n\nTITLE: Adding Geography Column\nDESCRIPTION: Demonstrates how to add a geography column to a table using the `geography` method. Supported by SQLite, MSSQL and PostgreSQL (in PostGIS extension).\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/schema-builder.md#_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\nknex.schema.createTable(tblName, (table) => {\n  table.geography('geographyColumn');\n});\n```\n\n----------------------------------------\n\nTITLE: Finding Minimum Values for Multiple Columns with Alias Object\nDESCRIPTION: Finds the minimum values for 'age' and 'logins' using object syntax with the alias 'min'. This may not be supported by all drivers for multiple columns.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_72\n\nLANGUAGE: JavaScript\nCODE:\n```\nknex('users').min({ min: ['age', 'logins'] });\n```\n\n----------------------------------------\n\nTITLE: Counting Multiple Columns in Knex.js\nDESCRIPTION: Counts the number of rows in the 'users' table based on the 'id' and 'active' columns. Note that some database drivers might not support multiple columns in count.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_62\n\nLANGUAGE: JavaScript\nCODE:\n```\nknex('users').count('id', 'active');\n```\n\n----------------------------------------\n\nTITLE: Knex Usage with JSDoc\nDESCRIPTION: This snippet demonstrates how to use JSDoc to provide type hints for Knex in JavaScript. This is useful when using Knex as a parameter in a function, allowing for better type checking and IDE support.\nSOURCE: https://github.com/knex/knex/blob/master/UPGRADING.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @param {import(\"knex\").Knex} db\n */\nfunction up(db) {\n  // Your code\n}\n```\n\n----------------------------------------\n\nTITLE: Stopping PostgreSQL Docker for Knex.js Tests\nDESCRIPTION: This bash command stops the PostgreSQL docker database, previously started for Knex.js integration tests. It's the counterpart to `npm run db:start:postgres`.  This helps to stop the database when finished.\nSOURCE: https://github.com/knex/knex/blob/master/CONTRIBUTING.md#_snippet_5\n\nLANGUAGE: Bash\nCODE:\n```\nnpm run db:stop:postgres\n```\n\n----------------------------------------\n\nTITLE: Creating Column Check Constraint - checkIn in Knex.js\nDESCRIPTION: Shows how to add a check constraint on a column to ensure that the value is within a specified set of allowed values, using Knex.js.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/schema-builder.md#_snippet_54\n\nLANGUAGE: js\nCODE:\n```\nknex.schema.createTable('product', function (table) {\n  table.string('type').checkIn(['table', 'chair', 'sofa']);\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Knex with Better-SQLite3 (Native Binding)\nDESCRIPTION: This snippet demonstrates how to initialize Knex.js with Better-SQLite3, specifying the location of the native binding for the adapter.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/index.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst knex = require('knex')({\n  client: 'better-sqlite3',\n  connection: {\n    filename: ':memory:',\n    options: {\n      nativeBinding: '/path/to/better_sqlite3.node',\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Knex with Custom PostgreSQL Client\nDESCRIPTION: This snippet demonstrates how to initialize Knex with a custom PostgreSQL client (e.g., `knex-aurora-data-api-client`) and configure JSONB support.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/index.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst knex = require('knex')({\n  client: require('knex-aurora-data-api-client').postgres,\n  connection: { resourceArn, secretArn, database: `mydb` },\n  version: 'data-api',\n  jsonbSupport: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Knex with wrapIdentifier Function (MySQL)\nDESCRIPTION: This snippet demonstrates how to use the `wrapIdentifier` function to customize identifier transformation. In this example, it performs a camelCase to snake_case conversion. It overrides the default identifier quoting behavior.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/index.md#_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nconst knex = require('knex')({\n  client: 'mysql',\n  // overly simplified camelCase -> snake_case converter\n  wrapIdentifier: (value, origImpl, queryContext) =>\n    origImpl(convertToSnakeCase(value)),\n});\n```\n\n----------------------------------------\n\nTITLE: MSSQL stored procedure query\nDESCRIPTION: This query helps identify all affected stored procedures after upgrading Knex and encountering issues with unique indexes on tables targeted by stored procedures created with QUOTED_IDENTIFIER = OFF.\nSOURCE: https://github.com/knex/knex/blob/master/UPGRADING.md#_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nSELECT name = OBJECT_NAME([object_id]), uses_quoted_identifier\nFROM sys.sql_modules\nWHERE uses_quoted_identifier = 0;\n```\n\n----------------------------------------\n\nTITLE: Querying with whereNot Key-Value Pair - Knex.js\nDESCRIPTION: Shows how to use a key-value pair in a `whereNot` clause to filter results. It selects from the 'users' table where 'id' is NOT equal to 1.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_122\n\nLANGUAGE: javascript\nCODE:\n```\nknex('users').whereNot('id', 1);\n```\n\n----------------------------------------\n\nTITLE: Clearing Having Clauses with Knex.js\nDESCRIPTION: This code snippet demonstrates how to clear all having clauses from the query, excluding subqueries. clear('having') is preferred. Dependencies: Knex.js\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_164\n\nLANGUAGE: javascript\nCODE:\n```\nknex.select().from('users').having('id', '>', 5).clearHaving();\n```\n\n----------------------------------------\n\nTITLE: Clearing Counters with Knex.js\nDESCRIPTION: This code snippet demonstrates how to clear all increment/decrement clauses from the query. Dependencies: Knex.js\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_165\n\nLANGUAGE: javascript\nCODE:\n```\nknex('accounts')\n  .where('id', '=', 1)\n  .update({ email: 'foo@bar.com' })\n  .decrement({\n    balance: 50,\n  })\n  .clearCounters();\n```\n\n----------------------------------------\n\nTITLE: Creating a Migration File\nDESCRIPTION: Creates a new migration file with the specified name. The `-x ts` option creates a TypeScript migration file.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/migrations.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ knex migrate:make migration_name\n\n# or for .ts\n\n$ knex migrate:make migration_name -x ts\n```\n\n----------------------------------------\n\nTITLE: Using Knex with ESM imports\nDESCRIPTION: This code shows how to use Knex with ESM imports in JavaScript. It's an alternative to the `require` syntax and can help with IDE autocomplete issues when using JavaScript instead of TypeScript. This applies to Knex.js version 0.95.0 and later.\nSOURCE: https://github.com/knex/knex/blob/master/UPGRADING.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { knex } from 'knex';\n\nconst kn = knex({\n  //connection parameters\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Knex with SQLite3 (Filename)\nDESCRIPTION: This snippet demonstrates how to initialize Knex.js with an SQLite3 database, specifying the client and the filename for the database.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/index.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst knex = require('knex')({\n  client: 'sqlite3', // or 'better-sqlite3'\n  connection: {\n    filename: './mydb.sqlite',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Database Connection in Knex.js\nDESCRIPTION: Sets the database connection to use for the query without using the connection pool. You should pass the same object that acquireConnection() for the corresponding driver returns. Requires Knex.js library and a database connection object.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_110\n\nLANGUAGE: typescript\nCODE:\n```\nconst Pool = require('pg-pool');\nconst pool = new Pool({\n  /* ... */\n});\nconst connection = await pool.connect();\n\ntry {\n  return await knex.connection(connection); // knex here is a query builder with query already built\n} catch (error) {\n  // Process error\n} finally {\n  connection.release();\n}\n```\n\n----------------------------------------\n\nTITLE: Querying with whereNot Grouped Chain - Knex.js\nDESCRIPTION: Demonstrates grouping `whereNot` clauses using a function and chaining `orWhereNot` conditions, along with an `orWhereNot` condition specified using an object.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_123\n\nLANGUAGE: javascript\nCODE:\n```\nknex('users')\n  .whereNot(function () {\n    this.where('id', 1).orWhereNot('id', '>', 10);\n  })\n  .orWhereNot({ name: 'Tester' });\n```\n\n----------------------------------------\n\nTITLE: Login to Postgres Database\nDESCRIPTION: This bash command attempts to connect to the `knex_test` Postgres database as the 'postgres' user using the `psql` command-line tool.  This is used to verify that the postgres user has been correctly configured and can access the test database.  It assumes Postgres is running on localhost.\nSOURCE: https://github.com/knex/knex/blob/master/CONTRIBUTING.md#_snippet_9\n\nLANGUAGE: Bash\nCODE:\n```\npsql -h localhost -U postgres -d knex_test\n```\n\n----------------------------------------\n\nTITLE: Adding a Raw GroupBy Clause with Knex.js\nDESCRIPTION: This code snippet demonstrates how to add a raw group by clause to the query using Knex.js, allowing for more complex grouping expressions. Dependencies: Knex.js\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_169\n\nLANGUAGE: javascript\nCODE:\n```\nknex\n  .select('year', knex.raw('SUM(profit)'))\n  .from('sales')\n  .groupByRaw('year WITH ROLLUP');\n```\n\n----------------------------------------\n\nTITLE: Generating DDL Commands with generateDdlCommands - Knex.js\nDESCRIPTION: Generates complete SQL commands for applying described schema changes, without executing anything. Useful when knex is being used purely as a query builder. It is generally the same as .toSQL(), except for SQLite.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/schema-builder.md#_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nconst ddlCommands = knex.schema\n  .alterTable('users', (table) => {\n    table\n      .foreign('companyId')\n      .references('company.companyId')\n      .withKeyName('fk_fkey_company');\n  })\n  .generateDdlCommands();\n```\n\n----------------------------------------\n\nTITLE: Mixing in Client Options in Knex.js\nDESCRIPTION: Allows for mixing in additional options as defined by database client-specific libraries. Requires Knex.js library and a database connection.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_111\n\nLANGUAGE: javascript\nCODE:\n```\nknex('accounts as a1')\n  .leftJoin('accounts as a2', function () {\n    this.on('a1.email', '<>', 'a2.email');\n  })\n  .select(['a1.email', 'a2.email'])\n  .where(knex.raw('a1.id = 1'))\n  .options({ nestTables: true, rowMode: 'array' })\n  .limit(2)\n  .then({\n    /*...*/\n  });\n```\n\n----------------------------------------\n\nTITLE: Merging Conflicts with Separate Update Data in Knex.js\nDESCRIPTION: This snippet demonstrates how to provide a separate object containing data to be updated when a conflict occurs during an upsert operation. This allows updating with different data than what's being inserted.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\nconst timestamp = Date.now();\nknex('tableName')\n  .insert({\n    email: 'ignore@example.com',\n    name: 'John Doe',\n    created_at: timestamp,\n    updated_at: timestamp,\n  })\n  .onConflict('email')\n  .merge({\n    name: 'John Doe The Second',\n  });\n```\n\n----------------------------------------\n\nTITLE: Knex Stream to Writable Stream\nDESCRIPTION: This snippet shows how to create a readable stream from a Knex.js query and pipe it to a writable stream. This is useful for processing large datasets efficiently.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/interfaces.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Retrieve the stream:\nconst stream = knex.select('*').from('users').stream();\nstream.pipe(writableStream);\n```\n\n----------------------------------------\n\nTITLE: Importing Knex functions and namespace in TypeScript\nDESCRIPTION: This snippet illustrates the correct way to import the knex instantiation function, the Knex namespace, and a class from the Knex namespace in TypeScript when upgrading to Knex.js version 0.95.0 or later. It clarifies the distinction between the knex function and the Knex namespace for type definitions.\nSOURCE: https://github.com/knex/knex/blob/master/UPGRADING.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { knex } from 'knex'; // this is a function that you call to instantiate knex\nimport { Knex } from 'knex'; // this is a namespace, and a type of a knex object\nimport KnexTimeoutError = Knex.KnexTimeoutError; // this is a class from the Knex namespace\n\nconst config: Knex.Config = {}; // this is a type from the Knex namespace\nconst knexInstance: Knex = knex(config);\n```\n\n----------------------------------------\n\nTITLE: Extending Query Builder in Knex.js\nDESCRIPTION: Allows adding custom functions to the Query Builder. This feature is experimental and its API may change in the future. Provides an example of extending the QueryBuilder with a customSelect function. Includes TypeScript definitions for extending the QueryBuilder interface.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_113\n\nLANGUAGE: typescript\nCODE:\n```\nconst { knex } = require('knex');\nknex.QueryBuilder.extend('customSelect', function (value) {\n  return this.select(this.client.raw(`${value} as value`));\n});\n\nconst meaningOfLife = await knex('accounts').customSelect(42);\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// knex.d.ts\n\nimport { Knex as KnexOriginal } from 'knex';\n\ndeclare module 'knex' {\n  namespace Knex {\n    interface QueryInterface {\n      customSelect<TRecord, TResult>(\n        value: number\n      ): KnexOriginal.QueryBuilder<TRecord, TResult>;\n    }\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n// tsconfig.json\n{\n  \"compilerOptions\": {\n    \"typeRoots\": [\"node_modules/@types\", \"@types\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Minimum Value with Knex.js\nDESCRIPTION: Finds the minimum value in the 'age' column of the 'users' table. This basic example illustrates finding the smallest value for a given column.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_66\n\nLANGUAGE: JavaScript\nCODE:\n```\nknex('users').min('age');\n```\n\n----------------------------------------\n\nTITLE: Finding Minimum Values for Multiple Columns in Knex.js\nDESCRIPTION: Finds the minimum values for the 'age' and 'logins' columns in the 'users' table. Note that some database drivers do not support multiple columns.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_71\n\nLANGUAGE: JavaScript\nCODE:\n```\nknex('users').min('age', 'logins');\n```\n\n----------------------------------------\n\nTITLE: Dropping Schema with dropSchema - Knex.js\nDESCRIPTION: Drop a schema, specified by the schema's name, with optional cascade option (default to false). Only supported by PostgreSQL. The optional cascade option specifies whether to drop all objects within the schema as well.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/schema-builder.md#_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\n//drop schema 'public'\nknex.schema.dropSchema('public');\n//drop schema 'public' cascade\nknex.schema.dropSchema('public', true);\n```\n\n----------------------------------------\n\nTITLE: Async Connection Configuration\nDESCRIPTION: A knexfile configuration showing how to use an async function to fetch connection details, useful for retrieving credentials from a secure location.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/migrations.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst getPassword = async () => {\n  // TODO: implement me\n  return 'my_pass';\n};\n\nmodule.exports = {\n  client: 'pg',\n  connection: async () => {\n    const password = await getPassword();\n    return { user: 'me', password };\n  },\n  migrations: {},\n};\n```\n\n----------------------------------------\n\nTITLE: Finding Maximum Value with String Alias in Knex.js\nDESCRIPTION: Finds the maximum value in the 'age' column and aliases the column with string syntax.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_76\n\nLANGUAGE: JavaScript\nCODE:\n```\nknex('users').max('age as a');\n```\n\n----------------------------------------\n\nTITLE: Calculating Average with Raw Expression in Knex.js\nDESCRIPTION: Calculates the average using a raw expression for the 'age' column.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_94\n\nLANGUAGE: JavaScript\nCODE:\n```\nknex('users').avg(knex.raw('??', ['age']));\n```\n\n----------------------------------------\n\nTITLE: Clearing Clauses with Knex.js\nDESCRIPTION: This code snippet demonstrates how to clear clauses such as 'select' and 'where' from a Knex.js query. It allows for dynamic modification of query conditions. Dependencies: Knex.js\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_159\n\nLANGUAGE: javascript\nCODE:\n```\nknex\n  .select('email', 'name')\n  .from('users')\n  .where('id', '<', 10)\n  .clear('select')\n  .clear('where');\n```\n\n----------------------------------------\n\nTITLE: Maintaining Changelog for Seeds with Multiple Directories (Knex)\nDESCRIPTION: This snippet demonstrates how to configure Knex migrations to include multiple directories as sources, allowing you to separate seed files from migration files.  It's useful for environments where you want to ensure seeds are only run once. It requires `knex` version >= 0.16.0-next1.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/faq/recipes.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nawait knex.migrate.latest({\n  directory: [\n    'src/services/orders/database/migrations',\n    'src/services/orders/database/seeds',\n  ],\n  sortDirsSeparately: true,\n  tableName: 'orders_migrations',\n  schemaName: 'orders',\n});\n```\n\n----------------------------------------\n\nTITLE: Knex Select with Aliases (JavaScript)\nDESCRIPTION: Demonstrates how to select data from multiple tables and alias the columns using the object syntax. It shows how to use aliases in a `whereRaw` clause.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nknex({ a: 'table', b: 'table' })\n  .select({\n    aTitle: 'a.title',\n    bTitle: 'b.title',\n  })\n  .whereRaw('?? = ??', ['a.column_1', 'b.column_2']);\n```\n\n----------------------------------------\n\nTITLE: Initializing Knex with User Parameters\nDESCRIPTION: This snippet shows how to initialize Knex.js with custom user parameters, accessible via `knex.userParams`.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/index.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst knex = require('knex')({\n  client: 'mysql',\n  connection: {\n    host: '127.0.0.1',\n    port: 3306,\n    user: 'your_database_user',\n    password: 'your_database_password',\n    database: 'myapp_test',\n  },\n  userParams: {\n    userParam1: '451',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Column Check Constraint - checkNotIn in Knex.js\nDESCRIPTION: Shows how to add a check constraint on a column to ensure that the value is not within a specified set of disallowed values, using Knex.js.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/schema-builder.md#_snippet_55\n\nLANGUAGE: js\nCODE:\n```\nknex.schema.createTable('product', function (table) {\n  table.string('type').checkNotIn(['boot', 'shoe']);\n});\n```\n\n----------------------------------------\n\nTITLE: Knex Stream as Iterator\nDESCRIPTION: This demonstrates how to use a Knex.js stream as an asynchronous iterator, allowing you to process rows from the query one at a time within an async loop. It's crucial to note the stream will be fully consumed, and will be destroyed if loop is terminated.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/interfaces.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// Use as an iterator\nconst stream = knex.select('*').from('users').stream();\n\nfor await (const row of stream) {\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default UUID Value\nDESCRIPTION: Demonstrates how to set a default value for a UUID column using the `uuid` helper function in Knex. Not supported by Redshift.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/schema-builder.md#_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nknex.schema.createTable(tblName, (table) => {\n  table.uuid('uuidColumn').defaultTo(knex.fn.uuid());\n});\n```\n\n----------------------------------------\n\nTITLE: Using Datetime with Precision\nDESCRIPTION: Demonstrates how to add a datetime column with a specified precision using the `datetime` method and the `precision` option. This example shows setting the precision to 6.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/schema-builder.md#_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\ntable.datetime('some_time', { precision: 6 }).defaultTo(knex.fn.now(6));\n```\n\n----------------------------------------\n\nTITLE: Clearing Group Clauses with Knex.js\nDESCRIPTION: This code snippet demonstrates how to clear all group clauses from the query, excluding subqueries. clear('group') is preferred. Dependencies: Knex.js\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_162\n\nLANGUAGE: javascript\nCODE:\n```\nknex.select().from('users').groupBy('id').clearGroup();\n```\n\n----------------------------------------\n\nTITLE: Rolling Back Migrations\nDESCRIPTION: Rolls back the last batch of migrations. The `--all` flag rolls back all completed migrations.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/migrations.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ knex migrate:rollback\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ knex migrate:rollback --all\n```\n\n----------------------------------------\n\nTITLE: Row Number Function in Knex.js\nDESCRIPTION: Adds a row_number() call to the query.  It supports string, raw, and function syntaxes for defining the ordering and partitioning. Requires Knex.js library and a database connection.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_105\n\nLANGUAGE: javascript\nCODE:\n```\nknex('users').select('*').rowNumber('alias_name', 'email', 'firstName');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nknex('users')\n  .select('*')\n  .rowNumber('alias_name', ['email', 'address'], ['firstName', 'lastName']);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nknex('users')\n  .select('*')\n  .rowNumber('alias_name', knex.raw('order by ??', ['email']));\n```\n\nLANGUAGE: javascript\nCODE:\n```\nknex('users')\n  .select('*')\n  .rowNumber('alias_name', function () {\n    this.orderBy('email').partitionBy('firstName');\n  });\n```\n\n----------------------------------------\n\nTITLE: Using Time with Precision\nDESCRIPTION: Demonstrates adding a time column with specified precision using the `time` method, focusing on MySQL compatibility. It showcases setting the precision to 6.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/schema-builder.md#_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\ntable.time('some_time', { precision: 6 });\n```\n\n----------------------------------------\n\nTITLE: Listing Migrations\nDESCRIPTION: Lists both completed and pending migrations.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/migrations.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ knex migrate:list\n```\n\n----------------------------------------\n\nTITLE: Importing Knex as ESM Module - JavaScript\nDESCRIPTION: This snippet demonstrates how to import Knex.js as an ES module using named imports, which is necessary when launching a Node application with `--experimental-modules`. It also shows how to import Knex using default imports.\nSOURCE: https://github.com/knex/knex/blob/master/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { knex } from 'knex/knex.mjs';\n\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport knex from 'knex';\n```\n\n----------------------------------------\n\nTITLE: Manually Closing Streams with HTTPIncomingMessage in Knex\nDESCRIPTION: This snippet demonstrates how to handle manually closing streams with `HTTPIncomingMessage` objects when using Knex's stream interface. It attaches a 'close' event listener to the request to end the stream and release the database connection. It depends on the `knex` package.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/faq/recipes.md#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nserver.on('request', function (request, response) {\n  const stream = knex.select('*').from('items').stream();\n  request.on('close', stream.end.bind(stream));\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Mode in Knex.js\nDESCRIPTION: Overrides the global debug setting for the current query chain. If enabled is omitted, query debugging is turned on. Requires Knex.js library.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_109\n\n\n\n----------------------------------------\n\nTITLE: Starting Docker Databases for Knex.js Tests\nDESCRIPTION: This bash command starts all necessary docker databases for running Knex.js integration tests. It relies on a docker-compose configuration file to spin up the required database services.  This is primarily used for local development and testing.\nSOURCE: https://github.com/knex/knex/blob/master/CONTRIBUTING.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\nnpm run db:start\n```\n\n----------------------------------------\n\nTITLE: Creating Table with Increments and Primary Key Option\nDESCRIPTION: Illustrates how to create a table using the `increments()` method and disabling the automatic primary key creation by passing the `primaryKey: false` option. This allows having an incrementing field without it being the primary key.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/schema-builder.md#_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\n// create table 'users'\n// with a primary key using 'increments()'\n// but also increments field 'other_id'\n// that does not need primary key\nknex.schema.createTable('users', function (table) {\n  table.increments('id');\n  table.increments('other_id', { primaryKey: false });\n});\n```\n\n----------------------------------------\n\nTITLE: Dropping View if Exists with dropViewIfExists - Knex.js\nDESCRIPTION: Drops a view on the database if it exists. It takes the view name as an argument. This prevents errors if the view does not exist.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/schema-builder.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nknex.schema.dropViewIfExists('users_view');\n```\n\n----------------------------------------\n\nTITLE: Renaming View with renameView - Knex.js\nDESCRIPTION: Renames an existing view in the database. Not supported by Oracle and SQLite. It takes the view name as an argument. This changes the view's identifier within the database.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/schema-builder.md#_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nknex.schema.renameView('users_view');\n```\n\n----------------------------------------\n\nTITLE: Dialect Override Example with Knex.js\nDESCRIPTION: This code snippet demonstrates how to override the default SQLite3 dialect in Knex.js to use the 'sqlite3-offline' driver. It initializes a Knex instance with the modified dialect and performs basic database operations, including table creation and data insertion. It requires the 'sqlite3-offline' and 'knex' packages.  The example shows how to configure the client to use the overridden Dialect and then executes a simple query.\nSOURCE: https://github.com/knex/knex/blob/master/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// simple dialect overriding sqlite3 dialect to use sqlite3-offline driver\nrequire('sqlite3-offline');\nconst Knex = require('knex');\n\nconst Dialect = require(`knex/lib/dialects/sqlite3/index.js`);\nDialect.prototype._driver = () => require('sqlite3-offline');\n\nconst knex = Knex({\n  client: Dialect,\n  connection: ':memory:',\n});\n\nconsole.log(knex.select(knex.raw(1)).toSQL());\n\nawait knex.schema.createTable('fooobar', (t) => {\n  t.bigincrements('id');\n  t.string('data');\n});\nawait knex('fooobar').insert({ data: 'nomnom' });\n\nconsole.log('Gimme all the data:', await knex('fooobar'));\n```\n\n----------------------------------------\n\nTITLE: Performing Cross Join with Knex.js\nDESCRIPTION: This code snippet demonstrates how to perform a cross join using Knex.js. It shows different ways to specify the join condition. Cross join conditions are only supported in MySQL and SQLite3. Dependencies: Knex.js\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_148\n\nLANGUAGE: javascript\nCODE:\n```\nknex.select('*').from('users').crossJoin('accounts');\n\nknex\n  .select('*')\n  .from('users')\n  .crossJoin('accounts', 'users.id', 'accounts.user_id');\n\nknex\n  .select('*')\n  .from('users')\n  .crossJoin('accounts', function () {\n    this.on('accounts.id', '=', 'users.account_id').orOn(\n      'accounts.owner_id',\n      '=',\n      'users.id'\n    );\n  });\n```\n\n----------------------------------------\n\nTITLE: Creating Postgres User for Knex.js Tests\nDESCRIPTION: These SQL commands create a new Postgres role (user) named 'postgres' with a password and grant all privileges on the 'knex_test' database to this role. These commands are required to set up the necessary database user to execute Knex tests.\nSOURCE: https://github.com/knex/knex/blob/master/CONTRIBUTING.md#_snippet_8\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE ROLE postgres WITH LOGIN PASSWORD '';\nGRANT ALL PRIVILEGES ON DATABASE \"knex_test\" TO postgres;\n```\n\n----------------------------------------\n\nTITLE: Sample Seed Configuration\nDESCRIPTION: A sample configuration for seeds, showing the directory where seed files are located.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/migrations.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  // ...\n  development: {\n    client: {\n      /* ... */\n    },\n    connection: {\n      /* ... */\n    },\n    seeds: {\n      directory: './seeds/dev',\n    },\n  },\n  // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Custom Configuration for Knex.js Tests\nDESCRIPTION: This bash command sets the `KNEX_TEST` environment variable to override the path to the default test configuration file for Knex.js tests. This enables using a custom configuration file for testing, allowing for flexible configuration options. Useful when testing against a different host, port or testing database.\nSOURCE: https://github.com/knex/knex/blob/master/CONTRIBUTING.md#_snippet_7\n\nLANGUAGE: Bash\nCODE:\n```\n$ KNEX_TEST='./path/to/my/config.js' npm test\n```\n\n----------------------------------------\n\nTITLE: Updating QueryBuilder import in TypeScript\nDESCRIPTION: This code demonstrates how to update the import statement for QueryBuilder in TypeScript to use the Knex namespace. This change is required when upgrading to Knex.js 0.95.0 or later to correctly reference the QueryBuilder type.\nSOURCE: https://github.com/knex/knex/blob/master/UPGRADING.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Knex } from 'knex';\n\nconst qb: Knex.QueryBuilder = knex('table').select('*');\n```\n\n----------------------------------------\n\nTITLE: Configuring Query Context with Knex\nDESCRIPTION: This snippet illustrates how to configure a query context for the table builder to customize identifier wrapping. It shows how the context can be overwritten at different levels: schema builder, table builder, and column builder.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/schema-builder.md#_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\nknex.schema.table('users', function (table) {\n  table.queryContext({ foo: 'bar' });\n  table.string('first_name');\n  table.string('last_name');\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nknex.schema.queryContext('schema context').table('users', function (table) {\n  table.queryContext('table context');\n  table.string('first_name');\n  table.string('last_name');\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nknex.schema.queryContext('schema context').table('users', function (table) {\n  table.queryContext('table context');\n  table.string('first_name').queryContext('first_name context');\n  table.string('last_name').queryContext('last_name context');\n});\n```\n\n----------------------------------------\n\nTITLE: Clearing Where Clauses with Knex.js\nDESCRIPTION: This code snippet demonstrates how to clear all where clauses from the query, excluding subqueries. clear('where') is preferred. Dependencies: Knex.js\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_161\n\nLANGUAGE: javascript\nCODE:\n```\nknex.select('email', 'name').from('users').where('id', 1).clearWhere();\n```\n\n----------------------------------------\n\nTITLE: Running MySQL2 Random Hanging Test\nDESCRIPTION: This command executes a Node.js script that simulates random hanging scenarios with the MySQL2 driver.  It redirects standard error to /dev/null and then uses grep to extract relevant statistics from the output.\nSOURCE: https://github.com/knex/knex/blob/master/scripts/stress-test/README.txt#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnode mysql2-random-hanging-every-now-and-then.js 2> /dev/null | grep -B500 -A2 -- \"- STATS\"\n```\n\n----------------------------------------\n\nTITLE: Running MySQL2 Sudden Exit Test\nDESCRIPTION: This command executes a Node.js script that simulates sudden exits without error with the MySQL2 driver. It helps test the connection resilience.\nSOURCE: https://github.com/knex/knex/blob/master/scripts/stress-test/README.txt#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnode mysql2-sudden-exit-without-error\n```\n\n----------------------------------------\n\nTITLE: Knexfile Configuration for Mixing ESM and CJS (TypeScript)\nDESCRIPTION: This TypeScript code demonstrates a knexfile configuration that specifies the `loadExtensions` option when using '.mjs' for the knexfile and '.js' for migrations. It ensures that Knex correctly loads the JavaScript migration files, overriding the default behavior of searching for 'mjs' files.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/migrations.md#_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * knexfile.mjs\n */\nexport default {\n  migrations: {\n    // ... client, connection,etc ....\n    directory: './migrations',\n    loadExtensions: ['.js'], // knex will search for 'mjs' file by default\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Selecting with forNoKeyUpdate Lock in Knex.js\nDESCRIPTION: Selects all columns from 'tableName' with a `FOR NO KEY UPDATE` lock. Requires a transaction to be specified.  This is a PostgreSQL specific lock mode that prevents key updates on the selected rows.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_53\n\nLANGUAGE: JavaScript\nCODE:\n```\nknex('tableName').transacting(trx).forNoKeyUpdate().select('*');\n```\n\n----------------------------------------\n\nTITLE: Specifying Schema with knex.ref in Knex.js\nDESCRIPTION: This example shows how to use the `withSchema` method in conjunction with `knex.ref` to specify the schema for a table reference.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/ref.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nknex(knex.ref('users').withSchema('TenantId')).select();\n```\n\n----------------------------------------\n\nTITLE: Running Reconnection Test for MySQL-based Drivers\nDESCRIPTION: This command executes a Node.js script designed to test the reconnection capabilities of MySQL-based drivers. It redirects standard error to /dev/null and filters output using grep to display reconnection statistics.\nSOURCE: https://github.com/knex/knex/blob/master/scripts/stress-test/README.txt#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnode reconnect-test-mysql-based-drivers.js 2> /dev/null | grep -A 3 -- \"- STATS \"\n```\n\n----------------------------------------\n\nTITLE: Building for Production (Yarn)\nDESCRIPTION: This command builds the Knex.js Vitepress documentation for production. It uses yarn to execute the 'build' script, creating optimized static assets suitable for deployment.\nSOURCE: https://github.com/knex/knex/blob/master/docs/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn build # or npm run build\n```\n\n----------------------------------------\n\nTITLE: Clearing Select Clauses with Knex.js\nDESCRIPTION: This code snippet demonstrates how to clear all select clauses from the query, excluding subqueries. clear('select') is preferred. Dependencies: Knex.js\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/query-builder.md#_snippet_160\n\nLANGUAGE: javascript\nCODE:\n```\nknex.select('email', 'name').from('users').clearSelect();\n```\n\n----------------------------------------\n\nTITLE: Running Knex.js Stress Test\nDESCRIPTION: This command executes a Node.js script for stress-testing Knex.js. The grep command filters the output to extract the relevant statistics.\nSOURCE: https://github.com/knex/knex/blob/master/scripts/stress-test/README.txt#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnode knex-stress-test.js | grep -A 3 -- \"- STATS \"\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Running Development Server\nDESCRIPTION: These commands install the necessary dependencies for the Knex.js Vitepress documentation and then start the development server. The installation can be done using either yarn or npm, and the development server is started using yarn.\nSOURCE: https://github.com/knex/knex/blob/master/docs/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn install # or npm i\nyarn dev # or npm run dev\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Containers for Testing\nDESCRIPTION: This bash script uses Docker Compose to start the necessary containers for running the driver stability tests. It first ensures the containers are created without starting them and then starts them.\nSOURCE: https://github.com/knex/knex/blob/master/scripts/stress-test/README.txt#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up --no-start\ndocker compose start\n```\n\n----------------------------------------\n\nTITLE: Shutting Down Docker Containers\nDESCRIPTION: This bash script uses Docker Compose to shut down all the containers started for the tests, cleaning up the environment.\nSOURCE: https://github.com/knex/knex/blob/master/scripts/stress-test/README.txt#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose down\n```\n\n----------------------------------------\n\nTITLE: Initializing Knex with MSSQL (Type Mapping)\nDESCRIPTION: This snippet demonstrates how to initialize Knex.js with MSSQL and a custom `mapBinding` function for mapping Knex query parameters to `tedious` types.\nSOURCE: https://github.com/knex/knex/blob/master/docs/src/guide/index.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { TYPES } from 'tedious';\n\nconst knex = require('knex')({\n  client: 'mssql',\n  connection: {\n    options: {\n      mapBinding: (value) => {\n        // bind all strings to varchar instead of nvarchar\n        if (typeof value === 'string') {\n          return {\n            type: TYPES.VarChar,\n            value,\n          };\n        }\n\n        // allow devs to pass tedious type at query time\n        if (value != null && value.type) {\n          return {\n            type: value.type,\n            value: value.value,\n          };\n        }\n\n        // undefined is returned; falling back to default mapping function\n      },\n    },\n  },\n});\n```"
  }
]