[
  {
    "owner": "disnakedev",
    "repo": "disnake",
    "content": "TITLE: Using asyncio.sleep instead of time.sleep in Discord bots\nDESCRIPTION: Demonstrates the proper asynchronous way to add delays in Discord bots using asyncio.sleep instead of blocking with time.sleep.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/faq.rst#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# bad\ntime.sleep(10)\n\n# good\nawait asyncio.sleep(10)\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Discord Bot with Disnake\nDESCRIPTION: A minimal Discord bot implementation that responds to messages starting with '$hello'. Uses Disnake client with message content intents enabled and demonstrates basic event handling for login and message events.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/quickstart.rst#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport disnake\n\nintents = disnake.Intents.default()\nintents.message_content = True\n\nclient = disnake.Client(intents=intents)\n\n@client.event\nasync def on_ready():\n    print(f'We have logged in as {client.user}')\n\n@client.event\nasync def on_message(message):\n    if message.author == client.user:\n        return\n\n    if message.content.startswith('$hello'):\n        await message.channel.send('Hello!')\n\nclient.run('your token here')\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Greeting Cog in Python with Disnake\nDESCRIPTION: Example of a Greetings cog class that implements both a command handler and an event listener. The cog handles member joins by sending welcome messages and responds to hello commands.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/ext/commands/cogs.rst#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass Greetings(commands.Cog):\n    def __init__(self, bot):\n        self.bot = bot\n        self._last_member = None\n\n    @commands.Cog.listener()\n    async def on_member_join(self, member):\n        channel = member.guild.system_channel\n        if channel is not None:\n            await channel.send(f'Welcome {member.mention}.')\n\n    @commands.command()\n    async def hello(self, ctx, *, member: disnake.Member = None):\n        \"\"\"Says hello\"\"\"\n        member = member or ctx.author\n        if self._last_member is None or self._last_member.id != member.id:\n            await ctx.send(f'Hello {member.name}~')\n        else:\n            await ctx.send(f'Hello {member.name}... This feels familiar.')\n        self._last_member = member\n```\n\n----------------------------------------\n\nTITLE: Basic Discord Bot Using Disnake Events\nDESCRIPTION: A simple Python example demonstrating the event-based programming model of disnake. It shows a bot that responds to login and message events.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/intro.rst#2025-04-18_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport disnake\n\nclass MyClient(disnake.Client):\n    async def on_ready(self):\n        print(f'Logged on as {self.user}!')\n\n    async def on_message(self, message):\n        print(f'Message from {message.author}: {message.content}')\n\nintents = disnake.Intents.default()\nintents.message_content = True\n\nclient = MyClient(intents=intents)\nclient.run('my token goes here')\n```\n\n----------------------------------------\n\nTITLE: Sending direct messages in Disnake\nDESCRIPTION: Demonstrates how to send direct messages to users by either getting the User object directly or using the author of a message.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/faq.rst#2025-04-18_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nuser = client.get_user(381870129706958858)\nawait user.send('👀')\n```\n\nLANGUAGE: python\nCODE:\n```\nawait message.author.send('👋')\n```\n\n----------------------------------------\n\nTITLE: Manually Managing Disnake Client Event Loop in Python\nDESCRIPTION: This code snippet demonstrates how to manually control the event loop for a Disnake client. It includes setting up the client, defining a main task coroutine, and handling the event loop execution with proper error handling and cleanup.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/migrating_to_async.rst#2025-04-18_snippet_7\n\nLANGUAGE: python3\nCODE:\n```\nimport disnake\nimport asyncio\n\nclient = disnake.Client()\n\n@asyncio.coroutine\ndef main_task():\n    yield from client.login('token')\n    yield from client.connect()\n\nloop = asyncio.get_event_loop()\ntry:\n    loop.run_until_complete(main_task())\nexcept:\n    loop.run_until_complete(client.logout())\nfinally:\n    loop.close()\n```\n\n----------------------------------------\n\nTITLE: Defining Button Decorator in Python for Disnake\nDESCRIPTION: This code snippet defines a decorator function for creating button components in Disnake. It allows customization of various button properties such as custom_id, style, label, and emoji.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/api/ui.rst#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nbutton(cls=Button, *, custom_id=..., style=ButtonStyle.secondary, label=None, disabled=False, url=None, emoji=None, row=None)\n```\n\n----------------------------------------\n\nTITLE: Sending messages to specific channels in Disnake\nDESCRIPTION: Shows how to send a message to a specific channel by fetching the channel object first using get_channel() and then calling send().\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/faq.rst#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nchannel = client.get_channel(12324234183172)\nawait channel.send('hello')\n```\n\n----------------------------------------\n\nTITLE: Uploading files and images in Disnake\nDESCRIPTION: Demonstrates multiple ways to upload files to Discord including from local files, file-like objects, and multiple files at once.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/faq.rst#2025-04-18_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nawait channel.send(file=disnake.File('my_file.png'))\n```\n\nLANGUAGE: python\nCODE:\n```\nwith open('my_file.png', 'rb') as fp:\n    await channel.send(file=disnake.File(fp, 'new_filename.png'))\n```\n\nLANGUAGE: python\nCODE:\n```\nmy_files = [\n    disnake.File('result.zip'),\n    disnake.File('teaser_graph.png'),\n]\nawait channel.send(files=my_files)\n```\n\n----------------------------------------\n\nTITLE: Handling Slash Command Events in Disnake\nDESCRIPTION: Event handlers for slash commands in Disnake. These events allow responding to slash command invocation, successful completion, and error conditions.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/ext/commands/api/events.rst#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\non_slash_command(inter)\n```\n\nLANGUAGE: python\nCODE:\n```\non_slash_command_completion(inter)\n```\n\nLANGUAGE: python\nCODE:\n```\non_slash_command_error(inter, error)\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Hello Command Extension in Python\nDESCRIPTION: Example of a basic Disnake extension that implements a hello command. The extension demonstrates the required setup function and command definition pattern.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/ext/commands/extensions.rst#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom disnake.ext import commands\n\n@commands.command()\nasync def hello(ctx):\n    await ctx.send(f'Hello {ctx.author.display_name}.')\n\ndef setup(bot):\n    bot.add_command(hello)\n```\n\n----------------------------------------\n\nTITLE: Reaction Event Handlers in Disnake\nDESCRIPTION: Event handlers for message reactions. Requires reactions intent to be enabled. Handles adding and removing reactions to messages.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/api/events.rst#2025-04-18_snippet_44\n\nLANGUAGE: python\nCODE:\n```\nasync def on_reaction_add(reaction, user):\n    # Called when a message has a reaction added\n    pass\n\nasync def on_reaction_remove(reaction, user):\n    # Called when a message has a reaction removed\n    pass\n```\n\n----------------------------------------\n\nTITLE: Defining Role Select Decorator in Python for Disnake\nDESCRIPTION: This code snippet defines a decorator function for creating role select menu components in Disnake. It allows customization of properties like custom_id, placeholder, and min/max values.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/api/ui.rst#2025-04-18_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nrole_select(cls=RoleSelect, *, custom_id=..., placeholder=None, min_values=1, max_values=1, disabled=False, default_values=None, row=None)\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Handler with Client Decorator in Python\nDESCRIPTION: Example of registering an event handler using the Client.event decorator. This code creates a message handler that responds to messages starting with '$hello'.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/api/events.rst#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclient = disnake.Client(...)\n\n@client.event\nasync def on_message(message):\n    if message.author.bot:\n        return\n\n    if message.content.startswith('$hello'):\n        await message.reply(f'Hello, {message.author}!')\n```\n\n----------------------------------------\n\nTITLE: Handling Thread Events in Disnake\nDESCRIPTION: Documentation for event callbacks related to Discord threads, including creation, updates, deletion, and membership changes. These events require the guilds intent to be enabled.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/api/events.rst#2025-04-18_snippet_6\n\nLANGUAGE: python\nCODE:\n```\non_thread_create(thread)\n\non_thread_update(before, after)\n\non_thread_delete(thread)\n\non_thread_join(thread)\n\non_thread_remove(thread)\n\non_thread_member_join(member)\non_thread_member_remove(member)\n\non_raw_thread_member_remove(payload)\n\non_raw_thread_update(after)\n\non_raw_thread_delete(payload)\n```\n\n----------------------------------------\n\nTITLE: Defining User Select Decorator in Python for Disnake\nDESCRIPTION: This code snippet defines a decorator function for creating user select menu components in Disnake. It allows customization of properties like custom_id, placeholder, and min/max values.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/api/ui.rst#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nuser_select(cls=UserSelect, *, custom_id=..., placeholder=None, min_values=1, max_values=1, disabled=False, default_values=None, row=None)\n```\n\n----------------------------------------\n\nTITLE: Using Client.wait_for in Disnake for Single-Use Event Handling\nDESCRIPTION: Example of using Client.wait_for to wait for a specific event to occur. This code waits for a 'hello' message after the bot sends a greeting prompt.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/api/events.rst#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@client.event\nasync def on_message(message):\n    if message.content.startswith('$greet'):\n        channel = message.channel\n        await channel.send('Say hello!')\n\n        def check(m):\n            return m.content == 'hello' and m.channel == channel\n\n        # wait for a message that passes the check\n        msg = await client.wait_for('message', check=check)\n        await channel.send(f'Hello {msg.author}!')\n```\n\n----------------------------------------\n\nTITLE: Handling Channel Events in Disnake\nDESCRIPTION: Documentation for event callbacks related to guild channels, including creation, deletion, updates, and pin changes. These events require specific intents to be enabled.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/api/events.rst#2025-04-18_snippet_4\n\nLANGUAGE: python\nCODE:\n```\non_guild_channel_delete(channel)\non_guild_channel_create(channel)\n\non_guild_channel_update(before, after)\n\non_guild_channel_pins_update(channel, last_pin)\n```\n\n----------------------------------------\n\nTITLE: Defining a Slash Command with Parameter Description in Python\nDESCRIPTION: This code snippet demonstrates how to create a slash command using Disnake's extension commands. It defines an 'echo' command that takes a 'text' parameter with a description. The command replies with the given text.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/ext/commands/additional_info.rst#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@bot.slash_command(description=\"Replies with the given text!\")\nasync def echo(\n    inter: disnake.ApplicationCommandInteraction,\n    text: str = commands.Param(description=\"Echo~\"),\n) -> None:\n    await inter.response.send_message(text)\n```\n\n----------------------------------------\n\nTITLE: Adding reactions to messages in Disnake\nDESCRIPTION: Demonstrates different ways to add emoji reactions to messages, including using Unicode emojis and custom server emojis.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/faq.rst#2025-04-18_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nemoji = '\\N{THUMBS UP SIGN}'\n# or '\\U0001f44d' or '👍'\nawait message.add_reaction(emoji)\n```\n\nLANGUAGE: python\nCODE:\n```\n# if you have the ID already\nemoji = client.get_emoji(310177266011340803)\nawait message.add_reaction(emoji)\n\n# no ID, do a lookup\nemoji = disnake.utils.get(guild.emojis, name='LUL')\nif emoji:\n    await message.add_reaction(emoji)\n\n# if you have the name and ID of a custom emoji:\nemoji = '<:python3:232720527448342530>'\nawait message.add_reaction(emoji)\n```\n\n----------------------------------------\n\nTITLE: Localization Example Implementation\nDESCRIPTION: Code examples for implementing localizations in Disnake commands and interactions.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/whats_new.rst#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Command with Localizations\n@client.slash_command(\n    name=Localized(\"command\", key=\"my_command\"),\n    description=Localized(\"Command description\", key=\"cmd_desc\")\n)\nasync def my_command(inter):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Registering a Cog with a Disnake Bot\nDESCRIPTION: Shows how to add a cog to a bot instance, which automatically registers all commands and listeners defined in the cog class.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/ext/commands/cogs.rst#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nbot.add_cog(Greetings(bot))\n```\n\n----------------------------------------\n\nTITLE: Forum Channel Example Code\nDESCRIPTION: Code snippets demonstrating the usage of new forum channel features in Disnake v2.5.0.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/whats_new.rst#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Forum Channel Creation\nforum_channel = await guild.create_forum_channel(\"discussions\")\n\n# Forum Thread Settings\nawait thread.edit(pinned=True)\n\n# Forum Channel Permissions\nperms = Permissions(create_forum_threads=True)\n```\n\n----------------------------------------\n\nTITLE: Using aiohttp instead of requests for HTTP requests in Discord bots\nDESCRIPTION: Shows how to make non-blocking HTTP requests using aiohttp instead of the blocking requests library in an asynchronous Discord bot.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/faq.rst#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# bad\nr = requests.get('http://aws.random.cat/meow')\nif r.status_code == 200:\n    js = r.json()\n    await channel.send(js['file'])\n\n# good\nasync with aiohttp.ClientSession() as session:\n    async with session.get('http://aws.random.cat/meow') as r:\n        if r.status == 200:\n            js = await r.json()\n            await channel.send(js['file'])\n```\n\n----------------------------------------\n\nTITLE: Downloading and uploading files from URLs in Disnake\nDESCRIPTION: Shows how to download a file from a URL using aiohttp and upload it to Discord using BytesIO and the File class.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/faq.rst#2025-04-18_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport io\nimport aiohttp\n\nasync with aiohttp.ClientSession() as session:\n    async with session.get(my_url) as resp:\n        if resp.status != 200:\n            return await channel.send('Could not download file...')\n        data = io.BytesIO(await resp.read())\n        await channel.send(file=disnake.File(data, 'cool_image.png'))\n```\n\n----------------------------------------\n\nTITLE: Handling Member Join/Remove Events in Disnake\nDESCRIPTION: Event handlers called when a Member joins or leaves a Guild. Requires Intents.members to be enabled. For member removal, consider using on_raw_member_remove which triggers regardless of cache state.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/api/events.rst#2025-04-18_snippet_22\n\nLANGUAGE: python\nCODE:\n```\non_member_join(member)\non_member_remove(member)\n```\n\n----------------------------------------\n\nTITLE: Creating Event Handlers by Subclassing Client in Python\nDESCRIPTION: Example of implementing event handlers by subclassing the Client class. This approach overrides the on_message method to respond to messages starting with '$hello'.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/api/events.rst#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass MyClient(disnake.Client):\n    async def on_message(self, message):\n        if message.author.bot:\n            return\n\n        if message.content.startswith('$hello'):\n            await message.reply(f'Hello, {message.author}!')\n```\n\n----------------------------------------\n\nTITLE: Implementing Discord Slash Commands with Disnake\nDESCRIPTION: Example of creating a basic slash command bot with Disnake that responds to a ping command. Uses the InteractionBot class and demonstrates command registration.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/README.md#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport disnake\nfrom disnake.ext import commands\n\nbot = commands.InteractionBot(test_guilds=[12345])\n\n@bot.slash_command()\nasync def ping(inter):\n    await inter.response.send_message(\"Pong!\")\n\nbot.run(\"BOT_TOKEN\")\n```\n\n----------------------------------------\n\nTITLE: Basic Task Loop Implementation in Python Cog\nDESCRIPTION: Demonstrates how to create a simple background task that runs every 5 seconds within a Cog class. Includes initialization and cleanup handling.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/ext/tasks/index.rst#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom disnake.ext import tasks, commands\n\nclass MyCog(commands.Cog):\n    def __init__(self):\n        self.index = 0\n        self.printer.start()\n\n    def cog_unload(self):\n        self.printer.cancel()\n\n    @tasks.loop(seconds=5.0)\n    async def printer(self):\n        print(self.index)\n        self.index += 1\n```\n\n----------------------------------------\n\nTITLE: Handling Invite Creation in Disnake\nDESCRIPTION: Event handler called when an Invite is created. Requires manage_channels permission and Intents.invites to be enabled. The guild and channel attributes might occasionally be Object instances rather than proper models.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/api/events.rst#2025-04-18_snippet_20\n\nLANGUAGE: python\nCODE:\n```\non_invite_create(invite)\n```\n\n----------------------------------------\n\nTITLE: Handling User Command Events in Disnake\nDESCRIPTION: Event handlers for user commands in Disnake. These events allow responding to user command invocation, successful completion, and error conditions.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/ext/commands/api/events.rst#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\non_user_command(inter)\n```\n\nLANGUAGE: python\nCODE:\n```\non_user_command_completion(inter)\n```\n\nLANGUAGE: python\nCODE:\n```\non_user_command_error(inter, error)\n```\n\n----------------------------------------\n\nTITLE: Implementing Discord Context Menu Commands with Disnake\nDESCRIPTION: Example showing how to create a user context menu command that displays a user's avatar in an embed. Uses InteractionBot and demonstrates embed creation.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/README.md#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport disnake\nfrom disnake.ext import commands\n\nbot = commands.InteractionBot(test_guilds=[12345])\n\n@bot.user_command()\nasync def avatar(inter, user):\n    embed = disnake.Embed(title=str(user))\n    embed.set_image(url=user.display_avatar.url)\n    await inter.response.send_message(embed=embed)\n\nbot.run(\"BOT_TOKEN\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Specific Intents in Python with Disnake\nDESCRIPTION: This snippet shows how to configure specific intents in Disnake, enabling only messages and guilds intents. It also includes an optional line to enable reaction intents.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/intents.rst#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport disnake\nintents = disnake.Intents(messages=True, guilds=True)\n# If you also want reaction events enable the following:\n# intents.reactions = True\n\n# Somewhere else:\n# client = disnake.Client(intents=intents)\n# or\n# from disnake.ext import commands\n# bot = commands.Bot(command_prefix=commands.when_mentioned, intents=intents)\n```\n\n----------------------------------------\n\nTITLE: Documenting Messageable ABC in Python\nDESCRIPTION: This snippet shows the documentation structure for the Messageable abstract base class in Disnake. It includes special handling for the 'history' and 'typing' methods, using async-for and async-with directives.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/api/abc.rst#2025-04-18_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n.. attributetable:: Messageable\n\n.. autoclass:: Messageable()\n    :members:\n    :exclude-members: history, typing\n\n    .. automethod:: Messageable.history\n        :async-for:\n\n    .. automethod:: Messageable.typing\n        :async-with:\n```\n\n----------------------------------------\n\nTITLE: Using Event Listeners in Disnake Python\nDESCRIPTION: Example showing how to use event listeners with the listen decorator and add_listener method. This allows for multiple listeners of the same event type to be registered.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/api/events.rst#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@client.listen()\nasync def on_message(message: disnake.Message):\n    if message.author.bot:\n        return\n\n    if message.content.startswith('$hello'):\n        await message.reply(f'Hello, {message.author}')\n\n\nasync def my_on_ready():\n    print(f'Logged in as {client.user}')\n\nclient.add_listener(my_on_ready, 'on_ready')\n```\n\n----------------------------------------\n\nTITLE: Implementing Discord Prefix Commands with Disnake\nDESCRIPTION: Example of creating a traditional prefix-based command bot with Disnake. Shows basic command setup using the Bot class with mention as the prefix.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/README.md#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport disnake\nfrom disnake.ext import commands\n\nbot = commands.Bot(command_prefix=commands.when_mentioned)\n\n@bot.command()\nasync def ping(ctx):\n    await ctx.send(\"Pong!\")\n\nbot.run(\"BOT_TOKEN\")\n```\n\n----------------------------------------\n\nTITLE: Enabling Members Intent in Python with Disnake\nDESCRIPTION: This snippet demonstrates how to enable the members privileged intent in Disnake. It shows how to set up intents for both a Client and a Bot instance with the members intent enabled.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/intents.rst#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport disnake\nintents = disnake.Intents.default()\nintents.members = True\n\n# Somewhere else:\n# client = disnake.Client(intents=intents)\n# or\n# from disnake.ext import commands\n# bot = commands.Bot(command_prefix=commands.when_mentioned, intents=intents)\n```\n\n----------------------------------------\n\nTITLE: Documenting Permissions Class in Python\nDESCRIPTION: This snippet shows the documentation structure for the Permissions class in Disnake. It uses the attributetable and autoclass directives to generate documentation for the class and its members.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/api/permissions.rst#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. attributetable:: Permissions\n\n.. autoclass:: Permissions\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Permissions v2 Implementation\nDESCRIPTION: Example code for implementing the new permissions v2 system for application commands.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/whats_new.rst#2025-04-18_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Command with New Permissions\n@commands.default_member_permissions(Permissions(manage_guild=True))\n@bot.slash_command(dm_permission=False)\nasync def admin_command(inter):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Using Local Images in Discord Embeds\nDESCRIPTION: Demonstrates how to use local image files in Discord embeds by uploading them as attachments and referencing them in the embed.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/faq.rst#2025-04-18_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfile = disnake.File(\"path/to/my/image.png\", filename=\"image.png\")\nembed = disnake.Embed()\nembed.set_image(url=\"attachment://image.png\")\nawait channel.send(file=file, embed=embed)\n```\n\n----------------------------------------\n\nTITLE: Making Asynchronous Web Requests with aiohttp\nDESCRIPTION: Shows how to make non-blocking HTTP requests using aiohttp ClientSession. The example demonstrates proper async/await usage and response handling.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/faq.rst#2025-04-18_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nasync with aiohttp.ClientSession() as session:\n    async with session.get('http://aws.random.cat/meow') as r:\n        if r.status == 200:\n            js = await r.json()\n```\n\n----------------------------------------\n\nTITLE: AuditLogAction Class Documentation - Python\nDESCRIPTION: Comprehensive documentation of the AuditLogAction class used for tracking various administrative actions in Discord guilds. Includes detailed explanations of guild updates, channel management, permission overwrites, and member management actions.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/api/audit_logs.rst#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass AuditLogAction:\n    guild_update\n    channel_create\n    channel_update\n    channel_delete\n    overwrite_create\n    overwrite_update\n    overwrite_delete\n    kick\n    member_prune\n    ban\n    unban\n    member_update\n```\n\n----------------------------------------\n\nTITLE: Registering Role-related Event Handlers in Disnake\nDESCRIPTION: Demonstrates how to register event handlers for role-related events in Disnake. These events include role creation, deletion, and updates within a guild.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/api/roles.rst#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@client.event\nasync def on_guild_role_create(role):\n    # Handle role creation\n\n@client.event\nasync def on_guild_role_delete(role):\n    # Handle role deletion\n\n@client.event\nasync def on_guild_role_update(before, after):\n    # Handle role update\n```\n\n----------------------------------------\n\nTITLE: Implementing Extension Setup and Teardown in Python\nDESCRIPTION: Demonstrates how to implement both setup and teardown functions in a Disnake extension for proper initialization and cleanup.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/ext/commands/extensions.rst#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef setup(bot):\n    print('I am being loaded!')\n\ndef teardown(bot):\n    print('I am being unloaded!')\n```\n\n----------------------------------------\n\nTITLE: Running a coroutine after voice playback in Disnake\nDESCRIPTION: Shows how to call a coroutine from the non-coroutine 'after' callback in the voice player using asyncio.run_coroutine_threadsafe.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/faq.rst#2025-04-18_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndef my_after(error):\n    coro = some_channel.send('Song is done!')\n    fut = asyncio.run_coroutine_threadsafe(coro, client.loop)\n    try:\n        fut.result()\n    except:\n        # an error happened sending the message\n        pass\n\nvoice.play(disnake.FFmpegPCMAudio(url), after=my_after)\n```\n\n----------------------------------------\n\nTITLE: Finding Audit Log Entry Using AsyncIterator find() Method\nDESCRIPTION: Example demonstrating how to use the AsyncIterator find() method with a predicate to get the last audit log entry with a reason.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/api/misc.rst#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef predicate(event):\n    return event.reason is not None\n\nevent = await guild.audit_logs().find(predicate)\n```\n\n----------------------------------------\n\nTITLE: Handling Application Command Permission Updates in Disnake\nDESCRIPTION: Documentation for the event triggered when application command permissions are updated. This is called for permission changes to any application, not just the current one.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/api/events.rst#2025-04-18_snippet_9\n\nLANGUAGE: python\nCODE:\n```\non_application_command_permissions_update(permissions)\n```\n\n----------------------------------------\n\nTITLE: Handling Role Events in Python with Disnake\nDESCRIPTION: These functions handle events related to guild roles, including creation, deletion, and updates. They require the Intents.guilds intent to be enabled.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/api/events.rst#2025-04-18_snippet_31\n\nLANGUAGE: python\nCODE:\n```\ndef on_guild_role_create(role):\n    # Called when a Guild creates a Role\n    pass\n\ndef on_guild_role_delete(role):\n    # Called when a Guild deletes a Role\n    pass\n\ndef on_guild_role_update(before, after):\n    # Called when a Role is changed guild-wide\n    pass\n```\n\n----------------------------------------\n\nTITLE: Installing Disnake Package\nDESCRIPTION: Commands for installing the Disnake package using pip on different operating systems. Shows both basic installation and installation with voice support.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/README.md#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Linux/macOS\npython3 -m pip install -U disnake\n\n# Windows\npy -3 -m pip install -U disnake\n```\n\n----------------------------------------\n\nTITLE: Inter-Cog Communication in Disnake\nDESCRIPTION: Example showing how to access one cog from another to share data and functionality between different parts of a bot, such as an Economy system used by a Gambling system.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/ext/commands/cogs.rst#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass Economy(commands.Cog):\n    ...\n\n    async def withdraw_money(self, member, money):\n        # implementation here\n        ...\n\n    async def deposit_money(self, member, money):\n        # implementation here\n        ...\n\nclass Gambling(commands.Cog):\n    def __init__(self, bot):\n        self.bot = bot\n\n    def coinflip(self):\n        return random.randint(0, 1)\n\n    @commands.command()\n    async def gamble(self, ctx, money: int):\n        \"\"\"Gambles some money.\"\"\"\n        economy = self.bot.get_cog('Economy')\n        if economy is not None:\n            await economy.withdraw_money(ctx.author, money)\n            if self.coinflip() == 1:\n                await economy.deposit_money(ctx.author, money * 1.5)\n```\n\n----------------------------------------\n\nTITLE: Mapping Message Content Using AsyncIterator map() Method\nDESCRIPTION: Example demonstrating how to use the AsyncIterator map() method to transform messages into their content strings.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/api/misc.rst#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef transform(message):\n    return message.content\n\nasync for content in channel.history().map(transform):\n    message_length = len(content)\n```\n\n----------------------------------------\n\nTITLE: Handling Scheduled Event Updates in Python with Disnake\nDESCRIPTION: These functions handle events related to guild scheduled events, including creation, deletion, updates, and user subscriptions. They require the Intents.guild_scheduled_events intent to be enabled.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/api/events.rst#2025-04-18_snippet_32\n\nLANGUAGE: python\nCODE:\n```\ndef on_guild_scheduled_event_create(event):\n    # Called when a guild scheduled event is created\n    pass\n\ndef on_guild_scheduled_event_delete(event):\n    # Called when a guild scheduled event is deleted\n    pass\n\ndef on_guild_scheduled_event_update(before, after):\n    # Called when a guild scheduled event is updated\n    pass\n\ndef on_guild_scheduled_event_subscribe(event, user):\n    # Called when a user subscribes to a guild scheduled event\n    pass\n\ndef on_guild_scheduled_event_unsubscribe(event, user):\n    # Called when a user unsubscribes from a guild scheduled event\n    pass\n```\n\n----------------------------------------\n\nTITLE: Implementing Subcommands Using Command Groups\nDESCRIPTION: Demonstrates how to create command groups and subcommands using the group decorator.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/faq.rst#2025-04-18_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n@bot.group()\nasync def git(ctx):\n    if ctx.invoked_subcommand is None:\n        await ctx.send('Invalid git command passed...')\n\n@git.command()\nasync def push(ctx, remote: str, branch: str):\n    await ctx.send(f'Pushing to {remote} {branch}')\n```\n\n----------------------------------------\n\nTITLE: Limited Count Task Loop\nDESCRIPTION: Example of a task loop that runs a specific number of times (5) and executes a callback after completion.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/ext/tasks/index.rst#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom disnake.ext import tasks\n\n@tasks.loop(seconds=5.0, count=5)\nasync def slow_count():\n    print(slow_count.current_loop)\n\n@slow_count.after_loop\nasync def after_slow_count():\n    print('done!')\n\nslow_count.start()\n```\n\n----------------------------------------\n\nTITLE: Filtering Non-bot Messages Using AsyncIterator filter() Method\nDESCRIPTION: Example showing how to use the AsyncIterator filter() method to filter messages from non-bot accounts.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/api/misc.rst#2025-04-18_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef predicate(message):\n    return not message.author.bot\n\nasync for elem in channel.history().filter(predicate):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Handling Soundboard Updates in Python with Disnake\nDESCRIPTION: This function handles updates to a guild's soundboard sounds. It requires the Intents.expressions intent to be enabled.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/api/events.rst#2025-04-18_snippet_34\n\nLANGUAGE: python\nCODE:\n```\ndef on_guild_soundboard_sounds_update(guild, before, after):\n    # Called when a Guild updates its soundboard sounds\n    pass\n```\n\n----------------------------------------\n\nTITLE: Installing Disnake via pip\nDESCRIPTION: Command-line instructions for installing the disnake library using pip. Shows different variations including the basic install, Windows-specific command, and the voice support variant.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/intro.rst#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npython3 -m pip install -U disnake\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging for Disnake in Python\nDESCRIPTION: This snippet demonstrates how to set up and use the logging module with Disnake. It's important for capturing diagnostic information and errors in an output-independent way.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/api/index.rst#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport logging\n\n# Configure the logging module\nlogging.basicConfig(level=logging.INFO)\n\n# Use the logger in your Disnake code\nlogger = logging.getLogger('disnake')\nlogger.info('Disnake bot is starting')\n```\n\n----------------------------------------\n\nTITLE: Breaking Changes - Action Row Refactoring\nDESCRIPTION: Updates to ActionRow class including immutable children sequence and new item management methods.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/whats_new.rst#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# New methods\nrow.insert_item(index, item)\nrow.clear_items()\nrow.remove_item(item)\nrow.pop(index)\nrow.add_button(label=\"Click me\", index=0)\n```\n\n----------------------------------------\n\nTITLE: Handling Private Channel Events in Disnake\nDESCRIPTION: Documentation for event callbacks related to private channels, including updates and pin changes. These events require the messages intent to be enabled.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/api/events.rst#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\non_private_channel_update(before, after)\n\non_private_channel_pins_update(channel, last_pin)\n```\n\n----------------------------------------\n\nTITLE: Advanced Logging Configuration for Disnake in Python\nDESCRIPTION: This snippet shows an advanced logging setup for Disnake. It configures logging to write to a file named 'disnake.log' with a custom format, set to DEBUG level.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/logging.rst#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport disnake\nimport logging\n\nlogger = logging.getLogger('disnake')\nlogger.setLevel(logging.DEBUG)\nhandler = logging.FileHandler(filename='disnake.log', encoding='utf-8', mode='w')\nhandler.setFormatter(logging.Formatter('%(asctime)s:%(levelname)s:%(name)s: %(message)s'))\nlogger.addHandler(handler)\n```\n\n----------------------------------------\n\nTITLE: Setting Discord bot activity status with Disnake\nDESCRIPTION: Demonstrates different ways to set a bot's activity status including playing, watching, and custom status using the Disnake library.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/faq.rst#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclient = disnake.Client(activity=disnake.Game(name='my game'))\n\n# alternatively, a plain custom status:\nclient = disnake.Client(activity=disnake.CustomActivity(name='As seen on TV!'))\n\n# or, for watching:\nactivity = disnake.Activity(name='my activity', type=disnake.ActivityType.watching)\nclient = disnake.Client(activity=activity)\n```\n\n----------------------------------------\n\nTITLE: Adding sync_commands_on_cog_unload and sync_permissions Parameters to InteractionBotBase in Python\nDESCRIPTION: Adds sync_commands_on_cog_unload and sync_permissions keyword arguments to the InteractionBotBase class constructor in the commands extension.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/whats_new.rst#2025-04-18_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nInteractionBotBase(sync_commands_on_cog_unload=..., sync_permissions=...)\n```\n\n----------------------------------------\n\nTITLE: Handling Member Updates in Disnake\nDESCRIPTION: Event handler called when a Member is updated in a Guild. Triggered for changes to avatar, timeout, nickname, pending status, premium status, or roles. Requires Intents.members to be enabled.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/api/events.rst#2025-04-18_snippet_23\n\nLANGUAGE: python\nCODE:\n```\non_member_update(before, after)\n```\n\n----------------------------------------\n\nTITLE: Customizing Cog Name in Disnake\nDESCRIPTION: Shows how to override the default cog name by passing the name parameter to the class definition, which affects how the cog can be referenced.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/ext/commands/cogs.rst#2025-04-18_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass MyCog(commands.Cog, name='My Cog'):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Reloading Disnake Extension Example\nDESCRIPTION: Shows how to reload a Disnake extension at runtime using the reload_extension method.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/ext/commands/extensions.rst#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> bot.reload_extension('hello')\n```\n\n----------------------------------------\n\nTITLE: Defining Integration Class in Python\nDESCRIPTION: Declares the Integration class, which represents a Discord integration. It inherits members from a parent class.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/api/integrations.rst#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. autoclass:: Integration()\n    :members:\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Message Event Handler\nDESCRIPTION: Shows how to properly override the on_message event while maintaining command functionality by calling process_commands().\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/faq.rst#2025-04-18_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n@bot.event\nasync def on_message(message):\n    # do some extra stuff here\n\n    await bot.process_commands(message)\n```\n\n----------------------------------------\n\nTITLE: Basic Logging Configuration for Disnake in Python\nDESCRIPTION: This snippet demonstrates how to set up basic logging for Disnake using Python's logging module. It configures logging to output to the console with an INFO level.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/logging.rst#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport logging\n\nlogging.basicConfig(level=logging.INFO)\n```\n\n----------------------------------------\n\nTITLE: Task Loop with Exception Handling\nDESCRIPTION: Shows how to add custom exception handling for database connection errors in a task loop that runs every 5 minutes.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/ext/tasks/index.rst#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport asyncpg\nfrom disnake.ext import tasks, commands\n\nclass MyCog(commands.Cog):\n    def __init__(self, bot):\n        self.bot = bot\n        self.data = []\n        self.batch_update.add_exception_type(asyncpg.PostgresConnectionError)\n        self.batch_update.start()\n\n    def cog_unload(self):\n        self.batch_update.cancel()\n\n    @tasks.loop(minutes=5.0)\n    async def batch_update(self):\n        async with self.bot.pool.acquire() as con:\n            # batch update here...\n            pass\n```\n\n----------------------------------------\n\nTITLE: Handling Integration Updates in Disnake\nDESCRIPTION: Event handler called when an integration is updated. Requires Intents.integrations to be enabled.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/api/events.rst#2025-04-18_snippet_18\n\nLANGUAGE: python\nCODE:\n```\non_integration_update(integration)\n```\n\n----------------------------------------\n\nTITLE: Getting Last Message Using AsyncIterator get() Method\nDESCRIPTION: Example showing how to use the AsyncIterator get() method to find the last message from a specific user named 'Dave'.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/api/misc.rst#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nmsg = await channel.history().get(author__name='Dave')\n```\n\n----------------------------------------\n\nTITLE: Task Loop with Cancellation Handling\nDESCRIPTION: Shows how to handle task cancellation by performing cleanup operations when the loop is cancelled with remaining data.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/ext/tasks/index.rst#2025-04-18_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom disnake.ext import tasks, commands\nimport asyncio\n\nclass MyCog(commands.Cog):\n    def __init__(self, bot):\n        self.bot= bot\n        self._batch = []\n        self.lock = asyncio.Lock()\n        self.bulker.start()\n\n    async def do_bulk(self):\n        # bulk insert data here\n        ...\n\n    @tasks.loop(seconds=10.0)\n    async def bulker(self):\n        async with self.lock:\n            await self.do_bulk()\n\n    @bulker.after_loop\n    async def on_bulker_cancel(self):\n        if self.bulker.is_being_cancelled() and len(self._batch) != 0:\n            # if we're cancelled and we have some data left...\n            # let's insert it to our database\n            await self.do_bulk()\n```\n\n----------------------------------------\n\nTITLE: Handling Stage Instance Events in Python with Disnake\nDESCRIPTION: These functions handle events related to stage instances, including creation, deletion, and updates for stage channels.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/api/events.rst#2025-04-18_snippet_35\n\nLANGUAGE: python\nCODE:\n```\ndef on_stage_instance_create(stage_instance):\n    # Called when a StageInstance is created\n    pass\n\ndef on_stage_instance_delete(stage_instance):\n    # Called when a StageInstance is deleted\n    pass\n\ndef on_stage_instance_update(before, after):\n    # Called when a StageInstance is updated\n    pass\n```\n\n----------------------------------------\n\nTITLE: Task Loop with Bot Ready Check\nDESCRIPTION: Implements a task loop that waits for the bot to be ready before starting its execution using a before_loop handler.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/ext/tasks/index.rst#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom disnake.ext import tasks, commands\n\nclass MyCog(commands.Cog):\n    def __init__(self, bot):\n        self.index = 0\n        self.bot = bot\n        self.printer.start()\n\n    def cog_unload(self):\n        self.printer.cancel()\n\n    @tasks.loop(seconds=5.0)\n    async def printer(self):\n        print(self.index)\n        self.index += 1\n\n    @printer.before_loop\n    async def before_printer(self):\n        print('waiting...')\n        await self.bot.wait_until_ready()\n```\n\n----------------------------------------\n\nTITLE: Handling AutoMod Rule Updates in Disnake\nDESCRIPTION: Event handler called when an AutoModRule is updated. Requires manage_guild permission and Intents.automod_configuration to be enabled.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/api/events.rst#2025-04-18_snippet_13\n\nLANGUAGE: python\nCODE:\n```\non_automod_rule_update(rule)\n```\n\n----------------------------------------\n\nTITLE: Handling Voice State Changes in Python with Disnake\nDESCRIPTION: This function handles changes to a member's voice state, including joining/leaving channels and mute/deafen status changes. It requires the Intents.voice_states intent to be enabled.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/api/events.rst#2025-04-18_snippet_37\n\nLANGUAGE: python\nCODE:\n```\ndef on_voice_state_update(member, before, after):\n    # Called when a Member changes their VoiceState\n    pass\n```\n\n----------------------------------------\n\nTITLE: Message Event Handlers in Disnake\nDESCRIPTION: Event handlers for message creation, editing, and deletion. Requires messages intent to be enabled. Handles both cached and raw message events.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/api/events.rst#2025-04-18_snippet_41\n\nLANGUAGE: python\nCODE:\n```\nasync def on_message(message):\n    # Called when a Message is created and sent\n    pass\n\nasync def on_message_edit(before, after):\n    # Called when a Message receives an update event\n    pass\n\nasync def on_message_delete(message):\n    # Called when a message is deleted\n    pass\n\nasync def on_bulk_message_delete(messages):\n    # Called when messages are bulk deleted\n    pass\n```\n\n----------------------------------------\n\nTITLE: Handling Guild Sticker Updates in Python with Disnake\nDESCRIPTION: This function handles updates to a guild's stickers. It requires the Intents.expressions intent to be enabled.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/api/events.rst#2025-04-18_snippet_36\n\nLANGUAGE: python\nCODE:\n```\ndef on_guild_stickers_update(guild, before, after):\n    # Called when a Guild updates its stickers\n    pass\n```\n\n----------------------------------------\n\nTITLE: Handling AutoMod Action Execution in Disnake\nDESCRIPTION: Event handler triggered when an AutoMod action is executed due to a rule violation. Requires manage_guild permission and Intents.automod_execution. Additionally requires Intents.message_content for non-empty content values.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/api/events.rst#2025-04-18_snippet_11\n\nLANGUAGE: python\nCODE:\n```\non_automod_action_execution(execution)\n```\n\n----------------------------------------\n\nTITLE: Handling Component Interactions in Python with Disnake\nDESCRIPTION: These functions handle interactions with various components like buttons and dropdowns.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/api/events.rst#2025-04-18_snippet_40\n\nLANGUAGE: python\nCODE:\n```\ndef on_button_click(interaction):\n    # Called when a button is clicked\n    pass\n\ndef on_dropdown(interaction):\n    # Called when a select menu is clicked\n    pass\n\ndef on_interaction(interaction):\n    # Called when any interaction happens\n    pass\n\ndef on_message_interaction(interaction):\n    # Called when a message interaction happens\n    pass\n\ndef on_modal_submit(interaction):\n    # Called when a modal is submitted\n    pass\n```\n\n----------------------------------------\n\nTITLE: Handling Raw Scheduled Event Actions in Python with Disnake\nDESCRIPTION: These functions handle raw events for user actions on guild scheduled events, regardless of the event cache state. They provide access to the raw event payload data.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/api/events.rst#2025-04-18_snippet_33\n\nLANGUAGE: python\nCODE:\n```\ndef on_raw_guild_scheduled_event_subscribe(payload):\n    # Called when a user subscribes to a guild scheduled event (raw event)\n    pass\n\ndef on_raw_guild_scheduled_event_unsubscribe(payload):\n    # Called when a user unsubscribes from a guild scheduled event (raw event)\n    pass\n```\n\n----------------------------------------\n\nTITLE: Handling Audit Log Entry Creation in Disnake\nDESCRIPTION: Event handler that is called when an audit log entry is created in a guild. Requires the view_audit_log permission and Intents.moderation to be enabled. The data scope is limited and relies heavily on the cache.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/api/events.rst#2025-04-18_snippet_10\n\nLANGUAGE: python\nCODE:\n```\non_audit_log_entry_create(entry)\n```\n\n----------------------------------------\n\nTITLE: Handling Guild Events in Disnake\nDESCRIPTION: Documentation for event callbacks related to Discord guilds, including joining, removal, updates, and availability changes. These events require the guilds intent to be enabled.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/api/events.rst#2025-04-18_snippet_8\n\nLANGUAGE: python\nCODE:\n```\non_guild_join(guild)\n\non_guild_remove(guild)\n\non_guild_update(before, after)\n\non_guild_available(guild)\non_guild_unavailable(guild)\n```\n\n----------------------------------------\n\nTITLE: Handling Prefix Command Events in Disnake\nDESCRIPTION: Event handlers for prefix-based commands in Disnake. These events allow responding to command invocation, successful completion, and error conditions in prefix-based commands.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/ext/commands/api/events.rst#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\non_command(ctx)\n```\n\nLANGUAGE: python\nCODE:\n```\non_command_completion(ctx)\n```\n\nLANGUAGE: python\nCODE:\n```\non_command_error(ctx, error)\n```\n\n----------------------------------------\n\nTITLE: Handling Application Command Events in Python with Disnake\nDESCRIPTION: These functions handle application command invocations and autocompletion. They are low-level functions not generally meant for direct use.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/api/events.rst#2025-04-18_snippet_39\n\nLANGUAGE: python\nCODE:\n```\ndef on_application_command(interaction):\n    # Called when an application command is invoked\n    pass\n\ndef on_application_command_autocomplete(interaction):\n    # Called when an application command autocomplete is called\n    pass\n```\n\n----------------------------------------\n\nTITLE: Creating Simple Echo Command\nDESCRIPTION: Demonstrates two approaches to creating an echo command - one requiring quoted arguments and another using rest parameters.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/faq.rst#2025-04-18_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n@bot.command()\nasync def echo(ctx, *, message: str):\n    await ctx.send(message)\n```\n\n----------------------------------------\n\nTITLE: Breaking Changes - Embed Internal Modifications\nDESCRIPTION: Changes to the Embed class internal structure including making text parameter required for set_footer and making type optional. Deprecates EmptyEmbed and Embed.Empty in favor of None.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/whats_new.rst#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nembed.set_footer(text=\"Required text\")  # text parameter now required\nembed.type = None  # type is now optional, use None instead of Embed.Empty\n```\n\n----------------------------------------\n\nTITLE: Removing a Cog from a Disnake Bot\nDESCRIPTION: Demonstrates how to remove a previously registered cog from a bot by referencing its name.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/ext/commands/cogs.rst#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nbot.remove_cog('Greetings')\n```\n\n----------------------------------------\n\nTITLE: Handling Presence Updates in Disnake\nDESCRIPTION: Event handler called when a Member updates their presence (status or activity). Requires both Intents.presences and Intents.members to be enabled.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/api/events.rst#2025-04-18_snippet_28\n\nLANGUAGE: python\nCODE:\n```\non_presence_update(before, after)\n```\n\n----------------------------------------\n\nTITLE: Invite Event Handlers in Python\nDESCRIPTION: Event handlers for invite creation and deletion events in disnake. These events are triggered when invites are created or removed from a guild.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/api/invites.rst#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@client.event\nasync def on_invite_create(invite):\n    pass\n\n@client.event\nasync def on_invite_delete(invite):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Adding max_value Parameter to Param Function in Python\nDESCRIPTION: Adds max_value keyword argument (with aliases le and lt) to the Param function in the commands extension.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/whats_new.rst#2025-04-18_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nParam(max_value=...)\n```\n\n----------------------------------------\n\nTITLE: Handling Raw Member Removal in Disnake\nDESCRIPTION: Event handler called when a member leaves a Guild. Unlike on_member_remove, this is called regardless of the member cache state. Requires Intents.members to be enabled.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/api/events.rst#2025-04-18_snippet_24\n\nLANGUAGE: python\nCODE:\n```\non_raw_member_remove(payload)\n```\n\n----------------------------------------\n\nTITLE: Handling Member Unbans in Disnake\nDESCRIPTION: Event handler called when a User gets unbanned from a Guild. Requires Intents.moderation to be enabled.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/api/events.rst#2025-04-18_snippet_27\n\nLANGUAGE: python\nCODE:\n```\non_member_unban(guild, user)\n```\n\n----------------------------------------\n\nTITLE: Thread Creation with Options Python Code Example\nDESCRIPTION: Example showing thread creation with new slowmode and invitable parameters\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/whats_new.rst#2025-04-18_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nawait channel.create_thread(name=\"thread\", slowmode_delay=30, invitable=True)\nawait message.create_thread(name=\"thread\", slowmode_delay=30)\n```\n\n----------------------------------------\n\nTITLE: Parameter Injection Python Code Example\nDESCRIPTION: Example usage of new parameter injection functionality for commands\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/whats_new.rst#2025-04-18_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n@inject\n@register_injection\n@converter_method\ndef my_command():\n    # Command implementation\n    pass\n```\n\n----------------------------------------\n\nTITLE: Handling Raw Member Updates in Disnake\nDESCRIPTION: Event handler called when a Member is updated in a Guild. Unlike on_member_update, this is called regardless of the member cache state. Requires Intents.members to be enabled.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/api/events.rst#2025-04-18_snippet_25\n\nLANGUAGE: python\nCODE:\n```\non_raw_member_update(member)\n```\n\n----------------------------------------\n\nTITLE: Handling Invite Deletion in Disnake\nDESCRIPTION: Event handler called when an Invite is deleted. Requires manage_channels permission and Intents.invites to be enabled. Only the code attribute is guaranteed to be filled by the Discord gateway.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/api/events.rst#2025-04-18_snippet_21\n\nLANGUAGE: python\nCODE:\n```\non_invite_delete(invite)\n```\n\n----------------------------------------\n\nTITLE: Accessing on_message_command_completion Event in Python\nDESCRIPTION: Adds the on_message_command_completion event to the commands extension.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/whats_new.rst#2025-04-18_snippet_20\n\nLANGUAGE: python\nCODE:\n```\non_message_command_completion\n```\n\n----------------------------------------\n\nTITLE: Defining StageInstance Class in Python for Disnake\nDESCRIPTION: This snippet defines the StageInstance class, which represents a stage instance in Discord. It includes various attributes and methods related to stage instances.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/api/stage_instances.rst#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. autoclass:: StageInstance()\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Handling Guild Emoji Updates in Disnake\nDESCRIPTION: Event handler called when a Guild adds or removes Emoji. Requires Intents.expressions to be enabled. Provides lists of emojis before and after the update.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/api/events.rst#2025-04-18_snippet_15\n\nLANGUAGE: python\nCODE:\n```\non_guild_emojis_update(guild, before, after)\n```\n\n----------------------------------------\n\nTITLE: Handling AutoMod Rule Creation in Disnake\nDESCRIPTION: Event handler called when an AutoModRule is created. Requires manage_guild permission and Intents.automod_configuration to be enabled.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/api/events.rst#2025-04-18_snippet_12\n\nLANGUAGE: python\nCODE:\n```\non_automod_rule_create(rule)\n```\n\n----------------------------------------\n\nTITLE: Accessing guild_permissions Function in Python\nDESCRIPTION: Adds the guild_permissions function to the commands extension.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/whats_new.rst#2025-04-18_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nguild_permissions\n```\n\n----------------------------------------\n\nTITLE: Defining AuditLogDiff Class in Python\nDESCRIPTION: This code snippet defines the AuditLogDiff class, which represents an audit log 'change' object. It has dynamic attributes that depend on the type of action being done, and includes methods for iteration and various attributes representing different aspects of a guild or channel.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/api/audit_logs.rst#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass AuditLogDiff:\n    \"\"\"\n    Represents an audit log \"change\" object. A change object has dynamic\n    attributes that depend on the type of action being done. Certain actions\n    map to certain attributes being set.\n\n    Note that accessing an attribute that does not match the specified action\n    will lead to an attribute error.\n\n    To get a list of attributes that have been set, you can iterate over\n    them. To see a list of all possible attributes that could be set based\n    on the action being done, check the documentation for :class:`AuditLogAction`,\n    otherwise check the documentation below for all attributes that are possible.\n\n    .. collapse:: operations\n\n        .. describe:: iter(diff)\n\n            Returns an iterator over ``(attribute, value)`` tuples of this diff.\n\n    .. attribute:: name\n\n        A name of something.\n\n        :type: :class:`str`\n\n    .. attribute:: icon\n\n        A guild's or role's icon.\n\n        See also :attr:`Guild.icon` or :attr:`Role.icon`.\n\n        :type: :class:`Asset`\n\n    # ... (other attributes omitted for brevity)\n\n    .. attribute:: privacy_level\n\n        The privacy level of the stage instance or guild scheduled event.\n\n        :type: Union[:class:`StagePrivacyLevel`, :class:`GuildScheduledEventPrivacyLevel`]\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Chunking Users with AsyncIterator chunk() Method\nDESCRIPTION: Example showing how to use the AsyncIterator chunk() method to collect users into groups of a specified size.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/api/misc.rst#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nasync for leader, *users in reaction.users().chunk(3):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Handling Webhook Events in Disnake\nDESCRIPTION: Documentation for the webhook update event that is triggered when a webhook is created, modified, or removed from a guild channel. This requires the webhooks intent to be enabled.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/api/events.rst#2025-04-18_snippet_7\n\nLANGUAGE: python\nCODE:\n```\non_webhooks_update(channel)\n```\n\n----------------------------------------\n\nTITLE: Adding owner Parameter to guild_permissions Function in Python\nDESCRIPTION: Adds owner keyword argument to the guild_permissions function in the commands extension.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/whats_new.rst#2025-04-18_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nguild_permissions(owner=...)\n```\n\n----------------------------------------\n\nTITLE: Documenting Localized Class\nDESCRIPTION: This directive generates documentation for the Localized class in Disnake, including all its members and inherited members.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/api/localization.rst#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n.. autoclass:: Localized\n    :members:\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Defining String Select Decorator in Python for Disnake\nDESCRIPTION: This code snippet defines a decorator function for creating string select menu components in Disnake. It allows customization of properties like custom_id, placeholder, min/max values, and options.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/api/ui.rst#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nstring_select(cls=StringSelect, *, custom_id=..., placeholder=None, min_values=1, max_values=1, options=..., disabled=False, row=None)\n```\n\n----------------------------------------\n\nTITLE: Handling User Updates in Disnake\nDESCRIPTION: Event handler called when a User is updated. Triggered for changes to avatar, discriminator, name, global_name, or public_flags.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/api/events.rst#2025-04-18_snippet_30\n\nLANGUAGE: python\nCODE:\n```\non_user_update(before, after)\n```\n\n----------------------------------------\n\nTITLE: Adding min_value Parameter to Param Function in Python\nDESCRIPTION: Adds min_value keyword argument (with aliases ge and gt) to the Param function in the commands extension.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/whats_new.rst#2025-04-18_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nParam(min_value=...)\n```\n\n----------------------------------------\n\nTITLE: Documenting LocalizationValue Class\nDESCRIPTION: This directive generates documentation for the LocalizationValue class in Disnake, including all its members and inherited members.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/api/localization.rst#2025-04-18_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n.. autoclass:: LocalizationValue\n    :members:\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Handling Raw Integration Deletion in Disnake\nDESCRIPTION: Event handler called when an integration is deleted. Requires Intents.integrations to be enabled. Provides raw event payload data.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/api/events.rst#2025-04-18_snippet_19\n\nLANGUAGE: python\nCODE:\n```\non_raw_integration_delete(payload)\n```\n\n----------------------------------------\n\nTITLE: Defining Channel Select Decorator in Python for Disnake\nDESCRIPTION: This code snippet defines a decorator function for creating channel select menu components in Disnake. It allows customization of properties like custom_id, placeholder, min/max values, and channel types.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/api/ui.rst#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nchannel_select(cls=ChannelSelect, *, custom_id=..., placeholder=None, min_values=1, max_values=1, disabled=False, channel_types=None, default_values=None, row=None)\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Intents in Python with Disnake\nDESCRIPTION: This snippet demonstrates how to configure default intents in Disnake, disabling typing and presence intents. It shows how to set up intents for both a Client and a Bot instance.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/intents.rst#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport disnake\nintents = disnake.Intents.default()\nintents.typing = False\nintents.presences = False\n\n# Somewhere else:\n# client = disnake.Client(intents=intents)\n# or\n# from disnake.ext import commands\n# bot = commands.Bot(command_prefix=commands.when_mentioned, intents=intents)\n```\n\n----------------------------------------\n\nTITLE: Adding min_value and max_value Parameters to Option Class in Python\nDESCRIPTION: Adds min_value and max_value keyword arguments to the Option class constructor.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/whats_new.rst#2025-04-18_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nOption(min_value=..., max_value=...)\n```\n\n----------------------------------------\n\nTITLE: Poll Vote Event Handlers in Disnake\nDESCRIPTION: Event handlers for poll vote addition and removal. Requires guild_polls or dm_polls intents to be enabled. Handles both cached and raw poll events.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/api/events.rst#2025-04-18_snippet_42\n\nLANGUAGE: python\nCODE:\n```\nasync def on_poll_vote_add(member, answer):\n    # Called when a vote is added on a poll\n    pass\n\nasync def on_poll_vote_remove(member, answer):\n    # Called when a vote is removed on a poll\n    pass\n```\n\n----------------------------------------\n\nTITLE: Awaiting Coroutine Functions in disnake v0.10.0\nDESCRIPTION: Demonstrates how to properly await coroutine functions in the new version, using both yield from and await syntax.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/migrating_to_async.rst#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nyield from client.send_message(message.channel, 'Hello')\n\n# or in python 3.5+\nawait client.send_message(message.channel, 'Hello')\n```\n\n----------------------------------------\n\nTITLE: Accessing Original Message in Commands\nDESCRIPTION: Shows how to access the original message object from within a command's context.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/faq.rst#2025-04-18_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n@bot.command()\nasync def length(ctx):\n    await ctx.send(f'Your message is {len(ctx.message.content)} characters long.')\n```\n\n----------------------------------------\n\nTITLE: Accessing UnresolvedGuildApplicationCommandPermissions Class in Python\nDESCRIPTION: Adds the UnresolvedGuildApplicationCommandPermissions class to the library.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/whats_new.rst#2025-04-18_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nUnresolvedGuildApplicationCommandPermissions\n```\n\n----------------------------------------\n\nTITLE: Handling Voice Channel Effects in Python with Disnake\nDESCRIPTION: These functions handle voice channel effects sent by members. They require Intents.voice_states and Intents.members to be enabled.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/api/events.rst#2025-04-18_snippet_38\n\nLANGUAGE: python\nCODE:\n```\ndef on_voice_channel_effect(channel, member, effect):\n    # Called when a Member sends an effect in a voice channel\n    pass\n\ndef on_raw_voice_channel_effect(payload):\n    # Called when a Member sends an effect in a voice channel (raw event)\n    pass\n```\n\n----------------------------------------\n\nTITLE: Handling Raw Presence Updates in Disnake\nDESCRIPTION: Event handler called when a member updates their presence, regardless of the member cache state. Care must be taken when accessing dictionary fields due to potential partial data. Requires Intents.presences.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/api/events.rst#2025-04-18_snippet_29\n\nLANGUAGE: python\nCODE:\n```\non_raw_presence_update(payload)\n```\n\n----------------------------------------\n\nTITLE: Defining BanEntry NamedTuple in Python\nDESCRIPTION: Defines a NamedTuple called BanEntry representing a ban returned from Guild.bans(). It contains two attributes: reason (Optional[str]) and user (User).\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/api/guilds.rst#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass BanEntry:\n    reason: Optional[str]\n    user: User\n```\n\n----------------------------------------\n\nTITLE: Using Client.async_event Decorator for Event Registration\nDESCRIPTION: Shows how to use the Client.async_event decorator for easier coroutine event registration.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/migrating_to_async.rst#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@client.async_event\ndef on_message(message):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Command Check Methods\nDESCRIPTION: Non-decorator interface for adding and removing command checks.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/whats_new_legacy.rst#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nCommand.add_check(check_function)\nCommand.remove_check(check_function)\n```\n\n----------------------------------------\n\nTITLE: Raw Event Handlers in Disnake\nDESCRIPTION: Raw event handlers that work regardless of cache state. Provides direct access to gateway event data for message updates, deletions, and poll votes.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/api/events.rst#2025-04-18_snippet_43\n\nLANGUAGE: python\nCODE:\n```\nasync def on_raw_message_edit(payload):\n    # Called when a message is edited (raw event)\n    pass\n\nasync def on_raw_message_delete(payload):\n    # Called when a message is deleted (raw event)\n    pass\n\nasync def on_raw_bulk_message_delete(payload):\n    # Called when messages are bulk deleted (raw event)\n    pass\n\nasync def on_raw_poll_vote_add(payload):\n    # Called when a poll vote is added (raw event)\n    pass\n\nasync def on_raw_poll_vote_remove(payload):\n    # Called when a poll vote is removed (raw event)\n    pass\n```\n\n----------------------------------------\n\nTITLE: Defining AuditLogChanges Class in Python\nDESCRIPTION: This code snippet defines the AuditLogChanges class, which represents an audit log change set. It has two attributes: 'before' and 'after', both of type AuditLogDiff, representing the old and new values respectively.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/api/audit_logs.rst#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass AuditLogChanges:\n    \"\"\"\n    An audit log change set.\n\n    .. attribute:: before\n\n        The old value. The attribute has the type of :class:`AuditLogDiff`.\n\n        Depending on the :class:`AuditLogActionCategory` retrieved by\n        :attr:`~AuditLogEntry.category`\\, the data retrieved by this\n        attribute differs:\n\n        +----------------------------------------+------------------------------------------------------+\n        |                Category                |                    Description                       |\n        +----------------------------------------+------------------------------------------------------+\n        | :attr:`~AuditLogActionCategory.create` | All attributes are set to ``None``.                  |\n        +----------------------------------------+------------------------------------------------------+\n        | :attr:`~AuditLogActionCategory.delete` | All attributes are set to the value before deletion. |\n        +----------------------------------------+------------------------------------------------------+\n        | :attr:`~AuditLogActionCategory.update` | All attributes are set to the value before updating. |\n        +----------------------------------------+------------------------------------------------------+\n        | ``None``                               | No attributes are set.                               |\n        +----------------------------------------+------------------------------------------------------+\n\n    .. attribute:: after\n\n        The new value. The attribute has the type of :class:`AuditLogDiff`.\n\n        Depending on the :class:`AuditLogActionCategory` retrieved by\n        :attr:`~AuditLogEntry.category`\\, the data retrieved by this\n        attribute differs:\n\n        +----------------------------------------+-----------------------------------------------------+\n        |                Category                |                   Description                       |\n        +----------------------------------------+-----------------------------------------------------+\n        | :attr:`~AuditLogActionCategory.create` | All attributes are set to the created value.        |\n        +----------------------------------------+-----------------------------------------------------+\n        | :attr:`~AuditLogActionCategory.delete` | All attributes are set to ``None``.                 |\n        +----------------------------------------+-----------------------------------------------------+\n        | :attr:`~AuditLogActionCategory.update` | All attributes are set to the value after updating. |\n        +----------------------------------------+-----------------------------------------------------+\n        | ``None``                               | No attributes are set.                               |\n        +----------------------------------------+-----------------------------------------------------+\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Running the Client in disnake v0.10.0\nDESCRIPTION: Shows the updated method for running the client, passing credentials directly to the run method.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/migrating_to_async.rst#2025-04-18_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclient.run('token')\n```\n\n----------------------------------------\n\nTITLE: Custom Activities Implementation\nDESCRIPTION: Support for custom activities via CustomActivity class, though not available for bots currently.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/whats_new_legacy.rst#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nCustomActivity(...)\n```\n\n----------------------------------------\n\nTITLE: Handling Message Command Events in Disnake\nDESCRIPTION: Event handlers for message commands in Disnake. These events allow responding to message command invocation, successful completion, and error conditions.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/ext/commands/api/events.rst#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\non_message_command(inter)\n```\n\nLANGUAGE: python\nCODE:\n```\non_message_command_completion(inter)\n```\n\nLANGUAGE: python\nCODE:\n```\non_message_command_error(inter, error)\n```\n\n----------------------------------------\n\nTITLE: Defining Mentionable Select Decorator in Python for Disnake\nDESCRIPTION: This code snippet defines a decorator function for creating mentionable select menu components in Disnake. It allows customization of properties like custom_id, placeholder, and min/max values.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/api/ui.rst#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nmentionable_select(cls=MentionableSelect, *, custom_id=..., placeholder=None, min_values=1, max_values=1, disabled=False, default_values=None, row=None)\n```\n\n----------------------------------------\n\nTITLE: Defining ThreadWithMessage NamedTuple in Python\nDESCRIPTION: Defines a NamedTuple called ThreadWithMessage representing a thread and its initial message. This is returned by the ForumChannel.create_thread method. It contains two attributes: thread (of type Thread) and message (of type Message).\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/api/channels.rst#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass ThreadWithMessage:\n    thread: Thread\n    message: Message\n```\n\n----------------------------------------\n\nTITLE: Accessing GuildApplicationCommandPermissions Class in Python\nDESCRIPTION: Adds the GuildApplicationCommandPermissions class to the library.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/whats_new.rst#2025-04-18_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nGuildApplicationCommandPermissions\n```\n\n----------------------------------------\n\nTITLE: Accessing PartialGuildApplicationCommandPermissions Class in Python\nDESCRIPTION: Adds the PartialGuildApplicationCommandPermissions class to the library.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/whats_new.rst#2025-04-18_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nPartialGuildApplicationCommandPermissions\n```\n\n----------------------------------------\n\nTITLE: Running Discord Bot on Windows\nDESCRIPTION: Command for running the Discord bot Python script on Windows systems.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/quickstart.rst#2025-04-18_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ py -3 example_bot.py\n```\n\n----------------------------------------\n\nTITLE: Documenting GuildChannel ABC in Python\nDESCRIPTION: This snippet demonstrates the documentation structure for the GuildChannel abstract base class in Disnake. It uses sphinx-style documentation with attributetable and autoclass directives.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/api/abc.rst#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n.. attributetable:: GuildChannel\n\n.. autoclass:: GuildChannel()\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Defining BulkBanResult NamedTuple in Python\nDESCRIPTION: Defines a NamedTuple called BulkBanResult representing the results of a bulk ban operation. It contains two attributes: banned (Sequence[Object]) and failed (Sequence[Object]).\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/api/guilds.rst#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass BulkBanResult:\n    banned: Sequence[Object]\n    failed: Sequence[Object]\n```\n\n----------------------------------------\n\nTITLE: Accessing AutoShardedInteractionBot Class in Python\nDESCRIPTION: Adds the AutoShardedInteractionBot class to the commands extension.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/whats_new.rst#2025-04-18_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nAutoShardedInteractionBot\n```\n\n----------------------------------------\n\nTITLE: Accessing InteractionBot Class in Python\nDESCRIPTION: Adds the InteractionBot class to the commands extension.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/whats_new.rst#2025-04-18_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nInteractionBot\n```\n\n----------------------------------------\n\nTITLE: Documenting User ABC in Python\nDESCRIPTION: This snippet demonstrates the documentation structure for the User abstract base class in Disnake. It uses sphinx-style documentation with attributetable and autoclass directives.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/api/abc.rst#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n.. attributetable:: User\n\n.. autoclass:: User()\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Importing RoleFlags Class from Disnake\nDESCRIPTION: Imports the RoleFlags class from the disnake module. This data class represents the flags associated with a role, providing bitwise operations for role properties.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/api/roles.rst#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom disnake import RoleFlags\n```\n\n----------------------------------------\n\nTITLE: Defining PartialIntegration Class in Python\nDESCRIPTION: Declares the PartialIntegration class, which likely represents a partial or incomplete integration object.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/api/integrations.rst#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n.. autoclass:: PartialIntegration()\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Accessing on_slash_command_completion Event in Python\nDESCRIPTION: Adds the on_slash_command_completion event to the commands extension.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/whats_new.rst#2025-04-18_snippet_18\n\nLANGUAGE: python\nCODE:\n```\non_slash_command_completion\n```\n\n----------------------------------------\n\nTITLE: Documenting Snowflake ABC in Python\nDESCRIPTION: This snippet shows the documentation structure for the Snowflake abstract base class in Disnake. It uses sphinx-style documentation with attributetable and autoclass directives.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/api/abc.rst#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. attributetable:: Snowflake\n\n.. autoclass:: Snowflake()\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Importing Invite Classes and Enums in Python\nDESCRIPTION: Core invite-related classes and enumerations provided by disnake, including Invite, PartialInviteGuild, PartialInviteChannel, InviteType, and InviteTarget.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/api/invites.rst#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom disnake import Invite, PartialInviteGuild, PartialInviteChannel, InviteType, InviteTarget\n```\n\n----------------------------------------\n\nTITLE: Documenting Connectable ABC in Python\nDESCRIPTION: This snippet demonstrates the documentation structure for the Connectable abstract base class in Disnake. It uses sphinx-style documentation with attributetable and autoclass directives.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/api/abc.rst#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n.. attributetable:: Connectable\n\n.. autoclass:: Connectable()\n```\n\n----------------------------------------\n\nTITLE: Accessing on_user_command_completion Event in Python\nDESCRIPTION: Adds the on_user_command_completion event to the commands extension.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/whats_new.rst#2025-04-18_snippet_19\n\nLANGUAGE: python\nCODE:\n```\non_user_command_completion\n```\n\n----------------------------------------\n\nTITLE: Defining RawIntegrationDeleteEvent Class in Python\nDESCRIPTION: Declares the RawIntegrationDeleteEvent class, which represents the event of an integration being deleted. It includes an attribute table and members.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/api/integrations.rst#2025-04-18_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n.. attributetable:: RawIntegrationDeleteEvent\n\n.. autoclass:: RawIntegrationDeleteEvent()\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Documenting Locale Enumeration\nDESCRIPTION: This directive generates documentation for the Locale enumeration in Disnake, including all its members.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/api/localization.rst#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n.. autoclass:: Locale()\n    :members:\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Structure for Disnake Cogs\nDESCRIPTION: Structured documentation using reStructuredText for the Cogs section of disnake.ext.commands. It defines the current module, section headers, and class documentation references for Cog and CogMeta classes.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/ext/commands/api/cogs.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. SPDX-License-Identifier: MIT\n\n.. currentmodule:: disnake.ext.commands\n\nCogs\n====\n\nThis section documents everything related to :ref:`Cogs <ext_commands_cogs>`,\nwhich help organize collections of commands, listeners, and state into separate classes.\n\nClasses\n-------\n\nCog\n~~~\n\n.. attributetable:: Cog\n\n.. autoclass:: Cog\n    :members:\n\nCogMeta\n~~~~~~~\n\n.. attributetable:: CogMeta\n\n.. autoclass:: CogMeta\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Accessing ApplicationCommandInteraction.filled_options Property in Python\nDESCRIPTION: Adds the filled_options property to the ApplicationCommandInteraction class.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/whats_new.rst#2025-04-18_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nApplicationCommandInteraction.filled_options\n```\n\n----------------------------------------\n\nTITLE: Defining StreamIntegration Class in Python\nDESCRIPTION: Declares the StreamIntegration class, representing a streaming integration (e.g., Twitch, YouTube). It inherits members from a parent class.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/api/integrations.rst#2025-04-18_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n.. autoclass:: StreamIntegration()\n    :members:\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Importing Disnake Localization Module\nDESCRIPTION: This snippet shows the module import for Disnake's localization features. It sets up the current module context for the documentation.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/api/localization.rst#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. currentmodule:: disnake\n```\n\n----------------------------------------\n\nTITLE: RST Documentation for Discord Audit Log Actions\nDESCRIPTION: Comprehensive documentation of Discord audit log action attributes including their targets, extra data, and audit log diff possibilities. Each attribute corresponds to different guild events like role updates, member movements, and message moderation.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/api/audit_logs.rst#2025-04-18_snippet_3\n\nLANGUAGE: rst\nCODE:\n```\n.. attribute:: member_role_update\n\n        A member's role has been updated. This triggers when a member\n        either gains a role or loses a role.\n\n        When this is the action, the type of :attr:`~AuditLogEntry.target` is\n        the :class:`Member` or :class:`User` who got the role. If the user is not found then it is\n        a :class:`Object` with the user's ID.\n\n        When this is the action, the type of :attr:`~AuditLogEntry.extra` may be\n        set to an unspecified proxy object with one attribute:\n\n        - ``integration_type``: A string representing the type of the integration which performed the action, if any.\n\n        Possible attributes for :class:`AuditLogDiff`:\n\n        - :attr:`~AuditLogDiff.roles`\n```\n\n----------------------------------------\n\nTITLE: Accessing Message.interaction Attribute in Python\nDESCRIPTION: Adds the interaction attribute to the Message class.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/whats_new.rst#2025-04-18_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nMessage.interaction\n```\n\n----------------------------------------\n\nTITLE: Defining IntegrationApplication Class in Python\nDESCRIPTION: Declares the IntegrationApplication class, which likely represents the application associated with an integration.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/api/integrations.rst#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n.. autoclass:: IntegrationApplication()\n    :members:\n```\n\n----------------------------------------\n\nTITLE: RST Paginator Class Documentation\nDESCRIPTION: Sphinx documentation structure for the Paginator class including attribute table and autoclass directives\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/ext/commands/api/misc.rst#2025-04-18_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. attributetable:: Paginator\n\n.. autoclass:: Paginator\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Importing the disnake.ext.commands Module in Python\nDESCRIPTION: Reference to the disnake.ext.commands module that provides the bot commands framework for Discord bots.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/ext/commands/index.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n``disnake.ext.commands``\n```\n\n----------------------------------------\n\nTITLE: Accessing InteractionReference Class in Python\nDESCRIPTION: Adds the InteractionReference class to the library.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/whats_new.rst#2025-04-18_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nInteractionReference\n```\n\n----------------------------------------\n\nTITLE: Defining BotIntegration Class in Python\nDESCRIPTION: Declares the BotIntegration class, representing a bot integration. It inherits members from a parent class.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/api/integrations.rst#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n.. autoclass:: BotIntegration()\n    :members:\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Audit Log Events and Actions Documentation\nDESCRIPTION: Documentation for various audit log events and actions including soundboard management, auto moderation rules, and creator monetization. Includes version information and possible attributes for AuditLogDiff class.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/api/audit_logs.rst#2025-04-18_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass AuditLogActionCategory():\n    # Audit log action categories and attributes documented\n    soundboard_sound_create  # A soundboard sound was created\n    soundboard_sound_update  # A soundboard sound was updated\n    soundboard_sound_delete  # A soundboard sound was deleted\n    automod_rule_create     # An auto moderation rule was created\n    automod_rule_update     # An auto moderation rule was updated\n    automod_rule_delete     # An auto moderation rule was deleted\n    automod_block_message   # A message was blocked by auto moderation\n    automod_send_alert_message  # Alert message sent by auto moderation\n    automod_timeout         # User timed out by auto moderation\n    creator_monetization_request_created  # Creator monetization request created\n    creator_monetization_terms_accepted   # Creator monetization terms accepted\n```\n\n----------------------------------------\n\nTITLE: Fetching Discord Guild and Channel Using Utils\nDESCRIPTION: Demonstrates how to find a specific guild and channel using disnake.utils.get() utility function. The code shows how to safely search for Discord objects by their properties.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/faq.rst#2025-04-18_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# find a guild by name\nguild = disnake.utils.get(client.guilds, name='My Server')\n\n# make sure to check if it's found\nif guild is not None:\n    # find a channel by name\n    channel = disnake.utils.get(guild.text_channels, name='cool-channel')\n```\n\n----------------------------------------\n\nTITLE: Warning Hierarchy Definition in RST\nDESCRIPTION: Defines the warning hierarchy for Disnake commands extension, showing the relationship between Discord warnings and message content prefix warnings.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/ext/commands/api/exceptions.rst#2025-04-18_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. exception_hierarchy::\n\n    - :class:`disnake.DiscordWarning`\n        - :class:`MessageContentPrefixWarning`\n```\n\n----------------------------------------\n\nTITLE: Handling Integration Creation in Disnake\nDESCRIPTION: Event handler called when an integration is created. Requires Intents.integrations to be enabled.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/api/events.rst#2025-04-18_snippet_17\n\nLANGUAGE: python\nCODE:\n```\non_integration_create(integration)\n```\n\n----------------------------------------\n\nTITLE: Referencing Guild Emojis Update Event in Disnake\nDESCRIPTION: Shows the function signature for the guild_emojis_update event which is triggered when emoji are updated in a guild. The event provides the guild object and both before and after states of the emojis.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/api/emoji.rst#2025-04-18_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\non_guild_emojis_update(guild, before, after) <disnake.on_guild_emojis_update>\n```\n\n----------------------------------------\n\nTITLE: Handling AutoMod Rule Deletion in Disnake\nDESCRIPTION: Event handler called when an AutoModRule is deleted. Requires manage_guild permission and Intents.automod_configuration to be enabled.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/api/events.rst#2025-04-18_snippet_14\n\nLANGUAGE: python\nCODE:\n```\non_automod_rule_delete(rule)\n```\n\n----------------------------------------\n\nTITLE: Getting the ID of a sent message in Disnake\nDESCRIPTION: Shows how to retrieve the message ID after sending a message using the Message object returned by the send() method.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/faq.rst#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nmessage = await channel.send('hmm…')\nmessage_id = message.id\n```\n\n----------------------------------------\n\nTITLE: Importing Context from Disnake Commands Extension\nDESCRIPTION: This snippet shows how to import the Context class from the disnake.ext.commands module. The Context class is used for handling command context in prefix commands.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/ext/commands/api/context.rst#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom disnake.ext.commands import Context\n```\n\n----------------------------------------\n\nTITLE: Sticker-Related Event Reference in Disnake\nDESCRIPTION: Reference to the guild_stickers_update event handler in Disnake, which triggers when a guild's sticker collection changes. The event provides the guild object and both before and after states of the stickers.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/api/stickers.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n- :func:`on_guild_stickers_update(guild, before, after) <disnake.on_guild_stickers_update>`\n```\n\n----------------------------------------\n\nTITLE: Handling Guild Integration Updates in Disnake\nDESCRIPTION: Event handler called when an integration is created, modified, or removed from a guild. Requires Intents.integrations to be enabled.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/api/events.rst#2025-04-18_snippet_16\n\nLANGUAGE: python\nCODE:\n```\non_guild_integrations_update(guild)\n```\n\n----------------------------------------\n\nTITLE: Sleep Helper Function Implementation\nDESCRIPTION: Helper function utils.sleep_until() that allows sleeping until a specific datetime.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/whats_new_legacy.rst#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nutils.sleep_until(datetime)\n```\n\n----------------------------------------\n\nTITLE: Exception Hierarchy Structure in Python\nDESCRIPTION: Hierarchical structure of exception classes in Disnake, showing inheritance relationships from the base Exception class through various specialized Discord-related exceptions.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/api/exceptions.rst#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nException\n    DiscordException\n        ClientException\n            InvalidData\n            LoginFailure\n            ConnectionClosed\n            PrivilegedIntentsRequired\n            SessionStartLimitReached\n            InteractionException\n                InteractionResponded\n                InteractionNotResponded\n                InteractionTimedOut\n                ModalChainNotSupported\n        NoMoreItems\n        GatewayNotFound\n        HTTPException\n            Forbidden\n            NotFound\n            DiscordServerError\n        LocalizationKeyError\n        WebhookTokenMissing\n```\n\n----------------------------------------\n\nTITLE: Defining HelpCommand Class in ReStructuredText\nDESCRIPTION: This snippet defines the documentation structure for the HelpCommand class. It includes an attribute table and autoclass directive for comprehensive documentation of the class members.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/ext/commands/api/help_commands.rst#2025-04-18_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. attributetable:: HelpCommand\n\n.. autoclass:: HelpCommand\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Handling Member Bans in Disnake\nDESCRIPTION: Event handler called when a user gets banned from a Guild. Requires Intents.moderation to be enabled. The user parameter can be either a User or Member instance depending on whether they were in the guild at ban time.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/api/events.rst#2025-04-18_snippet_26\n\nLANGUAGE: python\nCODE:\n```\non_member_ban(guild, user)\n```\n\n----------------------------------------\n\nTITLE: Registering Events with Coroutines in Python 3.4+\nDESCRIPTION: Shows how to register event handlers as coroutines using the @asyncio.coroutine decorator in Python 3.4+.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/migrating_to_async.rst#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@client.event\n@asyncio.coroutine\ndef on_message(message):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Warning Hierarchy Structure in Python\nDESCRIPTION: Hierarchical structure of warning classes in Disnake, showing the relationship between various warning types used for different scenarios.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/api/exceptions.rst#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nDiscordWarning\n    ConfigWarning\n    SyncWarning\n    LocalizationWarning\n```\n\n----------------------------------------\n\nTITLE: Documenting MinimalHelpCommand Class in ReStructuredText\nDESCRIPTION: This snippet defines the documentation structure for the MinimalHelpCommand class. It uses an attribute table and autoclass directive, excluding specific methods from the documentation.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/ext/commands/api/help_commands.rst#2025-04-18_snippet_2\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. attributetable:: MinimalHelpCommand\n\n.. autoclass:: MinimalHelpCommand\n    :members:\n    :exclude-members: send_bot_help, send_cog_help, send_group_help, send_command_help, prepare_help_command\n```\n\n----------------------------------------\n\nTITLE: Multiple Owner IDs Support\nDESCRIPTION: Support for multiple bot owners through Bot.owner_ids property.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/whats_new_legacy.rst#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nBot.owner_ids = [id1, id2, ...]\n```\n\n----------------------------------------\n\nTITLE: Registering Events with Async/Await in Python 3.5+\nDESCRIPTION: Demonstrates registering event handlers using the async/await syntax in Python 3.5+.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/migrating_to_async.rst#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@client.event\nasync def on_message(message):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Documenting PermissionOverwrite Class in Python\nDESCRIPTION: This snippet demonstrates the documentation structure for the PermissionOverwrite class in Disnake. It uses the attributetable and autoclass directives to generate documentation for the class and its members.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/api/permissions.rst#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n.. attributetable:: PermissionOverwrite\n\n.. autoclass:: PermissionOverwrite\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Exception Hierarchy Definition in RST\nDESCRIPTION: Defines the complete exception hierarchy for Disnake commands extension, showing inheritance relationships between different exception types.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/ext/commands/api/exceptions.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. exception_hierarchy::\n\n    - :exc:`disnake.DiscordException`\n        - :exc:`CommandError`\n            - :exc:`ConversionError`\n            - :exc:`UserInputError`\n                - :exc:`MissingRequiredArgument`\n                - :exc:`TooManyArguments`\n                - :exc:`BadArgument`\n                    - :exc:`ObjectNotFound`\n                    - :exc:`MemberNotFound`\n                    - :exc:`GuildNotFound`\n                    - :exc:`UserNotFound`\n                    - :exc:`MessageNotFound`\n                    - :exc:`ChannelNotReadable`\n                    - :exc:`ChannelNotFound`\n                    - :exc:`ThreadNotFound`\n                    - :exc:`BadColourArgument`\n                    - :exc:`RoleNotFound`\n                    - :exc:`BadInviteArgument`\n                    - :exc:`EmojiNotFound`\n                    - :exc:`PartialEmojiConversionFailure`\n                    - :exc:`GuildStickerNotFound`\n                    - :exc:`GuildSoundboardSoundNotFound`\n                    - :exc:`GuildScheduledEventNotFound`\n                    - :exc:`BadBoolArgument`\n                    - :exc:`LargeIntConversionFailure`\n                    - :exc:`FlagError`\n                        - :exc:`BadFlagArgument`\n                        - :exc:`MissingFlagArgument`\n                        - :exc:`TooManyFlags`\n                        - :exc:`MissingRequiredFlag`\n                - :exc:`BadUnionArgument`\n                - :exc:`BadLiteralArgument`\n                - :exc:`ArgumentParsingError`\n                    - :exc:`UnexpectedQuoteError`\n                    - :exc:`InvalidEndOfQuotedStringError`\n                    - :exc:`ExpectedClosingQuoteError`\n```\n\n----------------------------------------\n\nTITLE: Installing Disnake with Voice Support\nDESCRIPTION: Command-line instruction for installing disnake with additional voice functionality support.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/intro.rst#2025-04-18_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npython3 -m pip install -U disnake[voice]\n```\n\n----------------------------------------\n\nTITLE: Converting Iterables to Lists in disnake v0.10.0\nDESCRIPTION: Shows how to convert the new iterable attributes to lists for maintaining previous functionality.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/migrating_to_async.rst#2025-04-18_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nservers = list(client.servers)\n# work with servers\n```\n\n----------------------------------------\n\nTITLE: Importing Role Class from Disnake\nDESCRIPTION: Imports the Role class from the disnake module. This class represents a role in a Discord guild and provides various methods and attributes for role management.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/api/roles.rst#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom disnake import Role\n```\n\n----------------------------------------\n\nTITLE: Timeout Member Python Code Example\nDESCRIPTION: Example code showing the timeout functionality for guild members added in this release\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/whats_new.rst#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Example member timeout usage\nawait guild.timeout(member, duration) # Guild method\nawait member.timeout(duration) # Member method\nmember.current_timeout # Get current timeout\nawait member.edit(timeout=duration) # Via edit method\n```\n\n----------------------------------------\n\nTITLE: Creating a Virtual Environment for a Discord Bot\nDESCRIPTION: Shell command for creating a Python virtual environment in your bot's project directory.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/intro.rst#2025-04-18_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ cd your-bot-source\n$ python3 -m venv bot-env\n```\n\n----------------------------------------\n\nTITLE: Installing Voice Support Dependencies on Debian\nDESCRIPTION: Command for installing the required system dependencies for voice support on Debian-based Linux distributions.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/intro.rst#2025-04-18_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ apt install libffi-dev libnacl-dev python3-dev\n```\n\n----------------------------------------\n\nTITLE: Importing RoleTags Class from Disnake\nDESCRIPTION: Imports the RoleTags class from the disnake module. This class represents additional metadata tags associated with a role in Discord.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/api/roles.rst#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom disnake import RoleTags\n```\n\n----------------------------------------\n\nTITLE: Activating a Virtual Environment (Linux/macOS)\nDESCRIPTION: Shell command for activating a Python virtual environment on Linux or macOS systems.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/intro.rst#2025-04-18_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ source bot-env/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Defining StagePrivacyLevel Enumeration in Python for Disnake\nDESCRIPTION: This snippet defines the StagePrivacyLevel enumeration, which represents the privacy levels available for stage instances in Discord.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/api/stage_instances.rst#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n.. autoclass:: StagePrivacyLevel()\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Installing Disnake in a Virtual Environment\nDESCRIPTION: Command for installing disnake within an activated Python virtual environment.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/intro.rst#2025-04-18_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ pip install -U disnake\n```\n\n----------------------------------------\n\nTITLE: Listing Stage Instance Events in Python for Disnake\nDESCRIPTION: This snippet lists the available events related to stage instances in Disnake, including creation, deletion, and update events.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/api/stage_instances.rst#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n- :func:`on_stage_instance_create(stage_instance) <disnake.on_stage_instance_create>`\n- :func:`on_stage_instance_delete(stage_instance) <disnake.on_stage_instance_delete>`\n- :func:`on_stage_instance_update(before, after) <disnake.on_stage_instance_update>`\n```\n\n----------------------------------------\n\nTITLE: Running Discord Bot on Unix-like Systems\nDESCRIPTION: Command for running the Discord bot Python script on Unix-like systems (Linux, macOS).\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/quickstart.rst#2025-04-18_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ python3 example_bot.py\n```\n\n----------------------------------------\n\nTITLE: Documenting PrivateChannel ABC in Python\nDESCRIPTION: This snippet shows the documentation structure for the PrivateChannel abstract base class in Disnake. It uses sphinx-style documentation with attributetable and autoclass directives.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/api/abc.rst#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n.. attributetable:: PrivateChannel\n\n.. autoclass:: PrivateChannel()\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Initializing Disnake Development Environment with PDM\nDESCRIPTION: Command to set up the initial development environment for Disnake using PDM. This installs necessary dependencies and pre-commit hooks.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/CONTRIBUTING.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ pdm run setup_env\n```\n\n----------------------------------------\n\nTITLE: Defining IntegrationAccount Class in Python\nDESCRIPTION: Declares the IntegrationAccount class, which likely represents the account associated with an integration.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/api/integrations.rst#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n.. autoclass:: IntegrationAccount()\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Defining ExpireBehaviour Enumeration in Python\nDESCRIPTION: Declares the ExpireBehaviour enumeration, which likely defines possible behaviors when an integration expires.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/api/integrations.rst#2025-04-18_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n.. autoclass:: ExpireBehaviour()\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Documenting LocalizationProtocol Class\nDESCRIPTION: This directive generates documentation for the LocalizationProtocol class in Disnake, including all its members.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/api/localization.rst#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n.. autoclass:: LocalizationProtocol\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Documenting LocalizationStore Class\nDESCRIPTION: This directive generates documentation for the LocalizationStore class in Disnake, including all its members and inherited members.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/api/localization.rst#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n.. autoclass:: LocalizationStore\n    :members:\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Documenting DefaultHelpCommand Class in ReStructuredText\nDESCRIPTION: This snippet outlines the documentation for the DefaultHelpCommand class. It uses an attribute table and autoclass directive, excluding specific methods from the documentation.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/ext/commands/api/help_commands.rst#2025-04-18_snippet_1\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. attributetable:: DefaultHelpCommand\n\n.. autoclass:: DefaultHelpCommand\n    :members:\n    :exclude-members: send_bot_help, send_cog_help, send_group_help, send_command_help, prepare_help_command\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Module Declaration\nDESCRIPTION: Sphinx documentation module declaration for the disnake.ext.commands module with license header\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/ext/commands/api/misc.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. SPDX-License-Identifier: MIT\n\n.. currentmodule:: disnake.ext.commands\n```\n\n----------------------------------------\n\nTITLE: Using Context.typing Method as Asynchronous Context Manager\nDESCRIPTION: This snippet shows how to use the Context.typing method as an asynchronous context manager. It simulates the bot typing while executing code within the context.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/ext/commands/api/context.rst#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nasync with context.typing():\n    # Perform actions while the bot appears to be typing\n```\n\n----------------------------------------\n\nTITLE: Using Context.history Method Asynchronously\nDESCRIPTION: This snippet demonstrates the usage of the Context.history method as an asynchronous iterator. It allows for retrieving message history within the command context.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/ext/commands/api/context.rst#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nasync for message in context.history():\n    # Process each message in the history\n```\n\n----------------------------------------\n\nTITLE: Using Enumerations in disnake v0.10.0\nDESCRIPTION: Demonstrates the use of enumerations for server region, member status, and channel type in the new version.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/migrating_to_async.rst#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nserver.region == disnake.ServerRegion.us_west\nmember.status = disnake.Status.online\nchannel.type == disnake.ChannelType.text\n```\n\n----------------------------------------\n\nTITLE: Installing Disnake on Windows\nDESCRIPTION: Windows-specific command for installing disnake using Python's pip package manager.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/intro.rst#2025-04-18_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npy -3 -m pip install -U disnake\n```\n\n----------------------------------------\n\nTITLE: Reaction Clear Methods\nDESCRIPTION: Methods for clearing specific reaction emojis from messages.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/whats_new_legacy.rst#2025-04-18_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nMessage.clear_reaction(emoji)\nReaction.clear()\n```\n\n----------------------------------------\n\nTITLE: Activating a Virtual Environment (Windows)\nDESCRIPTION: Command for activating a Python virtual environment on Windows systems.\nSOURCE: https://github.com/disnakedev/disnake/blob/master/docs/intro.rst#2025-04-18_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ bot-env/Scripts/activate.bat\n```"
  }
]