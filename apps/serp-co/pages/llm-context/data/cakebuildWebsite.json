[
  {
    "owner": "cake-build",
    "repo": "website",
    "content": "TITLE: Implementing Task Logic in Cake Frosting with Context (C#)\nDESCRIPTION: Provides an example of a Cake Frosting task class that includes an action by overriding the Run method. The task logs its execution using the context object's Information method. Requires Cake Frosting's context and logging facilities. Inputs are the inherited Context type, while outputs are user-facing logs upon task execution.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/writing-builds/tasks/defining-tasks.md#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[TaskName(\"A\")]\npublic class TaskA : FrostingTask<Context>\n{\n    public override void Run(Context context)\n    {\n        context.Information(\"This task runs...\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Tools via Pre-processor Directive in Cake CSharp\nDESCRIPTION: Demonstrates how to use the #tool pre-processor directive in a Cake build script to automatically download and install an external tool (xunit.runner.console) from NuGet. There are no external code dependencies beyond Cake itself, and the URI string specifies the package source and version. The directive is parsed by Cake at build time and downloads the tool into the 'tools' directory for use during script execution.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/writing-builds/tools/installing-tools.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n#tool \\\"nuget:?package=xunit.runner.console&version=2.4.1\\\"\n```\n\n----------------------------------------\n\nTITLE: Defining Task with Multiple Actions and File Iteration in Cake .NET Tool (C#)\nDESCRIPTION: Demonstrates an advanced composite task in the Cake .NET Tool, combining multiple chained actions and iterating over files. The task logs before and after actions, and processes files matching a glob pattern using DoesForEach. Requires Cake's Information and GetFiles functions. Inputs include the task name and file patterns. Outputs are console logs for actions and found files.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/writing-builds/tasks/defining-tasks.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nTask(\"A\")\n.Does(() => \n{\n   Information(\"This action runs first.\");\n}).DoesForEach(GetFiles(\"./**/*\"), f => \n{\n   Information(\"Found file: \"+f);\n}).Does(() => {\n   Information(\"This action runs last.\");\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Cake .NET Tool\nDESCRIPTION: Installs Cake as a local tool using the dotnet tool command. The version can be replaced with a specific Cake version if needed.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/getting-started/setting-up-a-new-scripting-project.md#2025-04-23_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\ndotnet tool install Cake.Tool --version <?! Meta CakeLatestReleaseName /?>\n```\n\n----------------------------------------\n\nTITLE: Specifying Multiple Dependencies with IsDependentOn in Cake .NET Tool (C#)\nDESCRIPTION: Shows how to define a task ('C') that depends on two other tasks ('A', 'B') using IsDependentOn multiple times. Tasks are setup via Cake .NET Tool's fluent API, and RunTarget triggers the correct execution order. Duplicate dependencies are ignored; tasks execute only once.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/writing-builds/tasks/dependencies.md#2025-04-23_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nTask(\"A\")\n    .Does(() =>\n{\n});\n\nTask(\"B\")\n    .Does(() =>\n{\n});\n\nTask(\"C\")\n    .IsDependentOn(\"A\")\n    .IsDependentOn(\"B\")\n    .Does(() =>\n{\n});\n\nRunTarget(\"C\");\n```\n\n----------------------------------------\n\nTITLE: Creating Initial Cake Build Script\nDESCRIPTION: Defines a basic Cake build script with tasks for cleaning, building, and testing a .NET solution. It uses arguments for target and configuration, and includes task dependencies.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/getting-started/setting-up-a-new-scripting-project.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar target = Argument(\"target\", \"Test\");\nvar configuration = Argument(\"configuration\", \"Release\");\n\n//////////////////////////////////////////////////////////////////////\n// TASKS\n//////////////////////////////////////////////////////////////////////\n\nTask(\"Clean\")\n    .WithCriteria(c => HasArgument(\"rebuild\"))\n    .Does(() =>\n{\n    CleanDirectory($\"./src/Example/bin/{configuration}\");\n});\n\nTask(\"Build\")\n    .IsDependentOn(\"Clean\")\n    .Does(() =>\n{\n    DotNetBuild(\"./src/Example.sln\", new DotNetBuildSettings\n    {\n        Configuration = configuration,\n    });\n});\n\nTask(\"Test\")\n    .IsDependentOn(\"Build\")\n    .Does(() =>\n{\n    DotNetTest(\"./src/Example.sln\", new DotNetTestSettings\n    {\n        Configuration = configuration,\n        NoBuild = true,\n    });\n});\n\n//////////////////////////////////////////////////////////////////////\n// EXECUTION\n//////////////////////////////////////////////////////////////////////\n\nRunTarget(target);\n```\n\n----------------------------------------\n\nTITLE: Defining Task Dependencies with IsDependentOn in Cake .NET Tool (C#)\nDESCRIPTION: Demonstrates defining dependent tasks using the IsDependentOn method in Cake .NET Tool. Requires Cake build script context. Task 'B' is configured to execute after task 'A', and RunTarget starts the build process at 'B', ensuring the dependency order. Both tasks use lambda functions with Does for task actions.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/writing-builds/tasks/dependencies.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nTask(\"A\")\n    .Does(() =>\n{\n});\n\nTask(\"B\")\n    .IsDependentOn(\"A\")\n    .Does(() =>\n{\n});\n\nRunTarget(\"B\");\n```\n\n----------------------------------------\n\nTITLE: Installing Tools with InstallTool in Cake Frosting CSharp\nDESCRIPTION: Shows how to programmatically install an external tool (xunit.runner.console) using the InstallTool method with a NuGet provider URI in a Cake Frosting host. Requires Cake Frosting and the IFrostingStartup interface, and creates a CakeHost that registers the tool before running the build. The method takes a Uri specifying the tool and version, and ensures the tool is available during the build execution.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/writing-builds/tools/installing-tools.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Program : IFrostingStartup\\n{\\n    public static int Main(string[] args)\\n    {\\n        // Create and run the host.\\n        return\\n            new CakeHost()\\n                .InstallTool(new Uri(\\\"nuget:?package=xunit.runner.console&version=2.4.1\\\"))\\n                .Run(args);\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Task Errors with OnError in Cake (C#)\nDESCRIPTION: Demonstrates using the `OnError` extension method on a Cake task to execute custom logic when an exception occurs within the task's `Does` action. This allows for specific error handling actions, such as logging or cleanup, and the original exception can be rethrown to maintain standard error propagation if needed.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/writing-builds/tasks/error-handling.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nTask(\"A\")\n    .Does(() =>\n{\n})\n.OnError(exception =>\n{\n    // Handle the error here.\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Cake Frosting Tasks in C#\nDESCRIPTION: This code snippet shows the implementation of three Cake Frosting tasks: HelloTask, WorldTask, and DefaultTask. It demonstrates task dependencies and asynchronous task execution.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/getting-started/setting-up-a-new-frosting-project.md#2025-04-23_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[TaskName(\"Hello\")]\npublic sealed class HelloTask : FrostingTask<BuildContext>\n{\n    public override void Run(BuildContext context)\n    {\n        context.Log.Information(\"Hello\");\n    }\n}\n\n[TaskName(\"World\")]\n[IsDependentOn(typeof(HelloTask))]\npublic sealed class WorldTask : AsyncFrostingTask<BuildContext>\n{\n    // Tasks can be asynchronous\n    public override async Task RunAsync(BuildContext context)\n    {\n        if (context.Delay)\n        {\n            context.Log.Information(\"Waiting...\");\n            await Task.Delay(1500);\n        }\n\n        context.Log.Information(\"World\");\n    }\n}\n\n[TaskName(\"Default\")]\n[IsDependentOn(typeof(WorldTask))]\npublic class DefaultTask : FrostingTask\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Defining and Running a Default Task with Cake .NET Tool - C#\nDESCRIPTION: Shows how to define a simple \\\"Default\\\" task using the Cake build system and execute it at the end of the script. The script uses the \\\"Task\\\" method to create a task and \\\"Does\\\" to assign an action, in this case outputting a message. The \\\"RunTarget\\\" call at the end triggers execution. No external dependencies beyond Cake are required. The sole parameter is the target name ('Default'); output is a console message.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/writing-builds/running-targets.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nTask(\"Default\")\n    .Does(() =>\n{\n    Information(\"Hello World!\");\n});\n\nRunTarget(\"Default\");\n```\n\n----------------------------------------\n\nTITLE: Implementing TaskOf<T> in Cake Scripting\nDESCRIPTION: Demonstrates the new TaskOf<T> method in Cake scripting for working with shared typed data contexts. It shows how to define a data record, set up a task with criteria, and perform actions based on the data.\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2022-11-08-cake-v3.0.0-released.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic record BuildData(bool Initialized);\n\nSetup(ctx => new BuildData(true));\n\nTaskOf<BuildData>(\"TaskOfT\")\n    .Description(\"Very typed task\")\n    .WithCriteria((context, data) => data.Initialized)\n    .Does((context, data) => context.Information(\"Initialized: {0}.\", data.Initialized))\n    .Does(async (context, data) => await /* async work*/)\n    .DoesForEach(\n        (data, context) => new [] { data.Initialized },\n        (data, item, context) => context.Information(\"Item: {0}, Initialized: {1}.\", item, data.Initialized)\n    )\n    .DoesForEach(\n        new [] { true, false },\n        (data, item, context) => context.Information(\"Item: {0}, Initialized: {1}.\", item, data.Initialized)\n    );\n\nRunTarget(\"TaskOfT\");\n```\n\n----------------------------------------\n\nTITLE: Defining a Typed Context Class in Cake - C#\nDESCRIPTION: This snippet defines a C# class (BuildData) used as the typed context for sharing build state in Cake scripts. The class includes properties for configuration, build packaging, and framework lists. No Cake-specific dependencies are required in the class itself; properties can be read-only or mutable.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/writing-builds/sharing-build-state.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class BuildData\n{\n    public string Configuration { get; }\n    public bool BuildPackages { get; }\n    public List<string> Frameworks {get; set;}\n    // you can use read-only or mutable properties\n\n    public BuildData(\n        string configuration,\n        bool buildPackages)\n    {\n        Configuration = configuration;\n        BuildPackages = buildPackages;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Cake .NET Tool Globally\nDESCRIPTION: Command to install Cake .NET Tool as a global tool using the .NET CLI.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/getting-started/upgrade.md#2025-04-23_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\ndotnet tool install --global Cake.Tool\n```\n\n----------------------------------------\n\nTITLE: Defining Global Setup and Teardown Events in Cake .NET Tool (C#)\nDESCRIPTION: This snippet shows how to register global setup and teardown hooks using the Cake .NET Tool runner. The Setup delegate is executed once before the first build task, while the Teardown delegate runs after the final task. These hooks allow initialization (such as starting services) and cleanup logic to be performed only if tasks are actually executed. Requires Cake scripting environment and a call to RunTarget to trigger these hooks.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/writing-builds/setup-and-teardown.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nSetup(context =>\n{\n    // Executed BEFORE the first task.\n});\n\nTeardown(context =>\n{\n    // Executed AFTER the last task.\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Cake Build Script with Paket Addin\nDESCRIPTION: Complete Cake build script demonstrating use of Cake.Paket addin for package restoration, building, testing, and NuGet package creation/publishing. Uses NuGet for tool and addin management.\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2017-01-25-cake-paket.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// Required in order to run the unit tests.\n#tool nuget:?package=xunit.runner.console\n\n// Required in order to use the addin Cake.Paket because it downloads paket.exe.\n#tool nuget:?package=Paket\n\n// Required in order to use PaketRestore, PaketPack, and PaketPush.\n#addin nuget:?package=Cake.Paket\n\n// Restores xUnit dependency specified in the paket.dependencies file.\nTask(\"Paket-Restore\")\n    .Does(() =>\n{\n    PaketRestore();\n});\n\nTask(\"Build\")\n    .IsDependentOn(\"Paket-Restore\")\n    .Does(() =>\n{\n    MSBuild(\"./src/Cake.sln\");\n});\n\nTask(\"Run-Unit-Tests\")\n    .IsDependentOn(\"Build\")\n    .Does(() =>\n{\n    XUnit2(\"./src/**/bin/Release/*.Tests.dll\");\n});\n\n// Creates a NuGet package.\nTask(\"Paket-Pack\")\n    .IsDependentOn(\"Build\")\n    .Does(() =>\n{\n    PaketPack(\"./NuGet\");\n});\n\n// Pushes the package to a NuGet feed.\nTask(\"Paket-Push\")\n    .IsDependentOn(\"Paket-Pack\")\n    .Does(() =>\n{\n    PaketPush(\"./NuGet/foo.nupkg\", new PaketPushSettings { ApiKey = \"00000000-0000-0000-0000-000000000000\" });\n});\n```\n\n----------------------------------------\n\nTITLE: Registering Specific Tool Path in Cake Setup using C#\nDESCRIPTION: Demonstrates how to override Cake's default tool resolution by explicitly registering a file path for a specific tool (NuGet.exe in this example) using the `RegisterFile` method on the `Tools` property (an instance of `IToolLocator`) accessed via the `ICakeContext`. This registration is typically performed within the `Setup` action of a Cake script.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/writing-builds/tools/tool-resolution.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nSetup(context => {\n    context.Tools.RegisterFile(\"C:/ProgramData/chocolatey/bin/NuGet.exe\");\n});\n```\n\n----------------------------------------\n\nTITLE: Reading Arguments in Cake (C#)\nDESCRIPTION: This snippet demonstrates how to read an argument with a default value in a Cake build script. It uses the Argument alias to read a boolean argument named 'myargument' with a default value of false.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/writing-builds/args-and-environment-vars.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nArgument<bool>(\"myargument\", false);\n```\n\n----------------------------------------\n\nTITLE: Specifying Multiple Dependencies with IsDependentOn Attributes in Cake Frosting (C#)\nDESCRIPTION: Demonstrates how to set up a task class (TaskC) depending on two other tasks (TaskA, TaskB) using multiple IsDependentOn attributes in Cake Frosting. Each task is defined by its own class inheriting FrostingTask, and TaskC will run after both dependencies. Only one execution occurs even if referenced multiple times.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/writing-builds/tasks/dependencies.md#2025-04-23_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n[TaskName(\"A\")]\npublic sealed class TaskA : FrostingTask\n{\n    public override void Run()\n    {\n    }\n}\n\n[TaskName(\"B\")]\npublic sealed class TaskB : FrostingTask\n{\n    public override void Run()\n    {\n    }\n}\n\n[TaskName(\"C\")]\n[IsDependentOn(typeof(TaskA))]\n[IsDependentOn(typeof(TaskB))]\npublic sealed class TaskC : FrostingTask\n{\n    public override void Run()\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Asynchronous Tasks in Cake Scripts\nDESCRIPTION: Demonstrates how to use async/await pattern within Cake tasks to simplify asynchronous operations like file streaming. Tasks still execute in order, but this enables better utilization of asynchronous APIs.\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2017-10-15-cake-v0.23.0-released.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nTask(\"Copy-To-Memory-Async\")\n    .Does(async () => {\n    IFile file = Context.FileSystem.GetFile(\"./test.txt\");\n    using(Stream\n            inputStream = testFile.OpenRead(),\n            outputStream = new MemoryStream())\n    {\n        await inputStream.CopyToAsync(outputStream);\n        await outputStream.FlushAsync();\n        Information(\"Copied {0} bytes into memory.\",\n            outputStream.Length\n            );\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Reverse Task Dependencies with IsDependeeOf in Cake .NET Tool (C#)\nDESCRIPTION: Illustrates setting up reverse task dependencies using IsDependeeOf in Cake .NET Tool. Here, task 'A' is declared as a dependency target for 'B', using .IsDependeeOf. RunTarget initiates execution at 'B', ensuring 'A' executes first. Requires Cake script environment (v0.23.0+).\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/writing-builds/tasks/dependencies.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nTask(\"A\")\n    .IsDependeeOf(\"B\")\n    .Does(() =>\n{\n});\n\nTask(\"B\")\n    .Does(() =>\n{\n});\n\nRunTarget(\"B\");\n```\n\n----------------------------------------\n\nTITLE: Defining an Asynchronous Cake Task using C#\nDESCRIPTION: This snippet defines a Cake task named 'Copy-To-Memory-Async'. It uses the `async` keyword in its action delegate to allow awaiting asynchronous operations. Inside the task, it gets a file handle, opens it for reading, copies its contents asynchronously to a MemoryStream using `CopyToAsync`, flushes the memory stream asynchronously, and logs the number of bytes copied.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/writing-builds/tasks/asynchronous-tasks.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n```csharp\nTask(\"Copy-To-Memory-Async\")\n    .Does(async () =>\n    {\n        IFile file = Context.FileSystem.GetFile(\"./test.txt\");\n        using(Stream\n            inputStream = testFile.OpenRead(),\n            outputStream = new MemoryStream())\n        {\n            await inputStream.CopyToAsync(outputStream);\n            await outputStream.FlushAsync();\n            Information(\"Copied {0} bytes into memory.\",\n                outputStream.Length\n            );\n        }\n    });\n```\n```\n\n----------------------------------------\n\nTITLE: Adding Preprocessor Directive to Load Addin from Source in Cake Script\nDESCRIPTION: This code shows how to use a Cake preprocessor directive to reference an addin directly from its locally built assembly rather than from NuGet, enabling source-level debugging.\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2017-07-31-debug-cake-addin.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n#r \"./Cake.HockeyApp/src/Cake.HockeyApp/bin/Debug/net45/Cake.HockeyApp.dll\"\n```\n\n----------------------------------------\n\nTITLE: Defining Build Data and Tasks with C# 9 Records in Cake\nDESCRIPTION: Demonstrates using C# 9 records (`StorageAccount`, `BuildData`) to define structured build data within a Cake C# script. It shows initializing this data in the `Setup` action using context arguments and environment variables, configuring `DotNetCoreMSBuildSettings`, and accessing the typed data within a Cake `Task` definition.\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2021-02-07-cake-v1.0.0-released.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n```csharp\npublic record StorageAccount(string Name, string Container, string Key);\n\npublic record BuildData(string Version, DotNetCoreMSBuildSettings MSBuildSettings, StorageAccount StorageAccount)\n{\n    public bool ShouldPublish { get; } = !string.IsNullOrEmpty(StorageAccount.Name)\n                                            && !string.IsNullOrEmpty(StorageAccount.Container)\n                                            && !string.IsNullOrEmpty(StorageAccount.Key);\n}\n\nSetup<BuildData>(context=>{\n    var version = context.Argument(\"version\", \"1.0.0\");\n\n    return new (\n        version,\n        new DotNetCoreMSBuildSettings()\n                                .WithProperty(\"Version\", version)\n                                .WithProperty(\"Configuration\", context.Argument(\"configuration\", \"Release\")),\n        new (\n            context.EnvironmentVariable(\"PUBLISH_STORAGE_ACCOUNT\"),\n            context.EnvironmentVariable(\"PUBLISH_STORAGE_CONTAINER\"),\n            context.EnvironmentVariable(\"PUBLISH_STORAGE_KEY\")\n        )\n    );\n});\n\nTask(\"Build\")\n    .Does<BuildData>((context, data) => context.Information(\"Building {0}\", data.Version));\n\nRunTarget(\"Build\");\n```\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Task with Cake .NET Tool (C#)\nDESCRIPTION: Illustrates creating a simple build task using the Cake .NET Tool's scripting API. The Task method defines a new named task, with the Does method specifying the code block to execute when the task runs. No dependencies are required beyond having Cake and the scripting environment set up. This structure serves as a foundational step in automating build processes.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/writing-builds/tasks/defining-tasks.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nTask(\"A\")\n    .Does(() =>\n{\n});\n```\n\n----------------------------------------\n\nTITLE: Resolving and Executing Tool Path in Cake Task using C#\nDESCRIPTION: Illustrates how to resolve the location of an executable (e.g., `nuget.exe`) using the `Resolve` method provided by `Context.Tools` (an instance of `IToolLocator`) within a Cake task. The resolved `FilePath` is then used with the `StartProcess` alias to execute the tool, passing arguments constructed using `ProcessArgumentBuilder`.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/writing-builds/tools/tool-resolution.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nTask(\"NuGet-Help-Install\")\n    .Does(()=> {\n    FilePath nugetPath = Context.Tools.Resolve(\"nuget.exe\");\n    StartProcess(nugetPath, new ProcessSettings {\n        Arguments = new ProcessArgumentBuilder()\n            .Append(\"help\")\n            .Append(\"install\")\n        });\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Cake Build Script with Paket Module\nDESCRIPTION: Enhanced version of the Cake build script using Cake.Paket.Module to manage dependencies with Paket instead of NuGet. Shows streamlined dependency management approach.\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2017-01-25-cake-paket.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n// Required in order to run the unit tests.\n#tool paket:?package=xunit.runner.console\n\n// Required in order to use PaketPack and PaketPush.\n#addin paket:?package=Cake.Paket\n\n// Paket restore is handled by the bootstrapper.\n\nTask(\"Build\")\n    .Does(() =>\n{\n    MSBuild(\"./src/Cake.sln\");\n});\n\nTask(\"Run-Unit-Tests\")\n    .IsDependentOn(\"Build\")\n    .Does(() =>\n{\n    XUnit2(\"./src/**/bin/Release/*.Tests.dll\");\n});\n\n// Creates a NuGet package.\nTask(\"Paket-Pack\")\n    .IsDependentOn(\"Build\")\n    .Does(() =>\n{\n    PaketPack(\"./NuGet\");\n});\n\n// Pushes the package to a NuGet feed.\nTask(\"Paket-Push\")\n    .IsDependentOn(\"Paket-Pack\")\n    .Does(() =>\n{\n    PaketPush(\"./NuGet/foo.nupkg\", new PaketPushSettings { ApiKey = \"00000000-0000-0000-0000-000000000000\" });\n});\n```\n\n----------------------------------------\n\nTITLE: Referencing Dependencies Using Task Objects in Cake .NET Tool (C#)\nDESCRIPTION: Illustrates passing the task object directly to IsDependentOn instead of a task name string in Cake .NET Tool scripts. TaskA is defined and stored in the variable taskA, then used in configuring TaskB's dependencies. This approach enables more flexibility when linking complex task objects.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/writing-builds/tasks/dependencies.md#2025-04-23_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nvar taskA = Task(\"A\")\n    .Does(() =>\n{\n});\n\nTask(\"B\")\n    .IsDependentOn(taskA)\n    .Does(() =>\n{\n});\n\nRunTarget(\"B\");\n```\n\n----------------------------------------\n\nTITLE: Referencing and Using Custom Addin in Cake Script\nDESCRIPTION: This snippet demonstrates how to reference a custom addin DLL in a Cake script using the #r directive and how to use the custom methods and properties in a Cake task.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/extending/addins/creating-addins.md#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n#r \"tools/MyCakeExtension.dll\"\n\nTask(\"GetSomeAnswers\")\n    .Does(() =>\n{\n    // Write the values to the console.\n    Information(\"Magic number: {0}\", GetMagicNumber(false));\n    Information(\"The answer to life: {0}\", TheAnswerToLife);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Cake Host in C#\nDESCRIPTION: This code snippet shows the Program class that configures and runs the Cake host. It uses a custom BuildContext and passes command-line arguments.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/getting-started/setting-up-a-new-frosting-project.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic static class Program\n{\n    public static int Main(string[] args)\n    {\n        return new CakeHost()\n            .UseContext<BuildContext>()\n            .Run(args);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Script Alias Methods and Properties in C#\nDESCRIPTION: This snippet demonstrates how to create custom script alias methods and properties for Cake. It includes examples of using CakeMethodAliasAttribute and CakePropertyAliasAttribute, as well as optional parameters and lambda expressions.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/extending/addins/creating-addins.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing Cake.Core;\nusing Cake.Core.Annotations;\n\npublic static class MyCakeExtension\n{\n    [CakeMethodAlias]\n    public static int GetMagicNumber(this ICakeContext context, bool value)\n    {\n        return value ? int.MinValue : int.MaxValue;\n    }\n\n    [CakeMethodAlias]\n    public static int GetMagicNumberOrDefault(this ICakeContext context, bool value, Func<int> defaultValueProvider = null)\n    {\n        if (value)\n        {\n            return int.MinValue;\n        }\n\n        return defaultValueProvider == null ? int.MaxValue : defaultValueProvider();\n    }\n\n    [CakePropertyAlias]\n    public static int TheAnswerToLife(this ICakeContext context)\n    {\n        return 42;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Reverse Task Dependencies with IsDependeeOf Attribute in Cake Frosting (C#)\nDESCRIPTION: Demonstrates reverse dependency definition in Cake Frosting using the IsDependeeOf attribute. TaskA is marked as a dependency provider for TaskB using [IsDependeeOf(typeof(TaskB))]. Both tasks inherit from FrostingTask and override Run. Requires Cake Frosting project setup.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/writing-builds/tasks/dependencies.md#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[TaskName(\"A\")]\n[IsDependeeOf(typeof(TaskB))]\npublic sealed class TaskA : FrostingTask\n{\n    public override void Run()\n    {\n    }\n}\n\n[TaskName(\"B\")]\npublic sealed class TaskB : FrostingTask\n{\n    public override void Run()\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing BuildTask in Cake Frosting\nDESCRIPTION: This task class is responsible for building the solution. It depends on the CleanTask and uses the DotNetBuild method with the specified MsBuildConfiguration.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/getting-started/setting-up-a-new-frosting-project.md#2025-04-23_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n[TaskName(\"Build\")]\n[IsDependentOn(typeof(CleanTask))]\npublic sealed class BuildTask : FrostingTask<BuildContext>\n{\n    public override void Run(BuildContext context)\n    {\n        context.DotNetBuild(\"../src/Example.sln\", new DotNetBuildSettings\n        {\n            Configuration = context.MsBuildConfiguration,\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Parallel Builds in a Cake Task using C#\nDESCRIPTION: This snippet demonstrates parallel execution within a Cake build script. It defines a task 'BuildProjectsInParallel' that calls a helper method `BuildInParallel`. This method accepts a collection of project file paths, creates an MSBuild action for each path (configured for 'Release'), and then uses `Parallel.Invoke` to execute these build actions concurrently. A 'Default' task is set up to depend on the parallel build task. The `maxDegreeOfParallelism` and `cancellationToken` parameters provide control over the parallel execution.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/writing-builds/tasks/asynchronous-tasks.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n```csharp\nvar projectPaths = new [] {\n    \"./src/First/First.csproj\",\n    \"./src/Second/Second.csproj\",\n};\n\nTask(\"BuildProjectsInParallel\")\n    .Does(() =>\n    {\n        BuildInParallel(projectPaths);\n    });\n\nTask(\"Default\")\n    .IsDependentOn(\"BuildProjectsInParallel\")\n    .Does(() =>\n    {\n    });\n\nRunTarget(target);\n\npublic void BuildInParallel(\n    IEnumerable<string> filePaths,\n    int maxDegreeOfParallelism = -1,\n    CancellationToken cancellationToken = default(CancellationToken))\n{\n    var actions = new List<Action>();\n    foreach (var filePath in filePaths) {\n        actions.Add(() =>\n            MSBuild(filePath, configurator =>\n                configurator.SetConfiguration(\"Release\"))\n        );\n    }\n\n    var options = new ParallelOptions {\n        MaxDegreeOfParallelism = maxDegreeOfParallelism,\n        CancellationToken = cancellationToken\n    };\n\n    Parallel.Invoke(options, actions.ToArray());\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Deferring Task Errors with DeferOnError in Cake (C#)\nDESCRIPTION: Demonstrates the `DeferOnError` extension method, which allows a task to execute all its actions (including multiple `Does` or `DoesForEach` blocks) even if exceptions occur during execution. Any exceptions thrown are collected and deferred until the entire task has finished running, at which point they are reported, causing the build to fail. This is useful for tasks involving multiple independent operations like running tests or publishing artifacts, allowing all results to be seen.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/writing-builds/tasks/error-handling.md#2025-04-23_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nTask(\"A\")\n    .Does(() =>\n{\n    throw new Exception();\n})\n.DoesForEach(GetFiles(\"**/*.txt\"), (file) =>\n{\n   // Take action on the file.\n})\n.DeferOnError();\n```\n\n----------------------------------------\n\nTITLE: Passing Arguments to Cake (PowerShell)\nDESCRIPTION: This example shows how to pass an argument to a Cake script when running it from the command line. It sets the 'myargument' to true.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/writing-builds/args-and-environment-vars.md#2025-04-23_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n--myargument=true\n```\n\n----------------------------------------\n\nTITLE: Defining Task Dependencies with IsDependentOn Attribute in Cake Frosting (C#)\nDESCRIPTION: Shows how to define task dependencies in Cake Frosting using the IsDependentOn attribute. Each class represents a task inheriting from FrostingTask. TaskB is marked with IsDependentOn referencing TaskA, ensuring TaskA runs before TaskB. Requires project referencing Cake Frosting.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/writing-builds/tasks/dependencies.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[TaskName(\"A\")]\npublic sealed class TaskA : FrostingTask\n{\n    public override void Run()\n    {\n    }\n}\n\n[TaskName(\"B\")]\n[IsDependentOn(typeof(TaskA))]\npublic sealed class TaskB : FrostingTask\n{\n    public override void Run()\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Calling Aliases in Cake .NET Tool\nDESCRIPTION: Demonstrates how to use aliases directly inside a task when using Cake .NET Tool. The example shows deleting a file and cleaning a directory using Cake aliases.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/fundamentals/aliases.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nTask(\"Clean\")\n    .Does(() =>\n{\n    // Delete a file.\n    DeleteFile(\"./file.txt\");\n\n    // Clean a directory.\n    CleanDirectory(\"./temp\");\n});\n```\n\n----------------------------------------\n\nTITLE: Using Typed Context in Task Declarations in Cake - C#\nDESCRIPTION: Shows how to access the previously defined typed context within a task using generic WithCriteria and Does methods. Relies on the context type declaration for dependency injection in tasks. Input is the bool BuildPackages property; outputs informational logging during the build.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/writing-builds/sharing-build-state.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nTask(\"Build-Packages\")\n    .WithCriteria<BuildData>((context, data) => data.BuildPackages) //Your typed context is the second argument\n    .Does<BuildData>(data => //make sure you use the right type parameter here\n    {\n        Information(\"Packages were {0}\", data.BuildPackages ? \"built\" : \"not built\");\n    });\n```\n\n----------------------------------------\n\nTITLE: Handling Command Output in C#\nDESCRIPTION: Shows how to capture and process the standard output of a Command. This example runs the 'dpi' tool and deserializes its JSON output into strongly-typed objects.\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2022-10-14-cake-v2.3.0-released.md#2025-04-23_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.Text.Json.Serialization;\nusing System.Text.Json;\n#tool dotnet:?package=DPI&version=2022.8.21.54\n\n// Example with ProcessArgumentBuilder\nvar exitCode = Command(\n    new []{ \"dpi\", \"dpi.exe\"},\n    out var standardOutput,\n    new ProcessArgumentBuilder()\n         .Append(\"nuget\")\n         .AppendQuoted(Context.Environment.WorkingDirectory.FullPath)\n         .AppendSwitch(\"--output\", \" \", \"JSON\")\n         .Append(\"analyze\")\n);\n\nvar packageReferences =  JsonSerializer.Deserialize<DPIPackageReference[]>(\n    standardOutput\n);\n\n// Record used in example above\npublic record DPIPackageReference(\n    [property: JsonPropertyName(\"source\")]\n    string Source,\n    [property: JsonPropertyName(\"sourceType\")]\n    string SourceType,\n    [property: JsonPropertyName(\"packageId\")]\n    string PackageId,\n    [property: JsonPropertyName(\"version\")]\n    string Version\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Setup Method with Typed Context in Cake - C#\nDESCRIPTION: Demonstrates the Setup method returning an instance of BuildData for use as a typed context throughout the Cake script. Depends on Cake.Argument, BuildSystem, and IsRunningOnUnix for runtime data. Accepts command-line arguments and build system context; outputs BuildData instance with populated properties.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/writing-builds/sharing-build-state.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nSetup<BuildData>(setupContext => {\n    return new BuildData(\n        configuration: Argument(\"configuration\", \"Release\"),\n        buildPackages: !BuildSystem.IsLocalBuild\n    ) {\n        Frameworks = IsRunningOnUnix()\n            ? new List<string> { \"netcoreapp2.1\" }\n            : new List<string> { \"net472\", \"netcoreapp2.1\" }\n    };\n});\n```\n\n----------------------------------------\n\nTITLE: Loading Local Scripts in Cake\nDESCRIPTION: Demonstrates how to load a local script file named 'utilities.cake' from the 'scripts' directory using the default local scheme.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/writing-builds/preprocessor-directives/load.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n#l \"scripts/utilities.cake\"\nor\n#load \"scripts/utilities.cake\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Global Lifetime Control with FrostingLifetime in Cake Frosting (C#)\nDESCRIPTION: This snippet defines a custom build lifetime for a Frosting-based Cake build by subclassing FrostingLifetime<TContext>. It registers the lifetime class with the Cake host, providing overridden Setup and Teardown methods for logic to run before the first and after the last task. Requires a custom context (e.g., BuildContext) and Cake.Frosting reference. Methods receive full context objects for advanced behavior.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/writing-builds/setup-and-teardown.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic static class Program\n{\n    public static int Main(string[] args)\n    {\n        return new CakeHost()\n            .UseContext<BuildContext>()\n            .UseLifetime<BuildLifetime>()\n            .Run(args);\n    }\n}\n\npublic class BuildLifetime : FrostingLifetime<BuildContext>\n{\n    public override void Setup(BuildContext context, ISetupContext info)\n    {\n        // Executed BEFORE the first task.\n    }\n\n    public override void Teardown(BuildContext context, ITeardownContext info)\n    {\n        // Executed AFTER the last task.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Environment Variables in Cake (C#)\nDESCRIPTION: This snippet demonstrates how to read an environment variable in a Cake build script. It uses the EnvironmentVariable alias to read the 'BUILD_NUMBER' variable as an integer, with a default value of 42 if the variable is not defined.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/writing-builds/args-and-environment-vars.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nInformation(EnvironmentVariable<int>(\"BUILD_NUMBER\", 42));\n```\n\n----------------------------------------\n\nTITLE: Importing Namespaces with CakeNamespaceImportAttribute in C#\nDESCRIPTION: This snippet shows how to use the CakeNamespaceImportAttribute to automatically import namespaces into Cake scripts. It demonstrates usage at the method, class, and assembly levels.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/extending/addins/creating-addins.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n// Imports the Cake.Common.IO.Paths namespace into the Cake script for this method only\n[CakeNamespaceImport(\"Cake.Common.IO.Paths\")]\npublic static ConvertableDirectoryPath Directory(this ICakeContext context, string path)\n{...}\n```\n\nLANGUAGE: csharp\nCODE:\n```\n// Imports the Cake.Common.IO.Paths namespace into the Cake script for any alias method used in the class.\n[CakeNamespaceImport(\"Cake.Common.IO.Paths\")]\npublic static class DirectoryAliases\n{...}\n```\n\nLANGUAGE: csharp\nCODE:\n```\n// Imports the Cake.Common.IO.Paths namespace into the Cake script for any alias method used in the assembly.\n[assembly: CakeNamespaceImport(\"Cake.Common.IO.Paths\")]\n```\n\n----------------------------------------\n\nTITLE: Using Setup Context Properties in Cake\nDESCRIPTION: Shows how to use the enhanced ISetupContext to access information about which tasks will execute. This example uses TargetTask and TasksToExecute properties to make build decisions based on the target task and its dependencies.\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2018-05-31-cake-v0.28.0-released.md#2025-04-23_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nSetup<MyBuildData>(setupContext =>\n{\n\tvar signAssemblies = BuildSystem.IsRunningOnAppVeyor\n\t\t\t\t\t\t|| StringComparer.OrdinalIgnoreCase.Equals(\"Sign\", setupContext.TargetTask.Name);\n\n\tvar isPublishBuild = setupContext\n                          .TasksToExecute\n                          .Where(task => StringComparer.OrdinalIgnoreCase.Equals(\"Publish\", task.Name))\n                          .Any();\n\n    return new MyBuildData (\n    \tconfiguration: Argument(\"configuration\", \"Release\"),\n    \tsignAssemblies: signAssemblies,\n        isPublishBuild: isPublishBuild);\n});\n```\n\n----------------------------------------\n\nTITLE: Using the Finally Task Extension in Cake (C#)\nDESCRIPTION: This C# code snippet demonstrates how to define a Cake build task named \"A\" and attach a `Finally` block. The code within the `Finally` lambda expression (indicated by the comment '// Do magic.') will always be executed after the main task action defined in `Does` completes, regardless of whether the `Does` block succeeded or threw an exception.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/writing-builds/tasks/finally-block.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nTask(\"A\")\n    .Does(() =>\n{\n})\n.Finally(() =>\n{\n    // Do magic.\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Per-Task Setup and Teardown in Cake .NET Tool (C#)\nDESCRIPTION: This snippet demonstrates the use of TaskSetup and TaskTeardown delegates in Cake .NET Tool to execute custom code before and after every individual build task. This enables scenarios such as custom logging or resource management with per-task granularity. Requires Cake scripting environment and proper invocation sequence so that hooks are established before RunTarget.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/writing-builds/setup-and-teardown.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nTaskSetup(setupContext =>\n{\n    var message = string.Format(\"Task: {0}\", setupContext.Task.Name);\n    // custom logging\n});\n\nTaskTeardown(teardownContext =>\n{\n    var message = string.Format(\"Task: {0}\", teardownContext.Task.Name);\n    // custom logging\n});\n```\n\n----------------------------------------\n\nTITLE: Sending Email via SMTP Server using Cake.Email Addin in C#\nDESCRIPTION: This snippet demonstrates how to send an email using the Cake.Email addin. It connects to an SMTP server (Gmail in this example) and sends an HTML email. The code includes error handling and reports the success or failure of the email sending operation.\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2016-10-31-email-addins-released.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n#addin Cake.Email\n\nTask(\"SendEmail\")\n    .Does(() =>\n{\n    try\n    {\n        var result = Email.Send(\n                senderName: \"Bob Smith\", \n                senderAddress: \"bob@example.com\",\n                recipientName: \"Jane Doe\",\n                recipientAddress: \"jane@example.com\",\n                subject: \"This is a test\",\n                content: \"<html><body>This is a test</body></html>\",\n                attachments: null,\n                settings: new EmailSettings \n                {\n                    SmtpHost = \"smtp.gmail.com\",\n                    Port = 587,\n                    EnableSsl = true,\n                    Username = \"my_gmail_address@gmail.com\",\n                    Password = \"my_password\"\n                }\n        );\n\n        if (result.Ok)\n        {\n            Information(\"Email succcessfully sent\");\n        }\n        else\n        {\n            Error(\"Failed to send email: {0}\", result.Error);\n        }\n    }\n    catch(Exception ex)\n    {\n        Error(\"{0}\", ex);\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Using Tools from Disk via Tool Resolution in Cake CSharp\nDESCRIPTION: Illustrates direct use of a locally available tool (nuget.exe) within a Cake task using the built-in tool resolution conventions and process execution APIs. Relies on the Cake Context, ProcessSettings, and ProcessArgumentBuilder to resolve the executable and invoke it with custom arguments. The snippet shows how to install the xunit.runner.console package directly using nuget.exe, suitable for tools not available via NuGet or requiring local installation.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/writing-builds/tools/installing-tools.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nTask(\\\"Install-XUnit\\\")\\n    .Does(()=> {\\n    FilePath nugetPath = Context.Tools.Resolve(\\\"nuget.exe\\\");\\n    StartProcess(nugetPath, new ProcessSettings {\\n        Arguments = new ProcessArgumentBuilder()\\n            .Append(\\\"install\\\")\\n            .Append(\\\"xunit.runner.console\\\")\\n        });\\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Task Actions with DoesForEach - Cake Build - C#\nDESCRIPTION: This snippet demonstrates how to define a Cake Build task using the DoesForEach method to iterate over all .txt files found by GetFiles. The lambda action receives each file from the matching collection and lets you specify the logic for processing them. Dependencies include Cake Build and its scripting environment. Key parameters are the collection of items (here: files) and the action delegate applied per item. Input is a file pattern; output is the execution of the delegate for each matched file. This approach ensures deferred resolution of the collection, supporting late-binding scenarios, such as post-build artifact discovery.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/writing-builds/tasks/running-task-for-collections.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nTask(\"A\")\n    .DoesForEach(GetFiles(\"**/*.txt\"), (file) =>\n{\n    // Take action on the file.\n});\n```\n\n----------------------------------------\n\nTITLE: Updating DefaultTask in Cake Frosting\nDESCRIPTION: This updated DefaultTask class now depends on the TestTask, creating a complete build pipeline that cleans, builds, and tests the solution.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/getting-started/setting-up-a-new-frosting-project.md#2025-04-23_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n[IsDependentOn(typeof(TestTask))]\npublic sealed class Default : FrostingTask\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Cake Frosting Host (v1.0) in C#\nDESCRIPTION: C# code snippet showing the updated method for setting up and running a Cake Frosting application in version 1.0. This reflects breaking changes: it directly uses `CakeHost` instead of `CakeHostBuilder`, defines the build context type using `UseContext<BuildContext>`, and uses the renamed `InstallTool` method (previously `UseTool`) to install necessary .NET tools via NuGet package URIs before running the host with `Run(args)`.\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2021-02-07-cake-v1.0.0-released.md#2025-04-23_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n```csharp\n// Create and run the host.\nreturn\n    new CakeHost()\n        .UseContext<BuildContext>()\n        .InstallTool(new Uri(\"nuget:?package=ReportGenerator&version=4.8.1\"))\n        .Run(args);\n```\n```\n\n----------------------------------------\n\nTITLE: Reporting Task Errors with ReportError in Cake (C#)\nDESCRIPTION: Illustrates using the `ReportError` extension method to log or report an error that occurs in a task without interfering with the normal error propagation or altering the resulting stack trace. Any exceptions thrown within the lambda provided to `ReportError` will be caught and ignored.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/writing-builds/tasks/error-handling.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nTask(\"A\")\n    .Does(() =>\n{\n})\n.ReportError(exception =>\n{\n    // Report the error.\n});\n```\n\n----------------------------------------\n\nTITLE: Declaring a Basic Task in Cake Frosting (C#)\nDESCRIPTION: Shows the minimal setup for a build task class in Cake Frosting by subclassing FrostingTask and using the TaskName attribute. No Run method is implemented, so this task performs no actions when executed. Dependencies are just the Cake Frosting framework. Useful as a placeholder or structural element in complex build pipelines.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/writing-builds/tasks/defining-tasks.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[TaskName(\"A\")]\npublic class TaskA : FrostingTask\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Calling Aliases in Cake Frosting\nDESCRIPTION: Shows how to use aliases in a Cake Frosting project. Aliases are called as extension methods of the context passed to the Run method of the task. The example includes deleting a file and cleaning a directory.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/fundamentals/aliases.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic sealed class Clean : FrostingTask<Context>\n{\n    public override void Run(Context context)\n    {\n        // Delete a file.\n        context.DeleteFile(\"./file.txt\");\n\n        // Clean a directory.\n        context.CleanDirectory(\"./temp\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Configuration Value in cake.config File\nDESCRIPTION: Demonstrates how to set a custom configuration value in the cake.config file using the INI format. The section is defined in square brackets and key-value pairs are provided.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/running-builds/configuration/custom-configurations.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n; Use the ini-format to set a section and provide key-value-pairs.\n[MySection]\nMyKey=MyValue\n```\n\n----------------------------------------\n\nTITLE: Implementing CleanTask in Cake Frosting\nDESCRIPTION: This task class is responsible for cleaning the build output directory. It uses the CleanDirectory method and the MsBuildConfiguration from the BuildContext.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/getting-started/setting-up-a-new-frosting-project.md#2025-04-23_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n[TaskName(\"Clean\")]\npublic sealed class CleanTask : FrostingTask<BuildContext>\n{\n    public override void Run(BuildContext context)\n    {\n        context.CleanDirectory($\"../src/Example/bin/{context.MsBuildConfiguration}\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Command with Implicit ProcessArgumentBuilder in C#\nDESCRIPTION: Demonstrates using the new Command alias to execute a tool with an implicit ProcessArgumentBuilder. This example runs the 'dotnet --version' command.\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2022-10-14-cake-v2.3.0-released.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nCommand(\n    new []{ \"dotnet\", \"dotnet.exe\"},\n    \"--version\"\n);\n```\n\n----------------------------------------\n\nTITLE: Handling Per-Task Lifetime Events with FrostingTaskLifetime in Cake Frosting (C#)\nDESCRIPTION: This snippet illustrates the process for customizing per-task lifecycle events in Cake Frosting by implementing a subclass of FrostingTaskLifetime<TContext>. It configures the Cake host to use the custom task lifetime, and provides overridden Setup and Teardown methods which are invoked before and after each task run. Requires a build context class, Cake.Frosting, and proper host registration using UseTaskLifetime.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/writing-builds/setup-and-teardown.md#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic static class Program\n{\n    public static int Main(string[] args)\n    {\n        return new CakeHost()\n            .UseContext<BuildContext>()\n            .UseTaskLifetime<TaskLifetime>()\n            .Run(args);\n    }\n}\n\npublic class TaskLifetime : FrostingTaskLifetime<BuildContext>\n{\n    public override void Setup(BuildContext context, ITaskSetupContext info)\n    {\n        // Executed BEFORE every task.\n    }\n\n    public override void Teardown(BuildContext context, ITaskTeardownContext info)\n    {\n        // Executed AFTER every task.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using #define Directive for Conditional Execution in Cake\nDESCRIPTION: This snippet demonstrates how to use the #define directive to create a symbol and conditionally execute code based on that symbol. It shows the basic structure of #if, #else, and #endif directives.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/writing-builds/preprocessor-directives/define.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n#define FOO\n\n#if (FOO)\n    // code in this branch will execute\n#else\n    // code in this branch will be skipped\n#endif\n```\n\n----------------------------------------\n\nTITLE: Using Typed Context in Teardown Method in Cake - C#\nDESCRIPTION: Illustrates use of the BuildData typed context in a Teardown method to perform actions after build tasks conclude. Parameters are the context and the BuildData instance; logs completion information referencing the Frameworks property. Requires BuildData context to have been configured in Setup.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/writing-builds/sharing-build-state.md#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nTeardown<BuildData>((context, data) => // make sure you use the type parameter here\n{\n    Information($\"Completed build for {(string.Join(\", \", data.Frameworks))}\");\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Cake Modules Using Module Directive in Cake\nDESCRIPTION: This snippet demonstrates how to use the module directive to add Cake modules from NuGet sources. It shows two examples: one for a stable version and another for a prerelease version from a custom NuGet feed.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/writing-builds/preprocessor-directives/module.md#2025-04-23_snippet_0\n\nLANGUAGE: cake\nCODE:\n```\n#module nuget:?package=Cake.UrlLoadDirective.Module&version=1.0.2\n#module nuget:https://myget.org/f/Cake/?package=Cake.UrlLoadDirective.Module&version=1.0.3-beta&prerelease\n```\n\n----------------------------------------\n\nTITLE: Setting Configuration Value via Environment Variable\nDESCRIPTION: Shows how to set a custom configuration value using an environment variable. The variable name is prefixed with 'CAKE_' and the section and key are separated by an underscore.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/running-builds/configuration/custom-configurations.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n# Set an Environment variable by prefixing 'CAKE_'\n# and separating section and key with an underscore.\n[Environment]::SetEnvironmentVariable(\"CAKE_MYSECTION_MYKEY\", \"MyValue\" [EnvironmentVariableTarget]::User)\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Report Task\nDESCRIPTION: Task implementation for generating an HTML report from collected issues using RazorEngine templates.\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2018-06-10-cake-issues.md#2025-04-23_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n#addin \"Cake.Reporting\"\n#addin \"Cake.Reporting.Generic\"\n\nTask(\"Create-Report\")\n    .IsDependentOn(\"Read-Issues\")\n    .Does(() =>\n{\n    // Create HTML report using Data Table template.\n    CreateIssueReport(\n        issues,\n        GenericIssueReportFormatFromEmbeddedTemplate(GenericIssueReportTemplate.HtmlDataTable),\n        repoRootFolder,\n        repoRootFolder.CombineWithFilePath(\"report.html\"));\n});\n```\n\n----------------------------------------\n\nTITLE: Sending Email via CakeMail using Cake.CakeMail Addin in C#\nDESCRIPTION: This snippet demonstrates sending an email using the Cake.CakeMail addin. It connects to the CakeMail API using a username, password, and API key stored in environment variables. The code sends a multi-part email with both HTML and plain text content.\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2016-10-31-email-addins-released.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n#addin Cake.CakeMail\n\nvar apiKey = EnvironmentVariable(\"CAKEMAIL_API_KEY\");\nvar userName = EnvironmentVariable(\"CAKEMAIL_USERNAME\");\nvar password = EnvironmentVariable(\"CAKEMAIL_PASSWORD\");\n\nTask(\"SendEmail\")\n    .Does(() =>\n{\n    try\n    {\n        var result = CakeMail.SendEmail(\n                senderName: \"Bob Smith\", \n                senderAddress: \"bob@example.com\",\n                recipientAddress: \"jane@example.com\",\n                subject: \"This is a test\",\n                htmlContent: \"<html><body>This is a test</body></html>\",\n                textContent: \"This is a test\",\n                settings: new CakeMailSettings\n                {\n                    ApiKey = apiKey,\n                    UserName = userName,\n                    Password = password\n                }\n        );\n\n        if (result.Ok)\n        {\n            Information(\"Email succcessfully sent\");\n        }\n        else\n        {\n            Error(\"Failed to send email: {0}\", result.Error);\n        }\n    }\n    catch(Exception ex)\n    {\n        Error(\"{0}\", ex);\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Addin from Custom Source in Cake (C#)\nDESCRIPTION: Examples of installing addins from custom sources, including a specific NuGet feed (myget.org) and a local directory.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/writing-builds/preprocessor-directives/addin.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n#addin nuget:https://myget.org/f/Cake/?package=Cake.Foo\n```\n\nLANGUAGE: csharp\nCODE:\n```\n#addin nuget:file://C:/MyPackages/?package=Cake.Foo\n```\n\n----------------------------------------\n\nTITLE: Installing a Tool from a Local Directory Source in Cake (C#)\nDESCRIPTION: This example shows how to use the #tool directive in Cake to install a NuGet-packaged tool from a local file system directory. The 'file://' URI schema is employed to provide a local path, which allows offline or in-house package management. The 'package' query parameter specifies which tool to pull.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/writing-builds/preprocessor-directives/tool/nuget-provider.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n#tool nuget:file://localhost/packages/?package=Cake.Foo\n```\n\n----------------------------------------\n\nTITLE: Reading Issues Task Implementation\nDESCRIPTION: Task implementation for reading and aggregating issues from multiple analysis tools using the Cake.Issues framework.\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2018-06-10-cake-issues.md#2025-04-23_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nIEnumerable<IIssue> issues = null;\n\nTask(\"Read-Issues\")\n    .IsDependentOn(\"Build\")\n    .IsDependentOn(\"Run-InspectCode\")\n    .Does(() =>\n{\n    var settings =\n        new ReadIssuesSettings(repoRootFolder)\n        {\n            Format = IssueCommentFormat.Markdown\n        };\n\n    issues = ReadIssues(\n        new List<IIssueProvider>\n        {\n            MsBuildIssuesFromFilePath(\n                msBuildLog,\n                MsBuildXmlFileLoggerFormat),\n            InspectCodeIssuesFromFilePath(\n                inspectCodeLog)\n        },\n        settings);\n\n    Information(\"{0} issues are found.\", issues.Count());\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing TestTask in Cake Frosting\nDESCRIPTION: This task class is responsible for running tests on the built solution. It depends on the BuildTask and uses the DotNetTest method with the specified MsBuildConfiguration.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/getting-started/setting-up-a-new-frosting-project.md#2025-04-23_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n[TaskName(\"Test\")]\n[IsDependentOn(typeof(BuildTask))]\npublic sealed class TestTask : FrostingTask<BuildContext>\n{\n    public override void Run(BuildContext context)\n    {\n        context.DotNetTest(\"../src/Example.sln\", new DotNetTestSettings\n        {\n            Configuration = context.MsBuildConfiguration,\n            NoBuild = true,\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Task Dependencies in Cake Build Script\nDESCRIPTION: This C# code snippet demonstrates a simple Cake build script with two tasks where 'Dependent-Task' depends on 'Dependency-Task'. It shows the basic structure for creating task dependencies in Cake.\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2018-07-06-cake-v0.29.0-released.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar target = Argument(\"target\", \"Default\");\n\nTask(\"Dependency-Task\")\n    .Does(() =>\n{\n    Information(\"Executing dependency.\");\n});\n\n\nTask(\"Dependent-Task\")\n    .IsDependentOn(\"Dependency-Task\")\n    .Does(() =>\n{\n   Information(\"Executing task.\");\n});\n\nRunTarget(target);\n```\n\n----------------------------------------\n\nTITLE: Sending Email via SendGrid using Cake.SendGrid Addin in C#\nDESCRIPTION: This snippet shows how to send an email using the Cake.SendGrid addin. It uses SendGrid's API to send a multi-part email with both HTML and plain text content. The SendGrid API key is retrieved from an environment variable for security.\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2016-10-31-email-addins-released.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n#addin Cake.SendGrid\n\nvar sendGridApiKey = EnvironmentVariable(\"SENDGRID_API_KEY\");\n\nTask(\"SendEmail\")\n    .Does(() =>\n{\n    try\n    {\n        var result = SendGrid.SendEmail(\n                senderName: \"Bob Smith\", \n                senderAddress: \"bob@example.com\",\n                recipientName: \"Jane Doe\",\n                recipientAddress: \"jane@example.com\",\n                subject: \"This is a test\",\n                htmlContent: \"<html><body>This is a test</body></html>\",\n                textContent: \"This is a test\",\n                attachments: null,\n                settings: new SendGridSettings { ApiKey = sendGridApiKey }\n        );\n\n        if (result.Ok)\n        {\n            Information(\"Email succcessfully sent\");\n        }\n        else\n        {\n            Error(\"Failed to send email: {0}\", result.Error);\n        }\n    }\n    catch(Exception ex)\n    {\n        Error(\"{0}\", ex);\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Loading Recipe NuGet Package with Cake .NET Tool Preprocessor Directive\nDESCRIPTION: This C# snippet demonstrates using the `#load` preprocessor directive within a Cake build script (for Cake .NET Tool) to download and include a Recipe NuGet package. It utilizes the `nuget` scheme to specify the package name (`MyRecipePackage`) and version (`1.0.0`), making the `.cake` files within the package's `content` folder accessible to the script.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/writing-builds/reusing-builds.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n#load nuget:?package=MyRecipePackage&version=1.0.0\n```\n\n----------------------------------------\n\nTITLE: Aborting Build by Throwing Exceptions in Cake (C#)\nDESCRIPTION: Provides an example of intentionally throwing an exception within a Cake task's `Does` action to halt the build process when an unrecoverable error condition is detected, such as mismatched release notes versions. The Cake script runner catches the exception, logs it as an error, and terminates the build with exit code 1.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/writing-builds/tasks/error-handling.md#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nTask(\"Check-ReleaseNotes\")\n    .Does(() =>\n{\n    var releaseNotes = ParseReleaseNotes(\"./ReleaseNotes.md\");\n    if(releaseNotes.Version.ToString() != nugetVersion)\n    {\n        throw new Exception(String.Format(\"Release notes are missing an entry for v{0}. Latest release notes are for v{1}\", nugetVersion, releaseNotes.Version));\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Cake Addin in Cake Script\nDESCRIPTION: Demonstrates how to add a Cake addin using the #addin preprocessor directive. This snippet shows both basic and full versions of the directive.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/integrations/editors/rider/templates.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n#addin \"nuget:?package=Cake.Foo&version=1.2.3\"\n```\n\nLANGUAGE: csharp\nCODE:\n```\n#addin \"nuget:https://www.nuget.org/api/v2?package=Cake.Foo&version=1.2.3\"\n```\n\n----------------------------------------\n\nTITLE: Using Global Variables in Setup and Task Declarations in Cake - C#\nDESCRIPTION: Demonstrates using global variables previously declared for configuration and artifacts directory inside Setup and Task methods. The Setup method logs the selected configuration, while the Task method uses the artifacts variable to clean the specified directory. Relies on global scope and Cake.Information and CleanDirectory functions.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/writing-builds/sharing-build-state.md#2025-04-23_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nSetup(setupContext =>\n{\n    Information($\"Using {configuration} build configuration\");\n});\n\nTask(\"Clean\")\n    .Does(() =>\n{\n    // Clean artifacts directory\n    CleanDirectory(artifacts);\n});\n```\n\n----------------------------------------\n\nTITLE: Finding Latest Visual Studio Installation\nDESCRIPTION: Example showing how to locate the latest Visual Studio installation and configure MSBuild path\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2017-03-27-vswhere-and-visual-studio-2017-support.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n#tool nuget:?package=vswhere\n\nDirectoryPath vsLatest  = VSWhereLatest();\nFilePath msBuildPathX64 = (vsLatest==null)\n                            ? null\n                            : vsLatest.CombineWithFilePath(\"./MSBuild/15.0/Bin/amd64/MSBuild.exe\");\n\nMSBuild(\"./src/Example.sln\", new MSBuildSettings {\n    ToolPath = msBuildPathX64\n});\n```\n\n----------------------------------------\n\nTITLE: Installing a .NET Tool by Package Name using Cake\nDESCRIPTION: This Cake script snippet shows the basic usage of the `#tool` directive with the `dotnet` scheme to install a .NET tool ('Octopus.DotNet.Cli') by specifying its name using the `package` parameter. It relies on the default configured NuGet sources (typically nuget.org).\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/writing-builds/preprocessor-directives/tool/dotnet-provider.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n#tool dotnet:?package=Octopus.DotNet.Cli\n```\n\n----------------------------------------\n\nTITLE: Defining Reverse Task Dependencies with IsDependeeOf\nDESCRIPTION: Shows how to define a task as a dependee of another task, creating a reverse dependency relationship. This provides an alternative syntax for expressing task dependencies.\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2017-10-15-cake-v0.23.0-released.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nTask(\"A\").IsDependeeOf(\"B\");\nTask(\"B\");\n\nRunTarget(\"B\");\n```\n\n----------------------------------------\n\nTITLE: Parameterizing Target Selection with Arguments in Cake .NET Tool - C#\nDESCRIPTION: Demonstrates dynamically selecting which build target to run via a script argument (defaulting to 'Build'), and defining both 'Build' and 'Publish' tasks with dependency linkage. The script accesses command-line arguments using the Argument DSL, then passes the resolved target name to \\\"RunTarget\\\". Dependencies: Cake build scripting; proper command-line invocation with '--target' parameter is expected. Inputs are the CLI arguments, output is dependent on the selected task.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/writing-builds/running-targets.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar target = Argument(\"target\", \"Build\");\n\nTask(\"Build\")\n    .Does(() =>\n{\n});\n\nTask(\"Publish\")\n    .IsDependentOn(\"Build\")\n    .Does(() =>\n{\n});\n\nRunTarget(target);\n```\n\n----------------------------------------\n\nTITLE: Specifying Package Name and Version in Cake Addin (C#)\nDESCRIPTION: Examples of specifying the package name and version when using the addin directive in Cake.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/writing-builds/preprocessor-directives/addin.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n#addin nuget:?package=Cake.Foo\n```\n\nLANGUAGE: csharp\nCODE:\n```\n#addin nuget:?package=Cake.Foo&version=1.2.3\n```\n\n----------------------------------------\n\nTITLE: Creating a New Cake Frosting Project\nDESCRIPTION: This command creates a new Cake Frosting project using the installed template. It sets up the initial project structure and bootstrapping scripts.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/getting-started/setting-up-a-new-frosting-project.md#2025-04-23_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\ndotnet new cakefrosting\n```\n\n----------------------------------------\n\nTITLE: Executing Cake Script with Bootstrap Step in Bash\nDESCRIPTION: This snippet shows how to execute a Cake script with the bootstrap step. It first runs Cake with the --bootstrap argument to download and set up the modules, then runs the script normally.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/writing-builds/preprocessor-directives/module.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./cake.exe build.cake --bootstrap\n./cake.exe build.cake\n```\n\n----------------------------------------\n\nTITLE: Installing a .NET Tool from a Custom Source using Cake\nDESCRIPTION: This Cake script snippet demonstrates how to install the 'Octopus.DotNet.Cli' .NET tool using the `#tool` directive with the `dotnet` scheme, specifying a custom package source URL (a MyGet feed in this case) instead of the default nuget.org.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/writing-builds/preprocessor-directives/tool/dotnet-provider.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n#tool dotnet:https://www.myget.org/F/cake-build/api/v2?package=Octopus.DotNet.Cli\n```\n\n----------------------------------------\n\nTITLE: Defining BuildContext with MsBuildConfiguration in C#\nDESCRIPTION: This updated BuildContext class removes the Delay property and adds an MsBuildConfiguration property. It demonstrates how to customize the context for specific build needs.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/getting-started/setting-up-a-new-frosting-project.md#2025-04-23_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class BuildContext : FrostingContext\n{\n    public string MsBuildConfiguration { get; set; }\n\n    public BuildContext(ICakeContext context)\n        : base(context)\n    {\n        MsBuildConfiguration = context.Argument(\"configuration\", \"Release\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Global Variables for Cake Build Scripts - C#\nDESCRIPTION: Defines global variables for build configuration, targets, artifacts, and test results path at the top of a Cake script. These variables are accessible throughout subsequent Setup or Task sections for consistent state across the build file. Dependencies include Cake.Argument, Directory, and MakeAbsolute.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/writing-builds/sharing-build-state.md#2025-04-23_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n///////////////////////////////////////////////////////////////////////////////\n// VARIABLES\n///////////////////////////////////////////////////////////////////////////////\n\nvar target = Argument(\"target\", \"Default\");\nvar configuration = Argument(\"configuration\", \"Release\");\nvar artifacts = \"./dist/\";\nvar testResultsPath = MakeAbsolute(Directory(artifacts + \"./test-results\"));\n```\n\n----------------------------------------\n\nTITLE: Ignoring Task Errors with ContinueOnError in Cake (C#)\nDESCRIPTION: Shows how to use the `ContinueOnError` extension method on a Cake task. This method automatically suppresses (swallows) any exceptions thrown during the task's execution, allowing the build process to continue as if no error occurred. Note that `ContinueOnError` cannot be used in conjunction with the `OnError` method on the same task.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/writing-builds/tasks/error-handling.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nTask(\"A\")\n    .ContinueOnError()\n    .Does(() =>\n{\n\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Configuration Value in C#\nDESCRIPTION: Demonstrates how to access a custom configuration value using the IConfiguration.GetValue method. The section and key are separated by an underscore and access is case insensitive.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/running-builds/configuration/custom-configurations.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar value = Context.Configuration.GetValue(\"MySection_MyKey\");\n```\n\n----------------------------------------\n\nTITLE: Defining Tasks in Cake Script\nDESCRIPTION: Demonstrates how to define tasks in a Cake script, including simple task definitions and tasks with action bodies.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/integrations/editors/rider/templates.md#2025-04-23_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nTask(\"name\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Optional or Required Task Dependencies\nDESCRIPTION: Demonstrates how to specify whether a dependency is optional or required using the 'required' parameter. This is useful for creating extension points in build scripts.\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2017-10-15-cake-v0.23.0-released.md#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nTask(\"Bar\").IsDependencyOf(\"Foo\", required: true);\nTask(\"Baz\").IsDependencyOf(\"Qux\", required: false)\n```\n\n----------------------------------------\n\nTITLE: Installing a Specific Version of a .NET Tool using Cake\nDESCRIPTION: This Cake script snippet demonstrates installing a specific version ('4.41.0') of the 'Octopus.DotNet.Cli' .NET tool. It uses the `package` parameter to identify the tool and the `version` parameter to specify the exact version required.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/writing-builds/preprocessor-directives/tool/dotnet-provider.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n#tool dotnet:?package=Octopus.DotNet.Cli&version=4.41.0\n```\n\n----------------------------------------\n\nTITLE: Creating Reusable Command Settings in C#\nDESCRIPTION: Demonstrates creating reusable Command settings that can be shared across multiple Command calls. This can be useful for setting up common configurations.\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2022-10-14-cake-v2.3.0-released.md#2025-04-23_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n#tool dotnet:?package=DPI&version=2022.8.21.54\n// Reusable tools settings i.e. created in setup.\nvar settings = new CommandSettings {\n        ToolName = \"DPI\",\n        ToolExecutableNames =  new []{ \"dpi\", \"dpi.exe\"},\n     };\n\n// Example with ProcessArgumentBuilder\nCommand(\n    settings,\n    new ProcessArgumentBuilder()\n         .Append(\"nuget\")\n         .AppendQuoted(Context.Environment.WorkingDirectory.FullPath)\n         .AppendSwitch(\"--output\", \" \", \"TABLE\")\n         .Append(\"analyze\")\n);\n\n// Example with implicit ProcessArgumentBuilder\nCommand(\n     settings,\n     $\"nuget --output TABLE analyze\"\n);\n```\n\n----------------------------------------\n\nTITLE: Running Only the Specified Target with '--exclusive' Flag (Cake .NET Tool, Cake Frosting) - PowerShell\nDESCRIPTION: Depicts using the '--exclusive' command-line switch in conjunction with '--target' to execute only the named target, skipping its dependencies. For example, '--target=Publish --exclusive' will invoke the 'Publish' task without running 'Build'. This relies on proper support in the Cake runtime; parameters are the '--target' value and the '--exclusive' switch.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/writing-builds/running-targets.md#2025-04-23_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\n--target=Publish --exclusive\n```\n\n----------------------------------------\n\nTITLE: Customizing Command Settings in C#\nDESCRIPTION: Shows how to customize Command settings using a lambda expression. This example sets a custom tool name, expected exit code, and adds an argument.\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2022-10-14-cake-v2.3.0-released.md#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nCommand(\n    new []{ \"dotnet\", \"dotnet.exe\"},\n    settingsCustomization: settings => settings\n                                            .WithToolName(\".NET tool\")\n                                            .WithExpectedExitCode(1)\n                                            .WithArgumentCustomization(args => args.Append(\"tool\"))\n);\n```\n\n----------------------------------------\n\nTITLE: Installing a Tool from a Custom NuGet Source using Cake #tool Directive (C#)\nDESCRIPTION: This snippet demonstrates how to install a tool from a specific NuGet-compatible source (myget.org) using the Cake preprocessor directive #tool. The syntax allows the user to override the default source (nuget.org) by specifying a full feed URI and package name. No third-party dependencies beyond Cake are required. The 'package' URI parameter specifies the tool package to be installed.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/writing-builds/preprocessor-directives/tool/nuget-provider.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n#tool nuget:https://myget.org/f/Cake/?package=Cake.Foo\n```\n\n----------------------------------------\n\nTITLE: Using Improved Globber with Wildcards in C#\nDESCRIPTION: Demonstrates usage of Cake's improved globber functionality, including bracket wildcards and brace expansion. The example shows how to get files and directories matching specific patterns.\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2018-12-13-cake-v0.31.0-released.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nFilePathCollection files = GetFiles($\"./folder/fooba[rz].txt\");\n\nDirectoryPathCollection directories = GetDirectories($\"./folder/fooba[rz]\");\n```\n\n----------------------------------------\n\nTITLE: Excluding Specific Files when Installing Tools with Cake (C#)\nDESCRIPTION: Demonstrates excluding files from the tool installation by specifying the 'exclude' parameter with a glob pattern in the #tool directive. This enables fine-grained control over which files are included, allowing users to filter out unwanted executables or scripts bundled in the package.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/writing-builds/preprocessor-directives/tool/nuget-provider.md#2025-04-23_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n#tool nuget:?package=Cake.Foo&exclude=/**/Foo.exe\n```\n\n----------------------------------------\n\nTITLE: Using Preprocessor Symbols in Cake Script\nDESCRIPTION: Example Cake script demonstrating the use of preprocessor symbols to detect the runtime environment. It checks for Cake execution, .NET Framework, .NET Core, and specific .NET Core versions.\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2019-09-28-cake-v0.35.0-released.md#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n#if (CAKE)\n    Information(\"Running on Cake.\");\n#else\n    Console.WriteLine(\"Not running on Cake.\");\n#endif\n\n#if NETFRAMEWORK\n    Information(\"Running on .NET Framework.\");\n#elif NETCOREAPP\n    Information(\"Running on .NET Core.\");\n#else\n    Information(\"Running on something else.\");\n#endif\n\n#if NETCOREAPP3_0\n    Information(\"Running on .NET Core 3.0.\");\n#endif\n```\n\n----------------------------------------\n\nTITLE: Adding Criteria Messages to Cake Tasks\nDESCRIPTION: Demonstrates how to add descriptive messages to task criteria that explain why a task was skipped. This improves the clarity of build logs by providing context for task execution decisions.\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2018-05-31-cake-v0.28.0-released.md#2025-04-23_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nTask(\"Sign\")\n    .WithCriteria<MyBuildData>(\n        (context, data) => data.SignAssemblies,\n        \"Sign skipped because SignAssemblies is set to false.\"\n        );\n```\n\n----------------------------------------\n\nTITLE: Installing Addin Using NuGet in Cake (C#)\nDESCRIPTION: Basic usage of the addin directive to install and reference a NuGet package in a Cake build script. Supports optional quotes around the directive.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/writing-builds/preprocessor-directives/addin.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n#addin nuget:?package=Cake.Foo&version=1.0.0\n```\n\nLANGUAGE: csharp\nCODE:\n```\n#addin \"nuget:?package=Cake.Foo&version=1.0.0\"\n```\n\n----------------------------------------\n\nTITLE: Handling Command Error Output in C#\nDESCRIPTION: Demonstrates capturing and logging both standard output and standard error from a Command. This can be useful for debugging or handling expected error conditions.\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2022-10-14-cake-v2.3.0-released.md#2025-04-23_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n// Example with ProcessArgumentBuilder\nvar exitCode = Command(\n    new []{ \"dotnet\", \"dotnet.exe\" },\n    out var standardOutput,\n    out var standardError,\n    new ProcessArgumentBuilder()\n        .Append(\"tool\"),\n    expectedExitCode:1\n);\n\nVerbose(\"Exit code: {0}\", exitCode);\nInformation(\"Output: {0}\", standardOutput);\nError(\"Error: {0}\", standardError);\n```\n\n----------------------------------------\n\nTITLE: Pinning Cake Version via packages.config for .NET Framework Runner (XML)\nDESCRIPTION: This snippet demonstrates pinning a specific version of Cake in a packages.config file for .NET Framework runners. The root <packages> node contains a <package> entry with id=\"Cake\" and an explicit version, ensuring deterministic restores. The file must be committed to source control for effectiveness. Editing the version field allows for updates as needed.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/writing-builds/reproducible-builds/pinning-cake-version.md#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n&lt;?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?&gt;\\n&lt;packages&gt;\\n    &lt;package id=\\\"Cake\\\" version=\\\"<?! Meta CakeLatestReleaseName /?>\\\" /&gt;\\n&lt;/packages&gt;\n```\n\n----------------------------------------\n\nTITLE: Referencing Recipe NuGet Package in Cake Frosting Project\nDESCRIPTION: This C# (MSBuild/XML format) snippet shows how to reference a Recipe NuGet package within a Cake Frosting project file (`.csproj`). By adding a `PackageReference` for `MyRecipePackage` version `1.0.0`, the types and potentially tasks defined in the recipe package become available for use within the Cake Frosting C# build project.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/writing-builds/reusing-builds.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n<PackageReference Include=\"MyRecipePackage\" Version=\"1.0.0\" />\n```\n\n----------------------------------------\n\nTITLE: Installing a Specific Tool Version with Cake NuGet Installer (C#)\nDESCRIPTION: Illustrates specifying an explicit tool version using the version query parameter in the #tool preprocessor directive. This ensures that the desired version (in this case, 1.2.3) of the tool is installed, helping enforce reproducible builds. Usage is compatible with any NuGet feed and does not require further dependencies beyond standard Cake usage.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/writing-builds/preprocessor-directives/tool/nuget-provider.md#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n#tool nuget:?package=Cake.Foo&version=1.2.3\n```\n\n----------------------------------------\n\nTITLE: Demonstrating C# 8 Features in Cake Script\nDESCRIPTION: Example Cake script showcasing C# 8 features including switch expressions, null-coalescing assignment, and ranges. It defines a method to convert Verbosity enum to string levels and iterates over enum values.\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2019-09-28-cake-v0.35.0-released.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n// Switch expression\nstatic string ToLevel(this Verbosity verbosity)\n    => verbosity switch\n    {\n        Verbosity.Diagnostic    => \"[****]\",\n        Verbosity.Verbose       => \"[*** ]\",\n        Verbosity.Normal        => \"[**  ]\",\n        Verbosity.Minimal       => \"[*   ]\",\n        Verbosity.Quiet         => \"[    ]\",\n         _  => throw new ArgumentOutOfRangeException(message: \"invalid enum value\",\n            actualValue: verbosity,\n            paramName: nameof(verbosity)),\n    };\n\nVerbosity[] verbosities = null;\n\n// Null-coalescing assignment\nverbosities ??= (Verbosity[])Enum.GetValues(typeof(Verbosity));\n\n// Range last 4\nforeach(Verbosity verbosity in verbosities[^4..])\n{\n    Information(\n        \"{0} = {1:F}\",\n        verbosity.ToLevel(),\n        verbosity\n        );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Typed Context Class in Cake\nDESCRIPTION: Creates a custom C# class to serve as a typed context for Cake build scripts. The class includes both read-only and mutable properties to store build configuration data and state that can be shared between tasks.\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2018-05-31-cake-v0.28.0-released.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyBuildData\n{\n\tpublic string Configuration { get; }\n\tpublic bool SignAssemblies { get; }\n\tpublic bool AssmbliesSigned { get; set; }\n\n\tpublic MyBuildData(\n\t\tstring configuration,\n\t\tbool signAssemblies)\n\t{\n\t\tConfiguration = configuration;\n\t\tSignAssemblies = signAssemblies;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating C# 9 Records in Cake Build Script\nDESCRIPTION: This snippet showcases the use of C# 9 records for defining build data structures in a Cake build script. It includes record definitions for StorageAccount and BuildData, as well as a Setup method using these records.\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2020-11-05-cake-v1.0.0-rc0001-released.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic record StorageAccount(\n    string Name,\n    string Container,\n    string Key\n);\n\npublic record BuildData(\n    string Version,\n    DotNetCoreMSBuildSettings MSBuildSettings,\n    StorageAccount StorageAccount\n)\n{\n    public bool ShouldPublish { get; } = !string.IsNullOrEmpty(StorageAccount.Name)\n                                            && !string.IsNullOrEmpty(StorageAccount.Container)\n                                            && !string.IsNullOrEmpty(StorageAccount.Key);\n}\n\nSetup<BuildData>(context=>{\n    var version = context.Argument(\"version\", \"1.0.0\");\n\n    return new (\n        version,\n        new DotNetCoreMSBuildSettings()\n                                .WithProperty(\"Version\", version)\n                                .WithProperty(\"Configuration\", context.Argument(\"configuration\", \"Release\")),\n        new (\n            context.EnvironmentVariable(\"PUBLISH_STORAGE_ACCOUNT\"),\n            context.EnvironmentVariable(\"PUBLISH_STORAGE_CONTAINER\"),\n            context.EnvironmentVariable(\"PUBLISH_STORAGE_KEY\")\n        )\n    );\n});\n\nTask(\"Build\")\n    .Does<BuildData>((context, data) => context.Information(\"Building {0}\", data.Version));\n\nRunTarget(\"Build\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Addins Path in Cake .NET Tool\nDESCRIPTION: This option allows configuration of the addins folder used by Cake when restoring addins. The default value is './tools/Addins'.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/running-builds/configuration/default-configuration-values.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nCAKE_PATHS_ADDINS\n```\n\nLANGUAGE: sh\nCODE:\n```\n[Paths]\nAddins=./tools/Addins\n```\n\nLANGUAGE: sh\nCODE:\n```\n--paths_addins=./tools/Addins\n```\n\n----------------------------------------\n\nTITLE: Parsing Arguments in Cake Script\nDESCRIPTION: Shows how to parse input arguments in a Cake script using the Argument function.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/integrations/editors/rider/templates.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar argumentName = Argument(\"Argument name\", \"Default value\");\n```\n\n----------------------------------------\n\nTITLE: Initializing CakeHost in Cake.Frosting 1.0\nDESCRIPTION: Example of creating and running a CakeHost instance in Cake.Frosting version 1.0. This snippet shows the new approach using CakeHost directly and the renamed InstallTool method.\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2021-01-29-cake-v1.0.0-rc0003-released.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// Create and run the host.\nreturn\n    new CakeHost()\n        .UseContext<BuildContext>()\n        .InstallTool(new Uri(\"nuget:?package=ReportGenerator&version=4.8.1\"))\n        .Run(args);\n```\n\n----------------------------------------\n\nTITLE: Running Cake Build Script with .NET CLI\nDESCRIPTION: Executes the Cake build script using the .NET CLI command, which runs the locally installed Cake .NET Tool.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/getting-started/setting-up-a-new-scripting-project.md#2025-04-23_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\ndotnet cake\n```\n\n----------------------------------------\n\nTITLE: Pinning Tool Version with #tool Directive in Cake Script\nDESCRIPTION: Demonstrates pinning a specific version (1.2.3) of the NuGet tool package 'Tool.Foo' using the `#tool` preprocessor directive within a Cake script, typically used with the Cake .NET Tool runner. This ensures the build uses a consistent tool version by specifying the package and version via query parameters.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/writing-builds/reproducible-builds/pinning-tool-version.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n#tool nuget:?package=Tool.Foo&version=1.2.3\n```\n\n----------------------------------------\n\nTITLE: Pinning Addin Version with Preprocessor Directive in Cake .NET Tool - C#\nDESCRIPTION: This snippet shows how to reference and pin a specific version of a Cake addin using the `#addin` preprocessor directive. The directive ensures that the specified version (here, 1.2.3 of Cake.Foo) is downloaded by the Cake build runner, providing consistency across builds. There are no external dependencies beyond access to NuGet; the `#addin` directive must be placed at the top of your Cake script (.cake) file.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/writing-builds/reproducible-builds/pinning-addin-version.md#2025-04-23_snippet_0\n\nLANGUAGE: c#\nCODE:\n```\n#addin nuget:?package=Cake.Foo&version=1.2.3\n```\n\n----------------------------------------\n\nTITLE: Importing Cake Module in Build Script\nDESCRIPTION: This snippet demonstrates how to import a Cake module using the new implicit bootstrapping feature in Cake 1.0. It shows the module directive for importing the Cake.DotNetTool.Module.\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2020-11-05-cake-v1.0.0-rc0001-released.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n#module nuget:?package=Cake.DotNetTool.Module&version=0.4.0\n```\n\n----------------------------------------\n\nTITLE: Setting Modules Path in Cake .NET Tool\nDESCRIPTION: This option configures the Modules folder used by Cake when loading custom Modules. The default value is './tools/Modules'.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/running-builds/configuration/default-configuration-values.md#2025-04-23_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nCAKE_PATHS_MODULES\n```\n\nLANGUAGE: sh\nCODE:\n```\n[Paths]\nModules=./tools/Modules\n```\n\nLANGUAGE: sh\nCODE:\n```\n--paths_modules=./tools/Modules\n```\n\n----------------------------------------\n\nTITLE: Inserting Cake Load NuGet Directive in Visual Studio Code\nDESCRIPTION: This snippet inserts a more complex Cake load pre-processor directive for NuGet packages. The source, package name, and version can be customized.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/integrations/editors/vscode/snippets.md#2025-04-23_snippet_4\n\nLANGUAGE: cake\nCODE:\n```\n#load \"nuget:https://www.nuget.org/api/v2?package=Cake.Foo&version=1.2.3\"\n```\n\n----------------------------------------\n\nTITLE: Defining BuildContext Class in C#\nDESCRIPTION: This class defines the BuildContext, which can be used to add custom properties. It includes an example 'Delay' property that can be set through a command-line argument.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/getting-started/setting-up-a-new-frosting-project.md#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic class BuildContext : FrostingContext\n{\n    public bool Delay { get; set; }\n\n    public BuildContext(ICakeContext context)\n        : base(context)\n    {\n        Delay = context.Arguments.HasArgument(\"delay\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing a NuGet-Package Tool by Name with Cake #tool (C#)\nDESCRIPTION: Demonstrates the simplest form of adding a tool by specifying just the package name via the Cake #tool directive. It defaults to retrieving the latest available release version of the specified package (here, Cake.Foo) from the default feed unless otherwise configured. This setup requires no additional dependencies beyond Cake's standard tool installation mechanism.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/writing-builds/preprocessor-directives/tool/nuget-provider.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n#tool nuget:?package=Cake.Foo\n```\n\n----------------------------------------\n\nTITLE: Pinning Cake.CoreCLR Version via packages.config for .NET Core Runner (XML)\nDESCRIPTION: This snippet fixes the version of Cake.CoreCLR by listing it in a packages.config file, ensuring .NET Core builds always use the intended version. The <package> element specifies the required version and must appear under <packages>; this file should be tracked by source control. Changing the version attribute allows for upgrades or downgrades of the dependency.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/writing-builds/reproducible-builds/pinning-cake-version.md#2025-04-23_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n&lt;?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?&gt;\\n&lt;packages&gt;\\n    &lt;package id=\\\"Cake.CoreCLR\\\" version=\\\"<?! Meta CakeLatestReleaseName /?>\\\" /&gt;\\n&lt;/packages&gt;\n```\n\n----------------------------------------\n\nTITLE: Initializing CakeHost using CakeHostBuilder in Frosting 0.38.x (C#)\nDESCRIPTION: Shows the method for setting up and running a Cake Frosting build host in version 0.38.x. It utilizes the `CakeHostBuilder`, configures it with command-line arguments (`WithArguments`) and a startup class (`UseStartup`), builds the host, and then runs it. This approach is replaced by direct `CakeHost` usage in Frosting 1.0.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/getting-started/upgrade.md#2025-04-23_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n```csharp\n// Create the host.\nvar host =\n    new CakeHostBuilder()\n       .WithArguments(args)\n       .UseStartup<Program>()\n       .Build();\n\n// Run the host.\nreturn host.Run();\n```\n```\n\n----------------------------------------\n\nTITLE: Enabling Script Caching in Cake .NET Tool\nDESCRIPTION: This option enables Cake .NET Tool to cache script compilation for faster subsequent executions of unchanged scripts. It's available since Cake 2.2.0 and defaults to false.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/running-builds/configuration/default-configuration-values.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nCAKE_SETTINGS_ENABLESCRIPTCACHE\n```\n\nLANGUAGE: sh\nCODE:\n```\n[Settings]\nEnableScriptCache=true\n```\n\nLANGUAGE: sh\nCODE:\n```\n--settings_enablescriptcache=true\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Cake Task in Visual Studio Code\nDESCRIPTION: This snippet defines a basic Cake task. The name of the task can be customized.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/integrations/editors/vscode/snippets.md#2025-04-23_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nTask(\"name\");\n```\n\n----------------------------------------\n\nTITLE: Implementing Cake Deployment Script\nDESCRIPTION: C# deployment script using Cake that handles the complete deployment process including cleaning, restoring packages, building and publishing the web application\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2015-10-22-cake-addin-kudu.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n#tool \"KuduSync.NET\" \"https://www.nuget.org/api/v2/\"\n#addin \"Cake.Kudu\" \"https://www.nuget.org/api/v2/\"\n\n///////////////////////////////////////////////////////////////////////////////\n// ARGUMENTS\n///////////////////////////////////////////////////////////////////////////////\n\nvar target          = Argument<string>(\"target\", \"Default\");\nvar configuration   = Argument<string>(\"configuration\", \"Release\");\n\n///////////////////////////////////////////////////////////////////////////////\n// GLOBAL VARIABLES\n///////////////////////////////////////////////////////////////////////////////\n\nvar websitePath     = MakeAbsolute(Directory(\"./src/TestWebSite\"));\nvar solutionPath    = MakeAbsolute(File(\"./src/TestWebSite.sln\"));\n\nif (!Kudu.IsRunningOnKudu)\n{\n    throw new Exception(\"Not running on Kudu\");\n}\n\nvar deploymentPath = Kudu.Deployment.Target;\nif (!DirectoryExists(deploymentPath))\n{\n    throw new DirectoryNotFoundException(\n        string.Format(\n            \"Deployment target directory not found {0}\",\n            deploymentPath\n            )\n        );\n}\n\n///////////////////////////////////////////////////////////////////////////////\n// TASK DEFINITIONS\n///////////////////////////////////////////////////////////////////////////////\n\nTask(\"Clean\")\n    .Does(() =>\n{\n    //Clean up any binaries\n    Information(\"Cleaning {0}\", websitePath);\n    CleanDirectories(websitePath + \"/bin\");\n});\n\nTask(\"Restore\")\n    .Does(() =>\n{\n    // Restore all NuGet packages.\n    Information(\"Restoring {0}...\", solutionPath);\n    NuGetRestore(solutionPath);\n});\n\nTask(\"Build\")\n    .IsDependentOn(\"Clean\")\n    .IsDependentOn(\"Restore\")\n    .Does(() =>\n{\n    // Build all solutions.\n    Information(\"Building {0}\", solutionPath);\n    MSBuild(solutionPath, settings =>\n        settings.SetPlatformTarget(PlatformTarget.MSIL)\n            .WithProperty(\"TreatWarningsAsErrors\",\"true\")\n            .WithTarget(\"Build\")\n            .SetConfiguration(configuration));\n});\n\nTask(\"Publish\")\n    .IsDependentOn(\"Build\")\n    .Does(() =>\n{\n    Information(\"Deploying web from {0} to {1}\", websitePath, deploymentPath);\n    Kudu.Sync(websitePath);\n});\n\nTask(\"Default\")\n    .IsDependentOn(\"Publish\");\n\n///////////////////////////////////////////////////////////////////////////////\n// EXECUTION\n///////////////////////////////////////////////////////////////////////////////\n\nRunTarget(target);\n```\n\n----------------------------------------\n\nTITLE: Installing Cake .NET Tool Locally\nDESCRIPTION: Command to install Cake .NET Tool as a local tool using the .NET CLI.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/getting-started/upgrade.md#2025-04-23_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\ndotnet tool install --local Cake.Tool\n```\n\n----------------------------------------\n\nTITLE: Pinning a Module Version in Cake .NET Tool Script - C#\nDESCRIPTION: This snippet demonstrates how to explicitly pin a Cake module to a specific version in a Cake build script using the #module preprocessor directive. It references the nuget package 'Cake.BuildSystems.Module' and pins it to version 3.0.0. This approach requires no additional dependencies other than Cake itself, with #module directives processed by the Cake runner. Inputs are module name and version; output is that an exact version of the module will be loaded, ensuring reproducible builds.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/writing-builds/reproducible-builds/pinning-module-version.md#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n#module nuget:?package=Cake.BuildSystems.Module&version=3.0.0\n```\n\n----------------------------------------\n\nTITLE: Installing a .NET Tool Ignoring Failed Sources using Cake\nDESCRIPTION: This Cake script snippet shows how to install a specific version of the 'Octopus.DotNet.Cli' .NET tool while instructing the underlying dotnet command to ignore failed NuGet sources, provided the package can still be found on an accessible source. This uses the `ignore-failed-sources` parameter.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/writing-builds/preprocessor-directives/tool/dotnet-provider.md#2025-04-23_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n#tool dotnet:?package=Octopus.DotNet.Cli&version=4.41.0&ignore-failed-sources\"\n```\n\n----------------------------------------\n\nTITLE: Executing Command with Explicit ProcessArgumentBuilder in C#\nDESCRIPTION: Shows how to use the Command alias with an explicit ProcessArgumentBuilder. This example runs the 'dpi' tool to analyze NuGet packages.\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2022-10-14-cake-v2.3.0-released.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n#tool dotnet:?package=DPI&version=2022.8.21.54\nCommand(\n    new []{ \"dpi\", \"dpi.exe\"},\n    new ProcessArgumentBuilder()\n        .Append(\"nuget\")\n        .AppendQuoted(Context.Environment.WorkingDirectory.FullPath)\n        .AppendSwitch(\"--output\", \" \", \"TABLE\")\n        .Append(\"analyze\")\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Cache Location Path in Cake .NET Tool\nDESCRIPTION: This option configures the folder used by Cake .NET Tool for caching compiled scripts. It's available since Cake 2.2.0 and defaults to './tools/cache'.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/running-builds/configuration/default-configuration-values.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nCAKE_PATHS_CACHE\n```\n\nLANGUAGE: sh\nCODE:\n```\n[Paths]\nCache=./tools/cache\n```\n\nLANGUAGE: sh\nCODE:\n```\n--paths_cache=./tools/cache\n```\n\n----------------------------------------\n\nTITLE: Installing Prerelease Addin in Cake (C#)\nDESCRIPTION: Example of installing a prerelease version of an addin using the prerelease parameter.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/writing-builds/preprocessor-directives/addin.md#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n#addin nuget:?package=Cake.Foo&prerelease\n```\n\n----------------------------------------\n\nTITLE: Installing Serilog Package with Version Ranges in Cake\nDESCRIPTION: Demonstrates different ways to specify version ranges when installing NuGet packages using Cake's addin syntax. Includes examples of exclusive upper bounds, inclusive ranges, and wildcard versions.\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2021-08-29-cake-v1.2.0-released.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n#addin nuget:?package=Serilog&version=[2.5.0,2.6.0)\n```\n\nLANGUAGE: shell\nCODE:\n```\n#addin nuget:?package=Serilog&version=[2.3.0,2.4.0]\n```\n\nLANGUAGE: shell\nCODE:\n```\n#addin nuget:?package=Serilog&version=[2.2.*,2.3.0)\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Target Support in Cake Scripting\nDESCRIPTION: Shows how to use the new RunTargets method to specify multiple entry points in Cake's dependency graph. It defines tasks with dependencies and demonstrates how to run multiple targets while respecting dependency order.\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2022-11-08-cake-v3.0.0-released.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nTask(\"A\")\n    .Does(() => { /* do stuff */ });\n\nTask(\"B\")\n    .IsDependentOn(\"C\")\n    .Does(() => { /* do stuff */ });\n\nTask(\"C\")\n    .Does(() => { /* do stuff */ });\n\nTask(\"Default\");\n\nRunTargets(Arguments<string>(\"target\", new []{ \"Default\" }));\n```\n\n----------------------------------------\n\nTITLE: Installing Cake Frosting Template with .NET CLI\nDESCRIPTION: This command installs the Cake Frosting template using the .NET CLI. It's a prerequisite for creating a new Cake Frosting project.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/getting-started/setting-up-a-new-frosting-project.md#2025-04-23_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\ndotnet new install Cake.Frosting.Template\n```\n\n----------------------------------------\n\nTITLE: Executing Command with Expected Exit Code in C#\nDESCRIPTION: Demonstrates specifying an expected exit code when using the Command alias. This can be useful for commands that are expected to fail under certain conditions.\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2022-10-14-cake-v2.3.0-released.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nCommand(\n    new []{ \"dotnet\", \"dotnet.exe\"},\n    expectedExitCode: -2147450751\n);\n```\n\n----------------------------------------\n\nTITLE: Specifying NuGet Configuration File Path in Cake .NET Tool\nDESCRIPTION: This option allows specifying a custom path to the NuGet config file, overriding the default file. If not specified, NuGet's default mechanism for resolving the config file is used.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/running-builds/configuration/default-configuration-values.md#2025-04-23_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nCAKE_NUGET_CONFIGFILE\n```\n\nLANGUAGE: sh\nCODE:\n```\n[NuGet]\nConfigFile=./NuGet.config\n```\n\nLANGUAGE: sh\nCODE:\n```\n--nuget_configfile=./NuGet.config\n```\n\n----------------------------------------\n\nTITLE: Loading Addin Dependencies in Cake (C#)\nDESCRIPTION: Example of loading dependencies for an addin using the loaddependencies parameter. Requires Cake to be configured to use in-process NuGet client.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/writing-builds/preprocessor-directives/addin.md#2025-04-23_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n#addin nuget:?package=Cake.Foo&loaddependencies=true\n```\n\n----------------------------------------\n\nTITLE: Installing a Prerelease Tool with Cake and NuGet (C#)\nDESCRIPTION: Shows use of the prerelease flag in the #tool directive, allowing installation of a prerelease version of a given tool. It is required when installing versions with prerelease identifiers (e.g., beta versions), unless an explicit version is provided with a '-beta' suffix. Dependencies remain the standard Cake NuGet tool provider.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/writing-builds/preprocessor-directives/tool/nuget-provider.md#2025-04-23_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n#tool nuget:?package=Cake.Foo&prerelease\n```\n\n----------------------------------------\n\nTITLE: Accessing Typed Context in Cake Teardown Method\nDESCRIPTION: Demonstrates accessing the typed context in the Teardown method, allowing for inspection of the build state after all tasks have completed. This example outputs different messages based on whether assemblies were signed.\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2018-05-31-cake-v0.28.0-released.md#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nTeardown<MyBuildData>((teardownContext, data) =>\n{\n    if (data.AssmbliesSigned)\n    {\n        Information(\"Assemblies were signed\");\n    }\n    else\n    {\n        Information(\"Assemblies were NOT signed\");\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating New Cake Frosting Project\nDESCRIPTION: Command to create a new Cake Frosting project using the installed template. This will set up the project structure and bootstrapping scripts.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/running-builds/runners/cake-frosting.md#2025-04-23_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\ndotnet new cakefrosting\n```\n\n----------------------------------------\n\nTITLE: Adding Tools in Cake Script\nDESCRIPTION: Shows how to add tools to a Cake script using the #tool preprocessor directive, with examples for both basic and full versions.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/integrations/editors/rider/templates.md#2025-04-23_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n#tool \"nuget:?package=Cake.Foo&version=1.2.3\"\n```\n\nLANGUAGE: csharp\nCODE:\n```\n#tool \"nuget:https://www.nuget.org/api/v2?package=Cake.Foo&version=1.2.3\"\n```\n\n----------------------------------------\n\nTITLE: Installing Cake Module via NuGet in Cake Script\nDESCRIPTION: Demonstrates how to use the new #module preprocessor directive to download and install a Cake module from NuGet. This allows extending Cake's functionality directly from the build script.\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2017-12-29-cake-v0.24.0-released.md#2025-04-23_snippet_0\n\nLANGUAGE: cake\nCODE:\n```\n#module nuget:?package=Cake.UrlLoadDirective.Module&version=1.0.2\n```\n\n----------------------------------------\n\nTITLE: Configuring Script Cache Location in Cake (Environment Variable)\nDESCRIPTION: Sets an environment variable to specify the location for caching compiled scripts in Cake v2.2.0.\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2022-04-15-cake-v2.2.0-released.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nCAKE_PATHS_CACHE=./tools/cache\n```\n\n----------------------------------------\n\nTITLE: Inserting Cake Addin Directive in Visual Studio Code\nDESCRIPTION: This snippet inserts a basic Cake addin pre-processor directive. The package name and version can be customized.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/integrations/editors/vscode/snippets.md#2025-04-23_snippet_0\n\nLANGUAGE: cake\nCODE:\n```\n#addin \"nuget:?package=Cake.Foo&version=1.2.3\"\n```\n\n----------------------------------------\n\nTITLE: Exception Handling with Custom Exit Code in C#\nDESCRIPTION: Example showing how to throw a CakeException with a custom exit code that will be propagated to the build process exit code\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2021-10-07-cake-v1.3.0-released.md#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nthrow new CakeException(exitCode: 42);\n```\n\n----------------------------------------\n\nTITLE: Installing Cake 2.0.0 RC 1 as .NET Tool\nDESCRIPTION: Commands to install Cake 2.0.0 RC 1 as a local .NET tool using a tool manifest. This allows testing the new version without interfering with other Cake projects.\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2021-11-07-cake-v2.0.0-rc0001-released.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet new tool-manifest\ndotnet tool install Cake.Tool --version 2.0.0-rc0001\n```\n\n----------------------------------------\n\nTITLE: Inserting Full Cake Tool Directive in Visual Studio Code\nDESCRIPTION: This snippet inserts a more complete Cake tool pre-processor directive. The source, package name, and version can be customized.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/integrations/editors/vscode/snippets.md#2025-04-23_snippet_7\n\nLANGUAGE: cake\nCODE:\n```\n#tool \"nuget:https://www.nuget.org/api/v2?package=Cake.Foo&version=1.2.3\"\n```\n\n----------------------------------------\n\nTITLE: Bootstrapping Cake Modules from Command Line\nDESCRIPTION: Shows how to bootstrap Cake modules before executing the main build script. The --bootstrap argument is used to download and install modules, which is necessary since modules can modify Cake's internals.\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2017-12-29-cake-v0.24.0-released.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./cake.exe build.cake --bootstrap\n./cake.exe build.cake\n```\n\n----------------------------------------\n\nTITLE: Configuring Script Cache Location in Cake (Config File)\nDESCRIPTION: Adds a configuration entry to specify the location for caching compiled scripts in Cake v2.2.0.\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2022-04-15-cake-v2.2.0-released.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n[Paths]\nCache=./tools/cache\n```\n\n----------------------------------------\n\nTITLE: Installing a .NET Tool Globally using Cake\nDESCRIPTION: This Cake script snippet shows how to install a specific version of the 'Octopus.DotNet.Cli' .NET tool globally on the machine, rather than just within the Cake tools directory. This is achieved by adding the `global` parameter to the `#tool` directive.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/writing-builds/preprocessor-directives/tool/dotnet-provider.md#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n#tool dotnet:?package=Octopus.DotNet.Cli&version=4.41.0&global\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions Workflow for Cake Dependency Checking\nDESCRIPTION: GitHub Actions workflow configuration that runs daily checks for outdated references in Cake build scripts. The workflow uses the dependabot-cake-action to scan *.cake files for outdated #tool, #addin and #module references from NuGet packages.\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2020-10-29-dependabot-cake-action.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: check and update cake references\non:\n  schedule:\n    # run everyday at 06:00\n    - cron:  '0 6 * * *'\n\njobs:\n  dependabot-cake:\n    runs-on: ubuntu-latest # linux, because this is a docker-action\n    steps:\n      - name: check/update cake dependencies\n        uses: nils-org/dependabot-cake-action@v1\n```\n\n----------------------------------------\n\nTITLE: Enabling Script Cache in Cake (Command Line Argument)\nDESCRIPTION: Passes a command line argument to enable the new opt-in script compilation cache feature in Cake v2.2.0.\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2022-04-15-cake-v2.2.0-released.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n--settings_enablescriptcache=true\n```\n\n----------------------------------------\n\nTITLE: Installing Cake .NET Tool\nDESCRIPTION: Command to install Cake as a local tool using the dotnet tool command. It specifies the package name and version to install.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/running-builds/runners/dotnet-tool.md#2025-04-23_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\ndotnet tool install Cake.Tool --version <?! Meta CakeLatestReleaseName /?>\n```\n\n----------------------------------------\n\nTITLE: Inserting Cake Tool Directive in Visual Studio Code\nDESCRIPTION: This snippet inserts a basic Cake tool pre-processor directive. The package name and version can be customized.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/integrations/editors/vscode/snippets.md#2025-04-23_snippet_6\n\nLANGUAGE: cake\nCODE:\n```\n#tool \"nuget:?package=Cake.Foo&version=1.2.3\"\n```\n\n----------------------------------------\n\nTITLE: Loading Local Scripts with Explicit Scheme in Cake\nDESCRIPTION: Shows how to load a local script file using the explicit 'local' scheme, specifying the path to the 'utilities.cake' file.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/writing-builds/preprocessor-directives/load.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n#l \"local:?path=scripts/utilities.cake\"\nor\n#load \"local:?path=scripts/utilities.cake\"\n```\n\n----------------------------------------\n\nTITLE: Loading Scripts with Include and Exclude Options in Cake\nDESCRIPTION: Demonstrates how to load scripts from NuGet with options to include or exclude specific files using glob patterns.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/writing-builds/preprocessor-directives/load.md#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n#load nuget:?package=utilities.cake&include=/**/NoFoo.cake\nor\n#load nuget:?package=utilities.cake&exclude=/**/Foo.cake\n```\n\n----------------------------------------\n\nTITLE: Installing Tools via NuGetModule and UseTool in Frosting 0.38.x (C#)\nDESCRIPTION: Demonstrates the process for installing external tools (like NUnit.ConsoleRunner) in Cake Frosting 0.38.x. This involved manually registering the `NuGetModule` within the `Configure` method of `IFrostingStartup` and then using the `UseTool` method on the `ICakeServices` instance, typically providing a NuGet package URI. This is simplified in Frosting 1.0.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/getting-started/upgrade.md#2025-04-23_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n```csharp\npublic class Program : IFrostingStartup\n{\n    public static int Main(string[] args)\n    {\n        // Create the host.\n        var host =\n            new CakeHostBuilder()\n                .WithArguments(args)\n                .UseStartup<Program>()\n                .Build();\n\n        // Run the host.\n        return host.Run();\n    }\n\n    public void Configure(ICakeServices services)\n    {\n        // Register the NuGet module.\n        var module = new NuGetModule(new CakeConfiguration(new Dictionary<string, string>()));\n        module.Register(services);\n\n        // Register tools.\n        services.UseTool(new Uri(\"nuget:?package=NUnit.ConsoleRunner&version=3.11.1\"));\n    }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Listing All Visual Studio Installations\nDESCRIPTION: Shows how to find all Visual Studio installations on the system\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2017-03-27-vswhere-and-visual-studio-2017-support.md#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n#tool nuget:?package=vswhere\n\nDirectoryPathCollection allInstalled  = VSWhereAll();\n\nforeach(var install in allInstalled)\n{\n    // Find the installation you need\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Package Management with URI Format in Cake Build Tool\nDESCRIPTION: Demonstrates the new URI-based package format for #tool and #addin directives in Cake v0.8.0. The format allows specifying package source, version, and prerelease flags. Supports different package managers through a URI scheme format.\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2016-01-18-cake-v0.8.0-released.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// Syntax of new URI package format:\n// packagemanager:[scheme:[//[user:password@]host[:port]][/]]?package=id[&query]\n\n// Examples of how to use the tool directive.\n#tool nuget:?package=ILMerge&version=2.14.1203\n\n// Example of how to use the addin directive.\n#addin nuget:http://mysource.org/?package=Cake.Foo&version=1.2.3&prerelease\n```\n\n----------------------------------------\n\nTITLE: Running Cake script with .NET Tool\nDESCRIPTION: Command to run a Cake script using the .NET Tool runner. It allows specifying a script file and additional switches.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/running-builds/runners/dotnet-tool.md#2025-04-23_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\ndotnet cake [script] [switches]\n```\n\n----------------------------------------\n\nTITLE: Configuring Single Cake NuGet Source in Config File (Shell/Ini)\nDESCRIPTION: Configures a single NuGet package source URL for Cake within the `cake.config` file under the `[Nuget]` section. This overrides the default nuget.org source.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/running-builds/configuration/default-configuration-values.md#2025-04-23_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\n[Nuget]\nSource=http://myfeed/nuget/\n```\n\n----------------------------------------\n\nTITLE: Loading Scripts from NuGet in Cake\nDESCRIPTION: Illustrates how to load a script package named 'utilities.cake' from NuGet using the 'nuget' scheme.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/writing-builds/preprocessor-directives/load.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n#l \"nuget:?package=utilities.cake\"\nor\n#load \"nuget:?package=utilities.cake\"\n```\n\n----------------------------------------\n\nTITLE: Updating Cake Frosting Lifetime Implementation\nDESCRIPTION: Example of how to update the FrostingLifetime implementation in Cake Frosting to include the new ISetupContext parameter in the Setup method.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/getting-started/upgrade.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class BuildLifetime : FrostingLifetime<BuildContext>\n{\n    public override void Setup(BuildContext context, ISetupContext info)\n    {}\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Latest Installation with Specific Component\nDESCRIPTION: Demonstrates how to find the latest Visual Studio installation that includes a specific workload or component\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2017-03-27-vswhere-and-visual-studio-2017-support.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n#tool nuget:?package=vswhere\n\nDirectoryPath vsLatest  = VSWhereLatest(new VSWhereLatestSettings { Requires = \"Microsoft.VisualStudio.Workload.ManagedDesktop\"});\nFilePath msBuildPathX64 = (vsLatest==null)\n                            ? null\n                            : vsLatest.CombineWithFilePath(\"./MSBuild/15.0/Bin/amd64/MSBuild.exe\");\n\nMSBuild(\"./src/Example.sln\", new MSBuildSettings {\n    ToolPath = msBuildPathX64\n});\n```\n\n----------------------------------------\n\nTITLE: Using VSWhere to Locate MSBuild with Cake\nDESCRIPTION: Shows how to use VSWhere to find the latest Visual Studio installation and configure MSBuild settings with the correct path. Includes null checking and specific architecture path resolution.\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2017-03-24-cake-v0.19.1-released.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n#tool nuget:?package=vswhere\nDirectoryPath vsLatest  = VSWhereLatest();\nFilePath msBuildPathX64 = (vsLatest==null)\n                            ? null\n                            : vsLatest.CombineWithFilePath(\"./MSBuild/15.0/Bin/amd64/MSBuild.exe\");\n\nMSBuild(\"./src/Example.sln\", new MSBuildSettings {\n    ToolPath = msBuildPathX64\n    });\n```\n\n----------------------------------------\n\nTITLE: Creating and Running CakeHost in Cake.Frosting 1.0 (C#)\nDESCRIPTION: This snippet shows the new way to create and run a CakeHost directly in Cake.Frosting 1.0. It demonstrates the simplified syntax for configuring and executing the Cake host.\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2020-12-20-cake-v1.0.0-rc0002-released.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// Create and run the host.\nreturn\n    new CakeHost()\n        .UseContext<BuildContext>()\n        .Run(args);\n```\n\n----------------------------------------\n\nTITLE: Loading External Cake Scripts\nDESCRIPTION: Demonstrates how to load external Cake scripts using the #load preprocessor directive. Includes examples for local files and NuGet packages.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/integrations/editors/rider/templates.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n#load \"scripts/utilities.cake\"\n```\n\nLANGUAGE: csharp\nCODE:\n```\n#load \"nuget:?package=Cake.Foo&version=1.2.3\"\n```\n\nLANGUAGE: csharp\nCODE:\n```\n#load \"nuget:https://www.nuget.org/api/v2?package=Cake.Foo&version=1.2.3\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Cake NuGet Sources in Config File (Shell/Ini)\nDESCRIPTION: Configures multiple NuGet package source URLs for Cake within the `cake.config` file under the `[Nuget]` section. Sources are separated by a semicolon.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/running-builds/configuration/default-configuration-values.md#2025-04-23_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\n[Nuget]\nSource=http://myfeed/nuget/;http://myotherfeed/nuget\n```\n\n----------------------------------------\n\nTITLE: Reporting Issues to TFS Pull Requests\nDESCRIPTION: Task implementation for posting analysis issues as comments to Team Foundation Server pull requests.\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2018-06-10-cake-issues.md#2025-04-23_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n#addin \"Cake.Issues.PullRequests\"\n#addin \"Cake.Issues.PullRequests.Tfs\"\n\nTask(\"ReportIssuesToPullRequest\").Does(() =>\n{\n    ReportIssuesToPullRequest(\n        new List<IIssueProvider>\n        {\n            MsBuildIssuesFromFilePath(\n                msBuildLog,\n                MsBuildXmlFileLoggerFormat),\n            InspectCodeIssuesFromFilePath(\n                inspectCodeLog)\n        },\n        TfsPullRequests(\n            new Uri(\"http://myserver:8080/tfs/defaultcollection/myproject/_git/myrepository\"),\n            \"refs/heads/feature/myfeature\",\n            TfsAuthenticationNtlm()),\n        repoRootFolder);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating and Running CakeHost in Cake.Frosting 0.38.x (C#)\nDESCRIPTION: This snippet demonstrates how to create and run a CakeHost using CakeHostBuilder in Cake.Frosting version 0.38.x. It shows the previous method of configuring and executing the Cake host.\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2020-12-20-cake-v1.0.0-rc0002-released.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// Create the host.\nvar host =\n    new CakeHostBuilder()\n       .WithArguments(args)\n       .UseStartup<Program>()\n       .Build();\n\n// Run the host.\nreturn host.Run();\n```\n\n----------------------------------------\n\nTITLE: Finding Build Tools with Specific Workload\nDESCRIPTION: Demonstrates finding Build Tools installation with specific workload requirements\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2017-03-27-vswhere-and-visual-studio-2017-support.md#2025-04-23_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n#tool nuget:?package=vswhere\n\nDirectoryPath buildToolsInstallation  = VSWhereProducts(\"Microsoft.VisualStudio.Product.BuildTools\",\n                                            new VSWhereLatestSettings { Requires = \"Microsoft.VisualStudio.Workload.ManagedDesktop\"}).FirstOrDefault();\n\nif(buildToolsInstallation != null)\n{\n    MSBuild(\"./src/Example.sln\", new MSBuildSettings {\n        ToolPath = buildToolsInstallation.CombineWithFilePath(\"./MSBuild/15.0/Bin/amd64/MSBuild.exe\")\n    });\n}\nelse\n{\n    Information(\"Could not find suitable build environment.\");\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Build and InspectCode Tasks\nDESCRIPTION: Setup of MSBuild and JetBrains InspectCode tasks to generate log files containing analysis results.\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2018-06-10-cake-issues.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar repoRootFolder = MakeAbsolute(Directory(\"./\"));\nvar msBuildLog = repoRootFolder.CombineWithFilePath(\"msbuild.log\");\nvar inspectCodeLog = repoRootFolder.CombineWithFilePath(\"inspectCode.log\");\n\nTask(\"Build\")\n    .Does(() =>\n{\n    var settings = new MSBuildSettings()\n    .WithTarget(\"Rebuild\")\n    .WithLogger(\n        Context.Tools.Resolve(\"MSBuild.ExtensionPack.Loggers.dll\").FullPath,\n        \"XmlFileLogger\",\n        string.Format(\n            \"logfile=\\\"{0}\\\";verbosity=Detailed;encoding=UTF-8\",\n            msBuildLog)\n    );\n\n    MSBuild(repoRootFolder.Combine(\"src\").CombineWithFilePath(\"MySolution.sln\"), settings);\n});\n\nTask(\"Run-InspectCode\")\n    .Does(() =>\n{\n    var settings = new InspectCodeSettings() {\n        OutputFile = inspectCodeLog\n    };\n\n    InspectCode(repoRootFolder.Combine(\"src\").CombineWithFilePath(\"MySolution.sln\"), settings);\n});\n```\n\n----------------------------------------\n\nTITLE: Locating Specific Visual Studio Product\nDESCRIPTION: Shows how to find a specific Visual Studio product installation\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2017-03-27-vswhere-and-visual-studio-2017-support.md#2025-04-23_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n#tool nuget:?package=vswhere\n\nDirectoryPath buildToolsInstallation  = VSWhereProducts(\"Microsoft.VisualStudio.Product.BuildTools\").FirstOrDefault();\n\nif(buildToolsInstallation != null)\n{\n    MSBuild(\"./src/Example.sln\", new MSBuildSettings {\n        ToolPath = buildToolsInstallation.CombineWithFilePath(\"./MSBuild/15.0/Bin/amd64/MSBuild.exe\")\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple NuGet Sources in Cake\nDESCRIPTION: Example of how to configure multiple NuGet sources in the cake.config file by separating sources with semicolons. This configuration allows Cake to download packages from multiple repositories.\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2018-04-19-cake-v0.27.0-released.md#2025-04-23_snippet_0\n\nLANGUAGE: markup\nCODE:\n```\n[Nuget]\nSource=https://api.nuget.org/v3/index.json;https://www.myget.org/F/cake/api/v3/index.json\n```\n\n----------------------------------------\n\nTITLE: Parsing Cake Config in Bash Bootstrapper\nDESCRIPTION: Bash script extension that uses bash-ini-parser to read the cake.config file and updates the TOOLS_DIR variable. Uses Python to resolve and normalize absolute paths.\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2020-12-08-config-bootstrap.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nif [ -f \"cake.config\" ]; then\n\n  cfg_parser cake.config\n  cfg_section_Paths\n\n  if [ ! -z ${Tools+x} ]; then\n\n    # Make absolute and normalise\n    TOOLS_DIR=$( python -c \"import os,sys; print os.path.realpath(sys.argv[1])\" $Tools)\n\n    echo \"Parsed cake.config. TOOLS_DIR updated to $TOOLS_DIR\"\n  fi\nfi\n```\n\n----------------------------------------\n\nTITLE: Adding Cake Modules in Cake Script\nDESCRIPTION: Shows how to add Cake modules using the #module preprocessor directive, with examples for both basic and full versions.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/integrations/editors/rider/templates.md#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n#module \"nuget:?package=Cake.Foo.module&version=1.2.3\"\n```\n\nLANGUAGE: csharp\nCODE:\n```\n#module \"nuget:https://www.nuget.org/api/v2?package=Cake.Foo.module&version=1.2.3\"\n```\n\n----------------------------------------\n\nTITLE: Using Break Directive in Cake Build Script\nDESCRIPTION: Demonstrates how to use the #break preprocessor directive in a Cake build script to create a debugging breakpoint. At runtime, this directive is replaced by System.Diagnostics.Debugger.Break();\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2016-05-26-debug-cake-file.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n#break\n```\n\n----------------------------------------\n\nTITLE: Documenting C# Classes in Cake\nDESCRIPTION: Demonstrates how to document a C# static class using the <summary> XML tag to describe its purpose and the [CakeAliasCategory] attribute to categorize the functionality within the Cake documentation system. This example shows the documentation for a class containing GitReleaseManager functionality.\nSOURCE: https://github.com/cake-build/website/blob/master/input/community/contributing/documentation.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n/// <summary>\n/// Contains functionality for working with GitReleaseManager.\n/// </summary>\n[CakeAliasCategory(\"GitReleaseManager\")]\npublic static class GitReleaseManagerAliases\n{...}\n```\n\n----------------------------------------\n\nTITLE: Installing a .NET Tool for a Specific Framework using Cake\nDESCRIPTION: This Cake script snippet demonstrates installing a specific version of the 'Octopus.DotNet.Cli' .NET tool for a particular target framework ('net472') using the `framework` parameter. By default, the SDK attempts to choose the most appropriate framework.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/writing-builds/preprocessor-directives/tool/dotnet-provider.md#2025-04-23_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n#tool dotnet:?package=Octopus.DotNet.Cli&version=4.41.0&framework=net472\n```\n\n----------------------------------------\n\nTITLE: Running Cake.CoreCLR for Debugging in Terminal\nDESCRIPTION: This bash command runs the Cake.CoreCLR executable with the debug flag, allowing for attachment of the Visual Studio Code debugger to the process.\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2016-09-27-debug-cake-vscode.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tools/Cake.CoreCLR/Cake.dll build.cake --debug\n```\n\n----------------------------------------\n\nTITLE: Specifying Cake Configuration via Command Line in PowerShell\nDESCRIPTION: This snippet shows how to pass a configuration value directly to Cake using a command line argument. This method overrides both environment variables and configuration file settings.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/running-builds/configuration/set-configuration-values.md#2025-04-23_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n--nuget_source=http://mycustomurl\n```\n\n----------------------------------------\n\nTITLE: Parsing Cake Script Arguments in Visual Studio Code\nDESCRIPTION: This snippet provides code for basic input argument parsing in Cake scripts. The variable name, argument name, and default value can be customized.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/integrations/editors/vscode/snippets.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar target = Argument(\"target\", \"Default\");\n```\n\n----------------------------------------\n\nTITLE: Referencing Assemblies in Cake Script\nDESCRIPTION: Demonstrates how to reference external assemblies in a Cake script using the #reference preprocessor directive.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/integrations/editors/rider/templates.md#2025-04-23_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n#reference \"bin/myassembly.dll\"\n```\n\n----------------------------------------\n\nTITLE: Configuring launch.json for Cake Debugging in VS Code\nDESCRIPTION: This JSON configuration sets up Visual Studio Code to debug Cake files using the .NET Core debugger. It specifies the Cake.CoreCLR executable and necessary arguments.\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2016-09-27-debug-cake-vscode.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n        \"version\": \"0.2.0\",\n        \"configurations\": [\n            {\n                \"name\": \".NET Core Launch (console)\",\n                \"type\": \"coreclr\",\n                \"request\": \"launch\",\n                \"program\": \"${workspaceRoot}/tools/Cake.CoreCLR/Cake.dll\",\n                \"args\": [\n                    \"${workspaceRoot}/build.cake\",\n                    \"--debug\",\n                    \"--verbosity=diagnostic\"\n                ],\n                \"cwd\": \"${workspaceRoot}\",\n                \"stopAtEntry\": true,\n                \"externalConsole\": false\n            }\n        ]\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling NuGet Dependency Loading in Cake\nDESCRIPTION: Command to enable the in-process NuGet client with dependency loading, which allows Cake to load assemblies from NuGet dependencies. This can be configured via command line parameters.\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2017-09-13-cake-v0.22.0-released.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nCake.exe --nuget_useinprocessclient=true --nuget_loaddependencies=true\n```\n\n----------------------------------------\n\nTITLE: Including and Excluding Files in Cake Addin (C#)\nDESCRIPTION: Examples of using the include and exclude parameters to specify which files should be included or excluded when installing an addin.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/writing-builds/preprocessor-directives/addin.md#2025-04-23_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n#addin nuget:?package=Cake.Foo&include=/**/NoFoo.dll\n```\n\nLANGUAGE: csharp\nCODE:\n```\n#tool nuget:?package=Cake.Foo&exclude=/**/Foo.dll\n```\n\n----------------------------------------\n\nTITLE: Creating Cake Configuration File in Shell\nDESCRIPTION: This snippet shows how to create a cake.config file to specify a custom NuGet source. The configuration file should be located in the same directory as the Cake script.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/running-builds/configuration/set-configuration-values.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n; The configuration file for Cake.\n\n[Nuget]\nSource=https://mycustomurl\n```\n\n----------------------------------------\n\nTITLE: Setting Cake Tools Path via Command-Line Argument (Shell)\nDESCRIPTION: Specifies the tools directory for the current Cake execution using the `--paths_tools` command-line argument. This example sets it to the default value './tools'.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/running-builds/configuration/default-configuration-values.md#2025-04-23_snippet_21\n\nLANGUAGE: sh\nCODE:\n```\n--paths_tools=./tools\n```\n\n----------------------------------------\n\nTITLE: Using Cake via Global .NET CLI Tool\nDESCRIPTION: Running a Cake script with the globally installed Cake tool using the .NET CLI command.\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2018-08-22-cake-v0.30.0-released.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndotnet cake build.cake\n```\n\n----------------------------------------\n\nTITLE: Adding Attach Configuration to launch.json for Cake Debugging\nDESCRIPTION: This JSON configuration adds an option to attach the debugger to a running Cake process in Visual Studio Code. It allows for debugging by attaching to an externally started Cake process.\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2016-09-27-debug-cake-vscode.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n        \"name\": \".NET Core Attach\",\n        \"type\": \"coreclr\",\n        \"request\": \"attach\",\n        \"processId\": \"${command.pickProcess}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Package Icon in .NET Project\nDESCRIPTION: This XML snippet demonstrates how to specify a package icon in a .NET project file. It sets the PackageIcon property and includes the icon file in the project, ensuring it's embedded in the NuGet package.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/extending/addins/best-practices.md#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<PackageIcon>PackageIcon.png</PackageIcon>\n```\n\nLANGUAGE: xml\nCODE:\n```\n<ItemGroup>\n    <None Include=\"..\\PackageIcon.png\" Pack=\"true\" PackagePath=\"\" />\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Installing a .NET Tool with a Custom NuGet Config using Cake\nDESCRIPTION: This Cake script snippet demonstrates installing a specific version of the 'Octopus.DotNet.Cli' .NET tool while specifying a custom NuGet configuration file using the `configfile` parameter. This is useful for scenarios requiring authentication to private feeds.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/writing-builds/preprocessor-directives/tool/dotnet-provider.md#2025-04-23_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n#tool dotnet:?package=Octopus.DotNet.Cli&version=4.41.0&configfile=\"../../NuGet.config\"\n```\n\n----------------------------------------\n\nTITLE: Running Cake Frosting Build Script on Windows\nDESCRIPTION: This command runs the Cake Frosting build script on Windows using PowerShell.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/getting-started/setting-up-a-new-frosting-project.md#2025-04-23_snippet_10\n\nLANGUAGE: powershell\nCODE:\n```\n./build.ps1\n```\n\n----------------------------------------\n\nTITLE: Executing Cake.Tool with .NET Core CLI\nDESCRIPTION: Command to run a Cake script named 'build.cake' using Cake.Tool via the .NET Core CLI.\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2019-09-28-cake-v0.35.0-released.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndotnet cake build.cake\n```\n\n----------------------------------------\n\nTITLE: Controlling NuGet Dependency Loading with Addin Directives\nDESCRIPTION: Examples of using the addin directive with the loaddependencies parameter to control whether NuGet dependencies should be loaded for specific packages. This allows for fine-grained control over dependency loading behavior.\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2017-09-13-cake-v0.22.0-released.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n#addin nuget:?package=foo&loaddependencies=true\n#addin nuget:?package=foo.bar&loaddependencies=false\n```\n\n----------------------------------------\n\nTITLE: Installing Cake as Global .NET CLI Tool\nDESCRIPTION: Command to install Cake version 0.30.0 as a global .NET CLI tool. Requires .NET Core SDK 2.1.400 or newer.\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2018-08-22-cake-v0.30.0-released.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g Cake.Tool --version 0.30.0\n```\n\n----------------------------------------\n\nTITLE: Configuring Private Assets for Cake References in .NET Project\nDESCRIPTION: This XML snippet shows how to mark Cake.Core and Cake.Common references as private assets in a .NET project file. This prevents these dependencies from being included in the NuGet package, as they are implicitly added by the Cake engine.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/extending/addins/best-practices.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<ItemGroup>\n  <PackageReference Include=\"Cake.Core\" Version=\"1.0.0\" PrivateAssets=\"All\" />\n  <PackageReference Include=\"Cake.Common\" Version=\"1.0.0\" PrivateAssets=\"All\" />\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Enabling Advanced Console Output via Command-Line Argument (Shell)\nDESCRIPTION: Enables Spectre.Console-based rendering for the current Cake execution by passing the `--settings_usespectresonsolesorsonsolesutput=true` argument (requires Cake 3.0.0+). Note: The argument name appears to have a typo in the source.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/running-builds/configuration/default-configuration-values.md#2025-04-23_snippet_24\n\nLANGUAGE: sh\nCODE:\n```\n--settings_usespectresonsolesorsonsolesutput=true\n```\n\n----------------------------------------\n\nTITLE: Running Cake Frosting Build Script on Linux/MacOS\nDESCRIPTION: This command runs the Cake Frosting build script on Linux or MacOS using Bash.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/getting-started/setting-up-a-new-frosting-project.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nbuild.sh\n```\n\n----------------------------------------\n\nTITLE: Installing Cake 2.0.0-rc0002 as Local .NET Tool\nDESCRIPTION: Commands to install Cake 2.0.0-rc0002 as a local .NET tool using a tool manifest. This approach isolates the installation to a specific folder to safely test the RC version.\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2021-11-26-cake-v2.0.0-rc0002-released.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet new tool-manifest\ndotnet tool install Cake.Tool --version 2.0.0-rc0002\n```\n\n----------------------------------------\n\nTITLE: Running Cake Frosting Build Script (Windows)\nDESCRIPTION: PowerShell command to execute the Cake Frosting build script on Windows systems.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/running-builds/runners/cake-frosting.md#2025-04-23_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\n./build.ps1\n```\n\n----------------------------------------\n\nTITLE: Creating a .NET Tool manifest\nDESCRIPTION: Command to create a new tool manifest for .NET Tool, which is required for setting up Cake .NET Tool in a repository.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/running-builds/runners/dotnet-tool.md#2025-04-23_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\ndotnet new tool-manifest\n```\n\n----------------------------------------\n\nTITLE: Referencing Cake.Core and Cake.Common as Private Assets in XML\nDESCRIPTION: This XML snippet shows how to reference Cake.Core and Cake.Common as private assets in a project file. This is important to avoid including these dependencies in the NuGet package, as they are implicitly added by the Cake engine.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/extending/modules/best-practices.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<ItemGroup>\n  <PackageReference Include=\"Cake.Core\" Version=\"1.0.0\" PrivateAssets=\"All\" />\n  <PackageReference Include=\"Cake.Common\" Version=\"1.0.0\" PrivateAssets=\"All\" />\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Equivalent Task Definition with Traditional Dependencies\nDESCRIPTION: Shows the equivalent task definition using traditional IsDependentOn syntax, demonstrating how IsDependeeOf works behind the scenes.\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2017-10-15-cake-v0.23.0-released.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nTask(\"A\");\nTask(\"B\").IsDependentOn(\"A\");\n\nRunTarget(\"B\");\n```\n\n----------------------------------------\n\nTITLE: Including Only Specific Files from a NuGet-Package Tool (C#)\nDESCRIPTION: This example illustrates how to use the 'include' query parameter in the #tool directive to limit tool installation to only certain files matching the provided glob pattern within the NuGet package. Helpful for reducing package bloat or targeting tool variants in complex packages. No extra dependencies are needed, prerequisites are standard Cake usage.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/writing-builds/preprocessor-directives/tool/nuget-provider.md#2025-04-23_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n#tool nuget:?package=Cake.Foo&include=/**/NoFoo.exe\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Substitution in Cake Configuration File\nDESCRIPTION: This example demonstrates how to use environment variable substitution in the cake.config file. The %NUGET_REPOSITORY% placeholder will be replaced with the value of the NUGET_REPOSITORY environment variable when Cake reads the configuration file.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/running-builds/configuration/set-configuration-values.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nSource=https://%NUGET_REPOSITORY%/api/v2\n```\n\n----------------------------------------\n\nTITLE: Running Cake 2.0.0 RC 1 Build Script\nDESCRIPTION: Command to run a Cake build script using the locally installed Cake 2.0.0 RC 1 .NET tool.\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2021-11-07-cake-v2.0.0-rc0001-released.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndotnet cake build.cake\n```\n\n----------------------------------------\n\nTITLE: Using Implicit Module Bootstrapping Directive in Cake C#\nDESCRIPTION: Illustrates the `#module` directive used in Cake C# scripts (`.cake` files) for implicit bootstrapping, introduced in v1.0. This example specifies the `Cake.DotNetTool.Module` NuGet package with version `0.4.0`. Cake will automatically download and initialize this module without requiring a separate bootstrap execution.\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2021-02-07-cake-v1.0.0-released.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n```c#\n#module nuget:?package=Cake.DotNetTool.Module&version=0.4.0\n```\n```\n\n----------------------------------------\n\nTITLE: Downloading Cake .NET Tool bootstrapper for Windows\nDESCRIPTION: PowerShell command to download the Cake .NET Tool bootstrapper script for Windows operating systems.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/running-builds/runners/dotnet-tool.md#2025-04-23_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nInvoke-WebRequest https://cakebuild.net/download/bootstrapper/dotnet-tool/windows -OutFile build.ps1\n```\n\n----------------------------------------\n\nTITLE: Configuring Paket Dependencies\nDESCRIPTION: Example of a basic paket.dependencies file showing how to specify NuGet package dependencies. Shows configuration for installing xUnit package from NuGet source.\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2017-01-25-cake-paket.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# paket.dependencies\n\nsource https://nuget.org/api/v2\nnuget xunit # Required in order to run the unit tests.\n```\n\n----------------------------------------\n\nTITLE: Installing VSWhere via NuGet\nDESCRIPTION: Basic setup to install VSWhere tool using Cake's tool pre-processor directive\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2017-03-27-vswhere-and-visual-studio-2017-support.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n#tool nuget:?package=vswhere\n```\n\n----------------------------------------\n\nTITLE: Configuring In-Process NuGet Installation in Cake .NET Tool\nDESCRIPTION: This option allows opting out of the default In-Process NuGet Client and using NuGet.exe instead. It's available since Cake 0.25.0 and defaults to true.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/running-builds/configuration/default-configuration-values.md#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nCAKE_NUGET_USEINPROCESSCLIENT\n```\n\nLANGUAGE: sh\nCODE:\n```\n[NuGet]\nUseInProcessClient=false\n```\n\nLANGUAGE: sh\nCODE:\n```\n--nuget_useinprocessclient=false\n```\n\n----------------------------------------\n\nTITLE: Installing Cake .NET Tool - Global Install\nDESCRIPTION: Command to install Cake .NET tool as a global tool for the user using the .NET CLI\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2021-03-06-cake-v1.1.0-released.md#2025-04-23_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\ndotnet tool install --global Cake.Tool\n```\n\n----------------------------------------\n\nTITLE: Initializing CakeHost directly in Cake Frosting 1.0 (C#)\nDESCRIPTION: Demonstrates the simplified way to create and run a Cake Frosting build host in version 1.0. The `CakeHostBuilder` is removed, and the `CakeHost` class is instantiated and configured directly using methods like `UseContext<T>` before calling `Run(args)`.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/getting-started/upgrade.md#2025-04-23_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n```csharp\n// Create and run the host.\nreturn\n    new CakeHost()\n        .UseContext<BuildContext>()\n        .Run(args);\n```\n```\n\n----------------------------------------\n\nTITLE: Running Cake Build Script with .NET Tool\nDESCRIPTION: Command to execute a Cake build script using the locally installed .NET tool version of Cake.\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2021-11-26-cake-v2.0.0-rc0002-released.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndotnet cake build.cake\n```\n\n----------------------------------------\n\nTITLE: Initializing CakeHost in Cake.Frosting 0.38.x\nDESCRIPTION: Example of creating and running a CakeHost instance in Cake.Frosting version 0.38.x. This snippet demonstrates the older approach using CakeHostBuilder.\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2021-01-29-cake-v1.0.0-rc0003-released.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// Create the host.\nvar host =\n    new CakeHostBuilder()\n        .WithArguments(args)\n        .UseStartup<Program>()\n        .UseTool(new Uri(\"nuget:?package=ReportGenerator&version=4.8.1\"))\n        .Build();\n\n// Run the host.\nreturn host.Run();\n```\n\n----------------------------------------\n\nTITLE: Installing VSWhere via NuGet\nDESCRIPTION: Demonstrates how to install the VSWhere tool using Cake's tool pre-processor directive to fetch it from NuGet.\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2017-03-24-cake-v0.19.1-released.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n#tool nuget:?package=vswhere\n```\n\n----------------------------------------\n\nTITLE: Using Reference Directive in Cake Build Scripts (C#)\nDESCRIPTION: Demonstrates how to use the reference directive to load external assemblies in Cake build scripts. The directive accepts one parameter: the path to the DLL to load. Two syntax variations are shown.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/writing-builds/preprocessor-directives/reference.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n#r \"bin/myassembly.dll\"\nor\n#reference \"bin/myassembly.dll\"\n```\n\n----------------------------------------\n\nTITLE: Setting Cake NuGet Source via Environment Variable (Shell)\nDESCRIPTION: Sets the NuGet package source URL(s) for Cake using the `CAKE_NUGET_SOURCE` environment variable. This allows specifying custom or internal feeds, or multiple feeds separated by semicolons. It's used when Cake needs to download addins or tools.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/running-builds/configuration/default-configuration-values.md#2025-04-23_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nCAKE_NUGET_SOURCE\n```\n\n----------------------------------------\n\nTITLE: Pinning Addin Version with PackageReference in Cake Frosting - XML\nDESCRIPTION: This snippet demonstrates how to pin a Cake addin version by adding a `<PackageReference>` element within your project file when using Cake Frosting. Specifying both the package name and version ensures that project builds use a consistent addin version. The snippet requires a project using the new SDK-style .csproj format and NuGet as the package manager.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/writing-builds/reproducible-builds/pinning-addin-version.md#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\\\"Cake.Foo\\\" Version=\\\"1.2.3\\\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Tools via InstallTool in Frosting 1.0 (C#)\nDESCRIPTION: Shows the improved method for installing tools in Cake Frosting 1.0. Manual registration of the NuGet module is no longer required. The `InstallTool` method is called directly on the `CakeHost` instance, taking the tool's URI (e.g., a NuGet package URI) as an argument.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/getting-started/upgrade.md#2025-04-23_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\n```csharp\npublic class Program : IFrostingStartup\n{\n    public static int Main(string[] args)\n    {\n        // Create and run the host.\n        return\n            new CakeHost()\n                .InstallTool(new Uri(\"nuget:?package=NUnit.ConsoleRunner&version=3.11.1\"));\n                .Run(args);\n    }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Enabling Script Cache in Cake (Config File)\nDESCRIPTION: Adds a configuration entry to enable the new opt-in script compilation cache feature in Cake v2.2.0.\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2022-04-15-cake-v2.2.0-released.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n[Settings]\nEnableScriptCache=true\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Tool Paths in Cake Config\nDESCRIPTION: INI configuration file that specifies custom directory paths for Cake tools, addins and modules to avoid conflicts with existing project directories\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2020-12-08-config-bootstrap.md#2025-04-23_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[Paths]\nTools=./caketools\nAddins=./caketools/Addins\nModules=./caketools/Modules\n```\n\n----------------------------------------\n\nTITLE: Locating VSTest Installation\nDESCRIPTION: Example showing how to find VSTest installation and configure test settings\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2017-03-27-vswhere-and-visual-studio-2017-support.md#2025-04-23_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n#tool nuget:?package=vswhere\n\nDirectoryPath vsTestInstallationPath  = VSWhereProducts(\"*\", new VSWhereLatestSettings { Requires = \"Microsoft.VisualStudio.PackageGroup.TestTools.Core\"}).FirstOrDefault();\n\nFilePath vsTestPath = (vsTestInstallationPath==null)\n                            ? null\n                            : vsTestInstallationPath.CombineWithFilePath(\"./Common7/IDE/CommonExtensions/Microsoft/TestWindow/vstest.console.exe\");\n\nVSTest(\"./Tests/*.UnitTests.dll\", new VSTestSettings() {\n                                            Logger = VSTestLogger.Trx,\n                                            ToolPath = vsTestPath });\n```\n\n----------------------------------------\n\nTITLE: Disabling Colored Output in Cake .NET Tool\nDESCRIPTION: This option disables the output of colored text in Cake. It's available since Cake 1.1.0 and is activated by setting the NO_COLOR environment variable with any value.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/running-builds/configuration/default-configuration-values.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nNO_COLOR\n```\n\n----------------------------------------\n\nTITLE: Enabling Script Cache in Cake (Environment Variable)\nDESCRIPTION: Sets an environment variable to enable the new opt-in script compilation cache feature in Cake v2.2.0.\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2022-04-15-cake-v2.2.0-released.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nCAKE_SETTINGS_ENABLESCRIPTCACHE=true\n```\n\n----------------------------------------\n\nTITLE: Installing Cake .NET Tool Globally\nDESCRIPTION: Command to install the Cake .NET Tool globally using the .NET CLI. This is required to use Cake run configurations in Rider.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/integrations/editors/rider/run-configurations.md#2025-04-23_snippet_0\n\nLANGUAGE: cmd\nCODE:\n```\ndotnet tool install --global Cake.Tool\n```\n\n----------------------------------------\n\nTITLE: Customizing .gitignore to Include packages.config (plaintext)\nDESCRIPTION: This .gitignore modification instructs Git to ignore all files under the tools/ directory, except for tools/packages.config. This ensures only the version-pinning config file remains under version control, keeping other transient or package-managed files excluded. Place these rules in your .gitignore file at the repository root.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/writing-builds/reproducible-builds/pinning-cake-version.md#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\ntools/*\\n!tools/packages.config\n```\n\n----------------------------------------\n\nTITLE: Installing Yeoman and Cake Generator\nDESCRIPTION: Commands to install Yeoman and the Cake generator globally using npm. This allows users to bootstrap Cake projects using Yeoman.\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2016-09-23-cake-for-yeoman.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g yo\nnpm install -g generator-cake\n```\n\n----------------------------------------\n\nTITLE: Creating Cake Deployment Bootstrapper\nDESCRIPTION: Windows batch script that sets up the deployment environment by creating required directories and installing Cake via NuGet\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2015-10-22-cake-addin-kudu.md#2025-04-23_snippet_1\n\nLANGUAGE: batch\nCODE:\n```\n@echo off\nIF NOT EXIST \"Tools\" (md \"Tools\")\nIF NOT EXIST \"Tools\\Addins\" (md \"Tools\\Addins\")\nnuget install Cake -ExcludeVersion -OutputDirectory \"Tools\"\nTools/Cake/Cake.exe deploy.cake -verbosity=Verbose\n```\n\n----------------------------------------\n\nTITLE: Running Cake Frosting CLI\nDESCRIPTION: Command to execute Cake Frosting with optional switches. Cake Frosting can be used to write console applications targeting net8.0 or newer.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/running-builds/runners/cake-frosting.md#2025-04-23_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\ndotnet Cake.Frosting.dll [switches]\n```\n\n----------------------------------------\n\nTITLE: Setting Cake NuGet Client Environment Variable in Shell\nDESCRIPTION: Sets an environment variable to disable the in-process NuGet client in Cake. This allows opting out of the new default behavior if issues are encountered.\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2018-01-17-cake-v0.25.0-released.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nCAKE_NUGET_USEINPROCESSCLIENT=false\n```\n\n----------------------------------------\n\nTITLE: Embedding Package Icon in XML Project File\nDESCRIPTION: This XML snippet demonstrates how to embed a package icon in the project file. It includes the PackageIcon property and an ItemGroup to reference the PNG file, ensuring it's embedded in the NuGet package.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/extending/modules/best-practices.md#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<PackageIcon>PackageIcon.png</PackageIcon>\n\n<ItemGroup>\n  <None Include=\"..\\PackageIcon.png\" Pack=\"true\" PackagePath=\"\" />\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Installing Cake.Tool using .NET Core CLI\nDESCRIPTION: Command to install Cake.Tool globally using the .NET Core CLI, specifying version 0.35.0.\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2019-09-28-cake-v0.35.0-released.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install --global Cake.Tool --version 0.35.0\n```\n\n----------------------------------------\n\nTITLE: Parsing Cake Config in PowerShell Bootstrapper\nDESCRIPTION: PowerShell script extension that reads the cake.config file using Get-IniContent function and updates the TOOLS_DIR variable based on the configured paths. Ensures absolute path resolution for relative paths.\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2020-12-08-config-bootstrap.md#2025-04-23_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n$CAKE_CONFIG = Join-Path $PSScriptRoot \"cake.config\"\n\n$TOOLS_DIR = Join-Path $PSScriptRoot \"tools\"\n\nif (Test-Path $CAKE_CONFIG) {\n    $ini = Get-IniContent $CAKE_CONFIG\n\n    if ($ini[\"Paths\"] -and $ini[\"Paths\"][\"Tools\"]) {\n        $TOOLS_DIR = $ini[\"Paths\"][\"Tools\"]\n\n        # Ensure absolute path\n        if (-not [IO.Path]::IsPathRooted($TOOLS_DIR)) {\n            $TOOLS_DIR = Join-Path $PSScriptRoot $TOOLS_DIR\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Frosting Project with Yeoman\nDESCRIPTION: Command to use Yeoman to generate a new Frosting project. Frosting is an experimental .NET Core-based runner for Cake builds.\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2016-09-23-cake-for-yeoman.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyo cake:frosting\n```\n\n----------------------------------------\n\nTITLE: Installing Cake.Bakery globally using NuGet\nDESCRIPTION: Command to install Cake.Bakery globally using NuGet. The command places Cake.Bakery in a specified global path rather than in the local tools directory, allowing it to be used across multiple projects.\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2018-02-21-intellisense-improvements.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnuget.exe install Cake.Bakery -OutputDirectory <global_path> -ExcludeVersion\n```\n\n----------------------------------------\n\nTITLE: Passing Cake NuGet Client Configuration as Command Line Argument\nDESCRIPTION: Demonstrates how to pass a command line argument to Cake to disable the in-process NuGet client. This offers a third option for controlling the NuGet client behavior.\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2018-01-17-cake-v0.25.0-released.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncake.exe --nuget_useinprocessclient=false\n```\n\n----------------------------------------\n\nTITLE: Importing Issue Provider Addins\nDESCRIPTION: Import statements for MsBuild and InspectCode issue provider addins to enable parsing their respective log formats.\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2018-06-10-cake-issues.md#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n#addin \"Cake.Issues.MsBuild\"\n#addin \"Cake.Issues.InspectCode\"\n```\n\n----------------------------------------\n\nTITLE: Using Typed Context in Cake Task Methods\nDESCRIPTION: Shows how to access the typed context within task definitions by providing a type parameter to the Does and WithCriteria methods. This enables conditional task execution and state modification based on the context data.\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2018-05-31-cake-v0.28.0-released.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nTask(\"Sign\")\n    .WithCriteria<MyBuildData>((context, data) => data.SignAssemblies)\n    .Does<MyBuildData>(data =>\n{\n      data.AssmbliesSigned = true;\n});\n```\n\n----------------------------------------\n\nTITLE: Specifying the Cake Interpreter with Shebang in Bash\nDESCRIPTION: This shebang directive, placed at the beginning of a Cake script file on a Unix-like system, instructs the program loader to use the specified Cake executable (`path/to/launch/cake`) to interpret and run the script. This line is only used by the operating system's shell and is ignored by the Cake compiler during the compilation phase.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/writing-builds/preprocessor-directives/shebang.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n#!path/to/launch/cake\n```\n\n----------------------------------------\n\nTITLE: Creating a .NET Tool Manifest\nDESCRIPTION: Creates a new tool manifest in the current repository, which is required for using .NET local tools.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/getting-started/setting-up-a-new-scripting-project.md#2025-04-23_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\ndotnet new tool-manifest\n```\n\n----------------------------------------\n\nTITLE: Running Cake Build Script with Diagnostic Verbosity (Bash)\nDESCRIPTION: This snippet shows how to execute a Cake build script with the diagnostic verbosity argument in a Bash shell. The '--verbosity=diagnostic' flag enables detailed logging, which is especially useful for troubleshooting installation issues or observing the execution process. Requires a POSIX-compliant shell and an executable Cake build script.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/writing-builds/preprocessor-directives/tool/nuget-provider.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n./build.sh --verbosity=diagnostic\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Cake NuGet Sources via Command-Line Argument (Shell)\nDESCRIPTION: Specifies multiple NuGet package source URLs for Cake using the `--nuget_source` command-line argument. Sources are separated by a semicolon. This overrides other settings for the current execution.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/running-builds/configuration/default-configuration-values.md#2025-04-23_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\n--nuget_source=http://myfeed/nuget/;http://myotherfeed/nuget\n```\n\n----------------------------------------\n\nTITLE: Downloading Cake .NET Tool bootstrapper for MacOS\nDESCRIPTION: Bash command to download the Cake .NET Tool bootstrapper script for MacOS operating systems.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/running-builds/runners/dotnet-tool.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncurl -Lsfo build.sh https://cakebuild.net/download/bootstrapper/dotnet-tool/osx\n```\n\n----------------------------------------\n\nTITLE: Importing Core Cake.Issues Addin\nDESCRIPTION: Import statement for the core Cake.Issues addin required for issue parsing functionality.\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2018-06-10-cake-issues.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n#addin \"Cake.Issues\"\n```\n\n----------------------------------------\n\nTITLE: Finding Specific Legacy Version\nDESCRIPTION: Demonstrates how to find a specific version of legacy Visual Studio product\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2017-03-27-vswhere-and-visual-studio-2017-support.md#2025-04-23_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n#tool nuget:?package=vswhere\n\nDirectoryPath legacyInstallationPath = VSWhereLegacy(new VSWhereLegacySettings { Version = \"10.0\"}).FirstOrDefault();\n```\n\n----------------------------------------\n\nTITLE: Configuring Cake Extension YAML Definition\nDESCRIPTION: YAML configuration example for defining a Cake extension. Shows required fields including Type, Name, NuGet package information, assembly patterns, repository details, author information, and categorization. Used to automatically generate extension documentation on the website.\nSOURCE: https://github.com/cake-build/website/blob/master/README.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nType: Addin\nName: Cake.Wyam\nNuGet: Cake.Wyam\nAssemblies:\n- \"/**/Cake.Wyam.dll\"\nRepository: https://github.com/Wyamio/Wyam\nAuthor: Dave Glick, Gary Ewan Park\nDescription: \"An alias that generates static sites and other content using Wyam.\"\nCategories:\n- Documentation\n- Static Site Generation\n```\n\n----------------------------------------\n\nTITLE: Enabling In-Process NuGet Client in Cake\nDESCRIPTION: Command to enable the in-process NuGet client in Cake, which allows Cake to download tools and addins without using nuget.exe. This is the first step towards removing the dependency on nuget.exe.\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2017-09-13-cake-v0.22.0-released.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nCake.exe --nuget_useinprocessclient=true\n```\n\n----------------------------------------\n\nTITLE: Installing Cake globally using Chocolatey in PowerShell\nDESCRIPTION: This command installs the portable version of Cake globally using the Chocolatey package manager. After installation, Cake will be available on the system path.\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2015-12-03-cake-v0.6.1-released.md#2025-04-23_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nchoco install cake.portable\n```\n\n----------------------------------------\n\nTITLE: Setting execute permissions for shell script\nDESCRIPTION: Git command to set execute permissions for the downloaded shell script, useful when downloading on Windows for use on Linux/MacOS.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/running-builds/runners/dotnet-tool.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngit update-index --add --chmod=+x build.sh\n```\n\n----------------------------------------\n\nTITLE: Running Cake Build with Diagnostic Verbosity\nDESCRIPTION: This Bash command executes a Cake build script (`build.sh`) with diagnostic-level verbosity. This increases the logging output, including the details of the underlying `dotnet` commands executed by the .NET Tool Provider, which is useful for debugging installation issues.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/writing-builds/preprocessor-directives/tool/dotnet-provider.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n./build.sh --verbosity=diagnostic\n```\n\n----------------------------------------\n\nTITLE: Modifying PowerShell Bootstrapper to Add Debug Flag in Cake\nDESCRIPTION: This code snippet shows how to modify the build.ps1 bootstrapper file to add the --debug flag to the Cake execution command. This pauses the Cake execution to allow attaching a debugger to the process.\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2017-07-31-debug-cake-addin.md#2025-04-23_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nInvoke-Expression \"& `\"$CAKE_EXE`\" `\"$Script`\" -target=`\"$Target`\" -configuration=`\"$Configuration`\" -verbosity=`\"$Verbosity`\" $UseMono $UseDryRun $UseExperimental $ScriptArgs --debug\"\n```\n\n----------------------------------------\n\nTITLE: Including External Markdown File in Cake Website\nDESCRIPTION: This snippet demonstrates how to include an external Markdown file (CONTRIBUTING.md) from the Cake repository into the Cake website. It uses a custom syntax to reference the file.\nSOURCE: https://github.com/cake-build/website/blob/master/input/community/contributing/contribution-guidelines.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n^\"../../../release/cake-repo/CONTRIBUTING.md\"\n```\n\n----------------------------------------\n\nTITLE: Skipping Assembly Verification in Cake\nDESCRIPTION: Command to skip assembly verification when loading addins, which allows loading addins that don't explicitly target the current Cake.Core version. This is not recommended for regular use as it may lead to unpredictable behavior.\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2017-09-13-cake-v0.22.0-released.md#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nCake.exe --settings_skipverification=true\n```\n\n----------------------------------------\n\nTITLE: Installing Cake via Homebrew Commands\nDESCRIPTION: Commands to update Homebrew package listings and install Cake build automation tool. Requires Homebrew to be installed on macOS system.\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2015-07-31-cake-on-homebrew.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbrew update\nbrew install cake\n```\n\n----------------------------------------\n\nTITLE: Enabling Process Command Line Logging in Config File (Shell/Ini)\nDESCRIPTION: Enables the logging of full command lines for external tools in Cake by setting `ShowProcessCommandLine=true` under the `[Settings]` section in the `cake.config` file.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/running-builds/configuration/default-configuration-values.md#2025-04-23_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\n[Settings]\nShowProcessCommandLine=true\n```\n\n----------------------------------------\n\nTITLE: Installing Cake.Core NuGet Package in PowerShell\nDESCRIPTION: This snippet shows how to install the Cake.Core NuGet package using the Package Manager Console in Visual Studio.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/extending/addins/creating-addins.md#2025-04-23_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nPM> Install-Package Cake.Core\n```\n\n----------------------------------------\n\nTITLE: Downloading Cake .NET Tool bootstrapper for Linux\nDESCRIPTION: Bash command to download the Cake .NET Tool bootstrapper script for Linux operating systems.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/running-builds/runners/dotnet-tool.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl -Lsfo build.sh https://cakebuild.net/download/bootstrapper/dotnet-tool/linux\n```\n\n----------------------------------------\n\nTITLE: Including a Specific Tool File with Custom Extension via Cake Tool Installer (C#)\nDESCRIPTION: This snippet demonstrates how to leverage the 'include' parameter in the #tool directive to specify a tool file with a non-.exe extension (e.g., a .cmd script) in the NuGet package. This is necessary when the packaged tool executable does not follow the convention of having a .exe extension. The include path defines the relative path within the package.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/writing-builds/preprocessor-directives/tool/nuget-provider.md#2025-04-23_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n#tool nuget:?package=Cake.Foo&include=path/to/foo.cmd\n```\n\n----------------------------------------\n\nTITLE: Documenting C# Namespaces in Cake\nDESCRIPTION: Explains the Cake convention for documenting namespaces, which are not directly supported by standard XML documentation output. It involves creating a special internal class named `NamespaceDoc` within the namespace and documenting this class using the <summary> XML tag. These classes are typically grouped in a `Namespaces.cs` file per assembly.\nSOURCE: https://github.com/cake-build/website/blob/master/input/community/contributing/documentation.md#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace Cake.Common\n{\n    /// <summary>\n    /// This namespace contain types used for common operations\n    /// such as parsing release notes, retrieving arguments and\n    /// to read and write environment variables.\n    /// </summary>\n    [CompilerGenerated]\n    internal class NamespaceDoc\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OmniSharp for global Cake.Bakery installation\nDESCRIPTION: JSON configuration for OmniSharp that specifies the path to a globally installed Cake.Bakery. This configuration should be placed in the user's OmniSharp directory to enable global Cake intellisense support.\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2018-02-21-intellisense-improvements.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"cake\": {\n    \"bakeryPath\": \"<global_path>/Cake.Bakery/tools/Cake.Bakery.exe\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced Paket Dependencies with Groups\nDESCRIPTION: Advanced paket.dependencies configuration showing how to organize dependencies into groups for tools, addins and modules. Demonstrates group-based dependency management.\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2017-01-25-cake-paket.md#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n# paket.dependencies\n\nsource https://nuget.org/api/v2\nnuget xunit # Required in order to run the unit tests.\n\ngroup tools\n    source https://nuget.org/api/v2\n    nuget Cake # Required in order to download Cake.exe.\n    nuget xunit.runner.console # Required in order to run the unit tests.\n\ngroup addins\n    source https://nuget.org/api/v2\n    nuget Cake.Paket # Required in order to use PaketPack and PaketPush.\n\ngroup modules\n    source https://nuget.org/api/v2\n    nuget Cake.Paket # Required in order to use paket in the preprocessor directives.\n```\n\n----------------------------------------\n\nTITLE: Configuring Services via IFrostingStartup in Frosting 0.38.x (C#)\nDESCRIPTION: Illustrates how service configuration (like setting the build context, lifetime, or working directory) was done in Cake Frosting 0.38.x. This required implementing the `IFrostingStartup` interface and its `Configure` method, which received an `ICakeServices` instance for registration. This pattern is removed in Frosting 1.0.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/getting-started/upgrade.md#2025-04-23_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n```csharp\npublic class Program : IFrostingStartup\n{\n    public static int Main(string[] args)\n    {\n        // Create the host.\n        var host =\n            new CakeHostBuilder()\n                .WithArguments(args)\n                .UseStartup<Program>()\n                .Build();\n\n        // Run the host.\n        return host.Run();\n    }\n\n    public void Configure(ICakeServices services)\n    {\n        services.UseContext<BuildContext>();\n        services.UseLifetime<Lifetime>();\n        services.UseWorkingDirectory(\"..\");\n    }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Enabling Diagnostic Logging in Cake (Bash)\nDESCRIPTION: Example of running a Cake build script with diagnostic verbosity to enable detailed logging.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/writing-builds/preprocessor-directives/addin.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n./build.sh --verbosity=diagnostic\n```\n\n----------------------------------------\n\nTITLE: Initializing Cake Frosting Host (Pre-v1.0) in C#\nDESCRIPTION: C# code snippet demonstrating the setup and execution of a Cake Frosting application using the syntax from versions prior to 1.0 (e.g., 0.38.x). It utilizes `CakeHostBuilder`, configures it with command-line arguments (`WithArguments`), specifies a startup class (`UseStartup`), installs a .NET tool via a NuGet package URI (`UseTool`), and then builds and runs the host.\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2021-02-07-cake-v1.0.0-released.md#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n```csharp\n// Create the host.\nvar host =\n    new CakeHostBuilder()\n        .WithArguments(args)\n        .UseStartup<Program>()\n        .UseTool(new Uri(\"nuget:?package=ReportGenerator&version=4.8.1\"))\n        .Build();\n\n// Run the host.\nreturn host.Run();\n```\n```\n\n----------------------------------------\n\nTITLE: Documenting C# Properties in Cake\nDESCRIPTION: Shows how to document C# properties using the <summary> XML tag to explain the property's purpose and the <value> tag to describe the property's value, often including the type or expected content within a <c> tag. This example documents a boolean flag for allowing prerelease package installation.\nSOURCE: https://github.com/cake-build/website/blob/master/input/community/contributing/documentation.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n/// <summary>\n/// Gets or sets a value indicating whether to allow installation of prerelease packages.\n/// This flag is not required when restoring packages by installing from packages.config.\n/// </summary>\n/// <value>\n///   <c>true</c> to allow installation of prerelease packages; otherwise, <c>false</c>.\n/// </value>\npublic bool Prerelease { get; set; }\n```\n\n----------------------------------------\n\nTITLE: Configuring Script Cache Location in Cake (Command Line Argument)\nDESCRIPTION: Passes a command line argument to specify the location for caching compiled scripts in Cake v2.2.0.\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2022-04-15-cake-v2.2.0-released.md#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n--paths_cache=./tools/cache\n```\n\n----------------------------------------\n\nTITLE: Collection Initializers in Cake - Before Enhancement\nDESCRIPTION: Example of setting dictionary properties before the collection initializer enhancement was implemented, requiring explicit dictionary instantiation.\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2018-08-22-cake-v0.30.0-released.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nnew FooToolSettings\n{\n   EnvironmentVariables = new Dictionary<string, string> { [\"FOO\"] = \"foo\" }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Process Command Line Logging via Command-Line Argument (Shell)\nDESCRIPTION: Forces Cake to log the full command line for executed tools during the current run by passing the `--settings_showprocesscommandline=true` argument.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/running-builds/configuration/default-configuration-values.md#2025-04-23_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\n--settings_showprocesscommandline=true\n```\n\n----------------------------------------\n\nTITLE: Configuring Services directly on CakeHost in Frosting 1.0 (C#)\nDESCRIPTION: Shows the updated approach for configuring services in Cake Frosting 1.0. The `IFrostingStartup` interface and `ICakeServices` are removed. Configuration is now done directly on the `CakeHost` instance using fluent methods like `UseContext<T>`, `UseLifetime<T>`, and `UseWorkingDirectory` before running the host.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/getting-started/upgrade.md#2025-04-23_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n```csharp\npublic class Program : IFrostingStartup\n{\n    public static int Main(string[] args)\n    {\n        // Create and run the host.\n        return\n            new CakeHost()\n                .UseContext<BuildContext>()\n                .UseLifetime<Lifetime>()\n                .UseWorkingDirectory(\"..\")\n                .Run(args);\n    }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Using NuGet.Core Package with Cake (Updated Version)\nDESCRIPTION: Example of the correct way to reference NuGet.Core package version (2.14.0) as an addin, compatible with Cake v0.20.0.\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2017-06-12-cake-v0.20.0-released.md#2025-04-23_snippet_1\n\nLANGUAGE: cake\nCODE:\n```\n#addin \"nuget:?package=NuGet.Core&version=2.14.0\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Advanced Console Output via Environment Variable (Shell)\nDESCRIPTION: Sets the `CAKE_SETTINGS_USESPECTRECONSOLEFORCONSOLEOUTPUT` environment variable, likely to 'true', to enable enhanced console output rendering using the Spectre.Console library in Cake version 3.0.0 and later.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/running-builds/configuration/default-configuration-values.md#2025-04-23_snippet_22\n\nLANGUAGE: sh\nCODE:\n```\nCAKE_SETTINGS_USESPECTRECONSOLEFORCONSOLEOUTPUT\n```\n\n----------------------------------------\n\nTITLE: Enabling Process Command Line Logging via Environment Variable (Shell)\nDESCRIPTION: Sets the `CAKE_SETTINGS_SHOWPROCESSCOMMANDLINE` environment variable to instruct Cake to always log the full command line (file name and arguments) when executing external tools, regardless of the log verbosity level. Set to 'true' to enable.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/running-builds/configuration/default-configuration-values.md#2025-04-23_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\nCAKE_SETTINGS_SHOWPROCESSCOMMANDLINE\n```\n\n----------------------------------------\n\nTITLE: Using Empty Value with Custom Switch in Cake\nDESCRIPTION: Example showing how to provide an empty or null value to a custom switch in Cake build scripts. This uses a space instead of equals sign to specify an empty value.\nSOURCE: https://github.com/cake-build/website/blob/master/input/Shared/switches-1-0.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n--foo \"\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Addin Compatibility Warning in Bash\nDESCRIPTION: This snippet shows a warning message that may appear when loading addins or modules targeting an older version of Cake.Core. It recommends updating to Cake.Core version 5.0.0 for best compatibility.\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2024-11-12-cake-v5.0.0-released.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nThe assembly 'Cake.Addin, Version=4.0.0.0, Culture=neutral, PublicKeyToken=null'\nis referencing an older version of Cake.Core (4.0.0).\nFor best compatibility it should target Cake.Core version 5.0.0.\n```\n\n----------------------------------------\n\nTITLE: Skipping Cake Assembly Verification via Environment Variable (Shell)\nDESCRIPTION: Sets the `CAKE_SETTINGS_SKIPVERIFICATION` environment variable, likely to 'true', to disable Cake's default check for compatible `Cake.Core` versions referenced by addins. This is a temporary workaround for potential breaking changes.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/running-builds/configuration/default-configuration-values.md#2025-04-23_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\nCAKE_SETTINGS_SKIPVERIFICATION\n```\n\n----------------------------------------\n\nTITLE: Using NuGet.Core Package with Cake (Old Version)\nDESCRIPTION: Example of referencing the outdated NuGet.Core package version (2.12.0) as an addin in Cake scripts, which causes compatibility issues with Cake v0.20.0.\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2017-06-12-cake-v0.20.0-released.md#2025-04-23_snippet_0\n\nLANGUAGE: cake\nCODE:\n```\n#addin \"nuget:?package=NuGet.Core&version=2.12.0\"\n```\n\n----------------------------------------\n\nTITLE: Configuring OmniSharp for Custom Cake.Bakery Path\nDESCRIPTION: JSON configuration for specifying a custom path to Cake.Bakery executable in the OmniSharp configuration file. This is useful when Cake.Bakery is installed outside the PATH environment variable.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/integrations/editors/vscode/intellisense.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"cake\": {\n    \"bakeryPath\": \"<custom_path>/Cake.Bakery/tools/Cake.Bakery.exe\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Cake Tools Path in Config File (Shell/Ini)\nDESCRIPTION: Configures the directory for Cake tools by setting the `Tools` key under the `[Paths]` section in the `cake.config` file. This example sets it to the default value './tools'.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/running-builds/configuration/default-configuration-values.md#2025-04-23_snippet_20\n\nLANGUAGE: sh\nCODE:\n```\n[Paths]\nTools=./tools\n```\n\n----------------------------------------\n\nTITLE: Using Empty Switch Value in Cake\nDESCRIPTION: Demonstrates how to pass an empty or null value to a custom switch in Cake build system using space separator instead of equals sign.\nSOURCE: https://github.com/cake-build/website/blob/master/input/Shared/switches.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n--foo \"\"\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenCover Register Settings in Cake 1.x (C#)\nDESCRIPTION: Demonstrates how to configure OpenCover code coverage in Cake 1.x build scripts. It shows passing an `OpenCoverSettings` object to the `OpenCover` alias, specifically setting the `Register` property as a string to specify the registration mode (admin, user, or DLL path). This method is deprecated in Cake 2.0.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/getting-started/upgrade.md#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n```csharp\nOpenCover(x => {\n    x.NUnit3(tests);\n},\n    coverageFile,\n    new OpenCoverSettings{\n        Register = \"some-path-to-dll\"\n    }\n);\n```\n```\n\n----------------------------------------\n\nTITLE: Skipping Cake Assembly Verification in Config File (Shell/Ini)\nDESCRIPTION: Disables Cake's addin assembly verification by setting `SkipVerification=true` under the `[Settings]` section in the `cake.config` file. Use with caution.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/running-builds/configuration/default-configuration-values.md#2025-04-23_snippet_17\n\nLANGUAGE: sh\nCODE:\n```\n[Settings]\nSkipVerification=true\n```\n\n----------------------------------------\n\nTITLE: Configuring Renovate for Cake, GitHub Actions, and NuGet Dependencies\nDESCRIPTION: This JSON configuration for Renovate extends the base config and adds labels for different types of dependencies. It specifies labels for Cake, GitHub Actions, and NuGet dependencies.\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2021-04-13-cake-support-in-renovate.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://docs.renovatebot.com/renovate-schema.json\",\n  \"extends\": [\n    \"config:base\"\n  ],\n  \"labels\": [\"dependencies\"],\n  \"cake\": {\n    \"addLabels\": [\"cake\", \"build\"]\n  },\n  \"github-actions\": {\n    \"addLabels\": [\"github_actions\", \"build\"]\n  },\n  \"nuget\": {\n    \"addLabels\": [\".NET\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Full Cake Addin Directive in Visual Studio Code\nDESCRIPTION: This snippet inserts a more complete Cake addin pre-processor directive. The source, package name, and version can be customized.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/integrations/editors/vscode/snippets.md#2025-04-23_snippet_1\n\nLANGUAGE: cake\nCODE:\n```\n#addin \"nuget:https://www.nuget.org/api/v2?package=Cake.Foo&version=1.2.3\"\n```\n\n----------------------------------------\n\nTITLE: Documenting C# Methods in Cake\nDESCRIPTION: Illustrates the standard way to document C# methods in Cake using XML comments. It uses the <summary> tag for the method's purpose, <example> and <code> tags for usage examples, <param> tags for parameter descriptions, and <returns> tag for the return value description. Additionally, it uses the [CakeMethodAlias] and [CakeAliasCategory] attributes for integration with the Cake documentation system.\nSOURCE: https://github.com/cake-build/website/blob/master/input/community/contributing/documentation.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n/// <summary>\n/// Makes the path absolute (if relative) using the current working directory.\n/// </summary>\n/// <example>\n/// <code>\n/// var path = MakeAbsolute(Directory(\"./resources\"));\n/// </code>\n/// </example>\n/// <param name=\"context\">The context.</param>\n/// <param name=\"path\">The path.</param>\n/// <returns>An absolute directory path.</returns>\n[CakeMethodAlias]\n[CakeAliasCategory(\"Path\")]\npublic static DirectoryPath MakeAbsolute(this ICakeContext context, DirectoryPath path)\n{...}\n```\n\n----------------------------------------\n\nTITLE: Setting Cake Tools Path via Environment Variable (Shell)\nDESCRIPTION: Sets the `CAKE_PATHS_TOOLS` environment variable to specify the directory where Cake should restore and look for tools downloaded via the `#tool` preprocessor directive. The default is './tools'.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/running-builds/configuration/default-configuration-values.md#2025-04-23_snippet_19\n\nLANGUAGE: sh\nCODE:\n```\nCAKE_PATHS_TOOLS\n```\n\n----------------------------------------\n\nTITLE: Displaying Warning Message for Older Cake.Core Reference\nDESCRIPTION: Shows a warning message that appears when an assembly references an older version of Cake.Core.\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2021-11-30-cake-v2.0.0-released.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nThe assembly 'Cake.FileHelpers, Version=4.0.1.0, Culture=neutral, PublicKeyToken=null'\nis referencing an older version of Cake.Core (1.0.0).\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenCover Register Settings in Cake 2.0 (C#)\nDESCRIPTION: Illustrates the updated method for configuring OpenCover registration settings in Cake 2.0. The `Register` property is now of type `OpenCoverRegisterOption`, and configuration is done using fluent extension methods like `WithoutRegister()`, `WithRegisterAdmin()`, `WithRegisterUser()` (default), or `WithRegisterDll(filePath)` on the `OpenCoverSettings` object.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/getting-started/upgrade.md#2025-04-23_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n```csharp\nOpenCover(x => {\n    x.NUnit3(tests);\n},\n    coverageFile,\n    new OpenCoverSettings()\n        .WithoutRegister() // to omit the register-settings\n        .WithRegisterAdmin() // -register\n        .WithRegisterUser() // -register:user <-- this is the default\n        .WithRegisterDll(someFilePath) // -register:path-to-dll\n);\n```\n```\n\n----------------------------------------\n\nTITLE: Enabling Advanced Console Output in Config File (Shell/Ini)\nDESCRIPTION: Enables Spectre.Console-based rendering for Cake's console output by setting `UseSpectreConsoleForConsoleOutput=true` under the `[Settings]` section in the `cake.config` file (requires Cake 3.0.0+).\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/running-builds/configuration/default-configuration-values.md#2025-04-23_snippet_23\n\nLANGUAGE: sh\nCODE:\n```\n[Settings]\nUseSpectreConsoleForConsoleOutput=true\n```\n\n----------------------------------------\n\nTITLE: Inserting Cake Reference Directive in Visual Studio Code\nDESCRIPTION: This snippet inserts a basic Cake reference pre-processor directive. The path to the assembly can be customized.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/integrations/editors/vscode/snippets.md#2025-04-23_snippet_5\n\nLANGUAGE: cake\nCODE:\n```\n#reference \"bin/myassembly.dll\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Cake.Core Version Mismatch Warning in Bash\nDESCRIPTION: Example console output showing a warning message generated by Cake when loading addins or modules. This specific warning indicates that the loaded assembly (`Cake.DotNetTool.Module`, version 0.4.0.0) references an older version of `Cake.Core` (0.33.0) than the one recommended or currently in use by the Cake execution engine (implicitly 1.0 in this context).\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2021-02-07-cake-v1.0.0-released.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n```bash\nThe assembly 'Cake.DotNetTool.Module, Version=0.4.0.0, Culture=neutral, PublicKeyToken=null'\nis referencing an older version of Cake.Core (0.33.0).\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Single Cake NuGet Source via Command-Line Argument (Shell)\nDESCRIPTION: Specifies a single NuGet package source URL for Cake using the `--nuget_source` command-line argument when running Cake. This overrides default and config file settings for the current execution.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/running-builds/configuration/default-configuration-values.md#2025-04-23_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\n--nuget_source=http://myfeed/nuget/\n```\n\n----------------------------------------\n\nTITLE: Viewing OmniSharp Log Error: Cake Script Service Not Connected\nDESCRIPTION: Example log output showing a warning when Cake.Bakery isn't installed in the tools folder, preventing Intellisense from working properly.\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2017-11-08-intellisense-vscode.md#2025-04-23_snippet_0\n\nLANGUAGE: log\nCODE:\n```\n[warn]: OmniSharp.Cake.CakeProjectSystem\n    Cake script service not connected. Aborting.\n```\n\n----------------------------------------\n\nTITLE: Skipping Cake Assembly Verification via Command-Line Argument (Shell)\nDESCRIPTION: Disables Cake's addin assembly verification for the current run by passing the `--settings_skipverification=true` argument. This allows using addins potentially built against older Cake versions.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/running-builds/configuration/default-configuration-values.md#2025-04-23_snippet_18\n\nLANGUAGE: sh\nCODE:\n```\n--settings_skipverification=true\n```\n\n----------------------------------------\n\nTITLE: Adding MyGet VSIX Feed URL in Visual Studio Options\nDESCRIPTION: This code snippet shows the URL to be used when adding the MyGet VSIX feed for Cake in Visual Studio's Options dialog. It allows users to receive prerelease versions of the Cake for Visual Studio extension.\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2016-12-13-cake-vs-prerelease.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://www.myget.org/F/cake/vsix\n```\n\n----------------------------------------\n\nTITLE: Installing Cake .NET Tool Globally\nDESCRIPTION: This command installs the Cake .NET Tool globally on the machine, which is required for using the Visual Studio task runner integration.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/integrations/editors/visualstudio/task-runner.md#2025-04-23_snippet_0\n\nLANGUAGE: cmd\nCODE:\n```\ndotnet tool install --global Cake.Tool\n```\n\n----------------------------------------\n\nTITLE: Displaying Addin Version Warning in Bash\nDESCRIPTION: Shows a warning message when an addin is referencing an older version of Cake.Core. This snippet demonstrates the format of the warning that users might see when loading addins or modules targeting older Cake versions.\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2023-11-18-cake-v4.0.0-released.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nThe assembly 'Cake.Twitter, Version=3.0.0.0, Culture=neutral, PublicKeyToken=null'\nis referencing an older version of Cake.Core (3.0.0).\nFor best compatibility it should target Cake.Core version 4.0.0.\n```\n\n----------------------------------------\n\nTITLE: Setting Addin NuGet Dependencies in Cake .NET Tool\nDESCRIPTION: This configuration option allows automatic installation and referencing of NuGet package dependencies when using In-Process NuGet installation. It's available since Cake 0.22.0 and defaults to false.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/running-builds/configuration/default-configuration-values.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nCAKE_NUGET_LOADDEPENDENCIES\n```\n\nLANGUAGE: sh\nCODE:\n```\n[NuGet]\nLoadDependencies=true\n```\n\nLANGUAGE: sh\nCODE:\n```\n--nuget_loaddependencies=true\n```\n\n----------------------------------------\n\nTITLE: Finding Legacy Visual Studio Products\nDESCRIPTION: Shows how to locate legacy Visual Studio product installations\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2017-03-27-vswhere-and-visual-studio-2017-support.md#2025-04-23_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n#tool nuget:?package=vswhere\n\nDirectoryPath legacyInstallationPath = VSWhereLegacy(true);  // Passing true gets the latest version.\n```\n\n----------------------------------------\n\nTITLE: Displaying Cake File Extension in Markdown\nDESCRIPTION: This snippet shows how to display the file extension for Cake scripts (.cake) in a code block within Markdown.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/integrations/editors/atom.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<code>.cake</code>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Cake IntelliSense Instructions\nDESCRIPTION: This HTML snippet creates a tabbed interface to display instructions for enabling IntelliSense in Visual Studio for different Cake project types. It uses Bootstrap classes for styling and tab functionality.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/integrations/editors/visualstudio/intellisense.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<ul class=\"nav nav-tabs\">\n    <li class=\"active\"><a data-toggle=\"tab\" href=\"#tool2\">Cake .NET Tool</a></li>\n    <li><a data-toggle=\"tab\" href=\"#frosting2\">Cake Frosting</a></li>\n</ul>\n\n<div class=\"tab-content\">\n    <div id=\"tool2\" class=\"tab-pane fade in active\">\n        <p>\n            There is currently no support for Intellisense in <code>.cake</code> script files within Visual Studio.\n        </p>\n    </div>\n    <div id=\"frosting2\" class=\"tab-pane fade\">\n        <p>\n            <a href=\"/docs/running-builds/runners/cake-frosting\">Cake Frosting</a> projects have all features of a .NET Console application, including IntelliSense.\n        </p>\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Viewing OmniSharp Log Error: Invalid Type Exception\nDESCRIPTION: Example log output showing a failure when Cake isn't installed in the tools folder, causing scripts to be ignored during processing.\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2017-11-08-intellisense-vscode.md#2025-04-23_snippet_1\n\nLANGUAGE: log\nCODE:\n```\n[fail]: OmniSharp.Cake.CakeProjectSystem\n    c:\\Users\\mb\\src\\gh\\bakery\\setup.cake will be ignored due to an following error\n    System.TypeLoadException: A null or zero length string does not represent a valid Type.\n```\n\n----------------------------------------\n\nTITLE: Terminal Output After Running Debug Command in Cake\nDESCRIPTION: This snippet shows the terminal output when running the build script with the debug flag. It displays the process ID to which a debugger can be attached.\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2017-07-31-debug-cake-addin.md#2025-04-23_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPreparing to run build script...\nRunning build script...\nAttach debugger to process 80276 to continue\n```\n\n----------------------------------------\n\nTITLE: Platform Configuration in project.json for Mono Compatibility\nDESCRIPTION: Project configuration snippet showing how to set the platform to AnyCPU in project.json as a workaround for Mono runtime compatibility issues with x64 targeted assemblies.\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2016-10-11-cake-v0.16.2-released.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"platform\": \"AnyCPU\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Configuration Value via Command Line\nDESCRIPTION: Shows how to set a custom configuration value using command line options. The section and key are separated by an underscore and provided as an option to the Cake command.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/running-builds/configuration/custom-configurations.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n# provide the setting as option to the command line\n# by separating section and key with an underscore.\ndotnet cake build.cake --MySection_MyKey=MyValue\n```\n\n----------------------------------------\n\nTITLE: Inserting HTML Button Link to GitHub Discussions\nDESCRIPTION: This HTML snippet creates a button that links to the Questions & Answers section of Cake's GitHub Discussions. It includes Font Awesome icon for search.\nSOURCE: https://github.com/cake-build/website/blob/master/input/community/getting-help.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a class=\"btn btn-primary btn-lg\" href=\"https://github.com/cake-build/cake/discussions?discussions_q=category%3AQ%26A\" target=\"_blank\" role=\"button\">\n    <i class=\"fa-solid fa-search\"></i> Go to questions & answers\n</a>\n```\n\n----------------------------------------\n\nTITLE: Displaying Cake Tools Menu Structure in Markdown\nDESCRIPTION: This snippet shows a markdown table listing the Cake tools available in JetBrains Rider's main menu under Tools | Cake. It includes tool names and their descriptions.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/integrations/editors/rider/tools.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Tool                               | Description |\n|------------------------------------|-------------|\n| Install: Cake .NET Tool (Global)   | Installs (or updates) the .NET Cake Tool globally. |\n| Install: Configuration File        | Installs a sample configuration file into the root folder of the project. |\n| Install: Bootstrappers: ... ...    | Installs one of the bootstrappers into the root folder of the project. |\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Playlist for Cake VSCode Extension Updates\nDESCRIPTION: This HTML snippet embeds a YouTube playlist that showcases new features in each release of the Cake extension for Visual Studio Code. The iframe is set to a width of 560 pixels and a height of 315 pixels.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/integrations/editors/vscode/resources.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/videoseries?list=PL84yg23i9GBg7_7an5Qbo0Qllg-l2e-q-\" frameborder=\"0\" gesture=\"media\" allowfullscreen></iframe>\n```\n\n----------------------------------------\n\nTITLE: Configuring Kudu Deployment Command\nDESCRIPTION: Basic .deployment configuration file that tells Kudu which command to execute during deployment\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2015-10-22-cake-addin-kudu.md#2025-04-23_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[config]\ncommand = deploy.cmd\n```\n\n----------------------------------------\n\nTITLE: Supported Platform Matrix for Cake 2.0\nDESCRIPTION: A markdown table showing the supported platforms for Cake .NET Tool and Cake Frosting in Cake 2.0. It indicates support for .NET 6, .NET 5, and .NET Core 3.1 for both runners.\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2021-10-10-sunsetting-runners.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Runner                           | .NET 6 | .NET 5 | .NET Core 3.1 |\n| -------------------------------- |:------:|:------:|:-------------:|\n| [Cake .NET Tool]                 | <i class=\"fa-solid fa-check\" style=\"color:green\"></i> | <i class=\"fa-solid fa-check\" style=\"color:green\"></i> | <i class=\"fa-solid fa-check\" style=\"color:green\"></i> |\n| [Cake Frosting]                  | <i class=\"fa-solid fa-check\" style=\"color:green\"></i> | <i class=\"fa-solid fa-check\" style=\"color:green\"></i> | <i class=\"fa-solid fa-check\" style=\"color:green\"></i> |\n```\n\n----------------------------------------\n\nTITLE: Displaying Cake IntelliSense Instructions in HTML\nDESCRIPTION: This HTML snippet creates a tabbed interface to show IntelliSense instructions for different Cake variants in Rider. It uses Bootstrap classes for styling and JavaScript for tab functionality.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/integrations/editors/rider/intellisense.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<ul class=\"nav nav-tabs\">\n    <li class=\"active\"><a data-toggle=\"tab\" href=\"#tool2\">Cake .NET Tool</a></li>\n    <li><a data-toggle=\"tab\" href=\"#frosting2\">Cake Frosting</a></li>\n</ul>\n\n<div class=\"tab-content\">\n    <div id=\"tool2\" class=\"tab-pane fade in active\">\n        <p>\n            There is currently no support for Intellisense in <code>.cake</code> script files within Rider.\n        </p>\n    </div>\n    <div id=\"frosting2\" class=\"tab-pane fade\">\n        <p>\n            <a href=\"/docs/running-builds/runners/cake-frosting\">Cake Frosting</a> projects have all features of a .NET Console application, including IntelliSense.\n        </p>\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Linking to xUnit2Settings API in Markdown\nDESCRIPTION: Creates a markdown link to the -noappdomain option in the xUnit2Settings API documentation page.\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2015-08-31-cake-v0.5.3-released.md#2025-04-23_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n[-noappdomain](/api/Cake.Common.Tools.XUnit/XUnit2Settings/976EDD09)\n```\n\n----------------------------------------\n\nTITLE: Running Cake build script on Windows\nDESCRIPTION: PowerShell command to execute the Cake build script using the bootstrapper on Windows.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/running-builds/runners/dotnet-tool.md#2025-04-23_snippet_8\n\nLANGUAGE: powershell\nCODE:\n```\n./build.ps1\n```\n\n----------------------------------------\n\nTITLE: Displaying Markdown Front Matter for Blog Post\nDESCRIPTION: This snippet shows the YAML front matter for a blog post, including title, category, and author information. It's used to define metadata for the blog post about Octopus Deploy's sponsorship of Cake.\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2020-10-08-octopus-deploy.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Thank you Octopus Deploy!\ncategory: News\nauthor: patriksvensson\n---\n```\n\n----------------------------------------\n\nTITLE: Linking to MSBuild PlatformTarget API in Markdown\nDESCRIPTION: Creates a markdown link to the Platform target in the MSBuild API documentation page.\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2015-08-31-cake-v0.5.3-released.md#2025-04-23_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n[Platform target](/api/Cake.Common.Tools.MSBuild/PlatformTarget)\n```\n\n----------------------------------------\n\nTITLE: Referencing External Markdown File in Cake Website\nDESCRIPTION: This snippet demonstrates how to include content from an external markdown file in a Cake website page. It uses a custom syntax to reference the README.md file from the cake-contrib-repo.\nSOURCE: https://github.com/cake-build/website/blob/master/input/community/cake-contrib.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n^\"../../release/cake-contrib-repo/README.md\"\n```\n\n----------------------------------------\n\nTITLE: Running Cake build script on Linux/MacOS\nDESCRIPTION: Bash command to execute the Cake build script using the bootstrapper on Linux or MacOS.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/running-builds/runners/dotnet-tool.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nbuild.sh\n```\n\n----------------------------------------\n\nTITLE: Linking to PlatformTarget API in Markdown\nDESCRIPTION: Creates a markdown link to the PlatformTarget API documentation page.\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2015-08-31-cake-v0.5.3-released.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[PlatformTarget](/api/Cake.Common.Tools.MSBuild/PlatformTarget)\n```\n\n----------------------------------------\n\nTITLE: Running Cake Frosting Build Script (Linux/MacOS)\nDESCRIPTION: Bash command to execute the Cake Frosting build script on Linux and MacOS systems.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/running-builds/runners/cake-frosting.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nbuild.sh\n```\n\n----------------------------------------\n\nTITLE: Linking to InspectCode DSL in Markdown\nDESCRIPTION: Creates a markdown link to the InspectCode DSL documentation page.\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2015-08-31-cake-v0.5.3-released.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n[InspectCode](/dsl/resharper)\n```\n\n----------------------------------------\n\nTITLE: Linking to IProcess API in Markdown\nDESCRIPTION: Creates a markdown link to the IProcess API documentation page.\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2015-08-31-cake-v0.5.3-released.md#2025-04-23_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n[IProcess](/api/Cake.Core.IO/IProcess)\n```\n\n----------------------------------------\n\nTITLE: Unblocking downloaded PowerShell script\nDESCRIPTION: PowerShell command to unblock a downloaded script file, which may be necessary if the file is blocked due to being downloaded from the internet.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/running-builds/runners/dotnet-tool.md#2025-04-23_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nUnblock-File path\\to\\build.ps1\n```\n\n----------------------------------------\n\nTITLE: Defining Frontmatter in Markdown for Cake v0.4.3 Release Notes\nDESCRIPTION: This snippet defines the frontmatter for the Cake v0.4.3 release notes page. It specifies the title, category, and author of the post using YAML syntax within Markdown.\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2015-07-05-cake-v0.4.3-released.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Cake v0.4.3 Released\ncategory: Release Notes\nauthor: patriksvensson\n---\n```\n\n----------------------------------------\n\nTITLE: Social Icons License Declaration in Markdown\nDESCRIPTION: Markdown declaration of license information for the Social Flat Rounded Rects icon set, including creator attribution and license type.\nSOURCE: https://github.com/cake-build/website/blob/master/input/assets/img/social_flat_rounded_rects_svg/license.txt#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Social Flat Rounded Rects\n## by [Aha-Soft Team](http://www.aha-soft.com/free-icons/) \n**License:**  Creative Commons (Attribution 3.0 Unported)\n\n*Dec 26th, 2014*\n```\n\n----------------------------------------\n\nTITLE: Passing the Target Name via Command-Line (Cake .NET Tool, Cake Frosting) - PowerShell\nDESCRIPTION: Illustrates how to specify the build target from the command line using the '--target' argument with both Cake .NET Tool and Cake Frosting. By providing '--target=Publish', the build system will run the 'Publish' task. No external dependencies beyond Cake/Cake Frosting runtime; input is the target name as a parameter, no direct output except task execution.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/writing-builds/running-targets.md#2025-04-23_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n--target=Publish\n```\n\n----------------------------------------\n\nTITLE: Installing Cake .NET Tool - Local Install\nDESCRIPTION: Command to install Cake .NET tool as a local tool for a repository using the .NET CLI\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2021-03-06-cake-v1.1.0-released.md#2025-04-23_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\ndotnet tool install --local Cake.Tool\n```\n\n----------------------------------------\n\nTITLE: Installing Cake.Bakery with Chocolatey in Windows\nDESCRIPTION: Command to install Cake.Bakery using Chocolatey package manager on Windows systems.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/integrations/editors/vscode/intellisense.md#2025-04-23_snippet_0\n\nLANGUAGE: cmd\nCODE:\n```\nchoco install cake-bakery.portable\n```\n\n----------------------------------------\n\nTITLE: Inserting Cake Load Directive in Visual Studio Code\nDESCRIPTION: This snippet inserts a basic Cake load pre-processor directive. The path to the .cake file can be customized.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/integrations/editors/vscode/snippets.md#2025-04-23_snippet_3\n\nLANGUAGE: cake\nCODE:\n```\n#load \"scripts/utilities.cake\"\n```\n\n----------------------------------------\n\nTITLE: Using Break Directive in Cake Build Script\nDESCRIPTION: The break directive emits System.Diagnostics.Debugger.Break() at runtime. When used with the -debug parameter, it causes the debugger to stop at the line where it's placed. If no debugger is attached, the directive is ignored.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/writing-builds/preprocessor-directives/break.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n#break\n```\n\n----------------------------------------\n\nTITLE: Pinning a Module Version in Cake Frosting Project File - XML\nDESCRIPTION: This snippet shows how to pin a module version as a NuGet package reference within a Cake Frosting project’s .csproj or project file. By adding a <PackageReference> element for 'Cake.BuildSystems.Module' with its version set to '3.0.0', it ensures that an exact version is restored. This method requires the project to use the SDK-style project system and relies on NuGet package management. Inputs are the module's package name and version, and the output is a deterministic set of build dependencies.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/writing-builds/reproducible-builds/pinning-module-version.md#2025-04-23_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<PackageReference Include=\"Cake.BuildSystems.Module\" Version=\"3.0.0\" />\n```\n\n----------------------------------------\n\nTITLE: Pinning Tool Version via PackageReference in Cake Frosting (XML)\nDESCRIPTION: Illustrates how to pin a specific version (1.2.3) of a tool ('Tool.Foo') consumed as a NuGet package within a Cake Frosting project. This is done by adding a standard `<PackageReference>` element with a specific `Version` attribute to the project's `.csproj` file, leveraging MSBuild/NuGet's dependency management.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/writing-builds/reproducible-builds/pinning-tool-version.md#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"Tool.Foo\" Version=\"1.2.3\" />\n```\n\n----------------------------------------\n\nTITLE: Collection Initializers in Cake - After Enhancement\nDESCRIPTION: Example showing the improved collection initializer syntax that eliminates the need for explicit dictionary instantiation, making code more concise.\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2018-08-22-cake-v0.30.0-released.md#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nnew FooToolSettings\n{\n    EnvironmentVariables = { [\"FOO\"] = \"foo\" }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required NuGet Packages in Cake\nDESCRIPTION: Installation of MSBuild Extension Pack and JetBrains ReSharper CommandLine tools via NuGet package references.\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2018-06-10-cake-issues.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n#tool \"nuget:?package=MSBuild.Extension.Pack\"\n#tool \"nuget:?package=JetBrains.ReSharper.CommandLineTools\"\n```\n\n----------------------------------------\n\nTITLE: Finding Installations with Specific Components\nDESCRIPTION: Example of finding Visual Studio installations that have specific components installed\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2017-03-27-vswhere-and-visual-studio-2017-support.md#2025-04-23_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n#tool nuget:?package=vswhere\n\nDirectoryPathCollection allInstalled  = VSWhereAll(new VSWhereAllSettings { Requires = \"Microsoft.Component.MSBuild\" });\n\nforeach(var install in allInstalled)\n{\n    // Find the installation you need\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing OmniSharp Log Success: Cake Files Detection\nDESCRIPTION: Example log output showing successful detection of Cake files, indicating that the Intellisense setup is working correctly.\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2017-11-08-intellisense-vscode.md#2025-04-23_snippet_2\n\nLANGUAGE: log\nCODE:\n```\n[info]: OmniSharp.Cake.CakeProjectSystem\n    Detecting Cake files in 'c:\\Users\\mb\\src\\gh\\bakery'.\n[info]: OmniSharp.Cake.CakeProjectSystem\n    Found 29 Cake files.\n```\n\n----------------------------------------\n\nTITLE: Installing Cake Frosting Template\nDESCRIPTION: Command to install the Cake Frosting template using the .NET CLI. This is required before creating a new Cake Frosting project.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/running-builds/runners/cake-frosting.md#2025-04-23_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\ndotnet new install Cake.Frosting.Template\n```\n\n----------------------------------------\n\nTITLE: Loading Twitter Widgets Script in HTML\nDESCRIPTION: An HTML script tag that loads the Twitter widgets JavaScript library to enable embedded tweets to render properly on the webpage.\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2017-05-02-intellisense-and-intro.md#2025-04-23_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<script async src=\"https://platform.x.com/widgets.js\" charset=\"utf-8\"></script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Cake NuGet Client in Config File\nDESCRIPTION: Specifies configuration in a Cake config file to disable the in-process NuGet client. This provides an alternative method to opt out of the new default behavior.\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2018-01-17-cake-v0.25.0-released.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n[NuGet]\nUseInProcessClient=false\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Playlist for Cake Rider Plugin\nDESCRIPTION: This HTML snippet embeds a YouTube playlist showing new features of the Cake plugin for Rider. It sets the video player dimensions, source URL, and various attributes for display and interaction.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/integrations/editors/rider/resources.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/videoseries?list=PL84yg23i9GBixvjta7rPypA3oFdMK25gH\" frameborder=\"0\" gesture=\"media\" allowfullscreen></iframe>\n```\n\n----------------------------------------\n\nTITLE: Referencing Specific Cake.Frosting Version in .csproj (XML)\nDESCRIPTION: This snippet shows how to fix the version of the Cake.Frosting package in a .csproj file using a <PackageReference> element. It ensures that the exact version declared is restored with every build. Update the version string as needed to keep dependencies current; this method requires that the project use the SDK-style .csproj format and NuGet package management.\nSOURCE: https://github.com/cake-build/website/blob/master/input/docs/writing-builds/reproducible-builds/pinning-cake-version.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n&lt;PackageReference Include=\\\"Cake.Frosting\\\" Version=\\\"<?! Meta CakeLatestReleaseName /?>\\\" /&gt;\n```\n\n----------------------------------------\n\nTITLE: Initializing Typed Context in Cake Setup Method\nDESCRIPTION: Demonstrates how to create and return a typed context instance from the Cake script's Setup method. This initializes the context with values from command line arguments and the build environment.\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2018-05-31-cake-v0.28.0-released.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nSetup<MyBuildData>(setupContext =>\n{\n\treturn new MyBuildData(\n\t\tconfiguration: Argument(\"configuration\", \"Release\"),\n\t\tsignAssemblies: BuildSystem.IsRunningOnAppVeyor);\n});\n```\n\n----------------------------------------\n\nTITLE: Linking to MSIL PlatformTarget in Markdown\nDESCRIPTION: Creates a markdown link to the MSIL PlatformTarget API documentation page.\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2015-08-31-cake-v0.5.3-released.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[MSIL](/api/Cake.Common.Tools.MSBuild/PlatformTarget)\n```\n\n----------------------------------------\n\nTITLE: Linking to DupFinder DSL in Markdown\nDESCRIPTION: Creates a markdown link to the DupFinder DSL documentation page.\nSOURCE: https://github.com/cake-build/website/blob/master/input/blog/2015-08-31-cake-v0.5.3-released.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n[DupFinder](/dsl/resharper)\n```"
  }
]