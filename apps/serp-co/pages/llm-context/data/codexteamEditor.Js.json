[
  {
    "owner": "codex-team",
    "repo": "editor.js",
    "content": "TITLE: Initializing Editor.js instance\nDESCRIPTION: This JavaScript code initializes a new Editor.js instance. It imports the EditorJS class and creates an instance with a configuration object.  The `tools` property within the configuration should be populated with specific tools to be used in the editor.\nSOURCE: https://github.com/codex-team/editor.js/blob/next/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport EditorJS from '@editorjs/editorjs'\n\nconst editor = new EditorJS({\n  tools: {\n   // ... your tools\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: API Interface Definition in JavaScript\nDESCRIPTION: This JavaScript code snippet defines the structure of the API interface used in Editor.js.  It specifies the structure for `blocks`, `caret`, `sanitizer`, and `toolbar` properties as part of the public API for Editor.js.  It serves as a contract for interacting with these core modules of the editor.\nSOURCE: https://github.com/codex-team/editor.js/blob/next/docs/api.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport interface API {\n   blocks: IBlocksAPI;\n   caret: ICaretAPI;\n   sanitizer: ISanitizerAPI;\n   toolbar: IToolbarAPI;\n   // ...\n }\n```\n\n----------------------------------------\n\nTITLE: Creating Editor.js Instance (Full Configuration)\nDESCRIPTION: This snippet shows how to create an Editor.js instance with a full configuration object.  It requires a div element with the id `editorjs` in the HTML. The `holder` option specifies the ID of the element where the editor will be rendered, `tools` defines the available block tools, and `data` represents the previously saved data.\nSOURCE: https://github.com/codex-team/editor.js/blob/next/docs/installation.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar editor = new EditorJS({\n    /**\n     * Create a holder for the Editor and pass its ID\n     */\n    holder : 'editorjs',\n\n    /**\n     * Available Tools list.\n     * Pass Tool's class or Settings object for each Tool you want to use\n     */\n    tools: {\n        header: {\n          class: Header,\n          inlineToolbar : true\n        },\n        // ...\n    },\n\n    /**\n     * Previously saved data that should be rendered\n     */\n    data: {}\n});\n```\n\n----------------------------------------\n\nTITLE: Tool Shortcut Configuration in Editor.js\nDESCRIPTION: This JavaScript snippet demonstrates how to configure custom keyboard shortcuts for specific tools within the Editor.js configuration. It defines shortcuts for the Header and List tools using the `shortcut` property.\nSOURCE: https://github.com/codex-team/editor.js/blob/next/docs/usage.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar editor = new EditorJS({\n  //...\n  tools: {\n    header: {\n      class: Header,\n      shortcut: 'CMD+SHIFT+H'\n    },\n    list: {\n      class: List,\n      shortcut: 'CMD+SHIFT+L'\n    }\n  }\n  //...\n });\n```\n\n----------------------------------------\n\nTITLE: Importing Editor.js Module\nDESCRIPTION: This snippet shows how to import the Editor.js module into your JavaScript application after installing it via NPM.  It requires a module bundler like Webpack or Parcel. This imports the EditorJS class, allowing you to create instances of the editor in your code.\nSOURCE: https://github.com/codex-team/editor.js/blob/next/docs/installation.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport EditorJS from '@editorjs/editorjs';\n```\n\n----------------------------------------\n\nTITLE: Saving Data from Editor.js\nDESCRIPTION: This snippet demonstrates how to save the data from the Editor.js instance using the `editor.saver.save()` method.  The `save()` method returns a Promise that resolves with the saved data. The `savedData` object contains the content of the editor in a JSON format.\nSOURCE: https://github.com/codex-team/editor.js/blob/next/docs/installation.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\neditor.saver.save()\n  .then((savedData) => {\n    console.log(savedData);\n  });\n```\n\n----------------------------------------\n\nTITLE: Editor.js Tool Configuration Example JavaScript\nDESCRIPTION: This example shows how to configure a Tool within the Editor.js settings. It demonstrates defining the class, enabling the inline toolbar, and passing other settings for a text Tool. It also shows how to specify a default block for the editor.\nSOURCE: https://github.com/codex-team/editor.js/blob/next/docs/tools.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar editor = new EditorJS({\n  holder : 'editorjs',\n  tools: {\n    text: {\n      class: Text,\n      inlineToolbar : true,\n      // other settings..\n    },\n    header: Header\n  },\n  defaultBlock : 'text',\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Editor.js via NPM\nDESCRIPTION: This snippet demonstrates how to install the Editor.js package using NPM.  It is required to have Node.js and NPM installed.  The command will download and install the @editorjs/editorjs package and its dependencies into your project's node_modules directory.\nSOURCE: https://github.com/codex-team/editor.js/blob/next/docs/installation.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i @editorjs/editorjs\n```\n\n----------------------------------------\n\nTITLE: Editor.js API Shorthand Usage in JavaScript\nDESCRIPTION: This JavaScript code demonstrates the use of API shorthands in Editor.js.  It creates an instance of Editor.js and then uses the `focus` and `save` shorthands, which are aliases for `caret.focus` and `saver.save` respectively. The code shows a more concise way to call these commonly used API methods.\nSOURCE: https://github.com/codex-team/editor.js/blob/next/docs/api.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst editor = EditorJS();\n\neditor.focus();\neditor.save();\n```\n\n----------------------------------------\n\nTITLE: Saving Editor.js data\nDESCRIPTION: This JavaScript code demonstrates how to save the data from an Editor.js instance. The `editor.save()` method is called, which returns a Promise that resolves with the saved data. The `await` keyword is used to handle the asynchronous operation.\nSOURCE: https://github.com/codex-team/editor.js/blob/next/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = await editor.save()\n```\n\n----------------------------------------\n\nTITLE: Setting Placeholder Text in Editor.js\nDESCRIPTION: This JavaScript snippet demonstrates how to set custom placeholder text in Editor.js, which is displayed when the editor is empty. The `placeholder` option is used to specify the desired text.\nSOURCE: https://github.com/codex-team/editor.js/blob/next/docs/usage.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar editor = new EditorJS({\n  //...\n  placeholder: 'My awesome placeholder'\n  //...\n });\n```\n\n----------------------------------------\n\nTITLE: Notifier API Usage Example in JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to use the Notifier API to display messages in Editor.js.  It shows two ways to use the API: first, during Editor.js initialization with the `onReady` callback to display a message when the editor is ready, and second, within a Tool's class to display an error message. It utilizes the `editor.notifier.show` and `this.api.notifier.show` methods respectively, and depends on the `codex-notifier` package.\nSOURCE: https://github.com/codex-team/editor.js/blob/next/docs/api.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet editor = new EditorJS({\n  onReady: () => {\n    editor.notifier.show({\n      message: 'Editor is ready!'\n    });\n  },\n});\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nthis.api.notifier.show({\n  message: 'Cannot upload image. Wrong mime-type.',\n  style: 'error',\n});\n```\n\n----------------------------------------\n\nTITLE: Using the onReady Callback\nDESCRIPTION: This snippet demonstrates how to use the `onReady` callback function to execute code when the Editor.js instance is fully initialized.  The `onReady` function will be called after the editor is ready to use.  This is useful for performing actions that depend on the editor being fully loaded.\nSOURCE: https://github.com/codex-team/editor.js/blob/next/docs/installation.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar editor = new EditorJS({\n   // Other configuration properties\n\n   /**\n    * onReady callback\n    */\n   onReady: () => {console.log('Editor.js is ready to work!')}\n});\n```\n\n----------------------------------------\n\nTITLE: Using the onChange Callback\nDESCRIPTION: This snippet shows how to use the `onChange` callback function to respond to changes in the Editor.js content.  The `onChange` callback is triggered whenever the editor's content changes. The callback receives the `editorAPI` and `event` as arguments, allowing you to access the editor's API and information about the change.\nSOURCE: https://github.com/codex-team/editor.js/blob/next/docs/installation.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nvar editor = new EditorJS({\n   // Other configuration properties\n\n   /**\n    * onReady callback\n    */\n   onReady: () => {console.log('Editor.js is ready to work!')},\n\n   /**\n    * onChange callback\n    * Accepts CustomEvent describing what happened\n    */\n   onChange: (editorAPI, event) => {console.log('Now I know that Editor\\'s content changed!')}\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Tune in ES6 for Editor.js\nDESCRIPTION: This ES6 code snippet demonstrates how to create a custom Tune for Editor.js. It defines the required render and save methods. The constructor receives the Editor.js API and settings, allowing the Tune to interact with the editor and access block data. It demonstrates how to move the block down using the api.\nSOURCE: https://github.com/codex-team/editor.js/blob/next/docs/toolbar-settings.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default class YourCustomTune {\n\n  constructor({api, settings}) {\n    this.api = api;\n    this.settings = settings;\n  }\n\n  render() {\n    let someHTML = '...';\n    return someHTML;\n  }\n\n  save() {\n    // Return the important data that needs to be saved\n    return object\n  }\n\n  someMethod() {\n    // moves current block down\n    this.api.blocks.moveDown();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Cleaning Taint Strings with custom configuration in Editor.js\nDESCRIPTION: This JavaScript code snippet demonstrates the `clean` method of the `Sanitizer` module within Editor.js. It utilizes the html-janitor library to sanitize a potentially tainted string, allowing for a custom configuration to be passed, overriding the default settings. The method takes the tainted string and a custom configuration object as input and returns the sanitized string.\nSOURCE: https://github.com/codex-team/editor.js/blob/next/docs/sanitizer.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nclean(taintString, customConfig)\n```\n\n----------------------------------------\n\nTITLE: Sanitizer API Usage Example in JavaScript\nDESCRIPTION: This JavaScript code demonstrates how to use the Sanitizer API in Editor.js to clean a tainted string. It initializes a `taintString` containing potentially unsafe HTML and a `customConfig` specifying allowed HTML tags and attributes. The `this.api.sanitizer.clean` method is then called to sanitize the string based on the provided configuration. This requires HTMLJanitor as a dependency for sanitization.\nSOURCE: https://github.com/codex-team/editor.js/blob/next/docs/api.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet taintString = '<div><p style=\"font-size: 5em;\"><b></b>BlockWithText<a onclick=\"void(0)\"></div>'\nlet customConfig = {\n  b: true,\n  p: {\n    style: true,\n  },\n}\nthis.api.sanitizer.clean(taintString, customConfig);\n```\n\n----------------------------------------\n\nTITLE: Using the isReady Promise\nDESCRIPTION: This snippet demonstrates how to use the `isReady` promise to execute code after the Editor.js instance is initialized, and handle potential errors.  The `isReady` promise resolves when the editor is ready or rejects if there is an error during initialization. Using `.then` and `.catch` or `async/await` ensures that the editor is properly initialized before performing subsequent actions.\nSOURCE: https://github.com/codex-team/editor.js/blob/next/docs/installation.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar editor = new EditorJS();\n\neditor.isReady\n  .then(() => {\n    /** Do anything you need after editor initialization */\n  })\n  .catch((reason) => {\n    console.log(`Editor.js initialization failed because of ${reason}`)\n  });\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar editor = new EditorJS();\n\ntry {\n  await editor.isReady;\n  /** Do anything you need after editor initialization */\n} catch (reason) {\n  console.log(`Editor.js initialization failed because of ${reason}`)\n}\n```\n\n----------------------------------------\n\nTITLE: Tool Constructor Example JavaScript\nDESCRIPTION: This code snippet demonstrates the constructor of a Tool in Editor.js. The constructor receives data, config, and api objects as parameters. The data contains the initial data for the Tool. The config provides user-defined configuration settings. The api provides access to Editor.js's API methods.\nSOURCE: https://github.com/codex-team/editor.js/blob/next/docs/tools.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconstructor({data, config, api}) {\n  this.data = data;\n  this.api = api;\n  this.config = config;\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Holder for Editor.js\nDESCRIPTION: This JavaScript snippet demonstrates how to specify the HTML element that will hold the Editor.js instance. It shows two ways to define the `holder`: using a DOM element reference obtained with `document.querySelector`, and using the id of an element on the page.\nSOURCE: https://github.com/codex-team/editor.js/blob/next/docs/usage.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar editor = new EditorJS({\n  holder: document.querySelector('.editor'),\n})\n\nvar editor2 = new EditorJS({\n  holder: 'codex-editor' // like document.getElementById('codex-editor')\n})\n```\n\n----------------------------------------\n\nTITLE: On Paste Event Handling JavaScript\nDESCRIPTION: This snippet illustrates how to handle the `onPaste` event in a Tool class. The `onPaste` method accepts a `PasteEvent` object and uses a switch statement to determine the type of paste event (tag, pattern, or file) and then calls the appropriate handler method.\nSOURCE: https://github.com/codex-team/editor.js/blob/next/docs/tools.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nonPaste (event) {\n  switch (event.type) {\n    case 'tag':\n      const element = event.detail.data;\n\n      this.handleHTMLPaste(element);\n      break;\n\n    case 'pattern':\n      const text = event.detail.data;\n      const key = event.detail.key;\n\n      this.handlePatternPaste(key, text);\n      break;\n\n    case 'file':\n      const file = event.detail.file;\n\n      this.handleFilePaste(file);\n      break;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Editor.js Instance (Zero-configuration)\nDESCRIPTION: This snippet demonstrates how to create a basic Editor.js instance with minimal configuration.  It initializes the editor without any specific tools or data.  The first example uses the default `editorjs` id, and the second initializes the editor with no id.\nSOURCE: https://github.com/codex-team/editor.js/blob/next/docs/installation.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar editor = new EditorJS(); /** Zero-configuration */\n\n// equals\n\nvar editor = new EditorJS('editorjs');\n```\n\n----------------------------------------\n\nTITLE: Sanitizer Configuration Example JavaScript\nDESCRIPTION: This code snippet shows an example of a sanitizer configuration object. It defines which HTML tags should be allowed or removed.  In this example, the `b` and `p` tags are allowed.\nSOURCE: https://github.com/codex-team/editor.js/blob/next/docs/tools.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nlet sanitizerConfig = {\n  b: true, // leave <b>\n  p: true // leave <p>\n}\n```\n\n----------------------------------------\n\nTITLE: Automatic Sanitization Configuration JavaScript\nDESCRIPTION: This code snippet demonstrates how to configure automatic sanitization for a block.  By defining a static getter called `sanitize`, Editor.js will automatically sanitize the saved data according to the specified rules. Rules can be defined for each field in the data object.\nSOURCE: https://github.com/codex-team/editor.js/blob/next/docs/tools.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nstatic get sanitize() {\n  return {\n    text: {},\n    items: {\n      b: true, // leave <b>\n      a: false, // remove <a>\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Tooltip API Show Method Usage in JavaScript\nDESCRIPTION: This JavaScript code demonstrates how to use the `show` method of the Tooltip API in Editor.js. It shows how to display a tooltip near a specified HTML element with custom content and options. The code relies on the `codex.tooltips` library and specifies the element near which to display the tooltip, the content of the tooltip (either a string or a Node), and optional displaying options such as placement, margins, and delays.\nSOURCE: https://github.com/codex-team/editor.js/blob/next/docs/api.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nthis.api.tooltip.show(element, content, options);\n```\n\n----------------------------------------\n\nTITLE: Sanitizer Rule: Custom Handler Function JavaScript\nDESCRIPTION: This code snippet shows how to define a custom handler function for sanitizing an HTML tag. The function receives the element as input and returns a rule. The rule can be boolean, object, or function.  In the first example, the `b` tag is only allowed if its text content does not include 'bad text'. The second example demonstrates adding the `target` attribute to a link if the `href` starts with `http`.\nSOURCE: https://github.com/codex-team/editor.js/blob/next/docs/tools.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nb: function(el) {\n  return !el.textContent.includes('bad text');\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\na: function(el) {\n  let anchorHref = el.getAttribute('href');\n  if (anchorHref && anchorHref.substring(0, 4) === 'http') {\n    return {\n      href: true,\n      target: '_blank'\n    }\n  } else {\n    return {\n      href: true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Tool Prepare Method Example JavaScript\nDESCRIPTION: This snippet illustrates the static `prepare` method that allows a Tool to perform initialization tasks such as loading external scripts or inserting HTML nodes. The `prepare` method accepts the tool's configuration as an argument.\nSOURCE: https://github.com/codex-team/editor.js/blob/next/docs/tools.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nclass Tool {\n  static prepare(config) {\n    loadScript();\n    insertNodes();\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Paste Config - HTML Tags JavaScript\nDESCRIPTION: This snippet demonstrates how to configure a Tool to handle specific HTML tags when content is pasted into the editor. The `pasteConfig` getter returns an object with a `tags` property containing an array of HTML tag names. When a tag is pasted, the `onPaste` method will be called.\nSOURCE: https://github.com/codex-team/editor.js/blob/next/docs/tools.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nstatic get pasteConfig() {\n  return {\n    tags: ['H1', 'H2', 'H3', 'H4', 'H5', 'H6'],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Paste Config - HTML Tags with Attributes JavaScript\nDESCRIPTION: This example demonstrates how to configure a Tool to handle the pasting of `img` tags while retaining the `src` attribute.  The `pasteConfig` getter returns an object where the `img` tag specifies that the `src` attribute should be preserved during sanitization.\nSOURCE: https://github.com/codex-team/editor.js/blob/next/docs/tools.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nstatic get pasteConfig() {\n  return {\n    tags: [\n      {\n        img: {\n          src: true\n        }\n      }\n    ],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Wrapping Block Content with a Tune in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a Tune that wraps a Block's content with a custom HTML element. It defines a `wrap` method that accepts the Block content as an HTMLElement, wraps it in a div, and returns the modified element.  This allows modification of Block appearance.\nSOURCE: https://github.com/codex-team/editor.js/blob/next/docs/block-tunes.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass Tune {\n    wrap(blockContent) {\n        const myWrapper = document.createElement('div');\n\n        myWrapper.append(blockContent);\n\n        return myWrapper;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Conversion Configuration Example JavaScript\nDESCRIPTION: This code snippet shows an example of conversion configuration for a tool. It defines how a tool can be converted to and from other tools by specifying `export` and `import` properties. The `export` property defines which part of the tool's data will be passed to the new tool, and the `import` property specifies how the passed string will be used to create the new tool.\nSOURCE: https://github.com/codex-team/editor.js/blob/next/docs/tools.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nclass Header {\n  constructor(){\n    this.data = {\n       text: '',\n       level: 2\n    }\n  }\n\n  /**\n   * Rules specified how our Tool can be converted to/from other Tool.\n   */\n  static get conversionConfig() {\n    return {\n      export: 'text', // this property of tool data will be used as string to pass to other tool\n      import: 'text' // to this property imported string will be passed\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sanitizer Rule: Attribute Whitelist JavaScript\nDESCRIPTION: This code snippet demonstrates how to specify attributes to allow for a specific HTML tag. In this case, only the `href` attribute is allowed for the `a` tag. All other attributes will be removed.\nSOURCE: https://github.com/codex-team/editor.js/blob/next/docs/tools.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\na: {\n  href: true\n}\n```\n\n----------------------------------------\n\nTITLE: Resetting Tune Data in JavaScript\nDESCRIPTION: This snippet illustrates how to clean up data prepared for a Tune using the static `reset()` method. This method is called when the Editor is destroyed and can be used to clean up scripts or delete nodes. It has no parameters.\nSOURCE: https://github.com/codex-team/editor.js/blob/next/docs/block-tunes.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass Tune {\n  static reset() {\n    cleanUpScripts();\n    deleteNodes();\n  ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Sanitization Example JavaScript\nDESCRIPTION: This code snippet illustrates how to manually sanitize data using the `sanitizer.clean()` method.  This method should be called within the `save()` method of a block for each field that needs sanitization. It requires the tainted string and the sanitizer configuration as parameters.\nSOURCE: https://github.com/codex-team/editor.js/blob/next/docs/tools.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nsave() {\n  return {\n    text: this.api.sanitizer.clean(taintString, sanitizerConfig)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sanitizer Configuration Example JavaScript\nDESCRIPTION: Demonstrates the sanitizer configuration for an inline tool that wraps selected text with the `<b>` tag. It shows how to allow or clean attributes of the tag.\nSOURCE: https://github.com/codex-team/editor.js/blob/next/docs/tools-inline.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nstatic get sanitize() {\n  return {\n    b: {} // {} means clean all attributes. true — leave all attributes\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Autofocus in Editor.js\nDESCRIPTION: This JavaScript snippet demonstrates how to enable the autofocus feature in Editor.js, which automatically focuses the editor after the page has loaded. The `autofocus` option is set to `true` in the Editor.js configuration.\nSOURCE: https://github.com/codex-team/editor.js/blob/next/docs/usage.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar editor = new EditorJS({\n  //...\n  autofocus: true\n  //...\n });\n```\n\n----------------------------------------\n\nTITLE: Loading Editor.js Core via CDN\nDESCRIPTION: This snippet demonstrates how to include the Editor.js core script using a CDN (Content Delivery Network).  Replace `...` with the actual CDN URL. This method provides a simple way to add Editor.js to your page without needing to manage local files or dependencies.\nSOURCE: https://github.com/codex-team/editor.js/blob/next/docs/installation.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"...\"></script>\n```\n\n----------------------------------------\n\nTITLE: Tooltip API onHover Method Usage in JavaScript\nDESCRIPTION: This JavaScript code demonstrates how to use the `onHover` method of the Tooltip API in Editor.js. It shows how to automatically show a tooltip when the mouse enters a specified HTML element and hide it when the mouse leaves. The code relies on the `codex.tooltips` library and specifies the element to listen to hover events, the content of the tooltip, and optional displaying options.\nSOURCE: https://github.com/codex-team/editor.js/blob/next/docs/api.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nthis.api.tooltip.onHover(element, content, options);\n```\n\n----------------------------------------\n\nTITLE: Initializing Editor.js Container\nDESCRIPTION: This HTML snippet creates a div element with the ID 'editorjs'. This element will serve as the container for the Editor.js instance, where the editor interface will be rendered.\nSOURCE: https://github.com/codex-team/editor.js/blob/next/README.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"editorjs\"></div>\n```\n\n----------------------------------------\n\nTITLE: Tooltip API Hide Method Usage in JavaScript\nDESCRIPTION: This JavaScript code demonstrates how to use the `hide` method of the Tooltip API in Editor.js.  It shows how to hide the tooltip that is currently being displayed.  This method has no parameters. It relies on the `codex.tooltips` library.\nSOURCE: https://github.com/codex-team/editor.js/blob/next/docs/api.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nthis.api.tooltip.hide();\n```\n\n----------------------------------------\n\nTITLE: Paste Config - RegExp Patterns JavaScript\nDESCRIPTION: This snippet shows how to configure a Tool to handle specific RegExp patterns when text is pasted into the editor. The `pasteConfig` getter returns an object with a `patterns` property containing an object of named regular expressions. When a pattern is matched, the `onPaste` method will be called.\nSOURCE: https://github.com/codex-team/editor.js/blob/next/docs/tools.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nstatic get pasteConfig() {\n  return {\n    patterns: {\n      youtube: /http(?:s?):\\/\\/(?:www\\.)?youtu(?:be\\.com\\/watch\\?v=|\\.be\\/)([\\w\\-\\_]*)(&(amp;)?[\\w\\?\\‌​=]*)?/\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Paste Config - Files JavaScript\nDESCRIPTION: This example demonstrates how to configure a Tool to handle files pasted or dragged into the editor. The `pasteConfig` getter returns an object with a `files` property containing `mimeTypes` and `extensions` arrays specifying the file types the Tool can handle. When a file is pasted, the `onPaste` method will be called.\nSOURCE: https://github.com/codex-team/editor.js/blob/next/docs/tools.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nstatic get pasteConfig() {\n  return {\n    files: {\n      mimeTypes: ['image/png'],\n      extensions: ['json']\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Tune in TypeScript for Editor.js\nDESCRIPTION: This TypeScript code snippet demonstrates how to create a custom Tune for Editor.js. It implements the IBlockTune interface and defines the required render and save methods. The constructor receives the Editor.js API and settings, allowing the Tune to interact with the editor and access block data. It demonstrates how to move the block down using the api.\nSOURCE: https://github.com/codex-team/editor.js/blob/next/docs/toolbar-settings.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport IBlockTune from './block-tune';\n\nexport default class YourCustomTune implements IBlockTune {\n\n  public constructor({api, settings}) {\n    this.api = api;\n    this.settings = settings;\n  }\n\n  render() {\n    let someHTML = '...';\n    return someHTML;\n  }\n\n  save() {\n    // Return the important data that needs to be saved\n    return object\n  }\n\n  someMethod() {\n    // moves current block down\n    this.api.blocks.moveDown();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Set Caret to Block - Editor.js\nDESCRIPTION: Sets the caret position within a specified block. Takes a Block instance, a position ('start', 'end', or 'default'), and an offset. The position parameter determines where the caret is placed relative to the block's text node, with 'default' being used for any other value. The offset specifies the caret position within the text node.\nSOURCE: https://github.com/codex-team/editor.js/blob/next/docs/caret.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nCaret.setToBlock(block, position, offset)\n```\n\n----------------------------------------\n\nTITLE: Preparing Data for a Tune in JavaScript\nDESCRIPTION: This snippet shows how to prepare data for a Tune using the static `prepare()` method. This method allows for tasks like loading external scripts or creating HTML nodes before the Editor is used. It accepts the Tune's config object as a parameter.\nSOURCE: https://github.com/codex-team/editor.js/blob/next/docs/block-tunes.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass Tune {\n  static prepare(config) {\n    loadScript();\n    insertNodes();\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Header Tool from CDN\nDESCRIPTION: This snippet demonstrates how to include the Header Tool using a CDN.  This allows you to add the Header Tool functionality to your Editor.js instance without managing local files.\nSOURCE: https://github.com/codex-team/editor.js/blob/next/docs/installation.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://cdn.jsdelivr.net/npm/codex.editor.header@2.1.0/dist/bundle.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Automatic Sanitization: Subitem Rules JavaScript\nDESCRIPTION: This snippet shows how to define sanitization rules for subitems within a block's data. It is crucial to specify rules for each embedded subitem; otherwise, those items will not be sanitized. If `{}` is used, everything will be sanitized, and data will be returned without any tags.\nSOURCE: https://github.com/codex-team/editor.js/blob/next/docs/tools.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nstatic get sanitize() {\n  return {\n    text: {},\n    items: {}, // this rules will be used for all properties of this object\n    // or\n    items: {\n      // other objects here won't be sanitized\n      subitems: {\n        // leave <a> and <b> in subitems\n        a: true,\n        b: true,\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Conversion Configuration: Export Function JavaScript\nDESCRIPTION: This code snippet demonstrates how to define the `export` configuration as a function.  The function accepts the tool's data and returns a string to export.  In this example, all list items are concatenated into a string separated by dots.\nSOURCE: https://github.com/codex-team/editor.js/blob/next/docs/tools.md#_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nclass ListTool {\n  constructor(){\n    this.data = {\n      items: [\n        'Fisrt item',\n        'Second item',\n        'Third item'\n      ],\n      type: 'ordered'\n    }\n  }\n\n  static get conversionConfig() {\n    return {\n      export: (data) => {\n        return data.items.join('.'); // in this example, all list items will be concatenated to an export string\n      },\n      // ... import rule\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Conversion Configuration: Import Function JavaScript\nDESCRIPTION: This code snippet illustrates how to define the `import` configuration as a function. The function receives the exported string and returns the data object for the new tool. In this example, the string is split by a dot, and the resulting array is used to create the list items.\nSOURCE: https://github.com/codex-team/editor.js/blob/next/docs/tools.md#_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nclass ListTool {\n  constructor(data){\n    this.data = data || {\n      items: [],\n      type: 'unordered'\n    }\n  }\n\n  static get conversionConfig() {\n    return {\n      // ... export rule\n\n      /**\n       * In this example, List Tool creates items by splitting original text by a dot symbol.\n       */\n      import: (string) => {\n        const items = string.split('.');\n\n        return {\n          items: items.filter( (text) => text.trim() !== ''),\n          type: 'unordered'\n        };\n      }\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Tool Reset Method Example JavaScript\nDESCRIPTION: This example shows the static `reset` method, which allows a Tool to clean up any data it prepared during the `prepare` method call. This method is used when the Editor.js instance is destroyed.\nSOURCE: https://github.com/codex-team/editor.js/blob/next/docs/tools.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nclass Tool {\n  static reset() {\n    cleanUpScripts();\n    deleteNodes();\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sanitizing Tune HTML in JavaScript\nDESCRIPTION: This snippet shows how to define the sanitize configuration for a Tune using the static `get sanitize()` method. This configuration prevents the Editor from trimming the Tune's HTML markup on save. The example allows `sup` tags.\nSOURCE: https://github.com/codex-team/editor.js/blob/next/docs/block-tunes.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass Tune {\n  static get sanitize() {\n    return {\n      sup: true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Set Caret to Last Block - Editor.js\nDESCRIPTION: Sets the caret position to the end of the last block in the Editor. If the last block is not empty, it inserts a new empty block after it and places the caret there. This ensures the user can immediately start typing in a new block.\nSOURCE: https://github.com/codex-team/editor.js/blob/next/docs/caret.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nCaret.setToTheLastBlock()\n```\n\n----------------------------------------\n\nTITLE: Disable Paste Handling JavaScript\nDESCRIPTION: This snippet shows how to disable paste handling for a specific Tool. By returning `false` as the value of the `pasteConfig` getter, any paste events fired on the Tool will not be processed.\nSOURCE: https://github.com/codex-team/editor.js/blob/next/docs/tools.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nstatic get pasteConfig {\n  return false;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Log Level in Editor.js\nDESCRIPTION: This JavaScript snippet demonstrates how to configure the log level for Editor.js console messages using the `logLevel` property. Different log levels can be set to control the verbosity of messages.\nSOURCE: https://github.com/codex-team/editor.js/blob/next/docs/usage.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar editor = new EditorJS({\n  //...\n  logLevel: 'WARN'\n  //..\n})\n```\n\n----------------------------------------\n\nTITLE: Specifying Title in TypeScript\nDESCRIPTION: Shows how to specify a title for an inline tool using a static getter. This title can be used in tooltips.\nSOURCE: https://github.com/codex-team/editor.js/blob/next/docs/tools-inline.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport default class BoldInlineTool implements InlineTool {\n  /**\n   * Specifies Tool as Inline Toolbar Tool\n   *\n   * @return {boolean}\n   */\n  public static isInline = true;\n\n  /**\n   * Title for hover-tooltip\n   */\n  public static title: string = 'Bold';\n\n  // ... other methods\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Editor.js via NPM\nDESCRIPTION: This command installs the core Editor.js package using Node Package Manager (NPM). This is the first step in setting up Editor.js for use in a project.\nSOURCE: https://github.com/codex-team/editor.js/blob/next/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @editorjs/editorjs\n```\n\n----------------------------------------\n\nTITLE: Loading Editor.js Core from Local File\nDESCRIPTION: This snippet demonstrates how to include the Editor.js core script by referencing a local file.  It requires that you have a copy of `editor.js` in your project directory. It is important to ensure that the path to `editor.js` is correct relative to your HTML file.\nSOURCE: https://github.com/codex-team/editor.js/blob/next/docs/installation.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"editor.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Bumping Version using Yarn\nDESCRIPTION: This command is used within a workflow to bump the package version, creating a prerelease version with a specified preid (e.g., 'rc'). The `--no-git-tag-version` flag prevents the command from creating a git tag.\nSOURCE: https://github.com/codex-team/editor.js/blob/next/docs/releases.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn version --prerelease --preid rc --no-git-tag-version\n```"
  }
]