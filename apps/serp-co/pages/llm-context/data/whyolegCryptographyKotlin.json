[
  {
    "owner": "whyoleg",
    "repo": "cryptography-kotlin",
    "content": "TITLE: AES-GCM Encryption and Decryption in Kotlin\nDESCRIPTION: This code snippet shows how to perform AES-GCM encryption and decryption using the cryptography-kotlin library. It covers key generation with a 256-bit key size, data encryption and decryption, and key encoding/decoding processes.\nSOURCE: https://github.com/whyoleg/cryptography-kotlin/blob/main/docs/examples.md#2025-04-21_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\n// getting default provider\nval provider = CryptographyProvider.Default\n// getting AES-GCM algorithm\nval aesGcm = provider.get(AES.GCM)\n\n// creating key generator with specified key size\nval keyGenerator = aesGcm.keyGenerator(SymmetricKeySize.B256)\n\n// generating an AES key\n//  types here and below are not required, and just needed to hint reader\nval key: AES.GCM.Key = keyGenerator.generateKey()\n\n// encrypting data\n//  for simplicity of example, we will use default parameters\nval cipher = key.cipher()\nval ciphertext: ByteArray = cipher.encrypt(plaintext = \"text1\".encodeToByteArray())\n\n// decrypting data, will print `text1`\nprintln(cipher.decrypt(ciphertext = ciphertext).decodeToString())\n\n// key also can be encoded and decoded\nval encodedKey: ByteArray = key.encodeTo(AES.Key.Format.RAW)\nval decodedKey: AES.GCM.Key = aesGcm.keyDecoder().decodeFrom(AES.Key.Format.RAW, encodedKey)\n\nval decodedKeyCipher = decodedKey.cipher()\n// decrypting data with the cipher with the same key, will print `text1`\nprintln(decodedKeyCipher.decrypt(ciphertext = ciphertext).decodeToString())\n```\n\n----------------------------------------\n\nTITLE: ECDSA Key Pair Generation and Signature Verification in Kotlin\nDESCRIPTION: This example demonstrates ECDSA key pair generation, digital signature creation and verification, and key encoding/decoding using the cryptography-kotlin library. It uses the P-521 elliptic curve and SHA-512 for digest generation in the signature process.\nSOURCE: https://github.com/whyoleg/cryptography-kotlin/blob/main/docs/examples.md#2025-04-21_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\n// getting default provider\nval provider = CryptographyProvider.Default\n// getting ECDSA algorithm\nval ecdsa = provider.get(ECDSA)\n\n// creating key generator with the specified curve\nval keyPairGenerator = ecdsa.keyPairGenerator(EC.Curve.P521)\n\n// generating ECDSA key pair\n//  types here and below are not required, and just needed to hint reader\nval keyPair: ECDSA.KeyPair = keyPairGenerator.generateKey()\n\n// generating signature using privateKey\nval signature: ByteArray =\n    keyPair.privateKey.signatureGenerator(digest = SHA512).generateSignature(\"text1\".encodeToByteArray())\n\n// verifying signature with publicKey, note, digest should be the same\nval verificationResult: Boolean =\n    keyPair.publicKey.signatureVerifier(digest = SHA512).verifySignature(\"text1\".encodeToByteArray(), signature)\n\n// will print true\nprintln(verificationResult)\n\n// key also can be encoded and decoded\nval encodedPublicKey: ByteArray = keyPair.publicKey.encodeTo(EC.Key.Format.DER)\n// note, the curve should be the same\nval decodedPublicKey: ECDSA.PublicKey = ecdsa.publicKeyDecoder(EC.Curve.P521).decodeFrom(EC.Key.Format.DER, encodedKey)\n\nval decodedKeyVerificationResult: Boolean =\n    decodedPublicKey.signatureVerifier(digest = SHA512).verifySignature(\"text1\".encodeToByteArray(), signature)\n\n// will print true\nprintln(decodedKeyVerificationResult)\n```\n\n----------------------------------------\n\nTITLE: HMAC Key Generation and Signature Verification in Kotlin\nDESCRIPTION: This example illustrates the process of generating HMAC keys, creating and verifying MAC signatures, and encoding/decoding keys using the cryptography-kotlin library. It demonstrates key generation with SHA-512, signature generation and verification, and key encoding/decoding operations.\nSOURCE: https://github.com/whyoleg/cryptography-kotlin/blob/main/docs/examples.md#2025-04-21_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n// getting default provider\nval provider = CryptographyProvider.Default\n// getting HMAC algorithm\nval hmac = provider.get(HMAC)\n\n// creating key generator with specified Digest algorithm\nval keyGenerator = hmac.keyGenerator(SHA512)\n\n// generating HMAC key\n//  types here and below are not required, and just needed to hint reader\nval key1: HMAC.Key = keyGenerator.generateKey()\n// will generate different key\nval key2: HMAC.Key = keyGenerator.generateKey()\n\n// generating signature\nval signature1: ByteArray = key1.signatureGenerator().generateSignature(\"text1\".encodeToByteArray())\n// using different key will provide different signature\nval signature2: ByteArray = key2.signatureGenerator().generateSignature(\"text1\".encodeToByteArray())\n\n// will print false\nprintln(signature1.contentEquals(signature2))\n\n// we also, of course, can verify signature\nval verificationResult: Boolean = key1.signatureVerifier().verifySignature(\"text1\".encodeToByteArray(), signature1)\n// will print true\nprintln(verificationResult)\n\n// key also can be encoded and decoded\nval encodedKey1: ByteArray = key1.encodeTo(HMAC.Key.Format.RAW)\nval decodedKey1: HMAC.Key = hmac.keyDecoder(SHA512).decodeFrom(HMAC.Key.Format.RAW, encodedKey1)\n\nval decodedKeyVerificationResult: Boolean = decodedKey1.signatureVerifier().verifySignature(\"text1\".encodeToByteArray(), signature1)\n// will print true\nprintln(decodedKeyVerificationResult)\n```\n\n----------------------------------------\n\nTITLE: Hashing Example using SHA512 in Kotlin\nDESCRIPTION: Demonstrates how to use the cryptography-kotlin library to create a SHA512 hash of a string. This example showcases the library's simple API for performing cryptographic operations.\nSOURCE: https://github.com/whyoleg/cryptography-kotlin/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nCryptographyProvider.Default\n    .get(SHA512)\n    .hasher()\n    .hash(\"Kotlin is Awesome\".encodeToByteArray())\n```\n\n----------------------------------------\n\nTITLE: Generating SHA-512 Digest in Kotlin\nDESCRIPTION: This snippet demonstrates how to create a SHA-512 digest of binary data using the cryptography-kotlin library. It shows the process of obtaining a default provider, getting the SHA512 algorithm, and using a hasher to generate digests.\nSOURCE: https://github.com/whyoleg/cryptography-kotlin/blob/main/docs/examples.md#2025-04-21_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n// getting default provider\nval provider = CryptographyProvider.Default\n// getting SHA512 algorithm, which only provides hasher\n//  types here and below are not required, and just needed to hint reader\nval hasher: Hasher = provider.get(SHA512).hasher()\n// now we can use hasher to create digest\nval digest1: ByteArray = hasher.hash(\"text1\".encodeToByteArray())\nval digest2: ByteArray = hasher.hash(\"text1\".encodeToByteArray())\n\n// will print true\nprintln(digest1.contentEquals(digest2))\n```\n\n----------------------------------------\n\nTITLE: Using SHA512 Hashing with Cryptography-Kotlin\nDESCRIPTION: Example demonstrating how to use the default cryptography provider to access the SHA512 algorithm and create a hash from a string. Shows the core API pattern of accessing algorithms and operations.\nSOURCE: https://github.com/whyoleg/cryptography-kotlin/blob/main/cryptography-core/README.md#2025-04-21_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nCryptographyProvider.Default\n    .get(SHA512)\n    .hasher()\n    .hash(\"Kotlin is Awesome\".encodeToByteArray())\n```\n\n----------------------------------------\n\nTITLE: Generating Random Bytes Using CryptographyRandom\nDESCRIPTION: Example showing how to generate a byte array of cryptographically secure random numbers using the CryptographyRandom utility. The example creates a 20-byte array of random data.\nSOURCE: https://github.com/whyoleg/cryptography-kotlin/blob/main/cryptography-random/README.md#2025-04-21_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval bytes: ByteArray = CryptographyRandom.nextBytes(20)\n```\n\n----------------------------------------\n\nTITLE: Encoding RSA Public Key using SubjectPublicKeyInfo in Kotlin\nDESCRIPTION: Example showing how to encode an RSA public key using SubjectPublicKeyInfo structure with DER encoding. The code demonstrates creation of ASN.1 DER-encoded public key format using the cryptography-kotlin library.\nSOURCE: https://github.com/whyoleg/cryptography-kotlin/blob/main/cryptography-serialization/asn1/modules/README.md#2025-04-21_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval rsaPublicKey: ByteArray = TODO(\"...\")\n\nval spkiPublicKey: ByteArray = DER.encodeToByteArray(\n    SubjectPublicKeyInfo(ObjectIdentifier.RSA, rsaPublicKey)\n)\n```\n\n----------------------------------------\n\nTITLE: Encoding and Decoding PEM Content in Kotlin\nDESCRIPTION: Demonstrates how to encode content to PEM format and decode PEM content back to its original form. The example shows encoding a string as PEM with a KEY label and decoding a PEM content with an UNKNOWN label.\nSOURCE: https://github.com/whyoleg/cryptography-kotlin/blob/main/cryptography-serialization/pem/README.md#2025-04-21_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval encodedPemContent: String = PEM.encode(\n    PemContent(\n        label = PemLabel(\"KEY\"),\n        bytes = \"Hello World\".encodeToByteArray()\n    )\n)\n\nprintln(encodedPemContent)\n\nval decodedPemContent: PemContent = PEM.decode(\n    \"\"\"\n    -----BEGIN UNKNOWN-----\n    SGVsbG8gV29ybGQ=\n    -----END UNKNOWN-----\n    \n    \"\"\".trimIndent(),\n)\n\nprintln(decodedPemContent.bytes.decodeToString()) // prints \"Hello World\"\n```\n\n----------------------------------------\n\nTITLE: Implementing ASN.1/DER Serialization in Kotlin\nDESCRIPTION: Demonstrates how to create a serializable class for algorithm identification and perform DER encoding/decoding operations. Shows both serialization to bytes and deserialization back to the original object structure.\nSOURCE: https://github.com/whyoleg/cryptography-kotlin/blob/main/cryptography-serialization/asn1/README.md#2025-04-21_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n@Serializable\nclass SimpleAlgorithmIdentifier(\n    val algorithm: ObjectIdentifier,\n    val parameters: Nothing?,\n)\n\nval algorithm = SimpleAlgorithmIdentifier(ObjectIdentifier(\"1.2.840.113549.1.1.11\"), null)\n\n// encoding\nval bytes = DER.encodeToByteArray(algorithm)\n\nprintln(bytes.toHexString()) // prints \"300d06092a864886f70d01010b0500\"\n\n// decoding\nval decoded = DER.decodeFromByteArray<SimpleAlgorithmIdentifier>(bytes)\n\nprintln(decoded.algorithm.value) // prints \"1.2.840.113549.1.1.11\"\n```\n\n----------------------------------------\n\nTITLE: Using BigInt in Kotlin\nDESCRIPTION: This code demonstrates basic usage of the BigInt class, showing string conversion and comparison operations.\nSOURCE: https://github.com/whyoleg/cryptography-kotlin/blob/main/cryptography-bigint/README.md#2025-04-21_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval bigInt: BigInt = \"1232186768767\".toBigInt()\n\nprintln(bigInt > 0) // prints \"true\"\n```\n\n----------------------------------------\n\nTITLE: Using Custom Java Providers with BouncyCastle in Kotlin\nDESCRIPTION: Example of creating a CryptographyProvider from a custom Java provider like BouncyCastle to support algorithms not available in the default JDK provider. This is useful for algorithms like SHA3 on JDK 8 or specific curve parameters like secp256k1 for ECDSA.\nSOURCE: https://github.com/whyoleg/cryptography-kotlin/blob/main/cryptography-providers/jdk/README.md#2025-04-21_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval provider = CryptographyProvider.JDK(BouncyCastleProvider())\n\n// get some algorithm which not supported on a JDK version or platform (in case of Android)\nprovider.get(SHA512)\n```\n\n----------------------------------------\n\nTITLE: Using Apple Cryptography Provider in Kotlin\nDESCRIPTION: Example showing how to obtain the Apple CryptographyProvider and access cryptographic algorithms. Shows how to get a specific algorithm (SHA512) from either the Apple provider or the default provider.\nSOURCE: https://github.com/whyoleg/cryptography-kotlin/blob/main/cryptography-providers/apple/README.md#2025-04-21_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval provider = CryptographyProvider.Apple // or CryptographyProvider.Default \n\n// get some algorithm\nprovider.get(SHA512)\n```\n\n----------------------------------------\n\nTITLE: Using CryptographyProvider.Openssl3 Example in Kotlin\nDESCRIPTION: Shows how to obtain and use the OpenSSL3 cryptography provider in Kotlin, including getting a specific algorithm (SHA512).\nSOURCE: https://github.com/whyoleg/cryptography-kotlin/blob/main/cryptography-providers/openssl3/README.md#2025-04-21_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval provider = CryptographyProvider.Openssl3 // or CryptographyProvider.Default\n\n// get some algorithm\nprovider.get(SHA512)\n```\n\n----------------------------------------\n\nTITLE: Initializing WebCrypto Cryptography Provider in Kotlin\nDESCRIPTION: Demonstrates how to initialize and use the WebCrypto CryptographyProvider. It shows obtaining the provider instance and accessing a specific algorithm (SHA512).\nSOURCE: https://github.com/whyoleg/cryptography-kotlin/blob/main/cryptography-providers/webcrypto/README.md#2025-04-21_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval provider = CryptographyProvider.WebCrypto // or CryptographyProvider.Default\n\n// get some algorithm\nprovider.get(SHA512)\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of JDK Cryptography Provider in Kotlin\nDESCRIPTION: Simple example showing how to use the default JDK cryptography provider or explicitly specify it. The provider object allows access to various cryptographic algorithms through the get() method.\nSOURCE: https://github.com/whyoleg/cryptography-kotlin/blob/main/cryptography-providers/jdk/README.md#2025-04-21_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval provider = CryptographyProvider.JDK // or CryptographyProvider.Default\n\n// get some algorithm\nprovider.get(SHA512)\n```\n\n----------------------------------------\n\nTITLE: Adding Dependencies for cryptography-kotlin in Gradle\nDESCRIPTION: Shows how to add the necessary dependencies for using cryptography-kotlin in a Kotlin Multiplatform project. It includes dependencies for core functionality and platform-specific providers.\nSOURCE: https://github.com/whyoleg/cryptography-kotlin/blob/main/README.md#2025-04-21_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nkotlin {\n    sourceSets {\n        commonMain.dependencies {\n            implementation(\"dev.whyoleg.cryptography:cryptography-core:0.4.0\")\n        }\n        // or androidMain\n        jvmMain.dependencies {\n            implementation(\"dev.whyoleg.cryptography:cryptography-provider-jdk:0.4.0\")\n        }\n        appleMain.dependencies {\n            implementation(\"dev.whyoleg.cryptography:cryptography-provider-apple:0.4.0\")\n            // or openssl3 provider with better algorithms coverage and other native targets support  \n            // implementation(\"dev.whyoleg.cryptography:cryptography-provider-openssl3-prebuilt:0.4.0\")\n        }\n        wasmJsMain.dependencies {\n            implementation(\"dev.whyoleg.cryptography:cryptography-provider-webcrypto:0.4.0\")\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle Version Catalog Import\nDESCRIPTION: Configuration for settings.gradle.kts to import the cryptography library's version catalog. Enables type-safe dependency management through a predefined catalog.\nSOURCE: https://github.com/whyoleg/cryptography-kotlin/blob/main/docs/gradle-version-catalog.md#2025-04-21_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ndependencyResolutionManagement {\n    versionCatalogs {\n        create(\"cryptographyLibs\") {\n            from(\"dev.whyoleg.cryptography:cryptography-version-catalog:0.4.0\")\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Version Catalog TOML Configuration\nDESCRIPTION: TOML configuration for libs.versions.toml defining cryptography library versions and dependencies. Provides manual version catalog setup for projects with existing catalogs.\nSOURCE: https://github.com/whyoleg/cryptography-kotlin/blob/main/docs/gradle-version-catalog.md#2025-04-21_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[versions]\ncryptography = \"0.4.0\"\n\n[libraries]\ncryptography-core = { group = \"dev.whyoleg.cryptography\", name = \"cryptography-core\", version.ref = \"cryptography\" }\ncryptography-provider-apple = { group = \"dev.whyoleg.cryptography\", name = \"cryptography-provider-apple\", version.ref = \"cryptography\" }\ncryptography-provider-jdk = { group = \"dev.whyoleg.cryptography\", name = \"cryptography-provider-jdk\", version.ref = \"cryptography\" }\ncryptography-provider-openssl3-prebuilt = { group = \"dev.whyoleg.cryptography\", name = \"cryptography-provider-openssl3-prebuilt\", version.ref = \"cryptography\" }\ncryptography-provider-webcrypto = { group = \"dev.whyoleg.cryptography\", name = \"cryptography-provider-webcrypto\", version.ref = \"cryptography\" }\ncryptography-random = { group = \"dev.whyoleg.cryptography\", name = \"cryptography-random\", version.ref = \"cryptography\" }\n```\n\n----------------------------------------\n\nTITLE: Implementing Cryptography-Kotlin BOM in Gradle Dependencies\nDESCRIPTION: Shows how to use the cryptography-kotlin BOM in a Gradle build file to import dependencies without specifying versions. This enables automatic version alignment across all modules from the library.\nSOURCE: https://github.com/whyoleg/cryptography-kotlin/blob/main/docs/bom.md#2025-04-21_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ndependencies {\n    implementation(platform(\"dev.whyoleg.cryptography:cryptography-bom:0.4.0\"))\n\n    // now you can declare other dependencies without a version \n    implementation(\"dev.whyoleg.cryptography:cryptography-core\")\n    // some provider\n    implementation(\"dev.whyoleg.cryptography:cryptography-provider-jdk\")\n}\n```\n\n----------------------------------------\n\nTITLE: Using Cryptography Dependencies with Version Catalog\nDESCRIPTION: Example of adding cryptography dependencies in build.gradle.kts using the imported version catalog. Shows how to include core library and provider implementations.\nSOURCE: https://github.com/whyoleg/cryptography-kotlin/blob/main/docs/gradle-version-catalog.md#2025-04-21_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ndependencies {\n    implementation(cryptographyLibs.core)\n    // some provider\n    implementation(cryptographyLibs.provider.jdk)\n}\n```\n\n----------------------------------------\n\nTITLE: Using Dependencies with Manual Version Catalog\nDESCRIPTION: Example of using cryptography dependencies in build.gradle.kts with a manually configured version catalog in TOML format.\nSOURCE: https://github.com/whyoleg/cryptography-kotlin/blob/main/docs/gradle-version-catalog.md#2025-04-21_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\ndependencies {\n    implementation(libc.cryptography.core)\n    // some provider\n    implementation(libs.cryptography.provider.jdk)\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Snapshot Dependencies for cryptography-kotlin\nDESCRIPTION: Demonstrates how to add snapshot dependencies for the development version of cryptography-kotlin. This includes adding the Sonatype snapshot repository and the core dependency.\nSOURCE: https://github.com/whyoleg/cryptography-kotlin/blob/main/README.md#2025-04-21_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nrepositories {\n    maven(\"https://s01.oss.sonatype.org/content/repositories/snapshots/\")\n}\ndependencies {\n    implementation(\"dev.whyoleg.cryptography:cryptography-core:0.4.1-SNAPSHOT\")\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Cryptography-Core Dependency with Gradle\nDESCRIPTION: Shows how to include the cryptography-core dependency in a Kotlin project using Gradle build configuration.\nSOURCE: https://github.com/whyoleg/cryptography-kotlin/blob/main/cryptography-core/README.md#2025-04-21_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ndependencies {\n    implementation(\"dev.whyoleg.cryptography:cryptography-core:0.4.0\")\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Cryptography Random Dependency\nDESCRIPTION: Gradle dependency configuration snippet showing how to include the cryptography-random library in a Kotlin project. Uses version 0.4.0 of the library.\nSOURCE: https://github.com/whyoleg/cryptography-kotlin/blob/main/cryptography-random/README.md#2025-04-21_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ndependencies {\n    implementation(\"dev.whyoleg.cryptography:cryptography-random:0.4.0\")\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Apple Cryptography Provider Dependency in Gradle\nDESCRIPTION: Gradle dependency configuration to add the cryptography-provider-apple library to a Kotlin project. Specifies the required artifact coordinates for importing the library.\nSOURCE: https://github.com/whyoleg/cryptography-kotlin/blob/main/cryptography-providers/apple/README.md#2025-04-21_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ndependencies {\n    implementation(\"dev.whyoleg.cryptography:cryptography-provider-apple:0.4.0\")\n}\n```\n\n----------------------------------------\n\nTITLE: Including OpenSSL3 Provider Dependencies in Kotlin Projects\nDESCRIPTION: Demonstrates how to add the OpenSSL3 provider dependencies to a Kotlin project, showing all three possible module options.\nSOURCE: https://github.com/whyoleg/cryptography-kotlin/blob/main/cryptography-providers/openssl3/README.md#2025-04-21_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ndependencies {\n    implementation(\"dev.whyoleg.cryptography:cryptography-provider-openssl3-api:0.4.0\")\n    // or\n    implementation(\"dev.whyoleg.cryptography:cryptography-provider-openssl3-shared:0.4.0\")\n    // or\n    implementation(\"dev.whyoleg.cryptography:cryptography-provider-openssl3-prebuilt:0.4.0\")\n}\n```\n\n----------------------------------------\n\nTITLE: Adding JDK Cryptography Provider Dependency in Kotlin Projects\nDESCRIPTION: Dependency declaration for adding the cryptography-provider-jdk module to Kotlin projects. This allows using the JDK implementation of CryptographyProvider.\nSOURCE: https://github.com/whyoleg/cryptography-kotlin/blob/main/cryptography-providers/jdk/README.md#2025-04-21_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ndependencies {\n    implementation(\"dev.whyoleg.cryptography:cryptography-provider-jdk:0.4.0\")\n}\n```\n\n----------------------------------------\n\nTITLE: Adding WebCrypto Cryptography Provider Dependency in Kotlin\nDESCRIPTION: Shows how to add the WebCrypto cryptography provider dependency to a Kotlin project using the Gradle dependency configuration.\nSOURCE: https://github.com/whyoleg/cryptography-kotlin/blob/main/cryptography-providers/webcrypto/README.md#2025-04-21_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ndependencies {\n    implementation(\"dev.whyoleg.cryptography:cryptography-provider-webcrypto:0.4.0\")\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Cryptography ASN.1 Module Dependency in Kotlin\nDESCRIPTION: Gradle dependency configuration showing how to include the cryptography-serialization-asn1-modules library in a project. The dependency uses version 0.4.0 of the library.\nSOURCE: https://github.com/whyoleg/cryptography-kotlin/blob/main/cryptography-serialization/asn1/modules/README.md#2025-04-21_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ndependencies {\n    implementation(\"dev.whyoleg.cryptography:cryptography-serialization-asn1-modules:0.4.0\")\n}\n```\n\n----------------------------------------\n\nTITLE: Adding PEM Module Dependency in Kotlin Project\nDESCRIPTION: Shows how to include the cryptography-serialization-pem module as a dependency in a Kotlin project using the Gradle dependency declaration.\nSOURCE: https://github.com/whyoleg/cryptography-kotlin/blob/main/cryptography-serialization/pem/README.md#2025-04-21_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ndependencies {\n    implementation(\"dev.whyoleg.cryptography:cryptography-serialization-pem:0.4.0\")\n}\n```\n\n----------------------------------------\n\nTITLE: Adding ASN.1/DER Dependency in Kotlin Project\nDESCRIPTION: Shows how to include the cryptography-serialization-asn1 dependency in a Kotlin project's build configuration.\nSOURCE: https://github.com/whyoleg/cryptography-kotlin/blob/main/cryptography-serialization/asn1/README.md#2025-04-21_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ndependencies {\n    implementation(\"dev.whyoleg.cryptography:cryptography-serialization-asn1:0.4.0\")\n}\n```\n\n----------------------------------------\n\nTITLE: Adding BigInt Dependency to Kotlin Project\nDESCRIPTION: This snippet shows how to add the cryptography-bigint library dependency to a Kotlin project using Gradle.\nSOURCE: https://github.com/whyoleg/cryptography-kotlin/blob/main/cryptography-bigint/README.md#2025-04-21_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ndependencies {\n    implementation(\"dev.whyoleg.cryptography:cryptography-bigint:0.4.0\")\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry\nDESCRIPTION: Changelog entry documenting version history, features, breaking changes and improvements for the cryptography-kotlin library. Includes details about algorithm support, API changes, and platform compatibility.\nSOURCE: https://github.com/whyoleg/cryptography-kotlin/blob/main/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# CHANGELOG\n\n## 0.4.0 – Secret derivation, more algorithms, kotlinx-io\n\n> Published 12 Oct 2024\n\n### Features\n\n* Ecliptic curves improvements:\n    * Implement ECDH via a new shared secret derivation API\n    * Support ECDSA in Apple provider\n    * Support both ECDSA signature formats for all providers\n    * Added RAW private key encoding (encoding secret value)\n    * Added SEC1/RFC5915 private key encoding\n* New algorithms:\n    * Support for PBKDF2 and HKDF via a new secret derivation API\n    * Legacy algorithms supported. Make sure you really need them before use:\n        * AES-ECB – JDK name AES/ECB/PKCS1Padding or AES/ECB/NoPadding\n        * RSA-PKCS1 (encryption) – JDK name RSA/ECB/PKCS1Padding\n        * RSA (encryption) – JDK name RSA/ECB/NoPadding\n```\n\n----------------------------------------\n\nTITLE: Markdown Tables Showing Cryptography Support Matrix\nDESCRIPTION: Tables detailing provider support across different targets and algorithms, including support status indicators (✅ for supported, ➖ for not applicable, ❌ for not supported). Shows comprehensive comparison of cryptographic operations like Digest, MAC, Symmetric/Public-key encryption, Digital Signatures, Key Agreement, and PRF/KDF across different providers.\nSOURCE: https://github.com/whyoleg/cryptography-kotlin/blob/main/docs/providers/index.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Target                                                                                        | jdk | webcrypto | apple | openssl3        |\n|-----------------------------------------------------------------------------------------------|-----|-----------|-------|------------------|\n| jvm                                                                                           | ✅   | ➖         | ➖     | ❌               |\n| js                                                                                            | ➖   | ✅         | ➖     | ❌               |\n| wasmJs                                                                                        | ➖   | ✅         | ➖     | ❌               |\n| wasmWasi                                                                                      | ➖   | ➖         | ➖     | ❌               |\n| iosX64<br/>iosSimulatorArm64<br/>iosArm64                                                     | ➖   | ➖         | ✅     | ✅ prebuilt only |\n| watchosX64<br/>watchosArm32<br/>watchosArm64<br/>watchosSimulatorArm64<br/>watchosDeviceArm64 | ➖   | ➖         | ✅     | ✅ prebuilt only |\n| tvosX64<br/>tvosArm64<br/>tvosSimulatorArm64                                                  | ➖   | ➖         | ✅     | ✅ prebuilt only |\n| macosX64<br/>macosArm64                                                                       | ➖   | ➖         | ✅     | ✅               |\n| linuxX64<br/>linuxArm64                                                                       | ➖   | ➖         | ➖     | ✅               |\n| mingwX64                                                                                      | ➖   | ➖         | ➖     | ✅               |\n| androidNativeX64<br/>androidNativeX86<br/>androidNativeArm64<br/>androidNativeArm32           | ➖   | ➖         | ➖     | ✅ prebuilt only |\n```"
  }
]