[
  {
    "owner": "metaplex-foundation",
    "repo": "metaplex-program-library",
    "content": "TITLE: Installing mpl-nft-packs Package using npm (Shell)\nDESCRIPTION: This command installs the `@metaplex-foundation/mpl-nft-packs` package using npm and saves it as a dependency in the project's `package.json` file. This is the standard way to add the NFT Packs SDK to a Node.js project.\nSOURCE: https://github.com/metaplex-foundation/metaplex-program-library/blob/master/nft-packs/js/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @metaplex-foundation/mpl-nft-packs --save\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies with Yarn - Shell\nDESCRIPTION: Installs all necessary JavaScript dependencies for the project using Yarn, which is required for subsequent build steps and script executions. No additional parameters are needed; just run this command from the project root. Outputs the node modules for use by scripts and the SDK.\nSOURCE: https://github.com/metaplex-foundation/metaplex-program-library/blob/master/hydra/program/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Running Development and Test Scripts with Yarn - Shell\nDESCRIPTION: These commands start the amman local validator, build the project artifacts, and execute the test suite for the mpl-hydra SDK. Dependencies include Yarn and the proper project setup. 'yarn amman:start' initiates the test blockchain environment, 'yarn build' compiles the SDK, and 'yarn test' runs all defined tests. They are typically run sequentially in the project's root directory and are required for local development and verification.\nSOURCE: https://github.com/metaplex-foundation/metaplex-program-library/blob/master/hydra/js/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn amman:start\nyarn build\nyarn test\n```\n\n----------------------------------------\n\nTITLE: Starting Local Validator and Running Tests Sequentially with Yarn - Shell\nDESCRIPTION: Starts the Amman local validator followed by the test suite in one session, ensuring tests are run against a freshly bootstrapped local blockchain environment. Useful for convenient repeated testing without manual validator setup. Both commands should be run in the project root directory.\nSOURCE: https://github.com/metaplex-foundation/metaplex-program-library/blob/master/hydra/program/README.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nyarn run amman:start\nyarn test\n```\n\n----------------------------------------\n\nTITLE: One-Command Test Execution with Yarn Mega-Test - Shell\nDESCRIPTION: Convenience command (presumably defined in project scripts) that handles both starting the test validator and running the tests in a single operation. Useful for rapid development cycles and minimizing repetitive commands. Assumes the existence of a yarn script called mega-test.\nSOURCE: https://github.com/metaplex-foundation/metaplex-program-library/blob/master/hydra/program/README.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nyarn run mega-test\n```\n\n----------------------------------------\n\nTITLE: Hydra Program Build and Validator Workflow - Shell\nDESCRIPTION: Compiles Hydra with Anchor, optionally runs the API code generation, and starts the local validator using Amman. This workflow conveniently rebuilds code and refreshes the testing environment, ensuring all recent changes are deployed to the local cluster. Should be run after changes to the Hydra contract code.\nSOURCE: https://github.com/metaplex-foundation/metaplex-program-library/blob/master/hydra/program/README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nanchor build //Optional as the next commant runs anchor build for you\nyarn run api:gen\nyarn run amman:start\n```\n\n----------------------------------------\n\nTITLE: Generating SDK and Starting Local Validator with Yarn - Shell\nDESCRIPTION: Runs the API code generator, then starts the Amman local test validator. These commands recompile the program and spin up the local test environment including the freshly built .so files and any referenced programs (as specified in .ammanrc.cjs). Must be run whenever you want to test code changes in an isolated local blockchain instance.\nSOURCE: https://github.com/metaplex-foundation/metaplex-program-library/blob/master/hydra/program/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn run api:gen\nyarn run amman:start\n```\n\n----------------------------------------\n\nTITLE: Running Hydra SDK and Program Tests with Yarn - Shell\nDESCRIPTION: Runs the project's test suite using Yarn. Assumes the local validator is running; otherwise, prompts the user to start it separately. This command uses ts-node/register to enable JavaScript/TypeScript debugging and breakpoints, and is suitable for verifying program and SDK logic.\nSOURCE: https://github.com/metaplex-foundation/metaplex-program-library/blob/master/hydra/program/README.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nyarn test\n```\n\n----------------------------------------\n\nTITLE: Running Local Tests for MPL Fixed Price Sale using Yarn (Shell)\nDESCRIPTION: This sequence of commands is used to run the test suite for the `mpl-fixed-price-sale` package locally. `yarn amman:start` initiates the local testing environment (likely a Solana validator via Amman), `yarn build` compiles the package, and `yarn test` executes the tests.\nSOURCE: https://github.com/metaplex-foundation/metaplex-program-library/blob/master/fixed-price-sale/js/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn amman:start\nyarn build\nyarn test\n```\n\n----------------------------------------\n\nTITLE: Watching and Building the Hydra SDK - Shell\nDESCRIPTION: Invokes the watch script to monitor and rebuild the Hydra SDK automatically upon file changes in the packages/sdk directory. Ensures generated code stays up-to-date for immediate use in applications or test environments. Requires prior project dependency installation and a functional file watcher.\nSOURCE: https://github.com/metaplex-foundation/metaplex-program-library/blob/master/hydra/program/README.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nyarn run watch\n```\n\n----------------------------------------\n\nTITLE: Generating Auction House SDK from Rust Contract (Shell)\nDESCRIPTION: This command utilizes Yarn to regenerate the Auction House SDK components based on the updated Rust contract. Currently, it generates the IDL JSON file, with plans to generate TypeScript definitions and SDK code in the future. This is a necessary step during development after modifying the Rust contract.\nSOURCE: https://github.com/metaplex-foundation/metaplex-program-library/blob/master/auction-house/js/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn api:gen\n```\n\n----------------------------------------\n\nTITLE: Generating SDK from Rust Contract using Yarn (Shell)\nDESCRIPTION: This command is used during development to update the generated SDK when the underlying Rust contract has been modified. Currently, it generates the IDL (Interface Description Language) JSON file, with plans to generate TypeScript definitions and SDK code in the future.\nSOURCE: https://github.com/metaplex-foundation/metaplex-program-library/blob/master/fixed-price-sale/js/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn api:gen\n```\n\n----------------------------------------\n\nTITLE: Generating mpl-gumdrop SDK API Definitions (Shell)\nDESCRIPTION: This shell command utilizes Yarn to run the `gen:api` script, which is responsible for regenerating the SDK artifacts based on the Rust contract. Currently, this command primarily generates the Interface Definition Language (IDL) JSON file, essential for interacting with the contract. Executing this is required after modifying the Rust contract to ensure the SDK reflects the latest changes.\nSOURCE: https://github.com/metaplex-foundation/metaplex-program-library/blob/master/gumdrop/js/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn gen:api\n```\n\n----------------------------------------\n\nTITLE: Generating API Types and IDL - Shell\nDESCRIPTION: This shell command enables developers to regenerate the IDL JSON file after updating the Rust contract. It utilizes the project's npm/yarn task runner (yarn) to execute the 'gen:api' script, which at present only generates the schema file (IDL). Required dependencies include Node.js, Yarn, and any configuration set for the 'gen:api' script. It takes no parameters and outputs updated generated files in the expected location, ensuring synchronization between contract changes and API types.\nSOURCE: https://github.com/metaplex-foundation/metaplex-program-library/blob/master/candy-machine/js/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nyarn gen:api\n```\n\n----------------------------------------\n\nTITLE: Generating SDK Code for mpl-nft-packs using Yarn (Shell)\nDESCRIPTION: This command runs the `gen:api` script defined in the project's `package.json` (likely using Yarn). It's used during development to update the generated SDK code when the underlying Rust contract for NFT Packs has been modified. After running this, wrapper code and tests might need updating.\nSOURCE: https://github.com/metaplex-foundation/metaplex-program-library/blob/master/nft-packs/js/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn gen:api\n```\n\n----------------------------------------\n\nTITLE: Generating Token Entangler SDK Artifacts using Yarn (Shell)\nDESCRIPTION: This shell command uses yarn to execute the `gen:api` script defined in the package. This script is responsible for updating the generated SDK artifacts, currently the IDL JSON file, based on changes made to the Rust contract code. This ensures the SDK client stays synchronized with the on-chain program's interface.\nSOURCE: https://github.com/metaplex-foundation/metaplex-program-library/blob/master/token-entangler/js/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn gen:api\n```\n\n----------------------------------------\n\nTITLE: Generating the Hydra SDK API with Yarn - Shell\nDESCRIPTION: This snippet runs the Yarn script 'gen:api' to regenerate the Hydra SDK API, ensuring the SDK matches the latest version of the Rust contract. Before executing, developers must have Yarn installed and project dependencies set up. The command should be run from the project's root directory and is typically required after making changes to the contract.\nSOURCE: https://github.com/metaplex-foundation/metaplex-program-library/blob/master/hydra/js/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn gen:api\n```\n\n----------------------------------------\n\nTITLE: Running Auction House BPF Tests with Debug Logging (Shell)\nDESCRIPTION: This shell command sequence is designed to run the BPF tests for the Auction House program. It first clears the terminal (`clear`), then sets the `RUST_LOG` environment variable to `debug` for verbose logging, and executes the tests using `cargo test-bpf`. The `--bpf-out-dir ../../test-programs/` flag tells the test runner where to find pre-built dependency programs (like `mpl-token-metadata.so`). Standard error is redirected to standard output (`2>&1`), and the combined output is piped to `grep -v CounterPoint` to filter out lines containing 'CounterPoint'. This command should be run from the `metaplex-program-library/auction-house/program` directory after successfully building the `token-metadata` program. Requires `clear`, `cargo`, `cargo test-bpf`, `grep`, and the previously built `mpl-token-metadata.so` in the specified output directory.\nSOURCE: https://github.com/metaplex-foundation/metaplex-program-library/blob/master/auction-house/program/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nclear && RUST_LOG=debug cargo test-bpf --bpf-out-dir ../../test-programs/ 2>&1 | grep -v CounterPoint\n```\n\n----------------------------------------\n\nTITLE: Defining Withdraw Instruction Interface in Anchor - Rust\nDESCRIPTION: Specifies the 'withdraw' instruction for the auctioneer program CPI, listing all accounts required and arguments used, such as escrow payment bump and withdrawal amount. Dependencies include Anchor framework macros and Solana account type definitions. Inputs include various account descriptors (e.g., auctionHouseProgram, receiptAccount), with constraints like required mutability for fund movement, and arguments for bump seeds and lamport amounts. Output is a CPI call-ready instruction schema; intended for integration with on-chain Rust programs interacting via Anchor.\nSOURCE: https://github.com/metaplex-foundation/metaplex-program-library/blob/master/auctioneer/js/idl/auctioneer.txt#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n      \"name\": \"withdraw\",\n      \"accounts\": [\n        { \"name\": \"auctionHouseProgram\", \"isMut\": false, \"isSigner\": false },\n        { \"name\": \"wallet\", \"isMut\": false, \"isSigner\": false },\n        { \"name\": \"receiptAccount\", \"isMut\": true, \"isSigner\": false },\n        { \"name\": \"escrowPaymentAccount\", \"isMut\": true, \"isSigner\": false },\n        { \"name\": \"treasuryMint\", \"isMut\": false, \"isSigner\": false },\n        { \"name\": \"authority\", \"isMut\": false, \"isSigner\": false },\n        { \"name\": \"auctionHouse\", \"isMut\": false, \"isSigner\": false },\n        { \"name\": \"auctionHouseFeeAccount\", \"isMut\": true, \"isSigner\": false },\n        { \"name\": \"auctioneerAuthority\", \"isMut\": false, \"isSigner\": false },\n        { \"name\": \"ahAuctioneerPda\", \"isMut\": false, \"isSigner\": false },\n        { \"name\": \"tokenProgram\", \"isMut\": false, \"isSigner\": false },\n        { \"name\": \"systemProgram\", \"isMut\": false, \"isSigner\": false },\n        { \"name\": \"ataProgram\", \"isMut\": false, \"isSigner\": false },\n        { \"name\": \"rent\", \"isMut\": false, \"isSigner\": false }\n      ],\n      \"args\": [\n        { \"name\": \"escrowPaymentBump\", \"type\": \"u8\" },\n        { \"name\": \"amount\", \"type\": \"u64\" }\n      ]\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining ExecuteSale Instruction Interface in Anchor - Rust\nDESCRIPTION: Details the 'executeSale' Anchor instruction, allowing an auctioneer to fulfill a sale with transfer of tokens and payments between buyer and seller. This schema lists all involved accounts and several bump arguments, plus sale details (buyerPrice, tokenSize). The accounts ensure atomic transfer of SPL tokens and SOL between parties. Output is a JSON-compatible representation ready for Anchor CPI or frontend SW scaffolding.\nSOURCE: https://github.com/metaplex-foundation/metaplex-program-library/blob/master/auctioneer/js/idl/auctioneer.txt#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n      \"name\": \"executeSale\",\n      \"accounts\": [\n        { \"name\": \"auctionHouseProgram\", \"isMut\": false, \"isSigner\": false },\n        { \"name\": \"listingConfig\", \"isMut\": false, \"isSigner\": false },\n        { \"name\": \"buyer\", \"isMut\": true, \"isSigner\": false },\n        { \"name\": \"seller\", \"isMut\": true, \"isSigner\": false },\n        { \"name\": \"tokenAccount\", \"isMut\": true, \"isSigner\": false },\n        { \"name\": \"tokenMint\", \"isMut\": false, \"isSigner\": false },\n        { \"name\": \"metadata\", \"isMut\": false, \"isSigner\": false },\n        { \"name\": \"treasuryMint\", \"isMut\": false, \"isSigner\": false },\n        { \"name\": \"escrowPaymentAccount\", \"isMut\": true, \"isSigner\": false },\n        { \"name\": \"sellerPaymentReceiptAccount\", \"isMut\": true, \"isSigner\": false },\n        { \"name\": \"buyerReceiptTokenAccount\", \"isMut\": true, \"isSigner\": false },\n        { \"name\": \"authority\", \"isMut\": false, \"isSigner\": false },\n        { \"name\": \"auctionHouse\", \"isMut\": false, \"isSigner\": false },\n        { \"name\": \"auctionHouseFeeAccount\", \"isMut\": true, \"isSigner\": false },\n        { \"name\": \"auctionHouseTreasury\", \"isMut\": true, \"isSigner\": false },\n        { \"name\": \"buyerTradeState\", \"isMut\": true, \"isSigner\": false },\n        { \"name\": \"sellerTradeState\", \"isMut\": true, \"isSigner\": false },\n        { \"name\": \"freeTradeState\", \"isMut\": true, \"isSigner\": false },\n        { \"name\": \"auctioneerAuthority\", \"isMut\": false, \"isSigner\": false },\n        { \"name\": \"ahAuctioneerPda\", \"isMut\": false, \"isSigner\": false },\n        { \"name\": \"tokenProgram\", \"isMut\": false, \"isSigner\": false },\n        { \"name\": \"systemProgram\", \"isMut\": false, \"isSigner\": false },\n        { \"name\": \"ataProgram\", \"isMut\": false, \"isSigner\": false },\n        { \"name\": \"programAsSigner\", \"isMut\": false, \"isSigner\": false },\n        { \"name\": \"rent\", \"isMut\": false, \"isSigner\": false }\n      ],\n      \"args\": [\n        { \"name\": \"escrowPaymentBump\", \"type\": \"u8\" },\n        { \"name\": \"freeTradeStateBump\", \"type\": \"u8\" },\n        { \"name\": \"programAsSignerBump\", \"type\": \"u8\" },\n        { \"name\": \"buyerPrice\", \"type\": \"u64\" },\n        { \"name\": \"tokenSize\", \"type\": \"u64\" }\n      ]\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining Cancel Instruction Interface in Anchor - Rust\nDESCRIPTION: Specifies the 'cancel' instruction, used to cancel a trade or listing in the auction house. Involves mutable access to wallet, tokenAccount, tradeState, and fee account to revert a sale or offer, with arguments for buyer price and token size. Relies on Anchor and Solana account constraints. The output specification defines all inputs needed for the CPI and trade cancellation execution.\nSOURCE: https://github.com/metaplex-foundation/metaplex-program-library/blob/master/auctioneer/js/idl/auctioneer.txt#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n      \"name\": \"cancel\",\n      \"accounts\": [\n        { \"name\": \"auctionHouseProgram\", \"isMut\": false, \"isSigner\": false },\n        { \"name\": \"wallet\", \"isMut\": true, \"isSigner\": false },\n        { \"name\": \"tokenAccount\", \"isMut\": true, \"isSigner\": false },\n        { \"name\": \"tokenMint\", \"isMut\": false, \"isSigner\": false },\n        { \"name\": \"authority\", \"isMut\": false, \"isSigner\": false },\n        { \"name\": \"auctionHouse\", \"isMut\": false, \"isSigner\": false },\n        { \"name\": \"auctionHouseFeeAccount\", \"isMut\": true, \"isSigner\": false },\n        { \"name\": \"tradeState\", \"isMut\": true, \"isSigner\": false },\n        { \"name\": \"auctioneerAuthority\", \"isMut\": false, \"isSigner\": false },\n        { \"name\": \"ahAuctioneerPda\", \"isMut\": false, \"isSigner\": false },\n        { \"name\": \"tokenProgram\", \"isMut\": false, \"isSigner\": false }\n      ],\n      \"args\": [\n        { \"name\": \"buyerPrice\", \"type\": \"u64\" },\n        { \"name\": \"tokenSize\", \"type\": \"u64\" }\n      ]\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining Deposit Instruction Interface in Anchor - Rust\nDESCRIPTION: Describes the 'deposit' instruction interface, which handles depositing funds in an auction house escrow via the auctioneer program. Requires several account types, notably with the wallet as a signer, and arguments for bump seed and amount. Used with Anchor/Solana frameworks, and is expected to be consumed by on-chain or off-chain clients building Anchor transactions with correct accounts and argument ordering. Inputs are accounts facilitating fund and authority flows; outputs are CPI-compliant Anchor instruction representations.\nSOURCE: https://github.com/metaplex-foundation/metaplex-program-library/blob/master/auctioneer/js/idl/auctioneer.txt#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n      \"name\": \"deposit\",\n      \"accounts\": [\n        { \"name\": \"auctionHouseProgram\", \"isMut\": false, \"isSigner\": false },\n        { \"name\": \"wallet\", \"isMut\": false, \"isSigner\": true },\n        { \"name\": \"paymentAccount\", \"isMut\": true, \"isSigner\": false },\n        { \"name\": \"transferAuthority\", \"isMut\": false, \"isSigner\": false },\n        { \"name\": \"escrowPaymentAccount\", \"isMut\": true, \"isSigner\": false },\n        { \"name\": \"treasuryMint\", \"isMut\": false, \"isSigner\": false },\n        { \"name\": \"authority\", \"isMut\": false, \"isSigner\": false },\n        { \"name\": \"auctionHouse\", \"isMut\": false, \"isSigner\": false },\n        { \"name\": \"auctionHouseFeeAccount\", \"isMut\": true, \"isSigner\": false },\n        { \"name\": \"auctioneerAuthority\", \"isMut\": false, \"isSigner\": false },\n        { \"name\": \"ahAuctioneerPda\", \"isMut\": false, \"isSigner\": false },\n        { \"name\": \"tokenProgram\", \"isMut\": false, \"isSigner\": false },\n        { \"name\": \"systemProgram\", \"isMut\": false, \"isSigner\": false },\n        { \"name\": \"rent\", \"isMut\": false, \"isSigner\": false }\n      ],\n      \"args\": [\n        { \"name\": \"escrowPaymentBump\", \"type\": \"u8\" },\n        { \"name\": \"amount\", \"type\": \"u64\" }\n      ]\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining Solana Anchor Instructions - JSON\nDESCRIPTION: This snippet defines instruction schemas (`buy`) for a Solana program using Anchor-compatible JSON format. It specifies required accounts (with mutability and signer roles) and argument types for each instruction. The `buy` instruction, for example, requires detailed account inputs and multiple arguments (including bumps and price information), allowing the Anchor framework and clients to serialize calls accordingly. Dependencies include the Solana Anchor runtime and correct deployment on Solana. Inputs must match the designated types and account requirements, and output will depend on the program logic during execution.\nSOURCE: https://github.com/metaplex-foundation/metaplex-program-library/blob/master/auctioneer/js/idl/auctioneer.txt#_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n{\n      \"name\": \"buy\",\n      \"accounts\": [\n        {\n          \"name\": \"auctionHouseProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"listingConfig\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"seller\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"wallet\",\n          \"isMut\": false,\n          \"isSigner\": true\n        },\n        {\n          \"name\": \"paymentAccount\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"transferAuthority\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"treasuryMint\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"tokenAccount\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"metadata\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"escrowPaymentAccount\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"authority\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"auctionHouse\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"auctionHouseFeeAccount\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"buyerTradeState\",\n          \"isMut\": true,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"auctioneerAuthority\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"ahAuctioneerPda\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"tokenProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"systemProgram\",\n          \"isMut\": false,\n          \"isSigner\": false\n        },\n        {\n          \"name\": \"rent\",\n          \"isMut\": false,\n          \"isSigner\": false\n        }\n      ],\n      \"args\": [\n        {\n          \"name\": \"tradeStateBump\",\n          \"type\": \"u8\"\n        },\n        {\n          \"name\": \"escrowPaymentBump\",\n          \"type\": \"u8\"\n        },\n        {\n          \"name\": \"buyerPrice\",\n          \"type\": \"u64\"\n        },\n        {\n          \"name\": \"tokenSize\",\n          \"type\": \"u64\"\n        }\n      ]\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining Solana Anchor Account Structure - JSON\nDESCRIPTION: This snippet outlines the `ListingConfig` account type in JSON, specifying its fields and associated types. It follows the Anchor account struct pattern for Solana programs, featuring timestamps, a nested structure for the highest bid, and an 8-bit bump for PDA derivation. Correct usage requires that on-chain account data matches this structure exactly, and that dependent programs correctly serialize/deserialize the account when reading or writing state.\nSOURCE: https://github.com/metaplex-foundation/metaplex-program-library/blob/master/auctioneer/js/idl/auctioneer.txt#_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n{\n      \"name\": \"ListingConfig\",\n      \"type\": {\n        \"kind\": \"struct\",\n        \"fields\": [\n          {\n            \"name\": \"startTime\",\n            \"type\": {\n              \"defined\": \"UnixTimestamp\"\n            }\n          },\n          {\n            \"name\": \"endTime\",\n            \"type\": {\n              \"defined\": \"UnixTimestamp\"\n            }\n          },\n          {\n            \"name\": \"highestBid\",\n            \"type\": {\n              \"defined\": \"Bid\"\n            }\n          },\n          {\n            \"name\": \"bump\",\n            \"type\": \"u8\"\n          }\n        ]\n      }\n    }\n```\n\n----------------------------------------\n\nTITLE: Building a Specific Metaplex Program for Rust Testing (Bash)\nDESCRIPTION: This Bash command executes the `build.sh` script located in the project root to compile a specific Metaplex program (in this example, `auction-house`). The script builds the program's shared object file (`.so`) required for Rust integration tests and places it in the `test-programs` directory at the project root. Replace `auction-house` with the desired program name or `all` to build all programs.\nSOURCE: https://github.com/metaplex-foundation/metaplex-program-library/blob/master/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./build.sh auction-house\n```\n\n----------------------------------------\n\nTITLE: Building the Token Metadata BPF Program with Cargo - Shell\nDESCRIPTION: Compiles the Token Metadata Solana program into a Berkeley Packet Filter (.so) file for use by the local cluster. Requires Rust/Cargo/BPF toolchain and should be run from the token-metadata/program directory. The output is placed in the test-programs folder, ready for local deployments or validator use.\nSOURCE: https://github.com/metaplex-foundation/metaplex-program-library/blob/master/hydra/program/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncd metaplex-program-library/token-metadata/program\ncargo build-bpf --bpf-out-dir ../../test-programs/\n```\n\n----------------------------------------\n\nTITLE: Defining Solana Anchor Type Structs - JSON\nDESCRIPTION: This snippet captures the `Bid` struct type, enumerating its fields and types. The struct is reusable across instructions or accounts, enforcing composability and type safety in Anchor programs. Both the `amount` and the associated `buyerTradeState` public key are required for bid representation; clients must ensure values respect on-chain type limitations.\nSOURCE: https://github.com/metaplex-foundation/metaplex-program-library/blob/master/auctioneer/js/idl/auctioneer.txt#_snippet_6\n\nLANGUAGE: JSON\nCODE:\n```\n{\n      \"name\": \"Bid\",\n      \"type\": {\n        \"kind\": \"struct\",\n        \"fields\": [\n          {\n            \"name\": \"amount\",\n            \"type\": \"u64\"\n          },\n          {\n            \"name\": \"buyerTradeState\",\n            \"type\": \"publicKey\"\n          }\n        ]\n      }\n    }\n```\n\n----------------------------------------\n\nTITLE: Building Token Metadata BPF Program for Testing (Shell)\nDESCRIPTION: This shell command utilizes `cargo build-bpf` to compile the Solana program located in the current directory (expected to be `metaplex-program-library/token-metadata/program`) into a BPF shared object (`.so`) file. The `--bpf-out-dir ../../test-programs/` flag specifies that the compiled output (`mpl-token-metadata.so`) should be placed in the `test-programs` directory located two levels up from the current directory. This build step is a prerequisite for running tests in other programs, like Auction House, that depend on `token-metadata`. Requires the Rust toolchain, `cargo`, and the `cargo-build-bpf` utility.\nSOURCE: https://github.com/metaplex-foundation/metaplex-program-library/blob/master/auction-house/program/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo build-bpf --bpf-out-dir ../../test-programs/\n```\n\n----------------------------------------\n\nTITLE: Defining Solana Anchor Custom Errors - JSON\nDESCRIPTION: This JSON snippet enumerates program-specific error codes and messages, as used in Anchor-driven Solana smart contracts. Each code maps to a named error carrying a user-facing message, enforcing safety and providing clear runtime feedback. All constraints, such as invalid bumps, auction not started, auction ended, and low bid, are explicitly captured for use during program execution and client-side error handling.\nSOURCE: https://github.com/metaplex-foundation/metaplex-program-library/blob/master/auctioneer/js/idl/auctioneer.txt#_snippet_7\n\nLANGUAGE: JSON\nCODE:\n```\n[\n    {\n      \"code\": 6000,\n      \"name\": \"BumpSeedNotInHashMap\",\n      \"msg\": \"Bump seed not in hash map\"\n    },\n    {\n      \"code\": 6001,\n      \"name\": \"AuctionNotStarted\",\n      \"msg\": \"Auction has not started yet\"\n    },\n    {\n      \"code\": 6002,\n      \"name\": \"AuctionEnded\",\n      \"msg\": \"Auction has ended\"\n    },\n    {\n      \"code\": 6003,\n      \"name\": \"BidTooLow\",\n      \"msg\": \"The bid was lower than the highest bid.\"\n    }\n  ]\n```\n\n----------------------------------------\n\nTITLE: Defining Gating Config Schema - JSON\nDESCRIPTION: Illustrates the JSON structure for specifying gating configurations when creating or managing sales. Contains a collection identifier, an optional expiry flag, and an optional gating time (nullable). Required when setting up advanced access control logic for market participation via the CLI. Ensure that 'collection' is set to the appropriate identifier and adjust expire_on_use and gating_time according to use case.\nSOURCE: https://github.com/metaplex-foundation/metaplex-program-library/blob/master/fixed-price-sale/cli/README.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"collection\": \"...\",\n    \"expire_on_use\": false,\n    \"gating_time\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Creators Schema - JSON\nDESCRIPTION: Specifies the required JSON format for defining an array of creators with address and share values. Input is typically required when specifying ownership or profit distribution for a market. Each entry should include an 'address' (as a string wallet address) and 'share' (as a numerical percentage). Suitable for use with commands that require 'creators.json' as input, such as market or resource creation.\nSOURCE: https://github.com/metaplex-foundation/metaplex-program-library/blob/master/fixed-price-sale/cli/README.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n[\n    {\n        \"address\": \"...\",\n        \"share\": 30,\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Versioning and Publishing Metaplex SDK Packages using npm (Bash)\nDESCRIPTION: These commands are used sequentially from within a specific package's directory to manage its release cycle. `npm version <patch|minor|major>` increments the package version according to semantic versioning rules (patch, minor, or major bump), runs pre-version checks (build, test), commits the version bump, and tags the commit. `npm publish` runs pre-publish checks again and then publishes the package to the npm registry, followed by pushing the commit and tag to GitHub. These commands should only be run on an up-to-date master branch.\nSOURCE: https://github.com/metaplex-foundation/metaplex-program-library/blob/master/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm version <patch|minor|major>\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm publish\n```\n\n----------------------------------------\n\nTITLE: Starting Documentation Server for Editing with Yarn - Shell\nDESCRIPTION: Change directory into the packages/docs folder and start the documentation site locally using Yarn. Enables live editing and previewing of Hydra documentation as part of the overall developer workflow. Requires previous dependency installation within the docs package.\nSOURCE: https://github.com/metaplex-foundation/metaplex-program-library/blob/master/hydra/program/README.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ncd packages/docs\nyarn start\n```"
  }
]