[
  {
    "owner": "scylladb",
    "repo": "scylla-cdc-rust",
    "content": "TITLE: Setting up the Main Function with CDC Log Reader\nDESCRIPTION: Creates the main function that initializes a Scylla session, configures the CDC log reader with time bounds, and starts the reader. It demonstrates how to connect to the database and set up the log reader.\nSOURCE: https://github.com/scylladb/scylla-cdc-rust/blob/main/tutorial.md#2025-04-17_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nuse scylla::SessionBuilder;\nuse scylla_cdc::log_reader::CDCLogReaderBuilder;\nuse std::sync::Arc;\nuse std::time::SystemTime;\n\n#[tokio::main]\nasync fn main() -> anyhow::Result<()> {\n    let session = Arc::new(\n        SessionBuilder::new()\n            .known_node(\"127.0.0.1:9042\")\n            .build()\n            .await?,\n    );\n    let end = chrono::Duration::from_std(\n        SystemTime::now()\n            .duration_since(SystemTime::UNIX_EPOCH)\n            .unwrap(),\n    ).unwrap();\n    let start = end - chrono::Duration::seconds(360);\n    \n    let factory = Arc::new(TutorialConsumerFactory);\n    \n    let (_, handle) = CDCLogReaderBuilder::new()\n        .session(session)\n        .keyspace(\"ks\")\n        .table_name(\"t\")\n        .start_timestamp(start)\n        .end_timestamp(end)\n        .consumer_factory(factory)\n        .build()\n        .await\n        .expect(\"Creating the log reader failed!\");\n\n    handle.await\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CDCLogReader for Progress Saving in Rust for ScyllaDB CDC\nDESCRIPTION: Demonstrates how to configure CDCLogReader to enable progress saving and loading. It sets the checkpoint saver, enables saving and loading of progress, and specifies the pause duration between saves.\nSOURCE: https://github.com/scylladb/scylla-cdc-rust/blob/main/tutorial.md#2025-04-17_snippet_11\n\nLANGUAGE: rust\nCODE:\n```\nlet (log_reader, handle) = CDCLogReaderBuilder::new()\n    // ...\n    .should_save_progress(true) // Mark that we want to save progress.\n    .should_load_progress(true) // Mark that we want to start consuming CDC logs from the last saved checkpoint.\n    .pause_between_saves(time::Duration::from_millis(100)) // Save progress each 100 ms. If not specified, a default value of 10 seconds is used.\n    .checkpoint_saver(user_checkpoint_saver) // Use `user_checkpoint_saver to manage checkpoints.\n    .build();\n```\n\n----------------------------------------\n\nTITLE: Processing and Printing CDC Row Data\nDESCRIPTION: Enhanced implementation of the consume_cdc method that processes different types of CDC data including regular values, deleted values, and collection elements. It demonstrates how to access and interpret CDC log data.\nSOURCE: https://github.com/scylladb/scylla-cdc-rust/blob/main/tutorial.md#2025-04-17_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\nasync fn consume_cdc(&mut self, mut data: CDCRow<'_>) -> anyhow::Result<()> {\n    println!(\"_________\");\n    println!(\"Time UUID: {:?}, operation type: {:?}\", data.time, data.operation);\n    println!(\"pk: {}, ck: {}\",\n             data.take_value(\"pk\").unwrap().as_int().unwrap(),\n             data.take_value(\"ck\").unwrap().as_int().unwrap());\n    let v = match data.take_value(\"v\") {\n        Some(val) => Some(val.as_int().unwrap()),\n        None => None,\n    };\n    println!(\"v: {:?}, was deleted: {}\",\n             v,\n             data.is_value_deleted(\"v\"));\n    let vs = match data.take_value(\"vs\") {\n        Some(val) => Some(val.into_vec().unwrap()),\n        None => None,\n    };\n    println!(\"vs: {:?}, was deleted: {}, deleted elements: {:?}\",\n             vs,\n             data.is_value_deleted(\"vs\"),\n             data.take_deleted_elements(\"vs\"));\n    println!(\"_________\");\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with CDC Enabled in Cassandra/Scylla\nDESCRIPTION: CQL query to create a table with CDC (Change Data Capture) enabled. The table has a compound primary key and includes a collection type (set).\nSOURCE: https://github.com/scylladb/scylla-cdc-rust/blob/main/tutorial.md#2025-04-17_snippet_0\n\nLANGUAGE: cassandraql\nCODE:\n```\nCREATE TABLE ks.t (pk int, ck int, v int, vs set<int>, PRIMARY KEY (pk, ck)) WITH cdc = {'enabled': 'true'}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Consumer with Shared State Using Atomic Counter\nDESCRIPTION: Example of a Consumer implementation that maintains shared state across multiple consumer instances using an atomic counter wrapped in an Arc.\nSOURCE: https://github.com/scylladb/scylla-cdc-rust/blob/main/tutorial.md#2025-04-17_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nuse std::sync::atomic::{AtomicUsize, Ordering};\n\nstruct CountingConsumer {\n    counter: Arc<AtomicUsize>\n}\n\n#[async_trait]\nimpl Consumer for CountingConsumer {\n    async fn consume_cdc(&mut self, _: CDCRow<'_>) -> anyhow::Result<()> {\n        let curr = self.counter.fetch_add(1, Ordering::SeqCst);\n        println!(\"Row no.{}\", curr + 1);\n        Ok(())\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing the Consumer Trait with async-trait\nDESCRIPTION: Implementation of the Consumer trait for a CDC consumer using async-trait for asynchronous execution. This basic implementation just prints a message when consuming a CDC row.\nSOURCE: https://github.com/scylladb/scylla-cdc-rust/blob/main/tutorial.md#2025-04-17_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nuse anyhow;\nuse async_trait::async_trait;\nuse scylla_cdc::consumer::*;\n\nstruct TutorialConsumer;\n\n#[async_trait]\nimpl Consumer for TutorialConsumer {\n    async fn consume_cdc(&mut self, _data: CDCRow<'_>) -> anyhow::Result<()> {\n        println!(\"Hello, scylla-cdc!\");\n        Ok(())\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a ConsumerFactory for CDC Consumers\nDESCRIPTION: Implementation of the ConsumerFactory trait that creates new instances of the Consumer. The library creates one instance of the consumer per CDC stream.\nSOURCE: https://github.com/scylladb/scylla-cdc-rust/blob/main/tutorial.md#2025-04-17_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nstruct TutorialConsumerFactory;\n\n#[async_trait]\nimpl ConsumerFactory for TutorialConsumerFactory {\n    async fn new_consumer(&self) -> Box<dyn Consumer> {\n        Box::new(TutorialConsumer)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating TableBackedCheckpointSaver with Default TTL in Rust for ScyllaDB CDC\nDESCRIPTION: Demonstrates how to create a TableBackedCheckpointSaver instance with a default TTL of 7 days. This implementation uses ScyllaDB to store checkpoints.\nSOURCE: https://github.com/scylladb/scylla-cdc-rust/blob/main/tutorial.md#2025-04-17_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\nlet user_checkpoint_saver = Arc::new(\n    TableBackedCheckpointSaver::new_with_default_ttl(session, \"ks\", \"checkpoints\")\n        .await\n        .unwrap(),\n);\n```\n\n----------------------------------------\n\nTITLE: Creating TableBackedCheckpointSaver with Custom TTL in Rust for ScyllaDB CDC\nDESCRIPTION: Shows how to create a TableBackedCheckpointSaver instance with a custom TTL of 3600 seconds (one hour). This allows for more fine-grained control over checkpoint expiration.\nSOURCE: https://github.com/scylladb/scylla-cdc-rust/blob/main/tutorial.md#2025-04-17_snippet_10\n\nLANGUAGE: rust\nCODE:\n```\nlet ttl: i64 = 3600; // TTL of 3600 seconds (one hour).\nlet user_checkpoint_saver = Arc::new(\n    TableBackedCheckpointSaver::new(session, \"ks\", \"checkpoints\", ttl)\n        .await\n        .unwrap(),\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing CDCCheckpointSaver Trait in Rust for ScyllaDB CDC\nDESCRIPTION: Defines the CDCCheckpointSaver trait with methods for saving and loading checkpoints and generations. This trait is used to manage checkpoint persistence.\nSOURCE: https://github.com/scylladb/scylla-cdc-rust/blob/main/tutorial.md#2025-04-17_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\n#[async_trait]\npub trait CDCCheckpointSaver: Send + Sync {\n    async fn save_checkpoint(&self, checkpoint: &Checkpoint) -> anyhow::Result<()>;\n    async fn save_new_generation(&self, generation: &GenerationTimestamp) -> anyhow::Result<()>;\n    async fn load_last_generation(&self) -> anyhow::Result<Option<GenerationTimestamp>>;\n    async fn load_last_checkpoint(\n        &self,\n        stream_id: &StreamID,\n    ) -> anyhow::Result<Option<chrono::Duration>>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Checkpoint Struct in Rust for ScyllaDB CDC\nDESCRIPTION: Defines the Checkpoint struct used to identify progress in CDC log consumption. It includes timestamp, stream_id, and generation fields.\nSOURCE: https://github.com/scylladb/scylla-cdc-rust/blob/main/tutorial.md#2025-04-17_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\n#[non_exhaustive]\n#[derive(Clone, Debug, PartialEq, Eq)]\npub struct Checkpoint {\n    pub timestamp: Duration,\n    pub stream_id: StreamID,\n    pub generation: GenerationTimestamp,\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic CDC Consumer Struct in Rust\nDESCRIPTION: Defines a simple struct that will be used to implement the Consumer trait for processing CDC logs.\nSOURCE: https://github.com/scylladb/scylla-cdc-rust/blob/main/tutorial.md#2025-04-17_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nstruct TutorialConsumer;\n```"
  }
]