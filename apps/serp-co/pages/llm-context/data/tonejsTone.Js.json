[
  {
    "owner": "tonejs",
    "repo": "tone.js",
    "content": "TITLE: Creating a basic synth and playing a note\nDESCRIPTION: This JavaScript snippet demonstrates how to create a basic synthesizer using `Tone.Synth` and play a middle 'C' note for an eighth note duration. The `toDestination()` method connects the synth to the audio output, and `triggerAttackRelease()` starts and stops the note.\nSOURCE: https://github.com/tonejs/tone.js/blob/dev/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n//create a synth and connect it to the main output (your speakers)\nconst synth = new Tone.Synth().toDestination();\n\n//play a middle 'C' for the duration of an 8th note\nsynth.triggerAttackRelease(\"C4\", \"8n\");\n```\n\n----------------------------------------\n\nTITLE: Scheduling events with triggerAttackRelease\nDESCRIPTION: This JavaScript snippet shows how to use `triggerAttackRelease` to schedule multiple notes to play at specific times in the future. `Tone.now()` gets the current time, and notes are scheduled using relative times (now + 0.5, now + 1). The notes C4, E4, and G4 are played sequentially with an eighth-note duration.\nSOURCE: https://github.com/tonejs/tone.js/blob/dev/README.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst synth = new Tone.Synth().toDestination();\nconst now = Tone.now();\nsynth.triggerAttackRelease(\"C4\", \"8n\", now);\nsynth.triggerAttackRelease(\"E4\", \"8n\", now + 0.5);\nsynth.triggerAttackRelease(\"G4\", \"8n\", now + 1);\n```\n\n----------------------------------------\n\nTITLE: Creating a polyphonic synth with Tone.PolySynth\nDESCRIPTION: This JavaScript snippet shows how to create a polyphonic synthesizer using `Tone.PolySynth`. A `Tone.Synth` instance is passed as the first argument to `Tone.PolySynth`, creating a polyphonic synth that can play multiple notes simultaneously. The `triggerAttack` and `triggerRelease` methods are used to play and release multiple notes at specific times.\nSOURCE: https://github.com/tonejs/tone.js/blob/dev/README.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst synth = new Tone.PolySynth(Tone.Synth).toDestination();\nconst now = Tone.now();\nsynth.triggerAttack(\"D4\", now);\nsynth.triggerAttack(\"F4\", now + 0.5);\nsynth.triggerAttack(\"A4\", now + 1);\nsynth.triggerAttack(\"C5\", now + 1.5);\nsynth.triggerAttack(\"E5\", now + 2);\nsynth.triggerRelease([\"D4\", \"F4\", \"A4\", \"C5\", \"E5\"], now + 4);\n```\n\n----------------------------------------\n\nTITLE: Loading and playing a sample with Tone.Player\nDESCRIPTION: This JavaScript snippet demonstrates how to load and play an audio sample using `Tone.Player`. The URL of the audio file is passed to the `Tone.Player` constructor. The `toDestination()` method connects the player to the audio output. `Tone.loaded()` ensures that the audio file is fully loaded before calling `player.start()` to play the sample.\nSOURCE: https://github.com/tonejs/tone.js/blob/dev/README.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst player = new Tone.Player(\n\t\"https://tonejs.github.io/audio/berklee/gong_1.mp3\"\n).toDestination();\nTone.loaded().then(() => {\n\tplayer.start();\n});\n```\n\n----------------------------------------\n\nTITLE: Connecting a player to effects in parallel\nDESCRIPTION: This JavaScript snippet demonstrates how to connect a `Tone.Player` to multiple effects in parallel using `connect`. The player's output is connected to both a `Tone.Filter` and a `Tone.FeedbackDelay`, allowing the audio to pass through both effects simultaneously before reaching the audio output.\nSOURCE: https://github.com/tonejs/tone.js/blob/dev/README.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst player = new Tone.Player({\n\turl: \"https://tonejs.github.io/audio/drum-samples/loops/ominous.mp3\",\n\tautostart: true,\n});\nconst filter = new Tone.Filter(400, \"lowpass\").toDestination();\nconst feedbackDelay = new Tone.FeedbackDelay(0.125, 0.5).toDestination();\n\n// connect the player to the feedback delay and filter in parallel\nplayer.connect(filter);\nplayer.connect(feedbackDelay);\n```\n\n----------------------------------------\n\nTITLE: Logging the current AudioContext time\nDESCRIPTION: This JavaScript snippet demonstrates how to log the current AudioContext time using `Tone.now()` in an interval. `setInterval` is used to repeatedly call the console.log function every 100 milliseconds, displaying the current audio time in seconds. This provides a way to monitor the progression of the audio context's clock.\nSOURCE: https://github.com/tonejs/tone.js/blob/dev/README.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nsetInterval(() => console.log(Tone.now()), 100);\n```\n\n----------------------------------------\n\nTITLE: Triggering attack and release separately\nDESCRIPTION: This JavaScript snippet demonstrates how to trigger the attack and release of a note separately using `triggerAttack` and `triggerRelease` methods. `Tone.now()` gets the current audio context time, which is used to schedule the attack and release events. The note 'C4' is triggered immediately and released after 1 second.\nSOURCE: https://github.com/tonejs/tone.js/blob/dev/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst synth = new Tone.Synth().toDestination();\nconst now = Tone.now();\n// trigger the attack immediately\nsynth.triggerAttack(\"C4\", now);\n// wait one second before triggering the release\nsynth.triggerRelease(now + 1);\n```\n\n----------------------------------------\n\nTITLE: Connecting a player to a distortion effect\nDESCRIPTION: This JavaScript snippet demonstrates how to connect a `Tone.Player` to a `Tone.Distortion` effect. A `Tone.Player` is created with a looping audio sample, and a `Tone.Distortion` effect is created and connected to the audio output. The `player.connect(distortion)` line routes the audio from the player through the distortion effect before it reaches the speakers.\nSOURCE: https://github.com/tonejs/tone.js/blob/dev/README.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst player = new Tone.Player({\n\turl: \"https://tonejs.github.io/audio/berklee/gurgling_theremin_1.mp3\",\n\tloop: true,\n\tautostart: true,\n});\n//create a distortion effect\nconst distortion = new Tone.Distortion(0.4).toDestination();\n//connect a player to the distortion\nplayer.connect(distortion);\n```\n\n----------------------------------------\n\nTITLE: Ramping oscillator frequency using a Signal\nDESCRIPTION: This JavaScript snippet demonstrates how to control the frequency of an `Oscillator` using a `Signal`. The `osc.frequency.value` is set to \"C4\" initially, and then `osc.frequency.rampTo(\"C2\", 2)` is used to smoothly ramp the frequency to \"C2\" over 2 seconds. The oscillator starts and stops after 3 seconds.\nSOURCE: https://github.com/tonejs/tone.js/blob/dev/README.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst osc = new Tone.Oscillator().toDestination();\n// start at \"C4\"\nosc.frequency.value = \"C4\";\n// ramp to \"C2\" over 2 seconds\nosc.frequency.rampTo(\"C2\", 2);\n// start the oscillator for 2 seconds\nosc.start().stop(\"+3\");\n```\n\n----------------------------------------\n\nTITLE: Creating a sampler with Tone.Sampler\nDESCRIPTION: This JavaScript snippet demonstrates how to create a sampler using `Tone.Sampler`. The `urls` property maps note names to audio file URLs. The `release` property sets the release time for the samples. `baseUrl` provides the base URL for the audio files.  `Tone.loaded()` ensures all the audio files are loaded before triggering the notes Eb4, G4 and Bb4.\nSOURCE: https://github.com/tonejs/tone.js/blob/dev/README.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst sampler = new Tone.Sampler({\n\turls: {\n\t\tC4: \"C4.mp3\",\n\t\t\"D#4\": \"Ds4.mp3\",\n\t\t\"F#4\": \"Fs4.mp3\",\n\t\tA4: \"A4.mp3\",\n\t},\n\trelease: 1,\n\tbaseUrl: \"https://tonejs.github.io/audio/salamander/\",\n}).toDestination();\n\nTone.loaded().then(() => {\n\tsampler.triggerAttackRelease([\"Eb4\", \"G4\", \"Bb4\"], 4);\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Tone.js using npm\nDESCRIPTION: This snippet demonstrates how to install Tone.js locally into a project using npm. It shows the commands for installing the latest stable version and the 'next' version. The `npm install` command is used to download and install the Tone.js package and its dependencies.\nSOURCE: https://github.com/tonejs/tone.js/blob/dev/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install tone      // Install the latest stable version\nnpm install tone@next // Or, alternatively, use the 'next' version\n```\n\n----------------------------------------\n\nTITLE: Importing Tone.js in JavaScript\nDESCRIPTION: This snippet shows how to import Tone.js into a JavaScript project using the `import` syntax. The `import * as Tone from \"tone\";` statement imports all exported members from the 'tone' module into the Tone namespace, allowing access to Tone.js functionalities.\nSOURCE: https://github.com/tonejs/tone.js/blob/dev/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Tone from \"tone\";\n```\n\n----------------------------------------\n\nTITLE: Running Selective Tests on Individual Files or Directories using npm with Flags (bash)\nDESCRIPTION: These commands allow running tests selectively on a single file or an entire directory by passing the respective flags --file or --dir to the npm test command. The --file flag specifies a single test file by name, while the --dir flag specifies a directory containing multiple tests. This provides targeted testing to save time during development.\nSOURCE: https://github.com/tonejs/tone.js/blob/dev/test/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test --file=Signal\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test --dir=signal\n```\n\n----------------------------------------\n\nTITLE: Running Full Tests Headlessly in Chrome and Firefox using npm (bash)\nDESCRIPTION: This command runs the full set of Tone.js tests in both Chrome and Firefox browsers in headless mode using npm. It requires Chrome and Firefox to be installed on the system. The tests execute automatically and results are reported to the console without launching visible browser windows.\nSOURCE: https://github.com/tonejs/tone.js/blob/dev/test/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Running Tests in Chrome Browser in Non-Headless Mode for Debugging using npm (bash)\nDESCRIPTION: This command runs the Tone.js tests inside a visible Chrome browser instance rather than headlessly. It enables developers to debug tests interactively from the browser console. This is useful for diagnosing test failures by inspecting runtime behavior.\nSOURCE: https://github.com/tonejs/tone.js/blob/dev/test/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test:browser\n```\n\n----------------------------------------\n\nTITLE: Including Tone.js in HTML using unpkg\nDESCRIPTION: This snippet demonstrates how to include Tone.js directly in an HTML document using unpkg.com. The `<script src=\"http://unpkg.com/tone\"></script>` tag includes the Tone.js library from the unpkg CDN, making its functionalities available to the webpage. It must be placed before other project scripts that depend on Tone.js.\nSOURCE: https://github.com/tonejs/tone.js/blob/dev/README.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"http://unpkg.com/tone\"></script>\n```\n\n----------------------------------------\n\nTITLE: Starting a Local Server with Python\nDESCRIPTION: This command starts a simple HTTP server using Python to serve the Tone.js examples. It allows users to access the examples through a web browser. The server runs on port 8000 by default.\nSOURCE: https://github.com/tonejs/tone.js/blob/dev/examples/README.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n$ python -m SimpleHTTPServer 8000\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with npm\nDESCRIPTION: This command installs the necessary dependencies for the Tone.js project using npm. It is a prerequisite for building and running the examples locally.\nSOURCE: https://github.com/tonejs/tone.js/blob/dev/examples/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ npm install\n```\n\n----------------------------------------\n\nTITLE: Scheduling events with Tone.Loop and Transport\nDESCRIPTION: This JavaScript snippet demonstrates how to schedule events using `Tone.Loop` and `Tone.Transport`. Two synths are created (`Tone.FMSynth` and `Tone.AMSynth`), and loops are used to trigger notes at specific intervals. The loops are started relative to the transport's time, and the transport's BPM is ramped up over time. The FMSynth plays every quarter note, while the AMSynth plays every off-quarter note.\nSOURCE: https://github.com/tonejs/tone.js/blob/dev/README.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// create two monophonic synths\nconst synthA = new Tone.FMSynth().toDestination();\nconst synthB = new Tone.AMSynth().toDestination();\n//play a note every quarter-note\nconst loopA = new Tone.Loop((time) => {\n\tsynthA.triggerAttackRelease(\"C2\", \"8n\", time);\n}, \"4n\").start(0);\n//play another note every off quarter-note, by starting it \"8n\"\nconst loopB = new Tone.Loop((time) => {\n\tsynthB.triggerAttackRelease(\"C4\", \"8n\", time);\n}, \"4n\").start(\"8n\");\n// all loops start when the Transport is started\nTone.getTransport().start();\n// ramp up to 800 bpm over 10 seconds\nTone.getTransport().bpm.rampTo(800, 10);\n```\n\n----------------------------------------\n\nTITLE: Starting Audio with Tone.start()\nDESCRIPTION: This JavaScript snippet demonstrates how to start the audio context using `Tone.start()` in response to a user click event. The event listener is attached to a button element, and when the button is clicked, `Tone.start()` is called. The `await` keyword ensures that the audio context is fully started before proceeding. A console log confirms that the audio is ready.\nSOURCE: https://github.com/tonejs/tone.js/blob/dev/README.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n//attach a click listener to a play button\ndocument.querySelector(\"button\")?.addEventListener(\"click\", async () => {\n\tawait Tone.start();\n\tconsole.log(\"audio is ready\");\n});\n```\n\n----------------------------------------\n\nTITLE: Building the project with npm\nDESCRIPTION: This command builds the Tone.js project using npm.  It compiles the necessary files to run the examples locally. This must be executed after installing the dependencies.\nSOURCE: https://github.com/tonejs/tone.js/blob/dev/examples/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n$ npm run build\n```"
  }
]